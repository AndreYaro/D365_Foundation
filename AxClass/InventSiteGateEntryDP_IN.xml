<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteGateEntryDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSiteGateEntryDP_IN</c> class provides implementation of a data provider class for gate entry report.
/// </summary>
[SRSReportParameterAttribute(classStr(InventSiteGateEntryContract_IN))]
class InventSiteGateEntryDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    InventGateEntryHeaderFooterTmp_IN   gateEntryHeaderFooterTmp;
    InventSiteGateEntryTmp_IN   gateEntryTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventGateEntryHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>InventGateEntryHeaderFooterTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>InventGateEntryHeaderFooterTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(InventGateEntryHeaderFooterTmp_IN))]
    public InventGateEntryHeaderFooterTmp_IN getInventGateEntryHeaderFooterTmp()
    {
        select gateEntryHeaderFooterTmp;
        return gateEntryHeaderFooterTmp;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getInventSiteGateEntryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>InventSiteGateEntryTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>InventSiteGateEntryTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(InventSiteGateEntryTmp_IN))]
    public InventSiteGateEntryTmp_IN getInventSiteGateEntryTmp()
    {
        select gateEntryTmp;
        return gateEntryTmp;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertIntoInventGateEntryHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the gate entry header information.
    /// </summary>
    /// <param name="_inventSiteGateEntryRecId">
    /// The <c>InventSiteGateEntryRecId_IN</c> record id that has the gate entry header information.
    /// </param>
    private void insertIntoInventGateEntryHeaderFooterTmp(InventSiteGateEntryRecId_IN _inventSiteGateEntryRecId)
    {
        InventSiteGateEntry_IN gateEntry = InventSiteGateEntry_IN::find(_inventSiteGateEntryRecId);
        gateEntryHeaderFooterTmp.ApproverEmployeeName = HcmWorker::find(gateEntry.ApproverEmployee).name();
        gateEntryHeaderFooterTmp.ArrivalDateAndTime = gateEntry.ArrivalDateAndTime;
        gateEntryHeaderFooterTmp.ChallanDate = gateEntry.ChallanDate;
        gateEntryHeaderFooterTmp.ChallanNumber = gateEntry.ChallanNumber;
        gateEntryHeaderFooterTmp.CompanyAddress = CompanyInfo::find().postalAddress().Address;
        gateEntryHeaderFooterTmp.CompanyName = CompanyInfo::find().Name;
        gateEntryHeaderFooterTmp.Description = gateEntry.Description;
        gateEntryHeaderFooterTmp.DriverMobilePhone = gateEntry.DriverMobilePhone;
        gateEntryHeaderFooterTmp.EntryId = gateEntry.EntryId;
        gateEntryHeaderFooterTmp.ExitDateAndTime = gateEntry.ExitDateAndTime;
        gateEntryHeaderFooterTmp.GateId = InventSiteGate_IN::find(gateEntry.InventSiteGate).GateId;
        gateEntryHeaderFooterTmp.InventLocationId = gateEntry.InventLocationId;
        gateEntryHeaderFooterTmp.OriginCity = gateEntry.OriginCity;
        gateEntryHeaderFooterTmp.ReferenceDocumentType = enum2str(gateEntry.ReferenceDocumentType);

        gateEntryHeaderFooterTmp.ReferencePartyId = this.getReferencePartyId(gateEntry);

        gateEntryHeaderFooterTmp.RetrunableGatePassNumber = gateEntry.RetrunableGatePassNumber;
        gateEntryHeaderFooterTmp.SiteId = InventSiteGate_IN::find(gateEntry.InventSiteGate).SiteId;
        gateEntryHeaderFooterTmp.TransportationCompanyName = gateEntry.TransportationCompanyName;
        gateEntryHeaderFooterTmp.TransportationDriverName = gateEntry.TransportationDriverName;
        gateEntryHeaderFooterTmp.TransportationReceiptDate = gateEntry.TransportationReceiptDate;
        gateEntryHeaderFooterTmp.TransportationReceiptNumber = gateEntry.TransportationReceiptNumber;
        gateEntryHeaderFooterTmp.Type = enum2str(gateEntry.Type);
        gateEntryHeaderFooterTmp.Status = enum2str(gateEntry.Status);
        gateEntryHeaderFooterTmp.VehicleNumber = gateEntry.VehicleNumber;
        gateEntryHeaderFooterTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferencePartyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference partyId for gate entry header</c>
    /// </summary>
    /// <param name = "_gateEntry">record in table <c>InventSiteGateEntry_IN</c>that has the gate entry header information</param>
    /// <returns>reference partyId for gate entry header</returns>
    protected InventSiteGateRefPartyId_IN getReferencePartyId(InventSiteGateEntry_IN _gateEntry)
    {
        InventSiteGateRefPartyId_IN refPartyId;
        switch (_gateEntry.ReferenceDocumentType)
        {
            case InventSiteGateRefDocType_IN::PurchaseOrder:
            case InventSiteGateRefDocType_IN::PurchaseReturnOrder:
            case InventSiteGateRefDocType_IN::ReturnableGatePass:
            case InventSiteGateRefDocType_IN::ReturnableGatePassReturn:
                refPartyId = VendTable::find(_gateEntry.ReferencePartyId).name();
                break;

            case InventSiteGateRefDocType_IN::SalesOrder:
            case InventSiteGateRefDocType_IN::SalesReturnOrder:
                refPartyId = CustTable::find(_gateEntry.ReferencePartyId).name();
                break;

            case InventSiteGateRefDocType_IN::StockTransferIn:
            case InventSiteGateRefDocType_IN::StockTransferOut:
            case InventSiteGateRefDocType_IN::SubContract:
            case InventSiteGateRefDocType_IN::SubContractReturn:
                refPartyId = InventLocation::find(_gateEntry.ReferencePartyId).Name;
                break;
        }
        return refPartyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoInventSiteGateEntryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the gate entry detail information.
    /// </summary>
    /// <param name="_inventSiteGateEntryRecId">
    /// The <c>InventSiteGateEntryRecId_IN</c> record id that has the gate entry detail information.
    /// </param>
    private void insertIntoInventSiteGateEntryTmp(InventSiteGateEntryRecId_IN _inventSiteGateEntryRecId)
    {
        InventSiteGateEntryLine_IN inventSiteGateEntryLine;
        InventSiteGateEntryLine_IN  inventSiteGateEntryLineRGP;
        InventSiteGateEntry_IN  inventSiteGateEntry = InventSiteGateEntry_IN::find(_inventSiteGateEntryRecId);
        InventDim   inventDim;

        switch (inventSiteGateEntry.ReferenceDocumentType)
        {
            case InventSiteGateRefDocType_IN::Others :
            case InventSiteGateRefDocType_IN::ReturnableGatePass :
                insert_recordset gateEntryTmp(
                    ChallanQty,
                    Description,
                    InventoryUnit,
                    LineNum,
                    ItemId)
                select ChallanQty, Description, InventoryUnit, LineNum, ItemId from inventSiteGateEntryLine
                    where inventSiteGateEntryLine.InventSiteGateEntry == _inventSiteGateEntryRecId;
                break;

            case InventSiteGateRefDocType_IN::PurchaseOrder :
            case InventSiteGateRefDocType_IN::PurchaseReturnOrder :
            case InventSiteGateRefDocType_IN::SalesOrder :
            case InventSiteGateRefDocType_IN::SalesReturnOrder :
            case InventSiteGateRefDocType_IN::StockTransferIn :
            case InventSiteGateRefDocType_IN::StockTransferOut :
            case InventSiteGateRefDocType_IN::SubContract :
                insert_recordset gateEntryTmp(
                    ChallanQty,
                    Description,
                    InventoryUnit,
                    LineNum,
                    OrderId,
                    OrderQty,
                    ItemId,
                    configId,
                    inventBatchId,
                    InventColorId,
                    InventLocationId,
                    inventSerialId,
                    InventSiteId,
                    InventSizeId,
                    InventStyleId,
                    InventVersionId)
                select ChallanQty, Description, InventoryUnit, LineNum, OrderId, OrderQty, ItemId from inventSiteGateEntryLine
                    where inventSiteGateEntryLine.InventSiteGateEntry == _inventSiteGateEntryRecId
                    join configId, inventBatchId, InventColorId, InventLocationId, inventSerialId, InventSiteId, InventSizeId, InventStyleId, InventVersionId from inventDim
                        where inventDim.inventDimId == inventSiteGateEntryLine.InventDimId;
                break;

            case InventSiteGateRefDocType_IN::ReturnableGatePassReturn :
                insert_recordset gateEntryTmp(
                    ChallanQty,
                    Description,
                    InventoryUnit,
                    LineNum,
                    ItemId,
                    RetrunableGatePassNumber)
                select ChallanQty, Description, InventoryUnit, LineNum, ItemId from inventSiteGateEntryLine
                    where inventSiteGateEntryLine.InventSiteGateEntry == _inventSiteGateEntryRecId
                    join RetrunableGatePassNumber from inventSiteGateEntryLineRGP
                        where inventSiteGateEntryLineRGP.RecId == inventSiteGateEntryLine.OutwardGateId;
                break;

            case InventSiteGateRefDocType_IN::SubContractReturn :
                insert_recordset gateEntryTmp(
                    ChallanQty,
                    Description,
                    InventoryUnit,
                    LineNum,
                    OrderId,
                    OrderQty,
                    ItemId,
                    configId,
                    inventBatchId,
                    InventColorId,
                    InventLocationId,
                    inventSerialId,
                    InventSiteId,
                    InventSizeId,
                    InventStyleId,
                    InventVersionId,
                    RetrunableGatePassNumber)
                select ChallanQty, Description, InventoryUnit, LineNum, OrderId, OrderQty, ItemId from inventSiteGateEntryLine
                    where inventSiteGateEntryLine.InventSiteGateEntry == _inventSiteGateEntryRecId
                    join configId, inventBatchId, InventColorId, InventLocationId, inventSerialId, InventSiteId, InventSizeId, InventStyleId, InventVersionId from inventDim
                        where inventDim.inventDimId == inventSiteGateEntryLine.InventDimId
                        join RetrunableGatePassNumber from inventSiteGateEntryLineRGP
                            where inventSiteGateEntryLineRGP.RecId == inventSiteGateEntryLine.OutwardGateId;
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        InventSiteGateEntryContract_IN InventSiteGateEntryContract = this.parmDataContract() as InventSiteGateEntryContract_IN;
        this.insertIntoInventGateEntryHeaderFooterTmp(InventSiteGateEntryContract.parmInventSiteGateEntryRecId());
        this.insertIntoInventSiteGateEntryTmp(InventSiteGateEntryContract.parmInventSiteGateEntryRecId());
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
