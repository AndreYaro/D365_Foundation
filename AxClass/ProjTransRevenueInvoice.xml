<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransRevenueInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransRevenueInvoice extends ProjTransRevenue
{
    ProjInvoiceRevenue  projInvoiceRevenue;

    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    ProjCategoryId categoryId()
    {
        return projInvoiceRevenue.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projInvoiceRevenue.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault defaultDimension()
    {
        return projInvoiceRevenue.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return ProjProposalJour::find(projInvoiceRevenue.projInvoiceJour().ProposalId).FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to be posted to the general ledger.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST                   ret;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;
        ProjTrans                   projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueInvoice)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projInvoiceRevenueDetail
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                {
                    projTransSale = ProjTrans::newProjInvoiceRevenueSale(projInvoiceRevenue, projInvoiceRevenueDetail);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return ProjRevenueTrans::find(this.transId()).LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjInvoiceRevenue _projInvoiceRevenue)
    {
        projInvoiceRevenue  = _projInvoiceRevenue;

        super(_projInvoiceRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    ProjId projId()
    {
        return projInvoiceRevenue.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projInvoiceRevenue.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific revenue transaction.
    /// </remarks>
    public Qty qty()
    {
        return projInvoiceRevenue.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projInvoiceRevenue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projInvoiceRevenue.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projInvoiceRevenue.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueInvoice)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjInvoiceRevenue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projInvoiceRevenue.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projInvoiceRevenue.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    TransDate transDate()
    {
        return projInvoiceRevenue.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projInvoiceRevenue.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur                   ret;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;
        ProjTrans                   projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueInvoice)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projInvoiceRevenueDetail
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                {
                    projTransSale = ProjTrans::newProjInvoiceRevenueSale(projInvoiceRevenue, projInvoiceRevenueDetail);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransTxt txt()
    {
        return projInvoiceRevenue.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
