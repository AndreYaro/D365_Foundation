<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementsPeriodRptContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMovementsPeriodRptContract</c> class is the Data Contract class for the
///    <c>InventMovementsPeriod</c> SSRS report.
/// </summary>
[
    DataContract,
    SysOperationGroup('PrintOut', "@SYS12608", '2'),
    SysOperationGroup('Date', "@SYS7402", '1')
]
class InventMovementsPeriodRptContract implements SysOperationValidatable
{
    FromDate    fromDate;
    ToDate      toDate;

    boolean     totalsOnly;
    boolean     includeInternalTransfers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter fromDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter fromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationLabel(literalstr("@SYS5209")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeInternalTransfers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter includeInternalTransfers.
    /// </summary>
    /// <param name="_includeInternalTransfers">
    /// The new value of the datacontract parameter includeInternalTransfers; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter includeInternalTransfers.
    /// </returns>
    [
        DataMemberAttribute('IncludeInternalTransfers'),
        SysOperationLabel(literalstr("@InventoryIT:IncludeWarehouseManagementTransactions")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('2')
    ]
    public boolean parmIncludeInternalTransfers(boolean _includeInternalTransfers = includeInternalTransfers)
    {
        includeInternalTransfers = _includeInternalTransfers;
        return includeInternalTransfers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter toDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter toDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabel(literalstr("@SYS14656")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter totalsOnly.
    /// </summary>
    /// <param name="_totalsOnly">
    /// The new value of the datacontract parameter totalsOnly; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter totalsOnly.
    /// </returns>
    [
        DataMemberAttribute('TotalsOnly'),
        SysOperationLabel(literalstr("@InventoryIT:TotalsOnly")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('1')
    ]
    public boolean parmTotalsOnly(boolean _totalsOnly = totalsOnly)
    {
        totalsOnly = _totalsOnly;
        return totalsOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;
        if (!fromDate)
        {
            isValid = checkFailed(strFmt("@SYS84753", "@SYS5209"));
        }
        if (!toDate)
        {
            isValid = checkFailed(strFmt("@SYS84753", "@SYS14656"));
        }
        if (fromDate > toDate)
        {
            isValid = checkFailed(strFmt("@SYS300457", date2StrUsr(fromDate, DateFlags::FormatAll), date2StrUsr(toDate, DateFlags::FormatAll)));
        }
        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>