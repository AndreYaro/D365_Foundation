<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingIssueReservationUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventBlockingIssueReservationUpdate</c> class removes and reapplies the reservation
/// for the inventory blocking issue transactions when updating the blocking record.
/// </summary>
public class InventBlockingIssueReservationUpdate
{
    private InventBlocking inventBlocking;
    private List           unreserveIssueTransList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeInventBlocking</Name>
				<Source><![CDATA[
    final protected void initializeInventBlocking(InventBlocking _inventBlocking)
    {
        inventBlocking = _inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        unreserveIssueTransList = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBlocking</Name>
				<Source><![CDATA[
    public InventBlocking parmInventBlocking()
    {
        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveIssueTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserve for issue transaction on the receipt transaction.
    /// </summary>
    public void reserveIssueTransaction()
    {
        InventDimParm  inventDimParm;
    
        ListEnumerator listEnumerator = unreserveIssueTransList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            Inventtrans issueInventTrans = listEnumerator.current();
            InventDim inventDim = issueInventTrans.inventDim();
            inventDimParm.initFromInventDim(inventdim);
        
            InventUpd_Reservation::newParameters(
                    InventMovement::construct(issueInventTrans),
                    inventDim,
                    inventDimParm,
                    0,
                    issueInventTrans.Qty,
                    true,
                    true,
                    issueInventTrans.PdsCWQty).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unreserveIssueTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the reservation for issue transaction which is reserved on the receipt transaction.
    /// </summary>
    public void unreserveIssueTransaction()
    {
        // Remove reservation
        InventDim               localInventDim;
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParm;
        InventDimParm           inventDimParmActivePrimaryDim;
        InventTrans             inventTransIssue;
        Integer                 caseCount = -1;
        WMSOrder                wmsOrder;
        boolean                 canUpdateInventDimension = true;
        InventQty               inventBlockingQtyDelta   = inventBlocking.Qty - inventBlocking.orig().Qty;
        PdsCWQty                inventBlockingCWQtyDelta = inventBlocking.PdsCWQty - inventBlocking.orig().PdsCWQty;
    
        if (inventBlockingQtyDelta <= 0)
        {
            return;
        }
    
        InventDim       inventDim   = InventDim::find(inventBlocking.InventDimId);
        InventMovement  movement    = InventMovement::construct(inventBlocking);
        movement.inventDimGroupSetup().inventDimParmActivePrimaryDimension(inventDimParm);
        InventOnhand    inventOnhand = InventOnhand::newItemDim(inventBlocking.ItemId, inventDim, inventDimParm);
    
        if (inventOnhand.availOrdered(true) >= inventBlockingQtyDelta)
        {
            return;
        }
    
        if (WHSInventEnabled::exist(inventBlocking.ItemId))
        {
            this.whsUnreserveIssueTransaction(inventDim, inventBlockingQtyDelta);
            return;
        }
    
        inventDimParm.clear();
    
        while (caseCount < 2 && inventBlockingQtyDelta > 0)
        {
            caseCount++;
        
            switch (caseCount)
            {
                case 0:
                    inventDimCriteria.data(inventDim);
                    inventDimParm.initFromInventDim(inventDim);
                    break;
                case 1:
                    inventDimCriteria.data(inventDim);
                    movement.inventDimGroupSetup().inventDimParmActive(inventDimParm);
                    break;
                case 2:
                    movement.inventDimGroupSetup().inventDimParmActivePrimaryDimension(inventDimParmActivePrimaryDim);
                    /*
                        If all active dimensions are primary there is no need to do a second select with the same criteria.
                        If they are not the same, for performance reasons, we do not modify the inventDimCriteria to clear
                        non-primary fields but instead let the inventDimParm control the filtering.
                    */
                    if (inventDimParmActivePrimaryDim.equal(inventDimParm))
                    {
                        continue;
                    }
                    inventDimParm.data(inventDimParmActivePrimaryDim);
                    break;
            }
        
            select forceplaceholders forupdate inventTransIssue
                order by StatusIssue desc
                where inventTransIssue.ItemId                        == movement.itemId()
                    && inventTransIssue.ValueOpen                    == InventTransOpen::Yes
                    && inventTransIssue.StatusReceipt                == StatusReceipt::None
                    && (  inventTransIssue.StatusIssue               == StatusIssue::ReservOrdered
                        || inventTransIssue.StatusIssue               == StatusIssue::ReservPhysical)
                    && inventTransIssue.InventTransOrigin            != movement.inventTransOriginId()
                    && inventTransIssue.MarkingRefInventTransOrigin  == 0

            #inventDimExistsJoin(inventTransIssue.InventDimId, localInventDim, inventDimCriteria, inventDimParm);
        
            while (inventTransIssue)
            {
                InventDim inventDimFrom = InventDim::find(inventTransIssue.InventDimId);
                InventDimFixed changeDimFixed = InventDimFixedClass::inventDimFieldsDifferent(inventDim,inventDimFrom,(caseCount == 3 ? true : false));
            
                canUpdateInventDimension = true;
                boolean isWMSOrder = inventTransIssue.TransChildType == InventTransChildType::WMSOrder;
                
                if ((changeDimFixed & inventTransIssue.InventDimFixed) != 0)
                {
                    canUpdateInventDimension = false;
                }
                else if (isWMSOrder)
                {
                    wmsOrder = inventTransIssue.wmsOrder(true);
                    InventQty minReservOrderedQty = min(-inventTransIssue.Qty,inventBlockingQtyDelta);
                    PdsCWInventQty minCWReservOrderedQty = min(-inventTransIssue.PdsCWQty, inventBlockingCWQtyDelta);
                    canUpdateInventDimension = wmsOrder.canUpdateReservOrderedDim(inventDimFrom, inventDim, -1 * minReservOrderedQty,-1 * minCWReservOrderedQty);
                }
                
                if (canUpdateInventDimension)
                {
                    if (inventBlockingQtyDelta < -inventTransIssue.Qty)
                    {
                        inventTransIssue.updateSplit(-inventBlockingQtyDelta, -inventBlockingCWQtyDelta);
                    }

                    inventTransIssue.StatusIssue    = StatusIssue::OnOrder;
                    InventUpdate::updateTransDimTransferReceipt(movement,inventTransIssue,inventDim);
                
                    inventTransIssue.update();
                
                    inventBlockingQtyDelta += inventTransIssue.Qty;
                    unreserveIssueTransList.addEnd(inventTransIssue);
                    inventBlockingCWQtyDelta += inventTransIssue.PdsCWQty;
                
                    if (isWMSOrder)
                    {
                        wmsOrder.updateReservOrderedDim(inventDimFrom, inventDim, inventTransIssue.Qty, true, inventTransIssue.PdsCWQty);
                    }
                
                    inventTransIssue.updateSumUp();
                
                    if (!inventBlockingQtyDelta)
                    {
                        break;
                    }
                }
            
                next inventTransIssue;
            }
        }
    
        if (inventBlockingQtyDelta > 0)
        {
            warning("@SCM:OnHandRelatedToQualityOrderNotBlocked");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUnreserveIssueTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the reservation for issue transaction for WHS item which is reserved on the receipt transaction.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions.
    /// </param>
    /// <param name="_qtyReserv">
    /// The reserved quantity.
    /// </param>
    private void whsUnreserveIssueTransaction(
        InventDim  _inventDim,
        InventQty  _qtyReserv)
    {
        InventTrans                         inventTransIssue;
        InventDimParm                       inventDimParm;
        InventDim                           inventDimLoop;
        InventDim                           inventDimAboveLocation;
        InventMovement                      movement = InventMovement::construct(inventBlocking);
    
        boolean inventLocationWHSEnabled = _inventDim.inventLocation().WHSEnabled;
        buf2Buf(_inventDim, inventDimAboveLocation);
        inventDimAboveLocation.clearLocationAndBelowDim(movement.itemId());
        inventDimAboveLocation = InventDim::findOrCreate(inventDimAboveLocation);
    
        List hierarchyList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(movement.inventTable(), WHSReservationHierarchySortOrder::BottomUp);
        ListEnumerator le = hierarchyList.getEnumerator();
    
        buf2Buf(_inventDim, inventDimLoop);
        inventDimParm.setAllInventDim();
    
        // Loop through all levels of the hierarchy, building an InventDim at each stage and
        // looking for matching InventTrans records that are order reserved
        while (_qtyReserv != 0 && le.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = le.current();
            FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();
        
            if (inventDimLoop.(dimFieldId))
            {
                InventDim inventDimCriteria = InventDim::findOrCreate(inventDimLoop);
                select forceplaceholders forupdate inventTransIssue
                    order by StatusIssue desc
                    where inventTransIssue.ItemId                       == movement.itemId()
                        && inventTransIssue.ValueOpen                   == InventTransOpen::Yes
                        && inventTransIssue.StatusReceipt               == StatusReceipt::None
                        && (inventTransIssue.StatusIssue                == StatusIssue::ReservOrdered
                            || inventTransIssue.StatusIssue             == StatusIssue::ReservPhysical)
                        && inventTransIssue.InventTransOrigin           != movement.inventTransOriginId()
                        && inventTransIssue.MarkingRefInventTransOrigin == 0
                        && inventTransIssue.InventDimId                 == inventDimCriteria.inventDimId;
            
                while (inventTransIssue)
                {
                    if (_qtyReserv < -inventTransIssue.Qty)
                    {
                        inventTransIssue.updateSplit(-_qtyReserv);
                    }
                
                    inventTransIssue.StatusIssue = StatusIssue::OnOrder;
                
                    if (inventLocationWHSEnabled
                    ||  inventTransIssue.inventDimId != _inventDim.inventDimId)
                    {
                        InventMovement issueMovement = inventTransIssue.inventMovement();
                    
                        InventDim issueTransInventDim = issueMovement.getInventDimForReservedTransPhysChange(inventLocationWHSEnabled, _inventDim, inventDimAboveLocation);
                    
                        if (issueTransInventDim.inventDimId != inventTransIssue.inventDimId)
                        {
                            inventTransIssue.inventDimId = issueTransInventDim.inventDimId;
                            InventUpdate::updateTransDimTransferReceipt(issueMovement, inventTransIssue, issueTransInventDim);
                        }
                    }
                
                    inventTransIssue.update();
                    _qtyReserv += inventTransIssue.Qty;
                    unreserveIssueTransList.addEnd(inventTransIssue);
                    inventTransIssue.updateSumUp();
                
                    if (!_qtyReserv)
                    {
                        break;
                    }
                
                    next inventTransIssue;
                }
                        
                inventDimLoop.clearField(dimFieldId);
            }
        
            if (!_qtyReserv)
            {
                break;
            }
        }
    
        if (_qtyReserv > 0)
        {
            warning("@SCM:OnHandRelatedToQualityOrderNotBlocked");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventBlockingIssueReservationUpdate construct()
    {
        return new InventBlockingIssueReservationUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventBlockingIssueReservationUpdate</c> class from parameters.
    /// </summary>
    /// <param name="_inventBlocking">
    /// An <c>InventBlocking</c> table record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventBlockingIssueReservationUpdate</c> class.
    /// </returns>
    public static InventBlockingIssueReservationUpdate newFromInventBlocking(InventBlocking _inventBlocking)
    {
        var expectedReceiptMarkingUpdate = InventBlockingIssueReservationUpdate::construct();

        expectedReceiptMarkingUpdate.initializeInventBlocking(_inventBlocking);

        return expectedReceiptMarkingUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
