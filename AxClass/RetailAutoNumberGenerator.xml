<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAutoNumberGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Sequentually generates numbers with as many leading zeros as needed
/// </summary>
/// <remarks>
/// The class is called by RetailAutoNumberBarcode action menu item
/// </remarks>
class RetailAutoNumberGenerator extends RunBase
{
    #define.paddingChar('0')

    Common  callerRecord;
    Object  callerFormRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoNumberDimensions</Name>
				<Source><![CDATA[
    private void autoNumberDimensions(RetailDimensionGroupTrans _dimensionGroupTrans)
    {
        RetailDimensionGroupId  selectedDimensionGroupId = _dimensionGroupTrans.DimensionGroup;
        RecId                   recCount;
        int                     numberLength, currentNumber;

        // get total count of records within the group
        select count(RecId) from _dimensionGroupTrans
            where _dimensionGroupTrans.DimensionGroup == selectedDimensionGroupId;

        recCount = _dimensionGroupTrans.RecId;

        if (recCount > 0)
        {
            numberLength = strLen(int642str(recCount));

            currentNumber = 1;

            // go over all variants within the group and set generated numbers
            while select forUpdate _dimensionGroupTrans
                order by DisplayOrder
                where _dimensionGroupTrans.DimensionGroup == selectedDimensionGroupId
            {
                _dimensionGroupTrans.noInBarcode = strRFix(int2str(currentNumber), numberLength, #paddingChar);
                ttsBegin;
                _dimensionGroupTrans.update();
                ttsCommit;

                currentNumber++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormRun</Name>
				<Source><![CDATA[
    public Object parmCallerFormRun(Object _callerFormRun = callerFormRun)
    {
        callerFormRun = _callerFormRun;

        return _callerFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    public Common parmCallerRecord(Common _callerRecord = callerRecord)
    {
        callerRecord = _callerRecord;

        return callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs numbers generation process.
    /// </summary>
    public void run()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            switch (callerRecord.TableId)
            {
                case tableNum(RetailSizeGroupTrans):
                case tableNum(RetailStyleGroupTrans):
                case tableNum(RetailColorGroupTrans):
                    this.autoNumberDimensions(callerRecord);
                    break;
                default:
                    break;
            }

            if (callerFormRun)
            {
                // refresh data source on the form to see the changes
                callerFormRun.refreshDataSource(callerRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RetailAutoNumberGenerator autoNumberGenerator;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            if (args.record())
            {
                autoNumberGenerator = new RetailAutoNumberGenerator();

                // pass the calling record and run the generator
                autoNumberGenerator.parmCallerRecord(args.record());
                if (args.callerFormControl())
                {
                    autoNumberGenerator.parmCallerFormRun(args.callerFormControl().formRun());
                }
                autoNumberGenerator.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>