<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSuggestedGTDGetter_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements fetching GTD to suggest user to enter
/// </summary>
public class WHSSuggestedGTDGetter_RU
{
    ItemId      itemId;
    InventDim   inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSSuggestedGTDGetter_RU construct()
    {
        return new WHSSuggestedGTDGetter_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = InventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates nnew instance of class <c>WHSSuggestedGTDGetter_RU</c> from provided parameters
    /// </summary>
    /// <param name = "_itemId">Item for which GTD should be collected</param>
    /// <param name = "_inventDim">Inventory dimensions to filter available GTDs</param>
    /// <returns></returns>
    public static WHSSuggestedGTDGetter_RU newFromParams(ItemId _itemId, InventDim _inventDim)
    {
        WHSSuggestedGTDGetter_RU instance = WHSSuggestedGTDGetter_RU::construct();

        instance.parmItemId(_itemId);
        instance.parmInventDim(_inventDim);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main entry point
    /// </summary>
    /// <returns>List of suggested GTDs</returns>
    public List run()
    {
        List gtds = this.initList();
        
        if (!this.validate())
        {
            return gtds;
        }

        this.fillListFromCursor(gtds, this.buildCursor());

        return gtds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inititalizes list that containes suggested GTDs
    /// </summary>
    /// <returns>List of GTDs</returns>
    protected List initList()
    {
        return new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if operation can be run
    /// </summary>
    /// <returns>True if validation passed</returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (!this.parmItemId())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillListFromCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills out list of GTSs based on cursor
    /// </summary>
    /// <param name = "_gtds">List of suggested GTDs</param>
    /// <param name = "_inventGtd_RU">Cursor to provide data</param>
    protected void fillListFromCursor(List _gtds, InventGTD_RU _inventGtd_RU)
    {
        while (_inventGtd_RU)
        {
            _gtds.addEnd(_inventGtd_RU.InventGTDId);
            
            next _inventGtd_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query to fetch GTDs and return it as cursor
    /// </summary>
    /// <returns>Cursor type of <c>InventGTD_RU</c></returns>
    protected InventGTD_RU buildCursor()
    {
        InventGtd_RU inventGTD_RU;

        if (InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(this.parmItemId()))
        {
            inventGTD_RU = this.buildCursorBasedOnSumDelta();
        }
        else
        {
            inventGTD_RU = this.buildCursorBasedOnSum();
        }

        return inventGTD_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCursorBasedOnSumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches GTDs from <c>InventSumUnionDeltaPhysicalQty</c>
    /// </summary>
    /// <returns>Query as cursor</returns>
    private InventGTD_RU buildCursorBasedOnSumDelta()
    {
        InventGtd_RU                                inventGTD_RU;
        InventDimParm                               inventDimParm;
        boolean                                     isCWItem = PdsGlobal::pdsIsCWItem(this.parmItemId());

        inventDimParm.initFromInventDim(this.parmInventDim());

        if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            InventSumUnionDeltaWithInventDimPhysicalQty inventSumUnionDeltaWithDim;
            
            select InventGtdId from inventGTD_RU
                where inventGTD_RU.ItemId == this.parmItemId()
                exists join inventSumUnionDeltaWithDim
                    where  inventSumUnionDeltaWithDim.ItemId     == inventGTD_RU.ItemId
                        && ((   isCWItem    && inventSumUnionDeltaWithDim.PdsCWPhysicalInvent > 0)
                            || (!isCWItem   && inventSumUnionDeltaWithDim.PhysicalInvent      > 0))
                        && #InventDimFieldsFilter(inventSumUnionDeltaWithDim, this.parmInventDim(), inventDimParm)
                            && inventSumUnionDeltaWithDim.InventGtdId_RU  == inventGTD_RU.InventGtdId;
        }
        else
        {
            InventSumUnionDeltaPhysicalQty              inventSumUnionDelta;
            InventDim                                   inventDimJoin;

            select InventGtdId from inventGTD_RU
            where inventGTD_RU.ItemId == this.parmItemId()
            exists join inventSumUnionDelta
                where inventSumUnionDelta.ItemId == inventGTD_RU.ItemId
                    && ((   isCWItem    && inventSumUnionDelta.PdsCWPhysicalInvent   > 0)
                        || (!isCWItem   && inventSumUnionDelta.physicalinvent        > 0))
                #InventDimExistsJoinNoField(inventSumUnionDelta.InventDimId, inventDimJoin, this.parmInventDim(), inventDimParm)
                    && inventDimJoin.InventGtdId_RU         == inventGTD_RU.InventGtdId;
        }

        return inventGTD_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCursorBasedOnSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches GTDs from <c>InventSum</c>
    /// </summary>
    /// <returns>Query as cursor</returns>
    private InventGTD_RU buildCursorBasedOnSum()
    {
        InventSum                       inventSum;
        InventDim                       inventDimJoin;
        InventGtd_RU                    inventGTD_RU;
        InventDimParm                   inventDimParm;
        boolean                         isCWItem = PdsGlobal::pdsIsCWItem(this.parmItemId());

        inventDimParm.initFromInventDim(this.parmInventDim());

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select InventGtdId from inventGTD_RU
                where inventGTD_RU.ItemId == this.parmItemId()
                exists join inventSum
                    where  inventSum.ItemId     == inventGTD_RU.ItemId
                        && inventSum.ClosedQty  == NoYes::No
                        && ((   isCWItem    && inventSum.PdsCWPhysicalInvent > 0)
                            || (!isCWItem   && inventSum.PhysicalInvent      > 0))
                        && #InventDimFieldsFilter(inventSum, this.parmInventDim(), inventDimParm)
                            && inventSum.InventGtdId_RU  == inventGTD_RU.InventGtdId;
        }
        else
        {
            select InventGtdId from inventGTD_RU
                where inventGTD_RU.ItemId == this.parmItemId()
                exists join inventSum
                    where  inventSum.ItemId     == inventGTD_RU.ItemId
                        && inventSum.ClosedQty  == NoYes::No
                        && ((   isCWItem    && inventSum.PdsCWPhysicalInvent > 0)
                            || (!isCWItem   && inventSum.PhysicalInvent      > 0))
                #InventDimExistsJoinNoField(inventSum.InventDimId, inventDimJoin, this.parmInventDim(), inventDimParm)
                    && inventDimJoin.InventGtdId_RU  == inventGTD_RU.InventGtdId;
        }

        return inventGTD_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>