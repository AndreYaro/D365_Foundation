<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTotalAmounts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalTotalAmounts_RU
{
    CustomJournalTable_RU               customJournalTable;
    MapAmountIteration_RU               mapIndicativeAmounts, mapInvoiceAmounts, mapEstimativeAmounts, mapCorrectionAmounts;
    TmpCustomJournalTotalsFilters_RU    tmpCustomJournalTotalsFilters;
    boolean                             useFilter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU correctionAmount(CustomTotalType_RU _customTotalType)
    {
        if (mapCorrectionAmounts)
        {
            return mapCorrectionAmounts.value(_customTotalType);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimativeAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU estimativeAmount(CustomTotalType_RU _customTotalType)
    {
        if (mapEstimativeAmounts)
        {
            return mapEstimativeAmounts.value(_customTotalType);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimativeLineTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU estimativeLineTotalAmount()
    {
        if (mapEstimativeAmounts)
        {
            return mapEstimativeAmounts.value(CustomTotalType_RU::Cost) +
                   mapEstimativeAmounts.value(CustomTotalType_RU::Duty) +
                   mapEstimativeAmounts.value(CustomTotalType_RU::VAT)  +
                   mapEstimativeAmounts.value(CustomTotalType_RU::Excise);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indicativeAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU indicativeAmount(CustomTotalType_RU _customTotalType)
    {
        if (mapIndicativeAmounts)
        {
            return mapIndicativeAmounts.value(_customTotalType);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indicativeLineTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU indicativeLineTotalAmount()
    {
        if (mapIndicativeAmounts)
        {
            return mapIndicativeAmounts.value(CustomTotalType_RU::Cost) +
                   mapIndicativeAmounts.value(CustomTotalType_RU::Duty) +
                   mapIndicativeAmounts.value(CustomTotalType_RU::VAT)  +
                   mapIndicativeAmounts.value(CustomTotalType_RU::Excise);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU invoiceAmount(CustomTotalType_RU _customTotalType)
    {
        if (mapInvoiceAmounts)
        {
            return mapInvoiceAmounts.value(_customTotalType);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLineTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU invoiceLineTotalAmount()
    {
        if (mapInvoiceAmounts)
        {
            return mapInvoiceAmounts.value(CustomTotalType_RU::Cost) +
                   mapInvoiceAmounts.value(CustomTotalType_RU::Duty) +
                   mapInvoiceAmounts.value(CustomTotalType_RU::VAT)  +
                   mapInvoiceAmounts.value(CustomTotalType_RU::Excise);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpCustomJournalTotalsFilters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void parmTmpCustomJournalTotalsFilters(TmpCustomJournalTotalsFilters_RU _tmpCustomJournalTotalsFilters)
    {
        tmpCustomJournalTotalsFilters.setTmpData(_tmpCustomJournalTotalsFilters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void recalc()
    {
        CustomJournalTrans_RU   customJournalTrans, customJournalTransBase;
        CustomJournalCharge_RU  customJournalCharge;
        int                     i;
        DictEnum                dictEnum  = new DictEnum(enumnum(CustomTotalType_RU));
        Query                   query     = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    queryBuildDataSource;
        real                    base, source;
        CurrencyCode            customCurrencyCode = CompanyInfoHelper::standardCurrency();
        CustomAmount_RU         customAmountStorage;

        void calcBase()
        {
            select sum(Qty), sum(InvoiceCostInclMarkup), sum(ItemNetWeight), sum(ItemGrossWeight), sum(Volume) from customJournalTransBase
                where customJournalTransBase.CustomJournalId == customJournalTable.CustomJournalId;
            switch (customJournalTable.ChargeAllocationBase)
            {
                case CustomChargeAllocationBase_RU::Amount:
                    base = customJournalTransBase.InvoiceCostInclMarkup;
                    break;
                case CustomChargeAllocationBase_RU::Qty:
                    base = customJournalTransBase.Qty;
                    break;
                case CustomChargeAllocationBase_RU::Weight:
                    base = customJournalTransBase.ItemGrossWeight;
                    break;
                case CustomChargeAllocationBase_RU::Volume:
                    base = customJournalTransBase.Volume;
                    break;
            }
        }

        AmountMST calcChargeAmount(Amount _amount)
        {
            if (base == 0)
            {
                return 0;
            }
            return CurrencyExchangeHelper::amount(_amount * source / base, customCurrencyCode);
        }

        mapIndicativeAmounts    = new MapAmountIteration_RU(Types::Enum);
        mapInvoiceAmounts       = new MapAmountIteration_RU(Types::Enum);
        mapEstimativeAmounts    = new MapAmountIteration_RU(Types::Enum);

        if (customJournalTable)
        {
            queryBuildDataSource = query.addDataSource(tablenum(CustomJournalTrans_RU));
            queryBuildDataSource.orderMode(OrderMode::GroupBy);
            queryBuildDataSource.addRange(fieldnum(CustomJournalTrans_RU, CustomJournalId)).value(queryValue(customJournalTable.CustomJournalId));
            queryBuildDataSource.addSortField(fieldnum(CustomJournalTrans_RU, CalculationMethod));
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, InvoiceCostInclMarkup), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, InvoiceDuty), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, InvoiceExcise), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, InvoiceVAT), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, IndicativeCost), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, IndicativeDuty), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, IndicativeExcise), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, IndicativeVAT), SelectionField::Sum);

            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, Qty), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, ItemNetWeight), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, ItemGrossWeight), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, Volume), SelectionField::Sum);
            queryBuildDataSource.addSelectionField(fieldnum(CustomJournalTrans_RU, CustomAmountStorage), SelectionField::Sum);

            while select tmpCustomJournalTotalsFilters
                    where tmpCustomJournalTotalsFilters.CustomJournalId == customJournalTable.CustomJournalId &&
                          tmpCustomJournalTotalsFilters.Range
            {
                useFilter = true;
                switch (tmpCustomJournalTotalsFilters.CustomTotalFilterType)
                {
                    case CustomTotalFilterType_RU::Item :
                        queryBuildDataSource.addRange(fieldnum(CustomJournalTrans_RU, ItemId)).value(tmpCustomJournalTotalsFilters.Range);
                        break;
                    case CustomTotalFilterType_RU::FEACC :
                        queryBuildDataSource.addRange(fieldnum(CustomJournalTrans_RU, feaccId)).value(tmpCustomJournalTotalsFilters.Range);
                        break;
                    case CustomTotalFilterType_RU::CustomPartition :
                        queryBuildDataSource.addRange(fieldnum(CustomJournalTrans_RU, CustomPartition)).value(tmpCustomJournalTotalsFilters.Range);
                        break;
                    case CustomTotalFilterType_RU::CountryRegionId :
                        queryBuildDataSource.addRange(fieldnum(CustomJournalTrans_RU, CountryRegionId)).value(tmpCustomJournalTotalsFilters.Range);
                        break;
                }
            }
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                customJournalTrans  = queryRun.get(tablenum(CustomJournalTrans_RU));
                customAmountStorage = customJournalTrans.CustomAmountStorage;
                mapIndicativeAmounts.add(CustomTotalType_RU::Cost,          customJournalTrans.IndicativeCost);
                mapIndicativeAmounts.add(CustomTotalType_RU::Duty,          customJournalTrans.IndicativeDuty);
                mapIndicativeAmounts.add(CustomTotalType_RU::Excise,        customJournalTrans.IndicativeExcise);
                mapIndicativeAmounts.add(CustomTotalType_RU::VAT,           customJournalTrans.IndicativeVAT);

                mapInvoiceAmounts.add(CustomTotalType_RU::Cost,         customJournalTrans.InvoiceCostInclMarkup);
                mapInvoiceAmounts.add(CustomTotalType_RU::Duty,         customJournalTrans.InvoiceDuty);
                mapInvoiceAmounts.add(CustomTotalType_RU::Excise,       customJournalTrans.InvoiceExcise);
                mapInvoiceAmounts.add(CustomTotalType_RU::VAT,          customJournalTrans.InvoiceVAT);

                switch (customJournalTrans.CalculationMethod)
                {
                    case CustomCalculationMethod_RU::Indicative :
                        mapEstimativeAmounts.add(CustomTotalType_RU::Cost,      customJournalTrans.IndicativeCost);
                        mapEstimativeAmounts.add(CustomTotalType_RU::Duty,      customJournalTrans.IndicativeDuty);
                        mapEstimativeAmounts.add(CustomTotalType_RU::Excise,    customJournalTrans.IndicativeExcise);
                        mapEstimativeAmounts.add(CustomTotalType_RU::VAT,       customJournalTrans.IndicativeVAT);
                        break;
                    case CustomCalculationMethod_RU::Invoice    :
                        mapEstimativeAmounts.add(CustomTotalType_RU::Cost,      customJournalTrans.InvoiceCostInclMarkup);
                        mapEstimativeAmounts.add(CustomTotalType_RU::Duty,      customJournalTrans.InvoiceDuty);
                        mapEstimativeAmounts.add(CustomTotalType_RU::Excise,    customJournalTrans.InvoiceExcise);
                        mapEstimativeAmounts.add(CustomTotalType_RU::VAT,       customJournalTrans.InvoiceVAT);
                        break;
                }
                switch (customJournalTable.ChargeAllocationBase)
                {
                    case CustomChargeAllocationBase_RU::Amount:
                        source += customJournalTrans.InvoiceCostInclMarkup;
                        break;
                    case CustomChargeAllocationBase_RU::Qty:
                        source += customJournalTrans.Qty;
                        break;
                    case CustomChargeAllocationBase_RU::Weight:
                        source += customJournalTrans.ItemGrossWeight;
                        break;
                    case CustomChargeAllocationBase_RU::Volume:
                        source += customJournalTrans.Volume;
                        break;
                }
            }
            if (useFilter)
            {
                calcBase();
                mapIndicativeAmounts.add(CustomTotalType_RU::ChargeAdmin,  calcChargeAmount(customJournalTable.IndicativeAdminCharge));
                mapInvoiceAmounts.add   (CustomTotalType_RU::ChargeAdmin,  calcChargeAmount(customJournalTable.InvoiceAdminCharge));
                mapEstimativeAmounts.add(CustomTotalType_RU::ChargeAdmin,  calcChargeAmount(customJournalTable.EstimativeAdminCharge));
            }
            else
            {
                mapIndicativeAmounts.add(CustomTotalType_RU::ChargeAdmin,  customJournalTable.IndicativeAdminCharge);
                mapInvoiceAmounts.add   (CustomTotalType_RU::ChargeAdmin,  customJournalTable.InvoiceAdminCharge);
                mapEstimativeAmounts.add(CustomTotalType_RU::ChargeAdmin,  customJournalTable.EstimativeAdminCharge);
            }

            while select sum(Amount), ChargeType from customJournalCharge group by ChargeType
                where customJournalCharge.CustomJournalId     == customJournalTable.CustomJournalId
                   && customJournalCharge.OriginatingDocument == CustomDocument_RU::GTD
            {
                switch (customJournalCharge.ChargeType)
                {
                    case CustomChargeTypeCalc_RU::Escort    :
                        mapIndicativeAmounts.add(CustomTotalType_RU::ChargeEscort,  0);
                        mapInvoiceAmounts.add   (CustomTotalType_RU::ChargeEscort,  0);
                        if (useFilter)
                        {
                            mapEstimativeAmounts.add(CustomTotalType_RU::ChargeEscort,  calcChargeAmount(customJournalCharge.Amount));
                        }
                        else
                        {
                            mapEstimativeAmounts.add(CustomTotalType_RU::ChargeEscort,  customJournalCharge.Amount);
                        }
                        break;
                    case CustomChargeTypeCalc_RU::Storage   :
                        mapIndicativeAmounts.add(CustomTotalType_RU::ChargeStorage,  0);
                        mapInvoiceAmounts.add   (CustomTotalType_RU::ChargeStorage,  0);
                        if (useFilter)
                        {
                            //mapEstimativeAmounts.add(CustomTotalType_RU::ChargeStorage,  calcChargeAmount(customJournalCharge.Amount));
                            mapEstimativeAmounts.add(CustomTotalType_RU::ChargeStorage,  customAmountStorage);
                        }
                        else
                        {
                            mapEstimativeAmounts.add(CustomTotalType_RU::ChargeStorage,  customJournalCharge.Amount);
                        }
                        break;
                }
            }
        }

        mapCorrectionAmounts = CustomCorrectionTotalAmounts_RU::createFromJournal(customJournalTable, tmpCustomJournalTotalsFilters).correctionAmountsMap();
        if (useFilter)
        {
            mapCorrectionAmounts.add(CustomTotalType_RU::ChargeAdmin,  calcChargeAmount(mapCorrectionAmounts.value(CustomTotalType_RU::ChargeAdmin)), true);
        }

        for (i = 0; i <= dictEnum.values() - 2; i++)
        {
            if (useFilter && //customJournalTable.IncludeIntoCostPrice &&
                (dictEnum.index2Value(i) == CustomTotalType_RU::ChargeAdmin  ||
                 dictEnum.index2Value(i) == CustomTotalType_RU::ChargeEscort))
            {
                continue;
            }

            if (customJournalTable && dictEnum.index2Value(i) == CustomTotalType_RU::Cost)
            {
                continue;
            }

            mapIndicativeAmounts.add(CustomTotalType_RU::Total,  mapIndicativeAmounts.value(dictEnum.index2Value(i)));
            mapInvoiceAmounts.add   (CustomTotalType_RU::Total,  mapInvoiceAmounts.value(dictEnum.index2Value(i)));
            mapEstimativeAmounts.add(CustomTotalType_RU::Total,  mapEstimativeAmounts.value(dictEnum.index2Value(i)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean useFilter()
    {
        return useFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTotalAmounts_RU construct()
    {
        return new CustomJournalTotalAmounts_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTotalAmounts_RU createFromJournal(CustomJournalTable_RU _customJournalTable, TmpCustomJournalTotalsFilters_RU _tmpCustomJournalTotalsFilters = null)
    {
        CustomJournalTotalAmounts_RU customJournalTotalAmounts = CustomJournalTotalAmounts_RU::construct();

        customJournalTotalAmounts.parmCustomJournalTable(_customJournalTable);
        customJournalTotalAmounts.parmTmpCustomJournalTotalsFilters(_tmpCustomJournalTotalsFilters);
        customJournalTotalAmounts.recalc();

        return customJournalTotalAmounts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
