<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemProposalSale extends ProjPostItemProposal
{
    ProjProposalItemDetail  projProposalItemDetail;
    ProjItemTrans           projItemTrans;
    ProjItemTransSale       projItemTransSale;
    ProjInvoiceItemDetail   projInvoiceItemDetail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentLedgerSalesAmount</Name>
				<Source><![CDATA[
    protected AmountCur adjustmentLedgerSalesAmount()
    {
        return this.parmAdjustmentLedgerSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether revenue should be posted for the transaction.
    /// </summary>
    /// <returns>
    /// true if the revenue amount is non-zero and the method <c>parmEnterTurnover</c>; otherwise, false.
    /// </returns>
    protected boolean checkEnterTurnover()
    {
        if (projProposalItem.ItemType   == ProjItemType::SalesOrder)
        {
            return false;
        }

        if (!projTrans.transTurnover())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjItemTransSale</Name>
				<Source><![CDATA[
    public void createProjItemTransSale(ProjInvoiceItemDetail _projInvoiceItemDetail)
    {
        if (projProposalItem.ItemType   == ProjItemType::SalesOrder)
        {
            projItemTransSale.clear();
            projItemTransSale  = ProjItemTransSale::initTransFromInvoiceItemDetail(_projInvoiceItemDetail);
            projItemTransSale.ProjTransId = projItemTrans.ProjTransId;
            projItemTransSale.LedgerTransdate = ledgerVoucher.lastTransDate();
            projItemTransSale.LedgerSalesPosted = 0;
            projItemTransSale.LedgerSalesAmount = 0;
            projItemTransSale.TransStatus = ProjTransStatus::Posted;
            projItemTransSale.FundingSource = projTrans.fundingSource();

            if (! projItemTransSale.validateWrite())
            {
                throw error("@SYS21628");
            }

            projItemTransSale.insert();

            this.parmSaleRefRecId(projItemTransSale.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondaryTurnover</Name>
				<Source><![CDATA[
    public ExchRate exchRateSecondaryTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceItemDetail   projInvoiceItemDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projItemTransSale.TransStatus))
        {
            projInvoiceItemDetail.reread();
            select projInvoiceItemDetailOrig where projInvoiceItemDetailOrig.RecId == projInvoiceItemDetail.RefRecId;
            projInvoiceJourOrig = projInvoiceItemDetailOrig.projInvoiceItem().projInvoiceJour();
            return projTrans.exchRateSecondarySales(projInvoiceJourOrig.InvoiceDate);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTurnover</Name>
				<Source><![CDATA[
    public ExchRate exchRateTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceItemDetail   projInvoiceItemDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projItemTransSale.TransStatus))
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                projInvoiceItemDetail.reread();

                select firstOnly projInvoiceItemDetailOrig
                    where projInvoiceItemDetailOrig.RecId == projInvoiceItemDetail.RefRecId;

                projInvoiceJourOrig = projInvoiceItemDetailOrig.projInvoiceItem().projInvoiceJour();

                return projTrans.exchRateSales(projInvoiceJourOrig.InvoiceDate);
            }
            else
            {
                return projTrans.exchRateSales(projProposalItem.projProposalJour().InvoiceDate);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalItem  _projProposalItem, ProjProposalItemDetail  _projProposalItemDetail, ProjItemTrans _projItemTrans, ProjItemTransSale _projItemTransSale)
    {
        projProposalItemDetail = _projProposalItemDetail;
        projItemTrans = _projItemTrans;
        projItemTransSale = _projItemTransSale;

        super(_projProposalItem);

        projTrans = ProjTrans::newProjProposalItemSale(_projProposalItem, _projProposalItemDetail, _projItemTransSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceUpdate</Name>
				<Source><![CDATA[
    private void projInvoiceUpdate(RefRecId _saleRefRecId)
    {
        ProjInvoiceItemDetail     projInvoiceItemDetailOrginal;
        ProjInvoiceItemDetail     projInvoiceItemDetailReverse;

        ttsbegin;

        select forupdate RefRecId from projInvoiceItemDetailOrginal
            where  projInvoiceItemDetailOrginal.SaleRefRecId == _saleRefRecId
               && !projInvoiceItemDetailOrginal.RefRecId;

        select forupdate RefRecId from projInvoiceItemDetailReverse
            where  projInvoiceItemDetailReverse.SaleRefRecId == _saleRefRecId
               &&  projInvoiceItemDetailReverse.RecId != projInvoiceItemDetailOrginal.RecId
               && !projInvoiceItemDetailReverse.RefRecId;

        projInvoiceItemDetailReverse.RefRecId = projInvoiceItemDetailOrginal.RecId;

        projInvoiceItemDetailOrginal.RefRecId = projInvoiceItemDetailReverse.RecId;

        projInvoiceItemDetailReverse.update();
        projInvoiceItemDetailOrginal.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalInvoiceRefRecId</Name>
				<Source><![CDATA[
    private void updateOriginalInvoiceRefRecId(RefRecId _saleRefRecId, RefRecId _projInvoiceItemDetailRecId)
    {
        ProjInvoiceItemDetail projInvoiceItemDetailOriginal;

        select firstonly forupdate projInvoiceItemDetailOriginal
            where  projInvoiceItemDetailOriginal.SaleRefRecId == _saleRefRecId
               && !projInvoiceItemDetailOriginal.RefRecId;

        if (projInvoiceItemDetailOriginal)
        {
            ttsbegin;

            projInvoiceItemDetailOriginal.RefRecID = _projInvoiceItemDetailRecId;
            projInvoiceItemDetailOriginal.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjInvoiceItem     projInvoiceItem;
        ProjItemTransSale   projItemTransSaleUpd;

        projInvoiceItemDetail.clear();
        projInvoiceItemDetail = ProjInvoiceItemDetail::initInvoiceFromProposale(projProposalItem, projProposalItemDetail);

        select firstonly RecId from projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projProposalItem.projProposalJour().ProjInvoiceId
                && projInvoiceItem.ProjTransId == projItemTrans.ProjTransId;

        projInvoiceItemDetail.InvoiceRefRecId = projInvoiceItem.RecId;

        if (!projInvoiceItemDetail.validateWrite())
        {
            // Update has been aborted due to an error.
            throw error("@SYS21628");
        }

        this.createProjItemTransSale(projInvoiceItemDetail);

        // Hold the original value as Sale Order will update the value below
        RecId originalTransSaleRecId = projInvoiceItemDetail.SaleRefRecId;

        if (projProposalItem.ItemType == ProjItemType::SalesOrder)
        {
            projProposalItemDetail.selectForUpdate(true);
            projProposalItemDetail.SaleRefRecId = this.parmSaleRefRecId();
            projProposalItemDetail.update();

            projInvoiceItemDetail.SaleRefRecId = this.parmSaleRefRecId();
        }

        boolean isCreditInvoicingPrintingFlightEnabled = ProjInvoicePrintingCreditInvoicingFlight::instance().isEnabled();
        ProjItemTransSale projItemTransSaleOriginal = ProjItemTransSale::find(originalTransSaleRecId);

        if (isCreditInvoicingPrintingFlightEnabled)
        {
            // Use the original trans sale to determine if this is a credit memo.
            if (projItemTransSaleOriginal.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                projInvoiceItemDetail.RefRecId = ProjInvoiceItemDetail::getOriginalInvoiceRefRecId(projItemTransSaleOriginal.RecId);
            }
        }

        projInvoiceItemDetail.insert();

        if (isCreditInvoicingPrintingFlightEnabled)
        {
            if (projItemTransSaleOriginal.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                this.updateOriginalInvoiceRefRecId(projItemTransSaleOriginal.RecId, projInvoiceItemDetail.RecId);
            }
        }
        else
        {
            if (this.checkProjTransStatusIsCreditNoteProposal(projItemTransSale.TransStatus))
            {
                // This call is intended to update the projInvoiceItemDetail.RefRecId of the credit
                // and original proposal. It fails for Sales Orders as the global
                // projItemtransSale record was changed by the this.createProjItemTransSale() call
                this.projInvoiceUpdate(projItemTransSale.RecId);
            }
        }

        if (!this.parmUpdateTrans())
        {
            projItemTransSaleUpd = ProjItemTransSale::find(projItemTransSale.RecId, true);
            projItemTransSaleUpd.TransStatus = this.parmTransStatus();
            projItemTransSaleUpd.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        projItemTransSale.selectForUpdate(true);
        projItemTransSale.reread();

        if (this.checkCreditNoteSalesAccrued())
        {
            projItemTransSale.LedgerSalesPosted      = this.checkEnterSalesAccrued();

            if (this.checkEnterSalesAccrued())
            {
                projItemTransSale.LedgerSalesAmount  = -projTrans.transTurnoverMST();
            }
        }
        else
        {
            projItemTransSale.LedgerSalesAmount = 0;
            projItemTransSale.LedgerSalesPosted = NoYes::No;
        }

        projItemTransSale.SalesPrice        = projTrans.salesPrice();
        projItemTransSale.LineAmount        = projTrans.transTurnover();

        if (this.checkProjTransStatusIsCreditNoteProposal(projTrans.transStatus()))
        {
            projItemTransSale.LineAmount = projItemTransSale.LineAmount * -1;
        }

        projItemTransSale.TransStatus       = this.parmTransStatus();

        projItemTransSale.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>