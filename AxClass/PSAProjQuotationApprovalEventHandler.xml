<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjQuotationApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAProjQuotationApprovalEventHandler implements WorkflowElementStartedEventHandler,
                                                             WorkflowElementCompletedEventHandler,
                                                             WorkflowElementCanceledEventHandler,
                                                             WorkflowElementReturnedEventHandler,
                                                             WorkflowElementDeniedEventHandler,
                                                             WorkflowElemChangeRequestedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('The completed event for the document updates the document status.', false, 06\04\2016)]
    void completed(WorkflowElementEventArgs _workflowElementeventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    void denied(WorkflowElementEventArgs _workflowElementeventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(SalesQuotationTable):
                PSAProjQuotationStateChangeManager::updateStatus(workflowContext.parmRecId(), SalesQuotationStatus::Cancelled);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    void returned(WorkflowElementEventArgs _workflowElementeventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(SalesQuotationTable):
                PSAProjQuotationStateChangeManager::updateStatus(workflowContext.parmRecId(),SalesQuotationStatus::Modified);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    void started(WorkflowElementEventArgs _workflowElementeventArgs)
    {
        WorkflowContext         workflowContext;
        SalesQuotationTable     salesQuotationTable;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(SalesQuotationTable):
                select QuotationStatus from salesQuotationTable where salesQuotationTable.RecId == workflowContext.parmRecId();

                if (salesQuotationTable.QuotationStatus != SalesQuotationStatus::Submitted)
                {
                    PSAProjQuotationStateChangeManager::updateStatus(workflowContext.parmRecId(),SalesQuotationStatus::Submitted);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of <c>SalesQuotationTable</c> to <c>SalesQuotationStatus::Modified</c>.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when Request change is invoked.
    /// </remarks>
    public void changeRequested(WorkflowElementEventArgs  _workflowElementEventArgs)
    {
        WorkflowContext workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        if (workflowContext.parmTableId() == tablenum(SalesQuotationTable))
        {
            PSAProjQuotationStateChangeManager::updateStatus(workflowContext.parmRecId(), SalesQuotationStatus::Modified);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>