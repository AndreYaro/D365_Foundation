<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotals_PurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PurchTotals_PurchOrder extends PurchTotals_Trans
{
    PurchParmTable  parmTable;
    boolean         confirmation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isConfirmation</Name>
				<Source><![CDATA[
    public boolean isConfirmation()
    {
        return confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmation</Name>
				<Source><![CDATA[
    public void setConfirmation(boolean _confirmation)
    {
        confirmation = _confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPurchCalcTax</Name>
				<Source><![CDATA[
    public PurchCalcTax constructPurchCalcTax()
    {
        PurchCalcTax_Trans purchCalcTax = PurchCalcTax::construct(purchTable);

        if (parmTable)
        {
            purchCalcTax.parmParmTable(parmTable);
        }

        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves document date.
    /// </summary>
    /// <returns>
    /// The document date.
    /// </returns>
    DocumentDate documentDate()
    {
        return parmTable.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    ExchRate exchRate()
    {
        if (parmTable.FixedExchRate)
        {
            return parmTable.ExchRate;
        }
        else
        {
            return ExchangeRateHelper::exchRate(purchTable.CurrencyCode, parmTable.updateDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary()
    {
        if (parmTable.FixedExchRate)
        {
            return parmTable.ExchRateSecondary;
        }
        else
        {
            return ExchangeRateHelper::exchRateSecond(purchTable.CurrencyCode, parmTable.updateDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return parmTable.updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        return PurchTotalsPurchOrderTransContract::newFromPurchOrder(purchTable, parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        TaxableDocumentDescriptor taxableDocumentDescriptor;
        VendPurchOrderJour VendPurchOrderJour;
        PurchTableVersion  PurchTableVersion;

        select firstOnly VendPurchOrderJour
            order by VendPurchOrderJour.PurchOrderDate desc, VendPurchOrderJour.PurchaseOrderId desc
            where VendPurchOrderJour.PurchId == purchTable.PurchId
            exists join PurchTableVersion
                where VendPurchOrderJour.PurchTableVersion == PurchTableVersion.RecId
                && PurchTableVersion.IsArchived == NoYes::No;

        if (VendPurchOrderJour)
        {
            taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(VendPurchOrderJour);
        }
        else
        {
            taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchTable);
        }
        return taxableDocumentDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    protected PurchParmTable parmParmTable(PurchParmTable _parmTable = parmTable)
    {
        parmTable = _parmTable;

        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves line quantity in purchase unit to use for totals calculation.
    /// </summary>
    /// <returns>
    ///    The total line quantity.
    /// </returns>
    InventQty qtyInvent()
    {
        return purchLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves line quantity in inventory unit to use for totals calculation.
    /// </summary>
    /// <returns>
    ///    The total line quantity.
    /// </returns>
    PurchQty qtyPurch()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation()
    {
        if (parmTable.FixedExchRate)
        {
            return parmTable.euroTriangulation;
        }
        else
        {
            return Currency::triangulation(purchTable.CurrencyCode, parmTable.updateDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>PurchTotals</c> object to calculate with totals from an associated record.
    /// </summary>
    /// <param name="_source">
    /// The source table record.
    /// </param>
    /// <param name="_purchParmTable">
    /// A <c>PurchParmTable</c> table buffer for posting calculation.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchTotals</c> class.
    /// </returns>
    static public PurchTotals construct(PurchTable _source, PurchParmTable _purchParmTable)
    {
        PurchTotals_PurchOrder purchTotals_PurchOrder = new PurchTotals_PurchOrder(_source, PurchUpdate::All);

        purchTotals_PurchOrder.parmParmTable(_purchParmTable);

        return purchTotals_PurchOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>