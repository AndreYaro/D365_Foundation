<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMassUpdateValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailMassUpdateValidator</c> is used to validate the class <c>RetailMassUpdate</c>.
/// It validates the write operation on the destination table and return the status of the work sheet.
/// </summary>
class RetailMassUpdateValidator extends RetailMassUpdate implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>finalMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is used to pass some info to the user once the job is run.
    /// </summary>
    /// <returns>
    /// Message in string format.
    /// </returns>
    protected str finalMessage()
    {
        return failed ? "@RET260026" : "@RET6347";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextWorksheetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the status of a pirticular worksheet.
    /// </summary>
    /// <returns>
    /// An enum value of <c>RetailMassUpdateStatus</c> type.
    /// </returns>
    protected RetailMassUpdateStatus nextWorksheetStatus()
    {
        return failed ? RetailMassUpdateStatus::Open : RetailMassUpdateStatus::Validated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to make an update on the table that is passed to it.
    /// </summary>
    /// <param name="destinationTable">
    /// The table where the update should take place ,passed as an object of <c>Common</c> type.
    /// </param>
    /// <param name="itemId">
    /// String conatining the Item's id whose inventory might be updated.
    /// </param>
    /// <param name="propertyDescription">
    /// A string which has a product description.
    /// </param>
    /// <param name="_line">
    /// A record for table <c>RetailMassupdateWorkSheetline</c>.
    /// </param>
    protected void processTable(Common destinationTable, str itemId, str propertyDescription, RetailMassupdateWorksheetLine _line = null)
    {
        if (destinationTable != null)
        {
            if (!failed
                && (!this.validateWriteOnInventTable(_line)
                || !this.validateWriteOnInventModelGroupItem(_line)
                || !destinationTable.validateWrite()))
            {
                info(strFmt('item: %1 property failed.', itemId));
                failed = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field value assignment to destination table.
    /// </summary>
    /// <param name="_destinationTable">
    /// An record for destination table.
    /// </param>
    /// <param name="_property">
    /// An record for table <c>RetailMassUpdateProductProperty</c>.
    /// </param>
    /// <param name="_line">
    /// An record for table <c>RetailMassUpdateWorksheetLine</c>
    /// </param>
    protected void processTableField(Common _destinationTable, RetailMassUpdateProductProperty _property, RetailMassUpdateWorksheetLine _line)
    {
        // validate the field value on the destination table.
        if (_destinationTable && _property.DestinationFieldNum)
        {
            int destFieldNumAsInt = int642int(_property.DestinationFieldNum);
            if (_destinationTable.validateField(destFieldNumAsInt)
                && _destinationTable.validateFieldValue(fieldId2name(int642int(_property.DestinationTableNum), destFieldNumAsInt))
               )
            {
                _destinationTable.modifiedField(destFieldNumAsInt);
            }
            else
            {
                failed = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.processWorksheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the unit of measurement conversion on destination table.
    /// </summary>
    /// <param name="_destinationTable">
    /// The table where the update should take place ,passed as an object of <c>Common</c> type.
    /// </param>
    /// <param name="_property">
    /// An buffer of table <c>RetailMassUpdateProductProperty</c> record.
    /// </param>
    /// <param name="_line">
    /// An buffer of table <c>RetailMassUpdateWorksheetLine</c> record.
    /// </param>
    protected void validateUOM(Common _destinationTable,
                RetailMassUpdateProductProperty _property,
                RetailMassUpdateWorksheetLine _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteOnInventModelGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value assignment on <c>InventModelGroupItem</c>.
    /// </summary>
    /// <param name="_line">
    /// A record buffer for table <c>RetailMassUpdateWorksheetLine</c>.
    /// </param>
    /// <returns>
    /// true if value assignment is valid; otherwise,false.
    /// </returns>
    private boolean validateWriteOnInventModelGroupItem(RetailMassUpdateWorksheetLine _line)
    {
        boolean ret = true;
        PdsBatchAttribByItem         byItem;
        PdsBatchAttribByItemCustomer byCust;
        InventModelGroupItem    inventModelGroupItem;
        InventTable     inventTable;

        // there is no need to validate if the value was not set.
        if (!_line.InventModelGroupItem_ModelGroupId)
        {
            return ret;
        }

        inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(_line.ItemId, _line.dataAreaId);
        inventModelGroupItem.ModelGroupId = _line.InventModelGroupItem_ModelGroupId;

        if (EcoResProduct::find(_line.EcoResProductRecId).PdsCWProduct
            && !InventModelGroup::find(_line.InventModelGroupItem_ModelGroupId).isStocked())
        {
            ret = checkFailed("@PDS1441");
        }

        inventTable = InventTable::find(_line.ItemId);

        if (#PdsBatchAttribEnabled
            && !inventModelGroupItem.RecId
            && inventTable.isItemBatchActivated()
            && !InventModelGroup::find(inventModelGroupItem.ModelGroupId).isStocked())
        {
            if (inventTable.anyProductDatesSpecified())
            {
                ret = false;
            }

            if (ret)
            {
                select firstonly RecId from byItem
                    where byItem.PdsBatchAttribItemId == inventTable.ItemId;

                select firstonly RecId from byCust
                    where byItem.PdsBatchAttribItemId == inventTable.ItemId;

                if (byItem || byCust)
                {
                    ret = false;
                }
            }
        }

        ret = inventModelGroupItem.validateFieldValue(fieldStr(InventModelGroupItem, ModelGroupId))
               && inventModelGroupItem.validateWrite()
               && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteOnInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value assignment on <c>InventTable</c>.
    /// </summary>
    /// <param name="_workSheetLine">
    /// A record buffer for table <c>RetailMassUpdateWorksheetLine</c>.
    /// </param>
    /// <returns>
    /// true if value assignment is valid; otherwise,false.
    /// </returns>
    private boolean validateWriteOnInventTable(RetailMassUpdateWorksheetLine _workSheetLine)
    {
        boolean ret = true;
        InventTableModule   inventTableInventModule;
        InventTableModule   inventTablePurchModule;
        InventTableModule   inventTableSalesModule;
        InventModelGroupItem   inventModelGroupItem;
         #ISOCountryRegionCodes
        EcoResReleasedProduct ecoResReleasedProduct = EcoResReleasedProduct::construct();

        ecoResReleasedProduct.parmInventTable(InventTable::find(_workSheetLine.ItemId));

        inventTableInventModule = InventTableModule::find(_workSheetLine.ItemId, ModuleInventPurchSales::Invent);
        inventTableInventModule.UnitId = _workSheetLine.Invent_UnitId ? _workSheetLine.Invent_UnitId : inventTableInventModule.UnitId;
        ecoResReleasedProduct.parmInventTableModuleInvent(inventTableInventModule);

        inventTablePurchModule = InventTableModule::find(_workSheetLine.ItemId, ModuleInventPurchSales::Purch);
        inventTablePurchModule.UnitId = _workSheetLine.Purch_UnitId ? _workSheetLine.Purch_UnitId : inventTablePurchModule.UnitId;
        ecoResReleasedProduct.parmInventTableModulePurch(inventTablePurchModule);

        inventTableSalesModule = InventTableModule::find(_workSheetLine.ItemId, ModuleInventPurchSales::Sales);
        inventTableSalesModule.UnitId = _workSheetLine.Sales_UnitId ? _workSheetLine.Sales_UnitId : inventTableSalesModule.UnitId;
        ecoResReleasedProduct.parmInventTableModuleSales(inventTableSalesModule);

        inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(_workSheetLine.ItemId, _workSheetLine.dataAreaId);
        inventModelGroupItem.ModelGroupId = _workSheetLine.InventModelGroupItem_ModelGroupId ? _workSheetLine.InventModelGroupItem_ModelGroupId : inventModelGroupItem.ModelGroupId;
        ecoResReleasedProduct.parmInventModelGroupItem(inventModelGroupItem);

        ecoResReleasedProduct.parmUnitOfMeasureConverter(UnitOfMeasureConverter_Product::construct());
        ecoResReleasedProduct.parmInventModelTypeFactory(InventModelTypeFactory::construct());

        if (inventModelGroupItem.ModelGroupId
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && !inventModelGroupItem.modelGroup().inventModelTypeSecCur_RU().validateWriteInventTable(InventTable::find(_workSheetLine.ItemId)))
        {
            return false;
        }

        ecoResReleasedProduct.checkAndUpdateNonStockedDependencies();
        ret = ret && ecoResReleasedProduct.validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a run base bactch object of the type <c>RetailMassUpdateValidator</c>.
    /// </summary>
    /// <param name="_worksheetId">
    /// Value for the <c>Number</c> field of the <c>RetailMassUpdateWorkSheetTable</c> table.
    /// </param>
    /// <param name="tableDataSource">
    /// Used to refresh the Work sheet status on the form if it is still open.
    /// </param>
    /// <returns>
    /// An instance of <c>RetailMassUpdateValidator</c> class.
    /// </returns>
    public static RetailMassUpdateValidator construct(int64 _worksheetId, FormDataSource tableDataSource)
    {
        RetailMassUpdateValidator ret = new RetailMassUpdateValidator();
        ret.parmWorksheetId(_worksheetId);
        ret.parmWorksheetTable(tableDataSource);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Here goes a description of the class
    /// <summary>
    /// Gets the desciption of the class.
    /// </summary>
    /// <returns>
    /// Gets the desciption of the class.
    /// </returns>
    static ClassDescription description()
    {
        return "@RET260027";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailMassUpdateValidator</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailMassUpdateValidator</c> can be run
    /// in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>