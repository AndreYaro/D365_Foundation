<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleSaleOfProductExtendedPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::ExtendedPrice),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::ExtendedPrice),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::ExtendedPrice)
]
 public class AccDistRuleSaleOfProductExtendedPrice extends AccountingDistributionRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAmountWithinFundingLimits</Name>
				<Source><![CDATA[
    private void checkAmountWithinFundingLimits(CustInvoiceLineSourceDocLineItem _custInvoiceLineSourceDocLineItem)
    {
        ProjTable projTable;
        ProjCategory projCategory;
        smmActivities smmActivities;
        ProjLineProperty projLineProperty;
        AmountCur allocationSalesAmount;
        ProjTrans_Virtual projTrans;
        SourceDocumentLineItemIProduct sourceDocumentLineItemIProduct;
        SourceDocumentLineItemIProject sourceDocumentLineItemIProject;
        SourceDocumentLineItemIProjectRevenue sourceDocumentLineItemIProjectRevenue;

        projTable = ProjectSourceDocumentLineItemHelper::projTable(sourceDocumentLineItem);
        projCategory = ProjectSourceDocumentLineItemHelper::projCategory(sourceDocumentLineItem);
        smmActivities = ProjectSourceDocumentLineItemHelper::smmActivities(sourceDocumentLineItem);
        projLineProperty = ProjectSourceDocumentLineItemHelper::projLineProperty(sourceDocumentLineItem);

        projTrans = ProjTrans_Virtual::construct();
        projTrans.setTransType(ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem));
        projTrans.setTransDate(sourceDocumentLineItem.parmAccountingDate());
        projTrans.setProjId(projTable.ProjId);
        projTrans.setActivityNumber(smmActivities.ActivityNumber);
        projTrans.setCategoryId(projCategory.CategoryId);

        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            sourceDocumentLineItemIProduct = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
            projTrans.setItemId(sourceDocumentLineItemIProduct.parmItemId());
        }

        if (sourceDocumentLineItem is SourceDocumentLineItemIProject)
        {
            sourceDocumentLineItemIProject = sourceDocumentLineItem as SourceDocumentLineItemIProject;
            projTrans.setResource(sourceDocumentLineItemIProject.parmProjectResourceRecId());
            projTrans.setResourceCategory(sourceDocumentLineItemIProject.parmProjectResourceCategoryRecId());
        }

        projTrans.setCurrencyIdCost(ProjectSourceDocumentLineItemHelper::currencyIdCost(sourceDocumentLineItem));

        if (ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProjectRevenue = sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;
            projTrans.setCurrencyIdSales(sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode());
        }

        projTrans.setLinePropertyId(projLineProperty.LinePropertyId);

        allocationSalesAmount = ProjectSourceDocumentLineItemHelper::transTurnover(sourceDocumentLineItem);

        if (!ProjFundingEngine::isAmountWithinFundingLimits(projTrans, _custInvoiceLineSourceDocLineItem.parmProjectFundingSourceRecId(), allocationSalesAmount))
        {
            throw error("@SYS344241");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoricalExchangeRateDate</Name>
				<Source><![CDATA[
    public HistoricalExchangeRateDate getHistoricalExchangeRateDate()
    {
        AssetBook assetBook;
        TransDate exchangeRateDate;
        CustInvoiceLineSourceDocLineItem custInvoiceLineSourceDocLineItem;
        boolean isFixedAssetAccount;

        if (sourceDocumentLineItem is CustInvoiceLineSourceDocLineItem)
        {
            custInvoiceLineSourceDocLineItem = sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;

            if (custInvoiceLineSourceDocLineItem.parmAssetId()
                && custInvoiceLineSourceDocLineItem.parmValueModel())
            {
                assetBook = AssetBook::find(custInvoiceLineSourceDocLineItem.parmAssetId(),
                    custInvoiceLineSourceDocLineItem.parmValueModel());
            }

            // If the line contains an asset, then capture the exchange rate date for
            // disposal of an asset.
            if (assetBook)
            {
                isFixedAssetAccount = AssetLedgerAccounts::isFixedAssetAccount(
                        assetBook,
                        assetBook.AssetGroup,
                        this.parmAccountingdistribution().LedgerDimension,
                        AssetTransType::DisposalSale,
                        assetBook.currentOperationsTax());

                if (isFixedAssetAccount)
                {
                    exchangeRateDate = assetBook.exchangeRateDate();
                }
            }
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummarize</Name>
				<Source><![CDATA[
    public boolean parmSummarize()
    {
        boolean summarize = super();

        if (AssetDisposalSaleAccountingRuleSummarizeFlight::instance().isEnabled()
            && sourceDocumentLineItem is CustInvoiceLineSourceDocLineItem)
        {
            AssetBook assetBook;
            CustInvoiceLineSourceDocLineItem custInvoiceLineSourceDocLineItem;
            boolean isFixedAssetAccount;

            custInvoiceLineSourceDocLineItem = sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;

            if (custInvoiceLineSourceDocLineItem.parmAssetId()
                && custInvoiceLineSourceDocLineItem.parmValueModel())
            {
                assetBook = AssetBook::find(custInvoiceLineSourceDocLineItem.parmAssetId(),
                    custInvoiceLineSourceDocLineItem.parmValueModel());
            }

            if (assetBook)
            {
                isFixedAssetAccount = AssetLedgerAccounts::isFixedAssetAccount(
                        assetBook,
                        assetBook.AssetGroup,
                        this.parmAccountingdistribution().LedgerDimension,
                        AssetTransType::DisposalSale,
                        assetBook.currentOperationsTax());

                if (isFixedAssetAccount)
                {
                    summarize = false;
                }
            }
        }

        return summarize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOriginalInvoiceLineDistributionsForCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to use original invoice line distributions or not.
    /// </summary>
    /// <param name="_custInvoiceLineSourceDocLineItem">
    /// The instance of <c>CustInvoiceLineSourceDocLineItem</c> class.
    /// </param>
    /// <returns>
    /// true if original distributions needs to be used with correction; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns false for public sector scenerios when billing classification is enable and invoice with
    /// billing code version does not allow changes for corrected invoice line.
    /// </remarks>
    protected boolean useOriginalInvoiceLineDistributionsForCorrection(CustInvoiceLineSourceDocLineItem _custInvoiceLineSourceDocLineItem)
    {
        boolean useOriginalInvoiceLineDistributions;

        if (_custInvoiceLineSourceDocLineItem.parmCorrectedInvoiceLineId())
        {
            useOriginalInvoiceLineDistributions = true;

            if (custParameters::isBillingClassificationEnabled()
                && CustInvoiceTable::findSourceDocumentHeader(_custInvoiceLineSourceDocLineItem.parmSourceDocumentHeaderRecId()).isCorrectedInvoice())
            {
                CustBillingCodeVersion custBillingCodeVersion = custBillingCodeVersion::findByDate(_custInvoiceLineSourceDocLineItem.parmCustBillingCode(), _custInvoiceLineSourceDocLineItem.parmAccountingDate());

                if (custBillingCodeVersion)
                {
                    useOriginalInvoiceLineDistributions = custBillingCodeVersion.AllowChangeLedgerAccount;
                }
            }
        }

        return useOriginalInvoiceLineDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        CustInvoiceLineSourceDocLineItem custInvoiceLineSourceDocLineItem;
        RefRecId billingCodeId;
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;
        CustBillingCodeVersion custBillingCodeVersion;
        LedgerDimensionAllocation ledgerDimensionAllocation;
        CustInvoiceLine originalInvoiceLine;
        AccountingDistribution originalInvoiceDistribution;
        LedgerDimensionAccount ledgerDimensionAccount;
        TransDate adjustingInvoiceDate;
        RefRecId custInvoiceLineTemplateRecId;
        List ledgerDimAllocListForProject;
        AllocationFactor allocationFactor;
        SourceDocumentLine sourceDocumentLine;
        LedgerDimensionAccount ledgerDimension;
        DimensionDefault mergedDefaultDimension;
        AccountingDistribution accountingDistributionTable;
        date invoiceDate;
        boolean isPublicSectorInterestAdjustment;

        custInvoiceLineSourceDocLineItem = sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;
        sourceDocumentLine = sourceDocumentLineItem.parmSourceDocumentLine();
        adjustingInvoiceDate = custInvoiceLineSourceDocLineItem.parmAdjustingInvoiceDate();
        custInvoiceLineTemplateRecId = CustInvoiceLine::findBySourceDocumentLine(sourceDocumentLine.RecId).CustInvoiceLineTemplate;
        isPublicSectorInterestAdjustment = isConfigurationKeyEnabled(configurationKeyNum(PublicSector)) && custInvoiceLineSourceDocLineItem.parmForInterestAdjustment();

        if ((!custInvoiceLineTemplateRecId || custInvoiceLineSourceDocLineItem.parmSourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Draft)
            && this.useOriginalInvoiceLineDistributionsForCorrection(custInvoiceLineSourceDocLineItem)
            && (!custInvoiceLineSourceDocLineItem.parmForInterestAdjustment() || isPublicSectorInterestAdjustment))
        {
            originalInvoiceLine = CustInvoiceLine::find(custInvoiceLineSourceDocLineItem.parmCorrectedInvoiceLineId());

            if ((originalInvoiceLine.LedgerDimension == custInvoiceLineSourceDocLineItem.parmLedgerDimensionDefaultAccount()
                && DimensionDefaultFacade::areEqual(originalInvoiceLine.DefaultDimension, custInvoiceLineSourceDocLineItem.parmDefaultDimension()))
                || isPublicSectorInterestAdjustment)
            {
                ledgerDimAllocListForProject = new List(Types::Container);

                while select LedgerDimension, AllocationFactor, TransactionCurrencyAmount from originalInvoiceDistribution
                    where originalInvoiceDistribution.SourceDocumentLine == originalInvoiceLine.SourceDocumentLine
                {
                    if (!ledgerDimensionAllocationList)
                    {
                        ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                    }

                    if (custInvoiceLineSourceDocLineItem.parmForInterestAdjustment())
                    {
                        ledgerDimensionAccount = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(custInvoiceLineSourceDocLineItem.parmLedgerDimensionDefaultAccount(),
                                                                                                                  originalInvoiceDistribution.LedgerDimension);
                    }
                    else
                    {
                        ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(originalInvoiceDistribution.LedgerDimension);
                    }

                    // When the original and new amount is the same (disregarding sign) then the ditribution should be created with the amount copied
                    // this is due to rounding error when distributions and invoice values are large (3787806). When the amounts are not the
                    // same (disregarding sign) then the new distribution is created based on the allocation factor (e.g. this happens when the corrected invoice's
                    // value changes)
                    if (abs(originalInvoiceLine.AmountCur) == abs(custInvoiceLineSourceDocLineItem.parmChargeInputAmount()))
                    {
                        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(
                                                                            ledgerDimensionAccount,
                                                                            originalInvoiceDistribution.AllocationFactor,
                                                                            DebitCredit::Credit,
                                                                            false,
                                                                            0,
                                                                            AccountingDistributionReferenceRole::None,
                                                                            0,
                                                                            any2enum(0),
                                                                            originalInvoiceDistribution.TransactionCurrencyAmount);
                    }
                    else
                    {
                        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(
                                                                            ledgerDimensionAccount,
                                                                            originalInvoiceDistribution.AllocationFactor,
                                                                            DebitCredit::Credit,
                                                                            false);
                    }

                    ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                    ledgerDimAllocListForProject.addEnd([ledgerDimensionAllocation.parmLedgerDimension(), ledgerDimensionAllocation.parmAllocationFactor(),
                                                        custInvoiceLineSourceDocLineItem.parmProjectFundingSourceRecId()]);
                }

                // add allocation list for project to global cache
                if (custInvoiceLineSourceDocLineItem.parmProjectId() && ledgerDimAllocListForProject.elements() != 0)
                {
                    ledgerDimAllocListForProject = AccDistProcessorProjectExtension::ledgerDimensionAllocationList(sourceDocumentLineItem);
                    if (ledgerDimAllocListForProject)
                    {
                        SysTransactionScopeCache::set(classStr(AccDistProcessorProjectExtension), [sourceDocumentLine.RecId, sourceDocumentLine.RecVersion], ledgerDimAllocListForProject);
                    }
                }
            }
        }
        else
        {
            if (!custInvoiceLineSourceDocLineItem.parmProjectId())
            {
                billingCodeId = custInvoiceLineSourceDocLineItem.parmCustBillingCode();

                if (billingCodeId)
                {
                    ledgerDimAllocListForProject = new List(Types::Container);

                    invoiceDate = custInvoiceLineSourceDocLineItem.parmAccountingDate();

                    while select validTimeState(invoiceDate) RecId, UseDimensionsFromLine from custBillingCodeVersion
                        join LedgerDimension, Percentage from custBillingCodeLedgerAccount
                        where custBillingCodeLedgerAccount.CustBillingCodeVersion == custBillingCodeVersion.RecId
                            && custBillingCodeVersion.CustBillingCode == billingCodeId
                    {
                        if (!ledgerDimensionAllocationList)
                        {
                            ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                        }

                        allocationFactor = custBillingCodeLedgerAccount.Percentage/100;
                        ledgerDimension = custBillingCodeLedgerAccount.LedgerDimension;

                        // create merged dimension if defaulting default dimensions is enabled on billing code
                        if (custBillingCodeVersion.UseDimensionsFromLine == NoYes::Yes)
                        {
                            // merge default dimensions from invoice line and billing code ledger account
                            mergedDefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
                                            LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension),
                                                custInvoiceLineSourceDocLineItem.parmDefaultDimension());

                            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension, mergedDefaultDimension);
                        }

                        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(
                                                                                ledgerDimension,
                                                                                allocationFactor,
                                                                                DebitCredit::Credit,
                                                                                false);

                        ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);

                        // initialize allocation list for project
                        ledgerDimAllocListForProject.addEnd([custBillingCodeLedgerAccount.LedgerDimension, allocationFactor, custInvoiceLineSourceDocLineItem.parmProjectFundingSourceRecId()]);
                    }

                    // add allocation list for project to global cache
                    if (custInvoiceLineSourceDocLineItem.parmProjectId())
                    {
                        // Checks if accounting distributions exists for the SD Line.
                        select firstonly RecId from accountingDistributionTable
                            where accountingDistributionTable.SourceDocumentLine == custInvoiceLineSourceDocLineItem.parmSourceDocumentLine().RecId
                                && accountingDistributionTable.SourceDocumentHeader == custInvoiceLineSourceDocLineItem.parmSourceDocumentHeaderRecId();

                        // If accounting distributions does not exist, step into the following lines, otherwise skip
                        if (!accountingDistributionTable)
                        {
                            if (ledgerDimAllocListForProject.elements() == 0)
                            {
                                ledgerDimAllocListForProject = AccDistProcessorProjectExtension::ledgerDimensionAllocationList(sourceDocumentLineItem);
                            }
                            else
                            {
                                this.checkAmountWithinFundingLimits(custInvoiceLineSourceDocLineItem);
                            }
                        }

                        if (ledgerDimAllocListForProject)
                        {
                            SysTransactionScopeCache::set(classStr(AccDistProcessorProjectExtension), [sourceDocumentLine.RecId, sourceDocumentLine.RecVersion], ledgerDimAllocListForProject);
                        }
                    }
                }
            }
        }

        if (!ledgerDimensionAllocationList || ledgerDimensionAllocationList.elements() == 0)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedLedgerDimensionAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proper <c>LedgerDimensionAccount</c> value.
    /// </summary>
    /// <param name = "_custInvoiceDistributionTemplate">The <c>CustInvoiceDistributionTemplate</c> buffer.</param>
    /// <param name = "_custInvoiceLine">The <c>CustInvoiceLine</c> buffer.</param>
    /// <returns>A <c>LedgerDimensionAccount</c> value.</returns>
    protected LedgerDimensionAccount getMergedLedgerDimensionAccount(CustInvoiceDistributionTemplate _custInvoiceDistributionTemplate, CustInvoiceLine _custInvoiceLine)
    {
        LedgerDimensionAccount ledgerDimensionAccount;

        DimensionDefault dimensionDefault = ledgerDimensionProvider.getDefaultDimensionFromLedgerDimension(_custInvoiceDistributionTemplate.LedgerDimension);

        CustInvoiceTable custInvoiceTable = _custInvoiceLine.custInvoiceTable();

        if (custInvoiceTable.UseDefaultFromCustomer == CustRecurrenceInvoiceDefaultType::Customer)
        {
            ledgerDimensionAccount = this.setLedgerDimensionAccountFromCustomerAccount(
                dimensionDefault,
                _custInvoiceLine,
                custInvoiceTable);
        }
        else
        {
            ledgerDimensionAccount = this.setLedgerDimensionAccountFromInvoiceTemplate(
                _custInvoiceLine,
                _custInvoiceDistributionTemplate);
        }
        
        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionAccountFromCustomerAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount setLedgerDimensionAccountFromCustomerAccount(
        DimensionDefault _dimensionDefault,
        CustInvoiceLine _custInvoiceLine,
        CustInvoiceTable _custInvoiceTable)
    {
        LedgerDimensionAccount localLedgerDimensionAccount;

        if (DimensionDefaultFacade::areEqual(_dimensionDefault, _custInvoiceLine.DefaultDimension))
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _custInvoiceLine.LedgerDimension,
                _custInvoiceTable.DefaultDimension);
        }
        else
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _custInvoiceLine.LedgerDimension,
                _custInvoiceLine.DefaultDimension);
        }

        return localLedgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionAccountFromInvoiceTemplate</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount setLedgerDimensionAccountFromInvoiceTemplate(
        CustInvoiceLine _custInvoiceLine,
        CustInvoiceDistributionTemplate _custInvoiceDistributionTemplate)
    {
        LedgerDimensionAccount localLedgerDimensionAccount;

        if (this.isCopyDimensionsFromTemplateThenChanged())
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _custInvoiceDistributionTemplate.LedgerDimension);
        }
        else
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _custInvoiceLine.LedgerDimension,
                _custInvoiceLine.DefaultDimension);
        }

        return localLedgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount setLedgerDimensionAccount(
        DimensionDefault _dimensionDefault,
        CustInvoiceLine _custInvoiceLine,
        CustInvoiceDistributionTemplate _custInvoiceDistributionTemplate)
    {
        LedgerDimensionAccount localLedgerDimensionAccount;

        if (this.isCopyDimensionsFromTemplateAndNoChange(_custInvoiceLine, _dimensionDefault))
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _custInvoiceDistributionTemplate.LedgerDimension,
                _custInvoiceLine.DefaultDimension);
        }
        else
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _custInvoiceLine.LedgerDimension,
                _custInvoiceLine.DefaultDimension);
        }

        return localLedgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopyDimensionsFromTemplateThenChanged</Name>
				<Source><![CDATA[
    private boolean isCopyDimensionsFromTemplateThenChanged()
    {
        return (sourceDocumentLineItem.parmSourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopyDimensionsFromTemplateAndNoChange</Name>
				<Source><![CDATA[
    private boolean isCopyDimensionsFromTemplateAndNoChange(CustInvoiceLine _custInvoiceLine, DimensionDefault _dimensionDefault)
    {
        return (sourceDocumentLineItem.parmSourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Draft
            && (_custInvoiceLine.DefaultDimension == 0 || DimensionDefaultFacade::areEqual(_dimensionDefault, _custInvoiceLine.DefaultDimension)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionAllocList</Name>
				<Source><![CDATA[
    public LedgerDimensionAllocationList parmLedgerDimensionAllocList()
    {
        LedgerDimensionAllocationList returnedledgerDimensionAllocationList;
        RefRecId custInvoiceLineTemplateRecId;
        CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
        LedgerDimensionAllocation ledgerDimensionAllocation;
        CustInvoiceLine custInvoiceLine;
        LedgerDimensionAccount ledgerDimensionAccount;
        List ledgerDimAllocListForProject;
        CustInvoiceLineSourceDocLineItem custInvoiceLineSourceDocLineItem;
        boolean isProject = false;

        custInvoiceLine = CustInvoiceLine::findBySourceDocumentLine(sourceDocumentLineItem.parmSourceDocumentLine().RecId);
        custInvoiceLineTemplateRecId = custInvoiceLine.CustInvoiceLineTemplate;
        custInvoiceLineSourceDocLineItem = sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;

        if (!ledgerDimensionAllocationList || !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (custInvoiceLineSourceDocLineItem)
            {
                isProject = custInvoiceLineSourceDocLineItem.parmProjectId() != '';
            }

            if (!custInvoiceLine.AccountingDistributionTemplate)
            {
               while select LedgerDimension, Percentage from custInvoiceDistributionTemplate
               where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == custInvoiceLineTemplateRecId
                {
                    if (!ledgerDimensionAllocationList)
                    {
                        ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                    }

                    ledgerDimensionAccount = this.getMergedLedgerDimensionAccount(custInvoiceDistributionTemplate, custInvoiceLine);

                    ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimensionAccount,custInvoiceDistributionTemplate.Percentage / 100, this.parmSide(), false);

                    ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                }
            }

            if (isProject && ledgerDimensionAllocationList && ledgerDimensionAllocationList.elements() > 0)
            {
                ledgerDimAllocListForProject = AccDistProcessorProjectExtension::ledgerDimensionAllocationList(sourceDocumentLineItem);
                if (ledgerDimAllocListForProject)
                {
                    SysTransactionScopeCache::set(
                        classStr(AccDistProcessorProjectExtension),
                        [sourceDocumentLineItem.parmSourceDocumentLine().RecId, sourceDocumentLineItem.parmSourceDocumentLine().RecVersion],
                        ledgerDimAllocListForProject);
                }
            }
        }

        returnedledgerDimensionAllocationList = super();

        return returnedledgerDimensionAllocationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        ProjectAccDistRule projectAccDistRule;
        boolean isProject;
        LedgerPostingType ledgerPostingType;
        CustInvoiceLineSourceDocLineItem custInvoiceLineSourceDocLineItem;

        projectAccDistRule = ProjectAccDistRule::newFromAccountingDistributionRule(this);
        isProject = projectAccDistRule.parmIsProject();

        if (isProject)
        {
            ledgerPostingType = projectAccDistRule.parmLedgerPostingType();
        }
        else
        {
            custInvoiceLineSourceDocLineItem = sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;
            if (custInvoiceLineSourceDocLineItem.parmIsProjIntercompany())
            {
                ledgerPostingType = LedgerPostingType::IntercompanyRevenue;
            }
            else
            {
                ledgerPostingType = LedgerPostingType::CustRevenue;
            }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Credit;

        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            side = DebitCredit::Debit;
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>