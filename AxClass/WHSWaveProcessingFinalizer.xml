<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveProcessingFinalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveProcessingFinalizer</c> class is responsible for finalize data for wave step methods as the last thing in the wave processing.
/// </summary>
internal final class WHSWaveProcessingFinalizer
{
    #OCCRetryCount
    private WHSWaveId           waveId;
    private WHSWaveExecutionID  waveExecutionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeExecutedWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalize data after a successfully processed wave.
    /// </summary>
    [Hookable(false)]
    internal void finalizeExecutedWave()
    {
        WHSWaveTable wave = WHSWaveTable::find(waveId);
        
        WHSWaveTemplateType waveTemplateType = wave.waveTemplate().WaveTemplateType;

        using (var perfTask = this.createPerformanceTask(wave.RecId, waveTemplateType, 'finalizeExecutedWave'))
        {
            if (waveTemplateType == WHSWaveTemplateType::Shipping)
            {
                this.finalizeWave(perfTask);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWaveProcessingFinalizer construct()
    {
        return new WHSWaveProcessingFinalizer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForWaveExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSWaveProcessingFinalizer</c> for a specific wave execution process.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id.
    /// </param>
    /// <param name="_waveExecutionId">
    /// The wave execution Id that identifies the specific wave execution process.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSWaveProcessingFinalizer</c>.
    /// </returns>
    /// <remarks>
    /// This constructor should be used if you know the specific wave execution process that needs to be finalized.
    /// </remarks>
    [Hookable(false)]
    internal static WHSWaveProcessingFinalizer newForWaveExecution(
        WHSWaveId           _waveId,
        WHSWaveExecutionId  _waveExecutionId)
    {
        var waveProcessingFinalizer = WHSWaveProcessingFinalizer::construct();
        waveProcessingFinalizer.parmWaveId(_waveId);
        waveProcessingFinalizer.parmWaveExecutionId(_waveExecutionId);

        return waveProcessingFinalizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeWave</Name>
				<Source><![CDATA[
    private void finalizeWave(WHSInstrumentationPerformanceTask _perfTask)
    {
        try
        {
            ttsbegin;

            WHSWaveTable waveTable = WHSWaveTable::find(waveId);

            WHSWaveTemplateLine templateLine;

            while select templateLine
                order by templateLine.WaveStep
                where templateLine.WaveTemplateName == waveTable.WaveTemplateName
            {
                this.finalizeWaveStep(templateLine.PostMethodName, _perfTask);
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict) //can occur if two waves have updated the same loadline and both fails and need to adjust workcreatedqty
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }

            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }

            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::TransientSqlConnectionError;
            }

            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::TransientSqlConnectionError;
            }

            retry;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeWaveStep</Name>
				<Source><![CDATA[
    private void finalizeWaveStep(WHSPostMethodName _postMethodName, WHSInstrumentationPerformanceTask _perfTask)
    {
        WHSWaveStepMethodFinalizer waveStepMethodFinalizer = WHSWaveStepMethodFinalizerFactory::createInstanceFromParameters(
            waveId,
            waveExecutionId,
            _postMethodName,
            _perfTask);
        
        if (waveStepMethodFinalizer)
        {
            waveStepMethodFinalizer.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPerformanceTask</Name>
				<Source><![CDATA[
    private WHSInstrumentationPerformanceTask createPerformanceTask(RefRecId _waveTableRecId, WHSWaveTemplateType _waveTemplateType, str _action)
    {
        return new WHSInstrumentationWaveStepMethodFinalizerPerformanceTask(_waveTableRecId, _waveTemplateType, waveExecutionId, _action);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>