<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingRuleQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingRuleQueryBuilder implements INettingRuleQueryBuild
{
    private const str PositiveAmount = '0..';
    private const str NegativeAmount = '..0';
    private const str DueDate = 'DueDate';
    private const str AmountCur = 'AmountCur';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryForDebit</Name>
				<Source><![CDATA[
    public Query buildQueryForDebit(CustVendNettingPair _nettingPair, CurrencyCode _currencyCode, CustVendNettingRuleNettingSequence _sequence, boolean _isCreditDebitNote, NettingRuleProcessParameter _parameter)
    {
        Query query = new Query();
        TableId dataSourceTable = CustVendNettingRuleQueryBuilder::getDataSourceTableId(_nettingPair.DebitAccountType);
        QueryBuildDataSource qbds = query.addDataSource(dataSourceTable);
        str amountCurRange = this.getAmountCurRange(_nettingPair.DebitAccountType, _isCreditDebitNote);
        CustVendNettingCandidateQueryBuilder::buildNettingCandidateQuery(
            qbds,
            dataSourceTable,
            _nettingPair.DebitAccountNum,
            _nettingPair.StartDate,
            this.adjustToDate(_nettingPair.ExpireDate, _parameter.getInvoiceDueDate()),
            _currencyCode,
            amountCurRange);
        this.excludeVendCreditNoteWithCashDisc(qbds, _isCreditDebitNote, dataSourceTable);
        this.applySequence(qbds, dataSourceTable, _sequence, amountCurRange == PositiveAmount);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForCredit</Name>
				<Source><![CDATA[
    public Query buildQueryForCredit(CustVendNettingPair _nettingPair, CurrencyCode _currencyCode, CustVendNettingRuleNettingSequence _sequence, boolean _isCreditDebitNote, NettingRuleProcessParameter _parameter)
    {
        Query query = new Query();
        TableId dataSourceTable = CustVendNettingRuleQueryBuilder::getDataSourceTableId(_nettingPair.CreditAccountType);
        QueryBuildDataSource qbds = query.addDataSource(dataSourceTable);
        str amountCurRange = this.getAmountCurRange(_nettingPair.CreditAccountType, _isCreditDebitNote);
        CustVendNettingCandidateQueryBuilder::buildNettingCandidateQuery(
            qbds,
            dataSourceTable,
            _nettingPair.CreditAccountNum,
            _nettingPair.StartDate,
            this.adjustToDate(_nettingPair.ExpireDate, _parameter.getInvoiceDueDate()),
            _currencyCode,
            amountCurRange);
        this.excludeVendCreditNoteWithCashDisc(qbds, _isCreditDebitNote, dataSourceTable);
        this.applySequence(qbds, dataSourceTable, _sequence, amountCurRange == PositiveAmount);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSourceTableId</Name>
				<Source><![CDATA[
    internal static TableId getDataSourceTableId(LedgerJournalACType _accountType)
    {
        TableId tableId;
        switch (_accountType)
        {
            case LedgerJournalACType::Vend:
                tableId = tableNum(VendNettingTransView);
                break;

            case LedgerJournalACType::Cust:
                tableId = tableNum(CustNettingTransTotalView);
                break;

            default:
                throw Error(Error::wrongUseOfFunction(funcName()));
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustToDate</Name>
				<Source><![CDATA[
    private TransDate adjustToDate(TransDate _toDate, TransDate _invoiceDueDate)
    {
        if (_invoiceDueDate)
        {
            _toDate = _toDate ? min(_toDate, _invoiceDueDate) : _invoiceDueDate;
        }

        return _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurRange</Name>
				<Source><![CDATA[
    private str getAmountCurRange(LedgerJournalACType _accountType, boolean _isCreditDebitNote)
    {
        if ((_isCreditDebitNote && _accountType == LedgerJournalACType::Vend) || (!_isCreditDebitNote && _accountType == LedgerJournalACType::Cust))
        {
            return PositiveAmount;
        }
        else
        {
            return NegativeAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeVendCreditNoteWithCashDisc</Name>
				<Source><![CDATA[
    private void excludeVendCreditNoteWithCashDisc(QueryBuildDataSource _qbds, boolean _isCreditDebitNote, TableId _dataSourceTableId)
    {
        if (_isCreditDebitNote && _dataSourceTableId == tableNum(VendNettingTransView) && VendParameters::find().CashDiscForCreditNote)
        {
            _qbds.addRange(fieldNum(VendNettingTransView, CashDiscDate)).value(SysQuery::value(dateNull()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySequence</Name>
				<Source><![CDATA[
    private void applySequence(QueryBuildDataSource _qbds, TableId _dataSourceTableId, CustVendNettingRuleNettingSequence _sequence, boolean _isAmountPositive)
    {
        switch (_sequence)
        {
            case CustVendNettingRuleNettingSequence::DueDateAsc:
                _qbds.addOrderByField(fieldName2Id(_dataSourceTableId, DueDate));
                break;

            case CustVendNettingRuleNettingSequence::DueDateDesc:
                _qbds.addOrderByField(fieldName2Id(_dataSourceTableId, DueDate), SortOrder::Descending);
                break;

            case CustVendNettingRuleNettingSequence::InvBalanceAsc:
                if (_isAmountPositive)
                {
                    _qbds.addOrderByField(fieldName2Id(_dataSourceTableId, AmountCur));
                }
                else
                {
                    _qbds.addOrderByField(fieldName2Id(_dataSourceTableId, AmountCur), SortOrder::Descending);
                }
                break;

            case CustVendNettingRuleNettingSequence::InvBalanceDesc:
                if (_isAmountPositive)
                {
                    _qbds.addOrderByField(fieldName2Id(_dataSourceTableId, AmountCur), SortOrder::Descending);
                }
                else
                {
                    _qbds.addOrderByField(fieldName2Id(_dataSourceTableId, AmountCur));
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>