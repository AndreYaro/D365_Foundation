<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcExecuteSupplyLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCExecuteSupplyLocation</c> class determines the supply location of a constraint-based
/// configurable product.
/// </summary>
class PcExecuteSupplyLocation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInterCompanyId</Name>
				<Source><![CDATA[
    protected CompanyId findInterCompanyId(ItemId _itemId, ReqSetupDim _reqSetupDim, InventQty _qty, TransDate _transDate)
    {
        VendAccount                 vendId;
        PriceDiscTable              priceDiscTable;
        ReqParameters               reqParameters = ReqParameters::find();
        CompanyId                   companyId;

        // Get default vendor
        vendId = _reqSetupDim.primaryVendId();

        if (!vendId && reqParameters.ReqSearchTradeAgreement)
        {
            // Search trade agreements
            priceDiscTable = ReqTrans::findPriceDiscTable(_itemId,_reqSetupDim.inventDim().InventDimId,_qty,_transDate,reqParameters.ReqSearchTradeMethod,_reqSetupDim.setup());

            if (priceDiscTable.RecId)
            {
                vendId = priceDiscTable.AccountRelation;
            }
        }

        if (vendId)
        {
            companyId = VendTable::find(vendId).interCompanyTradingPartnerCompanyID();
        }

        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSupplyLocationIterative</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the company, site and warehouse on which the item should be supplied from.
    /// </summary>
    /// <param name="_itemId">The configurable item.</param>
    /// <param name="_inventDim">The demand dimension.</param>
    /// <param name="_qty">The inventory quantity.</param>
    /// <param name="_transDate">The transaction date.</param>
    /// <param name="_legalEntityChain">Chain of legal entities.</param>
    /// <remarks>
    /// This is an iterative implementation that replaces the old, recursive approach.
    /// The loop continues as long as a next <c>InventDim</c> can be found that has not already occurred.
    /// The keySet keeps track of the history.
    /// An exception is thrown when a key is encountered twice.
    /// </remarks>
    private void findSupplyLocationIterative(ItemId _itemId, InventDim _inventDim, InventQty _qty, TransDate _transDate, List _legalEntityChain)
    {
        Set keySet = new Set(Types::Container);
        InventTable inventTable = InventTable::find(_itemId);
        CompanyId companyId = curExt();
        InventDim inventDim = this.addToLegalEntityChain(_legalEntityChain, keySet, _inventDim, companyId);

        while (inventTable && inventDim)
        {
            InventDim nextInventDim;
            changecompany (companyId)
            {
                inventTable = this.getInventTableInCurrentCompany(_itemId, companyId);

                // Search using item coverage
                ReqSetupDim reqSetupDim = ReqSetupDim::newInventTable(inventTable, inventDim.InventDimId, inventDim);
                ReqRefType reqRefType = reqSetupDim.plannedOrderTypeReq();
                InventLocationId inventLocationIdTo = reqSetupDim.mainInventLocationId(reqRefType);

                if (inventLocationIdTo && inventLocationIdTo != inventDim.InventLocationId)
                {
                    nextInventDim = this.getTransferLocation(inventTable, inventDim, inventLocationIdTo);
                }
                else if (reqRefType == ReqRefType::ItemPlannedOrder)
                {
                    // Search for inter company trading relations
                    CompanyId interCompanyId = this.findInterCompanyId(_itemId, reqSetupDim, _qty, _transDate);

                    if (interCompanyId)
                    {
                        companyId = interCompanyId; // set in the loop scope to stay in the company
                        nextInventDim = this.findInterCompanyInventDim(inventTable, inventDim, companyId);
                    }
                }
            
                inventDim = this.addToLegalEntityChain(_legalEntityChain, keySet, nextInventDim, companyId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTableInCurrentCompany</Name>
				<Source><![CDATA[
    private InventTable getInventTableInCurrentCompany(ItemId _itemId, CompanyId _companyId)
    {
        InventTable inventTable = InventTable::find(_itemId);

        if (!inventTable)
        {
            throw error(strFmt('@SCM:PC_ItemHasNotBeenReleasedInIntercompanyLegalEntityChain_Error', _itemId, _companyId));
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInterCompanyInventDim</Name>
				<Source><![CDATA[
    private InventDim findInterCompanyInventDim(InventTable _inventTable, InventDim _inventDim, CompanyId _companyId)
    {
        changecompany(_companyId)
        {
            InventTable inventTableInterCompany = InventTable::findByProduct(_inventTable.Product);
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTableInterCompany);

            InventDim interCompanyInventDim;
            inventDimGroupSetup.ecoResProductDimGroupSetup().copyProductDimensions(_inventDim, interCompanyInventDim);
            interCompanyInventDim.initFromInventTable(inventTableInterCompany, InventItemOrderSetupType::Sales, interCompanyInventDim);
            return InventDim::findOrCreate(interCompanyInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToLegalEntityChain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the InventDim to the legal entity chain after validation.
    /// </summary>
    /// <param name = "_legalEntityChain">The chain of legal entities.</param>
    /// <param name = "_inventDim">The InventDim to add to the chain.</param>
    /// <param name = "_keySet">A set containing all the keys that have been encountered before.</param>
    /// <param name = "_companyId">The company id that the InventDim belongs to.</param>
    /// <returns>A copy of the InventDim if successful, or null if the InventDim is null.</returns>
    /// <remarks>
    /// This method will check and throw and exception if the chain is recursive.
    /// </remarks>
    private InventDim addToLegalEntityChain(List _legalEntityChain, Set _keySet, InventDim _inventDim, CompanyId _companyId)
    {
        if (!_inventDim)
        {
            return _inventDim;
        }

        this.addToKeySet(_keySet, _inventDim, _companyId);

        // Copy all values from the caller buffer
        InventDim inventDim;
        inventDim.data(_inventDim);
        _legalEntityChain.addEnd(inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToKeySet</Name>
				<Source><![CDATA[
    private void addToKeySet(Set _keySet, InventDim _inventDim, CompanyId _companyId)
    {
        container key = [_companyId, _inventDim.InventSiteId, _inventDim.InventLocationId];

        if (_keySet.in(key))
        {
            throw error(strFmt("@SCM:PCExecuteSupplyLocationRecursiveChainError", _companyId, _inventDim.InventSiteId, _inventDim.InventLocationId));
        }

        _keySet.add(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSupplyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the company, site and warehouse on which the item should be supplied from.
    /// </summary>
    /// <param name="_itemId">
    /// The configurable item.
    /// </param>
    /// <param name="_inventDim">
    /// The sales dimension.
    /// </param>
    /// <param name="_qty">
    /// The inventory quantity.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_legalEntityChain">
    /// Chain of legal entities.
    /// </param>
    /// <remarks>
    /// One assumption for this to work is that there is never any onhand to be considered for the specific item/dimension.
    /// Another assumption is that the current company must be the legal entity of the source document line when calling this method.
    /// Otherwise the correct <c>InventDim</c> record will not be found, or in the case of virtual companies the <c>company()</c> method
    /// on the selected <c>InventDim</c> record will yield an incorrect result.
    /// This method was modified to add the legal entities encountered to the list passed as argument.
    /// </remarks>
    public void findSupplyLocation(ItemId _itemId, InventDim _inventDim, InventQty _qty, TransDate _transDate, List _legalEntityChain)
    {
        this.findSupplyLocationIterative(_itemId, _inventDim, _qty, _transDate, _legalEntityChain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferLocation</Name>
				<Source><![CDATA[
    private InventDim getTransferLocation(InventTable _inventTable, InventDim _inventDim, InventLocationId _inventLocationIdTo)
    {
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(_inventTable);
        InventDim inventDim;
        inventDimGroupSetup.ecoResProductDimGroupSetup().copyProductDimensions(_inventDim, inventDim);

        inventDim.InventLocationId = _inventLocationIdTo;
        inventDim.InventSiteId = InventLocation::find(_inventLocationIdTo).InventSiteId;
        // The current company context must be the legal entity of the location for this select to yield the correct result.
        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Overridden to make protected
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLegalEntityChain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing of the legal entity chain.
    /// </summary>
    /// <param name="_legalEntityChain">
    /// A chain of legal entities.
    /// </param>
    /// <returns>
    /// The supply legal entity information.
    /// </returns>
    /// <remarks>
    /// If this method is executed on an intercompany purchase order context, the first value on the legal entity chain is the
    /// supply inventDim defined on the purchase order and it should not be removed.
    /// In the other cases, including the standard scenarios, keeping the demand inventDim
    /// is not causing any issues. 
    /// </remarks>
    public InventDim processLegalEntityChain(List _legalEntityChain)
    {
        ListIterator li = new ListIterator(_legalEntityChain);
        li.begin();

        // Default to demand location or initial supply location (in case
        // PCPurchaseOrderIntercompanySetupUsageToggle flight is enabled and 
        // this method is executed on an intercompany purchase order context).
        InventDim inventDim = li.value();

        while (li.more())
        {
            inventDim = li.value();
            li.next();
        }

        // returning the inventDim of the supplying legal entity
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupplyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company, site and warehouse on which the item should be supplied from.
    /// </summary>
    /// <param name="_itemId">
    /// The configurable item.
    /// </param>
    /// <param name="_inventDim">
    /// The sales dimension.
    /// </param>
    /// <param name="_qty">
    /// The inventory quantity.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_legalEntityChain">
    /// Chain of legal entities.
    /// </param>
    /// <remarks>
    /// One assumption for this to work is that there is never any onhand to be considered for the specific item/dimension.
    /// Another assumption is that the current company must be the legal entity of the source document line when calling this method.
    /// Otherwise the correct <c>InventDim</c> record will not be found.
    /// This method was modified to add the legal entities encountered to the list passed as argument.
    /// </remarks>
    public InventDim getSupplyLocation(ItemId _itemId, InventDim _inventDim, InventQty _qty, TransDate _transDate, List _legalEntityChain)
    {
        // get the supply location based on item coverage
        this.findSupplyLocation(_itemId,
                                _inventDim,
                                _qty,
                                _transDate,
                                _legalEntityChain);

        return this.processLegalEntityChain(_legalEntityChain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCExecuteSupplyLocation construct()
    {
        return new PCExecuteSupplyLocation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>