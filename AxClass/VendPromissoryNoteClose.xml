<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteClose</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPromissoryNoteClose extends RunBase
{
    VendPromissoryNoteID    vendPromissoryNoteID;
    VendPromissoryNoteJour  vendPromissoryNoteJour;
    container               conVendPromissoryNoteId;

    NoYesId                 close;

    DialogField             dialogClose;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        close,
        conVendPromissoryNoteId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog   dialog = super();

        dialogClose = dialog.addField(extendedTypeStr(NoYesId),"@SYS71615","@SYS71615");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        close = dialogClose.value();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPromissoryNoteId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmVendPromissoryNoteId(VendPromissoryNoteID _vendPromissoryNoteID)
    {
        conVendPromissoryNoteId += _vendPromissoryNoteID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS25904");
        }

        try
        {
            ttsbegin;

                this.update();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void update()
    {
        Counter    counter;

        for (counter = conlen(conVendPromissoryNoteId);
             counter;
             counter = counter - 1)
        {
            vendPromissoryNoteJour = VendPromissoryNoteJour::find(conpeek(conVendPromissoryNoteId, counter), true);
            if (!vendPromissoryNoteJour.closeNote(true))
            {
                throw error("@SYS25904");
            }
            else
            {
                vendPromissoryNoteJour.Open = NoYes::No;
                vendPromissoryNoteJour.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (!close)
        {
            ok = checkFailed("@SYS28003");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS15212";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        VendPromissoryNoteClose     vendPromissoryNoteClose;
        VendPromissoryNoteJour      vendPromissoryNoteJour;
        FormDataSource              formDS = FormDataUtil::getFormDataSource(args.record());

        vendPromissoryNoteClose = new VendPromissoryNoteClose();

        if (vendPromissoryNoteClose.prompt())
        {
            for (vendPromissoryNoteJour = formDS.getFirst(true) ? formDS.getFirst(true) : args.record();
                 vendPromissoryNoteJour;
                 vendPromissoryNoteJour = formDS.getNext())
            {
                vendPromissoryNoteClose.parmVendPromissoryNoteId(vendPromissoryNoteJour.PromissoryNoteId);
            }

            VendPromissoryNoteClose::runServer(vendPromissoryNoteClose.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void runServer(container _packedData)
    {
        VendPromissoryNoteClose setClose;

        setClose = new VendPromissoryNoteClose();
        setClose.unpack(_packedData);
        setClose.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>