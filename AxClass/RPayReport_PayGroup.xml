<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_PayGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll groups report.
/// </summary>
class RPayReport_PayGroup extends OXMLExcelReport_RPay implements BatchRetryable
{
    counter         pageNumber;
    QueryRun        queryRun;

    #define.pageWidth(11)

    #define.Prolog('PROLOG')
    #define.Header_Group('HEADER_GROUP')
    #define.Header_Employee('HEADER_EMPLOYEE')
    #define.Body_Group('BODY_GROUP')
    #define.Body_Employee('BODY_EMPLOYEE')

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        switch (_bookmark)
        {
            case #Prolog:
                return #minHeight * 4 + 8;
            case #Header_Group:
                return #minHeight + 15;
            case #Header_Employee:
                return #minHeight + 5;
        }
        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RPayGroup       prevGroupId = '';
        RPayGroup       curGroupId;
        RPayGroupTable  groupTableLocal;
        currentHeight   = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.updateQuery();
        queryRun.reset();

        if (SysQuery::countTotal(queryRun) > 0)
        {
            this.execute(#Prolog);
        }

        while (queryRun.next())
        {
            groupTableLocal = queryRun.get(tableNum(RPayGroupTable));
            curGroupId = groupTableLocal.PayGroup;

            if (prevGroupId != curGroupId)
            {
                if (this.mustCreateNewPageForProlog())
                {
                    document.insertPageBreak(currentRow, curWorksheetNum);
                    currentHeight = 0;
                    pageNumber ++;
                    this.execute(#Prolog);
                }

                this.execute(#Header_Group);
                this.execute(#Body_Group);
                this.execute(#Header_Employee);
                this.execute(#Body_Employee);
                prevGroupId = curGroupId;
            }
            else
            {
                this.execute(#Body_Employee);
            }

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                pageNumber ++;
                this.execute(#Prolog);
                this.execute(#Header_Group);
                this.execute(#Body_Group);
                this.execute(#Header_Employee);
            }
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return this.templateName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBodyEmployee</Name>
				<Source><![CDATA[
    #define.Employee('employee')
    #define.EmployeeName('employeename')
    #define.DateFrom('datefrom')
    #define.DateTo('dateto')

    private void fillBodyEmployee()
    {
        RPayGroupMember rPayGroupMemberLocal;

        rPayGroupMemberLocal = queryRun.get(tableNum(RPayGroupMember));

        this.insertValueToSection(#Employee,        rPayGroupMemberLocal.PersonEmplId);
        this.insertValueToSection(#EmployeeName,    RHRMEmplTable::emplId2Name(rPayGroupMemberLocal.PersonEmplId));
        this.insertValueToSection(#DateFrom,        date2StrUsr(rPayGroupMemberLocal.FromDate, DateFlags::None));
        this.insertValueToSection(#DateTo,          date2StrUsr(rPayGroupMemberLocal.ToDate, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBodyGroup</Name>
				<Source><![CDATA[
    #define.GroupName('group')
    #define.Description('description')
    #define.Type('type')
    #define.Blocked('blocked')

    private void fillBodyGroup()
    {
        RPayGroupTable rPayGroupTableLocal;

        rPayGroupTableLocal = queryRun.get(tableNum(RPayGroupTable));

        this.insertValueToSection(#GroupName,       rPayGroupTableLocal.PayGroup);
        this.insertValueToSection(#Description,     rPayGroupTableLocal.Name);
        this.insertValueToSection(#Type,            rPayGroupTableLocal.Type);
        this.insertValueToSection(#Blocked,         rPayGroupTableLocal.Blocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Header_Group:
                this.fillHeaderGroup();
                break;
            case #Body_Group:
                this.fillBodyGroup();
                break;
            case #Header_Employee:
                this.fillHeaderEmployee();
                break;
            case #Body_Employee:
                this.fillBodyEmployee();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeaderEmployee</Name>
				<Source><![CDATA[
    #define.Employee('employee_label')
    #define.EmployeeName('employeename_label')
    #define.DateFrom('datefrom_label')
    #define.DateTo('dateto_label')

    private void fillHeaderEmployee()
    {
        this.insertValueToSection(#Employee,        "@SYS31456");
        this.insertValueToSection(#EmployeeName,    "@SYS54564");
        this.insertValueToSection(#DateFrom,        "@RUP141");
        this.insertValueToSection(#DateTo,          "@RUP143");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeaderGroup</Name>
				<Source><![CDATA[
    #define.GroupName('group_label')
    #define.Description('description_label')
    #define.Type('type_label')
    #define.Blocked('blocked_label')

    private void fillHeaderGroup()
    {
        this.insertValueToSection(#GroupName,       "@RUP248");
        this.insertValueToSection(#Description,     "@SYS25589");
        this.insertValueToSection(#Type,            "@SYS135297");
        this.insertValueToSection(#Blocked,         "@GLS105280");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.dateTime('datetime')
    #define.companyName('companyname')
    #define.Title('title')
    #define.pageNumber('pagenum')

    private void fillProlog()
    {
        utcdatetime dateTime = DateTimeUtil::applyTimeZoneOffset(
            DateTimeUtil::utcNow(),
            DateTimeUtil::getCompanyTimeZone());

        this.insertValueToSection(#dateTime,        dateTime);
        this.insertValueToSection(#companyName,     CompanyInfo::find().Name);
        this.insertValueToSection(#pageNumber,      strFmt("@SYS24160", pageNumber));
        this.insertValueToSection(#Title,           "@GLS105278");
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean init()
    {
        super();
        pageNumber = 1;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun   = this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    rpayTransQBDS;
        QueryBuildDataSource    rpayTableQBDS;

        query = new Query();
        rpayTransQBDS = query.addDataSource(tableNum(RPayGroupMember));

        rpayTableQBDS = rpayTransQBDS.addDataSource(tableNum(RPayGroupTable));
        rpayTableQBDS.relations(true);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header_Group);
        this.addSection(#Body_Group);
        this.addSection(#Header_Employee);
        this.addSection(#Body_Employee, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real requiredHeight = 0;
        boolean ret;
        requiredHeight = this.getRangeHeight(#body_Employee);
        ret = pageHeight - currentHeight < requiredHeight;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPageForProlog</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPageForProlog()
    {
        real requiredHeight = 0;
        boolean ret;
        requiredHeight = this.getRangeHeight(#prolog) + this.getRangeHeight(#header_group);
        ret = pageHeight - currentHeight < requiredHeight;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport_PayGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        RPayGroupMember    rPayGroupMemberLocal;

        #define.headerCells(4)
        #define.bodyCells(8)

        select count(RecId) from rPayGroupMemberLocal;

        return #headerCells + #bodyCells * int642int(rPayGroupMemberLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container       packedQR;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQR] = packedClass;

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : this.initQueryRun();

                break;
            default:
                QueryRun = this.initQueryRun();
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        queryRun.query().dataSourceTable(tableNum(rPayGroupTable)).addOrderByField(fieldNum(rPayGroupTable, PayGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_PayGroup report = new RPayReport_PayGroup();

        report.parmArgs(_args);
        report.init();
        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>