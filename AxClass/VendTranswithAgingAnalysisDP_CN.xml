<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTranswithAgingAnalysisDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendTranswithAgingAnalysisDP_CN</c> class provides data for
///  the <c>VendTransactionswithAgingAnalysis</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(VendTransactionswithAgingAnalysis_CN)),
    SRSReportParameterAttribute(classStr(VendTranswithAgingAnalysisCntract_CN))
]
public class VendTranswithAgingAnalysisDP_CN extends SRSReportDataProviderBase
{
    VendTransactionswithAgingAnalysisTmp_CN vendTransactionswithAgingAnalysisTmp_CN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendTranswithAgingAnalysisTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>VendTransactionswithAgingAnalysisTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>VendTransactionswithAgingAnalysisTmp_CN</c>
    ///  table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(VendTransactionswithAgingAnalysisTmp_CN))
    ]
    public VendTransactionswithAgingAnalysisTmp_CN getVendTranswithAgingAnalysisTmp_CN()
    {
        return vendTransactionswithAgingAnalysisTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDailySummaryReportTmp_CN</Name>
				<Source><![CDATA[
    private void insertDailySummaryReportTmp_CN(
        boolean                             _isVoucherCNUsed,
        VendTable                           _vendTable,
        VendTrans                           _vendTrans,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry,
        GeneralJournalEntry_W               _generalJournalEntryW)
    {
        AmountMSTDebCred        drAmountMst;
        AmountMSTDebCred        drSettleAmountMst;
        LedgerTransType         drTransType;
        VoucherJournal          voucher;
        Correct                 correct;

        drAmountMst       = _vendTrans.AmountMST;
        drSettleAmountMst = _vendTrans.SettleAmountMST;
        drTransType       = _vendTrans.TransType;
        correct           = _vendTrans.Correct;

        if (_isVoucherCNUsed)
        {
            voucher = _generalJournalEntryW.Voucher_CN;
        }
        else
        {
            voucher = _vendTrans.Voucher;
        }

        if ((drAmountMst != drSettleAmountMst)
            && (drTransType == LedgerTransType::Purch
                || drTransType == LedgerTransType::Vend
                || (drTransType == LedgerTransType::None
                    && drAmountMst < 0)))
        {
            vendTransactionswithAgingAnalysisTmp_CN.AccountNum = _vendTable.AccountNum;
            vendTransactionswithAgingAnalysisTmp_CN.Name       = _vendTable.name();
            vendTransactionswithAgingAnalysisTmp_CN.DueDate    = _vendTrans.DueDate;
            vendTransactionswithAgingAnalysisTmp_CN.Voucher    = voucher;
            vendTransactionswithAgingAnalysisTmp_CN.Txt        = _vendTrans.Txt;

            if (drAmountMst <= 0 || (drAmountMst > 0 && correct))
            {
                vendTransactionswithAgingAnalysisTmp_CN.DebitAmount  = 0;
                vendTransactionswithAgingAnalysisTmp_CN.CreditAmount = drAmountMst;
            }
            else
            {
                vendTransactionswithAgingAnalysisTmp_CN.DebitAmount  = drAmountMst;
                vendTransactionswithAgingAnalysisTmp_CN.CreditAmount = 0;
            }

            vendTransactionswithAgingAnalysisTmp_CN.SettleAmountMST = drSettleAmountMst;

            vendTransactionswithAgingAnalysisTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic.
    /// It will be called by SSRS at runtime. This method should compute
    /// data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query                               query;
        QueryRun                            queryRun;
        boolean                             isVoucherCNUsed;
        QueryBuildDatasource                qbdsVendTable;
        QueryBuildDatasource                qbdsVendTrans;
        QueryBuildRange                     qbRange;
        VendTable                           vendTable;
        VendTrans                           vendTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        VendAccount                         vendAcc;
        TransDate                           asOn;
        TransDate                           agingRange;
        TransDate                           agingTo;
        int                                 rangeNum;
        int                                 toNum;

        VendTranswithAgingAnalysisCntract_CN contract = this.parmDataContract()
                                                        as VendTranswithAgingAnalysisCntract_CN;

        query = this.parmQuery();

        qbdsVendTable = query.dataSourceTable(tableNum(VendTable));
        qbRange       = qbdsVendTable.range(1);

        vendAcc  = contract.parmVendAccount(qbRange.value());
        asOn     = contract.parmAsOn();
        rangeNum = contract.parmRangeNum();
        toNum    = contract.parmToNum();

        if (!asOn)
        {
            asOn = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        agingRange = asOn - toNum;
        agingTo    = asOn - rangeNum;

        isVoucherCNUsed = LedgerParameters::isChineseVoucher_CN();

        qbRange = qbdsVendTable.addRange(fieldNum(VendTable, AccountNum));
        if (vendAcc)
        {
            qbRange.value(queryValue(vendAcc));
        }

        qbdsVendTrans = query.dataSourceTable(tableNum(VendTrans));
        SysQuery::findOrCreateRange(
            qbdsVendTrans,
            fieldNum(VendTrans, DueDate)).value(SysQuery::range(agingRange, agingTo));

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            vendTable               = queryRun.get(tableNum(VendTable));
            vendTrans               = queryRun.get(tableNum(VendTrans));
            subledgerVoucherEntry   = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalEntryW    = queryRun.get(tableNum(GeneralJournalEntry_W));

            this.insertDailySummaryReportTmp_CN(
                isVoucherCNUsed,
                vendTable,
                vendTrans,
                subledgerVoucherEntry,
                generalJournalEntryW);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
