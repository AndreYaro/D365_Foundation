<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteTmpLedgerBaseLinkedDimensionEntryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmpLedgerBaseLinkedDimensionEntryController</c> class provides support for data entry in the dimension entry control for
/// the behavior mandated by the inventory dimension link setup.
/// </summary>
[System.ComponentModel.Composition.ExportMetadataAttribute(extendedtypestr(ExtendedDataTypeName), extendedtypestr(InventSiteTmpLedgerBaseLinkedDimensionValueSet)),
 System.ComponentModel.Composition.ExportAttribute(identifierstr(Dynamics.AX.Application.DimensionEntryController))]
public class InventSiteTmpLedgerBaseLinkedDimensionEntryController extends LedgerDimensionEntryController
{
    DimensionEnumeration inventSiteDimensionsToAllowEdit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSiteTmpLedgerBaseLinkedDimensionEntryController construct()
    {
        InventSiteTmpLedgerBaseLinkedDimensionEntryController controller =
            new InventSiteTmpLedgerBaseLinkedDimensionEntryController();
        controller.initialize();
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCompanyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controller when the company changes.
    /// </summary>
    protected void onCompanyChange()
    {
        super();

        changecompany (company)
        {
            InventParameters inventParameters = InventParameters::find();

            DimensionAttributeRecId linkedDimAttributeId = inventParameters.SiteDimensionAttribute;
            boolean preventEdit = (inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked);

            if (linkedDimAttributeId && preventEdit)
            {
                DimensionAttributeSetStorage editableDimensionSetStorage =
                    DimensionAttributeSetStorage::find(this.parmDimensionsToDisplay());

                editableDimensionSetStorage.removeDimensionAttribute(linkedDimAttributeId);
                DimensionEnumeration editableDimensionSet = editableDimensionSetStorage.save();

                this.parmDimensionsToAllowEdit(editableDimensionSet);

                inventSiteDimensionsToAllowEdit = editableDimensionSet;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValueSetLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controller when the displayed value set changes.
    /// </summary>
    /// <returns>
    /// true if the controller parameters were changed; otherwise, false.
    /// </returns>
    public boolean onValueSetLoad()
    {
        DimensionEnumeration oldDimensionsToAllowEdit = this.parmDimensionsToAllowEdit();

        this.updateDimensionsToAllowEdit();

        return this.parmDimensionsToAllowEdit() != oldDimensionsToAllowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionsToAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the set of editable dimensions based on the associated table type.
    /// </summary>
    private void updateDimensionsToAllowEdit()
    {
        InventParameters inventParameters = InventParameters::find();
        boolean preventEdit = (inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked);

        if (inventSiteDimensionsToAllowEdit != this.parmDimensionsToDisplay() &&
            this.parmDataSource() &&
            InventSiteTmpLedgerBaseLinkedDimensionEntryController::preventEdit(
                this.parmDataSource().cursor()) && preventEdit)
        {         
            this.parmDimensionsToAllowEdit(inventSiteDimensionsToAllowEdit);
        }
        else
        {
            this.parmDimensionsToAllowEdit(this.parmDimensionsToDisplay());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value that indicate whether the linked site dimension should be editable based on the
    ///    associated table type.
    /// </summary>
    /// <param name="_tmpLedgerBase">
    ///    The data buffer that holds a reference to the associated table type.
    /// </param>
    /// <returns>
    ///    true if the linked site dimension should not be editable; otherwise, false.
    /// </returns>
    private static boolean preventEdit(TmpLedgerBase _tmpLedgerBase)
    {
        boolean preventEdit;

        switch (_tmpLedgerBase.recordTableId)
        {
            case tableNum(InventJournalTrans):
                preventEdit = true;
                break;

            default:
                preventEdit = false;
        }

        return preventEdit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>