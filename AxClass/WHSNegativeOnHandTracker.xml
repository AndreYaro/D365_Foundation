<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNegativeOnHandTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSNegativeOnHandTracker</c> class is responsible for providing availability adjustments
/// that need to take place on upper levels of the reservation hierarchy when availability of a warehouse becomes negative.
/// </summary>
/// <remarks>
/// In order to calculate the adjustments the class keeps track
/// of initial availability of a warehouse that allows physical negative inventory
/// along with all changes to the availability on this warehouse.
/// </remarks>
class WHSNegativeOnHandTracker
{
    InventQty   committedAvailableQty;
    InventQty   totalAdjustmentQty;
    InventQty   totalDeltaQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>committedAvailableQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the committed available quantity that was provided when the class was instantiated.
    /// </summary>
    /// <returns>
    /// The committed available quantity that was provided when the class was instantiated.
    /// </returns>
    public InventQty committedAvailableQty()
    {
        return committedAvailableQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getUpperLevelAdjOnCommitedQtyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjustment quantity for the availability on upper levels of the reservation hierarchy
    /// to cover for the scenarios when available quantity was changed in a separate transaction scope.
    /// </summary>
    /// <param name="_refreshedCommittedAvailableQty">
    /// The quantity that includes latest changes in the availability from concurrent transactions.
    /// </param>
    /// <returns>
    /// The adjustment quantity for the availability on upper levels.
    /// </returns>
    /// <remarks>
    /// This type of adjustments is required in scenarios similar to the following:
    ///
    /// Initial availability
    ///     Warehouse level: 10 pieces, Site level: 10 pieces
    /// Transaction 1 begins
    /// 20 pieces are picked from the warehouse so we need to insert the following deltas
    ///     Delta1: -20 pieces on the warehouse level
    ///     Delta2: -10 pieces on the site level (changes in the negative part of the on hand should be ignored)
    /// Transaction 2 begins
    /// 5 pieces are received in the warehouse
    ///     Delta3: +5 pieces on the warehosue level
    ///     Delta4: +5 pieces on the site level
    /// Transaction 2 is committed
    /// Availability is now
    ///     Warehouse level: 15 pieces, Site level: 15 pieces
    /// If we commit transaction 1 now then our availability will become
    ///     Warehouse level: -5 pieces, Site level: 5 (This is incorrect because site level availability should be 0)
    /// To avoid such behavior we need to insert an extra adjustment delta record:
    ///     Delta5: -5 pieces on site level
    /// </remarks>
    public InventQty getUpperLevelAdjOnCommitedQtyChange(InventQty _refreshedCommittedAvailableQty)
    {
        InventQty expectedTotalAdjustment = this.getUpperLevelAdjustment(_refreshedCommittedAvailableQty, totalDeltaQty);
        InventQty actualTotalAdjustment = totalAdjustmentQty;
        return expectedTotalAdjustment - actualTotalAdjustment;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getUpperLevelAdjustment</Name>
				<Source><![CDATA[
    private InventQty getUpperLevelAdjustment(InventQty _currentQty, InventQty _deltaQty)
    {
        // For negative-enabled warehouses on hand can be presented as a sum of the negative part of the on hand and the positive part of the on hand
        // Example 1. Warehouse on hand: 5. Thus positive part: 5, Negative part: 0
        // Example 2. Warehouse on hand: -3. Thus positive part: 0, Negative part: -3
        InventQty currentPositiveQty = max(0, _currentQty);
        InventQty newPositiveQty = max(0, _currentQty + _deltaQty);

        // We should only propagate changes of the positive part up the reservation hierarchy.
        // Changes in the negative part should be ignored on the upper levels.
        // Example 1. Site qty: 5, Warehouse qty:  5, Warehouse delta: -7, Positive qty: 5, New positive qty: 0, Site on hand delta = 0 - 5 = -5, New site qty: 0, New warehouse qty: -2
        // Example 2. Site qty: 0, Warehouse qty: -2, Warehouse delta: +3, Positive qty: 0, New positive qty: 1, Site on hand delta = 1 - 0 = +1, New site qty: 1, New warehouse qty:  1
        // Example 3. Site qty: 0, Warehouse qty: -2, Warehouse delta: +1, Positive qty: 0, New positive qty: 0, Site on hand delta = 0 - 0 =  0, New site qty: 0, New warehouse qty: -1
        // Example 4. Site qty: 6, Warehouse qty:  6, Warehouse delta: -2, Positive qty: 6, New positive qty: 4, Site on hand delta = 4 - 6 = -2, New site qty: 4, New warehouse qty:  4
        InventQty upperLevelDeltaQty = newPositiveQty - currentPositiveQty;

        // Now that we know the expected upper level delta we can calculate the offset based on: upperLevelDelta = upperLevelDeltaQty + offsetQty
        return upperLevelDeltaQty - _deltaQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getUpperLevelAdjustmentForDeltaQty</Name>
				<Source><![CDATA[
    private InventQty getUpperLevelAdjustmentForDeltaQty(InventQty _availableQtyDelta)
    {
        return this.getUpperLevelAdjustment(committedAvailableQty + totalDeltaQty, _availableQtyDelta);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getUpperLevelDeltaQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the change in the available quantity
    /// that needs to take place on the upper levels of the hierarchy
    /// based on the specified change in the available quantity on the current level.
    /// </summary>
    /// <param name="_availableQtyDelta">
    /// The change in the available quantity in the inventory unit.
    /// </param>
    /// <returns>
    /// Quantity in the inventory unit.
    /// </returns>
    public InventQty getUpperLevelDeltaQty(InventQty _availableQtyDelta)
    {
        return _availableQtyDelta + this.getUpperLevelAdjustmentForDeltaQty(_availableQtyDelta);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initFromCommittedAvailableQty</Name>
				<Source><![CDATA[
    private void initFromCommittedAvailableQty(InventQty _committedAvailableQty)
    {
        committedAvailableQty = _committedAvailableQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>registerDeltaQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a change in the on hand availability.
    /// </summary>
    /// <param name="_deltaQty">
    /// Availability delta quantity in the inventory unit.
    /// </param>
    public void registerDeltaQty(InventQty _deltaQty)
    {
        InventQty adjustmentQty = this.getUpperLevelAdjustmentForDeltaQty(_deltaQty);
        totalDeltaQty += _deltaQty;
        totalAdjustmentQty += adjustmentQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSNegativeOnHandTracker construct()
    {
        return new WHSNegativeOnHandTracker();
    }
]]></Source>
			</Method>
			<Method>
				<Name>newFromCommittedAvailableQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSNegativeOnHandTracker</c> class
    /// based on the specified available quantity that has already been committed to the database.
    /// </summary>
    /// <param name="_committedAvailableQty">
    /// Available quantity that has already been committed to the database.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSNegativeOnHandTracker</c> class.
    /// </returns>
    public static WHSNegativeOnHandTracker newFromCommittedAvailableQty(InventQty _committedAvailableQty)
    {
        WHSNegativeOnHandTracker negativeOnHandTracker = WHSNegativeOnHandTracker::construct();
        negativeOnHandTracker.initFromCommittedAvailableQty(_committedAvailableQty);
        return negativeOnHandTracker;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>