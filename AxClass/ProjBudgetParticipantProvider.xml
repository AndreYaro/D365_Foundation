<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetParticipantProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetParticipantProvider implements WorkflowParticipantProvider
{
    #DEFINE.ProjectManager('ProjectManager')
    #DEFINE.ProjectController('ProjectController')
    #DEFINE.ProjectSales('ProjectSales')
    #DEFINE.ProjectHierarchySales('ProjectHierarchySales')
    #DEFINE.ProjectHierarchyManager('ProjectHierarchyManager')
    #DEFINE.ProjectHierarchyController('ProjectHierarchyController')
    #DEFINE.RootProjectSales('RootProjectSales')
    #DEFINE.RootProjectManager('RootProjectManager')
    #DEFINE.RootProjectController('RootProjectController')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    public WorkflowParticipantTokenList getParticipantTokens()
    {
        WorkflowParticipantTokenList userGroups = WorkflowParticipantTokenList::construct();

        userGroups.add(#ProjectSales,      "@SYS79867");
        userGroups.add(#ProjectManager,    "@SYS70488");
        userGroups.add(#ProjectController, "@SYS92681");

        userGroups.add(#ProjectHierarchySales,      "@SYS344858");
        userGroups.add(#ProjectHierarchyManager,    "@SYS344859");
        userGroups.add(#ProjectHierarchyController, "@SYS344860");

        userGroups.add(#RootProjectSales,      "@SYS344861");
        userGroups.add(#RootProjectManager,    "@SYS344862");
        userGroups.add(#RootProjectController, "@SYS344863");

        return userGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    public WorkflowUserList resolve(WorkflowContext _context,WorkflowParticipantToken _participantTokenName)
    {
        WorkflowUserList        userList = WorkflowUserList::construct();

        if (!_participantTokenName)
        {
            throw error("@SYS105453");
        }

        switch (_participantTokenName)
        {
            case #ProjectSales:
            case #ProjectManager:
            case #ProjectController:
                this.resolveByProject(_context, _participantTokenName, userList);
                break;

            case #ProjectHierarchySales:
            case #ProjectHierarchyManager:
            case #ProjectHierarchyController:
                this.resolveByProjectHierarchy(_context, _participantTokenName, userList);
                break;

            case #RootProjectSales:
            case #RootProjectManager:
            case #RootProjectController:
                this.resolveByRootProject(_context, _participantTokenName, userList);
                break;
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjBudgetQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query for project budget lines or project budget revision lines, based on the specified workflow context.      
    /// </summary>
    /// <param name = "_context">
    ///     Instance of <c>WorkflowContext</c>.
    /// </param>
    /// <param name = "_participantTokenName">
    ///     Instance of <c>WorkflowParticipantToken</c>.
    /// </param>
    /// <param name = "_userList">
    ///     Instance of <c>WorkflowUserList</c>.
    /// </param>
    /// <returns>
    ///     Query for the project budget or project budget revision, based on the specified workflow context.
    /// </returns>
    protected Query buildProjBudgetQuery(WorkflowContext _context, WorkflowParticipantToken _participantTokenName, WorkflowUserList _userList)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds, qbds2;

        if (_context.parmTableId() == tableNum(ProjBudget))
        {
            qbds = query.addDataSource(tableNum(ProjBudgetLine));
            qbds.addRange(fieldNum(ProjBudgetLine, ProjBudget)).value(queryValue(_context.parmRecId()));
        }
        else if (_context.parmTableId() == tableNum(ProjBudgetRevision))
        {
            qbds = query.addDataSource(tableNum(ProjBudgetRevisionLine));
            qbds.addRange(fieldNum(ProjBudgetRevisionLine, ProjBudgetRevision)).value(queryValue(_context.parmRecId()));

            qbds2 = qbds.addDataSource(tableNum(ProjBudgetLine));
            qbds2.relations(true);
            qbds2.joinMode(JoinMode::InnerJoin);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveByProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the sales manager, project controller, and project manager to the users list, based on the <c>WorkflowParticipantToken</c>.
    /// </summary>
    /// <param name = "_context">
    ///     Instance of <c>WorkflowContext</c>.
    /// </param>
    /// <param name = "_participantTokenName">
    ///     Instance of <c>WorkflowParticipantToken</c>.
    /// </param>
    /// <param name = "_userList">
    ///     Instance of <c>WorkflowUserList</c>.
    /// </param>
    private void resolveByProject(WorkflowContext _context, WorkflowParticipantToken _participantTokenName, WorkflowUserList _userList)
    {
        Query       query = this.buildProjBudgetQuery(_context, _participantTokenName, _userList);
        QueryRun    queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ProjBudgetLine projBudgetLine = queryRun.get(tableNum(ProjBudgetLine));

            if (projBudgetLine.RecId != 0)
            {
                ProjTable projTable = ProjTable::find(projBudgetLine.ProjId);

                switch (_participantTokenName)
                {
                    case #ProjectSales:
                        _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleSales));
                        break;
                    case #ProjectManager:
                        _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsible));
                        break;
                    case #ProjectController:
                        _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleFinancial));
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveByProjectHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the sales manager, project controller, and project manager to the users list, based on the <c>WorkflowParticipantToken</c>.
    /// </summary>
    /// <param name = "_context">
    ///     Instance of <c>WorkflowContext</c>.
    /// </param>
    /// <param name = "_participantTokenName">
    ///     Instance of <c>WorkflowParticipantToken</c>.
    /// </param>
    /// <param name = "_userList">
    ///     Instance of <c>WorkflowUserList</c>.
    /// </param>
    private void resolveByProjectHierarchy(WorkflowContext _context, WorkflowParticipantToken _participantTokenName, WorkflowUserList _userList)
    {
        Query       query = this.buildProjBudgetQuery(_context, _participantTokenName, _userList);
        QueryRun    queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ProjBudgetLine projBudgetLine = queryRun.get(tableNum(ProjBudgetLine));

            if (projBudgetLine.RecId != 0)
            {
                ProjId projId = projBudgetLine.ProjId;

                while (projId)
                {
                    ProjTable projTable = ProjTable::find(projId);

                    switch (_participantTokenName)
                    {
                        case #ProjectHierarchySales:
                            _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleSales));
                            break;
                        case #ProjectHierarchyManager:
                            _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsible));
                            break;
                        case #ProjectHierarchyController:
                            _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleFinancial));
                            break;
                    }

                    projId = projTable.ParentId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRootProjectQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query for project budget or project budget revision, based on the specified workflow context.
    /// </summary>
    /// <param name = "_context">
    ///     Instance of <c>WorkflowContext</c>.
    /// </param>
    /// <param name = "_participantTokenName">
    ///     Instance of <c>WorkflowParticipantToken</c>.
    /// </param>
    /// <param name = "_userList">
    ///     Instance of <c>WorkflowUserList</c>.
    /// </param>
    /// <returns>
    ///     Query for the project budget or project budget revision, based on the specified workflow context.
    /// </returns>
    protected Query buildRootProjectQuery(WorkflowContext _context, WorkflowParticipantToken _participantTokenName, WorkflowUserList _userList)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds, qbds2;

        if (_context.parmTableId() == tableNum(ProjBudget))
        {
            qbds = query.addDataSource(tableNum(ProjBudget));
            qbds.addRange(fieldNum(ProjBudget, RecId)).value(queryValue(_context.parmRecId()));
        }
        else if (_context.parmTableId() == tableNum(ProjBudgetRevision))
        {
            qbds = query.addDataSource(tableNum(ProjBudgetRevision));
            qbds.addRange(fieldNum(ProjBudgetRevision, RecId)).value(queryValue(_context.parmRecId()));

            qbds2 = qbds.addDataSource(tableNum(ProjBudget));
            qbds2.relations(true);
            qbds2.joinMode(JoinMode::InnerJoin);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveByRootProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the sales manager, project controller, and project manager to the users list, based on the <c>WorkflowParticipantToken</c>.
    /// </summary>
    /// <param name = "_context">
    ///     Instance of <c>WorkflowContext</c>.
    /// </param>
    /// <param name = "_participantTokenName">
    ///     Instance of <c>WorkflowParticipantToken</c>.
    /// </param>
    /// <param name = "_userList">
    ///     Instance of <c>WorkflowUserList</c>.
    /// </param>
    private void resolveByRootProject(WorkflowContext _context, WorkflowParticipantToken _participantTokenName, WorkflowUserList _userList)
    {
        Query                   query = this.buildRootProjectQuery(_context, _participantTokenName, _userList);
        QueryRun                queryRun;

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ProjBudget projBudget = queryRun.get(tableNum(ProjBudget));

            if (projBudget.RecId != 0)
            {
                ProjTable projTable = ProjTable::find(projBudget.RootProjId);

                switch (_participantTokenName)
                {
                    case #RootProjectSales:
                        _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleSales));
                        break;
                    case #RootProjectManager:
                        _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsible));
                        break;
                    case #RootProjectController:
                        _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleFinancial));
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjBudgetParticipantProvider construct()
    {
        return new ProjBudgetParticipantProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>