<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransOpenCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustTransOpenCashFlow</c> class is the implementation between open customer transactions and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'CustTransOpen'), ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
public class CustTransOpenCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.generateCashFlowForProcessSet(_allNew);
            this.deleteCompletedRows();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        const int SetSize = 2500;

        int i;
        int64 nextSetSize;
        int64 numberOfRecordsForCustAccountNum;
        AccountNum lastCustAccountNum;
        AccountNum fromCustAccountNum;
        AccountNum toCustAccountNum;

        Query countByCustomerQuery = this.buildAccountNumCountQuery(_allNew);
        QueryRun countByCustomerQueryRun = new QueryRun(countByCustomerQuery);
        while (countByCustomerQueryRun.next())
        {
            i++;

            CustTransOpen custTransOpen = countByCustomerQueryRun.get(tableNum(CustTransOpen));

            AccountNum custAccountNum = custTransOpen.AccountNum;
            numberOfRecordsForCustAccountNum = custTransOpen.RecId;

            if (i == 1)
            {
                fromCustAccountNum = custAccountNum;
            }

            nextSetSize +=  numberOfRecordsForCustAccountNum;
            if (nextSetSize >= SetSize)
            {
                toCustAccountNum = custAccountNum;

                this.processCashFlowForProcessSet(_allNew, fromCustAccountNum, toCustAccountNum);

                i = 0;
                nextSetSize = 0;
                fromCustAccountNum = '';
                toCustAccountNum = '';
            }

            lastCustAccountNum = custAccountNum;

        }

        // The last set is smaller than SetSize
        if (i > 0)
        {
            toCustAccountNum = lastCustAccountNum;

            this.processCashFlowForProcessSet(_allNew, fromCustAccountNum, toCustAccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountNumCountQuery</Name>
				<Source><![CDATA[
    private Query buildAccountNumCountQuery(AllNew _allNew)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CustTransOpen));

        qbds.addSelectionField(fieldNum(CustTransOpen, AccountNum));
        qbds.addSelectionField(fieldNum(CustTransOpen, RecId), SelectionField::Count);
        qbds.addGroupByField(fieldNum(CustTransOpen, AccountNum));
        qbds.addOrderByField(fieldNum(CustTransOpen, AccountNum), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(AllNew _allNew,  AccountNum _fromCustAccountNum, AccountNum _toCustAccountNum)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowCustomerOpenInvoice))
        {
            System.Exception exception;
            RecId custTransOpenRecId;
            try
            {
                CustTransOpen custTransOpen;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(custTransOpen, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQueryForSet(_allNew, _fromCustAccountNum, _toCustAccountNum);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    custTransOpen = qr.get(tableNum(CustTransOpen));
                    custTransOpenRecId = custTransOpen.RecId;
                    custTransOpen.updateLedgerCov(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(CustTransOpen), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(CustTransOpen), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateCustTransOpenCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CustTransOpen), custTransOpenRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CustTransOpen), custTransOpenRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowDeleteNotExistingRows))
        {
            System.Exception exception;
            try
            {
                ttsbegin;

                this.deleteCompletedLedgerCovRows();
                this.deleteCompletedLedgerCovDocumentRows();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CustTransOpen), 0), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CustTransOpen), 0, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows()
    {
        CustTransOpen custTransOpen;
        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(CustTransOpen)
                notexists join custTransOpen
                    where ledgerCov.TransTableId == tableNum(CustTransOpen)
                        && ledgerCov.TransRecId == custTransOpen.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows()
    {
        CustTransOpen custTransOpen;
        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        delete_from ledgerCovDocument
            where ledgerCovDocument.TransTableId == tableNum(CustTransOpen)
                notexists join custTransOpen
                    where ledgerCovDocument.TransTableId == tableNum(CustTransOpen)
                        && ledgerCovDocument.TransRecId == custTransOpen.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQueryForSet(AllNew _allNew, AccountNum _fromCustAccountNum, AccountNum _toCustAccountNum)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CustTransOpen));

        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(CustTransOpen, AccountNum));
        qbr.value(_fromCustAccountNum + '..' + _toCustAccountNum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowCustomerOpenInvoice))
        {
            System.Exception exception;
            RecId custTransOpenRecId;
            try
            {
                CustTransOpen custTransOpen;
                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(custTransOpen, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQuery(_allNew);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    custTransOpen = qr.get(tableNum(CustTransOpen));
                    custTransOpenRecId = custTransOpen.RecId;
                    custTransOpen.updateLedgerCov(ledgerCoverage);
                }

                this.deleteLedgerCovRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                this.deleteLedgerCovDocumentRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateCustTransOpenCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CustTransOpen), custTransOpenRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CustTransOpen), custTransOpenRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQuery(AllNew _allNew)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(CustTransOpen));

        if (_allNew == AllNew::New)
        {
            qbds.addRange(fieldNum(CustTransOpen, CovStatus)).value(queryValue(0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCov::deleteForTransTableId(tableNum(CustTransOpen));
        }
        else
        {
            LedgerCov::deleteForTransTableIdAndFilter(tableNum(CustTransOpen), _filter);

            CustTransOpen custTransOpen;
            LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

            delete_from ledgerCov
                where ledgerCov.TransTableId == tableNum(CustTransOpen)
                    notexists join custTransOpen
                        where ledgerCov.TransTableId == tableNum(CustTransOpen)
                            && ledgerCov.TransRecId == custTransOpen.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTransOpenCovStatus</Name>
				<Source><![CDATA[
    private void updateCustTransOpenCovStatus(TmpDataAreaRecIdFilter _updatedRows)
    {
        CustTransOpen custTransOpen;

        custTransOpen.skipDataMethods(true);
        custTransOpen.skipDatabaseLog(true);
        custTransOpen.skipEvents(true);

        update_recordset custTransOpen
            setting CovStatus = 1
            exists join _updatedRows
                where custTransOpen.RecId == _updatedRows.RefRecId
                    && _updatedRows.RefTableId == tableNum(CustTransOpen)
                    && _updatedRows.RefDataAreaId == curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCovDocument::deleteForTransTableId(tableNum(CustTransOpen));
        }
        else
        {
            LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(CustTransOpen), _filter);

            CustTransOpen custTransOpen;
            LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

            delete_from ledgerCovDocument
                where ledgerCovDocument.TransTableId == tableNum(CustTransOpen)
                    notexists join custTransOpen
                        where ledgerCovDocument.TransTableId == tableNum(CustTransOpen)
                            && ledgerCovDocument.TransRecId == custTransOpen.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        CustTable custTable;
        DirPartyTable dirPartyTable;

        TableId custTransOpenTableId = tableNum(CustTransOpen);
        LedgerCovDocumentType type = LedgerCovDocumentType::CustTransOpen;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            AccountNumber,
            DueDate,
            AccountName)
            select custTransOpenTableId,
                RecId,
                TransDate,
                type,
                accountingCurrency
                from custTransOpen
            join _filter
                where custTransOpen.TableId == _filter.RefTableId
                    && custTransOpen.RecId == _filter.RefRecId
            join Invoice, Voucher, AccountNum, DueDate
                from custTrans
                    where custTrans.RecId == custTransOpen.RefRecId
                        && custTrans.AccountNum == custTransOpen.AccountNum
            join custTable
                where custTable.AccountNum == custTrans.AccountNum
            outer join Name
                from dirPartyTable
                    where dirPartyTable.RecId == custTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@CashManagement:CashBankMgmt_CashFlow_EntityField_CustomerOpenTransaction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        switch (_tableId)
        {
            case tableNum(CustTransOpen):
                CustTransOpen custTransOpen = CustTransOpen::find(_recId);
                documentNum = custTransOpen.AccountNum;
                break;

            case tableNum(CustTrans):
                CustTrans custTrans = CustTrans::find(_recId);
                documentNum = custTrans.AccountNum;
                break;
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>