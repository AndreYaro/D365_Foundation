<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySummaryEngine_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySummaryEngine_CN</c> class is used to calculate inventoty physical quantityin a period, including received and issued quantity.
/// </summary>
/// <remarks>
/// Both the beginDate and endDate are inclusive.
/// </remarks>

class InventPhysQtySummaryEngine_CN
{
    //begin and end of a period
    TransDate   beginDate;
    TransDate   endDate;

    Query   inventQuery;

    InventSumDateType               inventSumDateType;
    int                             minus;
    InventSumDateTransPhysTmp_CN    inventSumDateTransOrigin;
    InventSumDateTransPhysTmp_CN    inventSumDateTransPhy;
    InventSumDateTransPhysTmp_CN    inventSumDateTransResult;

    InventSumDateTransPhysTmp_CN    inventSumDateTransOriginExisted;
    InventSumDateTransPhysTmp_CN    inventSumDateTransResultOnHand;

    SysOperationProgress    progress;
    Counter                 progressTotal;
    Counter                 progressCounter;

    #define.ProgressTotalStep(6)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date of calculation.
    /// </summary>
    /// <returns>
    /// The end date.
    /// </returns>
    protected TransDate baseEndDate()
    {
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the begin date of calculation.
    /// </summary>
    /// <returns>
    /// The begin date.
    /// </returns>

    protected TransDate baseStartDate()
    {
        return beginDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the summary data.
    /// </summary>

    public void calcData()
    {
        ttsbegin;

        #avifiles
        progress = SysOperationProgress::newGeneral(#AviFormLetter, "@SYS101079", #ProgressTotalStep);
        //Initializing
        progress.setText("@SYS26577");

        this.init();

        this.selectItemDim();
        this.selectInventTransPostingPhysical();

        this.updateSign();

        this.mergeRecords();
        this.mergeEmptyRecords();

        this.mergeExternalRecords();

        progress.kill();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculation result.
    /// </summary>
    /// <returns>
    /// The calculation result.
    /// </returns>

    public InventSumDateTransPhysTmp_CN getData()
    {
        return inventSumDateTransResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSummaryOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin records during calculation.
    /// </summary>
    /// <returns>
    /// The origin records during calculation. It can be reused by other instances of engine.
    /// </returns>

    public InventSumDateTransPhysTmp_CN getInventSummaryOrigin()
    {
        return inventSumDateTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initilizes calculation variables.
    /// </summary>

    protected void init()
    {
        inventSumDateType   = InventSumDateType::Base;
        minus               = -1;

        //clear all data
        delete_from inventSumDateTransOrigin;
        delete_from inventSumDateTransPhy;
        delete_from inventSumDateTransResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeEmptyRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges records that are without any transaction during the period
    /// </summary>

    protected void mergeEmptyRecords()
    {
        InventQty inventQty;

        //for the lines without transaction
        inventQty = 0;
        insert_recordset inventSumDateTransResult
            (ItemId, InventDimId, PhysicalQty,
            BeginDate, EndDate,
            ReceivedQty, IssuedQty,
            TransType)
        select ItemId, InventDimId, avg(PhysicalQty), BeginDate, EndDate, inventQty, inventQty, inventSumDateType
                from inventSumDateTransOrigin
                group by ItemId, InventDimId, BeginDate, EndDate
            notexists join inventSumDateTransPhy
                where inventSumDateTransPhy.TransType       != InventSumDateType::Final
                    && inventSumDateTransOrigin.ItemId      == inventSumDateTransPhy.ItemId
                    && inventSumDateTransOrigin.InventDimId == inventSumDateTransPhy.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeExternalRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges on-hand quantity result passed from external table.
    /// </summary>

    protected void mergeExternalRecords()
    {
        //merge the on hand result from the external table
        select firstonly RecId from inventSumDateTransResultOnHand;
        if (inventSumDateTransResultOnHand.RecId)
        {
            update_recordset inventSumDateTransResult
                setting PhysicalQty = inventSumDateTransResultOnHand.PhysicalQty
            join inventSumDateTransResultOnHand
                where inventSumDateTransResult.ItemId       == inventSumDateTransResultOnHand.ItemId
                    && inventSumDateTransResult.InventDimId == inventSumDateTransResultOnHand.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges intermediate result.
    /// </summary>
    protected void mergeRecords()
    {
        InventSumDateTransPhysTmp_CN inventSumDateTransNew = inventSumDateTransResult;
        InventSumDateTransPhysTmp_CN inventSumDateTrans = inventSumDateTransPhy;

        //Physical inventory
        this.progressUpdate("@SYS23942");
        inventSumDateType = InventSumDateType::Final;
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, PhysicalQty,
                                                BeginDate, EndDate,
                                                ReceivedQty, IssuedQty,
                                                TransType)
            select ItemId, InventDimId, avg(PhysicalQty), BeginDate, EndDate
                from inventSumDateTransOrigin
                group by ItemId, InventDimId, BeginDate, EndDate
            join sum(ReceivedQty), sum(IssuedQty), inventSumDateType /*scalar*/
                from inventSumDateTrans
                    where inventSumDateTrans.TransType      != InventSumDateType::Final
                       && inventSumDateTrans.BeginDate      == beginDate
                       && inventSumDateTrans.EndDate        == endDate
                       && inventSumDateTransOrigin.ItemId   == inventSumDateTrans.ItemId
                       && inventSumDateTransOrigin.InventDimId == inventSumDateTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBeginDate</Name>
				<Source><![CDATA[
    public TransDate parmBeginDate(TransDate _beginDate = beginDate)
    {
        beginDate = _beginDate;
        return beginDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSumQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes condition query.
    /// </summary>
    /// <param name="_inventSumQuery">
    /// The condition query.
    /// </param>
    /// <returns>
    /// The condition query.
    /// </returns>

    public Query parmInventSumQuery(Query _inventSumQuery = inventQuery)
    {
        inventQuery = _inventSumQuery;
        if (!inventQuery.dataSourceTable(tablenum(InventSum)) || !inventQuery.dataSourceTable(tablenum(InventDim)))
        {
            throw error(funcname());
        }
        return inventQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the progress bar.
    /// </summary>
    /// <param name="_text">
    /// The progress context.
    /// </param>

    protected void progressUpdate(str _text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates physical quantity.
    /// </summary>

    protected void selectInventTransPostingPhysical()
    {
        //  Update Inventory Physical
        this.selectInventTransPostingReceiveIssue();
        this.selectInventTransRegisterPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingReceiveIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates received and issued quantity during the period.
    /// </summary>

    protected void selectInventTransPostingReceiveIssue()
    {
        InventTrans                     inventTrans;
        InventTransPosting              inventTransPostingPhysical;
        InventSumDateTransPhysTmp_CN    inventSumDateTransNew;
        InventSumDateTransPhysTmp_CN    inventSumDateTrans;

        inventSumDateTransNew = inventSumDateTransPhy;
        inventSumDateTrans = inventSumDateTransOrigin;
        //  Received + Purchased:   ReceivedQty         -= Qty
        this.progressUpdate("@SYS4465");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, Sign, BeginDate, EndDate)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                    join inventTransPostingPhysical
                        where inventTransPostingPhysical.ItemId                     == inventSumDateTrans.ItemId
                            && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                            && inventTransPostingPhysical.TransDate                 >= beginDate
                            && inventTransPostingPhysical.TransDate                 <= endDate
                    join sum(Qty), minus /*scalar*/,  beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                        where inventTrans.VoucherPhysical           == inventTransPostingPhysical.Voucher
                            && inventTrans.DatePhysical             == inventTransPostingPhysical.TransDate
                            && inventTrans.InventTransOrigin        == inventTransPostingPhysical.InventTransOrigin
                            && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                            && inventTrans.StatusIssue              == StatusIssue::None
                            && (inventTrans.StatusReceipt           == StatusReceipt::Received
                                || inventTrans.StatusReceipt        == StatusReceipt::Purchased);

        //  Deducted + Sold:        DeductedQty         += Qty
        this.progressUpdate("@SYS15979");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, IssuedQty, BeginDate, EndDate)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                    join inventTransPostingPhysical
                        where inventTransPostingPhysical.ItemId                     == inventSumDateTrans.ItemId
                            && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                            && inventTransPostingPhysical.TransDate                 >= beginDate
                            && inventTransPostingPhysical.TransDate                 <= endDate
                    join sum(Qty), beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                        where inventTrans.VoucherPhysical           == inventTransPostingPhysical.Voucher
                            && inventTrans.DatePhysical             == inventTransPostingPhysical.TransDate
                            && inventTrans.InventTransOrigin        == inventTransPostingPhysical.InventTransOrigin
                            && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                            && inventTrans.StatusReceipt            == StatusReceipt::None
                            && (inventTrans.StatusIssue             == StatusIssue::Deducted
                                || inventTrans.StatusIssue          == StatusIssue::Sold);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransRegisterPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates registered and picked quantity during the period.
    /// </summary>
    protected void selectInventTransRegisterPick()
    {
        InventTrans                     inventTrans;

        InventSumDateTransPhysTmp_CN inventSumDateTransNew = inventSumDateTransPhy;
        InventSumDateTransPhysTmp_CN inventSumDateTrans = inventSumDateTransOrigin;
        // Registered
        this.progressUpdate("@SYS50316");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, Sign, BeginDate, EndDate)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                    join sum(Qty), minus /*scalar*/,  beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                        where inventTrans.ItemId                    == inventSumDateTrans.ItemId
                            && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                            && inventTrans.DateInvent               >= beginDate
                            && inventTrans.DateInvent               <= endDate
                            && inventTrans.StatusIssue              == StatusIssue::None
                            && inventTrans.StatusReceipt            == StatusReceipt::Registered;
        //Picked
        this.progressUpdate("@SYS15980");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, IssuedQty, BeginDate, EndDate)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType  == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate   == endDate
                    join sum(Qty), beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                        where inventTrans.ItemId                    == inventSumDateTrans.ItemId
                            && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                            && inventTrans.DateInvent               >= beginDate
                            && inventTrans.DateInvent               <= endDate
                            && inventTrans.StatusReceipt            == StatusReceipt::None
                            && inventTrans.StatusIssue              == StatusIssue::Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the origin records of items and dimensions for calculation.
    /// </summary>

    protected void selectItemDim()
    {
        InventSum           inventSum;
        QueryRun            qRun;
        TransDate           dateOfBegin;
        TransDate           dateOfEnd;
        InventSumDateType   type;

        type = InventSumDateType::Base;
        dateOfBegin = this.baseStartDate();
        dateOfEnd = this.baseEndDate();

        //Base data.
        this.progressUpdate("@SYS9119");

        //if passed external source
        select firstonly RecId from inventSumDateTransOriginExisted;
        if (inventSumDateTransOriginExisted.RecId)
        {
            insert_recordset inventSumDateTransOrigin (ItemId, InventDimId, PhysicalQty, BeginDate, EndDate, TransType)
                select forceplaceholders
                    ItemId, InventDimId, PhysicalQty,
                    dateOfBegin /*scalar*/,  dateOfEnd /*scalar*/, type /*scalar*/
                    from inventSumDateTransOriginExisted;
        }
        else
        {
            qRun = new QueryRun(inventQuery);
            while (qRun.next())
            {
                inventSum = qRun.get(tablenum(InventSum));

                inventSumDateTransOrigin.clear();
                inventSumDateTransOrigin.ItemId         = inventSum.ItemId;
                inventSumDateTransOrigin.InventDimId    = inventSum.InventDimId;
                inventSumDateTransOrigin.BeginDate      = this.baseStartDate();
                inventSumDateTransOrigin.EndDate        = this.baseEndDate();
                inventSumDateTransOrigin.TransType      = InventSumDateType::Base;
                //Physcial Qty = Posted Qty + Received + Registered - Deducted - Picked
                inventSumDateTransOrigin.PhysicalQty    = inventSum.physicalInventCalculated();
                inventSumDateTransOrigin.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSummaryOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the on-hand result from the external table.
    /// </summary>
    /// <param name="_inventSumDateTransResultOnHand">
    /// The external table with on-hand result.
    /// </param>

    public void setInventSummaryOnHand(InventSumDateTransPhysTmp_CN _inventSumDateTransResultOnHand)
    {
        inventSumDateTransResultOnHand = _inventSumDateTransResultOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSummaryOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the original records.
    /// </summary>
    /// <param name="_origin">
    /// The original records.
    /// </param>
    /// <returns>
    /// The original records.
    /// </returns>

    public InventSumDateTransPhysTmp_CN setInventSummaryOrigin(InventSumDateTransPhysTmp_CN _origin)
    {
        inventSumDateTransOriginExisted = _origin;
        return inventSumDateTransOriginExisted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update sign of intermediate results.
    /// </summary>

    protected void updateSign()
    {
        update_recordset inventSumDateTransPhy
            setting ReceivedQty                 = -1 * inventSumDateTransPhy.ReceivedQty,
                    IssuedQty                   = -1 * inventSumDateTransPhy.IssuedQty
            where inventSumDateTransPhy.Sign    < 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>