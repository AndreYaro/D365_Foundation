<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustConsInvoiceType_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CustConsInvoiceType_JP</c> is the type class for customer consolidation invoice.
/// </summary>
public class CustConsInvoiceType_JP extends CustVendConsInvoiceType_JP
{
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildConstructQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for Consolidated Invoice Construction.
    /// </summary>
    /// <returns>
    /// The constructed query.
    /// </returns>
    public Query buildConstructQuery()
    {
        query query = new query(queryStr(CustConsInvoiceConstruction_JP));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateConsInvoiceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for Consolidated Invoice Updating.
    /// </summary>
    /// <returns>
    /// The query for updating.
    /// </returns>
    public Query buildUpdateConsInvoiceQuery()
    {
        Query query = new Query(queryStr(CustConsInvoiceUpdate_JP));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for Consolidated Invoice updating.
    /// </summary>
    /// <returns>
    /// The constructed query.
    /// </returns>
    public Query buildUpdateQuery()
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        Query                   query;

        query = this.buildUpdateConsInvoiceQuery();

        qbds = query.dataSourceTable(tableNum(CustTable));
        qbr = qbds.findRange(fieldNum(CustTable, AccountNum));
        qbr.value(consInvoice.AccountNum);
        qbr.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>CustConsInvoiceType_JP</c> based on a given
    /// <c>CustConsInvoice_JP</c> record.
    /// </summary>
    /// <param name="_consInvoice">
    /// The given <c>CustConsInvoice_JP</c>
    /// </param>
    /// <returns>
    /// The constructed <c>CustConsInvoiceType_JP</c> instance.
    /// </returns>
    public static CustConsInvoiceType_JP construct(CustConsInvoice_JP _consInvoice)
    {
        CustConsInvoiceType_JP  custConsInvoiceType_JP;

        custConsInvoiceType_JP = new CustConsInvoiceType_JP();
        custConsInvoiceType_JP.parmCustVendConsInvoice_JP(_consInvoice);

        return  custConsInvoiceType_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated invoice.
    /// </summary>
    /// <param name="_query">
    /// The given query
    /// </param>
    /// <param name="_executionDate">
    /// The execution date.
    /// </param>
    /// <param name="_isConsDateSpecified">
    /// The specify a consolidation date.
    /// </param>
    /// <param name="_consDateSpecified">
    /// The consolidation date.
    /// </param>
    [SysObsoleteAttribute('The method has been deprecated use createV2 instead', false, 08\01\2023)]
    public static CustConsInvoice_JP create(
        Query _query,
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull())
    {
        return CustConsInvoiceType_JP::createV2(_query, _executionDate, _isConsDateSpecified, _consDateSpecified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated invoice.
    /// </summary>
    /// <param name="_query">
    /// The given query
    /// </param>
    /// <param name="_executionDate">
    /// The execution date.
    /// </param>
    /// <param name="_isConsDateSpecified">
    /// The specify a consolidation date.
    /// </param>
    /// <param name="_consDateSpecified">
    /// The consolidation date.
    /// </param>
    /// <param name = "_consolidationCurrency">
    /// The consolidation currency
    /// </param>
    /// <returns>
    /// Returns object of the CustConsInvoice_JP basis the filters provided
    /// </returns>
    public static CustConsInvoice_JP createV2(
        Query _query,
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull(),
        CustCurrencyCode _consolidationCurrency = null)
    {
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        CustInvoiceJour         invoiceJour;
        CustConsInvoice_JP      consInvoice;
        CustVendAC              account;
        TransDate               consPeriodEndDate;

        qbds = _query.dataSourceTable(tablenum(CustInvoiceJour));
        // use the execution date to limit the result set, while consolidation date will be used as the final criteria below for invoice date.
        qbds.addRange(fieldNum(CustInvoiceJour, InvoiceDate)).value(queryRange(dateNull(), _executionDate));

        if(_consolidationCurrency && TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false))
        {
            qbds.addRange(fieldNum(CustInvoiceJour, CurrencyCode)).value(_consolidationCurrency);
        }
        qbds.addSortField(fieldNum(CustInvoiceJour, InvoiceAccount));
        queryRun = new QueryRun(_query);

        ttsbegin;
        while (queryRun.next())
        {
            invoiceJour = queryRun.get(tablenum(CustInvoiceJour));

            if (queryRun.changed(tablenum(CustInvoiceJour)))
            {
                if (!CustVendConsInvoiceType_JP::isInvoiceJourPaid(invoiceJour))
                {
                    // When the Use consolidation date specified below is checked, ignore the consolidation date on customer table, and filter invoices with Invoice date by consolidation date.
                    // When it is not checked, filter invoices with Invoice date by current consolidation period end date on customer.
                    if (_isConsDateSpecified)
                    {
                        consPeriodEndDate = _consDateSpecified;
                    }
                    else
                    {
                        consPeriodEndDate = CustVendConsInvoiceType_JP::getCurrentConsPeriodEndDate(invoiceJour.InvoiceAccount, CustVendACType::Cust, _executionDate);
                    }

                    if (invoiceJour.InvoiceDate <= consPeriodEndDate)
                    {
                        if (account != invoiceJour.InvoiceAccount)
                        {
                            account = invoiceJour.InvoiceAccount;
                            consInvoice = CustConsInvoiceType_JP::insertConsInvoice(invoiceJour, _executionDate, _isConsDateSpecified, _consDateSpecified);
                        }

                        if (consInvoice)
                        {
                            CustConsInvoiceType_JP::updateInvoiceJour(invoiceJour, consInvoice);
                        }
                    }
                }
            }
        }
        ttscommit;

        return consInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertConsInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a consolidated invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The given <c>CustInvoiceJour</c> invoice to insert.
    /// </param>
    /// <param name="_executionDate">
    /// The execution date.
    /// </param>
    /// <param name="_isConsDateSpecified">
    /// The specify a consolidation date.
    /// </param>
    /// <param name="_consDateSpecified">
    /// The consolidation date.
    /// </param>
    /// <returns>
    /// The inserted consolidated invoice.
    /// </returns>
    private static CustVendConsInvoice_JP insertConsInvoice(
        CustInvoiceJour _custInvoiceJour,
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull())
    {
        CustConsInvoice_JP  consInvoiceLocal;

        consInvoiceLocal.CustTable = _custInvoiceJour.InvoiceAccount;
        consInvoiceLocal.initValue(_executionDate, _isConsDateSpecified, _consDateSpecified);
        consInvoiceLocal.PaymTerm  = _custInvoiceJour.Payment;
        consInvoiceLocal.DueDate   = consInvoiceLocal.CustVendConsInvoice_JP::calcDueDate();
        consInvoiceLocal.insert();
        return consInvoiceLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustConsInvoiceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether 'Use consolidated invoice for customer' can be used.
    /// </summary>
    /// <param name="_raiseError">
    /// Indicates whether an error will be thrown out.
    /// </param>
    /// <returns>
    /// Returns true when country region code is JP and parameter is allowed to use. Otherwise returns false.
    /// </returns>
    public static boolean isCustConsInvoiceEnabled(boolean _raiseError = false)
    {
        boolean     ret;
        boolean     isLegalEntity_JP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

        ret = isLegalEntity_JP
            && CustParameters::find().CustConsInvoice_JP;

        if (isLegalEntity_JP
            && !ret
            && _raiseError)
        {
            // The 'Use consolidated invoice for customer' parameter is not selected.
            throw error("@GLS63183");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates consolidated invoice.
    /// </summary>
    /// <param name="_consInvoice">
    /// The record of consolidated invoice.
    /// </param>
    /// <param name="_query">
    /// The given query
    /// </param>
    public static void update(
        CustConsInvoice_JP  _consInvoice,
        Query               _query)
    {
        QueryRun            queryRun = new QueryRun(_query);
        CustInvoiceJour     invoiceJour;

        ttsbegin;
        while (queryRun.next())
        {
            invoiceJour = queryRun.get(tablenum(CustInvoiceJour));

            if (queryRun.changed(tablenum(CustInvoiceJour)))
            {
                if (!CustVendConsInvoiceType_JP::isInvoiceJourPaid(invoiceJour))
                {
                    Date consDate = _consInvoice.ConsDate;
                    if (invoiceJour.InvoiceDate <= consDate)
                    {
                        CustConsInvoiceType_JP::updateInvoiceJour(invoiceJour, _consInvoice);
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates related invoice journal when creating or updating consolidated invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The given <c>CustInvoiceJour</c>.
    /// </param>
    /// <param name="_consInvoice">
    /// The given <c>CustVendConsInvoice_JP</c>.
    /// </param>
    private static void updateInvoiceJour(
        CustInvoiceJour     _custInvoiceJour,
        CustConsInvoice_JP  _consInvoice)
    {
        CustInvoiceJour     invoiceJourUpdate;
        CustInvoiceJour_W   invoiceJourUpdateW;

        ttsbegin;
        invoiceJourUpdate = CustInvoiceJour::findRecId(_custInvoiceJour.RecId, true);

        invoiceJourUpdateW = invoiceJourUpdate.custInvoiceJour_W();
        invoiceJourUpdateW.CustConsInvoice_JP = _consInvoice.RecId;
        invoiceJourUpdate.packCustInvoiceJour_W(invoiceJourUpdateW);

        invoiceJourUpdate.updateDue_JP();
        invoiceJourUpdate.update();

        // Since the invoice journal is marked with the consolidated invoice automatically,
        // so updates the related transactions accordingly.
        CustVendConsInvoiceType_JP::updateTransByMarkJour(invoiceJourUpdate, true);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    internal protected CurrencyCode getCurrencyCode()
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_W custInvoiceJour_W;

        select firstonly CurrencyCode from custInvoiceJour
            join custInvoiceJour_W
            where custInvoiceJour.RecId == custInvoiceJour_W.CustInvoiceJour
                && custInvoiceJour_W.CustConsInvoice_JP == consInvoice.RecId;

        return custInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalName</Name>
				<Source><![CDATA[
    internal protected LedgerJournalNameId getJournalName()
    {
        return CustParameters::find().ConsInvoiceLedgerJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalACType</Name>
				<Source><![CDATA[
    internal protected LedgerJournalACType getJournalACType()
    {
        return LedgerJournalACType::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHistoryInprogress</Name>
				<Source><![CDATA[
    internal protected boolean hasHistoryInprogress()
    {
        CustConsInvoiceHistory_JP consInvoiceHistoryPrevious;

        select firstonly RecId from consInvoiceHistoryPrevious
            where consInvoiceHistoryPrevious.ConsInvoiceRecId == consInvoice.RecId
                && consInvoiceHistoryPrevious.Status == CustVendConsInvoiceHistoryStatus_JP::InProgress;

        return consInvoiceHistoryPrevious.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>