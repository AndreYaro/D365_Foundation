<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDefaultLedgerListPanelGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendDefaultLedgerListPanelGroup extends VendDefaultLedgerListPanel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    public void addData(container data)
    {
        if (!VendDefaultAccounts::existVendGroupForType(vendGroup, ledgerJournalACType))
        {
            this.writeFields();
        }

        VendDefaultAccounts::writeFromPackedGroup(data, ledgerJournalACType, vendGroup, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    public container getData()
    {
        List selectedAccountList;
        ListEnumerator selectedEnumerator;

        DimensionDisplayValue account;
        DimensionLedgerAccountType accountType;
        DimensionDisplayValue selectedAccount[];

        Name accountName;
        boolean isDefault;
        container selectedData, availableData;
        int i;
        int noOfaccounts;
        boolean selectedFound;

        // Populate the selected list
        selectedAccountList = List::create(VendDefaultAccounts::packedSelectedGroupList(vendGroup, ledgerJournalACType));
        selectedEnumerator = selectedAccountList.getEnumerator();

        while (selectedEnumerator.moveNext())
        {
            if (ledgerJournalACType == LedgerJournalACType::Ledger)
            {
                [account, accountName, accountType, isDefault] = selectedEnumerator.current();
                selectedData += [[account, account, accountName, enum2str(accountType), isDefault ? defaultLabel : '']];
            }
            else
            {
                [account, accountName, isDefault] = selectedEnumerator.current();
                selectedData += [[account, account, accountName, isDefault ? defaultLabel : '']];
            }

            i++;
            selectedAccount[i] = account;
        }
        noOfAccounts = i;

        // Populate the non selected list
        selectedAccountList = List::create(VendDefaultAccounts::packedNotSelectedGroupList(ledgerJournalACType));
        selectedEnumerator = selectedAccountList.getEnumerator();

        while (selectedEnumerator.moveNext())
        {
            if (ledgerJournalACType == LedgerJournalACType::Ledger)
            {
                [account, accountName, accountType] = selectedEnumerator.current();
                selectedFound = false;
                for (i=1; i<=noOfAccounts; i++)
                {
                    if (selectedAccount[i] == account)
                    {
                        selectedFound = true;
                        break;
                    }
                }
                if (! selectedFound)
                {
                    availableData += [[account, account, accountName, enum2str(accountType)]];
                }
            }
            else
            {
                [account, accountName] = selectedEnumerator.current();
                selectedFound = false;
                for (i=1; i<=noOfAccounts; i++)
                {
                    if (selectedAccount[i] == account)
                    {
                        selectedFound = true;
                        break;
                    }
                }
                if (! selectedFound)
                {
                    availableData += [[account, account, accountName]];
                }
            }
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFields</Name>
				<Source><![CDATA[
    public void writeFields()
    {
        int idx;
        container data;

        idx = viewSelected.getNextItem(FormListNext::All);

        while (idx != -1)
        {
            data += viewSelected.getItem(idx).text();
            idx = viewSelected.getNextItem(FormListNext::All, idx);
        }
        VendDefaultAccounts::writeFromPackedGroup(data, ledgerJournalACType, vendGroup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>