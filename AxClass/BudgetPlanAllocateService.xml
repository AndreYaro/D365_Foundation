<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateServer</c> class is used to allocate budget plan data.
/// </summary>
public class BudgetPlanAllocateService
{
    BudgetPlanAllocateContract allocateContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAllocateContract</Name>
				<Source><![CDATA[
    public BudgetPlanAllocateContract parmAllocateContract(BudgetPlanAllocateContract _allocateContract = allocateContract)
    {
        allocateContract = _allocateContract;
        return allocateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the budget plan allocation.
    /// </summary>
    protected void allocateLines()
    {
        try
        {
            ttsbegin;

            BudgetPlanAllocate::allocateLines(BudgetPlanAllocateHelper::newFromContract(allocateContract).getBudgetPlanAllocateRequest());

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= BudgetPlanningConstants::MaxRetryCount)
            {
                throw error("@Budget:BudgetPlanAllocationError");
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@Budget:BudgetPlanAllocationError");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the allocation process for a given <c>BudgetPlanAllocateContract</c> object.
    /// </summary>
    /// <param name = "_allocateContract"> The <c>BudgetPlanAllocateContract</c> object. </param>
    public void startProcess(BudgetPlanAllocateContract _allocateContract)
    {
        BudgetInstrumentationLogger budgetInstrumentationLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanAllocateService));
        using (SysInstrumentationActivityContext allocateBudgetPlanContext = budgetInstrumentationLogger.budgetPlanAllocation().budgetPlanAllocationContext(_allocateContract))
        {
            this.parmAllocateContract(_allocateContract);
            this.allocateLines();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>