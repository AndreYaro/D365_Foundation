<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCheckEmployeeForgotClockOut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgCheckEmployeeForgotClockOut</c> class is responsible for creating a missing clock-out registration
/// if the employee forgot to clock-out on previous days.
/// </summary>
class JmgCheckEmployeeForgotClockOut extends RunBase
{
    JmgWorkerRecId      worker;
    JmgProfileSeconds   clockInTime;
    JmgProfileSeconds   currentTime;
    JmgProfileSeconds   lastJobStartTime;
    JmgProfileSeconds   clockOutTime;

    DialogField         dfClockOutDate;
    DialogField         dfClockOutTime;
    private boolean     hasCancelledDialog;
    private FormRun     callerForm;
    private boolean isJmgEmployeeForgotClockoutTimezoneFlightEnabled = JmgEmployeeForgotClockoutTimezoneFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    internal FormRun parmCallerForm(FormRun _callerForm = callerForm)
    {
        callerForm = _callerForm;
        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAutoClockOutTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the registration time of the automatic clock out registration.
    /// </summary>
    /// <returns>
    ///    The calculated clock out time.
    /// </returns>
    /// <remarks>
    ///    The calculated time depends on the profile upon which the employee is working.
    /// </remarks>
    private JmgSeconds calculateAutoClockOutTime()
    {
        JmgTermReg              termRegLastClockIn;
        JmgProfileSeconds       profSec = new JmgProfileSeconds();
        JmgProfileSeconds       lastRegistrationTime;
        JmgEmployee             jmgEmployee;
        JmgProfileId            profileid;
        JmgProfileSpec          jmgProfileSpec;
        JmgProfileOverrideSpec  jmgProfileOverrideSpec;
        JmgDateTime             myTime;
        JmgProfileTypeTable     jmgProfileTypeTable;

        select firstonly termRegLastClockIn
             where termRegLastClockIn.Worker     == worker                   &&
                   termRegLastClockIn.RegType    == JmgTermRegType::ClockIn  &&
                   termRegLastClockIn.RegDateTime== DateTimeUtil::newDateTime(clockInTime.date(),clockInTime.seconds(),DateTimeUtil::getUserPreferredTimeZone());

        lastRegistrationTime = new JmgProfileSeconds();
        myTime = (select firstonly RegDateTime from jmgTermReg
                                                    order by RegDateTime desc
                                                    where jmgTermReg.Worker == worker).RegDateTime;
        myTime = DateTimeUtil::applyTimeZoneOffset( myTime,DateTimeUtil::getUserPreferredTimeZone());
        lastRegistrationTime.setProfileSeconds(new JmgProfileSeconds(DateTimeUtil::date(myTime), DateTimeUtil::time(myTime)).profileSeconds());

        profSec.setProfileSeconds(currentTime.profileSeconds());
        jmgEmployee     = JmgEmployee::find(worker);

        if (termRegLastClockIn && termRegLastClockIn.ProfileDate)
        {
            profSec.setDateSeconds(termRegLastClockIn.ProfileDate,DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(termRegLastClockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone())));
        }
        else
        {
            return currentTime.profileSeconds();
        }
        profileid   = jmgEmployee.profileId(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(termRegLastClockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone())),
                                            DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(termRegLastClockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone())));

        select firstonly jmgProfileOverrideSpec
            where jmgProfileOverrideSpec.Worker         == worker
                && jmgProfileOverrideSpec.ProfileDate   == profSec.date()
            exists join jmgProfileTypeTable
            where jmgProfileOverrideSpec.ProfileType    == jmgProfileTypeTable.RecId
                && jmgProfileTypeTable.ProfileSpecType  == JmgProfileSpecTypeEnum::SignOut;

        if (jmgProfileOverrideSpec)
        {
            if (lastRegistrationTime.profileSeconds() > profSec.profileSeconds(profSec.date()+jmgProfileOverrideSpec.EndDay,jmgProfileOverrideSpec.EndTime))
                return lastRegistrationTime.profileSeconds() + 1;
            return (profSec.profileSeconds());
        }
        select firstonly jmgProfileSpec
            where jmgProfileSpec.Profile    == profileid
                && jmgProfileSpec.DayId     == JmgProfiles::date2DayId(profSec.date())
            exists join jmgProfileTypeTable
            where jmgProfileSpec.ProfileType            == jmgProfileTypeTable.RecId
                && jmgProfileTypeTable.ProfileSpecType  == JmgProfileSpecTypeEnum::SignOut;
        if (jmgProfileSpec)
        {
            if (lastRegistrationTime.profileSeconds() > profSec.profileSeconds(profSec.date()+jmgProfileSpec.EndDay,jmgProfileSpec.EndTime))
                return lastRegistrationTime.profileSeconds() + 1;
            return (profSec.profileSeconds());
        }
        return currentTime.profileSeconds() - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        return this.initForgotClockOutDialog(_dialog, _forceOnClient);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForgotClockOutDialog</Name>
				<Source><![CDATA[
    protected Object initForgotClockOutDialog(DialogRunbase _dialog, boolean _forceOnClient)
    {
        Object ret = this.dialogInternal(_dialog, _forceOnClient);

        ret.caption("@SYS38411");
        ret.addText(strfmt("@SYS38462", clockInTime.date(), JmgProfileSeconds::formattedSeconds(clockInTime.seconds(),JmgSecondPresentationEnum::Clocktime)));

        dfClockOutDate = ret.addField(extendedtypestr(JmgDate));
        dfClockOutTime = ret.addField(extendedtypestr(timeOfDay), "@SYS8758");

        this.setLastWorkerActivityTime();

        dfClockOutDate.value(lastJobStartTime.date());
        dfClockOutTime.value(lastJobStartTime.seconds());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38411";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the clock out date and time from the dialog to the internal variables.
    /// </summary>
    /// <returns>
    ///    true if the user input is validated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is called after the dialog is closed. When you inherit from this method, always
    ///    remember to call <c>super()</c>.
    /// </remarks>
    public boolean getFromDialog()
    {
        JmgProfileSeconds   now;
        boolean             ret;

        ret = super();

        if (!dfClockOutDate.value())
        {
            return checkFailed("@SYS24455");
        }

        clockOutTime = new JmgProfileSeconds(dfClockOutDate.value(), dfClockOutTime.value());

        now = new JmgProfileSeconds(JmgProfileSeconds::getSysDate(), JmgProfileSeconds::getSysTime());

        if (now.profileSeconds() < clockOutTime.profileSeconds())
        {
            ret = checkFailed("@SYS39652");
        }

        if (clockOutTime.profileSeconds() < clockInTime.profileSeconds())
        {
            ret = checkFailed("@SYS39652");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserInputRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a user input is required.
    /// </summary>
    /// <returns>
    /// true if a user input is required; otherwise, false.
    /// </returns>
    public boolean isUserInputRequired()
    {
        return JmgParameters::find().AutoSignout == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needAutoClockout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects, if the employee has been at work too long and automatic clock out is required.
    /// </summary>
    /// <returns>
    /// true if automatic clock out is required; otherwise, false.
    /// </returns>
    public boolean needAutoClockout()
    {
        Minutes maxMinutes = JmgParameters::find().MaxMinutes;

        if (!maxMinutes)
        {
            return false;
        }

        if (!clockInTime)
        {
            clockInTime = new JmgProfileSeconds();
            clockInTime.setProfileSeconds(JmgTermReg::getCurSignInTime(worker));
        }

        if (!clockInTime.profileSeconds())
        {
            return false;
        }

        if (!currentTime)
        {
            if (isJmgEmployeeForgotClockoutTimezoneFlightEnabled)
            {
                currentTime = new JmgProfileSeconds(JmgProfileSeconds::getSysDate(), JmgProfileSeconds::getSysTime());
            }
            else
            {
                currentTime = new JmgProfileSeconds(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }

        if (clockOutTime && (clockOutTime.profileSeconds() > currentTime.profileSeconds()))
        {
            return false;
        }

        if ((currentTime.profileSeconds() - clockInTime.profileSeconds()) / 60 > maxMinutes)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new instance of the <c>JmgCheckEmployeeForgotClockOut</c> class.
    /// </summary>
    /// <param name="_worker">
    ///    ID of Worker to check.
    /// </param>
    /// <remarks>
    ///    Do not instantiate an object of this class by using the <c>new</c> method. Instead run the class by using the JmgCheckEmployeeForgotClockOut::main method.
    /// </remarks>
    void new(JmgWorkerRecId _worker)
    {
        super();
        worker = _worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts user for a clock out date and time, if it is detected, then the employee has been at work too long.
    /// </summary>
    /// <returns>
    ///    true if the user accepted the prompt; otherwise, false.
    /// </returns>
    public boolean prompt()
    {
        boolean ret = false;

        if (this.needAutoClockout())
        {
            if (this.isUserInputRequired())
            {
                ret = super();
                this.parmHasCancelledDialog(!ret);
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a clock out registration.
    /// </summary>
    /// <remarks>
    ///    The actual check of whether an employee has forgot to clock out is implemented in the <see
    ///    cref="M:JmgCheckEmployeeForgotClockOut.prompt" /> method.
    /// </remarks>
    public void run()
    {
        JmgJobBundle    jobBundle;
        JmgJobTable     jobTable;

        super();

        clockInTime = new JmgProfileSeconds();
        clockInTime.setProfileSeconds(JmgTermReg::getCurSignInTime(worker));

        if (!currentTime)
        {
            if (isJmgEmployeeForgotClockoutTimezoneFlightEnabled)
            {
                currentTime = new JmgProfileSeconds(JmgProfileSeconds::getSysDate(), JmgProfileSeconds::getSysTime());
            }
            else
            {
                currentTime = new JmgProfileSeconds(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }
        
        if (!clockOutTime)
        {
            clockOutTime = new JmgProfileSeconds();
            clockOutTime.setProfileSeconds(this.calculateAutoClockOutTime());

            if (!this.prompt())
            {
                return;
            }
        }

        ttsbegin;

        // Make clock out registration
        jobBundle = new JmgJobBundle(worker, false, false, false);
        jobBundle.parmAutostamp(NoYes::Yes);
        jobTable.JobId = JmgIpcActivity::findSignOutJobId(); // we only need JobId - no need for the whole record
        jobBundle.addJob(jobTable);
        jobBundle.makeRegistrations(clockOutTime.date(), clockOutTime.seconds());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClockoutTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set clock out date time.
    /// </summary>
    /// <param name="_date">
    /// The clockout date;
    /// </param>
    /// <param name="_time">
    /// The clockout time.
    /// </param>
    public void setClockoutTime(JmgDate _date, JmgTime _time)
    {
        clockOutTime = new JmgProfileSeconds(_date, _time);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set current date time
    /// </summary>
    /// <param name = "_date">
    /// The current date;
    /// </param>
    /// <param name = "_time">
    /// The current time;
    /// </param>
    public void setCurrentTime(JmgDate _date, JmgTime _time)
    {
        currentTime = new JmgProfileSeconds(_date, _time);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastStartedJobTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last time the employee made a start job, start team, or clock in registration, and saves the timestamp in memory.
    /// </summary>
    private void setLastStartedJobTime()
    {
        JmgDateTime lastRegDateTime = this.findLastStartedJobDateTime();

        lastJobStartTime = new JmgProfileSeconds();
        JmgSeconds myTime = this.convertDateTimeUsingUserPreferredTimeZone(lastRegDateTime);

        lastJobStartTime.setProfileSeconds(myTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastWorkerActivityTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last time the employee made any activity in registration, and saves the timestamp in memory.
    /// </summary>
    private void setLastWorkerActivityTime()
    {
        JmgDateTime lastRegDateTime = this.findLastWorkerActivityDateTime();

        lastJobStartTime = new JmgProfileSeconds();
        JmgSeconds myTime = this.convertDateTimeUsingUserPreferredTimeZone(lastRegDateTime);

        lastJobStartTime.setProfileSeconds(myTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateTimeUsingUserPreferredTimeZone</Name>
				<Source><![CDATA[
    private JmgSeconds convertDateTimeUsingUserPreferredTimeZone(JmgDateTime _jmgDateTime)
    {
        JmgSeconds timeSeconds;

        if (_jmgDateTime)
        {
            timeSeconds = new JmgProfileSeconds(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_jmgDateTime, DateTimeUtil::getUserPreferredTimeZone())),
                                       DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_jmgDateTime, DateTimeUtil::getUserPreferredTimeZone()))).profileSeconds();
        }

        return timeSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastStartedJobDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last time the employee made a start job, start team, or clock in registration.
    /// </summary>
    /// <returns>
    /// The date and time of the last activity.
    /// </returns>
    internal JmgDateTime findLastStartedJobDateTime()
    {
        JmgTermReg lastStartedJob;

        select firstonly RegDateTime
            from  lastStartedJob
            order by RegDateTime desc
            where lastStartedJob.Worker     == worker                       &&
                  ((lastStartedJob.JobActive== NoYes::Yes                   &&
                    (lastStartedJob.RegType == JmgTermRegType::JobStart     ||
                     lastStartedJob.RegType == JmgTermRegType::TeamStart))  ||
                   lastStartedJob.RegType   == JmgTermRegType::ClockIn)     &&
                  lastStartedJob.RegDateTime>= DateTimeUtil::newDateTime(clockInTime.date(),clockInTime.seconds(),DateTimeUtil::getUserPreferredTimeZone());

        return lastStartedJob.RegDateTime;

    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastWorkerActivityDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last time the employee made any activity in the registrations.
    /// </summary>
    /// <returns>
    /// The date and time of the last activity.
    /// </returns>
    protected JmgDateTime findLastWorkerActivityDateTime()
    {
        JmgTermReg lastWorkerActivity;

        select firstonly RegDateTime
            from  lastWorkerActivity
            order by RegDateTime desc
            where lastWorkerActivity.Worker      == worker &&
                  lastWorkerActivity.RegDateTime >= DateTimeUtil::newDateTime(clockInTime.date(),clockInTime.seconds(),DateTimeUtil::getUserPreferredTimeZone());

        return lastWorkerActivity.RegDateTime;

    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="packedClass" /> parameter value to an instance of the
    ///    <c>JmgCheckEmployeeForgotClockOut</c> class.
    /// </summary>
    /// <param name="packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When <see cref="M:RunBase.isSwappingPrompt" /> method returns true, it may be necessary to unpack
    ///    some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgCheckEmployeeForgotClockOut</c> class when it is called from
    ///    a menu item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgCheckEmployeeForgotClockOut</c> class.
    /// </param>
    /// <remarks>
    ///    Use the
    ///    <c>
    ///       main
    ///    </c>
    ///     class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///     method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        var argParams = _args.parmObject() as JmgCheckEmployeeForgotClockOutArgs;

        if (!argParams || !argParams.parmWorker())
        {
            throw error("@SYS59121");
        }

        JmgCheckEmployeeForgotClockOut jmgCheckEmployeeForgotClockOut = new JmgCheckEmployeeForgotClockOut(argParams.parmWorker());
        jmgCheckEmployeeForgotClockOut.parmCallerForm(argParams.parmCallerForm());
        utcdatetime currentTime = argParams.parmCurrentTime();
        if(currentTime)
        {
            jmgCheckEmployeeForgotClockOut.setCurrentTime(DateTimeUtil::date(currentTime), DateTimeUtil::time(currentTime));
        }
        jmgCheckEmployeeForgotClockOut.runOperation();

        _args.parmEnum(jmgCheckEmployeeForgotClockOut.parmHasCancelledDialog());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasCancelledDialog</Name>
				<Source><![CDATA[
    private boolean parmHasCancelledDialog(boolean _hasCancelledDialog = hasCancelledDialog)
    {
        hasCancelledDialog = _hasCancelledDialog;
        return hasCancelledDialog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>