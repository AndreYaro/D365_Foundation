<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDimensionExpressionBuilderHelper_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerDimensionExpressionBuilderHelper_CN</c> class provides help the dialog use the Dimension Expression Builder control to filter dimension.
/// </summary>
class LedgerDimensionExpressionBuilderHelper_CN implements SysPackable
{
    DimensionExpressionBuilder expressionBuilder;

    List targetList = new List(Types::Class);
    List expressionList = new List(Types::Class);
    RecId currentAccountStructure;
    boolean isEnabled;

    const str ExpressionDelimiter = '~';

    public const str DimensionFilterTabPageName = "@GeneralLedger:Dimensions";
    public const str DimensionFilterExpressionControlName = 'DimensionFilterExpression';

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        currentAccountStructure,
        isEnabled
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>LedgerDimensionExpressionBuilderHelper_CN</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>LedgerDimensionExpressionBuilderHelper_CN</c> class.
    /// </returns>
    public static LedgerDimensionExpressionBuilderHelper_CN construct()
    {
        LedgerDimensionExpressionBuilderHelper_CN expressionBuilderHelper = new LedgerDimensionExpressionBuilderHelper_CN();

        return expressionBuilderHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpressionBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension expression builder control.
    /// </summary>
    public void initExpressionBuilder()
    {
        if (!targetList.empty())
        {
            expressionBuilder.parmTargetList(targetList);
        }

        if (!expressionList.empty())
        {
            expressionBuilder.parmExpressionList(expressionList);
        }

        expressionBuilder.enabled(isEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the dimension expression builder.
    /// </summary>
    /// <param name = "_expressionBuilder">A new dimension expression builder.</param>
    /// <returns>The current dimension expression builder.</returns>
    public DimensionExpressionBuilder parmExpressionBuilder(DimensionExpressionBuilder _expressionBuilder = expressionBuilder)
    {
        expressionBuilder = _expressionBuilder;

        return expressionBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimensions on which the filter applied.
    /// </summary>
    /// <returns>The dimensions on which the filter applied.</returns>
    public container getFilterDimensions()
    {
        container filterDimensions;

        if (this.getExpressionList() != null)
        {
            ListEnumerator expressionListEnumerator = this.getExpressionList().getEnumerator();

            while (expressionListEnumerator.moveNext())
            {
                DimensionExpressionBuilderExpression expression = expressionListEnumerator.current();

                if (strLRTrim(expression.parmFirstCriteriaValue()) != DimensionCriteriaOperators::EmptyValue
                    || strLRTrim(expression.parmSecondCriteriaValue()) != DimensionCriteriaOperators::EmptyValue)
                {
                    filterDimensions += expression.parmTarget().parmDimensionAttributeRecId();
                }
            }
        }
        return filterDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target dimension attribute name list that used to dimension expression builder control.
    /// </summary>
    /// <returns>
    /// The current target dimension attribute name list that used to dimension expression builder control.
    /// </returns>
    public List getTargetList()
    {
        return expressionBuilder ? expressionBuilder.parmTargetList() : targetList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimension expression list that created by dimension expression builder control.
    /// </summary>
    /// <returns>
    /// The current dimension expression list that created by dimension expression builder control..
    /// </returns>
    public List getExpressionList()
    {
        return expressionBuilder ? expressionBuilder.parmExpressionList() : expressionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpressionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the dimension expression list.
    /// </summary>
    public void setExpressionList(List _expressionList)
    {
        expressionList = _expressionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, this.packTargetList(), this.packExpressionList()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass, 1);
        container packedTargetList;
        container packedExpressionList;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedTargetList, packedExpressionList] = _packedClass;
                break;
            default :
                return false;
        }
        if (packedTargetList != conNull())
        {
            this.unpackTargetList(packedTargetList);
        }

        if (packedExpressionList != conNull())
        {
            this.unpackExpressionList(packedExpressionList);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTargetList</Name>
				<Source><![CDATA[
    private container packTargetList()
    {
        container packedTargetDimensionAttribute = conNull();

        if (this.getTargetList() != null)
        {
            ListEnumerator targetListEnumerator = this.getTargetList().getEnumerator();

            while (targetListEnumerator.moveNext())
            {
                DimensionExpressionBuilderTarget target = targetListEnumerator.current();

                packedTargetDimensionAttribute += target.parmDimensionAttributeRecId();
            }
        }

        return packedTargetDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExpressionList</Name>
				<Source><![CDATA[
    private container packExpressionList()
    {
        container packedExpressionMemberList = conNull();

        if (this.getExpressionList() != null)
        {
            ListEnumerator expressionListEnumerator = this.getExpressionList().getEnumerator();

            while (expressionListEnumerator.moveNext())
            {
                DimensionExpressionBuilderExpression expression = expressionListEnumerator.current();

                packedExpressionMemberList += [
                    [expression.parmId(),
                    expression.parmTarget().parmDimensionAttributeRecId(),
                    expression.parmOperator().parmId(),
                    expression.parmFirstCriteriaValue(),
                    expression.parmSecondCriteriaValue()]];
            }
        }

        return packedExpressionMemberList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTargetList</Name>
				<Source><![CDATA[
    private void unpackTargetList(container _packedTargets)
    {
        targetList = new List(Types::Class);

        for (int i = 1; i <= conLen(_packedTargets); i++)
        {
            DimensionExpressionBuilderTarget target = DimensionExpressionBuilderTarget::newForDimensionAttribute(conPeek(_packedTargets, i));

            targetList.addEnd(target);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackExpressionList</Name>
				<Source><![CDATA[
    private void unpackExpressionList(container _packedExpression)
    {
        Name Id;
        DimensionAttributeRecId targetDimensionAttributeRecId;
        CriteriaOperators operatorId;
        DimensionValue firstCriteriaValue;
        DimensionValue secondCriteriaValue;

        expressionList = new List(Types::Class);

        for (int i = 1; i <= conLen(_packedExpression); i++)
        {
            [Id, targetDimensionAttributeRecId, operatorId, firstCriteriaValue, secondCriteriaValue] = conPeek(_packedExpression, i);

            DimensionExpressionBuilderExpression expression = DimensionExpressionBuilderExpression::newFromIdTargetOperatorCriteria(
                Id,
                DimensionExpressionBuilderTarget::newForDimensionAttribute(targetDimensionAttributeRecId),
                DimensionExpressionBuilderOperator::newForCriteriaOperator(operatorId),
                firstCriteriaValue,
                secondCriteriaValue);

            expressionList.addEnd(expression);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimension expression builder control based on the specified from and to main account.
    /// </summary>
    /// <param name = "_mainAccountFrom">The from main account.</param>
    /// <param name = "_mainAccountTo">The to main account.</param>
    public void updateDimensionExpression(MainAccountNum _mainAccountFrom, MainAccountNum _mainAccountTo)
    {
        if (this.verifyAndApplyMainAccountChangeToDimensionExpression(_mainAccountFrom, _mainAccountTo))
        {
            this.parmExpressionBuilder().enabled(true);
            isEnabled = true;
        }
        else
        {
            this.parmExpressionBuilder().clearExpressions(true);
            this.parmExpressionBuilder().enabled(false);
            isEnabled = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAndApplyMainAccountChangeToDimensionExpression</Name>
				<Source><![CDATA[
    private boolean verifyAndApplyMainAccountChangeToDimensionExpression(MainAccountNum _mainAccountFrom, MainAccountNum _mainAccountTo)
    {
        boolean success = true;

        if (!_mainAccountFrom || !_mainAccountTo || _mainAccountTo < _mainAccountFrom)
        {
            success = false;
        }
        else
        {
            MainAccount mainAccount;
            RecId dimensionHierarchyRecId;

            container dimensionHierarchyCon;

            while select RecId from mainAccount
                where ((_mainAccountFrom == _mainAccountTo && mainAccount.MainAccountId like _mainAccountFrom + DimensionCriteriaOperators::WildcardDisplay)
                        || (mainAccount.MainAccountId >= _mainAccountFrom && mainAccount.MainAccountId <= _mainAccountTo))
                    && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
            {
                dimensionHierarchyRecId = DimensionHierarchy::getAccountStructure(mainAccount.RecId);

                if (!conFind(dimensionHierarchyCon, dimensionHierarchyRecId))
                {
                    dimensionHierarchyCon += dimensionHierarchyRecId;
                }

                if (conLen(dimensionHierarchyCon) > 1)
                {
                    info(strFmt("@GeneralLedger:MessageError_InvalidAccountRangeForDimensionFilter", _mainAccountFrom, _mainAccountTo));
                    success = false;
                    break;
                }
            }

            if (success && dimensionHierarchyRecId && dimensionHierarchyRecId != currentAccountStructure)
            {
                expressionBuilder.clearExpressions(true);
                currentAccountStructure = dimensionHierarchyRecId;
                this.setTargetsListFromAccountStructure(currentAccountStructure);
            }
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTargetsListFromAccountStructure</Name>
				<Source><![CDATA[
    private void setTargetsListFromAccountStructure(RecId _accountStructureRecId)
    {
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(_accountStructureRecId);
        DimensionExpressionBuilderTarget target;
        List targetsList = new List(Types::Class);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (currentDimensionAttributeRecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
            {
                continue;
            }
            else
            {
                target = DimensionExpressionBuilderTarget::newForDimensionAttribute(currentDimensionAttributeRecId);
                targetsList.addEnd(target);
            }
        }
        expressionBuilder.parmTargetList(targetsList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseExpressionToRangeValue</Name>
				<Source><![CDATA[
    private static Range parseExpressionToRangeValue(DimensionExpressionBuilderExpression _expression, DataSourceName _dataSourceName, FieldName _fieldName)
    {
        Range parsedRange;

        DimensionValue      criteriaFirstValue  = strLRTrim(_expression.parmFirstCriteriaValue());
        DimensionValue      criteriaSecondValue = strLRTrim(_expression.parmSecondCriteriaValue());
        CriteriaOperators   criteriaOperator    = _expression.parmOperator().parmId();

        boolean criteriaFirstValueIsSet         = (criteriaFirstValue != DimensionCriteriaOperators::EmptyValue);
        boolean criteriaSecondValueIsSet        = (criteriaSecondValue != DimensionCriteriaOperators::EmptyValue);

        if (criteriaFirstValueIsSet || criteriaSecondValueIsSet)
        {
            switch (criteriaOperator)
            {
                case CriteriaOperators::BeginsWith:
                    parsedRange = criteriaFirstValue + DimensionCriteriaOperators::WildcardDisplay;
                    break;
                case CriteriaOperators::EndsWith:
                    parsedRange = DimensionCriteriaOperators::WildcardDisplay + criteriaFirstValue;
                    break;
                case CriteriaOperators::BetweenExclusive:
                    parsedRange = strFmt('((%1.%2 > "%3") && (%1.%2 < "%4"))', _dataSourceName, _fieldName, criteriaFirstValue, criteriaSecondValue);
                    break;
                case CriteriaOperators::BetweenInclusive:
                    parsedRange = strFmt('((%1.%2 >= "%3") && (%1.%2 <= "%4"))', _dataSourceName, _fieldName, criteriaFirstValue, criteriaSecondValue);
                    break;
                case CriteriaOperators::IsOneOf:
                    parsedRange = criteriaFirstValue;
                    break;
                case CriteriaOperators::Equals:
                    parsedRange = strFmt('"%1"', criteriaFirstValue);
                    break;
                case CriteriaOperators::GreaterThanExclusive:
                    parsedRange = DimensionCriteriaOperators::GreaterThan + criteriaFirstValue;
                    break;
                case CriteriaOperators::GreaterThanInclusive:
                    parsedRange = criteriaFirstValue + DimensionCriteriaOperators::RangeSeparator;
                    break;
                case CriteriaOperators::LessThanExclusive:
                    parsedRange = DimensionCriteriaOperators::LessThan + criteriaFirstValue;
                    break;
                case CriteriaOperators::LessThanInclusive:
                    parsedRange = DimensionCriteriaOperators::RangeSeparator + criteriaFirstValue;
                    break;
                case CriteriaOperators::Like:
                    parsedRange = DimensionCriteriaOperators::WildcardDisplay + criteriaFirstValue + DimensionCriteriaOperators::WildcardDisplay;
                    break;
            }
        }

        return parsedRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionFilterToDimensionDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the dimension filter to the specified query data source based on the specified dimension expression list.
    /// </summary>
    /// <param name = "_dimensionQueryBuildDataSorce">The query data source for which the dimension filter is applied.</param>
    /// <param name = "_expressionList">The dimension expression list.</param>
    public static void addDimensionFilterToDimensionDataSource(QueryBuildDataSource _dimensionQueryBuildDataSource, List _expressionList)
    {
        if (_expressionList.elements() > 0 && _dimensionQueryBuildDataSource && _dimensionQueryBuildDataSource.table() == tableNum(DimensionAttributeValueCombination))
        {
            DimensionExpressionBuilderExpression expression;
            FieldId dimensionValueFieldId;

            ListEnumerator listEnumerator = _expressionList.getEnumerator();

            while (listEnumerator.moveNext())
            {
                expression = listEnumerator.current();

                DimensionAttribute dimAttribute = DimensionAttribute::find(expression.parmTarget().parmDimensionAttributeRecId());

                dimensionValueFieldId = DimensionAttributeValueCombination::getDimensionValueFieldId(dimAttribute.Name);

                QueryBuildRange dimensionRange = SysQuery::findOrCreateRange(_dimensionQueryBuildDataSource, dimensionValueFieldId);
                dimensionRange.value(
                    LedgerDimensionExpressionBuilderHelper_CN::parseExpressionToRangeValue(
                        expression,
                        _dimensionQueryBuildDataSource.name(),
                        fieldId2Name(_dimensionQueryBuildDataSource.table(), dimensionValueFieldId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionExpressionBuilderToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the dimension expression builder control to the specified dialog.
    /// </summary>
    /// <param name = "_dialog">
    /// The <c>Dialog</c> object to add the control to.
    /// </param>
    /// <param name = "_controllerClassName">
    /// The controller class name to use.
    /// </param>
    public static void addDimensionExpressionBuilderToDialog(Dialog _dialog, ClassName _controllerClassName = classStr(LedgerDimensionExpressionBuilderController_CN))
    {
        // Set the dialog size to large for optimal display of dimension expression builder.
        _dialog.formBuildDesign().dialogSize(DialogSize::Large);

        FormBuildTabPageControl tabPageDimensionFilter = _dialog.addTabPage(DimensionFilterTabPageName).control();

        tabPageDimensionFilter.fastTabExpanded(FastTabExpanded::Yes);

        DimensionExpressionBuilderBuild dimensionFilterExpressionBuilderBuild;
        dimensionFilterExpressionBuilderBuild = tabPageDimensionFilter.addControlEx(
            classstr(DimensionExpressionBuilder), DimensionFilterExpressionControlName) as DimensionExpressionBuilderBuild;
        dimensionFilterExpressionBuilderBuild.parmControllerClassName(_controllerClassName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expressionList2StringList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a class <c>DimensionExpressionBuilderExpression</c> list to a string list.
    /// </summary>
    /// <param name = "_expressionList">The expression list to convert.</param>
    /// <returns>The string list converted.</returns>
    public static List expressionList2StringList(List _expressionList)
    {
        List stringList = new List(Types::String);

        if (_expressionList != null)
        {
            ListEnumerator expressionListEnumerator = _expressionList.getEnumerator();

            while (expressionListEnumerator.moveNext())
            {
                DimensionExpressionBuilderExpression expression = expressionListEnumerator.current();

                stringList.addEnd(
                    expression.parmId()
                    + ExpressionDelimiter + int642Str(expression.parmTarget().parmDimensionAttributeRecId())
                    + ExpressionDelimiter + enum2Value(expression.parmOperator().parmId())
                    + ExpressionDelimiter + expression.parmFirstCriteriaValue()
                    + ExpressionDelimiter + expression.parmSecondCriteriaValue());
                }
        }

        return stringList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stringList2ExpressionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a string list to a class <c>DimensionExpressionBuilderExpression</c> list.
    /// </summary>
    /// <param name = "_stringList">The string list to convert.</param>
    /// <returns>The expression list converted.</returns>
    public static List stringList2ExpressionList(List _stringList)
    {
        List expressionList = new List(Types::Class);

        if (_stringList != null)
        {
            ListEnumerator stringListEnumerator = _stringList.getEnumerator();

            while (stringListEnumerator.moveNext())
            {
                container expressionCon = str2con(stringListEnumerator.current(), ExpressionDelimiter, false);

                DimensionExpressionBuilderExpression expression = DimensionExpressionBuilderExpression::construct();

                expression.parmId(conPeek(expressionCon, 1));
                expression.parmTarget(DimensionExpressionBuilderTarget::newForDimensionAttribute(str2Int64(conPeek(expressionCon, 2))));
                expression.parmOperator(DimensionExpressionBuilderOperator::newForCriteriaOperator(str2Int(conPeek(expressionCon, 3))));
                expression.parmFirstCriteriaValue(conPeek(expressionCon, 4));
                expression.parmSecondCriteriaValue(conPeek(expressionCon, 5));

                expressionList.addEnd(expression);
            }
        }

        return expressionList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>