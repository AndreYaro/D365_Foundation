<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettle_VendCurrencyDeal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendSettle_VendCurrencyDeal_RU extends CustVendSettle_Vend
{
    private Map previousUnrealizedDateMap;
    private VendExchAdj vendExchAdj;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSettlementPair</Name>
				<Source><![CDATA[
    protected void createSettlementPair()
    {
        settlementPair = new SettlementPair_VendCurrencyDeal_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnrealizedExchAdjCurrencyDeal_RU</Name>
				<Source><![CDATA[
    protected void calcUnrealizedExchAdjCurrencyDeal_RU()
    {
        TransDate previousUnrealizedDate;
        SettlementPair_VendCurrencyDeal_RU settlementPairCurrencyDeal = settlementPair;

        if (settlementPairCurrencyDeal.getBankAdvancedTransTypeDebit() != BankAdvancedTransType_RU::None
            && settlementPairCurrencyDeal.getSpecTransCredit().Balance01
            && settlementPairCurrencyDeal.getSpecTransDebit().Balance01
            && settlementPairCurrencyDeal.getCustVendTransDebit())
        {
            SettlementUtility::reverseTransAmounts(settlementPairCurrencyDeal.getCustVendTransDebit());

            if (settlementPairCurrencyDeal.getCustVendTransDebit())
            {
                settlementPairCurrencyDeal.getCustVendTransDebit().update();
            }

            SettlementUtility::reverseTransOpenAmounts(settlementPairCurrencyDeal.getCustVendTransOpenDebit());

            if (settlementPairCurrencyDeal.getCustVendTransOpenDebit())
            {
                settlementPairCurrencyDeal.getCustVendTransOpenDebit().update();
            }

            if (! vendExchAdj)
            {
                vendExchAdj = new VendExchAdj();
            }

            vendExchAdj.dimSpec(NoneTableTrans::None);
            vendExchAdj.printExchAdj(NoYes::No);
            vendExchAdj.postingSpec(TransactionSelect::Selection);
            vendExchAdj.postingProfile(settlementPairCurrencyDeal.getCustVendTransCredit().PostingProfile);
            vendExchAdj.postingDate(settlementPairCurrencyDeal.getCurrDealEntryDate());
            vendExchAdj.exchRateDate(settlementPairCurrencyDeal.getCurrDealEntryDate());
            vendExchAdj.exchPrinciples(CustVendExchPrinciples::StandardPrinciple);
            vendExchAdj.transExchAdjTxt('');
            vendExchAdj.notes('');

            findOrCreateRange_W(vendExchAdj.queryRun().query().dataSourceTable(tableNum(VendTrans)),
                                fieldNum(VendTrans, RecId),
                                queryValue(settlementPairCurrencyDeal.getCustVendTransDebit().RecId));

            if (previousUnrealizedDateMap.exists(settlementPairCurrencyDeal.getCustVendTransDebit().RecId))
            {
                previousUnrealizedDate = previousUnrealizedDateMap.lookup(settlementPairCurrencyDeal.getCustVendTransDebit().RecId);
                previousUnrealizedDateMap.remove(settlementPairCurrencyDeal.getCustVendTransDebit().RecId);
            }

            vendExchAdj.parmCustVendTransSettlementCurDeal_RU(custVendTransSettlement);
            vendExchAdj.parmPreviousUnrealizedDate_RU(previousUnrealizedDate);
            vendExchAdj.runOperation();

            settlementPairCurrencyDeal.getCustVendTransDebit().reread();
            settlementPairCurrencyDeal.getCustVendTransOpenDebit().reread();

            previousUnrealizedDateMap.insert(settlementPairCurrencyDeal.getCustVendTransDebit().RecId, settlementPairCurrencyDeal.getCurrDealEntryDate());
            SettlementUtility::reverseTransAmounts(settlementPairCurrencyDeal.getCustVendTransDebit());

            SettlementUtility::reverseTransOpenAmounts(settlementPairCurrencyDeal.getCustVendTransOpenDebit());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurDealCanBeSettled_RU</Name>
				<Source><![CDATA[
    protected boolean checkCurDealCanBeSettled_RU()
    {
        boolean        ret;
        VendSettlement vendSettlementLoc;
        SettlementPair_VendCurrencyDeal_RU settlementPairCurrencyDeal = settlementPair;

        ret = super();

        if ((settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankAdvancedTransType != BankAdvancedTransType_RU::CurrTransfer
            && (settlementPairCurrencyDeal.getBankCurrencyTransferLogCredit().TransferCurrency != settlementPairCurrencyDeal.getCustVendTransDebit().CurrencyCode
                || settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().TransferCurrency != settlementPairCurrencyDeal.getCustVendTransCredit().CurrencyCode))
            || (settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankAdvancedTransType == BankAdvancedTransType_RU::CurrTransfer
                && settlementPairCurrencyDeal.getCustVendTransDebit().CurrencyCode != settlementPairCurrencyDeal.getCustVendTransCredit().CurrencyCode)
            && !settlementPairCurrencyDeal.isCommissionOrTransfer()
            && !settlementPairCurrencyDeal.isCashCollection())
        {
            ret = checkFailed("@GLS114404");
        }

        if ((settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy
                || settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankAdvancedTransType == BankAdvancedTransType_RU::CurrSell)
            && (!settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankSpecAccountId
                || (settlementPairCurrencyDeal.getBankCurrencyTransferLogCredit().BankEntryAccountID
            && settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankSpecAccountId    != settlementPairCurrencyDeal.getBankCurrencyTransferLogCredit().BankEntryAccountID)))
        {
            ret = checkFailed("@GLS114405");
        }

        if (! settlementPairCurrencyDeal.getSpecTransDebit().CrossRate && ! settlementPairCurrencyDeal.isCommissionOrTransfer() && ! settlementPairCurrencyDeal.isCashCollection())
        {
            ret = checkFailed("@GLS114406");
        }

        if ((settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankAdvancedTransType == BankAdvancedTransType_RU::CurrTransfer
            || settlementPairCurrencyDeal.getBankCurrencyTransferLogDebit().BankAdvancedTransType == BankAdvancedTransType_RU::CashCollection)
            && settlementPairCurrencyDeal.getCustVendTransDebit().CurrencyCode != settlementPairCurrencyDeal.getCustVendTransCredit().CurrencyCode)
        {
            ret = checkFailed(strFmt("@GLS114407", settlementPairCurrencyDeal.getCustVendTransDebit().Voucher, settlementPairCurrencyDeal.getCustVendTransCredit().Voucher));
        }

        if ((settlementPairCurrencyDeal.getCustVendTransCredit().TableId == tableNum(VendTrans) && settlementPairCurrencyDeal.getCustVendTransCredit().CustVendTrans::getCustVendTrans_W().BankCurrencyTransferId_RU)
            || (settlementPairCurrencyDeal.getCustVendTransDebit().TableId  == tableNum(VendTrans) && settlementPairCurrencyDeal.getCustVendTransDebit().CustVendTrans::getCustVendTrans_W().BankCurrencyTransferId_RU))
        {
            select firstonly crossCompany RecId from vendSettlementLoc
                where ((vendSettlementLoc.TransCompany == settlementPair.getCustVendTransCredit().DataAreaId
                    && vendSettlementLoc.TransRecId == settlementPair.getCustVendTransCredit().RecId
                    && vendSettlementLoc.AccountNum == settlementPair.getCustVendTransCredit().AccountNum)
                    || (vendSettlementLoc.TransCompany == settlementPair.getCustVendTransDebit().DataAreaId
                        && vendSettlementLoc.TransRecId == settlementPair.getCustVendTransDebit().RecId
                        && vendSettlementLoc.AccountNum == settlementPair.getCustVendTransDebit().AccountNum))
                    && vendSettlementLoc.CanBeReversed == true
                    && vendSettlementLoc.TransDate > settlementPair.getTransactionDate();

            if (vendSettlementLoc)
            {
                ret = checkFailed("@GLS221832");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(CompanyId _company, TableId _tableId, RecId _recId)
    {
        super(_company, _tableId, _recId);

        exchRateDiffCalcType      = ExchRateDiffCalcType_W::Incremental;
        previousUnrealizedDateMap = new Map(Types::Int64, Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrencyDeal_RU</Name>
				<Source><![CDATA[
    protected boolean isCurrencyDeal_RU()
    {
        SettlementPair_VendCurrencyDeal_RU settlementPairCurrencyDeal = settlementPair;
        return settlementPairCurrencyDeal.isCurrencyDeal_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>