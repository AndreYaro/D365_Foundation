<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransWMS</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransWMS</c> class is a base class that is used by specialized classes for selection
///    and registration forms.
/// </summary>
public abstract class InventTransWMS
{
    #define.InventQtyIdx(1)
    #define.InventQtyCWIdx(2)
    TmpInventTransWMS           tmpInventTransWMS;                  //handle for temporary table pending records

    // Notice the below maps that contains a quantity a the value will actually contain a container with the inventory quantity and a catch weight quantity
    Map                         mapQtyByInventTransOrigin;          //inventTransOrigin recId -> selectedQty
    Map                         mapQtyByInventTrans;                //inventTrans recId       -> selectedQty
    Map                         mapQtyByTmpInventTransWMS;          //tmpInventTransWMS recId -> map InventTrans recId -> qty
    Map                         mapInventTransInventTransOrigin;    //inventTrans recId       -> InventTransOrigin recId
    Map                         mapRollback;                        //inventTrans record      -> qty
    TmpInventTransWMS           tmpInventTransWMSRollback;          //record to which current mapRollback is related
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abortTmpInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses updates to the internal maps.
    /// </summary>
    protected void abortTmpInventTransWMS()
    {
        InventQty       inventQty;
        PdsCWInventQty  inventQtyCW;

        if (   mapRollback
            && mapRollback.elements())
        {
            MapEnumerator me = mapRollback.getEnumerator();
            while (me.moveNext())
            {
                InventTrans inventTrans = me.currentKey();
                [inventQty,inventQtyCW] = me.currentValue();
                this.setSelectedQty(tmpInventTransWMSRollback,inventTrans,inventTrans.inventDim(),inventQty
                ,false,inventQtyCW
                );
            }
        }

        mapRollback = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginTmpInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Map</c> object to track the changes to internal memory structures so that the changes
    /// can be reverted.
    /// </summary>
    /// <param name="_tmpInventTransWMSRollback">
    /// A <c>TmpInventTransWMS</c> record.
    /// </param>
    /// <returns>
    /// true if the rollback map was created; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// A rollback map exists for a different <c>TmpInventTransWMS</c> record.
    /// </exception>
    protected boolean beginTmpInventTransWMS(TmpInventTransWMS _tmpInventTransWMSRollback)
    {
        boolean result = !mapRollback;

        if (result)
        {
            tmpInventTransWMSRollback = _tmpInventTransWMSRollback;
            mapRollback               = new Map(Types::Record,Types::Container);
        }
        else
        {
            if (_tmpInventTransWMSRollback.RecId != tmpInventTransWMSRollback.RecId)
            {
                throw error(strFmt("@SYS19378",funcName()));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonDeleteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the scenario in which the user presses the Delete all button.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    /// A handle for the temporary table that contains the pending records.
    /// </param>
    /// <returns>
    /// true if the user confirmed the deletion; otherwise, false.
    /// </returns>
    public boolean buttonDeleteTmp(TmpInventTransWMS _tmpInventTransWMS)
    {
        boolean isFormDataSource = FormDataUtil::isFormDataSource(_tmpInventTransWMS);

        if (Box::yesNo(this.deleteBoxText(),DialogButton::No) != DialogButton::Yes)
        {
            return false;
        }

        if (isFormDataSource)
        {
            if (_tmpInventTransWMS.RecId
             || _tmpInventTransWMS.InventDimId
             || _tmpInventTransWMS.InventQty)
            {
                FormDataUtil::getFormDataSource(_tmpInventTransWMS).write(); // discard any pending changes the user might have made, so form can remove record as well
            }
        }

        this.makeTableEmpty();

        if (isFormDataSource)
        {
            FormDataUtil::getFormDataSource(_tmpInventTransWMS).research();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitTmpInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current map that was used to track pending changes to internal memory structures.
    /// </summary>
    protected void commitTmpInventTransWMS()
    {
        mapRollback = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBoxText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the correct text to show in the Delete all box.
    /// </summary>
    /// <returns>
    ///    A string that resembles the Delete all 'Pick now' transactions string.
    /// </returns>
    protected abstract str deleteBoxText()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates internal variables when a pending record is deleted.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    ///    The record that was deleted.
    /// </param>
    public void deleteTmp(TmpInventTransWMS _tmpInventTransWMS)
    {
        if (_tmpInventTransWMS.RecId)
        {
            Map map = this.mapQtyByTmpInventTransWMSInventTrans(_tmpInventTransWMS.RecId,true);

            if (   map
                && map.elements())
            {
                MapEnumerator me = map.getEnumerator();
                while (me.moveNext())
                {
                    InventTrans inventTrans = InventTrans::findRecId(me.currentKey());
                    this.setSelectedQty(_tmpInventTransWMS,inventTrans,inventTrans.inventDim(),0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected quantity for a specified movement.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// A record ID for the <c>InventTransOrigin</c> table.
    /// </param>
    /// <returns>
    /// The selected quantity for a given movement.
    /// </returns>
    public InventQty getSelectedQty(InventTransOriginId _inventTransOrigin)
    {
        InventQty       inventQty;

        if (mapQtyByInventTransOrigin.exists(_inventTransOrigin))
        {
            inventQty = conPeek(mapQtyByInventTransOrigin.lookup(_inventTransOrigin),#InventQtyIdx);
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedQtyCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected catch weight quantity for a specified movement.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// A record ID for the <c>InventTransOrigin</c> table.
    /// </param>
    /// <returns>
    /// The selected catch weight quantity for a given movement.
    /// </returns>
    public PdsCWInventQty getSelectedQtyCW(InventTransOriginId _inventTransOrigin)
    {
        PdsCWInventQty  inventQtyCW;

        if (mapQtyByInventTransOrigin.exists(_inventTransOrigin))
        {
            inventQtyCW = conPeek(mapQtyByInventTransOrigin.lookup(_inventTransOrigin),#InventQtyCWIdx);
        }

        return inventQtyCW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables.
    /// </summary>
    protected void init()
    {
        this.initInventTransWMS();
        this.initSelectedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the <c>TmpInventTransWMS</c> table to be located on the server tier.
    /// </summary>
    protected void initInventTransWMS()
    {
        tmpInventTransWMS.setTmpData(TmpInventTransWMS::forceOnServer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the internal <c>Map</c> objects that are used to store selected quantities per movement.
    /// </summary>
    protected void initSelectedQty()
    {
        mapQtyByInventTrans             = new Map(Types::Int64,Types::Container);
        mapQtyByInventTransOrigin       = new Map(Types::Int64,Types::Container);
        mapQtyByTmpInventTransWMS       = new Map(Types::Int64,Types::Class);
        mapInventTransInventTransOrigin = new Map(Types::Int64,Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTransSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a specified <c>InventTrans</c> record is selected for a pending picking or
    ///    registration update.
    /// </summary>
    /// <param name="_inventTransRefRecId">
    ///    A record ID of the <c>InventTrans</c> table.
    /// </param>
    /// <returns>
    ///    true if the record is selected; otherwise, false.
    /// </returns>
    public boolean isInventTransSelected(InventTransRefRecId _inventTransRefRecId)
    {
        return mapQtyByInventTrans.exists(_inventTransRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeTableEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes all records in the <c>TmpInventTransWMS</c> table and initializes internal variables.
    /// </summary>
    public void makeTableEmpty()
    {
        TmpInventTransWMS::makeTableEmpty(tmpInventTransWMS);
        this.initSelectedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapQtyByTmpInventTransWMSInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a map that holds selected quantities by <c>InventTrans</c> record ID.
    /// </summary>
    /// <param name="_tmpInventTransWMSRefRecId">
    /// A <c>TmpInventTransWMS</c> record ID.
    /// </param>
    /// <param name="_copy">
    /// A Boolean value that specifies whether the original map or a copy must be returned.
    /// </param>
    /// <returns>
    /// A Map if the selected quantities exist; otherwise, null.
    /// </returns>
    protected Map mapQtyByTmpInventTransWMSInventTrans(
        TmpInventTransWMSRefRecId _tmpInventTransWMSRefRecId,
        boolean                   _copy = false)
    {
        Map map;

        if (mapQtyByTmpInventTransWMS.exists(_tmpInventTransWMSRefRecId))
        {
            map = mapQtyByTmpInventTransWMS.lookup(_tmpInventTransWMSRefRecId);
            if (_copy)
            {
                map = Map::create(map.pack());  //create independent instance
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory movement for the specified record.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Common</c> record buffer.
    /// </param>
    /// <returns>
    ///    An <c>InventMovement</c> object.
    /// </returns>
    protected abstract InventMovement movement(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpInventTransWMS</Name>
				<Source><![CDATA[
    public TmpInventTransWMS parmTmpInventTransWMS(TmpInventTransWMS _tmpInventTransWMS = tmpInventTransWMS)
    {
        tmpInventTransWMS = _tmpInventTransWMS;
        return tmpInventTransWMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets detail information for a pending record.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    /// A <c>TmpInventTransWMS</c> record.
    /// </param>
    /// <param name="_inventTrans">
    /// A <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InvenDim</c> record related to the inventory transaction.
    /// </param>
    /// <param name="_inventQty">
    /// The quantity to set.
    /// </param>
    /// <param name="_inventQtyIsDelta">
    /// A Boolean value that indicates if the specified quantity is a delta or total quantity.
    /// </param>
    /// <param name="_inventQtyCW">
    /// The catch weight quantity to set.
    /// </param>
    /// <returns>
    /// true if the quantity was set successfully; otherwise, false.
    /// </returns>
    protected boolean setSelectedQty(
        TmpInventTransWMS _tmpInventTransWMS,
        InventTrans       _inventTrans,
        InventDim         _inventDim,
        InventQty         _inventQty,
        boolean           _inventQtyIsDelta = false
        ,PdsCWInventQty    _inventQtyCW = 0
        )
    {
        InventQty               inventQtyOrig;
        PdsCWInventQty          inventQtyOrigCW;

        //find all selected for TmpInventTransWMS
        Map map = this.mapQtyByTmpInventTransWMSInventTrans(_tmpInventTransWMS.RecId);
        if (   map
            && map.exists(_inventTrans.RecId))
        {
            [inventQtyOrig,inventQtyOrigCW] = map.lookup(_inventTrans.RecId);
        }

        InventMovement inventMovement = this.movement(_inventTrans);
        InventQty      inventQtyDelta = _inventQtyIsDelta ? _inventQty : _inventQty - inventQtyOrig;
        InventQty      inventQtyTotal = inventQtyOrig + inventQtyDelta;
        PdsCWInventQty inventQtyDeltaCW = _inventQtyIsDelta ? _inventQtyCW : _inventQtyCW - inventQtyOrigCW;
        PdsCWInventQty inventQtyTotalCW = inventQtyOrigCW + inventQtyDeltaCW;
        boolean result = this.validateTmp(inventQtyTotal,inventQtyOrig,_tmpInventTransWMS,inventMovement,_inventTrans.InventTransOrigin,_inventDim
        ,inventQtyTotalCW,inventQtyOrigCW
        );

        if (result)
        {
            //total by InventTransOrigin
            InventQty updatedInventQty = inventQtyDelta;
            PdsCWInventQty updatedInventQtyCW = inventQtyDeltaCW;
            if (mapQtyByInventTransOrigin.exists(_inventTrans.InventTransOrigin))
            {
                updatedInventQty   += conPeek(mapQtyByInventTransOrigin.lookup(_inventTrans.InventTransOrigin),#InventQtyIdx);
                updatedInventQtyCW += conPeek(mapQtyByInventTransOrigin.lookup(_inventTrans.InventTransOrigin),#InventQtyCWIdx);

                if (!updatedInventQty
                    && !updatedInventQtyCW
                    )
                {
                    mapQtyByInventTransOrigin.remove(_inventTrans.InventTransOrigin);
                }
            }
            if (updatedInventQty
                || updatedInventQtyCW
               )
            {
                mapQtyByInventTransOrigin.insert(_inventTrans.InventTransOrigin,[updatedInventQty,updatedInventQtyCW]);
            }

            //total by InventTrans
            updatedInventQty = inventQtyDelta;
            updatedInventQtyCW = inventQtyDeltaCW;

            if (mapQtyByInventTrans.exists(_inventTrans.RecId))
            {
                updatedInventQty   += conPeek(mapQtyByInventTrans.lookup(_inventTrans.RecId),#InventQtyIdx);
                updatedInventQtyCW += conPeek(mapQtyByInventTrans.lookup(_inventTrans.RecId),#InventQtyCWIdx);

                if (!updatedInventQty
                    && !updatedInventQtyCW
                    )
                {
                    mapQtyByInventTrans.remove(_inventTrans.RecId);
                }
            }
            if (updatedInventQty
                || updatedInventQtyCW
               )
            {
                mapQtyByInventTrans.insert(_inventTrans.RecId,[updatedInventQty,updatedInventQtyCW]);
            }

            //total by tmpInventTransWMS
            updatedInventQty = inventQtyTotal;
            updatedInventQtyCW = inventQtyTotalCW;
            if (updatedInventQty
                || updatedInventQtyCW
                )
            {
                if (!map)
                {
                    map = new Map(Types::Int64,Types::Container);
                }
                map.insert(_inventTrans.RecId,[updatedInventQty,updatedInventQtyCW]);
                mapQtyByTmpInventTransWMS.insert(_tmpInventTransWMS.RecId,map);
            }
            else
            {
                if (   map
                    && (inventQtyOrig || inventQtyOrigCW))
                {
                    map.remove(_inventTrans.RecId);
                    if (!map.elements())
                    {
                        mapQtyByTmpInventTransWMS.remove(_tmpInventTransWMS.RecId);
                    }
                    else
                    {
                        mapQtyByTmpInventTransWMS.insert(_tmpInventTransWMS.RecId,map);
                    }
                }
            }

            //inventTransOrigin
            mapInventTransInventTransOrigin.insert(_inventTrans.RecId,_inventTrans.InventTransOrigin);

            //save rollback information
            if (   mapRollback
                && !mapRollback.exists(_inventTrans))
            {
                mapRollback.insert(_inventTrans,[inventQtyOrig,inventQtyOrigCW]);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the proposed change to a pending record is valid.
    /// </summary>
    /// <param name="_inventQty">
    /// A pending quantity.
    /// </param>
    /// <param name="_inventQtyOrig">
    /// A original pending quantity.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    /// The pending record.
    /// </param>
    /// <param name="_movement">
    /// The inventory movement related to the pending record.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The ID of a <c>InventTransOrigin</c> record related to the movement.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension related to the pending record.
    /// </param>
    /// <param name="_inventQtyCW">
    /// The pending catch weight quantity.
    /// </param>
    /// <param name="_inventQtyOrigCW">
    /// The original pending catch weight quantity.
    /// </param>
    /// <returns>
    /// true if validation succeeds; otherwise, false.
    /// </returns>
    protected abstract boolean validateTmp(
        InventQty               _inventQty,
        InventQty               _inventQtyOrig,
        TmpInventTransWMS       _tmpInventTransWMS,
        InventMovement          _movement,
        InventTransOriginId     _inventTransOriginId = _movement.inventTransOriginId(),
        InventDim               _inventDim           = null
        ,PdsCWInventQty         _inventQtyCW     = 0
        ,PdsCWInventQty         _inventQtyOrigCW = 0
        )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the record to the <c>TmpInventTransWMS</c> table.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    ///    The <c>TmpInventTransWMS</c> record to write.
    /// </param>
    protected void writeTmp(TmpInventTransWMS _tmpInventTransWMS)
    {
        RefRecId        refRecId = _tmpInventTransWMS.RecId;

        _tmpInventTransWMS.setTmpData(tmpInventTransWMS);

        Map map = this.mapQtyByTmpInventTransWMSInventTrans(refRecId);

        if (!map)
        {
            return; // If no map exists it means we have deleted all lines
        }

        //if more than one inventTrans is related to the current record, clear the references from the record
        if (map.elements() != 1)
        {
            _tmpInventTransWMS.InventTrans       = 0;
            _tmpInventTransWMS.InventTransOrigin = 0;
        }
        else
        {
            if (   !_tmpInventTransWMS.InventTrans
                || !_tmpInventTransWMS.InventTransOrigin)
            {
                MapEnumerator me = map.getEnumerator();
                me.moveNext();
                _tmpInventTransWMS.InventTrans       = me.currentKey();
                _tmpInventTransWMS.InventTransOrigin = mapInventTransInventTransOrigin.lookup(_tmpInventTransWMS.InventTrans);
                _tmpInventTransWMS.copyInventoryOwnerFromInventTrans();
            }
        }

        _tmpInventTransWMS.write();

        //need to set recId if inserting
        if (!refRecId)
        {
            mapQtyByTmpInventTransWMS.insert(_tmpInventTransWMS.RecId,map);
            mapQtyByTmpInventTransWMS.remove(refRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareUpdateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records that use details from the specified maps to prepare the <c>TmpInventTransWMS</c>
    /// table to be processed.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    /// The <c>TmpInventTransWMS</c> table that contains the pending changes.
    /// </param>
    /// <param name="_mapQtyByTmpInventTransWMSPacked">
    /// A packed map that contains the detail information to the pending records.
    /// </param>
    /// <param name="_mapInventTransInventTransOriginPacked">
    /// A packed map that contains the inventory transaction to the origin mapping.
    /// </param>
    /// <param name="_groupByInventTransRefRecId">
    /// A Boolean value that indicates whether the <c>TmpInventTransWMS</c> records must be inserted and
    /// grouped by the ID of a <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    /// true if the table was prepared successfully; otherwise, false .
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An expected inventory transaction was not found in the internal map.
    /// </exception>
    protected static boolean prepareUpdateInvent(
        TmpInventTransWMS       _tmpInventTransWMS,
        container               _mapQtyByTmpInventTransWMSPacked,
        container               _mapInventTransInventTransOriginPacked,
        boolean                 _groupByInventTransRefRecId = false)
    {
        TmpInventTransWMS           tmpInventTransWMS;
        TmpInventTransWMS           tmpInventTransWMSUpdate;
        InventTransOriginId         inventTransOriginId;
        InventQty                   inventQty;
        boolean                     result = false;

        PdsCWInventQty              inventQtyCW;

        Map mapQtyByTmpInventTransWMS = Map::create(_mapQtyByTmpInventTransWMSPacked);
        Map mapInventTransInventTransOrigin = Map::create(_mapInventTransInventTransOriginPacked);

        if (   mapQtyByTmpInventTransWMS
            && mapQtyByTmpInventTransWMS.elements())
        {
            tmpInventTransWMS.setTmpData(_tmpInventTransWMS);
            tmpInventTransWMSUpdate.setTmpData(_tmpInventTransWMS);

            select maxof(LineNum) from tmpInventTransWMS;
            LineNum lineNum = tmpInventTransWMS.LineNum;

            while select tmpInventTransWMS
                where tmpInventTransWMS.InventTransOrigin == 0
            {
                if (mapQtyByTmpInventTransWMS.exists(tmpInventTransWMS.RecId))
                {
                    Map map = mapQtyByTmpInventTransWMS.lookup(tmpInventTransWMS.RecId);

                    if (   map
                        && map.elements())
                    {
                        MapEnumerator me = map.getEnumerator();
                        while (me.moveNext())
                        {
                            InventTransRefRecId inventTransRefRecId = me.currentKey();
                            [inventQty,inventQtyCW] = me.currentValue();
                            if (mapInventTransInventTransOrigin.exists(inventTransRefRecId))
                            {
                                inventTransOriginId = mapInventTransInventTransOrigin.lookup(inventTransRefRecId);
                            }
                            else
                            {
                                throw error(strFmt("@SYS19378",funcName()));
                            }

                            if (!_groupByInventTransRefRecId)
                            {
                                inventTransRefRecId = 0;
                            }

                            //sum up to one line per invenTransOrigin and InventDimId; optionally also by inventTransRefRecId
                            select firstonly tmpInventTransWMSUpdate
                                where tmpInventTransWMSUpdate.InventTransOrigin == inventTransOriginId
                                   && tmpInventTransWMSUpdate.InventTrans       == inventTransRefRecId
                                   && tmpInventTransWMSUpdate.InventDimId       == tmpInventTransWMS.InventDimId;

                            if (tmpInventTransWMSUpdate)
                            {
                                tmpInventTransWMSUpdate.InventQty += inventQty;
                                tmpInventTransWMSUpdate.PdsCWQty  += inventQtyCW;
                                tmpInventTransWMSUpdate.update();
                            }
                            else
                            {
                                lineNum++;
                                tmpInventTransWMSUpdate.data(tmpInventTransWMS);
                                tmpInventTransWMSUpdate.LineNum           = lineNum;
                                tmpInventTransWMSUpdate.InventTrans       = inventTransRefRecId;
                                tmpInventTransWMSUpdate.InventTransOrigin = inventTransOriginId;
                                tmpInventTransWMSUpdate.InventQty         = inventQty;
                                tmpInventTransWMSUpdate.PdsCWQty          = inventQtyCW;
                                tmpInventTransWMSUpdate.insert();
                            }
                        }
                    }
                }
            }

            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
