<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalcController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalcController extends RunBaseBatch implements BatchRetryable
{
    RTax25RegisterJournalTable   rTax25RegisterJournalTable;
    TmpRTax25RegisterDependences tmpRTax25RegisterDependences;
    RefRecId                     journalTableRecId;
    #define.CurrentVersion(1)
    #AviFiles
    #LOCALMACRO.CurrentList
       journalTableRecId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRecalculate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addRecalculate(RTax25RegisterId _rTax25RegisterId, RTax25RegisterJournalTrans _registerJournalTrans = null, boolean _research = false)
    {
        RTax25RegisterJournalTrans  rTax25RegisterJournalTrans;
        RTax25RegisterJournalLink   rTax25RegisterJournalLink;
        ;
        rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::findLink(
            rTax25RegisterJournalTable,
            _rTax25RegisterId);

        //parent register can already be present in recalculation
        if (rTax25RegisterJournalTrans.JournalNum == rTax25RegisterJournalTable.JournalNum)
        {
            return;
        }
        ttsBegin;

        rTax25RegisterJournalLink = RTax25RegisterJournalLink::find(
            rTax25RegisterJournalTable.RecId,
            rTax25RegisterJournalTrans.RecId,
            true);

        rTax25RegisterJournalLink.delete();

        rTax25RegisterJournalTrans.clear();
        rTax25RegisterJournalTrans.initFromRegisterJournalTable(rTax25RegisterJournalTable);
        rTax25RegisterJournalTrans.RegisterId = _rTax25RegisterId;
        rTax25RegisterJournalTrans.Status     = this.defaultRegisterStatus(_rTax25RegisterId);
        rTax25RegisterJournalTrans.insert();

        RTax25RegisterJournalLink::create(
            rTax25RegisterJournalTable.RecId,
            rTax25RegisterJournalTrans.RecId);

        while select tmpRTax25RegisterDependences
            where tmpRTax25RegisterDependences.ChildRegisterId == _rTax25RegisterId
        {
            this.addRecalculate(tmpRTax25RegisterDependences.ParentRegisterId);
        }

        ttsCommit;

        if (_research && FormDataUtil::getFormDataSource(_registerJournalTrans))
        {
            FormDataUtil::getFormDataSource(_registerJournalTrans).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvedRegisterExists</Name>
				<Source><![CDATA[
    private boolean approvedRegisterExists(boolean _onlyCurrrentJournal = true)
    {
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        RTax25RegisterJournalLink  rTax25RegisterJournalLink;

        if (rTax25RegisterJournalTable.EnableCorrective && !_onlyCurrrentJournal)
        {
            select firstonly RecId from rTax25RegisterJournalTrans
                where rTax25RegisterJournalTrans.Approved            == NoYes::Yes
                exists join rTax25RegisterJournalLink
                    where rTax25RegisterJournalLink.TransRecId == rTax25RegisterJournalTrans.RecId &&
                          rTax25RegisterJournalLink.TableRecId == rTax25RegisterJournalTable.RecId;
        }
        else
        {
            select firstonly RecId from rTax25RegisterJournalTrans
                where rTax25RegisterJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum          &&
                      rTax25RegisterJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType          &&
                      rTax25RegisterJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum           &&
                      rTax25RegisterJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear          &&
                      rTax25RegisterJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType &&
                      rTax25RegisterJournalTrans.Cancelled           == NoYes::No &&
                      rTax25RegisterJournalTrans.Approved            == NoYes::Yes;
        }

        return rTax25RegisterJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcJournal</Name>
				<Source><![CDATA[
    #aviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calcJournal()
    {
        TmpRTax25RegisterDependences registerDependences;
        RTax25RegisterJournalTrans   registerJournalTrans;
        SysOperationProgress         operationProgress;
        int                          current,i;
        container                    currentCalculated = conNull(),errorRegister = conNull();
        RTax25RegisterId             rTax25RegisterId;

        boolean childNeedToBeAdded(RTax25RegisterJournalTrans _registerJournalTrans)
        {
            if (_registerJournalTrans.RegisterJournalType == RTax25RegisterJournalType::Asset_RU)
                return true;
            if (_registerJournalTrans.Status == RTax25RegisterStatus::UnUse)
            {
                return !RTax25RegisterTable::notExistsOrDisabled(_registerJournalTrans.RegisterId);
            }
            return _registerJournalTrans.Status == RTax25RegisterStatus::NotCalculated;
        }

        boolean calcRegisters(TmpRTax25RegisterDependences _rTax25RegisterDependences)
        {
            RTax25RegisterJournalTrans   rTax25RegisterJournalTrans;
            boolean                      ret;
            Name                         registerName;
            currentCalculated = conNull();
            while select rTax25RegisterJournalTrans
                where rTax25RegisterJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum          &&
                      rTax25RegisterJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType          &&
                      rTax25RegisterJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum           &&
                      rTax25RegisterJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear          &&
                      rTax25RegisterJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType &&
                      rTax25RegisterJournalTrans.Cancelled           == NoYes::No                                      &&
                      rTax25RegisterJournalTrans.Status              == RTax25RegisterStatus::NotCalculated
                notexists join _rTax25RegisterDependences
                where rTax25RegisterJournalTrans.RegisterId          == _rTax25RegisterDependences.ParentRegisterId
            {
                if (conFind(errorRegister,rTax25RegisterJournalTrans.RegisterId))
                {
                    continue;
                }

                registerName = rTax25RegisterJournalTrans.registerName();
                setPrefix(registerName);
                operationProgress.setText("@GLS104139" + registerName);
                current ++;
                operationProgress.setCount(current);
                try
                {
                    this.calcRegister(rTax25RegisterJournalTrans, false, this.parmCurrentBatch());
                }
                catch(Exception::Error)
                {
                    errorRegister += rTax25RegisterJournalTrans.RegisterId;
                    continue;
                }
                catch(Exception::Info)
                {
                    errorRegister += rTax25RegisterJournalTrans.RegisterId;
                    continue;
                }
                catch(Exception::Warning)
                {
                    errorRegister += rTax25RegisterJournalTrans.RegisterId;
                    continue;
                }

                currentCalculated += rTax25RegisterJournalTrans.RegisterId;
                ret = true;
            }
            return ret;
        }
        ;
        while select tmpRTax25RegisterDependences
            join registerJournalTrans
            where registerJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum          &&
                  registerJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType          &&
                  registerJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum           &&
                  registerJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear          &&
                  registerJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType &&
                  registerJournalTrans.RegisterId          == tmpRTax25RegisterDependences.ChildRegisterId   &&
                  registerJournalTrans.Cancelled           == NoYes::No                                      &&
                  registerJournalTrans.Status              != RTax25RegisterStatus::Calculated
        {
            if (childNeedToBeAdded(registerJournalTrans))
            {
                registerDependences.data(tmpRTax25RegisterDependences);
                registerDependences.insert();
            }
        }
        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@GLS104138",rTax25RegisterJournalTable.EndDate));
        select count(RecId) from registerJournalTrans
            where registerJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum          &&
                  registerJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType          &&
                  registerJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum           &&
                  registerJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear          &&
                  registerJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType &&
                  registerJournalTrans.Cancelled           == NoYes::No                                      &&
                  registerJournalTrans.Status              == RTax25RegisterStatus::NotCalculated;
        operationProgress.setTotal(registerJournalTrans.RecId);
        setPrefix(strFmt("@GLS104138",rTax25RegisterJournalTable.EndDate));
        while (calcRegisters(registerDependences))
        {
            for (i = 1 ; i <= conLen(currentCalculated) ; i++)
            {
                rTax25RegisterId = conPeek(currentCalculated,i);
                delete_from registerDependences
                    where registerDependences.ChildRegisterId == rTax25RegisterId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRegister</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calcRegister(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans,
                             boolean                    _refresh = false,
                             Batch                      _batch   = null)
    {
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        FormDataSource             formDataSource;
        Object                     formRun;

        if (_rTax25RegisterJournalTrans.Status == RTax25RegisterStatus::NotCalculated)
        {
            rTax25RegisterJournalTrans = _rTax25RegisterJournalTrans.data();
            rTax25RegisterJournalTrans.Status = RTax25RegisterStatus::Calculated;
            if (this.canRegisterCalc(rTax25RegisterJournalTrans))
            {
                if (!RTax25RegCalc::calcIL([rTax25RegisterJournalTrans.RecId, _batch]))
                {
                    throw Exception::Error;
                }
            }

            if (_refresh)
            {
                formDataSource = FormDataUtil::getFormDataSource(_rTax25RegisterJournalTrans);
                if (formDataSource)
                {
                    formRun = formDataSource.formRun();
                    formDataSource.reread();
                    formDataSource.refresh();
                    formRun.updateDesign();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifiedParentRegisters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canModifiedParentRegisters(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        RTax25RegisterJournalTrans   rTax25RegisterJournalTrans;
        TmpRTax25RegisterDependences rTax25RegisterDependences;

        if (_rTax25RegisterJournalTrans.Approved)
        {
            info(strFmt("@GLS104120", _rTax25RegisterJournalTrans.registerName()));
            return false;
        }
        rTax25RegisterDependences.setTmpData(tmpRTax25RegisterDependences);
        while select rTax25RegisterDependences
            where rTax25RegisterDependences.ChildRegisterId == _rTax25RegisterJournalTrans.RegisterId
        {
            rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::findLink(
                rTax25RegisterJournalTable,
                rTax25RegisterDependences.ParentRegisterId);

            if (! this.canModifiedParentRegisters(rTax25RegisterJournalTrans))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRegisterCalc</Name>
				<Source><![CDATA[
    private boolean canRegisterCalc(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans,
                                    RTax25RegisterStatus       _rTax25RegisterStatus = RTax25RegisterStatus::NotCalculated)
    {
        RTax25RegisterJournalTrans   rTax25RegisterJournalTrans;
        TmpRTax25RegisterDependences rTax25RegisterDependences;
        str                          name;

        if (_rTax25RegisterStatus == RTax25RegisterStatus::NotCalculated)
        {
            if (_rTax25RegisterJournalTrans.Status == RTax25RegisterStatus::UnUse ||
                _rTax25RegisterJournalTrans.Status == RTax25RegisterStatus::NotCalculated)
            {
                return false;
            }
        }
        else
        {
            if (_rTax25RegisterJournalTrans.Status == RTax25RegisterStatus::UnUse)
            {
                return false;
            }
        }
        rTax25RegisterDependences.setTmpData(tmpRTax25RegisterDependences);
        while select rTax25RegisterDependences
            where rTax25RegisterDependences.ParentRegisterId == _rTax25RegisterJournalTrans.RegisterId
        {
            rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::findLink(
                _rTax25RegisterJournalTrans.registerJournalTable(),
                rTax25RegisterDependences.ChildRegisterId);

            if (!rTax25RegisterJournalTrans &&
                !RTax25RegCalcController::isRegisterObsolete(rTax25RegisterDependences.ChildRegisterType))
            {
                info (strFmt("@GLS104141",rTax25RegisterDependences.ChildRegisterId));
                return false;
            }
            else if ((rTax25RegisterJournalTrans.RegisterJournalType == RTax25RegisterJournalType::Asset_RU ||
                      !RTax25RegisterTable::notExistsOrDisabled(rTax25RegisterJournalTrans.RegisterId))     &&
                     !this.canRegisterCalc(rTax25RegisterJournalTrans,_rTax25RegisterStatus))
            {
                name = rTax25RegisterJournalTrans.registerName();
                if (rTax25RegisterJournalTrans.Status == RTax25RegisterStatus::UnUse)
                {
                    info (strFmt("@GLS104121", name ? name : rTax25RegisterDependences.ChildRegisterId));
                }
                else
                {
                    info (strFmt("@GLS104119", name ? name : rTax25RegisterDependences.ChildRegisterId));
                }
                return false;
            }

            if (RTax25RegisterTrans::existAny(rTax25RegisterJournalTrans.JournalNum,
                                              rTax25RegisterJournalTrans.RegisterId,
                                              rTax25RegisterJournalTrans.PeriodType,
                                              rTax25RegisterJournalTrans.PeriodNum,
                                              rTax25RegisterJournalTrans.FiscalYear))
            {
                return checkFailed(strfmt("@SYP4860781",
                                   rTax25RegisterDependences.ChildRegisterId));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionEnabled</Name>
				<Source><![CDATA[
    private boolean correctionEnabled()
    {
        return  rTax25RegisterJournalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax &&
                rTax25RegisterJournalTable.EnableCorrective;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Method creates records in <c>RTax25RegisterJournalTrans</c> table. In addition, it creates headers for corrective registers.
    /// </summary>
    /// <param name="_showCreateLineBox">
    ///  Determines, if message box must be displayed.
    /// </param>
    /// <returns>
    ///  True, if lines were created; otherwise false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///  If journal dependencies incorrect.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean createJournalTrans(boolean _showCreateLineBox = true)
    {
        RTax25RegisterTable        rTax25RegisterTable;
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        DictEnum                   dictEnum;
        Counter                    i;
        Set                        correctedRegisters;

        RTax25CorrectionJournalCreate correctionJournalCreate = RTax25CorrectionJournalCreate::newFromRTax25RegisterJournalTable(rTax25RegisterJournalTable);
        ;

        if (! (rTax25RegisterJournalTable.approved() || RTax25RegCalcController::checkDependences()))
        {
            throw error("@GLS107219");
        }
        if (this.journalTransExist())
        {
            return true;
        }
        if (_showCreateLineBox && Box::yesNo("@GLS104092",DialogButton::Yes,"@GLS104093","@GLS104006") == DialogButton::No)
        {
            return false;
        }

        if (rTax25RegisterJournalTable.RegisterJournalType == RTax25RegisterJournalType::Asset_RU)
        {
            dictEnum = new DictEnum(enumNum(RAssetAssessedTaxRegType));
            for (i = 1; i < dictEnum.values(); i++)
            {
                if (rTax25RegisterJournalTable.AssetTaxType == RAssetTaxType::Empty ||
                    rTax25RegisterJournalTable.AssetTaxType == RTax25RegisterJournalTrans::regType2TaxType(dictEnum.index2Value(i)))
                {
                    rTax25RegisterJournalTrans.clear();
                    rTax25RegisterJournalTrans.initFromRegisterJournalTable(rTax25RegisterJournalTable);
                    rTax25RegisterJournalTrans.RegisterId              = dictEnum.value2Symbol(dictEnum.index2Value(i));
                    rTax25RegisterJournalTrans.Status                  = RTax25RegisterStatus::NotCalculated;
                    rTax25RegisterJournalTrans.AssessedTaxRegisterType = dictEnum.index2Value(i);
                    rTax25RegisterJournalTrans.insert();

                    this.hideRegisterFields(rTax25RegisterJournalTrans);
                }
            }
        }
        else
        {
            if (this.correctionEnabled() &&
                rTax25RegisterJournalTable.Version != 0)
            {
                if (!correctionJournalCreate.promptCorrectedRegisters())
                {
                    return false;
                }
                correctedRegisters   = Set::create(correctionJournalCreate.parmCorrectedRegistersSet());
            }

            if (rTax25RegisterJournalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitAllocation)
            {
                select RegisterId, Disabled from rTax25RegisterTable
                    where rTax25RegisterTable.RegisterType == RTax25RegisterType::ProfitAllocation;
            }
            else
            {
                select RegisterId, Disabled from rTax25RegisterTable
                    where rTax25RegisterTable.RegisterType != RTax25RegisterType::ProfitAllocation;
            }

            while (rTax25RegisterTable.RegisterId)
            {
                if (!rTax25RegisterTable.Disabled)
                {
                    if (!correctedRegisters || correctedRegisters.in(rTax25RegisterTable.RegisterId))
                    {
                        rTax25RegisterJournalTrans.clear();
                        rTax25RegisterJournalTrans.initFromRegisterJournalTable(rTax25RegisterJournalTable);
                        rTax25RegisterJournalTrans.RegisterId = rTax25RegisterTable.RegisterId;
                        rTax25RegisterJournalTrans.Status     = this.defaultRegisterStatus(rTax25RegisterTable.RegisterId, rTax25RegisterTable.RegisterType);
                        rTax25RegisterJournalTrans.insert();
                    }
                    else
                    {
                        rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::findLastCorrection(
                            rTax25RegisterJournalTable,
                            rTax25RegisterTable.RegisterId);
                    }

                    if (rTax25RegisterJournalTrans.RecId && //in case record in RTax25RegisterTable was just created, it may not exist in old journal.
                        this.correctionEnabled())
                    {
                        RTax25RegisterJournalLink::create(
                            rTax25RegisterJournalTable.RecId,
                            rTax25RegisterJournalTrans.RecId);
                    }
                }

                next rTax25RegisterTable;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRegisterStatus</Name>
				<Source><![CDATA[
    private RTax25RegisterStatus defaultRegisterStatus(RTax25RegisterId     _rTax25RegisterId,
                                                       RTax25RegisterType   _registerType = RTax25RegisterType::PaymentReceipt)
    {
        RTax25RegisterStatus         rTax25RegisterStatus = RTax25RegisterStatus::NotCalculated;
        RTax25RegisterTable          rTax25RegisterTable = RTax25RegisterTable::findRegisterId(_rTax25RegisterId);
        TmpRTax25RegisterDependences rTax25RegisterDependences;

        if ((! rTax25RegisterTable.RecId && !RTax25RegCalcController::isRegisterObsolete(_registerType)) ||
            (rTax25RegisterTable.RecId && !rTax25RegisterTable.Disabled && rTax25RegisterJournalTable.PeriodType < rTax25RegisterTable.PeriodType))
        {
            return RTax25RegisterStatus::UnUse;
        }
        rTax25RegisterDependences.setTmpData(tmpRTax25RegisterDependences);
        while select rTax25RegisterDependences
            where rTax25RegisterDependences.ParentRegisterId == _rTax25RegisterId
        {
            rTax25RegisterStatus = this.defaultRegisterStatus(rTax25RegisterDependences.ChildRegisterId, rTax25RegisterDependences.ChildRegisterType);
            if (rTax25RegisterStatus == RTax25RegisterStatus::UnUse)
            {
                break;
            }
        }
        return rTax25RegisterStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteJournalLines()
    {
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        RTax25RegisterJournalLink  rTax25RegisterJournalLink;

        RTax25RegisterHideSetup    registerHideSetup;
        ;
        if (Box::yesNo("@GLS104151",DialogButton::Yes,"@GLS104118","@GLS104152") == DialogButton::No)
        {
            return;
        }

        if (this.approvedRegisterExists())
        {
            info("@GLS104153");
            return;
        }

        ttsbegin;

        while select forupdate rTax25RegisterJournalTrans
            where rTax25RegisterJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum &&
                  rTax25RegisterJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType &&
                  rTax25RegisterJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum  &&
                  rTax25RegisterJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear &&
                  rTax25RegisterJournalTrans.Cancelled           == NoYes::No                             &&
                  rTax25RegisterJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType
        {
            this.deleteRegister(rTax25RegisterJournalTrans);

            if (RTax25Parameters::find().CancelRegisters &&
                ! RTax25RegisterTrans::existAny(rTax25RegisterJournalTrans.JournalNum,
                                                rTax25RegisterJournalTrans.RegisterId,
                                                rTax25RegisterJournalTrans.PeriodType,
                                                rTax25RegisterJournalTrans.PeriodNum,
                                                rTax25RegisterJournalTrans.FiscalYear))
            {
                delete_from registerHideSetup
                    where registerHideSetup.TableTrans == NoneTableTrans::Transaction           &&
                          registerHideSetup.RegisterId == rTax25RegisterJournalTrans.RegisterId &&
                          registerHideSetup.FiscalYear == rTax25RegisterJournalTrans.FiscalYear &&
                          registerHideSetup.PeriodNum  == rTax25RegisterJournalTrans.PeriodNum  &&
                          registerHideSetup.PeriodType == rTax25RegisterJournalTrans.PeriodType &&
                          registerHideSetup.JournalNum == rTax25RegisterJournalTrans.JournalNum;

                rTax25RegisterJournalTrans.Cancelled = NoYes::Yes;
                rTax25RegisterJournalTrans.doUpdate();
            }
            else
            {
                rTax25RegisterJournalTrans.delete();
            }
        }

        if (rTax25RegisterJournalTable.EnableCorrective && rTax25RegisterJournalTable.Version > 0)
        {
            delete_from rTax25RegisterJournalLink
                where rTax25RegisterJournalLink.TableRecId == rTax25RegisterJournalTable.RecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRegister</Name>
				<Source><![CDATA[
    private void deleteRegister(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
         RTax25RegCalc rTax25RegCalc;

         rTax25RegCalc = RTax25RegCalc::construct(RTax25RegisterTable::registerId2Type(_rTax25RegisterJournalTrans.RegisterId),
                                                  _rTax25RegisterJournalTrans.AssessedTaxRegisterType);
         rTax25RegCalc.init(_rTax25RegisterJournalTrans);
         rTax25RegCalc.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean journalTransExist(RTax25RegisterJournalTable _rTax25RegisterJournalTable = rTax25RegisterJournalTable)
    {
        ;
        return RTax25RegisterJournalTrans::existLink(_rTax25RegisterJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideRegisterFields</Name>
				<Source><![CDATA[
    private void hideRegisterFields(rTax25RegisterJournalTrans _regTrans)
    {
        RTax25RegType rTax25RegType =  RTax25RegType::construct(RTax25RegisterTable::registerId2Type(_regTrans.RegisterId), _regTrans.AssessedTaxRegisterType);
        container hiddenFields = rTax25RegType.hiddenFields();

        RTax25RegisterHideSetup hideSetup;
        hideSetup.RegisterId = _regTrans.RegisterId;
        hideSetup.JournalNum = _regTrans.JournalNum;
        hideSetup.FiscalYear = _regTrans.FiscalYear;
        hideSetup.PeriodType = _regTrans.PeriodType;
        hideSetup.PeriodNum = _regTrans.PeriodNum;
        hideSetup.TableTrans = NoneTableTrans::Transaction;
        hideSetup.Hided = NoYes::Yes;

        for (int i = 1; i <= conlen(hiddenFields); i++)
        {
            hideSetup.FieldId = conpeek(hiddenFields, i);
            hideSetup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyFormQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void modifyFormQuery(Query _query)
    {
        QueryBuildDataSource qbds;

        if (this.correctionEnabled())
        {
            qbds = _query.dataSourceTable(tableNum(RTax25RegisterJournalTrans));
            qbds.clearDynalinks();

            qbds = qbds.addDataSource(tableNum(RTax25RegisterJournalLink));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);

            qbds.addDynalink(fieldNum(RTax25RegisterJournalLink, TableRecId), rTax25RegisterJournalTable, fieldNum(RTax25RegisterJournalTable, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        RTax25RegisterTable rTax25RegisterTable;
        RTax25RegType       rTax25RegType;
        DictEnum            dictEnum;
        int                 i, j;
        container           childRegisters;

        super();

        while select rTax25RegisterTable
        {
            tmpRTax25RegisterDependences.clear();
            rTax25RegType =  RTax25RegType::construct(rTax25RegisterTable.RegisterType);
            childRegisters = rTax25RegType.childRegisters();
            for (i = 1 ; i <= conLen(childRegisters) ; i ++)
            {
                tmpRTax25RegisterDependences.ParentRegisterId   = rTax25RegisterTable.RegisterId;
                tmpRTax25RegisterDependences.ParentRegisterType = rTax25RegisterTable.RegisterType;
                tmpRTax25RegisterDependences.ChildRegisterId    = RTax25RegisterTable::registerType2Id(conPeek(childRegisters, i));
                tmpRTax25RegisterDependences.ChildRegisterType  = conPeek(childRegisters, i);
                if (tmpRTax25RegisterDependences.ChildRegisterId)
                {
                    tmpRTax25RegisterDependences.insert();
                }
            }
        }

        dictEnum = new DictEnum(enumNum(RAssetAssessedTaxRegType));
        for (j = 1; j < dictEnum.values(); j++)
        {
            tmpRTax25RegisterDependences.clear();
            rTax25RegType =  RTax25RegType::construct(rTax25RegisterTable.RegisterType, dictEnum.index2Value(j));
            childRegisters = rTax25RegType.childRegisters();
            for (i = 1 ; i <= conLen(childRegisters) ; i ++)
            {
                tmpRTax25RegisterDependences.ParentRegisterId = dictEnum.value2Symbol(dictEnum.index2Value(j));
                tmpRTax25RegisterDependences.ChildRegisterId  = dictEnum.value2Symbol(conPeek(childRegisters,i));
                tmpRTax25RegisterDependences.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        ;
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevCorrectionProcessed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean prevCorrectionProcessed()
    {
        RTax25RegisterJournalTable regJournalTable;

        if (this.correctionEnabled())
        {
            select firstOnly RecId from regJournalTable
                where regJournalTable.CalculationDate == rTax25RegisterJournalTable.CalculationDate &&
                      regJournalTable.EndDate         <  rTax25RegisterJournalTable.EndDate         &&
                      regJournalTable.Accepted        == RTax25CorrectionAccepted::NotProcessed;
        }

        return !regJournalTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerStatusValidate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean registerStatusValidate(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        boolean ret = false;
        ;
        if (_rTax25RegisterJournalTrans.Status == _rTax25RegisterJournalTrans.orig().Status)
        {
            return true;
        }
        switch (_rTax25RegisterJournalTrans.Status)
        {
            case RTax25RegisterStatus::Calculated:
                info (strFmt("@GLS104116",_rTax25RegisterJournalTrans.RegisterId));
                return ret;
            case RTax25RegisterStatus::UnUse:
                if (Box::yesNo("@GLS104117",DialogButton::Yes,"@GLS104118","@GLS104006") == DialogButton::No)
                {
                    return ret;
                }
                ret = RTax25RegisterTable::notExistsOrDisabled(_rTax25RegisterJournalTrans.RegisterId);
                ret = ret || this.canModifiedParentRegisters(_rTax25RegisterJournalTrans);
                break;
            case RTax25RegisterStatus::NotCalculated:
                ret = this.canRegisterCalc(_rTax25RegisterJournalTrans,RTax25RegisterStatus::UnUse) &&
                      this.canModifiedParentRegisters(_rTax25RegisterJournalTrans);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecalculate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void removeRecalculate(RTax25RegisterId _rTax25RegisterId, RTax25RegisterJournalTrans _registerJournalTrans = null, boolean _research = false)
    {
        RTax25RegisterJournalTrans  rTax25RegisterJournalTrans;
        FormDataSource              formDataSource = FormDataUtil::getFormDataSource(_registerJournalTrans);
        ;
        rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::find(
            rTax25RegisterJournalTable.JournalNum,
            rTax25RegisterJournalTable.PeriodType,
            rTax25RegisterJournalTable.PeriodNum,
            rTax25RegisterJournalTable.FiscalYear,
            _rTax25RegisterId,
            rTax25RegisterJournalTable.RegisterJournalType,
            true);

        //Child register may not be present in recalculation
        if (!rTax25RegisterJournalTrans)
        {
            return;
        }

        ttsBegin;

        this.deleteRegister(rTax25RegisterJournalTrans);

        rTax25RegisterJournalTrans.delete();

        rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::findLastCorrection(
            rTax25RegisterJournalTable,
            _rTax25RegisterId);

        RTax25RegisterJournalLink::create(
            rTax25RegisterJournalTable.RecId,
            rTax25RegisterJournalTrans.RecId);

        while select tmpRTax25RegisterDependences
            where tmpRTax25RegisterDependences.ParentRegisterId == _rTax25RegisterId
        {
            this.removeRecalculate(tmpRTax25RegisterDependences.ChildRegisterId);
        }

        ttsCommit;

        if (_research && formDataSource)
        {
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25RegisterJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTable rTax25RegisterJournalTable(RTax25RegisterJournalTable _rTax25RegisterJournalTable = rTax25RegisterJournalTable)
    {
        ;
        rTax25RegisterJournalTable = _rTax25RegisterJournalTable;
        journalTableRecId = rTax25RegisterJournalTable.RecId;
        this.saveLast();
        return rTax25RegisterJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
        select firstonly rTax25RegisterJournalTable
            where rTax25RegisterJournalTable.RecId == journalTableRecId;
        if (rTax25RegisterJournalTable.RecId)
        {
            if ( rTax25RegisterJournalTable.approved() || ! RTax25RegCalcController::checkDependences())
            {
                error("@GLS107219");
                return;
            }
            this.calcJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDefaultStatus()
    {
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        SysOperationProgress       sysOperationProgress

        ;
        if (Box::yesNo("@GLS105101",DialogButton::Yes,"@GLS105100","@GLS104152") == DialogButton::No)
        {
            return;
        }

        if (this.approvedRegisterExists())
        {
            info("@GLS105102");
            return;
        }
        sysOperationProgress = new SysOperationProgress();
        sysOperationProgress.setCaption("@GLS105100");
        select count(RecId) from rTax25RegisterJournalTrans
            where rTax25RegisterJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum &&
                  rTax25RegisterJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType &&
                  rTax25RegisterJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum  &&
                  rTax25RegisterJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear &&
                  rTax25RegisterJournalTrans.Cancelled           == NoYes::No                             &&
                  rTax25RegisterJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType;
        sysOperationProgress.setTotal(rTax25RegisterJournalTrans.RecId);

        ttsbegin;
        while select forupdate rTax25RegisterJournalTrans
            where rTax25RegisterJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum &&
                  rTax25RegisterJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType &&
                  rTax25RegisterJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum  &&
                  rTax25RegisterJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear &&
                  rTax25RegisterJournalTrans.Cancelled           == NoYes::No                             &&
                  rTax25RegisterJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType
        {
            sysOperationProgress.setText(RTax25RegisterTable::registerName(rTax25RegisterJournalTrans.RegisterId));
            sysOperationProgress.incCount();
            this.deleteRegister(rTax25RegisterJournalTrans);
            if (rTax25RegisterJournalTrans.AssessedTaxRegisterType == RAssetAssessedTaxRegType::None)
            {
                rTax25RegisterJournalTrans.Status = this.defaultRegisterStatus(rTax25RegisterJournalTrans.RegisterId);
            }
            else
            {
                rTax25RegisterJournalTrans.Status = RTax25RegisterStatus::NotCalculated;
            }
            rTax25RegisterJournalTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentRegisterStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateParentRegisterStatus(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        RTax25RegisterJournalTrans   rTax25RegisterJournalTrans;
        TmpRTax25RegisterDependences rTax25RegisterDependences;
        ;

        ttsbegin;

        if (_rTax25RegisterJournalTrans.RegisterJournalType == RTax25RegisterJournalType::Asset_RU ||
            ! RTax25RegisterTable::notExistsOrDisabled(_rTax25RegisterJournalTrans.RegisterId))
        {
            rTax25RegisterDependences.setTmpData(tmpRTax25RegisterDependences);
            while select rTax25RegisterDependences
                where rTax25RegisterDependences.ChildRegisterId == _rTax25RegisterJournalTrans.RegisterId
            {
                rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::find(rTax25RegisterJournalTable.JournalNum,
                                                                              rTax25RegisterJournalTable.PeriodType,
                                                                              rTax25RegisterJournalTable.PeriodNum,
                                                                              rTax25RegisterJournalTable.FiscalYear,
                                                                              rTax25RegisterDependences.ParentRegisterId,
                                                                              rTax25RegisterJournalTable.RegisterJournalType,
                                                                              true);

                if (rTax25RegisterJournalTrans.Status  == RTax25RegisterStatus::Calculated ||
                    _rTax25RegisterJournalTrans.Status == RTax25RegisterStatus::UnUse)
                {
                    rTax25RegisterJournalTrans.Status = _rTax25RegisterJournalTrans.Status;
                    rTax25RegisterJournalTrans.update();
                    this.updateParentRegisterStatus(rTax25RegisterJournalTrans);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if new record in <c>RTax25RegisterJournalTable</c> can be created.
    /// </summary>
    /// <param name="_rTax25RegisterJournalTable">
    ///  <c>RTax25RegisterJournalTable</c> being created.
    /// </param>
    /// <returns>
    ///  True if journal can be created; otherwise false.
    /// </returns>
    /// <remarks>
    ///  For corrective journals, validated only that all previous by version corrective journals are approved.
    ///  For other journals, checked that there are no next journals and all previous by date journals are approved.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canCreateJournal(RTax25RegisterJournalTable _rTax25RegisterJournalTable)
    {
        RTax25RegisterJournalTable rTax25RegisterJournalTable;
        boolean                    ret;

        ret = RTax25RegCalcController::nextJournalNotExists(_rTax25RegisterJournalTable);

        if (_rTax25RegisterJournalTable.CorrectedRecId)
        {
            select firstonly rTax25RegisterJournalTable
                order by Version desc
                where rTax25RegisterJournalTable.EndDate             == _rTax25RegisterJournalTable.EndDate             &&
                      rTax25RegisterJournalTable.RegisterJournalType == _rTax25RegisterJournalTable.RegisterJournalType &&
                     (_rTax25RegisterJournalTable.AssetTaxType       == RAssetTaxType::Empty                            ||
                      rTax25RegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty                            ||
                      rTax25RegisterJournalTable.AssetTaxType        == _rTax25RegisterJournalTable.AssetTaxType)       &&
                      rTax25RegisterJournalTable.CorrectedRecId      == _rTax25RegisterJournalTable.CorrectedRecId      &&
                      rTax25RegisterJournalTable.Version             <  _rTax25RegisterJournalTable.Version;

            if (rTax25RegisterJournalTable.RecId)
            {
                if (! rTax25RegisterJournalTable.approved())
                {
                    return checkFailed("@GLS104147");
                }
            }

            return true;
        }

        if (ret)
        {
            select firstonly rTax25RegisterJournalTable
                order by PeriodType desc
                where rTax25RegisterJournalTable.EndDate             == _rTax25RegisterJournalTable.EndDate             &&
                      rTax25RegisterJournalTable.RegisterJournalType == _rTax25RegisterJournalTable.RegisterJournalType &&
                     (_rTax25RegisterJournalTable.AssetTaxType       == RAssetTaxType::Empty                            ||
                      rTax25RegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty                            ||
                      rTax25RegisterJournalTable.AssetTaxType        == _rTax25RegisterJournalTable.AssetTaxType)       &&
                      rTax25RegisterJournalTable.PeriodType          <  _rTax25RegisterJournalTable.PeriodType;

            if (rTax25RegisterJournalTable.RecId)
            {
                if (! rTax25RegisterJournalTable.approved())
                {
                    return checkFailed("@GLS104147");
                }
            }

            select firstonly rTax25RegisterJournalTable
                order by EndDate desc
                where rTax25RegisterJournalTable.EndDate             <  _rTax25RegisterJournalTable.EndDate             &&
                      rTax25RegisterJournalTable.RegisterJournalType == _rTax25RegisterJournalTable.RegisterJournalType &&
                     (_rTax25RegisterJournalTable.AssetTaxType       == RAssetTaxType::Empty                            ||
                      rTax25RegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty                            ||
                      rTax25RegisterJournalTable.AssetTaxType        == _rTax25RegisterJournalTable.AssetTaxType);

            if (rTax25RegisterJournalTable.RecId)
            {
                if (! rTax25RegisterJournalTable.approved())
                {
                    return checkFailed("@GLS104147");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChildRegisters</Name>
				<Source><![CDATA[
    private static boolean checkChildRegisters(RTax25RegType _regType,container _registerTypes)
    {
        container childRegisters = _regType.childRegisters();
        int       i;
        boolean   check = true;
        container checkRegisters;
        RTax25RegisterType rTax25RegisterType;
        ;
        setPrefix("@GLS104139" + "@GLS102908" + _regType.getRegisterTypeStr());
        for (i = 1 ; i <= conLen(_registerTypes) ; i++)
        {
            if (conFind(childRegisters,conPeek(_registerTypes,i)))
            {
                rTax25RegisterType = conPeek(_registerTypes,i);
                return checkFailed(strFmt("@GLS107218", enum2str(rTax25RegisterType)));
            }
        }
        for (i = 1 ; i <= conLen(childRegisters) ; i ++)
        {
            checkRegisters = _registerTypes;
            checkRegisters += conPeek(childRegisters,i);
            if (! RTax25RegCalcController::checkChildRegisters(RTax25RegType::construct(conPeek(childRegisters,i)),checkRegisters))
            {
                check = false;
            }
        }
        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDependences</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkDependences()
    {
        DictEnum  dictEnum = new DictEnum(enumNum(RTax25RegisterType));
        int       idx;
        boolean   ret = true;
        ;
        setPrefix("@GLS107217");
        for (idx = 0; idx < dictEnum.values(); idx++)
        {
            if (! RTax25RegCalcController::checkChildRegisters(RTax25RegType::construct(dictEnum.index2Value(idx)),[dictEnum.index2Value(idx)]))
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str description()
    {
        return "@GLS107181";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findChildJournalTrans</Name>
				<Source><![CDATA[
    #TimeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegisterJournalTrans findChildJournalTrans(RTax25RegisterType          _childRegisterType,
                                                                   RTax25RegisterJournalTrans  _parentJournalTrans,
                                                                   RAssetAssessedTaxRegType    _assessedTaxRegType = RAssetAssessedTaxRegType::None,
                                                                   int                         _periodLag = 0)
    {
        int                         perYear, fiscalYear, period;
        RTax25RegisterJournalTrans  childJournalTrans, registerJournalTransNotApproved, registerJournalTrans;
        RTax25RegisterJournalLink   registerJournalLink;
        RTax25RegisterJournalTable  rTax25RegisterJournalTable;
        RTax25RegisterId            registerId;
        DictEnum                    dictEnum;

        perYear = real2int(#monthsPerYear / RTax25RegisterJournalTable::periodMthLength(_parentJournalTrans.PeriodType));
        fiscalYear = _parentJournalTrans.FiscalYear + (_parentJournalTrans.PeriodNum + _periodLag - 1) div perYear;
        period = (_parentJournalTrans.PeriodNum  + _periodLag) mod perYear;

        if (period <= 0)
        {
            period += perYear;

            if (period != 1 && _periodLag < 0)
                fiscalYear--;
        }
        if (_assessedTaxRegType)
        {
            dictEnum = new DictEnum(enumnum(RAssetAssessedTaxRegType));
            registerId = dictEnum.value2Symbol(dictEnum.index2Value(_assessedTaxRegType));
        }
        else
        {
            registerId = RTax25RegisterTable::registerType2Id(_childRegisterType);
        }

        if (_periodLag != 0)
        {
            select firstOnly JournalNum from rTax25RegisterJournalTable
                order by Version desc
                where   rTax25RegisterJournalTable.PeriodType          == _parentJournalTrans.PeriodType   &&
                        rTax25RegisterJournalTable.PeriodNum           == period                           &&
                        rTax25RegisterJournalTable.FiscalYear          == fiscalYear
            join TableId from registerJournalTrans
                where registerJournalTrans.JournalNum            == rTax25RegisterJournalTable.JournalNum                  &&
                        registerJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType                  &&
                        registerJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum                   &&
                        registerJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear                  &&
                        registerJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType         &&
                        registerJournalTrans.Cancelled           == NoYes::No
            notexists join registerJournalTransNotApproved
                where registerJournalTransNotApproved.JournalNum            == rTax25RegisterJournalTable.JournalNum                  &&
                        registerJournalTransNotApproved.PeriodType          == rTax25RegisterJournalTable.PeriodType                  &&
                        registerJournalTransNotApproved.PeriodNum           == rTax25RegisterJournalTable.PeriodNum                   &&
                        registerJournalTransNotApproved.FiscalYear          == rTax25RegisterJournalTable.FiscalYear                  &&
                        registerJournalTransNotApproved.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType         &&
                        registerJournalTransNotApproved.Cancelled           == NoYes::No                                              &&
                    ((registerJournalTransNotApproved.Status                == RTax25RegisterStatus::Calculated                       &&
                    ! registerJournalTransNotApproved.Approved)                                                                       ||
                        registerJournalTransNotApproved.Status              == RTax25RegisterStatus::NotCalculated);
        }
        else
        {
            rTax25RegisterJournalTable = _parentJournalTrans.registerJournalTable();
        }

        if (rTax25RegisterJournalTable.EnableCorrective)
        {
            select firstonly childJournalTrans
                where childJournalTrans.RegisterId == registerId                       &&
                      childJournalTrans.Status     == RTax25RegisterStatus::Calculated &&
                      childJournalTrans.Cancelled  == NoYes::No
                exists join registerJournalLink
                    where registerJournalLink.TransRecId == childJournalTrans.RecId &&
                          registerJournalLink.TableRecId == rTax25RegisterJournalTable.RecId;
        }
        else
        {
            select firstonly childJournalTrans
                where childJournalTrans.RegisterId          == registerId                                                &&
                      childJournalTrans.PeriodType          == _parentJournalTrans.PeriodType                            &&
                      childJournalTrans.FiscalYear          == fiscalYear                                                &&
                      childJournalTrans.PeriodNum           == period                                                    &&
                      childJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum                     &&
                      childJournalTrans.Status              == RTax25RegisterStatus::Calculated;
        }
        return childJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Method checks that next register journal not exists.
    /// </summary>
    /// <param name="_rTax25RegisterJournalTable">
    ///  <c>RTax25RegisterJournalTable</c> record.
    /// </param>
    /// <param name="_message">
    ///  Determines, if message box must be displayed.
    /// </param>
    /// <returns>
    ///  True, if next journal not exists; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean nextJournalNotExists(RTax25RegisterJournalTable _rTax25RegisterJournalTable,
                                               boolean                    _message = true)
    {
        if (_rTax25RegisterJournalTable.CorrectedRecId)
        {
            if ((select firstonly rTax25RegisterJournalTable
                     where rTax25RegisterJournalTable.EndDate             ==  _rTax25RegisterJournalTable.EndDate            &&
                           rTax25RegisterJournalTable.RegisterJournalType == _rTax25RegisterJournalTable.RegisterJournalType &&
                          (_rTax25RegisterJournalTable.AssetTaxType       == RAssetTaxType::Empty                            ||
                           rTax25RegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty                            ||
                           rTax25RegisterJournalTable.AssetTaxType        == _rTax25RegisterJournalTable.AssetTaxType)       &&
                           rTax25RegisterJournalTable.Accepted            == RTax25CorrectionAccepted::Accepted              &&
                           rTax25RegisterJournalTable.Version             >  _rTax25RegisterJournalTable.Version).RecId)
            {
                if (_message)
                {
                    return checkFailed("@GLS104077");
                }
                else
                {
                    return false;
                }
            }

            return true;
        }

        if ((select firstonly rTax25RegisterJournalTable
                 where rTax25RegisterJournalTable.EndDate             >  _rTax25RegisterJournalTable.EndDate             &&
                      (_rTax25RegisterJournalTable.AssetTaxType       == RAssetTaxType::Empty                            ||
                       rTax25RegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty                            ||
                       rTax25RegisterJournalTable.AssetTaxType        == _rTax25RegisterJournalTable.AssetTaxType)       &&
                       rTax25RegisterJournalTable.RegisterJournalType == _rTax25RegisterJournalTable.RegisterJournalType).RecId)
        {
            if (_message)
            {
                return checkFailed("@GLS104077");
            }
            else
            {
                return false;
            }
        }

        if ((select firstonly rTax25RegisterJournalTable
                 where rTax25RegisterJournalTable.EndDate             == _rTax25RegisterJournalTable.EndDate             &&
                       rTax25RegisterJournalTable.RegisterJournalType == _rTax25RegisterJournalTable.RegisterJournalType &&
                      (_rTax25RegisterJournalTable.AssetTaxType       == RAssetTaxType::Empty                            ||
                       rTax25RegisterJournalTable.AssetTaxType        == RAssetTaxType::Empty                            ||
                       rTax25RegisterJournalTable.AssetTaxType        == _rTax25RegisterJournalTable.AssetTaxType)       &&
                       rTax25RegisterJournalTable.PeriodType          >  _rTax25RegisterJournalTable.PeriodType).RecId)
        {
            if (_message)
            {
                return checkFailed("@GLS104146");
            }
            else
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>obsoleteRegisters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns a container, which contains list of registers which became obsolete.
    /// </summary>
    /// <returns>
    ///  Container value.
    /// </returns>
    private static container obsoleteRegisters()
    {
        container obsoleteRegisters = [
            RTax25RegisterType::AmountDifference,
            RTax25RegisterType::ExchangeAdj,
            RTax25RegisterType::TaxExchangeAdj];

        obsoleteRegisters += [
            RTax25RegisterType::ConstantDifferences,
            RTax25RegisterType::TemporaryDifferences];

        return obsoleteRegisters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegisterObsolete</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if register is obsolete.
    /// </summary>
    /// <param name="_rTax25RegisterType">
    ///  <c>RTax25RegisterType</c> value to check.
    /// </param>
    /// <returns>
    ///  True if register obsolete; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isRegisterObsolete(RTax25RegisterType _rTax25RegisterType)
    {
        return conFind(RTax25RegCalcController::obsoleteRegisters(), _rTax25RegisterType);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>