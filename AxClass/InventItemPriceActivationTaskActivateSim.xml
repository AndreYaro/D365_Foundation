<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceActivationTaskActivateSim</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceActivationTaskActivateSim</c> class activates a bundle of pending prices.
/// </summary>
class InventItemPriceActivationTaskActivateSim extends RunBaseBatch implements BatchRetryable
{
    #OCCRetryCount

    NoYes                       abortOnError;
    Set                         pricesToBeActivated;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        abortOnError
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateOnePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates one simulated price record.
    /// </summary>
    /// <param name="_priceToBeActivated">
    /// The RecId of the <c>InventItemPriceSim</c> record to be activated.
    /// </param>
    private void activateOnePrice(RecId _priceToBeActivated)
    {
        InventItemPriceSim price = InventItemPriceSim::findRecId(_priceToBeActivated);

        InventItemPriceActivationTaskActivateSim::activateOneInventItemPriceSim(price);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activatePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to activates a collection of the <c>InventItemPriceSim</c> records.
    /// </summary>
    /// <param name="_pricesToBeActivated">
    /// A collection of the <c>InventItemPriceSim</c> records.
    /// </param>
    private void activatePrices(Set _pricesToBeActivated)
    {
        Enumerator pricesEnumerator = _pricesToBeActivated.getEnumerator();

        while (pricesEnumerator.moveNext())
        {
            try
            {
                ttsBegin;
                this.activateOnePrice(pricesEnumerator.current());
                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                if (abortOnError == NoYes::Yes)
                    throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPriceForActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds pending price to the collection of prices that should be activated by this task.
    /// </summary>
    /// <param name="_price">
    /// Pending price to be activated.
    /// </param>
    public void addPriceForActivation(InventItemPriceSim _price)
    {
        this.parmPricesToBeActivated().add(_price.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, this.parmPricesToBeActivated().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAbortOnError</Name>
				<Source><![CDATA[
    public NoYes parmAbortOnError(NoYes _abortOnError = abortOnError)
    {
        abortOnError = _abortOnError;

        return abortOnError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPricesToBeActivated</Name>
				<Source><![CDATA[
    public Set parmPricesToBeActivated(Set _pricesToBeActivated = pricesToBeActivated)
    {
        pricesToBeActivated = _pricesToBeActivated;

        if (pricesToBeActivated == null)
        {
            pricesToBeActivated = new Set(Types::Int64);
        }

        return pricesToBeActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        this.activatePrices(this.parmPricesToBeActivated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   packedSet;
        Integer     version         = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedSet] = packedClass;

                if (packedSet)
                {
                    pricesToBeActivated = Set::create(packedSet);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the default price.
    /// </summary>
    /// <param name = "_inventItemPriceSim">The pending price.</param>
    [Replaceable]
    static protected void updateDefaultPrice(InventItemPriceSim _inventItemPriceSim)
    {
        InventTableModule inventTableModule = InventTableModule::find(_inventItemPriceSim.ItemId,
                                                                      InventItemPrice::convPriceTypeToModuleInventPurchSales(_inventItemPriceSim.PriceType),
                                                                      true);
        inventTableModule.initFromInventItemPriceSim(_inventItemPriceSim);
        inventTableModule.update(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateOneInventItemPriceSim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to activate a pending price.
    /// </summary>
    /// <param name="_inventItemPriceSim">
    /// A pending price to be activated.
    /// </param>
    /// <returns>
    /// Returns true if activation is successful; otherwise, false.
    /// </returns>
    public static boolean activateOneInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        boolean priceActivated = false;

        if (InventItemPriceActivationTaskActivateSim::checkPriceType(_inventItemPriceSim))
        {
            if (InventItemPriceActivationTaskActivateSim::checkCostingTypeAndInventoryModel(_inventItemPriceSim))
            {
                InventPriceActivationModule inventPriceActivationModule = InventPriceActivationModule::newInventItemPriceSim(_inventItemPriceSim);
                inventPriceActivationModule.parmDoNotUpdateLastActivationDate(true);
                inventPriceActivationModule.activate();
                
                priceActivated = true;
            }
            else
            {
                // Only mark the price as the default price.
                warning(strFmt("@SYS111942", _inventItemPriceSim.ItemId));

                InventItemPriceActivationTaskActivateSim::updateDefaultPrice(_inventItemPriceSim);
            }
        }
        else
        {
            warning(strFmt("@SYS112053",
                           enum2str(_inventItemPriceSim.PriceType),
                           _inventItemPriceSim.VersionId));
        }

        return priceActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostingTypeAndInventoryModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the version contains a valid item.
    /// </summary>
    /// <param name="_inventItemPriceSim">
    ///    The pending price to be checked.
    /// </param>
    /// <returns>
    ///    true if the item and costing type is a valid combination; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Standard cost items may only be transferred from a version that is marked with costing type:
    ///    Standard.
    /// </remarks>
    public static boolean checkCostingTypeAndInventoryModel(InventItemPriceSim _inventItemPriceSim)
    {
        boolean         ret             = true;

        CostingVersion costingVersion = CostingVersion::find(_inventItemPriceSim.VersionId);

        switch (costingVersion.CostingType)
        {
            case CostingVersionCostingType::Standard,
                 CostingVersionCostingType::Conversion:
                 break;

            case CostingVersionCostingType::Normal:
                if (InventTable::modelGroupByItemId(_inventItemPriceSim.ItemId).inventModelType().stdCostBased())
                {
                    ret = false;
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the price type is allowed in the version.
    /// </summary>
    /// <param name="_inventItemPriceSim">
    ///    The price to check type for.
    /// </param>
    /// <returns>
    ///    true if the price type is allowed; otherwise, false.
    /// </returns>
    public static boolean checkPriceType(InventItemPriceSim _inventItemPriceSim)
    {
        return CostingVersion::find(_inventItemPriceSim.VersionId).checkPriceType(_inventItemPriceSim.PriceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventItemPriceActivationTaskActivateSim construct()
    {
        return new InventItemPriceActivationTaskActivateSim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4009915";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>