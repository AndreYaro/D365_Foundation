<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceXMLDocReader_V3_3_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceXMLDocReader_V3_3_MX</c> class handles the reading of XML documents for CFDI V3.3.
/// </summary>
class EInvoiceXMLDocReader_V3_3_MX extends EInvoiceXMLDocReader_MX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compressBlankSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// transfer original string may contain more than one blank space to string contain only one blank space between words
    /// </summary>
    /// <param name="_original">
    /// the original string may contain more than one blank space
    /// </param>
    /// <returns>
    /// output string contain only one blank space between words
    /// </returns>
    protected str compressBlankSpace(str _original)
    {
        TextBuffer buffer = new TextBuffer();
        buffer.setText(_original);
        buffer.replace('[ ]+', ' ');

        return buffer.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponseNamespace</Name>
				<Source><![CDATA[
    protected void createResponseNamespace()
    {
        if (!nsmgr.hasNamespace('tfd'))
        {
            nsmgr.addNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllConceptos</Name>
				<Source><![CDATA[
    protected str getAllConceptos()
    {
        XmlNode node;
        XmlNode conceptoNode;
        XmlNodeList nodeList;

        str conceptosChain;

        node = this.getXpathNode(@'/x:Comprobante/x:Conceptos');

        if (node != null)
        {
            nodeList = node.selectNodes(@'x:Concepto', nsmgr);
            for (conceptoNode = nodeList.nextNode(); conceptoNode != null; conceptoNode = nodeList.nextNode())
            {
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@ClaveProdServ');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@NoIdentificacion');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@Cantidad');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@ClaveUnidad');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@Unidad');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@Descripcion');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@ValorUnitario');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@Importe');
                conceptosChain += this.getXpathValueBasedOnNode(conceptoNode,'@Descuento');

                conceptosChain += this.getConceptoTraslados(conceptoNode);
                conceptosChain += this.getConceptoRetenciones(conceptoNode);

                if (conceptoNode.selectSingleNode(@'x:InformacionAduanera/@NumeroPedimento', nsmgr) != null)
                {
                    conceptosChain += this.getXpathValueBasedOnNode(conceptoNode, @'x:InformacionAduanera/@NumeroPedimento');
                }

                if (conceptoNode.selectSingleNode(@'x:CuentaPredial/@Numero', nsmgr) != null)
                {
                    conceptosChain += this.getXpathValueBasedOnNode(conceptoNode, @'x:CuentaPredial/@Numero');
                }
            }

        }

        return conceptosChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllRelacionados</Name>
				<Source><![CDATA[
    protected str getAllRelacionados()
    {
        XmlNode node;
        XmlNode relacionadoNode;
        XmlNodeList nodeList;

        str relacionadosChain;

        node = this.getXpathNode(@'/x:Comprobante/x:CfdiRelacionados');

        if (node != null)
        {
            nodeList = node.selectNodes(@'x:CfdiRelacionado', nsmgr);
            for (relacionadoNode = nodeList.nextNode(); relacionadoNode != null; relacionadoNode = nodeList.nextNode())
            {
                relacionadosChain += this.getXpathValueBasedOnNode(relacionadoNode,'@UUID');
            }
        }

        return relacionadosChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllRetenciones</Name>
				<Source><![CDATA[
    protected str getAllRetenciones()
    {
        XmlNode node;
        XmlNode retencionNode;
        XmlNodeList nodeList;

        str retencionesChain;

        node = this.getXpathNode(@'/x:Comprobante/x:Impuestos/x:Retenciones');

        if (node != null)
        {
            nodeList = node.selectNodes(@'x:Retencion', nsmgr);
            for (retencionNode = nodeList.nextNode(); retencionNode != null;retencionNode = nodeList.nextNode())
            {
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@Impuesto');
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@Importe');
            }

        }

        return retencionesChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTraslados</Name>
				<Source><![CDATA[
    protected str getAllTraslados()
    {
        XmlNode node;
        XmlNode trasladoNode;
        XmlNodeList nodeList;

        str trasladosChain;

        node = this.getXpathNode(@'/x:Comprobante/x:Impuestos/x:Traslados');

        if (node != null)
        {
            nodeList = node.selectNodes(@'x:Traslado', nsmgr);
            for (trasladoNode = nodeList.nextNode(); trasladoNode != null;trasladoNode = nodeList.nextNode())
            {
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@Impuesto');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@TipoFactor');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@TasaOCuota');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@Importe');
            }

        }

        return trasladosChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCartaPorte</Name>
				<Source><![CDATA[
    public str getCartaPorte()
    {
        str cartaPorteChain;
        boolean isCartaPorteV3_1Enabled = EInvoiceCFDICartaPorteVersion_3_1MXFlight::instance().isEnabled();

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@Version');

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@IdCCP');

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@TranspInternac');

        if (!isCartaPorteV3_1Enabled)
        {
            cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@RegimenAduanero');
        }

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@EntradaSalidaMerc');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@PaisOrigenDestino');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@ViaEntradaSalida');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/@TotalDistRec');

        if (isCartaPorteV3_1Enabled)
        {
            cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:RegimenesAduaneros/c:RegimenAduaneroCCP/@RegimenAduanero');
        }

        XmlNode xmlNode;
        XmlNodeList xmlNodeList = xmlDocument.selectNodes(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Ubicaciones/c:Ubicacion', nsmgr);

        for (int i = 0; i < xmlNodeList.length(); i++)
        {
            xmlNode = xmlNodeList.item(i);
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@TipoUbicacion');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@IDUbicacion');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@RFCRemitenteDestinatario');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@NumRegIdTrib');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@ResidenciaFiscal');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@FechaHoraSalidaLlegada');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@DistanciaRecorrida');

            cartaPorteChain += this.compressBlankSpace(this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Calle'));
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@NumeroExterior');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@NumeroInterior');
            cartaPorteChain += this.compressBlankSpace(this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Colonia'));
            cartaPorteChain += this.compressBlankSpace(this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Localidad'));
            cartaPorteChain += this.compressBlankSpace(this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Referencia'));
            cartaPorteChain += this.compressBlankSpace(this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Municipio'));
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Estado');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@Pais');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:Domicilio/@CodigoPostal');
        }

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/@PesoBrutoTotal');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/@UnidadPeso');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/@NumTotalMercancias');
        xmlNodeList = xmlDocument.selectNodes(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Mercancia', nsmgr);

        for (int i = 0; i < xmlNodeList.length(); i++)
        {
            xmlNode = xmlNodeList.item(i);
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@BienesTransp');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@Descripcion');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@Cantidad');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@ClaveUnidad');

            str isHazardous = this.getXpathValueBasedOnNode(xmlNode, @'@MaterialPeligroso');

            if (isHazardous == '|Sí' || isHazardous == '|No')
            {
                cartaPorteChain += isHazardous;
                cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@CveMaterialPeligroso');
                cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@Embalaje');
            }

            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@PesoEnKg');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@ValorMercancia');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@Moneda');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@FraccionArancelaria');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@UUIDComercioExt');

            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@TipoMateria');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@DescripcionMateria');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:DocumentacionAduanera/@TipoDocumento');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'c:DocumentacionAduanera/@IdentDocAduanero');
        }

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/@PermSCT');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/@NumPermisoSCT');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:IdentificacionVehicular/@ConfigVehicular');

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:IdentificacionVehicular/@PesoBrutoVehicular');

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:IdentificacionVehicular/@PlacaVM');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:IdentificacionVehicular/@AnioModeloVM');

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:Seguros/@AseguraRespCivil');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:Seguros/@PolizaRespCivil');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:Seguros/@AseguraMedAmbiente');
        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:Seguros/@PolizaMedAmbiente');

        xmlNodeList = xmlDocument.selectNodes(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:Mercancias/c:Autotransporte/c:Remolques/c:Remolque', nsmgr);

        for (int i = 0; i < xmlNodeList.length(); i++)
        {
            xmlNode = xmlNodeList.item(i);
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@SubTipoRem');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@Placa');
        }

        cartaPorteChain += this.getXpathValue(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:FiguraTransporte/@CveTransporte');

        xmlNodeList = xmlDocument.selectNodes(@'/x:Comprobante/x:Complemento/c:CartaPorte/c:FiguraTransporte/c:TiposFigura', nsmgr);

        for (int i = 0; i < xmlNodeList.length(); i++)
        {
            xmlNode = xmlNodeList.item(i);
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@TipoFigura');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@RFCFigura');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@NumLicencia');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@NombreFigura');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@NumRegIdTribFigura');
            cartaPorteChain += this.getXpathValueBasedOnNode(xmlNode, @'@ResidenciaFiscalFigura');
        }

        return cartaPorteChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoRetenciones</Name>
				<Source><![CDATA[
    protected str getConceptoRetenciones(XmlNode _conceptoNode)
    {
        XmlNode node;
        XmlNode retencionNode;
        XmlNodeList nodeList;

        str retencionesChain;

        node = _conceptoNode.selectSingleNode(@'x:Impuestos/x:Retenciones', nsmgr);

        if (node != null)
        {
            nodeList = node.selectNodes(@'x:Retencion', nsmgr);
            for (retencionNode = nodeList.nextNode(); retencionNode != null; retencionNode = nodeList.nextNode())
            {
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@Base');
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@Impuesto');
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@TipoFactor');
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@TasaOCuota');
                retencionesChain += this.getXpathValueBasedOnNode(retencionNode, '@Importe');
            }
        }

        return retencionesChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Complemento note.
    /// </summary>
    /// <returns>
    /// The Complemento node.
    /// </returns>
    public str getForeignTrade()
    {
        str foreignTrade = '';
        XmlNode complementoNode, node, mercanciaNode;
        XmlNodeList nodeList;

        complementoNode = this.getXpathNode(@'/x:Comprobante/x:Complemento');

        if(complementoNode != null)
        {
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@Version');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@MotivoTraslado');

            if (!EInvoiceCFDIForeignTradeVersion_2_MXFlight::instance().isEnabled())
            {
                foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@TipoOperacion');
            }

            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@ClaveDePedimento');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@CertificadoOrigen');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@NumCertificadoOrigen');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@NumeroExportadorConfiable');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@Incoterm');

            if (!EInvoiceCFDIForeignTradeVersion_2_MXFlight::instance().isEnabled())
            {
                foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@Subdivision');
            }

            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@Observaciones');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@TipoCambioUSD');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/@TotalUSD');

            // Company Information (Emisor)
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/@Curp');

            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Calle'));
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@NumeroExterior');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@NumeroInterior');
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Colonia'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Localidad'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Referencia'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Municipio'));
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Estado');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@Pais');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Emisor/y:Domicilio/@CodigoPostal');

            // Propietario
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Propietario/@NumRegIdTrib');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Propietario/@ResidenciaFiscal');

            // Receptor
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/@NumRegIdTrib'));

            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Calle'));
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@NumeroExterior');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@NumeroInterior');
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Colonia'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Localidad'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Referencia'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Municipio'));
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Estado');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@Pais');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Receptor/y:Domicilio/@CodigoPostal');

            // Destinatario
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/@NumRegIdTrib'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/@Nombre'));

            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Calle'));
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@NumeroExterior');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@NumeroInterior');
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Colonia'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Localidad'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Referencia'));
            foreignTrade += this.compressBlankSpace(this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Municipio'));
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Estado');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@Pais');
            foreignTrade += this.getXpathValue(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Destinatario/y:Domicilio/@CodigoPostal');

            // Mercancias
            node = this.getXpathNode(@'/x:Comprobante/x:Complemento/y:ComercioExterior/y:Mercancias');

            if(node != null)
            {
                nodeList = node.selectNodes(@'y:Mercancia', nsmgr);
                for (mercanciaNode = nodeList.nextNode(); mercanciaNode != null; mercanciaNode = nodeList.nextNode())
                {
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, '@NoIdentificacion');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, '@FraccionArancelaria');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, '@CantidadAduana');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, '@UnidadAduana');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, '@ValorUnitarioAduana');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, '@ValorDolares');

                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, @'y:DescripcionesEspecificas/@Marca');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, @'y:DescripcionesEspecificas/@Modelo');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, @'y:DescripcionesEspecificas/@SubModelo');
                    foreignTrade += this.getXpathValueBasedOnNode(mercanciaNode, @'y:DescripcionesEspecificas/@NumeroSerie');
                }
            }
        }

        return foreignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTradeNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the foreign trade namespace for the XML.
    /// </summary>
    /// <returns>
    /// The namespace as string.
    /// </returns>
    protected str getForeignTradeNameSpace()
    {
        str foreignTradeNameSpace;

        if (EInvoiceCFDIForeignTradeVersion_2_MXFlight::instance().isEnabled())
        {
            foreignTradeNameSpace = 'http://www.sat.gob.mx/ComercioExterior20';
        }
        else
        {
            foreignTradeNameSpace = 'http://www.sat.gob.mx/ComercioExterior11';
        }

        return foreignTradeNameSpace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransportationDetailsNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transportation details namespace for the XML.
    /// </summary>
    /// <returns>
    /// The namespace as string.
    /// </returns>
    protected str getTransportationDetailsNameSpace()
    {
        str transportationDetailsNameSpace;

        if (EInvoiceCFDICartaPorteVersion_3_1MXFlight::instance().isEnabled())
        {
            transportationDetailsNameSpace = 'http://www.sat.gob.mx/CartaPorte31';
        }
        else
        {
            transportationDetailsNameSpace = 'http://www.sat.gob.mx/CartaPorte30';
        }
        
        return transportationDetailsNameSpace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoTraslados</Name>
				<Source><![CDATA[
    protected str getConceptoTraslados(XmlNode _conceptoNode)
    {
        XmlNode node;
        XmlNode trasladoNode;
        XmlNodeList nodeList;

        str trasladosChain;

        node = _conceptoNode.selectSingleNode(@'x:Impuestos/x:Traslados', nsmgr);

        if (node != null)
        {
            nodeList = node.selectNodes(@'x:Traslado', nsmgr);
            for (trasladoNode = nodeList.nextNode(); trasladoNode != null; trasladoNode = nodeList.nextNode())
            {
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@Base');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@Impuesto');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@TipoFactor');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@TasaOCuota');
                trasladosChain += this.getXpathValueBasedOnNode(trasladoNode, '@Importe');
            }
        }

        return trasladosChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalChain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the "Cadena Original" that is a sequence of fields used to authenticate the XML
    /// </summary>
    /// <returns>
    /// Return the "Cadena Original" that is a sequence of fields used to authenticate the XML.
    /// </returns>
    public str getOriginalChain()
    {
        str originalChain;

        originalChain = #delimiter;

        originalChain += this.getXpathValue(@'/x:Comprobante/@Version');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Serie');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Folio');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Fecha');
        originalChain += this.getXpathValue(@'/x:Comprobante/@FormaPago');
        originalChain += this.getXpathValue(@'/x:Comprobante/@NoCertificado');
        originalChain += this.getXpathValue(@'/x:Comprobante/@CondicionesDePago');
        originalChain += this.getXpathValue(@'/x:Comprobante/@SubTotal');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Descuento');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Moneda');
        originalChain += this.getXpathValue(@'/x:Comprobante/@TipoCambio');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Total');
        originalChain += this.getXpathValue(@'/x:Comprobante/@TipoDeComprobante');
        originalChain += this.getXpathValue(@'/x:Comprobante/@MetodoPago');
        originalChain += this.getXpathValue(@'/x:Comprobante/@LugarExpedicion');
        originalChain += this.getXpathValue(@'/x:Comprobante/@Confirmacion');

        // Related documents
        originalChain += this.getXpathValue(@'/x:Comprobante/x:CfdiRelacionados/@TipoRelacion');
        originalChain += this.removeDuplicatedSpaces(this.getAllRelacionados());

        //   Company Information (Emisor)
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Emisor/@Rfc');
        originalChain += this.removeDuplicatedSpaces(this.getXpathValue(@'/x:Comprobante/x:Emisor/@Nombre'));
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Emisor/@RegimenFiscal');

        // Customer information (Receptor)
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Receptor/@Rfc');
        originalChain += this.removeDuplicatedSpaces(this.getXpathValue(@'/x:Comprobante/x:Receptor/@Nombre'));
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Receptor/@ResidenciaFiscal');
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Receptor/@NumRegIdTrib');
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Receptor/@UsoCFDI');

        // Concepts (+ informacion Aduana + Cuenta Predial)
        originalChain += this.removeDuplicatedSpaces(this.getAllConceptos());

        // Retained taxes
        originalChain += this.getAllRetenciones();
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Impuestos/@TotalImpuestosRetenidos');

        //Sales taxes
        originalChain += this.getAllTraslados();
        originalChain += this.getXpathValue(@'/x:Comprobante/x:Impuestos/@TotalImpuestosTrasladados');

        // Foreign trade
        originalChain += this.getForeignTrade();

        originalChain += this.getCartaPorte();

        originalChain += #delimiter + #delimiter;

        originalChain = this.getFormattedOriginalChain(originalChain);

        return originalChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseFechaTimbrado</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fechaTimbrado attribute.
    /// </summary>
    /// <returns>
    /// The fechaTimbrado attribute.
    /// </returns>
    public str getResponseFechaTimbrado()
    {
        str response;

        this.createResponseNamespace();
        response = this.getXpathValue(@'/Resultado/x:Comprobante/x:Complemento/tfd:TimbreFiscalDigital/@FechaTimbrado',false);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseSATCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the SAT certificate from a XML.
    /// </summary>
    /// <returns>
    /// The SAT certificate.
    /// </returns>
    public str getResponseSATCertificateNumber()
    {
        str response;

        this.createResponseNamespace();
        response = this.getXpathValue(@'/Resultado/x:Comprobante/x:Complemento/tfd:TimbreFiscalDigital/@NoCertificadoSAT',false);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseSelloCFD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sello attribute from a XML.
    /// </summary>
    /// <returns>
    /// The sello attribute.
    /// </returns>
    public str getResponseSelloCFD()
    {
        str response;

        this.createResponseNamespace();
        response = this.getXpathValue(@'/Resultado/x:Comprobante/x:Complemento/tfd:TimbreFiscalDigital/@SelloCFD',false);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseSelloSAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the selloSAT attribute from a XML.
    /// </summary>
    /// <returns>
    /// The selloSAT attribute.
    /// </returns>
    public str getResponseSelloSAT()
    {
        str response;

        this.createResponseNamespace();
        response = this.getXpathValue(@'/Resultado/x:Comprobante/x:Complemento/tfd:TimbreFiscalDigital/@SelloSAT',false);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseUUID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the UUID attribute from a XML.
    /// </summary>
    /// <returns>
    /// The UUID attribute.
    /// </returns>
    public str getResponseUUID()
    {
        str response;

        this.createResponseNamespace();
        response = this.getXpathValue(@'/Resultado/x:Comprobante/x:Complemento/tfd:TimbreFiscalDigital/@UUID',false);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoiceXMLDocReader_V3_3_MX</c> class.
    /// </summary>
    /// <param name="_xmlDocument">The XML document.</param>
    public void new(XmlDocument _xmlDocument)
    {
        super(_xmlDocument);

        nsmgr.addNamespace('y', this.getForeignTradeNameSpace());
        nsmgr.addNamespace('c', this.getTransportationDetailsNameSpace());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>