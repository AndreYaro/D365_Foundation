<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjInvoiceLines
{
    ProjTransType               transType;
    ProjTransIdBase             transId;
    TmpProjInvoiceLine          tmpProjInvoiceLine;
    TmpProjInvoiceLineSettleBy  tmpProjInvoiceLineSettleBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        ProjTransType   _transType,
        ProjTransIdBase _transId
    )
    {
        transType = _transType;
        transId = _transId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record in <c>TmpProjInvoiceLine</c> table.
    /// </summary>
    /// <param name = "_projInvoiceId">
    ///     Project invoice Id.
    /// </param>
    /// <param name = "_proposalId">
    ///     Project proposal Id.
    /// </param>
    /// <param name = "_invoiceDate">
    ///     Invoice date.
    /// </param>
    /// <param name = "_projTrans">
    ///     A <c>Projtrans</c> instance.
    /// </param>
    /// <param name = "_transId">
    ///     Transaction Id.
    /// </param>
    /// <param name = "_changeSalesPrice">
    ///     A flag to determine the sales price; optional.
    /// </param>
    /// <returns>
    ///     The record ID of the inserted <c>TmpProjInvoiceLine</c> record.
    /// </returns>
    protected RefRecId insertTrans(
        ProjInvoiceId   _projInvoiceId,
        ProjProposalId  _proposalId,
        InvoiceDate     _invoiceDate,
        ProjTrans       _projTrans,
        ProjTransIdBase _transId,
        boolean         _changeSalesPrice   = false
    )
    {
        tmpProjInvoiceLine.clear();

        tmpProjInvoiceLine.TransId      = _transId;
        tmpProjInvoiceLine.InvoiceId    = _projInvoiceId;
        tmpProjInvoiceLine.ProposalId   = _proposalId;
        tmpProjInvoiceLine.InvoiceDate  = _invoiceDate;
        tmpProjInvoiceLine.TransTxt     = _projTrans.txt();
        tmpProjInvoiceLine.Qty          = _projTrans.qty();
        tmpProjInvoiceLine.LineAmount   = _projTrans.transTurnover();
        tmpProjInvoiceLine.CurrencyCode = _projTrans.currencyIdSales();
        if (_changeSalesPrice)
        {
            tmpProjInvoiceLine.SalesPrice   = -_projTrans.salesPrice();
        }
        else
        {
            tmpProjInvoiceLine.SalesPrice   = _projTrans.salesPrice();
        }

        tmpProjInvoiceLine.insert();

        return tmpProjInvoiceLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        ProjProposalCost    projProposalCost;
        ProjProposalEmpl    projProposalEmpl;
        ProjProposalItem    projProposalItem;
        ProjProposalOnAcc   projProposalOnAcc;
        ProjProposalRevenue projProposalRevenue;

        ProjInvoiceCost     projInvoiceCost;
        ProjInvoiceEmpl     projInvoiceEmpl;
        ProjInvoiceItem     projInvoiceItem;
        ProjInvoiceOnAcc    projInvoiceOnAcc;
        ProjInvoiceRevenue  projInvoiceRevenue;

        ProjInvoiceEmplDetail       projInvoiceEmplDetail;
        ProjInvoiceEmplDetail       projInvoiceEmplDetailSettle;
        ProjInvoiceCostDetail       projInvoiceCostDetail;
        ProjInvoiceCostDetail       projInvoiceCostDetailSettle;
        ProjInvoiceItemDetail       projInvoiceItemDetail;
        ProjInvoiceItemDetail       projInvoiceItemDetailSettle;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetailSettle;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetailSettle;

        ProjTrans           projTrans;

        ProjInvoiceJour     projInvoiceJour;
        ProjProposalJour    projProposalJour;

        RefRecId            refRecId;
        ProjInvoiceId       settleBy;

        #localMacro.settleBy
        while select %2
            where %2.InvoiceRefRecId == %1.RecId
        {
            select firstonly %3
                where %3.RefRecId == %2.RecId;

            if (%3)
            {
                settleBy = %3.%4().ProjInvoiceId;

                select firstonly tmpProjInvoiceLineSettleBy
                    where tmpProjInvoiceLineSettleBy.RefRecId == refRecId &&
                        tmpProjInvoiceLineSettleBy.SettleBy == settleBy;

                if (!tmpProjInvoiceLineSettleBy)
                {
                    tmpProjInvoiceLineSettleBy.clear();
                    tmpProjInvoiceLineSettleBy.RefRecId = refRecId;
                    tmpProjInvoiceLineSettleBy.SettleBy = settleBy;
                    tmpProjInvoiceLineSettleBy.insert();
                }
            }
        }
    #endMacro
        switch (transType)
        {
            case ProjTransType::Revenue:
                while select projInvoiceRevenue
                    where projInvoiceRevenue.TransId    == transId
                {
                    projInvoiceJour     = ProjInvoiceJour::find(projInvoiceRevenue.ProjInvoiceId,projInvoiceRevenue.InvoiceDate);
                    projTrans           = ProjTrans::newProjInvoiceRevenue(projInvoiceRevenue);

                    refRecId = this.insertTrans(projInvoiceRevenue.ProjInvoiceId,
                                projInvoiceJour.ProposalId,
                                projInvoiceJour.InvoiceDate,
                                projTrans,
                                transId,
                                false);

                    #settleBy(projInvoiceRevenue, projInvoiceRevenueDetail, projInvoiceRevenueDetailSettle, projInvoiceRevenue)
                }

                select projProposalRevenue
                    where projProposalRevenue.TransId    == transId
                        notexists join projInvoiceJour
                            where projInvoiceJour.ProposalId    == projProposalRevenue.ProposalId;

                if (projProposalRevenue)
                {
                    projProposalJour    = ProjProposalJour::find(projProposalRevenue.ProposalId);
                    projTrans           = ProjTrans::newProjProposalRevenue(projProposalRevenue);

                    this.insertTrans('',
                                projProposalRevenue.ProposalId,
                                projProposalJour.InvoiceDate,
                                projTrans,
                                transId);
                }
                break;
            case ProjTransType::Hour:
                while select projInvoiceEmpl
                    where projInvoiceEmpl.TransId    == transId
                {
                    projInvoiceJour     = ProjInvoiceJour::find(projInvoiceEmpl.ProjInvoiceId,projInvoiceEmpl.InvoiceDate);
                    projTrans           = ProjTrans::newProjInvoiceEmpl(projInvoiceEmpl);

                    refRecId = this.insertTrans(projInvoiceEmpl.ProjInvoiceId,
                                projInvoiceJour.ProposalId,
                                projInvoiceJour.InvoiceDate,
                                projTrans,
                                transId,
                                false);

                    #settleBy(projInvoiceEmpl, projInvoiceEmplDetail, projInvoiceEmplDetailSettle, projInvoiceEmpl)
                }

                select projProposalEmpl
                    where projProposalEmpl.TransId    == transId
                        notexists join projInvoiceJour
                            where projInvoiceJour.ProposalId    == projProposalEmpl.ProposalId;

                if (projProposalEmpl)
                {
                    projProposalJour    = ProjProposalJour::find(projProposalEmpl.ProposalId);
                    projTrans           = ProjTrans::newProjProposalEmpl(projProposalEmpl);

                    this.insertTrans('',
                                projProposalEmpl.ProposalId,
                                projProposalJour.InvoiceDate,
                                projTrans,
                                transId);
                }
                break;
            case ProjTransType::Cost:
                while select projInvoiceCost
                    where projInvoiceCost.TransId    == transId
                {
                    projInvoiceJour     = ProjInvoiceJour::find(projInvoiceCost.ProjInvoiceId,projInvoiceCost.InvoiceDate);
                    projTrans           = ProjTrans::newProjInvoiceCost(projInvoiceCost);

                    refRecId = this.insertTrans(projInvoiceCost.ProjInvoiceId,
                                projInvoiceJour.ProposalId,
                                projInvoiceJour.InvoiceDate,
                                projTrans,
                                transId,
                                false);

                    #settleBy(projInvoiceCost, projInvoiceCostDetail, projInvoiceCostDetailSettle, projInvoiceCost)
                }

                select projProposalCost
                    where projProposalCost.TransId    == transId
                        notexists join projInvoiceJour
                            where projInvoiceJour.ProposalId    == projProposalCost.ProposalId;

                if (projProposalCost)
                {
                    projProposalJour    = ProjProposalJour::find(projProposalCost.ProposalId);
                    projTrans           = ProjTrans::newProjProposalCost(projProposalCost);

                    this.insertTrans('',
                                projProposalCost.ProposalId,
                                projProposalJour.InvoiceDate,
                                projTrans,
                                transId);
                }
                break;
            case ProjTransType::Item:
                while select projInvoiceItem
                    where projInvoiceItem.ProjTransId    == transId
                {
                    projInvoiceJour     = ProjInvoiceJour::find(projInvoiceItem.ProjInvoiceId,projInvoiceItem.InvoiceDate);
                    projTrans           = ProjTrans::newProjInvoiceItem(projInvoiceItem);

                    refRecId = this.insertTrans(projInvoiceItem.ProjInvoiceId,
                                projInvoiceJour.ProposalId,
                                projInvoiceJour.InvoiceDate,
                                projTrans,
                                transId,
                                false);

                    #settleBy(projInvoiceItem, projInvoiceItemDetail, projInvoiceItemDetailSettle, projInvoiceItem)
                }

                select projProposalItem
                    where projProposalItem.ProjTransId    == transId
                        notexists join projInvoiceJour
                            where projInvoiceJour.ProposalId    == projProposalItem.ProposalId;

                if (projProposalItem)
                {
                    projProposalJour    = ProjProposalJour::find(projProposalItem.ProposalId);
                    projTrans           = ProjTrans::newProjProposalItem(projProposalItem);

                    this.insertTrans('',
                                projProposalItem.ProposalId,
                                projProposalJour.InvoiceDate,
                                projTrans,
                                transId);
                }
                break;
            case ProjTransType::OnAccount:
                while select projInvoiceOnAcc
                    where projInvoiceOnAcc.TransId    == transId
                {
                    projInvoiceJour     = ProjInvoiceJour::find(projInvoiceOnAcc.ProjInvoiceId,projInvoiceOnAcc.InvoiceDate);
                    projTrans           = ProjTrans::newProjInvoiceOnAcc(projInvoiceOnAcc);

                    refRecId = this.insertTrans(projInvoiceOnAcc.ProjInvoiceId,
                                projInvoiceJour.ProposalId,
                                projInvoiceJour.InvoiceDate,
                                projTrans,
                                transId,
                                false);

                    #settleBy(projInvoiceOnAcc, projInvoiceOnAccDetail, projInvoiceOnAccDetailSettle, projInvoiceOnAcc)
                }

                select projProposalOnAcc
                    where projProposalOnAcc.TransId    == transId
                        notexists join projInvoiceJour
                            where projInvoiceJour.ProposalId    == projProposalOnAcc.ProposalId;

                if (projProposalOnAcc)
                {
                    projProposalJour    = ProjProposalJour::find(projProposalOnAcc.ProposalId);
                    projTrans           = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);

                    this.insertTrans('',
                                projProposalOnAcc.ProposalId,
                                projProposalJour.InvoiceDate,
                                projTrans,
                                transId,
                                projTrans.transStatus() == ProjTransStatus::CreditnoteProposal ? true : false);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjInvoiceLine</Name>
				<Source><![CDATA[
    public TmpProjInvoiceLine tmpProjInvoiceLine()
    {
        return tmpProjInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjInvoiceLineSettleBy</Name>
				<Source><![CDATA[
    public TmpProjInvoiceLineSettleBy tmpProjInvoiceLineSettleBy()
    {
        return tmpProjInvoiceLineSettleBy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>