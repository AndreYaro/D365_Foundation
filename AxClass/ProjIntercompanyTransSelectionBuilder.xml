<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyTransSelectionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class prepares <c>ProjTmpIntercompanyTransactionSelection</c> to be used
/// when selecting the entries to be invoiced.
/// </summary>
class ProjIntercompanyTransSelectionBuilder
{
    ProjIntercompanyTransQueryParams            params;
    ProjTmpIntercompanyTransactionSelection     selectionTable;
    Map                                         origTransMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSelectionTableRecord</Name>
				<Source><![CDATA[
        private void addSelectionTableRecord(ProjIntercompanyInvoiceOrigTrans _origTrans, ProjInvoiceProjId _contractId)
    {
        selectionTable.Amount               = _origTrans.getAmountCur();
        selectionTable.Category             = _origTrans.getProjectCategoryId();
        selectionTable.ContractId           = _contractId;
        selectionTable.Currency             = _origTrans.getCurrencyCode();
        selectionTable.Description          = _origTrans.getDescription();
        selectionTable.ProjectDataAreaId    = _origTrans.getProjectDataAreaId();
        selectionTable.ProjectId            = _origTrans.getProjectId();
        selectionTable.Quantity             = _origTrans.getQuantity();
        selectionTable.RefRecId             = _origTrans.getRecId();
        selectionTable.TransDate            = _origTrans.getTransDate();
        selectionTable.UnitPrice            = _origTrans.getUnitPrice();
        selectionTable.TransType            = _origTrans.getTransType();
        selectionTable.TransactionOrigin    = _origTrans.getTransOrigin();
        selectionTable.Worker               = _origTrans.getWorker();
        selectionTable.IndirectAmount       = _origTrans.getIndirectCost();
        selectionTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>List</c> with the <c>ProjIntercompanyInvoiceOrigTrans</c> objects from
    /// the transactions that were selected by the user.
    /// </summary>
    /// <returns>
    /// The <c>List</c> with the <c>ProjIntercompanyInvoiceOrigTrans</c> objects from
    /// the transactions that were selected by the user.
    /// </returns>
    public List getOrigTransList()
    {
        List list;

        list = new List(Types::Class);

        while select selectionTable
            where selectionTable.Selected == true
        {
            list.addEnd(origTransMap.lookup([selectionTable.TransactionOrigin, selectionTable.RefRecId]));
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the temporary table <c>ProjTmpIntercompanyTransactionSelection</c> to
    /// be displayed for the user to select the transactions.
    /// </summary>
    /// <returns>
    /// A temporary table record of <c>ProjTmpIntercompanyTransactionSelection</c> to be displayed for the user.
    /// </returns>
    /// <remarks>
    /// One option for displaying the temporary buffer is to call setTmpData() method in the data source
    /// buffer in the form passing the buffer returned here as parameter.
    /// </remarks>
    public ProjTmpIntercompanyTransactionSelection getSelectionTable()
    {
        return selectionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransListEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>ListEnumerator</c> with the <c>ProjIntercompanyInvoiceOrigTrans</c> from the query.
    /// </summary>
    /// <returns>
    /// A <c>ListEnumerator</c> with the <c>ProjIntercompanyInvoiceOrigTrans</c> from the query.
    /// </returns>
    protected ListEnumerator getTransListEnumerator()
    {
        ProjIntercompanyTransQuery          transQuery;
        List                                origTransList;

        transQuery = ProjIntercompanyTransQuery::construct(params);
        origTransList = transQuery.getTransList();
        return origTransList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyTransQuery</c> with given
    /// parameters from a <c>ProjIntercompanyTransQueryParams</c> object.
    /// </summary>
    /// <param name="_packedQueryParams">
    /// A packed <c>ProjIntercompanyTransQueryParams</c> object.
    /// </param>
    public void new(container _packedQueryParams)
    {
        params = new ProjIntercompanyTransQueryParams();
        params.unpack(_packedQueryParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the query.
    /// </summary>
    public void run()
    {
        ProjTable                           currProjTable;
        ProjIntercompanyInvoiceOrigTrans    origTrans;
        ListEnumerator                      origTransListEnumerator;

        if (!params.parmBorrowingLE())
        {
            return;
        }

        origTransMap = new Map(Types::Container, Types::Class);
        origTransListEnumerator = this.getTransListEnumerator();

        while (origTransListEnumerator.moveNext())
        {
            origTrans = origTransListEnumerator.current();
            if (origTrans.getProjectId() != currProjTable.ProjId)
            {
                // We're interested in the project information from another legal entity, so
                // retrieve it separately
                currProjTable = ProjTable::findByDataArea(origTrans.getProjectId(), params.parmBorrowingLE());
            }
            this.addSelectionTableRecord(origTrans, currProjTable.ProjInvoiceProjId);
            origTransMap.insert([origTrans.getTransOrigin(), origTrans.getRecId()], origTrans);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>