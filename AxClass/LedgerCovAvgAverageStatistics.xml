<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgAverageStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerCovAvgAverageStatistics
{
    private LedgerCovAvgAverageDaysSelector avgDaysSelector;
    private LedgerCovAvgAverageDaysMap avgDaysMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAverageDaysFromSelector</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static int calculateAverageDaysFromSelector(LedgerCovAvgAverageDaysSelector _selector, container _companies)
    {
        LedgerCovAvgAverageStatistics instance = LedgerCovAvgAverageStatistics::newFromSelector(_selector);

        return instance.calculateAverageDays(_companies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSelector</Name>
				<Source><![CDATA[
    private static LedgerCovAvgAverageStatistics newFromSelector(LedgerCovAvgAverageDaysSelector _selector)
    {
        LedgerCovAvgAverageStatistics instance = new LedgerCovAvgAverageStatistics();
        instance.init(_selector);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(LedgerCovAvgAverageDaysSelector _selector)
    {
        avgDaysSelector = _selector;

        avgDaysMap = LedgerCovAvgAverageDaysMap::getEmptyTableBuffer(_selector);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAverageDays</Name>
				<Source><![CDATA[
    private int calculateAverageDays(container _companies)
    {
        TransDate previousMonth = this.determinePreviousMonth();

        int totalTransactionCount = this.determineTotalTransactionCount(_companies, previousMonth);

        return this.determineAverageDays(_companies, previousMonth, totalTransactionCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePreviousMonth</Name>
				<Source><![CDATA[
    private TransDate determinePreviousMonth()
    {
        TransDate currentDate = DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());
        TransDate startOfMonth = dateStartMth(currentDate); 

        return dateMthFwd(startOfMonth, -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTotalTransactionCount</Name>
				<Source><![CDATA[
    private int determineTotalTransactionCount(container _companies, TransDate _previousMonth)
    {
        select crosscompany : _companies sum(TransactionCount)
            from avgDaysMap
            where avgDaysMap.StartOfMonth >= _previousMonth;

        return avgDaysMap.TransactionCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAverageDays</Name>
				<Source><![CDATA[
    private int determineAverageDays(container _companies, TransDate _previousMonth, int _totalTransactionCount)
    {
        real averageDaysNotRounded;

        if (_totalTransactionCount != 0)
        {
            while select crosscompany : _companies TransactionCount, sum(NumberOfDays)
                from avgDaysMap
                group by TransactionCount
                where avgDaysMap.StartOfMonth >= _previousMonth
            {
                averageDaysNotRounded += avgDaysMap.NumberOfDays * (avgDaysMap.TransactionCount / _totalTransactionCount);
            }
        }

        return real2int(averageDaysNotRounded);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>