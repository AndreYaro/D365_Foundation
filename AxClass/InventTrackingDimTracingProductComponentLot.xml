<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingProductComponentLot</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class handles item tracing representation of tracked components feature.
/// </summary>
internal final class InventTrackingDimTracingProductComponentLot extends InventTrackingDimTracingInventTransDTO
{
    private InventTrackingDimTracingInventTransDTO          inventTrans;
    private InventTrackingDimTracingInventTransOriginDTO    inventTransOrigin;
    private InventDim                                       inventDim;
    private Map                                             productComponentLotSettleMap = new Map(Types::String, Types::Real);    // KV = {product tracking dimensions hashKey => Map {component tracking dimensions hashKey, settle qty}}
    private InventQty                                       settleQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setInventTrans</Name>
				<Source><![CDATA[
    internal InventTrackingDimTracingProductComponentLot setInventTrans(InventTrackingDimTracingInventTransDTO _inventTransDTO)
    {
        inventTrans = _inventTransDTO;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransOrigin</Name>
				<Source><![CDATA[
    internal InventTrackingDimTracingProductComponentLot setInventTransOrigin(InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        inventTransOrigin = _inventTransOriginDTO;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    internal InventTrackingDimTracingProductComponentLot setInventDim(InventDim _inventDimDTO)
    {
        inventDim = _inventDimDTO;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettleQty</Name>
				<Source><![CDATA[
    internal InventTrackingDimTracingProductComponentLot setSettleQty(InventQty _settleQty)
    {
        settleQty = _settleQty;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleQty</Name>
				<Source><![CDATA[
    internal InventQty getSettleQty()
    {
        return settleQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAssociationsMap</Name>
				<Source><![CDATA[
    internal InventTrackingDimTracingProductComponentLot buildAssociationsMap(Map _productComponentLotSettleMap)
    {
        str productHashKey;
        str componentHashKey;
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        productComponentLotSettleMap = _productComponentLotSettleMap;

        if (inventTransOrigin.referenceCategory() == InventTransType::Production && inventTrans.isReceipt())
        {
            if (inventDim.InventBatchId || inventDim.inventSerialId)
            {
                productLotAssociation = ProdAsBuiltBOMProductLotAssociation::findAssociation(inventTransOrigin.referenceId(), inventTransOrigin.InventTransId(), inventTransOrigin.ItemId(), inventDim);
                if (productLotAssociation.RecId)
                {
                    productHashKey = this.hashKey(productLotAssociation.InventTransId, productLotAssociation.BatchNumberId, productLotAssociation.SerialNumberId);
                    var componentLotAssociation = ProdAsBuiltBOMComponentLotAssociation::findAssociationByMatchId(productLotAssociation.MatchId);
                    while (componentLotAssociation)
                    {
                        componentHashKey = this.hashKey(componentLotAssociation.InventTransId, componentLotAssociation.BatchNumberId, componentLotAssociation.SerialNumberId);                        
                        this.updateProductComponentLotSettleMap(productHashKey, componentHashKey, componentLotAssociation);
                        next componentLotAssociation;
                    }
                }
            }
        }
        else if (inventTransOrigin.referenceCategory() == InventTransType::ProdLine && inventTrans.isIssue())
        {
            if (inventDim.InventBatchId || inventDim.inventSerialId)
            {
                var componentLotAssociation = ProdAsBuiltBOMComponentLotAssociation::findAssociation(inventTransOrigin.ReferenceId(), inventTransOrigin.InventTransId(), inventTransOrigin.ItemId(), inventDim);
                while (componentLotAssociation)
                {
                    productLotAssociation = ProdAsBuiltBOMProductLotAssociation::findAssociationByMatchId(componentLotAssociation.MatchId);
                    productHashKey = this.hashKey(productLotAssociation.InventTransId, productLotAssociation.BatchNumberId, productLotAssociation.SerialNumberId);
                    componentHashKey = this.hashKey(componentLotAssociation.InventTransId, componentLotAssociation.BatchNumberId, componentLotAssociation.SerialNumberId);

                    this.updateProductComponentLotSettleMap(productHashKey, componentHashKey, componentLotAssociation);
                    next componentLotAssociation;
                }
            }
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    private str hashKey(InventTransId _lotId, InventBatchId _batchNumberId, InventSerialId _serialNumberId)
    {
        return _lotId + '#' + _batchNumberId + '#' + _serialNumberId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventTrackingDimTracingProductComponentLot construct()
    {
        return new InventTrackingDimTracingProductComponentLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuilder</Name>
				<Source><![CDATA[
    internal static InventTrackingDimTracingProductComponentLot createBuilder(InventTrackingDimTracingInventTransDTO       _inventTransDTO,
                                                                              InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO,
                                                                              InventDim                                    _inventDimDTO, 
                                                                              Map                                          _productComponentLotSettleMap)
    {
        if (_inventTransOriginDTO.referenceCategory() != InventTransType::Production &&
            _inventTransOriginDTO.referenceCategory() != InventTransType::ProdLine)
        {
            return null;
        }

        return InventTrackingDimTracingProductComponentLot::construct()
                        .setInventTrans(_inventTransDTO)
                        .setInventTransOrigin(_inventTransOriginDTO)
                        .setInventDim(_inventDimDTO)
                        .setSettleQty(_inventTransDTO.inventQty())
                        .buildAssociationsMap(_productComponentLotSettleMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkComponentLotAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures relevant component transactions based on associations are added to the item tracing.
    /// ex. same batch is used across different component lot associations.
    /// </summary>
    /// <param name = "_componentLotInventTrans">A component lot inventory transaction.</param>
    /// <param name = "_componentLotOrigin">A component lot origin.</param>
    /// <returns>A boolean that indicates whether to consider component lot association/not</returns>
    internal boolean checkComponentLotAssociation(InventTrans _componentLotInventTrans, InventTransOrigin _componentLotOrigin)
    {
        if (inventTransOrigin.referenceCategory() == InventTransType::Production && _componentLotOrigin.ReferenceCategory == InventTransType::ProdLine)
        {
            var componentLotInventDim = InventDim::find(_componentLotInventTrans.InventDimId);
            if ((componentLotInventDim.InventBatchId || componentLotInventDim.InventSerialId) && (inventDim.InventBatchId || inventDim.inventSerialId))
            {
                var productHashKey = this.hashKey(inventTransOrigin.inventTransId(), inventDim.InventBatchId, inventDim.InventSerialId);
                var productLotAssociation = ProdAsBuiltBOMProductLotAssociation::findAssociation(inventTransOrigin.referenceId(), inventTransOrigin.inventTransId(), inventTransOrigin.itemId(), inventDim);
                if (!productLotAssociation.RecId)
                {
                    return false;
                }
                var componentHashKey = this.hashKey(_componentLotOrigin.InventTransId, componentLotInventDim.InventBatchId, componentLotInventDim.InventSerialId);
                var componentLotAssociation = ProdAsBuiltBOMComponentLotAssociation::findAssociation(_componentLotOrigin.ReferenceId, _componentLotOrigin.InventTransId, _componentLotOrigin.ItemId, componentLotInventDim, productLotAssociation.MatchId);
                if (!componentLotAssociation.RecId || !this.updateProductComponentLotSettleMap(productHashKey, componentHashKey, componentLotAssociation, _componentLotInventTrans.Qty))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductLotAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures relevant product transactions based on associations are added to the item tracing.
    /// ex. same batch is used across different product lot associations.
    /// </summary>
    /// <param name = "_productLotInventTrans">A product lot inventory transaction.</param>
    /// <param name = "_productLotOrigin">A product lot origin.</param>
    /// <returns>A boolean that indicates whether to consider product lot association/not</returns>
    internal boolean checkProductLotAssociation(InventTrans _productLotInventTrans, InventTransOrigin _productLotOrigin)
    {
        if (_productLotOrigin.ReferenceCategory == InventTransType::Production && inventTransOrigin.referenceCategory() == InventTransType::ProdLine)
        {
            var productLotInventDim = InventDim::find(_productLotInventTrans.InventDimId);
            if ((productLotInventDim.InventBatchId || productLotInventDim.InventSerialId) && (inventDim.InventBatchId || inventDim.inventSerialId))
            {
                var productHashKey = this.hashKey(_productLotOrigin.InventTransId, productLotInventDim.InventBatchId, productLotInventDim.InventSerialId);
                if (!productComponentLotSettleMap.exists(productHashKey))
                {
                    return false;
                }
                else
                {
                    var componentMap = productComponentLotSettleMap.lookup(productHashKey);
                    var componentLotAssociation = ProdAsBuiltBOMComponentLotAssociation::findAssociationMatchByProductDimensions(inventTransOrigin.ReferenceId(),
                                                                                                                                 inventTransOrigin.InventTransId(),
                                                                                                                                 inventTransOrigin.ItemId(),
                                                                                                                                 inventDim, 
                                                                                                                                 _productLotOrigin.InventTransId,
                                                                                                                                 _productLotOrigin.ItemId,
                                                                                                                                 productLotInventDim);
                    if (!componentLotAssociation.RecId)
                    {
                        return false;
                    }

                    str componentHashKey;
                    while (componentLotAssociation)
                    {
                        componentHashKey = this.hashKey(componentLotAssociation.InventTransId, componentLotAssociation.BatchNumberId, componentLotAssociation.SerialNumberId);
                        if (componentMap.exists(componentHashKey))
                        {
                            if (componentMap.lookup(componentHashKey) >= 0)
                            {
                                return false;
                            }
                        }

                        if (this.updateProductComponentLotSettleMap(productHashKey, componentHashKey, componentLotAssociation, inventTrans.inventQty()))
                        {
                            break;
                        }
                        next componentLotAssociation;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductComponentLotSettleMap</Name>
				<Source><![CDATA[
    internal boolean updateProductComponentLotSettleMap(str _productHashKey, str _componentHashKey, ProdAsBuiltBOMComponentLotAssociation _componentLotAssociation, InventQty _settleQty = 0)
    {
        if (productComponentLotSettleMap.exists(_productHashKey))
        {
            Map componentMap = productComponentLotSettleMap.lookup(_productHashKey);
            if (componentMap.exists(_componentHashKey))
            {
                InventQty consumptionQty = componentMap.lookup(_componentHashKey);
                if (consumptionQty >= 0)
                {
                    return false;
                }

                if (_settleQty)
                {
                    componentMap.insert(_componentHashKey, consumptionQty - _settleQty);
                    this.setSettleQty(this.getSettleQty() - _settleQty);
                }
            }
            else
            {
                componentMap.insert(_componentHashKey, -_componentLotAssociation.InventConsumptionQty);
                productComponentLotSettleMap.insert(_productHashKey, componentMap);
            }
        }
        else
        {
            Map componentMap = new Map(Types::String, Types::Real);
            componentMap.insert(_componentHashKey, -_componentLotAssociation.InventConsumptionQty);
            productComponentLotSettleMap.insert(_productHashKey, componentMap);
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>