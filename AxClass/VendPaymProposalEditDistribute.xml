<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymProposalEditDistribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendPaymProposalEditDistribute implements SysPackable
{
    private LedgerJournalId ledgerJournalId;
    private container priorities[];
    private int numOfElements;

    private TmpPaymDistribution tmpPaymDistribution;
    private TmpCustVendTransOpen tmpProposalLineDistribute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack;

        Set tmpPaymDistributionSet = new Set(Types::Record);
        while select tmpPaymDistribution
        {
            tmpPaymDistributionSet.add(tmpPaymDistribution);
        }

        pack = [ledgerJournalId, priorities, numOfElements, tmpPaymDistributionSet.pack()];

        return pack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container tmpPaymDistributionPack;

        [ledgerJournalId, priorities, numOfElements, tmpPaymDistributionPack] = _packedClass;

        Set tmpPaymDistributionSet = Set::create(tmpPaymDistributionPack);

        if (tmpPaymDistributionSet.elements() > 0)
        {
            SetEnumerator enumerator = tmpPaymDistributionSet.getEnumerator();

            while (enumerator.moveNext())
            {
                tmpPaymDistribution.data(enumerator.current());
                tmpPaymDistribution.insert();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the distribution logic.
    /// </summary>
    /// <param name = "_parameters">A packed list of parameters for running payment proposal distribution.</param>
    /// <returns>The packed results of the payment proposal distribution process.</returns>
    public static container distribute(container _parameters)
    {
        container paymProposalDistributePack;
        container paymProposalPack;
        AscendingDescending distributionOrder;
        TmpPaymDistribution tmpPaymDistribution;
        LedgerJournalId ledgerJournalId;

        [ledgerJournalId, paymProposalPack, distributionOrder, paymProposalDistributePack] = _parameters;

        VendPaymProposalEditDistribute vendPaymProposalEditDistribute = new VendPaymProposalEditDistribute(tmpPaymDistribution);
        vendPaymProposalEditDistribute.unpack(paymProposalDistributePack);
        container infoLogMessages = vendPaymProposalEditDistribute.calc(distributionOrder);

        CustVendPaymProposal paymentProposal = CustVendPaymProposal::newLedgerJournal(ledgerJournalId);
        paymentProposal.unpack(paymProposalPack);
        paymentProposal.reorganize();

        return [paymentProposal.pack(), infoLogMessages];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected container calc(AscendingDescending _sortingDirection)
    {
        VendPaymModeTable           vendPaymModeTable;
        VendTrans                   vendTrans;
        boolean                     status;
        boolean                     printHeader = true;
        BankAccountTable            bankAccountTable;
        container                   infoLogMessages;

        ttsbegin;

        // selection of the proposal lines, which should be be distributed

        while select forupdate tmpPaymDistribution
        {
            if (!BankAccountTable::checkIsActive(tmpPaymDistribution.BankAccount))
            {
                status = true;
            }

            // for each bank account, if the total amount of payments exceeds the maximum amount specified then attempt to distribute
            // the payments which cause the total to exceed the maximum to other bank accounts
            if (tmpPaymDistribution.PaymAmount > tmpPaymDistribution.MaxAmount)
            {
                tmpPaymDistribution.PaymAmount = this.findProposalLinesForDistribution(_sortingDirection);
                tmpPaymDistribution.update();
            }
        }

        if (status)
        {
            throw error("@SYS21628");
        }

        // At this point the tmpPaymDistribution.PaymAmount holds the total amount of the payments that will be included for the referenced
        // bank account. The tmpProposalLineDistribute table contains information for transactions referenced by the payments that caused
        // the total amount paid for a particular bank to exceed its maximum amount. Put another way, the tmpProposalLineDistribution table
        // contains information for transactions that are referenced by payments that must be distributed to other bank accounts.

        // distribute the proposal lines, which can be distributed
        // and provide info about the proposal lines, which cannot be distributed
        while select tmpProposalLineDistribute
        {
            boolean distributed = false;

            while select forupdate tmpPaymDistribution
                order by Priority
                where tmpPaymDistribution.Priority > 0
                    && tmpPaymDistribution.PaymAmount < tmpPaymDistribution.MaxAmount
                    && tmpPaymDistribution.MaxAmount - tmpPaymDistribution.PaymAmount >= tmpProposalLineDistribute.AmountMST
                join bankAccountTable
                    where tmpPaymDistribution.BankAccount == bankAccountTable.AccountID
                        && (bankAccountTable.BankMultiCurrency == NoYes::Yes
                            || bankAccountTable.CurrencyCode == tmpProposalLineDistribute.CurrencyCode)
            {
                if (BankAccountTable::checkIsActive(tmpPaymDistribution.BankAccount))
                {
                    select firstonly RecId, PaymMode from vendPaymModeTable
                        where vendPaymModeTable.PaymentLedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(tmpPaymDistribution.BankAccount, LedgerJournalACType::Bank)
                            && vendPaymModeTable.ClassId == VendPaymModeTable::find(tmpProposalLineDistribute.PaymMode).ClassId; //Export format

                    if (vendPaymModeTable.RecId)
                    {
                        changecompany(tmpProposalLineDistribute.Company)
                        {
                            vendTrans = VendTrans::find(tmpProposalLineDistribute.RefRecId, true);
                            vendTrans.PaymMode = vendPaymModeTable.PaymMode;
                            vendTrans.PaymModeMap::modifiedPaymMode();
                            vendTrans.doUpdate();
                        }

                        tmpPaymDistribution.PaymAmount += tmpProposalLineDistribute.AmountMST;
                        tmpPaymDistribution.update();

                        distributed = true;
                        break;
                    }
                }
            }

            if (!distributed)
            {
                if (printHeader)
                {
                    infoLogMessages += "@SYS77891";
                    printHeader = false;
                }

                // build text similar to - "Account number: XXXXX, Invoice number: XXXXX, Payment amount: N,NNN.NN USD"
                vendTrans = VendTrans::findByCompany(tmpProposalLineDistribute.Company, tmpProposalLineDistribute.RefRecId);
                infoLogMessages += "@SYS1996" + ': ' + tmpProposalLineDistribute.AccountNum + ', ' +
                     "@SYS4726" + ': ' + vendTrans.Invoice + ', ' +
                     "@SYS1943" + ': ' +
                     num2str(tmpProposalLineDistribute.AmountCur,-1,-1,-1,-1) +
                     ' ' + tmpProposalLineDistribute.CurrencyCode;
            }
        }

        ttscommit;

        return infoLogMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriority</Name>
				<Source><![CDATA[
    public void checkPriority()
    {
        boolean   wrongPriority = false;
        int       i;
        recId     recId;
        Priority  priority;
        Priority  oldPriority;

        if (tmpPaymDistribution.Priority > 0)
        {
            for (i = 1; i <= numOfElements; i++)
            {
                [recId,
                 priority] = priorities[i];
                if (recId == tmpPaymDistribution.RecId)
                {
                    oldPriority =  priority;
                }
                else if (priority == tmpPaymDistribution.Priority)
                {
                    wrongPriority = true;
                }
            }
            if (wrongPriority)
            {
                error(strfmt("@SYS77890", tmpPaymDistribution.Priority));
                tmpPaymDistribution.Priority = oldPriority;

                priorities[i] = [tmpPaymDistribution.RecId,
                                 tmpPaymDistribution.Priority];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPriority</Name>
				<Source><![CDATA[
    public void fillPriority()
    {
        int       i;
        recId     recId;

        for (i=1; i <= numOfElements; i++)
        {
            [recId] = priorities[i];
            if (recId == tmpPaymDistribution.RecId)
            {
                priorities[i] = [tmpPaymDistribution.RecId,
                                 tmpPaymDistribution.Priority];
                break;
            }
        }
        if (i > numOfElements)
        {
            numOfElements += 1;
            priorities[numOfElements] = [tmpPaymDistribution.RecId,
                                         tmpPaymDistribution.Priority];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpPaymDistribution</Name>
				<Source><![CDATA[
    public void fillTmpPaymDistribution()
    {
        BankAccountTable   bankAccountTable;
        VendPaymModeTable  vendPaymModeTable;
        MainAccount        mainAccount;
       
       if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
       {
           MainAccountEventArgs args = MainAccountEventArgs::construct();
           args.parmBalanceLedgerRecId(Ledger::current());

           MainAccount::updateBalancesWithArgs(args);
       }
       else
       {
           MainAccount::updateBalances();
       }

        // This process will populate the TmpPaymDistribution table with a record for each bank account that is referenced by a
        // method of payment. The PaymAmount field for a particular bank account record is calculated as the total of all
        // payments that have a method of payment associated with the referenced bank account.

        while select AccountID, LedgerDimension from bankAccountTable
            join  PaymMode, PaymentLedgerDimension from vendPaymModeTable
            where vendPaymModeTable.AccountType == LedgerJournalACType::Bank
        {
            if (vendPaymModeTable.PaymentLedgerDimension  == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(bankAccountTable.AccountID, LedgerJournalACType::Bank))
            {
                if (TmpPaymDistribution::exist(bankAccountTable.AccountID, tmpPaymDistribution))
                {
                    tmpPaymDistribution.PaymAmount += this.paymAmountForPaymMode(vendPaymModeTable.PaymMode);
                    tmpPaymDistribution.update();
                }
                else
                {
                    tmpPaymDistribution.clear();
                    tmpPaymDistribution.BankAccount = bankAccountTable.AccountID;
                    tmpPaymDistribution.BankBalance = BankAccountTrans::balanceMST(bankAccountTable.AccountID);
                    tmpPaymDistribution.LedgerDimension = bankAccountTable.LedgerDimension;
                    mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(bankAccountTable.LedgerDimension);
                    tmpPaymDistribution.LedgerBalance = mainAccount.calculateBalance(dateNull(), dateMax(), FiscalPeriodType::Operating);
                    tmpPaymDistribution.PaymAmount = this.paymAmountForPaymMode(vendPaymModeTable.PaymMode);
                    if (tmpPaymDistribution.LedgerBalance > 0)
                    {
                        tmpPaymDistribution.MaxAmount = tmpPaymDistribution.LedgerBalance;
                    }
                    else
                    {
                        tmpPaymDistribution.MaxAmount = 0;
                    }
                    tmpPaymDistribution.Priority = 0;
                    tmpPaymDistribution.insert();

                    this.fillPriority();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProposalLinesForDistribution</Name>
				<Source><![CDATA[
    protected AmountMST findProposalLinesForDistribution(AscendingDescending _sortingDirection)
    {
        CustVendPaymProposalLine    custVendPaymProposalLine;
        SpecTrans                   specTrans;
        VendTransOpen               vendTransOpenFieldList;
        VendTrans                   vendTransFieldList;
        VendPaymModeTable           vendPaymModeTable;
        VendTable                   vendTable;
        CompanyId                   journalCompany = curext();
        TmpCustVendTransOpen        tmpProposalLine;
        AmountCur                   paymentAmountPaymCur;
        AmountMST                   paymentAmountJournalMST;
        AmountMST                   totalpaymentAmountJournalMST;
        AmountMST                   lastTotalpaymentAmountJournalMST;
        container                   companies;
        CurrencyExchangeHelper      currencyExchangeHelper;
        #ISOCountryRegionCodes

        // the payment proposal may include transactions from other companies in the centralized payments shared service boundary
        companies = CustVendOpenTransManager::findSharedServiceCompanies(journalCompany);

        while select custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId == ledgerJournalId
        {
            // populate the TmpCustVendTransOpen (named tmpProposalLine) table with the transactions referenced by each proposal line in
            // the current journal that has a method of payment associated to a bank account
            while select crossCompany:companies specTrans
                where specTrans.SpecCompany == custVendPaymProposalLine.company()
                    && specTrans.SpecRecId == custVendPaymProposalLine.RecId
                    && specTrans.SpecTableId == custVendPaymProposalLine.TableId
                join RecId from vendTransOpenFieldList
                    where vendTransOpenFieldList.DataAreaId == specTrans.RefCompany
                        && specTrans.RefTableId == vendTransOpenFieldList.TableId
                        && vendTransOpenFieldList.RecId == specTrans.RefRecId
                join AccountNum, PaymMode, CurrencyCode, RecId from vendTransFieldList
                    where vendTransFieldList.RecId == vendTransOpenFieldList.RefRecId
                        && vendTransFieldList.AccountNum == vendTransOpenFieldList.AccountNum
            {
                vendPaymModeTable = VendPaymModeTable::find(vendTransFieldList.PaymMode);
                if (vendPaymModeTable.AccountType == LedgerJournalACType::Bank
                    && vendPaymModeTable.PaymentLedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(tmpPaymDistribution.BankAccount, LedgerJournalACType::Bank))
                {
                    // calculate the value of the transaction in the payment currency
                    currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                        Ledger::primaryLedger(CompanyInfo::findDataArea(custVendPaymProposalLine.AccountNumCompany).RecId),
                        custVendPaymProposalLine.PaymDate);

                    paymentAmountPaymCur = currencyExchangeHelper.calculateAccountingToTransaction(custVendPaymProposalLine.CurrencyCode, custVendPaymProposalLine.paymTransactionAmountMST(specTrans), false);

                    // convert the payment currency value to MST of the current/journal company
                    currencyExchangeHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(journalCompany).RecId));
                    paymentAmountJournalMST = -currencyExchangeHelper.calculateTransactionToAccounting(custVendPaymProposalLine.CurrencyCode, paymentAmountPaymCur, true);

                    tmpProposalLine.clear();
                    tmpProposalLine.Company      = vendTransFieldList.company();
                    tmpProposalLine.RefRecId     = vendTransFieldList.RecId;
                    tmpProposalLine.AccountNum   = vendTransFieldList.AccountNum;
                    tmpProposalLine.AmountMST    = paymentAmountJournalMST; // the transaction value in current/journal company MST
                    tmpProposalLine.AmountCur    = paymentAmountPaymCur;    // the transaction value in the currency of the payment
                    tmpProposalLine.CurrencyCode = custVendPaymProposalLine.CurrencyCode;
                    tmpProposalLine.TransDate    = custVendPaymProposalLine.PaymDate;
                    tmpProposalLine.PaymMode     = vendTransFieldList.PaymMode;
                    tmpProposalLine.TmpRecId     = vendTransOpenFieldList.RecId;

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
                    {
                        changecompany(vendTransFieldList.company())
                        {
                            vendTable = VendTable::find(vendTransFieldList.AccountNum);
                            if (vendTable.DefaultDimension)
                            {
                                tmpProposalLine.DefaultDimension = vendTable.DefaultDimension;
                            }
                            else
                            {
                                changecompany(journalCompany)
                                {
                                    tmpProposalLine.DefaultDimension = LedgerJournalTable::find(ledgerJournalId).DefaultDimension;
                                }
                            }

                            tmpProposalLine.DefaultDimension = VendPaymModeTable::setDefaultDimension(
                                vendTransFieldList.PaymMode,
                                vendTransFieldList.DefaultDimension,
                                tmpProposalLine.DefaultDimension);
                        }
                    }

                    tmpProposalLine.insert();
                }
            }
        }

        // Each transaction referenced by payments that put the total amount for the current bank account over its MaxAmount
        // is inserted into the tmpProposalLineDistribute temp table.

        if (_sortingDirection == AscendingDescending::Ascending)
        {
            while select tmpProposalLine
                order by AmountMST asc
            {
                totalpaymentAmountJournalMST += tmpProposalLine.AmountMST;
                if (totalpaymentAmountJournalMST > tmpPaymDistribution.MaxAmount)
                {
                    tmpProposalLineDistribute.data(tmpProposalLine);
                    tmpProposalLineDistribute.insert();
                    totalpaymentAmountJournalMST -= tmpProposalLine.AmountMST;
                }
                else
                {
                    lastTotalpaymentAmountJournalMST = totalpaymentAmountJournalMST;
                }
            }
        }
        else
        {
            while select tmpProposalLine
                  order by AmountMST desc
            {
                totalpaymentAmountJournalMST += tmpProposalLine.AmountMST;
                if (totalpaymentAmountJournalMST > tmpPaymDistribution.MaxAmount)
                {
                    tmpProposalLineDistribute.data(tmpProposalLine);
                    tmpProposalLineDistribute.insert();
                    totalpaymentAmountJournalMST -= tmpProposalLine.AmountMST;
                }
                else
                {
                    lastTotalpaymentAmountJournalMST = totalpaymentAmountJournalMST;
                }
            }
        }

        // return the amount that can be distributed
        return lastTotalpaymentAmountJournalMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TmpPaymDistribution  _tmpPaymDistribution)
    {
        tmpPaymDistribution = _tmpPaymDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymAmountForPaymMode</Name>
				<Source><![CDATA[
    protected AmountMST paymAmountForPaymMode(PaymMode _paymMode)
    {
        CustVendPaymProposalLine    custVendPaymProposalLine;
        AmountMST                   totalPaymentAmountMST;
        AmountCur                   paymAmountCur;
        CurrencyExchangeHelper      currencyExchangeHelper;

        currencyExchangeHelper = CurrencyExchangeHelper::construct();

        while select custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId == ledgerJournalId
               && custVendPaymProposalLine.PaymMode == _paymMode
        {
            paymAmountCur = custVendPaymProposalLine.paymAmountCur();

            currencyExchangeHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(custVendPaymProposalLine.AccountNumCompany).RecId));
            // The payment currency in the payment company is the same currency as the when viewed from the ledger/current company thus no exchange needed
            // to move from payment company to journal/current company. Convert the value directly to the MST currency of the journal/current company.
            currencyExchangeHelper.parmExchangeDate(custVendPaymProposalLine.PaymDate);

            totalPaymentAmountMST -= currencyExchangeHelper.calculateTransactionToAccounting(custVendPaymProposalLine.CurrencyCode, paymAmountCur, true);
        }
        return totalPaymentAmountMST;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>