<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransactionsController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller class for <c>CustVendBalanaceInquiry_CN</c> report.
/// </summary>
class CustVendTransactionsController_CN extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        Query                  query;
        TransDate              localFromDate, localToDate;
        QueryBuildDataSource   qdbs;
        VendBalanceInquiry_CN  vendBalanceInquiry_CN;
        CustBalanceInquiry_CN  custBalanceInquiry_CN;
        AccountNum             accountNum;

        if (this.parmArgs().caller() is VendBalanceInquiry_CN)
        {
            vendBalanceInquiry_CN = this.parmArgs().caller();
            localFromDate         = vendBalanceInquiry_CN.fromDate();
            localToDate           = vendBalanceInquiry_CN.toDate();
            accountNum            = this.parmArgs().parm();
            query                 = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

            qdbs = query.dataSourceTable(tableNum(VendTable));
            SysQuery::findOrCreateRange(qdbs, fieldNum(VendTable, AccountNum)).value(SysQuery::value(accountNum));
            qdbs = query.dataSourceTable(tableNum(VendTrans));
            SysQuery::findOrCreateRange(qdbs, fieldNum(VendTrans, TransDate)).value(SysQuery::range(localFromDate, localToDate));
        }
        else if (this.parmArgs().caller() is CustBalanceInquiry_CN)
        {
            custBalanceInquiry_CN = this.parmArgs().caller();
            localFromDate         = custBalanceInquiry_CN.fromDate();
            localToDate           = custBalanceInquiry_CN.toDate();
            accountNum            = this.parmArgs().parm();
            query                 = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

            qdbs = query.dataSourceTable(tableNum(CustTable));
            SysQuery::findOrCreateRange(qdbs, fieldNum(CustTable, AccountNum)).value(SysQuery::value(accountNum));
            qdbs = query.dataSourceTable(tableNum(CustTrans));
            SysQuery::findOrCreateRange(qdbs, fieldNum(CustTrans, TransDate)).value(SysQuery::range(localFromDate, localToDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00016, funcName());

        SrsReportRunController controller = new CustVendTransactionsController_CN();
        controller.parmArgs(_args);

        if (_args.caller() is VendBalanceInquiry_CN)
        {
            controller.parmReportName(ssrsReportStr(VendBalanceInquiry_CN, Report));
        }
        else if (_args.caller() is CustBalanceInquiry_CN)
        {
            controller.parmReportName(ssrsReportStr(CustBalanceInquiry_CN, Report));
        }

        controller.parmShowDialog(true);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>