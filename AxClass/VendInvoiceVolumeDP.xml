<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceVolumeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceVolumeDP</c> class retrieves the records that are required for the
/// <c>VendInvoiceVolume</c> report.
/// </summary>
[SRSReportQueryAttribute(querystr(VendInvoiceVolume)), SRSReportParameterAttribute(classstr(VendInvoiceVolumeContract))]
public class VendInvoiceVolumeDP extends SrsReportDataProviderPreProcessTempDB
{
    VendInvoiceVolumeTmp vendInvoiceVolumeTmp;
    VendTable vendTable;
    TmpCustVendVolume tmpCustVendVolume;
    TmpCustVendVolume tmpCustVendVolumeQR;
    Query query;
    AccountVATNum accountVATNum;
    AccountVATNum reportBy;
    FromDate fromDate;
    ToDate toDate;
    AmountMST minAmount;
    boolean separateTaxAmount;

    str rangeAccount;
    str rangeVATNum;
    str rangeCountryRegion;
    str rangeCountryRegionType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount given in the dialog.
    /// </summary>
    /// <returns>
    /// The minimum amount parameter value.
    /// </returns>
    private str amountRange()
    {
        return strfmt('%1..', queryValue(minAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceVolumetmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>VendInvoiceVolumetmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The temporary <c>VendInvoiceVolumeTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendInvoiceVolumeTmp))]
    public VendInvoiceVolumeTmp getVendInvoiceVolumetmp()
    {
        select vendInvoiceVolumeTmp;
        return vendInvoiceVolumeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendCalcVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object that uses data according to the value passed in the <c>groupby</c> parameter.
    /// </summary>
    /// <returns>
    /// An object of the <c>CustVendCalcVolume</c> class.
    /// </returns>
    private CustVendCalcVolume initCustVendCalcVolume()
    {
        CustVendCalcVolume vendCalc = this.createCustVendCalcVolume();
        str dateRange = SysQuery::range(fromDate, toDate);

        vendCalc.vendInvoiceQuery(dateRange, this.rangeCountryRegionType(), this.rangeCountryRegion(), this.rangeAccount(), this.rangeVATNum());

        return vendCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustVendCalcVolume</Name>
				<Source><![CDATA[
    protected CustVendCalcVolume createCustVendCalcVolume()
    {
        return CustVendCalcVolume::construct(reportBy,separateTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendInvoiceVolumeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records into the temporary table.
    /// </summary>
    private void insertVendInvoiceVolumeTmp()
    {
        this.initializeVendInvoiceVolumeTmp();
        vendInvoiceVolumeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendInvoiceVolumeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendInvoiceVolumeTmp</c> buffer for the report.
    /// </summary>
    [Wrappable(true)]
    protected final void initializeVendInvoiceVolumeTmp()
    {
        vendInvoiceVolumeTmp.vatNum = tmpCustVendVolume.vatNum;
        vendInvoiceVolumeTmp.EnterpriseNumber = tmpCustVendVolume.EnterpriseNumber;
        vendInvoiceVolumeTmp.Name = tmpCustVendVolume.Name;
        vendInvoiceVolumeTmp.AmountMST = tmpCustVendVolume.AmountMST;
        vendInvoiceVolumeTmp.AccountNum = vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun_VendInvoiceVolume;
        CustVendCalcVolume vendCalc;
        VendInvoiceVolumeContract contract = this.parmDataContract() as VendInvoiceVolumeContract;

        this.setUserConnection(vendInvoiceVolumeTmp);
        
        reportBy = contract.parmGroupingBy();
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        minAmount = contract.parmMinimumAmount();
        separateTaxAmount = contract.parmSeparateTaxAmount();

        vendCalc = this.initCustVendCalcVolume();

        rangeAccount = '';
        rangeCountryRegion = '';
        rangeCountryRegionType = '';

        tmpCustVendVolumeQR = vendCalc.accumulateVolume();

        this.updateQuery();

        queryRun_VendInvoiceVolume = new QueryRun(query);
        queryRun_VendInvoiceVolume.setCursor(this.tmpCustVendVolume());

        while (queryRun_VendInvoiceVolume.next())
        {
            vendTable = queryRun_VendInvoiceVolume.get(tablenum(VendTable));
            tmpCustVendVolume = queryRun_VendInvoiceVolume.get(tablenum(TmpCustVendVolume));

            this.insertVendInvoiceVolumeTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the account number as the range.
    /// </summary>
    /// <param name="_rangeAccount">
    /// The <paramref name="_rangeAccout" /> parameter is initialized.
    /// </param>
    /// <returns>
    /// An account number as a range.
    /// </returns>
    private str rangeAccount(str _rangeAccount = rangeAccount)
    {
        rangeAccount = _rangeAccount;
        return rangeAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the country region to the range.
    /// </summary>
    /// <param name="_rangeCountryRegion">
    /// The <paramref name="_rangeCountryRegion" /> parameter is initialized.
    /// </param>
    /// <returns>
    /// The country region as a range.
    /// </returns>
    private str rangeCountryRegion(str _rangeCountryRegion = rangeCountryRegion)
    {
        rangeCountryRegion = _rangeCountryRegion;
        return rangeCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the country region type as the range.
    /// </summary>
    /// <param name="_rangeCountryRegionType">
    /// The <paramref name="_rangeCountryRegionType" /> parameter is initialized.
    /// </param>
    /// <returns>
    /// The country region type as a range.
    /// </returns>
    private str rangeCountryRegionType(str _rangeCountryRegionType = rangeCountryRegionType)
    {
        rangeCountryRegionType = _rangeCountryRegionType;
        return rangeCountryRegionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VATNum</c> type as a range.
    /// </summary>
    /// <param name="_rangeVATNum">
    /// The <paramref name="_rangeVATNum" /> parameter is initialized.
    /// </param>
    /// <returns>
    /// The <c>VATnum</c> type as a range.
    /// </returns>
    private str rangeVATNum(str _rangeVATNum = rangeVATNum)
    {
        rangeVATNum = _rangeVATNum;
        return rangeVATNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCustVendVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the temporary <c>TmpCustVendVolume</c> table.
    /// </summary>
    /// <returns>
    /// The temporary <c>tmpCustVendVolume</c> table.
    /// </returns>
    private TmpCustVendVolume tmpCustVendVolume()
    {
        return tmpCustVendVolumeQR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds values to ranges as given in the dialog.
    /// </summary>
    private void updateQuery()
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryRun queryRun = new QueryRun(this.parmQuery());
        QueryBuildRange queryBuildRange;
        int currentRange;
        int currentDataSource;

        query = queryRun.query();

        for (currentDatasource = query.dataSourceCount(); currentDatasource > 0; currentDatasource--)
        {
            queryBuildDataSource = query.dataSourceNo(currentDatasource);

            for (currentRange = queryBuildDataSource.rangeCount(); currentRange > 0; currentRange--)
            {
                queryBuildRange = queryBuildDataSource.range(currentRange);

                if (tableid2name(queryBuildDataSource.table()) == tablestr(VendTable) && fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(VendTable, AccountNum))
                {
                    rangeAccount = queryBuildRange.value();
                }

                if (tableid2name(queryBuildDataSource.table()) == tablestr(VendTable) && fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(VendTable, vatNum))
                {
                    rangeVATNum = queryBuildRange.value();
                }

                if (tableid2name(queryBuildDataSource.table()) == tablestr(TmpCustVendVolume))
                {
                    if (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(TmpCustVendVolume, AmountMST))
                    {
                        queryBuildRange.value(this.amountRange());
                    }

                    if (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(TmpCustVendVolume, CountryRegionId))
                    {
                        rangeCountryRegion = queryBuildRange.value();
                    }

                    if (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(TmpCustVendVolume, CountryRegionType))
                    {
                        rangeCountryRegionType = queryBuildRange.value();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();
        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>