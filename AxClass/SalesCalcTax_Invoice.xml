<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcTax_Invoice
extends SalesCalcTax
{
    CustInvoiceJour custInvoiceJour;
    CustInvoiceTrans custInvoiceTrans;
    SalesTable salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustInvoiceJour</Name>
				<Source><![CDATA[
    internal CustInvoiceJour getCustInvoiceJour()
    {
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return custInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(custInvoiceJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(custInvoiceJour.ExchRateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <returns>The reporting currency exchange rate.</returns>
    internal CustExchRate reportingCurrencyExchangeRate()
    {
        CustExchRate reportingCurrencyExchRate = custInvoiceJour.SalesId ? custInvoiceJour.salesTable().ReportingCurrencyFixedExchRate : 0.0;
        if (EnableReportingCurrencyExchRateInSOInvoice_WFlight::instance().isEnabled()
            && SalesParameters::find().DateOfExchRate_W != DateOfExchRate_W::PostingDate
            && Ledger::isReportingCurrencyDefined())
        {
            reportingCurrencyExchRate = custInvoiceJour.ReportingCurrencyExchangeRate ? custInvoiceJour.ReportingCurrencyExchangeRate : reportingCurrencyExchRate;
        }

        if (CustInvoiceTaxCalUseReporCurrFromSettleFlight::instance().isEnabled() &&
                custInvoiceJour.salesTable().SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            reportingCurrencyExchRate = custInvoiceJour.ReportingCurrencyExchangeRate;
        }

        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        select nofetch forupdate custInvoiceTrans
            index hint InvoiceIdx
            where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                  custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                  custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the sales document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in the item price; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return custInvoiceJour.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (salesLine)
            return salesLine.DefaultDimension;

        return custInvoiceJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(CustInvoiceJour _custInvoiceJour)
    {;
        super(_custInvoiceJour);

        custInvoiceJour = _custInvoiceJour;
        salesTable = custInvoiceJour.salesTable();
        update = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next custInvoiceTrans;

        this.getSalesLine();
        this.initCursorMarkup(custInvoiceTrans.TableId, custInvoiceTrans.RecId);

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupRecId</Name>
				<Source><![CDATA[
    recId salesMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupTableId</Name>
				<Source><![CDATA[
    tableId salesMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    recId salesTableRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableTableID</Name>
				<Source><![CDATA[
    tableId salesTableTableID()
    {
        return salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void setTax(TaxWriteCode taxWriteCode,
                 AmountCur amountCur)
    {;
        custInvoiceTrans.TaxWriteCode = taxWriteCode;
        custInvoiceTrans.TaxAmount = amountCur;
        custInvoiceTrans.TaxAmountMST = custInvoiceJour.amountMST(amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return custInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        return custInvoiceTrans.lineAmountInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty transQty()
    {
        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId transTransId()
    {
        return custInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return custInvoiceJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    public boolean useAndConsumption_BR()
    {
        return custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the sales order taxes.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The voucher for the document.
    /// </param>
    /// <param name="_post">
    /// True if we are posting tax; otherwise, false.
    /// </param>
    public void post(LedgerVoucher _ledgerVoucher, NoYes _post = NoYes::Yes)
    {
        super(_ledgerVoucher, _post);

        // Deletes <c>TaxUncommitted</c> after posting the invoice.
        if (TaxIntegrationCacheCalculationResultFlight::instance().isEnabled()
            && Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            TaxUncommitted::deleteForDocumentHeader(this.salesTableTableID(), this.salesTableRecID(), false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>