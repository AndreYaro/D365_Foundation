<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoicePolicyValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendInvoicePolicyValidation
{
    VendInvoiceInfoTable vendInvoiceInfoTable;
    boolean violationExists;
    boolean recordViolation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkVendorInvoicePolicyValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an invoice against the vendor invoice policy before posting.
    /// </summary>
    /// <returns>
    /// true if the invoice passes the vendor invoice policy checks; otherwise, false.
    /// </returns>
    public boolean checkVendorInvoicePolicyValidation()
    {
        SysPolicyRuleType vendPolicyRuleType;
        Array policyRules;
        int64 orgId[1];
        SysPolicyType sysPolicyType = SysPolicyType::findByEnum(SysPolicyTypeEnum::VendInvoicesPolicy);

        orgId[1] = vendInvoiceInfoTable.companyInfo().RecId;

        while select RecId from vendPolicyRuleType
            where vendPolicyRuleType.PolicyType == sysPolicyType.RecId
        {
            policyRules = SysPolicies::getPolicyRuleIDs(orgId, vendPolicyRuleType.RecId, SysPolicyTypeEnum::VendInvoicesPolicy);

            if (policyRules || policyRules.lastIndex() > 0)
            {
                this.evaluateVendInvoicePolicies(policyRules);
            }
        }

        return violationExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateVendInvoicePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates all policies against the vendor invoice.
    /// </summary>
    /// <param name="policyRules">
    /// An array that contains the <c>RecId</c> value from the <c>SysPolicyRule</c> table.
    /// </param>
    private void evaluateVendInvoicePolicies(Array policyRules)
    {
        SysPolicySourceDocumentRule policyRule;
        SysPolicySourceDocumentRuleType policyRuleType;
        SysPolicyTypeSourceDocumentQuery policyTypeQuery;
        tableId sourceRelationType;
        recId policyRuleRecId;

        for (int ruleIndex = 1; ruleIndex <= policyRules.lastIndex(); ruleIndex++)
        {
            policyRuleRecId = policyRules.value(ruleIndex);
            policyRule = SysPolicySourceDocumentRule::find(policyRuleRecId);
            policyRuleType = SysPolicySourceDocumentRuleType::find(policyRule.PolicyRuleType);
            policyTypeQuery = SysPolicyTypeSourceDocumentQuery::find(policyRuleType.PolicyTypeSourceDocumentQuery);

            sourceRelationType = tableName2id(policyTypeQuery.SourceRelationType);

            switch (sourceRelationType)
            {
                case tablenum(VendInvoiceInfoTable):
                    this.executeVendInvoiceHeaderPolicy(policyRuleRecId, policyRule.QueryPacked);
                    break;

                case tablenum(VendInvoiceInfoLine):
                    this.executeVendInvoiceLinePolicy(policyRuleRecId, policyRule.QueryPacked);
                    break;

                case tablenum(MarkupTable):
                    this.executeVendInvoiceMiscChargePolicy(policyRuleRecId, policyRule.QueryPacked);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeVendInvoiceHeaderPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the packed query to perform header level validation on vendor invoices.
    /// </summary>
    /// <param name="_policyRuleRecId">
    /// The record ID of the <c>SysPolicyRule</c> table to be executed.
    /// </param>
    /// <param name="_packedQuery">
    /// The instance of packed query to be executed.
    /// </param>
    private void executeVendInvoiceHeaderPolicy(RefRecId _policyRuleRecId, container _packedQuery)
    {
        QueryRun queryRun;
        QueryBuildRange rangeInvoiceRecId;
        QueryBuildDataSource qbdVendInvoice;
        Query query = new Query(_packedQuery);

        if (query)
        {
            qbdVendInvoice = query.dataSourceTable(tablenum(VendInvoiceInfoTable));

            qbdVendInvoice.addRange(fieldnum(VendInvoiceInfoTable, RecId));
            rangeInvoiceRecId = qbdVendInvoice.findRange(fieldnum(VendInvoiceInfoTable, RecId));
            rangeInvoiceRecId.value(int642str(vendInvoiceInfoTable.RecId));

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                violationExists = true;

                if (recordViolation)
                {
                    this.recordVendInvoiceViolations(vendInvoiceInfoTable.SourceDocumentHeader, _policyRuleRecId , false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeVendInvoiceLinePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the packed query to perform line level validation on vendor invoices.
    /// </summary>
    /// <param name="_policyRuleRecId">
    /// The record ID of the <c>SysPolicyRule</c> table.
    /// </param>
    /// <param name="_packedQuery">
    /// The instance of packed query to be executed.
    /// </param>
    private void executeVendInvoiceLinePolicy(RefRecId _policyRuleRecId, container _packedQuery)
    {
        VendInvoiceInfoLine vendInvoiceLine;
        QueryRun queryRun;
        QueryBuildRange rangeInvoiceLineTableRefId;
        QueryBuildRange rangeInvoiceLineParmId;
        Query query = new Query(_packedQuery);
        QueryBuildDataSource qbdVendInvoiceLine = query.dataSourceTable(tablenum(VendInvoiceInfoLine));

        qbdVendInvoiceLine.addRange(fieldnum(VendInvoiceInfoLine, TableRefId));
        rangeInvoiceLineTableRefId = qbdVendInvoiceLine.findRange(fieldnum(VendInvoiceInfoLine, TableRefId));
        rangeInvoiceLineTableRefId.value(vendInvoiceInfoTable.TableRefId);

        qbdVendInvoiceLine.addRange(fieldnum(VendInvoiceInfoLine, ParmId));
        rangeInvoiceLineParmId = qbdVendInvoiceLine.findRange(fieldnum(VendInvoiceInfoLine, ParmId));
        rangeInvoiceLineParmId.value(vendInvoiceInfoTable.ParmId);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            violationExists = true;
            vendInvoiceLine = queryRun.get(tablenum(VendInvoiceInfoLine));

            if (recordViolation)
            {
                this.recordVendInvoiceViolations(vendInvoiceLine.SourceDocumentLine, _policyRuleRecId , true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeVendInvoiceMiscChargePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the packed query to check if the invoice exceeds the miscellaneous charges limit.
    /// </summary>
    /// <param name="_policyRuleRecId">
    /// The record ID of record in the <c>SysPolicyRule</c> table.
    /// </param>
    /// <param name="_packedQuery">
    /// The instance of packed query to be executed.
    /// </param>
    private void executeVendInvoiceMiscChargePolicy(RefRecId _policyRuleRecId, container _packedQuery)
    {
        Query query = new Query(_packedQuery);
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;
        MarkupCode markupCode;
        MarkupTmpMaxAmountValidation markupTmpMaxAmountValidation;

        if (query)
        {
            qbds = query.dataSourceTable(tablenum(MarkupTable));

            if (qbds)
            {
                qbr = qbds.findRange(fieldnum(MarkupTable, MarkupCode));

                if (qbr)
                {
                    markupCode = qbr.value();
                }
            }

            if (!markupTmpMaxAmountValidation.validateInvoiceMaxMiscChargesValue(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId, markupTmpMaxAmountValidation, markupCode, true))
            {
                violationExists = true;
                if (recordViolation)
                {
                    this.recordVendInvoiceViolations(vendInvoiceInfoTable.SourceDocumentHeader, _policyRuleRecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        recordViolation = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordViolation</Name>
				<Source><![CDATA[
    public boolean parmRecordViolation(boolean _recordViolation = recordViolation)
    {
        if (!prmisdefault(_recordViolation))
        {
            recordViolation = _recordViolation;
        }

        return _recordViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable parmVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable = vendInvoiceInfoTable)
    {
        if (!prmisdefault(_vendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _vendInvoiceInfoTable;
        }

        return _vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordVendInvoiceViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records the policy violation against the vendor invoice.
    /// </summary>
    /// <param name="_sourceDocumentId">
    /// The source document ID of the vendor invoice.
    /// </param>
    /// <param name="_policyRuleId">
    /// The record ID of the <c>SysPolicyRule</c> table.
    /// </param>
    /// <param name="_isForSourceDocumentLine">
    /// A Boolean value that indicates whether the record represents the vendor invoice line.
    /// </param>
    private void recordVendInvoiceViolations(RefRecId _sourceDocumentId, RefRecId _policyRuleId, boolean _isForSourceDocumentLine = NoYes::No)
    {
        SysPolicySourceDocumentRuleViolation policyViolations;

        if (_isForSourceDocumentLine)
        {
            delete_from policyViolations
              where policyViolations.SourceDocumentLine == _sourceDocumentId &&
                policyViolations.PolicySourceDocumentRule == _policyRuleId;

            policyViolations.SourceDocumentLine = _sourceDocumentId;
        }
        else
        {
            delete_from policyViolations
              where policyViolations.SourceDocumentHeader == _sourceDocumentId &&
                policyViolations.PolicySourceDocumentRule == _policyRuleId;

            policyViolations.SourceDocumentHeader = _sourceDocumentId;
        }

        policyViolations.PolicySourceDocumentRule = _policyRuleId;
        policyViolations.IsForSourceDocumentLine = _isForSourceDocumentLine;
        policyViolations.LastEvaluationDate = DateTimeUtil::utcNow();

        policyViolations.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyViolationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the policy violation message for the vendor invoice at the line or header level.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineRecId">
    /// The record ID of the <c>VendInvoiceInfoLine</c> table.
    /// </param>
    /// <param name="_vendInvoiceInfoTableRecId">
    /// The record ID of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <returns>
    /// The policy violation message.
    /// </returns>
    public static SysPolicyDescription policyViolationMessage(RefRecId _vendInvoiceInfoLineRecId, RefRecId _vendInvoiceInfoTableRecId)
    {
        SysPolicySourceDocumentRule sysPolicySourceDocumentRule;
        SysPolicySourceDocumentRuleViolation sysPolicySourceDocumentRuleViolation;
        VendInvoiceInfoLine vendInvoiceInfoLineLocal;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        RefRecId sysPolicySourceDocumentRuleId;

        if (VendInvoicePolicyValidation::useInvoiceMatching(_vendInvoiceInfoLineRecId, _vendInvoiceInfoTableRecId))
        {
            select RecId from sysPolicySourceDocumentRule
                join PolicySourceDocumentRule, SourceDocumentLine from sysPolicySourceDocumentRuleViolation
                    where sysPolicySourceDocumentRule.RecId == sysPolicySourceDocumentRuleViolation.PolicySourceDocumentRule
                        join RecId, SourceDocumentLine from vendInvoiceInfoLineLocal
                            where vendInvoiceInfoLineLocal.SourceDocumentLine == sysPolicySourceDocumentRuleViolation.SourceDocumentLine
                                && vendInvoiceInfoLineLocal.RecId == _vendInvoiceInfoLineRecId;

            sysPolicySourceDocumentRuleId = sysPolicySourceDocumentRule.RecId;

            select RecId from sysPolicySourceDocumentRule
                join PolicySourceDocumentRule, SourceDocumentHeader from sysPolicySourceDocumentRuleViolation
                    where sysPolicySourceDocumentRule.RecId == sysPolicySourceDocumentRuleViolation.PolicySourceDocumentRule
                        join RecId, SourceDocumentHeader from vendInvoiceInfoTableLocal
                            where vendInvoiceInfoTableLocal.SourceDocumentHeader == sysPolicySourceDocumentRuleViolation.SourceDocumentHeader
                                && vendInvoiceInfoTableLocal.RecId == _vendInvoiceInfoTableRecId;

            if (sysPolicySourceDocumentRule.RecId)
            {
                sysPolicySourceDocumentRuleId = sysPolicySourceDocumentRule.RecId;
            }
        }

        if (sysPolicySourceDocumentRuleId)
        {
            return "@SYS329341";
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInvoiceMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoice matching is enabled.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineRecId">
    /// The record ID of the <c>VendInvoiceInfoLine</c> table.
    /// </param>
    /// <param name="_vendInvoiceInfoTableRecId">
    /// The record ID of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <returns>
    /// true if invoice matching is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Additional parameters provided for extensibility.
    /// </remarks>
    protected static boolean useInvoiceMatching(RefRecId _vendInvoiceInfoLineRecId, RefRecId _vendInvoiceInfoTableRecId)
    {
        VendParameters vendParameters = VendParameters::find();
        return (vendParameters.editUseInvoiceMatching() == NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>