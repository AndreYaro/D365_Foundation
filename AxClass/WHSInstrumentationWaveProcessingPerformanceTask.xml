<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationWaveProcessingPerformanceTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements instrumentation for Wave processing task.
/// </summary>
internal class WHSInstrumentationWaveProcessingPerformanceTask extends WHSInstrumentationPerformanceTask
{
    private const str ActionRunWaveStep = 'runWaveStep';
    private const str ActionExecuteWaveSteps = 'executeWaveSteps';
    private const str ActionDetermineCanRunInBatch = 'canRunInBatch';
    private const str ActionScheduleBatch = 'scheduleBatch';
    private const str ActionScheduleBatchHeader = 'scheduleBatchHeader';

    private const str ParameterNameWaveStep = 'waveStep';
    private const str ParameterNameCustom = 'custom';
    private const str ParameterNameStatus = 'status';
    private const str ParameterNameBatchId = 'batchId';

    private Map initialPrameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(str _action, Map _parameters)
    {
        initialPrameters = _parameters;
        super('waveProcessing', _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTaskStart</Name>
				<Source><![CDATA[
    protected void preTaskStart()
    {
        if (WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameters(initialPrameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaskStart</Name>
				<Source><![CDATA[
    protected void postTaskStart() 
    {
        if (!WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameters(initialPrameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveStepCustom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on a custom wave step
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_waveStepName">Name of the custom wave step.</param>
    /// <returns>The new instrumentation class instance.</returns>
	public static WHSInstrumentationWaveProcessingPerformanceTask newWaveStepCustom(
		WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
		str				   _waveStepName)
    {
        Map parameters = new Map(Types::String, Types::String);
        WHSInstrumentationWaveProcessingPerformanceTask::initParameters(parameters, _waveTable, _waveExecutionId, _waveStepName, true);
        return new WHSInstrumentationWaveProcessingPerformanceTask(ActionRunWaveStep, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveStepBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on one of the base wave steps
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_waveStepName">Name of the wave step.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newWaveStepBase(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str				   _waveStepName)
    {
        Map parameters = new Map(Types::String, Types::String);
        WHSInstrumentationWaveProcessingPerformanceTask::initParameters(parameters, _waveTable, _waveExecutionId, _waveStepName, false);
        return new WHSInstrumentationWaveProcessingPerformanceTask(ActionRunWaveStep, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveStepsExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newWaveStepsExecution(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, ActionExecuteWaveSteps);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaskCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The wave step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newTaskCreation(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);

    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveExecutionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave execution type, in batch or from UI.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newFromWaveExecutionType(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, ActionDetermineCanRunInBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAllocationProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave allocation processing step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The allocation processing step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newAllocationProcessor(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinalizeAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the finalize the wave allocation step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The allocation processing step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newFinalizeAllocation(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReplenishmentProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave replenishment processing step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The replenishment processing step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newReplenishmentProcessor(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinalizeReplenishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the finalize the wave replenishment step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The replenishment processing step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newFinalizeReplenishment(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLabelPrintingProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave label printing processing step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The label printing processing step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newLabelPrintingProcessor(
        WHSWaveTable       _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinalizeLabelPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the finalize the wave label printing step action.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The label printing processing step action.</param>
    /// <returns>The new instrumentation class instance.</returns>
    public static WHSInstrumentationWaveProcessingPerformanceTask newFinalizeLabelPrinting(
        WHSWaveTable       _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        return WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, _waveExecutionId, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPerformanceTaskWithoutWaveStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave task without a wave step.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_action">The wave task without a wave step.</param>
    /// <returns>The new instrumentation class instance.</returns>
    internal static WHSInstrumentationWaveProcessingPerformanceTask newPerformanceTaskWithoutWaveStep(
        WHSWaveTable	   _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        str                _action)
    {
        Map parameters = new Map(Types::String, Types::String);
        parameters.insert(ParameterNameWaveId, int642Str(_waveTable.RecId));
        parameters.insert(ParameterNameWaveExecutionId, WHSInstrumentationPerformanceTask::getHashValue(_waveExecutionId));
        parameters.insert(ParameterNameStatus, enum2Symbol(enumNum(WHSWaveStatus), enum2int(_waveTable.WaveStatus)));
        return new WHSInstrumentationWaveProcessingPerformanceTask(_action, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPerformanceTaskBatchRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave task is added to batch.
    /// </summary>
    /// <param name = "_waveTableRecId">The wave record ID.</param>
    /// <param name = "_batchRecId">The batch job record ID.</param>
    /// <returns>The new instrumentation class instance.</returns>
    internal static WHSInstrumentationWaveProcessingPerformanceTask newPerformanceTaskBatchRun(
        RecId       _waveTableRecId,
        RecId       _batchRecId)
    {
        Map parameters = new Map(Types::String, Types::String);
        parameters.insert(ParameterNameWaveId, int642Str(_waveTableRecId));
        parameters.insert(ParameterNameBatchId, int2Str(_batchRecId));
        return new WHSInstrumentationWaveProcessingPerformanceTask(ActionScheduleBatch, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPerformanceTaskBatchHeaderRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance based on the wave task is added to batch header.
    /// </summary>
    /// <param name = "_waveTableRecId">The wave record ID.</param>
    /// <param name = "_batchHeaderRecId">The batch header record ID.</param>
    /// <returns>The new instrumentation class instance.</returns>
    internal static WHSInstrumentationWaveProcessingPerformanceTask newPerformanceTaskBatchHeaderRun(
        RecId       _waveTableRecId,
        RecId       _batchHeaderRecId)
    {
        Map parameters = new Map(Types::String, Types::String);
        parameters.insert(ParameterNameWaveId, int642Str(_waveTableRecId));
        parameters.insert(ParameterNameBatchId, int2Str(_batchHeaderRecId));
        return new WHSInstrumentationWaveProcessingPerformanceTask(ActionScheduleBatchHeader, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private static void initParameters(
        Map                _parameters, 
        WHSWaveTable       _waveTable, 
        WHSWaveExecutionID _waveExecutionId,
        str				   _waveStepName,
        boolean            _custom)
    {
        _parameters.insert(ParameterNameWaveId, int642Str(_waveTable.RecId));
        _parameters.insert(ParameterNameWaveExecutionId, WHSInstrumentationPerformanceTask::getHashValue(_waveExecutionId));
        _parameters.insert(ActionRunWaveStep, _waveStepName);
        _parameters.insert(ParameterNameCustom, WHSInstrumentationPerformanceTask::booleanToString(_custom));
        _parameters.insert(ParameterNameStatus, enum2Symbol(enumNum(WHSWaveStatus), enum2int(_waveTable.WaveStatus)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWaveStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave step name instrumentation parameter.
    /// </summary>
    /// <param name = "_waveStepName">The name of the wave step.</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setWaveStep(str _waveStepName)
    {
        return this.setParameter(ParameterNameWaveStep, _waveStepName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave runs in async instrumentation parameter.
    /// </summary>
    /// <param name = "_async">Is wave running async step?</param>
    /// <returns>The current instance.</returns>
	public WHSInstrumentationWaveProcessingPerformanceTask setAsync(boolean _async)
    {
        return this.setParameter('async', this.getBooleanParameterValue(_async));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave is running a custom step instrumentation parameter.
    /// </summary>
    /// <param name = "_custom">Are we running a custom step?</param>
    /// <returns>The current instance.</returns>
	public WHSInstrumentationWaveProcessingPerformanceTask setCustom(boolean _custom)
    {
        return this.setParameter(ParameterNameCustom, this.getBooleanParameterValue(_custom));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllocatedLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave number of load lines for allocation instrumentation parameter.
    /// </summary>
    /// <param name = "_allocatedLoadLines">Number of allocation load lines.</param>
    /// <returns>The current instance.</returns>
	public WHSInstrumentationWaveProcessingPerformanceTask setAllocatedLoadLines(int _allocatedLoadLines)
    {
        return this.setParameter('allocatedLoadLines', int2Str(_allocatedLoadLines));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutedAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave number of allocated load lines instrumentation parameter.
    /// </summary>
    /// <param name = "_executedAllocations">Number of allocated load lines.</param>
    /// <returns>The current instance.</returns>
	public WHSInstrumentationWaveProcessingPerformanceTask setExecutedAllocations(int _executedAllocations)
    {
        return this.setParameter('executedAllocations', int2Str(_executedAllocations));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchHeaderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave batch job identifier instrumentation parameter.
    /// </summary>
    /// <param name = "_batchHeaderId">Batch job header identifier.</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setBatchHeaderId(RecId _batchHeaderId)
    {
        return this.setParameter('batchHeaderId', int642Str(_batchHeaderId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumOfQueueRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave number of records to process instrumentation parameter.
    /// </summary>
    /// <param name = "_numOfQueueRecords">Number of records in the queue for processing.</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setNumOfQueueRecords(int _numOfQueueRecords)
    {
        return this.setParameter('numOfQueueRecords', int2Str(_numOfQueueRecords));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumOfBatchTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave number of allocation batch tasks created instrumentation parameter.
    /// </summary>
    /// <param name = "_numOfBatchTasks">Number of batch tasks to process.</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setNumOfBatchTasks(int _numOfBatchTasks)
    {
        return this.setParameter('numOfBatchTasks', int2Str(_numOfBatchTasks));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaximumBatchTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the maximum number of allocation batch tasks created instrumentation parameter.
    /// </summary>
    /// <param name = "_maximumBatchTasks">Max. number of allocation batch tasks to create.</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setMaximumBatchTasks(int _maximumBatchTasks)
    {
        return this.setParameter('maximumBatchTasks', int2Str(_maximumBatchTasks));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWaveExecutionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave execution identifier instrumentation parameter.
    /// </summary>
    /// <param name = "_waveExecutionId">The wave execution Id.</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setWaveExecutionId(WHSWaveExecutionId _waveExecutionId)
    {
        return this.setParameter(ParameterNameWaveExecutionId, WHSInstrumentationPerformanceTask::getHashValue(_waveExecutionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRunInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the wave being run in batch instrumentation parameter.
    /// </summary>
    /// <param name = "_canProcessWaveInBatch">A boolean which represents whether the wave is running in batch</param>
    /// <returns>The current instance.</returns>
    public WHSInstrumentationWaveProcessingPerformanceTask setRunInBatch(boolean _canProcessWaveInBatch)
    {
        return this.setParameter('runInBatch', this.getBooleanParameterValue(_canProcessWaveInBatch));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>