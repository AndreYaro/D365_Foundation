<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocState_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EFDocState_BR
{
    EFDocument_BR           eFDocument;
    FiscalDocument_BR       fiscalDocument;
    FiscalEstablishment_BR  fiscalEstablishment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeContingency</Name>
				<Source><![CDATA[
    public boolean canChangeContingency()
    {
        EFDocContingMode_BR currentMode;

        if (fiscalDocument.isElectronicConsumerFiscalDoc())
        {
            return false;
        }

        currentMode = EFDocContingencyMode_BR::getCurrentContingencyMode(fiscalDocument.FiscalEstablishment).Mode;

        if (!this.isContingenyMode()
            && this.messageHasntBeenSent()
            && (currentMode == EFDocContingMode_BR::SecurityForm
                || currentMode == EFDocContingMode_BR::SecurityFormDA))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExportXML</Name>
				<Source><![CDATA[
    public boolean canExportXML()
    {
        return this.fiscalDocumentIsApproved() || this.fiscalDocumentIsCancelled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canNotifyRecipients</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if NF-e recipients should receive a copy of the document (XML) at this state.
    /// </summary>
    /// <returns>
    /// true if NF-e can be send to recipients; false otherwise.
    /// </returns>
    public boolean canNotifyRecipients()
    {
        boolean notifyRecipients = false;

        if (efDocument.MessageType == EFDocMessageType_BR::Submit
            && fiscalDocument.Status == FiscalDocumentStatus_BR::Approved)
        {
            notifyRecipients = true;
        }
        else if (efDocument.MessageType == EFDocMessageType_BR::Cancel
              && fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled)
        {
            notifyRecipients = true;
        }

        return notifyRecipients;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    private boolean canPost()
    {
        return this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Blank
                && this.messageStatus() == EFDocMessageStatus_BR::Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPrintContingencyDanfe</Name>
				<Source><![CDATA[
    public boolean canPrintContingencyDanfe()
    {
        if (this.isContingenyMode()
            && this.messageHasntBeenSent()
            && this.isSubmitMessage())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPrintDanfe</Name>
				<Source><![CDATA[
    public boolean canPrintDanfe()
    {
        if (this.fiscalDocumentIsApproved()
            && this.messageHasBeenProcessed())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReSendMessage</Name>
				<Source><![CDATA[
    public boolean canReSendMessage()
    {
        if (!this.messageHasBeenProcessed())
        {
            return false;
        }

        if (this.isDiscardMessage())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Rejected
                || this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::RejectedNoFix)
            {
                return true;
            }
        }
        else if (this.isCancelMessage())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Approved)
            {
                return true;
            }
        }
        else if (this.isSubmitMessage())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Rejected)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
    public boolean canReverse()
    {
        if (this.messageType() != EFDocMessageType_BR::Submit)
        {
            return false;
        }

        if (this.messageHasBeenProcessed())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Approved)
            {
                return true;
            }
            else if (this.isRejectedOrDenied())
            {
                return true;
            }
        }

        else if (this.messageHasBeenSent())
        {
            return false;
        }
        else if (this.messageHasntBeenSent())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Created)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changed</Name>
				<Source><![CDATA[
    private void changed(boolean _copyReturnCode = true)
    {
        EFDocHist_BR    history;

        history.EFDRefRecId             = eFDocument.RecId;
        history.MessageStatus           = eFDocument.MessageStatus;
        history.MessageType             = eFDocument.MessageType;
        history.ReceiptNumber           = eFDocument.ReceiptNumber;
        history.Date                    = eFDocument.Date;
        history.Time                    = eFDocument.Time;
        history.ContingencyMode         = eFDocument.ContingencyMode;
        history.ContingencyReason       = eFDocument.ContingencyReason;
        history.ReturnMessage           = eFDocument.ReturnMessage;
        history.EFDocAuthority          = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment).EFDocAuthority;
        history.FiscalDocStatus         = this.fiscalDocumentStatus();

        if (_copyReturnCode)
        {
            history.ReturnCodeRefRecId      = eFDocument.ReturnCodeRefRecId;
            history.ReturnCodeDescription   = eFDocument.ReturnCodeDescription;
        }

        history.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeMessageStatus</Name>
				<Source><![CDATA[
    private void changeMessageStatus(EFDocMessageStatus_BR _newStatus)
    {
        eFDocument.selectForUpdate(true);

        eFDocument.MessageStatus    = _newStatus;

        this.updateEFDocument_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeToContingency</Name>
				<Source><![CDATA[
    public void changeToContingency()
    {
        ttsbegin;

        eFDocument.selectForUpdate(true);

        this.setContingencyMode();

        this.updateEFDocument_BR();

        this.updateFiscalDocument_BR();

        this.changed();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentIsApproved</Name>
				<Source><![CDATA[
    private boolean fiscalDocumentIsApproved()
    {
        return this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentIsCancelled</Name>
				<Source><![CDATA[
    private boolean fiscalDocumentIsCancelled()
    {
        return this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the status of the fiscal document
    /// </summary>
    /// <returns>
    /// The <c>FiscalDocumentStatus_BR</c> of the fiscal document.
    /// </returns>
    protected FiscalDocumentStatus_BR fiscalDocumentStatus()
    {
        return fiscalDocument.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventSendTransport</Name>
				<Source><![CDATA[
    private IEFDocMsgTransport getEventSendTransport(IEFDocEventMsg_BR _eventMessage)
    {
        return EFDocMsgTransport_WebService_BR::newFromEvent(fiscalEstablishment, _eventMessage.getSendFormat(fiscalEstablishment).version(), _eventMessage.getURL(fiscalEstablishment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the proper <c>IEFDocMsg_BR</c> for a given message type.
    /// </summary>
    /// <param name="_messageType">
    /// <c>EFDocMessageType_BR</c> of the message that will be handled.
    /// </param>
    /// <returns>
    /// Proper implementation of <c>IEFDocMsg_BR</c>.
    /// </returns>
    protected IEFDocMsg_BR getMessage(EFDocMessageType_BR _messageType)
    {
        return EFDocMsgBase_BR::createFromMessageType(_messageType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the proper implementation of <c>IEFDocMsgTransport</c> for a given fiscal establishment
    /// and message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// <c>FiscalEstablishment_BR</c> issuing the fiscal document.
    /// </param>
    /// <param name="_messageType">
    /// <c>EFDocMessageType_BR</c> of the message that will be handled.
    /// </param>
    /// <returns>
    /// Proper implementation of <c>IEFDocMsgTransport</c>.
    /// </returns>
    protected IEFDocMsgTransport getSendTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocMessageType_BR _messageType)
    {
        return EFDocFactory_BR::construct().createSendTransport(_fiscalEstablishment, _messageType, eFDocument.ContingencyMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from given <c>FiscalDocument_BR</c> and <c>EFDocument_BR</c> records.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> to initialize from.
    /// </param>
    /// <param name="_eFDocument">
    /// <c>EFDocument_BR</c> to initialize from.
    /// </param>
    protected void init(FiscalDocument_BR _fiscalDocument, EFDocument_BR _eFDocument)
    {
        eFDocument          = _eFDocument;
        fiscalDocument      = _fiscalDocument;
        fiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from a given <c>EFDocument_BR</c> record.
    /// </summary>
    /// <param name="_eFDocument">
    /// <c>EFDocument_BR</c> to initialize from.
    /// </param>
    protected void initFromEFDocument(EFDocument_BR _eFDocument)
    {
        eFDocument    = _eFDocument;
        fiscalDocument = FiscalDocument_BR::find(_eFDocument.RefRecId, true);
        fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocument.fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from a given <c>FiscalDocument_BR</c> record.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> to initialize from.
    /// </param>
    protected void initFromFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        fiscalDocument = _fiscalDocument;
        fiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.fiscalEstablishment);
        eFDocument = EFDocument_BR::findByRef(_fiscalDocument.RecId);

        if (!eFDocument)
        {
            this.initializeEFDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEFDocument</Name>
				<Source><![CDATA[
    private void initializeEFDocument()
    {
        eFDocument.RefRecId             = fiscalDocument.RecId;

        this.setContingencyMode();
        this.updateEFDocument_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelMessage</Name>
				<Source><![CDATA[
    private boolean isCancelMessage()
    {
        return this.messageType() == EFDocMessageType_BR::Cancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContingenyMode</Name>
				<Source><![CDATA[
    private boolean isContingenyMode()
    {
        return eFDocument.ContingencyMode != EFDocContingMode_BR::Off;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDiscardMessage</Name>
				<Source><![CDATA[
    private boolean isDiscardMessage()
    {
        return this.messageType() == EFDocMessageType_BR::Discard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRejectedOrDenied</Name>
				<Source><![CDATA[
    private boolean isRejectedOrDenied()
    {
        return this.isRejectedOrRejectedNoFix()
            || this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Denied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRejectedOrRejectedNoFix</Name>
				<Source><![CDATA[
    private boolean isRejectedOrRejectedNoFix()
    {
        return this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Rejected
            || this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::RejectedNoFix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubmitMessage</Name>
				<Source><![CDATA[
    private boolean isSubmitMessage()
    {
        return this.messageType() == EFDocMessageType_BR::Submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageHasBeenProcessed</Name>
				<Source><![CDATA[
    private boolean messageHasBeenProcessed()
    {
        return this.messageStatus() == EFDocMessageStatus_BR::Processed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageHasBeenSent</Name>
				<Source><![CDATA[
    private boolean messageHasBeenSent()
    {
        return this.messageStatus() == EFDocMessageStatus_BR::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageHasntBeenSent</Name>
				<Source><![CDATA[
    private boolean messageHasntBeenSent()
    {
        return this.messageStatus() == EFDocMessageStatus_BR::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageReceived</Name>
				<Source><![CDATA[
    public void messageReceived(EFiscalDocumentReturnInfo_BR _messageReturn)
    {
        if (!this.messageHasBeenSent())
        {
            throw error(strfmt("@GLS62567", this.messageType(), this.messageStatus()));
        }

        this.proccessMessage(_messageReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageSent</Name>
				<Source><![CDATA[
    public void messageSent(EFiscalDocumentReturnInfo_BR _messageReturn)
    {
        if (!this.messageHasntBeenSent())
        {
            throw error(strfmt("@GLS62565", this.messageType(), this.messageStatus()));
        }

        this.proccessMessage(_messageReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageStatus</Name>
				<Source><![CDATA[
    protected EFDocMessageStatus_BR messageStatus()
    {
        return eFDocument.MessageStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageType</Name>
				<Source><![CDATA[
    protected EFDocMessageType_BR messageType()
    {
        return eFDocument.MessageType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        if (!this.canPost())
        {
            throw error(strfmt("@GLS62562", this.fiscalDocumentStatus(), this.messageType(), this.messageStatus()));
        }
        this.validateFormat(EFDocWebService_BR::Submit, EFDocSchemaType_BR::Submit);
        this.submit();
        this.changed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proccessMessage</Name>
				<Source><![CDATA[
    protected void proccessMessage(EFiscalDocumentReturnInfo_BR _messageReturn)
    {
        EFDocReturnCodeAction_BR returnCode = EFDocReturnCodeAction_BR::construct(eFDocument.MessageType, _messageReturn.parmReturnCodeStatus());

        if (!returnCode.isValidReturnCode())
        {
            setPrefix(strFmt("@NFE:FiscalDocumentPrefix", fiscalDocument.FiscalDocumentNumber));
            warning(strfmt("@GLS62572", _messageReturn.parmReturnCodeStatus(), eFDocument.MessageType));
        }
        else
        {
            ttsbegin;

            eFDocument.selectForUpdate(true);
            eFDocument.ReceiptNumber            = _messageReturn.parmReceiptNumber();
            eFDocument.ProtocolNumber           = _messageReturn.parmProtocolNumber();
            eFDocument.ReturnCodeDescription    = strfmt('%1 - %2',_messageReturn.parmReturnCodeStatus(), _messageReturn.parmReturnCodeDescription());
            eFDocument.ReturnMessage            = _messageReturn.parmReturnMessage();
            eFDocument.AverageResponseTime      = _messageReturn.parmAverageResponseTime();
            eFDocument.ReturnCodeRefRecId       = EFDReturnCode_BR::findByMsgTypeReturnCode(eFDocument.MessageType, _messageReturn.parmReturnCodeStatus()).RecId;

            if (returnCode.messageStatus() != EFDocMessageStatus_BR::Blank)
            {
                this.changeMessageStatus(returnCode.messageStatus());
            }

            if (returnCode.status() != FiscalDocumentStatus_BR::Blank)
            {
                this.setFiscalDocumentStatus(returnCode.status());
            }

            this.updateEFDocument_BR();

            this.changed();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEventMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the return cancel message for the event web servce
    /// </summary>
    /// <param name="_messageReturn">
    /// An object representing the received return message
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the return code is not approved, an error is thrown meaning that the requisition failed
    /// </exception>
    public void processEventMessage(EFiscalDocumentReturnInfo_BR _messageReturn)
    {
        EFDocEventStatus_BR returnCode = EFDocEventReturnCode_BR::getStatusFromReturnCode(_messageReturn.parmReturnCodeStatus());

        ttsbegin;

        if (returnCode != EFDocEventStatus_BR::Approved)
        {
            throw error(strfmt("@SYS4002161", _messageReturn.parmReturnCodeStatus(), _messageReturn.parmReturnCodeDescription()));
        }

        eFDocument.selectForUpdate(true);
        eFDocument.ReceiptNumber            = _messageReturn.parmReceiptNumber();
        eFDocument.ProtocolNumber           = _messageReturn.parmProtocolNumber();
        eFDocument.ReturnCodeDescription    = strfmt('%1 - %2',_messageReturn.parmReturnCodeStatus(), _messageReturn.parmReturnCodeDescription());
        eFDocument.ReturnMessage            = _messageReturn.parmReturnMessage();
        eFDocument.AverageResponseTime      = _messageReturn.parmAverageResponseTime();
        eFDocument.ReturnCodeRefRecId       = EFDReturnCode_BR::findByMsgTypeReturnCode(eFDocument.MessageType, _messageReturn.parmReturnCodeStatus()).RecId;

        if (eFDocument.MessageType == EFDocMessageType_BR::Cancel)
        {
            this.saveCanceledDocument();
        }

        this.updateEFDocument_BR();
        this.changed();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSendMessage</Name>
				<Source><![CDATA[
    public void reSendMessage()
    {
        if (!this.canReSendMessage())
        {
            throw error(strfmt("@GLS62565", this.messageType(), this.messageStatus()));
        }

        ttsbegin;

        if (fiscalDocument.isElectronicConsumerFiscalDoc() == false) // cannot update fiscal document xml won't be generated again
        {
        FiscalDocumentUpdate_BR::construct(fiscalDocument).run();
        }

        this.sendMessage(this.messageType());
        this.changed(false);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    public void reverse()
    {
        if (!this.canReverse())
        {
            throw error(strfmt("@GLS62564", this.fiscalDocumentStatus(), this.messageType(), this.messageStatus()));
        }

        if (this.isRejectedOrRejectedNoFix())
        {
            this.validateFormat(EFDocWebService_BR::Discard, EFDocSchemaType_BR::Discard);
        }

        ttsbegin;

        if (this.messageHasBeenProcessed())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Approved)
            {
                this.sendMessage(EFDocMessageType_BR::Cancel);
            }
            else if (this.isRejectedOrRejectedNoFix())
            {
                this.sendMessage(EFDocMessageType_BR::Discard);
            }
        }
        else if (this.messageHasntBeenSent())
        {
            if (this.fiscalDocumentStatus() == FiscalDocumentStatus_BR::Created)
            {
                this.sendMessage(EFDocMessageType_BR::Discard);
            }
        }

        this.changed();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCanceledDocument</Name>
				<Source><![CDATA[
    private void saveCanceledDocument()
    {
        this.changeMessageStatus(EFDocMessageStatus_BR::Sent);
        this.setFiscalDocumentStatus(FiscalDocumentStatus_BR::Cancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMessage</Name>
				<Source><![CDATA[
    private void sendMessage(EFDocMessageType_BR _messageType)
    {
        IEFDocMsg_BR                message;
        EFiscalDocumentList_BR      msgList;

        IEFDocEventMsg_BR           eventMessage;
        EFEventDocumentList_BR      eventMsgList;

        eFDocument.selectForUpdate(true);

        eFDocument.MessageType      = _messageType;
        eFDocument.MessageStatus    = EFDocMessageStatus_BR::Waiting;
        this.updateEFDocument_BR();

        if (_messageType == EFDocMessageType_BR::Cancel && !BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00053]))
        {
            // Event
            if (this.shouldCancelAsEvent())
            {
                eventMsgList = EFEventDocumentList_BR::construct();
                eventMsgList.add(EFEventDocument_BR::constructCancel(fiscalDocument));

                eventMessage = EFDocEventMsgBase_BR::constructFromSchema(EFDocSchemaType_BR::CancelAsEvent, eFDocument.ContingencyMode);
                IEFDocMsgTransport transport = this.getEventSendTransport(eventMessage);
                if (transport is EFDocMsgTransport_WebService_BR)
                {
                    EFDocMsgTransport_WebService_BR transportTmp = transport;
                    transportTmp.parmEncoderType(EFDocEventMsgBase_BR::getEncorderType(eventMessage, fiscalEstablishment));
                    transportTmp.parmSoapVersion(EFDocEventMsgBase_BR::getSoapVersion(eventMessage, fiscalEstablishment));
                }
                eventMessage.send(eventMsgList, transport);
            }
            else
            {
                msgList = EFiscalDocumentList_BR::construct();
                msgList.add(EFiscalDocument_BR::construct(fiscalDocument));

                message = this.getMessage(_messageType);
                message.send(msgList, this.getSendTransport(fiscalEstablishment, _messageType));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContingencyMode</Name>
				<Source><![CDATA[
    private void setContingencyMode()
    {
        EFDocContingencyMode_BR contingencyMode;

        contingencyMode = EFDocContingencyMode_BR::getCurrentContingencyMode(fiscalDocument.FiscalEstablishment);

        efDocument.ContingencyDateTime      = contingencyMode.createdDateTime;
        efDocument.ContingencyDateTimeOffset = contingencyMode.CreatedTimeOffset;
        eFDocument.ContingencyMode          = contingencyMode.Mode;
        eFDocument.ContingencyReason        = contingencyMode.Reason;
        eFDocument.ContingencyModeRefRecID  = contingencyMode.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentStatus</Name>
				<Source><![CDATA[
    private void setFiscalDocumentStatus(FiscalDocumentStatus_BR _status)
    {
        ttsBegin;
        fiscalDocument.selectForUpdate(true);
        fiscalDocument.Status = _status;
        fiscalDocument.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCancelAsEvent</Name>
				<Source><![CDATA[
    private boolean shouldCancelAsEvent()
    {
        EFDocAuthorityId_BR efDocAuthorityId;
        EFDocAuthority_BR efDocAuthority;

        efDocAuthorityId = fiscalEstablishment.EFDocAuthority;

        select firstOnly CancelAsEvent from efDocAuthority
            where efDocAuthority.AuthorityId == efDocAuthorityId;

        return efDocAuthority.CancelAsEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    private void submit()
    {
        this.setFiscalDocumentStatus(FiscalDocumentStatus_BR::Created);
        this.sendMessage(EFDocMessageType_BR::Submit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEFDocument_BR</Name>
				<Source><![CDATA[
    private void updateEFDocument_BR()
    {
        Timezone  timezone = fiscalEstablishment.getTimeZone();
        eFDocument.Date = DateTimeUtil::getToday(timezone);
        eFDocument.Time = DateTimeUtil::getTimeNow(timezone);

        if (eFDocument)
        {
            eFDocument.update();
        }
        else
        {
            eFDocument.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the FiscalDocument_BR record
    /// </summary>
    /// <remarks>
    /// updates the Access key based upon change in the Contingency Mode
    /// </remarks>
    private void updateFiscalDocument_BR()
    {
        fiscalDocument.AccessKey = EFDocFactory_BR::construct().createAccessKey(
                                fiscalEstablishment.EFDocVersion,
                                fiscalDocument.NumericCode,
                                fiscalDocument);

        fiscalDocument.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFormat</Name>
				<Source><![CDATA[
    private void validateFormat(EFDocWebService_BR _webService, EFDocSchemaType_BR _schemaType)
    {
        EFiscalDocumentList_BR  list;
        IEFDocMsgFormat         msgFormat;
        IEFDocMsgStream_BR      msgStream;
        EFDocXmlValidator_BR    validator;
        Filename                xsdPath;
        List                    listOfErrors;
        ListEnumerator          enumerator;
        FileIOPermission        fileIOPermission;

        if (!fiscalEstablishment.EFDocValidateSchemaOnPosting)
        {
            return;
        }

        msgFormat = EFDocFactory_BR::construct().createMsgFormat(FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment), _webService, fiscalDocument);
        msgStream = new EFDocMsgStringStream_BR();
        list = EFiscalDocumentList_BR::construct();
        list.add(EFiscalDocument_BR::construct(fiscalDocument));
        msgFormat.write(msgStream, list);
        xsdPath = EFDocSchema_BR::getSchemaPath(_schemaType, fiscalEstablishment.EFDocVersion);
        if (xsdPath)
        {
            fileIOPermission = new FileIOPermission(xsdPath,'r');
            fileIOPermission.assert();
        }
        if (!xsdPath || !WinAPIServer::fileExists(xsdPath))
        {
            warning(strFmt("@SYS4081396", enum2str(_schemaType), enum2str(fiscalEstablishment.EFDocVersion)));
            return;
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00043, funcName());

        validator = EFDocXmlValidator_BR::construct(xsdPath);
        validator.validate(msgStream.toString());

        if (validator.errorsFound())
        {
            setPrefix("@SYS4081397");
            listOfErrors = validator.allErrors();
            enumerator = listOfErrors.getEnumerator();
            while (enumerator.moveNext())
            {
                error(enumerator.current());
            }
            // Stop the posting
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class from given <c>FiscalDocument_BR</c> and <c>EFDocument_BR</c> records.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> to initialize from.
    /// </param>
    /// <param name="_efDocument">
    /// <c>EFDocument_BR</c> to initialize from.
    /// </param>
    /// <returns>
    /// Instance of <c>EFDocState_BR</c>.
    /// </returns>
    public static EFDocState_BR construct(FiscalDocument_BR _fiscalDocument, EFDocument_BR _efDocument)
    {
        EFDocState_BR state;

        state = new EFDocState_BR();
        state.init(_fiscalDocument, _efDocument);

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class from given <c>EFDocAccessKey_BR</c>.
    /// </summary>
    /// <param name="_accessKey">
    /// <c>EFDocAccessKey_BR</c> to initialize from.
    /// </param>
    /// <returns>
    /// Instance of <c>EFDocState_BR</c>.
    /// </returns>
    public static EFDocState_BR createFromAccessKey(EFDocAccessKey_BR _accessKey)
    {
        EFDocState_BR state;

        state = new EFDocState_BR();

        state.initFromFiscalDocument(FiscalDocument_BR::findByAccessKey(_accessKey));

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromEFdocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class from given <c>EFDocument_BR</c>.
    /// </summary>
    /// <param name="_eFdocument">
    /// <c>EFDocument_BR</c> to initialize from.
    /// </param>
    /// <returns>
    /// Instance of <c>EFDocState_BR</c>.
    /// </returns>
    public static EFDocState_BR createFromEFdocument(EFDocument_BR _eFdocument)
    {
        EFDocState_BR state;

        state = new EFDocState_BR();

        state.initFromEFDocument(_eFdocument);

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class from given <c>FiscalDocument_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> to initialize from.
    /// </param>
    /// <returns>
    /// Instance of <c>EFDocState_BR</c>.
    /// </returns>
    public static EFDocState_BR createFromFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        EFDocState_BR state;

        state = new EFDocState_BR();
        state.initFromFiscalDocument(_fiscalDocument);

        return state;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>