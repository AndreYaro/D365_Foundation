<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionInquiryUIHelperBase_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a base helper for the form <c>TaxTransactionInquiry_IN</c>. It has some base methods
/// for all inquiry types and the UI that it has constructed will not change while switching the inquriy type.
/// </summary>
class TaxTransactionInquiryUIHelperBase_IN
{
    TaxTransactionInquirySysListPanel_IN    sysListPanel;
    FormRun                                 formRun;
    FormTreeControl                         treeControl;
    FormGroupControl                        groupComposition;
    FormDataSource                          formDataSource;
    QueryBuildDataSource                    queryBuildDataSource;
    int                                     rootItemIndex;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxTransactionInquiryUIHelperBase_IN construct(
        FormRun                              _formRun)
    {
        TaxTransactionInquiryUIHelperBase_IN taxTransactionInquiryUIHelperBase;

        taxTransactionInquiryUIHelperBase = new TaxTransactionInquiryUIHelperBase_IN(_formRun);

        taxTransactionInquiryUIHelperBase.init();

        return taxTransactionInquiryUIHelperBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The construction function. This function do the assignments.
    /// </summary>
    /// <param name = "_formRun">formRun of the form</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysListPanel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxTransactionInquirySysListPanel_IN parmSysListPanel(TaxTransactionInquirySysListPanel_IN _sysListPanel = sysListPanel)
    {
        sysListPanel = _sysListPanel;
        return sysListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSysListPanel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the list panel of the form.
    /// </summary>
    /// <param name = "reloadMethodStr">the str of the reload method in the form</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initSysListPanel(String15 reloadMethodStr)
    {
        sysListPanel.parmReloadMethod(reloadMethodStr);
        sysListPanel.positionsUpdatedDelegate += eventhandler(this.positionsUpdated);
        sysListPanel.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUIDesignTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the UI design of the form.
    /// </summary>
    /// <param name = "_isDirectTax">Determines whether tax type is direct tax.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateUIDesignTreeNode(boolean _isDirectTax = false)
    {
        this.setSecurableControls();
        this.constructTree(_isDirectTax);
        this.addNoneRangeToQueryBuildDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPanelAllowEdit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setListPanelAllowEdit()
    {
        if (formRun.inViewMode())
        {
            groupComposition.enabled(false);
        }
        else
        {
            groupComposition.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControlItemSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method after the checked state of the tree control has been changed.
    /// </summary>
    /// <param name = "_selectedItem">The selected item in the tree.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void treeControlItemSelectionChanged(FormTreeItem _selectedItem)
    {
        FormTreeItem    rootTreeItem;

        if (queryBuildDataSource && treeControl)
        {
            queryBuildDataSource.clearRanges();
            this.addNoneRangeToQueryBuildDataSource();
            this.cascadeSelectChildItems(_selectedItem);

            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        treeControl      = formRun.control(formRun.controlId(formControlStr(taxTransactionInquiry_IN, TreeControl)));
        groupComposition = formRun.control(formRun.controlId(formControlStr(taxTransactionInquiry_IN, GroupComposition)));

        formDataSource       = formRun.dataSource();
        queryBuildDataSource = FormDataSource.queryBuildDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdated</Name>
				<Source><![CDATA[
    private void positionsUpdated()
    {
        // Ensure the hierarchy is updated when the levels change.
        formDataSource.forceWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSecurableControls</Name>
				<Source><![CDATA[
    private void setSecurableControls()
    {
        AccessRight accessRight = FormSecurity::getMenuItemAccessRight(formRun);

        switch (accessRight)
        {
            case AccessRight::NoAccess:
            case AccessRight::View:
                // Disable the controls from the group containing the dynamically added controls
                GroupComposition.enabled(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method to be updated for TaxEngine integration: display taxType_IN and TaxWithholdType_IN that is mapped with TaxEngine taxtype.
    /// </summary>
    /// <param name = "_isDirectTax">Determines whether tax type is direct tax.</param>
    private void constructTree(Boolean _isDirectTax = false)
    {
        FormTreeItem    treeItem;

        treeControl.deleteAll();
        
        //Add root node
        treeItem = new FormTreeItem("@TaxTransactionInquiry:TaxTransactionInquiryType");
        rootItemIndex = treeControl.addItem(0, FormTreeAdd::Root, treeItem);

        if (_isDirectTax)
        {
            this.processDirectTaxType();
        }
        else
        {
            this.processIndirectTaxType();
        }
        
        treeControl.expand(rootItemIndex, FormTreeExpand::Expand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxInquiryTypeTreeItem</Name>
				<Source><![CDATA[
    private void addTaxInquiryTypeTreeItem(int _parentTreeItemIndex, DictEnum _dictEnum, int _index)
    {
        DictEnum        taxTransactinInquiryEnum = new DictEnum(enumNum(TaxTransactionInquiryType_IN));
        FormTreeItem    treeItem;

        if (_dictEnum.id() == enumNum(TaxType_IN))
        {
            switch (_dictEnum.index2Value(_index))
            {
                case TaxType_IN::Customs:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::CustomsInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::CustomsInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                case TaxType_IN::Excise:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::ExciseInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::ExciseInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);

                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::ExciseRegisterInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::ExciseRegisterInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);

                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::ExciseRegisterBalanceInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::ExciseRegisterBalanceInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                case TaxType_IN::SalesTax:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::SalesTaxInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::SalesTaxInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                case TaxType_IN::ServiceTax:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::ServiceTaxInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::ServiceTaxInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                case TaxType_IN::VAT:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::VATInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::VATInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                default:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::IndirectTaxInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::IndirectTaxInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;
            }
        }
        else if (_dictEnum.id() == enumNum(TaxWithholdType_IN))
        {
            switch (_dictEnum.index2Value(_index))
            {
                case TaxWithholdType_IN::TCS:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::TCSInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::TCSInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                case TaxWithholdType_IN::TDS:
                    treeItem = new FormTreeItem(taxTransactinInquiryEnum.index2Label(TaxTransactionInquiryType_IN::TDSInquiry));
                    treeItem.data(TaxTransactionInquiryType_IN::TDSInquiry);
                    treeControl.addItem(_parentTreeItemIndex, FormTreeAdd::Last, treeItem);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoneRangeToQueryBuildDataSource</Name>
				<Source><![CDATA[
    private void addNoneRangeToQueryBuildDataSource()
    {
        if (queryBuildDataSource)
        {
            queryBuildDataSource.addRange(fieldNum(TaxTransactionInquiry_IN, TaxTransactionInquiryType)).value(queryValue(TaxTransactionInquiryType_IN::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeSelectChildItems</Name>
				<Source><![CDATA[
    private void cascadeSelectChildItems(FormTreeItem _formTreeItem)
    {
        int             childTreeItemIdx;
        FormTreeItem    childTreeItem;

        if (_formTreeItem && _formTreeItem.children())
        {
            childTreeItemIdx = treeControl.getChild(_formTreeItem.idx());

            while (childTreeItemIdx)
            {
                childTreeItem = treeControl.getItem(childTreeItemIdx);
                this.cascadeSelectChildItems(childTreeItem);

                childTreeItemIdx = treeControl.getNextSibling(childTreeItemIdx);
            }
        }
        else
        {
            queryBuildDataSource.addRange(fieldNum(TaxTransactionInquiry_IN, TaxTransactionInquiryType)).value(_formTreeItem.data());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIndirectTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construction IndirectTaxType tree node
    /// </summary>
    protected void processIndirectTaxType()
    {
        SysDictEnum     dictEmum;
        int             taxTypeItemIndex;
        FormTreeItem    treeItem;

        //Process for Indirect tax type
        dictEmum = new SysDictEnum(enumNum(TaxType_IN));
        for (int position = 0; position < dictEmum.values(); position++)
        {
            if (dictEmum.index2Value(position) == TaxType_IN::Customs
                || dictEmum.index2Value(position) == TaxType_IN::VAT)
            {
                treeItem = new FormTreeItem(dictEmum.index2Label(position));
                //Add tax type node
                taxTypeItemIndex = treeControl.addItem(rootItemIndex, FormTreeAdd::Last, treeItem);
                this.addTaxInquiryTypeTreeItem(taxTypeItemIndex, dictEmum, position);
                treeControl.expand(taxTypeItemIndex, FormTreeExpand::Expand);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDirectTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construction DirectTaxType tree node
    /// </summary>
    protected void processDirectTaxType()
    {
        SysDictEnum     dictEmum;
        int             taxTypeItemIndex;
        FormTreeItem    treeItem;

        //Process for direct tax type
        dictEmum = new SysDictEnum(enumNum(TaxWithholdType_IN));
        for (int position = 0; position < dictEmum.values(); position++)
        {
            if (dictEmum.index2Value(position) == TaxWithholdType_IN::TCS
                || dictEmum.index2Value(position) == TaxWithholdType_IN::TDS)
            {
                treeItem = new FormTreeItem(dictEmum.index2Label(position));
                //Add tax type node
                taxTypeItemIndex = treeControl.addItem(rootItemIndex, FormTreeAdd::Last, treeItem);
                this.addTaxInquiryTypeTreeItem(taxTypeItemIndex, dictEmum, position);
                treeControl.expand(taxTypeItemIndex, FormTreeExpand::Expand);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>