<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTTaxTransByReportingCodeContext_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json;

internal final class SAFTTaxTransByReportingCodeContext_PL implements System.IDisposable
{
    private static SAFTTaxTransByReportingCodeContext_PL instance;

    private TaxTrans taxTrans;
    private TaxTrans_W taxTrans_W;
    private boolean isOverdue;
    private boolean isCustOverduePaidCurMonth;
    private TransDate overdueExpiryDate;
    private TransDate overduePaymentDate;
    private OperationType operationType;
    private DocumentNum documentIdOverdue;
    private TransDate documentDateOverdue;
    private TransDate taxTransDateOverdue;
    private VatDueDate_W vatDueDateOverdue;
    private SalesDate_W salesDateOverdue;

    private VendTrans vendTrans;
    private CustTrans custTrans;
    private VendTable vendTable;
    private CustTable custTable;
    private GeneralJournalEntry generalJournalEntry;
    private LedgerJournalTrans ledgerJournalTrans;
    private CustInvoiceJour custInvoiceJourOverdue;
    private ProjInvoiceJour projInvoiceJourOverdue;
    private VendInvoiceJour vendInvoiceJourOverdue;
    private boolean isSADDocument;
    private DocumentNum documentIdSAD;
    private InventTransOrigin inventTransOrigin;

    private boolean isOverdueCalc;

    private Voucher prevGJEVoucher;
    private TransDate prevGJETransDate;

    private Voucher prevLJTVoucher;
    private TransDate prevLJTTransDate;

    private Voucher prevCustVendVoucher;
    private TransDate prevCustVendTransDate;
    private Voucher prevCustVoucher;
    private TransDate prevCustTransDate;
    private Voucher prevVendVoucher;
    private TransDate prevVendTransDate;

    private Voucher prevSADVoucher;
    private TransDate prevSADTransDate;

    private Voucher prevNonSADVoucher;
    private TransDate prevNonSADTransDate;
    private VendAccount nonSADVendAccount;

    private Voucher prevPurchReceiptDateVoucher;
    private TransDate prevPurchReceiptDateTransDate;
    private PurchReceiptDate_W prevPurchReceiptDate;

    private VendAccount prevVendAccount;
    private VendGroupId vendGroup;
    private CustAccount prevCustAccount;
    private CustGroupId custGroup;

    private InventTransId prevTransferId;

    private str custVendISOCode;
    private str custVendName_PL;
    private str VATNum_PL;

    private RefRecId prevRegistrationRecId;

    private Map vATNumByRetailTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        vATNumByRetailTrans = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SAFTTaxTransByReportingCodeContext_PL construct()
    {
        if (instance)
        {
            throw error("@StandardAuditFile_SAFT_W:NestingContextNotSupported");
        }
        else
        {
            instance = new SAFTTaxTransByReportingCodeContext_PL();
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of the class.
    /// </summary>
    /// <returns>The instance of the class. If no instance is created null is returned.</returns>
    public static SAFTTaxTransByReportingCodeContext_PL instance()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans</Name>
				<Source><![CDATA[
    public void initFromTaxTrans(TaxTrans _taxTrans)
    {
        taxTrans = _taxTrans;
        isOverdueCalc = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTrans</Name>
				<Source><![CDATA[
    public CustTrans getCustTrans()
    {
        this.calculateCustVendTrans();

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans</Name>
				<Source><![CDATA[
    public VendTrans getVendTrans()
    {
        this.calculateCustVendTrans();

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOnly</Name>
				<Source><![CDATA[
    public CustTrans getCustTransOnly()
    {
        this.calculateCustTrans();
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransOnly</Name>
				<Source><![CDATA[
    public VendTrans getVendTransOnly()
    {
        this.calculateVendTrans();
        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTrans_W</Name>
				<Source><![CDATA[
    public CustTrans_W getCustTrans_W()
    {
        this.calculateCustTrans();
        return custTrans.custTrans_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans_W</Name>
				<Source><![CDATA[
    public VendTrans_W getVendTrans_W()
    {
        this.calculateVendTrans();
        return vendTrans.vendTrans_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    public CustTable getCustTable()
    {
        this.calculateCustVendTrans();

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransOrigin getInventTransOrigin()
    {
        this.calculateTransferOrder();

        return inventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationData</Name>
				<Source><![CDATA[
    public container getTaxRegistrationData()
    {
        this.calculateTaxRegistration();

        return [custVendISOCode, custVendName_PL, VATNum_PL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    public VendTable getVendTable()
    {
        this.calculateCustVendTrans();

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendGroup</Name>
				<Source><![CDATA[
    public VendGroupId getVendGroup(VendAccount _vendAccount)
    {
        if (prevVendAccount != _vendAccount)
        {
            vendGroup = (select firstonly VendGroup from VendTable
                             where VendTable.AccountNum == _vendAccount).VendGroup;
            prevVendAccount = _vendAccount;
        }
        return vendGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustGroup</Name>
				<Source><![CDATA[
    public CustGroupId getCustGroup(CustAccount _custAccount)
    {
        if (prevCustAccount != _custAccount)
        {
            custGroup = (select firstonly CustGroup from CustTable
                             where CustTable.AccountNum == _custAccount).CustGroup;
            prevCustAccount = _custAccount;
        }
        return custGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalEntry</Name>
				<Source><![CDATA[
    public GeneralJournalEntry getGeneralJournalEntry()
    {
        if (prevGJEVoucher != taxTrans.Voucher || prevGJETransDate != taxTrans.TransDate)
        {
            generalJournalEntry = GeneralLedgerExtension::findBySubledgerVoucherAccountingDate(taxTrans.Voucher, taxTrans.TransDate);
            prevGJEVoucher = taxTrans.Voucher;
            prevGJETransDate = taxTrans.TransDate;
        }

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans getLedgerJournalTrans()
    {
        if (prevLJTVoucher != taxTrans.Voucher || prevLJTTransDate != taxTrans.TransDate)
        {
            ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(taxTrans.Voucher, taxTrans.TransDate);
            prevLJTVoucher = taxTrans.Voucher;
            prevLJTTransDate = taxTrans.TransDate;
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsOverdue</Name>
				<Source><![CDATA[
    public boolean getIsOverdue()
    {
        this.calculateOverdue();

        return isOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsCustOverduePaidCurMonth</Name>
				<Source><![CDATA[
    public boolean getIsCustOverduePaidCurMonth()
    {
        this.calculateOverdue();

        return isCustOverduePaidCurMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverdueExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves overdue expiry date.
    /// </summary>
    /// <returns>The overdue expiry date.</returns>
    public TransDate getOverdueExpiryDate()
    {
        this.calculateOverdue();

        return overdueExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverduePaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves overdue payment date.
    /// </summary>
    /// <returns>The overdue payment date.</returns>
    public TransDate getOverduePaymentDate()
    {
        this.calculateOverdue();

        return overduePaymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationType</Name>
				<Source><![CDATA[
    public OperationType getOperationType()
    {
        this.calculateOverdue();

        return operationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentIdOverdue</Name>
				<Source><![CDATA[
    public DocumentNum getDocumentIdOverdue()
    {
        this.calculateOverdue();

        return documentIdOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDateOverdue</Name>
				<Source><![CDATA[
    public TransDate getDocumentDateOverdue()
    {
        this.calculateOverdue();

        return documentDateOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDateOverdue</Name>
				<Source><![CDATA[
    public TransDate getTaxTransDateOverdue()
    {
        this.calculateOverdue();

        return taxTransDateOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVatDueDateOverdue</Name>
				<Source><![CDATA[
    public VatDueDate_W getVatDueDateOverdue()
    {
        this.calculateOverdue();

        return vatDueDateOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJourOverdue</Name>
				<Source><![CDATA[
    public CustInvoiceJour getCustInvoiceJourOverdue()
    {
        this.calculateOverdue();

        return custInvoiceJourOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceJourOverdue</Name>
				<Source><![CDATA[
    public ProjInvoiceJour getProjInvoiceJourOverdue()
    {
        this.calculateOverdue();

        return projInvoiceJourOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceJourOverdue</Name>
				<Source><![CDATA[
    public VendInvoiceJour getVendInvoiceJourOverdue()
    {
        this.calculateOverdue();

        return vendInvoiceJourOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSADDocument</Name>
				<Source><![CDATA[
    public boolean getIsSADDocument()
    {
        this.calculateSAD();

        return isSADDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentIdSAD</Name>
				<Source><![CDATA[
    public DocumentNum getDocumentIdSAD()
    {
        this.calculateSAD();

        return documentIdSAD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNonSADVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a vend account for not-intermediary vendTrans.
    /// </summary>
    /// <returns>The vend account.</returns>
    public VendAccount getNonSADVendAccount()
    {
        this.calculateNonSAD();

        return nonSADVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailVatNum</Name>
				<Source><![CDATA[
    internal VATNum getRetailVatNum(
        RetailTransactionId _transactionId,
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RefRecId _channel)
    {
        const str Delimiter = '#';
        VATNum ret;
        str retailTransKey = _transactionId + Delimiter + _storeId + Delimiter + _terminalId + Delimiter + int642Str(_channel);

        if (vATNumByRetailTrans.exists(retailTransKey))
        {
            ret = vATNumByRetailTrans.lookup(retailTransKey);
        }
        else
        {
            RetailTransactionFiscalCustomer fiscalCustomer;
            select firstonly SerializedData, RecId from fiscalCustomer
                where fiscalCustomer.Channel == _channel
                    && fiscalCustomer.Store == _storeId
                    && fiscalCustomer.Terminal == _terminalId
                    && fiscalCustomer.TransactionId == _transactionId;
    
            if (fiscalCustomer.RecId)
            {
                ret = this.deserializeVATNum(fiscalCustomer.SerializedData);
            }
            vATNumByRetailTrans.insert(retailTransKey, ret);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeVATNum</Name>
				<Source><![CDATA[
    internal VATNum deserializeVATNum(str _serializedData)
    {
        const str VatNumToken ='VatId';

        VATNum ret;
        if (_serializedData)
        {
            Linq.JObject jObj = JsonConvert::DeserializeObject(_serializedData);
            if (jObj && jObj.HasValues)
            {
                var jValue = jObj.GetValue(VatNumToken);
                if (jValue)
                {
                    ret = jValue.ToString();
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustVendTrans</Name>
				<Source><![CDATA[
    private void calculateCustVendTrans()
    {
        if (prevCustVendVoucher != taxTrans.Voucher || prevCustVendTransDate != taxTrans.TransDate)
        {
            custTrans = CustTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);

            if (custTrans)
            {
                custTable = CustTable::find(custTrans.AccountNum);
            }
            else
            {
                vendTrans = VendTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);

                if (vendTrans)
                {
                    vendTable = VendTable::find(vendTrans.AccountNum);
                }
            }
            prevCustVendVoucher = taxTrans.Voucher;
            prevCustVendTransDate = taxTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransferOrder</Name>
				<Source><![CDATA[
    private void calculateTransferOrder()
    {
        if (prevTransferId != taxTrans.InventTransId)
        {
            inventTransOrigin = InventTransOrigin::findByInventTransId(taxTrans.InventTransId);

            prevTransferId = taxTrans.InventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxRegistration</Name>
				<Source><![CDATA[
    private void calculateTaxRegistration()
    {
        if (prevRegistrationRecId != taxTrans.PartyTaxId)
        {
            TaxRegistration taxRegistration;
            TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
            DirPartyLocation dirPartyLocation;
            LogisticsLocation logisticsLocation;
            TaxCountryRegionParameters taxCountryRegionParameters;

            select firstonly RegistrationNumber from taxRegistration
            where taxRegistration.RecId == taxTrans.PartyTaxID
                join RecId from dirPartyLocation
            where dirPartyLocation.RecId == taxRegistration.DirPartyLocation
                join Description from logisticsLocation
            where logisticsLocation.RecId == dirPartyLocation.Location
                join CountryRegionId from taxRegistrationTypeApplicabilityRule
            where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                outer join SalesTaxCode from taxCountryRegionParameters
            where taxCountryRegionParameters.CountryRegionId == taxRegistrationTypeApplicabilityRule.CountryRegionId;

            custVendISOCode = taxCountryRegionParameters.SalesTaxCode;
            custVendName_PL = logisticsLocation.Description;
            VATNum_PL = taxRegistration.RegistrationNumber;

            prevRegistrationRecId = taxTrans.PartyTaxId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendTrans</Name>
				<Source><![CDATA[
    private void calculateVendTrans()
    {
        if (prevVendVoucher != taxTrans.Voucher || prevVendTransDate != taxTrans.TransDate)
        {
            select firstonly DocumentDate, DocumentNum, AccountNum, RecId from vendTrans
                index hint VoucherDateIdx
                where vendTrans.Voucher == taxTrans.Voucher
                    && vendTrans.TransDate == taxTrans.TransDate;
            prevVendVoucher = taxTrans.Voucher;
            prevVendTransDate = taxTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustTrans</Name>
				<Source><![CDATA[
    private void calculateCustTrans()
    {
        if (prevCustVoucher != taxTrans.Voucher || prevCustTransDate != taxTrans.TransDate)
        {
            select firstonly DocumentDate, DocumentNum, AccountNum, RecId from custTrans
                where custTrans.Voucher == taxTrans.Voucher &&
                      custTrans.TransDate == taxTrans.TransDate;
            prevCustVoucher = taxTrans.Voucher;
            prevCustTransDate = taxTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method fills in variable of <c>SAFTTaxTransByReportingCodeContext_PL</c>, connected with overdue.
    /// If for current <c>taxTrans</c> record there is a line in customer or vendor overdue journals, variable <c>isOverdue</c> will be set to True
    /// and <c>documentIdOverdue</c>, <c>documentDateOverdue</c> will be filled with value from CustTrans or VendTrans related to overdue transaction <c>TaxTrans</c>,
    /// otherwise <c>isOverdue</c> will be set to False and <c>documentIdOverdue</c>, <c>documentDateOverdue</c> will remain empty.
    /// If for current <c>taxTrans</c> record there is a line in customer overdue journal and <c>OverdueTaxAmountCur</c> of this line is negative,
    /// variable <c>operationType</c> is set to OverdueInvoice, otherwise PaidOverdueInvoice.
    /// If for current <c>taxTrans</c> record there is a line in vendor overdue journal and <c>OverdueTaxAmountCur</c> of this line is positive,
    /// variable <c>operationType</c> is set to OverdueInvoice, otherwise PaidOverdueInvoice.
    /// If for current <c>taxTrans</c> record there is a line in customer overdue journal, which corresponds to type OverdueInvoice,
    /// and there is also a line in customer overdue journal, which corresponds to type PaidOverdueInvoice and dates of this lines are in the same month,
    /// variable <c>isCustOverduePaidCurMonth</c> will be set to True, in other cases False.
    /// If for current <c>taxTrans</c> record there is no lines in customer or vendor overdue journals, parameter <c>isOverdue</c> will be set to False and
    /// variable <c>operationType</c> will be set to Invoice.
    /// </summary>
    private void calculateOverdue()
    {
        if (isOverdueCalc)
        {
            return;
        }

        isOverdueCalc = true;
        isOverdue = false;
        operationType = OperationType::Invoice;
        isCustOverduePaidCurMonth = false;
        projInvoiceJourOverdue.clear();
        custInvoiceJourOverdue.clear();

        if (!taxTrans_W.RecId)
        {
            select firstonly ReversedTaxTransRecId_W from taxTrans_W
                where taxTrans_W.TaxTrans == taxTrans.RecId;
        }

        if (!taxTrans_W.ReversedTaxTransRecId_W)
        {
            return;
        }        

        TaxTrans taxTransOrig;
        select firstonly Voucher, TransDate, Source from taxTransOrig
            where taxTransOrig.RecId == taxTrans_W.ReversedTaxTransRecId_W;

        if (taxTransOrig)
        {
            taxTransDateOverdue = taxTransOrig.TransDate;
            vatDueDateOverdue = TaxTrans_W::findByTaxTrans(taxTransOrig.RecId).VatDueDate_W;
            boolean isFromProjInvoice = taxTransOrig.Source == TaxModuleType::ProjectInvoice;

            CustTrans custTransOrig;
            select firstonly Closed, Invoice, DocumentDate, RecId from custTransOrig
                where custTransOrig.Voucher == taxTransOrig.Voucher
                    && custTransOrig.TransDate == taxTransOrig.TransDate;

            if (custTransOrig)
            {
                documentIdOverdue = custTransOrig.Invoice;
                documentDateOverdue = custTransOrig.DocumentDate;

                if (isFromProjInvoice)
                {
                    select firstonly RecId, DueDate, SalesDate_CZ from projInvoiceJourOverdue
                        where projInvoiceJourOverdue.LedgerVoucher == taxTransOrig.Voucher
                            && projInvoiceJourOverdue.InvoiceDate == taxTransOrig.TransDate;
                }
                
                if (!projInvoiceJourOverdue)
                {
                    select firstonly RecId, DueDate from custInvoiceJourOverdue
                    where custInvoiceJourOverdue.LedgerVoucher == taxTransOrig.Voucher
                        && custInvoiceJourOverdue.InvoiceDate == taxTransOrig.TransDate;
                }

                CustOverdueVATJournalTable_W custOverdueVATJournalTable_W, custPaidOverdueVATJournalTable_W;
                CustOverdueVATTurnJournalLine_W custOverdueVATTurnJournalLine_W, custPaidOverdueVATTurnJournalLine_W;

                select firstonly OverdueTaxAmountCur, RecId, TransRefRecId from custOverdueVATTurnJournalLine_W
                    where custOverdueVATTurnJournalLine_W.TransRefRecId == custTransOrig.RecId
                        && custOverdueVATTurnJournalLine_W.OverdueTaxAmountCur != 0
                exists join custOverdueVATJournalTable_W
                    where custOverdueVATJournalTable_W.JournalId == custOverdueVATTurnJournalLine_W.JournalId
                        && custOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                        && custOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;

                if (custOverdueVATTurnJournalLine_W.OverdueTaxAmountCur < 0)
                {
                    isOverdue = true;
                    operationType = OperationType::OverdueInvoice;
                    overdueExpiryDate = isFromProjInvoice ? projInvoiceJourOverdue.DueDate : custInvoiceJourOverdue.DueDate;
                    overduePaymentDate = dateNull();

                    date monthStartDate = dateStartMth(taxTrans.TransDate);
                    date monthEndDate = dateEndMth(taxTrans.TransDate);

                    select firstonly RecId from custPaidOverdueVATTurnJournalLine_W
                        where custPaidOverdueVATTurnJournalLine_W.TransRefRecId == custOverdueVATTurnJournalLine_W.TransRefRecId
                            && custPaidOverdueVATTurnJournalLine_W.OverdueTaxAmountCur > 0
                    exists join custPaidOverdueVATJournalTable_W
                        where custPaidOverdueVATJournalTable_W.JournalId == custPaidOverdueVATTurnJournalLine_W.JournalId
                            && (custPaidOverdueVATJournalTable_W.TransDate >= monthStartDate
                            && custPaidOverdueVATJournalTable_W.TransDate <= monthEndDate);

                    isCustOverduePaidCurMonth = custPaidOverdueVATTurnJournalLine_W.RecId != 0;
                }
                else
                {
                    isOverdue = true;
                    operationType = OperationType::PaidOverdueInvoice;
                    overdueExpiryDate = dateNull();

                    CustSettlement custSettlement;
                    select firstonly TransDate from custSettlement
                        order by custSettlement.RecId desc
                        where custSettlement.TransRecId == custTransOrig.RecId
                        && custSettlement.TransDate <= taxTrans.TransDate;

                    overduePaymentDate = custSettlement.TransDate;                    
                }
            }
            else
            {
                VendTrans vendTransOrig;
                select firstonly Invoice, DocumentDate, RecId from vendTransOrig
                    index hint VoucherDateIdx
                    where vendTransOrig.Voucher == taxTransOrig.Voucher
                        && vendTransOrig.TransDate == taxTransOrig.TransDate;

                if (vendTransOrig)
                {
                    VendTransRefRecId vendTransOrigRecId = vendTransOrig.RecId;
                    documentIdOverdue = vendTransOrig.Invoice;
                    documentDateOverdue = vendTransOrig.DocumentDate;

                    select firstonly RecId, PurchReceiptDate_W, DueDate from vendInvoiceJourOverdue
                        where vendInvoiceJourOverdue.LedgerVoucher == taxTransOrig.Voucher
                            && vendInvoiceJourOverdue.InvoiceDate == taxTransOrig.TransDate;

                    VendOverdueVATJournalTable_W vendOverdueVATJournalTable_W;
                    VendOverdueVATTurnJournalLine_W vendOverdueVATTurnJournalLine_W;

                    select firstonly OverdueTaxAmountCur from vendOverdueVATTurnJournalLine_W
                        where vendOverdueVATTurnJournalLine_W.TransRefRecId == vendTransOrigRecId
                            && vendOverdueVATTurnJournalLine_W.OverdueTaxAmountCur != 0
                    exists join vendOverdueVATJournalTable_W
                        where vendOverdueVATJournalTable_W.JournalId == vendOverdueVATTurnJournalLine_W.JournalId
                            && vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                            && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;

                    if (!vendOverdueVATTurnJournalLine_W)
                    {
                        vendOverdueVATTurnJournalLine_W = this.findTaxTransRelatedToVendOverdueVATJourCancellation(vendTransOrigRecId);
                    }
                    
                    isOverdue = true;
                    if (vendOverdueVATTurnJournalLine_W.OverdueTaxAmountCur > 0)
                    {
                        operationType = OperationType::OverdueInvoice;
                        overdueExpiryDate = vendInvoiceJourOverdue.DueDate;
                        overduePaymentDate = dateNull();
                    }
                    else
                    {
                        operationType = OperationType::PaidOverdueInvoice;
                        overdueExpiryDate = dateNull();

                        VendSettlement vendSettlement;
                        select firstonly TransDate from vendSettlement
                            order by vendSettlement.RecId desc
                            where vendSettlement.TransRecId == vendTransOrig.RecId
                                && vendSettlement.TransDate <= taxTrans.TransDate;

                        overduePaymentDate = vendSettlement.TransDate;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransRelatedToVendOverdueVATJourCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns overdue journal line for provided Vend trans reference and the current tax trans 
    /// under the assumption that Tax trans is related to cancellation of the overdue journal line.
    /// </summary>
    /// <param name = "_vendTransOrigRecId">The Vendor transaction record id.</param>
    /// <returns>Overdue journal line for provided Vend trans reference and the current tax trans</returns>
    private VendOverdueVATTurnJournalLine_W findTaxTransRelatedToVendOverdueVATJourCancellation(VendTransRefRecId _vendTransOrigRecId)
    {
        VendOverdueVATJournalTable_W vendOverdueVATJournalTable_W;
        VendOverdueVATTurnJournalLine_W vendOverdueVATTurnJournalLine_W;
        TaxTrans originalOverdueJourTaxTrans;
        TaxTrans_W originalOverdueJourTaxTrans_W;

        select firstonly OverdueTaxAmountCur from vendOverdueVATTurnJournalLine_W
            where vendOverdueVATTurnJournalLine_W.TransRefRecId == _vendTransOrigRecId
                && vendOverdueVATTurnJournalLine_W.OverdueTaxAmountCur != 0
                exists join vendOverdueVATJournalTable_W
                    where vendOverdueVATJournalTable_W.JournalId == vendOverdueVATTurnJournalLine_W.JournalId
                        && vendOverdueVATJournalTable_W.Cancelled == NoYes::Yes
                exists join originalOverdueJourTaxTrans
                    where originalOverdueJourTaxTrans.Voucher == vendOverdueVATJournalTable_W.LedgerVoucher
                        && originalOverdueJourTaxTrans.TransDate == vendOverdueVATJournalTable_W.TransDate
                        && originalOverdueJourTaxTrans.RecId != taxTrans.RecId
                exists join originalOverdueJourTaxTrans_W
                    where originalOverdueJourTaxTrans_W.TaxTrans == originalOverdueJourTaxTrans.RecId
                        && originalOverdueJourTaxTrans_W.ReversedTaxTransRecId_W == taxTrans_W.ReversedTaxTransRecId_W;

        return vendOverdueVATTurnJournalLine_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSAD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction corresponds to the SAD document.
    /// If correspondes, <c>isSADDocument</c> is set to True and <c>documentIdSAD</c> is set to Document Number, related to the SAD transaction <c>TaxTrans</c>,
    /// otherwise <c>documentIdSAD</c> is set to False.
    /// </summary>
    private void calculateSAD()
    {
        if (prevSADVoucher != taxTrans.Voucher || prevSADTransDate != taxTrans.TransDate)
        {
            VendInvoiceJour vendInvoiceJourSAD;
            PlSADTable plSADTable;

            select firstonly DocumentNum from vendInvoiceJourSAD
                where vendInvoiceJourSAD.LedgerVoucher == taxTrans.Voucher
                    && vendInvoiceJourSAD.InvoiceDate == taxTrans.TransDate
            exists join plSADTable
                where plSADTable.Voucher == vendInvoiceJourSAD.LedgerVoucher
                    && plSADTable.TransDate == vendInvoiceJourSAD.InvoiceDate
                    && plSADTable.SADDutyVend == vendInvoiceJourSAD.OrderAccount;

            if (vendInvoiceJourSAD.DocumentNum)
            {
                isSADDocument = true;
                documentIdSAD = vendInvoiceJourSAD.DocumentNum;
            }
            else
            {
                isSADDocument = false;
            }
            prevSADVoucher = taxTrans.Voucher;
            prevSADTransDate = taxTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNonSAD</Name>
				<Source><![CDATA[
    private void calculateNonSAD()
    {
        if (prevNonSADVoucher != taxTrans.Voucher || prevNonSADTransDate != taxTrans.TransDate)
        {
            VendTrans vendTransNonSAD;
            PlSADTable plSADTable;

            select firstonly AccountNum from vendTransNonSAD
                where vendTransNonSAD.Voucher  == taxTrans.Voucher
                    && vendTransNonSAD.TransDate == taxTrans.TransDate
                    && vendTransNonSAD.TransType == LedgerTransType::Purch
                exists join plSADTable
                where plSADTable.Voucher == vendTransNonSAD.Voucher
                    && plSADTable.TransDate == vendTransNonSAD.TransDate
                    && plSADTable.SADDutyVend != vendTransNonSAD.AccountNum;

            nonSADVendAccount = vendTransNonSAD.AccountNum;
            prevNonSADVoucher = taxTrans.Voucher;
            prevNonSADTransDate = taxTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTrans_W</Name>
				<Source><![CDATA[
    internal TaxTrans_W parmTaxTrans_W(TaxTrans_W _taxTrans_W = taxTrans_W)
    {
        taxTrans_W = _taxTrans_W;
        return taxTrans_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLJTPurchReceiptDate</Name>
				<Source><![CDATA[
    internal PurchReceiptDate_W getLJTPurchReceiptDate()
    {
        if (prevPurchReceiptDateVoucher != taxTrans.Voucher || prevPurchReceiptDateTransDate != taxTrans.TransDate)
        {
            prevPurchReceiptDate = (select firstonly maxof(ReceiptDate_W) from LedgerJournalTrans
                where LedgerJournalTrans.Voucher == taxTrans.Voucher && LedgerJournalTrans.TransDate == taxTrans.TransDate).ReceiptDate_W;

            prevPurchReceiptDateVoucher = taxTrans.Voucher;
            prevPurchReceiptDateTransDate = taxTrans.TransDate;
        }

        return prevPurchReceiptDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>