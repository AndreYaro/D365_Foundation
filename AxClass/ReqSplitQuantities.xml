<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSplitQuantities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqSplitQuantities</c> class distributes an amount among several groups, for example, item
///    quantities among kanbans, while meeting the optional minimum and maximum constraints for each of
///    them.
/// </summary>
/// <remarks>
///    This class provides the number of groups and what amount each of them should contain while
///    minimizing the excess of groups that are required due to minimum sizes of constraints and while
///    minimizing the number of groups.
/// </remarks>
public class ReqSplitQuantities
{
    Qty     quantityToSplit;
    Qty     minimum;
    Qty     maximum;

    Qty     quantityAfterSplit;
    List    quantityDistribution;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaximum</Name>
				<Source><![CDATA[
        public Qty parmMaximum(Qty _maximum = maximum)
    {
        maximum = _maximum;

        return maximum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimum</Name>
				<Source><![CDATA[
        public Qty parmMinimum(Qty _minimum = minimum)
    {
        minimum = _minimum;

        return minimum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityAfterSplit</Name>
				<Source><![CDATA[
        public Qty parmQuantityAfterSplit()
    {
        return quantityAfterSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDistribution</Name>
				<Source><![CDATA[
        public List parmQuantityDistribution()
    {
        return quantityDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityToSplit</Name>
				<Source><![CDATA[
        public Qty parmQuantityToSplit(Qty _quantityToSplit = quantityToSplit)
    {
        quantityToSplit = _quantityToSplit;

        return quantityToSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines a distribution of the <c>QuantityToSplit</c> parameter among a number of groups so that
    ///    the <c>mimimum</c> and <c>maximum</c> values are respected inside each group quantity.
    /// </summary>
    /// <remarks>
    ///    The <c>split</c> method will distribute the groups by keeping the total amount as close as possible
    ///    to the value of the <c>quantityToSplit</c> parameter. Having a minimum per group makes this
    ///    scenario possible as the final amount after the distribution may be higher than the initial one.At
    ///    last, it will target getting the minimum number of groups.Example 1: Having set a minimum of 50, a
    ///    maximum of 60, and a quantity to split of 210, the result will be: [60, 50, 50, 50]. No elements
    ///    are in excess, with a total of 210.Example 2: Having set a minimum of 50, a maximum of 60 and a
    ///    quantity to split of 70, the result will be: [50, 50]. This has an excess of 30, which is a total
    ///    of 100.Results can be obtained by calling the <c>parmQuantityDistribution</c> and
    ///    <c>parmQuantityAfterSplit</c> methods.
    /// </remarks>
    private void split()
    {
        Qty     quantityGroup;
        Qty     quantityGroupBeforeMinimum;
        Qty     quantityBetweenMinimumAndMaximum = maximum - minimum;
        Qty     quantityToRedistribute;
        int     numberOfGroups;
        int     i;

        if (    (maximum > 0  &&  minimum > maximum)
            ||  quantityToSplit < 0
            ||  minimum < 0
            ||  maximum < 0)
        {
            error(Error::wrongUseOfFunction(funcname()));
            return;
        }

        quantityDistribution = new List(Types::Real);
        quantityAfterSplit   = 0;

        if (quantityToSplit > 0)
        {
            // If maximum is not set (value 0), then return a single element with
            // MAX(quantity, minimum).
            if (!maximum)
            {
                quantityAfterSplit = max(quantityToSplit, minimum);
                quantityDistribution.addEnd(quantityAfterSplit);
            }
            // If maximum is set...
            else
            {
                // The number of groups will be rounding up quantityToSplit / maximum
                numberOfGroups = real2int(roundUp((quantityToSplit / maximum), 1));

                // Initially, the contents of each group will be maximum in all but one, that
                // will have the reminder letf
                quantityGroupBeforeMinimum = quantityToSplit - (maximum * (numberOfGroups - 1));
                quantityGroup = max(quantityGroupBeforeMinimum, minimum);
                quantityDistribution.addEnd(quantityGroup);
                quantityAfterSplit = quantityGroup;

                // If the contents of the last group are below the minimum, calculate how much
                // is the difference, and substract those from the other groups
                // (keeping them above the minimum)
                if (quantityGroupBeforeMinimum < minimum)
                {
                    quantityToRedistribute = minimum - quantityGroupBeforeMinimum;
                }

                for (i=0; i<numberOfGroups-1; i++)
                {
                    quantityGroup = maximum - (min(quantityToRedistribute, quantityBetweenMinimumAndMaximum));
                    quantityDistribution.addEnd(quantityGroup);
                    quantityAfterSplit += quantityGroup;
                    quantityToRedistribute -= maximum - quantityGroup;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqSplitQuantities construct()
    {
        return new ReqSplitQuantities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMaximum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class, constraining it only by a maximum split quantity.
    /// </summary>
    /// <param name="_quantityToSplit">
    ///    The amount to distribute in groups, based on the minimum and maximum criteria.
    /// </param>
    /// <param name="_maximum">
    ///    The maximum amount per group.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    public static ReqSplitQuantities newMaximum (Qty _quantityToSplit, Qty _maximum)
    {
        return ReqSplitQuantities::newMinimumMaximum(_quantityToSplit,0,_maximum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMinimum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class, constraining it only by a minimum split quantity.
    /// </summary>
    /// <param name="_quantityToSplit">
    ///    The amount to distribute in groups, based on the minimum and maximum criteria.
    /// </param>
    /// <param name="_minimum">
    ///    The minimum amount per group.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    public static ReqSplitQuantities newMinimum (Qty _quantityToSplit, Qty _minimum)
    {
        return ReqSplitQuantities::newMinimumMaximum(_quantityToSplit,_minimum,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMinimumMaximum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class, constraining it only by a minimum and a maximum split
    ///    quantity.
    /// </summary>
    /// <param name="_quantityToSplit">
    ///    The amount to distribute in groups, based on the minimum and maximum criteria.
    /// </param>
    /// <param name="_minimum">
    ///    The minimum amount per group.
    /// </param>
    /// <param name="_maximum">
    ///    The maximum amount per group.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    public static ReqSplitQuantities newMinimumMaximum (Qty _quantityToSplit, Qty _minimum, Qty _maximum)
    {
        ReqSplitQuantities  reqSplitQuantities = ReqSplitQuantities::construct();

        reqSplitQuantities.parmQuantityToSplit(_quantityToSplit);
        reqSplitQuantities.parmMinimum(_minimum);
        reqSplitQuantities.parmMaximum(_maximum);

        reqSplitQuantities.split();

        return reqSplitQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the class.
    /// </summary>
    /// <param name="_quantityToSplit">
    ///    The amount to distribute in groups, based on the minimum and maximum criteria.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    public static ReqSplitQuantities newStandard (Qty _quantityToSplit)
    {
        return ReqSplitQuantities::newMinimumMaximum(_quantityToSplit, 0, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>