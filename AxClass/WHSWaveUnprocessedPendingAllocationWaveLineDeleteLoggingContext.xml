<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext</c> is used to log data during wave line deletion if unprocessed pending allocation records are exist.
/// </summary>
internal final class WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext implements System.IDisposable
{
    private static WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext instance;

    private boolean logWaveLineDeleteData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext construct()
    {
        return new WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    internal static WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLogWaveLineDeleteDataParameter</Name>
				<Source><![CDATA[
    internal static boolean currentLogWaveLineDeleteDataParameter()
    {
        return instance ? instance.parmLogWaveLineDeleteData() : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameter</Name>
				<Source><![CDATA[
    internal static WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext newFromParameter(boolean _logWaveLineDeleteData)
    {
        var context = WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext::construct();

        context.parmLogWaveLineDeleteData(_logWaveLineDeleteData);

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogWaveLineDeleteData</Name>
				<Source><![CDATA[
    internal boolean parmLogWaveLineDeleteData(boolean _logWaveLineDeleteData = logWaveLineDeleteData)
    {
        logWaveLineDeleteData = _logWaveLineDeleteData;
        return logWaveLineDeleteData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>