<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOpeningReportController_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerOpeningReportController_ES</c> class is the controller class for the
/// <c>LedgerOpening_ES</c> report.
/// </summary>
public class LedgerOpeningReportController_ES extends SrsReportRunController implements BatchRetryable
{
    private const str ReportNameStr = ssrsReportStr(LedgerOpeningReport_ES, Report);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        LedgerOpeningSheet_ES   ledgerOpeningSheet;
        LedgerOpeningTable_ES   tmpLedgerOpeningTable;

        if (args && args.record())
        {
            switch (args.dataset())
            {
                case tablenum(LedgerOpeningSheet_ES):
                    ledgerOpeningSheet = args.record();
                    break;

                case tablenum(LedgerOpeningTable_ES):
                    tmpLedgerOpeningTable = args.record();
                    ledgerOpeningSheet = LedgerOpeningSheet_ES::find(tmpLedgerOpeningTable.Sheet);
                    break;
            }
        }

        if (ledgerOpeningSheet == null)
        {
            throw error("@SYS18626");
        }

        query = this.getFirstQuery();
        queryBuildDataSource = query.dataSourceTable(tablenum(LedgerOpeningSheet_ES));
        queryBuildDataSource.addRange(fieldnum(LedgerOpeningSheet_ES, RecId)).value(queryValue(ledgerOpeningSheet.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoES, GlobalizationConstants::FeatureReferenceES00006] ],
            funcName()
        );

        SrsReportRunController  controller = new LedgerOpeningReportController_ES();
        controller.parmReportName(ReportNameStr);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>