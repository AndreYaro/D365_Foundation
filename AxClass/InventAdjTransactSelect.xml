<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjTransactSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventAdjTransactSelect extends InventAdjSelect
{
    boolean             dummy1;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
         dummy1
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
        void initQueryRun()
    {
        queryRun = new QueryRun(queryStr(InventTransAdjustment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        InventModelTypeCache    inventModelTypeCache    = InventModelTypeCache::construct();
        InventModelType         inventModelType;

        setprefix(InventAdjTransactSelect::description());

        try
        {
            ttsbegin;

            if (! this.validate())
                throw error("@SYS18447");

            delete_from tmpFormLookUp;
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.addInventProfileCostAdjAllowedRange_RU();
            }
            // </GEERU>

            Counter lineCount = 1;
            while (queryRun.next())
            {
                if (!queryRun.changed(tablenum(InventTrans)))
                    continue;

                InventTrans inventTrans = queryRun.get(tablenum(InventTrans),1);
                InventTransOrigin inventTransOrigin = queryRun.get(tablenum(InventTransOrigin),1);

                if (   inventTrans.Qty > 0
                    && inventTrans.isUpdatedFinancial()
                    // <GEERU>
                    && inventModelTypeCache.inventModelType(InventTable::modelGroupIdByItemId(inventTrans.ItemId), inventTransCurrency).allowTransactionAdjustment(inventTrans))
                    // </GEERU>
                {
                    tmpFormLookUp.DateFinancial     = inventTrans.DateFinancial;
                    tmpFormLookUp.ItemId            = inventTrans.ItemId;
                    tmpFormLookUp.InventDimId       = inventTrans.InventDimId;
                    tmpFormLookUp.Qty               = inventTrans.Qty;
                    // <GEERU>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        tmpFormLookUp.PostedValue       = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? inventTrans.CostAmountPosted     : inventTrans.CostAmountSecCurPosted_RU;
                        tmpFormLookUp.ValueAdjustment   = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? inventTrans.CostAmountAdjustment : inventTrans.CostAmountSecCurAdjustment_RU;
                    }
                    else
                    {
                    // </GEERU>
                        tmpFormLookUp.PostedValue       = inventTrans.CostAmountPosted;
                        tmpFormLookUp.ValueAdjustment   = inventTrans.CostAmountAdjustment;
                    // <GEERU>
                    }
                    // </GEERU>
                    tmpFormLookUp.AdjustNow         = 0;
                    tmpFormLookUp.TransRecId        = inventTrans.RecId;
                    tmpFormLookUp.LineNo            = lineCount;
                    tmpFormLookUp.ReferenceCategory = inventTransOrigin.ReferenceCategory;
                    tmpFormLookUp.ReferenceId = inventTransOrigin.ReferenceId;
                    tmpFormLookUp.insert();
                    lineCount++;
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        do
        {
            inventModelType = inventModelTypeCache.nextCachedInventModelType();
            if (inventModelType && ! inventModelType.allowTransactionAdjustment())
            {
                Box::infoOnce(  InventAdj_Transact::description(),
                                strfmt("@SYS104803",inventModelType.isSettled() ? "@SYS104361" : "@SYS104360"),
                                this.lastValueElementName());
                break;
            }
        }
        while (inventModelType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                if (base)
                    ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static InventAdjTransactSelect construct()
    {
        return new InventAdjTransactSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static ClassDescription description()
    {
        return "@SYS2245";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static InventAdjTransactSelect newFromForm(TmpFormLookUp           tmpFormLookUp,
                                                      InventTransCurrency_RU  inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventAdjTransactSelect inventAdjTransactSelect = InventAdjTransactSelect::construct();

        inventAdjTransactSelect.getLast();
        inventAdjTransactSelect.setTmpFormLookUp(tmpFormLookUp);

        // <GEERU>
        inventAdjTransactSelect.parmInventTransCurrency_RU(inventTransCurrency);
        // </GEERU>
        return inventAdjTransactSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
