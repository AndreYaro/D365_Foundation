<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemPackingSlip_Adj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPostItemPackingSlip_Adj extends ProjPostItemPackingSlip
{
    TmpProjAdjustmentCreate tmpProjAdjustmentCreate;
    boolean                 useTransId;
    int                     costValueCURMultiplier;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the budget amount.
    /// </summary>
    public void budgetUpdate()
    {
        ProjBudgetTransactionManager  projBudgetTransactionManager;
        ProjBudgetTransactionLine     projBudgetTransactionLine;
        ProjBudgetTransaction         projBudgetTransaction;

        if (!this.parmTransIdOrig())
        {
            if (projTrans.qty() != 0)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(ProjItemTrans::findInvent(projTrans.inventTransId(),projTrans.projAdjustRefId()));
                if (this.parmPostItemPhysically() && FeatureStateProvider::isFeatureEnabled(ProjCancelItemReqPackingSlipFeature::instance()))
                {
                    projBudgetTransactionLine.parmCostAmount(projTrans.transCostItemPhysical());
                }
                else
                {
                    projBudgetTransactionLine.parmCostAmount(projTrans.transCost());
                }
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);

                if (!projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement))
                {
                    throw Exception::Error;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a budget update is required.
    /// </summary>
    /// <returns>
    ///    true if a budget update is required; otherwise, false.
    /// </returns>
    public boolean checkUpdateBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// The cost amount for the transaction.
    /// </returns>
    protected AmountCur costValueCUR()
    {
        AmountCur amountCur;

        if (this.parmTransactionOrigin() != projOrigin::ItemJournal
         && this.parmTransactionOrigin() != projOrigin::ItemRequirement
         && this.parmTransactionOrigin() != projOrigin::PurchaseOrder)
        {
            amountCur = projTrans.transCostBalance();
        }
        // If no transaction can be found with the posting type of the new transaction, use the amount from currrent adjustment transaction
        if (!amountCur)
        {
            // To check the adjustment transaction cost amount, qty and item model type to make it as negative amount
            if (projTrans.parmCostAmount() < 0 && projTrans.qty() < 0 && InventTable::find(projTrans.itemId()).modelGroup().inventModelType().stdCostBased())
            {
                amountCur = - projTrans.transCost();
            }
            else
            {
                amountCur = projTrans.transCost();
            }
        }

        return (costValueCURMultiplier * amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastUpdate</Name>
				<Source><![CDATA[
    public void forecastUpdate()
    {
        if (projItemTrans.TransactionOrigin==ProjOrigin::ItemJournal
        || projItemTrans.TransactionOrigin==ProjOrigin::PurchaseOrder
        || projItemTrans.TransactionOrigin==ProjOrigin::VendorInvoice
        || projItemTrans.TransactionOrigin==ProjOrigin::ItemRequirement)
        {
            if (!this.parmTransIdOrig()) //it is an creating new trans
            {
                if (projTrans.qty() > 0)
                {
                    super();
                }
            }
            else  //it is reversing transaction
            {
                if (projTrans.qty() < 0)
                {
                    super();
                }
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference transaction ID that is associated with the project transaction.
    /// </summary>
    /// <returns>
    /// The reference transaction ID.
    /// </returns>
    protected ProjTransIdBase getRefTransId()
    {
        ProjTransIdBase projTransIdBase;

        if ((projTrans.transType() == ProjTransType::Revenue && projTrans.salesPrice() < 0)
            || (projTrans.transType() != ProjTransType::Revenue && projTrans.qty() < 0) || this.parmTransIdOrig())
        {
            projTransIdBase  = this.parmTransIdOrig();
        }

        return projTransIdBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemTrans</Name>
				<Source><![CDATA[
    public ProjItemTrans initItemTrans()
    {
        return ProjItemTrans::initTransFromAdjustment(tmpProjAdjustmentCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerStatusCostOrig</Name>
				<Source><![CDATA[
    public boolean parmLedgerStatusCostOrig(boolean _useLedgerStatusCostOrig = ledgerStatusCostOrig)
    {
        ledgerStatusCostOrig = _useLedgerStatusCostOrig;
		if (projTrans)
        {
            projTrans.parmLedgerStatusCostOrig(_useLedgerStatusCostOrig);
        }
        return ledgerStatusCostOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        Common      _buffer,
        boolean     _useTransId = false)
    {
        useTransId             = _useTransId;
        costValueCURMultiplier = 1;

        if (_buffer.TableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = _buffer;
            projTrans               = ProjTrans::newTmpProjAdjustmentCreate(tmpProjAdjustmentCreate);
        }

        if (useTransId)
        {
            this.parmTransIdCost(projTrans.transId());
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostValueCURMultiplier</Name>
				<Source><![CDATA[
    public int parmCostValueCURMultiplier(int _costValueCURMultiplier = costValueCURMultiplier)
    {
        costValueCURMultiplier = _costValueCURMultiplier;

        return costValueCURMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    public LedgerPostingType postingTypeCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return LedgerPostingType::ProjStatusAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for the project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    public LedgerPostingType postingTypeOffsetCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return LedgerPostingType::ProjOffsetAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        projItemTrans.clear();

        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        projItemTrans                    = this.initItemTrans();

        projItemTrans.VoucherPackingSlip = ledgerVoucher.lastVoucher();
        projItemTrans.ProjAdjustRefId    = this.parmAdjustRefId();

        if (this.parmAdjustment())
        {
            projItemTrans.AdjRefTransId = this.parmAdjRefTransId();
        }

        if (! projItemTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            projItemTrans.IsCorrection          = this.isTransCorrection();
        }
        // </GEEU>
        projItemTrans.insert();

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(projItemTrans.ProjTransId);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(projItemTrans.ProjTransId);
        }

        if (ProjPost::checkCreateProjCost(projItemTrans.ItemId,projItemTrans.ProjId))
        {
            this.updateProjItemTransCost(projItemTrans, ledgerVoucher.lastVoucher());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>