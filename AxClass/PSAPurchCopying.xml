<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAPurchCopying</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllHeader, tableStr(PurchReqTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllLines, tableStr(PurchReqTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyJournalHeader, tableStr(PurchReqTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyJournalLines, tableStr(PurchReqTable))]
public class PSAPurchCopying
{
    PurchReqTable   m_tPurchReqTable;

    TmpFrmVirtual   tmpFrmVirtualLines;
    TmpFrmVirtual   tmpFrmVirtualHeader;

    Qty             qtyFactor;

    NoYes           reverseSign;
    NoYes           recalculateAmount;
    NoYes           copyMarkup;
    NoYes           copyPrecisely;
    NoYes           deleteLines;
    NoYes           startingLineNum;

    LineNum         lineNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    void copy()
    {
        ForecastSales           tFromForecastSales;
        PurchReqLine            tPurchReqLine;
        NoYes                   searchPrice;
        NoYes                   copyQty;

        ttsbegin;

        if (recalculateAmount)
        {
            searchPrice= NoYes::Yes;
        }
        else
        {
            searchPrice= NoYes::No;
        }

        copyQty = qtyFactor ? NoYes::Yes : NoYes::No;

        while select tmpFrmVirtualLines order by num
        {
            tPurchReqLine.clear();

            tPurchReqLine.initFromPurchReqTable(m_tPurchReqTable);

            tPurchReqLine.initValue();

            switch (tmpFrmVirtualLines.tableNum)
            {
                case tablenum(ForecastSales)        :   select forupdate firstonly * from tFromForecastSales
                                                            where tFromForecastSales.RecId == tmpFrmVirtualLines.RecordNo;
                                                        tPurchReqLine.initFromForecastSales(tFromForecastSales, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLines.qty);

                                                        break;
            }

            if (copyQty)
            {
                tPurchReqLine.PurchQty     = reverseSign ? -tPurchReqLine.PurchQty : tPurchReqLine.PurchQty;
                tPurchReqLine.PurchQty     = tPurchReqLine.PurchQty* qtyFactor;
            }

            tPurchReqLine.lineAmount    = reverseSign ? -tPurchReqLine.lineAmount : tPurchReqLine.lineAmount;

            tPurchReqLine.calcLineAmount();

            tPurchReqLine.createLine(1,0);

            if (tmpFrmVirtualLines.tableNum == tablenum(ForecastSales))
            {
                tFromForecastSales.PSARefPurchLine = tpurchReqLine.RecId;
                tFromForecastSales.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(PurchReqTable _purchReqTable,
                        TmpFrmVirtual  _tmpFrmVirtualLines,
                        TmpFrmVirtual  _tmpFrmVirtualHeader,
                        Qty            _qtyFactor         = 1,
                        NoYes          _reverseSign       = NoYes::No,
                        NoYes          _recalculateAmount = NoYes::No,
                        NoYes          _copyMarkup        = NoYes::No,
                        NoYes          _copyPrecisely     = NoYes::No,
                        NoYes          _deleteLines       = NoYes::No)
    {
        m_tPurchReqTable    = _purchReqTable;
        tmpFrmVirtualLines  = _tmpFrmVirtualLines;
        tmpFrmVirtualHeader = _tmpFrmVirtualHeader;
        qtyFactor           = _qtyFactor;
        reverseSign         = _reverseSign;
        recalculateAmount   = _recalculateAmount;
        copyMarkup          = _copyMarkup;
        copyPrecisely       = _copyPrecisely;
        deleteLines         = _deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        startingLineNum = NoYes::No;
        lineNum         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PSAPurchCopying construct(SalesPurchCopy _salesPurchCopy)
    {
        SalesPurchCopyFactoryAttribute attr = new SalesPurchCopyFactoryAttribute(_salesPurchCopy, tableStr(PurchReqTable));
        PSAPurchCopying psaPurchCopying = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PSAPurchCopying), attr) as PSAPurchCopying;

        if (!psaPurchCopying)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return psaPurchCopying;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>