<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCostForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransCostForecast extends ProjTransCost
{
    ProjForecastCost projForecastCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projForecastCost.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransStatusBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction can be invoiced based on its status.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    boolean canTransStatusBeInvoiced(boolean     _chargeable = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the category ID for this transaction.
    /// </summary>
    /// <returns>
    /// The category ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return projForecastCost.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost price for this transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public CostPrice costPrice()
    {
        return projForecastCost.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code for sales amounts that are reported by this transaction.
    /// </summary>
    /// <returns>
    /// The currency code for sales amounts that are reported by this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projForecastCost.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultdimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimensions for this transaction.
    /// </summary>
    /// <returns>
    /// The default dimension for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden to provide the necessary
    /// functionality for the specific cost transaction.
    /// </remarks>
    public DimensionDefault defaultdimension()
    {
        return projForecastCost.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate to use for the sales amounts that are reported by this transaction,
    /// based on the transaction date.
    /// </summary>
    /// <param name="_transDate">
    /// The date to use to find the exchange rate. Defaults to the transaction date; optional.
    /// </param>
    /// <returns>
    /// The exchange rate to use for the sales amounts that are reported by this transaction.
    /// </returns>
    public ExchRate exchRateSales(TransDate _transDate = dateNull())
    {
        return projForecastCost.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastEliminationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected elimination date for this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjForecastEliminationDate    forecastEliminationDate()
    {
        return projForecastCost.EliminationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected invoice date for this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjForecastInvoiceDate    forecastInvoiceDate()
    {
        return projForecastCost.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the forecast model for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ForecastModelId forecastModelId()
    {
        return projForecastCost.ModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projForecastCost.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projForecastCost.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjForecastCost _projForecastCost)
    {
        projForecastCost  = _projForecastCost;

        super(_projForecastCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projForecastCost.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public Qty qty()
    {
        return projForecastCost.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// A resource record ID.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projForecastCost.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the resource category record ID for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The resource category record ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projForecastCost.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public SalesPrice  salesPrice()
    {
        return projForecastCost.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projForecastCost.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public TransDate   transDate()
    {
        return projForecastCost.StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projForecastCost.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction text, that is, the description.
    /// </summary>
    /// <returns>
    /// The transaction text, that is, the description.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return projForecastCost.Txt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>