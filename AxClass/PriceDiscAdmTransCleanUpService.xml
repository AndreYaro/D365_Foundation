<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmTransCleanUpService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscAdmTransCleanUpService</c> deletes invalid records in <c>PriceDiscAdmTable<c> and <c>PriceDiscAdmTrans<c> tables.
/// </summary>
internal final class PriceDiscAdmTransCleanUpService extends SysOperationServiceController
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes invalid records in <c>PriceDiscAdmTable<c> and <c>PriceDiscAdmTrans<c> tables.
    /// </summary>
    internal void deleteRecords()
    {
        const str PriceDiscAdmTransDeleteStatement = 'DELETE FROM PRICEDISCADMTRANS WHERE PRICEDISCADMTRANS.FROMDATE > PRICEDISCADMTRANS.TODATE ';
        const str PriceDiscAdmTableDeleteStatement = 'DELETE FROM PRICEDISCADMTABLE WHERE NOT EXISTS(SELECT NULL FROM PRICEDISCADMTRANS WHERE PRICEDISCADMTRANS.JOURNALNUM = PRICEDISCADMTABLE.JOURNALNUM)';
        const str PriceDiscTableDeleteStatement = 'DELETE FROM PRICEDISCTABLE WHERE PRICEDISCTABLE.FROMDATE > PRICEDISCTABLE.TODATE AND PRICEDISCTABLE.TODATE <> \'%1\' ';

        str datenullStr =  date2Str(dateNull(), 321, DateDay::Digits1or2, DateSeparator::Hyphen, DateMonth::Digits1or2, DateSeparator::Hyphen, DateYear::Digits4, 0);

        if (PriceDiscAdmTransCleanUpFlight::instance().isEnabled())
        {
            this.executeSqlQuery(strFmt(PriceDiscTableDeleteStatement, datenullStr));
            this.executeSqlQuery(PriceDiscAdmTransDeleteStatement);
            this.executeSqlQuery(PriceDiscAdmTableDeleteStatement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlQuery</Name>
				<Source><![CDATA[
    private void executeSqlQuery(str _sqlQueryStatementText)
    {
        str sqlQueryStatementText = strLRTrim(_sqlQueryStatementText);

        if (sqlQueryStatementText)
        {
            Connection connection = new Connection();

            SqlStatementExecutePermission permission = new SqlStatementExecutePermission(sqlQueryStatementText);

            permission.assert();

            Statement statement = connection.createStatement();

            try
            {
                statement.executeUpdateWithParameters(sqlQueryStatementText, null);
            }
            catch
            {
                throw Global::error("@SYS99562");
            }
            finally
            {
                CodeAccessPermission::revertAssert();

                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>