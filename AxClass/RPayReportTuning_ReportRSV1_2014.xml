<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReportTuning_ReportRSV1_2014</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReportTuning_ReportRSV1_2014 extends RPayReportTuning
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    public void lookup(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1:
                this.lookupEDT(extendedtypenum(RpayBudgetFund), _lookupCtrl);
                break;

            case 5, 7:
                _lookupCtrl.replaceOnLookup(true);
                this.lookupEDT(extendedtypenum(RPayRateCode), _lookupCtrl);
                break;

            case 2, 3, 4:
                _lookupCtrl.replaceOnLookup(true);
                this.lookupEDT(extendedtypenum(RpayFundDeductionCode), _lookupCtrl);
                break;

            case 8, 9, 10, 11, 12:
                _lookupCtrl.replaceOnLookup(false);
                this.lookupEDT(extendedtypenum(RpayFundDeductionCode), _lookupCtrl);
                break;

            case 6:
                sysTableLookup = SysTableLookup::newParameters(tablenum(RPayGroupTable), _lookupCtrl);
                query.addDataSource(tablenum(RPayGroupTable));

                query.dataSourceNo(1).addRange(fieldnum(RPayGroupTable, Blocked)).value(queryValue(NoYes::No));

                sysTableLookup.addLookupfield(fieldnum(RPayGroupTable, PayGroup));
                sysTableLookup.addLookupfield(fieldnum(RPayGroupTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayReportName _reportName, FormRun _formRun)
    {
        parameterName = [literalStr("@RUP732"),
                         literalStr("@RUP3427"),
                         literalStr("@RUP3428"),
                         literalStr("@RUP2990"),
                         literalStr("@RUP3429"),
                         literalStr("@RUP2160"),
                         literalStr("@RUP108"),
                         literalStr("@SYP4881376"),
                         literalStr("@SYP4881377"),
                         literalStr("@SYP4881378"),
                         literalStr("@SYP4881379"),
                         literalStr("@SYP4881380")];

        super(_reportName, _formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportTemplate</Name>
				<Source><![CDATA[
    public void openReportTemplate()
    {
        ComExcelDocument_RU doc = new ComExcelDocument_RU();

        doc.open(RPayReportRSV1_2014::fullTemplateName(), true);
    }
]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    public void printReport()
    {
        new MenuFunction(menuitemoutputstr(RPayReportRSV1_2014), MenuItemType::Output).run(new Args());
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        RPayFundDeductionTable  rPayFundDeductionTable;

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1:
                if (rPayReportTuningTable.Parameter &&
                    (select firstonly rpayCounterTable
                        where rpayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                              rpayCounterTable.LineType    == RPayCtypeType::BudgetFund       &&
                              rpayCounterTable.CounterType == RPayCounterType::Fund).RecId == 0)
                {
                    return checkFailed(strfmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldpname(rpayCounterTable, CounterUnit),
                                       tablepname(rpayCounterTable)));
                }
                break;

            case 2, 3, 4:
                if (rPayReportTuningTable.Parameter &&
                    RPayFundDeductionTable::find(rPayReportTuningTable.Parameter).RecId == 0)
                {
                    return checkFailed(strfmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPname(RPayFundDeductionTable, RpayFundDeductionCode),
                                       tablePname(RPayFundDeductionTable)));
                }
                break;

            case 6:
                if (rPayReportTuningTable.Parameter &&
                    (select firstonly rpayGroupTable
                        where rpayGroupTable.PayGroup == rPayReportTuningTable.Parameter &&
                              rpayGroupTable.Blocked  == NoYes::No).RecId == 0)
                {
                    return checkFailed(strfmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldpname(RPayGroupTable, PayGroup),
                                       tablepname(RPayGroupTable)));
                }
                break;

            case 5, 7:
                if (rPayReportTuningTable.Parameter &&
                    RPayRateTable::find(rPayReportTuningTable.Parameter).RecId == 0)
                {
                    return checkFailed(strfmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldpname(RPayRateTable, PayRate),
                                       tablepname(RPayRateTable)));
                }
                break;
            case 8, 9, 10, 11, 12:
                if (rPayReportTuningTable.Parameter)
                {
                    query = new Query();
                    qbds = query.addDataSource(tablenum(RPayFundDeductionTable));
                    qbds.addRange(fieldnum(RPayFundDeductionTable, RpayFundDeductionCode)).value(rPayReportTuningTable.Parameter);
                    qbds.addSelectionField(fieldnum(RPayFundDeductionTable, RecId), SelectionField::Count);
                    queryRun = new QueryRun(query);

                    queryRun.next();
                    rPayFundDeductionTable = queryRun.get(tablenum(RPayFundDeductionTable));

                    if (rPayFundDeductionTable.RecId == 0)
                    {
                        return checkFailed(strfmt("@GLS106038",
                                           rPayReportTuningTable.Parameter,
                                           fieldpname(RPayFundDeductionTable, RpayFundDeductionCode),
                                           tablepname(RPayFundDeductionTable)));
                    }
                }
                break;
        }

        return true;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>