<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelectSales_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingSelectSales_Proj extends ProjPeriodPostingSelectSales
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        #define.two(2)

        DialogRunbase  dialogRunbase = super();

        dialogRunbase.addGroup("@SYS90565");
        if (reverseTurnover)
        {
            dialogReverseTurnover   = dialogRunbase.addFieldValue(enumStr(ProjRevenueDirection), ProjRevenueDirection::ReverseRevenue);
        }
        else
        {
            dialogReverseTurnover   = dialogRunbase.addFieldValue(enumStr(ProjRevenueDirection), ProjRevenueDirection::AccrueRevenue);
        }
        dialogRunbase.addGroup("@SYS78373",dialogGroupCostSale);

        dialogEmplSalesPrice    = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionHours),      queryEmpl,    "@SYS5269",  "@SYS78368");
        dialogCostSalesPrice    = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionCost),       queryCost,  "@SYP4882014", "@SYS78369");
        dialogItemSalesPrice    = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionItem),       queryItem,  "@SYS7407",  "@SYS78372");
        dialogRevenueSalesPrice = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionRevenue),    queryRevenue, "@SYS9154", "@SYS78371");

        dialogRunbase.addGroup("@SYS54242");
        dialogFromDate      = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209",  "@SYS90467");
        dialogToDate        = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), toDate,   "@SYS14656", "@SYS90468");

        dialogRunbase.addGroup("@SYS23410");
        dialogTransDate = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), transActionDate, "@SYS14475", "@SYS90567");

        dialogGroupCostSale = dialogRunbase.addGroup('');
        dialogGroupCostSale.frameType(1);
        dialogGroupCostSale.columns(#two);

        this.initQuery();
        dialogRunbase.useConfigKey(true);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ProjRevenueDirection projRevenueDirection;

        ret = super();

        projRevenueDirection = dialogReverseTurnover.value();
        if (projRevenueDirection == ProjRevenueDirection::ReverseRevenue)
        {
            this.parmReverseTurnover(true);
        }
        else
        {
            this.parmReverseTurnover(false);
        }

        this.parmTransActionDate(dialogTransDate.value());

        this.parmQueryCost(dialogCostSalesPrice.value());
        this.parmQueryEmpl(dialogEmplSalesPrice.value());
        this.parmQueryRevenue(dialogRevenueSalesPrice.value());
        this.parmQueryItem(dialogItemSalesPrice.value());

        this.parmFromDate(dialogFromDate.value());
        this.parmToDate(dialogToDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        QueryBuildRange     queryRangeProjId;
        QueryBuildRange     queryRangeProjInvoiceId;
        
        projTableDataSource   = queryRun.query().dataSourceTable(tableNum(ProjTable));

        if (!this.enableProjMultipleContractLinesForProjectFeature)
        {
            QueryBuildRange queryRangeTimeMaterial = queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,Type));
            queryRangeTimeMaterial.status(RangeStatus::Hidden);
        }

        queryRangeProjId        = queryRun.query().dataSourceTable(tableNum(ProjTable)).rangeField(fieldNum(ProjTable,ProjId));
        queryRangeProjInvoiceId = queryRun.query().dataSourceTable(tableNum(ProjTable)).rangeField(fieldNum(ProjTable,ProjInvoiceProjId));

        emplDataSource          = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
        emplDataSourceSale      = queryRun.query().dataSourceTable(tableNum(ProjEmplTransSale));
        costDataSource          = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
        costDataSourceSale      = queryRun.query().dataSourceTable(tableNum(ProjCostTransSale));
        itemDataSource          = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));
        itemDataSourceSale      = queryRun.query().dataSourceTable(tableNum(ProjItemTransSale));
        revenueDataSource       = queryRun.query().dataSourceTable(tableNum(ProjRevenueTrans));
        revenueDataSourceSale   = queryRun.query().dataSourceTable(tableNum(ProjRevenueTransSale));

        queryRangeProjId.value(projId);
        queryRangeProjInvoiceId.value(projInvoiceId);

        this.initQueryEmpl();
        this.initQueryCost();
        this.initQueryItem();
        this.initQueryRevenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        Query                   query = new Query();
        QueryBuildDataSource    dsProjTable, dsProjEmplTrans, dsProjCostTrans, dsProjItemTrans, dsProjRevenueTrans;
        QueryBuildDataSource    dsProjEmplTransSale, dsProjCostTransSale, dsProjItemTransSale, dsProjRevenueTransSale;

        dsProjTable         = query.addDataSource(tableNum(ProjTable));

        dsProjEmplTrans     = dsProjTable.addDataSource(tableNum(ProjEmplTrans));
        dsProjEmplTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjEmplTrans,ProjId));

        dsProjEmplTransSale = dsProjEmplTrans.addDataSource(tableNum(ProjEmplTransSale));
        dsProjEmplTransSale.relations(true);
        dsProjEmplTransSale.joinMode(JoinMode::ExistsJoin);

        dsProjCostTrans     = dsProjTable.addDataSource(tableNum(ProjCostTrans));
        dsProjCostTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjCostTrans,ProjId));

        dsProjCostTransSale = dsProjCostTrans.addDataSource(tableNum(ProjCostTransSale));
        dsProjCostTransSale.relations(true);
        dsProjCostTransSale.joinMode(JoinMode::ExistsJoin);

        dsProjItemTrans     = dsProjTable.addDataSource(tableNum(ProjItemTrans));
        dsProjItemTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjItemTrans,ProjId));

        dsProjItemTransSale = dsProjItemTrans.addDataSource(tableNum(ProjItemTransSale));
        dsProjItemTransSale.relations(true);
        dsProjItemTransSale.joinMode(JoinMode::ExistsJoin);

        dsProjRevenueTrans     = dsProjTable.addDataSource(tableNum(ProjRevenueTrans));
        dsProjRevenueTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjRevenueTrans,ProjId));

        dsProjRevenueTransSale = dsProjRevenueTrans.addDataSource(tableNum(ProjRevenueTransSale));
        dsProjRevenueTransSale.relations(true);
        dsProjRevenueTransSale.joinMode(JoinMode::ExistsJoin);

        queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRange</Name>
				<Source><![CDATA[
    void setQueryRange()
    {
        QueryBuildRange     queryRangeProjId;
        QueryBuildRange     queryRangeProjInvoiceId;

        this.getLast();

        projTableDataSource         = queryRun.query().dataSourceTable(tableNum(ProjTable));

        queryRangeProjId            = queryRun.query().dataSourceTable(tableNum(ProjTable)).findRange(fieldNum(ProjTable,ProjId));
        if (! queryRangeProjId)
        {
            queryRangeProjId        = queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,ProjId));
        }

        queryRangeProjInvoiceId     = queryRun.query().dataSourceTable(tableNum(ProjTable)).findRange(fieldNum(ProjTable,ProjInvoiceProjId));
        if (!queryRangeProjInvoiceId)
        {
            queryRangeProjInvoiceId = queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,ProjInvoiceProjId));
        }

        queryRangeProjId.value(projId);
        queryRangeProjInvoiceId.value(projInvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS87008";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>