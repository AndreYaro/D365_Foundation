<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IdentityCardEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
#IdentityCardValue_RU
class IdentityCardEngine_RU
{
    IdentityCardTable_RU identityCardTable;
    EmployeeTable_RU     employeeTable;
    str                  errorMessage;
    str                  retString;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        public boolean check()
    {
        if (this.checkSeries() &&
            this.checkNumber() &&
            this.checkIssueDate())
        {
            if (employeeTable.IdentityCardIssueBy)
                return true;
            else
                return checkFailed("@GLS106187");
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkByPattern</Name>
				<Source><![CDATA[
        #define.russianLetters ("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ")
    #define.validRomanSymbols("IVXLCDM")
    private boolean checkByPattern(str _string, str _pattern)
    {
        char currentSymbol;
        str  tmpStr;
        int  i,j;
        str  string = strLTrim(_string);

        j = 1;
        for (i = 1 ; i <= strLen(_pattern); i++)
        {
            currentSymbol = subStr(string,j,1);
            tmpStr        = currentSymbol;
            switch (subStr(_pattern,i,1))
            {
                case #romanFigure:
                    if ( ! currentSymbol ||
                        currentSymbol == #blankSymbol ||
                        (! isInteger(currentSymbol)    &&
                        ! strScan(#validRomanSymbols,currentSymbol,1,5)))
                    {
                        errorMessage = int2str(i) + "@GLS106157";
                        return false;
                    }
                    tmpStr = "";
                    if (isInteger(currentSymbol))
                    {
                        while (currentSymbol && isInteger(currentSymbol))
                        {
                            tmpStr += currentSymbol;
                            j++;
                            currentSymbol = subStr(string,j,1);
                        }
                        tmpStr = arabic2Roman(str2int(tmpStr));
                    }
                    else
                    {
                        while (currentSymbol && strScan(#validRomanSymbols,currentSymbol,1,5))
                        {
                            tmpStr += currentSymbol;
                            j++;
                            currentSymbol = subStr(string,j,1);
                        }
                    }
                    break;

                case #arabicFigureMandatory:
                    j++;
                    if (! currentSymbol               ||
                        currentSymbol == #blankSymbol ||
                        ! isInteger(currentSymbol))
                    {
                        errorMessage = int2str(i) + "@GLS106158";
                        return false;
                    }
                    break;

                case #arabicFigure:
                    j++;
                    if (! isInteger(currentSymbol))
                    {
                        errorMessage = int2str(i) + "@GLS106158";
                        return false;
                    }
                    break;

                case #russianLetter:
                    j++;
                    tmpStr = strUpr(currentSymbol);
                    if (! currentSymbol               ||
                        currentSymbol == #blankSymbol ||
                        ! strScan(#russianLetters,tmpStr,1,32))
                    {
                        errorMessage = int2str(i) + "@GLS106159";
                        return false;
                    }
                    break;

                case #blankSymbol:
                    if (currentSymbol != #blankSymbol)
                    {
                        tmpStr = #blankSymbol;
                    }
                    else
                    {
                        j++;
                    }
                    break;

                case #hyphenSymbol:
                    if (currentSymbol != #hyphenSymbol)
                    {
                        if (currentSymbol == #blankSymbol)
                        {
                            j++;
                        }
                        tmpStr = #hyphenSymbol;
                    }
                    else
                    {
                        j++;
                    }
                    break;

                case #arbitrarysymbol:
                    j++;
                    break;
            }

            retString += tmpStr;
        }
        if (subStr(string,j,1))
        {
            errorMessage = "@GLS106160";
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIssueDate</Name>
				<Source><![CDATA[
        public boolean checkIssueDate()
    {
        DirPersonBirthDate birthDate;

        if (! employeeTable.IdentityCardIssueDate)
        {
            return checkFailed("@GLS106162");
        }

        if (identityCardTable.IdentityCardIssueAge)
        {
            birthDate = HcmPersonPrivateDetails::findByPerson(employeeTable.worker().Person).BirthDate;
            if (! birthDate)
            {
                return checkFailed("@GLS106161");
            }
            if (yearDiff(employeeTable.IdentityCardIssueDate, birthDate) < identityCardTable.IdentityCardIssueAge)
            {
                return checkFailed("@GLS106163");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumber</Name>
				<Source><![CDATA[
        public boolean checkNumber(IdentityCardNumber_RU _code = '', str _pattern = '')
    {
        boolean ret;

        retString = "";

        if (prmisDefault(_code))
        {
            if (! identityCardTable)
            {
                error("@GLS106164");
                return ret;
            }
            if (! identityCardTable.IdentityCardPatternNumber)
            {
                return true;
            }

            ret = this.checkByPattern(employeeTable.IdentityCardNumber, identityCardTable.IdentityCardPatternNumber);

            if (ret)
            {
                employeeTable.IdentityCardNumber = retString;
            }
        }
        else
        {
            ret = this.checkByPattern(_code, _pattern);
        }

        if (errorMessage)
        {
            error(strFmt(errorMessage,"@GLS106165"));
            errorMessage = "";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSeries</Name>
				<Source><![CDATA[
        public boolean checkSeries(IdentityCardSeries_RU _code = '', str _pattern = '')
    {
        boolean ret;

        retString = "";

        if (prmisDefault(_code))
        {
            if (! identityCardTable)
            {
                error("@GLS106164");
                return ret;
            }
            if (! identityCardTable.IdentityCardPatternSeries)
            {
                return true;
            }

            ret = this.checkByPattern(employeeTable.IdentityCardSeries, identityCardTable.IdentityCardPatternSeries);

            if (ret)
            {
                employeeTable.IdentityCardSeries = retString;
            }
        }
        else
        {
            ret = this.checkByPattern(_code, _pattern);
        }

        if (errorMessage)
        {
            error(strFmt(errorMessage,"@GLS106166"));
            errorMessage = "";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvHolder</Name>
				<Source><![CDATA[
        public EmployeeTable_RU parmAdvHolder(EmployeeTable_RU _employeeTable = employeeTable)
    {
        if (employeeTable != _employeeTable)
        {
            employeeTable       = _employeeTable;
            identityCardTable   = IdentityCardTable_RU::find(employeeTable.IdentityCard);
        }

        return employeeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmployeeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks given employee table
    /// </summary>
    /// <param name="_employeeTable">
    ///   record to check
    /// </param>
    /// <returns>
    ///   true, if record is ok
    /// </returns>
    public static boolean checkEmployeeTable(EmployeeTable_RU _employeeTable)
    {
        return IdentityCardEngine_RU::newFromEmployeeTable(_employeeTable).check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static IdentityCardEngine_RU construct()
    {
        return new IdentityCardEngine_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEmployeeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates instance of the class by given employee
    /// </summary>
    /// <param name="_employeeTable">
    ///   employee record
    /// </param>
    /// <returns>
    ///   new instance
    /// </returns>
    public static IdentityCardEngine_RU newFromEmployeeTable(EmployeeTable_RU _employeeTable)
    {
        IdentityCardEngine_RU identityCardEngine = IdentityCardEngine_RU::construct();

        identityCardEngine.parmAdvHolder(_employeeTable);
        return identityCardEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>