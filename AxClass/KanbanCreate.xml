<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanCreate</c> class creates kanbans based on a kanban rule or another kanban.
/// </summary>
/// <remarks>
/// The base class is abstract.
/// </remarks>
public abstract class KanbanCreate extends RunBase
{
    Kanban                          kanban;
    KanbanRule                      kanbanRule;
    BOMId                           bomId;
    ItemId                          itemId;
    InventDimId                     inventDimId;
    List                            listQuantitiesPerKanban;
    KanbanManual                    manual;
    KanbanExpress                   priority;
    KanbanDueDateTime               dueDateTime;

    InventTable                     inventTable;
    InventDim                       inventDim;

    LeanRuleStatusBase              kanbanRuleStatus;
    List                            listKanban;

    UnitOfMeasureSymbol             unitOfMeasureSymbol;

    KanbanSourceRequirementParm     kanbanSourceRequirementParm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates one or more kanbans and returns the new kanbans in a <c>List</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>List</c> object that has kanbans.
    /// </returns>
    public List create()
    {
        this.run();
        return listKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates one or more kanbans from a kanban rule.
    /// </summary>
    protected void createKanban()
    {
        ListEnumerator      le = listQuantitiesPerKanban.getEnumerator();

        if (listQuantitiesPerKanban.elements())
        {
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);

            ttsbegin;
            while (le.moveNext())
            {
                //initialize
                Kanban kanbanLocal = this.initKanban(le.current(),inventDimGroupSetup);

                if (kanbanLocal.QuantityOrdered != 0)
                {
                    if (this.validateKanban(kanbanLocal))
                    {
                        //create kanban and jobs
                        this.insertKanban(kanbanLocal);
                        KanbanCreateJobs::newStandard(kanbanLocal).runOperation();
                        this.createWithdrawalKanbanWave(kanbanLocal);

                        //must refresh before insert into list; creating jobs updates kanban
                        listKanban.addEnd(Kanban::find(kanbanLocal.RecId));
                    }
                    else
                    {
                        throw error("@SYS319214");
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWithdrawalKanbanWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates related WHS records if the kanban is a withdrawal kanban.
    /// </summary>
    /// <param name="_kanbanLocal">
    /// The <c>Kanban</c> table record to use to initialize the WHS records.
    /// </param>
    protected void createWithdrawalKanbanWave(Kanban _kanbanLocal)
    {
        if (_kanbanLocal.Type == LeanKanbanType::Withdrawal)
        {
            WHSPoolKanbanJobPickingList::createPoolAndWave(_kanbanLocal.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the kanban due date and time.
    /// </summary>
    /// <returns>
    /// A <c>KanbanDueDateTime</c> temporal value.
    /// </returns>
    protected KanbanDueDateTime dueDateTime()
    {
        return dueDateTime ? dueDateTime : DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result = super();

        if (!listKanban)
        {
            listKanban = new List(Types::Record);
        }

        kanbanRuleStatus = kanbanRule ? kanbanRule.status() : null;
        KanbanRule kanbanRuleActive = KanbanRule::find(kanbanRuleStatus.getActiveRule());
        kanbanRule = kanbanRuleActive ? kanbanRuleActive : kanbanRule;

        inventTable      = InventTable::find(itemId);
        inventDim        = InventDim::find(inventDimId);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a kanban record.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> table buffer to initialize.
    /// </param>
    /// <param name="_quantity">
    /// The quantity for the kanban.
    /// </param>
    /// <returns>
    /// The initialized <c>Kanban</c> record.
    /// </returns>
    protected Kanban initFromKanban(
        Kanban    _kanban,
        InventQty _quantity)
    {
        Kanban  kanbanLocal;

        kanbanLocal.data(_kanban);
        kanbanLocal.initFromKanban(kanban);
        kanbanLocal.KanbanRule = kanbanRule.RecId;
        kanbanLocal.initFromKanbanRule();

        return kanbanLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a kanban record.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> table buffer to initialize.
    /// </param>
    /// <param name="_quantity">
    /// The quantity for the kanban.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// A <c>InventDimGroupSetup</c> used for initialization.
    /// </param>
    /// <returns>
    /// The initialized <c>Kanban</c> record.
    /// </returns>
    protected Kanban initFromKanbanRule(
        Kanban              _kanban,
        InventQty           _quantity,
        InventDimGroupSetup _inventDimGroupSetup)
    {
        Kanban  kanbanLocal;

        kanbanLocal.data(_kanban);
        kanbanLocal.initFromKanbanRule(kanbanRule);
        kanbanLocal.initFromPlanReference();
        kanbanLocal.initFromInventTable(inventTable);
        kanbanLocal.initFromInventDim(inventDim,_inventDimGroupSetup);

        return kanbanLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a kanban record.
    /// </summary>
    /// <param name="_quantity">
    ///    The quantity for the kanban.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    ///    A <c>InventDimGroupSetup</c> object to use to initialize the kanban.
    /// </param>
    /// <returns>
    ///    The initialized <c>Kanban</c> record.
    /// </returns>
    protected Kanban initKanban(
        InventQty           _quantity,
        InventDimGroupSetup _inventDimGroupSetup)
    {
        Kanban          kanbanLocal;

        // general initialization
        kanbanLocal.initValue();

        // rule or kanban specific initialization
        if (kanban)
        {
            kanbanLocal = this.initFromKanban(kanbanLocal,_quantity);
        }
        else
        {
            kanbanLocal = this.initFromKanbanRule(kanbanLocal,_quantity,_inventDimGroupSetup);
        }

        // complete general initialization
        kanbanLocal.DueDateTime   = this.dueDateTime();
        kanbanLocal.Manual        = manual;
        kanbanLocal.Express       = priority;

        if (kanbanLocal.Type == LeanKanbanType::Withdrawal)
        {
            kanbanLocal.ExpectedDateTime = kanbanLocal.DueDateTime;
            kanbanLocal.bomId            = '';
            kanbanLocal.bomDataAreaId    = '';
        }

        // if a specific BOM was requested, set it here; otherwise the BOMId will be set when the picking list is created
        if (kanbanLocal.Type == LeanKanbanType::Manufacturing)
        {
            kanbanLocal.bomId         = bomId ? bomId : kanbanLocal.bomId;
            kanbanLocal.bomDataAreaId = kanbanLocal.bomId ? appl.company().dataArea(tableNum(BOMTable)) : '';
        }

        if (_quantity != 0)
        {
            kanbanLocal.QuantityOrdered = _quantity;
        }

        LeanRuleData leanRuleData   = kanbanRule.ruleData();
        InventQty    minQty         = leanRuleData.minQty();
        InventQty    maxQty         = max(leanRuleData.maxQty(),kanbanLocal.QuantityOrdered);
        kanbanLocal.QuantityOrdered = min(maxQty,max(minQty,kanbanLocal.QuantityOrdered));

        return kanbanLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a kanban record into the database.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record to insert.
    /// </param>
    protected void insertKanban(Kanban _kanban)
    {
        _kanban.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomId</Name>
				<Source><![CDATA[
    public BOMId parmBomId(BOMId _bomId = bomId)
    {
        bomId = _bomId;
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDateTime</Name>
				<Source><![CDATA[
    public KanbanDueDateTime parmDueDateTime(KanbanDueDateTime _dueDateTime = dueDateTime)
    {
        dueDateTime = _dueDateTime;
        return dueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanSourceRequirementParm</Name>
				<Source><![CDATA[
    public KanbanSourceRequirementParm parmKanbanSourceRequirementParm(KanbanSourceRequirementParm _kanbanSourceRequirementParm = kanbanSourceRequirementParm)
    {
        kanbanSourceRequirementParm = _kanbanSourceRequirementParm;

        return kanbanSourceRequirementParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListQuantitiesPerKanban</Name>
				<Source><![CDATA[
    public List parmListQuantitiesPerKanban(List _listQuantitiesPerKanban = listQuantitiesPerKanban)
    {
        listQuantitiesPerKanban = _listQuantitiesPerKanban;
        return listQuantitiesPerKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManual</Name>
				<Source><![CDATA[
    public KanbanManual parmManual(KanbanManual _manual = manual)
    {
        manual = _manual;
        return manual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriority</Name>
				<Source><![CDATA[
    public KanbanExpress parmPriority(KanbanExpress _priority = priority)
    {
        priority = _priority;
        return priority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates one or more kanbans.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        setPrefix(KanbanCreate::description());

        this.init();
        try
        {
            ttsbegin;
            if (!this.validate())
            {
                throw error("@SYS18447");
            }
            this.createKanban();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory unit of the kanban item.
    /// </summary>
    /// <returns>
    /// A <c>UnitOfMeasureSymbol</c> string value.
    /// </returns>
    protected UnitOfMeasureSymbol unitOfMeasureSymbol()
    {
        if (!unitOfMeasureSymbol)
        {
            unitOfMeasureSymbol = inventTable.inventUnitId();
        }

        return unitOfMeasureSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified creation parameters.
    /// </summary>
    /// <param name="_calledFrom">
    /// The caller object.
    /// </param>
    /// <returns>
    /// true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean result = super(_calledFrom);

        if (!kanbanRule)
        {
            result = checkFailed("@SYS319219");
        }
        else
        {
            if (kanbanRule.LegalEntity != CompanyInfo::current())
            {
                result = checkFailed(strFmt("@SYS332730",kanbanRule.RuleId));
            }
        }

        if (   !kanbanRuleStatus
            || kanbanRuleStatus.isOutdated())
        {
            throw error(strFmt("@SYS138402",kanbanRule.RuleId));
        }

        if (!itemId)
        {
            result = checkFailed("@SYS319220");
        }
        else
        {
            if (!inventTable)
            {
                result = checkFailed(strFmt(InventTable::txtNotExist(),itemId));
            }
        }

        if (!inventDimId)
        {
            result = checkFailed("@SYS319221");
        }
        else
        {
            if (!inventDim)
            {
                checkFailed(strFmt("@SYS72900",inventDimId));
            }
        }

        if (!listQuantitiesPerKanban)
        {
            result = checkFailed("@SYS319222");
        }

        result = result && KanbanItemCheckKanbanRule::newStandard(kanbanRule,itemId,kanbanRule.kanbanFlow(),true,false).isAllowed();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified <c>Kanban</c> record.
    /// </summary>
    /// <param name="_kanbanLocal">
    ///    A <c>Kanban</c> record to validate.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    protected boolean validateKanban(Kanban _kanbanLocal)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description for the class.
    /// </summary>
    /// <returns>
    /// A description of the class.
    /// </returns>
    public static Description description()
    {
        return "@SYS300262";
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeListQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>List</c> object that can be used to construct a <c>KanbanCreate</c> object.
    /// </summary>
    /// <param name="_numberOfKanbansToCreate">
    ///    The number of kanbans to create.
    /// </param>
    /// <param name="_quantityPerKanban">
    ///    The quantity per kanban.
    /// </param>
    /// <returns>
    ///    A <c>List</c> object that can be used with a <c>KanbanCreate</c> object if the quantity per kanban
    ///    is constant.
    /// </returns>
    public static List makeListQuantities(
        int            _numberOfKanbansToCreate,
        KanbanQuantity _quantityPerKanban)
    {
        List    list = new List(Types::Real);
        int     i;

        for (i = 1; i <= _numberOfKanbansToCreate; i++)
        {
            list.addEnd(_quantityPerKanban);
        }
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new <c>KanbanCreate</c> object.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> record to use to initialize new kanbans.
    /// </param>
    /// <param name="_listQuantitiesPerKanban">
    ///    A <c>List</c> object that contains kanban quantities.
    /// </param>
    /// <param name="_manual">
    ///    A Boolean value that indicates whether the kanbans must be marked as manual kanbans; optional.
    /// </param>
    /// <param name="_priority">
    ///    A Boolean value that indicates whether the kanbans must be marked as priority kanbans; optional.
    /// </param>
    /// <param name="_dueDateTime">
    ///    A temporal value that is used to initialize the due date and time of kanbans; optional.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanCreate</c> object.
    /// </returns>
    /// <remarks>
    ///    Use this constructor to copy existing kanbans.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An invalid kanban was specified.
    /// </exception>
    public static KanbanCreate newKanban(
        Kanban            _kanban,
        List              _listQuantitiesPerKanban,
        KanbanManual      _manual      = NoYes::No,
        KanbanExpress     _priority    = NoYes::No,
        KanbanDueDateTime _dueDateTime = DateTimeUtil::minValue())
    {
        KanbanRule      kanbanRule = _kanban.kanbanRule();

        if (   !_kanban
            || !kanbanRule)
        {
             throw error(Error::wrongUseOfFunction(funcName()));
        }

        KanbanCreate kanbanCreate = KanbanCreate::newReplenishmentStrategy(kanbanRule.ReplenishmentStrategy);

        kanbanCreate.parmKanban(_kanban);
        kanbanCreate.parmKanbanRule(kanbanRule);
        kanbanCreate.parmItemId(_kanban.ItemId);
        kanbanCreate.parmInventDimId(_kanban.InventDimId);
        kanbanCreate.parmBomId(_kanban.bomId);
        kanbanCreate.parmListQuantitiesPerKanban(_listQuantitiesPerKanban);
        kanbanCreate.parmManual(_manual);
        kanbanCreate.parmPriority(_priority);
        kanbanCreate.parmDueDateTime(_dueDateTime);

        return kanbanCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReplenishmentStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>KanbanCreate</c> object based on a <c>LeanReplenishmentStrategy</c> enumeration
    ///    value.
    /// </summary>
    /// <param name="_leanReplenishmentStrategy">
    ///    A <c>LeanReplenishmentStrategy</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanCreate</c> object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An invalid replenishment strategy was specified.
    /// </exception>
    private static KanbanCreate newReplenishmentStrategy(LeanReplenishmentStrategy _leanReplenishmentStrategy)
    {
        KanbanCreate    kanbanCreate;

        switch (_leanReplenishmentStrategy)
        {
            case LeanReplenishmentStrategy::Fixed:
                kanbanCreate = KanbanCreateFixed::construct();
                break;
            case LeanReplenishmentStrategy::Event:
                kanbanCreate = KanbanCreateVariableEvent::construct();
                break;
            case LeanReplenishmentStrategy::Scheduled:
                kanbanCreate = KanbanCreateVariableScheduled::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return kanbanCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>KanbanCreate</c> object.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> record to use to initialize new kanbans.
    /// </param>
    /// <param name="_itemId">
    ///    An <c>ItemId</c> string value that specifies the item to create kanbans for.
    /// </param>
    /// <param name="_inventDimId">
    ///    An <c>InventDimId</c> value that specifies the inventory dimensions for the kanban.
    /// </param>
    /// <param name="_bomId">
    ///    A <c>BOMId</c> string value that specifies the BOM for the kanban.
    /// </param>
    /// <param name="_listQuantitiesPerKanban">
    ///    A <c>List</c> object that contains kanban quantities.
    /// </param>
    /// <param name="_manual">
    ///    A Boolean value that indicates whether the kanbans must be marked as manual kanbans; optional.
    /// </param>
    /// <param name="_priority">
    ///    A Boolean value that indicates whether the kanbans must be marked as priority kanbans; optional.
    /// </param>
    /// <param name="_dueDateTime">
    ///    A temporal value to use to initialize the due date and time of kanbans; optional.
    /// </param>
    /// <param name="_kanbanSourceRequirementParm">
    ///    The source requirement parameters for the kanbans to create; optional.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanCreate</c> object.
    /// </returns>
    /// <remarks>
    ///    Use this constructor to copy existing kanbans.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An invalid kanban rule was specified.
    /// </exception>
    public static KanbanCreate newStandard(
        KanbanRule                  _kanbanRule,
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        BOMId                       _bomId,
        List                        _listQuantitiesPerKanban,
        KanbanManual                _manual                      = NoYes::No,
        KanbanExpress               _priority                    = NoYes::No,
        KanbanDueDateTime           _dueDateTime                 = DateTimeUtil::minValue(),
        KanbanSourceRequirementParm _kanbanSourceRequirementParm = null)
    {
        if (!_kanbanRule)
        {
             throw error(Error::wrongUseOfFunction(funcName()));
        }

        KanbanCreate kanbanCreate = KanbanCreate::newReplenishmentStrategy(_kanbanRule.ReplenishmentStrategy);

        kanbanCreate.parmKanbanRule(_kanbanRule);
        kanbanCreate.parmItemId(_itemId);
        kanbanCreate.parmInventDimId(_inventDimId);
        kanbanCreate.parmBomId(_bomId);
        kanbanCreate.parmListQuantitiesPerKanban(_listQuantitiesPerKanban);
        kanbanCreate.parmManual(_manual);
        kanbanCreate.parmPriority(_priority);
        kanbanCreate.parmDueDateTime(_dueDateTime);
        kanbanCreate.parmKanbanSourceRequirementParm(_kanbanSourceRequirementParm);

        return kanbanCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
