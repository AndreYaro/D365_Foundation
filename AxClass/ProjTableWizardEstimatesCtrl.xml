<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableWizardEstimatesCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTableWizardEstimatesCtrl extends ProjTableWizard
{
    ProjId      oldId, newId;
    Array       oldIdArray, newIdArray;
    ProjTable   projTableNew;
    int         maxProjCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createdQtyDB</Name>
				<Source><![CDATA[
    int createdQtyDB()
    {
        return any2int((select count(RecId) from projWIPTable).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdQtyFile</Name>
				<Source><![CDATA[
    Integer createdQtyFile()
    {
        ProjTable  projTableTemp, projTableTemp2;
        int        tmpCount;

        projTableTemp.setTmp();
        projTableTemp.setTmpData(this.parmProjTable());

        projTableTemp2.setTmp();
        insert_recordset projTableTemp2(ProjId)
        select wipProject from projTableTemp group by wipProject where projTableTemp.wipProject != '';

        while select projTableTemp2
        {
            tmpCount++;
        }

        return tmpCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static Name description()
    {
        return "@SYS78777";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEquivalentId</Name>
				<Source><![CDATA[
    ProjId getEquivalentId(ProjId _newProjId)
    {
        int i = 1;

        if (_newProjId)
        {
            while (i <= this.parmProjCount())
            {
                if (_newProjId == this.parmNewProjArray().value(i))
                {
                    return this.parmOldProjArray().value(i);
                }
                i++;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    boolean init()
    {
        oldIdArray = new Array(Types::String);
        newIdArray = new Array(Types::String);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDB</Name>
				<Source><![CDATA[
    void insertDB()
    {
        ProjTable projTableTempNew;
        ProjWIPTable projWIPTableDB, projWIPTableFile;
        ProjId oldProjId, oldWIPProjId;

        ttsbegin;

        projTableTempNew.setTmp();
        projTableTempNew.setTmpData(this.parmProjTable());

        while select ProjId, Name, wipProject from projTableTempNew
            where projTableTempNew.ProjId like this.parmNewId()+'*'
        {
            if (projTableTempNew.wipProject && !ProjWIPTable::exist(projTableTempNew.ProjId))
            {
                projWIPTableDB.clear();

                projWIPTableDB.ProjId = projTableTempNew.ProjId;                
                projWIPTableDB.Description = projTableTempNew.Name;

                oldProjId = this.getEquivalentId(projTableTempNew.ProjId);
                oldWIPProjId = ProjTable::find(oldProjId).wipProject;

                if (oldWIPProjId)
                {
                    ProjWIPTable projWIPTableDBLoc = ProjWIPTable::find(oldWIPProjId);

                    projWIPTableDB.ControlId = projWIPTableDBLoc.ControlId;
                    projWIPTableDB.PeriodId = projWIPTableDBLoc.PeriodId;
                }
                else
                {
                    select firstonly projWIPTableFile;
                    if (projWIPTableFile)
                    {
                        projWIPTableDB.ControlId = projWIPTableFile.ControlId;
                        projWIPTableDB.PeriodId = projWIPTableFile.PeriodId;
                    }
                }

                using (ProjTableWizardParameters parametersLoc = ProjTableWizardParameters::setParameters(projWIPTableDB.ProjId, true))
                {
                    projWIPTableDB.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewId</Name>
				<Source><![CDATA[
    ProjId parmNewId(ProjId    _newId = newId)
    {
        newId  = _newId;

        return newId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewProjArray</Name>
				<Source><![CDATA[
    Array parmNewProjArray(Array _newProjArray = newIdArray)
    {
        newIdArray   = _newProjArray;

        return newIdArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldId</Name>
				<Source><![CDATA[
    ProjId parmOldId(ProjId    _oldId = oldId)
    {
        oldId  = _oldId;

        return oldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldProjArray</Name>
				<Source><![CDATA[
    Array parmOldProjArray(Array _oldProjArray = oldIdArray)
    {
        oldIdArray   = _oldProjArray;

        return oldIdArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCount</Name>
				<Source><![CDATA[
    int parmProjCount(int _projCount = maxProjCount)
    {
        maxProjCount  = _projCount;

        return maxProjCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    ProjTable parmProjTable(FormDataSource   _form_DS  = null)
    {
        FormDataSource      form_DS;

        if (_form_DS)
        {
            form_DS             = _form_DS;
            projTableNew        = form_DS.cursor();
        }

        return projTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjTableWizardEstimatesCtrl construct()
    {
        return new ProjTableWizardEstimatesCtrl();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>