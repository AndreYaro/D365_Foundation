<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPreCloseMatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostPreCloseMatch</c> class matches inventory transactions.
/// </summary>
abstract class InventCostPreCloseMatch
{
    Map                     matchingMap;
    InventTransCurrency_RU  inventTransCurrency;

    boolean                 countryRegion_RU;
    #ISOcountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an inventory transaction to matching.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    void addInventTrans(InventTrans _inventTrans)
    {
        Qty     qty;
        Amount  amount;

        if (!this.hasSettlements(_inventTrans))
        {
            str key = this.key(_inventTrans);
            if (matchingMap.exists(key))
            {
                [qty, amount] = matchingMap.lookup(key);
                qty += _inventTrans.Qty;
                amount += this.costAmountPosted(_inventTrans);
                matchingMap.insert(key, [qty, amount]);
            }
            else
            {
                matchingMap.insert(key, [_inventTrans.Qty, this.costAmountPosted(_inventTrans)]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the posted cost amount from an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// The inventory transaction.
    /// </param>
    /// <returns>
    /// The posted cost amount from an inventory transaction.
    /// </returns>
    protected CostAmount costAmountPosted(InventTrans _inventTrans)
    {
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            if (InventCostPreCloseMatchUseCostValueFlight::instance().isEnabled())
            {
                return _inventTrans.CostAmountPosted + _inventTrans.CostAmountAdjustment;
            }
            else
            {
                return _inventTrans.CostAmountPosted;
            }
        }

        return _inventTrans.CostAmountSecCurPosted_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSettlements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an inventory transaction has settlements.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    true if the inventory transactions has settlements; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The inventory transactions with settlements are not matched in the pre-closing.
    /// </remarks>
    protected boolean hasSettlements(InventTrans _inventTrans)
    {
        InventSettlement    inventSettlement;

        select firstonly RecId
        from inventSettlement
        where inventSettlement.TransRecId == _inventTrans.RecId
           && inventSettlement.InventTransCurrency_RU == inventTransCurrency
            && inventSettlement.Cancelled  == NoYes::No;

        return inventSettlement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatching</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an inventory transaction is matching other inventory transactions.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    true if the inventory transactions are matching other inventory transactions; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    All inventory transactions have to be added to the matching before this method is called.
    /// </remarks>
    public boolean isMatching(InventTrans _inventTrans)
    {
        Qty     qty;
        Amount  amount;

        if (!this.hasSettlements(_inventTrans))
        {
            str key = this.key(_inventTrans);
            if (matchingMap.exists(key))
            {
                [qty, amount] = matchingMap.lookup(key);
                return (qty == 0.0 && amount == 0.0);
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the key that is used in the matching.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The key that is used in the matching.
    /// </returns>
    protected abstract str key(InventTrans _inventTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Initialize the matching map
        matchingMap = new Map(Types::String, Types::Container);

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;

        return inventTransCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>