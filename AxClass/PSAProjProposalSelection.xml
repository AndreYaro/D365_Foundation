<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaProjProposalSelection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaProjProposalSelection
{
    str                         m_sCustAccount, m_sProjInvoiceProjId, m_sProjId, m_sEmplId;
    TransDate                   m_dStart, m_dEnd;
    SalesUpdate                 salesUpdate;
    NoYes                       salesOrderLine;

    QueryRun                    m_oQueryRun;

    PSATmpProjProposalTrans     m_tProjProposalTrans;
    PSATmpProjProposalTrans     m_tProjProposalTransPreBill;
    PSATmpProjProposalSummary   m_tProjProposalSummary;
    ProjInvoiceTypeSelection    projInvoiceTypeSelection;
    ProjFundingSourceId         fundingSourceId;
    TransDate                   invoiceDate;
    boolean                     querySalesLine;
    boolean                     queryEmpl;
    boolean                     queryCost;
    boolean                     queryRevenue;
    boolean                     querySubscription;
    boolean                     queryItem;
    boolean                     queryOnAcc;
    boolean                     queryAdvances;
    boolean                     queryRetention;

    SMAServiceOrderTable        smaServiceOrderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSalesLineRange</Name>
				<Source><![CDATA[
    public void addSalesLineRange(QueryBuildDataSource _salesLineDataSource)
    {
        QueryBuildRange salesLineTypeRange, salesLineDlvDate;

        if (m_dStart || m_dEnd)
        {
             salesLineDlvDate    = _salesLineDataSource.addRange(fieldNum(SalesLine, ConfirmedDlv));
             salesLineDlvDate.value(this.queryFromDate() + '..' + this.queryToDate());
        }

        // Include both regular sales orders and subscription sales orders
        salesLineTypeRange     = _salesLineDataSource.addRange(fieldNum(SalesLine, SalesType));
        salesLineTypeRange.value(SalesQueryRangeUtil::salesTypeCustomerDemand());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummary</Name>
				<Source><![CDATA[
    void createSummary()
    {
        while select * from m_tProjProposalTrans
        {
            // create or update line with no category
            select forupdate firstonly m_tProjProposalSummary
                index SearchIdx
                where m_tProjProposalSummary.Summary == NoYes::Yes
                &&    m_tProjProposalSummary.CustAccount == m_tProjProposalTrans.CustAccount
                &&    m_tProjProposalSummary.ProjInvoiceProjId == m_tProjProposalTrans.ProjInvoiceProjId;

            if (!m_tProjProposalSummary.RecId)
            {
                this.createSummaryRecord(m_tProjProposalTrans, true);
            }

            m_tProjProposalSummary.InvoiceAmount += m_tProjProposalTrans.LineAmount;

            // add indirect invoice amount
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                // Add indirect component for credit note
                if (m_tProjProposalSummary.InvoiceAmount < 0)
                {
                    m_tProjProposalSummary.InvoiceAmount += -m_tProjProposalTrans.IndirectAmount;
                }
                else
                {
                    m_tProjProposalSummary.InvoiceAmount += m_tProjProposalTrans.IndirectAmount;
                }
            }

            m_tProjProposalSummary.update();

            m_tProjProposalTrans.RefRecId = m_tProjProposalSummary.RecId;
            m_tProjProposalTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryRecord</Name>
				<Source><![CDATA[
    void createSummaryRecord(PSATmpProjProposalTrans _tProposalTrans, boolean _bSummary)
    {
        m_tProjProposalSummary.initFromProposalTrans(_tProposalTrans);
        if (_bSummary)
        {
            m_tProjProposalSummary.ProjCategoryId = '';
            m_tProjProposalSummary.Summary = true;
            m_tProjProposalSummary.InvoiceAmountToDate = PSAProjectTotals::invoicedTotal(m_tProjProposalSummary.ProjId);
        }
        else
        {
            m_tProjProposalSummary.InvoiceAmountToDate = PSAProjectTotals::invoicedTotal(m_tProjProposalSummary.ProjId, m_tProjProposalSummary.ProjCategoryId);
        }

        m_tProjProposalSummary.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert data into <c>PSATmpProjProposalTrans</c> table based on respective table data changes. 
    /// </summary>
    void createTransactions()
    {
        ProjInvoiceChoose oProjInvoiceChoose;

        oProjInvoiceChoose = this.getProjInvoiceChoose();

        m_oQueryRun = oProjInvoiceChoose.queryRun();

        while (m_oQueryRun.next())
        {
            this.doCommon();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on the table buffer changes this makes call to respective methods that inserts data into <c>PSATmpProjProposalTrans</c> table.
    /// </summary>
    protected void doCommon()
    {
        if (m_oQueryRun.changed(tableNum(ProjEmplTrans)))
        {
            this.doEmpl();
        }

        if (m_oQueryRun.changed(tableNum(ProjCostTrans)))
        {
            this.doCost();
        }

        if (m_oQueryRun.changed(tableNum(ProjRevenueTrans)))
        {
            this.doRevenue();
        }

        if (m_oQueryRun.changed(tableNum(ProjItemTrans)))
        {
            this.doItem();
        }

        if (m_oQueryRun.changed(tableNum(SalesLine)))
        {
            this.doSalesLine();
        }

        if (m_oQueryRun.changed(tableNum(ProjOnAccTrans)))
        {
            this.doOnAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceChoose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs <c>ProjInvoiceChoose</c> class instance based on parameter values.
    /// </summary>
    /// <returns>
    /// Instance of <c>ProjInvoiceChoose</c> which is constructed based on parameters values. 
    /// </returns>
    protected ProjInvoiceChoose getProjInvoiceChoose()
    {
        return ProjInvoiceChoose::psaNew_InvoiceChoose(
            m_sProjInvoiceProjId,
            m_sProjId,
            m_dStart,
            m_dEnd,
            salesOrderLine,
            salesUpdate,
            fundingSourceId,
            invoiceDate,
            queryCost,
            queryEmpl,
            queryItem,
            queryRevenue,
            queryOnAcc,
            querySubscription,
            queryAdvances,
            queryRetention,
            smaServiceOrderTable,
            true,
            projInvoiceTypeSelection
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
    protected void doCost()
    {
        ProjCostTrans       projCostTrans;
        ProjCostTransSale   projCostTransSale;

        projCostTrans = m_oQueryRun.get(tableNum(ProjCostTrans));

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(projCostTrans.ProjId), ProjTransType::Cost))
        {
            // Copy information from expense record
            m_tProjProposalTrans.clear();
            m_tProjProposalTrans.initFromProjCostTrans(projCostTrans);

            m_tProjProposalTrans.LineAmount = 0;
            m_tProjProposalTrans.SalesPrice = 0;

            while select projCostTransSale
                where projCostTransSale.TransId == projCostTrans.TransId
            {
                if (projCostTransSale.canBeInvoiced())
                {
                    if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        m_tProjProposalTrans.LineAmount     += projCostTransSale.LineAmount * -1;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                        m_tProjProposalTrans.SalesPrice     += projCostTransSale.SalesPrice * -1;
                    }
                    else
                    {
                        m_tProjProposalTrans.LineAmount     += projCostTransSale.LineAmount;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                        m_tProjProposalTrans.SalesPrice     += projCostTransSale.SalesPrice;
                    }
                }
            }

            m_tProjProposalTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
    protected void doEmpl()
    {
        ProjEmplTrans       tProjEmplTrans;
        ProjEmplTransSale   projEmplTransSale;

        tProjEmplTrans = m_oQueryRun.get(tableNum(ProjEmplTrans));

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(tProjEmplTrans.ProjId), ProjTransType::Hour))
        {
            // Copy information from hour record
            m_tProjProposalTrans.clear();
            m_tProjProposalTrans.initFromProjEmplTrans(tProjEmplTrans);

            m_tProjProposalTrans.LineAmount = 0;
            m_tProjProposalTrans.SalesPrice = 0;

            while select projEmplTransSale
                where projEmplTransSale.TransId == tProjEmplTrans.TransId
            {
                if (projEmplTransSale.canBeInvoiced())
                {
                    if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        m_tProjProposalTrans.LineAmount     += projEmplTransSale.LineAmount * -1;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                        m_tProjProposalTrans.SalesPrice     += projEmplTransSale.SalesPrice * -1;
                        m_tProjProposalTrans.IndirectAmount += m_tProjProposalTrans.IndirectAmount * -1;
                    }
                    else
                    {
                        m_tProjProposalTrans.LineAmount     += projEmplTransSale.LineAmount;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                        m_tProjProposalTrans.SalesPrice     += projEmplTransSale.SalesPrice;
                    }
                }
            }

            m_tProjProposalTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create project proposal transaction for item type.
    /// </summary>
    protected void doItem()
    {
        ProjItemTrans       projItemTrans;
        ProjItemTransSale   projItemTransSale;

        projItemTrans = m_oQueryRun.get(tableNum(ProjItemTrans));

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(projItemTrans.ProjId), ProjTransType::Item))
        {
            // Copy information from item record
            m_tProjProposalTrans.clear();
            m_tProjProposalTrans.initFromProjItemTrans(projItemTrans);

            m_tProjProposalTrans.LineAmount = 0;
            m_tProjProposalTrans.SalesPrice = 0;

            while select projItemTransSale
                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
            {
                if (projItemTransSale.canBeInvoiced())
                {
                    if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        m_tProjProposalTrans.LineAmount     += projItemTransSale.LineAmount * -1;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                        m_tProjProposalTrans.SalesPrice     += projItemTransSale.SalesPrice * -1;
                    }
                    else
                    {
                        m_tProjProposalTrans.LineAmount     += projItemTransSale.LineAmount;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                        m_tProjProposalTrans.SalesPrice     += projItemTransSale.SalesPrice;
                    }
                }
            }

            m_tProjProposalTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
    protected void doOnAccount()
    {
        ProjOnAccTrans      tProjOnAccTrans;
        ProjOnAccTransSale  projOnAccTransSale;

        tProjOnAccTrans = m_oQueryRun.get(tableNum(ProjOnAccTrans));

        if (tProjOnAccTrans.TransactionOrigin == ProjOrigin::Deduction)
        {
            return;
        }

         // Copy information from OnAcc record
        m_tProjProposalTrans.clear();
        m_tProjProposalTrans.initFromProjOnAccTrans(tProjOnAccTrans);

        m_tProjProposalTrans.LineAmount = 0;

        while select projOnAccTransSale
            where projOnAccTransSale.TransId == tProjOnAccTrans.TransId
        {
            if (!queryOnAcc    && this.isOnAccTrans(tProjOnAccTrans))
            {
                continue;
            }

            if (!queryAdvances && this.isAdvanceTrans(tProjOnAccTrans))
            {
                continue;
            }

            if (projOnAccTransSale.canBeInvoiced())
            {
                if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    m_tProjProposalTrans.LineAmount     += projOnAccTransSale.Amount * -1;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                }
                else
                {
                    m_tProjProposalTrans.LineAmount     += projOnAccTransSale.Amount;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                }
            }
        }

        if (m_tProjProposalTrans.LineAmount != 0)
        {
            m_tProjProposalTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    protected void doRevenue()
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 isRetention;

        projRevenueTrans = m_oQueryRun.get(tableNum(ProjRevenueTrans));
        if (this.isProjTypeFixedPrice(projRevenueTrans) &&
            ((queryRevenue      && this.isRevenueTrans(projRevenueTrans)) ||
             (querySubscription  && this.isSubscriptionTrans(projRevenueTrans))||
             (queryRetention     && this.isRetentionTrans(projRevenueTrans))))
        {
                // Copy information from fee record
                m_tProjProposalTrans.clear();
                m_tProjProposalTrans.initFromProjRevenueTrans(projRevenueTrans);

                if (isRetention)
                {
                    m_tProjProposalTrans.LineAmount = abs(m_tProjProposalTrans.LineAmount);
                    m_tProjProposalTrans.SalesPrice = abs(m_tProjProposalTrans.SalesPrice);
                }
                else
                {
                    m_tProjProposalTrans.LineAmount = 0;
                    m_tProjProposalTrans.SalesPrice = 0;

                    while select projRevenueTransSale
                        where projRevenueTransSale.TransId == projRevenueTrans.TransId
                    {
                        if (projRevenueTransSale.canBeInvoiced())
                        {
                            if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                            {
                                m_tProjProposalTrans.LineAmount     += projRevenueTransSale.LineAmount * -1;
                                m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                                m_tProjProposalTrans.SalesPrice     += projRevenueTransSale.SalesPrice * -1;
                            }
                            else
                            {
                                m_tProjProposalTrans.LineAmount     += projRevenueTransSale.LineAmount;
                                m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                                m_tProjProposalTrans.SalesPrice     += projRevenueTransSale.SalesPrice;
                            }
                        }
                    }
                }

                m_tProjProposalTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjTypeFixedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the project type is of type fixed price.
    /// </summary>
    /// <param name = "_projRevenueTrans">
    ///     An instance of <c>ProjRevenueTrans</c> table buffer,
    /// </param>
    /// <returns>
    ///     true if the project type is fixed price; otherwise, false.
    /// </returns>
    protected boolean isProjTypeFixedPrice(ProjRevenueTrans _projRevenueTrans)
    {
        return ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(_projRevenueTrans.ProjId), ProjTransType::Revenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSalesLine</Name>
				<Source><![CDATA[
    protected void doSalesLine()
    {
        SalesLine               salesLine;
        SalesQuantity           salesQuantity = SalesQuantity::construct(DocumentStatus::Invoice);
        SalesQty                deliverNow, remainBefore, remainAfter;

        salesLine = m_oQueryRun.get(tableNum(SalesLine));
        salesLine.selectForUpdate(true);

        if (salesLine.canBeInvoiced())
        {
            [deliverNow, remainBefore, remainAfter] = salesQuantity.qtySales(salesLine, salesUpdate);

            if (deliverNow)
            {
                m_tProjProposalTrans.clear();
                m_tProjProposalTrans.initFromSalesLine(salesLine, deliverNow);
                m_tProjProposalTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjProposalSummary</Name>
				<Source><![CDATA[
    PSATmpProjProposalSummary getTmpProjProposalSummary()
    {
        return m_tProjProposalSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjProposalTrans</Name>
				<Source><![CDATA[
    PSATmpProjProposalTrans getTmpProjProposalTrans()
    {
        return m_tProjProposalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjProposalTransPreBill</Name>
				<Source><![CDATA[
    PSATmpProjProposalTrans getTmpProjProposalTransPreBill()
    {
        return m_tProjProposalTransPreBill;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceTrans</Name>
				<Source><![CDATA[
    private boolean isAdvanceTrans(ProjOnAccTrans _trans)
    {
        return (_trans.TransactionOrigin == ProjOrigin::Prepayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnAccTrans</Name>
				<Source><![CDATA[
    private boolean isOnAccTrans(ProjOnAccTrans _trans)
    {
        boolean ret = false;
        ProjOnAccTrans relatedTrans;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select firstonly RecId from relatedTrans
                where relatedTrans.RecId             == _trans.psaRefRecId &&
                      relatedTrans.TransactionOrigin == ProjOrigin::Prepayment;
        }

        return (relatedTrans.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionTrans</Name>
				<Source><![CDATA[
    private boolean isRetentionTrans(ProjRevenueTrans _revenueTrans)
    {
        boolean              isRetention = false;
        ProjRevenueTransSale revenueTransSale;

        if (_revenueTrans.IsRetained && _revenueTrans.TransactionOrigin == ProjOrigin::FeeJournal)
        {
            select firstonly RecId from revenueTransSale
                where revenueTransSale.TransId == _revenueTrans.TransId &&
                      revenueTransSale.TransStatus == ProjTransStatus::Invoiced;

            isRetention = (revenueTransSale ? true : false);
        }

        return isRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRevenueTrans</Name>
				<Source><![CDATA[
    private boolean isRevenueTrans(ProjRevenueTrans _revenueTrans)
    {
        boolean              ret = false;
        ProjRevenueTransSale revenueTransSale;

        if (_revenueTrans.IsReleased == NoYes::No && _revenueTrans.IsRetained == NoYes::No)
        {
            select firstonly RecId from revenueTransSale
                where revenueTransSale.TransId     == _revenueTrans.TransId &&
                      revenueTransSale.TransStatus == ProjTransStatus::Posted;

            if (revenueTransSale)
            {
                // Public sector
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) &&
                    (_revenueTrans.TransactionOrigin == ProjOrigin::FeeJournal ||
                     _revenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                     _revenueTrans.TransactionOrigin == ProjOrigin::AdvancedLedgerEntry ||
                     _revenueTrans.TransactionOrigin == ProjOrigin::ProjAdvancedJournal))
                {
                    ret = true;
                }
                else if (_revenueTrans.TransactionOrigin == ProjOrigin::FeeJournal ||
                         _revenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                         _revenueTrans.TransactionOrigin == ProjOrigin::ProjAdvancedJournal)
                {
                    ret = true;
                }
                else if (_revenueTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubscriptionTrans</Name>
				<Source><![CDATA[
    private boolean isSubscriptionTrans(ProjRevenueTrans _revenueTrans)
    {
        return (_revenueTrans.TransactionOrigin == ProjOrigin::Subscription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(str            _sProjInvoiceProjId,
             str            _sProjId,
             TransDate      _dStart,
             TransDate      _dEnd,
             NoYes          _salesOrderLine = false,
             SalesUpdate    _salesUpdate = SalesUpdate::DeliverNow)
    {
        m_sProjInvoiceProjId    = _sProjInvoiceProjId;
        m_sProjId               = _sProjId;
        m_dStart                = _dStart;
        m_dEnd                  = _dEnd;
        salesOrderLine          = _salesOrderLine;
        salesUpdate             = _salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceId parmFundingSource(ProjFundingSourceId _fundingSourceId = fundingSourceId)
    {
        fundingSourceId = _fundingSourceId;

        return fundingSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    public TransDate parmInvoiceDate(TransDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceTypeSelection</Name>
				<Source><![CDATA[
    public ProjInvoiceTypeSelection parmProjInvoiceTypeSelection(ProjInvoiceTypeSelection _projInvoiceTypeSelection = projInvoiceTypeSelection)
    {
        projInvoiceTypeSelection  = _projInvoiceTypeSelection;

        return projInvoiceTypeSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryAdvanceTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryAdvanceTrans(boolean _queryAdvances = queryAdvances)
    {
        queryAdvances = _queryAdvances;

        return queryAdvances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCostTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryCostTrans(boolean _queryCost = queryCost)
    {
        queryCost = _queryCost;

        return queryCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEmplTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryEmplTrans(boolean _queryEmpl = queryEmpl)
    {
        queryEmpl = _queryEmpl;

        return queryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryItemTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryItemTrans(boolean _queryItem = queryItem)
    {
        queryItem = _queryItem;

        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryOnAccTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryOnAccTrans(boolean _queryOnAcc = queryOnAcc)
    {
        queryOnAcc = _queryOnAcc;

        return queryOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRetentionTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryRetentionTrans(boolean _queryRetention = queryRetention)
    {
        queryRetention = _queryRetention;

        return queryRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRevenueTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryRevenueTrans(boolean _queryRevenue = queryRevenue)
    {
        queryRevenue = _queryRevenue;

        return queryRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuerySubscriptionTrans</Name>
				<Source><![CDATA[
    public boolean parmQuerySubscriptionTrans(boolean _querySubscription = querySubscription)
    {
        querySubscription = _querySubscription;

        return querySubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesOrderLine</Name>
				<Source><![CDATA[
    public boolean parmSalesOrderLine(boolean _salesOrderLine = salesOrderLine)
    {
        salesOrderLine = _salesOrderLine;

        return salesOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUpdate</Name>
				<Source><![CDATA[
    public SalesUpdate parmSalesUpdate(SalesUpdate _salesUpdate = salesUpdate)
    {
        salesUpdate = _salesUpdate;

        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmaServiceOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns record in <c>SMAServiceOrderTable</c> table.
    /// </summary>
    /// <param name="_smaServiceOrderTable">
    /// A record in <c>SMAServiceOrderTable</c> table.
    /// </param>
    /// <returns>
    /// Record in <c>SMAServiceOrderTable</c> table.
    /// </returns>
    public SMAServiceOrderTable parmSmaServiceOrderTable(SMAServiceOrderTable _smaServiceOrderTable = smaServiceOrderTable)
    {
        smaServiceOrderTable = _smaServiceOrderTable;

        return smaServiceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransEndDate</Name>
				<Source><![CDATA[
    public TransDate parmTransEndDate(TransDate endDate = m_dEnd)
    {
        m_dEnd = endDate;

        return m_dEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransStartDate</Name>
				<Source><![CDATA[
    public TransDate parmTransStartDate(TransDate startDate = m_dStart)
    {
        m_dStart = startDate;

        return m_dStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromDate</Name>
				<Source><![CDATA[
    public str queryFromDate()
    {
        return queryValue(m_dStart ? m_dStart : dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryToDate</Name>
				<Source><![CDATA[
    public str queryToDate()
    {
        return queryValue(m_dEnd ? m_dEnd : dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        ttsbegin;

        delete_from m_tProjProposalTrans;
        //delete_from m_tProjProposalSummary;
        // search for invoiceable lines
        this.createTransactions();

        // create summary info
        this.createSummary();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns transaction amount of a proposal line.
    /// </summary>
    /// <returns>
    /// Transaction amount of a proposal line.
    /// </returns>
    public Amount transactionAmount()
    {
        select sum(LineAmount), sum(IndirectAmount) from m_tProjProposalTrans;

        return m_tProjProposalTrans.LineAmount - m_tProjProposalTrans.IndirectAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PSAProjProposalSelection construct(str           _sProjInvoiceProjId,
                                              str           _sProjId,
                                              TransDate     _dStart,
                                              TransDate     _dEnd,
                                              NoYes         _salesOrderLine = false,
                                              SalesUpdate   _salesUpdate = SalesUpdate::DeliverNow)
    {
        return new PSAProjProposalSelection(_sProjInvoiceProjId, _sProjId, _dStart, _dEnd, _salesOrderLine, _salesUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>