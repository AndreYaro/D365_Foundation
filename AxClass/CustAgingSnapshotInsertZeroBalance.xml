<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingSnapshotInsertZeroBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustAgingSnapshotInsertZeroBalance
{
    private CustVendReportName agingPeriodDefinition;
    private CustCollectionsPoolId poolId;
    private DateTransactionDuedate agedBy;
    private CustAgingDate agingDate;
    private List agingLineNumList;
    private Guid uniqueIdPerExecution;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ageZeroBalanceCustomers</Name>
				<Source><![CDATA[
    internal static void ageZeroBalanceCustomers(
        CustVendReportName _agingPeriodDefinition,
        DateTransactionDuedate _agedBy,
        CustAgingDate _agingDate,
        List agingLineNumList,
        CustCollectionsPoolId _poolId = null)
    {
        CustAgingSnapshotInsertZeroBalance zeroBalanceCustomers = new CustAgingSnapshotInsertZeroBalance();
        zeroBalanceCustomers.parmAgingPeriodDefinition(_agingPeriodDefinition);
        zeroBalanceCustomers.parmCustCollectionsPoolId(_poolId);
        zeroBalanceCustomers.parmAgedBy(_agedBy);
        zeroBalanceCustomers.parmAgingDate(_agingDate);
        zeroBalanceCustomers.parmAgingLineNumList(agingLineNumList);

        zeroBalanceCustomers.insertZeroBalanceCustomers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertZeroBalanceCustomers</Name>
				<Source><![CDATA[
    private void insertZeroBalanceCustomers()
    {
        this.insertCustAging();
        this.insertCustAgingLegalEntity();
        this.insertCustAgingLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAging</Name>
				<Source><![CDATA[
    private void insertCustAging()
    {
        Query q = this.createOrFindQueryFromPoolId();

        QueryBuildDataSource qbdsCustTable = q.dataSourceTable(tableNum(CustTable));
        qbdsCustTable.addSelectionField(fieldNum(CustTable, AccountNum));

        Map fieldMap = new Map(Types::String, Types::Container);
        fieldMap.insert(fieldStr(CustAging, CustTable), [qbdsCustTable.uniqueId(), fieldStr(CustTable, AccountNum)]);

        this.addStatRepInterval(q, fieldMap);
        this.addCustomersWithNoOpenTransactions(q);
        this.excludeCustomersAlreadyAged(q);

        CustAging custAging;

        this.skipValidationsForTable(custAging);

        Query::insert_recordset(custAging, fieldMap, q);

        this.updateZeroBalanceCustomersWithAgeByAndDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatRepInterval</Name>
				<Source><![CDATA[
    private void addStatRepInterval(Query _q, Map _fieldMap)
    {
        QueryBuildDataSource qbdsStatRepInterval = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(StatRepInterval));
        qbdsStatRepInterval.addRange(fieldNum(StatRepInterval, Name)).value(SysQuery::value(this.parmAgingPeriodDefinition()));
        qbdsStatRepInterval.fetchMode(QueryFetchMode::One2One);
        qbdsStatRepInterval.fields().dynamic(NoYes::No);
        qbdsStatRepInterval.fields().clearFieldList();

        qbdsStatRepInterval.addSelectionField(fieldNum(StatRepInterval, Name));

        _fieldMap.insert(fieldStr(CustAging, StatRepInterval), [qbdsStatRepInterval.uniqueId(), fieldStr(StatRepInterval, Name)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomersWithNoOpenTransactions</Name>
				<Source><![CDATA[
    private void addCustomersWithNoOpenTransactions(Query _q)
    {
        QueryBuildDataSource qbdsCustTransOpen = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(CustTransOpen));
        qbdsCustTransOpen.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustTransOpen, AccountNum));
        qbdsCustTransOpen.joinMode(JoinMode::NoExistsJoin);
        qbdsCustTransOpen.fields().dynamic(NoYes::No);
        qbdsCustTransOpen.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeCustomersAlreadyAged</Name>
				<Source><![CDATA[
    private void excludeCustomersAlreadyAged(Query _q)
    {
        QueryBuildDataSource qbdsCustAging = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(CustAging));
        qbdsCustAging.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustAging, CustTable));
        if (CustAgingZeroBalMultiAgingBucketFlight::instance().isEnabled())
        {
            //add StatRepInterval range to allow zero balance customers aging in multiple aging periods
            qbdsCustAging.addRange(fieldNum(CustAging, StatRepInterval)).value(SysQuery::value(this.parmAgingPeriodDefinition()));
        }
        qbdsCustAging.joinMode(JoinMode::NoExistsJoin);
        qbdsCustAging.fields().dynamic(NoYes::No);
        qbdsCustAging.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateZeroBalanceCustomersWithAgeByAndDate</Name>
				<Source><![CDATA[
    private void updateZeroBalanceCustomersWithAgeByAndDate()
    {
        CustAging custAging;

        this.skipValidationsForTable(custAging);

        if (CustAgingAvoidDuplicateRecordsInMultiBatchFlight::instance().isEnabled())
        {
            //UniqueExecutionId is used to identify the records that were inserted in this execution,
            //this is to avoid conflicts while inserting the CustAgingLegalEntity and CustAgingLine records
            uniqueIdPerExecution = newGuid();

            ttsbegin;

            update_recordset custAging
                setting AgedBy = this.parmAgedBy(),
                    AgingDate = this.parmAgingDate(),
                    UniqueExecutionId = uniqueIdPerExecution
                where custAging.AgingDate == dateNull();

            ttscommit;
        } 
        else
        {
            ttsbegin;

            update_recordset custAging
                setting AgedBy = this.parmAgedBy(),
                    AgingDate = this.parmAgingDate()
                where custAging.AgingDate == dateNull();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAgingLegalEntity</Name>
				<Source><![CDATA[
    private void insertCustAgingLegalEntity()
    {
        CustAging custAging;
        CustAgingLegalEntity custAgingLegalEntity;
        CustTable custTable;
        CustAgingLegalEntity custAgingLegalEntityLocal;

        var currentCompany = CompanyInfo::current(curExt());
        var accountingCurrency = Ledger::accountingCurrency();
        var reportingCurrency = Ledger::reportingCurrency();

        this.skipValidationsForTable(custAgingLegalEntity);

        if (CustAgingAvoidDuplicateRecordsInMultiBatchFlight::instance().isEnabled())
        {
            insert_recordset custAgingLegalEntity ( CustAging, SourceLegalEntity, MSTCurrency, MSTSecondaryCurrency )
            select RecId, currentCompany, accountingCurrency, reportingCurrency from custAging
                where custAging.StatRepInterval == this.parmAgingPeriodDefinition()
                    && custAging.AgedBy == this.parmAgedBy()
                    && custAging.AgingDate == this.parmAgingDate()
                    && custAging.UniqueExecutionId == uniqueIdPerExecution
                exists join custTable
                    where custTable.AccountNum == custAging.CustTable
                notexists join custAgingLegalEntityLocal
                    where custAgingLegalEntityLocal.CustAging == custAging.RecId;
        }
        else
        {
            insert_recordset custAgingLegalEntity ( CustAging, SourceLegalEntity, MSTCurrency, MSTSecondaryCurrency )
            select RecId, currentCompany, accountingCurrency, reportingCurrency from custAging
                where custAging.StatRepInterval == this.parmAgingPeriodDefinition()
                    && custAging.AgedBy == this.parmAgedBy()
                    && custAging.AgingDate == this.parmAgingDate()
                exists join custTable
                    where custTable.AccountNum == custAging.CustTable
                notexists join custAgingLegalEntityLocal
                    where custAgingLegalEntityLocal.CustAging == custAging.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAgingLine</Name>
				<Source><![CDATA[
    private void insertCustAgingLine()
    {
        CustAging custAging;
        CustAgingLegalEntity custAgingLegalEntity;
        CustAgingLine custAgingLine;
        custAgingLine custAgingLineLocal;
        CustTable custTable;
        CustVendReportName agingPeriodDefinitionLocal = this.parmAgingPeriodDefinition();
        var position = this.parmAgingLineNumList().elements();
        var enumerator = this.parmAgingLineNumList().getEnumerator();
        
        this.skipValidationsForTable(custAgingLine);

        while (enumerator.moveNext())
        {
            var statRepLineNum = enumerator.current();

            if (CustAgingAvoidDuplicateRecordsInMultiBatchFlight::instance().isEnabled())
            {
                insert_recordset custAgingLine ( CustAgingLegalEntity, Position, StatRepIntervalLineName, StatRepIntervalLineNum )
                select RecId, position, agingPeriodDefinitionLocal, statRepLineNum from custAgingLegalEntity
                    exists join custAging
                        where custAging.RecId == custAgingLegalEntity.CustAging
                            && custAging.StatRepInterval == this.parmAgingPeriodDefinition()
                            && custAging.AgedBy == this.parmAgedBy()
                            && custAging.AgingDate == this.parmAgingDate()
                            && custAging.UniqueExecutionId == uniqueIdPerExecution
                    exists join custTable
                        where custTable.AccountNum == custAging.CustTable
                    notexists join custAgingLineLocal
                        where custAgingLineLocal.CustAgingLegalEntity == custAgingLegalEntity.RecId
                            && custAgingLineLocal.StatRepIntervalLineName == custAging.StatRepInterval
                            && custAgingLineLocal.StatRepIntervalLineNum == statRepLineNum;
            } 
            else
            {
                insert_recordset custAgingLine ( CustAgingLegalEntity, Position, StatRepIntervalLineName, StatRepIntervalLineNum )
                select RecId, position, agingPeriodDefinitionLocal, statRepLineNum from custAgingLegalEntity
                    exists join custAging
                        where custAging.RecId == custAgingLegalEntity.CustAging
                            && custAging.StatRepInterval == this.parmAgingPeriodDefinition()
                            && custAging.AgedBy == this.parmAgedBy()
                            && custAging.AgingDate == this.parmAgingDate()
                    exists join custTable
                        where custTable.AccountNum == custAging.CustTable
                    notexists join custAgingLineLocal
                        where custAgingLineLocal.CustAgingLegalEntity == custAgingLegalEntity.RecId
                            && custAgingLineLocal.StatRepIntervalLineName == custAging.StatRepInterval
                            && custAgingLineLocal.StatRepIntervalLineNum == statRepLineNum;
            }
            position--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrFindQueryFromPoolId</Name>
				<Source><![CDATA[
    private Query createOrFindQueryFromPoolId()
    {
        Query q;

        if (this.parmCustCollectionsPoolId())
        {
            q = CustCollectionsPool::findByPoolId(this.parmCustCollectionsPoolId()).convertToQueryObjectForInsertRecordset();
        }
        else
        {
            q = new Query();
            q.addDataSource(tablenum(CustTable));
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipValidationsForTable</Name>
				<Source><![CDATA[
    private void skipValidationsForTable(Common _agingTable)
    {
        _agingTable.skipDeleteActions(NoYes::Yes);
        _agingTable.skipBusinessEvents(NoYes::Yes);
        _agingTable.skipDataMethods(NoYes::Yes);
        _agingTable.skipEvents(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingPeriodDefinition</Name>
				<Source><![CDATA[
    private CustVendReportName parmAgingPeriodDefinition(CustVendReportName _agingPeriodDefinition = agingPeriodDefinition)
    {
        agingPeriodDefinition = _agingPeriodDefinition;
        return agingPeriodDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustCollectionsPoolId</Name>
				<Source><![CDATA[
    private CustCollectionsPoolId parmCustCollectionsPoolId(CustCollectionsPoolId _poolId = poolId)
    {
        poolId = _poolId;
        return poolId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgedBy</Name>
				<Source><![CDATA[
    private DateTransactionDuedate parmAgedBy(DateTransactionDuedate _agedBy = agedBy)
    {
        agedBy = _agedBy;
        return agedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingDate</Name>
				<Source><![CDATA[
    private CustAgingDate parmAgingDate(CustAgingDate _agingDate = agingDate)
    {
        agingDate = _agingDate;
        return agingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingLineNumList</Name>
				<Source><![CDATA[
    private List parmAgingLineNumList(List _agingLineNumList = agingLineNumList)
    {
        agingLineNumList = _agingLineNumList;
        return agingLineNumList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>