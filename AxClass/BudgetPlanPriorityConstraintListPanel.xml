<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanPriorityConstraintListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanPriorityConstraintListPanel</c> class manages the list panel control for the budget plan priority constraints.
/// </summary>
public class BudgetPlanPriorityConstraintListPanel extends SysListPanel
{
    BudgetPlanningProcess budgetPlanningProcess;
    AccessRight           accessRight;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanPriorityConstraint</c> record for a budget planning process with the
    /// specified budget plan priority.
    /// </summary>
    /// <param name="_data">
    /// The item that was added to the list of budget plan priority.
    /// </param>
    public void addData(container _data)
    {
        if (budgetPlanningProcess)
        {
            BudgetPlanPriorityConstraintListPanel::addDataServer(_data, budgetPlanningProcess.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list panel design.
    /// </summary>
    public void build()
    {
        super();

        if (accessRight == AccessRight::View)
        {
            // Set the access right for the button controls.
            separatorBuildGroupControl.neededPermission(accessRight2NeededPermission(accessRight));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    /// A container that contains the items to add to both the left and right lists of the list panel.
    /// </returns>
    public container getData()
    {
        return BudgetPlanPriorityConstraintListPanel::getDataServer(budgetPlanningProcess.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AccessRight _accessRight)
    {
        super();

        accessRight = _accessRight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetPlanPriorityConstraint</c> record of a budget plan process with the specified
    /// budget plan priority.
    /// </summary>
    /// <param name="_data">
    /// The item that was removed from the list of budget plan priority.
    /// </param>
    public void removeData(container _data)
    {
        if (budgetPlanningProcess)
        {
            BudgetPlanPriorityConstraintListPanel::removeDataServer(_data, budgetPlanningProcess.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget planning process reference for the list panel.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>Budget planning process</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setBudgetPlanningProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        budgetPlanningProcess = BudgetPlanningProcess::find(_budgetPlanningProcessRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified item can be removed from the list.
    /// </summary>
    /// <param name="_data">
    /// The specified item in the panel list.
    /// </param>
    /// <param name="_addRemove">
    /// A Boolean value that specifies whether the selected item is being removed.
    /// </param>
    /// <returns>
    /// true if the selected item can be removed; otherwise, false.
    /// </returns>
    public boolean validate(anytype _data, AddRemove _addRemove)
    {
        boolean                 isValid;
        BudgetPlanPriorityRecId budgetPlanPriorityRecId;
        BudgetPlanHeader        budgetPlanHeader;

        isValid = super(_data, _addRemove);

        if (isValid)
        {
            budgetPlanPriorityRecId = _data;

            if (_addRemove == AddRemove::Remove)
            {
                // A priority can be removed from a selected priority list only if the priority has not
                // been used in a budget plan for the current budget plan process
                select firstonly RecId, Name from budgetPlanHeader
                    where budgetPlanHeader.BudgetPlanningProcess == budgetPlanningProcess.RecId
                    &&    budgetPlanHeader.BudgetPlanPriority == budgetPlanPriorityRecId;

                if (budgetPlanHeader.RecId > 0)
                {
                    isValid = checkFailed(strFmt("@GLS70572", budgetPlanHeader.Name));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanPriorityConstraint</c> record for a budget plan process with the specified
    /// dimension attribute.
    /// </summary>
    /// <param name="_data">
    /// The item that was added to the list of budget plan priority.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    private static void addDataServer(container _data, BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        Counter                      counter = 0;
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;

        ttsbegin;

        for (counter = conLen(_data); counter > 0; counter--)
        {
            budgetPlanPriorityConstraint.clear();
            budgetPlanPriorityConstraint.BudgetPlanningProcess  = _budgetPlanningProcessRecId;
            budgetPlanPriorityConstraint.BudgetPlanPriority     = conPeek(_data, counter);
            budgetPlanPriorityConstraint.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetPlanPriorityConstriantListPanel</c> class.
    /// </summary>
    /// <param name="_accessRight">
    /// The <c>AccessRight</c> value to set to the button controls.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanPriorityConstraintListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetPlanPriorityConstraintListPanel construct(AccessRight _accessRight = AccessRight::View)
    {
        return new BudgetPlanPriorityConstraintListPanel(_accessRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items for the left and right lists of the list panel.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// A container that contains the items to add to the left and right lists of the list panel.
    /// </returns>
    private static container getDataServer(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        container selectedData, availableData;

        if (_budgetPlanningProcessRecId)
        {
            // Populate the list of priorities that are currently selected for the process.
            selectedData = BudgetPlanPriorityConstraintListPanel::getPriorityAttachedToProcess(_budgetPlanningProcessRecId);
        }

        // Populate the list of priorities that are available to be selected for the process.
        availableData = BudgetPlanPriorityConstraintListPanel::getPriorityAvailableToProcess(_budgetPlanningProcessRecId);

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityAttachedToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items of the left list of the list panel.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// A container that contains the items to add to the left list of the list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getPriorityAttachedToProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;
        BudgetPlanPriority           budgetPlanPriority;
        container                    priorityContainer;

        while select RecId, Name from budgetPlanPriority
            join BudgetPlanPriority, BudgetPlanningProcess from budgetPlanPriorityConstraint
                where budgetPlanPriorityConstraint.BudgetPlanPriority == budgetPlanPriority.RecId
                && budgetPlanPriorityConstraint.BudgetPlanningProcess == _budgetPlanningProcessRecId
        {
            priorityContainer += [[budgetPlanPriority.RecId, budgetPlanPriority.Name]];
        }

        return priorityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityAvailableToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items for the right list of the list panel.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// A container that contains the items to add to right list of the list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getPriorityAvailableToProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;
        BudgetPlanPriority           budgetPlanPriority;
        container                    priorityContainer;

        while select RecId, Name from budgetPlanPriority
            notexists join budgetPlanPriorityConstraint
            where budgetPlanPriorityConstraint.BudgetPlanPriority == budgetPlanPriority.RecId
            && budgetPlanPriorityConstraint.BudgetPlanningProcess == _budgetPlanningProcessRecId
        {
            priorityContainer += [[budgetPlanPriority.RecId, budgetPlanPriority.Name]];
        }

        return priorityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>BudgetPlanPriorityConstraintListPanel</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// The form that will contain the list panel controls.
    /// </param>
    /// <param name="_parentId">
    /// The form control that will contain the list panel controls.
    /// </param>
    /// <param name="_accessRight">
    /// The <c>AccessRight</c> value to set to the button controls.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanPriorityConstraintListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetPlanPriorityConstraintListPanel newForm(FormRun _formRun, int _parentId, AccessRight _accessRight)
    {
        BudgetPlanPriorityConstraintListPanel listPanel = BudgetPlanPriorityConstraintListPanel::construct(_accessRight);

        listPanel.parmFormRun(_formRun);
        listPanel.parmParentId(_parentId);
        listPanel.parmCaptionSelected("@GLS70570");
        listPanel.parmCaptionAvailable("@GLS70571");

        // Move up and move down buttons are not being used.
        listPanel.parmHasUpDownButton(false);
        listPanel.parmHasAddAllButton(false);
        listPanel.parmHasRemoveAllButton(false);
        listPanel.build();

        return listPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDataServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgePlanPriorityConstraint</c> record for a budget plan process with the specified
    /// budget plan priority.
    /// </summary>
    /// <param name="_data">
    /// The item that was removed from the list of budget plan priority.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    private static void removeDataServer(container _data, BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        Counter                      counter = 0;
        BudgetPlanPriorityRecId      budgetPlanPriorityRecId;
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;

        ttsbegin;

        for (counter = conLen(_data); counter > 0; counter--)
        {
            budgetPlanPriorityRecId = conPeek(_data, counter);

            delete_from budgetPlanPriorityConstraint
                where budgetPlanPriorityConstraint.BudgetPlanningProcess == _budgetPlanningProcessRecId
                &&    budgetPlanPriorityConstraint.BudgetPlanPriority == budgetPlanPriorityRecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>