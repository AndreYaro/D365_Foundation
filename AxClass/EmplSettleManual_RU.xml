<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplSettleManual_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplSettleManual_RU extends EmplSettle_RU
{
    Set        transDebitSet, transCreditSet;
    boolean    creditNoteExists;
    #define.Value20(20)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueries</Name>
				<Source><![CDATA[
    public void buildQueries()
    {
        void processQuery(Query _query, Set _transSet)
        {
            SetEnumerator           transSetEnumerator;
            QueryBuildDataSource    qbds;
            QueryBuildRange         qbr;
            int                     i;

            qbds = _query.dataSourceTable(tablenum(EmplTrans_RU));
            qbds.findRange(fieldnum(EmplTrans_RU, TransDate)).value(SysQuery::valueUnlimited());

            transSetEnumerator = _transSet.getEnumerator();

            while (transSetEnumerator.moveNext())
            {
                if (! (i mod #Value20))
                {
                    qbr = qbds.addRange(fieldnum(EmplTrans_RU, RecId));
                    qbr.status(RangeStatus::Locked);
                }
                qbr.value(queryRangeConcat(qbr.value(), transSetEnumerator.current()));
                i ++;
            }
        }
        ;

        super();

        processQuery(queryDebit,       transDebitSet);
        processQuery(queryCredit,      transCreditSet);
        processQuery(queryInnerCredit, transCreditSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean         ret;
        EmplTrans_RU    emplTransDebit, emplTransCredit;
        SetEnumerator   setEnumerator;
        boolean         checkDate = true;
        EmplTrans_RU    emplTrans;

        boolean checkDebitCredit(EmplTrans_RU _debitCredit, real _sign)
        {
            select firstonly emplTrans
                where emplTrans.EmplAccount       == _debitCredit.EmplAccount                   &&
                      emplTrans.TransDate         <  _debitCredit.TransDate                     &&
                      emplTrans.Reversed          == NoYes::No                                  &&
                      emplTrans.TransType         != EmplTransSourceType_RU::CrossAccountSettle &&
                     (emplTrans.PostingProfile    == _debitCredit.PostingProfile                ||
                      (profileSettlement ? false : true))                                       &&
                     ((emplTrans.AmountCur < 0    && _sign < 0)                                 ||
                      (emplTrans.AmountCur > 0    && _sign > 0))                                &&
                      ! emplTrans.Closed;

            if (emplTrans.RecId)
            {
                return checkFailed(strfmt("@GLS109136",
                                         _sign > 0 ? "@GLS109137" : "@GLS109138",
                                         _debitCredit.Voucher,
                                         _debitCredit.TransDate,
                                         emplTrans.Voucher,
                                         emplTrans.TransDate));
            }

            return true;
        }
        ;

        ret = super();

        if (ret)
        {
            if (creditNoteExists)
            {
                setEnumerator = transDebitSet.getEnumerator();
                if (setEnumerator.moveNext())
                {
                    emplTransDebit = EmplTrans_RU::findRecId(setEnumerator.current());
                }

                setEnumerator = transCreditSet.getEnumerator();
                if (setEnumerator.moveNext())
                {
                    emplTransCredit = EmplTrans_RU::findRecId(setEnumerator.current());
                }

                checkDate = (emplTransDebit.TransType != emplTransCredit.TransType);
            }

            if (checkDate)
            {
                ret = checkDebitCredit(transDebit, sign(transDebit.AmountCur));

                if (ret)
                {
                    ret = checkDebitCredit(transCredit, sign(transCredit.AmountCur));

                    if (ret && transCredit.AdvanceId)
                    {
                        select firstonly RecId, AdvanceId from emplTrans
                            where emplTrans.EmplAccount       == transCredit.EmplAccount                    &&
                                  emplTrans.TransDate         == transCredit.TransDate                      &&
                                  emplTrans.Reversed          == NoYes::No                                  &&
                                  emplTrans.TransType         != EmplTransSourceType_RU::CrossAccountSettle &&
                                 (emplTrans.PostingProfile    == transCredit.PostingProfile                 ||
                                  (profileSettlement ? false : true))                                       &&
                                  emplTrans.AdvanceId                                                       &&
                                  emplTrans.AdvanceId         <  transCredit.AdvanceId                      &&
                                  ! emplTrans.Closed;
                        if (emplTrans.RecId)
                        {
                            ret = checkFailed(strfmt("@GLS110483", emplTrans.AdvanceId));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    private boolean checkParameters(EmplAccount_RU _emplAccount)
    {
        EmplTrans_RU    emplTrans;
        boolean         ret = true;
        SetEnumerator   setEnumerator;
        EmplAdvLine_RU  emplAdvLine;

        if (!_emplAccount)
        {
            ret = checkFailed("@GLS109131");
        }

        if (! transDebitSet.elements() || ! transCreditSet.elements())
        {
            ret = checkFailed("@GLS109132");
        }

        setEnumerator = transDebitSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            emplTrans = EmplTrans_RU::findRecId(setEnumerator.current());

            if (emplTrans.TransType == EmplTransSourceType_RU::AccountPayable   ||
                emplTrans.TransType == EmplTransSourceType_RU::VendInvoice)
            {
                creditNoteExists = true;
                break;
            }
        }

        if (creditNoteExists)
        {
            if (transDebitSet.elements()  > 1 ||
                transCreditSet.elements() > 1)
            {
                ret = checkFailed("@GLS109133");
            }
            else
            {
                setEnumerator = transCreditSet.getEnumerator();

                if (setEnumerator.moveNext())
                {
                    emplAdvLine   = EmplAdvLine_RU::findTransEmplRecId(setEnumerator.current());

                    ret = ! emplAdvLine ? true :
                          checkFailed(strfmt("@GLS109134",
                                             emplAdvLine.AdvanceId,
                                             emplAdvLine.LineNum));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimSettlementType</Name>
				<Source><![CDATA[
    protected DimSettlementType_RU dimSettlementType()
    {
        return DimSettlementType_RU::Manual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSettleTrans</Name>
				<Source><![CDATA[
    public void initSettleTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ToDate _toDate)
    {
        ;
        super(_toDate);

        manualCreated = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditSet</Name>
				<Source><![CDATA[
    public Set parmCreditSet(Set _transCreditSet = transCreditSet)
    {
        transCreditSet = _transCreditSet;
        return transCreditSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitSet</Name>
				<Source><![CDATA[
    public Set parmDebitSet(Set _transDebitSet = transDebitSet)
    {
        transDebitSet = _transDebitSet;
        return transDebitSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleNow</Name>
				<Source><![CDATA[
    public void settleNow(EmplAccount_RU _onlyEmplAccount = '')
    {
        if (!this.checkParameters(_onlyEmplAccount))
        {
            throw error("@SYS18447");
        }

        super(_onlyEmplAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTables</Name>
				<Source><![CDATA[
    protected boolean updateTables()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>