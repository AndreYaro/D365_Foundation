<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSetupCacheBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqSetupCacheBuilder</c> is a builder for the <c>ReqSetupCache</c> class.
/// </summary>
class ReqSetupCacheBuilder
{
    private boolean useSetupCache;
    private boolean useSetupDimCache;
    private boolean disableDbCache;

    private ReqMemoryCacheCurrentSessionScope memoryCacheCurrentSessionScope;
    private ReqMemoryCacheCrossSessionScope memoryCacheCrossSessionScope;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUseSetupCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a boolean value indicating whether the cache is allowed to store <c>ReqSetup</c> objects for more than one product..
    /// </summary>
    /// <param name = "_useSetupCache">A boolean value indicating whether the cache is allowed to store <c>ReqSetup</c> objects for more than one product..</param>
    /// <returns>A boolean value indicating whether the cache is allowed to store <c>ReqSetup</c> objects for more than one product..</returns>
    [Hookable(false)]
    public boolean parmUseSetupCache(boolean _useSetupCache = useSetupCache)
    {
        useSetupCache = _useSetupCache;
        return useSetupCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseSetupDimCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a boolean value indicating whether the cache is allowed to store <c>ReqSetupDim</c> objects for more than one product..
    /// </summary>
    /// <param name = "_useSetupDimCache">A boolean value indicating whether the cache is allowed to store <c>ReqSetupDim</c> objects for more than one product..</param>
    /// <returns>A boolean value indicating whether the cache is allowed to store <c>ReqSetupDim</c> objects for more than one product..</returns>
    [Hookable(false)]
    public boolean parmUseSetupDimCache(boolean _useSetupDimCache = useSetupDimCache)
    {
        useSetupDimCache = _useSetupDimCache;
        return useSetupDimCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisableDbCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a boolean value indicating whether single-record cache must be skipped when fetching some of the records.
    /// </summary>
    /// <param name = "_disableDbCache">A boolean value indicating whether single-record cache must be skipped when fetching some of the records.</param>
    /// <returns>A boolean value indicating whether single-record cache must be skipped when fetching some of the records.</returns>
    [Hookable(false)]
    public boolean parmDisableDbCache(boolean _disableDbCache = disableDbCache)
    {
        disableDbCache = _disableDbCache;
        return disableDbCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemoryCacheCurrentSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the scope for the cached objects that cannot be shared across sessions.
    /// </summary>
    /// <param name = "_memoryCacheCurrentSessionScope">The scope for the cached objects that cannot be shared across sessions.</param>
    /// <returns>The scope for the cached objects that cannot be shared across sessions.</returns>
    /// <remarks>
    /// Provide current session scope to allow storing cached items in <c>ReqMemoryCache</c>. 
    /// This will prevent the planning process from running out of memory if too much data needs to be cached. 
    /// If the current session scope is not specified then the objects will be cached inside the <c>ReqSetupCache</c>
    /// object.
    /// </remarks>
    [Hookable(false)]
    public ReqMemoryCacheCurrentSessionScope parmMemoryCacheCurrentSessionScope(
        ReqMemoryCacheCurrentSessionScope _memoryCacheCurrentSessionScope = memoryCacheCurrentSessionScope)
    {
        memoryCacheCurrentSessionScope = _memoryCacheCurrentSessionScope;
        return memoryCacheCurrentSessionScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemoryCacheCrossSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the scope for the cached objects that can be shared across sessions.
    /// </summary>
    /// <param name = "_memoryCacheCrossSessionScope">The scope for the cached objects that can be shared across sessions.</param>
    /// <returns>The scope for the cached objects that can be shared across sessions.</returns>
    /// <remarks>If the cross session scope is not set then the data will be cached in the current session scope.</remarks>
    [Hookable(false)]
    public ReqMemoryCacheCrossSessionScope parmMemoryCacheCrossSessionScope(
        ReqMemoryCacheCrossSessionScope _memoryCacheCrossSessionScope = memoryCacheCrossSessionScope)
    {
        memoryCacheCrossSessionScope = _memoryCacheCrossSessionScope;
        return memoryCacheCrossSessionScope;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>