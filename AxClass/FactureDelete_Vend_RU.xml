<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_Vend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureDelete_Vend_RU extends FactureDelete_CustVendInvoice_RU
{
    boolean existsProcessedLogTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancellIncomingVAT</Name>
				<Source><![CDATA[
    private void cancellIncomingVAT()
    {
        #localmacro.operationKey
            logTransOper.RefRecId,
            logTransOper.TaxCode,
            logTransOper.DefaultDimension,
            logTransOper.InventTransId,
            logTransOper.DocumentType
        #endmacro

        TmpPurchBookVATProcessLogTrans_RU       tmpLogTrans;
        TmpPurchBookVATProcessLogTransOper_RU   tmpLogTransOper;
        PurchBookVATProcessLogTrans_RU          logTrans;
        PurchBookVATProcessLogTransOper_RU      logTransOper;
        PurchBookVATProcessLogTable_RU          logTable;
        BookPost_Purch_RU                       bookPost;
        BookStructVATAmounts_RU                 settledAmounts;
        BookStructSmallVATAmounts_RU            operSettledAmounts;
        Map                                     mapOperSettledAmounts = new Map(Types::Container, Types::Class);

        setPrefix("@GLS101145");

        while select sum(AmountLiableToVAT), sum(TaxAmount) from logTransOper
            group by RefRecId, TaxCode, DefaultDimension, InventTransId, DocumentType
            where logTransOper.CanceledRefRecId  == 0                                       &&
                  logTransOper.Correct           == NoYes::No                               &&
                  logTransOper.Blocked           == NoYes::No
            exists join logTrans
                where logTrans.RecId             == logTransOper.RefRecId                   &&
                      logTrans.FactureId         == jour.FactureId                          &&
                      (logTrans.TransType        == SalesPurchBookTransType_RU::Invoice     ||
                      logTrans.TransType        == SalesPurchBookTransType_RU::CreditNote)
        {
            if (mapOperSettledAmounts.exists([#operationKey]))
            {
                operSettledAmounts = mapOperSettledAmounts.lookup([#operationKey]);
            }
            else
            {
                operSettledAmounts = new BookStructSmallVATAmounts_RU();
            }
            operSettledAmounts.addAmounts(logTransOper.amountInclVAT(), logTransOper.AmountLiableToVAT, logTransOper.TaxAmount);
            mapOperSettledAmounts.insert([#operationKey], operSettledAmounts);
        }

        while select logTransOper
            order by RefRecId
            where logTransOper.CanceledRefRecId  == 0                                       &&
                  logTransOper.Correct           == NoYes::No                               &&
                  logTransOper.Blocked           == NoYes::No
            join logTrans
                where logTrans.RecId             == logTransOper.RefRecId                   &&
                      logTrans.FactureId         == jour.FactureId                          &&
                      logTrans.Reversed          == NoYes::No                               &&
                      (logTrans.TransType        == SalesPurchBookTransType_RU::Invoice     ||
                       logTrans.TransType        == SalesPurchBookTransType_RU::CreditNote)
            join logTable
                where logTable.RecId             == logTransOper.LogTableRefRecId
        {
            settledAmounts = PurchBookVATProcessLogTrans_RU::getLogAmounts(logTrans.RecId, logTable.RecId, false, false);
            tmpLogTrans.clear();
            tmpLogTrans.initFromPBookVATProcessLogTrans(logTrans);
            tmpLogTrans.initFromPurchBookVATProcessLogTable(logTable);
            tmpLogTrans.Marked          = NoYes::Yes;
            tmpLogTrans.SettledAmounts  = settledAmounts.pack();
            tmpLogTrans.insert();

            operSettledAmounts = mapOperSettledAmounts.lookup([#operationKey]);

            tmpLogTransOper.clear();
            tmpLogTransOper.initFromPBookVATProcessLogTransOper(logTransOper);
            tmpLogTransOper.initFromPurchBookVATProcessLogTable(logTable);
            tmpLogTransOper.initFromTmpPurchBookVATProcessLogTrans(tmpLogTrans);
            tmpLogTransOper.Marked          = NoYes::Yes;
            tmpLogTransOper.SettledAmounts  = operSettledAmounts.pack();
            tmpLogTransOper.insert();
        }

        bookPost = BookPost_Purch_RU::newFromVATProcess(PurchBookVATProcessCancelType_RU::Cancel,
                                                        tmpLogTrans,
                                                        tmpLogTransOper);
        bookPost.parmTransDate(jour.FactureDate);

        bookPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected void check()
    {
        PurchBookVATProcessLogTrans_RU     logTrans;
        PurchBookVATProcessLogTransOper_RU logTransOper;
        RestoredVATLogTable_RU             restoredLogTable;
        RestoredVATLogTrans_RU             restoredLogTrans;

        super();

        select firstonly logTrans
            where logTrans.FactureId  == jour.FactureId                         &&
                  (logTrans.TransType == SalesPurchBookTransType_RU::CreditNote ||
                   logTrans.TransType == SalesPurchBookTransType_RU::Invoice)
        exists join logTransOper
            where logTransOper.RefRecId         == logTrans.RecId  &&
                  logTransOper.Blocked          == NoYes::No       &&
                  logTransOper.CanceledRefRecId == 0;

        if (logTrans)
        {
            if (jour.ProcessVAT == NoYes::Yes)
            {
                existsProcessedLogTrans = true;
            }
            else
            {
                this.addError("@GLS104932");
            }
        }

        select firstonly restoredLogTable
            where restoredLogTable.Approved == NoYes::Yes
        exists join restoredLogTrans
            where restoredLogTrans.FactureId     == jour.FactureId             &&
                  restoredLogTrans.FactureModule == jour.Module                &&
                  restoredLogTrans.TransDate     == restoredLogTable.TransDate &&
                  restoredLogTrans.Include;

        if (restoredLogTable)
        {
            this.addError("@GLS114208");
        }
        else
        {
            select firstonly restoredLogTable
                where restoredLogTable.Approved == NoYes::No
            exists join restoredLogTrans
                where restoredLogTrans.TransDate     == restoredLogTable.TransDate &&
                      restoredLogTrans.FactureId     == jour.FactureId             &&
                      restoredLogTrans.FactureModule == jour.Module;

            if (restoredLogTable)
            {
                warning("@GLS114208");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    protected void delete()
    {
        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        super();

        if (existsProcessedLogTrans)
        {
            this.cancellIncomingVAT();
        }

        while select forupdate logTrans
            where logTrans.FactureId  == jour.FactureId                         &&
                  (logTrans.TransType == SalesPurchBookTransType_RU::CreditNote ||
                   logTrans.TransType == SalesPurchBookTransType_RU::Invoice)
        {
            delete_from logTransOper
                where logTransOper.RefRecId         == logTrans.RecId &&
                      logTransOper.CanceledRefRecId != 0;
            logTrans.doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorClosedBook</Name>
				<Source><![CDATA[
    protected str errorClosedBook(SalesPurchBookId_RU _bookId)
    {
        return strFmt("@GLS112044", _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour getInvoiceJour(CustVendInvoiceTrans _trans)
    {
        VendInvoiceTrans localVendInvoiceTrans = _trans;
        ;
        return VendInvoiceJour::findFromVendInvoiceTrans(localVendInvoiceTrans.PurchID,
                                                         localVendInvoiceTrans.InvoiceId,
                                                         localVendInvoiceTrans.InvoiceDate,
                                                         localVendInvoiceTrans.NumberSequenceGroup,
                                                         localVendInvoiceTrans.InternalInvoiceId,
                                                         true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour getInvoiceJourRecId(recId _recId)
    {
        return VendInvoiceJour::findRecId(_recId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTrans</Name>
				<Source><![CDATA[
    protected CustVendInvoiceTrans getInvoiceTrans(FactureTrans_RU _trans)
    {
        return VendInvoiceTrans::findFacture_RU(_trans, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTransRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceTrans getInvoiceTransRecId(recId _recId)
    {
        return VendInvoiceTrans::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
    protected tableId jourTableId()
    {
        return tableNum(VendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJour_RU _jour)
    {
        super(_jour);

        bookTable = new DictTable(tableNum(PurchBookTable_RU)).makeRecord();
        bookTrans = new DictTable(tableNum(PurchBookTrans_RU)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected tableId transTableId()
    {
        return tableNum(VendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExtra</Name>
				<Source><![CDATA[
    protected void updateExtra(FactureTrans_RU   _trans)
    {
        this.updateInvoiceJour(VendInvoiceJour::findFromVendInvoiceTrans(_trans.SalesPurchId,
                                                                         _trans.InvoiceId,
                                                                         _trans.InvoiceDate,
                                                                         _trans.NumberSequenceGroup,
                                                                         _trans.InternalInvoiceId,
                                                                         true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceOrder</Name>
				<Source><![CDATA[
    protected void updateSourceOrder(CustVendInvoiceJour _jour)
    {
        VendInvoiceJour localVendInvoiceJour = _jour;
        PurchTable      table;

        ttsbegin;

        table = localVendInvoiceJour.purchTable(true);

        if (table && table.factureJourSortedList_RU().len() == 1) // the last facture is being deleted
        {
            table.DocumentStatus = DocumentStatus::Invoice;
            table.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>