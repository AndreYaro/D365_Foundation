<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDailyIssueReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AlcoholDailyIssueReport_RU extends XMLExcelReport_RU implements BatchRetryable
{
    private BranchId_RU     branchId;
    private FromDate        fromDate;
    private ToDate          toDate;
    private QueryRun        queryRun;
    private int             lineNum, totalLinesQty;
    private Name            alcoholProductionName;
    private Qty             totalContainerQty;

    private DialogField     fieldFromDate;
    private DialogField     fieldToDate;

    private AlcoholDeclarationType_RU   alcoholDeclarationType;
    private AlcoholDailyTransIssue_RU   alcoholDailyTransIssue;



    protected const int CurrentVersion = 1;
    protected const int ColumnsQty     = 7;
    protected const int WidthInColumns = 167;

    protected const str ReportHeader    = 'ReportHeader';
    protected const str ColumnNumbers   = 'ColumnNumbers';
    protected const str Data            = 'Data';
    protected const str Totals          = 'Totals';

    protected const real MinHeight      = 12.75;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyQueryRange</Name>
				<Source><![CDATA[
    private void applyQueryRange(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(AlcoholDailyTransIssue_RU));
        
        findOrCreateRange_W(queryBuildDataSource, fieldNum(AlcoholDailyTransIssue_RU, BranchId), branchId);
        findOrCreateRange_W(queryBuildDataSource, fieldNum(AlcoholDailyTransIssue_RU, AlcoholDeclarationType), queryValue(alcoholDeclarationType));
        findOrCreateRange_W(queryBuildDataSource, fieldNum(AlcoholDailyTransIssue_RU, TransDate), queryRange(fromDate, toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        real ret;

        switch (_bookmark)
        {
            case Data:
                ret =  max (document.getNamedRangeHeightWrapped('Data4',  alcoholProductionName),
                            MinHeight);
                break;

            case Totals:
                ret = MinHeight;
                break;

            default:
                ret = MinHeight;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        QueryBuildDataSource        qbds;

        this.initSectionMap();
        this.setCurrentWorksheetNum(1, WidthInColumns);
        this.execute(ReportHeader);
        this.execute(ColumnNumbers);

        qbds = queryRun.query().dataSourceTable(tableNum(AlcoholDailyTransIssue_RU));

        qbds.addSortField(fieldNum(AlcoholDailyTransIssue_RU, TransDate), SortOrder::Ascending);
        qbds.addSortField(fieldNum(AlcoholDailyTransIssue_RU, AlcoholProductionTypeId), SortOrder::Ascending);
        findOrCreateRange_W(qbds, fieldNum(AlcoholDailyTransIssue_RU, TransDate), queryRange(fromDate, toDate));

        lineNum = 0;

        while (queryRun.next())
        {
            TransDate                   curDate;
            AlcoholProductionTypeId_RU  curTypeId;
            boolean                     dateOrTypeChanged = false;

            alcoholDailyTransIssue = queryRun.get(tableNum(AlcoholDailyTransIssue_RU));
            lineNum++;
            alcoholProductionName = alcoholDailyTransIssue.alcoholProductionName();

            if (lineNum == 1)
            {
                curDate   = alcoholDailyTransIssue.TransDate;
                curTypeId = alcoholDailyTransIssue.AlcoholProductionTypeId;
            }

            if (   curDate   != alcoholDailyTransIssue.TransDate
                || curTypeId != alcoholDailyTransIssue.AlcoholProductionTypeId)
            {
                dateOrTypeChanged = true;
            }

            if (this.mustCreateNewPage(dateOrTypeChanged || lineNum == totalLinesQty))
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                this.execute(ColumnNumbers);
            }

            if (dateOrTypeChanged)
            {
                this.execute(Totals);
                curDate   = alcoholDailyTransIssue.TransDate;
                curTypeId = alcoholDailyTransIssue.AlcoholProductionTypeId;
                totalContainerQty = 0;
                dateOrTypeChanged = false;
            }

            this.execute(Data);
            totalContainerQty += alcoholDailyTransIssue.ContainerQty;
        }

        this.execute(Totals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();
        
        fieldFromDate    = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        fieldToDate      = dialog.addFieldValue(extendedTypeStr(ToDate),   toDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines the name of the file to be created.
    /// </summary>
    /// <returns>
    ///     The name of the file to be created.
    /// </returns>
    protected Filename fileName()
    {
        return resourceStr(AlcoholDailyIssueReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines postfix for the new file.
    /// </summary>
    /// <returns>
    ///     Postfix for the new file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return strFmt('_%1_%2_%3',
                      branchId,
                      date2str(fromDate, 321, 2, 0, 2, 0, 4, DateFlags::None),
                      date2str(toDate,   321, 2, 0, 2, 0, 4, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeaderSection();
                break;

            case Data:
                this.fillDataSection();
                break;

            case Totals:
                this.fillTotalsSection();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataSection</Name>
				<Source><![CDATA[
    private void fillDataSection()
    {
        UnitOfMeasure   unitOfMeasure = UnitOfMeasure::findBySymbol(alcoholDailyTransIssue.ContainerCapacityUnitId);

        this.insertValueToSection('Data1',  int2str(lineNum));
        this.insertValueToSection('Data2',  strFmt("@SYS82282", alcoholDailyTransIssue.TransDate));
        this.insertValueToSection('Data3',  '');
        this.insertValueToSection('Data4',  alcoholDailyTransIssue.alcoholProductionName());
        this.insertValueToSection('Data5',  alcoholDailyTransIssue.AlcoholProductionTypeId);
        this.insertValueToSection('Data6',  num2str(alcoholDailyTransIssue.ContainerCapacity,0,unitOfMeasure.DecimalPrecision,1,3));
        this.insertValueToSection('Data7',  num2str(alcoholDailyTransIssue.ContainerQty,0,0,1,3));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeaderSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report header with data.
    /// </summary>
    private void fillReportHeaderSection()
    {
        Branches_RU     branches = Branches_RU::find(branchId);
        CompanyInfo     companyInfo = CompanyInfo::find();
        VendTable       vendTable = branches.vendTable();
        INN_RU          inn = vendTable ? vendTable.partyINNasOfDate_RU(fromDate) : companyInfo.partyINNasOfDate_RU(fromDate);
        KPPU_RU         kpp = vendTable ? vendTable.partyKPPasOfDate_RU(fromDate) : companyInfo.partyKPPasOfDate_RU(fromDate);

        this.insertValueToSection('OrgName',    vendTable ? vendTable.name() : companyInfo.Name);
        this.insertValueToSection('OrgINNKPP',  kpp ? strFmt("@GLS111217", inn, kpp) : inn);
        this.insertValueToSection('OrgAddress', vendTable ? vendTable.postalAddress().getAddressAsLine_RU() : companyInfo.postalAddress().getAddressAsLine_RU());

        this.insertValueToSection('SeparateDivisionFilter', queryRun.query().dataSourceTable(tableNum(AlcoholDailyTransIssue_RU)).findRange(fieldNum(AlcoholDailyTransIssue_RU, BranchId)).value());
        this.insertValueToSection('FromDateFilter',         strFmt("@SYS82282", fromDate));
        this.insertValueToSection('ToDateFilter',           strFmt("@SYS82282", toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalsSection</Name>
				<Source><![CDATA[
    private void fillTotalsSection()
    {
        this.insertValueToSection('TotalContainerQty', totalContainerQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDate    = fieldFromDate.value();
        toDate      = fieldToDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAlcoholDailyJournalTable</Name>
				<Source><![CDATA[
    public void initFromAlcoholDailyJournalTable(AlcoholDailyJournalTable_RU _alcoholDailyJournalTable = null)
    {
        fromDate                = _alcoholDailyJournalTable.TransDate;
        toDate                  = fromDate;
        branchId                = _alcoholDailyJournalTable.BranchId;
        alcoholDeclarationType  = _alcoholDailyJournalTable.AlcoholDeclarationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsAlcoholDailyTransIssue = query.addDataSource(tableNum(AlcoholDailyTransIssue_RU));

        this.applyQueryRange(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        this.addSection(ColumnNumbers);
        this.addSection(Data, true);
        this.addSection(Totals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a new page should be created before printing next line.
    /// </summary>
    /// <param name = "_mustPrintTotals">
    ///    Shows if the line with totals should be taken into account when calculating the required height.
    /// </param>
    /// <returns>
    ///    A boolean value; If true, a new page should be created.
    /// </returns>
    protected boolean mustCreateNewPage(boolean _mustPrintTotals)
    {
        real    requiredHeight = this.getRangeHeight(Data);

        if (_mustPrintTotals)
        {
            requiredHeight += conPeek(mapSections.lookup(Totals), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, fromDate, toDate, branchId, alcoholDeclarationType, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the name of template for report.
    /// </summary>
    /// <returns>
    ///     The name of template for report.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(AlcoholDailyIssueReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        totalLinesQty = SysQuery::countTotal(queryRun);

        return ColumnsQty * totalLinesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case CurrentVersion :
                [version, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! fromDate)
        {
            ret = checkFailed("@SYS19617");
        }

        if (! toDate)
        {
            ret = checkFailed("@SYS27232");
        }

        if (fromDate && toDate && toDate < fromDate)
        {
            ret = checkFailed("@SYS30562");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AlcoholDailyIssueReport_RU construct()
    {
        return new AlcoholDailyIssueReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@ApplicationSuite_Localization:AlcoholDailyJournalSales";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AlcoholDailyIssueReport_RU  runClass;
        AlcoholDailyJournalTable_RU alcoholDailyJournalTableCaller;

        if (   !_args
            || !_args.record()
            || _args.dataset() != tablenum(AlcoholDailyJournalTable_RU))
        {
            throw error("@SYS18626");
        }

        alcoholDailyJournalTableCaller = _args.record();

        runClass = AlcoholDailyIssueReport_RU::construct();
        runClass.initFromAlcoholDailyJournalTable(alcoholDailyJournalTableCaller);

        if (runClass.prompt())
        {
            runClass.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>