<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTmpAccountSumBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustTmpAccountSumBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCustTmpAccountSumQueryForAging</Name>
				<Source><![CDATA[
    internal SysDaUpdateObject buildCustTmpAccountSumQueryForAging(
        CustTmpAccountSum _tmpAccountSum,
        AccountNum _accountNum,
        CustVendAgingCalculatedTmp _agingCalculatedTmp,
        CustVendBalanceListBalanceFieldsParameters _fieldParameters,
        int _bucketNumber,
        boolean _withAmountCur,
        boolean _withAmountMST,
        boolean _withAmountMSTSecondary
        )
    {
        SysDaUpdateObject updateObject = this.buildUpdateCustTmpAccountSumBalanceFieldsForBucketQuery(_tmpAccountSum, _accountNum, _agingCalculatedTmp, _bucketNumber);
        this.applySettingBalancesByType(updateObject, _tmpAccountSum, _agingCalculatedTmp, _fieldParameters, _withAmountCur, _withAmountMST, _withAmountMSTSecondary);

        return updateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateCustTmpAccountSumBalanceFieldsForBucketQuery</Name>
				<Source><![CDATA[
    private SysDaUpdateObject buildUpdateCustTmpAccountSumBalanceFieldsForBucketQuery(
        CustTmpAccountSum _tmpAccountSum,
        AccountNum _accountNum,
        CustVendAgingCalculatedTmp _agingCalculatedTmp,
        int _bucketNumber)
    {
        SysDaUpdateObject tmpAccountSumUpdateObject = new SysDaUpdateObject(_tmpAccountSum);
        SysDaQueryObject agingCalculatedTmpQueryObject = new SysDaQueryObject(_agingCalculatedTmp);

        agingCalculatedTmpQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, CurrencyCode)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, CurrencyCode)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, BillingClassification)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, BillingClassification))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, TransDate)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, TransDate))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, InvoiceId)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, InvoiceId))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, Voucher)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, Voucher))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, Txt)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, Txt))))
            .and (_accountNum == '' ? (new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, AccountNum)),
                new SysDaFieldExpression(_tmpAccountSum, fieldStr(CustTmpAccountSum, AccountNum))))
                : (new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, AccountNum)),
                new SysDaValueExpression(_accountNum))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, BucketNumber)),
                new SysDaValueExpression(_bucketNumber))));
    
        tmpAccountSumUpdateObject.joinClause(SysDaJoinKind::InnerJoin, agingCalculatedTmpQueryObject);

        return tmpAccountSumUpdateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySettingBalancesByType</Name>
				<Source><![CDATA[
    private void applySettingBalancesByType(
        SysDaUpdateObject _updateObject,
        CustTmpAccountSum _tmpAccountSum,
        CustVendAgingCalculatedTmp _agingCalculatedTmp,
        CustVendBalanceListBalanceFieldsParameters _fieldParameters,
        boolean _withAmountCur,
        boolean _withAmountMST,
        boolean _withAmountMSTSecondary)
    {
        if (_withAmountCur)
        {
            _updateObject.settingClause().add(
                fieldId2Name(tableNum(CustTmpAccountSum), _fieldParameters.balanceCurField),
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, AmountCur)));

            _updateObject.settingClause().add(
                fieldStr(CustTmpAccountSum, Balance01Cur),
                new SysDaPlusExpression(
                    new SysDaFieldExpression(_tmpAccountSUm, fieldStr(CustTmpAccountSum, Balance01Cur)),
                    new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, AmountCur))));
        }

        if (_withAmountMST)
        {
            _updateObject.settingClause().add(
                fieldId2Name(tableNum(CustTmpAccountSum), _fieldParameters.balanceMSTField),
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, Amount)));

            _updateObject.settingClause().add(
                fieldStr(CustTmpAccountSum, Balance01),
                new SysDaPlusExpression(
                    new SysDaFieldExpression(_tmpAccountSUm, fieldStr(CustTmpAccountSum, Balance01)),
                    new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, Amount))));
        }

        if (_withAmountMSTSecondary)
        {
            _updateObject.settingClause().add(
                fieldId2Name(tableNum(CustTmpAccountSum), _fieldParameters.balanceReportingCurrencyField),
                new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, AmountReporting)));

            _updateObject.settingClause().add(
                fieldStr(CustTmpAccountSum, Balance01ReportingCurrency),
                new SysDaPlusExpression(
                    new SysDaFieldExpression(_tmpAccountSUm, fieldStr(CustTmpAccountSum, Balance01ReportingCurrency)),
                    new SysDaFieldExpression(_agingCalculatedTmp, fieldStr(CustVendAgingCalculatedTmp, AmountReporting))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAccountsFromCustVendAgingCalculation</Name>
				<Source><![CDATA[
    internal static void insertCustAccountsFromCustVendAgingCalculation(CustTmpAccountSum _tmpAccountSum, CustVendAgingCalculatedTmp _agingCalculatedTmp, CustVendTransAging _custVendTransAging)
    {
        insert_recordset 
            _tmpAccountSum (AccountNum, CurrencyCode, BillingClassification, InvoiceId, TransDate, Txt, Voucher, Name, GroupId)
            select AccountNum, CurrencyCode, BillingClassification, InvoiceId, TransDate, Txt, Voucher
                from _agingCalculatedTmp
                group by AccountNum, CurrencyCode, BillingClassification, TransDate, InvoiceId, Voucher, Txt
                join Name, GroupId from _custVendTransAging
                    group by Name, GroupId
                    where _agingCalculatedTmp.AccountNum == _custVendTransAging.AccountNum
                notexists join _tmpAccountSum
                    where _tmpAccountSum.AccountNum == _agingCalculatedTmp.AccountNum
                        && _agingCalculatedTmp.CurrencyCode == _tmpAccountSum.CurrencyCode
                        && _agingCalculatedTmp.BillingClassification == _tmpAccountSum.BillingClassification
                        && _agingCalculatedTmp.TransDate == _tmpAccountSum.TransDate
                        && _agingCalculatedTmp.InvoiceId == _tmpAccountSum.InvoiceId
                        && _agingCalculatedTmp.Voucher == _tmpAccountSum.Voucher
                        && _agingCalculatedTmp.Txt == _tmpAccountSum.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustTmpAccountSumBuilder construct()
    {
        return new CustTmpAccountSumBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>