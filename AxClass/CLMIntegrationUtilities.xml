<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationUtilities</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;

/// <summary>
/// The <c>CLMIntegrationUtilities</c> class provides userful functions for CLM Integration.
/// </summary>
internal final class CLMIntegrationUtilities
{
    private const str AzureADAuthorityUri = 'https://login.microsoftonline.com';
    private const str AzureADAuthorityUri_China = 'https://login.chinacloudapi.cn';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getUrlGenerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get URL generator. 
    /// </summary>
    /// <param name = "_menuItem">The Menu item name.</param>
    /// <returns>The Url generator.</returns>
    internal final static Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator getUrlGenerator(str _menuItem)
    {
        Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator generator =
            new Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator();

        generator.EncryptRequestQuery = true;
        generator.HostUrl = CLMIntegrationUtilities::getClientUrl();
        generator.MenuItemName = _menuItem;
        generator.Partition = getCurrentPartition();
        generator.PageType = FormViewOption::Details;

        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Client URL.
    /// </summary>
    /// <returns>Client URL</returns>
    internal final static str getClientUrl()
    {
        var environment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();
        var infrastructureEnv = environment.Infrastructure;
        var clientUrl = infrastructureEnv.HostUrl;

        if (!clientUrl.EndsWith(@"/"))
        {
            clientUrl += "/";
        }

        return clientUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsoluteUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate full Url and get Get Absolute Uri
    /// </summary>
    /// <param name = "_generator">The URL generator. </param>
    /// <returns>AbsoluteUri</returns>
    internal final static str getAbsoluteUri(Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator _generator)
    {
        System.Uri fullURI = _generator.GenerateFullUrl();
        str execUrl = (fullURI == null)? '' : fullURI.AbsoluteUri.ToString();

        return execUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsoluteUriFromRelativeUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate full URL from base URL and relative URL.
    /// </summary>
    /// <param name = "_baseURL">Base URL.</param>
    /// <param name = "_relativeURL">Relative URL.</param>
    /// <param name = "_throwError">Controls whether an error should be thrown.</param>
    /// <returns>Absolute URL.</returns>
    internal final static str getAbsoluteUriFromRelativeUri(str _baseURL, str _relativeURL, boolean _throwError = true)
    {
        System.Uri baseURL = null;

        if (!System.Uri::TryCreate(_baseURL, System.UriKind::Absolute, byref baseURL) || CLRInterop::isNull(baseURL))
        {
            if (_throwError)
            {
                throw error(strFmt("@CLMIntegration:UnableToCreateAbsoluteUrl", _baseURL));
            }
            else
            {
                error(strFmt("@CLMIntegration:UnableToCreateAbsoluteUrl", _baseURL));
                return '';
            }
        }

        System.Uri requestURL = null;

        if (!System.Uri::TryCreate(baseURL, _relativeURL, byref requestURL) || CLRInterop::isNull(requestURL))
        {
            if (_throwError)
            {
                throw error(strFmt("@CLMIntegration:UnableToCreateAbsoluteUrl", _relativeURL));
            }
            else
            {
                error(strFmt("@CLMIntegration:UnableToCreateAbsoluteUrl", _relativeURL));
                return '';
            }

        }

        return requestURL.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUriWithServiceOperationQueryParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate full URL from base URL and service operation URL parameters.
    /// </summary>
    /// <param name = "_serviceOperation">Service operation record.</param>
    /// <param name = "_requestUri">Request URL.</param>
    /// <param name = "_urlEncode">Indicates whether we should URL encode URL parameter values.</param>
    /// <returns>Full URL with parameters.</returns>
    internal final static str getUriWithServiceOperationQueryParameters(CLMIntegrationServiceOperation _serviceOperation, str _requestUri, boolean _urlEncode = true)
    {
        boolean firstQueryStringParameter = true;

        CLMIntegrationServiceOperationKeyValue serviceOperationKeyValue;

        while select serviceOperationKeyValue
            where serviceOperationKeyValue.ServiceOperation == _serviceOperation.RecId
                && serviceOperationKeyValue.KeyValueType == CLMIntegrationKeyValueType::QueryString
        {
            if (firstQueryStringParameter)
            {
                if (!strEndsWith(_requestUri, '?'))
                {
                    _requestUri = _requestUri + '?';
                }
                firstQueryStringParameter = false;
            }
            else
            {
                _requestUri = _requestUri + '&';
            }

            str key = _urlEncode ? System.Web.HttpUtility::UrlEncode(serviceOperationKeyValue.Key) : serviceOperationKeyValue.Key;
            str value = _urlEncode ? System.Web.HttpUtility::UrlEncode(serviceOperationKeyValue.Value) : serviceOperationKeyValue.Value;

            _requestUri = _requestUri + key + '=' + value;
        }

        return _requestUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUriWithExternalNavigationLinkQueryParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate full URL from base URL and extern navigation URL parameters.
    /// </summary>
    /// <param name = "_navigationLink">Navigation link record.</param>
    /// <param name = "_requestUri">Request URL.</param>
    /// <param name = "_navigationHandler">Navigation handler class to fill placeholders with data.</param>
    /// <param name = "_urlEncode">Indicates if query parameters should be encoded.</param>
    /// <returns>Full URL with parameters and filled placeholders with data.</returns>
    internal final static str getUriWithExternalNavigationLinkQueryParameters(
        CLMIntegrationExternalNavigationLink _navigationLink, 
        str _requestUri, 
        CLMIntegrationExternalNavigationHandler _navigationHandler = null,
        boolean _urlEncode = false)
    {
        boolean firstQueryStringParameter = true;

        CLMIntegrationExternalNavigationLinkKeyValue navigationLinkKeyValue;

        while select navigationLinkKeyValue
            where navigationLinkKeyValue.ExternalNavigationLink == _navigationLink.RecId
                && navigationLinkKeyValue.KeyValueType == CLMIntegrationKeyValueType::QueryString
        {
            if (firstQueryStringParameter)
            {
                if (!strEndsWith(_requestUri, '?'))
                {
                    _requestUri = _requestUri + '?';
                }
                firstQueryStringParameter = false;
            }
            else
            {
                _requestUri = _requestUri + '&';
            }

            str key = _urlEncode ? System.Web.HttpUtility::UrlEncode(navigationLinkKeyValue.Key) : navigationLinkKeyValue.Key;

            str value = navigationLinkKeyValue.Value;
            value = _navigationHandler ? _navigationHandler.replacePlaceholders(value) : value;
            value = _urlEncode ? System.Web.HttpUtility::UrlEncode(value) : value;

            _requestUri = _requestUri + key + '=' + value;
        }

        return _requestUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAzureADAuthorityUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve Azure AD Authority URL.
    /// </summary>
    /// <param name = "_tenantID">Tenant ID to be used to create authority URL.</param>
    /// <returns>Azure AD Authority URL.</returns>
    internal static CLMIntegrationAuthorizationURL getAzureADAuthorityUri(TenantID _tenantID)
    {
        try
        {
            // Get it from the environment, i.e. web.config.
            var aadConfig = EnvironmentFactory::GetApplicationEnvironment().Aad;
            str endpointFormat = aadConfig.AADLoginWsfedEndpointFormat;

            if (strContains(endpointFormat, @".cn"))
            {
                return strFmt('%1/%2', AzureADAuthorityUri_China, _tenantID);
            }
        }
        catch
        {
            error("@CLMIntegration:AuthorizationURLCannotBeDetermined");
        }

        return strFmt('%1/%2', AzureADAuthorityUri, _tenantID);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>