<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcTaskAgent_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <C>AssetDepPreTaxDedProcTaskAgent_JP</C> class
/// </summary>
class AssetDepPreTaxDedProcTaskAgent_JP
{
    #define.SleepTimeForWaitingInMS(100)

    AssetDepPreTaxDedProcess_JP     assetDepPreTaxDedProcess;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes tasks.
    /// </summary>
    protected void executeTasks()
    {
        AssetDepPreTaxDedProcessTask_JP         assetDepPreTaxDedProcessTask;
        AssetDepPreTaxDedProcTaskHandler_JP     assetDepPreTaxDedProcTaskHandler;
        AssetDepPreTaxDedProcessTaskStatus_JP   taskRunResult;

        while (true)
        {
            ttsBegin;

            // Try to fetch a new task from the pool
            assetDepPreTaxDedProcessTask = this.fetchNewTask();
            if (assetDepPreTaxDedProcessTask)
            {
                // Execute the new task
                assetDepPreTaxDedProcTaskHandler = AssetDepPreTaxDedProcTaskHandler_JP::construct(assetDepPreTaxDedProcessTask);

                if (assetDepPreTaxDedProcTaskHandler)
                {
                    taskRunResult = assetDepPreTaxDedProcTaskHandler.run();
                }
                else
                {
                    taskRunResult = AssetDepPreTaxDedProcessTaskStatus_JP::Failed;
                }

                assetDepPreTaxDedProcessTask.Status = taskRunResult;
                assetDepPreTaxDedProcessTask.update();
            }
            else
            {
                if (this.isFinished())
                {
                    ttsCommit;
                    break;
                }
                else
                {
                    // Not able to fetch new task, but there are still some open task which are depended on other running task.
                    // Sleep for some time to wait for the running task to be finished.
                    sleep(#SleepTimeForWaitingInMS);
                }
            }

            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>fetchNewTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches a new task.
    /// </summary>
    /// <returns>
    /// Returns a new task
    /// </returns>
    protected AssetDepPreTaxDedProcessTask_JP fetchNewTask()
    {
        AssetDepPreTaxDedProcessTask_JP     assetDepPreTaxDedProcessTask;
        #OCCRetryCount

        assetDepPreTaxDedProcessTask.readPast(true);

        try
        {
            select pessimisticlock firstOnly assetDepPreTaxDedProcessTask
                where assetDepPreTaxDedProcessTask.AssetDepPreTaxDedProcess_JP  == assetDepPreTaxDedProcess.RecId
                    && assetDepPreTaxDedProcessTask.Status                      == AssetDepPreTaxDedProcessTaskStatus_JP::Active;

            if (assetDepPreTaxDedProcessTask)
            {
                assetDepPreTaxDedProcessTask.Status = AssetDepPreTaxDedProcessTaskStatus_JP::InProgress;
                assetDepPreTaxDedProcessTask.update();
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() <= #RetryNum)
            {
                retry;
            }
        }

        return assetDepPreTaxDedProcessTask;
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization lays here.
    /// </summary>
    protected void init()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>isFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if is finished.
    /// </summary>
    /// <returns>
    /// Returns true if finished, otherwise false.
    /// </returns>
    protected boolean isFinished()
    {
        AssetDepPreTaxDedProcessTask_JP     assetDepPreTaxDedProcessTask;

        assetDepPreTaxDedProcessTask.readPast(true);

        select firstOnly RecId from assetDepPreTaxDedProcessTask
            where assetDepPreTaxDedProcessTask.AssetDepPreTaxDedProcess_JP  == assetDepPreTaxDedProcess.RecId
                && (assetDepPreTaxDedProcessTask.Status     == AssetDepPreTaxDedProcessTaskStatus_JP::Active
                    || assetDepPreTaxDedProcessTask.Status  == AssetDepPreTaxDedProcessTaskStatus_JP::InProgress);

        return (assetDepPreTaxDedProcessTask.RecId == 0);
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <C>AssetDepPreTaxDedProcess_JP</C>.
    /// </summary>
    /// <param name="_assetDepPreTaxDedProcess">
    /// The <C>AssetDepPreTaxDedProcess_JP</C>
    /// </param>
    protected void new(AssetDepPreTaxDedProcess_JP _assetDepPreTaxDedProcess)
    {
        assetDepPreTaxDedProcess    = _assetDepPreTaxDedProcess;
    }
]]></Source>
			</Method>
			<Method>
				<Name>postFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the finished
    /// </summary>
    protected void postFinished()
    {
        AssetDepLimitCalculator_JP::clearCacheForOwner(assetDepPreTaxDedProcess);
    }
]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the task agent.
    /// </summary>
    public void run()
    {
        this.init();

        this.executeTasks();

        this.postFinished();
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetDepPreTaxDedProcTaskAgent_JP</C>.
    /// </summary>
    /// <param name="_assetDepPreTaxDedProcess">
    /// The <C>AssetDepPreTaxDedProcess_JP</C> record
    /// </param>
    /// <returns>
    /// Returns a new instance of <C>AssetDepPreTaxDedProcTaskAgent_JP</C>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exeption when no <C>AssetDepPreTaxDedProcess_JP</C> records
    /// </exception>
    public static AssetDepPreTaxDedProcTaskAgent_JP construct(AssetDepPreTaxDedProcess_JP _assetDepPreTaxDedProcess)
    {
        AssetDepPreTaxDedProcTaskAgent_JP   ret;

        if (_assetDepPreTaxDedProcess.RecId == 0)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ret = new AssetDepPreTaxDedProcTaskAgent_JP(_assetDepPreTaxDedProcess);

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>