<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomRouteVersionApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class BomRouteVersionApprove extends RunBase
{
    recId           recId;

    BOMRouteApprover approver;
    NoYes           remove;
    NoYes           blockRemoveOfApproval;
    NoYes           isAlreadyApproved;

    DialogField     fieldApprover;
    DialogField     fieldName;
    DialogField     fieldRemove;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        approver,
        remove,
        recId,
        blockRemoveOfApproval,
        isAlreadyApproved
   #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockRemoveOfApproval</Name>
				<Source><![CDATA[
    public NoYes blockRemoveOfApproval()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();
        Object          fieldApproverControl;

        dialog.formBuildDesign().dialogSize(0);

        fieldApprover = dialog.addFieldValue(extendedtypestr(BOMRouteApprover), approver, "@SYS3492");
        fieldApproverControl = fieldApprover.control();

        fieldApproverControl.registerOverrideMethod(identifierstr(LookupReference), methodstr(BOMRouteApprove, workerLookup), this);
        fieldApproverControl.registerOverrideMethod(methodStr(FormReferenceGroupControl, modified), methodstr(BOMRouteApprove, lookupModified), this);
        fieldApproverControl.replacementFieldGroup(identifierstr(PersonnelNumber));

        fieldName = dialog.addField(extendedtypestr(DirPartyRecId), "@SYS80991");
        fieldName.enabled(false);

        HcmWorker hcmWorker = HcmWorker::find(approver);
        if (hcmWorker)
        {
            fieldName.value(hcmWorker.Person);
        }

        if (!this.blockRemoveOfApproval())
        {
            if (this.isAlreadyApproved())
                fieldRemove = dialog.addFieldValue(extendedtypestr(NoYesId),remove,"@SYS72947");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);
        fieldApprover.alignControl(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        if (fieldRemove)
        {
            remove = fieldRemove.value();
        }
        else
        {
            remove = NoYes::No;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    abstract boolean isAlreadyApproved()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprover</Name>
				<Source><![CDATA[
    BOMRouteApprover parmApprover(BOMRouteApprover _approver = approver)
    {
        approver = _approver;

        return approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    recId parmRecId(recId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemove</Name>
				<Source><![CDATA[
    //SIG
    public NoYes parmRemove(NoYes _remove = remove)
    {
        if (!prmisdefault(_remove))
        {
            remove = _remove;
        }

        return remove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        if (remove)
        {
            ret = true;
        }
        else
        {
            if (this.parmApprover())
            {
                //only active workers within the current legal entity may approve a BOM or route
                ret = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(this.parmApprover());
                if (!ret)
                {
                    //"ALA" is not active or is not an employee
                    error(strfmt("@SYS39817", HcmWorker::find(this.parmApprover()).PersonnelNumber));
                }
            }
            else
            {
                ret = checkFailed("@SYS8980");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a lookup for selecting a worker in the current legal entity.
    /// </summary>
    /// <param name="_callerControl">
    ///    The control that called the method.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common workerLookup(Object _callerControl)
    {
        HcmWorker hcmWorker;
        if (_callerControl)
        {
            hcmWorker = HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(_callerControl);
        }

        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     If the worker field is modified, then lookup the name and add it the the name control.
    /// </summary>
    /// <param name = "_callerControl">
    ///     The control that called the method.
    ///</param>
    /// <returns>
    ///    Always true (validation happens as part of the reference group).
    /// </returns>
    public boolean lookupModified(FormReferenceGroupControl _callerControl)
    {
        if (_callerControl)
        {
            _callerControl.modified();

            HcmWorker hcmWorker = HcmWorker::find(_callerControl.value());
            FormReferenceGroupControl controlName = fieldName.control();
            controlName.value(hcmWorker.Person);
            controlName.update();

            this.parmApprover(_callerControl.value());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMRouteVersionApprove construct(Args args)
    {
        BOMRouteVersionApprove  versionApprove;

        switch (args.dataset())
        {
            case tablenum(BOMVersion):
                return BOMRouteVersionApprove::newBOMVersion(args.record());
            case tablenum(RouteVersion):
                return BOMRouteVersionApprove::newRouteVersion(args.record());
        }

        throw error(strfmt("@SYS26273",classId2Name(classidget(versionApprove))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BOMRouteVersionApprove  approve;
        FormDataSource          datasource;

        approve = BOMRouteVersionApprove::construct(args);

        if (approve.prompt())
        {
            approve.runOperation();

            if (args.record() && FormDataUtil::getFormDataSource(args.record()))
            {
                datasource = FormDataUtil::getFormDataSource(args.record());
                datasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMVersion</Name>
				<Source><![CDATA[
    static BOMVersionApprove newBOMVersion(BOMVersion version)
    {
        BOMVersionApprove approve = new BOMVersionApprove();

        approve.getLast();
        approve.parmRecId(version.RecId);
        approve.parmApprover(HcmWorker::userId2Worker(curuserid()));
        approve.init();

        return approve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteVersion</Name>
				<Source><![CDATA[
    static RouteVersionApprove newRouteVersion(RouteVersion version)
    {
        RouteVersionApprove approve = new RouteVersionApprove();

        approve.getLast();
        approve.parmRecId(version.RecId);
        approve.parmApprover(HcmWorker::userId2Worker(curuserid()));
        approve.init();

        return approve;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>