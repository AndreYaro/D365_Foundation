<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlafondUpdate_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class holds the logic for Plafond-specific operations.
/// </summary>
public class PlafondUpdate_IT
{
    private Plafond_IT plafond;
    private Map plafondTransList;
    private Map balancesList;
    private PlafondAmount_IT newPlafondAmount;
    private boolean balancesCalculated;
    private Map previousBalances;
    private Map endBalances;
    private PlafondPeriodTrans_IT tmpPlafondPeriodTrans;
    private boolean throwErrors;
    private PlafondDate_IT plafondDate;
    private Set intentLetterSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add tax transaction and recalculates plafond amount.
    /// </summary>
    /// <param name = "_taxTrans">Transaction to add.</param>
    /// <returns>true if operation completed, false otherwise.</returns>
    public boolean addTaxTrans(TaxTrans _taxTrans)
    {
        TaxTrans_IT taxTrans_IT = _taxTrans.taxTrans_IT();
        TaxReportPeriod taxReportPeriod = TaxReportPeriod::find(_taxTrans.TaxPeriod, taxTrans_IT.PlafondDate);
        PlafondPeriodTrans_IT plafondPeriodTrans;
        str key = plafondPeriodTrans.makeKey(taxReportPeriod.TaxPeriod,taxReportPeriod.FromDate,taxReportPeriod.ToDate);
        boolean transExist;
        boolean ok = true;

        if (!_taxTrans.TaxBookSection)
        {
            return true;
        }

        if (!taxReportPeriod)
        {
            ok = checkFailed("@SYS24993");
        }

        if (_taxTrans.TaxPeriod != Plafond.TaxPeriod)
        {
            ok = checkFailed("@ExtendedItallianLocalization:TaxReportingPeriodMismatch");
        }

        if (plafond.Status != PlafondStatus_IT::Open)
        {
            ok = checkFailed("@ExtendedItallianLocalization:AllowActionOpenHelpText");
        }

        ok = ok && this.checkIntentLetter(_taxTrans);

        if (ok)
        {
            transExist = plafondTransList.exists(key);

            if (transExist)
            {
                plafondPeriodTrans = plafondTransList.lookup(key);
            }
            else
            {
                plafondPeriodTrans = PlafondPeriodTrans_IT::findByDate(_taxTrans.TaxPeriod, taxTrans_IT.PlafondDate, true);

                if (!plafondPeriodTrans)
                {
                    plafondPeriodTrans.initFromPlafond(plafond);
                    plafondPeriodTrans.initFromTaxReportPeriod(taxReportPeriod);
                }

                balancesList.insert(key, plafondPeriodTrans.PlafondAmount);
            }

            plafondPeriodTrans.PlafondAmount += _taxTrans.TaxBaseAmount;

            plafond.CurrentAmount += _taxTrans.TaxBaseAmount;

            newPlafondAmount = plafond.CurrentAmount;

            plafondTransList.insert(key, plafondPeriodTrans);

            intentLetterSet.add(taxTrans_IT.IntentLetterId);
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00047, funcName());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalances</Name>
				<Source><![CDATA[
    private void calcBalances()
    {
        TaxReportPeriod taxReportPeriod;
        PlafondPeriodTrans_IT plafondPeriodTrans;
        str key;
        PlafondAmount_IT lastBalance;


        tmpPlafondPeriodTrans.recordLevelSecurity(false);
        //BP Deviation documented
        tmpPlafondPeriodTrans.setTmp();

        delete_from tmpPlafondPeriodTrans;

        while select taxReportPeriod
            where taxReportPeriod.TaxPeriod == plafond.TaxPeriod
                && taxReportPeriod.FromDate >= plafond.FromDate
                && taxReportPeriod.ToDate <= plafond.ToDate
        {
            key = plafondPeriodTrans.makeKey(taxReportPeriod.TaxPeriod,taxReportPeriod.FromDate,taxReportPeriod.ToDate);

            plafondPeriodTrans = PlafondPeriodTrans_IT::find(taxReportPeriod.TaxPeriod,taxReportPeriod.FromDate,taxReportPeriod.ToDate);

            tmpPlafondPeriodTrans.clear();
            tmpPlafondPeriodTrans.initValue();

            if (!lastBalance)
            {
                lastBalance = plafond.InitialAmount;
            }

            if (plafondPeriodTrans)
            {
                tmpPlafondPeriodTrans.data(plafondPeriodTrans.data());
                previousBalances.insert(key, lastBalance);
                lastBalance -= plafondPeriodTrans.PlafondAmount;
                endBalances.insert(key, lastBalance);
            }
            else
            {
                tmpPlafondPeriodTrans.initFromPlafond(plafond);
                tmpPlafondPeriodTrans.initFromTaxReportPeriod(taxReportPeriod);
                previousBalances.insert(key, lastBalance);
                endBalances.insert(key, lastBalance);
            }

            tmpPlafondPeriodTrans.insert();
        }

        balancesCalculated = true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntentLetter</Name>
				<Source><![CDATA[
    private boolean checkIntentLetter(TaxTrans _taxTrans)
    {
        IntentLetter_IT intentLetter;
        boolean ok = true;
        TaxTrans taxTransLocal;
        TaxTrans_IT taxTrans_IT = _taxTrans.taxTrans_IT();
        intentLetter = IntentLetter_IT::find(taxTrans_IT.IntentLetterId);

        if (!intentLetter)
        {
            ok = checkFailed(strFmt("@ExtendedItallianLocalization:LetterNotExist", taxTrans_IT.IntentLetterId));
        }

        if (ok && (intentLetter.IntentLetterType != IntentLetterType_IT::SpecificOperation
            || intentLetter.FromDate || intentLetter.ToDate))
        {
            //Check validity period
            if (plafondDate
                && (plafondDate < intentLetter.FromDate || plafondDate > intentLetter.ToDate))
            {
                ok = checkFailed(strFmt(
                    "@ExtendedItallianLocalization:PlafondDateOutOfLetterRange",
                    plafondDate,
                    intentLetter.IntentLetterId,
                    intentLetter.FromDate,
                    intentLetter.ToDate));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalPlafondAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the plafond amount.
    /// </summary>
    /// <returns>The plafond amount.</returns>
    public PlafondAmount_IT finalPlafondAmount()
    {
        return newPlafondAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map having period as key and amount as values.
    /// </summary>
    /// <returns>The created map.</returns>
    public Map getEndBalances()
    {
        if (!balancesCalculated)
        {
            this.calcBalances();
        }

        return endBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets previous balancs.
    /// </summary>
    /// <returns>A map having previous balances.</returns>
    public Map getPreviousBalances()
    {
        if (!balancesCalculated)
        {
            this.calcBalances();
        }

        return previousBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpPlafondPeriodTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PlafondPeriodTrans_IT</c> record.
    /// </summary>
    /// <returns>The <c>PlafondPeriodTrans_IT</c> record.</returns>
    public PlafondPeriodTrans_IT getTmpPlafondPeriodTrans()
    {
        if (!balancesCalculated)
        {
            this.calcBalances();
        }

        return tmpPlafondPeriodTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this class.
    /// </summary>
    /// <param name = "_plafond">The plafond record.</param>
    /// <param name = "_throwErrors">If it should throw errors; optional.</param>
    public void new(Plafond_IT _plafond, boolean _throwErrors = true)
    {
        plafond = _plafond;
        plafondTransList = new Map(Types::String, Types::Record);
        balancesList = new Map(Types::String, Types::Real);
        previousBalances = new Map(Types::String, Types::Real);
        endBalances = new Map(Types::String, Types::Real);
        intentLetterSet = new Set(Types::String);

        balancesCalculated = false;
        throwErrors = _throwErrors;
        newPlafondAmount = _plafond.CurrentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlafondDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets plafonda date.
    /// </summary>
    /// <param name = "_plafondDate">The new plafond date; optional.</param>
    /// <returns>The current plafond date.</returns>
    public PlafondDate_IT parmPlafondDate(PlafondDate_IT _plafondDate = plafondDate)
    {
        plafondDate = _plafondDate;

        return plafondDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new plafond.
    /// </summary>
    public void post()
    {
        if (!newPlafondAmount)
        {
            return;
        }

        ttsbegin;

        if ((newPlafondAmount < 0) && !VendParameters::find().PlafondAllowNegative_IT && throwErrors)
        {
            throw error("@ExtendedItallianLocalization:PlafondNegativeAmountNotAllowed");
        }

        MapEnumerator enumerator = plafondTransList.getEnumerator();

        while (enumerator.moveNext())
        {
            PlafondPeriodTrans_IT plafondPeriodTrans = enumerator.currentValue();

            PlafondAmount_IT previousAmount = 0;

            if (balancesList.exists(enumerator.currentKey()))
            {
                previousAmount = balancesList.lookup(enumerator.currentKey());
            }

            PlafondAmount_IT transactionAmount = plafondPeriodTrans.PlafondAmount - previousAmount;

            if (plafondPeriodTrans.RecId != 0)
            {
                plafondPeriodTrans = PlafondPeriodTrans_IT::find(plafondPeriodTrans.TaxPeriod, plafondPeriodTrans.FromDate, plafondPeriodTrans.ToDate, true);
                plafondPeriodTrans.PlafondAmount += transactionAmount;
                plafondPeriodTrans.update();
            }
            else
            {
                plafondPeriodTrans.insert();
            }


            info(strFmt("@ExtendedItallianLocalization:PlafondTransactionCreated",transactionAmount, CompanyInfoHelper::standardCurrency()));
        }

        if (throwErrors
            && !plafond.NoLimitCheck
            && plafond.CurrentAmount > plafond.InitialAmount)
        {
            throw error(strfmt(
                "@ExtendedItallianLocalization:PlafondAmountExceeded",
                (plafond.InitialAmount - plafond.CurrentAmount),
                CompanyInfoHelper::standardCurrency()));
        }

        if (newPlafondAmount == plafond.InitialAmount && !plafond.NoLimitCheck)
        {
            info("@ExtendedItallianLocalization:PlafondReachedItsValueAndClosed");
            plafond.closePlafond();
        }
        else if (newPlafondAmount >= plafond.WarningAmount() && (newPlafondAmount <= plafond.InitialAmount))
        {
            warning("@ExtendedItallianLocalization:PlafondLimitReached");
        }

        plafond.update();

        SetEnumerator letterEnum = intentletterSet.getEnumerator();

        while (letterEnum.moveNext())
        {
            IntentLetter_IT intentLetter = IntentLetter_IT::find(letterEnum.current(), true);

            if (intentLetter.IntentLetterAmountMST && intentLetter.remainAmountMST() < 0)
            {
                error(strFmt("@ExtendedItallianLocalization:LetterExceededAmountLimit", intentLetter.IntentLetterId));
                throw error("@SYS21533");
            }

            if (intentLetter.IntentLetterType == IntentLetterType_IT::SpecificOperation
                || (intentLetter.IntentLetterType == IntentLetterType_IT::Amount && intentLetter.remainAmountMST() == 0))
            {
                intentLetter.close();
                intentLetter.update();

                info(strfmt("@ExtendedItallianLocalization:IntentLetterHasBeenClosed", intentLetter.IntentLetterId));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Class constructor.
    /// </summary>
    /// <param name = "_plafond">The plafond record.</param>
    /// <param name = "_throwErrors">If it should throw errors; optional.</param>
    /// <returns>A <c>PlafondUpdate</c> instance.</returns>
    public static PlafondUpdate_IT construct(Plafond_IT _plafond, boolean _throwErrors = true)
    {
        return new PlafondUpdate_IT(_plafond, _throwErrors);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>