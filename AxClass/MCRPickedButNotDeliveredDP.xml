<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPickedButNotDeliveredDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPickedButNotDeliveredDP</c> populates
/// the temporary table used in the picked but not delivered report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(MCRPickedButNotDeliveredContract))
]
public class MCRPickedButNotDeliveredDP extends SRSReportDataProviderPreProcessTempDB
{
    TmpMCRPickedButNotDelivered     tmpMCRPickedButNotDelivered;
    List                            warehouse;
    TransDate                       throughDate;
    MCRInventTransType              transactionType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enumItemLabel</Name>
				<Source><![CDATA[
        private EntityName enumItemLabel(InventTransType _type)
    {
        EntityName  enumLabel;

        #define.Transfer("Transfer order")

        if (_type == InventTransType::Sales)
        {
            enumLabel = enum2str(InventTransType::Sales);
        }
        else if (_type == InventTransType::TransferOrderShip)
        {
            enumLabel = #Transfer;
        }

        return enumLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpMCRPickedButNotDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TmpMCRPickedButNotDelivered</c> buffer.
    /// </summary>
    /// <returns>
    /// The <c>TmpMCRPickedButNotDelivered</c> buffer.
    /// </returns>
    [
        SRSReportDataSetAttribute('TmpMCRPickedButNotDelivered')
    ]
    public TmpMCRPickedButNotDelivered getTmpMCRPickedButNotDelivered()
    {
        select  tmpMCRPickedButNotDelivered;
        return  tmpMCRPickedButNotDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpMCRPickedButNotDelivered</Name>
				<Source><![CDATA[
        private void insertTmpMCRPickedButNotDelivered()
    {
        SalesLine                           salesLine;
        SalesTable                          salesTable;
        InventTransferLine                  inventTransferLine;
        InventDim                           inventDim;

        AmountCur                           orderAmount;
        Query                               query;
        QueryRun                            queryRun;
        QueryBuildRange                     qbWarehouseRange;
        MCRPickedButNotDeliveredContract    contract;
        ListEnumerator                      warehouseListEnum;

        contract = this.parmDataContract() as MCRPickedButNotDeliveredContract;

        transactionType = contract.parmTransactionType();
        warehouse = contract.parmWarehouse();
        throughDate = contract.parmThroughDate();

        // Sales order Picking
        if (transactionType == MCRInventTransType::Sales)
        {
            query = new query(queryStr(MCRPickedButNotDelvSalesOrder));
            queryRun = new QueryRun(query);

            if (warehouse != null)
            {
                qbWarehouseRange = queryRun.query().dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventLocationId));
                warehouseListEnum = warehouse.getEnumerator();

                while (warehouseListEnum.moveNext())
                {
                    qbWarehouseRange.value(queryRangeConcat(qbWarehouseRange.value(), warehouseListEnum.current()));
                }
            }

            while (queryRun.next())
            {
                salesLine       = queryRun.get(tableNum(SalesLine));
                salesTable      = queryRun.get(tableNum(SalesTable));
                inventDim       = queryRun.get(tableNum(InventDim));

                if (salesLine.ShippingDateConfirmed <= throughDate)
                {
                    MCRSalesOrderDetailedStatus salesOrderDetailStatus =  MCRSalesDetailedStatus::salesOrderDetailedStatus(salesTable);
                    MCRSalesLineDetailedStatus salesLineDetailStatus = MCRSalesDetailedStatus::salesLineDetailedStatus(salesLine);

                    if ((
                            salesOrderDetailStatus == MCRSalesOrderDetailStatus::Picked ||
                            salesOrderDetailStatus == MCRSalesOrderDetailStatus::PartiallyDelivered
                        )
                        &&
                        (
                            salesLineDetailStatus == MCRSalesLineDetailStatus::PartiallyPicked ||
                            salesLineDetailStatus == MCRSalesLineDetailStatus::Picked ||
                            salesLineDetailStatus == MCRSalesLineDetailStatus::PartiallyDelivered
                        ))
                    {
                        //insert temp table records here

                        tmpMCRPickedButNotDelivered.OrderNumber     = salesLine.SalesId;
                        tmpMCRPickedButNotDelivered.ItemNumber      = salesLine.ItemId;
                        tmpMCRPickedButNotDelivered.EnumItemLabel   = this.enumItemLabel(InventTransType::Sales);
                        tmpMCRPickedButNotDelivered.DateStatus      = salesLine.ShippingDateConfirmed;
                        tmpMCRPickedButNotDelivered.Name            = salesLine.itemName();
                        if (salesLine.isStocked())
                        {
                            tmpMCRPickedButNotDelivered.Qty         = salesLine.pickedInTotalInventUnit();

                            if (tmpMCRPickedButNotDelivered.Qty == 0)
                            {
                                tmpMCRPickedButNotDelivered.clear();
                                continue;
                            }
                        }
                        else
                        {
                            tmpMCRPickedButNotDelivered.Qty         = salesLine.QtyOrdered;
                        }
                        tmpMCRPickedButNotDelivered.OrderAmount     = this.OrderAmountSales(salesLine);
                        tmpMCRPickedButNotDelivered.InventLocationId  = inventDim.InventLocationId;
                        tmpMCRPickedButNotDelivered.SalesStatus = salesTable.SalesStatus;
                        tmpMCRPickedButNotDelivered.SODetailedStatus = salesOrderDetailStatus;
                        tmpMCRPickedButNotDelivered.SLDetailedStatus = salesLineDetailStatus;
                        tmpMCRPickedButNotDelivered.insert();

                        tmpMCRPickedButNotDelivered.clear();
                    }
                }
            }
        }

        // Transfer order Picking
        if (transactionType == MCRInventTransType::TransferOrderShip)
        {
            query = new query(queryStr(MCRPickedButNotDelvTransferOrder));
            queryRun = new queryRun(query);

            if (warehouse != null)
            {
                qbWarehouseRange = queryRun.query().dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventLocationId));
                warehouseListEnum = warehouse.getEnumerator();

                while (warehouseListEnum.moveNext())
                {
                    qbWarehouseRange.value(queryRangeConcat(qbWarehouseRange.value(), warehouseListEnum.current()));
                }
            }

            while (queryRun.next())
            {
                inventTransferLine = queryRun.get(tableNum(InventTransferLine));
                inventDim = queryRun.get(tableNum(InventDim));

                tmpMCRPickedButNotDelivered.clear();

                if (inventTransferLine.ShipDate <= throughDate)
                {
                    orderAmount = inventTransferLine.QtyTransfer *
                                    InventSum::find(inventTransferLine.ItemId, inventTransferLine.InventDimId).averageCostPrice();

                    tmpMCRPickedButNotDelivered.OrderNumber     = inventTransferLine.TransferId;
                    tmpMCRPickedButNotDelivered.ItemNumber      = inventTransferLine.ItemId;
                    tmpMCRPickedButNotDelivered.EnumItemLabel   = this.enumItemLabel(InventTransType::TransferOrderShip);
                    tmpMCRPickedButNotDelivered.DateStatus      = inventTransferLine.ShipDate;
                    tmpMCRPickedButNotDelivered.Name            = inventTransferLine.itemName();
                    tmpMCRPickedButNotDelivered.Qty             = inventTransferLine.QtyTransfer;
                    tmpMCRPickedButNotDelivered.InventLocationId  = inventDim.InventLocationId;
                    tmpMCRPickedButNotDelivered.OrderAmount     = orderAmount;
                    tmpMCRPickedButNotDelivered.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventoryCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory cost for an item.
    /// </summary>
    /// <param name="_itemid">
    /// The item ID in which retrieving cost.
    /// </param>
    /// <param name="_qty">
    /// The quantity of item.
    /// </param>
    /// <returns>
    /// The inventory cost for the quantity of item.
    /// </returns>
    public AmountCur InventoryCost(ItemId _itemid, InventQty _qty)
    {
        InventTableModule   inventTableModule;
        AmountCur           invCost;

        inventTableModule = InventTableModule::find(_itemid, ModuleInventPurchSales::Invent);

        if (inventTableModule.PriceUnit > 0)
        {
            // When Price is defined for multiple Units.
            invCost = (inventTableModule.Price / inventTableModule.PriceUnit) * _qty;
        }
        else
        {
            // Price defined is applicable to 1 Unit.
            invCost = inventTableModule.Price * _qty;
        }

        return invCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAmountSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the order amount for a single sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line record in which finding total amount.
    /// </param>
    /// <returns>
    /// The total order amount for a single sales line.
    /// </returns>
    private AmountCur orderAmountSales(SalesLine _salesLine)
    {
        SalesTable              salesTable;
        SalesLine               salesLine = _salesLine;
        AmountCur               orderAmtRet;
        AmountCur               baseAmt;
        CurrencyCode            systmCurrCode;
        AmountCur               discAmt;
        InventTrans             inventTrans =  InventTrans::findByInventTransOrigin(
                                            InventTransOriginSalesLine::findInventTransOriginId(
                                            _salesLine.dataAreaId, _salesLine.InventTransId));
        CurrencyExchangeHelper  currExchHelper;

        systmCurrCode   = SystemParameters::find(false).SystemCurrencyCode;
        salesTable      = SalesTable::find(salesLine.SalesId);
        discAmt         = salesTable.DiscPercent * 0.01;

        if (systmCurrCode != salesLine.CurrencyCode)
        {
            currExchHelper = CurrencyExchangeHelper::construct();
            currExchHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));

            baseAmt = currExchHelper.calculateCurrencyToCurrency(salesLine.CurrencyCode,
                                                                 systmCurrCode,
                                                                 salesLine.LineAmount,
                                                                 true);
        }
        else
        {
            baseAmt = (salesLine.LineAmount / salesLine.QtyOrdered) * inventTrans.Qty;
        }

        if (discAmt)
        {
            orderAmtRet = (baseAmt / salesLine.QtyOrdered) * inventTrans.Qty * discAmt;
        }
        else
        {
            orderAmtRet = (baseAmt / salesLine.QtyOrdered) * inventTrans.Qty;
        }

        return orderAmtRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        tmpMCRPickedButNotDelivered.setConnection(this.parmUserConnection());
        this.insertTmpMCRPickedButNotDelivered();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>