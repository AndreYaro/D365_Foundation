<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestAuditDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRequestAuditDP</c> class is the data provider class for the <c>VendRequestAudit</c>
/// report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(VendRequestAuditContract))
]
class VendRequestAuditDP extends SRSReportDataProviderBase
{
    RefRecId                        companyAccount;
    List                            vendRequestTypes;
    List                            vendRequestWorkflowStates;
    FromDate                        submittedFrom;
    ToDate                          submittedTo;

    VendRequestAuditTmp             vendRequestAuditTmp;
    VendRequest                     vendRequest;
    VendRequestProspectiveProfile   prospectiveProfile;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get parameters from report dialog and set them to relevent variables.
    /// </summary>
    /// <returns>
    /// Returns boolean value
    /// </returns>
    private boolean getFromDialog()
    {
        boolean                     ret = true;
        VendRequestAuditContract    contract;

        // Get parameter which is stored in a data contract
        contract                    = this.parmDataContract() as VendRequestAuditContract;
        submittedFrom               = contract.parmSubmittedFrom();
        submittedTo                 = contract.parmSubmittedTo();
        companyAccount              = contract.parmCompanyAccount();
        vendRequestTypes            = contract.parmVendRequestTypes();
        vendRequestWorkflowStates   = contract.parmVendRequestWorkflowStates();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>VendRequestAuditTmp</c> record based on <c>VendRequest</c> and
    /// <c>VendRequestProspectiveProfile</c> data.
    /// </summary>
    private void insertIntoTempTable()
    {
        vendRequestAuditTmp.clear();

        vendRequestAuditTmp.VendRequestDataArea         = vendRequest.DataAreaId;
        vendRequestAuditTmp.VendRequestNumber           = vendRequest.VendRequestNumber;
        vendRequestAuditTmp.VendRequestType             = vendRequest.requestTypeName();
        vendRequestAuditTmp.VendRequestCreatedDate      = DateTimeUtil::date(vendRequest.CreatedDateTime);
        vendRequestAuditTmp.DocumentStatusText          = vendRequest.requestStatus();
        vendRequestAuditTmp.PreparerName                = vendRequest.employeeRequestorName();
        vendRequestAuditTmp.RequestorName               = vendRequest.employeeSponsoredByName();
        vendRequestAuditTmp.AccountNum                  = vendRequest.AccountNum;
        vendRequestAuditTmp.VendorName                  = vendRequest.showVendorName();
        vendRequestAuditTmp.UpdatedOnBehalfOf           = prospectiveProfile.ModifiedBy;
        vendRequestAuditTmp.VendRequestWorkflowState    = vendRequest.VendRequestWorkflowState;
        vendRequestAuditTmp.ReasonCode                  = vendRequest.editReasonCode(false, '');

        vendRequestAuditTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        ListEnumerator                  listEnumerator;
        VendRequestInstanceEntityType   vendRequestType;

        // Get parameter values from data contract
        this.getFromDialog();

        // Check which types of vendor requests need to be shown
        if (vendRequestTypes != null)
        {
            listEnumerator = vendRequestTypes.getEnumerator();
            while (listEnumerator.moveNext())
            {
                vendRequestType = listEnumerator.current();

                switch (vendRequestType)
                {
                    case VendRequestInstanceEntityType::Company:
                        this.runQuery(querystr(VendRequestCompanyHistory));
                        break;

                    case VendRequestInstanceEntityType::StatusChange:
                        this.runQuery(querystr(VendRequestStatusChangeHistory));
                        break;

                    case VendRequestInstanceEntityType::Category:
                        this.runQuery(querystr(VendRequestCategoryHistory));
                        break;
                }
            }
        }
        else
        {
            // If parameter is empty, then show all vendor requests
            this.runQuery(querystr(VendRequestCompanyHistory));
            this.runQuery(querystr(VendRequestStatusChangeHistory));
            this.runQuery(querystr(VendRequestCategoryHistory));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a query based on the input query name and specified parameter values.
    /// </summary>
    /// <param name="_queryName">
    /// The name of the target query.
    /// </param>
    private void runQuery(str _queryName)
    {
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildRange             range;
        ListEnumerator              listEnumerator;
        VendRequestWorkflowState    vendRequestWorkflowState;
        DataArea                    dataArea;

        query = new Query(_queryName);
        query.allowCrossCompany(true);
        query.clearCompanyRange();

        // Set company according to parameters. O means 'All'
        if (companyAccount == 0)
        {
            while select Id from dataArea
                where dataArea.IsVirtual == false
            {
                query.addCompanyRange(dataArea.Id);
            }
        }
        else
        {
            select Id from dataArea
                where dataArea.RecId == companyAccount;
            query.addCompanyRange(dataArea.Id);
        }

        // Add a new range to VendRequestWorkflowState field according to parameters
        if (vendRequestWorkflowStates != null)
        {
            listEnumerator = vendRequestWorkflowStates.getEnumerator();

            while (listEnumerator.moveNext())
            {
                vendRequestWorkflowState = listEnumerator.current();
                range = query.dataSourceNo(1).addRange(fieldnum(VendRequest, VendRequestWorkflowState));
                range.value(queryValue(vendRequestWorkflowState));
            }
        }

        // Add a new range to createdDateTime according to parameters
        if (submittedFrom || submittedTo)
        {
            // The first data source is a sub type of VendRequest
            range = query.dataSourceNo(1).addRange(fieldnum(VendRequest, CreatedDateTime));
            range.value(queryRange(submittedFrom, submittedTo));
        }

        queryRun = new QueryRun(query);

        // Run query and create new temporary records
        ttsbegin;
        while (queryRun.next())
        {
            vendRequest         = queryRun.getNo(1);
            if (query.dataSourceTable(tablenum(VendRequestProspectiveProfile)) != null)
                prospectiveProfile  = queryRun.get(tablenum(VendRequestProspectiveProfile));
            else
                prospectiveProfile.clear();

            this.insertIntoTempTable();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendRequestAuditTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>VendRequestAuditTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('VendRequestAuditTmp'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendRequestAuditTmp vendRequestAuditTmp()
    {
        select * from vendRequestAuditTmp;
        return vendRequestAuditTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
