<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysCommonCollectionQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SysCommonCollectionQuery</c> abstract class provides iteration capabilities for queries on derived classes.
/// The selected buffers from the query are returned as <c>SysICommonCollection</c> objects using a <c>SysICommonCollectionEnumerator</c> object.
/// </summary>
abstract public class SysCommonCollectionQuery implements SysICommonCollectionEnumerable
{
    private Query       commonCollectionQuery;
    private QueryRun    commonCollectionQueryRun;
    private Set         readableDataSources;
    private int         retrievedElements;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canEnumerableBeReset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the enumerable content can be reset and traversed again.
    /// </summary>
    /// <returns>
    /// true if the content can be reset; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is not meant to be called directly.
    /// </remarks>
    [Hookable(false)]
    final public boolean canEnumerableBeReset()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommonCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a <c>SysICommonCollection</c> object to be used when returning the current <c>SysICommonCollection</c> object.
    /// </summary>
    /// <returns>
    /// A <c>SysICommonCollection</c> object.
    /// </returns>
    /// <remarks>
    /// This method is not meant to be called directly. Use a <c>SysICommonCollectionEnumerator</c> object to
    /// traverse the content.
    /// </remarks>
    abstract public SysICommonCollection createCommonCollection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentCommonCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current <c>SysICommonCollection</c> object from the current enumerable.
    /// </summary>
    /// <returns>
    /// A <c>SysICommonCollection</c> object.
    /// </returns>
    /// <remarks>
    /// This method is not meant to be called directly. Use a <c>SysICommonCollectionEnumerator</c> object to
    /// traverse the content.
    /// </remarks>
    [Hookable(false)]
    final public SysICommonCollection currentCommonCollection()
    {
        SysICommonCollection commonCollection = this.createCommonCollection();
        
        this.populateCommonCollection(commonCollection);
        commonCollection.completeInitialization();

        return commonCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an enumerator for a collection that lets the user traverse the collection.
    /// </summary>
    /// <returns>
    /// A <c>SysCommonCollectionEnumerator</c> object.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public SysCommonCollectionEnumerator getEnumerator()
    {
        return SysCommonCollectionEnumerator::newFromEnumerable(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateEnumeration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the enumeration of <c>SysICommonCollection</c> objects.
    /// </summary>
    /// <remarks>
    /// This method is not meant to be called directly. Use a <c>SysICommonCollectionEnumerator</c> object to
    /// initiate the traversal of the content.
    /// </remarks>
    [Hookable(false)]
    final public void initiateEnumeration()
    {
        retrievedElements = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveEnumerableNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the current enumberable to the next position.
    /// </summary>
    /// <returns>
    /// true if <c>SysICommonCollection</c> objects exist; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is not meant to be called directly. Use a <c>SysICommonCollectionEnumerator</c> object to
    /// traverse the content.
    /// </remarks>
    [Hookable(false)]
    final public boolean moveEnumerableNext()
    {
        boolean moveNext;

        moveNext = commonCollectionQueryRun.next();

        if (moveNext)
        {
            retrievedElements++;
        }
        return moveNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCommonCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>SysICommonCollection</c> object from the current entry in the enumerable collection.
    /// </summary>
    /// <param name = "_commonCollection">
    /// A <c>SysICommonCollection</c> object to be populated.
    /// </param>
    /// <remarks>
    /// This method is not meant to be called directly. Use a <c>SysICommonCollectionEnumerator</c> object to
    /// traverse the content.
    /// </remarks>
    [Hookable(false)]
    final protected void populateCommonCollection(SysICommonCollection _commonCollection)
    {
        if (!readableDataSources)
        {
            throw error("@SYS336031");
        }
        
        SetEnumerator dataSourceEnumerator = readableDataSources.getEnumerator();

        while (dataSourceEnumerator.moveNext())
        {
            DataSourceNumber dataSourceNumber = dataSourceEnumerator.current();

            _commonCollection.insertCollectionEntry(dataSourceNumber, commonCollectionQueryRun.getNo(dataSourceNumber).data());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievedEnumerableElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the number of currently retrieved <c>SysICommonCollection</c> objects.
    /// </summary>
    /// <returns>
    /// The number of retrieved <c>SysICommonCollection</c> objects.
    /// </returns>
    [Hookable(false)]
    final public int retrievedEnumerableElements()
    {
        return retrievedElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query.
    /// </summary>
    final protected void buildQuery()
    {
        commonCollectionQuery = this.initializeQuery();
        this.addDataSources(commonCollectionQuery);
        this.initializeQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    /// <returns>A Query object</returns>
    protected Query initializeQuery()
    {
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data sources to the query.
    /// </summary>
    /// <param name = "_query">
    /// The <c>Query</c> object where data sources will be added to.
    /// </param>
    abstract protected void addDataSources(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReadableDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified data source number as data source where data can be read from.
    /// </summary>
    /// <param name = "_dataSourceNumber">
    /// A data source number.
    /// </param>
    /// <remarks>
    /// Only readable data sources can be used to populate a <c>SysICommonCollection</c> object.
    /// </remarks>
    final protected void addReadableDataSource(DataSourceNumber _dataSourceNumber)
    {
        if (!readableDataSources)
        {
            readableDataSources = new Set(Types::Integer);
        }

        readableDataSources.add(_dataSourceNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryRun</Name>
				<Source><![CDATA[
    private void initializeQueryRun()
    {
        commonCollectionQueryRun = new QueryRun(commonCollectionQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRun</Name>
				<Source><![CDATA[
    final protected QueryRun getQueryRun()
    {
        return commonCollectionQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    final protected void setQueryRun(QueryRun _queryRun)
    {
        commonCollectionQueryRun = _queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>