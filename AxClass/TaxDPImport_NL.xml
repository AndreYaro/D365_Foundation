<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDPImport_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Reflection;
/// <summary>
/// This class reads responses from Digipoort web service.
/// </summary>
class TaxDPImport_NL
{
    private const str digipoortAssemblyName = 'Microsoft.Dynamics.Digipoortservices';
    private const str digipoortClassName = 'Microsoft.Dynamics.Digipoort.DigipoortServices';
    TaxTurnOverTable_NL         taxTurnOverTable;
    TaxEvatParameters_NL        taxEvatParameters;
    TaxIntraCommTable_NL        taxIntraCommTable;
    TaxDeclarationType          taxDeclarationType;
    Num                         returnedErrorId;
    RequestId_NL                requestId;
    private boolean             isCalledFromEM;
    private TaxDPContract_NL    taxDPContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssembly</Name>
				<Source><![CDATA[
    private Assembly getAssembly()
    {
        Assembly digiAssembly = null;

        try
        {
            digiAssembly = Assembly::Load(digipoortAssemblyName);
        }
        catch (Exception::CLRError)
        {
            error(strFmt("@SYS4003114", digipoortAssemblyName));
        }

        return digiAssembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDigipoortServices</Name>
				<Source><![CDATA[
    private boolean checkDigipoortServices()
    {
        boolean returnValue = false;
        Assembly assembly = this.getAssembly();

        if (assembly)
        {
            System.Type type = Assembly.GetType(digipoortClassName);
            if (type && type.GetProperty('Version') != null)
            {
                str returnedvalue = type.GetProperty('Version').GetValue(null).ToString();
                returnValue = returnedvalue >= '1.0.2';
            }
        }
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads responses from the Digipoort web service.
    /// </summary>
    /// <param name="_request">
    /// The parameters of the request.
    /// </param>
    /// <param name="_endpoint">
    /// The endpoint of the request.
    /// </param>
    /// <param name="_authCertificate">
    /// The authentication certificate.
    /// </param>
    /// <param name="_caCertificate">
    /// The CA certificate.
    /// </param>
    /// <param name="_timeout">
    /// The timeout for the operation.
    /// </param>
    /// <returns>
    /// The response from Digipoort web service.
    /// </returns>
    protected System.Collections.Queue getStatus(
        Microsoft.Dynamics.Digipoort.StatusinformatieService.getStatussenProcesRequest     _request,
        str                                                             _endpoint,
        X509Certificate2                                                _authCertificate,
        X509Certificate2                                                _caCertificate,
        TaxBapiTimeOut                                                  _timeout)
    {
        System.Reflection.MethodInfo m = this.getAssembly().GetType(digipoortClassName).GetMethod('GetStatus_v2');
        System.Object[] argType = new System.Object[5]();
        argType.SetValue(_request, 0);
        argType.SetValue(_endpoint, 1);
        argType.SetValue(_authCertificate, 2);
        argType.SetValue(_caCertificate, 3);
        argType.SetValue(_timeout, 4);
        System.Collections.Queue responseQueue = m.Invoke(null, argType);

        return responseQueue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestId</Name>
				<Source><![CDATA[
    public RequestId_NL parmRequestId(RequestId_NL _requestId = requestId)
    {
        requestId = _requestId;

        return requestId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnedErrorId</Name>
				<Source><![CDATA[
    public Num parmReturnedErrorId(Num _returnedErrorId = returnedErrorId)
    {
        returnedErrorId = _ReturnedErrorId;

        return returnedErrorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDeclarationType</Name>
				<Source><![CDATA[
    public TaxDeclarationType parmTaxDeclarationType(TaxDeclarationType _taxDeclarationType = taxDeclarationType)
    {
        taxDeclarationType = _taxDeclarationType;

        return taxDeclarationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads responses from Digipoort web service.
    /// </summary>
    public void run()
    {
        var request = new Microsoft.Dynamics.Digipoort.StatusinformatieService.getStatussenProcesRequest();
        var identity = new Microsoft.Dynamics.Digipoort.StatusinformatieService.identiteitType ();
        Microsoft.Dynamics.Digipoort.StatusinformatieService.StatusResultaat statusResponse;

        System.Collections.Queue        responseQueue;
        System.Collections.IEnumerator  enumerator;

        str                         strError;
        boolean                     errorsWereFound;

        System.Exception            exc;
        System.Exception            innerExc;
        System.String               clrExcMessage;
        TaxReturnedError_NL         taxReturnedError_NL;
        TaxEvatStatus               taxEvatStatus;

        void processStatusResponse()
        {
            Microsoft.Dynamics.Digipoort.StatusinformatieService.foutType  errorInfo;

            RecId                       errorId;
            str                         errorCode;
            str                         errorDescription;
            str                         statuscode;
            str                         statusDescription;
            str                         statusdetails;
            UTCDateTime                 statusDateTime;

            errorInfo = statusResponse.get_statusFoutcode();
            errorCode = errorInfo.get_foutcode();

            if (errorCode)
            {
                errorsWereFound = true;

                errorDescription = TaxDPSend_NL::getAnyTypeForCLRObject(errorInfo.get_foutbeschrijving());

                if (!isCalledFromEM)
                {
                    error(strFmt("@SYS72198", errorCode));
                    error(errorDescription);
                }

                errorId = TaxEvatError_NL::findByCode(errorCode).RecId;

                taxEvatStatus = TaxEvatStatus::Errors;
            }
            else
            {
                if (taxEvatStatus != TaxEvatStatus::Errors)
                {
                    taxEvatStatus = TaxEvatStatus::Acknowledgement;
                }
            }

            statuscode         = TaxDPSend_NL::getAnyTypeForCLRObject(statusResponse.get_statuscode());
            statusDateTime     = TaxDPSend_NL::getAnyTypeForCLRObject(statusResponse.get_tijdstempelStatus(), Types::UtcDateTime);
            statusDescription  = TaxDPSend_NL::getAnyTypeForCLRObject(statusResponse.get_statusomschrijving());
            statusdetails      = TaxDPSend_NL::getAnyTypeForCLRObject(statusResponse.get_statusdetails());

            taxReturnedError_NL.DeclarationType    = taxDeclarationType;
            taxReturnedError_NL.ReturnedErrorId    = returnedErrorId;
            taxReturnedError_NL.TaxEvatError_NL    = errorId;
            taxReturnedError_NL.ErrorDescription   = strLRTrim(errorId ? errorDescription : errorCode + ' ' + errorDescription);
            taxReturnedError_NL.StatusCode         = statuscode;
            taxReturnedError_NL.StatusDateTime     = statusDateTime;
            taxReturnedError_NL.StatusDescription  = statusDescription;
            taxReturnedError_NL.StatusDetails      = statusdetails;

            if (isCalledFromEM)
            {
                this.getTaxDPContract().getTaxReturnedErrorList().addEnd(taxReturnedError_NL);
            }
            else
            {
                taxReturnedError_NL.insert();
            }
        }

        taxEvatParameters = TaxEvatParameters_NL::find();

        try
        {
            X509Certificate2 certAuth;
            X509Certificate2 certCA;

            if (SystemParameters::find().UseAdvCertificateStore)
            {
                certAuth = KeyVaultCertificateHelper::getDigitalCertificate(taxEvatParameters.KeyVaultCertificateAuth);
                certCA = KeyVaultCertificateHelper::getDigitalCertificate(taxEvatParameters.KeyVaultCertificateCA);

            }
            else
            {
                certAuth = DigitalCertificateManager::getDigitalCertificate(taxEvatParameters.CertificateAuth);
                certCA = DigitalCertificateManager::getDigitalCertificate(taxEvatParameters.CertificateCA);
            }
            request.set_kenmerk(requestId);
            request.set_autorisatieAdres(taxEvatParameters.AuthorizationAddress);

            if (!this.checkDigipoortServices())
            {
                error("@GL_DigipoortLibrary:GL_DigipoortLibrary_MessageError");
                return;
            }
            responseQueue = this.getStatus(
                request,
                taxEvatParameters.StatusServiceURL,
                certAuth,
                certCA,
                taxEvatParameters.ServiceTimeOut);

            enumerator = responseQueue.GetEnumerator();

            if (enumerator.MoveNext() && !CLRInterop::isNull(enumerator.get_Current()))
            {
                do
                {
                    statusResponse = enumerator.get_Current();

                    processStatusResponse();
                }
                while (enumerator.MoveNext());
            }
            else
            {
                taxEvatStatus = TaxEvatStatus::Acknowledgement;
            }

            if ((taxEvatStatus == TaxEvatStatus::Acknowledgement && !errorsWereFound) ||
                 taxEvatStatus == TaxEvatStatus::Errors)
            {
                this.updateStatus(taxEvatStatus);
            }
        }
        catch (Exception::Internal)
        {
            exc = CLRInterop::getLastException();

            if (exc)
            {
                clrExcMessage = exc.get_Message();
                strError = CLRInterop::getAnyTypeForObject(clrExcMessage);

                throw error(strError);
            }
        }
        catch (Exception::CLRError)
        {
            exc = CLRInterop::getLastException();

            if (exc)
            {
                clrExcMessage = exc.get_Message();
                innerExc = exc.get_InnerException();

                while (innerExc != null)
                {
                    clrExcMessage = innerExc.get_Message();
                    innerExc = innerExc.get_InnerException();
                }

                strError = CLRInterop::getAnyTypeForObject(clrExcMessage);

                throw error(strError);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntraCommTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the taxIntraCommTable table variable.
    /// </summary>
    /// <param name="_taxIntraCommTable">
    /// The <c>TaxIntraCommTable_NL</c> table variable.
    /// </param>
    /// <returns>
    /// The taxIntraCommTable table variable.
    /// </returns>
    /// <remarks>
    /// The cursor data is reread.
    /// </remarks>
    public TaxIntraCommTable_NL taxIntraCommTable(TaxIntraCommTable_NL _taxIntraCommTable = taxIntraCommTable)
    {
        taxIntraCommTable = _taxIntraCommTable;
        taxIntraCommTable.reread();

        return taxIntraCommTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTurnOverTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the taxTurnOverTable table variable.
    /// </summary>
    /// <param name="_taxTurnOverTable">
    /// The <c>TaxTurnOverTable_NL</c> table variable.
    /// </param>
    /// <returns>
    /// The taxTurnOverTable table variable.
    /// </returns>
    /// <remarks>
    /// The cursor data is reread.
    /// </remarks>
    public TaxTurnOverTable_NL taxTurnOverTable(TaxTurnOverTable_NL _taxTurnOverTable = taxTurnOverTable)
    {
        taxTurnOverTable = _taxTurnOverTable;
        taxTurnOverTable.reread();

        return taxTurnOverTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>TaxStatus</c> for processed table.
    /// </summary>
    /// <param name="_taxEvatStatus">
    /// The <c>TaxStatus</c> to set.
    /// </param>
    protected void updateStatus(TaxEvatStatus _taxEvatStatus)
    {
        if (isCalledFromEM)
        {
            this.getTaxDPContract().parmTaxEvatStatus(_taxEvatStatus);
        }
        else
        {
            FormObjectSet dataSource;

            ttsbegin;

            switch (taxDeclarationType)
            {
                case TaxDeclarationType::VAT:
                    var taxTurnOverTableUpdate = TaxTurnOverTable_NL::findByTurnOverId(taxTurnOverTable.TurnOverID, true);
                    taxTurnOverTableUpdate.TaxStatus = _taxEvatStatus;
                    taxTurnOverTableUpdate.update();
                    dataSource = FormDataUtil::getFormDataSource(taxTurnOverTable);
                    break;

                case TaxDeclarationType::ICL:
                    var taxIntraCommTableUpdate = TaxIntraCommTable_NL::findByIntraCommId(taxIntraCommTable.IntraCommId, true);
                    taxIntraCommTableUpdate.TaxStatus = _taxEvatStatus;
                    taxIntraCommTableUpdate.update();
                    dataSource = FormDataUtil::getFormDataSource(taxIntraCommTable);
                    break;
            }

            ttscommit;

            if (dataSource)
            {
                dataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxDPImport_NL construct()
    {
        return new TaxDPImport_NL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        TaxDPImport_NL      taxDPImport;
        TaxEvatStatus       taxEvatStatus;

        if (_args && _args.dataset())
        {
            taxDPImport = TaxDPImport_NL::construct();

            switch (_args.dataset())
            {
                case tablenum(TaxTurnOverTable_NL):
                    taxDPImport.taxTurnOverTable(_args.record());
                    taxDPImport.parmTaxDeclarationType(TaxDeclarationType::VAT);
                    taxDPImport.parmReturnedErrorId(taxDPImport.taxTurnOverTable().TurnOverID);
                    taxDPImport.parmRequestId(taxDPImport.taxTurnOverTable().RequestId);
                    taxEvatStatus = TaxTurnOverTable_NL::findByTurnOverId(taxDPImport.taxTurnOverTable().TurnOverID).TaxStatus;
                    break;

                case tablenum(TaxIntraCommTable_NL):
                    taxDPImport.taxIntraCommTable(_args.record());
                    taxDPImport.parmTaxDeclarationType(TaxDeclarationType::ICL);
                    taxDPImport.parmReturnedErrorId(taxDPImport.taxIntraCommTable().IntraCommId);
                    taxDPImport.parmRequestId(taxDPImport.taxIntraCommTable().RequestId);
                    taxEvatStatus = TaxIntraCommTable_NL::findByIntraCommId(taxDPImport.taxIntraCommTable().IntraCommId).TaxStatus;
                    break;

                default:
                    throw error(Error::missingRecord(_args.caller().toString()));
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (taxEvatStatus == TaxEvatStatus::Created ||
            taxEvatStatus == TaxEvatStatus::Acknowledgement ||
           !taxDPImport.parmRequestId())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (TaxEvatParameters_NL::validateServiceParameters())
        {
            taxDPImport.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromEM</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromEM(boolean _isCalledFromEM = isCalledFromEM)
    {
        isCalledFromEM = _isCalledFromEM;
        return isCalledFromEM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDPContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of <c>TaxDPContract_NL</c> object.
    /// </summary>
    /// <returns>The instance of <c>TaxDPContract_NL</c> object.</returns>
    public TaxDPContract_NL getTaxDPContract()
    {
        if (!taxDPContract)
        {
            taxDPContract = new TaxDPContract_NL();
        }

        return taxDPContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>