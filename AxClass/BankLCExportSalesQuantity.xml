<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCExportSalesQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCExportSalesQuantity</c> class calculates the quantity of the  <c>SalesLine</c> record.
/// </summary>
class BankLCExportSalesQuantity extends SalesQuantity_Invoice
{
    BankLCSalesPurchQtyCategoryType salesPurchQtyCategory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity as a <c>SaleQty</c> value.
    /// </summary>
    /// <param name="_common">
    ///    The line to calculate.
    /// </param>
    /// <param name="_specQty">
    ///    The type of the quantity to calculate.
    /// </param>
    /// <param name="_qty">
    ///    The initial quantity; optional
    /// </param>
    /// <param name="_creditRemaining">
    ///    A Boolean value that indicates whether to include the credit remaining quantity; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///    A Boolean value that indicates whether to calculate the remaining quantity; optional.
    /// </param>
    /// <param name="_packingSlips">
    ///    A range which holds ids of packing slips which are updated and by which quantity should be calculated
    /// </param>
    /// <param name="_shippingQuantity">
    ///    _shippingQuantity
    /// </param>
    /// <returns>
    ///    A container with the calculated quantity.
    /// </returns>
    protected container calcQtySales(Common         _common,
                                     SalesUpdate    _specQty             = SalesUpdate::All,
                                     SalesQty       _qty                 = naReal(),
                                     boolean        _creditRemaining     = false,
                                     boolean        _calcRemaining       = true,
                                     PackingSlipIdForUpdate_W _packingSlips   = "",
                                     real _shippingQuantity = -1)
    {
        container result;
        SalesLine salesLine = _common;

        result = super(_common, _specQty, _qty, _creditRemaining, _calcRemaining
                                     // <GEERU>
                                     , _packingSlips
                                     // </GEERU>
                                     );

        switch (salesPurchQtyCategory)
        {
            case BankLCSalesPurchQtyCategoryType::Ordered:
                result = [salesLine.RemainSalesPhysical, conPeek(result, 2), conPeek(result, 3)];
                break;
            case BankLCSalesPurchQtyCategoryType::UnInvoiced:
                result = [salesLine.SalesQty - salesLine.invoicedInTotal(), conPeek(result, 2), conPeek(result, 3)];
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(BankLCSalesPurchQtyCategoryType _salesPurchQtyCategory)
    {
        super();
        salesPurchQtyCategory = _salesPurchQtyCategory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>