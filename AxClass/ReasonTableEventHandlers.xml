<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonTableEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReasonTableEventHandlers</c> class contains event handlers added to the <c>ReasonTable</c> table.
/// </summary>
public class ReasonTableEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ReasonTable_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record is able to be deleted.
    /// </summary>
    /// <param name="_sender">The <c>ReasonTable</c> record being deleted.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(ReasonTable), DataEventType::ValidatingWrite), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void ReasonTable_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        ValidateEventArgs ve = _e;
        boolean ret = ve.parmValidateResult();

        ReasonTable thisRecord = _sender as ReasonTable;

        if (BrazilParameters::isEnabled())
        {
            if (ret && strLen(thisRecord.Description) < 15)
            {
                ret = checkFailed("@SYS4002144");
            }
        }

        ve.parmValidateResult(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonTable_findReasonByFilterForAccountTypesEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds application-specific checks for whether a particular reason code is marked for account types use in the transaction.
    /// </summary>
    /// <param name="_reasonCode">The reason code to find.</param>
    /// <param name="_accountType">The main account type of the transaction.</param>
    /// <param name="_useAccountType">A Boolean variable that indicates whether to include the account type.</param>
    /// <param name="_offsetAccountType">The offset account type of transaction.</param>
    /// <param name="_useOffsetAccountType">A Boolean value that indicates whether to include the offset account type.</param>
    /// <param name="_result">The result of the check.</param>
    [SubscribesTo(tableStr(ReasonTable), delegateStr(ReasonTable, findReasonByFilterForAccountTypesEvent))]
    public static void ReasonTable_findReasonByFilterForAccountTypesEvent(
        ReasonCode _reasonCode,
        LedgerJournalACType _accountType,
        boolean _useAccountType,
        LedgerJournalACType _offsetAccountType,
        boolean _useOffsetAccountType,
        ReasonTable _reasonTable,
        EventHandlerResult _result)
    {
        NoYes fixedAsset = NoYes::No;
        NoYes customer = NoYes::No;
        NoYes vendor = NoYes::No;
        NoYes bank = NoYes::No;

        // <GEERU>
        NoYes rCash = NoYes::No;
        NoYes rAsset = NoYes::No;
        // </GEERU>

        boolean errorFound = false;

        // Set the account type(s) that need to be valid
        if (_useAccountType)
        {
            switch (_accountType)
            {
                case LedgerJournalACType::FixedAssets:
                    fixedAsset = NoYes::Yes;
                    break;
                case LedgerJournalACType::Bank:
                    bank = NoYes::Yes;
                    break;
                case LedgerJournalACType::Cust:
                    customer = NoYes::Yes;
                    break;
                case LedgerJournalACType::Vend:
                    vendor = NoYes::Yes;
                    break;

                // <GEERU>
                case LedgerJournalACType::RCash:
                    rCash = NoYes::Yes;
                    break;
                case LedgerJournalACType::FixedAssets_RU:
                    rAsset = NoYes::Yes;
                    break;
                // </GEERU>
            }
        }

        if (_useOffsetAccountType)
        {
            switch (_offsetAccountType)
            {
                case LedgerJournalACType::FixedAssets:
                    fixedAsset = NoYes::Yes;
                    break;
                case LedgerJournalACType::Bank:
                    bank = NoYes::Yes;
                    break;
                case LedgerJournalACType::Cust:
                    customer = NoYes::Yes;
                    break;
                case LedgerJournalACType::Vend:
                    vendor = NoYes::Yes;
                    break;

                // <GEERU>
                case LedgerJournalACType::RCash:
                    rCash = NoYes::Yes;
                    break;
                case LedgerJournalACType::FixedAssets_RU:
                    rAsset = NoYes::Yes;
                    break;
                // </GEERU>
            }
        }

        if ((fixedAsset) && !(_reasonTable.Asset))
        {
            errorFound = true;
        }

        if (!(errorFound) && (bank) && !(_reasonTable.Bank))
        {
            errorFound = true;
        }

        if (!(errorFound) && (customer) && !(_reasonTable.Cust))
        {
            errorFound = true;
        }

        if (!(errorFound) && (vendor) && !(_reasonTable.Vend))
        {
            errorFound = true;
        }

        // <GEERU>
        if (!(errorFound) && (rCash) && !(_reasonTable.rCash))
        {
            errorFound = true;
        }

        if (!(errorFound) && (rAsset) && !(_reasonTable.Asset))
        {
            errorFound = true;
        }
        // </GEERU>

        _result.result(errorFound);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>