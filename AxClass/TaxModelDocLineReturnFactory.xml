<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineReturnFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class implements the factory class for instancing returning TaxModel document line domain objects.
/// </summary>
[
    TaxModelDocumentLineAttribute(tableStr(SalesLine)),
    TaxModelDocumentLineAttribute(tableStr(SalesParmLine)),
    TaxModelDocumentLineAttribute(tableStr(CustPackingSlipTrans)),
    TaxModelDocumentLineAttribute(tableStr(CustInvoiceTrans)),
    TaxModelDocumentLineAttribute(tableStr(PurchLine)),
    TaxModelDocumentLineAttribute(tableStr(PurchParmLine)),
    TaxModelDocumentLineAttribute(tableStr(VendInvoiceInfoLine)),
    TaxModelDocumentLineAttribute(tableStr(VendInvoiceTrans)),
    TaxModelDocumentLineAttribute(tableStr(VendPackingSlipTrans))
]
[TaxModelDocLineFactoryAttribute(TaxModelDocLineType::Return)]
public class TaxModelDocLineReturnFactory extends TaxModelDocLineFactory
{
    private Map isReturnMap = new Map(Types::String, Types::Enum);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateDocLineInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates document line instance.
    /// </summary>
    /// <param name="_documentLine">
    /// The document line.
    /// </param>
    /// <param name="_taxModelDocumentLineAttribute">
    /// The tax model document line attribute.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelTaxable</c> class.
    /// </returns>
    [Replaceable]
    protected TaxModelTaxable generateDocLineInstance(
        SalesPurchJournalLine _documentLine,
        TaxModelDocumentLineAttribute _taxModelDocumentLineAttribute)
    {
        TaxModelTaxable ret;

        // When it's not return document line, go back to <c>TaxModelDocLineFactory</c> directly
        if (!(_taxModelDocumentLineAttribute is TaxModelDocumentLineReturnAttribute))
        {
            return super(_documentLine, _taxModelDocumentLineAttribute);
        }

        switch (_documentLine.SourceTableId)
        {
            case tableNum(PurchLine) :
                ret = new TaxModelDocLinePurchLineReturnImpl();
                break;
            case tableNum(VendInvoiceTrans) :
                ret = new TaxModelDocLineVendInvTransRetImpl();
                break;
            case tableNum(CustInvoiceTrans) :
                ret = new TaxModelDocLineCustInvTransRetImpl();
                break;
            case tableNum(CustPackingSlipTrans) :
                ret = new TaxModelDocLineCustPackingSlipTransRetImpl();
                break;
            case tableNum(PurchParmLine) :
                ret = new TaxModelDocLinePurchParmReturnImpl();
                break;
            case tableNum(SalesLine) :
                ret = new TaxModelDocLineSalesLineReturnImpl();
                break;
            case tableNum(SalesParmLine) :
                ret = new TaxModelDocLineSalesParmLineRetImpl();
                break;
            case tableNum(VendInvoiceInfoLine) :
                ret = new TaxModelDocLineVendInvoiceReturnImpl();
                break;
            case tableNum(VendPackingSlipTrans) :
                ret = new TaxModelDocLineVendPackingReturnImpl();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDispositionAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets disposition action.
    /// </summary>
    /// <param name="_documentLine">
    /// The document line information.
    /// </param>
    /// <returns>
    /// The instance of the <c>DispositionAction</c> class.
    /// </returns>
    protected DispositionAction getDispositionAction(SalesPurchJournalLine _documentLine)
    {
        DispositionAction   dispositionAction;
        SalesLine           salesLine;
        SalesParmLine       salesParmLine;
        CustInvoiceTrans    custInvoiceTrans;
        CustPackingSlipTrans    custPackingSlipTrans;

        switch (_documentLine.SourceTableId)
        {
            case tableNum(SalesParmLine) :
                salesParmLine = _documentLine;
                dispositionAction = this.getDispositionAction(salesParmLine.salesLine());
                break;
            case tableNum(SalesLine) :
                salesLine = _documentLine;
                dispositionAction = salesLine.returnDispositionCode().DispositionAction;
                break;
            case tableNum(CustInvoiceTrans) :
                custInvoiceTrans = _documentLine;
                if (custInvoiceTrans.SalesId
                    && custInvoiceTrans.InventTransId)
                {
                    dispositionAction = this.getDispositionAction(
                                        SalesParmLine::findInventTransId(
                                            custInvoiceTrans.custInvoiceJour().ParmId,
                                            custInvoiceTrans.InventTransId));
                }
                break;
            case tableNum(CustPackingSlipTrans) :
                custPackingSlipTrans = _documentLine;
                if (custPackingSlipTrans.SalesId
                    && custPackingSlipTrans.InventTransId)
                {
                    dispositionAction = this.getDispositionAction(
                                        SalesParmLine::findInventTransId(
                                            custPackingSlipTrans.custPackingslipJour().ParmId,
                                            custPackingSlipTrans.InventTransId));
                }
                break;
            case tableNum(PurchLine) :
            case tableNum(PurchParmLine) :
            case tableNum(VendInvoiceInfoLine) :
            case tableNum(VendInvoiceTrans) :
                dispositionAction = DispositionAction::Credit;
                break;
        }

        return dispositionAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelDocumentLineAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax model document line attribute.
    /// </summary>
    /// <param name="_documentLine">
    /// The document line information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelDocumentLineAttribute</c> class.
    /// </returns>
    protected TaxModelDocumentLineAttribute getTaxModelDocumentLineAttribute(SalesPurchJournalLine _documentLine)
    {
        TaxModelDocumentLineAttribute taxModelDocumentLineAttribute;

        if (this.isReturn(_documentLine))
        {
            taxModelDocumentLineAttribute = new TaxModelDocumentLineReturnAttribute(
                                        tableid2name(_documentLine.SourceTableId),
                                        this.getDispositionAction(_documentLine));
        }
        else
        {
            taxModelDocumentLineAttribute = super(_documentLine);
        }

        return taxModelDocumentLineAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the instance have any return.
    /// </summary>
    /// <param name="_documentLine">
    /// The document line information.
    /// </param>
    /// <returns>
    /// Returns true if the instance will return.
    /// </returns>
    protected boolean isReturn(SalesPurchJournalLine _documentLine)
    {
        boolean             ret;
        SalesLine           salesLine;
        SalesParmLine       salesParmLine;
        CustInvoiceTrans    custInvoiceTrans;
        PurchLine           purchLine;
        PurchParmLine       purchParmLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans    vendInvoiceTrans;
        VendPackingSlipTrans    vendPackingSlipTrans;
        CustPackingSlipTrans    custPackingSlipTrans;

        str key = strFmt("%1_%2", _documentLine.SourceTableId, _documentLine.SourceRecId);

        if (!isReturnMap.exists(key))
        {
            switch (_documentLine.SourceTableId)
            {
                case tableNum(SalesParmLine) :
                    salesParmLine = _documentLine;
                    ret = this.isReturn(salesParmLine.salesLine());
                    break;
                case tableNum(SalesLine) :
                    salesLine = _documentLine;
                    ret = salesLine.SalesType == SalesType::ReturnItem
                        && (salesLine.SalesQty <= 0
                    || this.getDispositionAction(salesLine) == DispositionAction::ReturnToCust);
                    break;
                case tableNum(CustInvoiceTrans) :
                    custInvoiceTrans = _documentLine;
                    if (custInvoiceTrans.SalesId
                        && custInvoiceTrans.InventTransId)
                    {
                        ret = this.isReturn(
                        SalesParmLine::findInventTransId(
                            custInvoiceTrans.custInvoiceJour().ParmId,
                            custInvoiceTrans.InventTransId));
                    }
                    else
                    {
                        ret = false;
                    }
                    break;
                case tableNum(CustPackingSlipTrans) :
                    custPackingSlipTrans = _documentLine;
                    if (custPackingSlipTrans.SalesId
                        && custPackingSlipTrans.InventTransId)
                    {
                        ret = this.isReturn(
                        SalesParmLine::findInventTransId(
                            custPackingSlipTrans.custPackingslipJour().ParmId,
                            custPackingSlipTrans.InventTransId));
                    }
                    else
                    {
                        ret = false;
                    }
                    break;
                case tableNum(PurchLine) :
                    purchLine = _documentLine;
                    ret = (purchLine.PurchaseType == PurchaseType::ReturnItem);
                    if (!ret)
                    {
                        if (purchLine.RemainPurchFinancial * purchLine.RemainPurchPhysical < 0)
                        {
                            ret = purchLine.RemainPurchFinancial < 0;
                        }
                        else
                        {
                            ret = (purchLine.RemainPurchPhysical + purchLine.RemainPurchFinancial) < 0;
                        }
                    }
                    break;

                case tableNum(PurchParmLine) :
                    purchParmLine = _documentLine;
                    purchLine = purchParmLine.purchLine();
                    if (purchLine.RecId == 0)
                    {
                        purchLine = PurchLine::findInventTransId(purchParmLine.InventTransId);
                    }
                    ret = this.isReturn(purchLine);
                    break;
                case tableNum(VendInvoiceInfoLine) :
                    vendInvoiceInfoLine = _documentLine;
                    if (vendInvoiceInfoLine.isNonPO())
                    {
                        ret = vendInvoiceInfoLine.ReceiveNow < 0;
                    }
                    else
                    {
                        purchLine = vendInvoiceInfoLine.purchLine();
                        ret = this.isReturn(purchLine);
                    }
                    break;
                case tableNum(VendInvoiceTrans) :
                    vendInvoiceTrans = _documentLine;
                    ret = this.isReturn(VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTrans.SourceDocumentLine));
                    break;
                case tableNum(VendPackingSlipTrans) :
                    vendPackingSlipTrans = _documentLine;
                    ret = this.isReturn(vendPackingSlipTrans.purchLine());
                    break;
            }
            isReturnMap.insert(key, ret);
        }
        else
        {
            ret = isReturnMap.lookup(key);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>