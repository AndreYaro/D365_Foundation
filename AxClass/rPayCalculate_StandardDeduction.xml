<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_StandardDeduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Classs for payroll procedure calculation (the standard deduction).
/// </summary>
class rPayCalculate_StandardDeduction extends RPayCalculate
{
    #RPayModuleName

    RPayEmplStandardDeductionTable  payEmplStandardDeductionTable;
    RPayStandardDeductionTable      payStandardDeductionTable;
    RPayAmount                      totalEmplSumCounter, controlEmplSum,
                                    totalCurrentSum,     tmpTotalEmplSumCounter;
    boolean                         exitCalculate, calcAlimonyPostSequence;
    Map                             mapEmplProportion;
    Set                             setEmplCalculated;
    int                             byWorkerCount;
    container                       con,
                                    deductionCon,
                                    postCon;
    boolean                         updatePayTrans,        sumOnHand,
                                    needCalcAlimonyPost,   greaterThanControlSum,
                                    greaterThanCurrentSum, recalcAlimonyPost,
                                    insertPayTransCorrect;
    int                             currentDeductionCon, currentPostCon;

    Set                             warnedEmplIdSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_CurrentDeductionSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_CurrentDeductionSum()
    {
        RPayTrans       rPayTrans;
        ReportPeriod_RU rateDate;

        rateDate = this.payPeriodStart();
        if (date2num(rateDate) == #financialDaysPerMonth)
        {
            warning("@RUP388");
        }

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     <  rateDate                              &&
                  rPayTrans.SourceTableId == payEmplStandardDeductionTable.TableId &&
                  rPayTrans.SourceRecId   == payEmplStandardDeductionTable.RecId   &&
                  rPayTrans.Scanning      == payEmplStandardDeductionTable.PaySequence;

        return payEmplStandardDeductionTable.TotalSum + rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_Debt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected real calc_Debt()
    {
        Amount                          ret;
        RPayTrans                       payTransLocal;
        RPayCounterTable                payCounterTableLocal;
        RPayCalculate_StandardDeduction payCalculate;

        if (payEmplStandardDeductionTable.StartDate > prevMth(payPeriod))
            return 0;

        payCalculate = new RPayCalculate_StandardDeduction(RPayModuleTable::find(#ModuleNameStandardDeduction));
        payCalculate.setSourceTable(payEmplStandardDeductionTable);
        payCalculate.setSeqTable(RPaySeqTable::find(payEmplStandardDeductionTable.PaySequence));
        payCalculate.payPeriod(prevMth(payPeriod));
        payCalculate.needUpdatePayTrans(false);

        while select payCounterTableLocal
            index ScanningIdx
            where payCounterTableLocal.Scanning == payEmplStandardDeductionTable.PaySequence
        {
               payCalculate.setCounterTable(payCounterTableLocal);
               payCalculate.calcCounter();
               ret += payCalculate.getCurrentValue();
        }

        select sum(Amount) from payTransLocal
            where payTransLocal.Emplid            == payEmplStandardDeductionTable.EmplId      &&
                  payTransLocal.SourceTableId     == payEmplStandardDeductionTable.TableId     &&
                  payTransLocal.SourceRecId       == payEmplStandardDeductionTable.RecId       &&
                  payTransLocal.Scanning          == payEmplStandardDeductionTable.PaySequence &&
                  (payTransLocal.PayPeriod        == endmth(prevMth(payPeriod))                ||
                  payTransLocal.CorrectedPeriod   == endmth(prevMth(payPeriod)));

        ret +=  payTransLocal.Amount;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_DeductionPercentage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Percent calc_DeductionPercentage()
    {
        return payEmplStandardDeductionTable.DeductPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_NoOfPeriodDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int calc_NoOfPeriodDays()
    {
        RPayTrans     rPayTrans;
        StartDate     startDate;
        EndDate       endDate;

        select firstonly rPayTrans order by PayPeriod desc
            where rPayTrans.SourceTableId == sourceTable.TableId      &&
                  rPayTrans.SourceRecId   == sourceTable.RecId        &&
                  rPayTrans.Scanning      == payCounterTable.Scanning &&
                  rPayTrans.Emplid        == emplTable.EmployeeId     &&
                  rPayTrans.PayPeriod     <  payPeriod;

        startDate = rPayTrans ? rPayTrans.PayPeriod : (payEmplStandardDeductionTable.StartDate - 1);

        if (payEmplStandardDeductionTable.EndDate && endmth(payEmplStandardDeductionTable.EndDate) == payPeriod)
        {
            endDate = payEmplStandardDeductionTable.EndDate;
        }
        else
        {
            endDate = payPeriod;
        }
        return endDate - startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_PeriodDeductionSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_PeriodDeductionSum()
    {
        return this.calcProportionSum(payEmplStandardDeductionTable.PeriodSum, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_TotalDeductionSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_TotalDeductionSum()
    {
        return this.calcProportionSum(payEmplStandardDeductionTable.TotalSum, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    protected  void calcCommon(RPaySequence _paySequence  = 0,
                               NoYes        _errorMessage = NoYes::No)
    {
        RHRMEmplTable emplTableLocal, emplTableLocal1, emplTableExists, emplTbl;
        int           i = 0;

        if (needCheckModuleCalculate && ! this.canModuleCalculate())
        {
            throw info("@RUP387");
        }

        this.checkPostingProfiles(true);

        if (! emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage, true))
            return;

        this.initTransDate(emplTable.EmployeeId);

        totalEmplSumCounter = 0;

        exitCalculate = false;

        if (setEmplCalculated.in(emplTable.EmployeeId))
        {
            return;
        }
        else
        {
            while select EmployeeId from emplTableLocal
                where emplTableLocal.PayMainEmplId == emplTable.PayMainEmplId
            {
                setEmplCalculated.add(emplTableLocal.EmployeeId);
            }
        }

        emplTbl.data(emplTable);

        greaterThanControlSum = false;

        this.warnCorrections(emplTbl.EmployeeId);

        while select payStandardDeductionTable order by DeductionOrder
              join payEmplStandardDeductionTable order by DeductionOrder
                  where payStandardDeductionTable.DeductionCode == payEmplStandardDeductionTable.DeductionCode
              exists join emplTableExists
                  where emplTableExists.PayMainEmplId        == emplTbl.PayMainEmplId      &&
                        payEmplStandardDeductionTable.EmplId == emplTableExists.EmployeeId &&
                        !payEmplStandardDeductionTable.CorrectedPeriod
        {
            if (! this.needCommonCalculate(payEmplStandardDeductionTable.PeriodFrequency)    ||
                (greaterThanControlSum && payEmplStandardDeductionTable.MustBeSumControlled) ||
                ! payStandardDeductionTable.PaySequence)
            {
                continue;
            }

            emplTableLocal1.data(RHRMEmplTable::find(payEmplStandardDeductionTable.EmplId));

            byWorkerCount         = 1;
            con                   = [conNull(), conNull()];
            mapEmplProportion     = new Map(Types::String, Types::Real);

            deductionCon          = conNull();
            postCon               = conNull();
            sumOnHand             = false;
            sumCounter            = 0;
            greaterThanCurrentSum = false;
            totalCurrentSum       = 0;

            if (! i)
            {
                controlEmplSum = this.calcTaxAmount(false); //calc tax amount as primary deduction
                while select emplTableLocal
                    where emplTableLocal.PayMainEmplId == emplTableLocal1.PayMainEmplId
                       && emplTableLocal.rhrmPersonTable == emplTableLocal1.rhrmPersonTable
                {
                    if (emplTableLocal.checkEmplBeforeCalc(payPeriod, _errorMessage, true))
                    {
                        emplTable.data(emplTableLocal);

                        controlEmplSum += (this.calculateCounterForControlDeductionRate(RPayCounterTable::find(RPayStandardDeductionParameters::controlDeductionFund()),
                                                                                        payPeriod) + this.calcTaxAmount(true) + this.calcCurPayPeriodMadeStdDeduction(true)) * RPayStandardDeductionParameters::controlDeductionRateValue() / 100;

                        controlEmplSum += this.calcCurPayPeriodMadeStdDeduction(false);
                    }
                }
            }

            needCalcAlimonyPost = (payEmplStandardDeductionTable.deductionType() == RPayStandardDeductionType::Alimony &&
                                   payEmplStandardDeductionTable.AlimonyPostSequence);

            if (payEmplStandardDeductionTable.ByWorkerCalculation)
            {
                mapEmplProportion = this.calcProportion(emplTableLocal1.PayMainEmplId);

                updatePayTrans = false;
                while select emplTableLocal
                    where emplTableLocal.PayMainEmplId   == emplTableLocal1.PayMainEmplId
                       && emplTableLocal.rhrmPersonTable == emplTableLocal1.rhrmPersonTable
                {
                    if (emplTableLocal.checkEmplBeforeCalc(payPeriod, _errorMessage, true))
                    {
                        emplTable.data(emplTableLocal);

                        tmpTotalEmplSumCounter = 0;

                        this.calculateDeduction();

                        tmpTotalEmplSumCounter = sumCounter;

                        if (needCalcAlimonyPost)
                        {
                            this.calculatePost();
                        }

                        this.controlSumOnHand(conPeek(conPeek(deductionCon, currentDeductionCon), 4),
                                              needCalcAlimonyPost ? any2real(conPeek(conPeek(postCon, currentPostCon), 4)) : 0);

                        if (greaterThanControlSum && payEmplStandardDeductionTable.MustBeSumControlled)
                        {
                            break;
                        }

                        if (greaterThanCurrentSum)
                        {
                            break;
                        }
                    }
                }
                if (sumOnHand && ! greaterThanControlSum && ! greaterThanCurrentSum)
                {
                    this.recalcCons();
                }
            }
            else
            {
                updatePayTrans = false;
                emplTable.data(emplTableLocal1);

                tmpTotalEmplSumCounter = 0;

                this.calculateDeduction();

                tmpTotalEmplSumCounter = sumCounter;

                if (needCalcAlimonyPost)
                {
                    this.calculatePost();
                }
                this.controlSumOnHand(conPeek(conPeek(deductionCon, currentDeductionCon), 4),
                                      needCalcAlimonyPost ? any2real(conPeek(conPeek(postCon, currentPostCon), 4)) : 0);
            }

            updatePayTrans = true;
            this.updatePayTrans();

            if (needCalcAlimonyPost)
            {
                this.recalcAlimonyPost();
            }
            i ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurPayPeriodMadeStdDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates standard deduction for calculation period.
    /// </summary>
    /// <param name="_redemption">
    /// The redemption, if redemption then negative amounts will be taken into account as well.
    /// </param>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcCurPayPeriodMadeStdDeduction(boolean _redemption )
    {
        RPayTrans                      rPayTrans;

        select sum(Amount) from rPayTrans
            where rPayTrans.Emplid           == emplTable.EmployeeId &&
                  rPayTrans.PayPeriod        == endmth(payPeriod) &&
                  rPayTrans.PayModuleCode == #ModuleNameStandardDeduction &&
                  ((_redemption && rPayTrans.Amount > 0) || (!_redemption && rPayTrans.Amount < 0));

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data for employee.
    /// </summary>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <param name="_paySequence">
    /// The calculation sequence.
    /// </param>
    public void calcEmpl(RHRMEmplId _emplId, RPaySequence _paySequence=0)
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;
        RHRMEmplTable        emplTableLocal;
        RHRMEmplId           payMainEmplId;

        payMainEmplId = RHRMEmplTable::find(_emplId).PayMainEmplId;

        needCheckModuleCalculate = false;
        setPrefix(payModuleTable.PayModuleName);

        this.payPeriod(RPayParameters::payPeriod(payMainEmplId));
        payPeriodVirtual = this.payPeriod();

        this.deleteTrans(payMainEmplId);

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(RHRMEmplTable));
        if (! queryBuildDataSource.findRange(fieldNum(RHRMEmplTable, EmployeeId)))
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(RHRMEmplTable, EmployeeId));
            queryBuildRange.value(_emplId);
        }
        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tableNum(RHRMEmplTable));
            if (emplTableLocal.EmployeeId == _emplId)
            {
                this.setSourceTable(emplTableLocal);
                this.calcCommon(_paySequence,NoYes::Yes);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcEmplTotalAmount(RHRMEmplId _emplId)
    {
        RPayTrans   rPayTrans;
        RPayTable   rPayTable;
        RPayAmount  tmpAmount;

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     == payPeriod                             &&
                  rPayTrans.SourceTableId != payEmplStandardDeductionTable.TableId &&
                  rPayTrans.PayModuleCode != #ModuleNameByWorker                   &&
                  rPayTrans.Emplid        == _emplId
        exists join rPayTable
            where rPayTable.PayCtype      == rPayTrans.PayCtype &&
                  rPayTable.PayChargeType == RPayChargeType::AddSum;

        tmpAmount = rPayTrans.Amount;

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     == payPeriod                             &&
                  rPayTrans.SourceTableId != payEmplStandardDeductionTable.TableId &&
                  rPayTrans.PayModuleCode == #ModuleNameTax                        &&
                  rPayTrans.Emplid        == _emplId
        exists join rPayTable
            where rPayTable.PayCtype      == rPayTrans.PayCtype &&
                  rPayTable.PayChargeType == RPayChargeType::Deduction;

        return tmpAmount + rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProportion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map calcProportion(RHRMEmplId _payMainEmplId)
    {
        RHRMEmplTable emplTableLocal;
        Map           map = new Map(Types::String, Types::Real);
        boolean       correctMap = false;
        RPayAmount    totalAmount, tmpAmount, totalCalcAmount, tmpPercent;
        int           i;

        select count(RecId) from emplTableLocal
            where emplTableLocal.PayMainEmplId == _payMainEmplId;

        byWorkerCount = any2int(emplTableLocal.RecId);
        if (byWorkerCount == 1)
        {
            return map;
        }

        totalAmount = this.calcTotalAmount(_payMainEmplId);
        if (totalAmount > 0)
        {
            while select EmployeeId from emplTableLocal
                where emplTableLocal.PayMainEmplId == _payMainEmplId
            {
                i ++;
                if (i != byWorkerCount || correctMap)
                {
                    tmpAmount       =  this.calcEmplTotalAmount(emplTableLocal.EmployeeId);
                    tmpAmount       =  max(tmpAmount, 0);
                    totalCalcAmount += tmpAmount;

                    if (totalCalcAmount >= totalAmount && ! correctMap)
                    {
                        correctMap = true;
                        continue;
                    }
                    else
                    {
                        tmpPercent = (correctMap ? 0 : tmpAmount / totalAmount);
                    }
                    map.insert(emplTableLocal.EmployeeId, tmpPercent);
                }
            }
        }
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProportionSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcProportionSum(RPayAmount _amount, int _num)
    {
        container   conItem;
        RPayAmount  rPayAmount;
        int         i;

        if (mapEmplProportion && mapEmplProportion.exists(emplTable.EmployeeId))
        {
            rPayAmount =  _amount * mapEmplProportion.lookup(emplTable.EmployeeId);
            conItem    =  conPeek(con, _num);
            conItem    += rPayAmount;
            con        =  conPoke(con, _num, conItem);
            return rPayAmount;
        }

        conItem = conPeek(con, _num);
        for (i = 1; i <= conLen(conItem); i++)
        {
            rPayAmount += (payEmplStandardDeductionTable.PeriodSum ? CurrencyExchangeHelper::amount(this.round(conPeek(conItem, i))) : any2real(conPeek(conItem, i)));
        }
        return _amount - rPayAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcTaxAmount(boolean _redemption)
    {
        RPayTrans   rPayTrans;

        if (RPayTaxParameters::find().MaxDeductionLimit)
        {
            select sum(Amount) from rPayTrans
                where rPayTrans.Emplid          == emplTable.EmployeeId &&
                      rPayTrans.PayPeriod       == payPeriod            &&
                      ((_redemption && rPayTrans.Amount > 0) || (!_redemption && rPayTrans.Amount < 0)) &&
                      rPayTrans.TaxIncomeGroupCode;
        }

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcTotalAmount(RHRMEmplId _emplId)
    {
        RPayTrans   rPayTrans;
        RHRMEmplTable   emplTableLocal;
        RPayTable   rPayTable;
        RPayAmount  tmpAmount;

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     == payPeriod &&
                  rPayTrans.SourceTableId != payEmplStandardDeductionTable.TableId &&
                  rPayTrans.PayModuleCode != #ModuleNameByWorker
        exists join emplTableLocal
            where rPayTrans.Emplid             == emplTableLocal.EmployeeId &&
                  emplTableLocal.PayMainEmplId == _emplId
        exists join rPayTable
            where rPayTable.PayCtype      == rPayTrans.PayCtype &&
                  rPayTable.PayChargeType == RPayChargeType::AddSum;

        tmpAmount = rPayTrans.Amount;

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     == payPeriod &&
                  rPayTrans.SourceTableId != payEmplStandardDeductionTable.TableId &&
                  rPayTrans.PayModuleCode == #ModuleNameTax
        exists join emplTableLocal
            where rPayTrans.Emplid             == emplTableLocal.EmployeeId &&
                  emplTableLocal.PayMainEmplId == _emplId
        exists join rPayTable
            where rPayTable.PayCtype      == rPayTrans.PayCtype &&
                  rPayTable.PayChargeType == RPayChargeType::Deduction;

        return tmpAmount + rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCounterForControlDeductionRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates counter for deduction rate.
    /// </summary>
    /// <param name="_payCounterTable">
    /// The counter table record.
    /// </param>
    /// <param name="_rateDate">
    /// The rate date.
    /// </param>
    /// <returns>
    /// The amount calculated.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calculateCounterForControlDeductionRate(RPayCounterTable _payCounterTable, ReportPeriod_RU _rateDate)
    {
        RPayAmount ret;

        if (_payCounterTable.CounterType == RPayCounterType::Fund)
        {
            ret =  RPayTrans::calculateFund(_payCounterTable.CounterUnit, _rateDate, emplTable.EmployeeId);
        }
        else
        {
            ret = this.calculateCounter(_payCounterTable, _rateDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDeduction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateDeduction()
    {
        sumCounter = 0;
        calcAlimonyPostSequence = false;

        select firstonly paySeqTable
            where paySeqTable.Scanning == payEmplStandardDeductionTable.PaySequence;

        sourceTable = payEmplStandardDeductionTable;
        this.calcSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFund</Name>
				<Source><![CDATA[
    protected RPayAmount calculateFund(RPayCounterUnit _payCounterUnit,
                                       ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                                       RHRMEmplId      _emplId    = '')
    {
        return RPayTrans::calculateFundByCorrectedPeriod(_payCounterUnit, _payPeriod, _emplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculatePost()
    {
        calcAlimonyPostSequence = true;

        this.setInitValue(sumCounter);
        select firstonly paySeqTable
            where paySeqTable.Scanning == payEmplStandardDeductionTable.AlimonyPostSequence;
        this.calcSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void controlSum()
    {
        RPayAmount      currentSum, tmpAmount;
        container       conItem;
        int             i;

        if (payEmplStandardDeductionTable.TotalSum)
        {
            if (! calcAlimonyPostSequence)
            {
                currentSum = this.calc_CurrentDeductionSum();
                if (totalCurrentSum + sumCounter > currentSum)
                {
                    sumCounter            = currentSum - totalCurrentSum;
                    greaterThanCurrentSum = true;
                }
            }
            currentSum = this.calc_CurrentDeductionSum() - totalCurrentSum;
        }

        if (payEmplStandardDeductionTable.MustBeSumControlled)
        {
            if (sumOnHand)
            {
                for (i = 1; i <= (calcAlimonyPostSequence ? conLen(deductionCon) - 1 : conLen(deductionCon)); i ++)
                {
                    tmpAmount += conPeek(conPeek(deductionCon, i), 5);
                }
                if (needCalcAlimonyPost)
                {
                    for (i = 1; i <= conLen(postCon); i ++)
                    {
                        tmpAmount += conPeek(conPeek(postCon, i), 5);
                    }
                }
            }
            if (tmpAmount + tmpTotalEmplSumCounter + totalEmplSumCounter + sumCounter > controlEmplSum)
            {
                if (! calcAlimonyPostSequence)
                {
                    sumCounter = controlEmplSum - totalEmplSumCounter;
                }

                for (i = 1; i <= conLen(deductionCon); i ++)
                {
                    if (conPeek(conPeek(deductionCon, i), 5))
                    {
                        conItem = conPeek(deductionCon, i);
                        conItem = conPoke(conItem, 5, 0);
                        deductionCon = conPoke(deductionCon, i, conItem);

                        if (needCalcAlimonyPost)
                        {
                            conItem = conPeek(postCon, i);
                            conItem = conPoke(conItem, 5, 0);
                            postCon = conPoke(postCon, i, conItem);
                        }
                    }
                }

                currentSum = controlEmplSum - totalEmplSumCounter;
                greaterThanControlSum = true;
            }
        }

        this.fillResultCon();

        if ((greaterThanControlSum) && calcAlimonyPostSequence)
        {
            this.recalcSum(currentSum,
                           conPeek(conPeek(deductionCon, currentDeductionCon), 4),
                           conPeek(conPeek(postCon, currentPostCon), 4));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlSumOnHand</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void controlSumOnHand(RPayAmount _deductionAmount, RPayAmount _postAmount)
    {
        RPayTrans       rPayTrans;
        boolean         sumOnHandLocal;
        container       conItem;

        select sum(Amount) from rPayTrans
            where rPayTrans.Emplid        == emplTable.EmployeeId &&
                  rPayTrans.PayModuleCode != #ModuleNameByWorker  &&
                  rPayTrans.PayPeriod     == payPeriod;

        if (rPayTrans.Amount < 0)
        {
            conItem       = conPeek(deductionCon, currentDeductionCon);
            conItem       = conPoke(conItem, 4, 0);
            conItem       = conPoke(conItem, 5, _deductionAmount);
            deductionCon  = conPoke(deductionCon, currentDeductionCon, conItem);

            if (needCalcAlimonyPost)
            {
                conItem   = conPeek(postCon, currentPostCon);
                conItem   = conPoke(conItem, 4, 0);
                conItem   = conPoke(conItem, 5, _postAmount);
                postCon   = conPoke(postCon, currentPostCon, conItem);
            }
            sumOnHand      = true;
            sumOnHandLocal = true;
        }

        else if (rPayTrans.Amount < _deductionAmount + _postAmount)
        {
            if (_deductionAmount + _postAmount)
            {
                this.recalcSum(rPayTrans.Amount, _deductionAmount, _postAmount);
                sumOnHand      = true;
                sumOnHandLocal = true;
            }
        }

        greaterThanControlSum = sumOnHandLocal ? false : greaterThanControlSum;
        greaterThanCurrentSum = sumOnHandLocal ? false : greaterThanCurrentSum;

        if (payEmplStandardDeductionTable.MustBeSumControlled)
        {
            totalEmplSumCounter += conPeek(conPeek(deductionCon, currentDeductionCon), 4) +
                                   (needCalcAlimonyPost ? any2real(conPeek(conPeek(postCon, currentPostCon), 4)) : 0);
        }
        totalCurrentSum += conPeek(conPeek(deductionCon, currentDeductionCon), 4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteTrans(RHRMEmplId _mainEmplId)
    {
        RHRMEmplTable emplTableLocal;

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod                    &&
                      payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                      payTrans.SourceTableId                                 &&
                      payTrans.SourceRecId                                   &&
                      payTrans.PayPeriod     == payTrans.CorrectedPeriod
            exists join emplTableLocal
                where emplTableLocal.EmployeeId    == payTrans.Emplid &&
                      emplTableLocal.PayMainEmplId == _mainEmplId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDeductionCon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDeductionCon()
    {
        container   conItem1;

        conItem1            =  [paySeqTable, payCounterTable, emplTable.EmployeeId,
                               sumCounter, 0, payModuleControl.payCounterCalcTable()];
        deductionCon        += [conItem1];
        currentDeductionCon =  conLen(deductionCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPostCon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPostCon()
    {
        container   conItem1;

        conItem1       =  [paySeqTable, payCounterTable, emplTable.EmployeeId,
                          sumCounter, 0, payModuleControl.payCounterCalcTable()];
        postCon        += [conItem1];
        currentPostCon =  conLen(postCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResultCon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillResultCon()
    {
        if (! calcAlimonyPostSequence)
        {
            this.fillDeductionCon();
        }
        else
        {
            this.fillPostCon();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    protected void initPayTransValue()
    {
        DimensionDefault defaultDimension;

        payTrans.AccountType = payEmplStandardDeductionTable.AccountType;
        if (payEmplStandardDeductionTable.LedgerDimension)
        {
            payTrans.LedgerDimension = payEmplStandardDeductionTable.LedgerDimension;
            if (payTrans.AccountType == LedgerJournalACType::Ledger)
            {
                payTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(payTrans.LedgerDimension);
            }
        }

        super();

        if (payTrans.AccountType == LedgerJournalACType::Ledger)
        {
            defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(payTrans.LedgerDimension);
        }
        else
        {
            defaultDimension = payTrans.DefaultDimension;
        }

        payTrans.setLedgerDimension(payTrans.AccountType,
                                    payTrans.LedgerDimension,
                                    AdvancedLedgerEntryLine::replaceEmptyFinancialDimension(payEmplStandardDeductionTable.DefaultDimension, defaultDimension),
                                    payEmplStandardDeductionTable.EmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCommonCalculate</Name>
				<Source><![CDATA[
    protected boolean needCommonCalculate(RPayPeriodFrequency _periodFrequency)
    {
        boolean ret = super(_periodFrequency);

        if (ret &&
            ((endmth(payEmplStandardDeductionTable.StartDate) > payPeriod) ||
            (payEmplStandardDeductionTable.EndDate ?
                endmth(payEmplStandardDeductionTable.EndDate)  < payPeriod :
                false)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayModuleTable _payModuleTable)
    {
        super(_payModuleTable);

        setEmplCalculated = new Set(Types::String);
        transDate = RPayParameters::payPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcAlimonyPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void recalcAlimonyPost()
    {
        RPayTrans     rPayTrans, rPayTransLocal;
        RHRMEmplTable emplTableLocal;
        RPayAmount    tmpAmount;

        recalcAlimonyPost = true;

        select sum(Amount) from rPayTrans
            where rPayTrans.SourceTableId == tableNum(RPayEmplStandardDeductionTable) &&
                  rPayTrans.SourceRecId   == payEmplStandardDeductionTable.RecId      &&
                  rPayTrans.Scanning      != payEmplStandardDeductionTable.AlimonyPostSequence;

        sumCounter = rPayTrans.Amount;
        this.calculatePost();

        select sum(Amount) from rPayTrans
            where rPayTrans.SourceTableId == tableNum(RPayEmplStandardDeductionTable) &&
                  rPayTrans.SourceRecId   == payEmplStandardDeductionTable.RecId      &&
                  rPayTrans.Scanning      == payEmplStandardDeductionTable.AlimonyPostSequence;

        tmpAmount = rPayTrans.Amount;

        if (tmpAmount != sumCounter)
        {
            ttsbegin;

            while select sum(Amount) from rPayTrans group by Emplid
                where rPayTrans.PayPeriod     == payPeriod &&
                      rPayTrans.PayModuleCode != #ModuleNameByWorker
            exists join emplTableLocal
                where rPayTrans.Emplid             == emplTableLocal.EmployeeId &&
                      emplTableLocal.PayMainEmplId == emplTable.PayMainEmplId
            {
                if (rPayTrans.Amount > 0)
                {
                    select firstonly forupdate rPayTransLocal
                        where rPayTransLocal.Emplid        == rPayTrans.Emplid                         &&
                              rPayTransLocal.SourceTableId == tableNum(RPayEmplStandardDeductionTable) &&
                              rPayTransLocal.SourceRecId   == payEmplStandardDeductionTable.RecId      &&
                              rPayTransLocal.Scanning      == payEmplStandardDeductionTable.AlimonyPostSequence;

                    if (rPayTransLocal)
                    {
                        rPayTransLocal.Amount += abs(tmpAmount) - abs(sumCounter);
                        rPayTransLocal.doUpdate();
                        break;
                    }
                    else
                    {
                        emplTable.data(RHRMEmplTable::find(rPayTrans.Emplid));
                        insertPayTransCorrect = true;
                        sumCounter =  abs(sumCounter) - abs(tmpAmount);
                        this.updatePayTrans();
                        insertPayTransCorrect = false;
                        break;
                    }
                }
            }

            ttscommit;
        }
        recalcAlimonyPost = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcCons</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void recalcCons()
    {
        container   conItem1, conItem2, conItem3, conItem4, resCon;
        int         i, j;
        RPayTrans   rPayTrans;
        RHRMEmplId  emplId;
        boolean     reduce;
        RPayAmount  tmpAmount;

        reduce = true;
        conItem2 = conNull();
        conItem4 = conNull();

        for (i = 1; i <= conLen(deductionCon); i ++)
        {
            if (! reduce)
            {
                break;
            }
            conItem1 = conPeek(deductionCon, i);

            if (needCalcAlimonyPost)
            {
                conItem2 = conPeek(postCon, i);
            }

            if (conPeek(conItem1, 5))
            {
                reduce = false;
                for (j = 1; j <= conLen(deductionCon); j ++)
                {
                    conItem3 = conPeek(deductionCon, j);

                    if (needCalcAlimonyPost)
                        conItem4 = conPeek(postCon, j);

                    if (! conPeek(conItem3, 5))
                    {
                        emplId = conPeek(conItem3, 3);

                        select sum(Amount) from rPayTrans
                            where rPayTrans.Emplid        == emplId              &&
                                  rPayTrans.PayModuleCode != #ModuleNameByWorker &&
                                  rPayTrans.PayPeriod     == payPeriod;

                        if (rPayTrans.Amount > 0)
                        {
                            if (conPeek(conItem1, 5) + conPeek(conItem2, 5) > rPayTrans.Amount - conPeek(conItem3, 4) - conPeek(conItem4, 4))
                            {
                                resCon = this.recalcSum(rPayTrans.Amount - conPeek(conItem3, 4) - conPeek(conItem4, 4), conPeek(conItem1, 5), conPeek(conItem2, 5), false);
                            }
                            else
                            {
                                resCon = [conPeek(conItem1, 5), conPeek(conItem2, 5)];
                                reduce = true;
                            }
                            conItem1     = conPoke(conItem1, 5, conPeek(conItem1, 5) - conPeek(resCon, 1));
                            deductionCon = conPoke(deductionCon, i, conItem1);

                            conItem3     = conPoke(conItem3, 4, conPeek(conItem3, 4) + conPeek(resCon, 1));
                            deductionCon = conPoke(deductionCon, j, conItem3);

                            if (needCalcAlimonyPost)
                            {
                                conItem2 = conPoke(conItem2, 5, conPeek(conItem2, 5) - conPeek(resCon, 2));
                                postCon  = conPoke(postCon, i, conItem2);

                                conItem4 = conPoke(conItem4, 4, conPeek(conItem4, 4) + conPeek(resCon, 2));
                                postCon  = conPoke(postCon, j, conItem4);
                            }
                            if (reduce)
                                break;
                        }
                    }
                }
            }
        }

        if (payEmplStandardDeductionTable.MustBeSumControlled)
        {
            for (i = 1; i <= conLen(deductionCon); i ++)
            {
                tmpAmount += conPeek(conPeek(deductionCon, i), 4);
                if (needCalcAlimonyPost)
                {
                    tmpAmount += conPeek(conPeek(postCon, i), 4);
                }
            }
            totalEmplSumCounter = tmpAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container recalcSum(RPayAmount _controlSum,
                                  RPayAmount _deductionAmount,
                                  RPayAmount _postAmount,
                                  boolean    _correct = true)
    {
        RPayAmount      tmpAmount, tmpAmount1;

        if (_controlSum < _deductionAmount + _postAmount)
        {
            if (_deductionAmount + _postAmount)
            {
                tmpAmount1    = CurrencyExchangeHelper::amount(this.round(_controlSum * _deductionAmount / (_deductionAmount + _postAmount)));

                if (_correct)
                {
                    deductionCon = conPoke(deductionCon, currentDeductionCon,
                                           conPoke(conPeek(deductionCon, currentDeductionCon), 5,
                                           conPeek(conPeek(deductionCon, currentDeductionCon), 4) - tmpAmount1));
                    deductionCon = conPoke(deductionCon, currentDeductionCon,
                                           conPoke(conPeek(deductionCon, currentDeductionCon), 4, tmpAmount1));
                }
                tmpAmount = _controlSum - tmpAmount1;

                if (needCalcAlimonyPost && _correct)
                {
                    postCon   = conPoke(postCon, currentPostCon,
                                        conPoke(conPeek(postCon, currentPostCon), 5,
                                        conPeek(conPeek(postCon, currentPostCon), 4) - tmpAmount));
                    postCon   = conPoke(postCon, currentPostCon,
                                        conPoke(conPeek(postCon, currentPostCon), 4, tmpAmount));
                }
            }
        }
        return [tmpAmount1, tmpAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(RPayEmplStandardDeductionTable):
                payEmplStandardDeductionTable = _common.data();
                emplTable = RHRMEmplTable::find(payEmplStandardDeductionTable.EmplId);
                break;
            case tableNum(RHRMEmplTable):
                emplTable = _common.data();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayTrans</Name>
				<Source><![CDATA[
    protected void updatePayTrans(TransDate _calcTransDate = dateNull())
    {
        int         i;
        container   conItem;

        if (classIdGet(this) == classNum(RPayCalculate_BorrowingGain))
        {
            super();
            return;
        }

        if (recalcAlimonyPost)
        {
            if (insertPayTransCorrect)
            {
                super();
            }
            return;
        }
        if (! updatePayTrans)
        {
            this.controlSum();
            return;
        }

        for (i = 1; i <= conLen(deductionCon); i ++)
        {
            conItem         = conPeek(deductionCon, i);
            paySeqTable     = conPeek(conItem, 1);
            payCounterTable = conPeek(conItem, 2);
            emplTable       = RHRMEmplTable::find(conPeek(conItem, 3));
            sumCounter      = CurrencyExchangeHelper::amount(this.round(conPeek(conItem, 4)));
            payModuleControl.payCounterCalcTable(conPeek(conItem, 6));
            super();
        }

        for (i = 1; i <= conLen(postCon); i ++)
        {
            conItem         = conPeek(postCon, i);
            paySeqTable     = conPeek(conItem, 1);
            payCounterTable = conPeek(conItem, 2);
            emplTable       = RHRMEmplTable::find(conPeek(conItem, 3));
            sumCounter      = CurrencyExchangeHelper::amount(this.round(conPeek(conItem, 4)));
            payModuleControl.payCounterCalcTable(conPeek(conItem, 6));
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>warnCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies is the storno adjustment of sums of previous period for employee is in the current calculation period.
    /// </summary>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void warnCorrections(RHRMEmplId _emplId)
    {
        RPayTrans rPayTrans, rPayTransDeduct;
        RPayEmplStandardDeductionTable  payEmplStandardDeductionTableLocal;

        if (!warnedEmplIdSet)
        {
           warnedEmplIdSet = new Set(Types::String);
        }
        else if (warnedEmplIdSet.in(_emplId))
        {
            return;
        }
        else
        {
            warnedEmplIdSet.add(_emplId);
        }

        select firstonly RecId, CorrectedPeriod from rPayTrans
            order by CorrectedPeriod asc
            where rPayTrans.PayPeriod       == payPeriod              &&
                  rPayTrans.CorrectedPeriod <  payPeriod              &&
                  rPayTrans.CorrectedPeriod >= dateStartYr(payPeriod) &&
                  rPayTrans.PayModuleCode   != #ModuleNameByWorker    &&
                  rPayTrans.Emplid          == _emplId
            exists join payEmplStandardDeductionTableLocal
                where payEmplStandardDeductionTableLocal.EmplId          == _emplId                   &&
                        payEmplStandardDeductionTableLocal.StartDate       <= rPayTrans.CorrectedPeriod &&
                        payEmplStandardDeductionTableLocal.CorrectedPeriod <= rPayTrans.CorrectedPeriod
            notexists join rPayTransDeduct
                where rPayTransDeduct.SourceRecId   == payEmplStandardDeductionTableLocal.RecId   &&
                      rPayTransDeduct.SourceTableId == payEmplStandardDeductionTableLocal.TableId &&
                      rPayTransDeduct.CorrectedPeriod == rPayTrans.CorrectedPeriod                &&
                      rPayTransDeduct.PayPeriod       == payPeriod;

        if (rPayTrans.RecId)
        {
            info(strFmt("@RUP6179", _emplId, rPayTrans.CorrectedPeriod));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
