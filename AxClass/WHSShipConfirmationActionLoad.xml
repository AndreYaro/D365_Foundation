<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirmationActionLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConfirmationActionLoad</c> class is used for shipment confirmation of load.
/// </summary>
[SysTableNameFactory(tableStr(WHSLoadTable))]
public class WHSShipConfirmationActionLoad extends WHSShipConfirmationAction
{
    protected WHSLoadTable loadTable;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ship confirm process for a load.
    /// </summary>
    /// <param name="_shipDateTime">
    /// Actual ship date time of the load.
    /// </param>
    public void shipConfirm(WHSLoadShipConfirmUTCDateTime _shipDateTime)
    {
        using (var activityContext = this.instrumentationLogger().shipConfirmActivities().loadShipConfirm(loadTable, _shipDateTime))
        {
            ttsbegin;
            
            this.runTransferShip(_shipDateTime);

            if (this.canCreateUOMStructureDuringShipConfirm())
            {
                this.createUOMStructure();
            }

            if (loadTable.canUseTMSActions()
                && (loadTable.RouteCode
                    || loadTable.CarrierCode
                    || loadTable.CarrierServiceCode))
            {
                TMSRateRoute::calcMiscCharges(loadTable.LoadId, TMSMiscCharges::Load);
            }

            WHSLoadTable::setShipConfirmInfo(loadTable.LoadId, _shipDateTime);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the load is already shipped.
    /// </summary>
    /// <returns>
    /// true if the load is already shipped; otherwise, false
    /// </returns>
    private boolean isLoadShipped()
    {
        return loadTable.LoadId
            && loadTable.LoadStatus     == WHSLoadStatus::Shipped
            && loadTable.LoadDirection  != WHSLoadDirection::Inbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllAllowedForOverOrUnderDeliveryWorkQtyHasBeenPicked</Name>
				<Source><![CDATA[
    protected boolean validateAllAllowedForOverOrUnderDeliveryWorkQtyHasBeenPicked()
    {
        WHSLoadLine         loadLine;
        WHSInventEnabled    whsInventEnabled;
        boolean             ret = true;

        while select WorkCreatedQty, PickedQty, InventQty, UnderDeliveryPct, OverDeliveryPct, LoadId, ItemId from loadLine
            where loadLine.LoadId       == loadTable.LoadId
                && loadLine.InventQty   != 0
                exists join whsInventEnabled
                    where whsInventEnabled.ItemId == loadLine.ItemId
        {
            if (this.skipAllAllowedOverOrUnderDeliveryWorkQtyIsPickedValidationForLoadLine(loadLine))
            {
                continue;
            }

            if (loadLine.PickedQty < loadLine.WorkCreatedQty)
            {
                ret = checkFailed(strFmt("@WAX:LoadNotPickedAndMovedToFinalShippingLocation", loadTable.LoadId));
                break;
            }

            real result = ((loadLine.PickedQty - loadLine.InventQty) / loadLine.InventQty) * 100;

            if (result < 0 && abs(result) > loadLine.UnderDeliveryPct)
            {
                ret = checkFailed(strFmt("@WAX1686", loadLine.LoadId, loadLine.ItemId));
                break;
            }

            if (result > 0 && result > loadLine.OverDeliveryPct)
            {
                ret = checkFailed(strFmt("@WAX1687", loadLine.LoadId, loadLine.ItemId));
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ship confirm button should be enabled.
    /// </summary>
    /// <returns>
    /// true if ship confirm button should be enabled; otherwise, false
    /// </returns>
    public boolean canEnableShipConfirm()
    {
        return loadTable.LoadId
            && loadTable.LoadStatus     != WHSLoadStatus::Shipped
            && loadTable.LoadDirection  != WHSLoadDirection::Inbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransferShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the required <c>InventTransferParmTable</c> records related to the shipment of the Transfer Order,
    ///     the required <c>WHSASNItem</c> and <c>WHSUOMStructure</c> records.
    /// </summary>
    /// <param name="_shipDateConfirmed">
    ///     The confirmed ship date.
    /// </param>
    /// <param name="_overrideSplitTrans">
    ///     true if the parameter to split transfer ship should be ignored; otherwise, false
    /// </param>
    public void runTransferShip(
        TMSApptUTCDateTime _shipDateConfirmed,
        boolean            _overrideSplitTrans = false)
    {
        // Only update transfer order if process is not split.
        if (this.canShipUpdateTransferOrderForLoad(_overrideSplitTrans))
        {
            ttsbegin;

            this.shipUpdateTransferOrderForLoad(_shipDateConfirmed);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipUpdateTransferOrderForLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canShipUpdateTransferOrderForLoad(boolean _overrideSplitTrans)
    {
        return this.canShipUpdateTransferOrder(_overrideSplitTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateUOMStructureDuringShipConfirm</Name>
				<Source><![CDATA[
    private boolean canCreateUOMStructureDuringShipConfirm()
    {
        return this.shouldCreateUOMStructureDuringShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateUOMStructureDuringTransferShip</Name>
				<Source><![CDATA[
    private boolean canCreateUOMStructureDuringTransferShip()
    {
        return !this.shouldCreateUOMStructureDuringShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateUOMStructureDuringShipConfirm</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean shouldCreateUOMStructureDuringShipConfirm()
    {
        return false; // Used as an extension point.
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipUpdateTransferOrderForLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void shipUpdateTransferOrderForLoad(TMSApptUTCDateTime _shipDateConfirmed)
    {
        WHSLoadLine loadLine;
        Counter     loadLineCount;
        boolean     whsWarehouse = InventLocation::find(loadTable.InventLocationId).whsEnabled;

        while select loadLine
            group by OrderNum, InventTransType, TransportRequest
            where loadLine.LoadId == loadTable.LoadId
                && loadLine.InventTransType  == InventTransType::TransferOrderShip
                && loadLine.TransportRequest == NoYes::No
                && loadLine.Qty != 0
        {
            loadLineCount++;
            this.shipUpdateTransferOrderForLoadLine(loadLine.OrderNum, _shipDateConfirmed, whsWarehouse);
        }

        this.instrumentationLogger().shipConfirmActivities().numberOfLoadLines(loadLineCount, funcName());

        if (whsWarehouse)
        {
            this.registerTagWithShippedStatus(loadTable.LoadId, loadTable.InventLocationId);
        }

        if (this.canCreateUOMStructureDuringTransferShip())
        {
            this.createUOMStructure();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipUpdateTransferOrderForLoadLine</Name>
				<Source><![CDATA[
    private void shipUpdateTransferOrderForLoadLine(
        WHSOrderNum         _orderNum,
        TMSApptUTCDateTime  _shipDateConfirmed,
        boolean             _whsWarehouse)
    {
        InventTransferMultiShip inventTransferMultiShip = this.createInventTransferMultiShip();
        InventTransferParmTable inventTransferParmTable = this.createTransferOrderShipmentParmTable(_orderNum, inventTransferMultiShip, _shipDateConfirmed);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            WhsShipConfirm::construct().insertInvTransferParmTableFiscalInfo_BR(inventTransferParmTable.RecId, loadTable.LoadId, _orderNum);
        }
        // </GBR>

        if (_whsWarehouse)
        {
            this.createInventTransferParmLine(inventTransferParmTable);
        }
        else
        {
            this.createInventTransferParmLineNonWHS(inventTransferParmTable, loadTable.LoadId);
        }

        this.runInventTransferMultiShip(inventTransferMultiShip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUOMStructure</Name>
				<Source><![CDATA[
    private void createUOMStructure()
    {
        WHSUOMStructureCreator uomStructureCreator = WHSUOMStructureCreator::newFromBuffer(loadTable);
        uomStructureCreator.createUOMStructure();

        if (WHSParameters::canUsePackFunctionality()
            && uomStructureCreator.parmCreateContainerUOM())
        {
            // Build the UOM Structure from containers that were packed for the load.
            this.createContainerUOM(WHSModule::Transfer);
        }

        if (this.mustCreateSalesOrderLoadASN())
        {
            // The method WhsShipConfirm::generateAndSendASN is checking if customer has send ASN set, so that should be enough to limit this to sales shipments only.
            var shipConfirm = WHSShipConfirm::construct();
            shipConfirm.parmPerformIsSendASNEnabledForLoadCheck(false);
            shipConfirm.sendAsn(loadTable.LoadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSalesOrderLoadASN</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustCreateSalesOrderLoadASN()
    {
        return false; // Used as an extension point.
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTagWithShippedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers tag with shipped status.
    /// </summary>
    /// <param name = "_loadId">Load ID to determine the tags to be updated.</param>
    /// <param name = "_inventLocationId">Warehouse to validate if it is WHS enabled.</param>
    private void registerTagWithShippedStatus(WHSLoadId _loadId, InventLocationId _inventLocationId)
    {
        if (WHSCatchWeightTagCache::construct().isCatchWeightTagFeatureUsed()
            && InventLocation::find(_inventLocationId).whsEnabled)
        {
            WHSLoadLine loadLine;

            while select loadLine
                where  loadLine.LoadId == _loadId
                    && loadLine.PickedQty >= loadLine.InventQty
            {
                WHSCatchWeightTagLastRegistration::registerShippedStatus(loadLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates UOM Structures for outbound shipments from containers.
    /// </summary>
    /// <param name="_module">
    /// The <c>WHSModule</c> module used for building the UOM.
    /// </param>
    protected void createContainerUOM(WHSModule _module)
    {
        WHSLoadLine                         loadLine;
        WHSContainerLine                    containerLine;
        WHSContainerTable                   containerTable;
        WHSContainerId                      prevContainer;
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        
        InventTransType inventTransType;
        boolean filterLoadLinesByModule = this.filterLoadLinesByModule(_module);

        if (filterLoadLinesByModule)
        {
            inventTransType = this.inventTransTypeByModule(_module);
        }

        // Build the UOM Structure from containers that were packed for the load.
        while select LoadId, RecId from loadLine
            where loadLine.LoadId == loadTable.LoadId
                && (!filterLoadLinesByModule || loadLine.InventTransType == inventTransType)
            join ItemId, Qty, UnitId, ShipmentId, InventDimId from containerLine
                where containerLine.LoadLine == loadLine.RecId
                join ContainerId from containerTable
                order by containerTable.ContainerId
                    where containerTable.ContainerId        == containerLine.ContainerId
                        && containerTable.ContainerBuildId  == ''
        {
            WHSUOMStructure     structure   = WHSUOMStructure::find(containerTable.ContainerId, _module, containerLine.ShipmentId, true);
            UnitOfMeasureSymbol unitId      = WHSCatchWeightHelper::inventHandlingUnitId(containerLine.ItemId);
            ProductQuantity     productQty  = releasedProductUnitConverter.convertGivenUnitSymbols(containerLine.Qty,
                                                                                                   containerLine.UnitId,
                                                                                                   unitId,
                                                                                                   NoYes::Yes,
                                                                                                   containerLine.ItemId,
                                                                                                   containerLine.InventDimId,
                                                                                                   NoYes::Yes);

            if (!structure)
            {
                structure.LicensePlateId    = containerTable.ContainerId;
                structure.ItemId            = containerLine.ItemId;
                structure.Qty               = productQty;
                structure.UOMItem           = unitId;
                structure.Module            = _module;
                structure.ShipmentId        = containerLine.ShipmentId;
                structure.LoadId            = loadLine.LoadId;
                
                structure.insert();
            }
            else
            {
                if (structure.ItemId != containerLine.ItemId)
                {
                    structure.ItemId    = '';
                    structure.uomItem   = '';
                }

                structure.Qty += productQty;
                structure.write();
            }

            // Only create ASNs once per container ID.
            if (prevContainer != containerTable.ContainerId)
            {
                prevContainer = containerTable.ContainerId;
                this.createContainerASN(containerTable.ContainerId, _module);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLoadLinesByModule</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean filterLoadLinesByModule(WHSModule _module)
    {
        return _module == WHSModule::Transfer || _module == WHSModule::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransTypeByModule</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal InventTransType inventTransTypeByModule(WHSModule _module)
    {
        return _module == WHSModule::Transfer ? InventTransType::TransferOrderShip : InventTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderShippedBySimpleLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order is shipped by a load where each transfer line has exactly one
    /// corresponding load line which fully corresponds to the transfer lines demand.
    /// </summary>
    /// <param name="_transferId">
    /// A transfer ID.
    /// </param>
    /// <returns>
    /// true if the transfer order is shipped by a load where each transfer line has exactly one corresponding
    /// load line which fully corresponds to the transfer lines demand; otherwise, false
    /// </returns>
    protected boolean isTransferOrderShippedBySimpleLoad(InventTransferId _transferId)
    {
        boolean ret = false;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            ret = this.isTransferOrderShippedBySimpleLoadCWItemsIncluded(_transferId);
        }
        else
        {
            InventTransferLine  inventTransferLine;
            WHSLoadLine         loadLine;

            
            select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId == _transferId
                exists join loadLine
                    where loadLine.LoadId           == loadTable.LoadId
                        && loadLine.InventTransId   == inventTransferLine.InventTransId
                        && loadLine.InventTransType == InventTransType::TransferOrderShip
                        && (loadLine.PickedQty      != inventTransferLine.QtyTransfer
                        || loadLine.InventQty       != inventTransferLine.QtyTransfer);
            

            ret = inventTransferLine.RecId == 0;
        }
        
        if (!ret)
        {
            ret = this.isTransferOrderShippedBySimpleLoadAggregatedLines(_transferId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderShippedBySimpleLoadCWItemsIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order is shipped by a load where each transfer line has exactly one
    /// corresponding load line which fully corresponds to the transfer lines demand.
    /// </summary>
    /// <param name="_transferId">
    /// A transfer ID.
    /// </param>
    /// <returns>
    /// true if the transfer order is shipped by a load where each transfer line has exactly one corresponding
    /// load line which fully corresponds to the transfer lines demand; otherwise, false
    /// </returns>
    internal boolean isTransferOrderShippedBySimpleLoadCWItemsIncluded(InventTransferId _transferId)
    {
        InventTransferLine  inventTransferLine;
        WHSLoadLine         loadLine;

        PdsCatchWeightItem pdsCatchWeightItem;

        select firstonly RecId from inventTransferLine
            where inventTransferLine.TransferId == _transferId
         join TableId from loadLine
                where loadLine.LoadId           == loadTable.LoadId
                    && loadLine.InventTransId   == inventTransferLine.InventTransId
                    && loadLine.InventTransType == InventTransType::TransferOrderShip
                    && (loadLine.PickedQty      != inventTransferLine.QtyTransfer
                    || loadLine.InventQty       != inventTransferLine.QtyTransfer)
                    && loadLine.ItemId          == inventTransferLine.ItemId
            notexists join pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId == loadLine.ItemId;

        //no need to continue - we already found a line which is off.
        if (inventTransferLine.RecId != 0)
        {
            return false;
        }

        select firstonly RecId from inventTransferLine
            where inventTransferLine.TransferId == _transferId
            join TableId from loadLine
                where loadLine.LoadId           == loadTable.LoadId
                    && loadLine.InventTransId   == inventTransferLine.InventTransId
                    && loadLine.InventTransType == InventTransType::TransferOrderShip
                    && (loadLine.PickedQty      != inventTransferLine.PdsCWQtyTransfer
                    || loadLine.InventQty       != inventTransferLine.PdsCWQtyTransfer)
                    && loadLine.ItemId          == inventTransferLine.ItemId
            exists join pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId == loadLine.ItemId;

        return inventTransferLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderShippedBySimpleLoadAggregatedLines</Name>
				<Source><![CDATA[
    protected boolean isTransferOrderShippedBySimpleLoadAggregatedLines(InventTransferId _transferId)
    {
        boolean ret = true;
        WHSLoadLine loadLine;
        InventTransferLine inventTransferLine;

        select firstonly RecId from inventTransferLine
            where inventTransferLine.TransferId == _transferId
        exists join loadLine
            where loadLine.InventTransId == inventTransferLine.InventTransId
               && loadLine.LoadId != loadTable.LoadId
               && loadLine.InventTransType == InventTransType::TransferOrderShip;
        if (inventTransferLine.RecId)
        {
            return false;
        }

        boolean catchWeightEnabled = WHSCatchWeightConfigurationKeyManager::instance().isEnabled();

        while select QtyTransfer, PdsCWQtyTransfer, ItemId from inventTransferLine
            group by inventTransferLine.InventTransId, inventTransferLine.ItemId, inventTransferLine.QtyTransfer, inventTransferLine.PdsCWQtyTransfer
                where inventTransferLine.TransferId == _transferId
        join sum(PickedQty), sum(InventQty) from loadLine
                where loadLine.LoadId == loadTable.LoadId
                   && loadLine.InventTransId == inventTransferLine.InventTransId
                   && loadLine.InventTransType == InventTransType::TransferOrderShip
        {
            if (loadLine.PickedQty != loadLine.InventQty)
            {
                ret = false;
            }
            else
            {
                if (!catchWeightEnabled)
                {
                    if (loadLine.PickedQty      != inventTransferLine.QtyTransfer
                            || loadLine.InventQty       != inventTransferLine.QtyTransfer)
                    {
                        ret = false;
                    }
                }
                else
                {
                    if (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
                    {
                        if (loadLine.PickedQty      != inventTransferLine.PdsCWQtyTransfer
                                || loadLine.InventQty       != inventTransferLine.PdsCWQtyTransfer)
                        {
                            ret = false;
                        }
                    }
                    else
                    {
                        if (loadLine.PickedQty      != inventTransferLine.QtyTransfer
                                || loadLine.InventQty       != inventTransferLine.QtyTransfer)
                        {
                            ret = false;
                        }
                    }
                }
            }
            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLinesFromTransferLinesShippedBySimpleLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record of <c>InventTransferParmLine</c> shipped by a load.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// <c>InventTransferParmTable</c> used to create the <c>InventTransferParmLine</c> record.
    /// </param>
    protected void createParmLinesFromTransferLinesShippedBySimpleLoad(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferLine      inventTransferLine;
        LineNum                 lineNum;
        WHSLoadLine             loadLine;
        InventTransferParmLine  inventTransferParmLine;

        boolean flightEnabled = InventTransferExplodeLinesByFinTrackingDimFlight::instance().isEnabled();
        ItemId prevItem;
        boolean explodeLinesForItemWithFinTrackingDim;

        while select inventTransferLine
            where inventTransferLine.TransferId == _inventTransferParmTable.TransferId
            exists join loadLine
                where loadLine.InventTransId        == inventTransferLine.InventTransId
                    && loadLine.InventTransType     == InventTransType::TransferOrderShip
                    && loadLine.TransportRequest    == NoYes::No
                    && loadLine.LoadId              == loadTable.LoadId
        {
            if (flightEnabled)
            {
                if (prevItem != inventTransferLine.ItemId)
                {
                    prevItem = inventTransferLine.ItemId;
                    explodeLinesForItemWithFinTrackingDim = InventTable::find(inventTransferLine.ItemId).hasFinancialTrackingDim();
                }

                if (explodeLinesForItemWithFinTrackingDim)
                {
                    InventTrans inventTrans;

                    while select forceplaceholders sum(Qty), sum(PdsCWQty), inventDimId
                        from inventTrans
                            group by InventTransOrigin, StatusIssue, StatusReceipt, inventDimId
                            where inventTrans.InventTransOrigin == InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum)
                            && inventTrans.StatusReceipt == StatusReceipt::None
                            && inventTrans.StatusIssue >= StatusIssue::Picked
                    {
                        ++lineNum;

                        inventTransferParmLine.clear();
                        this.initParmLinesFromTransferLinesShippedBySimpleLoad(inventTransferParmLine,
                                                                   _inventTransferParmTable,
                                                                   inventTransferLine,
                                                                   lineNum);
                        inventTransferParmLine.InventDimId = inventTrans.InventDimId;
                        inventTransferParmLine.QtyShipNow = -inventTrans.Qty;
                        inventTransferParmLine.PdsCWQtyShipNow = -inventTrans.PdsCWQty;
                        inventTransferParmLine.insert();
                    }
                }
                else
                {
                    ++lineNum;

                    inventTransferParmLine.clear();
                    this.initParmLinesFromTransferLinesShippedBySimpleLoad(inventTransferParmLine,
                                                                   _inventTransferParmTable,
                                                                   inventTransferLine,
                                                                   lineNum);

                    inventTransferParmLine.insert();
                }
            }
            else
            {
                ++lineNum;

                inventTransferParmLine.clear();
                this.initParmLinesFromTransferLinesShippedBySimpleLoad(inventTransferParmLine,
                                                                   _inventTransferParmTable,
                                                                   inventTransferLine,
                                                                   lineNum);

                inventTransferParmLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmLinesFromTransferLinesShippedBySimpleLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferParmLine</c> record from the <c>InventTransferLine</c> record on load.
    /// </summary>
    /// <param name = "_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_lineNum">
    /// The <c>LineNum</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    protected void initParmLinesFromTransferLinesShippedBySimpleLoad(InventTransferParmLine _inventTransferParmLine,
                                                                     InventTransferParmTable _inventTransferParmTable,
                                                                     InventTransferLine _inventTransferLine,
                                                                     LineNum _lineNum)
    {
        this.initInventTransferParmLineFromInventTransferLine(_inventTransferParmLine, _inventTransferLine);
        this.initInventTransferParmLineFromInventTransferParmTable(_inventTransferParmLine, _inventTransferParmTable);
        if (PdsGlobal::pdsIsCWItem(_inventTransferLine.ItemId))
        {
            _inventTransferParmLine.QtyShipNow = _inventTransferLine.qtyShipPickedAll();
            _inventTransferParmLine.PdsCWQtyShipNow = _inventTransferLine.PdsCWQtyTransfer;
        }
        else
        {
            _inventTransferParmLine.QtyShipNow = _inventTransferLine.QtyTransfer;
        }
        _inventTransferParmLine.LineNum = _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLinesFromContainerTable</Name>
				<Source><![CDATA[
    private LineNum createInventTransferParmLinesFromContainerTable(
        InventTransferParmTable _inventTransferParmTable,
        WHSLoadId               _loadId,
        LineNum                 _lineNum)
    {
        InventTransferLine           inventTransferLine;
        WHSContainerTable            containerTable;
        WHSContainerLine             containerLine;
        WHSLoadLine                  loadLine;
        WHSOutboundSortPositionTrans sortPositionTrans;

        while select containerTable
            where containerTable.ContainerBuildId == ''
            join containerLine
                where containerLine.ContainerId == containerTable.ContainerId
                join TableId from loadLine
                    where loadLine.RecId                == containerLine.LoadLine
                        && loadLine.InventTransType     == InventTransType::TransferOrderShip
                        && loadLine.OrderNum            == _inventTransferParmTable.TransferId
                        && loadLine.LoadId              == _loadId
                    join inventTransferLine
                        where inventTransferLine.InventTransId  == loadLine.InventTransId
                            && inventTransferLine.TransferId    == _inventTransferParmTable.TransferId
                        notexists join sortPositionTrans
                            where sortPositionTrans.SortIdentifier == containerTable.ContainerId
        {
            ++_lineNum;

            this.createInventTransferParmLineFromContainerTable(containerTable, _inventTransferParmTable, containerLine, inventTransferLine, _lineNum);           
        }

        return _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLinesFromOutboundSortingTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>InventTransferParmLine</c> records for transfer orders that have gone through the outbound sorting process.
    /// </summary>
    /// <param name = "_inventTransferParmTable">The invent transfer parm table.</param>
    /// <param name = "_loadId">The load being ship confirmed.</param>
    /// <param name = "_lineNum">The line num of the last created invent transfer parm line.</param>
    /// <returns>The line num of the last created invent transfer parm line.</returns>
    private LineNum createInventTransferParmLinesFromOutboundSortingTransferOrder(
        InventTransferParmTable _inventTransferParmTable,
        WHSLoadId               _loadId,
        LineNum                 _lineNum)
    {
        WHSOutboundSortPositionTrans    sortPositionTrans;
        WHSOutboundSortPosition         sortPosition;
        WHSLoadLine                     loadLine;
        InventTransferLine              inventTransferLine;
        LineNum                         lineNum = _lineNum;
        
        while select ItemId, ProductQuantity, UnitSymbol, InventDimId from sortPositionTrans
            join WMSLocationId, LicensePlateId from sortPosition
            where sortPosition.RecId == sortPositionTrans.OutboundSortPosition
            join TableId from loadLine
                    where loadLine.RecId            == sortPositionTrans.LoadLine
                    &&    loadLine.OrderNum         == _inventTransferParmTable.TransferId
                    &&    loadLine.LoadId           == _loadId
                    &&    loadLine.InventTransType  == InventTransType::TransferOrderShip
            join inventTransferLine
                where inventTransferLine.InventTransId == loadLine.InventTransId
        {
            ++lineNum;

            InventTransferParmLine inventTransferParmLine;

            inventTransferParmLine.initFromInventTransferLine(inventTransferLine);
            inventTransferParmLine.TransferId   = _inventTransferParmTable.TransferId;
            inventTransferParmLine.ParmId       = _inventTransferParmTable.ParmId;

            WHSWorkLine     workLine;
            WHSWorkTable    workTable;

            select firstOnly WMSLocationId from workLine
                order by LineNum desc
                where workLine.WorkType == WHSWorkType::Put
                    exists join workTable
                        where workTable.WorkId == workLine.WorkId
                        &&    workTable.TargetLicensePlateId == sortPosition.LicensePlateId;

            InventDim inventDim = InventDim::find(inventTransferLine.InventDimId);
            inventDim.wMSLocationId  = workLine.WMSLocationId ? workLine.WMSLocationId : sortPosition.WMSLocationId;
            inventDim.LicensePlateId = sortPosition.LicensePlateId;
            inventDim = inventDim::findOrCreate(inventDim);

            inventTransferParmLine.InventDimId = inventDim.inventDimId;
            inventTransferParmLine.InventTransId = inventTransferLine.InventTransId;
            inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitTo;

            if (!PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
            {
                inventTransferParmLine.QtyShipNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                            sortPositionTrans.ItemId,
                                                            sortPositionTrans.InventDimId,
                                                            sortPositionTrans.ProductQuantity,
                                                            sortPositionTrans.UnitSymbol,
                                                            InventTableModule::find(sortPositionTrans.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                            NoYes::Yes);
            }
            else
            {
                inventTransferParmLine.QtyShipNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                            sortPositionTrans.ItemId,
                                                            sortPositionTrans.InventDimId,
                                                            sortPositionTrans.ProductQuantity,
                                                            sortPositionTrans.UnitSymbol,
                                                            WHSCatchWeightHelper::inventHandlingUnitId(sortPositionTrans.ItemId),
                                                            NoYes::Yes);
            }

            inventTransferParmLine.LineNum = lineNum;

            inventTransferParmLine.insert();
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLinesFromPackingAndSorting</Name>
				<Source><![CDATA[
    private LineNum createInventTransferParmLinesFromPackingAndSorting(
        InventTransferParmTable _inventTransferParmTable,
        WHSLoadId               _loadId,
        LineNum                 _lineNum)
    {
        LineNum lineNum = _lineNum;

        // Account for inventory that went through packing.
        lineNum = this.createInventTransferParmLinesFromContainerTable(_inventTransferParmTable, _loadId, lineNum);

        // Account for containers and inventory that went through sorting.
        lineNum = this.createInventTransferParmLinesFromOutboundSortingTransferOrder(_inventTransferParmTable, _loadId, lineNum);

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLineNonWHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmLine</c> records for non-WHS items.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating related.
    /// <c>InventTransferParmLine</c> records for non-WHS items.
    /// </param>
    /// <param name = "_loadId">Load ID value.</param>
    protected void createInventTransferParmLineNonWHS(
        InventTransferParmTable _inventTransferParmTable,
        WHSLoadId               _loadId)
    {
        InventTransferLine  transLine;
        LineNum             lineNum;
        WHSLoadLine         loadLine;

        while select InventQty, PickedWeight from loadLine
            where loadLine.LoadId               == _loadId
                && loadLine.OrderNum            == _inventTransferParmTable.TransferId
                && loadLine.InventTransType     == InventTransType::TransferOrderShip
                && loadLine.TransportRequest    == NoYes::No
            join transLine
                where loadLine.InventTransId == transLine.InventTransId
        {
            ++lineNum;

            InventTransferParmLine inventTransferParmLine;
            inventTransferParmLine.initFromInventTransferLine(transLine);
            inventTransferParmLine.TransferId           = _inventTransferParmTable.TransferId;
            inventTransferParmLine.ParmId               = _inventTransferParmTable.ParmId;
            inventTransferParmLine.InventTransId        = transLine.InventTransId;
            inventTransferParmLine.InventTransIdTransit = transLine.InventTransIdTransitTo;

            if (PdsGlobal::pdsIsCWItem(transLine.ItemId))
            {
                inventTransferParmLine.PdsCWQtyShipNow = loadLine.InventQty;
                inventTransferParmLine.QtyShipNow = (loadLine.PickedWeight ? loadLine.PickedWeight : transLine.qtyShipPicked());
            }
            else
            {
                inventTransferParmLine.QtyShipNow = loadLine.InventQty;
            }
            inventTransferParmLine.LineNum              = lineNum;
            inventTransferParmLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLineTMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmLine</c> records for TMS-only items.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating related.
    /// <c>InventTransferParmLine</c> records for TMS-only items.
    /// </param>
    /// <param name = "_loadId">Load ID value.</param>
    /// <param name = "_lineNum">The line num of the last created invent transfer parm line.</param>
    private void createInventTransferParmLineTMS(InventTransferParmTable _inventTransferParmTable, WHSLoadId _loadId, LineNum _lineNum)
    {
        InventTransferLine      transLine;
        WHSLoadLine             loadLine;
        TMSInventEnabled        tmsInventEnabled;
        WHSInventEnabled        whsInventEnabled;
        InventTransferParmLine  inventTransferParmLine;
        
        LineNum lineNum = _lineNum;

        while select InventQty, PickedWeight from loadLine
            where loadLine.LoadId               == _loadId
                && loadLine.OrderNum            == _inventTransferParmTable.TransferId
                && loadLine.InventTransType     == InventTransType::TransferOrderShip
                && loadLine.TransportRequest    == NoYes::No
            join transLine
                where transLine.InventTransId == loadLine.InventTransId
                exists join tmsInventEnabled
                    where tmsInventEnabled.ItemId == loadLine.ItemId
                    notexists join TableId from whsInventEnabled
                        where whsInventEnabled.ItemId == loadLine.ItemId
        {
            ++lineNum;
            
            inventTransferParmLine.clear();
            this.initInventTransferParmLineTMS(inventTransferParmLine, _inventTransferParmTable, transLine, loadLine, lineNum);

            inventTransferParmLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLineTMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferParmLine</c> record for TMS-only items from the given arguments.
    /// </summary>
    /// <param name = "_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_loadLine">
    /// The <c>WHSLoadLine</c> record to initialize from.
    /// </param>
    /// <param name = "_lineNum">
    /// The <c>LineNum</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    protected void initInventTransferParmLineTMS(InventTransferParmLine _inventTransferParmLine,
                                                 InventTransferParmTable _inventTransferParmTable,
                                                 InventTransferLine _inventTransferLine,
                                                 WHSLoadLine _loadLine,
                                                 LineNum _lineNum)
    {
        this.initInventTransferParmLineFromInventTransferLine(_inventTransferParmLine, _inventTransferLine);
        this.initInventTransferParmLineFromInventTransferParmTable(_inventTransferParmLine, _inventTransferParmTable);
        if (PdsGlobal::pdsIsCWItem(_inventTransferLine.ItemId))
        {
            _inventTransferParmLine.PdsCWQtyShipNow = _loadLine.InventQty;
            _inventTransferParmLine.QtyShipNow = (_loadLine.PickedWeight ? _loadLine.PickedWeight : _inventTransferLine.qtyShipPicked());
        }
        else
        {
            _inventTransferParmLine.QtyShipNow = _loadLine.InventQty;
        }
        _inventTransferParmLine.LineNum = _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the load can be ship confirmed.
    /// </summary>
    /// <returns>
    /// true if load can be ship confirmed; otherwise, false
    /// </returns>
    public boolean canShipConfirm()
    {
        if (InventLocation::find(loadTable.InventLocationId).whsEnabled)
        {
            if (loadTable.canUseTMSActions())
            {
                if (this.isLoadShipped())
                {
                    return checkFailed(strFmt("@WAX5828", loadTable.LoadId));
                }

                if (!loadTable.canShipConfirm(this.parmSkipLoadTender()))
                {
                    return false;
                }

                if (!this.checkCustomerIsNotOnHold(loadTable))
                {
                    return false;
                }

                if (!WHSLoadTable::hasOnlyTransportRequestLine(loadTable.LoadId))
                {
                    if (!loadTable.isAllWorkCompletedForLoad())
                    {
                        return checkFailed(strFmt("@WAX515", loadTable.LoadId));
                    }

                    if (!this.validateAllAllowedForOverOrUnderDeliveryWorkQtyHasBeenPicked())
                    {
                        return false;
                    }
                }

                if (!WHSShipConfirmationBatchValidator::newFromBuffer(loadTable).isAnyBatchDispositionCodeBlockingShipping())
                {
                    return checkFailed(strFmt("@WAX5747", loadTable.LoadId));
                }

                if (!this.validateFreightTerms())
                {
                    return checkFailed(strFmt("@TRX1631", loadTable.LoadId));
                }
            }
            else
            {
                if (!this.areAllTransportLoadShipped())
                {
                    return checkFailed(strFmt("@WAX:Error_CannotShipConfirmLoadAsAtleastOneTransportLoadNotShipped", loadTable.LoadId));
                }

                if (!loadTable.isAllWorkCompletedForLoad())
                {
                    return checkFailed(strFmt("@WAX515", loadTable.LoadId));
                }

                if (!loadTable.isAllClosedWorkForLoadIdTiedToTransportLoadsAndConsolidated())
                {
                    return checkFailed(strFmt("@WAX:Error_NotAllClosedWorkOnTransportLoad", loadTable.LoadId));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllTransportLoadShipped</Name>
				<Source><![CDATA[
    private boolean areAllTransportLoadShipped()
    {
        WHSTransportLoadLoadedWork  transportLoadLoadedWork;
        WHSTransportLoad            transportLoadLoc;
        WHSWorkTable                workTable;

        select firstonly WorkId from workTable
            where workTable.LoadId == loadTable.LoadId
            exists join transportLoadLoadedWork
                where transportLoadLoadedWork.WorkId == workTable.WorkId
                exists join transportLoadLoc
                    where transportLoadLoc.RecId                == transportLoadLoadedWork.TransportLoad
                        && transportLoadLoc.TransportLoadStatus != WHSTransportLoadStatus::Shipped;

        return workTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFreightTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the pays freight on the associated orders are in sync.
    /// </summary>
    /// <returns>
    /// true if freight terms are set correct; otherwise, false
    /// </returns>
    private boolean validateFreightTerms()
    {
        boolean paysFreightError;

        // Will evaluate if the Pays Freight on the associated orders are in sync.
        [anyInvoicedLines, paysFreightError] = WHSLoadTable::evaluateLoadPaysFreight(loadTable.LoadId);

        return !paysFreightError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>WHSLoadTable</c> table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSLoadTable</c> table.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        loadTable = _common as WHSLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>InventTransferParmLine</c> records.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating <c>InventTransferParmLine</c> records.
    /// </param>
    protected void createInventTransferParmLine(InventTransferParmTable _inventTransferParmTable)
    {
        // If the transfer order is by a load where there is a one-one between load lines and transfer lines then
        // we can use a simpler approach to create the parm lines since everything on the transfer will be shipped.
        // This will lead to a better performance when the update is done.
        if (this.isTransferOrderShippedBySimpleLoad(_inventTransferParmTable.TransferId))
        {
            this.createParmLinesFromTransferLinesShippedBySimpleLoad(_inventTransferParmTable);
        }
        else
        {
            WHSLoadLine             loadLine;
            WHSWorkLine             workLine;
            WHSWorkLine             putWorkLine;
            WHSWorkTable            workTable;
            InventTransferLine      inventTransferLine;
            LineNum                 lineNum;
            WMSLocation             wmslocation;
            WHSLocationProfile      locationProfile;
            WHSLocType              finalShiplocType = WHSParameters::find().ShipFinalLocType;
            WHSOutboundSortPosition sortPosition;

            SysDaQueryObject workLineQueryObject = this.buildWorkLineQueryObjectToCreateInventTransferParmLines(workLine,
                                                                                                                workTable,
                                                                                                                loadLine,
                                                                                                                inventTransferLine,
                                                                                                                putWorkLine,
                                                                                                                wmslocation,
                                                                                                                sortPosition, 
                                                                                                                locationProfile,
                                                                                                                _inventTransferParmTable);

            SysDaSearchObject searchObject = new SysDaSearchObject(workLineQueryObject);
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();
            while(searchStatement.findNext(searchObject))
            {
                // If there is a pick after this put (staging) then skip.
                if (WHSWorkLine::getNextOppositeWorkLine(putWorkLine.WorkId, putWorkLine.LineNum, putWorkLine.WorkType))
                {
                    continue;
                }

                WHSLicensePlateId   targetLicensePlateId;
                WMSLocationId       putWMSLocationId;
                boolean             shipWorkLine;

                if (locationProfile.LocType == finalShiplocType)
                {
                    shipWorkLine            = true;
                    targetLicensePlateId    = workTable.TargetLicensePlateId;
                    putWMSLocationId        = putWorkLine.WMSLocationId;
                }
                // A work that was consolidated is completed on a different location than the final shipping location so it needs to be included.
                else if (workTable.isOriginForConsolidatedWork())
                {
                    WHSWorkLine     lastConsolidatedLine    = WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                                                                WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(workLine));
                    WHSWorkTable    consolidatedWork        = WHSWorkTable::find(lastConsolidatedLine.WorkId);
                    WHSWorkLine     lastClosedPutLine       = WHSWorkTable::getLastClosedPutWorkLine(consolidatedWork.WorkId);
                    WMSLocation     putLocation             = WMSLocation::find(lastClosedPutLine.WMSLocationId, consolidatedWork.InventLocationId);

                    if (WHSLocationProfile::find(putLocation.LocProfileId).LocType == finalShiplocType)
                    {
                        shipWorkLine            = true;
                        targetLicensePlateId    = consolidatedWork.TargetLicensePlateId;
                        putWMSLocationId        = putLocation.WMSLocationId;
                    }
                }

                if (shipWorkLine)
                {
                    ++lineNum;
                    this.createInventTransParmLine(_inventTransferParmTable, inventTransferLine, workLine, targetLicensePlateId, putWMSLocationId, lineNum);
                }
            }

            if (WHSParameters::canUsePackFunctionality())
            {
                // Create remaining parm lines for manually packed items and inventory that went through sorting.
                lineNum = this.createInventTransferParmLinesFromPackingAndSorting(_inventTransferParmTable, loadTable.LoadId, lineNum);
            }

            this.createInventTransferParmLineTMS(_inventTransferParmTable, loadTable.LoadId, lineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkLineQueryObjectToCreateInventTransferParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build work line query object to create invent transfer parameter lines based on.
    /// </summary>
    /// <param name = "_workLine">Instance of <c>WHSWorkLine</c>.</param>
    /// <param name = "_workTable">Instance of <c>WHSWorkTable</c>.</param>
    /// <param name = "_loadLine">Instance of <c>WHSLoadLine</c>.</param>
    /// <param name = "_inventTransferLine">Instance of <c>InventTransferLine</c>.</param>
    /// <param name = "_putWorkLine">Instance of <c>WHSWorkLine</c>.</param>
    /// <param name = "_wmsLocation">Instance of <c>WMSLocation</c>.</param>
    /// <param name = "_sortPosition">Instance of <c>WHSOutboundSortPosition</c>.</param>
    /// <param name = "_locationProfile">Instance of <c>WHSLocationProfile</c>.</param>
    /// <param name = "_inventTransferParmTable">Instance of <c>InventTransferParmTable</c>.</param>
    /// <returns>Work line query object.</returns>
    protected SysDaQueryObject buildWorkLineQueryObjectToCreateInventTransferParmLines(
        WHSWorkLine _workLine,
        WHSWorkTable _workTable,
        WHSLoadLine _loadLine, 
        InventTransferLine _inventTransferLine,
        WHSWorkLine _putWorkLine, 
        WMSLocation _wmsLocation, 
        WHSOutboundSortPosition _sortPosition,
        WHSLocationProfile _locationProfile,
        InventTransferParmTable _inventTransferParmTable)
    {
        SysDaQueryObject workLineQueryObject = new SysDaQueryObject(_workLine);
        workLineQueryObject.whereClause(
                            new SysDaNotEqualsExpression(
                                new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, WorkStatus)),
                                new SysDaValueExpression(WHSWorkStatus::Cancelled))
                        .and(
                            new SysDaNotEqualsExpression(
                                new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, WorkStatus)),
                                new SysDaValueExpression(WHSWorkStatus::Combined)))
                        .and(
                            new SysDaGreaterThanExpression(
                                new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, InventQtyWork)),
                                new SysDaValueExpression(0))));

        SysDaQueryObject loadLineQueryObject = this.buildLoadLineQueryObject(_loadLine, _workLine, _inventTransferParmTable);
        SysDaQueryObject inventTransferLineQueryObject = this.buildInventTransferLineQueryObject(_inventTransferLine, _workLine);
        SysDaQueryObject workTableQueryObject = this.buildWorkTableQueryObject(_workTable, _workLine);
        SysDaQueryObject putWorkLineQueryObject = this.buildPutWorkLineQueryObject(_putWorkLine, _workTable);
        SysDaQueryObject wmsLocationQueryObject = this.buildWmsLocationQueryObject(_wmslocation, _putWorkLine, _workTable);
        SysDaQueryObject locationProfileQueryObject = this.buildLocationProfileQueryObject(_locationProfile, _wmslocation);
        SysDaQueryObject sortPositionQueryObject = this.buildSortPositionQueryObject(_sortPosition, _workTable);

        workLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, loadLineQueryObject)
                               .joinClause(SysDaJoinKind::InnerJoin, inventTransferLineQueryObject)
                               .joinClause(SysDaJoinKind::InnerJoin, workTableQueryObject)
                               .joinClause(SysDaJoinKind::InnerJoin, putWorkLineQueryObject)
                               .joinClause(SysDaJoinKind::InnerJoin, wmsLocationQueryObject)
                               .joinClause(SysDaJoinKind::InnerJoin, locationProfileQueryObject)
                               .joinClause(SysDaJoinKind::NotExistsJoin, sortPositionQueryObject);
        return workLineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSortPositionQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildSortPositionQueryObject(WHSOutboundSortPosition _sortPosition, WHSWorkTable _workTable)
    {
        SysDaQueryObject sortPositionQueryObject = new SysDaQueryObject(_sortPosition);
        sortPositionQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_sortPosition, fieldStr(WHSOutboundSortPosition, LicensePlateId)),
                                    new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, TargetLicensePlateId))));
        return sortPositionQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWmsLocationQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildWmsLocationQueryObject(WMSLocation _wmsLocation, WHSWorkLine _putWorkLine, WHSWorkTable _workTable)
    {
        SysDaQueryObject wmsLocationQueryObject = new SysDaQueryObject(_wmsLocation);
        wmsLocationQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_wmsLocation, fieldStr(WMSLocation, wMSLocationId)),
                                    new SysDaFieldExpression(_putWorkLine, fieldStr(WHSWorkLine, WMSLocationId)))
                            .and(new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_wmsLocation, fieldStr(WMSLocation, inventLocationId)),
                                    new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, InventLocationId)))));
        return wmsLocationQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationProfileQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildLocationProfileQueryObject(WHSLocationProfile _locationProfile, WMSLocation _wmsLocation)
    {
        SysDaQueryObject locationProfileQueryObject = new SysDaQueryObject(_locationProfile);
        locationProfileQueryObject.projection().add(fieldStr(WHSLocationProfile, LocType));
        locationProfileQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_locationProfile, fieldStr(WHSLocationProfile, LocProfileId)),
                                    new SysDaFieldExpression(_wmsLocation, fieldStr(WMSLocation, LocProfileId))));
        return locationProfileQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPutWorkLineQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildPutWorkLineQueryObject(WHSWorkLine _putWorkLine, WHSWorkTable _workTable)
    {
        SysDaQueryObject putWorkLineQueryObject = new SysDaQueryObject(_putWorkLine);
        putWorkLineQueryObject.projection().add(fieldStr(WHSWorkLine, WorkId));
        putWorkLineQueryObject.projection().add(fieldStr(WHSWorkLine, LineNum));
        putWorkLineQueryObject.projection().add(fieldStr(WHSWorkLine, WorkType));
        putWorkLineQueryObject.projection().add(fieldStr(WHSWorkLine, wmsLocationId));
        putWorkLineQueryObject.orderByClause().addDescending(fieldStr(WHSWorkLine, LineNum));
        putWorkLineQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_putWorkLine, fieldStr(WHSWorkLine, WorkId)),
                                    new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, WorkId)))
                            .and(new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_putWorkLine, fieldStr(WHSWorkLine, WorkType)),
                                    new SysDaValueExpression(WHSWorkType::Put)))
                            .and(new SysDaNotEqualsExpression(
                                    new SysDaFieldExpression(_putWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                                    new SysDaValueExpression(WHSWorkStatus::Cancelled)))
                            .and(new SysDaNotEqualsExpression(
                                    new SysDaFieldExpression(_putWorkLine, fieldStr(WHSWorkLine, WorkStatus)),
                                    new SysDaValueExpression(WHSWorkStatus::Combined))));
        return putWorkLineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkTableQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildWorkTableQueryObject(WHSWorkTable _workTable, WHSWorkLine _workLine)
    {
        SysDaQueryObject workTableQueryObject = new SysDaQueryObject(_workTable);
        workTableQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, WorkId)),
                                    new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, WorkId)))
                            .and(new SysDaNotEqualsExpression(
                                    new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, WorkStatus)),
                                    new SysDaValueExpression(WHSWorkStatus::Combined)))
                            .and(new SysDaNotEqualsExpression(
                                    new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, WorkStatus)),
                                    new SysDaValueExpression(WHSWorkStatus::Cancelled))));
        return workTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransferLineQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventTransferLineQueryObject(InventTransferLine _inventTransferLine, WHSWorkLine _workLine)
    {
        var inventTransferLineQueryObject = new SysDaQueryObject(_inventTransferLine);
        inventTransferLineQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_inventTransferLine, fieldStr(InventTransferLine, InventTransId)),
                                    new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, InventTransId))));

        return inventTransferLineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadLineQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildLoadLineQueryObject(WHSLoadLine _loadLine, WHSWorkLine _workLine, InventTransferParmTable _inventTransferParmTable)
    {
        SysDaQueryObject loadLineQueryObject = new SysDaQueryObject(_loadLine);
        loadLineQueryObject.projection().add(fieldStr(WHSLoadLine, RecId));
        loadLineQueryObject.whereClause(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                                    new SysDaFieldExpression(loadTable, fieldStr(WHSLoadTable, LoadId)))
                            .and(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, OrderNum)),
                                    new SysDaFieldExpression(_inventTransferParmTable, fieldStr(InventTransferParmTable, TransferId))))
                            .and(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransType)),
                                    new SysDaValueExpression(InventTransType::TransferOrderShip)))
                            .and(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, TransportRequest)),
                                    new SysDaValueExpression(NoYes::No)))
                            .and(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, RecId)),
                                    new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, LoadLineRefRecId)))));
        return loadlineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::instance(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>