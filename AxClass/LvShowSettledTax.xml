<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvShowSettledTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class is used to open the <c>TaxTrans</c> form with a modified query in order
///     to view all settled tax transactions for a customer or vendor transaction.
/// </summary>
final class LvShowSettledTax
{
    FormRun taxTransForm;

    FormRun         custVendTransForm;
    FormDataSource  custVendTransDatasource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>TaxTrans</c> form.
    /// </summary>
    public void formInit()
    {
        Common common;

        Args args = new Args();
        args.caller(custVendTransForm);
        args.record(common);

        if (taxTransForm)
        {
            taxTransForm.closeCancel();
        }

        MenuFunction mf = new MenuFunction(menuItemDisplayStr(TaxTrans), MenuItemType::Display);
        taxTransForm = mf.create(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies the query on the <c>TaxTrans</c> form based on a selected <c>CustVendTrans</c>
    ///     record.
    /// </summary>
    /// <param name="_reselect">
    ///     Whether or not the <c>TaxTrans</c> datasource query should be re-executed after the
    ///     changes are made.
    /// </param>
    public void formLinkActive(boolean _reselect = true)
    {
        FormDataSource      formDataSource;
        QueryBuildRange     qBr;
        CustVendTrans       custVendTrans = custVendTransDatasource.cursor();
        CustVendInvoiceJour custVendInvoiceJour;

        if (taxTransForm && ! taxTransForm.closed())
        {
            switch (custVendTrans.TableId)
            {
                case (tablenum(CustTrans)) :
                    custVendInvoiceJour = CustInvoiceJour::findFromCustTrans(
                        custVendTrans.Invoice,
                        custVendTrans.TransDate,
                        custVendTrans.AccountNum,
                        false,
                        custVendTrans.Voucher);
                    break;

                case (tablenum(VendTrans)) :
                    custVendInvoiceJour = VendInvoiceJour::findFromVendTrans(
                        custVendTrans.Invoice,
                        custVendTrans.TransDate,
                        custVendTrans.AccountNum,
                        false,
                        custVendTrans.Voucher);
                    break;
            }

            formDataSource = taxTransForm.dataSource();

            qBr = SysQuery::findOrCreateRange(formDataSource.query().dataSourceTable(tablenum(TaxTrans)),
                                              fieldnum(TaxTrans, SourceRecId));
            if (custVendInvoiceJour)
            {
                qBr.value(queryRangeConcat(queryValue(custVendTrans.RecId), custVendInvoiceJour.RecId));
            }
            else
            {
                qBr.value(queryValue(custVendTrans.RecId));
            }

            if (_reselect)
            {
                formDataSource.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens the <c>TaxTrans</c> form.
    /// </summary>
    public void formOpen()
    {
        this.formInit();
        this.formLinkActive(false);

        taxTransForm.run();
        taxTransForm.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransDatasource</Name>
				<Source><![CDATA[
        private void parmCustVendTransDatasource(FormDataSource _custVendTransDatasource)
    {
        custVendTransDatasource = _custVendTransDatasource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransForm</Name>
				<Source><![CDATA[
        private void parmCustVendTransForm(FormRun _custVendTransForm = custVendTransForm)
    {
        custVendTransForm = _custVendTransForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>LvShowSettledTax</c> class for a given form and
    ///     form datasource.
    /// </summary>
    /// <param name="_custVendTransForm">
    ///     The calling form instance.
    /// </param>
    /// <param name="_custVendTransDatasource">
    ///     The <c>CustVendTrans</c> datasource to show the settled tax transactions for.
    /// </param>
    /// <returns>
    ///     An instance of the <c>LvShowSettledTax</c> class.
    /// </returns>
    public static LvShowSettledTax newFromForm(FormRun        _custVendTransForm,
                                               FormDataSource _custVendTransDatasource)
    {
        LvShowSettledTax showSettledTax = new LvShowSettledTax();

        showSettledTax.parmCustVendTransForm(_custVendTransForm);
        showSettledTax.parmCustVendTransDatasource(_custVendTransDatasource);

        return showSettledTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>