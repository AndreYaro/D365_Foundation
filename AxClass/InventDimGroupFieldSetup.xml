<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimGroupFieldSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimGroupFieldSetup
{
    fieldId         dimFieldId;

    NoYes           isActive;
    NoYes           isSalesProcessActivated;
    NoYes           isProductDimension;
    NoYes           isConsistent;
    NoYes           isMandatory;
    NoYes           isPrimaryStockingEnabled;
    NoYes           isFinancialInventoryEnabled;
    NoYes           isPhysicalInventoryEnabled;
    NoYes           isCoveragePlanByDimensionEnabled;
    NoYes           isSerialNumberControlEnabled;
    NoYes           isSalesPriceSearchEnabled;
    NoYes           isPurchPriceSearchEnabled;
    NoYes           isAllowBlankReceiptEnabled;
    NoYes           isAllowBlankIssueEnabled;
    NoYes           isInheritInventTransfer_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>dimFieldId</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>InventDim</c> field ID of the current field.
    /// </returns>
    public FieldId dimFieldId()
    {
        return dimFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductDimensionGroupFldSetup</Name>
				<Source><![CDATA[
    protected void initFromProductDimensionGroupFldSetup(EcoResProductDimensionGroupFldSetup _ecoResProductDimensionGroupFldSetup)
    {
        dimFieldId                          = _ecoResProductDimensionGroupFldSetup.DimensionFieldId;

        isActive                            = _ecoResProductDimensionGroupFldSetup.IsActive;
        isSalesProcessActivated             = NoYes::No;
        isProductDimension                  = NoYes::Yes;
        isConsistent                        = NoYes::Yes;
        isMandatory                         = NoYes::Yes;
        isPrimaryStockingEnabled            = NoYes::Yes;
        isFinancialInventoryEnabled         = NoYes::Yes;
        isPhysicalInventoryEnabled          = NoYes::Yes;
        isCoveragePlanByDimensionEnabled    = NoYes::Yes;

        isSalesPriceSearchEnabled           = _ecoResProductDimensionGroupFldSetup.IsSalesPriceSearchEnabled;
        isPurchPriceSearchEnabled           = _ecoResProductDimensionGroupFldSetup.IsPurchPriceSearchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStorageDimensionGroupFldSetup</Name>
				<Source><![CDATA[
    protected void initFromStorageDimensionGroupFldSetup(EcoResStorageDimensionGroupFldSetup _ecoResStorageDimensionGroupFldSetup)
    {
        dimFieldId      = _ecoResStorageDimensionGroupFldSetup.DimensionFieldId;

        isActive        = _ecoResStorageDimensionGroupFldSetup.IsActive;

        isSalesProcessActivated             = NoYes::No;

        if (_ecoResStorageDimensionGroupFldSetup.DimensionFieldId == fieldNum(InventDim, InventSiteId))
        {
            isConsistent = NoYes::Yes;
        }

        switch (_ecoResStorageDimensionGroupFldSetup.DimensionFieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                isMandatory                 = NoYes::Yes;
                isPrimaryStockingEnabled    = NoYes::Yes;
                break;

            case fieldNum(InventDim, InventLocationId):
                EcoResStorageDimensionGroup ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::find(_ecoResStorageDimensionGroupFldSetup.StorageDimensionGroup);
                isMandatory = ecoResStorageDimensionGroup.IsWarehouseMandatoryEnabled;
                isPrimaryStockingEnabled = ecoResStorageDimensionGroup.IsWarehousePrimaryStockingEnabled;
                break;
        }

        isFinancialInventoryEnabled         = _ecoResStorageDimensionGroupFldSetup.IsFinancialInventoryEnabled;
        isPhysicalInventoryEnabled          = _ecoResStorageDimensionGroupFldSetup.IsPhysicalInventoryEnabled;

        isCoveragePlanByDimensionEnabled    = _ecoResStorageDimensionGroupFldSetup.IsCoveragePlanByDimensionEnabled;

        isAllowBlankReceiptEnabled          = _ecoResStorageDimensionGroupFldSetup.IsAllowBlankReceiptEnabled;
        isAllowBlankIssueEnabled            = _ecoResStorageDimensionGroupFldSetup.IsAllowBlankIssueEnabled;

        isSalesPriceSearchEnabled           = _ecoResStorageDimensionGroupFldSetup.IsSalesPriceSearchEnabled;
        isPurchPriceSearchEnabled           = _ecoResStorageDimensionGroupFldSetup.IsPurchPriceSearchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTrackingDimensionGroupFldSetup</Name>
				<Source><![CDATA[
    protected void initFromTrackingDimensionGroupFldSetup(EcoResTrackingDimensionGroupFldSetup _ecoResTrackingDimensionGroupFldSetup)
    {
        dimFieldId      = _ecoResTrackingDimensionGroupFldSetup.DimensionFieldId;

        isActive        = _ecoResTrackingDimensionGroupFldSetup.IsActive;

        isSalesProcessActivated = _ecoResTrackingDimensionGroupFldSetup.IsSalesProcessActivated;

        if (_ecoResTrackingDimensionGroupFldSetup.DimensionFieldId == fieldnum(InventDim, InventSerialId))
        {
            EcoResTrackingDimensionGroup ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(_ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup);
            isSerialNumberControlEnabled = ecoResTrackingDimensionGroup.IsSerialNumberControlEnabled;
        }
        // <GEERU>
        if (_ecoResTrackingDimensionGroupFldSetup.DimensionFieldId == fieldnum(InventDim, InventProfileId_RU))
        {
            isConsistent                    = NoYes::Yes;
            isMandatory                     = NoYes::Yes;
        }

        isInheritInventTransfer_RU          = _ecoResTrackingDimensionGroupFldSetup.IsInheritInventTransfer_RU;
        // </GEERU>

        isPrimaryStockingEnabled            = _ecoResTrackingDimensionGroupFldSetup.IsPrimaryStockingEnabled;
        isFinancialInventoryEnabled         = _ecoResTrackingDimensionGroupFldSetup.IsFinancialInventoryEnabled;
        isPhysicalInventoryEnabled          = _ecoResTrackingDimensionGroupFldSetup.IsPhysicalInventoryEnabled;

        isCoveragePlanByDimensionEnabled    = _ecoResTrackingDimensionGroupFldSetup.IsCoveragePlanByDimensionEnabled;

        isAllowBlankReceiptEnabled          = _ecoResTrackingDimensionGroupFldSetup.IsAllowBlankReceiptEnabled;
        isAllowBlankIssueEnabled            = _ecoResTrackingDimensionGroupFldSetup.IsAllowBlankIssueEnabled;

        isSalesPriceSearchEnabled           = _ecoResTrackingDimensionGroupFldSetup.IsSalesPriceSearchEnabled;
        isPurchPriceSearchEnabled           = _ecoResTrackingDimensionGroupFldSetup.IsPurchPriceSearchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isActive</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if the dimension is active; otherwise, the <c>NoYes::No</c>
    ///    enumeration value.
    /// </returns>
    public NoYes isActive()
    {
        return isActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllowBlankIssueEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isAllowBlankIssueEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if the dimension allows blank or empty values for issues;
    ///    otherwise, the <c>NoYes::No</c> enumeration value.
    /// </returns>
    public NoYes isAllowBlankIssueEnabled()
    {
        return isAllowBlankIssueEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllowBlankReceiptEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isAllowBlankReceiptEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension allows blank or empty values for receipts; otherwise,
    ///    the <c>NoYes::No</c> value.
    /// </returns>
    public NoYes isAllowBlankReceiptEnabled()
    {
        return isAllowBlankReceiptEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsistent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isConsistent</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is consistent; otherwise, the <c>NoYes::No</c>.
    /// </returns>
    public NoYes isConsistent()
    {
        return isConsistent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoveragePlanByDimensionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isCoveragePlanByDimensionEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is a master planning dimension; otherwise, the
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes isCoveragePlanByDimensionEnabled()
    {
        return isCoveragePlanByDimensionEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinancialInventoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isPhysicalInventoryEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is part of financial inventory; otherwise, the
    ///    <c>NoYes::No</c> value.
    /// </returns>
    public NoYes isFinancialInventoryEnabled()
    {
        return isFinancialInventoryEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInheritInventTransfer_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of internal isInheritInventTransfer_RU parameter.
    /// </summary>
    /// <returns>
    ///    Yes if the dimension allows inheritance in transfer journal line; otherwise, No.
    /// </returns>
    public NoYes isInheritInventTransfer_RU()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        
        return (isInheritInventTransfer_RU && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ])) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isMandatory</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is mandatory; otherwise, the <c>NoYes::No</c> value.
    /// </returns>
    public NoYes isMandatory()
    {
        return isMandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicalInventoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isPhysicalInventoryEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> if the dimension is part of physical inventory; otherwise, the
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes isPhysicalInventoryEnabled()
    {
        return isPhysicalInventoryEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryStockingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isPrimaryStockingEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> if the dimension is a primary stocking dimension; otherwise, the
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes isPrimaryStockingEnabled()
    {
        return isPrimaryStockingEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isProductDimension</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> if the dimension is a product dimension; otherwise, the <c>NoYes::No</c>.
    /// </returns>
    public NoYes isProductDimension()
    {
        return isProductDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchPriceSearchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isSalesPriceSearchEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is used in purchase price searches; otherwise, the
    ///    <c>NoYes::No</c> value.
    /// </returns>
    public NoYes isPurchPriceSearchEnabled()
    {
        return isPurchPriceSearchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesPriceSearchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isSalesPriceSearchEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is used in sales price searches; otherwise, the
    ///    <c>NoYes::No</c> value.
    /// </returns>
    public NoYes isSalesPriceSearchEnabled()
    {
        return isSalesPriceSearchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesProcessActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isSalesProcessActivated</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> value if the dimension is has the Sales Process activated; otherwise, the
    ///    <c>NoYes::No</c> value.
    /// </returns>
    public NoYes isSalesProcessActivated()
    {
        return isSalesProcessActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the internal <c>isSerialNumberControlEnabled</c> parameter.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> if the dimension is under serial number control; otherwise, the
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes isSerialNumberControlEnabled()
    {
        return isSerialNumberControlEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimGroupFieldSetup construct()
    {
        return new InventDimGroupFieldSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrConstructFromField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>InventDimGroupFieldSetup</c> class using an item and the field ID.
    /// </summary>
    /// <param name="_itemId">
    /// The unique identifier of the item.
    /// </param>
    /// <param name="_dimFieldId">
    /// The field ID of the dimension.
    /// </param>
    /// <returns>
    /// The object <c>InventDimGroupFieldSetup</c> class.
    /// </returns>
    /// <remarks>
    /// This method handles any inventory field, including Product, Tracking, and Storage fields.
    /// </remarks>
    public static InventDimGroupFieldSetup mcrConstructFromField(ItemId _itemId, FieldId _dimFieldId)
    {
        if (!_itemId || !_dimFieldId)
        {
            return InventDimGroupFieldSetup::newNoValidField();
        }

        if (InventDim::isFieldIdProductDimension(_dimFieldId))
        {
            return EcoResProductDimGroupSetup::newItemId(_itemId).getFieldSetup(_dimFieldId);
        }
        if (InventDim::isFieldIdTrackingDimension(_dimFieldId))
        {
            return EcoResTrackingDimGroupSetup::mcrNewItemId(_itemId).getFieldSetup(_dimFieldId);
        }
        if (InventDim::isFieldIdStorageDimension(_dimFieldId))
        {
            return EcoResStorageDimGroupSetup::mcrNewItemId(_itemId).getFieldSetup(_dimFieldId);
        }

        return InventDimGroupFieldSetup::newNoValidField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEcoResProductDimensionGroupFldSetup</Name>
				<Source><![CDATA[
    static public InventDimGroupFieldSetup newEcoResProductDimensionGroupFldSetup(EcoResProductDimensionGroupFldSetup _ecoResProductDimensionGroupFldSetup)
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup = InventDimGroupFieldSetup::construct();

        inventDimGroupFieldSetup.initFromProductDimensionGroupFldSetup(_ecoResProductDimensionGroupFldSetup);
        return inventDimGroupFieldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEcoResStorageDimensionGroupFldSetup</Name>
				<Source><![CDATA[
    static public InventDimGroupFieldSetup newEcoResStorageDimensionGroupFldSetup(EcoResStorageDimensionGroupFldSetup _ecoResStorageDimensionGroupFldSetup)
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup = InventDimGroupFieldSetup::construct();

        inventDimGroupFieldSetup.initFromStorageDimensionGroupFldSetup(_ecoResStorageDimensionGroupFldSetup);
        return inventDimGroupFieldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEcoResTrackingDimensionGroupFldSetup</Name>
				<Source><![CDATA[
    static public InventDimGroupFieldSetup newEcoResTrackingDimensionGroupFldSetup(EcoResTrackingDimensionGroupFldSetup _ecoResTrackingDimensionGroupFldSetup)
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup = InventDimGroupFieldSetup::construct();

        inventDimGroupFieldSetup.initFromTrackingDimensionGroupFldSetup(_ecoResTrackingDimensionGroupFldSetup);
        return inventDimGroupFieldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNoValidField</Name>
				<Source><![CDATA[
    static public InventDimGroupFieldSetup newNoValidField()
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup = InventDimGroupFieldSetup::construct();

        return inventDimGroupFieldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnySerialTrackingActivated</Name>
				<Source><![CDATA[
    static internal boolean isAnySerialTrackingActivated(ItemId _itemId)
    {        
        InventDimGroupFieldSetup dimFieldSetup = InventDimGroupSetup::newItemIdTrackingDimensionsOnly(_itemId).getFieldSetup(fieldNum(InventDim, InventSerialId));

        return dimFieldSetup.isActive() || dimFieldSetup.isSalesProcessActivated();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>