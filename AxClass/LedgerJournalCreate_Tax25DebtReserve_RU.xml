<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Tax25DebtReserve_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class creates a ledger journal for bad debts reserves posting.
/// </summary>
class LedgerJournalCreate_Tax25DebtReserve_RU extends LedgerJournalCreate_Tax25_RU
{
    LedgerDimensionDefaultAccount   revenueLedgerDimension,
                                    expenseLedgerDimension,
                                    reserveLedgerDimension;

    DimensionDefault                expenseDefaultDimension,
                                    revenueDefaultDimension;
    JournalId                       journalNum;
    LineNum                         lineNum;
    #AviFiles
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(JournalId _journalNum)
    {
        SysOperationProgress operationProgress;

        journalNum = _journalNum;

        this.createVoucher(journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@SYS26868", "@RTax25BadDebtReserve:GenJourBadDebtCreate", registerJournalTable.EndDate));
        operationProgress.setAnimation(#AviUpdate);

        this.createTransForModel(
        RTax25RegisterType::DebtDebitReservationDetail,
        CustParameters::rTax25DebtModelTax(false));

        this.createTransForModel(
        RTax25RegisterType::DebtDebitReservationDetailRAP,
        CustParameters::rTax25DebtModel(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransForModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ledger journal lines for the register type and the debt model.
    /// </summary>
    /// <param name="_registerType">
    /// The tax register type.
    /// </param>
    /// <param name="_debtModel">
    /// The reference to the debt model.
    /// </param>

    private void createTransForModel(RTax25RegisterType _registerType, RefRecId _debtModel)
    {
        const int AccountObject = 1;
        const int Expense = 8;
        const int Revenue = 9;
        
        RTax25DebtModelPeriod       debtPeriod;
        RTax25RegisterJournalTable  journalTable;
        RTax25RegisterJournalTrans  journalTrans;
        LedgerJournalTrans          ledgerJournalTrans;
        RTax25Query                 query;
        AmountMST                   regExpense, regRevenue;
        AmountMST                   transAmount;
        str                         accountingObject;
        RTax25RegisterId            regId = RTax25RegisterTable::find(_registerType).RegisterId;

        LedgerDimensionDefaultAccount defaultAccount, offsetDefaultAccount;
        DimensionDefault              defaultDimension;

        if (! _debtModel)
        {
            return;
        }

        select count(DaysFrom) from debtPeriod
            where debtPeriod.DebtModel  == _debtModel
               && debtPeriod.Percent    != 0;

        ttsBegin;

        while select TableId from journalTable
            where journalTable.EndDate == registerJournalTable.EndDate
        join journalTrans
            where journalTrans.JournalNum          == journalTable.JournalNum &&
                  journalTrans.FiscalYear          == journalTable.FiscalYear &&
                  journalTrans.PeriodType          == journalTable.PeriodType &&
                  journalTrans.PeriodNum           == journalTable.PeriodNum  &&
                  ! journalTrans.Cancelled                                    &&
                  journalTrans.RegisterId          == regId
        {
            query = RTax25Query::newParameters(_registerType,
                                           journalTrans,
                                           ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                           regId,
                                                                           journalTrans.PeriodType,
                                                                           journalTrans.PeriodNum,
                                                                           journalTrans.FiscalYear));
            if (query.first())
            {
                do
                {
                    accountingObject    = query.getField(AccountObject);
                    regExpense          = query.getField(Expense + debtPeriod.DaysFrom);
                    regRevenue          = query.getField(Revenue + debtPeriod.DaysFrom);

                    if (! regExpense && ! regRevenue)
                    {
                        continue;
                    }

                    ledgerJournalTrans.clear();
                    ledgerJournalTrans.LineNum           = lineNum;
                    ledgerJournalTrans.JournalNum        = journalNum;
                    ledgerJournalTrans.Voucher           = voucher;
                    ledgerJournalTrans.CurrencyCode      = Ledger::accountingCurrency();
                    ledgerJournalTrans.TransDate         = registerJournalTable.EndDate;
                    ledgerJournalTrans.ExchRate          = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
                    ledgerJournalTrans.AccountType       = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;

                    this.initAccounts(query.getRecord().RefTableId, query.getRecord().RefRecId, _debtModel);

                    if (regRevenue)
                    {
                        defaultAccount       = reserveLedgerDimension;
                        offsetDefaultAccount = revenueLedgerDimension;
                        transAmount          = regRevenue;
                        defaultDimension     = revenueDefaultDimension;
                    }
                    else
                    {
                        defaultAccount       = expenseLedgerDimension;
                        offsetDefaultAccount = reserveLedgerDimension;
                        transAmount          = regExpense;
                        defaultDimension     = expenseDefaultDimension;
                    }

                    ledgerJournalTrans.AmountCurDebit = transAmount;

                    ledgerJournalTrans.parmDefaultDimension(defaultDimension);
                    ledgerJournalTrans.parmLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(defaultAccount, defaultDimension));
                    ledgerJournalTrans.parmOffsetLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount, defaultDimension));
                    ledgerJournalTrans.Txt = strFmt("@SYS26868", "@GLS103823", accountingObject);

                    ledgerJournalTrans.insert();

                    lineNum ++;
                }
                while (query.next());
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ledger dimensions for the document reference according to debt model setup.
    /// </summary>
    /// <param name="_refTableId">
    /// The table ID document reference.
    /// </param>
    /// <param name="_refRecId">
    /// The record ID document reference.
    /// </param>
    /// <param name="_debtModel">
    /// The record ID reference to the debt model.
    /// </param>

    private void initAccounts(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        RefRecId    _debtModel)
    {
        RTax25DebtLedgerAccounts debtLedgerAccounts;
        CustVendTrans            custVendTrans = RTax25DebtAmounts::getSourceDocTrans(_refTableId, _refRecId);

        debtLedgerAccounts = RTax25DebtLedgerAccounts::getAccounts(
            _debtModel,
            custVendTrans.TableId == tableNum(CustTrans) ?
            ModuleCustVend::Cust                         :
            ModuleCustVend::Vend,
            custVendTrans.AccountNum);

        revenueLedgerDimension  = debtLedgerAccounts.UnrealisedRevenueLedgerDimension;
        revenueDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(debtLedgerAccounts.RTax25ProfitTableProfit);
        revenueDefaultDimension = DimensionDefaultFacade::serviceMergeDefaultDimensions(custVendTrans.DefaultDimension, revenueDefaultDimension);

        expenseLedgerDimension  = debtLedgerAccounts.UnrealisedExpenseLedgerDimension;
        reserveLedgerDimension  = debtLedgerAccounts.BadDebtReserveLedgerDimension;
        expenseDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(debtLedgerAccounts.rTax25ProfitTableLoss);
        expenseDefaultDimension = DimensionDefaultFacade::serviceMergeDefaultDimensions(custVendTrans.DefaultDimension, expenseDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@RTax25BadDebtReserve:BadDebtReserveReverse";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>