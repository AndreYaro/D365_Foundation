<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableSortingDataHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class contains all the methods for populating the <c>ProjTableSorting</c> table for the project in case record doesnt exist.
/// Creates <c>ProjTableSorting</c> records for all the projects belonging to the same forest as the project.
/// </summary>
internal final class ProjTableSortingDataHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performMigrationForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to delete all existing records in <c>ProjTableSorting</c> table 
    /// which is reference by the specific project ID as root node and insert all descendant records.
    /// Called when a project is opened for the first time.
    /// </summary>
    /// <param name = "_projId">Project ID for which <c>ProjTableSorting</c> records need to be created.</param>
    [Hookable(false)]
    public static void performMigrationForProject(ProjId _projId)
    {
        RecId rootProject = ProjTableSortingDataHelper::findRootProject(_projId);

        ProjTableSortingDataHelper::deleteSortingRecordsForProject(rootProject);

        ProjTableSortingDataHelper::initSortingRecordsForAllChildrenOfRoot(rootProject);

        ProjTableSortingDataHelper::calculateAndSetProjSiblingNumber(rootProject);

        ProjTableSortingDataHelper::setPathIdAndProjHierarchyLevel(rootProject);

        int maxHierarchyLevel = ProjTableSorting::getMaxHierarchyLevel(rootProject);

        ProjTableSortingDataHelper::setHierarchyLevels(rootProject, maxHierarchyLevel);

        ProjTableSortingDataHelper::updateEndNodes(rootProject);

    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootProject</Name>
				<Source><![CDATA[
    private static RecId findRootProject(ProjId _projId)
    {
        ProjTable projTable;
        while (_projId != '')
        {
            projTable = ProjTable::find(_projId);
            _projId = projTable.ParentId;
        }
        return projTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSortingRecordsForProject</Name>
				<Source><![CDATA[
    private static void deleteSortingRecordsForProject(RecId _rootProjTable)
    {
        ttsbegin;
        ProjTableSorting projTableSorting;
        delete_from projTableSorting
            where projTableSorting.RefRootProjTable == _rootProjTable;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSortingRecordsForAllChildrenOfRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>ProjTableSorting</c> with record identifier of each <c>ProjTable</c>
    /// and record identifier of the root node of <c>ProjTable</c> of that forest.
    /// </summary>
    /// <param name = "_projRecId">Record identifier of the root project.</param>
    /// <remarks>
    /// Uses direct SQL for CTE(Common Table Expressions) which cannot be executed in X++.
    /// </remarks>
    private static void initSortingRecordsForAllChildrenOfRoot(RecId _projRecId)
    {
        // Create query string for inserting ProjTable record references into the ProjTableSorting table
        /*WITH HierarchyCTE AS (
        SELECT P1.ProjId,
        P1.DataAreaId,
        P1.Partition,
        P1.RECID
        FROM ProjTable P1
        WHERE P1.RecId = @RefProj AND
        P1.Partition = 5637144576 AND
        P1.DataAreaId = 'ussi'
        UNION ALL SELECT RecursiveTable.ProjId,
        RecursiveTable.DataAreaId,
        RecursiveTable.Partition,
        RecursiveTable.RECID
        FROM HierarchyCTE AS CTE
        INNER JOIN ProjTable AS RecursiveTable ON
        RecursiveTable.Partition = CTE.Partition AND
        RecursiveTable.DataAreaId = CTE.DataAreaId AND
        RecursiveTable.ParentId = CTE.ProjId
        )
        insert into ProjTableSorting (RefProjTable, RefRootProjTable, DataAreaId, Partition)
        SELECT HierarchyCTE.RecId, %1, '%2', %3
        from HierarchyCTE
        
        **/
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();

        str insertSortSQL = strFmt(@"WITH HierarchyCTE AS (
            SELECT P1.ProjId,
                P1.DataAreaId,
                P1.Partition,
                P1.RECID
            FROM ProjTable P1
            WHERE P1.RecId = %1 AND
                P1.Partition = %3 AND
                P1.DataAreaId = '%2'
            UNION ALL SELECT RecursiveTable.ProjId,
                RecursiveTable.DataAreaId,
                RecursiveTable.Partition,
                RecursiveTable.RECID
            FROM HierarchyCTE AS CTE
            INNER JOIN ProjTable AS RecursiveTable ON
                RecursiveTable.Partition = CTE.Partition AND
                RecursiveTable.DataAreaId = CTE.DataAreaId AND
                RecursiveTable.ParentId = CTE.ProjId)
            insert into ProjTableSorting (RefProjTable, RefRootProjTable, DataAreaId, Partition)
            SELECT HierarchyCTE.RecId, %1, '%2', %3
            from HierarchyCTE",
            _projRecId,
            dataAreaId,
            partition);

        ProjTableSortingDataHelper::executeSQLStatement(insertSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndSetProjSiblingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets project sibling number for each <c>ProjTableSorting</c> record in the forest.
    /// </summary>
    /// <param name = "_refRootProjTable">Record identifier of the root project.</param>
    /// <remakrs>
    /// Uses direct SQL as it uses  ROW_NUMBER() OVER PARTITION 
    /// which cannot be executed in X++.
    /// </remakrs>
    private static void calculateAndSetProjSiblingNumber(RecId _refRootProjTable)
    {
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();

        str updateSortSQL = strFmt(@"UPDATE P1
            SET P1.ProjSiblingNumber = T2.ProjSiblingNumber
            FROM ProjTableSorting P1
            join
            (SELECT T1.RECID, T1.ProjId, T1.ParentId,T1.DataAreaId,T1.Partition,
                CASE WHEN T1.ParentId != ''
                    THEN  ROW_NUMBER() OVER (PARTITION BY T1.PARTITION, T1.DATAAREAID, T1.ParentId ORDER BY T1.ParentId, T1.RECID)
                    ELSE 1
                END as ProjSiblingNumber
                FROM ProjTable T1
                WHERE T1.DataAreaId = '%2' AND
                T1.Partition = %3) T2
            ON T2.RecId = P1.RefProjTable AND
                T2.DataAreaId = P1.DataAreaId AND
                T2.Partition = P1.Partition
            WHERE P1.RefRootProjTable = %1
                AND P1.Dataareaid = '%2'
                AND P1.Partition = %3",
            _refRootProjTable,
            dataAreaId,
            partition);

        ProjTableSortingDataHelper::executeSQLStatement(updateSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPathIdAndProjHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets path ID and project hierarchy level for each <c>ProjTableSorting</c> record in the forest.
    /// </summary>
    /// <param name = "_refRootProjTable">Record identifier of the root project.</param>
    /// <remakrs>
    /// Uses direct SQL for CTE(Common Table Expressions) which cannot be executed in X++.
    /// </remakrs>
    private static void setPathIdAndProjHierarchyLevel(RecId _refRootProjTable)
    {
        /*WITH HierarchyCTE AS (
        SELECT PS.RefRootProjTable, P1.ProjId, PS.ProjSiblingNumber,
        1 AS CTELevel,
        CONVERT(VARCHAR(MAX), CONVERT(INT, PS.ProjSiblingNumber)) AS CTEPathId,
        P1.DataAreaId,
        P1.Partition,
        P1.RECID
        FROM ProjTable P1 JOIN PROJTABLESORTING PS on P1.RecId = PS.RefProjTable
        WHERE PS.RefProjTable = PS.RefRootProjTable
        AND PS.RefRootProjTable = @RefProj
        AND PS.ProjSiblingNumber >= 0
        AND P1.DataAreaId = 'ussi' AND P1.Partition = 5637144576
        UNION ALL SELECT PS2.RefRootProjTable, RecursiveTable.ProjId, PS2.ProjSiblingNumber,
        CTELevel + 1,
        CONVERT(VARCHAR(MAX), CONCAT(CTE.CTEPathId, '.', CONVERT(INT, PS2.ProjSiblingNumber))),
        RecursiveTable.DataAreaId,
        RecursiveTable.Partition,
        RecursiveTable.RECID
        FROM HierarchyCTE AS CTE
        INNER JOIN ProjTable AS RecursiveTable ON
        RecursiveTable.Partition = CTE.Partition AND
        RecursiveTable.DataAreaId = CTE.DataAreaId AND
        RecursiveTable.ParentId = CTE.ProjId
        INNER JOIN ProjTableSorting PS2 ON
        RecursiveTable.RecId = PS2.RefProjTable AND
        PS2.RefRootProjTable = CTE.RefRootProjTable
        )
        update ProjTableSorting
        set PathId = CTEPathId, ProjHierarchyLevel = CTELevel
        from HierarchyCTE JOIN ProjTableSorting ON
        ProjTableSorting.RefProjTable = HierarchyCTE.RecId AND
        ProjTableSorting.DataAreaId = HierarchyCTE.DataAreaId AND
        ProjTableSorting.Partition = HierarchyCTE.Partition
        **/
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();

        str updateSortSQL = strFmt(@"
            WITH HierarchyCTE AS (
            SELECT PS.RefRootProjTable,
                P1.ProjId,
                PS.ProjSiblingNumber,
                1 AS CTELevel,
                CONVERT(VARCHAR(MAX), CONVERT(INT, PS.ProjSiblingNumber)) AS CTEPathId,
                P1.DataAreaId,
                P1.Partition,
                P1.RECID
            FROM ProjTable P1
            JOIN PROJTABLESORTING PS on
                PS.PARTITION = P1.PARTITION AND
                PS.DATAAREAID = P1.DATAAREAID AND
                PS.RefProjTable = P1.RecId
            WHERE
                P1.Partition = %3 AND
                P1.DataAreaId = '%2' AND
                PS.RefProjTable = PS.RefRootProjTable AND
                PS.RefRootProjTable = %1 AND
                PS.ProjSiblingNumber >= 0
            UNION ALL SELECT PS2.RefRootProjTable, RecursiveTable.ProjId, PS2.ProjSiblingNumber,
                CTELevel + 1,
                          CONVERT(VARCHAR(MAX), CONCAT(CTE.CTEPathId, '.', CONVERT(INT, PS2.ProjSiblingNumber))),
                RecursiveTable.DataAreaId,
                RecursiveTable.Partition,
                RecursiveTable.RECID
            FROM HierarchyCTE AS CTE
            INNER JOIN ProjTable AS RecursiveTable ON
                RecursiveTable.Partition = CTE.Partition AND
                RecursiveTable.DataAreaId = CTE.DataAreaId AND
                RecursiveTable.ParentId = CTE.ProjId
            INNER JOIN ProjTableSorting PS2 ON
                PS2.PARTITION = RecursiveTable.Partition AND
                PS2.DATAAREAID = RecursiveTable.DATAAREAID AND
                PS2.RefProjTable  = RecursiveTable.RecId AND
                PS2.RefRootProjTable = CTE.RefRootProjTable
                )
            update ProjTableSorting
            set PathId = CTEPathId, ProjHierarchyLevel = CTELevel
            from HierarchyCTE JOIN ProjTableSorting ON
                ProjTableSorting.RefProjTable = HierarchyCTE.RecId AND
                ProjTableSorting.DataAreaId = HierarchyCTE.DataAreaId AND
                ProjTableSorting.Partition = HierarchyCTE.Partition",
            _refRootProjTable,
            dataAreaId,
            partition);

        ProjTableSortingDataHelper::executeSQLStatement(updateSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHierarchyLevels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets hierarchy level fields for each <c>ProjTableSorting</c> record in the forest.
    /// </summary>
    /// <param name = "_refRootProjTable">Record identifier of the root project.</param>
    /// <param name = "_currentMaxHierarchyLevel">Maximum hierarchy level for that forest.</param>
    /// <remarks>
    /// Needs a SQL function which cannot be executed in X++.
    /// </remarks>
    private static void setHierarchyLevels(RecId _refRootProjTable, int _currentMaxHierarchyLevel)
    {
        /*
        update ProjtableSorting
        set HierarchyLevel1 = dbo.ProjSplitIntegerByDelimeter(PathId, '.', 1),
        HierarchyLevel2 = dbo.ProjSplitIntegerByDelimeter(PathId, '.', 2),
        ...
        HierarchyLevel10 = dbo.ProjSplitIntegerByDelimeter(PathId, '.', 10)
        where REFROOTPROJTABLE = 5637146899 AND DATAAREAID = 'ussi' AND PARTITION = 5637144576**/
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();

        str updateSortSQL = strFmt("update ProjTableSorting set ");
        for (int i = 1; i <= _currentMaxHierarchyLevel; ++i)
        {
            updateSortSQL += strFmt('HierarchyLevel%2 = dbo.%1(PathId, \'.\', %2)', ProjHierarchySQLObjects::getSplitByIntegerFuncName(), i);

            if (i < _currentMaxHierarchyLevel)
            {
                updateSortSQL += ',';
            }
        }

        updateSortSQL += strFmt(" WHERE REFROOTPROJTABLE = %1 AND DATAAREAID = '%2' AND PARTITION = %3",
            _refRootProjTable,
            dataAreaId,
            partition);

        ProjTableSortingDataHelper::executeSQLStatement(updateSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEndNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets end node for all leaf projects for a forest to true.
    /// </summary>
    /// <param name = "_refRootProjTable">Record identifier of the root project.</param>
    /// <remarks>
    /// Uses direct SQL for better performance.
    /// </remarks>
    private static void updateEndNodes(RecId _refRootProjTable)
    {
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();

        str updateSortSQL = strFmt(@"Update A
            SET ENDNODE = 1
            from ProjTableSorting A JOIN ProjTable B ON
                B.RECID = A.REFPROJTABLE AND
                B.DATAAREAID = A.DATAAREAID AND
                B.PARTITION = A.PARTITION
            where B.ProjId not in (
                select distinct parentid from ProjTable where
                    DATAAREAID = '%2' and
                    PARTITION = %3) AND
                A.REFROOTPROJTABLE = %1 AND
                A.DATAAREAID = '%2' AND
                A.PARTITION = %3",
            _refRootProjTable,
            dataAreaId,
            partition);

        ProjTableSortingDataHelper::executeSQLStatement(updateSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    private static void executeSQLStatement(str _statement, Map _paramMap = null)
    {
        Connection connection = new Connection();

        if (connection)
        {
            try
            {
                Statement stmt = connection.createStatement();
                new SqlStatementExecutePermission(_statement).assert();
                stmt.executeUpdateWithParameters(_statement, _paramMap);
                CodeAccessPermission::revertAssert();
                stmt.close();
            }
            catch
            {
                throw error(strFmt("@SYS93289"));  // Operation canceled
            }
            finally
            {
                connection.finalize();
            }
        }
        else
        {
            throw error(strFmt("@SYS73525"));  // Connection not established
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSortingRecordsForAllChildrenByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>ProjTableSorting</c> with record identifier of each <c>ProjTable</c>
    /// and inserts data into <c>ProjTableSorting</c> Table in sorting order of Project Id instead of RecId.
    /// </summary>
    /// <param name = "_projRecId">Record identifier of the root project.</param>
    /// <remarks>
    /// Uses direct SQL for CTE(Common Table Expressions) which cannot be executed in X++.
    /// </remarks>
    private static void initSortingRecordsForAllChildrenByProjId(RecId _projRecId)
    {
        // Create query string for inserting ProjTable record references into the ProjTableSorting table       
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();
        String30 orderByField = 'Order by HierarchyCTE.ProjId';

        str insertSortSQL = strFmt(@"WITH HierarchyCTE AS (
            SELECT P1.ProjId,
                P1.DataAreaId,
                P1.Partition,
                P1.RECID
            FROM ProjTable P1
            WHERE P1.RecId = %1 AND
                P1.Partition = %3 AND
                P1.DataAreaId = '%2'
            UNION ALL SELECT RecursiveTable.ProjId,
                RecursiveTable.DataAreaId,
                RecursiveTable.Partition,
                RecursiveTable.RECID
            FROM HierarchyCTE AS CTE
            INNER JOIN ProjTable AS RecursiveTable ON
                RecursiveTable.Partition = CTE.Partition AND
                RecursiveTable.DataAreaId = CTE.DataAreaId AND
                RecursiveTable.ParentId = CTE.ProjId)
            insert into ProjTableSorting (RefProjTable, RefRootProjTable, DataAreaId, Partition)
            SELECT HierarchyCTE.RecId, %1, '%2', %3
            from HierarchyCTE %4",
            _projRecId,
            dataAreaId,
            partition,
            orderByField);

        ProjTableSortingDataHelper::executeSQLStatement(insertSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndSetProjSiblingNumberByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets project sibling number for each <c>ProjTableSorting</c> record in the forest.
    /// </summary>
    /// <param name = "_refRootProjTable">Record identifier of the root project.</param>
    /// <remakrs>
    /// Uses direct SQL as it uses  ROW_NUMBER() OVER PARTITION
    /// which cannot be executed in X++.
    /// </remakrs>
    private static void calculateAndSetProjSiblingNumberByProjId(RecId _refRootProjTable)
    {
        DataAreaId dataAreaId = curExt();
        Partition partition = getCurrentPartitionRecId();
        String30 orderByField = 'T1.ParentId, T1.ProjId';

        str updateSortSQL = strFmt(@"UPDATE P1
            SET P1.ProjSiblingNumber = T2.ProjSiblingNumber
            FROM ProjTableSorting P1
            join
            (SELECT T1.RECID, T1.ProjId, T1.ParentId,T1.DataAreaId,T1.Partition,
                CASE WHEN T1.ParentId != ''
                    THEN  ROW_NUMBER() OVER (PARTITION BY T1.PARTITION, T1.DATAAREAID, T1.ParentId ORDER BY %4)
                    ELSE 1
                END as ProjSiblingNumber
                FROM ProjTable T1
                WHERE T1.DataAreaId = '%2' AND
                T1.Partition = %3) T2
            ON T2.RecId = P1.RefProjTable AND
                T2.DataAreaId = P1.DataAreaId AND
                T2.Partition = P1.Partition
            WHERE P1.RefRootProjTable = %1
                AND P1.Dataareaid = '%2'
                AND P1.Partition = %3",
            _refRootProjTable,
            dataAreaId,
            partition,
            orderByField);

        ProjTableSortingDataHelper::executeSQLStatement(updateSortSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjTableSortingRecordsOrderByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorting subprojects hierarchy by project Id and inserts sorted data into <c>ProjTableSorting</c> table.
    /// </summary>
    /// <param name = "_projId"> Project ID for which <c>ProjTableSorting</c> records need to be created.</param>
    [Hookable(false)]
    public static void insertProjTableSortingRecordsOrderByProjId(ProjId _projId)
    {
        RecId rootProject = ProjTableSortingDataHelper::findRootProject(_projId);

        ProjTableSortingDataHelper::initSortingRecordsForAllChildrenByProjId(rootProject);

        ProjTableSortingDataHelper::calculateAndSetProjSiblingNumberByProjId(rootProject);

        ProjTableSortingDataHelper::setPathIdAndProjHierarchyLevel(rootProject);

        int maxHierarchyLevel = ProjTableSorting::getMaxHierarchyLevel(rootProject);

        ProjTableSortingDataHelper::setHierarchyLevels(rootProject, maxHierarchyLevel);

        ProjTableSortingDataHelper::updateEndNodes(rootProject);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>