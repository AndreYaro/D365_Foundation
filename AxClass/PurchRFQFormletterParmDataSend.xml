<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormletterParmDataSend</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormletterParmDataSend extends PurchRFQFormletterParmData
{
    PurchRFQCaseTable   purchRFQCaseTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldIdSourceTable_OrderId</Name>
				<Source><![CDATA[
    protected fieldId fieldIdSourceTable_OrderId()
    {
        return fieldNum(PurchRFQCaseTable,rfqCaseId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common _sourceTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = purchRFQCaseTable)
    {
        if (_sourceTable.TableId == tableNum(PurchRFQCaseTable))
        {
            purchRFQCaseTable = _sourceTable;
        }

        return _sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the prompt of the <c>chooseLines</c> query on the client-side if the class is currently
    ///    running on the server.
    /// </summary>
    /// <returns>
    ///    true if the prompt is executed; otherwise, false;
    /// </returns>
    /// <remarks>
    ///    The <c>SysQueryRun</c> class does not support the <c>promptOnClient</c> framework to execute the
    ///    prompt on the client, which causes multiple client calls when prompting from the server.
    /// </remarks>
    protected boolean promptChooseLines()
    {
        boolean result = true;

        if (this.parmShowQueryForm())
        {
            container packedChooseLines;
            [result, packedChooseLines] = PurchRFQFormletterParmDataSend::promptChooseLinesOnClient(chooseLines.pack());
            chooseLines = new SysQueryRun(packedChooseLines);
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    protected str queryName()
    {
        return queryStr(PurchRFQCaseUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates all <c>PurchRFQParmLine</c> records from the active <c>PurchRFQLine</c> records
    /// for a given <c>PurchRFQParmTable</c> record.
    /// </summary>
    public void reSelect()
    {
        PurchRFQParmTable      localPurchRFQParmTable;
        PurchRFQParmSubTable   localPurchRFQParmSubTable;
        PurchRFQCaseLine       localPurchRFQCaseLine;
        PurchRFQLine           localPurchRFQLine;
        PurchRFQTable          localPurchRFQTable;

        purchRFQParmUpdate.SpecQty         = this.parmPurchRFQUpdate();

        ttsbegin;

        while select forceplaceholders rfqCaseId, VendAccount,TableRefId
              from   localPurchRFQParmTable
            where localPurchRFQParmTable.ParmId == purchRFQParmUpdate.ParmId
                join localPurchRFQParmSubTable
                    where localPurchRFQParmSubTable.ParmId     == localPurchRFQParmTable.ParmId
                       && localPurchRFQParmSubTable.TableRefId == localPurchRFQParmTable.TableRefId
        {
            PurchRFQParmLine::deleteFromPurchRFQParmSubTable(localPurchRFQParmSubTable);

            while select localPurchRFQCaseLine
                where localPurchRFQCaseLine.rfqCaseId  == localPurchRFQParmTable.rfqCaseId
                   && ((this.parmLineStatusFilter()    == PurchRFQStatusFilter::All            &&
                       localPurchRFQCaseLine.StatusLow  < PurchRFQStatus::Received)            ||
                       localPurchRFQCaseLine.StatusLow == enum2int(this.parmLineStatusFilter()))
                notexists join localPurchRFQLine
                    where localPurchRFQCaseLine.RecId == localPurchRFQLine.rfqCaseLineRefRecId &&
                          localPurchRFQLine.Status     > PurchRFQStatus::Sent
                exists join localPurchRFQTable
                    where localPurchRFQLine.rfqId            == localPurchRFQTable.rfqId       &&
                          localPurchRFQParmTable.rfqCaseId   == localPurchRFQTable.rfqCaseId   &&
                          localPurchRFQParmTable.VendAccount == localPurchRFQTable.VendAccount
            {
                this.createParmLineFromRFQCaseLine(localPurchRFQCaseLine, localPurchRFQParmTable.TableRefId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    protected void selectChooseLines(boolean _append = false)
    {
        this.initRecordLists();
        this.sendChooseLines();
        this.insertRecordLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchRFQParmTable</c> record and <c>PurchRFQCaseLine</c> records for an RFQ.
    /// </summary>
    protected void sendChooseLines()
    {
        PurchRFQParmTable   localPurchRFQParmTable;
        PurchRFQCaseLine    localPurchRFQCaseLine;
        PurchRFQCaseTable   localPurchRFQCaseTable;
        PurchRFQVendLink    localPurchRFQVendLink;
        TradeLineRefId      tableRefId = '';

        boolean             mayJournalBePosted  = false;
        boolean             purchRFQParmLinesExist;
        boolean             insertDatabase = false;

        void createParmTable()
        {
            if (this.allowCreateParmTable())
            {
                localPurchRFQParmTable.clear();
                localPurchRFQParmTable.TableRefId = tableRefId;

                this.createParmTableFromRFQCaseTable(localPurchRFQParmTable,
                                      localPurchRFQCaseTable,
                                      localPurchRFQVendLink.VendAccount);

                this.allowCreateParmTable(this.parmAllowEmptyParmTable());
            }
        }

        this.parmPurchRFQParmLineRecordInsertList (new RecordInsertList(tableNum(PurchRFQParmLine)));

        ttsbegin;

        this.allowCreateParmTable(this.parmAllowEmptyParmTable());

        purchRFQParmLinesExist = (select firstonly RecId from purchRFQParmLine
                                    where purchRFQParmLine.ParmId == parmId).RecId != 0;

        chooseLines.reset();    // if the select button is used from purcheditlines

        while (chooseLines.next())
        {
            progressTotal++;

            if (chooseLines.changed(tableNum(PurchRFQCaseTable)))
            {
                localPurchRFQCaseTable = chooseLines.get(tableNum(PurchRFQCaseTable));

                mayJournalBePosted = this.mayJournalBePosted(localPurchRFQCaseTable);
            }

            if (!mayJournalBePosted)
                    continue;

            if (!purchRFQParmLinesExist)
            {
                tableRefId = localPurchRFQParmTable.TableRefId;
                if (!tableRefId || chooseLines.changed(tableNum(PurchRFQVendLink)))
                {
                    tableRefId = formletterParmData::getNewTableRefId();
                }

                localPurchRFQCaseLine  = chooseLines.get(tableNum(PurchRFQCaseLine));
                if ((this.createParmLineFromRFQCaseLine(localPurchRFQCaseLine, tableRefId) ||  this.parmAllowEmptyParmTable())
                    && chooseLines.changed(tableNum(PurchRFQVendLink)))
                {
                    localPurchRFQVendLink  = chooseLines.get(tableNum(PurchRFQVendLink));
                    createParmTable();
                    insertDatabase = true;
                }
            }
        }

        if (insertDatabase)
        {
            this.parmPurchRFQParmLineRecordInsertList().insertDatabase();
        }

        ttscommit;

        purchRFQParmTable = localPurchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected tableId sourceLineTableId()
    {
        return tableNum(PurchRFQCaseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected tableId sourceTableTableId()
    {
        return tableNum(PurchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        super();

        if (!chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseTable)).findRange(fieldNum(PurchRFQCaseTable, rfqCaseId)))
        {
            if (! this.parmDatasourceRecordsPacked())
            {
                chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseTable)).addRange(fieldNum(PurchRFQCaseTable, rfqCaseId));

                if (purchRFQCaseTable)
                {
                    chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseTable)).rangeField(fieldNum(PurchRFQCaseTable, rfqCaseId)).value(queryValue(purchRFQCaseTable.rfqCaseId));
                }
            }
            else
            {
                setPrefix("@SYS25781");

                this.updateQueryDocumentRanges(this.parmDatasourceRecordsPacked());
            }
        }

        if (purchRFQParmUpdate.LineStatusFilter == PurchRFQStatusFilter::Created)
        {
            chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseLine)).addRange(fieldNum(PurchRFQCaseLine, StatusLow)).value(queryValue(PurchRFQStatus::Created));
        }
        else if (purchRFQParmUpdate.LineStatusFilter == PurchRFQStatusFilter::Sent)
        {
            chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseLine)).addRange(fieldNum(PurchRFQCaseLine, StatusLow)).value(queryValue(PurchRFQStatus::Sent));
        }
        else // All
        {
            chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseLine)).addRange(fieldNum(PurchRFQCaseLine, StatusLow)).value(queryRange(PurchRFQStatus::Created,PurchRFQStatus::Sent));
        }

        chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseLine)).addSortField(fieldNum(PurchRFQCaseLine, rfqCaseId));
        chooseLines.query().dataSourceTable(tableNum(PurchRFQVendLink)).addSortField(fieldNum(PurchRFQVendLink, VendAccount));
        chooseLines.query().dataSourceTable(tableNum(PurchRFQCaseLine)).addSortField(fieldNum(PurchRFQCaseLine, LineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQFormletterParmDataSend construct()
    {
        return new PurchRFQFormletterParmDataSend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptChooseLinesOnClient</Name>
				<Source><![CDATA[
    protected static container  promptChooseLinesOnClient(container packedChooseLines)
    {
        SysQueryRun  chooseLines;
        boolean      result;

        chooseLines = new SysQueryRun(packedChooseLines);
        chooseLines.promptLoadLastUsedQuery(false);

        result = chooseLines.prompt();

        return [result, chooseLines.pack()];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>