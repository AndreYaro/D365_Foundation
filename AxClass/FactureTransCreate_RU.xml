<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureTransCreate_RU
{
    FactureJourCreate_RU  facture;
    FactureJour_RU        factureJour;
    FactureTrans_RU       factureTrans;
    Qty                   qty;
    CalcTaxes_RU          calcTaxes;
    Factor                factor, taxBaseFactor;
    NoYes                 recalcTaxes;
    RefRecId              refCommReportTrans;        
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected abstract boolean calcAmounts(Qty _qty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxes</Name>
				<Source><![CDATA[
    protected void calcTaxes(Voucher       _ledgerVoucher,
                           TransDate      _transDate,
                           TaxGroup       _taxGroup,
                           TaxItemGroup   _taxItemGroup,
                           InventTransId  _inventTransId,
                           Amount         _amount)
    {
        TaxTrans              taxTrans;
        ;

        taxTrans = this.fetchTaxes(_ledgerVoucher,
                                   _transDate,
                                   _taxGroup,
                                   _taxItemGroup,
                                   _inventTransId);

        calcTaxes = CalcTaxes_RU::construct(taxTrans);
        calcTaxes.calc();

        taxBaseFactor = calcTaxes.totalTaxBaseAmountCur() ? abs(_amount / calcTaxes.totalTaxBaseAmountCur()) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans(Qty _qty = qty)
    {
        this.initTrans();

        if (! this.checkTrans())
            throw error("@SYS18447");

        if (this.calcAmounts(_qty))
        {
            this.insertTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxes</Name>
				<Source><![CDATA[
    protected TaxTrans fetchTaxes(Voucher         _ledgerVoucher,
                                  TransDate       _transDate,
                                  TaxGroup        _taxGroup,
                                  TaxItemGroup    _taxItemGroup,
                                  InventTransId   _inventTransId)
    {
        TaxTrans    taxTrans;
        TaxTable    taxTable;

        select firstonly taxTrans
            where taxTrans.Voucher              == _ledgerVoucher &&
                    taxTrans.TransDate            == _transDate     &&
                    taxTrans.TaxGroup             == _taxGroup      &&
                    taxTrans.TaxItemGroup         == _taxItemGroup  &&
                    (! _inventTransId             ||
                    taxTrans.InventTransId       == _inventTransId)
        exists join taxTable
            where taxTable.TaxCode   == taxTrans.TaxCode      &&
                    (taxTable.TaxType_W == TaxType_W::VAT        ||
                    taxTable.TaxType_W == TaxType_W::VATReduced ||
                    taxTable.TaxType_W == TaxType_W::VATZero);

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        factureTrans = facture.getFactureTrans();

        factureTrans.clear();
        factureTrans.initValue();
        factureTrans.FactureId   = factureJour.FactureId;
        factureTrans.Module      = factureJour.Module;
        factureTrans.LineNum     = facture.lineNum() + 1;
        facture.lineNum(factureTrans.LineNum);

        factureTrans.RefCommReportTrans = refCommReportTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrans</Name>
				<Source><![CDATA[
    protected void insertTrans()
    {
        FactureTrans_RU tmpTrans;

        if (factureTrans.isTmp())
        {
            tmpTrans.setTmp();
            tmpTrans.setTmpData(factureTrans);
        }

        select firstonly vatValue from tmpTrans
            where tmpTrans.FactureId        == factureTrans.FactureId               &&
                  tmpTrans.Module           == factureTrans.Module                  &&
                  tmpTrans.vatType          == factureTrans.vatType                 &&
                  tmpTrans.vatValue         != factureTrans.vatValue;

        if (tmpTrans)
            throw error(strfmt("@GLS107212",
                               tmpTrans.vatValue,
                               factureTrans.vatValue,
                               factureTrans.vatType));

        factureTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        ;
        facture     = _facture;
        qty         = _qty;
        factureJour = facture.getFactureJour();
        recalcTaxes = _recalcTaxes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefCommReportTrans</Name>
				<Source><![CDATA[
    public RefRecId parmRefCommReportTrans(RefRecId _refCommReportTrans = refCommReportTrans)
    {
        refCommReportTrans = _refCommReportTrans;
        return refCommReportTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets class' parameters.
    /// </summary>
    /// <param name="_recId">
    /// The record Id.
    /// </param>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_recalcTaxes">
    /// Need recalc taxes or not.
    /// </param>
    public void setParameters(RecId _recId,
                              Qty   _qty,
                              NoYes _recalcTaxes)
    {
        qty         = _qty;
        factureJour = facture.getFactureJour();
        recalcTaxes = _recalcTaxes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureTransCreate_RU construct(FactureJourCreate_RU _facture,
                                                  tableId              _tableId,
                                                  RecId                _recId,
                                                  FactureLineType_RU   _lineType,
                                                  Qty                  _qty,
                                                  NoYes                _recalcTaxes)
    {
        FactureTransCreate_RU   ret;

        switch (_tableId)
        {
            case tablenum(CustInvoiceTrans)     :
                ret = new FactureTransCreateCust_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(VendInvoiceTrans)     :
                ret = new FactureTransCreateVend_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(MarkupTrans)          :
                ret = new FactureTransCreateMarkup_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(EmplAdvLine_RU)       :
                ret = new FactureTransCreateEmpl_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(TaxTrans)             :
                switch (_lineType)
                {
                    case FactureLineType_RU::AmountDifference :
                        ret = new FactureTransCreateAmountDiff_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;

                    case FactureLineType_RU::ExchAdj :
                        ret = new FactureTransCreateExchAdj_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;

                    case FactureLineType_RU::AdvanceAdjustment :
                        ret = new FactureTransCreateAdvAdj_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;

                    case FactureLineType_RU::VATAdjustment     :
                        ret = new FactureTransCreateVATAdj_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;
                }
                break;
            case tablenum(LedgerJournalTrans)   :
                ret = FactureTransCreateTaxCorrection_RU::construct(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(CustInvoiceJour)      :
                switch (_lineType)
                {
                    case FactureLineType_RU::InvoiceRoundOff :
                        ret = new FactureTransCreateRoundOff_Cust_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;
                    case FactureLineType_RU::InvoiceEndDisc  :
                        ret = new FactureTransCreateEndDisc_Cust_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;
                }
                break;
            case tablenum(VendInvoiceJour)      :
                switch (_lineType)
                {
                    case FactureLineType_RU::InvoiceRoundOff :
                        ret = new FactureTransCreateRoundOff_Vend_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;
                    case FactureLineType_RU::InvoiceEndDisc  :
                        ret = new FactureTransCreateEndDisc_Vend_RU(_facture, _recId, _qty, _recalcTaxes);
                        break;
                }
                break;
            case tablenum(FactureTrans_RU)      :
                ret = new FactureTransCreateFacture_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(CustomJournalTrans_RU) :
                ret = new FactureTransCreateCustom_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            case tablenum(CustomCorrectionTrans_RU) :
                ret = new FactureTransCreateCorrectionCustom_RU(_facture, _recId, _qty, _recalcTaxes);
                break;
            default                             :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>