<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDeclarationBase_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class LedgerRRGEDatasourceVATDeclarationBase_W extends LedgerRRGEDatasourceQueryComplex_W
{
    LedgerRRGEDatasourceVATDeclaration_W    vatDeclaration;
    int                                     periodType;
    Map                                     worksheetsMap;
    str                                     defWorksheetName;
    TransDate                               periodStart;
    TransDate                               periodEnd;
    boolean                                 worksheetDeleted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    public LedgerRRGEDatasourceField_W addField(
        int             _tableId,
        int             _fieldId,
        str             _fieldName,
        str             _description    = '',
        str             _cell           = '',
        SysAlignment    _alignment      = SysAlignment::AlignDefault,
        int             _length         = 0,
        str             _emptyChar      = '',
        int             _pointSignNum   = 0)
    {
        if (vatDeclaration)
        {
            vatDeclaration.addField(_tableId,
                                    _fieldId,
                                    _fieldName,
                                    _description,
                                    _cell,
                                    _alignment,
                                    _length,
                                    _emptyChar,
                                    _pointSignNum);
        }

        return super(_tableId,
                     _fieldId,
                     _fieldName,
                     _description,
                     _cell,
                     _alignment,
                     _length,
                     _emptyChar,
                     _pointSignNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTable</Name>
				<Source><![CDATA[
    public void addTable(int _tableId, str _tableName)
    {
        super(_tableId, _tableName);

        if (vatDeclaration)
        {
            vatDeclaration.addTable(_tableId, _tableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDynamicWorkdsheetInitialized</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkDynamicWorkdsheetInitialized(int _tableId)
    {
        if (!this.initialized(_tableId) && evaluator)
        {
            evaluator.deleteWorksheet(this.defaultWorksheet(_tableId));
            worksheetDeleted = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctFactureTaxAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxAmount correctFactureTaxAmount(FactureTrans_RU _factureTrans, TransDate _factureDate = dateNull())
    {
        FactureTrans_RU correctFactureTrans;
        FactureJour_RU  correctFactureJour;
        TaxAmount       res;

        while select TaxAmountMST from correctFactureTrans
            join TableId from correctFactureJour
            where correctFactureJour.SourceExportFactureId  == _factureTrans.FactureId          &&
                  correctFactureJour.Module                 == _factureTrans.Module             &&
                  (!_factureDate                                                                ||
                  correctFactureJour.FactureDate            <  _factureDate)                    &&
                  correctFactureTrans.FactureId             == correctFactureJour.FactureId     &&
                  correctFactureTrans.Module                == correctFactureJour.Module        &&
                  correctFactureTrans.InvoiceLineNum        == _factureTrans.InvoiceLineNum     &&
                  correctFactureTrans.InvoiceDate           == _factureTrans.InvoiceDate        &&
                  correctFactureTrans.InvoiceId             == _factureTrans.InvoiceId          &&
                  correctFactureTrans.SalesPurchId          == _factureTrans.SalesPurchId       &&
                  correctFactureTrans.NumberSequenceGroup   == _factureTrans.NumberSequenceGroup
        {
            res += correctFactureTrans.TaxAmountMST;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureVATAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxAmount factureVATAmount(RestoredVATLogTransOper_RU _logTransOper, RestoredVATLogTransOperLink_RU _link)
    {
        TaxAmount taxAmount;

        if (_logTransOper.QtySettled)
        {
            taxAmount = _logTransOper.TaxAmount;
            if (_logTransOper.QtySettled != _link.SettledQty)
            {
                taxAmount = taxAmount / _logTransOper.QtySettled * _link.SettledQty;
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryMultiLine</Name>
				<Source><![CDATA[
    public boolean isQueryMultiLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VATOperationCode_RU operationCode(TaxCode _taxCode)
    {
        if (vatDeclaration)
        {
            return vatDeclaration.operationCode(_taxCode);
        }

        return TaxTable::find(_taxCode).vatOperationCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int pageCount(int _tableId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDatasourceVATDeclaration_W parmVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration = vatDeclaration)
    {
        vatDeclaration = _vatDeclaration;

        return vatDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int periodNum(TransDate _transDate)
    {
        if (periodType == 1)
        {
            return mthOfYr(_transDate);
        }

        return 20 + date2Qtr(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(_tableId);

        if (vatDeclaration)
        {
            periodStart = vatDeclaration.periodStart();
            periodEnd   = vatDeclaration.periodEnd();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoredVATAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxAmount restoredVATAmount(FactureTrans_RU _factureTrans)
    {
        RestoredVATSalesTaxTrans_RU restoredVATSalesTaxTrans;
        RestoredVATLogTable_RU      logTable;

        select sum(TaxStandardDirect), sum(TaxReducedDirect), sum(TaxStandardIndirect), sum(TaxReducedIndirect) from restoredVATSalesTaxTrans
            join TableId from logTable
            where restoredVATSalesTaxTrans.FactureId        == _factureTrans.FactureId              &&
                  restoredVATSalesTaxTrans.FactureModule    == _factureTrans.Module                 &&
                  restoredVATSalesTaxTrans.InventTransId    == _factureTrans.InventTransId          &&
                  restoredVATSalesTaxTrans.TransDate        <= periodEnd                            &&
                  logTable.TransDate                        == restoredVATSalesTaxTrans.TransDate   &&
                  logTable.Approved;

        return restoredVATSalesTaxTrans.TaxStandardDirect + restoredVATSalesTaxTrans.TaxReducedDirect + restoredVATSalesTaxTrans.TaxStandardIndirect + restoredVATSalesTaxTrans.TaxReducedIndirect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNamesInLookup</Name>
				<Source><![CDATA[
    public boolean showNamesInLookup()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worksheetName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str worksheetName(int _sectionNum, int _tableNum)
    {
        str worksheetName;

        if (!worksheetsMap)
        {
            worksheetsMap = new Map(Types::Integer, Types::String);
        }

        if (worksheetsMap.exists(_sectionNum))
        {
            worksheetName = worksheetsMap.lookup(_sectionNum);
        }
        else
        {
            if (_sectionNum > 1 && evaluator && evaluator.allowUpdateKeyCode())
            {
                worksheetName = evaluator.newWorksheetName(this.defaultWorksheet(_tableNum));
            }
            else
            {
                worksheetName = this.defaultWorksheet(_tableNum);
            }

            worksheetsMap.insert(_sectionNum, worksheetName);
        }

        return worksheetName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>