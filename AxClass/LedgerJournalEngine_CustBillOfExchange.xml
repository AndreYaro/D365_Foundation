<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_CustBillOfExchange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_CustBillOfExchange</c> class supports bill of exchange journals.
/// </summary>
/// <remarks>
/// This class extends the <see cref="T:LedgerJournalEngine" /> class.
/// </remarks>
public class LedgerJournalEngine_CustBillOfExchange extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        Tax1099BoxDetail _tax1099Detail = null,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null)
    {
        DebCredProposal debCredProposal = super(
            _ledgerJournalTrans,
            _ledgerJournalTrans_Project,
            _ledgerJournalTrans_Asset,
            _tax1099Detail,
            _ledgerJournalTrans_RAsset,
            _ledgerJournalTrans_RDeferrals);

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            debCredProposal = DebCredProposal::Credit;
        }

        return debCredProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustOffsetAccount</Name>
				<Source><![CDATA[
    protected void initCustOffsetAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    protected void initFromCustTable(LedgerJournalTrans ledgerJournalTrans)
    {
        ledgerJournalTrans.Due = ledgerJournalTrans.TransDate;
        ledgerJournalTrans.CurrencyCode = custTable.Currency ? custTable.Currency : ledgerJournalTrans.CurrencyCode;

        // <GEEU>
        ledgerJournalTrans.modifyVatDueDate_W();
        // </GEEU>

        this.initCustPostingProfile(ledgerJournalTrans);

        ledgerJournalTrans.CustVendBankAccountId = custTable.BankAccount;
        ledgerJournalTrans.PaymMode = custTable.PaymMode;
        ledgerJournalTrans.PaymSpec = custTable.PaymSpec;
        ledgerJournalTrans.BankTransType = CustPaymModeTable::find(custTable.PaymMode).BankTransType;

        this.initCustOffsetAccount(ledgerJournalTrans);

        if (ledgerJournalTable.JournalType == LedgerJournalType::CustBillOfExchangeProtest
            && ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
        {
            ledgerJournalTrans.SettleVoucher = SettlementType::None;
        }
        else
        {
            ledgerJournalTrans.SettleVoucher = CustParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans);

        this.initOffsetFromLedgerJournalTable(_ledgerJournalTrans);

        _ledgerJournalTrans.BankAccountId = ledgerJournalTable.BankAccountId;
        _ledgerJournalTrans.BankRemittanceType = ledgerJournalTable.BankRemittanceType;
        _ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;

        if (ledgerJournalTable.JournalType == LedgerJournalType::CustBillOfExchangeProtest
            && ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
        {
            _ledgerJournalTrans.SettleVoucher = SettlementType::None;
        }
        else
        {
            _ledgerJournalTrans.SettleVoucher = CustParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        }

        this.bankRemittanceTypeModified(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    public boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModeModified</Name>
				<Source><![CDATA[
    public void paymentModeModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.paymModeModified();

        if (CustBillOfExchangeFinTagFlight::instance().isEnabled() && _ledgerJournalTrans.OffsetLedgerDimension)
        {
            this.performFinTagDefaulting(_ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
        }

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModified</Name>
				<Source><![CDATA[
    public void paymentModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTrans.parmLedgerDimension())
        {
            if (ledgerJournalCashDiscService)
            {
                ledgerJournalCashDiscService.setCashDiscParameters(
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.CashDiscCode,
                    ledgerJournalTrans.Invoice,
                    ledgerJournalTrans.AccountType);
            }

            if (ledgerJournalTrans.SettleVoucher == SettlementType::None)
            {
                ledgerJournalTrans.Due = ledgerJournalTrans.DocumentDate ? ledgerJournalTrans.DocumentDate : ledgerJournalTrans.TransDate;
                if (ledgerJournalTrans.Invoice)
                {
                    ledgerJournalTrans.Due = PaymTerm::find(ledgerJournalTrans.Payment).due(ledgerJournalTrans.Due, this.paymDayId(ledgerJournalTrans));
                }

                // <GEEU>
                ledgerJournalTrans.modifyVatDueDate_W();
                // </GEEU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectSettledNegInstTrans</Name>
				<Source><![CDATA[
    public void selectSettledNegInstTrans(LedgerJournalTrans ledgerJournalTrans)
    {
        SpecTrans specTrans;
        CustSettlement custSettlement;
        CustTrans custTrans;

        DueDate dueDate;
        CustPaymMode paymMode;
        CustPaymSpec paymSpec;

        boolean warningIssuedDueDate  = false;

        super(ledgerJournalTrans);

        while select crossCompany SpecCompany, SpecRecId, SpecTableId, RefCompany, RefTableId, RefRecId from specTrans
            where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecTableId == ledgerJournalTrans.TableId
            join DataAreaId, TableId, RecId, TransRecId, AccountNum from custSettlement
                where custSettlement.DataAreaId == specTrans.RefCompany
                    && custSettlement.TableId == specTrans.RefTableId
                    && custSettlement.RecId == specTrans.RefRecId
            join RecId, AccountNum, DueDate, PaymMode, PaymSpec from custTrans
                where custTrans.RecId == custSettlement.TransRecId
                    && custTrans.AccountNum == custSettlement.AccountNum
        {
            if (dueDate && dueDate != custTrans.DueDate && !warningIssuedDueDate)
            {
                warningIssuedDueDate = !checkFailed("@SYS73746");
            }

            if (paymMode && paymMode != custTrans.PaymMode
                || paymSpec && paymSpec != custTrans.PaymSpec)
            {
                SpecTransManager::constructServer(ledgerJournalTrans, false).deleteAll();

                throw error("@SYS73747");
            }

            dueDate = max(dueDate, custTrans.DueDate);
            paymMode = custTrans.PaymMode;
            paymSpec = custTrans.PaymSpec;
        }

        ledgerJournalTrans.Due = dueDate;
        ledgerJournalTrans.PaymMode = paymMode;
        ledgerJournalTrans.PaymSpec = paymSpec;

        // <GEEU>
        ledgerJournalTrans.modifyVatDueDate_W();
        // </GEEU>

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    public void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        DueDate dueDate;
        CustPaymMode paymMode;
        CustPaymSpec paymSpec;
        PostingProfile postingProfile;
        BankThirdPartyAccountId thirdPartyBankAccountId;
        BankRemittanceType bankRemittanceType;
        CompanyBankAccountId companyBankAccountId;
        boolean warningIssuedDueDate  = false;
        boolean crossCompanySettlement;
        DocumentNum documentNum;

        super(_ledgerJournalTrans);

        while select crossCompany SpecCompany, SpecRecId, SpecTableId, RefCompany, RefTableId, RefRecId from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
                && specTrans.SpecRecId == _ledgerJournalTrans.RecId
                && specTrans.SpecTableId == _ledgerJournalTrans.TableId
            join DataAreaId, TableId, RecId, DueDate from custTransOpen
                where custTransOpen.DataAreaId == specTrans.RefCompany
                    && custTransOpen.TableId == specTrans.RefTableId
                    && custTransOpen.RecId == specTrans.RefRecId
                join RecId, AccountNum, BillOfExchangeID, BillOfExchangeSeqNum, BillOfExchangeStatus, PaymMode, PaymSpec,
                    PostingProfile, ThirdPartyBankAccountId, DocumentNum from custTrans
                    where custTrans.RecId == custTransOpen.RefRecId
                        && custTrans.AccountNum == custTransOpen.AccountNum
        {
            if (_ledgerJournalTrans.Company != custTrans.company())
            {
                crossCompanySettlement = true;
            }

            if (dueDate && dueDate != custTransOpen.DueDate && !warningIssuedDueDate)
            {
                warningIssuedDueDate = !checkFailed("@SYS73746");
            }

            select firstonly BillOfExchangeId, SeqNum, Status, BankRemittanceType, RemittedToBankAccountId from custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID
                    && custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum
                    && custBillOfExchangeTrans.Status == custTrans.BillOfExchangeStatus;

            if ((paymMode && paymMode != custTrans.PaymMode)
                || (paymSpec && paymSpec != custTrans.PaymSpec)
                || (postingProfile && postingProfile != custTrans.PostingProfile)
                || (bankRemittanceType && bankRemittanceType != custBillOfExchangeTrans.BankRemittanceType)
                || (companyBankAccountId && companyBankAccountId != custBillOfExchangeTrans.RemittedToBankAccountId)
                || (thirdPartyBankAccountId && thirdPartyBankAccountId != custTrans.ThirdPartyBankAccountId))
            {
                _ledgerJournalTrans.amountCur2DebCred(0);
                _ledgerJournalTrans.update();

                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.refresh();
                }

                SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

                throw error("@SYS73747");
            }

            dueDate = max(dueDate, custTransOpen.DueDate);
            paymMode = custTrans.PaymMode;
            paymSpec = custTrans.PaymSpec;
            postingProfile = custTrans.PostingProfile;
            thirdPartyBankAccountId = custTrans.ThirdPartyBankAccountId;
            bankRemittanceType = custBillOfExchangeTrans.BankRemittanceType;
            companyBankAccountId = custBillOfExchangeTrans.RemittedToBankAccountId;
            documentNum = custTrans.DocumentNum;
        }

        if (dueDate)
        {
            _ledgerJournalTrans.Due = dueDate;

            // <GEEU>
            _ledgerJournalTrans.modifyVatDueDate_W();
            // </GEEU>
        }

        if (!crossCompanySettlement)
        {
            // Only update the method of payment and posting profile if single company
            if (paymMode)
            {
                _ledgerJournalTrans.PaymMode = paymMode;

                if (paymSpec)
                {
                    _ledgerJournalTrans.PaymSpec = paymSpec;
                }
                else
                {
                    _ledgerJournalTrans.PaymModeMap::modifiedPaymMode();
                }
            }

            if (postingProfile)
            {
                _ledgerJournalTrans.PostingProfile = postingProfile;
            }
        }

        if (ledgerJournalTable.JournalType != LedgerJournalType::CustBillOfExchangeRedraw)
        {
            if (ledgerJournalTable.JournalType != LedgerJournalType::CustBillOfExchangeProtest)
            {
                if (bankRemittanceType)
                {
                    _ledgerJournalTrans.BankRemittanceType = bankRemittanceType;
                }
            }

            if (ledgerJournalTable.JournalType != LedgerJournalType::CustPaymRemittance)
            {
                if (companyBankAccountId)
                {
                    _ledgerJournalTrans.BankAccountId = companyBankAccountId;
                }
            }

            if (ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance && documentNum)
            {
                _ledgerJournalTrans.DocumentNum = documentNum;
            }
        }

        if (thirdPartyBankAccountId && !crossCompanySettlement)
        {
            _ledgerJournalTrans.CustVendBankAccountId = thirdPartyBankAccountId;
        }

        _ledgerJournalTrans.TransactionType = LedgerTransType::Payment;

        this.initCustOffsetAccount(_ledgerJournalTrans);

        _ledgerJournalTrans.write();

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentFee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates payment fees and calls research on the data source of the payment fee line data source.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <param name="_custVendPaymJournalFee">
    ///    A <c>CustVendPaymJournalFee</c> record buffer.
    /// </param>
    public void updatePaymentFee(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendPaymJournalFee _custVendPaymJournalFee)
    {
        if (!_ledgerJournalTrans.amount())
        {
            return;
        }

        this.dataSourceWrite(_ledgerJournalTrans);

        this.calcPaymentFee(_ledgerJournalTrans);

        FormDataUtil::getFormDataSource(_custVendPaymJournalFee).research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerJournalEngine_CustBillOfExchange construct(
        FormRun _formRun,
        LedgerJournalType _ledgerJournalType)
    {
        LedgerJournalEngine_CustBillOfExchange  ledgerJournalEngine;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::CustBillOfExchangeDraw:
                ledgerJournalEngine = new LedgerJournalEngine_CustBillDraw(_formRun);
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                ledgerJournalEngine = new LedgerJournalEngine_CustBillProtest(_formRun);
                break;

            case LedgerJournalType::CustBillOfExchangeRedraw:
                ledgerJournalEngine = new LedgerJournalEngine_CustBillRedraw(_formRun);
                break;

            case LedgerJournalType::CustPaymRemittance:
                ledgerJournalEngine = new LedgerJournalEngine_CustRemittance(_formRun);
                break;

            case LedgerJournalType::CustBillOfExchangeSettle:
                ledgerJournalEngine = new LedgerJournalEngine_CustBillSettle(_formRun);
                break;

            default:
                throw(error(strfmt("@SYS19306", funcname())));
        }

        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>