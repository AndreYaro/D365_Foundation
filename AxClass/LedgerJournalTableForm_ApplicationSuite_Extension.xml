<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTableForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class complements <c>LedgerJournalTable</c> form logic in order to support GL simulations.
/// </summary>
public static class LedgerJournalTableForm_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PostSimulation_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes <c>LedgerJournalTable</c> datasource.
    /// </summary>
    /// <param name = "_sender"><c>LedgerJournalTable</c> datasource.</param>
    /// <param name = "_e">Event arguments.</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, PostSimulation_IT), FormControlEventType::Clicked)]
    public static void PostSimulation_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormDataSource ledgerJournalTable_ds = _sender.formRun().dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable));

            ledgerJournalTable_ds.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SimulationJournalReOpen_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes <c>LedgerJournalTable</c> datasource.
    /// </summary>
    /// <param name = "_sender"><c>LedgerJournalTable</c> datasource.</param>
    /// <param name = "_e">Event arguments.</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SimulationJournalReOpen_IT), FormControlEventType::Clicked)]
    public static void SimulationJournalReOpen_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormDataSource ledgerJournalTable_ds = _sender.formRun().dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable));

            ledgerJournalTable_ds.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostJournal_OnGotFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables posting buttons according to simulations.
    /// </summary>
    /// <param name = "_sender"><c>LedgerJournalTable</c> datasource.</param>
    /// <param name = "_e">Event arguments.</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, PostJournal), FormControlEventType::GotFocus)]
    public static void PostJournal_OnGotFocus(FormControl _sender, FormControlEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            LedgerJournalTableForm_ApplicationSuite_Extension::allowPostButtons(_sender.formRun());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPostButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables posting buttons according to simulations.
    /// </summary>
    /// <param name = "_formRun"><c>FormRun</c> object.</param>
    private static void allowPostButtons(FormRun _formRun)
    {
        LedgerJournalTable ledgerJournalTable = _formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)).cursor();

        if (ledgerJournalTable.JournalType == LedgerJournalType::Daily && ledgerJournalTable.IsSimulation_IT())
        {
            FormControl simulationJournalReOpen = _formRun.control(_formRun.controlId(formControlStr(LedgerJournalTable, SimulationJournalReOpen_IT)));
            FormControl postSimulation = _formRun.control(_formRun.controlId(formControlStr(LedgerJournalTable, postSimulation_IT)));
            FormControl post = _formRun.control(_formRun.controlId(formControlStr(LedgerJournalTable, Post)));
            FormControl ledgerJournalPostTransfer = _formRun.control(_formRun.controlId(formControlStr(LedgerJournalTable, LedgerJournalPostTransfer)));

            simulationJournalReOpen.enabled(ledgerJournalTable.SimulationPosted_IT);
            postSimulation.enabled(!ledgerJournalTable.SimulationPosted_IT);
            Post.enabled(ledgerJournalTable.SimulationPosted_IT);
            LedgerJournalPostTransfer.enabled(ledgerJournalTable.SimulationPosted_IT);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_Post_enableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables simulation buttons.
    /// </summary>
    /// <param name = "_args">Event arguments.</param>
    [PostHandlerFor(formStr(LedgerJournalTable), formMethodStr(LedgerJournalTable, enableButtonsActive))]
    public static void LedgerJournalTable_Post_enableButtonsActive(XppPrePostArgs _args)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormRun formRun = _args.getThis() as FormRun;

            if (formRun)
            {
                FormDataSource ledgerJournalTable_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable));
                LedgerJournalTable ledgerJournalTable = ledgerJournalTable_ds.cursor();
                LedgerJournalName ledgerJournalName = ledgerJournalTable.ledgerJournalName();

                if (ledgerJournalName.JournalType == LedgerJournalType::Daily && ledgerJournalTable.IsSimulation_IT())
                {
                    FormGroupControl simulationGroup = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, Simulation_IT)));
                    FormControl simulationJournalReOpen = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, SimulationJournalReOpen_IT)));
                    FormControl postSimulation = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, PostSimulation_IT)));
                    Object post = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, Post)));
                    FormControl ledgerJournalPostTransfer = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, LedgerJournalPostTransfer)));
                    Object journalLines = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, JournalLines)));
                    FormControl checkJournal = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, CheckJournal)));
                    FormControl postJournal = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, PostJournal)));
                    FormControl simulationSeparator = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, SimulationSeparator_IT)));
                    FormCheckBoxControl ledgerJournalTable_checkRequired = formRun.control(formRun.controlId(formControlStr(LedgerJournalTable, LedgerJournalTable_checkRequired_IT)));

                    journalLines.visible(true);
                    journalLines.menuItemName(menuItemDisplayStr(LedgerJournalTransSimulation_IT));

                    checkJournal.visible(true);
                    checkJournal.enabled(!ledgerJournalTable.Posted);

                    postJournal.visible(true);
                    postJournal.enabled(!ledgerJournalTable.Posted);

                    simulationJournalReOpen.visible(true);
                    simulationJournalReOpen.enabled(ledgerJournalTable.SimulationPosted_IT && !ledgerJournalTable.Posted);

                    postSimulation.visible(true);
                    postSimulation.enabled(!ledgerJournalTable.SimulationPosted_IT && !ledgerJournalTable.Posted);

                    post.enabled(ledgerJournalTable.SimulationPosted_IT && !ledgerJournalTable.Posted);
                    post.visible(true);
                    post.menuItemName(menuitemActionStr(LedgerJourPostLJTransDaily));

                    simulationGroup.visible(true);
                    ledgerJournalTable_checkRequired.visible(true);
                    LedgerJournalPostTransfer.visible(false);
                    simulationSeparator.visible(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows reopen control.
    /// </summary>
    /// <param name = "_sender">Event arguments.</param>
    /// <param name = "_e"><c>XFormRun</c> object.</param>
    [FormEventHandler(formStr(LedgerJournalTable), FormEventType::Initialized)]
    public static void LedgerJournalTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormControl simulationJournalReOpen = _sender.control(_sender.controlId(formControlStr(LedgerJournalTable, LedgerJournalTable_SimulationPosted_IT)));
            FormDataSource ledgerJournalTable_ds = _sender.dataSource(formDataSourceStr(LedgerJournalTable,LedgerJournalTable));
            LedgerJournalTable ledgerJournalTable = ledgerJournalTable_ds.cursor();

            simulationJournalReOpen.visible(_sender.args().parmEnum() == LedgerJournalType::Daily && ledgerJournalTable.IsSimulation_IT());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTableDS_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal name lookup window.
    /// </summary>
    /// <param name="_sender"><c>FormDataSource</c> object.</param>
    /// <param name="_e">Event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTable, LedgerJournalTable), FormDataSourceEventType::Initialized)]
    public static void LedgerJournalTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            query query = _sender.query();

            if (query.name() == queryStr(SimulationJournals_IT))
            {
                LedgerJournalTableFormExtensionOverrides_IT overrides = LedgerJournalTableFormExtensionOverrides_IT::construct();

                _sender.object(fieldNum(LedgerJournalTable, JournalName)).
                    registerOverrideMethod(
                        methodStr(FormDataObject, lookup),
                        methodStr(LedgerJournalTableFormExtensionOverrides_IT, JournalName_OnLookup),
                        overrides);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>