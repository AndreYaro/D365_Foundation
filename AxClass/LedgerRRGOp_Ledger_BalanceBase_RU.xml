<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Ledger_BalanceBase_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base calculation logic for the Dimension set operation type of the Russian financial reports generator.
/// </summary>
public abstract class LedgerRRGOp_Ledger_BalanceBase_RU extends LedgerRRGOp_Ledger_RU
{
    public FieldId debitAmountFieldId;
    public FieldId creditAmountFieldId;
    public FieldId amountFieldId;
    public FieldId postingLayerField;
    public TransDate fromDate;
    public TransDate toDate;
    public DimensionHierarchyId dimensionHierarchy;
    public Map dimensionMap;
    public Query queryDelta;
    public QueryBuildRange qbrAccountingDate;
    public QueryBuildRange qbrReportingDate;
    public QueryBuildRange qbrFocusLedgerDimension;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOperationTaxRange</Name>
				<Source><![CDATA[
    protected abstract void addOperationTaxRange()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    protected void addValue(Map _map, Int64 _key, container _value)
    {
        Amount activeBalance;
        Amount passiveBalance;
    
        Amount activeBalanceValue;
        Amount passiveBalanceValue;
    
        [activeBalanceValue, passiveBalanceValue] = _value;
        if (_map.exists(_key))
        {
            [activeBalance, passiveBalance] = _map.lookup(_key);
        }
    
        activeBalance += activeBalanceValue;
        passiveBalance += passiveBalanceValue;
    
        _map.insert(_key, [activeBalance, passiveBalance]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AmountMST calc()
    {
        AmountMST ret = super();
    
        if (parms.operation().LedgerOperation == LedgerRRGOperationType_RU::ActiveBalance ||
            parms.operation().LedgerOperation == LedgerRRGOperationType_RU::PassiveBalance)
        {
            Amount activeBalance;
            Amount passiveBalance;

            [activeBalance, passiveBalance] = this.calcTotal(dimensionMap);
    
            ret = (parms.operation().LedgerOperation == LedgerRRGOperationType_RU::ActiveBalance ? activeBalance : passiveBalance);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotal</Name>
				<Source><![CDATA[
    protected container calcTotal(Map _map)
    {
        MapEnumerator me = _map.getEnumerator();
        Amount activeBalanceTotal;
        Amount passiveBalanceTotal;
    
        while (me.moveNext())
        {
            Amount activeBalance;
            Amount passiveBalance;

            [activeBalance, passiveBalance] = me.currentValue();
    
            Amount balance = activeBalance + passiveBalance;
    
            if (balance > 0)
            {
                activeBalanceTotal += balance;
            }
            else
            {
                passiveBalanceTotal += -balance;
            }
        }
    
        return [activeBalanceTotal, passiveBalanceTotal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        super(_bufferEval);
    
        dimensionMap = new Map(Types::Int64, Types::Container);  

        switch (parms.operation().LedgerOperation)
        {
            case LedgerRRGOperationType_RU::BalanceCredit:
                if (!FeatureStateProvider::isFeatureEnabled(DebitCreditBalanceInFinancialReportFeature::instance()))
                {
                    crediting = UnknownNoYes::Yes;
                    invertResult = true;
                }
                break;
            case LedgerRRGOperationType_RU::TurnoverCredit:
                crediting = UnknownNoYes::Yes;
                invertResult = true;
                break;

            case LedgerRRGOperationType_RU::BalanceDebit:
                if (!FeatureStateProvider::isFeatureEnabled(DebitCreditBalanceInFinancialReportFeature::instance()))
                {
                    crediting = UnknownNoYes::No;
                }
                break;
            case LedgerRRGOperationType_RU::TurnoverDebit:
                crediting = UnknownNoYes::No;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        queryBuildDataSource.addSelectionField(debitAmountFieldId,  SelectionField::Sum);
        queryBuildDataSource.addSelectionField(creditAmountFieldId, SelectionField::Sum);
    
        if (parms.calcMethod() == ReportCalcMethod_RU::ReportingDate ||
            parms.operation().LedgerOperation == LedgerRRGOperationType_RU::ActiveBalance ||
            parms.operation().LedgerOperation == LedgerRRGOperationType_RU::PassiveBalance)
        {
            queryBuildDataSource.addSortField(this.dimensionFieldId());
        }
    
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
    
        this.addDimensionRange();
        this.addOperationTaxRange();
    
        this.addRange(this.balanceLedgerFieldId(), SysQuery::value(Ledger::current()));
        this.addRange(this.balanceFiscalPeriodTypeFieldId(), SysQuery::value(FiscalPeriodType::Operating));
    
        dimensionHierarchy = parms.operation().getDimensionSet();        
    
        switch(parms.operation().LedgerOperation)
        {
            case LedgerRRGOperationType_RU::Balance:
            case LedgerRRGOperationType_RU::BalanceCredit:
            case LedgerRRGOperationType_RU::BalanceDebit:
            case LedgerRRGOperationType_RU::ActiveBalance:
            case LedgerRRGOperationType_RU::PassiveBalance:
                fromDate = dateNull();
                toDate = parms.transDate();
                break;
            case LedgerRRGOperationType_RU::Turnover:
            case LedgerRRGOperationType_RU::TurnoverCredit:
            case LedgerRRGOperationType_RU::TurnoverDebit:
                fromDate = parms.fromDate();
                toDate = parms.toDate();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        this.addRange(this.balanceAccountingDateFieldId(), queryRange(fromDate, toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrectDelta</Name>
				<Source><![CDATA[
    protected container calcCorrectDelta(LedgerDimensionAccount _ledgerDimension)
    {
        QueryBuildDataSource qbds;
        QueryBuildDataSource qbdsAccountEntry;
        QueryBuildDataSource qbdsVoucherReportDate;
        QueryRun queryRun;
        AmountMST debitAmount;
        AmountMST creditAmount;
        GeneralJournalAccountEntry accountEntry;
    
        if (!queryDelta)
        {
            queryDelta = new Query();
            qbdsAccountEntry = queryDelta.addDataSource(tableNum(GeneralJournalAccountEntry));
    
            qbdsAccountEntry.addSelectionField(amountFieldId, SelectionField::Sum);
            qbdsAccountEntry.addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));
            qbdsAccountEntry.orderMode(OrderMode::GroupBy);
    
            qbds = qbdsAccountEntry.addDataSource(this.ledgerDimensionReferenceTableId());
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), this.ledgerDimensionAccountEntryReferenceFieldId());
    
            qbds.addRange(this.ledgerDimensionReferenceDimensionHierarchyFieldId()).value(queryValue(dimensionHierarchy));
            qbrFocusLedgerDimension = qbds.addRange(this.ledgerDimensionReportingDimensionReferenceFieldId());
    
            qbds = qbdsAccountEntry.addDataSource(tableNum(GeneralJournalEntry));
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
            qbds.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
    
            if (parms.operationTaxFilter())
            {
                qbds.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(parms.operationTaxFilter());
            }
    
            qbrAccountingDate = qbds.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
    
            qbdsVoucherReportDate = qbds.addDataSource(tableNum(LedgerVoucherReportDate_RU));
            qbdsVoucherReportDate.joinMode(JoinMode::ExistsJoin);
            qbdsVoucherReportDate.fetchMode(QueryFetchMode::One2One);
            qbdsVoucherReportDate.addLink(fieldNum(GeneralJournalEntry, SubledgerVoucher), fieldNum(LedgerVoucherReportDate_RU, Voucher));
            qbdsVoucherReportDate.addLink(fieldNum(GeneralJournalEntry, AccountingDate), fieldNum(LedgerVoucherReportDate_RU, AccountingDate));
    
            qbrReportingDate = qbdsVoucherReportDate.addRange(fieldNum(LedgerVoucherReportDate_RU, ReportingDate));
    
            if (parms.reportOnDate())
            {
                qbdsVoucherReportDate.addRange(fieldNum(LedgerVoucherReportDate_RU, AccountingDate)).value(queryRange(dateNull(), parms.reportOnDate()));
            }
    
            qbds = qbds.addDataSource(tableNum(FiscalCalendarPeriod));
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
            qbds.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));
        }
    
        qbrFocusLedgerDimension.value(queryValue(_ledgerDimension));
    
        qbrReportingDate.value(queryRange(fromDate, toDate));
        qbrAccountingDate.value(queryRange(toDate + 1, maxDate()));
    
        queryRun = new queryRun(queryDelta);
        while (queryRun.next())
        {
            accountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
            if (accountEntry.IsCredit)
            {
                creditAmount += accountEntry.(amountFieldId);
            }
            else
            {
                debitAmount += accountEntry.(amountFieldId);
            }
        }
    
        if (fromDate)
        {
            qbrReportingDate.value(queryRange(dateNull(), fromDate - 1));
            qbrAccountingDate.value(queryRange(fromDate, toDate));
    
            queryRun = new queryRun(queryDelta);
            while (queryRun.next())
            {
                accountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
                if (accountEntry.IsCredit)
                {
                    creditAmount -= accountEntry.(amountFieldId);
                }
                else
                {
                    debitAmount -= accountEntry.(amountFieldId);
                }
            }
        }
    
        return [debitAmount, creditAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAmount</Name>
				<Source><![CDATA[
    protected AmountMST ledgerAmount(Common _record)
    {
        return _record.(debitAmountFieldId ? debitAmountFieldId : creditAmountFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAccountingDateFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId balanceAccountingDateFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>balancePostingLayerFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId balancePostingLayerFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceLedgerFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId balanceLedgerFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceFiscalPeriodTypeFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId balanceFiscalPeriodTypeFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReferenceTableId</Name>
				<Source><![CDATA[
    protected abstract TableId ledgerDimensionReferenceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionAccountEntryReferenceFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId ledgerDimensionAccountEntryReferenceFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReportingDimensionReferenceFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId ledgerDimensionReportingDimensionReferenceFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReferenceDimensionHierarchyFieldId</Name>
				<Source><![CDATA[
    protected abstract FieldId ledgerDimensionReferenceDimensionHierarchyFieldId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>