<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentLineType</c> class applies default values to the vendor document lines and used for validation.
/// </summary>
public class VendDocumentLineType extends VendDocumentLineTypeBase
{
    VendDocumentLineTypePhysical physicalStrategy;

    PurchLine purchLine;
    PurchTable purchTable;
    PurchParmUpdate purchParmUpdate;

    protected boolean isRUCountryRegionEnabled;
    private boolean isItemModified;

    // <GIN> <GEERU>
    #ISOCountryRegionCodes
    // </GEERU> </GIN>
    #VendInvoiceFaults

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areCWQtyFieldsSet</Name>
				<Source><![CDATA[
    private boolean areCWQtyFieldsSet()
    {
        return
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWReceiveNow), vendDocumentLineMap.TableId)) &&
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWRemainBefore), vendDocumentLineMap.TableId)) &&
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWRemainAfter), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>areInventQtyFieldsSet</Name>
				<Source><![CDATA[
    protected boolean areInventQtyFieldsSet()
    {
        return super() && vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainBeforeInvent), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>areDocumentQtyFieldsSet</Name>
				<Source><![CDATA[
    protected boolean areDocumentQtyFieldsSet()
    {
        return  super() && vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainBefore), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventQtys</Name>
				<Source><![CDATA[
    protected void setInventQtys(container _inventQtys)
    {
        super(_inventQtys);

        vendDocumentLineMap.RemainBeforeInvent = conPeek(_inventQtys, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchQtys</Name>
				<Source><![CDATA[
    protected void setPurchQtys(container _purchQtys)
    {
        super(_purchQtys);

        vendDocumentLineMap.RemainBefore = conPeek(_purchQtys, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineQty</Name>
				<Source><![CDATA[
    protected boolean checkLineQty()
    {
        boolean isCheckLine = true;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            isCheckLine = (vendDocumentLineMap.ReceiveNow != 0);
        }

        return isCheckLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsItemModified</Name>
				<Source><![CDATA[
    internal boolean parmIsItemModified(boolean _isItemModified = isItemModified)
    {
        isItemModified = _isItemModified;
        return isItemModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultingAdditionalFields</Name>
				<Source><![CDATA[
    delegate void defaultingAdditionalFields(VendDocumentLineMap _vendDocumentLineMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for fields related to derived document types.
    /// </summary>
    protected void defaultAdditionalFields()
    {
        this.defaultingAdditionalFields(vendDocumentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAmountsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the defaults for purchase values for a line
    /// </summary>
    public void defaultAmountsForLine()
    {
        this.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, PurchMarkup), vendDocumentLineMap.TableId));
        this.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, MultiLnDisc), vendDocumentLineMap.TableId));
        this.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, MultiLnPercent), vendDocumentLineMap.TableId));
        this.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, LineDisc), vendDocumentLineMap.TableId));
        this.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, LinePercent), vendDocumentLineMap.TableId));
        this.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, PurchPrice), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCFOPTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default CFOP table reference
    /// </summary>
    protected void defaultCFOPTable_BR()
    {
        RefRecId cfopTableRecId;

        cfopTableRecId = this.determineDefaultCFOPTable_BR();
        vendDocumentLineMap.VendDocumentLineMap::parmCFOPTable_BR(cfopTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultChangedManually</Name>
				<Source><![CDATA[
    protected void defaultChangedManually()
    {
        NoYes changedManually;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, ChangedManually), vendDocumentLineMap.TableId)))
        {
            changedManually = this.determineDefaultChangedManually();
            vendDocumentLineMap.ChangedManually = changedManually;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrencyCode</Name>
				<Source><![CDATA[
    protected void defaultCurrencyCode()
    {
        VendCurrencyCode currencyCode;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, CurrencyCode), vendDocumentLineMap.TableId)))
        {
            currencyCode = this.determineDefaultCurrencyCode();
            vendDocumentLineMap.CurrencyCode = currencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCWQtys</Name>
				<Source><![CDATA[
    protected void defaultCWQtys(PdsCWInventQty _cwReceiveNow = naReal())
    {
        container cwQtys;

        if (!this.areCWQtyFieldsSet())
        {
            if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWReceiveNow), vendDocumentLineMap.TableId)))
            {
                cwQtys = this.physicalStrategy().determineDefaultCWQtys(_cwReceiveNow);
            }
            else
            {
                cwQtys = this.physicalStrategy().determineDefaultCWQtys(vendDocumentLineMap.PdsCWReceiveNow);
            }

            this.setCWQtys(cwQtys);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryLocation</Name>
				<Source><![CDATA[
    protected void defaultDeliveryLocation()
    {
        LogisticsLocationRecId deliveryLocation;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, DeliveryPostalAddress), vendDocumentLineMap.TableId)))
        {
            deliveryLocation = this.determineDefaultDeliveryLocation();
            vendDocumentLineMap.DeliveryPostalAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(deliveryLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryName</Name>
				<Source><![CDATA[
    protected void defaultDeliveryName()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, DeliveryName), vendDocumentLineMap.TableId)))
        {
            vendDocumentLineMap.DeliveryName = this.determineDefaultDeliveryName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDescription</Name>
				<Source><![CDATA[
    protected void defaultDescription()
    {
        InvoiceLineDescription description;

        if (ledgerJournalOperation == LedgerJournalOperation::Create || this.parmIsModifiedField())
        {
            if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, Description), vendDocumentLineMap.TableId)))
            {
                description = this.determineDefaultDescription();
                vendDocumentLineMap.Description = description;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInvoiceAccount</Name>
				<Source><![CDATA[
    protected void defaultInvoiceAccount()
    {
        VendAccount invoiceAccount;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, InvoiceAccount), vendDocumentLineMap.TableId)))
        {
            invoiceAccount = this.determineDefaultInvoiceAccount();
            vendDocumentLineMap.InvoiceAccount = invoiceAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventQtys</Name>
				<Source><![CDATA[
    protected void defaultInventQtys(InventQty _inventNow = naReal())
    {
        container inventQtys;

        if (!this.areInventQtyFieldsSet())
        {
            this.defaultOrigPurchId();
            this.defaultPurchQtys(); // default purch qtys first

            inventQtys = this.determineDefaultInventQtys(_inventNow);

            this.setInventQtys(inventQtys);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchQtys</Name>
				<Source><![CDATA[
    protected void defaultPurchQtys(PurchQty _receiveNow = naReal())
    {
        container purchQtys;

        if (!this.areDocumentQtyFieldsSet())
        {
            this.defaultOrigPurchId();

            purchQtys = this.determineDefaultPurchQtys(_receiveNow);

            this.setPurchQtys(purchQtys);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineDisc</Name>
				<Source><![CDATA[
    protected void defaultLineDisc()
    {
        PurchLineDisc lineDisc;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, LineDisc), vendDocumentLineMap.TableId)))
        {
            lineDisc = this.determineDefaultLineDisc();
            vendDocumentLineMap.LineDisc = lineDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineNum</Name>
				<Source><![CDATA[
    protected void defaultLineNum()
    {
        LineNum lineNum;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, LineNum), vendDocumentLineMap.TableId)))
        {
            lineNum = any2real(this.determineDefaultLineNum());
            vendDocumentLineMap.LineNum = lineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLinePercent</Name>
				<Source><![CDATA[
    protected void defaultLinePercent()
    {
        PurchLinePercent linePercent;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, LinePercent), vendDocumentLineMap.TableId)))
        {
            linePercent = this.determineDefaultLinePercent();
            vendDocumentLineMap.LinePercent = linePercent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMaximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default maximum retail price.
    /// </summary>
    protected void defaultMaximumRetailPrice_IN()
    {
        MaximumRetailPrice_IN maximumRetailPrice;

        maximumRetailPrice = this.determineMaximumRetailPrice_IN();
        vendDocumentLineMap.VendDocumentLineMap::parmMaximumRetailPrice_IN(maximumRetailPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMultiLnDisc</Name>
				<Source><![CDATA[
    protected void defaultMultiLnDisc()
    {
        PurchMultiLnDisc multiLnDisc;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, MultiLnDisc), vendDocumentLineMap.TableId)))
        {
            multiLnDisc = this.determineDefaultMultiLnDisc();
            vendDocumentLineMap.MultiLnDisc = multiLnDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMultiLnPercent</Name>
				<Source><![CDATA[
    protected void defaultMultiLnPercent()
    {
        PurchMultiLnPercent multiLnPercent;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, MultiLnPercent), vendDocumentLineMap.TableId)))
        {
            multiLnPercent = this.determineDefaultMultiLnPercent();
            vendDocumentLineMap.MultiLnPercent = multiLnPercent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrderAccount</Name>
				<Source><![CDATA[
    protected void defaultOrderAccount()
    {
        VendAccount orderAccount;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, OrderAccount), vendDocumentLineMap.TableId)))
        {
            orderAccount = this.determineDefaultOrderAccount();
            vendDocumentLineMap.OrderAccount = orderAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPDSCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the default advanced pricing calculation ID in the document line type.
    /// </summary>
    protected void defaultPDSCalculationId()
    {
        vendDocumentLineMap.initDefaultAdvancedPricingCalculationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWReceiveNow</Name>
				<Source><![CDATA[
    protected void defaultPdsCWReceiveNow()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWReceiveNow), vendDocumentLineMap.TableId)))
        {
            this.defaultCWQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWRemainAfter</Name>
				<Source><![CDATA[
    protected void defaultPdsCWRemainAfter()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWRemainAfter), vendDocumentLineMap.TableId)))
        {
            this.defaultCWQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWRemainBefore</Name>
				<Source><![CDATA[
    protected void defaultPdsCWRemainBefore()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PdsCWRemainBefore), vendDocumentLineMap.TableId)))
        {
            this.defaultCWQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceUnit</Name>
				<Source><![CDATA[
    protected void defaultPriceUnit()
    {
        PriceUnit priceUnit;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PriceUnit), vendDocumentLineMap.TableId)))
        {
            priceUnit = this.determineDefaultPriceUnit();
            vendDocumentLineMap.PriceUnit = priceUnit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProcurementCategory</Name>
				<Source><![CDATA[
    protected void defaultProcurementCategory()
    {
        PurchCategory procurementCategory;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, ProcurementCategory), vendDocumentLineMap.TableId)))
        {
            procurementCategory = this.determineDefaultProcurementCategory();
            vendDocumentLineMap.ProcurementCategory = procurementCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchMarkup</Name>
				<Source><![CDATA[
    protected void defaultPurchMarkup()
    {
        PurchMarkup purchMarkup;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PurchMarkup), vendDocumentLineMap.TableId)))
        {
            purchMarkup = this.determineDefaultPurchMarkup();
            vendDocumentLineMap.PurchMarkup = purchMarkup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchPrice</Name>
				<Source><![CDATA[
    protected void defaultPurchPrice()
    {
        PurchPrice purchPrice;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PurchPrice), vendDocumentLineMap.TableId)))
        {
            purchPrice = this.determineDefaultPurchPrice();
            vendDocumentLineMap.PurchPrice = purchPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemainBefore</Name>
				<Source><![CDATA[
    protected void defaultRemainBefore()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainBefore), vendDocumentLineMap.TableId)))
        {
            this.defaultPurchQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemainBeforeInvent</Name>
				<Source><![CDATA[
    protected void defaultRemainBeforeInvent()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainBeforeInvent), vendDocumentLineMap.TableId)))
        {
            this.defaultInventQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemainBeforeInventPhysical</Name>
				<Source><![CDATA[
    protected void defaultRemainBeforeInventPhysical()
    {
        TradeRemainBeforeInventPhysical remainBeforeInventPhysical;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainBeforeInventPhysical), vendDocumentLineMap.TableId)))
        {
            remainBeforeInventPhysical = this.determineDefaultRemainBeforeInventPhys();
            vendDocumentLineMap.RemainBeforeInventPhysical = remainBeforeInventPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuantities</Name>
				<Source><![CDATA[
    protected void defaultQuantities(PurchQty _receiveNow = naReal(), InventQty _inventNow = naReal(), PdsCWInventQty _cwReceiveNow = naReal())
    {
        super(_receiveNow, _inventNow, _cwReceiveNow);

        this.defaultCWQtys(_cwReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxGroup()
    {
        TaxGroup taxGroup;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, TaxGroup), vendDocumentLineMap.TableId)))
        {
            taxGroup = this.determineDefaultTaxGroup();
            vendDocumentLineMap.TaxGroup = taxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxItemGroup()
    {
        TaxItemGroup taxItemGroup;

        if (ledgerJournalOperation == LedgerJournalOperation::Create || this.parmIsModifiedField())
        {
            if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, TaxItemGroup), vendDocumentLineMap.TableId)))
            {
                taxItemGroup = this.determineDefaultTaxItemGroup();
                vendDocumentLineMap.TaxItemGroup = taxItemGroup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOverrideSalesTax</Name>
				<Source><![CDATA[
    protected void defaultOverrideSalesTax()
    {
        NoYes overrideSalesTax;

        if (SysDictField::isFieldMapped(
                tableStr(vendDocumentLineMap),
                tableId2Name(vendDocumentLineMap.TableId),
                fieldStr(vendDocumentLineMap, overrideSalesTax))
            && !vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, OverrideSalesTax), vendDocumentLineMap.TableId)))
        {
            overrideSalesTax = this.determineDefaultOverrideSalesTax();
            vendDocumentLineMap.OverrideSalesTax = overrideSalesTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxServiceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine default value for <c>TaxServiceCode_BR</c> field
    /// </summary>
    /// <remarks>
    /// Field in mapped in <c>VendDocumentLineMap</c> map object
    /// </remarks>
    protected void defaultTaxServiceCode_BR()
    {
        vendDocumentLineMap.VendDocumentLineMap::parmTaxServiceCode_BR(this.determineDefaultTaxServiceCode_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCFOPTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default reference for CFOP table
    /// </summary>
    /// <returns>
    /// Returns the <c>RecId</c> of <c>CFOPTable_BR</c> table
    /// </returns>
    /// <remarks>
    /// Default value always comes from <c>PurchLineTable</c>
    /// </remarks>
    protected RefRecId determineDefaultCFOPTable_BR()
    {
        return this.purchLine().cfopTable_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultChangedManually</Name>
				<Source><![CDATA[
    protected NoYes determineDefaultChangedManually()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected VendCurrencyCode determineDefaultCurrencyCode()
    {
        return this.purchLine().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryLocation</Name>
				<Source><![CDATA[
    protected LogisticsLocationRecId determineDefaultDeliveryLocation()
    {
        return this.purchLine().deliveryLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryName</Name>
				<Source><![CDATA[
    protected VendName determineDefaultDeliveryName()
    {
        return this.purchLine().DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDescription</Name>
				<Source><![CDATA[
    protected InvoiceLineDescription determineDefaultDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId determineDefaultInventDimId()
    {
        return this.purchLine().InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventQtys</Name>
				<Source><![CDATA[
    protected container determineDefaultInventQtys(InventQty _inventQty = naReal())
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, InventNow), vendDocumentLineMap.TableId)))
        {
            return this.physicalStrategy().determineDefaultInventQtys(_inventQty);
        }

        return  this.physicalStrategy().determineDefaultInventQtys(vendDocumentLineMap.InventNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInvoiceAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultInvoiceAccount()
    {
        return this.purchTable().InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLineDisc</Name>
				<Source><![CDATA[
    protected PurchLineDisc determineDefaultLineDisc()
    {
        return this.purchLine().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLineNum</Name>
				<Source><![CDATA[
    protected TradeLineNumber determineDefaultLineNum()
    {
         return this.purchLine().LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLinePercent</Name>
				<Source><![CDATA[
    protected PurchLinePercent determineDefaultLinePercent()
    {
        return this.purchLine().LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultMultiLnDisc</Name>
				<Source><![CDATA[
    protected PurchMultiLnDisc determineDefaultMultiLnDisc()
    {
        return this.purchLine().MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultMultiLnPercent</Name>
				<Source><![CDATA[
    protected PurchMultiLnPercent determineDefaultMultiLnPercent()
    {
        return this.purchLine().MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultOrderAccount()
    {
        return this.purchTable().OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderNumber</Name>
				<Source><![CDATA[
    protected Num determineDefaultOrderNumber()
    {
        return this.determineDefaultOrigPurchId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrigPurchId</Name>
				<Source><![CDATA[
    protected PurchIdOrig determineDefaultOrigPurchId()
    {
        return this.purchLine().PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPDSCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default advanced pricing calculation ID in the document line type.
    /// </summary>
    /// <returns>
    /// The default advanced pricing calculation ID to use.
    /// </returns>
    /// <remarks>
    /// The default calculation ID comes from the referenced purchase order line.
    /// </remarks>
    protected PDSCalculationId determineDefaultPDSCalculationId()
    {
        return this.purchLine().PDSCalculationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPriceUnit</Name>
				<Source><![CDATA[
    protected PriceUnit determineDefaultPriceUnit()
    {
        return this.purchLine().PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultProcurementCategory</Name>
				<Source><![CDATA[
    protected PurchCategory determineDefaultProcurementCategory()
    {
        return this.purchLine().ProcurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchaseLineLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>PurchaseLineLineNumber</c> field.
    /// </summary>
    /// <returns>
    /// The default value for the <c>PurchaseLineLineNumber</c> field.
    /// </returns>
    protected TradeLineNumber determineDefaultPurchaseLineLineNumber()
    {
        return this.purchLine().LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderLineRecId</Name>
				<Source><![CDATA[
    protected RecId determineDefaultOrderLineRecId()
    {
        return this.determineDefaultPurchLineRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchLineRecId</Name>
				<Source><![CDATA[
    protected PurchLineRefRecId determineDefaultPurchLineRecId()
    {
        return this.purchLine().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchMarkup</Name>
				<Source><![CDATA[
    protected PurchMarkup determineDefaultPurchMarkup()
    {
        return this.purchLine().PurchMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchPrice</Name>
				<Source><![CDATA[
    protected PurchPrice determineDefaultPurchPrice()
    {
        return this.purchLine().PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchQtys</Name>
				<Source><![CDATA[
    protected container determineDefaultPurchQtys(PurchQty _receiveNow = naReal())
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, ReceiveNow), vendDocumentLineMap.TableId)))
        {
            return this.physicalStrategy().determineDefaultPurchQtys(_receiveNow);
        }

        return this.physicalStrategy().determineDefaultPurchQtys(vendDocumentLineMap.ReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRemainBeforeInventPhys</Name>
				<Source><![CDATA[
    protected TradeRemainBeforeInventPhysical determineDefaultRemainBeforeInventPhys()
    {
        return this.purchLine().RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroup determineDefaultTaxGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected TaxItemGroup determineDefaultTaxItemGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOverrideSalesTax</Name>
				<Source><![CDATA[
    protected NoYes determineDefaultOverrideSalesTax()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxServiceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default value of <c>TaxServiceCode_BR</c> field
    /// </summary>
    /// <returns>
    /// Value of <c>TaxServiceCode_BR</c>
    /// </returns>
    /// <remarks>
    /// Default value always comes from <c>PurchLine</c> table.
    /// </remarks>
    protected TaxServiceCodeId_BR determineDefaultTaxServiceCode_BR()
    {
        return this.purchLine().TaxServiceCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineMaximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the maximum retail price.
    /// </summary>
    /// <returns>
    /// The instance of the <c>MaximumRetailPrice_IN</c> class.
    /// </returns>
    protected MaximumRetailPrice_IN determineMaximumRetailPrice_IN()
    {
        return this.purchLine().purchLine_IN().MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    protected void defaultItemId()
    {
        this.physicalStrategy().defaultItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRecordLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies values of several fields from the source document line table record.
    /// </summary>
    public void initFromRecordLine()
    {
        super();

        this.initFromPurchLine();
        this.initPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies values of several fields from the <c>PurchLine</c> table record.
    /// </summary>
    public void initFromPurchLine()
    {
        this.physicalStrategy().defaultInventTransId();
        this.defaultOrderAccount();
        this.defaultInvoiceAccount();
        this.defaultLineNum();
        this.defaultPurchLineRecId();
        this.defaultCurrencyCode();
        this.defaultDeliveryName();
        this.defaultDeliveryLocation();
        this.defaultPriceUnit();
        this.defaultProcurementCategory();
        this.defaultRemainBeforeInventPhysical();
        this.defaultTaxGroup();
        this.defaultTaxItemGroup();
        this.defaultOverrideSalesTax();
        this.defaultPDSCalculationId();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::checkTaxParameters_IN())
        {
            this.defaultMaximumRetailPrice_IN();
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postInitFromPurchLine_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrice</Name>
				<Source><![CDATA[
    protected void initPrice()
    {
        this.physicalStrategy().initPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineAmountSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether Line amount exists, field value that is mapped to <c>VendDocumentTableMap</c> map.
    /// </summary>
    /// <returns>
    ///  true if the Line amount exists; otherwise, false.
    ///  </returns>
    public boolean isLineAmountSet()
    {
        return (vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, LineAmount), vendDocumentLineMap.TableId)) && vendDocumentLineMap.LineAmount != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchPriceSet</Name>
				<Source><![CDATA[
    public boolean isPurchPriceSet()
    {
        return vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PurchPrice), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        purchLine = null;
        purchParmUpdate = null;

        #ISOCountryRegionCodes

        isRUCountryRegionEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalStrategy</Name>
				<Source><![CDATA[
    protected VendDocumentLineTypePhysical physicalStrategy(VendDocumentLineTypePhysical _physicalStrategy = physicalStrategy)
    {
        if (!prmisDefault(_physicalStrategy))
        {
            physicalStrategy = _physicalStrategy;
        }

        return physicalStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitFromPurchLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default values for brazilian fields of <c>PurchLine</c> table
    /// </summary>
    public void postInitFromPurchLine_BR()
    {
        this.defaultCFOPTable_BR();
        this.defaultTaxServiceCode_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PurchLine</c> table record.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> table record to cache; optional.
    /// </param>
    /// <returns>
    /// The <c>PurchLine</c> table record.
    /// </returns>
    /// <remarks>
    /// Numerous fields are copied from <c>PurchLine</c> table record when you apply default values.
    /// </remarks>
    public PurchLine purchLine(PurchLine _purchLine = purchLine)
    {
        if (_purchLine != purchLine)
        {
            purchLine = _purchLine;
        }
        else
        {
            // getter - retrieve purchLine based on the table buffer being defaulted
            if (purchLine == null) // lazy load
            {
                purchLine = vendDocumentLineMap.purchLine();
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PurchParmUpdate</c> table record.
    /// </summary>
    /// <param name="_purchParmUpdate">
    /// The <c>PurchParmUpdate</c> table record to cache; optional.
    /// </param>
    /// <returns>
    /// The <c>PurchParmUpdate</c> table record.
    /// </returns>
    /// <remarks>
    /// Numerous fields are copied from <c>PurchParmUpdate</c> table record when you apply default values.
    /// </remarks>
    public PurchParmUpdate purchParmUpdate(PurchParmUpdate _purchParmUpdate = purchParmUpdate)
    {
        if (!prmisDefault(_purchParmUpdate))
        {
            purchParmUpdate = _purchParmUpdate;
        }

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cached <c>PurchTable</c> table record.
    /// </summary>
    /// <returns>
    /// The <c>PurchTable</c> table record.
    /// </returns>
    public PurchTable purchTable()
    {
        if (purchTable == null) // lazy load
        {
            purchTable = this.purchLine().purchTable();
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCWQtys</Name>
				<Source><![CDATA[
    private void setCWQtys(container _cwQtys)
    {
        vendDocumentLineMap.PdsCWReceiveNow = conPeek(_cwQtys, 1);
        vendDocumentLineMap.PdsCWRemainBefore = conPeek(_cwQtys, 2);
        vendDocumentLineMap.PdsCWRemainAfter = conPeek(_cwQtys, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransId</Name>
				<Source><![CDATA[
    protected boolean validateInventTransId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineAmount</Name>
				<Source><![CDATA[
    protected boolean validateLineAmount()
    {
        return vendDocumentLineMap.validateQtyAndAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cross validates field values for a row of a table that is mapped to <c>VendDocumentTableMap</c> map.
    /// </summary>
    /// <returns>
    /// true if the valid; otherwise, false.
    /// </returns>
    public boolean validateRow()
    {
        // Require either ItemId or ProcurementCategory to be entered
        if (vendDocumentLineMap.ItemId == '' && vendDocumentLineMap.ProcurementCategory == 0)
        {
            checkFailed("@SYS134349");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the sales tax group.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    protected boolean validateTaxGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the item sales tax group.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    protected boolean validateTaxItemGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a <c>VendDocumentLineType</c> class derivative.
    /// </summary>
    /// <param name="_vendDocumentLineMap">
    /// A <c>VendDocumentLineMap</c> record.
    /// </param>
    /// <param name="_purchLine">
    /// A purchase order line table record that is used when you apply the default values; optional.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// Posting parameters table record that is used when you apply the default values; optional.
    /// </param>
    /// <returns>
    /// A <c>VendDocumentLineType</c> class derivative.
    /// </returns>
    public static VendDocumentLineType construct(VendDocumentLineMap _vendDocumentLineMap, PurchLine _purchLine = null, PurchParmUpdate _purchParmUpdate = null)
    {
        return VendDocumentLineType::createFromTable(_vendDocumentLineMap, _purchLine, _purchParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a <c>VendDocumentLineType</c> class derivative.
    /// </summary>
    /// <param name="_vendDocumentLineMap">
    /// A <c>VendDocumentLineMap</c> record.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record that is used when you apply the default values; optional.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// A <c>PurchParmUpdate</c> table record that is used when you apply the default values; optional.
    /// </param>
    /// <returns>
    /// A <c>VendDocumentLineType</c> class derivative.
    /// </returns>
    public static VendDocumentLineType createFromTable(VendDocumentLineMap _vendDocumentLineMap, PurchLine _purchLine = null, PurchParmUpdate _purchParmUpdate = null)
    {
        VendDocumentLineType strategy;
        DocumentStatus documentType = _vendDocumentLineMap.Ordering;

        switch (documentType)
        {
            case DocumentStatus::Invoice, DocumentStatus::ApproveJournal:
                strategy = new VendDocumentLineType_Invoice();
                break;

            case DocumentStatus::PackingSlip:
                strategy = new VendDocumentLineType_PackingSlip();
                break;

            case DocumentStatus::None:
                strategy = null;
                break;

            default:
                strategy = new VendDocumentLineType();
                break;
        }

        if (strategy != null)
        {
            strategy.vendDocumentLineMap(_vendDocumentLineMap);
            strategy.purchLine(_purchLine);
            strategy.physicalStrategy(VendDocumentLineTypePhysical::createFromTable(strategy, _vendDocumentLineMap));
            strategy.purchParmUpdate(_purchParmUpdate);
        }

        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>