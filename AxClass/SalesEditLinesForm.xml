<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesEditLinesForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class  SalesEditLinesForm
{
    SalesTable                      salesTable;
    SalesPurchSummarySumByCtrl      sumByCtrl;
    SalesParmLine                   salesParmLine;
    SalesParmUpdate                 salesParmUpdate;
    BankLCExportLineNumController   bankLCExportLineNumController;
    boolean                         isCorrectionOrCancel;
    protected boolean               isSimulatePosting;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowCreate_ParmLine</Name>
				<Source><![CDATA[
    boolean allowCreate_ParmLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreate_ParmTable</Name>
				<Source><![CDATA[
    boolean allowCreate_ParmTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPrintCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the <c>Print cash receipt</c> checkbox should be editable in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///  Always false.
    /// </returns>
    public boolean allowEditPrintCODCashReceipt_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankLCExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the letter of credit line field is visible.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit line field is visible; otherwise, false.
    /// </returns>
    public boolean bankLCExportLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billOfLading</Name>
				<Source><![CDATA[
    public boolean billOfLading()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>choose</Name>
				<Source><![CDATA[
    boolean choose()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classType</Name>
				<Source><![CDATA[
    str  classType()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    boolean  close()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correct</Name>
				<Source><![CDATA[
    boolean  correct()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctEnabled_RU</Name>
				<Source><![CDATA[
    boolean correctEnabled_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctPhysical_RU</Name>
				<Source><![CDATA[
    boolean correctPhysical_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    boolean  creditMax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditRemaining</Name>
				<Source><![CDATA[
    boolean  creditRemaining()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountId</Name>
				<Source><![CDATA[
    boolean custBankAccountId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountIdAllowEdit</Name>
				<Source><![CDATA[
    boolean custBankAccountIdAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankLCExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the letter of credit line field can be edited.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit line field can be edited; otherwise, false.
    /// </returns>
    public boolean editBankLCExportLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesEditLines</c> form will allow for changes in the <c>groupDate</c>
    /// field group.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean editDates()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the deliver now quantity fields are editable in the edit lines form.
    /// </summary>
    /// <returns>
    ///    true if the deliver now quantity fields will be editable in the edit lines form; otherwise, false.
    /// </returns>
    public boolean editDeliverNow()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingCaption</Name>
				<Source><![CDATA[
    str  editingCaption(Common _callerTable = null)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRemainAfter</Name>
				<Source><![CDATA[
    boolean editRemainAfter()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReserve</Name>
				<Source><![CDATA[
    boolean  editReserve()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedDueDate</Name>
				<Source><![CDATA[
    boolean fixedDueDate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaption</Name>
				<Source><![CDATA[
    str  formLetterButtonCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaptionCopy</Name>
				<Source><![CDATA[
    str  formLetterButtonCaptionCopy()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str  formLetterCaption()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>giro</Name>
				<Source><![CDATA[
    boolean giro()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTrackingRegistrationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the registration using <c>InventTrackingRegisterTrans</c> should be enabled.
    /// </summary>
    /// <returns>
    /// true if the registration using <c>InventTrackingRegisterTrans</c> should be enabled; otherwise, false.
    /// </returns>
    public boolean inventTrackingRegistrationEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select batch ID numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_salesParmLine">
    /// The specified <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The specified <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean lookupInventBatchId(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays a custom lookup to select invent GTD.
    /// </summary>
    /// <param name="_formControl">
    ///     The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///     The current value.
    /// </param>
    /// <param name="_salesParmLine">
    ///     The selected <c>SalesParmLine</c> record.
    /// </param>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    public boolean lookupInventGTDId_RU(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays a custom lookup to select invent owner.
    /// </summary>
    /// <param name="_formControl">
    ///     The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///     The current value.
    /// </param>
    /// <param name="_salesParmLine">
    ///     The selected <c>SalesParmLine</c> record.
    /// </param>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    public boolean lookupInventOwnerId_RU(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select serial ID numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_salesParmLine">
    /// The specified <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The specified <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean lookupInventSerialId(FormControl _formControl, str _filterStr, SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowEditLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns false because by default, the user is not
    ///     allowed to edit line amount which conforms to standards.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The <c>SaleParmLine</c> record to allow/disallow
    ///     editing of the line amount.
    /// </param>
    /// <returns>
    ///     false.
    /// </returns>
    public boolean mcrAllowEditLineAmount(SalesParmLine _salesParmLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determiens if the sales order is for a drop shipment.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    public boolean mcrDropShipment()
    {
        //Returns true to show the dropship checkbox.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the item sold is a gift card.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The record used to find the item to determine if it
    ///     is a gift card.
    /// </param>
    /// <returns>
    ///     true if the item is a gift card; otherwise, false.
    /// </returns>
    public boolean mcrGiftCard(SalesParmLine _salesParmLine)
    {
        if (!_salesParmLine.ItemId)
        {
            return false;
        }
        MCRInventTable mcrInventTable = MCRInventTable::findByItemId(_salesParmLine.ItemId);
        if (_salesParmLine.ItemId == RetailParameters::find().GiftCardItem)
        {
            // If this item is a gift card return true.
            return true;
        }
        else
        {
            //Otherwise, retrun false.
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrShowMiscChargePrintOption</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns false.
    /// </summary>
    /// <returns>
    ///     false.
    /// </returns>
    /// <remarks>
    ///     Whether or not there are miscellaneous charges, print option should be shown.
    ///     For every form except invoicing this is not shown.
    ///     The print option dictates whether each misc charge is printed on a separate line or whether
    ///     they are summarized/grouped by miscellaneous charge code.
    /// </remarks>
    public boolean mcrShowMiscChargePrintOption()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the name field will be shown in the edit lines form.
    /// </summary>
    /// <returns>
    /// true if the name field will be shown in the edit lines form; otherwise, false.
    /// </returns>
    boolean name()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCaption_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides the label for the Num_W field.
    /// </summary>
    /// <returns>
    ///     The label for Num_W.
    /// </returns>
    public str numCaption_W()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesEditLines</c> form will display the <c>OtherGroup</c> group control.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean otherTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overviewTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesEditLines</c> form will display the <c>tabOverview</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean overviewTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parametersGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form will display the <c>groupUpdate</c> control group.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean parametersGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCExportLineNumController</Name>
				<Source><![CDATA[
    public BankLCExportLineNumController parmBankLCExportLineNumController(
        BankLCExportLineNumController _bankLCExportLineNumController = bankLCExportLineNumController)
    {
        bankLCExportLineNumController = _bankLCExportLineNumController;
        return bankLCExportLineNumController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCorrectionOrCancel</Name>
				<Source><![CDATA[
    public boolean parmIsCorrectionOrCancel(boolean _isCorrectionOrCancel = isCorrectionOrCancel)
    {
        isCorrectionOrCancel = _isCorrectionOrCancel;

        return isCorrectionOrCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentSched</Name>
				<Source><![CDATA[
    boolean paymentSched()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCODLabel</Name>
				<Source><![CDATA[
    boolean printCODLabel()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOverdueFineTxt_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to show print lump sum control for French invoices.
    /// </summary>
    /// <returns>
    /// true, if lump sum notice need to be printed on the sales invoice printing form.
    /// </returns>
    public boolean printOverdueFineTxt_FR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printShippingLabel</Name>
				<Source><![CDATA[
    boolean printShippingLabel()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    boolean projId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyToPickInSalesUnit</Name>
				<Source><![CDATA[
    boolean qtyToPickInSalesUnit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOnHand</Name>
				<Source><![CDATA[
    boolean reduceOnHand()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    boolean  reserve()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>respiteDate</Name>
				<Source><![CDATA[
    boolean  respiteDate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales category field will be shown in the edit lines form.
    /// </summary>
    /// <returns>
    /// true if the sales category field will be shown in the edit lines form; otherwise, false.
    /// </returns>
    boolean salesCategory()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTotals</Name>
				<Source><![CDATA[
    boolean salesTotals()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectJournalButton</Name>
				<Source><![CDATA[
    public boolean selectJournalButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParmLine</Name>
				<Source><![CDATA[
    public void  setSalesParmLine(SalesParmLine  _salesParmLine)
    {
        salesParmLine = _salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParmUpdate</Name>
				<Source><![CDATA[
    public void  setSalesParmUpdate(SalesParmUpdate  _salesParmUpdate)
    {
        salesParmUpdate = _salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTable</Name>
				<Source><![CDATA[
    void  setSalesTable(SalesTable  _salesTable)
    {
        salesTable = _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBankLCExportLineController</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the <c>BankLCExportLineNumController</c> object that is used for the
    ///    <c>BankLCExportLine</c> field.
    /// </summary>
    public void setupBankLCExportLineController()
    {
        if (bankLCExportLineNumController)
        {
            bankLCExportLineNumController.parmBankLCRecId(BankLCExport::findBySalesTable(salesTable.SalesId).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSumByControl</Name>
				<Source><![CDATA[
    void setupSumByControl(FormComboBoxControl  _sumByControl,
                           SalesUpdate          _specQty,
                           AccountOrder         _accountOrder = AccountOrder::None)
    {
        sumByCtrl = SalesPurchSummarySumByCtrl::newSumByControl(_sumByControl);
        if (!this.sumByJournal() ||
            (this.sumByJournal() && _specQty != SalesUpdate::PackingSlip))
        {
            sumByCtrl.remove(AccountOrder::Journal);
        }
        else if (this.sumByJournalCaption())
        {
            sumByCtrl.setText(AccountOrder::Journal, this.sumByJournalCaption());
        }

        sumByCtrl.build();
        sumByCtrl.setSelection(_accountOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAdvanceInvoiceSettlement_W</Name>
				<Source><![CDATA[
    public boolean showAdvanceInvoiceSettlement_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the visibility of the <c>AlcoholLicenseSeriesNum_RU</c> field on the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    false; otherwise true.
    /// </returns>
    public boolean showAlcoholLicenseSeriesNum_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCFDIReference_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the CDFI reference button should be shown.
    /// </summary>
    /// <returns>
    ///     True if the CDFI reference button should be shown; otherwise, false.
    /// </returns>
    public boolean showCFDIReference_MX()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCFDIEnabled_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the CDFI Enabled button should be shown.
    /// </summary>
    /// <returns>
    ///     True if the CDFI Enabled button should be shown; otherwise, false.
    /// </returns>
    public boolean showCFDIEnabled_MX()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrect_RU</Name>
				<Source><![CDATA[
    public boolean showCorrect_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrectedFactureExternalId_RU</Name>
				<Source><![CDATA[
    public boolean showCorrectedFactureExternalId_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    public boolean showCorrectedInvoiceId_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocNumberingCode_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find if the Numbering Code field should be visible on the Sales invoice form.
    /// </summary>
    /// <param name="_parmId">
    /// ParmId of the Purchase order transaction.
    /// </param>
    /// <returns>
    /// True if there exists a SalesParmTable record with the given ParmId and has the DocRegister_LT field set.
    /// </returns>
    public boolean showDocNumberingCode_LT(ParmId _parmId)
    {
        SalesParmTable salesParmTable;

        select firstonly RecId from salesParmTable
            where salesParmTable.ParmId == _parmId &&
                salesParmTable.DocAutoNumbering_LT;

        return (salesParmTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEntryCertificateRequired_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Entry certificate required</c> field should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    public boolean showEntryCertificateRequired_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExtra_RU</Name>
				<Source><![CDATA[
    public boolean showExtra_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFiscalDocType_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Detemerines whether the fiscal document type field should be shown.
    /// </summary>
    /// <returns>
    ///     true if the fiscal document field should be shown; otherwise, false.
    /// </returns>
    public boolean showFiscalDocType_PL()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the fiscal document type field should be shown.
    /// </summary>
    /// <returns>
    /// True if the fiscal document type field should be shown; otherwise, false.
    /// </returns>
    public boolean showFiscalDocumentType_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFiscalReference_BR</Name>
				<Source><![CDATA[
    public boolean showFiscalReference_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventLocationId_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to show warehouse control for documents numbering per location.
    /// </summary>
    /// <returns>
    /// true depending on setup in module parameters for document type.
    /// </returns>
    public boolean showInventLocationId_PL()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventOwnerId_RU</Name>
				<Source><![CDATA[
    public boolean showInventOwnerId_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventProfileType_RU</Name>
				<Source><![CDATA[
    public boolean showInventProfileType_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public boolean showInvoicePostingType_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInvoicePrintout_RU</Name>
				<Source><![CDATA[
    // Invoce layout (TORG-12, M-15)
    public boolean showInvoicePrintout_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIssueOwnEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Issue own entry certificate</c> field should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    public boolean showIssueOwnEntryCertificate_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if Num_W should be visible.
    /// </summary>
    /// <returns>
    ///     true if InvoiceEditing_W is enabled; otherwise, false.
    /// </returns>
    public boolean showNum_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOfficials_RU</Name>
				<Source><![CDATA[
    public boolean showOfficials_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPackingSlipDetails</Name>
				<Source><![CDATA[
    public boolean showPackingSlipDetails()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPDSCalculatedLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the calculation line amount should be displayed on the form.
    /// </summary>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    /// <remarks>
    ///     A derived class may override this method if it may be applicable to display the calculation line amount.
    /// </remarks>
    public boolean showPDSCalculatedLineAmount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostingProfile_RU</Name>
				<Source><![CDATA[
    public boolean showPostingProfile_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostponeVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to determine whether the <c>PostponeVAT</c> field should be visible on the form.
    /// </summary>
    /// <returns>
    /// true if the <c>PostponeVAT</c> field should be visible; otherwise, false.
    /// </returns>
    public boolean showPostponeVAT()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintAcceptanceReport_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintBlankDate_LT</Name>
				<Source><![CDATA[
    // overloaded in SalesEditLinesForm_PackingSlip, SalesEditLinesForm_Invoice
    public boolean showPrintBlankDate_LT()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ButtonEntryCertificate_W</c> button can be enabled in <c>SalesEditLines</c> form.
    /// </summary>
    /// <param name = "_isChecked">Is checkbox "Issue entry certificate" checked or not. Optional.</param>
    /// <returns>True if the <c>ButtonEntryCertificate_W</c> button is available; false otherwise.</returns>
    public boolean enableButtonEntryCertificate_W(boolean _isChecked = false)
    {
        return _isChecked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerOwnEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether <c>ButtonEntryCertificate_W</c> button can be enabled in <c>SalesEditLines</c> form.
    /// </summary>
    /// <param name = "_isChecked">Is checkbox "Issue entry certificate" checked or not. Optional.</param>
    /// <returns>True if it is checked, false otherwise.</returns>
    protected boolean isCustomerOwnEntryCertificate_W(boolean _isChecked = false)
    {
        boolean isButtonEnabled = false;

        if (_isChecked &&
            CustParameters::find().EntryCertificateIssuingEnabled_W &&
            salesTable.custTable_CustAccount().IssueOwnEntryCertificate_W)
        {
            salesTable.custTable_CustAccount();
            isButtonEnabled = true;
        }

        return isButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Print cash receipt</c> checkbox should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    boolean showPrintCODCashReceipt_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Print entry certificate</c> checkbox should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    boolean showPrintEntryCertificate_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintFacture_RU</Name>
				<Source><![CDATA[
    public boolean showPrintFacture_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintInventBaileeReport_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintMST_RU</Name>
				<Source><![CDATA[
    public boolean showPrintMST_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showUseOriginalDocumentAsFacture_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Original document as Facture</c> checkbox should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    public boolean showUseOriginalDocumentAsFacture_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVatDueDate_W</Name>
				<Source><![CDATA[
    public boolean showVatDueDate_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVATOnPayment_RU</Name>
				<Source><![CDATA[
    public boolean showVATOnPayment_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyItems</Name>
				<Source><![CDATA[
    int specQtyItems()
    {
        return enumCnt(SalesUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLine</Name>
				<Source><![CDATA[
    public boolean subLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subSalesTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesEditLines</c> form will display the <c>TabSalesParmSubTable</c> tab
    /// page.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean subSalesTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBy</Name>
				<Source><![CDATA[
    boolean sumBy()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByIndex2Selection</Name>
				<Source><![CDATA[
    int sumByIndex2Selection(AccountOrder _accountOrder)
    {
        if (!sumByCtrl)
            return -1;
        return sumByCtrl.index2Selection(_accountOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByJournal</Name>
				<Source><![CDATA[
    boolean sumByJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByJournalCaption</Name>
				<Source><![CDATA[
    str sumByJournalCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBySelection2Index</Name>
				<Source><![CDATA[
    AccountOrder sumBySelection2Index(int _selection)
    {
        return sumByCtrl.selection2Index(_selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateCaption</Name>
				<Source><![CDATA[
    str  transDateCaption()
    {
        return "@SYS7402";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the DeliverNow field.
    /// </summary>
    /// <returns>
    /// true if the DeliverNow field is valid; otherwise, false.
    /// </returns>
    public boolean validateDeliverNow()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the inventory dimensions to be used for a parameter line.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions to validate.
    /// </param>
    /// <returns>
    /// true if the inventory dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventDimId(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the GTD inventory dimensions.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    ///     The <c>InventDim</c> record that contains the values of the invent GTD dimension.
    /// </param>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean validateInventGTDId_RU(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the invent owner inventory dimensions.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    ///     The <c>InventDim</c> record that contains the values of the inventory owner dimension.
    /// </param>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean validateInventOwnerId_RU(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the serial and batch number inventory dimensions.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains values of the serial and batch number dimension to be
    /// validated.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventSerialBatchId(SalesParmLine _salesParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrder</Name>
				<Source><![CDATA[
    boolean wmsOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAttribute</Name>
				<Source><![CDATA[
    private static SalesEditLinesForm newFromAttribute(SalesEditLinesFormFactoryAttribute attribute)
    {
        SalesEditLinesForm instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesEditLinesForm), attribute) as SalesEditLinesForm;

        // Only create derived classes
        if (classIdGet(instance) == classNum(SalesEditLinesForm))
        {
            instance = null;
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesEditLinesForm  construct(
        DocumentStatus _documentStatus, 
        boolean _lineOriented,
        VersioningUpdateType _updateType = VersioningUpdateType::Initial)
    {
        // <GEERU>
        if (_documentStatus == DocumentStatus::PackingSlip &&
            _updateType == VersioningUpdateType::Cancel &&
            !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _updateType = VersioningUpdateType::Correction;
        }
        // </GEERU>

        // Search for exact match
        SalesEditLinesForm instance = SalesEditLinesForm::newFromAttribute(new SalesEditLinesFormFactoryAttribute(_documentStatus, _lineOriented, _updateType));

        if (!instance)
        {
            // Search for match without updateType
            instance = SalesEditLinesForm::newFromAttribute(new SalesEditLinesFormFactoryAttribute(_documentStatus, _lineOriented));
        }

        if (!instance)
        {
            // Search for match without lineOriented and updateType
            instance = SalesEditLinesForm::newFromAttribute(new SalesEditLinesFormFactoryAttribute(_documentStatus));
        }

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadAllowIncreaseQuantities_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the quantities can be increased based on the fact that the sales parm table has been created using a WHSLoadTable or not.
    /// </summary>
    /// <param name="_loadId">
    ///     Load id of the WHSLoadTable used to created the sales parm table. Blank if the sales parm table has not been created from a load.
    /// </param>
    /// <returns>
    ///     True if the quantities can be increased; otherwise; false.
    ///     For the current class this method will always return true; and children classes should
    ///     override it in case a different behavior is required.
    /// </returns>
    public boolean whsLoadAllowIncreaseQuantities_BR(WHSLoadId _loadId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadAllowReArrange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the Arrange is allowed on the fact that posting is called from a load.
    /// </summary>
    /// <param name="_isLoad">
    ///     _isLoad parameter determines whether posting is called from Load. False if posting is not called from a load.
    /// </param>
    /// <returns>
    ///     True if Arrange is allowed; otherwise; false.
    ///     For the current class this method will always return true; and children classes should
    ///     override it in case a different behavior is required.
    /// </returns>
    public boolean whsLoadAllowReArrange(boolean _isLoad)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSimulatePosting</Name>
				<Source><![CDATA[
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    public boolean parmIsSimulatePosting(boolean _isSimulatePosting = isSimulatePosting)
    {
        isSimulatePosting = _isSimulatePosting;
        return isSimulatePosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>