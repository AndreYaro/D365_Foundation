<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalAccEntryFormPayroll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>SubledgerJournalAccEntryFormPayroll</c> class runs the <c>SubledgerJournalAccountEntry</c> form for payroll.
/// </summary>
class SubledgerJournalAccEntryFormPayroll
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PayrollPayStatement             payStatement;
        PayrollPayStatementLine         payStatementLine;
        PayrollPayStatementBenefitLine  payStatementBenefitLine;
        PayrollPayStatementEarningLine  payStatementEarningLine;
        PayrollPayStatementTaxLine      payStatementTaxLine;
        MenuFunction                    menuFunction;
        SourceDocumentLine              sourceDocumentLine;
        SourceDocumentLineList          sourceDocumentLineList = SourceDocumentLineList::construct();

        if (!args)
        {
            throw error("@SYS79604");
        }

        switch (args.dataset())
        {
            case tableNum(PayrollPayStatement):
                payStatement = args.record();
                break;
            case tableNum(PayrollPayStatementLine):
                payStatementLine = args.record();
                break;
            case tableNum(PayrollPayStatementBenefitLine):
                payStatementBenefitLine = args.record();
                payStatementLine = PayrollPayStatementLine::find(payStatementBenefitLine.RecId);
                break;
            case tableNum(PayrollPayStatementEarningLine):
                payStatementEarningLine = args.record();
                payStatementLine = PayrollPayStatementLine::find(payStatementEarningLine.RecId);
                break;
            case tableNum(PayrollPayStatementTaxLine):
                payStatementTaxLine = args.record();
                payStatementLine = PayrollPayStatementLine::find(payStatementTaxLine.RecId);
                break;
            default:
                throw error("@SYS79604");
        }

        if (payStatement.RecId != 0)
        {
            // The subledger journal should only show lines that are not marked for removal
            while select payStatementLine
                join sourceDocumentLine
                where payStatementLine.PayStatement == payStatement.RecId
                &&    payStatementLine.IsMarkedForRemoval == NoYes::No
                &&    sourceDocumentLine.RecId == payStatementLine.SourceDocumentLine
            {
                sourceDocumentLineList.addEnd(sourceDocumentLine);
            }

            args.parmObject(sourceDocumentLineList);
        }
        else
        {
            args.record(payStatementLine);
        }

        menuFunction = new MenuFunction(menuitemDisplayStr(SubledgerJournalAccountEntries), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>