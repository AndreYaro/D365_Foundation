<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdSplit</c> class is used for splitting a production order.
/// </summary>
/// <remarks>
/// Using this class, you can split up one production order into two production orders. In parameters
/// you should specify the quantity for the new production order. You can do this by using the
/// <c>ProdParmSplit</c> table.
/// </remarks>
class ProdUpdSplit extends ProdUpd
{
    ProdParmSplit           prodParmSplit;
    ProdTable               prodTableSplit;

    // <GIN>
    #ISOCountryRegionCodes

    boolean                 countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyBOM</Name>
				<Source><![CDATA[
    // </GIN>
    void copyBOM()
    {
        ProdBOMSearch               bomSearch   = ProdBOMSearch::newProdId(prodTable.ProdId,false);
        BOMCopyFromProd             copyFrom    = BOMCopyFrom::construct(
            BOMCopyToProd::newProdSpilt(prodTableSplit.ProdId),
            bomSearch);

        copyFrom.copy(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRoute</Name>
				<Source><![CDATA[
    void copyRoute()
    {
        ProdRouteSearch             routeSearch = ProdRouteSearch::newProdId(prodTable.ProdId,false);
        RouteCopyFromProd           copyFrom    = RouteCopyFrom::construct(
            RouteCopyToProd::newProdUpdSpilt(prodTableSplit.ProdId),
            routeSearch);
        copyFrom.copy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSplitToProduction</Name>
				<Source><![CDATA[
    void createSplitToProduction()
    {
        this.initSplitToProduction();

        prodTableSplit.insertSplitProduction();
        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(prodTableSplit, prodParmSplit.prodTable());
        }
        // </GTE>

        this.addCreatedRec(prodTableSplit);

        Docu::clone(prodTable, prodTableSplit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitToProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the split production order.
    /// </summary>
    protected void initSplitToProduction()
    {
        prodTableSplit.clear();
        prodTableSplit.initFromSplitProdTable(prodTable);

        prodTableSplit.QtySched               = prodParmSplit.QtySplit;
        prodTableSplit.RemainInventPhysical   = prodParmSplit.QtySplit;
        prodTableSplit.PdsCWBatchSched           = prodParmSplit.PdsCWQtySplit;
        prodTableSplit.PdsCWRemainInventPhysical = prodParmSplit.PdsCWQtySplit;

        prodTableSplit.DlvDate                = prodParmSplit.DlvDate;
        prodTableSplit.DlvTime                = prodParmSplit.DlvTime;

        if (prodParmSplit.IsProject)
        {
            prodTableSplit.ProjId                 = prodParmSplit.ProjId;
            prodTableSplit.ActivityNumber         = prodParmSplit.ActivityNumber;
            prodTableSplit.ProjPostingType        = prodParmSplit.ProjPostingType;
            prodTableSplit.ProjLinkedToOrder      = prodParmSplit.ProjLinkedToOrder;

            if (prodTableSplit.isProjMethodFinished())
            {
                prodTableSplit.ProjCategoryId         = prodParmSplit.ProjCategoryId;
                prodTableSplit.ProjLinePropertyId     = prodParmSplit.ProjLinePropertyId;
                ProjInventJournalTransMapForm::construct(prodTableSplit).insertPost();
                prodTableSplit.ProjCostPrice          = prodParmSplit.ProjCostPrice;
                prodTableSplit.ProjSalesCurrencyId    = prodParmSplit.ProjSalesCurrencyId;
                prodTableSplit.ProjSalesUnitId        = prodParmSplit.ProjSalesUnitId;
                prodTableSplit.ProjTaxGroupId         = prodParmSplit.ProjTaxGroupId;
                prodTableSplit.ProjTaxItemGroupId     = prodParmSplit.ProjTaxItemGroupId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer parmParmBuffer(ParmBuffer _prodParmSplit = prodParmSplit)
    {
        if (!_prodParmSplit.RecId)
            throw error("@SYS67874");

        prodParmSplit = _prodParmSplit;

        return prodParmSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfApplyYield</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates raw materials quantity based on batch order yield value.
    /// </summary>
    public void pmfApplyYield()
    {
        ProdBOM     prodBOM;

        PmfYieldPct pmfYieldPct = prodTable.PmfYieldPct;

        while select forupdate prodBOM where prodBOM.ProdId == prodTable.ProdId
        {
            prodBOM.PmfQtyWithoutYield =
                (prodBOM.bomQty
                ? prodBOM.bomQty
                : prodBOM.PmfQtyWithoutYield);

            if (prodBOM.bomConsump == BOMConsumpType::Variable
                && prodBOM.ProdLineType != BOMType::Phantom)
            {
                prodBOM.bomQty = (prodBOM.PmfQtyWithoutYield * 100)
                    / (pmfYieldPct ? pmfYieldPct : 1);
            }
            else
            {
                prodBOM.bomQty = prodBOM.PmfQtyWithoutYield;
            }
            prodBOM.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCopyCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy related co/by product after a batch order split.
    /// </summary>
    public void pmfCopyCoBy()
    {
        PmfProdCoBySearch
            coBySearch   = PmfProdCoBySearch::newProdId(prodTable.ProdId,false);
        PmfCoByCopyFromProd
            copyFrom    = PmfCoByCopyFrom::construct(
                PmfCoByCopyToProd::newProdSplit(prodTableSplit.ProdId),
                coBySearch);

        copyFrom.copy(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCreateSplitProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates related co/by product after a batch order split.
    /// </summary>
    public void pmfCreateSplitProdCoBy()
    {
        PmfProdCoBy coBy;

        boolean isCreated = (prodTableSplit.ProdStatus == ProdStatus::Created);

        while select forupdate coBy
            where coBy.ProdId == prodTableSplit.ProdId
        {
            if (PdsGlobal::pdsIsCWItem(coBy.ItemId))
            {
                coBy.PdsCWQty               = PdsCatchWeight::cwQty(
                                                coBy.ItemId,
                                                coBy.CoByQty);

                if (!isCreated)
                {
                    coBy.PdsCWRemainPhysical    = coBy.PdsCWQty;
                }

                coBy.CoByQty = PdsCatchWeight::inventQty(
                                    coBy.ItemId,
                                    coBy.PdsCWQty);
            }

            if (!isCreated)
            {
                coBy.RemainCoByPhysical = coBy.CoByQty;
            }

            coBy.update(isCreated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfRemoveYield</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates raw materials quantity based on batch order non yield value.
    /// </summary>
    public void pmfRemoveYield()
    {
        ProdBOM     prodBOM;

        while select forupdate prodBOM where prodBOM.ProdId == prodTable.ProdId
        {
            prodBOM.bomQty = prodBOM.PmfQtyWithoutYield;
            prodBOM.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfRunSplitFromCostEstimationCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates marking for a related co/by product after a batch order split.
    /// </summary>
    public void pmfRunSplitFromCostEstimationCoBy()
    {
        PmfProdCoBy                  prodCoBy;
        InventTransOriginPmfProdCoBy inventTransOriginPmfProdCoBy;
        InventTransOrigin            inventTransOriginRef;

        while select InventRefTransId, InventTransId, QtyCoByCalc
            from  prodCoBy
            where prodCoBy.ProdId == prodTableSplit.ProdId
            &&    prodCoBy.InventRefTransId
            join  InventTransOrigin from inventTransOriginPmfProdCoBy
            where inventTransOriginPmfProdCoBy.PmfProdCoByDataAreaId == prodCoBy.DataAreaId
            &&    inventTransOriginPmfProdCoBy.PmfProdCoByRecId      == prodCoBy.RecId
            join RecId from inventTransOriginRef
                where inventTransOriginRef.InventTransId             == prodCoBy.InventRefTransId
        {
            InventTransOrigin::updateMarking(inventTransOriginRef.RecId, inventTransOriginPmfProdCoBy.InventTransOrigin, prodCoBy.QtyCoByCalc);
        }
        this.addUpdateRec(ProdTable::find(prodTable.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateSplitFromCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates quantities for related co/by product after a batch order split.
    /// </summary>
    public void pmfUpdateSplitFromCoBy()
    {
        PmfProdCoBy coBy;

        boolean isCreated = (prodTableSplit.ProdStatus == ProdStatus::Created);

        while select forupdate coBy
            where coBy.ProdId == prodParmSplit.ProdId
        {
            if (PdsGlobal::pdsIsCWItem(coBy.ItemId))
            {
                coBy.PdsCWQty               = PdsCatchWeight::cwQty(
                                                coBy.ItemId,
                                                coBy.CoByQty);

                if (!isCreated)
                {
                    coBy.PdsCWRemainPhysical    = coBy.PdsCWQty;
                }

                coBy.CoByQty = PdsCatchWeight::inventQty(
                                    coBy.ItemId,
                                    coBy.PdsCWQty);
            }

            if (!isCreated)
            {
                coBy.RemainCoByPhysical = coBy.CoByQty;
            }

            coBy.update(isCreated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptSplitMarking</Name>
				<Source><![CDATA[
    boolean promptSplitMarking()
    {
        ProdTable origProdTable = ProdTable::find(prodParmSplit.ProdId);

        if (origProdTable.InventRefTransId || ((origProdTable.QtySched - origProdTable.qtyMarked()) >= prodParmSplit.QtySplit) ||
            origProdTable.isProjMethodFinished() || origProdTable.isProjMethodConsumed())
            return true;

        return Box::okCancel("@SYS85193", DialogButton::Ok, strfmt("@SYS53184", "@SYS24089", "@SYS85194")) == DialogButton::Ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the split of a production order.
    /// </summary>
    /// <remarks>
    ///    Before the method is started, you should set up splitting parameters by using the
    ///    <c>newParmBuffer</c> method.
    /// </remarks>
    void run()
    {
        #OCCRetryCount
        setprefix(ProdMultiSplit::description());
        setprefix(#PreFixField(ProdParmSplit,ProdId));

        if (!this.promptSplitMarking())
            throw error("@SYS18447");

        try
        {
            ttsbegin;

            this.setParameters();

            if (! this.validate())
                throw Exception::Error;

            this.createSplitToProduction();

            if (prodTable.ProdType == ProdType::Process)
            {
                this.pmfRemoveYield();
            }
            this.copyBOM();
            if (prodTable.ProdType == ProdType::Process)
            {
                this.pmfApplyYield();
                this.pmfCopyCoBy();
                this.pmfCreateSplitProdCoBy();
                this.pmfUpdateSplitFromCoBy();
            }

            this.copyRoute();

            this.updateSplitFromProduction();

            if (! prodTable.status().isBefore(ProdStatus::CostEstimated))
            {
                this.runSplitToCostEstimation();
                this.runSplitFromCostEstimation();
                if (prodTable.ProdType == ProdType::Process)
                {
                    this.pmfRunSplitFromCostEstimationCoBy();
                }
            }

            boolean isSplitTransactionEnabled = this.isSplitTransactionEnabled();
            
            if (isSplitTransactionEnabled)
            {
                this.updateJobJournal(ParmJobStatus::Executed);

                info(strfmt("@SYS67911",prodParmSplit.QtySplit,prodTableSplit.ProdId),'',ProdIdInfoAction::newProdId(prodTableSplit.ProdId));

                ttscommit;
            }

            if (! prodTable.status().isBefore(ProdStatus::Scheduled))
            {
                this.runSplitToScheduling();
                this.runSplitFromScheduling();
            }

            if (!isSplitTransactionEnabled)
            {
                this.updateJobJournal(ParmJobStatus::Executed);

                info(strfmt("@SYS67911",prodParmSplit.QtySplit,prodTableSplit.ProdId),'',ProdIdInfoAction::newProdId(prodTableSplit.ProdId));

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitTransactionEnabled</Name>
				<Source><![CDATA[
    protected boolean isSplitTransactionEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplitFromCostEstimation</Name>
				<Source><![CDATA[
    void runSplitFromCostEstimation()
    {
        ProdBOM                     prodBOM;
        ProdBOM                     prodBOMBuffer;
        InventTransOriginProdBOM    inventTransOriginProdBOM;
        InventTransOrigin           inventTransOriginRef;
        InventTrans                 inventTrans;

        ProdUpdCostEstimation costEstimation = ProdUpdCostEstimation::newProdId(prodTable.ProdId,prodTable.ProfitSet);

        costEstimation.run();

        while select prodBOM
            index hint NumIdx
            where prodBOM.ProdId                                    == prodTableSplit.ProdId
               && prodBOM.InventRefTransId
            join InventTransOrigin from inventTransOriginProdBOM
                where inventTransOriginProdBOM.ProdBOMDataAreaId    == prodBOM.DataAreaId
                   && inventTransOriginProdBOM.ProdBOMInventTransId == prodBOM.InventTransId
            join RecId from inventTransOriginRef
                where inventTransOriginRef.InventTransId            == prodBOM.InventRefTransId
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOriginProdBOM.InventTransOrigin
                   && !inventTrans.MarkingRefInventTransOrigin
        {
            InventQty markNow = InventTransOrigin::updateMarking(inventTransOriginRef.RecId, inventTransOriginProdBOM.InventTransOrigin, prodBOM.QtyInventCalc);
            if (markNow)
            {
                InventTransOrigin::updateMarking(
                                                 inventTransOriginProdBOM.InventTransOrigin, inventTransOriginRef.RecId,
                                                 -prodBOM.QtyInventCalc);

                prodBOMBuffer.data(prodBOM);
                InventMovement movementIssue = InventMov_ProdLine::newFromProdBOM(prodBOMBuffer);

                // update reservation according to marking
                if (movementIssue)
                {
                    InventUpd_Reservation::updateReserveRefTransId(movementIssue);
                }
            }
        }

        this.addUpdateRec(ProdTable::find(prodTable.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplitFromScheduling</Name>
				<Source><![CDATA[
    void runSplitFromScheduling()
    {
        ProdParmScheduling  prodParmScheduling;
        ProdUpdScheduling   scheduling;
        prodParmScheduling.initFromSplitFromProd(prodTable);

        if (prodTable.SchedStatus == ProdSchedStatus::JobScheduled)
            scheduling = ProdUpdScheduling_Job::newParmBuffer(prodParmScheduling);
        else
            scheduling = ProdUpdScheduling_Operation::newParmBuffer(prodParmScheduling);

        scheduling.run();

        this.addUpdateRec(ProdTable::find(prodTable.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplitToCostEstimation</Name>
				<Source><![CDATA[
    void runSplitToCostEstimation()
    {
        ProdUpdCostEstimation costEstimation = ProdUpdCostEstimation::newProdId(prodTableSplit.ProdId, prodTableSplit.ProfitSet);
        costEstimation.run();

        container conCreatedRecs = costEstimation.packCreatedRecs();
        if (conCreatedRecs)
        {
            this.mergeCreatedRecs(Map::create(conCreatedRecs));
        }

        this.addUpdateRec(ProdTable::find(prodTableSplit.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplitToScheduling</Name>
				<Source><![CDATA[
    void runSplitToScheduling()
    {
        ProdParmScheduling  prodParmScheduling;
        ProdUpdScheduling   scheduling;
        prodParmScheduling.initFromSplitToProd(prodTableSplit);

        if (prodTable.SchedStatus == ProdSchedStatus::JobScheduled)
            scheduling = ProdUpdScheduling_Job::newParmBuffer(prodParmScheduling);
        else
            scheduling = ProdUpdScheduling_Operation::newParmBuffer(prodParmScheduling);

        scheduling.run();

        this.addUpdateRec(ProdTable::find(prodTableSplit.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters()
    {
        this.initProdTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSplitFromProduction</Name>
				<Source><![CDATA[
    void updateSplitFromProduction()
    {
        InventMovement      movementIssue;
        InventMovement      movementReceipt;
        Map                 mapMovement = new Map(Types::String,Types::Class);

        prodTable.QtySched              -= prodParmSplit.QtySplit;
        prodTable.RemainInventPhysical  -= prodParmSplit.QtySplit;

        prodTable.PdsCWBatchSched           -= prodParmSplit.PdsCWQtySplit;
        prodTable.PdsCWRemainInventPhysical -= prodParmSplit.PdsCWQtySplit;

        if (prodTableSplit.isProjMethodFinished())
            ProjInventJournalTransMapForm::construct(prodTable).fieldModifiedQtyPost();

        prodTable.update();

        InventTransOrigin markedOrigin = InventTransOrigin::findByInventTransId(prodTableSplit.InventRefTransId);
        SalesLine         markedSource;

        if (ProdUpdSplitMarkingFlight::instance().isEnabled() &&
            markedOrigin.ReferenceCategory == InventTransType::Sales)
        {
            markedSource = SalesLine::findInventTransId(markedOrigin.InventTransId);
        }

        if (prodTableSplit.InventRefTransId 
            && (!markedSource || markedSource.InventRefTransId))
        {
            InventTransOriginId refernceInventTransOriginId = markedOrigin.RecId;
            InventTransOriginId prodTableInventTransOriginId = InventTransOriginProdTable::findInventTransOriginId(prodTableSplit.DataAreaId, prodTableSplit.ProdId);
            InventQty markNow = InventTransOrigin::updateMarking(refernceInventTransOriginId, prodTableInventTransOriginId, -prodTableSplit.QtySched);

            if (markNow)
            {
                InventTransOrigin::updateMarking(prodTableInventTransOriginId, refernceInventTransOriginId, abs(markNow));
            }

            // get movements
            InventTrans inventTransMovement = InventTrans::findByInventTransOrigin(refernceInventTransOriginId);
            if (inventTransMovement.RecId)
            {
                movementIssue = inventTransMovement.inventMovement(true);
            }

            inventTransMovement = InventTrans::findByInventTransOrigin(prodTableInventTransOriginId);
            if (inventTransMovement.RecId)
            {
                movementReceipt = inventTransMovement.inventMovement(true);
            }

            // update reservation according to marking
            if (movementIssue)
            {
                InventUpd_Reservation::updateReserveRefTransId(movementIssue);
            }

            // update inventRef fields on movements
            if (movementIssue && movementReceipt)
            {
                mapMovement.insert(movementIssue.transId(), movementIssue);
                mapMovement.insert(movementReceipt.transId(), movementReceipt);
                InventTrans::updateInventRefFields(mapMovement);
            }
        }

        prodTableSplit.projCostControlUpdate();

        this.addUpdateRec(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean     ret = true;

        ProdTable   prodTableRef;

        if (! prodTable.RecId)
            this.initProdTable(true);

        if (! super())
            return false;

        if (prodParmSplit.QtySplit != decround(prodParmSplit.QtySplit, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(prodTable.ItemId,ModuleInventPurchSales::Invent).UnitId))))
            return checkFailed(strfmt("@SYS19589",InventTableModule::find(prodTable.ItemId,ModuleInventPurchSales::Invent).UnitId));

        if (PdsGlobal::pdsIsCWItem(prodParmSplit.prodTable().ItemId)
            && prodParmSplit.PdsCWQtySplit <= 0)
        {
            return checkFailed("@PDS1049");
        }

        if (prodParmSplit.QtySplit <= 0)
            return checkFailed("@SYS67892");

        if (prodTable.CollectRefLevel != 0)
            return checkFailed("@SYS67906");

        if (prodTable.RemainInventPhysical < prodParmSplit.QtySplit)
            return checkFailed("@SYS67883");

        if (prodTable.QtySched - prodParmSplit.QtySplit < prodTable.QtyStUp)
            return checkFailed("@SYS67891");

        real factor = prodTable.QtySched ? prodParmSplit.QtySplit / prodTable.QtySched : 0;

        setprefix("@SYS24987");

        while select prodTableRef
            where prodTableRef.CollectRefProdId == prodTable.CollectRefProdId &&
                  prodTableRef.CollectRefLevel  >  0
        {
            setprefix(#prefixField(prodTableRef,prodId));

            if (! prodTableRef.status().isBefore(ProdStatus::ReportedFinished))
                ret = checkFailed(strfmt("@SYS67855",prodTableRef.ProdStatus));

            InventQty factorQtySplit = roundDownDec(prodTableRef.QtySched * factor,0);

            if (prodTableRef.RemainInventPhysical < factorQtySplit)
                return checkFailed("@SYS67883");

            if (prodTableRef.QtySched - factorQtySplit < prodTableRef.QtyStUp)
                return checkFailed("@SYS67891");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdUpdSplit construct()
    {
        ProdUpdSplit prodUpdSplit = new ProdUpdSplit();

        return prodUpdSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    static ProdUpdSplit newParmBuffer(ProdParmSplit prodParmSplit)
    {
        if (! prodParmSplit.ParmId)
        {
            prodParmSplit.skipTTSCheck(true);
            prodParmSplit.ParmBuffer::initParmId();
            prodParmSplit.write();
        }

        ProdUpdSplit prodUpdSplit = ProdUpdSplit::construct();
        prodUpdSplit.parmParmBuffer(prodParmSplit);

        return prodUpdSplit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>