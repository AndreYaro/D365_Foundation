<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjPostEmplIndirectProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PSAProjPostEmplIndirectProposal extends PSAProjPostEmplIndirect
{
    ProjProposalEmpl        m_tProjProposalEmpl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectCreditAccountTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a ledger dimension number based on the specified project, category, and account type.
    /// </summary>
    /// <param name = "_psaProjPostEmplIndirectProposalContract">
    ///     An instance of the <c>PSAProjPostEmplIndirectProposalContract</c> class.
    /// </param>
    /// <returns>
    ///     The ledger dimension that is used by the transaction, based on the parameters for posting.
    /// </returns>
    protected LedgerDimensionDefaultAccount indirectCreditAccountTurnover(PSAProjPostEmplIndirectProposalArgs _psaProjPostEmplIndirectProposalArgs)
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::RevenueAccount, _psaProjPostEmplIndirectProposalArgs.parmProjId(),
            _psaProjPostEmplIndirectProposalArgs.parmProjCategoryId(), 0, false, true, _psaProjPostEmplIndirectProposalArgs.parmTaxGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerIndirectAmount_prop</Name>
				<Source><![CDATA[
    public AmountCur ledgerIndirectAmount_prop(PSAIndirectComponentTrans   tProjindirectTrans)
    {
        Amount amount;

        if (this.parmIsCreditNote())
        {
            amount = -CurrencyExchangeHelper::amount(tProjindirectTrans.Amount, this.currencyIdSales());
        }
        else
        {
            amount = CurrencyExchangeHelper::amount(tProjindirectTrans.Amount, this.currencyIdSales());
        }
        return Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTurnover</Name>
				<Source><![CDATA[
    public void postTurnover()
    {
        PSAIndirectComponentTrans     tIndirectComponentTrans;
        LedgerVoucherTransObject      oLedgerTransObject;
        ProjTrans                     oProjTransIndirect;
        ProjCategoryId                sCategoryid;
        LedgerVoucherObject           ledgerVoucherObject;
        CurrencyExchangeHelper        exchangeRateHelper;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount        mergedLedgerDimension;
        AmountCur                     amountCur;
        ProjLedger                    tmpProjLedger;

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(this.exchRate());
        exchangeRateHelper.parmExchangeRate2(this.exchRateSecondary());

        while select tIndirectComponentTrans
               where tIndirectComponentTrans.TransId               == projTrans.transId()
        && tIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Invoice
        && tIndirectComponentTrans.ProjFundingSource     == ProjProposalJour::find(projTrans.proposalId()).FundingSource
        {
            sCategoryId        = PSAIndirectComponent::find(tIndirectComponentTrans.IndirectComponentId).ComponentCategory;
            oProjTransIndirect = ProjTrans::PSANewProjEmplIndirecTrans(tIndirectComponentTrans);
            amountCur          = -this.ledgerIndirectAmount_prop(tIndirectComponentTrans);
            ledgerOrigin       = ProjOrigin::Invoice;

            tmpProjLedger =  ProjLedger::newProjectSales(oProjTransIndirect,
                                projTrans.transId(),
                                this.parmTransactionOrigin(),
                                this.parmLedgerOrigin(),
                                this.parmElimination(),
                                tIndirectComponentTrans.ProjFundingSource);
            PSAProjPostEmplIndirectProposalArgs psaProjPostEmplIndirectProposalArgs = PSAProjPostEmplIndirectProposalArgs::construct();
            psaProjPostEmplIndirectProposalArgs.parmProjId(projTrans.projId());
            psaProjPostEmplIndirectProposalArgs.parmProjCategoryId(sCategoryId);
            psaProjPostEmplIndirectProposalArgs.parmTaxGroup(projTrans.taxGroup());            
            defaultLedgerDimension = this.parmLedgerDimension(this.indirectCreditAccountTurnover(psaProjPostEmplIndirectProposalArgs));

            // need to merge the default account with the default dimensions
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension(), ProjFundingSource::find(tIndirectComponentTrans.ProjFundingSource).DefaultDimension);
            
            oLedgerTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    this.indirectPostingTypeTurnover(),
                    mergedLedgerDimension,
                    this.currencyIdSales(),
                    amountCur,
                    exchangeRateHelper);

            oLedgerTransObject.parmQuantity(oProjTransIndirect.qty());
            oLedgerTransObject.parmProjLedger(tmpProjLedger);
            oLedgerTransObject.parmTransTxt(oProjTransIndirect.txt());
            ledgerVoucher.addTrans(oLedgerTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectPostingTypeTurnover</Name>
				<Source><![CDATA[
    protected LedgerPostingType indirectPostingTypeTurnover()
    {
        return LedgerPostingType::ProjTurnover;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>