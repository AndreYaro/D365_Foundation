<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogWorkspaceFilterStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailWorkspaceMyCatalogFilterStrategy</c> class applies a <c>SysIFilterStructureItem</c> class
/// to a <c>SysIQueryable</c> class. Org hierarchy filter is applied to the following queries:
/// <c>RetailMyOrAllCatalogs</c>, <c>RetailPublishedCatalogs</c>, <c>RetailCatalogsPendingApproval</c>, <c>RetailCatalogsFailedValidation</c>, <c>RetailCatalogsEffectiveInNextSevenDays</c>, <c>RetailCatalogsExpiringNextSevenDays</c>
/// in the Catalog Management Workspace.
/// </summary>
[
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailCatalogs)),
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailPublishedCatalogs)),
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailCatalogsPendingApproval)),
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailCatalogsFailedValidation)),
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailCatalogsEffectiveInNextSevenDays)),
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailCatalogsExpiringNextSevenDays))
]
public class RetailCatalogWorkspaceFilterStrategy extends SysFilterStructureStrategyQuery implements SysIFilterStructureStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// For Blank filter disable join for <c>RetailCatalogInternalOrg</c>, otherwise use query with channel filter.
    /// </summary>
    /// <param name = "_filterValueType">Channel Filter</param>
    /// <returns>true for channel filter</returns>
    protected boolean resolve(SysIFilterValueType _filterValueType)
    {
        boolean result = false;
        if (_filterValueType.parmType() == SysFilterValueTypeEnum::Integer)
        {
            if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(RecId))
            {
                QueryBuildDataSource retailCatalogInternalOrg = this.getQueryBuildDataSource(tableNum(RetailCatalogInternalOrg));
                QueryBuildDataSource omHierarchyRelationshipQdbs = this.getQueryBuildDataSource(tableNum(OMHierarchyRelationship));

                // if a filter is specified and is not blank then apply the filter. In the workspace filter implementation logic, a SysFilterOperator::Equal operator is used  if the filter value is not blank.
                if (filterStructureItem.parmOperator() == SysFilterOperator::Equal)
                {
                    retailCatalogInternalOrg.enabled(true);
                    this.addLinkFromTableToFilter(omHierarchyRelationshipQdbs, fieldNum(OMHierarchyRelationship, RecId));
                }
                else //if filter is is blank, then disable the datasource that is used to filter records by org hierachy filter value.
                {
                    retailCatalogInternalOrg.enabled(false);
                }
                result = true;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBuildDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>QueryBuildDataSource</c> object from the query.
    /// </summary>
    /// <param name = "_tableId">The table id of the datasource.</param>
    /// <returns>The <c>QueryBuildDataSource</c> object if found; otherwise throw an error.</returns>
    private QueryBuildDataSource getQueryBuildDataSource(TableId _tableId)
    {
        Query _query = this.query;
        QueryBuildDataSource qdbs = _query.dataSourceTable(_tableId);
        if (!qdbs)
        {
            error(strFmt("@SYS89000", tableId2Name(_tableId), _query.name()));
        }
        return qdbs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkFromTableToFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a link to the <c>SysFilterTable</c> table.
    /// </summary>
    /// <param name="_relatedTableDataSource">
    /// The <c>QueryBuildDataSource</c> class to which the link should be added.
    /// </param>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> class for which the link should be added.
    /// </param>
    /// <param name="_filterOperator">
    /// The <c>SysFilterOperator</c> used in the range.
    /// </param>
    public void addLinkFromTableToFilter(
        QueryBuildDataSource _relatedTableDataSource,
        FieldId _fieldId,
        SysFilterOperator _filterOperator = SysFilterOperator::Equal)
    {
        QueryBuildRange qbr = SysQueryBase::findOrCreateRange(_relatedTableDataSource, _fieldId);
        qbr.status(RangeStatus::Hidden);
        // ((targetTable.TargetField <operator> sysFilterTable.ValueField) OR (sysFilterTable.ValueResolutionMethod != SysFilterValueResolutionMethod::None))
        qbr.value(strfmt('(((%1.%2 %3 %4.%5) || (%4.%6 != %7)))',
            _relatedTableDataSource.name(),
            fieldId2Name(_relatedTableDataSource.table(), _fieldId),
            SysFilterOperatorHelper::operator2SqlStr(_filterOperator),
            filterDatasource.name(),
            fieldId2Name(filterMetadata.parmTypeId(), filterMetadata.parmValue(filterStructureItem.parmValueType().parmType()), filterStructureItem.parmId()),
            fieldId2Name(filterMetadata.parmTypeId(), filterMetadata.parmValueResolutionMethod(), filterStructureItem.parmId()),
            int2Str(SysFilterValueResolutionMethod::None)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>