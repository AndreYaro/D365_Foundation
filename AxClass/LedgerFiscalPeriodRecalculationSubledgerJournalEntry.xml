<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalPeriodRecalculationSubledgerJournalEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(classStr(LedgerFiscalPeriodRecalculation), classStr(LedgerFiscalPeriodRecalculationSubledgerJournalEntry))]
[Export(identifierStr(Dynamics.AX.Application.LedgerFiscalPeriodRecalculation))]
internal final class LedgerFiscalPeriodRecalculationSubledgerJournalEntry extends LedgerFiscalPeriodRecalculation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runRecalculation</Name>
				<Source><![CDATA[
    internal void runRecalculation()
    {
        if (this.calendarPeriodExist())
        {
            ttsbegin;

            this.updateJournalEntry();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerFiscalPeriodRecalculationClassName</Name>
				<Source><![CDATA[
    internal ClassName getLedgerFiscalPeriodRecalculationClassName()
    {
        return classStr(LedgerFiscalPeriodRecalculationSubledgerJournalEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarPeriodExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the calendar periods exist for the existing transaction.
    /// </summary>
    /// <returns>
    /// true if all periods exists; otherwise, false.
    /// </returns>
    private boolean calendarPeriodExist()
    {
        LedgerRecId ledgerRecId = Ledger::current();
        FiscalCalendar fiscalCalendar = FiscalCalendar::find(Ledger::fiscalCalendar());
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear fiscalCalendarYear;
        SubledgerJournalEntry subLedgerJournalEntry;
        AccountingEvent accountingEvent;
        boolean periodExist = true;

        while select subLedgerJournalEntry
            where subLedgerJournalEntry.Ledger == ledgerRecId
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subLedgerJournalEntry.AccountingEvent
            exists join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == subLedgerJournalEntry.FiscalCalendarPeriod
            notexists join fiscalCalendarYear
                where fiscalCalendarYear.FiscalCalendar == fiscalCalendar.RecId
                    && fiscalCalendarYear.StartDate <= accountingEvent.AccountingDate
                    && fiscalCalendarYear.EndDate >= accountingEvent.AccountingDate
        {
            periodExist = false;
            warning(strfmt("@SYS330263", accountingEvent.AccountingDate, fiscalCalendar.CalendarId));
        }

        return periodExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>FiscalCalendarPeriod</c> field in <c>updateJournalEntry</c> records, depending on
    /// the fiscal calendar of the ledger.
    /// </summary>
    private void updateJournalEntry()
    {
        FiscalCalendarPeriod fiscalCalendarPeriodNew;
        FiscalCalendarPeriod fiscalCalendarPeriodCurrent;
        FiscalCalendarYear fiscalCalendarYear;
        SubledgerJournalEntry subLedgerJournalEntry;
        AccountingEvent accountingEvent;
        LedgerRecId calcLedgerRecId = Ledger::current();
        FiscalCalendarRecId calcFiscalCalendarRecId = Ledger::fiscalCalendar();

        // improve performance on recordset updates
        this.setAllSkip(subLedgerJournalEntry);

        // handles Operating period type
        update_recordset subLedgerJournalEntry
            setting FiscalCalendarPeriod = fiscalCalendarPeriodNew.RecId
            where subLedgerJournalEntry.Ledger == calcLedgerRecid
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subLedgerJournalEntry.AccountingEvent
            join fiscalCalendarPeriodCurrent
                where fiscalCalendarPeriodCurrent.RecId == subLedgerJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriodCurrent.Type == FiscalPeriodType::Operating
            join fiscalCalendarYear
                where fiscalCalendarYear.FiscalCalendar == calcFiscalCalendarRecId
                    && fiscalCalendarYear.StartDate <= accountingEvent.AccountingDate
                    && fiscalCalendarYear.EndDate >= accountingEvent.AccountingDate
            join fiscalCalendarPeriodNew
                where fiscalCalendarPeriodNew.FiscalCalendarYear == fiscalCalendarYear.RecId
                    && fiscalCalendarPeriodNew.StartDate <= accountingEvent.AccountingDate
                    && fiscalCalendarPeriodNew.EndDate >= accountingEvent.AccountingDate
                    && fiscalCalendarPeriodNew.Type == fiscalCalendarPeriodCurrent.Type
                    && fiscalCalendarPeriodNew.RecId != subLedgerJournalEntry.FiscalCalendarPeriod;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>