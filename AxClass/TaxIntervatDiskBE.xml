<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntervatDiskBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxIntervatDiskBE extends TaxReportAdjustTrans implements BatchRetryable
{
    DialogField                 dialogIntervatFileName,
                                dialogReplacedDeclaration,
                                dialogErBinding;

    TmpTaxReportById            tmpTaxReportById;
    TaxCalcReportBEFields       taxCalcReportBEFields;
    Map                         taxValues;
    ERFileName                  intervatFileName;
    TaxIntervatDeclarationRef   replacedDeclaration;
    ERFormatMappingId           erBinding;
    const ModelName             modelName = 'INTERVAT model';

    #TaxReportingCodesBE
    #TaxIntervatBE

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        intervatFileName,
        replacedDeclaration,
        erBinding
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if this class can be executed in batch.
    /// </summary>
    /// <returns>
    ///    True if can run this class in batch; otherwise false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(this.dialogHeader(), this);

        updateNow           = false;

        dialogTaxPeriod     = dialog.addField(extendedTypeStr(TaxPeriod));
        dialogTaxPeriod.value(taxPeriod);

        dialogFromDate      = dialog.addField(extendedTypeStr(TaxPeriodDate), "@SYS5209", "@SYS12292");

        dialogTransDate     = dialog.addField(extendedTypeStr(TransDate), "@SYS67", "@SYS60729");
        dialogTransDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        dialogIntervatFileName=dialog.addField(extendedTypeStr(ERFileName), "@SYS4047", "@SYS21196");

        dialogUpdate        = dialog.addField(enumStr(NoYes), "@SYS2934", "@SYS17200");

        dialogPrintReport = dialog.addFieldValue(
            enumStr(NoYes),
            printReport,
            "@Tax_ReportSalesTaxForSettlementPeriod:PrintReport",
            "@Tax_ReportSalesTaxForSettlementPeriod:PrintReportHelpText");
        this.updatePrintReportControl(taxPeriod);

        dialog.addGroup("@SYS84714");
        dialogReplacedDeclaration = dialog.addFieldValue(extendedTypeStr(TaxIntervatDeclarationRef), replacedDeclaration, "@SYS4081503", "@SYS4081504");

        dialog.addGroup("@AccountsReceivable:ElectronicReporting");
        dialogErBinding     = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), erBinding);
        dialogErBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                                                             methodStr(TaxIntervatDiskBE, erBinding_lookup),
                                                             this);
        dialogErBinding.control().mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            this.parmFilename(dialogIntervatFileName.value());
            this.parmReplacedDeclaration(dialogReplacedDeclaration.value());
            this.parmERBinding(dialogErBinding.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report.
    /// </summary>
    public void printout()
    {
        TaxIntervatGeneral   taxIntervatGeneral;
        TaxPeriodHead        taxPeriodHead;
        NumberSeq            numberSeqIntervat = NumberSeq::newGetNum(TaxParameters::numRefIntervatId_BE(), false);
        CompanyInfo          companyInfo = CompanyInfo::find();

        Args args = new Args();
        args.caller(this);
        args.record(taxReportPeriod);

        taxCalcReportBEFields = TaxCalcReportBEFields::newTaxReport_BE(args.caller());

        if (this.checkfields() && taxCalcReportBEFields.calc(true))
        {
            tmpTaxReportById.setTmpData(taxCalcReportBEFields.parmTmpTaxReportById());

            taxIntervatGeneral.TaxIntervatCompensation              = taxCalcReportBEFields.parmReImbursement() == NoYes::Yes? NoYes::Yes : NoYes::No;
            taxIntervatGeneral.TaxIntervatPaymentOrder              = taxCalcReportBEFields.parmPaymentFormOrder() == NoYes::Yes? NoYes::Yes : NoYes::No;
            taxIntervatGeneral.TaxIntervatName                      = companyInfo.name();
            taxIntervatGeneral.Location                             = LogisticsPostalAddress::getLocation(companyInfo.postalAddress().RecId);
            taxIntervatGeneral.TaxIntervatPreparationDate           = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            taxIntervatGeneral.NihilAnnualListing                   = taxCalcReportBEFields.parmNihilAnnualListing();
            taxIntervatGeneral.TaxIntervatCompanyPhone              = companyInfo.phone();
            taxIntervatGeneral.TaxIntervatCompanyEMail              = companyInfo.email();
            taxIntervatGeneral.TaxIntervatReplacementDeclarationRef = replacedDeclaration;
            taxIntervatGeneral.AdjustedValue                        = taxCalcReportBEFields.parmAdjustedValue();
            taxIntervatGeneral.SpecialPercentageB1                  = taxCalcReportBEFields.parmBoxNumberB1();
            taxIntervatGeneral.SpecialPercentageB2                  = taxCalcReportBEFields.parmBoxNumberB2();
            taxIntervatGeneral.SpecialPercentageB3                  = taxCalcReportBEFields.parmBoxNumberB3();
            taxIntervatGeneral.SpecialPercentageB4                  = taxCalcReportBEFields.parmBoxNumberB4();
            taxIntervatGeneral.SpecialPercentageB5                  = taxCalcReportBEFields.parmBoxNumberB5();

            select firstonly QtyUnit, PeriodUnit from taxPeriodHead where taxPeriodHead.TaxPeriod == taxPeriod;

            if ((taxPeriodHead.QtyUnit == 1) && (taxPeriodHead.PeriodUnit == PeriodUnit::Month))
            {
                taxIntervatGeneral.TaxIntervatFrequency = TaxIntervatFrequency::Monthly;
            }
            else
            {
                taxIntervatGeneral.TaxIntervatFrequency = TaxIntervatFrequency::Quarterly;
            }

            taxIntervatGeneral.EnterpriseNumber     = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, taxCalcReportBEFields.parmToDate());
            taxIntervatGeneral.TaxIntervatVatNumber = companyInfo.CoRegNum;
            taxIntervatGeneral.TaxIntervatVatPeriod = taxCalcReportBEFields.parmTaxPeriod();
            taxIntervatGeneral.TaxIntervatStartDate = taxCalcReportBEFields.parmFromDate();
            taxIntervatGeneral.TaxIntervatEndDate   = taxCalcReportBEFields.parmToDate();
            taxIntervatGeneral.TaxIntervatId        = numberSeqIntervat.num();
            taxIntervatGeneral.insert();

            this.calculateFields(taxIntervatGeneral);

            ttsbegin;
            taxIntervatGeneral.ERFormatMappingId = erBinding;
            taxIntervatGeneral.TaxIntervatFilename = this.runElectronicReporting(taxIntervatGeneral, intervatFileName);
            taxIntervatGeneral.update();
            ttscommit;

            if (taxIntervatGeneral.TaxIntervatFilename)
            {
                TaxIntervatDiskBE::openFileFromArchive(taxIntervatGeneral);
            }

            info(strFmt("@SYS55751",  taxIntervatGeneral.TaxIntervatFilename, taxIntervatGeneral.TaxIntervatStartDate, taxIntervatGeneral.TaxIntervatEndDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container packedClassSuper;

        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedClassSuper] = _packedClass;
                if (packedClassSuper)
                {
                    return super(packedClassSuper);
                }

                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the <c>updateNow</c> variable.
    /// </summary>
    /// <returns>
    ///    The value of the <c>updateNow</c> variable.
    /// </returns>
    public NoYes update()
    {
        return this.taxReported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxIntervatDiskBE construct()
    {
        return new TaxIntervatDiskBE();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args _args)
    {
        TaxReport taxIntervatDisk = TaxIntervatDiskBE::construct();

        if (taxIntervatDisk.runDialogParametersAndParseArgs(_args))
        {
            if (taxIntervatDisk.canRunBatch())
            {
                taxIntervatDisk.runBatch();
            }
            else
            {
                taxIntervatDisk.runOperation();

                if (taxIntervatDisk.canDisplayReport())
                {
                    taxIntervatDisk.printout();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFileFromArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open file associated with record from archive.
    /// </summary>
    /// <param name = "_taxIntervatGeneral">Record to search the report for.</param>
    public static void openFileFromArchive(TaxIntervatGeneral _taxIntervatGeneral)
    {
        if (_taxIntervatGeneral)
        {
            // Find the records associated with the parameter data area, table, and record ID
            DocuRef docuRef = DocuRef::findTableIdRecId(CompanyInfo::find().DataArea, _taxIntervatGeneral.TableId, _taxIntervatGeneral.RecId);
            if (docuRef && docuRef.isValueAttached())
            {
                TaxIntervatDiskBE::navigateToFile(docuRef);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCreateFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-creates existing report.
    /// </summary>
    /// <param name = "_taxIntervatGeneral"></param>
    public static void reCreateFile(TaxIntervatGeneral _taxIntervatGeneral)
    {
        if (_taxIntervatGeneral)
        {
            TaxIntervatDiskBE taxIntervatDiskBE = new TaxIntervatDiskBE();
            taxIntervatDiskBE.reCalculateFields(_taxIntervatGeneral);
            taxIntervatDiskBE.parmERBinding(_taxIntervatGeneral.ERFormatMappingId); 

            _taxIntervatGeneral.deleteAllConnectedDocuments();
            
            if (taxIntervatDiskBE.runElectronicReporting(_taxIntervatGeneral, _taxIntervatGeneral.TaxIntervatFilename))
            {
                TaxIntervatDiskBE::openFileFromArchive(_taxIntervatGeneral);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERBinding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets electronic reporting binding for the report.
    /// </summary>
    /// <param name = "_erBinding">Electronic reporting binding.</param>
    /// <returns>ER binding.</returns>
    public RecId parmERBinding(RecId _erBinding = erBinding)
    {
        erBinding = _erBinding;
        return erBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacedDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets replaced declaration for the report.
    /// </summary>
    /// <param name = "_replacedDeclaration">Replaced declaration.</param>
    /// <returns>Replaced declaration.</returns>
    public TaxIntervatDeclarationRef parmReplacedDeclaration(TaxIntervatDeclarationRef _replacedDeclaration = replacedDeclaration)
    {
        replacedDeclaration = _replacedDeclaration;
        return replacedDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets filename for the report.
    /// </summary>
    /// <param name = "_filename">Filename.</param>
    /// <returns>Flename.</returns>
    public ERFileName parmFilename(ERFileName _filename = intervatFileName)
    {
        intervatFileName = _filename;
        return intervatFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header of this dialog.
    /// </summary>
    /// <returns>
    /// Returns the header of this dialog.
    /// </returns>
    protected Caption dialogHeader()
    {
        return strFmt("@Tax:TaxReportTitleFormat", "@SYS92374", "@SYS60665");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runElectronicReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs GER to create report.
    /// </summary>
    /// <param name = "_taxIntervatGeneral">Record to create report for.</param>
    /// <param name = "_intervatFileName">Filename.</param>
    /// <returns>Filename.</returns>
    private str runElectronicReporting(TaxIntervatGeneral _taxIntervatGeneral, ERFileName _intervatFileName = intervatFileName)
    {
        var queryDetail = new Query();
        var dsDetail = queryDetail.addDataSource(tableNum(TaxIntervatDetail));
        dsDetail.addSortField(fieldNum(TaxIntervatDetail, TaxIntervatTaxBox));
        dsDetail.addRange(fieldNum(TaxIntervatDetail, TaxIntervatGeneral)).value(int642Str(_taxIntervatGeneral.RecId));

        var queryGeneral = new Query();
        var dsGeneral = queryGeneral.addDataSource(tableNum(TaxIntervatGeneral));
        dsGeneral.addRange(fieldNum(TaxIntervatGeneral, TaxIntervatId)).value(_taxIntervatGeneral.TaxIntervatId);

        var fileDestination = ERObjectsFactory::createFileDestinationAttachmentWithOtherDocuType(_taxIntervatGeneral);
 
        return ERObjectsFactory::createFormatMappingRunByFormatMappingId(erBinding, _intervatFileName)
            .withFileDestination(fileDestination)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addQuery(tableNum(TaxIntervatGeneral), queryGeneral)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt()))
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addQuery(tableNum(TaxIntervatDetail), queryDetail)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt()))
            .withCreatingObjectParameter(modelName, classStr(TaxIntervatDiskBE), this).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates user to the document attachment for download.
    /// </summary>
    /// <param name="_docuRef">The DocuRef record to open.</param>
    private static void navigateToFile(DocuRef _docuRef)
    {
        Browser br = new Browser();
        str url = TaxIntervatDiskBE::getPublicUrl(_docuRef);

        if (url)
        {
            br.navigate(url, false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPublicUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a public URL that points at the provided document reference.
    /// </summary>
    /// <param name="_ref">A document reference that has an attached file or URL</param>
    /// <returns>A URL that can be used to navigate to the attached URL or download the attached file.</returns>
    private static str getPublicUrl(DocuRef _ref)
    {
        str url = null;
        if (_ref.isValueAttached())
        {
            var docuValue = _ref.docuValue();
            url = docuValue.Path;

            if (!url || docuValue.Type == DocuValueType::Others)
            {
                str accessToken = DocumentManagement::createAccessToken(_ref);
                url = Microsoft.Dynamics.AX.Framework.FileManagement.URLBuilderUtilities::GetDownloadUrl(docuValue.FileId, accessToken);
            }
        }

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erBinding_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup to find available report formats.
    /// </summary>
    /// <param name = "_formControl">Control to show search results/</param>
    /// <returns>ER Binding.</returns>
    private Common erBinding_lookup(FormReferenceControl _formControl)
    {
        return ERFormatMappingTable::lookup(_formControl, modelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFields</Name>
				<Source><![CDATA[
    private void calculateFields(TaxIntervatGeneral _taxIntervatGeneral, boolean _update = false)
    {
        const int Box54 = 54;
        const int Box55 = 55;
        const int Box56 = 56;
        const int Box57 = 57;
        const int Box59 = 59;
        const int Box61 = 61;
        const int Box62 = 62;
        const int Box63 = 63;
        const int Box64 = 64;
        const int Box71 = 71;
        const int Box72 = 72;
        const int Box91 = 91;
        const int Box100 = 100;
        const int Box101 = 101;

        const str Box71str = '71';
        const str Box91str = '91';
        const str Box100str = '00';
        const str NullValueStr = '0.00';

        TaxCorrectionsBE      taxCorrectionsBE;
        TaxIntervatDetail     taxIntervatDetail;
        int                   id, i, numberOfTaxBoxes;
        real                  firstTaxGroupAmount, secondTaxGroupAmount;
        real                  taxAmount;
        container             firstTaxGroup  = [Box54, Box55, Box56, Box57, Box61, Box63];
        container             secondTaxGroup = [Box59, Box62, Box64];
        MapIterator           mapIterator;
        RecordInsertList      ril = new RecordInsertList(tableNum(TaxIntervatDetail));

        real calculateTotals(container _totalCodes)
        {
            real res;

            numberOfTaxBoxes = conLen(_totalCodes);
            for (i = 1; i <= numberOfTaxBoxes;i++)
            {
                id = conPeek(_totalCodes,i);
                if (taxValues.exists(id))
                    res += taxValues.lookup(id);
            }
            return res;
        }

        void insertOrUpdate(TaxBox _fieldNum, str _taxAmount)
        {
            if (_update)
            {
                taxIntervatDetail = TaxIntervatDetail::findByDetails(_fieldNum,_taxIntervatGeneral.RecId, true);
            }
            if (_update && taxIntervatDetail.RecId)
            {
                if (str2num(_taxAmount) <= 0)
                    taxIntervatDetail.delete();
                else
                {
                    taxIntervatDetail.TaxIntervatTaxValue           = str2num(_taxAmount);
                    taxIntervatDetail.update();
                }
            }
            else if (str2num(_taxAmount) > 0 || _fieldNum == Box91str)
            {
                taxIntervatDetail.TaxIntervatGeneral            = _taxIntervatGeneral.RecId;
                taxIntervatDetail.TaxIntervatTaxBox             = _fieldNum;
                taxIntervatDetail.TaxIntervatTaxValue           = str2num(_taxAmount);
                ril.add(taxIntervatDetail);
            }
        }

        ttsbegin;
        //create and initialize new map taxtaxAmounts

        taxValues = new Map(Types::Integer,Types::Real);

        //Select the taxAmounts of the tax fields and put them in the map 'taxtaxAmounts'
        while select TaxReportField, Amount
              from   tmpTaxReportById
              order  by TaxReportField
              where  tmpTaxReportById.TaxReportField < Box101
                  && tmpTaxReportById.Amount != 0
        {
            if (tmpTaxReportById.TaxReportField == Box61 || tmpTaxReportById.TaxReportField == Box62)
            {
                tmpTaxReportById.Amount = abs(tmpTaxReportById.Amount);
            }

            taxValues.insert(tmpTaxReportById.TaxReportField,tmpTaxReportById.Amount);
        }

        //Select all corrections for this taxperiod and between the given startday, and endday, and update the array 'taxtaxAmounts'
        while select sum(Amount)
              from   taxCorrectionsBE
              group  by Field
              where  taxCorrectionsBE.TaxPeriod == _taxIntervatGeneral.TaxIntervatVatPeriod
                  && taxCorrectionsBE.StartDate >= _taxIntervatGeneral.TaxIntervatStartDate
                  && taxCorrectionsBE.EndDate   <= _taxIntervatGeneral.TaxIntervatEndDate
        {
            taxAmount = 0;
            if (taxValues.exists(str2int(taxCorrectionsBE.Field)))
                taxAmount = taxValues.lookup(str2int(taxCorrectionsBE.Field));
            taxAmount += taxCorrectionsBE.Amount;
            taxValues.insert(str2int(taxCorrectionsBE.Field),taxAmount);
        }

        //Check for negative values
        MapEnumerator me = taxValues.getEnumerator();
        while (me.moveNext())
        {
            if (me.currentKey() < Box101 && me.currentValue() < 0)
            {
                taxValues.insert(me.currentKey(), 0.00);
            }
        }

        //recalculate totals with taxcorrections included
        firstTaxGroupAmount  = calculateTotals(firstTaxGroup);
        secondTaxGroupAmount = calculateTotals(secondTaxGroup);

        taxAmount = firstTaxGroupAmount - secondTaxGroupAmount;

        taxValues.insert(Box71, taxAmount > 0 ? taxAmount      : 0);
        taxValues.insert(Box72, taxAmount < 0 ? abs(taxAmount) : 0);

        if (!taxValues.exists(Box91))
            taxValues.insert(Box91, 0.00);

        //insert the taxtaxAmounts in intervatDetail table
        mapIterator = new MapIterator(taxValues);
        while (mapIterator.more())
        {
            [id,taxAmount] = mapIterator.valuePair();
            if (id != Box91 && id != Box71 )
                insertOrUpdate(id != Box100 ? num2Str0(id, 2) : Box100str, num2str(taxAmount, 0, 2, 1, 0));
            mapIterator.next();
        }

        //special case 71, 72
        taxAmount = taxValues.lookup(Box71);

        if ((taxAmount == 0) && (taxValues.lookup(Box72) == 0))
        {
            insertOrUpdate(Box71str, NullValueStr);
        }
        else if (taxAmount != 0)
        {
            insertOrUpdate(Box71str, num2str(taxAmount, 0, 2, 1, 0));
        }

        //special case 91
        if (mthOfYr(_taxIntervatGeneral.TaxIntervatStartDate) == MonthsOfYear::December)
        {
            insertOrUpdate(Box91str ,taxCalcReportBEFields.parmVATDisbursement() == '' ? '' : num2str(taxValues.lookup(Box91), 0, 2, 1, 0));
        }
        //perform insert operation
        ril.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCalculateFields</Name>
				<Source><![CDATA[
    private void reCalculateFields(TaxIntervatGeneral _taxIntervatGeneral)
    {
        taxCalcReportBEFields = new TaxCalcReportBEFields();

        if (_taxIntervatGeneral)
        {
            taxCalcReportBEFields.parmTaxPeriod(_taxIntervatGeneral.TaxIntervatVatPeriod);
            taxCalcReportBEFields.parmFromDate(_taxIntervatGeneral.TaxIntervatStartDate);
            taxCalcReportBEFields.parmToDate(_taxIntervatGeneral.TaxIntervatEndDate);
            taxCalcReportBEFields.parmTransDate(_taxIntervatGeneral.TaxIntervatPreparationDate);
            taxCalcReportBEFields.parmTaxRepVerison(TaxRepVersion::Original);
            taxCalcReportBEFields.parmTaxRepCounter(0);
            taxCalcReportBEFields.parmReImbursement(_taxIntervatGeneral.TaxIntervatCompensation);
            TaxCalcReportBEFields.parmNihilAnnualListing(_taxIntervatGeneral.NihilAnnualListing);
            
            taxCalcReportBEFields.calc(false);
            tmpTaxReportById.setTmpData(taxCalcReportBEFields.parmTmpTaxReportById());

            this.calculateFields(_taxIntervatGeneral, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkfields</Name>
				<Source><![CDATA[
    private boolean checkfields()
    {
        TaxIntervatGeneral      taxIntervatGeneral = TaxIntervatGeneral::findByTaxPeriodDate(fromDate, toDate, taxPeriod);
        boolean                 checkStatus = true;

        if (taxIntervatGeneral)
        {
            checkStatus = checkFailed("@SYS92267");
        }

        if (!CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, toDate) && checkStatus)
        {
            checkStatus = checkFailed(strFmt("@SYS26332", TaxRegistrationTypesList::UID));
        }

        if (!erBinding && checkStatus)
        {
            checkStatus = checkFailed(strFmt("@SYS26332", new SysDictType(extendedTypeNum(ERFormatMappingId)).label()));
        }

        return checkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOtherAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the base logic of this method in the parent class and updates or inserts <c>TaxReportExtraFieldsBE</c> record.
    /// </summary>
    /// <param name = "_defaultDimension">The default dimension.</param>
    /// <returns>Tax amount calculated by the base logic of this method in the parent class.</returns>
    public TaxAmount settleOtherAmounts(DimensionDefault _defaultDimension)
    {
        TaxAmount ret = super(_defaultDimension);

        TaxReportExtraFieldsBE::setVoucherAndDateByTaxPeriod(
            taxPeriod,
            fromDate,
            toDate,
            voucher,
            transactionDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>