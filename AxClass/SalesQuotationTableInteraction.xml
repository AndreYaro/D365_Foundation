<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationTableInteraction</c> class is the interaction class for the sales quotation
/// form.
/// </summary>
class SalesQuotationTableInteraction
    extends PageInteraction
{
    SalesQuotationTableForm                 salesQuotationTableForm;

    SalesQuotationTableInteractionHelper    salesQuotationTableInteractionHelper;

    SalesQuotationTable                     salesQuotationTable;
    SalesQuotationLine                      salesQuotationLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableCommonActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables common header and line level menu items
    /// </summary>
    protected void enableCommonActions()
    {
        // Header Update actions
        this.enableControl(formControlStr(SalesQuotationTable, buttonUpdateQuotation), salesQuotationTableInteractionHelper.parmUpdateQuotationEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, buttonUpdateConfirmation), salesQuotationTableInteractionHelper.parmUpdateConfirmationEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControl</Name>
				<Source><![CDATA[
    private void enableControl(str _formControlStr, boolean _enabled)
    {
        this.page().actionPaneControlEnabled(_formControlStr, _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayControl</Name>
				<Source><![CDATA[
    private void displayControl(str _formControlStr, boolean _visible)
    {
        this.page().actionPaneControlVisible(_formControlStr, _visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    protected void enableHeaderActions()
    {
        salesQuotationTableInteractionHelper = SalesQuotationTableInteractionHelper::construct();
        salesQuotationTableInteractionHelper.initHeaderActions(salesQuotationTable);

        this.enableCommonActions();
        this.enableHeaderSalesQuotationTabActions();
        this.enableHeaderQuoteTabActions();
        this.enableHeaderGeneralTabActions();
        this.enableHeaderFollowUpTabActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFollowUpTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level follow up tab menu items.
    /// </summary>
    protected void enableHeaderFollowUpTabActions()
    {
        // FollowUpStatus (Generate)
        this.enableControl(formControlStr(SalesQuotationTable, buttonUpdateLost), salesQuotationTableInteractionHelper.parmUpdateLostEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, buttonUpdateCancelled), salesQuotationTableInteractionHelper.parmUpdateCancelledEnabled());

        // FollowUpModify
        this.enableControl(formControlStr(SalesQuotationTable, buttonConvert2Customer), salesQuotationTableInteractionHelper.parmCanConvert2Customer());
        this.enableControl(formControlStr(SalesQuotationTable, SalesQuotationChangeReasonCode), salesQuotationTableInteractionHelper.parmChangeReasonCodeEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneralTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level general tab menu items.
    /// </summary>
    protected void enableHeaderGeneralTabActions()
    {
        // Activities
        this.enableControl(formControlStr(SalesQuotationTable, smmActivities_quotationInquiry), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Related information
        this.enableControl(formControlStr(SalesQuotationTable, AttachedSalesOrders), salesQuotationTableInteractionHelper.parmAttachedSalesOrdersEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, ButtonAlternativeQuotations), salesQuotationTableInteractionHelper.parmAlternativeQuotationsEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, smmDocuments), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Setup
        this.enableControl(formControlStr(SalesQuotationTable, PrintMgmt), salesQuotationTableInteractionHelper.parmIsNotTemplate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderQuoteTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level quote tab menu items.
    /// </summary>
    protected void enableHeaderQuoteTabActions()
    {
        // Journals
        this.enableControl(formControlStr(SalesQuotationTable, buttonJournalQuotation), salesQuotationTableInteractionHelper.parmJournalQuotationEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, CustQuotationJournalConfirmation), salesQuotationTableInteractionHelper.parmJournalConfirmationEnabled());

        // Charges
        this.enableControl(formControlStr(SalesQuotationTable, MarkupTrans_HeadingQuotation), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Tax
        this.enableControl(formControlStr(SalesQuotationTable, TaxTransSource), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Calculate
        this.enableControl(formControlStr(SalesQuotationTable, buttonEndDiscAction), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(SalesQuotationTable, MultiLnDiscAction), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(SalesQuotationTable, SuppItemCalc_QuotationHeader), salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTableInteractionHelper.parmButtonSupplementaryItemsVisible());
        this.enableControl(formControlStr(SalesQuotationTable, AutoCharges), salesQuotationTableInteractionHelper.parmButtonAutoChargesEnabled());
        this.displayControl(formControlStr(SalesQuotationTable, AutoCharges), salesQuotationTableInteractionHelper.parmButtonAutoChargesVisible());

        // Analysis
        this.enableControl(formControlStr(SalesQuotationTable, SalesQuotationPriceSimHeader), salesQuotationTableInteractionHelper.parmIsNotTemplate() && SalesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed);

        // Accounts
        this.enableControl(formControlStr(salesQuotationTable, Customer), !salesQuotationTableInteractionHelper.parmIsProspect());
        this.enableControl(formControlStr(salesQuotationTable, businessRelationShip), salesQuotationTableInteractionHelper.parmIsProspect());
        this.enableControl(formControlStr(SalesQuotationTable, priceDiscActual), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(SalesQuotationTable, ContactPerson), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Bank
        this.enableControl(formControlStr(SalesQuotationTable, BankLGRequestForm), salesQuotationTableInteractionHelper.parmBankLGRequestFormEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderSalesQuotationTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level sales quotation tab menu items.
    /// </summary>
    protected void enableHeaderSalesQuotationTabActions()
    {
        // Copy
        this.enableControl(formControlStr(SalesQuotationTable, buttonCopyAllHeader), salesQuotationTableInteractionHelper.parmMayQuotationBeCopied());

         // View
        this.enableControl(formControlStr(SalesQuotationTable, SalesQuotationTotals), salesQuotationTableInteractionHelper.parmQuotationNotConfirmed());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    protected void enableLineActions()
    {
        salesQuotationTableInteractionHelper.initLineActions(salesQuotationTable, salesQuotationLine);

        this.enableCommonActions();
        this.enableLineUpdateActions();
        this.enableLineFunctionActions();
        this.enableLineInventoryActions();

        // Delivery actions
        this.enableControl(formControlStr(SalesQuotationTable, SalesAvailableDlvDatesLines),
            salesQuotationTableInteractionHelper.parmAvailableDlvDateLineEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, LineViewSalesAvailableDlvDatesLines),
            salesQuotationTableInteractionHelper.parmAvailableDlvDateLineEnabled());

        // PC actions
        this.enableLinePCActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level function menu items.
    /// </summary>
    protected void enableLineFunctionActions()
    {
        this.enableControl(formControlStr(SalesQuotationTable, SalesQuotationCopyAllLines),
            salesQuotationTableInteractionHelper.parmMayQuotationBeCopied());

        this.enableControl(formControlStr(SalesQuotationTable, SalesQuickQuote),
            salesQuotationTableInteractionHelper.parmMayQuotationBeCopied());
        this.enableControl(formControlStr(SalesQuotationTable, AddLines),
            salesQuotationTableInteractionHelper.parmMayQuotationBeCopied());

        this.enableControl(formControlStr(SalesQuotationTable, buttonDeliverySchedule),
            salesQuotationTableInteractionHelper.parmDeliveryScheduleEnabled());

        this.enableControl(formControlStr(SalesQuotationTable, SalesQuotationPriceSim),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());

        this.enableControl(formControlStr(SalesQuotationTable, SuppItemCalc_Quotation),
            !salesQuotationTableInteractionHelper.parmIsCategoryBasedLine() && salesQuotationTableInteractionHelper.parmButtonSupplementaryItemsVisible());

        this.enableControl(formControlStr(SalesQuotationTable, MarkupTrans_LineQuotation),
            salesQuotationTableInteractionHelper.parmMiscChargesEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInventoryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level inventory menu items.
    /// </summary>
    protected void enableLineInventoryActions()
    {
        // Action pane strip
        this.enableControl(formControlStr(SalesQuotationTable, buttonLineInventTrans),
            salesQuotationTableInteractionHelper.parmLineInventTransEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, buttonLineInventOnHand),
            salesQuotationTableInteractionHelper.parmLineInventOnHandEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, buttonLineInventLot),
            salesQuotationTableInteractionHelper.parmLineInventTransEnabled());
        this.enableControl(formControlStr(SalesQuotationTable, InventDimTracking),
            salesQuotationTableInteractionHelper.parmLineInventTransEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLinePCActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level Product Builder configuration buttons.
    /// </summary>
    public void enableLinePCActions()
    {
        this.enableControl(formControlStr(SalesQuotationTable, pcExecute), salesQuotationTableInteractionHelper.parmPCExecuteEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineUpdateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level update menu items.
    /// </summary>
    protected void enableLineUpdateActions()
    {
        this.enableControl(formControlStr(SalesQuotationTable, BOMPriceCalc),
            salesQuotationTableInteractionHelper.parmBOMCalculationsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesQuotationTableInteraction</c> class by using the active
    /// records for the form.
    /// </summary>
    private void init()
    {
        salesQuotationTable         = this.page().activeRecord('SalesQuotationTable');
        salesQuotationLine          = this.page().activeRecord('SalesQuotationLine');

        salesQuotationTableInteractionHelper = SalesQuotationTableInteractionHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active sales quotation order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesQuotationLine', 'selectionChanged')]
    public void salesQuotationLine_DS_selectionChanged()
    {
        this.init();
        this.enableLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active sales quotation order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesQuotationTable', 'selectionChanged')]
    public void salesQuotationTable_DS_selectionChanged()
    {
        this.init();
        this.enableHeaderActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>