<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLabelHistoryPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used for the printing of label history records.
/// </summary>
class WHSWaveLabelHistoryPrint
{
    private  PrinterName            printerName;
    private  WHSWaveLabelUpdate     update;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        if (!_args.dataset() || _args.record())
        {
            Error::missingFormActiveBuffer(_args.callerName());
        }

        switch(_args.dataset())
        {
            case tableNum(WHSLoadTable):
            case tableNum(WHSShipmentTable):
            case tableNum(WHSWaveTable):
            case tableNum(WHSWaveLabelHistory):
            case tableNum(WHSWaveLabel):
                break;

            default:
                error::wrongUseOfFunction(classStr(WHSWaveLabelHistoryPrint));
        }

        WHSWaveLabelHistoryPrint labelHistoryPrint = WHSWaveLabelHistoryPrint::construct();

        Common record = _args.record();
        
        labelHistoryPrint.dialog(record);

        if (FormDataUtil::isFormDataSource(record))
        {
            FormDataSource recordDataSource = FormDataUtil::getFormDataSource(record) as FormDataSource;

            MultiSelectionHelper    multiSelect = MultiSelectionHelper::construct();
        
            multiSelect.parmDatasource(recordDataSource);

            if (WHSWaveLabelBatchPrintingFlight::instance().isEnabled())
            {
                using (var batchedLabelPrint = WhsBatchedDocumentRoutingContext::construct())
                {
                    labelHistoryPrint.printLabelDataSource(multiSelect);
                    batchedLabelPrint.printBatchedLabels();
                }
            }
            else
            {
                labelHistoryPrint.printLabelDataSource(multiSelect);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelDataSource</Name>
				<Source><![CDATA[
    private void printLabelDataSource(MultiSelectionHelper _multiSelect)
    {
        WHSShipmentTable    shipmentTable;
        WHSWaveLabelHistory labelHistory;
        WHSWaveLabel        waveLabel;

        switch(_multiSelect.getFirst().TableId)
        {
            case tableNum(WHSLoadTable) :
                //Multi selection is disabled. Only one record is selected.
                WHSLoadTable        loadTable = _multiSelect.getFirst() as WHSLoadTable;

                while select WaveId from shipmentTable
                    group by WaveId
                    where shipmentTable.LoadId == loadTable.LoadId
                {
                    this.printLabelDataSourceWaveId(shipmentTable.WaveId);
                }

                break;

            case tableNum(WHSShipmentTable) :
                //Multi selection is disabled. Only one record is selected.
                shipmentTable = _multiSelect.getFirst() as WHSShipmentTable;
                
                this.printLabelDataSourceWaveId(shipmentTable.WaveId);

                break;

            case tableNum(WHSWaveTable) :
                //Multi selection is disabled. Only one record is selected.
                WHSWaveTable    waveTable = _multiSelect.getFirst() as WHSWaveTable;

                this.printLabelDataSourceWaveId(waveTable.WaveId);

                break;

            case tableNum(WHSWaveLabelHistory)  :
                labelHistory = _multiSelect.getFirst() as WHSWaveLabelHistory;

                while (labelHistory.RecId != 0)
                {
                    this.printLabel(labelHistory);
                    
                    labelHistory = _multiSelect.getNext() as WHSWaveLabelHistory;
                }
                break;

            case tableNum(WHSWaveLabel) :

                this.printLabelDataSourceWaveLabel(_multiSelect);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelDataSourceWaveLabel</Name>
				<Source><![CDATA[
    private void printLabelDataSourceWaveLabel(MultiSelectionHelper _multiSelect)
    {
        WHSWaveLabel        waveLabel;
        WHSWaveLabelHistory labelHistory;

        if (update)
        {
            Set labelBuildIdSet = new Set(Types::String);

            waveLabel = _multiSelect.getFirst() as WHSWaveLabel;

            while (waveLabel.RecId != 0)
            {
                if (!labelBuildIdSet.in(waveLabel.LabelBuildId))
                {
                    labelBuildIdSet.add(waveLabel.LabelBuildId);
                }

                waveLabel = _multiSelect.getNext() as WHSWaveLabel;
            }

            SetEnumerator setEnumerator = labelBuildIdSet.getEnumerator();

            while(setEnumerator.moveNext())
            {
                this.updateLabels(setEnumerator.current());
            }
        }

        waveLabel = _multiSelect.getFirst() as WHSWaveLabel;

        if (update)
        {
            waveLabel = WHSWaveLabel::find(waveLabel.WaveLabelId);
        }

        while (waveLabel.RecId != 0)
        {
            if (labelHistory.RecId != waveLabel.WaveLabelHistoryRecId)
            {
                labelHistory = WHSWaveLabelHistory::find(waveLabel.WaveLabelHistoryRecId);
            }

            this.printLabel(labelHistory, waveLabel.ZPLListNumber);

            waveLabel = _multiSelect.getNext() as WHSWaveLabel;

            if (update)
            {
                waveLabel = WHSWaveLabel::find(waveLabel.WaveLabelId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelDataSourceWaveId</Name>
				<Source><![CDATA[
    private void printLabelDataSourceWaveId(WHSWaveId _waveId)
    {
        WHSWaveLabel        waveLabel;
        WHSWaveLabelHistory labelHistory;

        if (update)
        {
            while select labelHistory
                group by WaveLabelTemplateRecId
                where labelHistory.WaveId == _waveId
            {
                WHSPrintLabels printLabels = WHSPrintLabels::newFromLabelHistory(_waveId, labelHistory.WaveLabelTemplateRecId);
        
                printLabels.parmSendLabelsToPrinter(false);

                printLabels.printLabels();
            }
        }
       
        while select labelHistory
            where labelHistory.WaveId == _waveId
                && labelHistory.Active == NoYes::Yes
        {
            this.printLabel(labelHistory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLabels</Name>
				<Source><![CDATA[
    private void updateLabels(WHSWaveLabelBuildId _labelBuildId)
    {
        WHSWaveTable        waveTable;
        WHSWaveLabelHistory labelHistory;
        WHSWaveLabel        waveLabel;

        select firstonly WaveId, WaveLabelTemplateRecId from labelHistory
        exists join waveLabel
            where  waveLabel.WaveLabelHistoryRecId  == labelHistory.RecId
                && waveLabel.LabelBuildId           == _labelBuildId;

        WHSPrintLabels printLabels = WHSPrintLabels::newFromLabelHistory(labelHistory.WaveId, labelHistory.WaveLabelTemplateRecId, _labelBuildId);
        
        printLabels.parmSendLabelsToPrinter(false);

        printLabels.printLabels(); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabel</Name>
				<Source><![CDATA[
    private void printLabel(WHSWaveLabelHistory _labelHistory, WHSWaveLabelZPLListNumber _zplListNumber = 0)
    {
        if (_labelHistory.RecId == 0)
        {
            throw error("@WAX:WaveLabelPrintError");
        }

        var labelList   = List::create(_labelHistory.LabelList);
        var le = labelList.getEnumerator();
        int i;

        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.waveLabelActivities().waveLabelHistoryPrint())
        {
            instrumentationLogger.logInformation(strFmt('Number of wave labels printed: %1', _zplListNumber ? _zplListNumber : labelList.elements()));

            while (le.moveNext())
            {
                i += 1;

                if (_zplListNumber == 0 || i == _zplListNumber)
                {
                    WHSZPL zpl = le.current();

                    WhsDocumentRouting::printZPLLabelToPrinter(printerName, zpl);
                }
            }

            WHSWaveLabel    waveLabel;

            WHSTmpWaveLabelId tmpWaveLabelId;

            insert_recordset tmpWaveLabelId (WaveLabelId)
                select WaveLabelId from waveLabel
                    where waveLabel.WaveLabelHistoryRecId == _labelHistory.RecId
                        && (_zplListNumber == 0 || waveLabel.ZPLListNumber == _zplListNumber);

            WHSPrintLabels::updateFieldsForWaveLabelAndShipment(tmpWaveLabelId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    private void dialog(Common _record)
    {
        Caption caption = this.getPrintDialogCaption();
        var dialog = new dialog(caption);
        dialog.windowType(FormWindowType::PopUp);
    
        var printerNameField = dialog.addField(extendedTypeStr(PrinterName));
        printerNameField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(WHSWaveLabelHistoryPrint, lookupPrinters), this);
    
        DialogField updateField;
        updateField = dialog.addField(extendedTypeStr(WHSWaveLabelUpdate), '', "@FieldDescriptions_WHS:WHSWaveLabelUpdateHelpText");
        updateField.visible(_record.TableId != tableNum(WHSWaveLabelHistory));

        dialog.run();
    
        if (dialog.closedOk())
        {
            printerName = printerNameField.value();
            update = updateField.value();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDialogCaption</Name>
				<Source><![CDATA[
    protected Caption getPrintDialogCaption()
    {
        return "@WAX:LabelHistoryPrint";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPrinters</Name>
				<Source><![CDATA[
    private void lookupPrinters(FormStringControl _ctrl)
    {
        WHSDocumentRoutingLine::lookupPrinters(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWaveLabelHistoryPrint construct()
    {
        return new WHSWaveLabelHistoryPrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterName</Name>
				<Source><![CDATA[
    public PrinterName parmPrinterName(PrinterName _printerName = printerName)
    {
        printerName = _printerName;

        return printerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printWHSWaveLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print wave label
    /// </summary>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_waveLabelId">Wave label id</param>
    /// <param name = "_update">Should wave label be updated before print</param>
    static void printWHSWaveLabelId(PrinterName _printerName, WHSWaveLabelId  _waveLabelId, boolean _update = false)
    {
        WHSWaveLabelHistoryPrint    labelHistoryPrint = new WHSWaveLabelHistoryPrint();
        WHSWaveLabel                waveLabel = WHSWaveLabel::find(_waveLabelId);

        labelHistoryPrint.parmPrinterName(_printerName);

        if (waveLabel)
        {
            if (_update)
            {
                labelHistoryPrint.updateLabels(waveLabel.LabelBuildId);
            }

            WHSWaveLabelHistory waveLabelHistory = WHSWaveLabelHistory::find(waveLabel.WaveLabelHistoryRecId);
            labelHistoryPrint.printLabel(waveLabelHistory, waveLabel.ZPLListNumber);
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printWHSWaveLabelBuildIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print wave labels 
    /// </summary>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_labelBuildId">Wave label build id</param>
    /// <param name = "_fromSeqNumber">From number</param>
    /// <param name = "_toSeqNumber">To number</param>
    /// <param name = "_update">Should wave label be updated before print</param>
    static void printWHSWaveLabelBuildIdRange(PrinterName           _printerName,
                                              WHSWaveLabelBuildId   _labelBuildId, 
                                              WHSWaveLabelSeqNumber _fromSeqNumber,
                                              WHSWaveLabelSeqNumber _toSeqNumber, 
                                              boolean               _update = false)
    {
        WHSWaveLabelHistoryPrint    labelHistoryPrint = new WHSWaveLabelHistoryPrint();
        WHSWaveLabelHistory         waveLabelHistory;
        WHSWaveLabel                waveLabel;

        labelHistoryPrint.parmPrinterName(_printerName);

        if (_update)
        {
            labelHistoryPrint.updateLabels(_labelBuildId);
        }

        if (WHSWaveLabelBatchPrintingFlight::instance().isEnabled())
        {
            using (var batchedLabelPrint = WhsBatchedDocumentRoutingContext::construct())
            {
                while select ZPLListNumber from waveLabel
                    order by SeqNum
                    where waveLabel.LabelBuildId == _labelBuildId
                       && waveLabel.SeqNum >= _fromSeqNumber
                       && waveLabel.SeqNum <= _toSeqNumber
                    join waveLabelHistory
                        where waveLabelHistory.RecId == waveLabel.WaveLabelHistoryRecId
                           && waveLabelHistory.Active == NoYes::Yes
                {
                    labelHistoryPrint.printLabel(waveLabelHistory, waveLabel.ZPLListNumber);
                }

                batchedLabelPrint.printBatchedLabels();
            }
        }
        else
        {
            while select ZPLListNumber from waveLabel
                order by SeqNum
                where waveLabel.LabelBuildId == _labelBuildId
                   && waveLabel.SeqNum >= _fromSeqNumber
                   && waveLabel.SeqNum <= _toSeqNumber
                join waveLabelHistory
                    where waveLabelHistory.RecId == waveLabel.WaveLabelHistoryRecId
                       && waveLabelHistory.Active == NoYes::Yes
            {
                labelHistoryPrint.printLabel(waveLabelHistory, waveLabel.ZPLListNumber);
            }
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>printWHSWaveLabelBuildIdItemIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print wave labels
    /// </summary>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_labelBuildId">Label build id</param>
    /// <param name = "_itemId">Item id</param>
    /// <param name = "_numOfLabels">Number of labels</param>
    /// <param name = "_update">Should wave label be updated before print</param>
    static void printWHSWaveLabelBuildIdItemIdRange(PrinterName             _printerName,
                                                    WHSWaveLabelBuildId     _labelBuildId,
                                                    ItemId                  _itemId, 
                                                    int                     _numOfLabels, 
                                                    boolean                 _update = false)
    {
        WHSWaveLabelHistoryPrint    labelHistoryPrint = new WHSWaveLabelHistoryPrint();
        WHSWaveLabelHistory         waveLabelHistory;
        WHSWaveLabel                waveLabel;
        int                         i;

        labelHistoryPrint.parmPrinterName(_printerName);

        if (_update)
        {
            labelHistoryPrint.updateLabels(_labelBuildId);
        }

        if (WHSWaveLabelBatchPrintingFlight::instance().isEnabled())
        {
            using (var batchedLabelPrint = WhsBatchedDocumentRoutingContext::construct())
            {
                while select ZPLListNumber from waveLabel
                    order by SeqNum
                    where waveLabel.LabelBuildId == _labelBuildId
                       && waveLabel.LabelItemId == _itemId
                    join waveLabelHistory
                        where waveLabelHistory.RecId == waveLabel.WaveLabelHistoryRecId
                {
                    i += 1;

                    labelHistoryPrint.printLabel(waveLabelHistory, waveLabel.ZPLListNumber);

                    if (i == _numOfLabels)
                    {
                       break;
                    }
                }

                batchedLabelPrint.printBatchedLabels();
            }
        }
        else
        {
            while select ZPLListNumber from waveLabel
                order by SeqNum
                where waveLabel.LabelBuildId == _labelBuildId
                   && waveLabel.LabelItemId == _itemId
                join waveLabelHistory
                    where waveLabelHistory.RecId == waveLabel.WaveLabelHistoryRecId
            {
                i += 1;

                labelHistoryPrint.printLabel(waveLabelHistory, waveLabel.ZPLListNumber);

                if (i == _numOfLabels)
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>