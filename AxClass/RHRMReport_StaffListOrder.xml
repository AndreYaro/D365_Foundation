<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_StaffListOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_StaffListOrder extends XMLExcelReport_RU implements BatchRetryable
{
    RHRMOrderTable      rhrmOrderTable;
    RHRMOrderTrans      rhrmOrderTransGroup;
    str                 bodyHeaderText;
    str                 bodyText;
    Counter             groupCounter;

    #define.pageWidth(9)

    #define.bodytext('bodytext')
    #define.bodyheadertext('bodyheadertext')

    #define.Template('TEMPLATE')
    #define.Header('HEADER')
    #define.BodyHeader('BODYHEADER')
    #define.Body('BODY')
    #define.Footer('FOOTER')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15.0)

        switch (_bookmark)
        {
            case #Header:
            case #Footer:
                return this.getRangeHeight(_bookmark);
            case #Body:
                return max(document.getNamedRangeHeightWrapped(#bodytext, bodyText),
                            #minHeight);
            case #BodyHeader:
                return max(document.getNamedRangeHeightWrapped(#bodyheadertext, bodyHeaderText),
                            #minHeight);
        }
        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RHRMOrderTrans          rhrmOrderTransLocal;
        RHRMStaffListHistory    rhrmStaffListHistory;

        List                    inputList;
        List                    outputList;
        real                    staffListFactor;

        currentHeight = 0;
        groupCounter = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(2, #pageWidth);
        this.execute(#Template);

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Header);

        while select StartDate, OrganizationId from rhrmOrderTransGroup
            group by StartDate, OrganizationId
            where rhrmOrderTransGroup.OrderTableRecId == rhrmOrderTable.RecId
        {
            groupCounter++;
            inputList = new List(Types::Record);
            outputList = new List(Types::Record);

            while select rHRMOrderTransLocal
                where rHRMOrderTransLocal.OrderTableRecId   == rHRMOrderTable.RecId                 &&
                      rHRMOrderTransLocal.StartDate         == rHRMOrderTransGroup.StartDate        &&
                      rHRMOrderTransLocal.OrganizationId    == rHRMOrderTransGroup.OrganizationId
            {
                rhrmStaffListHistory = RHRMStaffListHistory::findLast(rHRMOrderTransLocal.StaffListRefRecId, rHRMOrderTransLocal.StartDate, rHRMOrderTransLocal.RecId);

                staffListFactor = rHRMOrderTransLocal.ValueSum - rhrmStaffListHistory.StaffListFactor;

                if (staffListFactor >= 0)
                {
                    rHRMOrderTransLocal.ValueSum = staffListFactor ? staffListFactor : rHRMOrderTransLocal.ValueSum;
                    inputList.addEnd(rHRMOrderTransLocal);
                }

                if (staffListFactor <= 0)
                {
                    rHRMOrderTransLocal.ValueSum = staffListFactor ? -staffListFactor : rHRMOrderTransLocal.ValueSum;
                    outputList.addEnd(rHRMOrderTransLocal);
                }
            }
            this.printListData(inputList, true);
            this.printListData(outputList, false);
        }

        this.execute(#Footer);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + rhrmOrderTable.OrderNum + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        this.insertValueToSection(#bodytext, bodyText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBodyHeader</Name>
				<Source><![CDATA[
    #define.groupNum('groupNum')
    private void fillBodyHeader()
    {
        this.insertValueToSection(#groupNum, groupCounter);
        this.insertValueToSection(#bodyheadertext, bodyHeaderText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #BodyHeader:
                this.fillBodyHeader();
                break;
            case #Footer:
                this.fillFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    #define.ManagerTitle("ManagerTitle")
    #define.ManagerFIO("ManagerFIO")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFooter()
    {
        OfficialsTable_RU   officialsTable_RULocal = OfficialsTable_RU::findDirector();

        this.insertValueToSection(#ManagerTitle, officialsTable_RULocal.Title);
        this.insertValueToSection(#ManagerFIO, officialsTable_RULocal.getFIO());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    #define.CompanyName("CompanyName")
    #define.OrderDate("OrderDate")
    #define.OrderNum("OrderNum")
    #define.Reason("Reason")
    #define.pageTitle("pageTitle")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillHeader()
    {
        this.insertValueToSection(#CompanyName, CompanyInfo::find().Name);
        this.insertValueToSection(#OrderDate, rHRMOrderTable.TransDate);
        this.insertValueToSection(#OrderNum, rHRMOrderTable.OrderNum);
        this.insertValueToSection(#Reason, rHRMOrderTable.Reason);

        this.insertValueToSection(#pageTitle, strFmt(document.workbook().getValue(#pageTitle), CompanyInfo::find().Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True if initialization without errors.
    /// </returns>
    public boolean init()
    {
        boolean ret = super();

        if (ret)
        {
            if ( !this.parmArgs()
             || !this.parmArgs().record()
             || this.parmArgs().record().TableId != tableNum(RHRMOrderTable))
            {
                return checkFailed("@SYS18626");
            }

            rHRMOrderTable = this.parmArgs().record();
        }

        this.initParmDefault();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    orderTransQBDS;

        query = new Query();

        orderTransQBDS = query.addDataSource(tableNum(RHRMOrderTrans));
        orderTransQBDS.addRange(fieldNum(RHRMOrderTrans, OrderTableRecId)).value(queryValue(rhrmOrderTable.RecId));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Template);
        this.addSection(#Header);
        this.addSection(#BodyHeader, true);
        this.addSection(#Body, true);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printListData</Name>
				<Source><![CDATA[
    #define.incomeTemplPos('incomeTemplPos')
    #define.outcomeTemplPos('outcomeTemplPos')
    #define.incomeTemplOrg('incomeTemplOrg')
    #define.outcomeTemplOrg('outcomeTemplOrg')
    private void printListData(List _list, boolean _isInput)
    {
        RHRMStaffListHistory    rhrmStaffListHistory;
        RHRMStaffList       rhrmStaffList;
        ListEnumerator      enumerator;
        RHRMOrderTrans      rhrmOrderTrans;
        str                 template;
        str                 title;
        str                 riseInWages;
        str                 wageRange;
        str                 specCondClass;
        OXMLWorkBook_RU     wb = document.workbook();

        if ( !_list.elements())
        {
            return;
        }
        //body header
        template = wb.getValue(_isInput ? #incomeTemplOrg : #outcomeTemplOrg );
        bodyHeaderText = strFmt(template, date2strUsr(rhrmOrderTransGroup.StartDate, DateFlags::None), rhrmOrderTransGroup.organizationDescription());
        this.execute(#BodyHeader);

        //body
        template = wb.getValue(_isInput ? #incomeTemplPos : #outcomeTemplPos);

        enumerator = _list.getEnumerator();
        while (enumerator.moveNext())
        {
            rhrmOrderTrans = enumerator.current();
            title = rHRMStaffList.TradeCategoryId
                        ? strFmt("@SYS70938", rhrmOrderTrans.titleId(), rHRMStaffList.TradeCategoryId)
                        : rhrmOrderTrans.titleId();

            if (_isInput)
            {
                rHRMStaffList = RHRMStaffList::find(rhrmOrderTrans.StaffListRefRecId);
                wageRange = rhrmOrderTrans.StaffListMinWage != rhrmOrderTrans.StaffListMaxWage
                                ? strFmt("@RUP2510", rhrmOrderTrans.StaffListMinWage, rhrmOrderTrans.StaffListMaxWage)
                                : strFmt("@GLS106745", rhrmOrderTrans.StaffListMaxWage);
                if (rHRMStaffList.RiseInWages1Rate && rhrmOrderTrans.RiseInWages)
                    riseInWages = strFmt("@SYS76785", RPayRateTable::find(rHRMStaffList.RiseInWages1Rate).Name, rhrmOrderTrans.RiseInWages);

                if (rHRMStaffList.RiseInWages2Rate && rhrmOrderTrans.RiseInWages2)
                {
                    riseInWages += riseInWages ? "@SYS35667" : '';
                    riseInWages += strFmt(' ' + "@SYS76785", RPayRateTable::find(rHRMStaffList.RiseInWages2Rate).Name, rhrmOrderTrans.RiseInWages2);
                }

                if (rHRMStaffList.RiseInWages3Rate && rhrmOrderTrans.RiseInWages3)
                {
                    riseInWages += riseInWages ? "@SYS35667" : '';
                    riseInWages += strFmt(' ' + "@SYS76785", RPayRateTable::find(rHRMStaffList.RiseInWages3Rate).Name, rhrmOrderTrans.RiseInWages3);
                }

                specCondClass = RHRMReport_StaffListOrder::getSpecCondClassTxt(rHRMOrderTrans.SpecCond, rHRMOrderTrans.Class, rHRMOrderTrans.WorkCondClass);
            }
            else
            {
                rhrmStaffListHistory = RHRMStaffListHistory::findLast(rhrmOrderTrans.StaffListRefRecId, rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId);
                wageRange = rHRMStaffListHistory.MinWage != rHRMStaffListHistory.MaxWage
                                ? strFmt("@RUP2510", rHRMStaffListHistory.MinWage, rHRMStaffListHistory.MaxWage)
                                : strFmt("@GLS106745", rHRMStaffListHistory.MaxWage);

                if (rHRMStaffList.RiseInWages1Rate && rHRMStaffListHistory.RiseInWages1)
                    riseInWages = strFmt("@SYS76785", RPayRateTable::find(rHRMStaffList.RiseInWages1Rate).Name, rHRMStaffListHistory.RiseInWages1);

                if (rHRMStaffList.RiseInWages2Rate && rHRMStaffListHistory.RiseInWages2)
                {
                    riseInWages += riseInWages ? "@SYS35667" : '';
                    riseInWages += strFmt(' ' + "@SYS76785", RPayRateTable::find(rHRMStaffList.RiseInWages2Rate).Name, rHRMStaffListHistory.RiseInWages2);
                }

                if (rHRMStaffList.RiseInWages3Rate && rHRMStaffListHistory.RiseInWages3)
                {
                    riseInWages += riseInWages ? "@SYS35667" : '';
                    riseInWages += strFmt(' ' + "@SYS76785", RPayRateTable::find(rHRMStaffList.RiseInWages3Rate).Name, rHRMStaffListHistory.RiseInWages3);
                }

                specCondClass = RHRMReport_StaffListOrder::getSpecCondClassTxt(rHRMStaffListHistory.SpecCond, rHRMStaffListHistory.Class, rHRMStaffListHistory.WorkCondClass);
            }

            bodyText = strFmt(template, title, rhrmOrderTrans.ValueSum, wageRange, riseInWages, specCondClass);
            this.execute(#Body);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RHRMReport_StaffListOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        RHRMOrderTrans orderTransLocal;
        #define.headerCells(8)
        #define.footerCells(2)
        #define.bodyCells(3)

        select count(RecId) from orderTransLocal
            where orderTransLocal.OrderTableRecId == rhrmOrderTable.RecId;

        return #headerCells + #footerCells + #bodyCells * int642int(orderTransLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2509";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMReport_StaffListOrder report = new RHRMReport_StaffListOrder();

        report.parmArgs(_args);
        if (report.init())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecCondClassTxt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public str getSpecCondClassTxt(
        RHRMSpecCond                _specCond,
        RHRMClassOfWorkConditions   _class,
        RHRMWorkCondClass           _workCondClass,
        str                         _separator = ', ')
    {
        RPayRateEnumValue   rPayRateEnumValue;
        RPayRateCode        workCondClassRate = RHRMParameters::find().WorkCondClassRate;
        int                 workCondClassDefValue = RHRMParameters::workCondClassDefValue();
        str                 classOfWorkConditions;
        str                 specCondClass;

        if (_specCond != '' ||
            (workCondClassRate && _workCondClass != workCondClassDefValue) ||
            _class != RHRMClassOfWorkConditions::None)
        {
            specCondClass = _specCond ?
                "@SYP4881296" + ' ' + _specCond : '';

            if (specCondClass && ((workCondClassRate && _workCondClass != workCondClassDefValue) ||
                                  _class != RHRMClassOfWorkConditions::None))
            {
                specCondClass += _separator;
            }

            classOfWorkConditions = '';

            if (workCondClassRate && _workCondClass != workCondClassDefValue)
            {
                rPayRateEnumValue = RPayRateEnumValue::find(RHRMParameters::workCondClassRateRefRecId(), _workCondClass);
                classOfWorkConditions = rPayRateEnumValue.Description ? rPayRateEnumValue.Description : strfmt('%1', _workCondClass);
            }
            else if (_class != RHRMClassOfWorkConditions::None)
            {
                classOfWorkConditions = strfmt('%1', _class);
            }

            specCondClass += classOfWorkConditions ? "@RUP3535" + " " + strfmt('%1', classOfWorkConditions) : '';
        }

        return specCondClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>