<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendTransDetails
{
    CustVendTrans custVendTrans;
    CustVendTransOpen custVendTransOpen;
    CustVendSettlement custVendSettlement;
    CustVendTransOpen custVendTransOpenSum;
    CustVendSettlement custVendSettlementSum;
    // <GEERU>
    CustVendSettlement custVendSettleTransSum;
    // </GEERU>

    Integer numberOfTransOpen;
    SysTmpRecIdMap selectedTransOpenSum;
    SysTmpRecIdMap selectedSettlementSum;
    // <GEERU>
    SysTmpRecIdMap selectedSettleTransSum;
    // </GEERU>

    TransDate transDate;
    // <GEERU>
    TransDate fromDate;
    // </GEERU>

    RecordSortedList selectedCustVendTransOpenSum;
    RecordSortedList selectedCustVendSettlementSum;
    // <GEERU>
    RecordSortedList selectedCustVendSettleTransSum;
    // </GEERU>

    RecId previousCustVendTrans_RecId;

    TmpCustVendTransOpen tmpCustVendTransOpen;
    Integer numberOfTmpTransOpen;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCurMSTSettled</Name>
				<Source><![CDATA[
    container amountCurMSTSettled()
    {
        this.fetchCustVendSettlementSum();

        return [custVendSettlementSum.SettleAmountCur, custVendSettlementSum.SettleAmountMST - custVendSettlementSum.ExchAdjustment];
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurSettled</Name>
				<Source><![CDATA[
    AmountCur amountCurSettled()
    {
        this.fetchCustVendSettlementSum();

        return custVendSettlementSum.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTSettled</Name>
				<Source><![CDATA[
    AmountMST amountMSTSettled()
    {
        this.fetchCustVendSettlementSum();

        return custVendSettlementSum.SettleAmountMST - custVendSettlementSum.ExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTSettled_W</Name>
				<Source><![CDATA[
    AmountMST amountMSTSettled_W()
    {
        this.fetchCustVendSettlementSum();

        return custVendSettlementSum.SettleAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingSettled</Name>
				<Source><![CDATA[
    public AmountMSTSecondary amountReportingSettled()
    {
        this.fetchCustVendSettlementSum();

        return custVendSettlementSum.SettleAmountReporting - custVendSettlementSum.ExchAdjustmentReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingSettled_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caclulates settled amount in reporting currency.
    /// </summary>
    /// <returns>
    /// Settled amount in reporting currency.
    /// </returns>
    public AmountMST amountReportingSettled_RU()
    {
        this.fetchCustVendSettlementSum();

        return custVendSettlementSum.SettleAmountReporting - custVendSettlementSum.ExchAdjustmentReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Possible and Utilized cash discount for a <c>CustTrans</c> or <c>VendTrans</c>.
    /// </summary>
    /// <param name="_custVendAccountStatementIntTmpProcessing">
    /// A tempory table with the <c>CustTrans</c> or <c>VendTrans</c> records to find the cash discounts.
    /// </param>
    /// <remarks>
    /// A tempory table with the calculated cash discounts.
    /// </remarks>
    public void calcCashDiscounts(CustVendAccountStatementIntTmpProcessing _custVendAccountStatementIntTmpProcessing)
    {
        CustVendAccountStatementIntTmpValue tmpValue;

        CustVendTrans custVendTransLoc;
        CustVendTransOpen custVendTransOpenLoc;
        CustVendSettlement custVendSettlementLoc;

        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustSettlement custSettlement;

        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendSettlement vendSettlement;

        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        if (custVendTrans.TableId == tableNum(CustTrans))
        {
            custVendTransLoc = custTrans;
            custVendTransOpenLoc = CustTransOpen;
            custVendSettlementLoc = CustSettlement;
        }
        else
        {
            custVendTransLoc = VendTrans;
            custVendTransOpenLoc = VendTransOpen;
            custVendSettlementLoc = VendSettlement;
        }

        if (TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            insert_recordset tmpValue
                (CustVendTransRefRecId, AmountMST)
                select CustVendTransRefRecId
                from _custVendAccountStatementIntTmpProcessing

                join AccountingCurrencyAmount from generalJournalAccountEntry
                where
                    generalJournalAccountEntry.PostingType == LedgerPostingType::CustCashDisc ||
                    generalJournalAccountEntry.PostingType == LedgerPostingType::VendCashDisc
                exists join custVendTransLoc
                where
                    custVendTransLoc.RecId == _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId

                exists join firstOnly subledgerVoucherGeneralJournalEntry
                where
                    subledgerVoucherGeneralJournalEntry.Voucher == custVendTransLoc.Voucher &&
                    subledgerVoucherGeneralJournalEntry.AccountingDate == custVendTransLoc.TransDate&&
                    subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry

                exists join generalJournalEntry
                where
                    generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                    generalJournalEntry.Ledger == Ledger::current();

            update_recordSet _custVendAccountStatementIntTmpProcessing setting
                UtilizedCashDisc = tmpValue.AmountMST,
                PossibleCashDisc = tmpValue.AmountMST
                join tmpValue
                where
                    tmpValue.CustVendTransRefRecId == _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId;
        }
        else
        {
            insert_recordset tmpValue
                (CustVendTransRefRecId, AmountMST)
                select CustVendTransRefRecId
                from _custVendAccountStatementIntTmpProcessing
                group by _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId

                join sum(PossibleCashDisc) from custVendTransOpenLoc
                where
                    custVendTransOpenLoc.RefRecId == _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId &&
                    custVendTransOpenLoc.TransDate <= transDate;

            update_recordSet _custVendAccountStatementIntTmpProcessing setting
                PossibleCashDisc = tmpValue.AmountMST
                join tmpValue
                where
                    tmpValue.CustVendTransRefRecId == _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId;

            delete_from tmpValue;

            insert_recordset tmpValue
                (CustVendTransRefRecId, AmountMST)
                select CustVendTransRefRecId
                from _custVendAccountStatementIntTmpProcessing
                group by _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId

                join sum(UtilizedCashDisc) from custVendSettlementLoc
                where
                    custVendSettlementLoc.TransRecId == _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId &&
                    custVendSettlementLoc.TransDate <= transDate;

            update_recordSet _custVendAccountStatementIntTmpProcessing setting
                UtilizedCashDisc = tmpValue.AmountMST
                join tmpValue
                where
                    tmpValue.CustVendTransRefRecId == _custVendAccountStatementIntTmpProcessing.CustVendTransRefRecId;

            update_recordSet _custVendAccountStatementIntTmpProcessing setting
                PossibleCashDisc = _custVendAccountStatementIntTmpProcessing.PossibleCashDisc
                        + _custVendAccountStatementIntTmpProcessing.UtilizedCashDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTmpCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the unsettled amount for a given <c>CustTrans</c> or <c>VendTrans</c>.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The <c>CustTrans</c> or <c>VendTrans</c> record to find the unsettled amount for.
    /// </param>
    /// <param name="_onlyOpen">
    /// True if only non-settled records should be considered.
    /// </param>
    /// <returns>
    /// A tempory table with the unsettled amount of a <c>CustTrans</c> or <c>VendTrans</c>.
    /// </returns>
    public TmpCustVendTransOpen calcTmpCustVendTransOpen(CustVendTrans _custVendTrans, boolean _onlyOpen)
    {
        CustVendTransOpen custVendTransOpenLoc;
        CustVendSettlement custVendSettlementLoc;
        CustSettlement custSettlement;
        VendSettlement vendSettlement;
        CustTransOpen custTransOpen;
        VendTransOpen vendTransOpen;

        if (_custVendTrans.TableId == tableNum(CustTrans))
        {
            custVendTransOpenLoc = CustTransOpen;
            custVendSettlementLoc = custSettlement;
        }
        else
        {
            custVendTransOpenLoc = VendTransOpen;
            custVendSettlementLoc = vendSettlement;
        }

        delete_from tmpCustVendTransOpen;
        numberOfTransOpen = 0;

        custVendTransOpenLoc.recordLevelSecurity(true);

        while select custVendTransOpenLoc
            where custVendTransOpenLoc.AccountNum == _custVendTrans.AccountNum &&
                  custVendTransOpenLoc.RefRecId == _custVendTrans.RecId
        {
            tmpCustVendTransOpen.clear();
            tmpCustVendTransOpen.initFromCustVendTransOpen(custVendTransOpenLoc);
            tmpCustVendTransOpen.insert();
            numberOfTransOpen++;
        }

        while select AccountNum, DueDate, TransDate, CanBeReversed, sum(SettleAmountMST), sum(SettleAmountCur), sum(ExchAdjustment)
            from custVendSettlementLoc
            group by AccountNum, DueDate, TransDate, CanBeReversed
            order by TransDate
            where custVendSettlementLoc.TransCompany == _custVendTrans.company() &&
                  custVendSettlementLoc.TransRecId == _custVendTrans.RecId &&
                  custVendSettlementLoc.AccountNum == _custVendTrans.AccountNum
        {
            if (custVendSettlementLoc.TransDate <= transDate)
            {
                if (_onlyOpen)
                {
                    continue;
                }

                custVendSettlementLoc.SettleAmountMST = 0;
                custVendSettlementLoc.SettleAmountCur = 0;
                custVendSettlementLoc.ExchAdjustment = 0;
            }

            select firstOnly tmpCustVendTransOpen
                where tmpCustVendTransOpen.AccountNum == custVendSettlementLoc.AccountNum &&
                      tmpCustVendTransOpen.DueDate == custVendSettlementLoc.DueDate;

            if (!tmpCustVendTransOpen && custVendSettlementLoc.CanBeReversed == NoYes::No)
            {
                select firstOnly tmpCustVendTransOpen
                    where tmpCustVendTransOpen.AccountNum == custVendSettlementLoc.AccountNum;
            }

            if (tmpCustVendTransOpen)
            {
                tmpCustVendTransOpen.AmountMST += custVendSettlementLoc.SettleAmountMST - custVendSettlementLoc.ExchAdjustment;
                tmpCustVendTransOpen.AmountCur += custVendSettlementLoc.SettleAmountCur;
                tmpCustVendTransOpen.update();
            }
            else
            {
                tmpCustVendTransOpen.clear();
                // To avoid error on invalid field access, we create custVendSettlementLoc in a new buffer via recreateCustVendSettlementLoc.
                tmpCustVendTransOpen.initFromCustVendSettlement(this.recreateCustVendSettlementLoc(custVendSettlementLoc));
                tmpCustVendTransOpen.insert();
            }
        }

        return tmpCustVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recreateCustVendSettlementLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Due to existing Select Group by logic, to avoid errors when customers have "Error on Invalid Field Access" enabled, we recreate the table buffer.
    /// </summary>
    private CustVendSettlement recreateCustVendSettlementLoc(CustVendSettlement _custVendSettlement)
    {
        CustVendSettlement localCustVendSettlement;
        localCustVendSettlement.AccountNum = _custVendSettlement.AccountNum;
        localCustVendSettlement.SettleAmountCur = _custVendSettlement.SettleAmountCur;
        localCustVendSettlement.SettleAmountMST = _custVendSettlement.SettleAmountMST;
        localCustVendSettlement.ExchAdjustment = _custVendSettlement.ExchAdjustment;
        localCustVendSettlement.DueDate = _custVendSettlement.DueDate;
        localCustVendSettlement.TransDate = _custVendSettlement.TransDate;
        return localCustVendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceList_RU</Name>
				<Source><![CDATA[
    public void createBalanceList_RU(FormListControl _balanceList)
    {
        Map balanceMap;
        FormListItem item;
        MapEnumerator balanceMapEnumerator, maxBalanceEnumerator;
        AmountCur remainAmount, blockedAmount;
        int idx = 0;
        TransDate prevDate = dateNull();
        CustVendTransData custVendTransData = CustVendTransData::construct(custVendTrans);

        _balanceList.deleteAll();

        remainAmount = custVendTransData.remainAmountCur();
        balanceMap = Map::create(custVendTransData.mapReversedAmountsCur_RU());
        balanceMapEnumerator = balanceMap.getEnumerator();

        while (balanceMapEnumerator.moveNext())
        {
            _balanceList.add(strFmt("@SYS82282", prevDate));

            item = new FormListItem(strFmt("@SYS82282", balanceMapEnumerator.currentKey() - 1));
            item.subItem(1);
            item.idx(idx);
            _balanceList.setItem(item);
            item = new FormListItem(num2str(sign(remainAmount) *
                                            sign(balanceMapEnumerator.currentValue()) *
                                            balanceMapEnumerator.currentValue(),
                                            -1, -1, -1, -1));
            item.subItem(2);
            item.idx(idx);
            _balanceList.setItem(item);

            maxBalanceEnumerator = balanceMap.getEnumerator();
            blockedAmount = 0;
            while (maxBalanceEnumerator.moveNext())
            {
                if (maxBalanceEnumerator.currentKey() >= balanceMapEnumerator.currentKey())
                {
                    if (abs(blockedAmount) < abs(maxBalanceEnumerator.currentValue()))
                    {
                        blockedAmount = maxBalanceEnumerator.currentValue();
                    }
                }
            }
            item = new FormListItem(num2str(abs(remainAmount) > abs(blockedAmount) ?
                                            remainAmount + blockedAmount : 0,
                                            -1, -1, -1, -1));
            item.subItem(3);
            item.idx(idx);
            _balanceList.setItem(item);

            prevDate = balanceMapEnumerator.currentKey();
            idx++;
        }
        _balanceList.add(strFmt("@SYS82282", prevDate), 0, idx);

        item = new FormListItem("");
        item.subItem(1);
        item.idx(idx);
        _balanceList.setItem(item);
        item = new FormListItem(num2str(0, -1, -1, -1, -1));
        item.subItem(2);
        item.idx(idx);
        _balanceList.setItem(item);
        item = new FormListItem(num2str(remainAmount, -1, -1, -1, -1));
        item.subItem(3);
        item.idx(idx);
        _balanceList.setItem(item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCustVendSettlementSum</Name>
				<Source><![CDATA[
    void fetchCustVendSettlementSum()
    {
        custVendSettlementSum.TransRecId = custVendTrans.RecId;

        if (custVendTrans.RecId)
        {
            if (!selectedSettlementSum.lookup(custVendTrans.RecId))
            {
                select RecId, TransDate, TransRecId, minof(DueDate),
                       minof(CashDiscDate), maxof(LastInterestDate),
                       sum(SettleAmountCur), sum (SettleAmountMST), sum(ExchAdjustment),
                        // <GEERU>
                        sum(SettleAmountReporting), sum(ExchAdjustmentReporting),
                        // </GEERU>
                        sum(UtilizedCashDisc) from custVendSettlementSum
                    where custVendSettlementSum.TransRecId == custVendTrans.RecId &&
                          // <GEERU>
                          custVendSettlementSum.TransDate >= fromDate &&
                          // </GEERU>
                          custVendSettlementSum.TransDate <= transDate ;

                custVendSettlement.TransRecId = custVendTrans.RecId;
                selectedCustVendSettlementSum.ins(custVendSettlementSum);

                selectedSettlementSum.insert(custVendTrans.RecId, true);
            }
            else
            {
                selectedCustVendSettlementSum.find(custVendSettlementSum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCustVendSettleTransSum_W</Name>
				<Source><![CDATA[
    void fetchCustVendSettleTransSum_W()
    {
        custVendSettleTransSum.TransRecId = custVendTrans.RecId;

        if (custVendTrans.RecId)
        {
            if (! selectedSettleTransSum.lookup(custVendTrans.RecId))
            {
                select RecId, TransDate, TransRecId, minof(DueDate),
                       minof(CashDiscDate), maxof(LastInterestDate),
                       sum(SettleAmountCur), sum (SettleAmountMST), sum(ExchAdjustment),
                       sum(SettleAmountReporting), sum(ExchAdjustmentReporting),
                       sum(UtilizedCashDisc) from custVendSettleTransSum
                    where custVendSettleTransSum.TransRecId == custVendTrans.RecId &&
                          custVendSettleTransSum.TransDate >= fromDate &&
                          custVendSettleTransSum.TransDate <= transDate &&
                          custVendSettleTransSum.SettleAmountCur != 0;

                custVendSettlement.TransRecId = custVendTrans.RecId;
                selectedCustVendSettleTransSum.ins(custVendSettleTransSum);

                selectedSettleTransSum.insert(custVendTrans.RecId, true);
            }
            else
            {
                selectedCustVendSettleTransSum.find(custVendSettleTransSum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCustVendTransOpenSum</Name>
				<Source><![CDATA[
    void fetchCustVendTransOpenSum()
    {
        custVendTransOpenSum.RefRecId = custVendTrans.RecId;

        if (custVendTrans.RecId)
        {
            if (!selectedTransOpenSum.lookup(custVendTrans.RecId))
            {
                select count(RecId), minof(DueDate), minof(CashDiscDate),
                       maxof(LastInterestDate), sum(AmountCur), sum (AmountMST),
                       sum(PossibleCashDisc), minof(BankDiscNoticeDeadline) from custVendTransOpenSum
                    where custVendTransOpenSum.RefRecId == custVendTrans.RecId &&
                          custVendTransOpenSum.TransDate <= transDate;

                custVendTransOpenSum.RefRecId = custVendTrans.RecId;
                selectedCustVendTransOpenSum.ins(custVendTransOpenSum);

                selectedTransOpenSum.insert(custVendTrans.RecId, true);
            }
            else
            {
                selectedCustVendTransOpenSum.find(custVendTransOpenSum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstBankDiscNoticeDeadline</Name>
				<Source><![CDATA[
    BankDiscNoticeDeadline firstBankDiscNoticeDeadline()
    {
        BankDiscNoticeDeadline bankDiscNoticeDeadline;

        this.fetchCustVendTransOpenSum();

        if (custVendTransOpenSum.BankDiscNoticeDeadline)
        {
            bankDiscNoticeDeadline = custVendTransOpenSum.BankDiscNoticeDeadline;
        }

        return bankDiscNoticeDeadline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstCashDiscDate</Name>
				<Source><![CDATA[
    CashDiscdate firstCashDiscDate()
    {
        CashDiscdate cashDiscdate;

        this.fetchCustVendTransOpenSum();

        if (custVendTransOpenSum.CashDiscDate)
        {
            cashDiscdate = custVendTransOpenSum.CashDiscDate;
        }
        else
        {
            this.fetchCustVendSettlementSum();
            cashDiscdate = custVendSettlementSum.CashDiscDate;
        }
        return cashDiscdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstDueDate</Name>
				<Source><![CDATA[
    DueDate firstDueDate()
    {
        DueDate dueDate;

        this.fetchCustVendTransOpenSum();

        if (custVendTransOpenSum.DueDate)
        {
            dueDate = custVendTransOpenSum.DueDate;
        }

        if (!dueDate)
        {
            this.fetchCustVendSettlementSum();
            dueDate = custVendSettlementSum.DueDate;
        }

        if (!dueDate)
        {
            dueDate = custVendTrans.DueDate;
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalanceList_RU</Name>
				<Source><![CDATA[
    public void initBalanceList_RU(FormListControl _balanceList)
    {
        FormListColumn formListColumn;

        _balanceList.addColumn(1, new FormListColumn("@GLS105236", 1, 70));
        _balanceList.addColumn(2, new FormListColumn("@GLS101608", 2, 70));

        formListColumn = new FormListColumn();
        formListColumn.format(FormListFormat::Right);
        formListColumn.width(110);
        formListColumn.text("@GLS107086");
        _balanceList.addColumn(3, formListColumn);

        formListColumn = new FormListColumn();
        formListColumn.format(FormListFormat::Right);
        formListColumn.width(110);
        formListColumn.text("@GLS107087");
        _balanceList.addColumn(4, formListColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInterestDate</Name>
				<Source><![CDATA[
    DueDate lastInterestDate()
    {
        CustLastInterestDate lastInterestDate;

        this.fetchCustVendTransOpenSum();

        if (custVendTransOpenSum.DueDate)
        {
            lastInterestDate = custVendTransOpenSum.LastInterestDate;
        }
        else
        {
            this.fetchCustVendSettlementSum();
            lastInterestDate = custVendSettlementSum.LastInterestDate;
        }
        return lastInterestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(CustVendTrans _custVendTrans,
             TransDate _transDate = dateMax(),
             TransDate _fromDate = dateNull())
    {
        CustVendTransData custVendTransData;
        custVendTrans = _custVendTrans;
        custVendTransData = CustVendTransData::construct(custVendTrans);
        transDate = _transDate == dateNull() ? dateMax() : _transDate;
        // <GEERU>
        fromDate = _fromDate;
        // </GEERU>
        custVendTransOpen = custVendTransData.parmCustVendTransStatic().custVendTransOpen();
        custVendSettlement = custVendTransData.parmCustVendTransStatic().custVendSettlement();
        custVendTransOpenSum = custVendTransData.parmCustVendTransStatic().custVendTransOpen();
        custVendSettlementSum = custVendTransData.parmCustVendTransStatic().custVendSettlement();
        // <GEERU>
        custVendSettleTransSum = custVendTransData.parmCustVendTransStatic().custVendSettlement();
        // </GEERU>

        selectedCustVendTransOpenSum = new RecordSortedList(custVendTransOpenSum.TableId);
        selectedCustVendTransOpenSum.sortOrder(fieldNum(CustVendTransOpen, RefRecId));

        selectedCustVendSettlementSum = new RecordSortedList(custVendSettlementSum.TableId);
        selectedCustVendSettlementSum.sortOrder(fieldNum(CustVendSettlement, TransRecId));
        // <GEERU>
        selectedCustVendSettleTransSum = new RecordSortedList(custVendSettleTransSum.TableId);
        selectedCustVendSettleTransSum.sortOrder(fieldNum(CustVendSettlement, TransRecId));
        // </GEERU>

        selectedTransOpenSum = SysTmpRecIdMap::construct(Types::Integer);
        selectedSettlementSum = SysTmpRecIdMap::construct(Types::Integer);
        // <GEERU>
        selectedSettleTransSum = SysTmpRecIdMap::construct(Types::Integer);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTmpTransOpen</Name>
				<Source><![CDATA[
    public Integer numberOfTmpTransOpen()
    {
        return numberOfTmpTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTransOpen</Name>
				<Source><![CDATA[
    Integer numberOfTransOpen()
    {
        CustVendTransOpen localCustVendTransOpen = CustVendTransStatic::newTrans(custVendTrans).custVendTransOpen();

        if (! numberOfTransOpen)
        {
            select count(RecId) from localCustVendTransOpen
                where localCustVendTransOpen.RefRecId == custVendTrans.RecId &&
                      localCustVendTransOpen.TransDate <= transDate;

            numberOfTransOpen = any2int(localCustVendTransOpen.RecId);
        }
        return numberOfTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds offset accounts for the given voucher and date for a customer/vendor.
    /// </summary>
    /// <param name="_voucher">
    ///    The <c>Voucher</c> under consideration.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>TransDate</c> under consideration.
    /// </param>
    /// <returns>
    ///    The offset accounts for the given voucher and date for a customer/vendor.
    /// </returns>
    public AccountName offsetAccount(Voucher _voucher, TransDate _transDate)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        str offset;
        Set offsetAccountSet = new Set(Types::String);
        SetEnumerator se;

        while select DisplayValue
            from dimensionAttributeValueCombination
            exists join generalJournalAccountEntry
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension &&
                        ((custVendTrans.TableId == tableNum(CustTrans) && generalJournalAccountEntry.PostingType != LedgerPostingType::CustBalance ||
                        custVendTrans.TableId == tableNum(VendTrans) && generalJournalAccountEntry.PostingType != LedgerPostingType::VendBalance))
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry &&
                        generalJournalEntry.AccountingDate == _transDate &&
                        generalJournalEntry.Ledger == Ledger::current()
            exists join subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                        subledgerVoucherLink.Voucher == _voucher &&
                        subledgerVoucherLink.VoucherDataAreaId == CompanyInfo::find().DataArea
        {
            offsetAccountSet.add(dimensionAttributeValueCombination.DisplayValue);
        }

        se = offsetAccountSet.getEnumerator();
        while (se.moveNext())
        {
            offset += (strLen(offset) > 0 ? ',' : '') + se.current();
        }

        return offsetAccountSet.elements() > 3 ? SysLabel::labelId2String2("@SYS78137") : offset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pennyDiff_W</Name>
				<Source><![CDATA[
    AmountMST pennyDiff_W()
    {
        AmountMST settleAmountMST;

        this.fetchCustVendSettleTransSum_W();

        settleAmountMST = CurrencyExchangeHelper::amountCur2MST(custVendSettleTransSum.SettleAmountCur, custVendTrans.CurrencyCode, custVendTrans.ExchRate, custVendTrans.TransDate, 0, custVendTrans.euroTriangulation);

        return settleAmountMST - (custVendSettleTransSum.SettleAmountMST - custVendSettleTransSum.ExchAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pennyDiffReporting_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates penny difference in reporting currency.
    /// </summary>
    /// <returns>
    /// Penny difference in reporting currency.
    /// </returns>
    public AmountMST pennyDiffReporting_RU()
    {
        AmountMSTSecondary settleAmountReporting;

        if (custVendTrans.CurrencyCode == Ledger::reportingCurrency())
            return 0;

        this.fetchCustVendSettleTransSum_W();

        settleAmountReporting = CurrencyExchangeHelper::amountCur2MSTSecond_RU(custVendSettleTransSum.SettleAmountCur, custVendTrans.CurrencyCode, custVendTrans.ExchRate, custVendTrans.TransDate);

        return settleAmountReporting - (custVendSettleTransSum.SettleAmountReporting - custVendSettleTransSum.ExchAdjustmentReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>possibleCashDisc</Name>
				<Source><![CDATA[
    DiscAmount possibleCashDisc()
    {
        DiscAmount amount;
        this.fetchCustVendTransOpenSum();
        this.fetchCustVendSettlementSum();

        if (TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            amount = this.utilizedCashDiscOnInvoice();
        }
        else
        {
            amount = custVendSettlementSum.UtilizedCashDisc + custVendTransOpenSum.PossibleCashDisc;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySettlement</Name>
				<Source><![CDATA[
    Query querySettlement()
    {
        return custVendTrans.queryCustVendSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTransOpen</Name>
				<Source><![CDATA[
    Query queryTransOpen()
    {
        return custVendTrans.queryCustVendTransOpen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTrans</Name>
				<Source><![CDATA[
    void setCustVendTrans(CustVendTrans _custVendTrans)
    {
        //
        //  If the _custVendTrans.RecId is different from the last value
        //  re-initialize the two "RecordSortedLists" to insure the correct
        //  values are calculated.
        //
        if (previousCustVendTrans_RecId != custVendTrans.RecId)
        {
            selectedCustVendTransOpenSum = new RecordSortedList(custVendTransOpenSum.TableId);
            selectedCustVendTransOpenSum.sortOrder(fieldnum(CustVendTransOpen, RefRecId));

            selectedCustVendSettlementSum = new RecordSortedList(custVendSettlementSum.TableId);
            selectedCustVendSettlementSum.sortOrder(fieldnum(CustVendSettlement, TransRecId));
        }

        previousCustVendTrans_RecId = custVendTrans.RecId;
        custVendTrans = _custVendTrans;
        numberOfTransOpen = 0;

        selectedTransOpenSum = SysTmpRecIdMap::construct(Types::Integer);
        selectedSettlementSum = SysTmpRecIdMap::construct(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    public void setTransDate(TransDate _transDate)
    {
        transDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCustVendTransOpen</Name>
				<Source><![CDATA[
    public TmpCustVendTransOpen tmpCustVendTransOpen(boolean onlyOpen)
    {
        QueryRun queryRunTransOpen;
        QueryRun queryRunSettlement;
        CustVendTransOpen localCustVendTransOpen;
        CustVendSettlement localCustVendSettlement;

        delete_from tmpCustVendTransOpen;
        numberOfTmpTransOpen = 0;

        // ensure RLS is used
        localCustVendTransOpen.recordLevelSecurity(true);

        queryRunTransOpen = new QueryRun(this.queryTransOpen());

        while (queryRunTransOpen.next())
        {
            if (queryRunTransOpen.changed(custVendTransOpen.TableId))
            {
                localCustVendTransOpen = queryRunTransOpen.get(custVendTransOpen.TableId);

                if (localCustVendTransOpen)
                {
                    tmpCustVendTransOpen.clear();
                    tmpCustVendTransOpen.initFromCustVendTransOpen(localCustVendTransOpen);
                    tmpCustVendTransOpen.insert();
                    numberOfTmpTransOpen++;
                }
            }
        }

        queryRunSettlement = new QueryRun(this.querySettlement());

        while (queryRunSettlement.next())
        {
            if (queryRunSettlement.changed(custVendSettlement.TableId))
            {
                localCustVendSettlement = queryRunSettlement.get(custVendSettlement.TableId);

                if (localCustVendSettlement.TransDate <= transDate)
                {
                    if (onlyOpen)
                    {
                        continue;
                    }
                    localCustVendSettlement.SettleAmountCur = 0;
                    localCustVendSettlement.SettleAmountMST = 0;
                    localCustVendSettlement.ExchAdjustment = 0;
                    localCustVendSettlement.UtilizedCashDisc = 0;
                }

                if (localCustVendSettlement)
                {
                    select firstonly tmpCustVendTransOpen
                        where tmpCustVendTransOpen.AccountNum == localCustVendSettlement.AccountNum &&
                              tmpCustVendTransOpen.DueDate == localCustVendSettlement.DueDate;

                    if (tmpCustVendTransOpen)
                    {
                        // Settlement is associated with existing open transaction
                        tmpCustVendTransOpen.AmountCur += localCustVendSettlement.SettleAmountCur;
                        tmpCustVendTransOpen.AmountMST += localCustVendSettlement.SettleAmountMST - localCustVendSettlement.ExchAdjustment;
                        tmpCustVendTransOpen.PossibleCashDisc += localCustVendSettlement.possibleCashDisc(custVendTrans.TransDate);
                        tmpCustVendTransOpen.update();
                    }
                    else
                    {
                        if (localCustVendSettlement.CanBeReversed == NoYes::No)
                        {
                            select firstonly tmpCustVendTransOpen
                                where tmpCustVendTransOpen.AccountNum == localCustVendSettlement.AccountNum;
                        }

                        if (tmpCustVendTransOpen)
                        {
                            // Didn't find a trans open with same due date, but a trans open exists and can be reversed is false
                            // assume that the settlement record is for the same transaction but the reversal was done on
                            // a different date. In this case just update the existing record.
                            tmpCustVendTransOpen.AmountCur += localCustVendSettlement.SettleAmountCur;
                            tmpCustVendTransOpen.AmountMST += localCustVendSettlement.SettleAmountMST - localCustVendSettlement.ExchAdjustment;
                            tmpCustVendTransOpen.PossibleCashDisc += localCustVendSettlement.possibleCashDisc(custVendTrans.TransDate);
                            tmpCustVendTransOpen.update();
                        }
                        else
                        {
                            // else create a new record
                            tmpCustVendTransOpen.initFromCustVendSettlement(localCustVendSettlement);
                            tmpCustVendTransOpen.PossibleCashDisc = localCustVendSettlement.possibleCashDisc(custVendTrans.TransDate);
                            tmpCustVendTransOpen.insert();
                            numberOfTmpTransOpen++;
                        }
                    }
                }
            }
        }

        return tmpCustVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>utilizedCashDisc</Name>
				<Source><![CDATA[
    DiscAmount utilizedCashDisc()
    {
        DiscAmount amount;
        this.fetchCustVendSettlementSum();

        if (TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            amount = this.utilizedCashDiscOnInvoice();
        }
        else
        {
            amount = custVendSettlementSum.UtilizedCashDisc;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>utilizedCashDiscOnInvoice</Name>
				<Source><![CDATA[
    protected DiscAmount utilizedCashDiscOnInvoice()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        select firstonly RecId from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher == custVendTrans.Voucher
        join Recid from generalJournalEntry
            where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                  generalJournalEntry.Ledger == Ledger::current()
        join AccountingCurrencyAmount from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
            (generalJournalAccountEntry.PostingType == LedgerPostingType::CustCashDisc ||
            generalJournalAccountEntry.PostingType == LedgerPostingType::VendCashDisc);

        return generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>