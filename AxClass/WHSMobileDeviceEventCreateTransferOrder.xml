<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceEventCreateTransferOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSMobileDeviceEventStrategyFactory(WHSMobileDeviceQueueEventType::TransferOrderCreate)]
/// <summary>
/// The <c>WHSMobileDeviceEventCreateTransferOrder</c> class contains the logic processing transfer order creation mobile device events.
/// </summary>
internal final class WHSMobileDeviceEventCreateTransferOrder extends WHSMobileDeviceEvent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMobileDeviceQueueMessageState defaultState()
    {
        return WHSMobileDeviceQueueMessageState::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventTypeDependency</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMobileDeviceQueueEventType getEventTypeDependency()
    {
        return WHSMobileDeviceQueueEventType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateOnRelatedMessages</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateStateOnRelatedMessages(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processEvent(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection, WHSMobileDeviceQueueBatchAffinity _batchAffinity)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
        WHSTransferOrderCreationCollection transferOrderCollection = WHSTransferOrderCreationCollection::construct();

        ttsbegin;
        while select mobileDeviceQueueMessage
            where  mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollection.RecId
                && mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued
                && mobileDeviceQueueMessage.BatchAffinity == _batchAffinity
        {
            transferOrderCollection.addTransferOrder(_mobileDeviceQueueMessageCollection, mobileDeviceQueueMessage);
        }

        WHSAutoCreateTransferOrder autoCreate = WHSAutoCreateTransferOrder::newFromCollection(transferOrderCollection);

        autoCreate.create();

        this.completeMessagesInCollection(_mobileDeviceQueueMessageCollection, _batchAffinity);

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>