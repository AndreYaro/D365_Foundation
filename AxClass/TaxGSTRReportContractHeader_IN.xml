<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportContractHeader_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>TaxGSTRReportHeaderModel_IN</c> contains header and lines information about taxes for GSTR reports.
/// </summary>
public class TaxGSTRReportContractHeader_IN
{
    private TaxRegistrationNumber_IN companyTaxRegistrationNumber;
    private date fromDate;
    private date toDate;
    private String50 taxablePerson;
    private int reportYear;
    private real aggregateTurnover;
    private LogisticsAddressing address;
    private List taxGSTRReportLines = new List(Types::Class);
    private List taxGSTRReportLinesOfflineTool = new List(Types::Class);
    private str financialYear;
    private TaxGSTRTaxPeriod_IN taxPeriodIN;
    private str recipientAccount;
    private TaxRegistrationNumber_IN recipientRegistrationNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds tax line to model.
    /// </summary>
    /// <param name="_taxGSTRReportContractLine">
    /// Tax line.
    /// </param>
    public void addLine(TaxGSTRReportContractLine_IN _taxGSTRReportContractLine)
    {
        taxGSTRReportLines.addEnd(_taxGSTRReportContractLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOfflineReportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds tax line to model for the offline report.
    /// </summary>
    /// <param name="_taxGSTRReportContractLineOfflineTool">
    /// Tax line.
    /// </param>
    public void addOfflineReportLine(TaxGSTRReportContractLineOfflineTool_IN _taxGSTRReportContractLineOfflineTool)
    {
        taxGSTRReportLinesOfflineTool.addEnd(_taxGSTRReportContractLineOfflineTool);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddress</Name>
				<Source><![CDATA[
    public LogisticsAddressing parmAddress(LogisticsAddressing _address = address)
    {
        address = _address;
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateTurnover</Name>
				<Source><![CDATA[
    public real parmAggregateTurnover(real _aggregateTurnover = aggregateTurnover)
    {
        aggregateTurnover = _aggregateTurnover;
        return aggregateTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyTaxRegistrationNumber</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmCompanyTaxRegistrationNumber(TaxRegistrationNumber_IN _companyTaxRegistrationNumber = companyTaxRegistrationNumber)
    {
        companyTaxRegistrationNumber = _companyTaxRegistrationNumber;
        return companyTaxRegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public date parmFromDate(date _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportYear</Name>
				<Source><![CDATA[
    public int parmReportYear(int _reportYear = reportYear)
    {
        reportYear = _reportYear;
        return reportYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxablePerson</Name>
				<Source><![CDATA[
    public String50 parmTaxablePerson(String50 _taxablePerson = taxablePerson)
    {
        taxablePerson = _taxablePerson;
        return taxablePerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinancialYear</Name>
				<Source><![CDATA[
    public str parmFinancialYear(str _financialYear = financialYear)
    {
        financialYear = _financialYear;
        return financialYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    public str parmTaxPeriod(TaxGSTRTaxPeriod_IN _taxPeriod = taxPeriodIN)
    {
        taxPeriodIN = _taxPeriod;
        return enum2Str(taxPeriodIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecipientRegistrationNumber</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmRecipientRegistrationNumber(TaxRegistrationNumber_IN _recipientRegistrationNumber = recipientRegistrationNumber)
    {
        recipientRegistrationNumber = _recipientRegistrationNumber;
        return recipientRegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecipientAccount</Name>
				<Source><![CDATA[
    public str parmRecipientAccount(TaxRegistrationNumber_IN _recipientAccount = recipientAccount)
    {
        recipientAccount = _recipientAccount;
        return recipientAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGSTRReportLines</Name>
				<Source><![CDATA[
    [SysClassName(classStr(TaxGSTRReportContractLine_IN))]
    public List parmTaxGSTRReportLines(List _taxGSTRReportLines = taxGSTRReportLines)
    {
        taxGSTRReportLines = _taxGSTRReportLines;
        return taxGSTRReportLines;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGSTRReportLinesOfflineTool</Name>
				<Source><![CDATA[
    [SysClassName(classStr(TaxGSTRReportContractLineOfflineTool_IN))]
    public List parmTaxGSTRReportLinesOfflineTool(List _taxGSTRReportLinesOfflineTool = taxGSTRReportLinesOfflineTool)
    {
        taxGSTRReportLinesOfflineTool = _taxGSTRReportLinesOfflineTool;
        return taxGSTRReportLinesOfflineTool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public date parmToDate(date _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportContractData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill report contract data with report run contract.
    /// </summary>
    /// <param name = "_dataContract">Report run contract</param>
    public void fillReportContractData(TaxGSTRReportRunContract_IN _dataContract)
    {
        this.financialYear = _dataContract.parmFinancialYear();
        this.taxPeriodIN = _dataContract.parmTaxPeriod();
        this.recipientRegistrationNumber = _dataContract.parmRegNum();
        this.recipientAccount = this.findNameOfRegNum(this.recipientRegistrationNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of GSTR report lines.
    /// </summary>
    /// <returns>The number of GSTR report lines.</returns>
    internal int getNumOfLines()
    {
        return taxGSTRReportLines.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNameOfRegNum</Name>
				<Source><![CDATA[
    private str findNameOfRegNum(TaxRegistrationNumber_IN _regNum)
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        DirPartyLocation dirPartyLocation = this.getDirPartyLocationByRegNum(_regNum);

        if (dirPartyLocation.Party)
        {
            return companyInfo.Name;
        }

        InventSite inventSite = this.getInventSiteByRegNum(_regNum);

        if (inventSite.SiteId)
        {
            return inventSite.Name;
        }

        InventLocation inventLocation = this.getInventLocationByRegNum(_regNum);

        if (inventLocation.InventLocationId)
        {
            return inventLocation.Name;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyLocationByRegNum</Name>
				<Source><![CDATA[
    private DirPartyLocation getDirPartyLocationByRegNum(TaxRegistrationNumber_IN _regNum)
    {
        TaxRegistrationNumbers_IN   registrationNumbers;
        DirPartyLocation            dirPartyLocation;
        LogisticsPostalAddress      logisticsPostalAddress;
        TaxInformation_IN           taxInformationIN;

        CompanyInfo companyInfo = CompanyInfo::find();

        select firstonly RecId from registrationNumbers
            where registrationNumbers.RegistrationNumber == _regNum
            join RegistrationLocation, GSTIN from taxInformationIN
                where taxInformationIN.GSTIN == registrationNumbers.RecId
                join Party from dirPartyLocation
                    where dirPartyLocation.Location == taxInformationIN.RegistrationLocation
                        && dirPartyLocation.Party == companyInfo.RecId
                    join Location from logisticsPostalAddress
                        where logisticsPostalAddress.Location == dirPartyLocation.Location
                            && DateTimeUtil::Date(logisticsPostalAddress.ValidFrom) <=  this.toDate
                            && DateTimeUtil::Date(logisticsPostalAddress.ValidTo) >= this.toDate;

        return dirPartyLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSiteByRegNum</Name>
				<Source><![CDATA[
    private InventSite getInventSiteByRegNum(TaxRegistrationNumber_IN _regNum)
    {
        InventSite                  inventSite;
        InventSiteLogisticsLocation inventSiteLogisticsLocation;
        TaxInformation_IN           taxInformationSite;
        TaxRegistrationNumbers_IN   registrationNumbersSite;

        select firstonly RecId from registrationNumbersSite
            where registrationNumbersSite.RegistrationNumber == _regNum
            join RecId from taxInformationSite
                where taxInformationSite.GSTIN == registrationNumbersSite.RecId
                join RecId from inventSiteLogisticsLocation
                    where inventSiteLogisticsLocation.Location == taxInformationSite.RegistrationLocation
                    join Name, SiteId from inventSite
                        where inventSite.RecId == inventSiteLogisticsLocation.Site;

        return inventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocationByRegNum</Name>
				<Source><![CDATA[
    private InventLocation getInventLocationByRegNum(TaxRegistrationNumber_IN _regNum)
    {
        InventLocation                  inventLocation;
        InventLocationLogisticsLocation inventLocationLogisticsLocation;
        TaxInformation_IN               taxInformationLocation;
        TaxRegistrationNumbers_IN       registrationNumbersLocation;

        select firstonly RecId from registrationNumbersLocation
            where registrationNumbersLocation.RegistrationNumber == _regNum
            join RecId from taxInformationLocation
                where taxInformationLocation.GSTIN == registrationNumbersLocation.RecId
                join RecId from inventLocationLogisticsLocation
                    where inventLocationLogisticsLocation.Location == taxInformationLocation.RegistrationLocation
                    join InventLocationId, Name from inventLocation
                        where inventLocation.RecId == inventLocationLogisticsLocation.InventLocation;

        return inventLocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>