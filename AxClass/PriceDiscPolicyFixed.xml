<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPolicyFixed</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PriceDiscPolicyFixed
{
    boolean                 priceUpdate;
    boolean                 lineDiscUpdate;
    boolean                 linePercentUpdate;
    boolean                 priceUnitUpdate;
    boolean                 markUpUpdate;

    PriceDiscResultFields   priceDiscResultFields;

    RefTableId              tableId;
    RefRecId                recId;
    RefRecId                matchingAgreementLine;
    ItemId                  itemId;
    boolean                 isCategoryBased;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables.
    /// </summary>
    public void init()
    {
        this.initInstanceValidationValues();
        this.initDefaultFixedPolicy();

        if (priceDiscResultFields.isLinkedToAgreement())
        {
            this.initAgreementFixedPolicies();
        }

        if (priceDiscResultFields.SalesPurchLine::salesPurchLineInterface().isCategoryBased())
        {
            this.initCatagoryBasedFixedPolicies();
        }

        if (this.TableId == tableNum(SalesLine))
        {
            if (priceDiscResultFields.returnItem())
            {
                this.initReturnSalesOrderFixedPolicies();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAgreementFixedPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the agreement values for the variables that represent the fixed policies.
    /// </summary>
    protected void initAgreementFixedPolicies()
    {
        if (priceDiscResultFields.isRetailPricingUsed())
        {
            return;
        }

        if (AgreementLine::find(matchingAgreementLine).AgreementLineType == CommitmentType::ProductQuantity)
        {
            priceUpdate         = false;
            lineDiscUpdate      = false;
            linePercentUpdate   = false;
            priceUnitUpdate     = false;
        }
        else
        {
            linePercentUpdate   = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReturnSalesOrderFixedPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the return sales order values for the variables that represent the fixed policies.
    /// </summary>
    protected void initReturnSalesOrderFixedPolicies()
    {
        linePercentUpdate    = false;
        lineDiscUpdate       = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCatagoryBasedFixedPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the category based values for the variables that represent the fixed policies.
    /// </summary>
    protected void initCatagoryBasedFixedPolicies()
    {
        priceUpdate  = false;
        markUpUpdate = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultFixedPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the default values for the variables that represent the fixed policies.
    /// </summary>
    /// <remarks>
    ///    By default, updating the price, line discount, line discount percent, and price unit are allowed.
    /// </remarks>
    protected void initDefaultFixedPolicy()
    {
        priceUpdate         = true;
        lineDiscUpdate      = true;
        linePercentUpdate   = true;
        priceUnitUpdate     = true;
        markUpUpdate        = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstanceValidationValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables that are used to validate the current instance of the class.
    /// </summary>
    /// <remarks>
    ///    The class instance is stored in the global cache and this method initiates the variables that are
    ///    used to validate whether the instance that is retrieved from the cache is valid.
    /// </remarks>
    protected void initInstanceValidationValues()
    {
        tableId = priceDiscResultFields.TableId;
        recId   = priceDiscResultFields.RecId;
        itemId  = priceDiscResultFields.ItemId;
        matchingAgreementLine = priceDiscResultFields.matchingAgreementLine();
        isCategoryBased       = priceDiscResultFields.SalesPurchLine::salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line discount must be updated.
    /// </summary>
    /// <returns>
    ///    false if a fixed policy applies in the current scenario; otherwise, true.
    /// </returns>
    public boolean lineDiscUpdate()
    {
        return lineDiscUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePercentUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line discount percent must be updated.
    /// </summary>
    /// <returns>
    ///    false if a fixed policy applies in the current scenario; otherwise, true.
    /// </returns>
    public boolean linePercentUpdate()
    {
        return linePercentUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markUpUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line markup must be updated.
    /// </summary>
    /// <returns>
    ///    false if a fixed policy applies in the current scenario; otherwise, true.
    /// </returns>
    public boolean markUpUpdate()
    {
        return markUpUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnitUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the price unit must be updated.
    /// </summary>
    /// <returns>
    ///    false if a fixed policy applies in the current scenario; otherwise, true.
    /// </returns>
    public boolean priceUnitUpdate()
    {
        return priceUnitUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line price must be updated.
    /// </summary>
    /// <returns>
    ///    false if a fixed policy applies in the current scenario; otherwise, true.
    /// </returns>
    public boolean priceUpdate()
    {
        return priceUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscResultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies a <c>PriceDiscResultFields</c> table map to the internal <c>PriceDiscResultFields</c>
    ///    variable.
    /// </summary>
    /// <param name="_priceDiscResultFields">
    ///    An instance of the <c>PriceDiscResultFields</c> table map.
    /// </param>
    public void setPriceDiscResultFields(PriceDiscResultFields _priceDiscResultFields)
    {
        priceDiscResultFields = _priceDiscResultFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrentInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Compares the set of internal variables with values in the specified <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <returns>
    ///    true if the internal variables match the values in the specified <c>SalesPurchLine</c> table map;
    ///    otherwise, false.
    /// </returns>
    public boolean validateCurrentInstance()
    {
        return  priceDiscResultFields.TableId    == tableId
                && priceDiscResultFields.RecId   == recId
                && priceDiscResultFields.ItemId  == itemId
                && priceDiscResultFields.matchingAgreementLine() == matchingAgreementLine
                && priceDiscResultFields.SalesPurchLine::salesPurchLineInterface().isCategoryBased() == isCategoryBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PriceDiscPolicyFixed construct()
    {
        return new PriceDiscPolicyFixed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPriceDiscResultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PriceDiscPolicyFixed</c> class and initiates the internal
    ///    variables.
    /// </summary>
    /// <param name="_priceDiscResultFields">
    ///    An instance of the <c>PriceDiscResultFields</c> table map.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PriceDiscPolicyFixed</c> class.
    /// </returns>
    /// <remarks>
    ///    When this method is called for the first time, an instance of the <c>PriceDiscPolicyFixed</c> class
    ///    is constructed and initialized and then stored in the global cache.When it is called again, the
    ///    instance of the <c>PriceDiscPolicyFixed</c> class is retrieved from the global cache and validated
    ///    to see whether is still valid. If it is not valid, it is re-initialized.
    /// </remarks>
    public static PriceDiscPolicyFixed newFromPriceDiscResultFields(PriceDiscResultFields _priceDiscResultFields)
    {
        PriceDiscPolicyFixed priceDiscPolicyFixed;

        if (classfactory.globalCache().isSet(classStr(PriceDiscPolicyFixed), sessionId()))
        {
            priceDiscPolicyFixed = classfactory.globalCache().get(classStr(PriceDiscPolicyFixed), sessionId());
        }
        else
        {
            priceDiscPolicyFixed = PriceDiscPolicyFixed::construct();
        }

        priceDiscPolicyFixed.setPriceDiscResultFields(_priceDiscResultFields);

        if (!priceDiscPolicyFixed.validateCurrentInstance())
        {
            priceDiscPolicyFixed.init();
            classfactory.globalCache().set(classStr(PriceDiscPolicyFixed), sessionId(), priceDiscPolicyFixed);
        }

        return priceDiscPolicyFixed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>