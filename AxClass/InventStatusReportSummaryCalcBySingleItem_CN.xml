<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusReportSummaryCalcBySingleItem_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates the data for InventStatus_CN report - Single Item
/// </summary>
public class InventStatusReportSummaryCalcBySingleItem_CN extends InventStatusReportSummaryCalc_CN
{
    Map onHandDayMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts selected records in temporary table
    /// </summary>
    public void calcReportData()
    {
        InventValueReportTmpLine inventValueReportLine;
        InventStatusReportTmp_CN inventStatusReportTmp;

        void initReportData()
        {
            InventQty beginingQty;
            CostAmount beginingAmount;
            InventQty receviedQty;
            CostAmount receviedAmount;
            InventQty issuedQty;
            CostAmount issuedAmount;
            InventQty endQty;
            CostAmount endAmount;
            TransDate beginDate;
            str reportGroupKey;

            beginDate = inventValueReportLine.TransDate;
            this.initInventDim(inventValueReportLine);
            reportGroupKey = strFmt("%1-%2-%3-%4",
                                inventValueReportLine.ResourceGroupId,
                                inventValueReportLine.ResourceId,
                                beginDate,
                                InventDim.inventDimId);

            if (setItemDim.in(reportGroupKey))
            {
                return;
            }
            else
            {
                setItemDim.add(reportGroupKey);
            }

            this.initInventStatusReport(inventStatusReportTmp, inventValueReportLine);
            inventStatusReportTmp.BeginDate = beginDate;

            // Init the begining qty and amount
            if (onHandDayMap.exists(inventValueReportLine.ResourceId))
            {
                [beginingQty, beginingAmount] = onHandDayMap.lookup(inventValueReportLine.ResourceId);
            }
            else
            {
                [beginingQty, beginingAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::BeginningBalance,
                    inventValueReportLine.ResourceGroupId,
                    inventValueReportLine.ResourceId,
                    InventDim,
                    InventDimParm);
            }

            inventStatusReportTmp.BeginningQty = beginingQty;
            inventStatusReportTmp.BeginningAmount = beginingAmount;

            // Init the transaction qty and amount by transaction date for Recevived
            [receviedQty, receviedAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::Transaction,
                inventValueReportLine.ResourceGroupId,
                inventValueReportLine.ResourceId,
                InventDim,
                InventDimParm,
                false,
                InventTransType::Sales,
                true,
                false,
                true,
                beginDate);
            inventStatusReportTmp.ReceivedQty = receviedQty;
            inventStatusReportTmp.ReceivedAmount = receviedAmount;

            // Init the transaction qty and amount by transaction date for Recevived
            [issuedQty, issuedAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::Transaction,
                inventValueReportLine.ResourceGroupId,
                inventValueReportLine.ResourceId,
                InventDim,
                InventDimParm,
                false,
                InventTransType::Sales,
                false,
                true,
                true,
                beginDate);

            inventStatusReportTmp.IssuedQty = issuedQty;
            inventStatusReportTmp.IssuedAmount = issuedAmount;

            // Init the ending qty and amount by transaction date
            [endQty, endAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::Transaction,
                inventValueReportLine.ResourceGroupId,
                inventValueReportLine.ResourceId,
                InventDim,
                InventDimParm,
                false,
                InventTransType::Sales,
                false,
                false,
                true,
                beginDate);

            inventStatusReportTmp.EndingQty = beginingQty + endQty;
            inventStatusReportTmp.EndingAmount = beginingAmount + endAmount;
            onHandDayMap.insert(inventStatusReportTmp.ResourceId, [inventStatusReportTmp.EndingQty, inventStatusReportTmp.EndingAmount]);
            inventStatusReportTmp.insert();
            inventStatusReportTmp.clear();
        }

        super();

        onHandDayMap = new Map(Types::String, Types::Container);
        inventValueReportLine.setConnection(userConnection);
        inventStatusReportTmp.setConnection(userConnection);

        while select inventValueReportLine
            #InventValueReportTmpLineGroupBy(inventValueReportLine)
            where inventValueReportLine.CreatedTransactionId == transactionID
        {
            initReportData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStatusReportSummaryCalcBySingleItem_CN construct(
        UserConnection _userConnection,
        InventStatusContract_CN _contract,
        createdTransactionId _transactionId)
    {
        InventStatusReportSummaryCalcBySingleItem_CN inventStatusReportSummaryCalcBySingleItem = new InventStatusReportSummaryCalcBySingleItem_CN();
        inventStatusReportSummaryCalcBySingleItem.parmUserConnection(_userConnection);
        inventStatusReportSummaryCalcBySingleItem.parmContract(_contract);
        inventStatusReportSummaryCalcBySingleItem.parmTransactionID(_transactionId);
        inventStatusReportSummaryCalcBySingleItem.init();

        return inventStatusReportSummaryCalcBySingleItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>