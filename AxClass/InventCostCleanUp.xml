<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostCleanUp extends RunBaseBatch implements BatchRetryable
{
    TransDate                   transDateSum;
    TransDate                   transDateDel;

    QueryRun                    queryRun;

    int64                       countDeleted;
    int64                       countInserted;

    // Dialog

    DialogField                 dialogTransDateSum;
    DialogField                 dialogTransDateDel;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        TransDateSum,
        TransDateDel
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogTransDateSum = dialog.addField(extendedTypeStr(TransDate),"@SYS78027", "@SYS78028");
        dialogTransDateSum.value(transDateSum);

        dialogTransDateDel = dialog.addField(extendedTypeStr(TransDate),"@SYS78029","@SYS78030");
        dialogTransDateDel.value(transDateDel);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        transDateSum          = dialogTransDateSum.value();
        transDateDel          = dialogTransDateDel.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found by calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        transDateDel           = InventCostCleanUp::defaultDate();
        transDateSum           = InventCostCleanUp::defaultDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(queryStr(InventAdj_ClosingRecalc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateDel</Name>
				<Source><![CDATA[
    public TransDate parmTransDateDel(TransDate _transDate = transDateDel)
    {
        transDateDel = _transDate;
        return transDateDel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateSum</Name>
				<Source><![CDATA[
    public TransDate parmTransDateSum(TransDate _transDate = transDateSum)
    {
        transDateSum = _transDate;
        return transDateSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setPrefix(InventCostCleanUp::description());

        try
        {
            this.progressInit(InventCostCleanUp::description(), QueryRun::getQueryRowCount(queryRun.query(), maxInt()), #AviUpdate);

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            boolean featureEnabled = FeatureStateProvider::isFeatureEnabled(InventCostCleanUpSetBasedOperationsPerformanceFeature::instance());

            if (featureEnabled) 
            {
                InventTable inventTableTmp = this.createInventTableTmp();
               
                this.updateDelSettlementSetBased(inventTableTmp);
                this.updateSingleSettlementSetBased(inventTableTmp);
                this.updateSumSettlementSetBased(inventTableTmp);
            }
            else
            {
                ttsbegin;
                while (queryRun.next())
                {
                    InventTable inventTable = queryRun.get(tableNum(InventTable));

                    progress.incCount();
                    progress.setText(inventTable.ItemId);

                    this.updateDelSettlement(inventTable);
                    this.updateSumSettlement(inventTable);
                }
                ttscommit;
            }
                
            info(strFmt("@SYS78031",countDeleted));
            info(strFmt("@SYS78032",countInserted));
            info(strFmt("@SYS78033",countDeleted - countInserted));
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button is to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid instance of the <c>QueryRun</c> class.If you change the return value to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList,packedQuery] = packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTableTmp</Name>
				<Source><![CDATA[
    private InventTable createInventTableTmp()
    {
        InventTable inventTableTmp;
        inventTableTmp.setTempDB();

        Query query = queryRun.query();
        QueryBuildDataSource qbdsInventTable = query.dataSourcetable(tableNum(InventTable));
        query.clearAllFields();
                
        qbdsInventTable.addSelectionField(fieldNum(InventTable, ItemId));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, DataAreaId));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, Partition));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, Product));
                
        Query::insert_recordset(inventTableTmp, this.getInsertRecordsetMap(qbdsInventTable), query);

        return inventTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsertRecordsetMap</Name>
				<Source><![CDATA[
    private Map getInsertRecordsetMap(QueryBuildDataSource _qbdsInventTable)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);

        targetToSourceMap.insert(fieldStr(InventTable, ItemId),[_qbdsInventTable.uniqueId(), fieldStr(InventTable, ItemId)]);
        targetToSourceMap.insert(fieldStr(InventTable, DataAreaId),[_qbdsInventTable.uniqueId(), fieldStr(InventTable ,DataAreaId)]);
        targetToSourceMap.insert(fieldStr(InventTable, Partition),[_qbdsInventTable.uniqueId(), fieldStr(InventTable, Partition)]);
        targetToSourceMap.insert(fieldStr(InventTable, Product),[_qbdsInventTable.uniqueId(), fieldStr(InventTable, Product)]);

        return targetToSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDelSettlement</Name>
				<Source><![CDATA[
    protected void updateDelSettlement(InventTable _inventTable)
    {
        InventSettlement    inventSettlement;

        select count(RecId) from inventSettlement
            where inventSettlement.ItemId       == _inventTable.ItemId              &&
                  inventSettlement.Cancelled    == NoYes::Yes                       &&
                  inventSettlement.SettleModel  != InventSettleModel::PhysicalValue &&
                  inventSettlement.TransDate    <  transDateDel;

        countDeleted    += inventSettlement.RecId;

        delete_from inventSettlement
            where inventSettlement.ItemId       == _inventTable.ItemId              &&
                  inventSettlement.Cancelled    == NoYes::Yes                       &&
                  inventSettlement.SettleModel  != InventSettleModel::PhysicalValue &&
                  inventSettlement.TransDate    <  transDateDel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDelSettlementSetBased</Name>
				<Source><![CDATA[
    protected void updateDelSettlementSetBased(InventTable _inventTable)
    {
        InventSettlement    inventSettlement;

        delete_from inventSettlement
            where inventSettlement.Cancelled    == NoYes::Yes                       &&
                  inventSettlement.SettleModel  != InventSettleModel::PhysicalValue &&
                  inventSettlement.TransDate    <  transDateDel
        exists join _inventTable
            where _inventTable.ItemId           == inventSettlement.ItemId;

        countDeleted    += inventSettlement.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumSettlement</Name>
				<Source><![CDATA[
    protected void updateSumSettlement(InventTable _inventTable)
    {
        InventSettlement    inventSettlement;
        InventTrans         inventTrans;
        InventSettlement    sumSettlement;

        Map                 mapRecord = new Map(Types::Integer,Types::Record);
        Integer             x;

        select sum(QtySettled),sum(CostAmountSettled),sum(CostAmountAdjustment), sum(PdsCWSettled) from inventSettlement
            group by    TransRecId,
                        InventTransId,
                        ItemId,
                        TransDate,
                        Voucher,
                        BalanceSheetLedgerDimension,
                        OperationsLedgerDimension,
                        Cancelled,
                        SettleModel,
                        DefaultDimension,
                        BalanceSheetPosting,
                        OperationsPosting,
                        ItemGroupId,
                        Posted,
                        SettleType
            where inventSettlement.ItemId           == _inventTable.ItemId              &&
                    inventSettlement.TransDate        <  transDateSum                     &&
                    inventSettlement.SettleType       != InventSettleType::Accumulated
        exists join inventTrans
            where inventTrans.RecId         == inventSettlement.TransRecId  &&
                    inventTrans.ValueOpen     == InventTransOpen::No;

        while (inventSettlement)
        {
            sumSettlement.data(inventSettlement.data());

            x++;

            mapRecord.insert(x,sumSettlement);

            next inventSettlement;
        }

        select count(RecId) from inventSettlement
            where inventSettlement.ItemId           == _inventTable.ItemId              &&
                  inventSettlement.TransDate        <  transDateSum                     &&
                  inventSettlement.SettleType       != InventSettleType::Accumulated
        exists join inventTrans
            where inventTrans.RecId         == inventSettlement.TransRecId  &&
                  inventTrans.ValueOpen     == InventTransOpen::No;

        countDeleted    += inventSettlement.RecId;
        countInserted   += mapRecord.elements();

        delete_from inventSettlement
            where inventSettlement.ItemId           == _inventTable.ItemId              &&
                  inventSettlement.TransDate        <  transDateSum                     &&
                  inventSettlement.SettleType       != InventSettleType::Accumulated
        exists join inventTrans
            where inventTrans.RecId         == inventSettlement.TransRecId  &&
                  inventTrans.ValueOpen     == InventTransOpen::No;

        MapIterator mi = new MapIterator(mapRecord);
        mi.begin();
        while (mi.more())
        {
            sumSettlement = mapRecord.lookup(mi.key());
            sumSettlement.SettleType    = InventSettleType::Accumulated;
            sumSettlement.SettleTransId = sumSettlement.InventTransId;
            sumSettlement.doInsert();

            mi.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleSettlementSetBased</Name>
				<Source><![CDATA[
    private void updateSingleSettlementSetBased(InventTable _inventTable)
    {
        InventSettlement    singleSettlement;
        InventSettlement    inventSettlement;
        InventTrans         inventTrans;

        update_recordset singleSettlement
        setting
            SettleType = InventSettleType::Accumulated
        where singleSettlement.TransDate                       <   transDateSum
          &&  singleSettlement.SettleType                      !=  InventSettleType::Accumulated
        exists join _inventTable
            where _inventTable.ItemId                          ==  singleSettlement.ItemId
        exists join inventTrans
            where inventTrans.RecId                            ==  singleSettlement.TransRecId
              &&  inventTrans.ValueOpen                        ==  InventTransOpen::No
        notexists join inventSettlement
            where singleSettlement.RecId                       !=  inventSettlement.RecId                          
              &&  singleSettlement.TransRecId                  ==  inventSettlement.TransRecId                     
              &&  singleSettlement.InventTransId               ==  inventSettlement.InventTransId
              &&  singleSettlement.ItemId                      ==  inventSettlement.ItemId
              &&  singleSettlement.TransDate                   ==  inventSettlement.TransDate
              &&  singleSettlement.Voucher                     ==  inventSettlement.Voucher                        
              &&  singleSettlement.BalanceSheetLedgerDimension ==  inventSettlement.BalanceSheetLedgerDimension    
              &&  singleSettlement.OperationsLedgerDimension   ==  inventSettlement.OperationsLedgerDimension      
              &&  singleSettlement.Cancelled                   ==  inventSettlement.Cancelled                      
              &&  singleSettlement.SettleModel                 ==  inventSettlement.SettleModel                    
              &&  singleSettlement.DefaultDimension            ==  inventSettlement.DefaultDimension               
              &&  singleSettlement.BalanceSheetPosting         ==  inventSettlement.BalanceSheetPosting            
              &&  singleSettlement.OperationsPosting           ==  inventSettlement.OperationsPosting              
              &&  singleSettlement.ItemGroupId                 ==  inventSettlement.ItemGroupId                    
              &&  singleSettlement.Posted                      ==  inventSettlement.Posted                         
              &&  singleSettlement.SettleType                  ==  inventSettlement.SettleType;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumSettlementSetBased</Name>
				<Source><![CDATA[
    protected void updateSumSettlementSetBased(InventTable _inventTable)
    {
        InventSettlement    inventSettlement;
        InventTrans         inventTrans;
        InventSettlement    sumSettlement;

        InventSettleType settletypeAccumulated = InventSettleType::Accumulated;

        sumSettlement.skipdatamethods(true);

        ttsbegin;

        insert_recordset sumSettlement (
                BalanceSheetLedgerDimension,
                BalanceSheetPosting,
                Cancelled,
                CostAmountAdjustment,
                CostAmountSettled,
                DefaultDimension,
                InventTransId,
                SettleTransId,
                ItemGroupId,
                ItemId,
                OperationsLedgerDimension,
                OperationsPosting,
                PdsCWSettled,
                Posted,
                QtySettled,
                SettleModel,
                SettleType,
                TransRecId,
                TransDate,
                Voucher )
        select  BalanceSheetLedgerDimension,
                BalanceSheetPosting,
                Cancelled,
                sum(CostAmountAdjustment),
                sum(CostAmountSettled),
                DefaultDimension,
                InventTransId,
                InventTransId,
                ItemGroupId,
                ItemId,
                OperationsLedgerDimension,
                OperationsPosting,
                sum(PdsCWSettled),
                Posted,
                sum(QtySettled),
                SettleModel,
                settletypeAccumulated,
                TransRecId,
                TransDate,
                Voucher
        from    inventSettlement
        group by    TransRecId,
                    InventTransId,
                    ItemId,
                    TransDate,
                    Voucher,
                    BalanceSheetLedgerDimension,
                    OperationsLedgerDimension,
                    Cancelled,
                    SettleModel,
                    DefaultDimension,
                    BalanceSheetPosting,
                    OperationsPosting,
                    ItemGroupId,
                    Posted,
                    SettleType
        where inventSettlement.TransDate        <  transDateSum                     &&
                inventSettlement.SettleType       != InventSettleType::Accumulated
        exists join _inventTable
            where _inventTable.ItemId           == inventSettlement.ItemId
        exists join inventTrans
            where inventTrans.RecId         == inventSettlement.TransRecId  &&
                    inventTrans.ValueOpen     == InventTransOpen::No;

        delete_from inventSettlement
            where inventSettlement.TransDate        <  transDateSum                     &&
                  inventSettlement.SettleType       != InventSettleType::Accumulated
        exists join _inventTable
            where _inventTable.ItemId           == inventSettlement.ItemId
        exists join inventTrans
            where inventTrans.RecId         == inventSettlement.TransRecId  &&
                  inventTrans.ValueOpen     == InventTransOpen::No;
        
        ttscommit;

        countDeleted    += inventSettlement.RowCount();
        countInserted   += sumSettlement.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventCostCleanUp construct()
    {
        return new InventCostCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDate</Name>
				<Source><![CDATA[
    static TransDate defaultDate()
    {
        return endmth(prevYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))+1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS78026";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        InventCostCleanUp inventCostCleanUp = InventCostCleanUp::newParameters();

        if (inventCostCleanUp.prompt())
        {
            inventCostCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventCostCleanUp newParameters()
    {
        InventCostCleanUp  cleanUp = InventCostCleanUp::construct();

        cleanUp.getLast();
        cleanUp.parmTransDateSum(InventCostCleanUp::defaultDate());
        cleanUp.parmTransDateDel(InventCostCleanUp::defaultDate());

        cleanUp.init();

        return cleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>