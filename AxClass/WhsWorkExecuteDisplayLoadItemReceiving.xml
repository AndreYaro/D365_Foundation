<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayLoadItemReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to receive load items.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::LoadItemReceiving)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::LoadItemReceivingAndLocate)]
class WhsWorkExecuteDisplayLoadItemReceiving extends WHSWorkExecuteDisplayPOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        
        switch (true)
        {
            case _control is WhsControlItemId:
                return this.processItemIdForLoadItemReceiving(_control);

            case _control.parmName() == #LoadId:
                return this.processLoadIdForLoadItemReceiving(_control);  
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPOReceiving</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for Load Item Receiving screen.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_extratext">
	/// Label text.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Load id is not valid.
	/// </exception>
    public container buildPOReceiving(container _con, str _extratext = '')
    {
        container           ret = _con;
        boolean             showExceptionButton;
        InventTable         inventTable;
        WHSReceiptOrderLine orderLine;
        WHSProdQty          defaultQty;

        ret += [this.buildControl(#RFLabel, 'LoadItemReceiving', pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += this.buildLocationControl();

        if (pass.lookupStr(#LoadId) != '')
        {
            ret += [this.buildControl(#RFText, #LoadId, "@WAX403", 1, pass.lookup(#LoadId), extendedTypeNum(WHSLoadId), '', 0, false)];

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, !pass.exists(#ItemId))];

            if (pass.lookupStr(#ItemId) != '')
            {
                inventTable = InventTable::find(pass.lookup(#ItemId));
                WHSInventTable whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));
                defaultQty = this.defaultReceivingQuantity();

                if (whsInventTable.rfDescription1)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
                }

                if (whsInventTable.rfDescription2)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
                }

                WHSLoadItemReceivingOrderLineProvider orderLineProvider = this.orderLineProvider(pass);
                                              
                if (!orderLineProvider.suggestedOrderLine())
                {
                    throw error("@WAX:WhsLoadItemRecvVariantNotInLoad");
                }

                ret = this.buildInventDimensionControls(ret, orderLineProvider, inventTable.ItemId);

                if (!orderLineProvider.multipleVariantsExistOnLoad()
                    && !orderLineProvider.multipleTrackingDimensionsExistOnLoad())
                {
                    var orderProvider = this.receivingOrderProvider();

                    if (orderLineProvider.singleOrderCanBeReceived())
                    {
                        orderLine = orderLineProvider.suggestedOrderLine();
                        orderProvider.setOrderNum(pass, orderLine.OrderNumber);
                        orderProvider.setLineNum(pass, orderLine.LineNumber);
                    }

                    ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, orderLineProvider.multipleOrdersCanBeReceived())];

                    if (orderProvider.lineNum(pass) != 0)
                    {
                        ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, orderProvider.lineNumStr(pass), extendedTypeNum(LineNum), '', 0, false)];
                    }

                    showExceptionButton = true;
                }
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #LoadId, "@WAX403", 1, '', extendedTypeNum(WHSLoadId), '', 0)];
        }

        if ((!pass.exists(#Qty) || pass.lookupNum(#Qty) == 0) && defaultQty)
        {
            pass.insert(#Qty, defaultQty);
        }
        if (!pass.exists(#SelectedValueUOM) || pass.lookup(#SelectedValueUOM) == '')
        {
            pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(inventTable.ItemId));
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

        if (!inventTable.ItemId && pass.lookupStr(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));                
        }

        boolean isCWItem = (inventTable.ItemId != '' && PdsGlobal::pdsIsCWItem(inventTable.ItemId));

        if (isCWItem && WHSInventTable::shouldCaptureAggregateWeight(inventTable.ItemId))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
        }

        if (pass.exists(#SelectedValueUOM)
        &&  pass.lookup(#SelectedValueUOM)  != ''
        &&  pass.lookup(#SelectedValueUOM) != WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId))
        {
            if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.lookup(#SelectedValueUOM))
            {
                pass.insert(#CurrentUOM, pass.lookup(#SelectedValueUOM));
            }
            else if (!pass.exists(#Initiation))
            {
                pass.remove(#CurrentUOM);
            }
            
            EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();

            // Only add conversion information if it is meaningful
            if (!inventTable.isProductVariantUnitConversionEnabled()
                || (orderLine && unitConverter.canResolveProductVariant(inventTable.ItemId, orderLine.inventDim())))
            {
                if (isCWItem)
                {
                    ret += [this.buildControl(#RFLabel,
                                            WhsWorkExecuteDisplayLoadItemReceivingControls::InventConversionLabel,
                                            strFmt("1 %1 = %2 %3",
                                                    pass.lookup(#SelectedValueUOM),
                                                    EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                    (orderLine) ? orderLine.InventDimId : '',
                                                                                                    1,
                                                                                                    pass.lookup(#SelectedValueUOM),
                                                                                                    WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId),
                                                                                                    NoYes::No,
                                                                                                    NoYes::Yes),
                                                    WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId)),
                                            1, '', #WHSRFUndefinedDataType, '', 0)];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel,
                                              WhsWorkExecuteDisplayLoadItemReceivingControls::InventConversionLabel,
                                              strFmt("1 %1 = %2 %3",
                                                     pass.lookup(#SelectedValueUOM),
                                                                                    InventTableModule::unitConvert(inventTable.ItemId,
                                                                                    ModuleInventPurchSales::Invent,
                                                                                    pass.lookup(#SelectedValueUOM),
                                                                                    1,
                                                                                    (orderLine) ? orderLine.InventDimId : ''),
                                                     inventTable.inventUnitId()),
                                            1, '', #WHSRFUndefinedDataType, '', 0)];
                }
            }
        }
        else
        {
            if (pass.exists(#CurrentUOM))
            {
                pass.remove(#CurrentUOM);
            }
        }
        
        if (this.displayDispositionCodeControl())
        {
            ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (showExceptionButton)
        {
            ret = this.addCancelButton(ret, 1, true);
            ret = this.addExceptionButton(ret);
            pass.insert(#NoCancelButton, '1');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventDimensionControls</Name>
				<Source><![CDATA[
    private container buildInventDimensionControls(container _con, WHSLoadItemReceivingOrderLineProvider _orderLineProvider, ItemId _itemId)
    {
        container ret = _con;

        boolean enableProductDimensionControls = _orderLineProvider.multipleVariantsExistOnLoad();
        boolean enableTrackingDimControls      = _orderLineProvider.multipleTrackingDimensionsExistOnLoad();

        InventDim productDims;
        if (enableProductDimensionControls 
            || enableTrackingDimControls 
            || _orderLineProvider.singleOrderCanBeReceived())
        {           
            productDims = _orderLineProvider.suggestedOrderLine().inventDim();
        }
        else
        {
            productDims = this.productInventDim(pass);
        }

        if (productDims.anyProductDimensionSpecified())
        {
            ret = this.buildInventoryDimensionsControlsFromInventDim(ret, _ItemId, productDims, enableProductDimensionControls);
        }

        if (productDims.anyTrackingDimensionSpecified())
        {
            ret = this.buildTrackingDimensionsFromInventDim(ret, _ItemId, productDims, enableTrackingDimControls);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPOReceivingAndPutawayExecuteMode</Name>
				<Source><![CDATA[
    protected WHSWorkExecuteMode getPOReceivingAndPutawayExecuteMode()
    {
        return WHSWorkExecuteMode::LoadItemReceivingAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the work process enum value of the current process.
    /// </summary>
    /// <returns>
    /// The work process enum value.
    /// </returns>
    [Hookable(false)]
    protected WhsWorkProcess workProcess()
    {
        return WhsWorkProcess::LoadItemReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to getOrderLine/receivingOrderLine', false, 13\02\2023)]
    protected PurchLine getPurchLine(WHSRFPassthrough _pass)
    {
        return this.receivingOrderLine(_pass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivingOrderLine</Name>
				<Source><![CDATA[
    protected internal WHSReceiptOrderLine receivingOrderLine(WHSRFPassthrough _pass, boolean _throwOnNonReceiving = true)
    {
        WHSReceiptOrderLine ret;
            
        if (WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
        {
            ret = super(_pass, true);
        }

        if (!ret)
        {
            ret = this.orderLineProvider(_pass).suggestedOrderLine();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productInventDim</Name>
				<Source><![CDATA[
    private InventDim productInventDim(WHSRFPassthrough _pass)
    {
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        inventDimParm.setAllProductDimensions();
        inventDimParm.setAllTrackingDimensions();
        pass.initInventDimFromPassParm(inventDim, inventDimParm);

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineProvider</Name>
				<Source><![CDATA[
    private WHSLoadItemReceivingOrderLineProvider orderLineProvider(WHSRFPassthrough _pass)
    {
        InventDim productInventDim = this.productInventDim(_pass);

        var orderProvider = this.receivingOrderProvider();

        WHSRFMenuItemTable menuItem = WHSRFMenuItemTable::find(_pass.lookup(#MenuItem));

        boolean allowLoadOverreceipt = menuItem.LoadLineQuantityOverreceipt == WhsLoadLineQuantityOverreceipt::Allow;

        if (menuItem.AssignPutawayCluster
            && pass.parmPONum()
            && (pass.parmPurchId() != pass.parmPONum())
            && WHSNotSavePONumForLoadReceivePutAwayClusterFlight::instance().isEnabled())
        {
            pass.remove(#PONum);
        }

        return WHSLoadItemReceivingOrderLineProvider::newFromParameters(
                                                        orderProvider.inventTransType(),
                                                        _pass.parmLoadId(),
                                                        _pass.parmItemId(),
                                                        productInventDim,
                                                        orderProvider.orderNum(_pass),
                                                        orderProvider.lineNum(_pass),
                                                        allowLoadOverreceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverdelivery</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to validateOverdeliveryForOrderLine', false, 13\02\2023)]
    protected void validateOverdelivery(WhsrfPassthrough _pass, PurchLine _purchLine)
    {
        super(_pass, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverdeliveryForOrderLine</Name>
				<Source><![CDATA[
    protected void validateOverdeliveryForOrderLine(WhsrfPassthrough _pass, WHSReceiptOrderLine _orderLine)
    {
        if (!pass.lookup(#LoadId))
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        this.validateLoadOverreceipt(_pass, _orderLine);
        
        super(_pass, _orderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadOverreceipt</Name>
				<Source><![CDATA[
    private void validateLoadOverreceipt(WhsrfPassthrough _pass, WHSReceiptOrderLine _orderLine)
    {
        boolean menuItemBlocksOverreceipt = WHSRFMenuItemTable::find(_pass.lookup(#MenuItem)).blockLoadLineQuantityOverreceipt();
        
        if (!menuItemBlocksOverreceipt)
        {
            return;
        }

        if (this.checkLoadOverreceipt(_pass, _orderLine))
        {
            throw error("@WAX:CannotOverreceiveOnLoad");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoadOverreceipt</Name>
				<Source><![CDATA[
    private boolean checkLoadOverreceipt(WhsrfPassthrough _pass, WHSReceiptOrderLine _orderLine)
    {
        WHSLoadLine loadLine;
        select firstonly loadLine
            where loadLine.LoadId == _pass.lookup(#LoadId)
               && loadLine.InventTransId == _orderLine.InventTransId;

        Debug::assert(loadLine.RecId != 0);
        
        Qty receivingQty = _pass.lookupNum(#Qty);
        UnitOfMeasureSymbol uom = _pass.lookup(#UOM);
        
        return !loadLine.canLoadLineAcceptReceipt(receivingQty, uom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTrackingDimensionsFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds RF text controls for tracking dimensions based off an inventory dimension record.
    /// </summary>
    /// <param name="_con">
    /// The current RF container we are adding text controls to.
    /// </param>
    /// <param name="_itemId">
    /// The item whose product dimensions we are adding controls for.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension record we are basing product dimension controls off of.
    /// </param>
    /// <param name="_enableControls">
    /// Boolean to determine whether added text controls should be editable.
    /// </param>
    /// <returns>
    /// An updated RF container which includes text controls for the item's product dimensions.
    /// </returns>
    private container buildTrackingDimensionsFromInventDim(
        container   _con,
        ItemId      _itemId,
        InventDim   _inventDim,
        boolean     _enableControls = true)
    {
        container       ret = _con;
        ListEnumerator  le  = InventDimGroupSetup::newItemIdTrackingDimensionsOnly(_itemId).activeFields().getEnumerator();

        while (le.moveNext())
        {
            FieldName inventDimName = fieldId2name(tableNum(InventDim), le.current());
            ret += [this.buildControlForTableField(tableNum(InventDim),
                                                le.current(),
                                                inventDimName,
                                                1,
                                                _inventDim.(le.current()),
                                                _enableControls)];

            if (!pass.lookupStr(inventDimName))
            {
                pass.insert(inventDimName, _inventDim.(le.current()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>