<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequestACSAuthenticationEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>UserRequestACSAuthenticationEventHandler</c> class handles the events for the <c>UserRequestACSAuthenticationTask</c>
/// workflow element.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class UserRequestACSAuthenticationEventHandler implements
    WorkflowElementStartedEventHandler,
    WorkflowElementCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the completed event for the workflow task.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest userRequest;

        userRequest = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        userRequest.RequestStatus = UserRequestStatus::AuthenticationComplete;
        userRequest.update();
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the started event for the workflow task.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest               userRequest;
        UserRequestManager        userRequestManager;
        UserRequestACSUrlStorage  userRequestACSUrlStorage;

        userRequest = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        UserRequestACSUrlStorage::markURLInvalid(userRequest.RecId);
        userRequestACSUrlStorage.initFromUserRequest(userRequest.RecId);
        userRequestACSUrlStorage.insert();
        userRequest.RequestStatus = UserRequestStatus::AuthenticationPending;
        userRequest.update();
        ttscommit;

        userRequestManager = UserRequestManager::constructFrom(userRequest);
        userRequestManager.sendACSAuthenticationEmail(userRequest);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>