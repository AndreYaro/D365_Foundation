<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQAcceptJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQAcceptJournalPost extends FormletterJournalPost
{
    VendRFQJour             vendRFQJour;
    VendRFQTrans            vendRFQTrans;
    PurchRFQTotals          purchTotals;
    PurchRFQTable           purchRFQTable;
    PurchRFQLine            purchRFQLine;
    PurchRFQReplyLine       purchRFQReplyLine;

    PurchRFQParmTable       purchRFQParmTable;
    PurchCalcTax            purchCalcTax;
    PurchRFQTotals          purchRFQTotals;
    PurchRFQCaseTable       purchRFQCaseTable;
    PurchRFQParmUpdate      purchRFQParmUpdate;
    boolean                 rejectExecuted;

    private PurchRFQInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record to the <c>InventReportDimHistory</c> table.
    /// </summary>
    /// <param name="_journalline">
    /// A journal line record.
    /// </param>
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateVoucher</Name>
				<Source><![CDATA[
    protected NumberSeq  allocateVoucher()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the source line for the journal line.
    /// </summary>
    protected void checkSourceLine()
    {
        super();

        if (!this.pdsCheckAVL(purchRFQLine, purchRFQReplyLine))
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchAgreement</Name>
				<Source><![CDATA[
    protected PurchAgreementId createPurchAgreement()
    {
        PurchAgreementAutoCreate_RFQ purchAgreementAutoCreate;

        purchAgreementAutoCreate = PurchAgreementAutoCreate::construct(purchRFQParmTable);
        purchAgreementAutoCreate.create();
        return purchAgreementAutoCreate.agreementId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchOrder</Name>
				<Source><![CDATA[
    protected PurchId createPurchOrder()
    {
        PurchAutoCreate_RFQ purchAutoCreate;
        purchAutoCreate = PurchAutoCreate::construct(purchRFQParmTable);
        purchAutoCreate.create();
        return purchAutoCreate.purchId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::RFQAccept;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// A voucher number.
    /// </returns>
    protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        select firstonly purchRFQParmUpdate where purchRFQParmUpdate.ParmId == purchRFQParmTable.ParmId;

        select firstonly purchRFQTable where purchRFQTable.rfqId == vendRFQJour.rfqId;

        super();

        purchRFQTotals = PurchRFQTotals::construct(purchRFQTable,
                                                   purchRFQParmUpdate.SpecQty);
        purchRFQTotals.calc();
        this.tax(purchRFQTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Markup</c> object.
    /// </summary>
    protected void  initMarkup()
    {
        markup = new Markup(purchRFQTable.CurrencyCode);
        markup.setTax(this.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        select firstonly forupdate purchRFQLine
            where purchRFQLine.rfqId   == vendRFQTrans.rfqId
               && purchRFQLine.LineNum == vendRFQTrans.LineNum;

        purchRFQReplyLine = PurchRFQReplyLine::findRFQLine(purchRFQLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current journal line record.
    /// </summary>
    /// <param name="_journalLine">
    /// A journal line record.
    /// </param>
    /// <returns>
    /// A journal line record.
    /// </returns>
    protected Common journalLine(Common _journalLine = vendRFQTrans)
    {
        vendRFQTrans = _journalLine as VendRFQTrans;
        return vendRFQTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(VendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineType</Name>
				<Source><![CDATA[
    protected VendRFQTrans journalLineType()
    {
        return vendRFQTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = vendRFQJour)
    {
        vendRFQJour = _journalTable as VendRFQJour;
        return vendRFQJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchRFQParmTable)
    {
        purchRFQParmTable = _parmTable as PurchRFQParmTable;

        return purchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQTable</Name>
				<Source><![CDATA[
    public PurchRFQTable parmPurchRFQTable(PurchRFQTable _purchRFQTable = purchRFQTable)
    {
        purchRFQTable = _purchRFQTable;
        return purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQLine</Name>
				<Source><![CDATA[
    public PurchRFQLine parmPurchRFQLine(PurchRFQLine _purchRFQLine = purchRFQLine)
    {
        purchRFQLine = _purchRFQLine;
        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckAVL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that a request for quotation reply line is valid for the vendor, item, and date.
    /// </summary>
    /// <param name="_purchRFQLine">
    /// A <c>PurchRFQLine</c> table record.
    /// </param>
    /// <param name="_purchRFQReplyLine">
    /// A <c>PurchRFQReplyLine</c> table record.
    /// </param>
    /// <returns>
    /// true if a request for quotation reply line is valid for the vendor, item, and date; otherwise,
    /// false.
    /// </returns>
    private boolean pdsCheckAVL(PurchRFQLine _purchRFQLine, PurchRFQReplyLine _purchRFQReplyLine)
    {
        PdsApprovedVendorListCheck  pdsCheck;

        pdsCheck = PdsApprovedVendorListCheck::newFromTable(
            _purchRFQLine,
            _purchRFQReplyLine.DeliveryDate);

        pdsCheck.parmVendAccount(
            _purchRFQReplyLine.purchRFQReplyTable().purchRFQTable().VendAccount);

        if (_purchRFQReplyLine.DeliveryDate != dateNull())
        {
            pdsCheck.parmActiveDate(_purchRFQReplyLine.DeliveryDate);
        }

        return pdsCheck.validateCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a journal line to the <c>VendRFQTrans</c> table.
    /// </summary>
    protected void  postMarkupLine()
    {
        markup.postJournal(purchRFQReplyLine.PurchQty,
                           purchRFQReplyLine.LineAmount,
                           purchRFQLine,
                           purchRFQLine.DefaultDimension,
                           vendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the journal header to the <c>VendRFQJour</c> table.
    /// </summary>
    /// <param name="_purchRFQTableMarkup">
    /// A <c>PurchRFQTable</c> record buffer.
    /// </param>
    protected void postMarkupOnJour(PurchRFQTable  _purchRFQTableMarkup)
    {
        markup.postJournal(1,
                           purchRFQTotals.totalOrderBalance(_purchRFQTableMarkup.RecId),
                           _purchRFQTableMarkup,
                           _purchRFQTableMarkup.DefaultDimension,
                           vendRFQJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void  postMarkupTable()
    {
        QueryRun                queryRun;
        PurchRFQTable           purchRFQTableMarkup;
        PurchRFQParmSubTable    purchRFQParmSubTable;
        queryRun = new QueryRun(purchRFQParmTable.queryPurchRFQParmSubTable());
        while (queryRun.next())
        {
            purchRFQTableMarkup = null;
            if (queryRun.changed(tableNum(PurchRFQParmSubTable)))
            {
                purchRFQParmSubTable = queryRun.get(tableNum(PurchRFQParmSubTable));

                purchRFQTableMarkup = purchRFQParmSubTable.purchRFQTable();
            }

            if (!purchRFQTableMarkup)
                continue;

            this.postMarkupOnJour(purchRFQTableMarkup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be posted on update.
    /// </summary>
    /// <returns>
    /// true if tax should be posted on update; otherwise, false.
    /// </returns>
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax postings.
    /// </summary>
    /// <param name="_post">
    /// A Boolean value that indicates whether posting should occur.
    /// </param>
    protected void postTax(boolean _post)
    {
        super(_post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line record for the current journal line.
    /// </summary>
    /// <returns>
    /// A source line record.
    /// </returns>
    protected Common sourceLine()
    {
        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source header record for the journal header.
    /// </summary>
    /// <returns>
    /// A source header record.
    /// </returns>
    protected Common sourceTable()
    {
        return purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    protected Object tradeCalcTax()
    {
        return PurchCalcTax::construct(this.parmJournalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> object.
    /// </returns>
    protected TransTxt transactionLogTxt()
    {
        return "@SYS105965";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return vendRFQJour.rfqDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReq</Name>
				<Source><![CDATA[
    protected void updatePurchReq()
    {
        PurchRFQParmLine        parmLine;
        PurchReqLine            purchReqLine;

        ttsbegin;

        while select RecId from parmLine
            where parmLine.ParmId == purchRFQParmTable.ParmId &&
                  parmLine.TableRefId == purchRFQParmTable.TableRefId
                  join purchRFQLine
                    where purchRFQLine.RecId == parmLine.rfqLineRecId
                    join purchRFQReplyLine
                        where purchRFQReplyLine.rfqLineRecId == purchRFQLine.RecId
        {
            // find req line that created RFq
            purchReqLine = purchRFQLine.purchRFQCaseLine().purchReqLine(true);
            if (purchReqLine)
            {
                this.initializePurchReqLineForUpdate(purchReqLine);
                this.updatePurchReqLine(purchReqLine);
                this.updateSourceDocumentLine(purchReqLine);
            }
            else
            {
                throw error(strFmt("@SYS112530", purchRFQLine.ItemId, purchRFQLine.ItemName));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchReqLineForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchReqLine</c> that is to be updated.
    /// </summary>
    /// <param name = "_purchReqLine">The <c>PurchReqLine</c> to update.</param>
    protected void initializePurchReqLineForUpdate(PurchReqLine _purchReqLine)
    {
        _purchReqLine.initFromPurchRFQLine(purchRFQLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>MarkupTrans</c> records for the <c>PurchReqLine</c> and copies <c>MarkupTrans</c> from the <c>PurchRFQLine</c>;
    /// and updates the <c>PurchReqLine</c>.
    /// </summary>
    /// <param name = "_purchReqLine">The <c>PurchReqLine</c> to update.</param>
    protected void updatePurchReqLine(PurchReqLine _purchReqLine)
    {
        Markup::delete(_purchReqLine);
        Markup::copy(NoYes::No, purchRFQLine, _purchReqLine);
        _purchReqLine.update(true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SourceDocumentLine</c> for the given <c>PurchReqLine</c>.
    /// </summary>
    /// <param name = "_purchReqLine">A <c>PurchReqLine</c> record.</param>
    protected void updateSourceDocumentLine(PurchReqLine _purchReqLine)
    {
        SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(_purchReqLine);
        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_purchReqLine.SourceDocumentLine, true);
        sourceDocumentLine.StateContainer = sourceDocumentLineItem.parmCurrentStateContainer();
        sourceDocumentLine.update();

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source line for the current journal line.
    /// </summary>
    protected void updateSourceLine()
    {
        using (var activityContextUpdateSourceLine = this.instrumentationLogger().journalInstrumentationActivities().acceptJournalPostUpdateSourceLine(purchRFQLine))
        {
            purchRFQLine.ReasonRef = vendRFQTrans.ReasonRef;
            purchRFQLine.Status = PurchRFQStatus::Accepted;
            purchRFQLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        PurchRFQTable   updateRFQTable;
        boolean         updateStatus = PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled();        

        using (var activityContextUpdateSourceTable = this.instrumentationLogger().journalInstrumentationActivities().acceptJournalPostUpdateSourceTable(purchRFQTable))
        {
            switch (purchRFQTable.rfqType)
            {
                case PurchRFQType::PurchReq:
                    this.updatePurchReq();
                    updateRFQTable = PurchRFQTable::find(purchRFQTable.rfqId, true);

                    if (updateStatus)
                    {
                        updateRFQTable.updateStatus();
                    }
                    break;
                case PurchRFQType::PurchAgreement:
                    vendRFQJour.AgreementId = this.createPurchAgreement();
                    vendRFQJour.update();
                    updateRFQTable = PurchRFQTable::find(purchRFQTable.rfqId, true);
                    updateRFQTable.AgreementId = vendRFQJour.AgreementId;

                    if (updateStatus)
                    {
                        updateRFQTable.updateStatus();
                    }
                    else
                    {
                        updateRFQTable.doUpdate();
                    }
                    break;
                case PurchRFQType::Purch:
                    vendRFQJour.PurchId = this.retrievePurchId();
                    vendRFQJour.update();
                    if (vendRFQJour.PurchId)
                    {
                        updateRFQTable = PurchRFQTable::find(purchRFQTable.rfqId, true);
                        updateRFQTable.PurchId = vendRFQJour.PurchId;

                        if (updateStatus)
                        {
                            updateRFQTable.updateStatus();
                        }
                        else
                        {
                            updateRFQTable.doUpdate();
                        }
                    }
                    break;
                default:
                    PurchRFQAcceptJournalPost::updatingSourceTable(this);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the purchase order id for updating the journal.
    /// </summary>
    /// <returns>A purchase order id.</returns>
    [Replaceable]
    protected PurchId retrievePurchId()
    {
        return this.createPurchOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for updating the source tables related to the <c>PurchRFQType</c> of the <c>PurchRFQTable</c> record.
    /// </summary>
    /// <param name = "_purchRFQAcceptJournalPost">The <c>PurchRFQAcceptJournalPost</c> instance.</param>
    static delegate void updatingSourceTable(PurchRFQAcceptJournalPost _purchRFQAcceptJournalPost)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQAcceptJournalPost construct()
    {
        return new PurchRFQAcceptJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    public void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        super(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendRFQJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates class <c>PurchRFQInstrumentationLogger</c> object.
    /// </summary>
    /// <returns>
    /// Class <c>PurchRFQInstrumentationLogger</c> object.
    /// </returns>
    private PurchRFQInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>