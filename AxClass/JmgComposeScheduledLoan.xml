<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgComposeScheduledLoan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    When run, this class schedules the department lending for a specified employee in a specified date
///    interval.
/// </summary>
/// <remarks>
///    The employee must be specified through the <c>Args</c> object. The dialog box allows for a
///    calculation group, an approval group, and dimension values to be specified, as well as a date
///    interval. When run, records are created in the <c>JmgScheduledLoan</c> table.
/// </remarks>
public class JmgComposeScheduledLoan extends RunBase
{
    DialogField             dfFromDate;
    DialogField             dfToDate;
    DialogField             dfCalcGroupId;
    DialogField             dfApproveGroupId;
    DialogField             dialogDimensionEntry;   // DimensionEntryControl dialog field wrapper
    DimensionEntryControl   dimensionEntryControl;  // Instantiated DEC control
    DialogField             dfOverwrite;

    FromDate            fromDate;
    ToDate              toDate;
    JmgGroupCalcId      calcGroupId;
    JmgGroupApproveId   approveGroupId;

    DimensionDefault    defaultDimension;
    NoYes               overwrite;

    JmgWorkerRecId      jmgWorkerRecId;

    #DEFINE.CurrentVersion(5)

    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        calcGroupId,
        approveGroupId,
        defaultDimension,
        overwrite,
        jmgWorkerRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    A previously initialized dialog box; optional.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that indicates whether the dialog box must be initialized on the client.
    /// </param>
    /// <returns>
    ///    A <c>runbaseDialogable</c> object.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgComposeScheduledLoan</c> class adds six fields: <c>From date</c>, <c>To date</c>,
    ///    <c>Calculation group</c>, <c>Approval group</c>, <c>Overwrite</c>, and <c>Dimension</c>.
    /// </remarks>
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        Dialog          ret;

        ret = this.dialogInternal(_dialog, _forceOnClient);

        ret.caption("@SYS38962");

        ret.addGroup("@SYS22526");
        dfFromDate          = ret.addField(extendedtypestr(FromDate));
        dfToDate            = ret.addField(extendedtypestr(ToDate));

        ret.addGroup("@SYS1177");
        dfCalcGroupId       = ret.addField(extendedtypestr(JmgGroupCalcId));
        dfApproveGroupId    = ret.addField(extendedtypestr(JmgGroupApproveId));

        ret.addGroup("@SYS3074");
        dfOverwrite         = ret.addField(enumstr(NoYes), "@SYS54006", "@SYS79432");
        ret.addTabPage("@SYS138491");
        dialogDimensionEntry = DimensionEntryControlBuild::addToDialog(ret, classstr(LedgerDimensionEntryController));

        dfFromDate.value(fromDate);
        dfToDate.value(toDate);
        dfCalcGroupId.value(calcGroupId);
        dfApproveGroupId.value(approveGroupId);
        dfOverwrite.value(overwrite);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38962";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension entry control.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>Runbase</c> dialog object.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        dimensionEntryControl = dialogDimensionEntry.control();
        dimensionEntryControl.parmControlLabelText("@SYS14926");
        dimensionEntryControl.parmDisplayValues(true);
        dimensionEntryControl.loadAttributeValueSet(defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns dialog box values to the internal variables after the dialog box is closed.
    /// </summary>
    /// <returns>
    ///    true if the user input is validated correctly; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgComposeScheduledLoan</c> class fetches six values: From date, To date, Calculation group,
    ///    Approval group, Overwrite, and Dimension. If no from date or to date is entered, false is returned.
    ///    Also, if the entered from date is later than the to date, false is returned.If you inherit from
    ///    this method, remember always to call <c>super()</c>.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDate                = dfFromDate.value();
        toDate                  = dfToDate.value();
        calcGroupId             = dfCalcGroupId.value();
        approveGroupId          = dfApproveGroupId.value();
        defaultDimension        = dimensionEntryControl.saveAttributeValueSet();
        overwrite               = dfOverwrite.value();

        return ret && this.validateDateValues(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateValues</Name>
				<Source><![CDATA[
    protected boolean validateDateValues(FromDate _fromDate, ToDate _toDate)
    {
        boolean ret = true;

        if (!(_fromDate && _toDate))
        {
            ret = checkFailed("@SYS39609");
        }

        if (ret && (_fromDate > _toDate))
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgComposeScheduledLoan</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgComposeScheduledLoan</c> class.
    /// </returns>
    public static JmgComposeScheduledLoan construct()
    {
        return new JmgComposeScheduledLoan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret = [#CurrentVersion, #CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Based on input from the user, scheduled loan records are created and inserted into the
    ///    <c>JmgScheduledLoan</c> table.
    /// </summary>
    public void run()
    {
        JmgScheduledLoan    jmgScheduledLoan;
        date                d;

        super();

        ttsbegin;
        for (d = fromDate; d <= toDate; d++)
        {
            jmgScheduledLoan                        = JmgScheduledLoan::find(jmgWorkerRecId, d, true);
            if (jmgScheduledLoan)
            {
                if (overwrite == NoYes::Yes)
                {
                    jmgScheduledLoan.GroupCalcId    = calcGroupId;
                    jmgScheduledLoan.GroupApproveId = approveGroupId;
                    jmgScheduledLoan.DefaultDimension = jmgScheduledLoan.copyDimension(defaultDimension);
                    jmgScheduledLoan.update();
                }
            }
            else
            {
                jmgScheduledLoan.Worker             = jmgWorkerRecId;
                jmgScheduledLoan.ProfileDate        = d;
                jmgScheduledLoan.GroupCalcId        = calcGroupId;
                jmgScheduledLoan.GroupApproveId     = approveGroupId;
                jmgScheduledLoan.DefaultDimension = jmgScheduledLoan.copyDimension(defaultDimension);
                jmgScheduledLoan.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        int     version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgWorkerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the JmgWorkerRecId.
    /// </summary>
    /// <param name="_jmgWorkerRecId">
    /// The JmgWorkerRecId.
    /// </param>
    void setJmgWorkerRecId(JmgWorkerRecId _jmgWorkerRecId)
    {
        jmgWorkerRecId = _jmgWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgComposeScheduledLoan</c> class when it is called from a menu
    ///    item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgComposeScheduledLoan</c> class.
    /// </param>
    /// <remarks>
    ///       Use the
    ///    <c>
    ///       main
    ///    </c>
    ///       class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///       method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        JmgWorkerRecId          localJmgWorkerRecId;
        FormRun                 caller;

        if (_args && _args.caller())
        {
            caller = _args.caller();
            if (caller.args())
            {
                if (caller.args().dataset() == tablenum(JmgEmployee))
                {
                    JmgEmployee jmgEmployee = caller.args().record();
                    localJmgWorkerRecId = jmgEmployee.Worker;
                }
                else if (caller.args().dataset() == tablenum(HcmWorker))
                {
                    HcmWorker   hcmWorker = caller.args().record();
                    localJmgWorkerRecId = hcmWorker.RecId;
                }
            }
        }

        if (!localJmgWorkerRecId)
        {
            throw error(strfmt("@SYS29104", classstr(JmgComposeScheduledLoan)));
        }

        JmgComposeScheduledLoan jmgComposeScheduledLoan = JmgComposeScheduledLoan::construct();
        jmgComposeScheduledLoan.getLast();
        jmgComposeScheduledLoan.setJmgWorkerRecId(localJmgWorkerRecId);

        if (jmgComposeScheduledLoan.prompt())
        {
            jmgComposeScheduledLoan.runOperation();

            if (caller)
            {
                FormDataSource fds = caller.dataSource();
                fds.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>