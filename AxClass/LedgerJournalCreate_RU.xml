<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.Blank(" ")
abstract class LedgerJournalCreate_RU
{
    LedgerJournalTable         ledgerJournalTable;
    Voucher                    voucher;
    LedgerJournalType          journalType;
    RTax25RegisterJournalTable registerJournalTable;
    JournalReverseType_RU      reverseType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    abstract protected boolean canCreateJournal(boolean _showMessage = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReverseJournal</Name>
				<Source><![CDATA[
    abstract protected boolean canCreateReverseJournal(boolean _showMessage = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTable</c> record.
    /// </summary>
    abstract protected void createLedgerJournalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseTrans</Name>
				<Source><![CDATA[
    abstract protected void createReverseTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    abstract protected void createTrans(JournalId  _journalNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    protected void createVoucher(JournalId  _journalNum)
    {
        voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(_journalNum))).getNew(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainJournal</Name>
				<Source><![CDATA[
    protected LedgerJournalTable getMainJournal(LedgerJournalType   _type,
                                                ReportPeriod_RU     _transDate,
                                                boolean             _forUpdate = false)
    {
        LedgerJournalTable journalTable;
        LedgerJournalTable_W journalTable_W;

        journalTable.selectForUpdate(_forUpdate);

        select firstonly journalTable
            where     journalTable.Posted               == NoYes::Yes                  &&
                      journalTable.JournalType          == _type

            exists join journalTable_W
                where journalTable_W.LedgerJournalTable == journalTable.RecId          &&
                      journalTable_W.ReportPeriod_RU    == _transDate                  &&
                      journalTable_W.ReverseType_RU     == JournalReverseType_RU::Main &&
                      journalTable_W.Reverse_RU         == NoYes::No;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeLedgerDimensionAndDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the ledger dimension default account and the default dimensions to create a ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension default account.
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimensions.
    /// </param>
    /// <returns>
    /// A ledger dimension.
    /// </returns>
    protected LedgerDimensionAccount mergeLedgerDimensionAndDefaultDimension(
        LedgerDimensionDefaultAccount _ledgerDimension,
        DimensionDefault _defaultDimension)
    {
        LedgerDimensionAccount mergedLedgerDimension;
        List dimensionSources;

        if (_ledgerDimension)
        {
            dimensionSources = new List(Types::Class);

            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
            mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources);
        }

        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalType</Name>
				<Source><![CDATA[
    public LedgerJournalType parmJournalType(LedgerJournalType _journalType = journalType)
    {
        journalType = _journalType;
        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterJournalTable</Name>
				<Source><![CDATA[
    public RTax25RegisterJournalTable parmRegisterJournalTable(RTax25RegisterJournalTable _register = registerJournalTable)
    {
        registerJournalTable = _register;
        return registerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseType</Name>
				<Source><![CDATA[
    public JournalReverseType_RU parmReverseType(JournalReverseType_RU _reverseType = reverseType)
    {
        reverseType = _reverseType;
        return reverseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        #OCCRetryCount
        try
        {
            if (reverseType == JournalReverseType_RU::Reversed)
            {
                if (this.canCreateReverseJournal())
                {
                    this.createLedgerJournalTable();
                    this.createReverseTrans();
                }
            }
            else
            {
                if (this.canCreateJournal())
                {
                    this.createLedgerJournalTable();
                    this.createTrans(ledgerJournalTable.JournalNum);
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerJournalCreate_RU construct(LedgerJournalType _journalType)
    {
        LedgerJournalCreate_RU ledgerJournalCreate;

        switch (_journalType)
        {
            case LedgerJournalType::RTax25TaxDiffByBalance:
                ledgerJournalCreate = new LedgerJournalCreate_Tax25TaxDiffByBalance_RU();
                break;

            case LedgerJournalType::RTax25:
                ledgerJournalCreate = new LedgerJournalCreate_Tax25_RU();
                break;

            case LedgerJournalType::RTax25AmountDifference:
                ledgerJournalCreate = new LedgerJournalCreate_Tax25AmountDiff_RU();
                break;

            case LedgerJournalType::RTax25ExchDifference:
                ledgerJournalCreate = new LedgerJournalCreate_Tax25ExchDiff_RU();
                break;

            case LedgerJournalType::RAssetAssessedTax:
                ledgerJournalCreate = new LedgerJournalCreate_Assessed_RU();
                break;

            case LedgerJournalType::RAssetTransportTax:
                ledgerJournalCreate = new LedgerJournalCreate_Transport_RU();
                break;

            case LedgerJournalType::RAssetLandTax:
                ledgerJournalCreate = new LedgerJournalCreate_Land_RU();
                break;

            // <RUP>
            case LedgerJournalType::Payroll_RU:
                ledgerJournalCreate = new LedgerJournalCreate_Payroll_RU();
                break;
            // </RUP>

            case LedgerJournalType::RTax25TaxRemainGoods:
                ledgerJournalCreate = new LedgerJournalCreate_TaxRemainGoods_RU();
                break;

            case LedgerJournalType::RTax25DebtDebitReserve:
                ledgerJournalCreate = new LedgerJournalCreate_Tax25DebtReserve_RU();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        ledgerJournalCreate.parmJournalType(_journalType);

        return ledgerJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args   _args)
    {
        JournalFormTable        journalFormTable;
        FormRun                 formRun;
        Object                  formRunObject;
        LedgerJournalCreate_RU  ledgerJournalCreate;

        if (_args && _args.caller())
        {
            formRun       = _args.caller();
            formRunObject = _args.caller();

            if (formHasMethod(formRun, identifierStr(journalForm)))
            {
                journalFormTable = formRunObject.journalForm();
            }
        }

        if (!journalFormTable)
        {
            throw error(Error::missingRecord(funcName()));
        }

        ledgerJournalCreate = LedgerJournalCreate_RU::construct(journalFormTable.journalTypeId());
        ledgerJournalCreate.parmReverseType(_args.parmEnum());
        ledgerJournalCreate.parmRegisterJournalTable(formRun.args().record());

        ledgerJournalCreate.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>