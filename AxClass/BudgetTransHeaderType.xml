<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransHeaderType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransHeaderType</c> class provides the <c>BudgetTransactionHeader</c> table strategies
///    base default values and validation.
/// </summary>
/// <remarks>
///    The <c>BudgetTransHeaderType</c> class hierarchy implements the strategy pattern to provide
///    polymorphic default values and validation for budget transaction types in the
///    <c>BudgetTransactionHeader</c> table.
/// </remarks>
public class BudgetTransHeaderType
{
    boolean                   isCreate;
    boolean                   isInteractiveContext;

    BudgetTransactionHeader   budgetTransactionHeader;

    #BudgetFaults

    #define.default('default')
    #define.validate('validate')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInteractiveContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the consumer state is interactive.
    /// </summary>
    /// <returns>
    ///    true if the consumer state is interactive; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When this class is used in the context of an entity, the consumer state is not interactive. When this
    ///    class is used in the context of a client form, the consumer state is not interactive. It is sometimes
    ///    important to understand these contexts because logic that is used to provide default values can be
    ///    different.
    /// </remarks>
    public boolean isInteractiveContext()
    {
        return isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetSubModelId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>BudgetSubModelId</c> field of the
    ///    <c>BudgetTransactionHeader</c> table.
    /// </summary>
    protected void defaultBudgetSubModelId()
    {
        budgetTransactionHeader.BudgetSubModelId = budgetTransactionHeader.BudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>BudgetTransactionCode</c> field of the
    ///    <c>BudgetTransactionHeader</c> table.
    /// </summary>
    protected void defaultBudgetTransactionCode()
    {
        BudgetTransactionCode budgetTransactionCode;

        // Default the transaction code for the service only.
        if (!this.isInteractiveContext())
        {
            if (!budgetTransactionHeader.isFieldSet(fieldnum(BudgetTransactionHeader, BudgetTransactionCode))
                && isCreate)
            {
                if (budgetTransactionHeader.BudgetTransactionType != 0)
                {
                    // Transaction type is set but transaction code is not.  Find the transaction code that is the default for the specified type.
                    budgetTransactionCode = BudgetTransactionCode::findDefaultByTransactionType(budgetTransactionHeader.BudgetTransactionType);

                    if (budgetTransactionCode)
                    {
                        // Set the budget transaction code since a default budget transaction code was found for the transaction type.
                        budgetTransactionHeader.BudgetTransactionCode = budgetTransactionCode.RecId;
                    }
                }
            }
            else if (!isCreate)
            {
                // The budget transaction code was set for an existing budget transaction.
                // Since the user can't change the type on an existing transaction, we need to update the type when the transaction code changes.
                budgetTransactionCode = BudgetTransactionCode::find(budgetTransactionHeader.BudgetTransactionCode);

                if (budgetTransactionCode)
                {
                    budgetTransactionHeader.BudgetTransactionType = budgetTransactionCode.BudgetTransactionType;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>BudgetTransactionType</c> field of the
    ///    <c>BudgetTransactionHeader</c> table.
    /// </summary>
    protected void defaultBudgetTransactionType()
    {
        BudgetTransactionCode budgetTransactionCode;

        // Default the transaction type only for the service.
        if (!this.isInteractiveContext())
        {
            if (budgetTransactionHeader.isFieldSet(fieldnum(BudgetTransactionHeader, BudgetTransactionCode)))
            {
                budgetTransactionCode = BudgetTransactionCode::find(budgetTransactionHeader.BudgetTransactionCode);

                if (budgetTransactionCode.RecId != 0)
                {
                    // Set the budget transaction type to the type from the specified transaction code.
                    budgetTransactionHeader.BudgetTransactionType = budgetTransactionCode.BudgetTransactionType;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>Date</c> field of the <c>BudgetTransactionHeader</c> table.
    /// </summary>
    protected void defaultDate()
    {
        if (!budgetTransactionHeader.isFieldSet(fieldnum(BudgetTransactionHeader, Date)))
        {
            budgetTransactionHeader.Date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default values for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier of the field to set to the default values.
    /// </param>
    public void defaultField(fieldId _fieldId)
    {
        str               fieldName;
        str               methodName;
        SysDictClass      sysDictClass;
        InternalExternal  internalStatusOriginal;
        ExecutePermission permission;

        fieldName = fieldid2name(tablenum(BudgetTransactionHeader), _fieldId);
        methodName = #default + fieldName;
        sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();

            // Grant permission to execute the DictClass.callObject method.
            permission.assert();
            sysDictClass.callObject(methodName, this);

            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>PrimaryLedger</c> field of the <c>BudgetTransactionHeader</c>
    ///    table.
    /// </summary>
    protected void defaultPrimaryLedger()
    {
        RecId primaryLedger;
        budgetTransactionHeader budgetTransactionHeaderOrig;

        if (!this.isInteractiveContext())
        {
            if (!budgetTransactionHeader.isFieldSet(fieldnum(BudgetTransactionHeader, PrimaryLedger))
                && isCreate)
            {
                budgetTransactionHeader.PrimaryLedger = Ledger::current();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default field values for a <c>BudgetTransactionHeader</c> record.
    /// </summary>
    public void defaultRow()
    {
        this.defaultPrimaryLedger();
        this.defaultTransactionNumber();
        this.defaultBudgetTransactionCode();
        this.defaultBudgetTransactionType();
        this.defaultDate();
        this.defaultBudgetSubModelId();
        this.defaultWorkflowStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionNumber</c> field of the
    ///    <c>BudgetTransactionHeader</c> table.
    /// </summary>
    protected void defaultTransactionNumber()
    {
        Num num;
        NumberSeq numberSeq;
        NumberSequenceReference numberSequenceReference;

        if (!this.isInteractiveContext())
        {
            // if the transaction number is sent via the entity then don't default it.
            // The transaction number is how we tie together multiple lines in an excel scenario.
            if (isCreate && !budgetTransactionHeader.TransactionNumber)
            {
                ttsbegin;

                // Validate the number sequence for Budget Transaction Number.
                if (BudgetTransactionManager::checkBudgetTransactionNumberSequence())
                {
                    numberSequenceReference = NumberSeqReference::findReference(extendedtypenum(BudgetTransactionId));
                    Debug::assert(numberSequenceReference != null);

                    numberSeq = NumberSeq::newGetNum(numberSequenceReference, false);
                    num = numberSeq.num();

                    // Set the transaction number to the next number in the number sequence.
                    budgetTransactionHeader.TransactionNumber = num;
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>WorkflowStatus</c> field on the <c>BudgetTransactionHeader</c>
    ///    table.
    /// </summary>
    protected void defaultWorkflowStatus()
    {
        BudgetTransactionWorkflowStatus originalWorkflowStatus;
        BudgetTransactionCode     budgetTransactionCode;

        if (!this.isInteractiveContext())
        {
            if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::None
                || budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::NotSubmitted)
            {
                budgetTransactionCode = BudgetTransactionCode::find(budgetTransactionHeader.BudgetTransactionCode);

                if (budgetTransactionCode.WorkflowTableSequenceNumber
                    && budgetTransactionCode.validateWorkflowTableSequenceNumber())
                {
                    budgetTransactionHeader.WorkflowStatus = BudgetTransactionWorkflowStatus::NotSubmitted;
                }
                else
                {
                    budgetTransactionHeader.WorkflowStatus = BudgetTransactionWorkflowStatus::None;
                }

                budgetTransactionHeader.WorkflowStatus = budgetTransactionHeader.WorkflowStatus;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInteractiveContextAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budget transaction type can be used for user-created transactions.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean isInteractiveContextAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BudgetTransHeaderType</c> class.
    /// </summary>
    /// <param name="_axBudgetTransactionHeader">
    /// An instance of the <c>AxBudgetTransactionHeader</c> class that represents the data that is
    /// defaulted and validated.
    /// </param>
    /// <param name="_isInteractiveContext">
    /// A Boolean value that indicates the caller context.
    /// </param>
    /// <param name="_isCreate">
    /// A Boolean value that indicates if a transaction is being created or updated.
    /// </param>
    protected void new(BudgetTransactionHeader _budgetTransactionHeader, boolean _isInteractiveContext, boolean _isCreate)
    {
        budgetTransactionHeader = _budgetTransactionHeader;

        isInteractiveContext = _isInteractiveContext;

        isCreate = _isCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetModelId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BudgetModelId</c> field in the <c>BudgetTransactionHeader</c> table is
    ///    valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetModelId</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetModelId()
    {
        return BudgetTransactionManager::validateBudgetModel(budgetTransactionHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BudgetTransactionCode</c> field in the <c>BudgetTransactionHeader</c>
    ///    table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetTransactionCode</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetTransactionCode()
    {
        boolean isValid = true;
        BudgetTransactionCode budgetTransactionCode;

        budgetTransactionCode = BudgetTransactionCode::find(budgetTransactionHeader.BudgetTransactionCode);

        if (!this.isInteractiveContextAllowed())
        {
            if (!isInteractiveContext)
            {
                // Service message: The budget transaction type is not allowed for user-created budget transactions.
                isValid = AifFault::checkFailedLogFault(
                    "@SYS318770",
                    #BudgetTransactionTypeNotSupportedForEntry);
            }
            else
            {
                // Form message: The budget transaction type is not allowed for user-created budget transactions.
                isValid = checkFailed(strfmt("@SYS130664", budgetTransactionCode.Name, budgetTransactionCode.BudgetTransactionType));
            }
        }
        else if (BudgetTransactionManager::hasLinesForBudgetHeader(budgetTransactionHeader))
        {
            if ((budgetTransactionHeader.orig() && budgetTransactionHeader.BudgetTransactionType != budgetTransactionHeader.orig().BudgetTransactionType)
                || budgetTransactionHeader.BudgetTransactionType != budgetTransactionCode.BudgetTransactionType)
            {
                // The header has existing lines and user is trying to change to a code that has a different transaction type.
                isValid = checkFailed(strfmt("@SYS312918", budgetTransactionCode.Name, budgetTransactionHeader.orig().BudgetTransactionType));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier that corresponds with the field to be validated.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldId)
    {
        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        boolean isValid = true;
        ExecutePermission permission;

        fieldName = fieldid2name(tablenum(BudgetTransactionHeader), _fieldId);
        methodName = #validate + fieldName;

        sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();

            // Grant permission to execute the DictClass.callObject method.
            permission.assert();
            isValid = sysDictClass.callObject(methodName, this);

            CodeAccessPermission::revertAssert();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsOneTimeAmendment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>IsOneTimeAmendment</c> field in the <c>BudgetTransactionHeader</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>IsOneTimeAmendment</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateIsOneTimeAmendment()
    {
        boolean isValid = true;

        if (budgetTransactionHeader.IsOneTimeAmendment == NoYes::Yes &&
            budgetTransactionHeader.BudgetTransactionType != BudgetTransactionType::Amendment)
        {
            isValid = AifFault::checkFailedLogFault(
                "@SYS318773",
                #BudgetTransactionTypeIsNotAmendment);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReasonTableRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ReasonTableRef</c> field in the <c>BudgetTransactionHeader</c> table is
    ///    valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>ReasonTableRef</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateReasonTableRef()
    {
        boolean isValid = true;
        ReasonTableRef reasonTableRef;

        if (budgetTransactionHeader.ReasonTableRef != 0)
        {
            reasonTableRef = ReasonTableRef::find(budgetTransactionHeader.ReasonTableRef);

            if (ReasonTable::find(reasonTableRef.Reason).Ledger == NoYes::No)
            {
                isValid = AifFault::checkFailedLogFault(
                    strfmt("@SYS34253", ReasonCodeAccountTypeAll::Ledger),
                    #BudgetReasonCodeLedger);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetTransHeaderType</c> class.
    /// </summary>
    /// <param name="_axBudgetTransactionHeader">
    ///    An instance of the <c>AxBudgetTransactionHeader</c> class that represents the data that is
    ///    defaulted and validated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetTransHeaderType</c> class.
    /// </returns>
    public static BudgetTransHeaderType construct(BudgetTransactionHeader budgetTransactionHeader)
    {
        boolean               isCreate;
        boolean               isInteractiveContext;
        BudgetTransHeaderType budgetTransHeaderType;
        BudgetTransactionCode budgetTransactionCode;
        BudgetTransactionType budgetTransactionType;

        isCreate = (budgetTransactionHeader.RecId == 0);

        isInteractiveContext = FormDataUtil::isFormDataSource(budgetTransactionHeader);

        // The budget transaction code needs to be used to get the budget transaction type
        // to ensure the correct validation.
        budgetTransactionCode = BudgetTransactionCode::find(budgetTransactionHeader.BudgetTransactionCode);

        if (budgetTransactionCode.RecId != 0)
        {
            // Get the budget transaction type from the code.
            budgetTransactionType = budgetTransactionCode.BudgetTransactionType;
        }
        else
        {
            // Get the budget transaction type from the header.
            budgetTransactionType = budgetTransactionHeader.BudgetTransactionType;
        }

        switch (budgetTransactionType)
        {
            case BudgetTransactionType::Project :
                budgetTransHeaderType = new BudgetTransHeaderType_Project(budgetTransactionHeader, isInteractiveContext, isCreate);
                break;

            case BudgetTransactionType::FixedAsset :
                budgetTransHeaderType = new BudgetTransHeaderType_FixedAsset(budgetTransactionHeader, isInteractiveContext, isCreate);
                break;

            case BudgetTransactionType::FixedAsset_RU :
                budgetTransHeaderType = new BudgetTransHeaderType_FixedAsset_RU(budgetTransactionHeader, isInteractiveContext, isCreate);
                break;

            case BudgetTransactionType::SalesForecast :
                budgetTransHeaderType = new BudgetTransHeaderType_SalesForecast(budgetTransactionHeader, isInteractiveContext, isCreate);
                break;

            case BudgetTransactionType::PurchForecast :
                budgetTransHeaderType = new BudgetTransHeaderType_PurchForecast(budgetTransactionHeader, isInteractiveContext, isCreate);
                break;

            default :
                budgetTransHeaderType = new BudgetTransHeaderType(budgetTransactionHeader, isInteractiveContext, isCreate);
                break;
        }

        return budgetTransHeaderType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>