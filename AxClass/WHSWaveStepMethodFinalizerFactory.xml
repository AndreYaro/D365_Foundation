<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveStepMethodFinalizerFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveStepMethodFinalizerFactory</c> is responsible for providing the <c>WHSWaveStepMethodFinalizer</c> 
/// implementation for a given wave step method.
/// </summary>
internal final class WHSWaveStepMethodFinalizerFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInstanceFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWaveStepMethodFinalizer</c> instance based on the post method name.
    /// </summary>
    /// <param name = "_waveId">
    /// The wave id of the wave being finalize up.
    /// </param>
    /// <param name = "_waveExecutionId">
    /// The wave execution id of the wave being finalize.
    /// </param>
    /// <param name = "_postMethodName">
    /// The post method name of the wave step method.
    /// </param>
    /// /// <param name = "_perfTask">
    /// An instance of the <c>WHSInstrumentationWaveStepMethodFinalizerPerformanceTask</c> class to be used for logging.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWaveStepMethodFinalizer</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSWaveStepMethodFinalizer createInstanceFromParameters(
        WHSWaveId                                                   _waveId, 
        WHSWaveExecutionID                                          _waveExecutionId, 
        WHSPostMethodName                                           _postMethodName, 
        WHSInstrumentationWaveStepMethodFinalizerPerformanceTask    _perfTask)
    {
        var attr = new WHSWaveStepMethodFinalizerAttribute(_postMethodName);
        
        WHSWaveStepMethodFinalizer ret = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWaveStepMethodFinalizer), attr) as WHSWaveStepMethodFinalizer;
        
        if (ret)
        {
            ret.initFromParameters(_waveId, _waveExecutionId, _perfTask);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>