<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttCalendarWrkCtr</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttCalendarWrkCtr extends GanttCalendarBasic
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkIntervalsFromServer</Name>
				<Source><![CDATA[
    protected container getWorkIntervalsFromServer(FromDate _fromDate, ToDate _toDate)
    {
            return GanttCalendarWrkCtr::getWorkCalendarDateLineFromServer(_fromDate,
                                                                          _toDate,
                                                                          this.parmCalendarName(),
                                                                          null,
                                                                          '',
                                                                          setLoadedRecIds.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttCalendarWrkCtr construct()
    {
        return new GanttCalendarWrkCtr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkCalendarDateLineFromServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets all the calendar lines in a specified time interval for a specified work center.
    /// </summary>
    /// <param name="_fromDate">
    ///    A <c>from</c> enumeration value that indicates the start date of the interval for which to get the
    ///    calendar line records.
    /// </param>
    /// <param name="_toDate">
    ///    A <c>to</c> enumeration value that indicates the end date of the interval for which to get the
    ///    calendar line records.
    /// </param>
    /// <param name="_wrkCtrId">
    ///    A work center ID value that specifies the work center for which to retrieve the calendar lines.
    /// </param>
    /// <param name="_wrkCtrTable">
    ///    A <c>WrkCtrTable</c> table buffer with the work center information; optional.
    /// </param>
    /// <param name="_calendarId">
    ///    A calendar ID that specifies the work center calendar; optional.
    /// </param>
    /// <param name="_conLoadedRecIds">
    ///    A container that holds records to which to add; optional.
    /// </param>
    /// <returns>
    ///    A container with a packed set of calendar line records.
    /// </returns>
    /// <remarks>
    ///    The method is executed on the server to avoid multiple calls to the server.If the <paramref
    ///    name="_calendarId" /> parameter is not null, the records from it are added to the result that is
    ///    returned by the method.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An exception is thrown if no calendar ID was specified for the work center.
    /// </exception>
    public static container getWorkCalendarDateLineFromServer(FromDate       _fromDate,
                                                                     ToDate         _toDate,
                                                                     WrkCtrId       _wrkCtrId,
                                                                     WrkCtrTable    _wrkCtrTable        = null, // set this parameter for better performance
                                                                     GanttCalendarId _calendarId        = '',
                                                                     container      _conLoadedRecIds    = connull())
    {
        TransDate               transDate;
        GanttCalendarId         calendarId;
        WorkCalendarDateLine    workCalendarDateLine;
        List                    listRecords     = new List(Types::Record);
        Set                     setLoadedRecIds = null;

        if (_conLoadedRecIds != connull())
        {
            setLoadedRecIds = Set::create(_conLoadedRecIds);
        }

        if (!GanttDataLoadPerfOptimizationFeature::instance().isEnabled())
        {
            transDate = _fromDate;

            while (transDate <= _toDate)
            {
                if (_wrkCtrId)
                {
                    calendarId = GanttCalendarWrkCtr::getWrkCtrCalendarId(transDate, _wrkCtrId);
                }
                else
                {
                    calendarId = _calendarId;
                }

                while select workCalendarDateLine
                where workCalendarDateLine.CalendarId   == calendarId &&
                      workCalendarDateLine.TransDate    == transDate
                {
                    if (workCalendarDateLine.FromTime < workCalendarDateLine.ToTime)
                    {
                        if (!setLoadedRecIds                                                   ||
                       (setLoadedRecIds && !setLoadedRecIds.in(workCalendarDateLine.RecId)))
                        {
                            listRecords.addEnd(workCalendarDateLine);
                        }
                    }
                }

                transDate++;
            }
        }
        else
        {
            WrkCtrResourceCalendar wrkCtrResourceCalendar;

            while select validTimeState(_fromDate, _toDate) CalendarId, ValidFrom, ValidTo
            from wrkCtrResourceCalendar
            where wrkCtrResourceCalendar.WrkCtrId == _wrkCtrId
            join workCalendarDateLine
            where workCalendarDateLine.CalendarId == wrkCtrResourceCalendar.CalendarId &&
                  workCalendarDateLine.TransDate  >= wrkCtrResourceCalendar.ValidFrom  &&
                  workCalendarDateLine.TransDate  <= wrkCtrResourceCalendar.ValidTo    &&
                  workCalendarDateLine.TransDate  >= _fromDate &&
                  workCalendarDateLine.TransDate  <= _toDate
            {
                if (!setLoadedRecIds                                                   ||
                       (setLoadedRecIds && !setLoadedRecIds.in(workCalendarDateLine.RecId)))
                {
                    listRecords.addEnd(workCalendarDateLine);
                }
            }
        }

        return listRecords.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWrkCtrCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the calendar that is valid for the resource on a specific date.
    /// </summary>
    /// <param name="_transDate">
    ///    The date for which to get the calendar.
    /// </param>
    /// <param name="_wrkCtrId">
    ///    The ID of the resource for which to get the calendar.
    /// </param>
    /// <returns>
    ///    The ID of the effective calendar.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No calendar information was found on the specified date.
    /// </exception>
    public static GanttCalendarId getWrkCtrCalendarId(TransDate _transDate,
                                                      WrkCtrId  _wrkCtrId)
    {
        GanttCalendarId calendarId;

        // Get calendar from resource
        calendarId = WrkCtrResourceCalendar::findActiveForResource(_wrkCtrId, _transDate).CalendarId;

        if (calendarId)
        {
            // Resolve any base calendar and throw error if no calendar date
            calendarId = WorkCalendar::defined(calendarId, _transDate);
        }

        return calendarId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>