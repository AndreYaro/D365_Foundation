<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamVendRebateTableStatusType_Calculated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateTableStatusType_Calculate</c> class holds the rebate processes specific to rebate with status 'Calculated'.
/// </summary>
public class TamVendRebateTableStatusType_Calculated extends TAMVendRebateTableStatusType
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        super();

        TAMVendRebateAgreement tamVendRebateAgreementLocal = tamVendRebateTable.vendRebateAgreement();

        if (this.mustPostVendorInvoice(tamVendRebateAgreementLocal))
        {
            TAMVendRebateTable tamVendRebateTableLocal = TAMVendRebateTable::findByRecId(tamVendRebateTable.RecId);

            TAMVendRebatePaymentPost tamVendRebatePaymentPost = new TAMVendRebatePaymentPost();

            ttsbegin;
            tamVendRebatePaymentPost.main(tamVendRebateTableLocal);

            if (tamVendRebatePaymentPost.parmInvoiceId())
            {
                tamVendRebatePaymentPost.postVendorInvoice();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPostVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether the vendor invoice must be posted.
    /// </summary>
    /// <param name = "_tamVendRebateAgreementLocal">
    ///     The <c>TAMVendRebateAgreement</c> record corresponding to the vendor rebate.
    /// </param>
    /// <returns>
    ///		true if the vendor invoice must be posted; otherwise, false.
    /// </returns>
    protected boolean mustPostVendorInvoice(TAMVendRebateAgreement _tamVendRebateAgreementLocal)
    {
        if (_tamVendRebateAgreementLocal.CumulatePurchaseBy == TAMCumulationPeriod::Invoice
            && _tamVendRebateAgreementLocal.ApprovalRequired == NoYes::No)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate to approved status and update the record if the record is unmark for credit.
    /// </summary>
    public void runApproved()
    {
        this.setNextStatus();
        tamVendRebateTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the vendor rebate payment process.
    /// </summary>
    public void runPayment()
    {
        TAMVendRebateTable tamVendRebateTableLocal;
        ttsbegin;

        tamVendRebateTableLocal = TAMVendRebateTable::findByRecId(tamVendRebateTable.RecId, true);

        tamVendRebateTableLocal.rebateTableProcess().runPayment();

        if (tamVendRebateTableLocal.RebateBalance == 0)
        {
            this.setFinalStatus();
        }

        if (tamVendRebateTableLocal.validateWrite())
        {
            tamVendRebateTableLocal.update();
        }
        else
        {
            error("@SYS104318");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the vendor rebate accrual processing step for rebates that are in the status of calculated.
    /// </summary>
    /// <param name="_forAdjustment">
    /// Defines whether the rebate being processed is for adjustment or not.
    /// </param>
    public void runProcessed(boolean _forAdjustment  = false)
    {
        TAMVendRebateTable tamVendRebateTableLocal;
        #OCCRetryCount

        try
        {
            ttsbegin;

            tamVendRebateTableLocal = TAMVendRebateTable::findByRecId(tamVendRebateTable.RecId, true);

            tamVendRebateTableLocal.rebateTableProcess().runProcess(_forAdjustment);

            if (tamVendRebateTableLocal.validateWrite())
            {
                tamVendRebateTableLocal.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            ttscommit;

            info(strFmt("@PRO1431", tamVendRebateTableLocal.VendRebateId));
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate status as 'Approved'.
    /// </summary>
    public void setNextStatus()
    {
        tamVendRebateTable.RebateStatus = TAMVendRebateStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamVendRebateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rebate status as 'Calculated'
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    public TAMVendRebateStatus tamVendRebateStatus()
    {
        return TAMVendRebateStatus::Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PdsRebateTableStatusType_Calculated</c> class.
    /// </summary>
    /// <returns>
    /// A class instance.
    /// </returns>
    public static TAMVendRebateTableStatusType_Calculated construct()
    {
        return new TAMVendRebateTableStatusType_Calculated();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>