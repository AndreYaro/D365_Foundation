<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmLineSalesPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesParmLineSalesPurchLine</c> class contains <c>SalesParmLine</c> table specific functionality and mapped fields
/// related to the <c>SalesPurchLine</c> table map.
/// </summary>
[SalesPurchLineInterfaceFactory(tableStr(SalesParmLine))]
class SalesParmLineSalesPurchLine extends SalesPurchLineInterface
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesParmLine</Name>
				<Source><![CDATA[
    protected SalesParmLine parmSalesParmLine()
    {
        return this.parmSalesPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return this.parmSalesParmLine().salesLine().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return this.parmSalesParmLine().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public ItemId parmInventDimId()
    {
        return this.parmSalesParmLine().InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public UnitQty parmQty()
    {
        return this.parmSalesParmLine().DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignQty</Name>
				<Source><![CDATA[
    protected void assignQty(UnitQty _qty)
    {
        this.parmSalesParmLine().DeliverNow = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitId()
    {
        return this.parmSalesParmLine().salesUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignUnitId</Name>
				<Source><![CDATA[
    protected void assignUnitId(UnitOfMeasureSymbol _unitId)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public InventQty parmInventQty()
    {
        return this.parmSalesParmLine().InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInventQty</Name>
				<Source><![CDATA[
    protected void assignInventQty(InventQty _inventQty)
    {
        this.parmSalesParmLine().InventNow = _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCWQty()
    {
        return this.parmSalesParmLine().PdsCWDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public PriceCur parmPrice()
    {
        return this.parmSalesParmLine().salesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignPrice</Name>
				<Source><![CDATA[
    protected void assignPrice(PriceCur _price)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit()
    {
        return this.parmSalesParmLine().salesLine().PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignPriceUnit</Name>
				<Source><![CDATA[
    protected void assignPriceUnit(PriceUnit _priceUnit)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    public LineAmount parmLineAmount()
    {
        return this.parmSalesParmLine().LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLineAmount</Name>
				<Source><![CDATA[
    protected void assignLineAmount(LineAmount _lineAmount)
    {
        this.parmSalesParmLine().LineAmount = _lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmLineDiscAmount()
    {
        return this.parmSalesParmLine().salesLine().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLineDiscAmount</Name>
				<Source><![CDATA[
    protected void assignLineDiscAmount(DiscAmount _lineDiscAmount)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscPercent</Name>
				<Source><![CDATA[
    public DiscPct parmLineDiscPercent()
    {
        return this.parmSalesParmLine().salesLine().LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLineDiscPercent</Name>
				<Source><![CDATA[
    protected void assignLineDiscPercent(DiscPct _lineDiscPercent)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public PriceMarkup parmMarkup()
    {
        return this.parmSalesParmLine().salesLine().SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignMarkup</Name>
				<Source><![CDATA[
    protected void assignMarkup(PriceMarkup _markup)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscPercent</Name>
				<Source><![CDATA[
    public DiscPct parmDiscPercent()
    {
        return this.parmSalesParmLine().salesLine().discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmDiscAmount()
    {
        return this.parmSalesParmLine().salesLine().discAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales parmModuleType()
    {
        return this.parmSalesParmLine().salesLine().moduleType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderId</Name>
				<Source><![CDATA[
    public Num parmOrderId()
    {
        return this.parmSalesParmLine().OrigSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrderId</Name>
				<Source><![CDATA[
    public boolean hasOrderId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile_RU(PostingProfile _postingProfile_RU = '')
    {
        if (!prmisDefault(_postingProfile_RU))
        {
            this.parmSalesParmLine().PostingProfile_RU = _postingProfile_RU;
        }

        return this.parmSalesParmLine().PostingProfile_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup()
    {
        return this.parmSalesParmLine().salesLine().TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup parmTaxItemGroup()
    {
        return this.parmSalesParmLine().salesLine().TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemLineDiscCode</Name>
				<Source><![CDATA[
    protected LineDiscCode parmItemLineDiscCode()
    {
        return this.parmSalesParmLine().salesLine().itemLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountLineDiscCode</Name>
				<Source><![CDATA[
    protected LineDiscCode parmAccountLineDiscCode()
    {
        return this.parmSalesParmLine().salesLine().lineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDate</Name>
				<Source><![CDATA[
    protected TransDate parmPriceDate()
    {
        return this.parmSalesParmLine().salesLine().priceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    protected PriceGroupId parmPriceGroupId()
    {
        return this.parmSalesParmLine().salesLine().priceGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    public DiscAmount calcLineDiscExclTax(
        Qty       _qty       = this.parmQty(),
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax       _tax       = null)
    {
        DiscAmount  discAmount;

        if (!this.parmSalesParmLine().isNonSO())
        {
            discAmount = this.parmSalesParmLine().salesLine().calcLineDiscExclTax(_qty, _transDate, _tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    public AmountCur lineAmountExclTax(
        TransDate _transDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax       _tax          = null,
        boolean   _skipRounding = false)
    {
        AmountCur   lineAmount  = this.parmSalesParmLine().effectiveLineAmount();
        SalesLine   salesLine;

        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        boolean includesFormulaDesignerTax;
		
        TransTaxInformation transTaxInformation;
		
        if (countryRegion_IN)
        {
            salesLine = this.parmSalesParmLine().salesLine();
            includesFormulaDesignerTax = FormulaDesigner_IN::isPriceInclTaxOnLineAmount(salesLine.TaxItemGroup);
        }
        
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
			transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this.parmSalesParmLine());
        }
		
        if (includesFormulaDesignerTax 
            || ((transTaxInformation && transTaxInformation.InclTax == NoYes::Yes) || this.parmSalesParmLine().salesTable().InclTax == NoYes::Yes)
            && (!countryRegion_RU || this.parmSalesParmLine().inventDim().inventProfile_RU().taxUpdateOutgoing() != TaxUpdateMode_RU::NoCalc))
        {
            salesLine = this.parmSalesParmLine().salesLine();

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                return this.parmSalesParmLine().amountExcludingTaxGTE();
            }

            return salesLine.amountExclTax(lineAmount, this.parmSalesParmLine().DeliverNow, salesLine.taxDate(_transDate), _tax, _skipRounding);
        }
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    protected boolean canEditDisc()
    {
        return this.parmSalesParmLine().salesLine().canEditDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    protected void initFromPriceDisc(
        PriceDisc_Price             _priceDisc,
        PriceDiscPolicyCheckPolicy  _checkPolicy,
        boolean                     _initDateFields,
        RetailOrderCalculator       _retailCalculator)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    public TransDate taxDate(TransDate _transDate)
    {
        return this.parmSalesParmLine().salesLine().taxDate(_transDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>