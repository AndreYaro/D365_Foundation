<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttribDisplayFormatter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Globalization;

public class PdsBatchAttribDisplayFormatter
{
    private CultureInfo cultureInfoCached; // Use cultureInfo() to access

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>realToValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a real number to batch attribute value using preferred locale of the user.
    /// </summary>
    /// <param name = "_value">Real number to convert.</param>
    /// <returns>Attribute value encoded with preferred locale of the user.</returns>
    public PdsBatchAttribValue realToValue(real _value)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        // Set decimal precision according to table settings
        NumberFormatInfo tmpNumberFormat = this.numberFormat().clone();
        tmpNumberFormat.NumberDecimalDigits = PdsBatchAttrib::realTypeDecimals();

        System.Decimal decimal = _value;

        return decimal.ToString('f', tmpNumberFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intToValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an integer number to batch attribute value using preferred locale of the user.
    /// </summary>
    /// <param name = "_value">Integer number to convert.</param>
    /// <returns>Attribute value encoded with preferred locale of the user.</returns>
    public PdsBatchAttribValue intToValue(int _value)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();
        System.Int32 integer = _value;

        return integer.ToString(this.numberFormat());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a date to batch attribute value using preferred locale of the user.
    /// </summary>
    /// <param name = "_value">Date to convert.</param>
    /// <returns>Attribute value encoded with preferred locale of the user.</returns>
    public PdsBatchAttribValue dateToValue(date _value)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();
        System.DateTime dateTime = _value;

        return dateTime.ToString('d', this.dateTimeFormat()); // 'd' means short date format
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the attribute value represents a valid real number
    /// according to the preferred locale of the user.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to validate.</param>
    /// <returns>true if the attribute value is valid; otherwise, false.</returns>
    public boolean isValidReal(PdsBatchAttribValue _attributeValue)
    {
        container ret = this.tryParseRealAttribute(_attributeValue);

        return conPeek(ret, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an attribute value encoded in preferred locale of the user
    /// into a real number.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to convert.</param>
    /// <returns>Attribute value converted to a real number.</returns>
    /// <exception>Exception is thrown if the attribute value doesn't represent a real number.</exception>
    public real toReal(PdsBatchAttribValue _attributeValue)
    {
        boolean valid;
        real result;

        [valid, result] = this.tryParseRealAttribute(_attributeValue);
        if (!valid)
        {
            throw error(strfmt("@PRO2249", _attributeValue));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the attribute value represents a valid integer number
    /// according to the preferred locale of the user.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to validate.</param>
    /// <returns>true if the attribute value is valid; otherwise, false.</returns>
    public boolean isValidInt(PdsBatchAttribValue _attributeValue)
    {
        container ret = this.tryParseIntAttribute(_attributeValue);

        return conPeek(ret, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an attribute value encoded in preferred locale of the user
    /// into an integer number.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to convert.</param>
    /// <returns>Attribute value converted to an integer number.</returns>
    /// <exception>Exception is thrown if the attribute value doesn't represent an integer number.</exception>
    public int toInt(PdsBatchAttribValue _attributeValue)
    {
        boolean valid;
        int result;

        [valid, result] = this.tryParseIntAttribute(_attributeValue);
        if (!valid)
        {
            throw error(strFmt("@PRO1954", _attributeValue));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the attribute value represents a valid date
    /// according to the preferred locale of the user.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to validate.</param>
    /// <returns>true if the attribute value is valid; otherwise, false.</returns>
    public boolean isValidDate(PdsBatchAttribValue _attributeValue)
    {
        container ret = this.tryParseDateAttribute(_attributeValue);

        return conPeek(ret, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an attribute value encoded in preferred locale of the user
    /// into a date.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to convert.</param>
    /// <returns>Attribute value converted to a date.</returns>
    /// <exception>Exception is thrown if the attribute value doesn't represent a date.</exception>
    public date toDate(PdsBatchAttribValue _attributeValue)
    {
        boolean valid;
        date result;

        [valid, result] = this.tryParseDateAttribute(_attributeValue);
        if (!valid)
        {
            UserInfo userInfo;

            select PreferredLocale from userInfo
                where userInfo.Id == curUserId();

            if (userInfo.PreferredLocale == '')
            {
                error("@SCM:FillInPreferredLocale");
            }
            throw error(strFmt("@PRO:InvalidDateError", _attributeValue));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidBatchEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the attribute value represents a valid batch enumeration value.
    /// </summary>
    /// <param name = "_attributeId">Id of the batch attribute to validate against.</param>
    /// <param name = "_enumValue">Value to validate.</param>
    /// <returns>true if the attribute value is valid; otherwise, false.</returns>
    public boolean isValidBatchEnumValue(
        PdsBatchAttribId    _attributeId,
        str                 _enumValue)
    {
        return PdsBatchAttribEnumValues::exist(
                _attributeId,
                _enumValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseRealAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to parse an attribute value encoded with the preferred locale of the user
    /// to a real number.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to parse.</param>
    /// <returns>Container in the form [valid, value]. valid is set to true if the conversion was successful or false otherwise.</returns>
    private container tryParseRealAttribute(PdsBatchAttribValue _attributeValue)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        const NumberStyles realNumberStyles =
            NumberStyles::AllowDecimalPoint
            | NumberStyles::AllowExponent
            | NumberStyles::AllowLeadingSign
            | NumberStyles::AllowLeadingWhite
            | NumberStyles::AllowThousands
            | NumberStyles::AllowTrailingWhite;

        System.Decimal decimal;
        boolean valid = System.Decimal::TryParse(
                            _attributeValue,
                            realNumberStyles,
                            this.numberFormat(),
                            byref decimal);

        return [valid, decimal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseIntAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to parse an attribute value encoded with the preferred locale of the user
    /// to an integer number.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to parse.</param>
    /// <returns>Container in the form [valid, value]. valid is set to true if the conversion was successful or false otherwise.</returns>
    private container tryParseIntAttribute(PdsBatchAttribValue _attributeValue)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        const NumberStyles intNumberStyles =
            NumberStyles::AllowThousands
            | NumberStyles::AllowLeadingSign
            | NumberStyles::AllowTrailingWhite
            | NumberStyles::AllowLeadingWhite;

        System.Int32 integer;
        boolean valid = System.Int32::TryParse(
                            _attributeValue,
                            intNumberStyles,
                            this.numberFormat(),
                            byref integer);

        return [valid, integer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseDateAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to parse an attribute value encoded with the preferred locale of the user
    /// to a date.
    /// </summary>
    /// <param name = "_attributeValue">Attribute value to parse.</param>
    /// <returns>Container in the form [valid, value]. valid is set to true if the conversion was successful or false otherwise.</returns>
    private container tryParseDateAttribute(PdsBatchAttribValue _attributeValue)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        const DateTimeStyles dateTimeStyles =
            DateTimeStyles::NoCurrentDateDefault
            | DateTimeStyles::AllowLeadingWhite
            | DateTimeStyles::AllowTrailingWhite;

        System.DateTime dateTime;
        boolean valid = System.DateTime::TryParse(
                            _attributeValue,
                            this.dateTimeFormat(),
                            dateTimeStyles,
                            byref dateTime);

        if (valid)
        {
            dateTime = dateTime.get_Date();

            System.DateTime minDate = System.DateTime::MinValue;
            minDate = minDate.get_Date();

            // If only time is specified then the date part is set to MinValue
            if (dateTime.Equals(minDate))
            {
                valid = false;
            }
        }

        return [valid, dateTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cultureInfo</Name>
				<Source><![CDATA[
    private CultureInfo cultureInfo()
    {
        if (cultureInfoCached == null)
        {
            str locale = this.currentUserPreferredLocale();

            new InteropPermission(InteropKind::ClrInterop).assert();
            // We need to use a two parameter version because the wrong overload is chosen
            // when only one parameter is supplied
            cultureInfoCached = CultureInfo::GetCultureInfo(locale, locale);
        }

        return cultureInfoCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberFormat</Name>
				<Source><![CDATA[
    private NumberFormatInfo numberFormat()
    {
        return this.cultureInfo().get_NumberFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTimeFormat</Name>
				<Source><![CDATA[
    private DateTimeFormatInfo dateTimeFormat()
    {
        return this.cultureInfo().get_DateTimeFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsBatchAttribDisplayFormatter construct()
    {
        return new PdsBatchAttribDisplayFormatter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUserPreferredLocale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the preferred locale for the current user.
    /// </summary>
    /// <returns>Preferred locale for the current user.</returns>
    private PreferredLocale currentUserPreferredLocale()
    {
        UserInfo userInfo;

        select Language, PreferredLocale from userInfo
            where userInfo.Id == curUserId();

        return userInfo.PreferredLocale != ''   ?
                userInfo.PreferredLocale        :
                userInfo.Language;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>