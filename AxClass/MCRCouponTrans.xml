<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCouponTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCouponTrans</c> class performs coupon related functions including
/// validating coupons, creating misc charges for coupons, and deleting coupons.
/// </summary>
class MCRCouponTrans
{
    SalesTable salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCouponAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the coupon amount and returns the value.
    /// </summary>
    /// <returns>
    /// Returns the coupon amount.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Coupons cannot be applied to orders with continuity items.
    /// </exception>
    AmountMST calcCouponAmount()
    {
        SalesLine               salesLine;
        SalesLine               continuitySalesLine;
        MCRSalesLine            mcrSalesLine;
        MCRCouponSalesTable     mcrCouponSalesTable;
        InventTable             inventTableSalesLine;
        MCRCoupon               mcrCoupon;
        MCRCouponDiscount       mcrCouponDiscount;
        MCRInventTable          mcrInventTable;
        Map                     mapSalesCouponToMCRCoupon;
        MapEnumerator           mapEnumerator;
        Set                     setFixedCalcDone;
        Set                     setCouponHasValidItem;
        AmountMST               lineAmountMST;
        AmountMST               couponAmountMST;

        select firstonly RecId from mcrCouponSalesTable
            where mcrCouponSalesTable.SalesId == salesTable.SalesId;

        if (mcrCouponSalesTable)
        {
            select firstonly RecId from continuitySalesLine
                where continuitySalesLine.SalesId == salesTable.SalesId
                exists join mcrSalesLine
                    where mcrSalesLine.SalesLine == continuitySalesLine.RecId
                       && mcrSalesLine.LineType  == MCRLineType::ContinuityParent;
            if (continuitySalesLine)
            {
                throw error("@MCR28587");
            }
        }

        // Store corresponding coupon record for each of the sales order's coupons.
        mapSalesCouponToMCRCoupon = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

        // Add all valid coupons to map.
        while select RecId from mcrCouponSalesTable
            where mcrCouponSalesTable.SalesId == salesTable.SalesId
            join mcrCoupon
                where mcrCoupon.MCRCouponId == mcrCouponSalesTable.MCRCouponId
        {
            // Add coupon to list if valid.
            if (this.validateCoupon(mcrCoupon))
            {
                mapSalesCouponToMCRCoupon.insert(mcrCouponSalesTable.RecId, mcrCoupon);
            }
        }

        // Do nothing further if there were no valid coupons.
        if (!mapSalesCouponToMCRCoupon.empty())
        {
            // Store which coupon's have already had a fixed calculation run so only run once.
            setFixedCalcDone = new Set(typeName2Type(extendedTypeStr(RecId)));

            // Store if coupon has at least one qualifying sales line.
            setCouponHasValidItem = new Set(typeName2Type(extendedTypeStr(MCRCouponId)));

            // For each sales line that has an item that can be used for coupons and has
            // not been invoiced, check it against every coupon on the sales order.
            while select salesLine
                where salesLine.SalesId == salesTable.SalesId
                    && salesLine.QtyOrdered > 0
                    && (salesLine.SalesStatus    == SalesStatus::Backorder
                        || salesLine.SalesStatus == SalesStatus::Delivered)
                join RecId from inventTableSalesLine
                    where inventTableSalesLine.ItemId == salesLine.ItemId
                outer join CouponUse from mcrInventTable
                    where mcrInventTable.InventTable == inventTableSalesLine.RecId
                        && mcrInventTable.CouponUse
            {
                // Skip and warn of any items that can not be used for coupons.
                if (mcrInventTable
                    && !mcrInventTable.CouponUse)
                {
                    warning(strFmt("@MCR26533", salesLine.ItemId));
                    continue;
                }

                // Skip sales lines that have any amount invoiced.
                if (salesLine.invoicedInTotal() > 0)
                {
                    continue;
                }

                // Check every coupon to see if sales line qualifies for the coupon.
                mapEnumerator = mapSalesCouponToMCRCoupon.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    mcrCoupon = mapEnumerator.currentValue();

                    // Validate the item of the sales line.
                    if (this.validateCouponItem(mcrCoupon, salesLine))
                    {
                        // The coupon has at least one qualifying item and therefore will
                        // not warn later that it is invalid.
                        setCouponHasValidItem.add(mcrCoupon.MCRCouponId);

                        // Calculate the coupon value for this sales order line.
                        lineAmountMST = salesLine.lineAmountMST();

                        select firstOnly MCRCouponValue, MCRCouponDiscAttr, MCRCouponAmount from mcrCouponDiscount
                            order by mcrCouponAmount desc
                            where mcrCouponDiscount.MCRCouponId     == mcrCoupon.MCRCouponId
                               && mcrCouponDiscount.MCRCouponAmount <= lineAmountMST;
                        if (mcrCouponDiscount)
                        {
                            switch (mcrCouponDiscount.MCRCouponDiscAttr)
                            {
                                case MCRCouponDiscAttr::Percent:
                                    couponAmountMST += lineAmountMST * mcrCouponDiscount.MCRCouponValue / 100;
                                    break;

                                // Amount per
                                case MCRCouponDiscAttr::Amount:
                                    if (mcrCouponDiscount.MCRCouponAmount > 0)
                                    {
                                        couponAmountMST += real2int(lineAmountMST / mcrCouponDiscount.MCRCouponAmount) * mcrCouponDiscount.MCRCouponValue;
                                    }
                                    // if Amount not set, use the line qty
                                    else
                                    {
                                        couponAmountMST += salesLine.QtyOrdered * mcrCouponDiscount.MCRCouponValue;
                                    }
                                    break;

                                case MCRCouponDiscAttr::AmountFixed:
                                    if (!setFixedCalcDone.in(mapEnumerator.currentKey()))
                                    {
                                        // Only calculate the fixed amount for this coupon once per sales order.
                                        setFixedCalcDone.add(mapEnumerator.currentKey());
                                        couponAmountMST += mcrCouponDiscount.MCRCouponValue;
                                    }
                                    break;

                                default:
                                    break;
                            }
                        }
                    }
                }
            }

            // Warn about any of the coupons that were valid but did not have a qualifying
            // sales line.
            mapEnumerator = mapSalesCouponToMCRCoupon.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                mcrCoupon = mapEnumerator.currentValue();
                if (!setCouponHasValidItem.in(mcrCoupon.MCRCouponId))
                {
                    warning (strFmt ("@MCR25982", mcrCoupon.MCRCouponId, salesTable.SalesId));
                }
            }
        }

        return couponAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the markup records associated with coupons.
    /// </summary>
    void deleteMarkupTrans()
    {
        MarkupTrans         markupTrans;
        MCROrderParameters  mcrOrderParameters;

        if (salesTable.RecId)
        {
            mcrOrderParameters = MCROrderParameters::find();

            ttsBegin;

            delete_from markupTrans
                where markupTrans.TransRecId   == salesTable.RecId
                   && markupTrans.TransTableId == salesTable.TableId
                   && markupTrans.MarkupCode   == mcrOrderParameters.CouponMiscChargeCode
                   && markupTrans.MCRCouponMarkup;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCouponCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a coupon exists in a catalog.
    /// </summary>
    /// <param name="_mcrCouponId">
    /// The coupon id of coupon to check whether exists in catalog.
    /// </param>
    /// <param name="_mcrSourceId">
    /// The source id to use to search catalog.
    /// </param>
    /// <param name="_catalogCode">
    /// The code as to whether searching all catalogs or a specific one.
    /// </param>
    /// <returns>
    /// true if coupon exists for the given coupon, sales line, and catalog code; otherwise, false.
    /// </returns>
    protected boolean existCouponCatalog(
        MCRCouponId     _mcrCouponId,
        MCRSourceId     _mcrSourceId,
        MCRTableAll     _catalogCode)
    {
        MCRCouponCatalog    mcrCouponCatalog;
        MCRSourceCodeSetup  mcrSourceCodeSetup;
        boolean             existCouponCatalog;

        switch (_catalogCode)
        {
            case MCRTableAll::All:
                select firstOnly RecId from mcrCouponCatalog
                    where mcrCouponCatalog.CatalogCode == MCRTableAll::All
                       && mcrCouponCatalog.CouponId    ==_mcrCouponId;
                if (mcrCouponCatalog)
                {
                    existCouponCatalog = true;
                }
                break;

            case MCRTableAll::Table:
                select firstonly RecId from mcrSourceCodeSetup
                    where mcrSourceCodeSetup.SourceID == _mcrSourceId
                    exists join mcrCouponCatalog
                        where mcrCouponCatalog.Catalog     == mcrSourceCodeSetup.Catalog
                           && mcrCouponCatalog.CatalogCode == MCRTableAll::Table
                           && mcrCouponCatalog.CouponId    == _mcrCouponId;
                if (mcrSourceCodeSetup)
                {
                    existCouponCatalog = true;
                }
                break;
        }

        return existCouponCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCouponItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an item matches a coupon criteria.
    /// </summary>
    /// <param name="_mcrCouponId">
    /// The coupon id of the coupon used to match item.
    /// </param>
    /// <param name="_itemId">
    /// The item id of the item to match against coupon.
    /// </param>
    /// <param name="_itemCode">
    /// Whether searching for item matches using all, item group, or item id.
    /// </param>
    /// <returns>
    /// true if the item matches any of coupon's item definitions; otherwise, false.
    /// </returns>
    protected boolean existCouponItem(
        MCRCouponId _mcrCouponId,
        ItemId      _itemId,
        ItemCode    _itemCode)
    {
        MCRCouponItem           mcrCouponItem;
        InventTable             inventTable;
        InventItemGroupItem     inventItemGroupItem;
        boolean                 existCouponItem;

        switch (_itemCode)
        {
            case TableGroupAll::All:
                select firstonly RecId from mcrCouponItem
                    where mcrCouponItem.ItemCode    == TableGroupAll::All
                       && mcrCouponItem.MCRCouponId == _mcrCouponId;
                if (mcrCouponItem)
                {
                    existCouponItem = true;
                }
                break;

            case TableGroupAll::GroupId:
                select firstonly RecId from inventTable
                    where inventTable.ItemId == _itemId
                    exists join mcrCouponItem
                        where mcrCouponItem.ItemCode    == TableGroupAll::GroupId
                           && mcrCouponItem.MCRCouponId == _mcrCouponId
                    exists join inventItemGroupItem
                        where inventItemGroupItem.ItemId         == inventTable.ItemId
                           && inventItemGroupItem.ItemDataAreaId == inventTable.DataAreaId
                           && inventItemGroupItem.ItemGroupId    == mcrCouponItem.ItemRelation;
                if (inventTable)
                {
                    existCouponItem = true;
                }
                break;

            case TableGroupAll::Table:
                select firstonly RecId from mcrCouponItem
                    where mcrCouponItem.ItemRelation == _itemId
                       && mcrCouponItem.ItemCode     == TableGroupAll::Table
                       && mcrCouponItem.MCRCouponId  == _mcrCouponId;
                if (mcrCouponItem)
                {
                    existCouponItem = true;
                }
                break;
        }

        return existCouponItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCoupon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the coupon and if it can be applied to the sales order.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The <c>MCRCoupon</c> buffer containing the coupon information.
    /// </param>
    /// <returns>
    /// true if the coupon is valid; otherwise, false.
    /// </returns>
    boolean validateCoupon(MCRCoupon _mcrCoupon)
    {
        boolean ok = true;

         // Verify the coupon is active.
        if (!_mcrCoupon.MCREnabled)
        {
            ok = checkFailed(strFmt("@MCR25974", _mcrCoupon.MCRCouponId));
        }

        // Verify the coupon has not been voided.
        if (_mcrCoupon.MCRCouponVoided)
        {
            ok = checkFailed(strFmt("@MCR25975", _mcrCoupon.MCRCouponId));
        }

        // Check the customer of sales order if the coupon is customer specific.
        ok = this.validateCouponCustSpecific(_mcrCoupon) && ok;

        // If a one time use coupon, then verify the coupon is not already used.
        ok = this.validateCouponOneTimeUse(_mcrCoupon) && ok;

        // If multiple coupons are used, verify that the coupons are not exclusive.
        ok = this.validateCouponExclusive(_mcrCoupon) && ok;

        // Verify the requested shipping date against the begin/end date of the coupon.
        ok = this.validateCouponDate(_mcrCoupon) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCouponCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the coupon and if it can be applied based on the catalog on the sales order.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> buffer containing the sales line.
    /// </param>
    /// <param name="_mcrCoupon">
    /// The <c>MCRCoupon</c> buffer containing the coupon information.
    /// </param>
    /// <returns>
    /// true if the coupon combine with the catalog is valid; otherwise, false.
    /// </returns>
    protected boolean validateCouponCatalog(SalesLine _salesLine, MCRCoupon _mcrCoupon)
    {
        MCRSalesLine        mcrSalesLine;
        boolean             ok = true;

        // At least one item must be valid for the coupon
        switch (_mcrCoupon.MCRIncludeExcludeCatalog)
        {
            case MCRCouponInclude::Include:
                mcrSalesLine = _salesLine.mcrSalesLine();

                // If the sales order source id is blank, do not accept this line.
                if (!mcrSalesLine.SourceId)
                {
                    ok = checkFailed(strFmt("@MCR26392",
                        _mcrCoupon.MCRCouponId,
                        _salesLine.SalesId,
                        _salesLine.ItemId));
                }

                if (ok
                    && !this.existCouponCatalog(_mcrCoupon.MCRCouponId, mcrSalesLine.SourceId, MCRTableAll::All)
                    && !this.existCouponCatalog(_mcrCoupon.MCRCouponId, mcrSalesLine.SourceId, MCRTableAll::Table))
                {
                    ok = false;
                }
                break;

            case MCRCouponInclude::Exclude:
                // The coupon should not be found in catalog.
                if (this.existCouponCatalog(_mcrCoupon.MCRCouponId, mcrSalesLine.SourceId, MCRTableAll::All))
                {
                    ok = checkFailed(strFmt("@MCR26393",
                        mcrSalesLine.SourceId,
                        _mcrCoupon.MCRCouponId));
                }

                mcrSalesLine = _salesLine.mcrSalesLine();
                if (ok
                    && this.existCouponCatalog(_mcrCoupon.MCRCouponId, mcrSalesLine.SourceId, MCRTableAll::Table))
                {
                    ok = checkFailed(strFmt("@MCR26393",
                        mcrSalesLine.SourceId,
                        _mcrCoupon.MCRCouponId));
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCouponCustSpecific</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the customer of sales order against the coupon if the coupon is
    /// customer specific.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The coupon to check.
    /// </param>
    /// <returns>
    /// true if the sales order customer is valid; otherwise, false.
    /// </returns>
    protected boolean validateCouponCustSpecific(MCRCoupon _mcrCoupon)
    {
        MCRCouponCustomer   mcrCouponCustomer;
        CustTable           custTable;
        boolean             customerSpecificValid = true;

        // If the coupon is setup for customer specific, then check customer code
        // combinations against customer.
        if (_mcrCoupon.MCRCustomerSpecific)
        {
            // Check all.
            select firstonly RecId from mcrCouponCustomer
                where mcrCouponCustomer.CustomerCode     == TableGroupAll::All
                    && mcrCouponCustomer.MCRCouponVoided == NoYes::No
                    && mcrCouponCustomer.MCRCouponId     == _mcrCoupon.MCRCouponId;
            if (!mcrCouponCustomer.RecId)
            {
                // Check group.
                select firstonly RecId from mcrCouponCustomer
                    where mcrCouponCustomer.CustomerCode    == TableGroupAll::GroupId
                       && mcrCouponCustomer.MCRCouponVoided == NoYes::No
                       && mcrCouponCustomer.MCRCouponId     == _mcrCoupon.MCRCouponId
                    exists join custTable
                        where custTable.CustGroup  == mcrCouponCustomer.CustVendRel
                           && custTable.AccountNum == salesTable.InvoiceAccount;

                if (!mcrCouponCustomer.RecId)
                {
                    // Check table.
                    select firstonly RecId from mcrCouponCustomer
                        where mcrCouponCustomer.CustomerCode    == TableGroupAll::Table
                           && mcrCouponCustomer.MCRCouponVoided == NoYes::No
                           && mcrCouponCustomer.CustVendRel     == salesTable.InvoiceAccount
                           && mcrCouponCustomer.MCRCouponId     == _mcrCoupon.MCRCouponId;

                    if (!mcrCouponCustomer.RecId)
                    {
                        customerSpecificValid = checkFailed(strFmt("@MCR25976", _mcrCoupon.MCRCouponId));
                    }
                }
            }
        }
        return customerSpecificValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCouponDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the sales order requested ship date is valid for a the from
    /// and to date of a coupon.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The coupon to check.
    /// </param>
    /// <returns>
    /// true if the shipping dates are within the coupon's date range; otherwise, false.
    /// </returns>
    protected boolean validateCouponDate(MCRCoupon _mcrCoupon)
    {
        boolean validCouponDate = true;

        // Validate that the the requested shipdate matches the coupon time frame
        if ((_mcrCoupon.MCRFromDate  && _mcrCoupon.MCRFromDate > salesTable.ShippingDateRequested)
            || (_mcrCoupon.MCRToDate && _mcrCoupon.MCRToDate   < salesTable.ShippingDateRequested))
        {
            validCouponDate = checkFailed(strFmt("@MCR25980", _mcrCoupon.MCRCouponId, salesTable.ShippingDateRequested));
        }

        // Validate that the requested shipdate is greater than the coupon expiration date
        if (_mcrCoupon.MCRCouponExpDate
            && _mcrCoupon.MCRCouponExpDate < salesTable.ShippingDateRequested)
        {
            validCouponDate = checkFailed(strFmt("@MCR25980", _mcrCoupon.MCRCouponId, salesTable.ShippingDateRequested)
                + " "
                + "@MCR25981");
        }

        return validCouponDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCouponExclusive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that if a sales order has multiple coupons, that none of the coupons
    /// are exclusive.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The coupon to check.
    /// </param>
    /// <returns>
    /// true if the coupon complies with any coupon exclusivity; otherwise, false.
    /// </returns>
    protected boolean validateCouponExclusive(MCRCoupon _mcrCoupon)
    {
        MCRCouponSalesTable mcrCouponSalesTable;
        MCRCoupon           mcrCouponExclusive;
        boolean             validExclusive = true;

        // If multiple coupons are setup, check that coupons are not exclusive
        if (_mcrCoupon.MCRExclusive)
        {
            select firstonly RecId from mcrCouponSalesTable
                where mcrCouponSalesTable.MCRCouponId != _mcrCoupon.MCRCouponId
                   && mcrCouponSalesTable.SalesId     == salesTable.SalesId
                   && mcrCouponSalesTable.MCRReissue  == NoYes::No;
            if (mcrCouponSalesTable.RecId)
            {
                validExclusive = checkFailed(strFmt("@MCR25978", _mcrCoupon.MCRCouponId));
            }
        }
        else
        {
            select firstonly RecId, MCRCouponId from mcrCouponSalesTable
                where mcrCouponSalesTable.MCRCouponId != _mcrCoupon.MCRCouponId
                   && mcrCouponSalesTable.SalesId     == salesTable.SalesId
                   && mcrCouponSalesTable.MCRReissue  == NoYes::No
                exists join mcrCouponExclusive
                    where mcrCouponExclusive.MCRCouponId == mcrCouponSalesTable.MCRCouponId
                       && mcrCouponExclusive.MCRExclusive;
            if (mcrCouponSalesTable.RecId)
            {
                validExclusive = checkFailed(strFmt("@MCR25979", mcrCouponSalesTable.MCRCouponId));
            }
        }

        return validExclusive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCouponItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the coupon and if it can be applied based on the item on the sales line.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The <c>MCRCoupon</c> buffer containing the coupon information.
    /// </param>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> buffer containing the sales line.
    /// </param>
    /// <returns>
    /// true if the coupon combine with the item is valid; otherwise, false.
    /// </returns>
    boolean validateCouponItem(MCRCoupon _mcrCoupon, SalesLine _salesLine)
    {
        boolean itemOk = true;
        boolean catalogOk;

        // At least one item must be valid for the coupon
        switch (_mcrCoupon.MCRIncludeExcludeItem)
        {
            case MCRCouponInclude::Include:
                // If the item does not match any of the inclusion criteria, then it is not valid.
                if (   !this.existCouponItem(_mcrCoupon.MCRCouponId, _salesLine.ItemId, TableGroupAll::All)
                    && !this.existCouponItem(_mcrCoupon.MCRCouponId, _salesLine.ItemId, TableGroupAll::GroupId)
                    && !this.existCouponItem(_mcrCoupon.MCRCouponId, _salesLine.ItemId, TableGroupAll::Table))
                {
                    itemOk = checkFailed(strFmt("@MCR26394", _salesLine.ItemId, _mcrCoupon.MCRCouponId));
                }
                break;

            case MCRCouponInclude::Exclude:
                // If the item matches any of the exclusion criteria, then it is not valid.
                if (   this.existCouponItem(_mcrCoupon.MCRCouponId, _salesLine.ItemId, TableGroupAll::All)
                    || this.existCouponItem(_mcrCoupon.MCRCouponId, _salesLine.ItemId, TableGroupAll::GroupId)
                    || this.existCouponItem(_mcrCoupon.MCRCouponId, _salesLine.ItemId, TableGroupAll::Table))
                {
                    itemOk = checkFailed(strFmt("@MCR26394", _salesLine.ItemId, _mcrCoupon.MCRCouponId));
                }

                break;
        }

        if (itemOk)
        {
            // Only check validity of catalog if item is valid.
            catalogOk = this.validateCouponCatalog(_salesLine, _mcrCoupon);
        }

        return itemOk && catalogOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCouponOneTimeUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that if a coupon is a one time use coupon that it has not already
    /// been used by another sales order.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The coupon to check.
    /// </param>
    /// <returns>
    /// true if the coupon complies with one time use restriction; otherwise, false.
    /// </returns>
    protected boolean validateCouponOneTimeUse(MCRCoupon _mcrCoupon)
    {
        MCRCouponSalesTable mcrCouponSalesTable;
        boolean             validOneTimeUse = true;

        // If a one time use coupon, then make sure the coupon is not already used.
        if (_mcrCoupon.MCROneTimeUse)
        {
            select firstonly RecId, SalesId from mcrCouponSalesTable
                where mcrCouponSalesTable.MCRCouponId == _mcrCoupon.MCRCouponId
                   && mcrCouponSalesTable.SalesId     != salesTable.SalesId
                   && mcrCouponSalesTable.CustAccount == salesTable.InvoiceAccount
                   && mcrCouponSalesTable.MCRReissue  == NoYes::No;
            if (mcrCouponSalesTable.RecId)
            {
                validOneTimeUse = checkFailed(strFmt("@MCR25977", _mcrCoupon.MCRCouponId, mcrCouponSalesTable.SalesId));
            }
        }

        return validOneTimeUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMarkUpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the coupon markup charge.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Exception when the parameters are not setup or insert validation fails.
    /// </exception>
    void writeMarkUpTrans()
    {
        MarkupTrans                 markupTrans;
        CompanyInfo                 companyInfo = CompanyInfo::find();
        MCROrderParameters          mcrOrderParameters = MCROrderParameters::find();
        AmountMST                   couponAmountMST;
        MCRSalesOrderTotals         mcrSalesOrderTotals;
        AmountCur                   invoicedAmountCur;
        AmountMST                   invoicedAmountMST;
        ttsBegin;

        couponAmountMST = this.calcCouponAmount();

        //  Convert to the sales order currency
        couponAmountMST = CurrencyExchangeHelper::curAmount2CurAmount(couponAmountMST, Ledger::accountingCurrency(companyInfo.RecId), salesTable.CurrencyCode);

        // For final rounding, use Currency::roundedOffTotalAmount not CurrencyExchangeHelper::curAmount.
        couponAmountMST = CurrencyExchange::roundWithRuleType(couponAmountMST,
                                        salesTable.CurrencyCode,
                                        CurrencyRoundingRuleType::SalesOrder);

        // Deduct invoiced coupon amount
        if (couponAmountMST)
        {
            mcrSalesOrderTotals = new MCRSalesOrderTotals(this.parmSalesTable());
            invoicedAmountCur = mcrSalesOrderTotals.getInvoicedMarkupCoupon();
            invoicedAmountMST = CurrencyExchangeHelper::curAmount2CurAmount(invoicedAmountCur, Ledger::accountingCurrency(companyInfo.RecId), salesTable.CurrencyCode);
            invoicedAmountMST = CurrencyExchange::roundWithRuleType(invoicedAmountMST,
                                                        Ledger::accountingCurrency(companyInfo.RecId),
                                                        CurrencyRoundingRuleType::SalesOrder);
            couponAmountMST -= invoicedAmountMST;
        }

        // delete the previously written markup trans record
        this.deleteMarkupTrans();
        if (couponAmountMST != 0)
        {
            if (!mcrOrderParameters.CouponMiscChargeCode)
            {
                throw error("@MCR4410226");
            }
            markupTrans.MarkupCode = mcrOrderParameters.CouponMiscChargeCode;
            markupTrans.MarkupCategory = MarkupCategory::Fixed;
            markupTrans.CurrencyCode = salesTable.CurrencyCode;
            markupTrans.TransTableId = salesTable.TableId;
            markupTrans.TransRecId = salesTable.RecId;
            markupTrans.ModuleType = MarkupModuleType::Cust;
            markupTrans.LineNum = MarkupTrans::lastLineNum(salesTable.TableId, salesTable.RecId);
            markupTrans.LineNum        += 1;
            markupTrans.ModuleCategory = HeadingLine::Heading;
            markupTrans.Value = couponAmountMST;
            markupTrans.MCRCouponMarkup = NoYes::Yes;
            markupTrans.TaxItemGroup = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode).TaxItemGroup;
            markupTrans.TaxGroup = salesTable.TaxGroup;
            if (markupTrans.validateWrite())
            {
                markupTrans.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>