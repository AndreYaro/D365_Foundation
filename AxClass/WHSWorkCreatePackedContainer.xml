<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreatePackedContainer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreatePackedContainer</c> class is used to create work after closing the container.
/// </summary>
public class WHSWorkCreatePackedContainer extends WHSWorkCreatePackedContainerBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        containerTable = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(containerTable, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkCreatePackedContainer construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreatePackedContainer workCreate = new WHSWorkCreatePackedContainer(_common, _workCreateId);

        return workCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineForContainer</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineForContainer()
    {
        this.initTmpWorkLineFromContainerTable();

        WHSContainerLine firstContainerLine = this.initTmpWorkLineAndGetFirstContainerLine();

        this.initTmpWorkLineFromContainerLines(firstContainerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkTable</Name>
				<Source><![CDATA[
    protected void updateWorkTable(WHSWorkId _workId)
    {
        WHSWorkTable workTable                  = WHSWorkTable::find(_workId, true);
        workTable.ContainerId                   = containerTable.ContainerId;
        workTable.HasWorkLineLoadLineDetails    = NoYes::Yes;
        workTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    protected void createWorkLineLoadLineDetails(WHSWorkLine _workLine)
    {
        WHSWorkLineLoadLineDetails::createWorkLineLoadLineDetailsFromContainerId(_workLine, containerTable.ContainerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTransContainer</Name>
				<Source><![CDATA[
    protected void createWorkInventTransContainer(WHSWorkLine _workLine)
    {
        WHSContainerLine    containerLine;
        WHSLoadLine         loadLine;

        ttsbegin;

        while select InventDimId, ItemId, Qty, LoadLine from containerLine
            where containerLine.ContainerId == _workLine.ContainerId
            join InventTransId from loadLine
                where loadLine.RecId == containerLine.LoadLine
        {
            this.createWorkInventTransForContainerLine(_workLine, containerLine, loadLine);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
