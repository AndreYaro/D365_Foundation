<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqEventProcess</c> class processes the requirement events.
/// </summary>
/// <remarks>
///    Requirement events are, for example, demands from a sales order line and could be processed by
///    creating supply for them.
/// </remarks>
public abstract class ReqEventProcess extends RunBaseBatch
{
    ReqEventProcessAction       actionMode;
    boolean                     forceProcessNow;
    InventQty                   inventQty;
    UnitOfMeasureRecId          unitOfMeasureRecId;
    ReqPeggingAssignment        reqPeggingAssignmentRequirement;
    boolean                     isEventHandled;
    boolean                     initInventQty;
    boolean                     setEventDescription;
    ReqEventProcessParm         reqEventProcessParm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether delete actions are allowed.
    /// </summary>
    /// <returns>
    ///    true if the delete action is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether insert actions are allowed.
    /// </summary>
    /// <returns>
    ///    true if the insert action is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canInsert()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether update actions are allowed.
    /// </summary>
    /// <returns>
    ///    true if the update action is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canUpdate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePegging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>ReqPeggingAssignment</c> and <c>ReqPegging</c> tables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deletePegging()
    {
        SourceDocumentLineRefRecId  sourceDocumentLineRefRecId = this.sourceDocumentLineRefRecId();

        ttsbegin;
        //requirement/supply relationships
        ReqEventProcess::deleteReqPegging(sourceDocumentLineRefRecId,0);

        //events
        if (this.mustDeletePeggingEvent())
        {
            ReqEventProcess::deleteReqPeggingEvent(sourceDocumentLineRefRecId);
        }

        //requirement
        ReqEventProcess::deleteReqPeggingAssignment(sourceDocumentLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the obsolete <c>ReqPeggingEvent</c> and <c>ReqPeggingAssignment</c> records.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deletePeggingEvent()
    {
        if (this.mustUsePeggingEvent())
        {
            if (this.mustDeletePeggingEvent())
            {
                ReqEventProcess::deleteReqPeggingEvent(this.sourceDocumentLineRefRecId());
            }

            if (   reqPeggingAssignmentRequirement
                && reqPeggingAssignmentRequirement.Quantity == 0)
            {
                ReqEventProcess::deleteReqPeggingAssignment(this.sourceDocumentLineRefRecId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a description of the event.
    /// </summary>
    /// <returns>
    ///    A string that represents the event.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str eventDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the event origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract boolean eventExists()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the event.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>KanbanRule</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract RefRecId eventRefRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNotProcessedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs any action required for events that are handled, but not processed now.
    /// </summary>
    /// <remarks>
    ///    The base class does not perform any action for postponed events.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void handleNotProcessedEvent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result = super();

        if (this.mustUsePeggingEvent())
        {
            reqPeggingAssignmentRequirement = ReqPeggingAssignment::findSourceDocumentLine(this.sourceDocumentLineRefRecId(),
                                                                                           ReqPeggingAssignmentType::Requirement);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the action mode.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initActionMode()
    {
        if (actionMode == ReqEventProcessAction::None)
        {
            if (this.canDelete())
            {
                if (   !this.canInsert()
                    && !this.canUpdate())
                {
                    actionMode = ReqEventProcessAction::Delete;
                }
                else
                {
                    if (!this.eventExists())
                    {
                        actionMode = ReqEventProcessAction::Delete;
                    }
                }
            }

            if (   actionMode == ReqEventProcessAction::None
                && this.canInsert())
            {
                if (   !this.canUpdate()
                    && !this.canDelete())
                {
                    actionMode = ReqEventProcessAction::Insert;
                }
                else
                {
                    if (   this.mustUsePeggingEvent()
                        && !reqPeggingAssignmentRequirement)
                    {
                        actionMode = ReqEventProcessAction::Insert;
                    }
                }
            }

            if (   actionMode == ReqEventProcessAction::None
                && this.canUpdate())
            {
                if (   !this.canInsert()
                    && !this.canDelete())
                {
                    actionMode = ReqEventProcessAction::Update;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the event quantity to process.
    /// </summary>
    /// <returns>
    ///    A <c>InventQty</c> type value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract InventQty inventQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEventHandled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the event was handled by the class.
    /// </summary>
    /// <returns>
    ///    true if the event was handled by the class; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Call this method only after the <c>run</c> method was executed.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isEventHandled()
    {
        return isEventHandled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeletePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether to delete the <c>ReqPeggingEvent</c> record after it processes.
    /// </summary>
    /// <returns>
    ///    true if the event successfully deletes the <c>ReqPeggingEvent</c> record; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustDeletePeggingEvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current event must be handled.
    /// </summary>
    /// <returns>
    ///    true if the event must be handled; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustHandleEvent()
    {
        boolean result = this.init();

        if (result)
        {
            this.initActionMode();
            result = this.validateActionMode();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an event must be processed in the current execution.
    /// </summary>
    /// <returns>
    ///    true if the event must be processed in the current execution; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustProcessNow()
    {
        return    this.mustProcessSynchronously()
               || forceProcessNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessSynchronously</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the event must be processed synchronously.
    /// </summary>
    /// <returns>
    ///    true if the event must be processed synchronously; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustProcessSynchronously()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUsePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the event uses the <c>ReqPeggingEvent</c> table.
    /// </summary>
    /// <returns>
    ///    true if the event uses the <c>ReqPeggingEvent</c> table; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustUsePeggingEvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActionMode</Name>
				<Source><![CDATA[
    public ReqEventProcessAction parmActionMode(ReqEventProcessAction _actionMode = actionMode)
    {
        actionMode = _actionMode;
        return actionMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceProcessNow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmForceProcessNow(boolean _forceProcessNow = forceProcessNow)
    {
        forceProcessNow = _forceProcessNow;
        return forceProcessNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqEventProcessParm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqEventProcessParm parmReqEventProcessParm(ReqEventProcessParm _reqEventProcessParm)
    {
        reqEventProcessParm = _reqEventProcessParm;
        return reqEventProcessParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetEventDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmSetEventDescription(boolean _setEventDescription = setEventDescription)
    {
        setEventDescription = _setEventDescription;
        return setEventDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes any code that needs to run after it was determined if the event must be handled and before the actual processing.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void prepareProcess()
    {
        // provide processing context in infolog
        if (setEventDescription)
        {
            setPrefix(this.eventDescription());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the event.
    /// </summary>
    /// <remarks>
    /// Derived classes must call the <c>processPegging</c> method for each created supply.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void processEvent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the pegging function.
    /// </summary>
    /// <param name="_supplySourceDocumentLineRefRecId">
    ///    A record ID of the <c>SourceDocumentLine</c> table that is the pegged supply.
    /// </param>
    /// <param name="_supplyQuantity">
    ///    The total supply quantity.
    /// </param>
    /// <param name="_supplyUnitOfMeasureRecId">
    ///    A record ID of the <c>UnitOfMeasure</c> table that represents the supply quantity unit.
    /// </param>
    /// <param name="_peggedQuantity">
    ///    The pegged quantity.
    /// </param>
    /// <param name="_isMarking">
    ///    A <c>NoYes</c> enumeration value that defines whether the quantity must be marked.
    /// </param>
    /// <param name="_peggingType">
    ///    A <c>ReqPeggingType</c> enumeration value that defines the type of the pegging.
    /// </param>
    /// <param name="_peggedUnitOfMeasureRecId">
    ///    A record ID of the <c>UnitOfMeasure</c> table that represents the pegged quantity unit.
    /// </param>
    /// <remarks>
    ///    Call this method for each created supply.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An invalid <c>ReqEventProcessAction</c> enumeration value was specified.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processPegging(
        SourceDocumentLineRefRecId _supplySourceDocumentLineRefRecId,
        InventQty                  _supplyQuantity,
        UnitOfMeasureRecId         _supplyUnitOfMeasureRecId,
        InventQty                  _peggedQuantity,
        NoYes                      _isMarking,
        ReqPeggingType             _peggingType,
        UnitOfMeasureRecId         _peggedUnitOfMeasureRecId)
    {
        if (this.mustUsePeggingEvent())
        {
            switch (actionMode)
            {
                case ReqEventProcessAction::Insert:
                case ReqEventProcessAction::Update:
                    this.writePegging(_supplySourceDocumentLineRefRecId,
                                      _supplyQuantity,
                                      _supplyUnitOfMeasureRecId,
                                      _peggedQuantity,
                                      _peggedUnitOfMeasureRecId,
                                      _isMarking,
                                      _peggingType);
                    break;
                case ReqEventProcessAction::Delete:
                    this.deletePegging();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes pegging event.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    An invalid <c>ReqEventProcessAction</c> enumeration value was specified.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processPeggingEvent()
    {
        if (   actionMode == ReqEventProcessAction::Insert
            || actionMode == ReqEventProcessAction::Update)
        {
            this.writePeggingEvent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the event.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        setPrefix(this.caption());
        try
        {
            using (var m = SysInstrumentationSegment::construct(classStr(KanbanInstrumentationActivities), KanbanInstrumentationActivities::EventProcessing, this.sourceDocumentLineRefRecId()))
            {
                ttsBegin;

                //init
                isEventHandled = this.mustHandleEvent();
                if (isEventHandled)
                {
                    //prepare
                    this.prepareProcess();

                    //validate
                    if (!this.validate())
                    {
                        throw error("@SYS18447");
                    }

                    //handle pegging event (step 1)
                    if (this.mustUsePeggingEvent())
                    {
                        this.processPeggingEvent();
                    }

                    //handle the actual event (step 2)
                    if (this.mustProcessNow())
                    {
                        this.processEvent();
                        this.deletePeggingEvent();
                    }
                    else
                    {
                        this.handleNotProcessedEvent();
                    }
                }

                ttsCommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>runsImpersonated</c> property for the <c>Runbase</c> framework.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the source document line that is causing the event.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    /// <remarks>
    ///    Derived classes that do not use pegging events may return zero.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the unit of measure used to create <c>ReqPegging</c> and <c>ReqPeggingAssignment</c> records.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>UnitOfMeasure</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract UnitOfMeasureRecId unitOfMeasureRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the action mode is valid.
    /// </summary>
    /// <returns>
    ///    true if the action mode is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateActionMode()
    {
        return    actionMode   != ReqEventProcessAction::None
               && ((actionMode == ReqEventProcessAction::Insert && this.canInsert())
               ||  (actionMode == ReqEventProcessAction::Update && this.canUpdate())
               ||  (actionMode == ReqEventProcessAction::Delete && this.canDelete()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates records in the <c>ReqPeggingAssignment</c> and <c>ReqPegging</c> tables.
    /// </summary>
    /// <param name="_supplySourceDocumentLineRefRecId">
    ///    A record ID of the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <param name="_supplyQuantity">
    ///    The total quantity of the created supply.
    /// </param>
    /// <param name="_supplyUnitOfMeasureRecId">
    ///    A record ID of the <c>UnitOfMeasure</c> table.
    /// </param>
    /// <param name="_peggedQuantity">
    ///    The full or partial quantity of the supply that is allocated to the event requirement.
    /// </param>
    /// <param name="_peggedUnitOfMeasureRecId">
    ///    A record ID of the <c>UnitOfMeasure</c> table.
    /// </param>
    /// <param name="_isMarking">
    ///    A Boolean flag that indicates if the supply is marked.
    /// </param>
    /// <param name="_peggingType">
    ///    A <c>ReqPeggingType</c> enumeration value.
    /// </param>
    /// <param name="_deleteIfZero">
    ///    A Boolean value that indicates whether records for zero quantity must be removed.
    /// </param>
    /// <remarks>
    ///    The method must be called for every supply that is created for the <c>ReqPeggingAssignment</c>
    ///    requirement.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writePegging(
        SourceDocumentLineRefRecId _supplySourceDocumentLineRefRecId,
        InventQty                  _supplyQuantity,
        UnitOfMeasureRecId         _supplyUnitOfMeasureRecId,
        InventQty                  _peggedQuantity,
        UnitOfMeasureRecId         _peggedUnitOfMeasureRecId,
        NoYes                      _isMarking,
        ReqPeggingType             _peggingType,
        boolean                    _deleteIfZero = true)
    {
        ReqPeggingAssignment    reqPeggingAssignmentSupply;
        ReqPegging              reqPegging;

        if (this.mustUsePeggingEvent())
        {
            ttsbegin;
            select forupdate firstonly reqPegging
                where reqPegging.PeggingAssignedRequirement == reqPeggingAssignmentRequirement.RecId
                join forupdate reqPeggingAssignmentSupply
                    where reqPeggingAssignmentSupply.SourceDocumentLine == _supplySourceDocumentLineRefRecId
                       && reqPeggingAssignmentSupply.RecId              == reqPegging.PeggingAssignedSupply;

            reqPeggingAssignmentSupply.SourceDocumentLine       = _supplySourceDocumentLineRefRecId;
            reqPeggingAssignmentSupply.ReqPeggingAssignmentType = ReqPeggingAssignmentType::Supply;
            reqPeggingAssignmentSupply.Quantity                 = _supplyQuantity;
            reqPeggingAssignmentSupply.UnitOfMeasure            = _supplyUnitOfMeasureRecId;

            if (   reqPeggingAssignmentSupply.Quantity == 0
                && _deleteIfZero)
            {
                if (reqPeggingAssignmentSupply.RecId)
                {
                    reqPeggingAssignmentSupply.delete();
                }
            }
            else
            {
                reqPeggingAssignmentSupply.write();
            }

            reqPegging.PeggingAssignedRequirement = reqPeggingAssignmentRequirement.RecId;
            reqPegging.PeggingAssignedSupply      = reqPeggingAssignmentSupply.RecId;
            reqPegging.Quantity                   = _peggedQuantity;
            reqPegging.UnitOfMeasure              = _peggedUnitOfMeasureRecId;
            reqPegging.IsMarking                  = _isMarking;
            reqPegging.PeggingType                = _peggingType;

            if (   reqPegging.Quantity == 0
                && _deleteIfZero)
            {
                if (reqPegging.RecId)
                {
                    reqPegging.delete();
                }
            }
            else
            {
                reqPegging.write();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>ReqPeggingAssignment</c> and <c>ReqPeggingEvent</c> tables.
    /// </summary>
    /// <remarks>
    ///    This method creates the requirement side of the <c>ReqPeggingAssignment</c> table.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The method was called incorrectly, possibly because a subclass does not return the correct source
    ///    document line.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writePeggingEvent()
    {
        if (this.mustUsePeggingEvent())
        {
            if (this.sourceDocumentLineRefRecId())
            {
                reqPeggingAssignmentRequirement = ReqPeggingAssignment::findOrCreateRequirement(this.sourceDocumentLineRefRecId(),
                                                                                                inventQty,
                                                                                                this.unitOfMeasureRecId(),
                                                                                                false);
                if (!this.mustProcessNow())
                {
                    ReqPeggingEvent::findOrCreate(
                                            reqPeggingAssignmentRequirement.RecId,
                                            this.eventRefRecId(),
                                            reqEventProcessParm.originalQuantity(),
                                            reqEventProcessParm.reservedPhysicalQtyDelta());
                }
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqPegging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>ReqPegging</c> table.
    /// </summary>
    /// <param name="_requirementSourceDocumentLineRefRecId">
    /// The referenced requirement source document line to delete.
    /// </param>
    /// <param name="_supplySourceDocumentLineRefRecId">
    /// The referenced supply source document line to delete.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void deleteReqPegging(
        SourceDocumentLineRefRecId _requirementSourceDocumentLineRefRecId,
        SourceDocumentLineRefRecId _supplySourceDocumentLineRefRecId)
    {
        ReqPeggingAssignment        requirementReqPeggingAssignment;
        ReqPeggingAssignment        supplyReqPeggingAssignment;
        ReqPegging                  reqPegging;

        //requirement/supply relationships
        if (   _requirementSourceDocumentLineRefRecId
            && _supplySourceDocumentLineRefRecId)
        {
            ttsbegin;
            delete_from reqPegging
                exists join requirementReqPeggingAssignment
                    where requirementReqPeggingAssignment.RecId              == reqPegging.PeggingAssignedRequirement
                       && requirementReqPeggingAssignment.SourceDocumentLine == _requirementSourceDocumentLineRefRecId
                exists join supplyReqPeggingAssignment
                    where supplyReqPeggingAssignment.RecId                   == reqPegging.PeggingAssignedSupply
                       && supplyReqPeggingAssignment.SourceDocumentLine      == _supplySourceDocumentLineRefRecId;
            ttscommit;
        }

        if (   _requirementSourceDocumentLineRefRecId
            && !_supplySourceDocumentLineRefRecId)
        {
            ttsbegin;
            delete_from reqPegging
                exists join requirementReqPeggingAssignment
                    where requirementReqPeggingAssignment.RecId              == reqPegging.PeggingAssignedRequirement
                       && requirementReqPeggingAssignment.SourceDocumentLine == _requirementSourceDocumentLineRefRecId;
            ttscommit;
        }

        if (   !_requirementSourceDocumentLineRefRecId
            && _supplySourceDocumentLineRefRecId)
        {
            ttsbegin;
            delete_from reqPegging
                exists join supplyReqPeggingAssignment
                    where supplyReqPeggingAssignment.RecId              == reqPegging.PeggingAssignedSupply
                       && supplyReqPeggingAssignment.SourceDocumentLine == _supplySourceDocumentLineRefRecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqPeggingAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>ReqPeggingAssignment</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The referenced source document line to delete.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void deleteReqPeggingAssignment(SourceDocumentLineRefRecId _sourceDocumentLineRefRecId)
    {
        ReqPeggingAssignment    reqPeggingAssignment;

        if (_sourceDocumentLineRefRecId)
        {
            ttsbegin;
            delete_from reqPeggingAssignment
                where reqPeggingAssignment.SourceDocumentLine == _sourceDocumentLineRefRecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqPeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>ReqPeggingEvent</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The referenced source document line to delete.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void deleteReqPeggingEvent(SourceDocumentLineRefRecId _sourceDocumentLineRefRecId)
    {
        ReqPeggingAssignment        reqPeggingAssignment;
        ReqPeggingEvent             reqPeggingEvent;

        if (_sourceDocumentLineRefRecId)
        {
            ttsbegin;
            delete_from reqPeggingEvent
                exists join reqPeggingAssignment
                    where reqPeggingAssignment.RecId              == reqPeggingEvent.PeggingRequirement
                       && reqPeggingAssignment.SourceDocumentLine == _sourceDocumentLineRefRecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>