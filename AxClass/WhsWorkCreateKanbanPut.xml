<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkCreateKanbanPut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWorkCreateKanbanPut</c> class creates warehouse work for kanbans.
/// </summary>
public class WhsWorkCreateKanbanPut extends WHSWorkCreate
{
    WHSWorkCreateId         workCreateId;
    Kanban                  kanban;
    KanbanJob               kanbanJob;
    InventQty               inventQty;
    boolean                 simulate;
    PdsBatchAttribValue     batchPotencyValue;
    PdsBatchDispositionCode batchDispCode;
    InventBatchExpDate      batchExpDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates or updates an inventory batch ID for a given item.
    /// </summary>
    public void createOrUpdateBatch()
    {
        InventBatch inventBatch;
        InventTable inventTable;

        if (inventBatchId)
        {
            ttsbegin;

            inventTable = InventTable::find(kanban.ItemId);

            if (inventTable.whsBatchActive())
            {
                inventBatch = InventBatch::find(inventBatchId, kanban.ItemId, true);

                if (inventBatch.RecId == 0)
                {
                    inventBatch.InventBatchId   = inventBatchId;
                    inventBatch.ItemId          = kanban.ItemId;

                    inventBatch.initializeProductionDate();
                    inventBatch.ExpDate         = inventTable.isShelfLifeItem() ? inventBatch.ProdDate : batchExpDate;
                }

                inventBatch.pdsSetShelfLifeBestBeforeFields(inventTable);
                inventBatch.write();

                // Set the potency attribute value
                inventBatch.updateBaseBatchAttribValue(batchPotencyValue);

                // Capture the batch disposition code
                if (inventTable.pdsIsShelfLifeCapable() && batchDispCode)
                {
                    PdsResetDispositionStatus::setBatchDispositionCode(kanban.ItemId, inventBatchId, batchDispCode);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates temporary work lines.
    /// </summary>
    public void createTempTable()
    {
        if (this.validate())
        {
            ttsbegin;

            // Get the first Pick location based on the inventDimId of the last kanban job receipt
            startLocationId = InventLocation::find(InventDim::find(kanbanJob.InventDimId).InventLocationId).DefaultKanbanFinishedGoodsLocation;

            this.receiveKanban();

            // Fill the kanban specific fields on the Temp Work Line.
            tmpWorkLine.WorkType         = WHSWorkType::Put;
            tmpWorkLine.OriginType       = WHSOriginType::Kanban;
            tmpWorkLine.OriginRefId      = kanban.KanbanId;
            tmpWorkLine.WorkCreateId     = workCreateId;
            tmpWorkLine.WorkTransType    = WHSWorkTransType::KanbanPut;
            tmpWorkLine.InventTransId    = kanbanJob.InventTransId;
            tmpWorkLine.ItemId           = kanban.ItemId;
            tmpWorkLine.RefTableId       = tableNum(Kanban);
            tmpWorkLine.RefRecId         = kanban.RecId;
            tmpWorkLine.OrderNum         = kanban.KanbanId;
            tmpWorkLine.StartLocationId  = startLocationId;

            this.setGlobals();

            // Create the Temp Work Line record(s).
            this.createTempLine(tmpWorkLine, inventQty);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Kanban</c> record that work is created for.
    /// </summary>
    /// <returns>
    ///    The <c>Kanban</c> record that work is created for.
    /// </returns>
    public Kanban kanban()
    {
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSWorkCreateKanbanPut</c> class.
    /// </summary>
    /// <param name="_common">
    ///    A record buffer that must be a <c>Kanban</c> record.
    /// </param>
    /// <param name="_workCreateId">
    ///    The work create ID; optional.
    /// </param>
    public void new(
        Common          _common,
        WHSWorkCreateId _workCreateId = '')
    {
        kanban        = _common as Kanban;
        kanbanJob     = kanban.lastKanbanJob();
        workCreateId  = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
        simulate      = false;

        super(kanban,workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchDispCode</Name>
				<Source><![CDATA[
    public PdsBatchDispositionCode parmBatchDispCode(PdsBatchDispositionCode _batchDispCode = batchDispCode)
    {
        batchDispCode = _batchDispCode;

        return batchDispCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchExpDate</Name>
				<Source><![CDATA[
    public InventBatchExpDate parmBatchExpDate(InventBatchExpDate _batchExpDate = batchExpDate)
    {
        batchExpDate = _batchExpDate;

        return batchExpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchPotencyValue</Name>
				<Source><![CDATA[
    public PdsBatchAttribValue parmBatchPotencyValue(PdsBatchAttribValue _batchPotencyValue = batchPotencyValue)
    {
        batchPotencyValue = _batchPotencyValue;

        return batchPotencyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSimulate</Name>
				<Source><![CDATA[
    public boolean parmSimulate(boolean _simulate = simulate)
    {
        simulate = _simulate;
        return simulate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;
        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Receives the kanban.
    /// </summary>
    protected void receiveKanban()
    {
        KanbanStatus        kanbanStatus;
        KanbanStatusUpdate  kanbanStatusUpdate;
        InventDim           inventDim;

        if (!simulate)
        {
            ttsbegin;

            // Generate or update the batch number.
            this.createOrUpdateBatch();

            inventDim                = kanbanJob.inventDim();
            inventDim.wmsLocationId  = startLocationId;
            inventDim.LicensePlateId = this.parmTargetLicensePlateId();
            inventDim.InventBatchId  = inventBatchId ? inventBatchId : inventDim.InventBatchId;

            if (!inventDim.InventBatchId)
            {
                inventDim.InventBatchId = kanbanJob.findBatchIdFromNotReceivedInventTrans();
            }

            inventDim                = InventDim::findOrCreate(inventDim);

            kanbanStatus                        = kanban.status(true);
            kanbanStatusUpdate                  = KanbanStatusUpdate::makeParameters(kanbanStatus,LeanKanbanStatus::Received,true,false);
            kanbanStatusUpdate.QuantityReceived = this.parmInventQty();
            if (   inventDim.InventDimId
                && inventDim.InventDimId != kanbanJob.InventDimId)
            {
                kanbanStatusUpdate.InventDimId = inventDim.InventDimId;
            }
            else
            {
                kanbanStatusUpdate.InventDimId = InventDim::inventDimIdBlank();
            }
            kanbanStatusUpdate.InventDimDataAreaId = kanbanStatusUpdate.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
            kanbanStatusUpdate.insert();

            // throws an error on failure
            kanbanStatus.runStatusUpdate(kanbanStatusUpdate);

            kanban.reread();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the kanban.
    /// </summary>
    /// <returns>
    ///    true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The kanban receipt must be inventory controlled and the kanban must be in a status that allows it to be received,
    /// </remarks>
    protected boolean validate()
    {
        boolean result = true;

        if (!kanban)
        {
            result = checkFailed("@WAX4613");
        }

        if (!kanbanJob)
        {
            result = checkFailed(strFmt("@WAX4614",kanban.KanbanId));
        }

        if (!kanbanJob.type().mustBeInventoryControlledReceipt())
        {
            result = checkFailed("@WAX4615");
        }

        if (!kanban.status(true).isStatusUpdateAllowed(LeanKanbanStatus::Received,false))
        {
            result = checkFailed(strFmt("@WAX4616",kanban.KanbanId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>WHSWorkCreateKanbanPut</c> class class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record to create work for.
    /// </param>
    /// <param name="_workCreateId">
    ///    A work create ID; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WHSWorkCreateKanbanPut</c> class.
    /// </returns>
    public static WHSWorkCreateKanbanPut construct(
        Kanban          _kanban,
        WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreateKanbanPut    workCreateKanbanPut = new WHSWorkCreateKanbanPut(_kanban,_workCreateId);

        return workCreateKanbanPut;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>