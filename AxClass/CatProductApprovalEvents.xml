<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProductApprovalEvents</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class  CatProductApprovalEvents  implements
                            WorkflowElementStartedEventHandler,     // Fires when Task/Approval Starts.
                            WorkflowElementCompletedEventHandler,   // Fires when Task/Approval Completes(Approves).
                            WorkflowElementDeniedEventHandler      // Fires when Task/Approval Denies.

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
        public void completed(WorkflowElementEventArgs   wfeArgs)
    {
        CatVendorCatalogProductApproval     catVendorCatalogProductApproval;
        CatVendorProductCandidate           catVendorProductCandidate;
        catVendorProductCandidate = CatVendorProductCandidate::find(wfeArgs.parmWorkflowContext().parmRecId());

        CatVendorProductCandidate::setWorkflowState(catVendorProductCandidate.RecId,CatVendorProductStatus::Approved);
        catVendorCatalogProductApproval =   new CatVendorCatalogProductApproval();

        //Create, Update Or Delete Product
        catVendorCatalogProductApproval.manageProduct(catVendorProductCandidate.RecId,catVendorProductCandidate.ActionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
        public void denied(WorkflowElementEventArgs  wfeArgs)
    {
        CatVendorApprovedProduct            catVendorApprovedProduct;
        WorkflowTrackingTable               workflowTrackingTable;
        WorkflowTrackingCommentTable        workflowTrackingCommentTable;
        CatVendorProductCandidate           catVendorProductCandidate;
        catVendorProductCandidate = CatVendorProductCandidate::find(wfeArgs.parmWorkflowContext().parmRecId());
        CatVendorProductCandidate::setWorkflowState(catVendorProductCandidate.RecId,CatVendorProductStatus::Rejected);

        workflowTrackingTable = Workflow::findLastWorkflowTrackingRecord(wfeArgs.parmWorkflowContext().parmWorkflowCorrelationId());
        workflowTrackingCommentTable = WorkflowTrackingCommentTable::findTrackingId(workflowTrackingTable.TrackingId);

        select forupdate catVendorApprovedProduct where catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode;
        if (catVendorApprovedProduct)
        {
            ttsbegin;
            catVendorApprovedProduct.IsDeleted =  NoYes::Yes;
            catVendorApprovedProduct.update();
            ttscommit;
        }
        // Event Log
        CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                CatImportProcessingMessageType::Warning,CatVendorCatalogProcessingState::ProductRejections,
                                                strfmt("@SYS330289",catVendorProductCandidate.VendorProductCode,catVendorProductCandidate.SearchName)+' '+workflowTrackingCommentTable.Comment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
        public void started(WorkflowElementEventArgs  wfeArgs)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>