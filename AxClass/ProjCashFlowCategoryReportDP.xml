<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowCategoryReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjCashFlowCategoryReportDP</c> class is the report data provider class for the associated
///    reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjCashFlowCategory)),
    SRSReportParameterAttribute(classstr(ProjCashFlowProjectReportContract))
]
public class ProjCashFlowCategoryReportDP extends SRSReportDataProviderBase
{
    ProjCashFlowTmp                 projCashFlowTmp;
    TmpProjCashFlowReport           report;
    ProjCategoryName                categoryName;
    AmountMST                       inflowAmount;
    AmountMST                       outflowAmount;
    AmountMST                       netflowAmount;
    ProjCashFlow                    tmpProjCashFlow;
    ProjCashFlowReportsCalcEngine   reportCalc;
    ProjActualBudget                actualBudgetDeviationSum;
    ProjShowAmount                  showAmount;
    ProjCategoryId                  categoryId;
    boolean                         skipBlankId;
    boolean                         skipZero;
    Name                            name;
    str                             type,title,caption;
    ProjId                          id;
    ProjCategory                    projCatLocal;
    Map                             catMap;
    MapEnumerator                   catMapEnum;
    real                            inAmt, outAmt, netAmt;
    str                             showId, sName;
    container                       conList;
    QueryRun                        queryRun;
    #ProjReports
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the ID of the specified table.
    /// </summary>
    private void calculateNoId()
    {
        tmpProjCashFlow.parmCategoryId(SysQuery::valueEmptyString());
        reportCalc.setClientSettings();

        // Choose the kind of report and populate the temporary table
        switch (actualBudgetDeviationSum)
        {
            case ProjActualBudget::Actual:
                report = reportCalc.getFinalResultActual();
                break;

            case ProjActualBudget::Budget:
                report = reportCalc.getFinalResultBudget();
                break;

            case ProjActualBudget::Deviation:
                report = reportCalc.getFinalResultDeviation();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCashFlowTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the project cash flow of the temporary table.
    /// </summary>
    /// <returns>
    ///    The project cash flow of the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProjCashFlowTmp')
    ]
    public ProjCashFlowTmp getProjCashFlowTmp()
    {
        select projCashFlowTmp;
        return projCashFlowTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjCashFlowTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project cash flow the temporary table.
    /// </summary>
    public void insertProjCashFlowTmp()
    {
        projCashFlowTmp.Id                  = categoryId;
        projCashFlowTmp.Name                = categoryName;
        projCashFlowTmp.InflowAmount        = reportCalc.showAmountReport(inflowAmount,showAmount);
        projCashFlowTmp.OutflowAmount       = outflowAmount;
        projCashFlowTmp.NetflowAmount       = netflowAmount;
        projCashFlowTmp.Title               = title;
        projCashFlowTmp.Caption             = caption;
        projCashFlowTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SSRS at runtime. The method should compute data and populate the data tables that will be returned
    ///    to SSRS.
    /// </remarks>
    public void processReport()
    {
        // Override the fetch method to change the query
        catMap = new Map(Types::String, Types::Container);

        // Set the projCashFlow object
        tmpProjCashFlow = new ProjCashFlow();
        tmpProjCashFlow = this.setVariableValues(tmpProjCashFlow);

        // Create the new object
        reportCalc = new ProjCashFlowReportsCalcEngine(tmpProjCashFlow,ProjCashFlowReportType::Category);

        title = reportCalc.formatPeriodLabel();
        caption = reportCalc.formatSelection();

        queryRun = new SysQueryRun(this.parmQuery());

        // process blank category ids
        if (!skipBlankId)
        {
            this.calculateNoId();
            if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
            {
                conList = [projCatLocal.Name, report.AmountInflow, report.AmountOutflow, report.AmountNet];
                          catMap.insert(projCatLocal.CategoryId,conList);
                catMap.insert(projCatLocal.CategoryId,conList);
            }
        }

        // Iterate through the records
        while (queryRun.next())
        {
            projCatLocal   = queryRun.get(tablenum(ProjCategory));

            tmpProjCashFlow.parmCategoryId(projCatLocal.CategoryId);
            reportCalc.setClientSettings();

            // Choose the kind of report and populate the temporary table
            switch (actualBudgetDeviationSum)
            {
                case ProjActualBudget::Actual:
                    report = reportCalc.getFinalResultActual();
                    break;
                case ProjActualBudget::Budget:
                    report = reportCalc.getFinalResultBudget();
                    break;
                case ProjActualBudget::Deviation:
                    report = reportCalc.getFinalResultDeviation();
                    break;
                case ProjActualBudget::Sum_:
                    report = reportCalc.getFinalResultSum();
                    break;
            }

            if (!skipBlankId || projCatLocal.CategoryId != '')
            {
                // Get the records from the report as per the Categoryids chosen by the query
                select report where report.Id == projCatLocal.CategoryId;

                if (report)
                {
                    if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
                    {
                        if (catMap.exists(projCatLocal.CategoryId))
                        {
                            conList = catMap.lookup(projCatLocal.CategoryId);
                            sName   = conpeek(conList,1);
                            inAmt   = conpeek(conList,2) + report.AmountInflow;
                            outAmt  = conpeek(conList,3) + report.AmountOutflow;
                            netAmt  = conpeek(conList,4) + report.AmountNet;
                            conList = [sName, inAmt, outAmt, netAmt];
                            catMap.insert(projCatLocal.CategoryId,conList);
                        }
                        else
                        {
                            conList = [projCatLocal.Name, report.AmountInflow, report.AmountOutflow, report.AmountNet];
                            catMap.insert(projCatLocal.CategoryId,conList);
                        }
                    }
                }
                else
                {
                    if (!skipZero)
                    {
                        if (!catMap.exists(projCatLocal.CategoryId))
                        {
                            conList = [projCatLocal.Name, 0.00, 0.00, 0.00];
                            catMap.insert(projCatLocal.CategoryId,conList);
                        }
                    }
                }
            }
        }

        // Final display to the screen
        catMapEnum =  catMap.getEnumerator();
        while (catMapEnum.moveNext())
        {
            showId = catMapEnum.currentKey();
            conList = catMapEnum.currentValue();

            categoryId      = showId;
            inflowAmount    = reportCalc.showAmountReport(conpeek(conList, 2),showAmount);
            outflowAmount   = reportCalc.showAmountReport(conpeek(conList, 3),showAmount);
            netflowAmount   = reportCalc.showAmountReport(conpeek(conList, 4),showAmount);
            categoryName    = conpeek(conList, 1);
            this.insertProjCashFlowTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariableValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the instance variables of the specified project cash flow.
    /// </summary>
    /// <param name="_projCashFlow">
    ///    An instance of the <c>ProjCashFlow</c> class of which to assign the instance variables.
    /// </param>
    /// <returns>
    ///    The instance of the <c>ProjCashFlow</c> class with the assigned instance variables.
    /// </returns>
    public ProjCashFlow setVariableValues(ProjCashFlow _projCashFlow)
    {
        ProjCashFlowProjectReportContract contract = this.parmDataContract() as ProjCashFlowProjectReportContract;

        actualBudgetDeviationSum    =   contract.parmActualBudgetDeviationSum();
        skipBlankId                 =   contract.parmSkipBlankId();
        skipZero                    =   contract.parmSkipZero();
        showAmount                  =   contract.parmShowAmount();

        _projCashFlow.parmFixedPrice(contract.parmFixedPrice());
        _projCashFlow.parmTimeMaterial(contract.parmTimeMaterial());
        _projCashFlow.parmInternalCost(contract.parmInternalCost());
        _projCashFlow.parmInvestment(contract.parmInvestment());
        _projCashFlow.parmTimeProject(contract.parmTime());

        _projCashFlow.parmHour(contract.parmHour());
        _projCashFlow.parmExpenses(contract.parmExpenses());
        _projCashFlow.parmFee(contract.parmRevenue());
        _projCashFlow.parmOnAcc(contract.parmOnAcc());
        _projCashFlow.parmItem(contract.parmItem());

        _projCashFlow.parmProjectFromDate(contract.parmProjFromDate());
        _projCashFlow.parmProjectToDate(contract.parmProjToDate());
        _projCashFlow.parmPaymentFromDate(contract.parmPaymentFromDate());
        _projCashFlow.parmPaymentToDate(contract.parmPaymentToDate());
        _projCashFlow.parmProjectBreakDate(contract.parmProjBreakDate());
        _projCashFlow.parmPaymentBreakDate(contract.parmPaymentBreakDate());

        _projCashFlow.parmForecastModelId(contract.parmForecastModelId());
        _projCashFlow.parmActualBudget(actualBudgetDeviationSum);
        _projCashFlow.parmIncludedExpectedPayment(contract.parmInclExpectedPayment());
        _projCashFlow.parmIncludedPaidPayment(contract.parmInclPaidPayment());

        _projCashFlow.parmDaysAddedToSalesPayment(contract.parmAddDaysToSales());
        _projCashFlow.parmDaysAddedToCostPayment(contract.parmAddDaysToCost());

        _projCashFlow.parmMinimumCostPaymentDate(contract.parmExpectedCostPayDate());
        _projCashFlow.parmMinimumSalesPaymentDate(contract.parmMinimumSalesPayDate());

        _projCashFlow.parmShowAmount(showAmount);

        return _projCashFlow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
