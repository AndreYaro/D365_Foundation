<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionFormExtensionPayrollHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll form extension events for the HcmPosition form.
/// </summary>
class HcmPositionFormExtensionPayrollHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormStringControl scheduleControl;
    FormReferenceGroupControl defaultGLIBenefitControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmPositionFormExtensionPayrollHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        scheduleControl = element.design().controlName(formControlStr(HcmPosition, PayrollPositionDetails_Schedule)) as FormStringControl;
        defaultGLIBenefitControl = element.design().controlName(formControlStr(HcmPosition, PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit)) as FormReferenceGroupControl;

        // Register overrides
        scheduleControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(HcmPositionFormExtensionPayrollHandler, onScheduleLookup), this);
        scheduleControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(HcmPositionFormExtensionPayrollHandler, onScheduleJumpRef), this);
        defaultGLIBenefitControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(HcmPositionFormExtensionPayrollHandler, onDefaultGLIBenefitLookupReference), this);
        defaultGLIBenefitControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference) , methodStr(HcmPositionFormExtensionPayrollHandler, onDefaultGLIBenefitResolveReference), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScheduleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_Schedule control's lookup.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private void onScheduleLookup(FormStringControl _sender)
    {
        FormDataSource payrollPositionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPosition, PayrollPositionDetails)) as FormDataSource;
        PayrollPositionDetails payrollPositionDetails = payrollPositionDetails_ds.cursor();

        if (payrollPositionDetails.PaidByLegalEntity)
        {
            CompanyInfo companyInfoLocal = CompanyInfo::find(false, payrollPositionDetails.PaidByLegalEntity);
            changecompany(companyInfoLocal.DataArea)
            {
                // super()
                _sender.lookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScheduleJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_Schedule control's jumpRef.
    /// </summary>
    /// <param name = "_sender">The control initiating the jumpRef.</param>
    private void onScheduleJumpRef(FormStringControl _sender)
    {
        FormDataSource payrollPositionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPosition, PayrollPositionDetails)) as FormDataSource;
        PayrollPositionDetails payrollPositionDetails = payrollPositionDetails_ds.cursor();

        if (payrollPositionDetails.PaidByLegalEntity && payrollPositionDetails.ScheduleDataAreaId && payrollPositionDetails.Schedule)
        {
            changecompany(payrollPositionDetails.ScheduleDataAreaId)
            {
                // super()
                _sender.jumpRef();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultGLIBenefitLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onDefaultGLIBenefitLookupReference(FormReferenceGroupControl _sender)
    {
        return HcmBenefit::lookupPayrollCategoryBenefits(_sender, PayrollCategory::GeneralLiabilityInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultGLIBenefitResolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit control's resolveReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the resolve reference.</param>
    private Common onDefaultGLIBenefitResolveReference(FormReferenceGroupControl _sender)
    {
        return HcmBenefit::resolvePayrollCategoryBenefits(_sender, PayrollCategory::GeneralLiabilityInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// OnInitializing method for the HcmPosition.ExtensionPayroll form extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmPosition</c> form being initialized.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPosition), FormEventType::Initializing)]
    public static void HcmPosition_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmPositionFormExtensionPayrollHandler extensionInstance = new HcmPositionFormExtensionPayrollHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitialized event handler for the HcmPosition.ExtensionPayroll form extension which controls the <c>PayrollPositionDetails</c> table's
    /// ability to create and edit records.
    /// </summary>
    /// <param name="_sender">The <c>HcmPosition</c> form being initialized.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPosition), FormEventType::Initialized)]
    public static void HcmPosition_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        if (HcmSharedParameters::find().PersonnelActionPosition)
        {
            FormDataSource payrollPositionDetails_ds = _sender.dataSource(formDataSourceStr(HcmPosition, PayrollPositionDetails)) as FormDataSource;
            payrollPositionDetails_ds.allowCreate(false);
            payrollPositionDetails_ds.allowEdit(false);
        }

        // Initialize the instance of this form extension handler now that the controls exist
        FormRun positionForm = _sender as FormRun;
        HcmPositionFormExtensionPayrollHandler extensionInstance = positionForm.getExtensionInstance(classStr(HcmPositionFormExtensionPayrollHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnActivated event handler for the HcmPosition.ExtensionPayroll form extension's HcmPosition data source.  Displays
    /// a warning indicating that future records exist, if applicable.
    /// </summary>
    /// <param name="_sender">The <c>HcmPosition</c> data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, HcmPosition), FormDataSourceEventType::Activated)]
    public static void HcmPosition_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        PayrollPositionDetails payrollPositionDetails;
        boolean isPayrollInfoConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(HRMAdministrationPayrollInfo));
        utcdatetime asOfDateTime;
        ValidFromDate asOfDate;
        ValidToDate maxDateValue = dateMax();
        boolean showGroup = false;
        boolean futureRecordsExist = false;

        FormRun positionForm = _sender.formRun();

        asOfDateTime = positionForm.getAsOfDateTimeFromPositionQuery();
        asOfDate = HcmDateTimeUtil::convertToCompanyDate(asOfDateTime);

        HcmPosition hcmPosition = _sender.cursor();

        if (isPayrollInfoConfigKeyEnabled)
        {
            // check for future dated PayrollPositionDetail records
            select firstonly ValidTimeState(asOfDate, maxDateValue) RecId, ValidFrom from payrollPositionDetails
                order by payrollPositionDetails.ValidFrom desc
                where payrollPositionDetails.Position == hcmPosition.RecId;

            if (payrollPositionDetails.RecId && payrollPositionDetails.ValidFrom > asOfDate)
            {
                futureRecordsExist = true;
            }
            else
            {
                futureRecordsExist = false;
            }

            // Let the position form know if it should display the future records message, if it wasn't already in that mode
            positionForm.parmShowFutureRecordsExistWarning(futureRecordsExist || positionForm.parmShowFutureRecordsExistWarning());

            FormDataSource payrollPositionDetails_ds = positionForm.dataSource(formDataSourceStr(HcmPosition, PayrollPositionDetails)) as FormDataSource;

            payrollPositionDetails_ds.allowEdit(!futureRecordsExist && !HcmSharedParameters::find().PersonnelActionPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnActivated event handler for the HcmPosition.ExtensionPayroll form extension's PayrollPositionDetails data source.
    /// </summary>
    /// <param name="_sender">The <c>PayrollPositionDetails</c> data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, PayrollPositionDetails), FormDataSourceEventType::Activated)]
    public static void PayrollPositionDetails_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        PayrollPositionDetails payrollPositionDetails = _sender.cursor();
        if (payrollPositionDetails.RecId)
        {
            payrollPositionDetails.setScheduleEnabled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaidByLegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnModified event handler for the HcmPosition.ExtensionPayroll form extension's PaidByLegalEntity field on the PayrollPositionDetails data source.
    /// </summary>
    /// <param name="sender">The PaidByLegalEntity form data field being modified.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmPosition, PayrollPositionDetails, PaidByLegalEntity), FormDataFieldEventType::Modified)]
    public static void PaidByLegalEntity_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollPositionDetails payrollPositionDetails = _sender.datasource().cursor();
        payrollPositionDetails.setScheduleEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_dateEffectivePaneControllerUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler for the dateEffectivePaneControllerUpdated event raised by the HcmPosition form which
    /// indicates that its date effective pane controller has been updated.
    /// </summary>
    /// <param name="_formElement">The form instance that raised the event.</param>
    /// <param name="_isUpdatedToCurrent">True indicates that the date effective pane controller has been switched to the
    /// current datetime value; otherwise the _asOfDateTime is used.</param>
    /// <param name="_asOfDateTime">The effective datetime value used to query date effective tables.</param>
    [SubscribesTo(formStr(HcmPosition), delegateStr(HcmPosition, dateEffectivePaneControllerUpdated))]
    public static void HcmPosition_dateEffectivePaneControllerUpdated(FormRun _formElement, boolean _isUpdatedToCurrent, utcdatetime _asOfDateTime)
    {
        boolean isPayrollInfoConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(HRMAdministrationPayrollInfo));

        FormDataSource payrollPositionDetails_ds = _formElement.dataSource(formDataSourceStr(HcmPosition, PayrollPositionDetails)) as FormDataSource;

        if (_isUpdatedToCurrent)
        {
            if (isPayrollInfoConfigKeyEnabled)
            {
                payrollPositionDetails_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
                payrollPositionDetails_ds.query().resetValidTimeStateQueryType();
            }
        }
        else
        {
            if (isPayrollInfoConfigKeyEnabled)
            {
                payrollPositionDetails_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
                payrollPositionDetails_ds.query().validTimeStateAsOfDateTime(_asOfDateTime);
            }
        }

        if (isPayrollInfoConfigKeyEnabled)
        {
            payrollPositionDetails_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>