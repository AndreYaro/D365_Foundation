<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkExecuteDisplayInquiryLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle location inquiry.
/// </summary>
[SysObsolete('This class has been refactored. Refer class <c>InventProcessGuideInquiryLocationController</c> instead.', false, 30\06\2020),
WHSWorkExecuteMode(WHSWorkExecuteMode::InquiryLocation)]
class whsWorkExecuteDisplayInquiryLocation extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLocationInquiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Location Inquiry screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_wmsLocationId">
    /// Location to be inquired.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the location.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildLocationInquiry(container         _con,
                                   WMSLocationId     _wmsLocationId,
                                   InventLocationId  _inventLocationId)
    {
        WHSLicensePlateId   prevLicensePlateId;
        InventSiteId        inventSiteId = InventLocation::find(_inventLocationId).InventSiteId;
        InventDim           inventDim;
        InventSum           inventSum;
        container           ret = _con;
        str                 itemInfo;
        int                 i;

        ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX1112", _inventLocationId), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX731", _wmsLocationId), 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (WMSLocation::find(_wmsLocationId, _inventLocationId).whsLocationIsLPControlled())
        {
            ret += [this.buildControl(#RFLabel, #LPTotal, strFmt("@WAX2230", this.countUniqueLPInLocation(_inventLocationId,
                                                                                                          inventSiteId,
                                                                                                          _wmsLocationId)), 1, '', #WHSRFUndefinedDataType, '', 0)];
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select inventSum
                where inventSum.InventLocationId    == _inventLocationId        &&
                      inventSum.wmsLocationId       == _wmsLocationId           &&
                      inventSum.LicensePlateId      != ''                       &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PhysicalInvent      != 0
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    if (prevLicensePlateId != inventSum.LicensePlateId)
                    {
                        ret += [this.buildControl(#RFLabel, int2str(i), '\n' + strFmt("@WAX730", inventSum.LicensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];
                        itemInfo = this.generateItemInfoForLocation(inventSum, _wmsLocationId, inventSum.LicensePlateId);
                        ++i;
                    }
                    else
                    {
                        itemInfo = '\n' + this.generateItemInfoForLocation(inventSum, _wmsLocationId, '');
                    }
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    prevLicensePlateId = inventSum.LicensePlateId;
                    ++i;
                }
            }
            else
            {
                while select inventSum
                join LicensePlateId from inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventDim.InventLocationId    == _inventLocationId        &&
                      inventDim.wmsLocationId       == _wmsLocationId           &&
                      inventDim.LicensePlateId      != ''                       &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PhysicalInvent      != 0
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    if (prevLicensePlateId != inventDim.LicensePlateId)
                    {
                        ret += [this.buildControl(#RFLabel, int2str(i), '\n' + strFmt("@WAX730", inventDim.LicensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];
                        itemInfo = this.generateItemInfoForLocation(inventSum, _wmsLocationId, inventDim.LicensePlateId);
                        ++i;
                    }
                    else
                    {
                        itemInfo = '\n' + this.generateItemInfoForLocation(inventSum, _wmsLocationId, '');
                    }
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    prevLicensePlateId = inventDim.LicensePlateId;
                    ++i;
                }
            }
        }
        else
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select inventSum
                where inventSum.InventLocationId    == _inventLocationId        &&
                      inventSum.wmsLocationId       == _wmsLocationId           &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      (inventSum.PhysicalInvent     != 0                        ||
                       inventSum.Picked             != 0)
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    itemInfo = '\n';
                    if (inventSum.LicensePlateId != '')
                    {
                        ret += [this.buildControl(#RFLabel, int2str(i), '\n' + strFmt("@WAX730", inventSum.LicensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];
                        itemInfo = '';
                        ++i;
                    }
                    itemInfo += this.generateItemInfoForLocation(inventSum, _wmsLocationId, inventSum.LicensePlateId);
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    ++i;
                }
            }
            else
            {
                while select inventSum
                join LicensePlateId from inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventDim.InventLocationId    == _inventLocationId        &&
                      inventDim.wmsLocationId       == _wmsLocationId           &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      (inventSum.PhysicalInvent     != 0                        ||
                       inventSum.Picked             != 0)
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    itemInfo = '\n';
                    if (inventDim.LicensePlateId != '')
                    {
                        ret += [this.buildControl(#RFLabel, int2str(i), '\n' + strFmt("@WAX730", inventDim.LicensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];
                        itemInfo = '';
                        ++i;
                    }
                    itemInfo += this.generateItemInfoForLocation(inventSum, _wmsLocationId, inventDim.LicensePlateId);
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    ++i;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        InventLocationId        defaultUserWarehouse;
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;

        mode = WHSWorkExecuteMode::InquiryLocation;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(_con);

        switch (step)
        {
            case 0:
                ret = this.buildGetLocation(ret);
                ret = this.addOkButton(ret);
                step = 1;
                break;

            case 1:
                defaultUserWarehouse = WHSWorkUserSession::find(userId).InventLocationId;

                pass.insert(#WMSLocationId, conPeek(conPeek(con, 4 + hasError), #data));
                if (!WMSLocation::whsGetLocationId(pass.lookup(#WMSLocationId), defaultUserWarehouse))
                {
                    throw error("@WAX755");
                }

                pass.insert(#WMSLocationId, WMSLocation::whsGetLocationId(pass.lookup(#WMSLocationId), defaultUserWarehouse));
                ret = this.buildLocationInquiry(ret, pass.lookup(#WMSLocationId), defaultUserWarehouse);
                step = 2;
                break;

            case 2:
                pass = this.resetPassthrough(ret, false);
                ret = this.buildGetLocation(ret);
                step = 1;
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.addCancelButton(ret, 1, true);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>