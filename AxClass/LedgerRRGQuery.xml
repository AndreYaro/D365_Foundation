<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGQuery
{
    Map                     mapQueryTables;
    Map                     mapDsNoToTables;
    Map                     mapDsNoToParent;
    LedgerRRGQueryItem      selectedField;
    LedgerRRGQueryItem      baseDateField;
    NoYes                   selectReportingDate;
    int                     counterDataSourceNo;
    FormTreeControl         tableOnlyTree;
    ImageListAppl_Report    imageListAppl;
    boolean                 showSysName;
    Map                     mapRange;
    SelectionField          agregationMode;
    TreeItemIdx             expandingIdx;

    private const int       TableInfoConst	    = 0;
    private const int       ChildrenTable	    = 1;
    private const str       TxtDataSource	    = 'Data Sources';
    private const str       TxtFields	        = 'Fields';
    private const str       EmptyStr	        = '';
    private const int       ImageTable	        = 813;
    private const int       ImageRelations	    = 894;
    private const int       ImageDataSource	    = 890;
    private const int       ImageFields	        = 824;
    private const int       ImageQueryRange	    = 913;
    private const int       ImageField	        = 811;
    private const int       ImageFieldStr	    = 950;
    private const int       ImageFieldInt	    = 951;
    private const int       ImageFieldReal	    = 952;
    private const int       ImageFieldDate	    = 953;
    private const int       ImageFieldEnum	    = 955;
    private const int       ImageFieldTime	    = 956;
    private const int       ImageFieldDateTime	= 965;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildrenTablesToList</Name>
				<Source><![CDATA[
    private void addChildrenTablesToList(List _lst, Map _mapChildren)
    {
        MapEnumerator       me = _mapChildren.getEnumerator();
        LedgerRRGQueryItem  currentQueryItem;
        Map                 map, mapTmp;

        while (me.moveNext())
        {
            map = me.currentValue();
            currentQueryItem = map.lookup(TableInfoConst);

            _lst.addEnd(LedgerRRGQueryItem::create(currentQueryItem.pack()));

            mapTmp = map.lookup(ChildrenTable);
            this.addChildrenTablesToList(_lst, mapTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTreeItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TreeItemIdx addTreeItem(FormTreeControl    _formTreeControl,
                                      LedgerRRGQueryItem _queryItem,
                                      TreeItemIdx        _parentItemIdx,
                                      FormTreeAdd        _formTreeAdd = FormTreeAdd::Sort,
                                      boolean            _children    = false)
    {
        TreeItemIdx         currentIdx;

        currentIdx = SysFormTreeControl::addTreeItem(_formTreeControl,
                                                     (showSysName) ? _queryItem.parmName() : _queryItem.parmLabel(),
                                                     _parentItemIdx,
                                                     _queryItem,
                                                     _queryItem.parmImageRes(),
                                                     _children,
                                                     0,
                                                     _formTreeAdd);

        return currentIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agregationMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SelectionField agregationMode(SelectionField _newAgregationMode = agregationMode)
    {
        agregationMode = _newAgregationMode;
        return agregationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmptyMapQueryTables</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map createEmptyMapQueryTables()
    {
        return new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewItem</Name>
				<Source><![CDATA[
    private LedgerRRGQueryItem createNewItem(
        container          _conAllowTypes,
        Map                _mapFields,
        LedgerRRGQueryItem _currentQueryItem)
    {
        LedgerRRGQueryItem  ret = LedgerRRGQueryItem::create(_currentQueryItem.pack());

        ret.parmImageRes(this.imageListAppl().image(ImageTable));

        if (this.existsFields(_conAllowTypes, _mapFields))
        {
            ret.parmLock(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryTablesItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map createQueryTablesItem(LedgerRRGQueryItem _queryItem)
    {
        Map     newItem = this.createEmptyMapQueryTables();

        newItem.insert(TableInfoConst, LedgerRRGQueryItem::create(_queryItem.pack()));
        newItem.insert(ChildrenTable, this.createEmptyMapQueryTables());

        return newItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteChildrenTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteChildrenTable(Map _mapInfo)
    {
        MapEnumerator       me;
        LedgerRRGQueryItem  queryItem;
        Map                 map, mapChildren;

        if (_mapInfo && !_mapInfo.empty())
        {
            mapChildren = _mapInfo.lookup(ChildrenTable);
            me          = mapChildren.getEnumerator();

            while (me.moveNext())
            {
                map         = me.currentValue();
                queryItem   = map.lookup(TableInfoConst);

                this.deleteChildrenTable(map);
                this.removeTableFromAdditionalMaps(queryItem);
            }

            _mapInfo.insert(ChildrenTable, this.createEmptyMapQueryTables());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean deleteRange(LedgerRRGQueryItem _deletedRange)
    {
        boolean     bRet;
        Map         map;

        if (_deletedRange && (_deletedRange.parmDataSourceNo() != 0) && mapRange.exists(_deletedRange.parmDataSourceNo()))
        {
            map = mapRange.lookup(_deletedRange.parmDataSourceNo());

            if (map.exists(_deletedRange.parmFieldId()))
            {
                map.remove(_deletedRange.parmFieldId());
                bRet = true;

                if (map.empty())
                {
                    mapRange.remove(_deletedRange.parmDataSourceNo());
                }
            }
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean deleteTable(LedgerRRGQueryItem _deletedTable)
    {
        Map                 mapParent, mapChildren;
        boolean             bRet;
        LedgerRRGQueryItem  parentQueryItem;

        if (_deletedTable && (_deletedTable.parmDataSourceNo() != 0) && this.findBySysQueryItem(_deletedTable))
        {
            mapParent = mapDsNoToParent.lookup(_deletedTable.parmDataSourceNo());

            if (mapParent)
            {
                mapChildren     = mapParent.lookup(ChildrenTable);
                parentQueryItem = mapParent.lookup(TableInfoConst);

                this.deleteChildrenTable(this.findBySysQueryItem(_deletedTable));

                this.removeTableFromAdditionalMaps(_deletedTable);
                mapChildren.remove(_deletedTable.parmDataSourceNo());
            }
            else
            {
                this.reset();
            }

            if (tableOnlyTree)
            {
                this.fillFormTreeControl(tableOnlyTree, parentQueryItem, false);
            }

            bRet = true;
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBaseDateField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existBaseDateField()
    {
        return (baseDateField != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRanges</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existRanges()
    {
        return (mapRange && !mapRange.empty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSelectedField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existSelectedField()
    {
        return (selectedField != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsFields</Name>
				<Source><![CDATA[
    private boolean existsFields(
        container _conAllowTypes,
        Map       _mapFields)
    {
        return (_conAllowTypes != connull()) || _mapFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandItem</Name>
				<Source><![CDATA[
    private void expandItem(
        LedgerRRGQueryItem _tableInfo,
        LedgerRRGQueryItem _tbl,
        TreeItemIdx        _tableIdx)
    {
        if (_tableInfo && _tbl.parmDataSourceNo() == _tableInfo.parmDataSourceNo())
        {
            expandingIdx = _tableIdx;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandTreeItem</Name>
				<Source><![CDATA[
    private void expandTreeItem(FormTreeControl   _formTreeControl, TreeItemIdx  _treeItemIdx)
    {
        List            lst;
        TreeItemIdx     itemIdx;
        ListEnumerator  en;

        lst = new List(Types::Integer);

        lst.addStart(_treeItemIdx);

        itemIdx = _formTreeControl.getParent(_treeItemIdx);

        while(itemIdx)
        {
            lst.addStart(itemIdx);
            itemIdx = _formTreeControl.getParent(itemIdx);
        }

        en = lst.getEnumerator();

        while (en.moveNext())
        {
            itemIdx = en.current();
            _formTreeControl.expand(itemIdx, FormTreeExpand::Expand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldOrTableInfoToTableInfo</Name>
				<Source><![CDATA[
    private LedgerRRGQueryItem fieldOrTableInfoToTableInfo(LedgerRRGQueryItem  _fieldOrTableInfo)
    {
        LedgerRRGQueryItem tableInfo;

        if (_fieldOrTableInfo && _fieldOrTableInfo.parmFieldId())
        {
            tableInfo = this.tableInfo(_fieldOrTableInfo.parmDataSourceNo());
        }
        else
        {
            tableInfo = _fieldOrTableInfo;
        }

        return tableInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFormTreeControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFormTreeControl(
        FormTreeControl    _formTreeControl,
        LedgerRRGQueryItem _tableInfo,
        boolean            _showMainTableOnly,
        container          _conAllowTypes = connull(),
        Map                _mapFields     = null)
    {
        TreeItemIdx         itemIdx;
        Map                 map;
        MapEnumerator       enMapQueryTables;

        if ((_conAllowTypes != connull()) && _mapFields)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        expandingIdx = 0;

        if (_formTreeControl)
        {
            _formTreeControl.deleteAll();

            enMapQueryTables = mapQueryTables.getEnumerator();

            while (enMapQueryTables.moveNext())
            {
                map     = enMapQueryTables.currentValue();
                itemIdx = this.insTableBranch(_formTreeControl, _tableInfo, _showMainTableOnly, _conAllowTypes, _mapFields, map, 0);
                map     = map.lookup(ChildrenTable);

                if (!_showMainTableOnly)
                {
                    this.insertChildren(_formTreeControl, _tableInfo, _showMainTableOnly, _conAllowTypes, _mapFields, map, itemIdx);
                }
            }

            this.expandTreeItem(_formTreeControl, expandingIdx);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySysQueryItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map findBySysQueryItem(LedgerRRGQueryItem _queryItem, Map _mapForSearch = mapQueryTables)
    {
        Map             mapRet;

        if ((_queryItem.parmDataSourceNo() != 0) && mapDsNoToTables.exists(_queryItem.parmDataSourceNo()))
        {
            mapRet = mapDsNoToTables.lookup(_queryItem.parmDataSourceNo());
        }

        return mapRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseDateField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGQueryItem getBaseDateField()
    {
        return baseDateField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainTableID</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public tableId getMainTableID()
    {
        tableId             tableId;
        LedgerRRGQueryItem  queryItem;

        queryItem = this.mainTable();

        if (queryItem)
        {
            tableId = queryItem.parmTableId();
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query getQuery()
    {
        Query                   query;
        QueryBuildDataSource    dsMain;

        if (mapQueryTables && !mapQueryTables.empty())
        {
            query  = new Query();

            dsMain = query.addDataSource(this.mainTable().parmTableId());

            if (this.existSelectedField())
            {
                dsMain.addSelectionField(selectedField.parmFieldId(), this.agregationMode());
            }

            this.queryAddRanges(dsMain, this.mainTable());
            this.queryAddRangeBaseDateField(dsMain, this.mainTable());
            this.queryAddChildrenDS(dsMain, this.findBySysQueryItem(this.mainTable()).lookup(ChildrenTable));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGQueryItem getSelectedField()
    {
        return selectedField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageListAppl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ImageListAppl imageListAppl()
    {
        if (! imageListAppl)
        {
            imageListAppl = new ImageListAppl_Report();
        }

        return imageListAppl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChildren</Name>
				<Source><![CDATA[
    private void insertChildren(
        FormTreeControl    _formTreeControl,
        LedgerRRGQueryItem _tableInfo,
        boolean            _showMainTableOnly,
        container          _conAllowTypes,
        Map                _mapFields,
        Map                _curentMap,
        TreeItemIdx        _parentIdx)
    {
        MapEnumerator   me = _curentMap.getEnumerator();
        Map             mapValue, mapChildren;
        TreeItemIdx     curentItemIdx;

        while (me.moveNext())
        {
            mapValue      = me.currentValue();
            mapChildren   = mapValue.lookup(ChildrenTable);
            curentItemIdx = this.insTableBranch(_formTreeControl, _tableInfo, _showMainTableOnly, _conAllowTypes, _mapFields, mapValue, _parentIdx);

            this.insertChildren(_formTreeControl, _tableInfo, _showMainTableOnly, _conAllowTypes, _mapFields, mapChildren, curentItemIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDsNode</Name>
				<Source><![CDATA[
    private TreeItemIdx insertDsNode(
        FormTreeControl _formTreeControl,
        TreeItemIdx     _parentIdx,
        Map             _mapChildren)
    {
        LedgerRRGQueryItem queryItem = new LedgerRRGQueryItem();

        queryItem.parmLock(true);
        queryItem.parmName(TxtDataSource);
        queryItem.parmLabel("@SYS26774");
        queryItem.parmImageRes(this.imageListAppl().image(ImageDataSource));

        return this.addTreeItem(_formTreeControl, queryItem, _parentIdx, FormTreeAdd::Last, !_mapChildren.empty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFields</Name>
				<Source><![CDATA[
    private void insertFields(
        FormTreeControl    _formTreeControl,
        LedgerRRGQueryItem _tableInfo,
        container          _conAllowTypes,
        Map                _mapFields,
        LedgerRRGQueryItem _tbl,
        TreeItemIdx        _tableIdx)
    {
        TreeItemIdx         fieldsParent;
        LedgerRRGQueryItem  queryItem = new LedgerRRGQueryItem();

        queryItem.parmRelatedId(_tbl.parmTableId());
        queryItem.parmLock(true);
        queryItem.parmName(TxtFields);
        queryItem.parmLabel("@SYS3852");
        queryItem.parmImageRes(this.imageListAppl().image(ImageFields));
        queryItem.parmDataSourceNo(_tbl.parmDataSourceNo());
        queryItem.parmTableId(_tbl.parmTableId());

        fieldsParent = this.addTreeItem(_formTreeControl, queryItem, _tableIdx, FormTreeAdd::Last);

        if (_conAllowTypes != connull())
        {
            this.insertFields_ByTypes(_formTreeControl, _tableInfo, _conAllowTypes, _tbl, fieldsParent);
        }
        else
        {
            if (_mapFields)
            {
                this.insertFields_FromMap(_formTreeControl, _tableInfo, _mapFields, _tbl, fieldsParent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFields_ByTypes</Name>
				<Source><![CDATA[
    private void insertFields_ByTypes(
        FormTreeControl    _formTreeControl,
        LedgerRRGQueryItem _tableInfo,
        container          _conAllowTypes,
        LedgerRRGQueryItem _tbl,
        TreeItemIdx        _parentIdx)
    {
        List                lstFields;
        ListEnumerator      le;
        LedgerRRGQueryItem  queryItem;

        lstFields = this.lstFieldsOfTable(_tbl.parmTableId(), _tbl.parmDataSourceNo(), _conAllowTypes);

        if (!lstFields.empty())
        {
            this.setChildrenState(_formTreeControl, _parentIdx, true);
        }

        le = lstFields.getEnumerator();

        while (le.moveNext())
        {
            queryItem = le.current();
            this.addTreeItem(_formTreeControl, queryItem, _parentIdx);
        }

        this.expandItem(_tableInfo, _tbl, _parentIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFields_FromMap</Name>
				<Source><![CDATA[
    private void insertFields_FromMap(
        FormTreeControl    _formTreeControl,
        LedgerRRGQueryItem _tableInfo,
        Map                _mapFields,
        LedgerRRGQueryItem _tbl,
        TreeItemIdx        _parentIdx)
    {
        Map                 fields;
        MapEnumerator       me;
        LedgerRRGQueryItem  queryItem;

        if (_mapFields.exists(_tbl.parmDataSourceNo()))
        {
            fields = _mapFields.lookup(_tbl.parmDataSourceNo());

            if (!fields.empty())
            {
                this.setChildrenState(_formTreeControl, _parentIdx, true);
            }

            me  = fields.getEnumerator();

            while (me.moveNext())
            {
                queryItem = me.currentValue();
                this.addTreeItem(_formTreeControl, queryItem, _parentIdx);
            }
        }

        this.expandItem(_tableInfo, _tbl, _parentIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean insertRange(LedgerRRGQueryItem  _fieldInfo)
    {
        boolean             bRet;
        LedgerRRGQueryItem  tableInfo, newQueryItem;
        Map                 map;

        if (_fieldInfo && _fieldInfo.parmFieldId() && mapDsNoToTables.exists(_fieldInfo.parmDataSourceNo()))
        {
            tableInfo = this.tableInfo(_fieldInfo.parmDataSourceNo());

            if (_fieldInfo.parmTableId() == tableInfo.parmTableId())
            {
                if (mapRange.exists(tableInfo.parmDataSourceNo()))
                {
                    map = mapRange.lookup(tableInfo.parmDataSourceNo());
                }
                else
                {
                    map = new Map(Types::Integer, Types::Class);
                    mapRange.insert(tableInfo.parmDataSourceNo(), map);
                }

                newQueryItem = LedgerRRGQueryItem::create(_fieldInfo.pack());
                newQueryItem.parmImageRes(this.imageListAppl().image(ImageQueryRange));

                map.insert(newQueryItem.parmFieldId(), newQueryItem);

                bRet = true;
            }
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean insertTable(LedgerRRGQueryItem _parentTableInfo, LedgerRRGQueryItem _newTableInfo)
    {
        boolean     bRet;
        Map         map, mapNewItem, mapParentItem;

        if (_newTableInfo && (_newTableInfo.parmDataSourceNo() == 0))
        {
            if ((_parentTableInfo  && this.findBySysQueryItem(_parentTableInfo)) ||
                (!_parentTableInfo && mapQueryTables.empty()))
            {
                if (_parentTableInfo)
                {
                    mapParentItem = this.findBySysQueryItem(_parentTableInfo);
                    map           = mapParentItem.lookup(ChildrenTable);
                }
                else
                {
                    mapParentItem = null;
                    map           = mapQueryTables;
                }

                counterDataSourceNo++;
                _newTableInfo.parmDataSourceNo(counterDataSourceNo);

                mapNewItem = this.createQueryTablesItem(_newTableInfo);

                map.insert(counterDataSourceNo, mapNewItem);
                mapDsNoToTables.insert(counterDataSourceNo, mapNewItem);
                mapDsNoToParent.insert(counterDataSourceNo, mapParentItem);


                if (tableOnlyTree)
                {
                    this.fillFormTreeControl(tableOnlyTree, _newTableInfo, false);
                }

                bRet = true;
            }
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insTableBranch</Name>
				<Source><![CDATA[
    private TreeItemIdx insTableBranch(
        FormTreeControl    _formTreeControl,
        LedgerRRGQueryItem _tableInfo,
        boolean            _showMainTableOnly,
        container          _conAllowTypes,
        Map                _mapFields,
        Map                _curentMap,
        TreeItemIdx        _parentIdx)
    {
        LedgerRRGQueryItem  curentQueryItem;
        TreeItemIdx         retIdx, tableItemIdx;
        Map                 mapChildren;

        curentQueryItem = _curentMap.lookup(TableInfoConst);
        mapChildren     = _curentMap.lookup(ChildrenTable);

        tableItemIdx    = this.addTreeItem(_formTreeControl,
                                           this.createNewItem(_conAllowTypes, _mapFields, curentQueryItem),
                                           _parentIdx,
                                           FormTreeAdd::Last,
                                           this.existsFields(_conAllowTypes, _mapFields) ? true : !mapChildren.empty());

        if (this.existsFields(_conAllowTypes, _mapFields))
        {
            if (_showMainTableOnly)
            {
                retIdx = tableItemIdx;
            }
            else
            {
                retIdx = this.insertDsNode(_formTreeControl, tableItemIdx, mapChildren);
            }

            this.insertFields(_formTreeControl, _tableInfo, _conAllowTypes, _mapFields, curentQueryItem, tableItemIdx);
        }
        else
        {
            this.expandItem(_tableInfo, curentQueryItem, tableItemIdx);
            retIdx = tableItemIdx;
        }

        return retIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lstChildrenTables</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List lstChildrenTables(LedgerRRGQueryItem  _queryItem)
    {
        List lst = new List(Types::Class);

        if (_queryItem)
        {
            this.addChildrenTablesToList(lst, this.findBySysQueryItem(_queryItem).lookup(ChildrenTable));
        }

        return lst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lstFieldsOfTable</Name>
				<Source><![CDATA[
    private List lstFieldsOfTable(tableId _tableId, int _dataSourceNo, container _conAllowTypes)
    {
        List                lst;
        container           conField;
        fieldId             fieldId;
        TempStr             fieldName;
        FieldLabel          fieldLabel;
        FieldHelp           fieldHelp;
        Types               baseTypes;
        int                 cx;
        LedgerRRGQueryItem  queryItem;
        ImageRes            imageRes;

        lst      = new List(Types::Class);
        conField = LedgerRRGQuery::fieldFillContainer(_tableId, _conAllowTypes);

        for (cx = 1; cx <= conlen(conField); cx++)
        {
            [fieldId, fieldName, fieldLabel, fieldHelp, baseTypes] = conpeek(conField, cx);

            queryItem = new LedgerRRGQueryItem();
            queryItem.parmTableId(_tableId);
            queryItem.parmFieldId(fieldId);
            queryItem.parmLabel(fieldLabel);
            queryItem.parmName(fieldName);
            queryItem.parmDataSourceNo(_dataSourceNo);

            switch (baseTypes)
            {
                case Types::Integer :
                    imageRes = ImageFieldInt;
                    break;

                case Types::Real :
                    imageRes = ImageFieldReal;
                    break;

                case Types::Date :
                    imageRes = ImageFieldDate;
                    break;

                case Types::String    :
                case Types::RString   :
                case Types::VarString :
                    imageRes = ImageFieldStr;
                    break;

                case Types::Enum :
                    imageRes = ImageFieldEnum;
                    break;

                case Types::Time :
                    imageRes = ImageFieldTime;
                    break;

                case Types::UtcDateTime :
                    imageRes = ImageFieldDateTime;

                    break;

                default :
                    imageRes = ImageField;
            }

            queryItem.parmImageRes(this.imageListAppl().image(imageRes));

            lst.addEnd(queryItem);
        }

        return lst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGQueryItem mainTable()
    {
        LedgerRRGQueryItem  queryItem;
        Map                 map;
        MapEnumerator       me;

        if (mapQueryTables)
        {
            me = mapQueryTables.getEnumerator();

            while (me.moveNext())
            {
                map         = me.currentValue();
                queryItem   = map.lookup(TableInfoConst);
            }
        }

        return (queryItem) ? LedgerRRGQueryItem::create(queryItem.pack()) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddChildrenDS</Name>
				<Source><![CDATA[
    private void queryAddChildrenDS(QueryBuildDataSource _dsParent, Map _mapChildrenInfo)
    {
        MapEnumerator           me = _mapChildrenInfo.getEnumerator();
        LedgerRRGQueryItem      queryItem;
        Map                     map;
        QueryBuildDataSource    ds;

        while (me.moveNext())
        {
            map = me.currentValue();

            queryItem   = map.lookup(TableInfoConst);
            map         = map.lookup(ChildrenTable);

            ds = _dsParent.addDataSource(queryItem.parmTableId());
            ds.relations(true);
            ds.joinMode(JoinMode::ExistsJoin);
            ds.fetchMode(QueryFetchMode::One2One);
            this.queryAddRanges(ds, queryItem);
            this.queryAddRangeBaseDateField(ds, queryItem);
            this.queryAddChildrenDS(ds, map);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeBaseDateField</Name>
				<Source><![CDATA[
    private void queryAddRangeBaseDateField(QueryBuildDataSource _ds, LedgerRRGQueryItem _parentTable)
    {
        if (baseDateField && (_parentTable.parmDataSourceNo() == baseDateField.parmDataSourceNo()))
        {
            _ds.name(LedgerRRGQuery::getBaseDateFieldDsName());
            _ds.addRange(baseDateField.parmFieldId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRanges</Name>
				<Source><![CDATA[
    private void queryAddRanges(QueryBuildDataSource _ds, LedgerRRGQueryItem _parentTable)
    {
        Map                 map;
        MapEnumerator       me;
        LedgerRRGQueryItem  fieldInfo;

        if (mapRange.exists(_parentTable.parmDataSourceNo()))
        {
            map = mapRange.lookup(_parentTable.parmDataSourceNo());
            me  = map.getEnumerator();

            while (me.moveNext())
            {
                fieldInfo = me.currentValue();
                _ds.addRange(fieldInfo.parmFieldId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTableFromAdditionalMaps</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void removeTableFromAdditionalMaps(LedgerRRGQueryItem  _queryItem)
    {
        boolean checkQueryItem(LedgerRRGQueryItem  tmpQueryItem)
        {
            return (tmpQueryItem  && (tmpQueryItem.parmTableId() == _queryItem.parmTableId()) && (tmpQueryItem.parmDataSourceNo() == _queryItem.parmDataSourceNo()));
        }

        if (checkQueryItem(selectedField))
        {
            selectedField = null;
        }

        if (checkQueryItem(baseDateField))
        {
            baseDateField = null;
        }

        if (mapRange.exists(_queryItem.parmDataSourceNo()))
        {
            mapRange.remove(_queryItem.parmDataSourceNo());
        }

        mapDsNoToParent.insert(_queryItem.parmDataSourceNo(), null);
        mapDsNoToParent.remove(_queryItem.parmDataSourceNo());

        mapDsNoToTables.remove(_queryItem.parmDataSourceNo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reset()
    {
        mapQueryTables      = this.createEmptyMapQueryTables();
        mapDsNoToTables     = new Map(Types::Integer, Types::Class);
        mapDsNoToParent     = new Map(Types::Integer, Types::Class);
        selectedField       = null;
        baseDateField       = null;
        counterDataSourceNo = 0;
        this.resetRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRanges</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void resetRanges()
    {
        mapRange = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseDateField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean setBaseDateField(LedgerRRGQueryItem _newBaseDateField)
    {
        LedgerRRGQueryItem  tmpQueryItem;
        Map                 map;
        boolean             bRet;

        if (_newBaseDateField                       &&
            _newBaseDateField.parmFieldId()         &&
            _newBaseDateField.parmDataSourceNo()    &&
            mapDsNoToTables.exists(_newBaseDateField.parmDataSourceNo()))
        {
            map = mapDsNoToTables.lookup(_newBaseDateField.parmDataSourceNo());

            tmpQueryItem = map.lookup(TableInfoConst);

            if (_newBaseDateField.parmTableId() == tmpQueryItem.parmTableId())
            {
                baseDateField = LedgerRRGQueryItem::create(_newBaseDateField.pack());
                bRet = true;
            }
        }
        else
        {
            baseDateField = null;
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChildrenState</Name>
				<Source><![CDATA[
    private void setChildrenState(
        FormTreeControl _formTreeControl,
        TreeItemIdx     _currentIdx,
        boolean         _state)
    {
        FormTreeItem   formTreeItem = _formTreeControl.getItem(_currentIdx);

        formTreeItem.children(_state);
        _formTreeControl.setItem(formTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormTreeControlChildrenProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setFormTreeControlChildrenProperty(FormTreeControl  _formTreeControl, TreeItemIdx _itemIdx, boolean _children)
    {
        FormTreeItem    formTreeItem;

        formTreeItem = _formTreeControl.getItem(_itemIdx);

        if (formTreeItem)
        {
            formTreeItem.children(_children);
            _formTreeControl.setItem(formTreeItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean setSelectedField(LedgerRRGQueryItem _newSelectedField)
    {
        LedgerRRGQueryItem  mainTable = this.mainTable();
        boolean             bRet;

        if (mainTable                                                       &&
            _newSelectedField                                               &&
            _newSelectedField.parmFieldId()                                 &&
            _newSelectedField.parmTableId()      == mainTable.parmTableId() &&
            _newSelectedField.parmDataSourceNo() == mainTable.parmDataSourceNo())
        {
            selectedField = LedgerRRGQueryItem::create(_newSelectedField.pack());
            bRet = true;
        }
        else
        {
            selectedField = null;
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowSysName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setShowSysName(boolean  _newShowSysName)
    {
        showSysName = _newShowSysName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableOnlyTree</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTableOnlyTree(FormTreeControl  _formTreeControl)
    {
        tableOnlyTree = _formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryStruct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showQueryStruct(FormTreeControl     _formTreeControl,
                                boolean             _showMainTableOnly,
                                container           _conAllowTypes = connull(),
                                LedgerRRGQueryItem  _queryItem  = this.mainTable())
    {
        this.fillFormTreeControl(_formTreeControl, _queryItem, _showMainTableOnly, _conAllowTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRangesStruct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showRangesStruct(FormTreeControl  _formTreeControl, LedgerRRGQueryItem  _fieldOrTableInfo)
    {
        this.fillFormTreeControl(_formTreeControl, this.fieldOrTableInfoToTableInfo(_fieldOrTableInfo), false, connull(), mapRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerRRGQueryItem tableInfo(int _dataSourceNo)
    {
        LedgerRRGQueryItem  tableInfo;
        Map                 map;

        if (mapDsNoToTables.exists(_dataSourceNo))
        {
            map       = mapDsNoToTables.lookup(_dataSourceNo);
            tableInfo = map.lookup(TableInfoConst);
        }

        return tableInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public LedgerRRGQuery construct(boolean   _showSysName)
    {
        LedgerRRGQuery      ledgerRRGQuery;

        ledgerRRGQuery = new LedgerRRGQuery();
        ledgerRRGQuery.setShowSysName(_showSysName);
        return ledgerRRGQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysQueryItemTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public LedgerRRGQueryItem createSysQueryItemTable(tableId    _tableId, ImageRes _imageRes = 0, int  _currentDsNumber = 0)
    {
        LedgerRRGQueryItem  queryItem;
        SysDictTable        dictTable;

        dictTable = new SysDictTable(_tableId);

        if (dictTable)
        {
            queryItem = new LedgerRRGQueryItem();

            queryItem.parmTableId(_tableId);
            queryItem.parmLabel(strltrim(dictTable.getLabelOrName()));
            queryItem.parmName(dictTable.name());
            queryItem.parmImageRes(_imageRes);
            queryItem.parmDataSourceNo(_currentDsNumber);

            if (!queryItem.parmLabel())
            {
                queryItem.parmLabel("@SYS26699");
            }
        }

        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldFillContainer</Name>
				<Source><![CDATA[
    private static server container fieldFillContainer(tableId _tableId, container _conAllowTypes)
    {
        const int       DBF_VISIBLE	    =    0x01;
        const int       DBF_STORE	    =    0x08;

        SysDictField    sysDictField;
        SysDictField    arrayField;
        SysDictTable    dictTable;
        int             i, j;
        int             lastElement;
        str             arrayText;
        container       field;
        Set             setAllowTypes;
        Types           types;

        setAllowTypes = new Set(Types::Enum);

        for (i = 1; i <= conlen(_conAllowTypes); i++)
        {
            types = conpeek(_conAllowTypes, i);
            setAllowTypes.add(types);
        }

        dictTable = new SysDictTable(_tableId);

        if (dictTable)
        {
            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                sysDictField = new SysDictField(dictTable.id(), dictTable.fieldCnt2Id(i));

                for(j = 1; j <= sysDictField.arraySize(); j++)
                {
                    arrayText  = EmptyStr;

                    arrayField = new SysDictField(dictTable.id(), sysDictField.id(), j);

                    if (j > 1)
                    {
                        arrayText  = strfmt("@LedgerRRG:LedgerRRG_Arg", int2str(j));
                    }

                    if((arrayField.flags() & DBF_VISIBLE)      &&
                       (arrayField.flags() & DBF_STORE)        &&
                       setAllowTypes.in(arrayField.baseType()))
                    {
                        lastElement++;
                        field = conins(field, lastElement, [arrayField.extendedFieldId(),
                                                            arrayField.name() + arrayText,
                                                            arrayField.label(),
                                                            arrayField.help(),
                                                            arrayField.baseType()]);
                    }
                }
            }
        }

        return field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseDateFieldDsName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TempStr getBaseDateFieldDsName()
    {
        const str DsName = "baseDateField_DS";
        return DsName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectReportingDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes getSelectReportingDate()
    {
        return selectReportingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectReportingDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setSelectReportingDate(NoYes _selectReportingDate)
    {
        selectReportingDate = _selectReportingDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>