<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOppositeSignUpdateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerOppositeSignUpdateService</c> class updates the opposite signed transactions.
/// </summary>
public class LedgerOppositeSignUpdateService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the opposite signed transactions and rebuilds the dimension sets balance.
    /// </summary>
    /// <param name="_contract">
    /// The <c>LedgerOppositeSignUpdateContract</c> object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void update(LedgerOppositeSignUpdateContract _contract)
    {
        this.updateRecords(_contract);
        this.updateBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the initialized dimension sets balance.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateBalances()
    {
        DimensionFocusInitializeBalance::processFullRebuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the opposite signed transactions.
    /// </summary>
    /// <param name="_contract">
    /// The <c>LedgerOppositeSignUpdateContract</c> object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateRecords(LedgerOppositeSignUpdateContract _contract)
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;

        ttsBegin;

        update_recordSet generalJournalAccountEntry
            setting
                IsCredit = !generalJournalAccountEntry.IsCredit,
                IsCorrection = false
            where ( (generalJournalAccountEntry.AccountingCurrencyAmount < 0 && generalJournalAccountEntry.IsCredit == false) ||
                   (generalJournalAccountEntry.AccountingCurrencyAmount > 0 && generalJournalAccountEntry.IsCredit == true))
                ||( (generalJournalAccountEntry.ReportingCurrencyAmount < 0 && generalJournalAccountEntry.IsCredit == false) ||
                    (generalJournalAccountEntry.ReportingCurrencyAmount > 0 && generalJournalAccountEntry.IsCredit == true))
                ||( (generalJournalAccountEntry.TransactionCurrencyAmount < 0 && generalJournalAccountEntry.IsCredit == false) ||
                    (generalJournalAccountEntry.TransactionCurrencyAmount> 0 && generalJournalAccountEntry.IsCredit == true))
        join generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                &&  generalJournalEntry.Ledger == Ledger::current()
                &&  generalJournalEntry.AccountingDate >= _contract.parmFromDate()
                &&  generalJournalEntry.AccountingDate <= _contract.parmToDate();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>