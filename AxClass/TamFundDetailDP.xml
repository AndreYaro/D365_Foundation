<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamFundDetailDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data provider class for the <c>TAMFundDetail</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TAMFundDetailContract))
]
public class TamFundDetailDP extends SRSReportDataProviderBase
{
    TAMFundDetailTmp        tamFundDetailTmp;
    TAMPromotionParameters tamPromotionParameters;
    TAMFundID               fundID;
    CustAccount             custAccount;
    TransDate               transDate;
    Set                     setFundCustomers;

    AmountCur           totalIncurredAmt;
    AmountCur           totalActualAmt;
    AmountCur           plannedOI;
    AmountCur           plannedBB;
    AmountCur           plannedLS;
    AmountCur           incurredOI;
    AmountCur           incurredBB;
    AmountCur           incurredLS;
    AmountCur           actualOI;
    AmountCur           actualBB;
    AmountCur           actualLS;
    AmountCur           actualOthersLS;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcActualAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all actual amounts sold against the fund.
    /// </summary>
    /// <returns>
    /// This is the calculated amount.
    /// </returns>
    private AmountCur calcActualAmt()
    {
        totalActualAmt = this.calcIncurredActualOI();
        totalActualAmt += this.calcActualBB();
        totalActualAmt += this.calcActualLS();

        return totalActualAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualBB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all the rebate claims that are tied to bill back merchandising.
    /// </summary>
    /// <returns>
    /// The calculated bill back amount.
    /// </returns>
    private AmountCur calcActualBB()
    {
        TAMPromotionFund        tamPromotionFund;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionCust        tamPromotionCust;
        PdsRebateTable          pdsRebateTable;
        PdsRebateTrans          pdsRebateTrans;
        actualBB = 0;

        // fund - merch event - claims details - claim
        while select Percent from tamPromotionFund
            where tamPromotionFund.Fund == fundID
                && tamPromotionFund.MerchandisingEventID
            join RecId from  tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID      == tamMerchandisingEvent.PromotionID
                    && (tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                    || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
            join RecId from tamPromotionCust
                where tamPromotionCust.PromotionID  == tamTradePromotion.PromotionID
                    && tamPromotionCust.CustAccount == custAccount
            join RecId from pdsRebateTable
                where pdsRebateTable.tamMerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && pdsRebateTable.CustAccount == custAccount
            join PdsRebateAmt from pdsRebateTrans
                where pdsRebateTrans.PdsRebateId == pdsRebateTable.PdsRebateId
                    && (pdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::CreditNote
                    || pdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::PassToAP)
        {
            actualBB += pdsRebateTrans.PdsRebateAmt * tamPromotionFund.Percent/100;
        }

        return actualBB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualLS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all lump sums that have been claimed against the fund.
    /// </summary>
    /// <returns>
    /// The calculated lump sum amount.
    /// </returns>
    private AmountCur calcActualLS()
    {
        TAMPromotionFund        tamPromotionFund;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMMerchEventPricing    tamMerchEventPricing;
        TAMMerchEventTrans      tamMerchEventTrans;

        actualLS = 0;

        // Get the lump sum cost for lump sumps paid to customer
        while select Percent from tamPromotionFund
            where tamPromotionFund.Fund == fundID
                && tamPromotionFund.MerchandisingEventID
            join RecId from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            join RecId from tamMerchEventPricing
                where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && tamMerchEventPricing.tfClaimPayType == TAMPaymentType::CustomerDeduction
                    && tamMerchEventPricing.tfPayTo == custAccount
                    && tamMerchEventPricing.LumpSumStatus != MCRLumpSumStatus::Decline
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                    && (tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                    || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
            join Amount from tamMerchEventTrans
               where tamMerchEventTrans.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
        {
            actualLS += tamMerchEventTrans.Amount * tamPromotionFund.Percent/100;
        }

        return actualLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredActualOI</Name>
				<Source><![CDATA[
    /// <summary>
    /// All shipped quantities that have received off invoice discounts.
    /// </summary>
    /// <returns>
    /// The calculated incurred off invoice amount.
    /// </returns>
    private AmountCur calcIncurredActualOI()
    {
        SalesLine               salesLine;
        MCRPriceHistory         mcrPriceHistory;
        MCRPriceHistoryRef      mcrPriceHistoryRef;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionFund        tamPromotionFund;
        TAMPromotionCust        tamPromotionCust;
        SalesTable              salesTable;
        SalesQty                invoiceQty;

        incurredOI = 0;

        while select Percent from tamPromotionFund
            where tamPromotionFund.MerchandisingEventID
                && tamPromotionFund.Fund == fundID
            join MerchandisingEventID from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID       == tamPromotionFund.MerchandisingEventID
                   && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::OffInvoice
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID          == tamMerchandisingEvent.PromotionID
                   && (tamTradePromotion.PromotionStatus     == TAMStatus::CustomerApproved
                        || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
            join RecId from tamPromotionCust
                where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID
                   && tamPromotionCust.CustAccount == custAccount
            join RecId from mcrPriceHistory
                where mcrPriceHistory.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            join RecId from mcrPriceHistoryRef
                where mcrPriceHistoryRef.PriceHistoryRecId == mcrPriceHistory.RecId
            join SalesId, InventTransId, ProjTransId, SalesType, SalesPrice from salesLine
                where salesLine.mcrOrderLine2PriceHistoryRef == mcrPriceHistoryRef.mcrOrderLine2PriceHistoryRef
            exists join salesTable
                where salesTable.SalesId      == salesLine.SalesId
                    && salesTable.CustAccount == custAccount
        {
            invoiceQty = salesLine.invoicedInTotal();
            incurredOI += this.discountAmount(
                invoiceQty,
                tamMerchandisingEvent.MerchandisingEventID,
                salesLine.SalesPrice)
                * tamPromotionFund.Percent/100;
        }

        actualOI = incurredOI;

        return incurredOI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all incurred amounts
    /// </summary>
    /// <returns>
    /// The calculated incurred amounts.
    /// </returns>
    private AmountCur calcIncurredAmt()
    {
        incurredLS = this.calcLumpSum();

        totalIncurredAmt = this.calcIncurredActualOI();
        totalIncurredAmt += this.calcIncurredBB();
        totalIncurredAmt += incurredLS;

        return totalIncurredAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncurredBB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all bill backs incurred amounts against a fund.
    /// </summary>
    /// <returns>
    /// The calculated bill back amount.
    /// </returns>
    private AmountCur calcIncurredBB()
    {
        SalesLine               salesLine;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionCust        tamPromotionCust;
        TAMPromotionFund        tamPromotionFund;
        PdsRebateTable          pdsRebateTable;

        incurredBB = 0;

        while select Percent from tamPromotionFund
            where tamPromotionFund.MerchandisingEventID
                && tamPromotionFund.Fund == fundID
            join RecId from  tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                    && (tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                    || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
            join RecId from tamPromotionCust
                where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID
                    && tamPromotionCust.CustAccount == custAccount
            join PdsStartingRebateAmt from pdsRebateTable
                where pdsRebateTable.tamMerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && pdsRebateTable.CustAccount            == custAccount
        {
            incurredBB += pdsRebateTable.PdsStartingRebateAmt * tamPromotionFund.Percent/100;
        }
        return incurredBB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLumpSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates lump sum amount paid to a customer.
    /// </summary>
    /// <returns>
    ///     The calcualted lump sum amount.
    /// </returns>
    private AmountCur calcLumpSum()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMMerchEventPricing    tamMerchEventPricing;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionFund        tamPromotionFund;
        AmountCur               amountCur;

        amountCur = 0;

        while select Percent from tamPromotionFund
            where tamPromotionFund.MerchandisingEventID
                && tamPromotionFund.Fund == fundID
            join MerchandiseCost from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID        == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            exists join tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                    && (tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                    || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
            exists join tamMerchEventPricing
                where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && tamMerchEventPricing.tfClaimPayType == TAMPaymentType::CustomerDeduction
                    && tamMerchEventPricing.tfPayTo == custAccount
                    && tamMerchEventPricing.LumpSumStatus != MCRLumpSumStatus::Decline
        {
            amountCur += tamMerchandisingEvent.MerchandiseCost * tamPromotionFund.Percent/100;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOthersActualLS</Name>
				<Source><![CDATA[
    private AmountCur calcOthersActualLS()
    {
        TAMPromotionFund        tamPromotionFund;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMMerchEventPricing    tamMerchEventPricing;
        TAMMerchEventTrans      tamMerchEventTrans;

        actualOthersLS = 0;

        // Get the lump sum cost for lump sumps paid to customer
        while select Percent from tamPromotionFund
            where tamPromotionFund.MerchandisingEventID
                && tamPromotionFund.Fund == fundID
            join RecId from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            join RecId from tamMerchEventPricing
                where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && tamMerchEventPricing.LumpSumStatus != MCRLumpSumStatus::Decline
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                    && (tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                    || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
            join AccountNum, Amount from tamMerchEventTrans
                where tamMerchEventTrans.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                {
                    if (!setFundCustomers.in(tamMerchEventTrans.AccountNum))
                    {
                        actualOthersLS += tamMerchEventTrans.Amount * tamPromotionFund.Percent/100;
                    }
                }

        return actualOthersLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOthersIncurredLS</Name>
				<Source><![CDATA[
    private AmountCur calcOthersIncurredLS()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMMerchEventPricing    tamMerchEventPricing;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionFund        tamPromotionFund;
        AmountCur               amountCur;

        amountCur = 0;

        while select Percent from tamPromotionFund
            where tamPromotionFund.MerchandisingEventID
                && tamPromotionFund.Fund == fundID
            join MerchandiseCost from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            join TFPayto from tamMerchEventPricing
                where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && tamMerchEventPricing.LumpSumStatus != MCRLumpSumStatus::Decline
            exists join tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                    && (tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                    || (tamPromotionParameters.IncludeClosedInFundAnalytics == NoYes::Yes
                        && tamTradePromotion.PromotionStatus == TAMStatus::Closed))
                {
                    if (!setFundCustomers.in(tamMerchEventPricing.TFPayTo))
                    {
                        amountCur += tamMerchandisingEvent.MerchandiseCost * tamPromotionFund.Percent/100;
                    }
                }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlanned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates planned amounts for the passed in category tied to a
    /// fund based on the status defined on the parameters.
    /// </summary>
    /// <param name="_category">
    /// Value used to determine what planned category is being calculated for;
    ///     lump sum, bill back, or off invoice.
    /// </param>
    /// <returns>
    /// The calculated amount for the passed category
    /// </returns>
    /// <remarks>
    /// Use query instead of while select here to use the list of valid
    /// statuses as a filtering criteria.
    /// </remarks>
    private AmountCur calcPlanned(MCRMerchandisingEventCategory _category)
    {
        TAMPromotionFund        tamPromotionFund;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        AmountCur               plannedAmount;
        Query                   query;
        QueryBuildDataSource    qbdsFund;
        QueryBuildDataSource    qbdsEvent;
        QueryBuildDataSource    qbdsPromotion;
        QueryRun                queryRun;

        query = new Query();
        qbdsFund = query.addDataSource(tableNum(TAMPromotionFund));
        qbdsFund.addRange(fieldNum(TAMPromotionFund, MerchandisingEventID)).value(SysQuery::valueNotEmptyString());
        qbdsFund.addRange(fieldNum(TAMPromotionFund, Fund)).value(fundID);

        qbdsEvent = qbdsFund.addDataSource(tableNum(TAMMerchandisingEvent));
        qbdsEvent.relations(true);
        qbdsEvent.addRange(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory)).value(enum2str(_category));

        qbdsPromotion = qbdsEvent.addDataSource(tableNum(TAMTradePromotion));
        qbdsPromotion.clearLinks();
        qbdsPromotion.addLink(fieldNum(TAMTradePromotion, PromotionID), fieldNum(TAMMerchandisingEvent, PromotionID));
        qbdsPromotion.addRange(fieldNum(TAMTradePromotion, PromotionStatus)).value(con2Str(TAMPromotionParameters::validStatuses()));

        queryRun = new QueryRun(query);
        queryRun.reset();

        while (queryRun.next())
        {
            tamPromotionFund = queryRun.get(tableNum(TAMPromotionFund));
            tamMerchandisingEvent = queryRun.get(tableNum(TAMMerchandisingEvent));
            plannedAmount += tamMerchandisingEvent.MerchandiseCost * tamPromotionFund.Percent/100;
        }
        return plannedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlannedAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all planned amount.
    /// </summary>
    /// <returns>
    /// The calculated planned amount.
    /// </returns>
    protected AmountCur calcPlannedAmt()
    {
        plannedOI = this.calcPlanned(MCRMerchandisingEventCategory::OffInvoice);
        plannedBB = this.calcPlanned(MCRMerchandisingEventCategory::BillBack);
        plannedLS = this.calcPlanned(MCRMerchandisingEventCategory::LumpSum);

        return plannedOI + plannedBB + plannedLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlannedLS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates planned lumpsum amount tied to a fund based.
    /// </summary>
    /// <returns>
    /// The calculated planned lumpsum amount.
    /// </returns>
    private AmountCur calcPlannedLS()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMTradePromotion       tamTradePromotion;
        TAMPromotionFund        tamPromotionFund;
        AmountCur               plannedAmount;

        while select Percent from tamPromotionFund
            where tamPromotionFund.MerchandisingEventID
                && tamPromotionFund.Fund == fundID
            join MerchandiseCost from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                    && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchandisingEvent.PromotionID
                    && tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
        {
            plannedAmount += tamMerchandisingEvent.MerchandiseCost * tamPromotionFund.Percent/100;
        }
        return plannedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the discount amounts for off invoice and bill back discounts.
    /// </summary>
    /// <param name="_shippedQty">
    /// The quantity shipped.
    /// </param>
    /// <param name="_mcrMerchandisingEventID">
    /// The event ID.
    /// </param>
    /// <param name="_salesPrice">
    /// The sales price of the sales line.
    /// </param>
    /// <returns>
    /// The is the calculated total discount amount.
    /// </returns>
    private AmountCur discountAmount(Qty _shippedQty,
                             MCRMerchandisingEventID _mcrMerchandisingEventID,
                             SalesPrice _salesPrice)
    {
        TAMMerchEventPricing    tamMerchEventPricing;
        Price                   priceAfterDisc;
        AmountCur               totalDisc;
        Price                   priceAfterDiscPercent;

        tamMerchEventPricing = TAMMerchEventPricing::findMerchEventCostLevel(_mcrMerchandisingEventID);

        priceAfterDisc = _salesPrice - tamMerchEventPricing.DiscountAmt;
        priceAfterDiscPercent = tamMerchEventPricing.DiscountPercent * 0.01;

        totalDisc += ((_salesPrice - (priceAfterDisc * (1 - priceAfterDiscPercent))) * _shippedQty);
        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTAMFundDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the temp table used by the <c>TAMFundDetail</c> report.
    /// </summary>
    /// <returns>
    /// The temp table used by the <c>TAMFundDetail</c> report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TAMFundDetailTmp))
    ]
    public TAMFundDetailTmp getTAMFundDetailTmp()
    {
        select  tamFundDetailTmp;

        return  tamFundDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNonCustPayment</Name>
				<Source><![CDATA[
    private void insertNonCustPayment()
    {
        tamFundDetailTmp.clear();
        tamFundDetailTmp.Hierarchy = fundID;
        tamFundDetailTmp.SumActualLS = this.calcOthersActualLS();
        tamFundDetailTmp.SumIncurredLS = this.calcOthersIncurredLS();

        tamFundDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTAMFundDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table used by the <c>TAMFundDetail</c> report.
    /// </summary>
    private void insertTAMFundDetailTmp()
    {
        TAMFundCustCategory tamFundCustCategory;
        TAMFundCustCategory tamFundCustCategory_Parent;

        EcoResCategoryLevel curLvl;
        int                 i;
        container           categoryName;
        int                 n;
        container           lineName;
        RefRecId            parentId;

        while select Customer, ParentCategory, Name, Level, BudgetedAmount, FundID from tamFundCustCategory
                where tamFundCustCategory.Customer
                   && tamFundCustCategory.FundID == fundID
        {
            custAccount = CustTable::findRecId(tamFundCustCategory.Customer).AccountNum;

            setFundCustomers.add(custAccount);
            categoryName = conNull();
            parentId = tamFundCustCategory.ParentCategory;
            categoryName = conPoke(categoryName, 1, tamFundCustCategory.Name);
            n = 1;
            for (curLvl = tamFundCustCategory.Level; curLvl > 2; curLvl--)
            {
                n++;
                select firstonly ParentCategory, Name from  tamFundCustCategory_Parent
                            where tamFundCustCategory_Parent.RecId == parentId;

                parentId = tamFundCustCategory_Parent.ParentCategory;
                categoryName = conPoke(categoryName, n, tamFundCustCategory_Parent.Name);
            }

            n = 0;

            lineName = conNull();
            for (i = conLen(categoryName); i > 0; i--)
            {
                n++;
                lineName = conPoke(lineName,n,conPeek(categoryName, i));
            }
            if (conPeek(lineName, 1))
            {
                tamFundDetailTmp.String300 = conPeek(lineName, 1);
            }
            if (conPeek(lineName, 2))
            {
                tamFundDetailTmp.String300_1 = conPeek(lineName, 2);
            }
            if (conPeek(lineName, 3))
            {
                tamFundDetailTmp.String300_2 = conPeek(lineName, 3);
            }
            if (conPeek(lineName, 4))
            {
                tamFundDetailTmp.String300_3 = conPeek(lineName, 4);
            }
            if (conPeek(lineName, 5))
            {
                tamFundDetailTmp.String300_4 = conPeek(lineName, 5);
            }
            if (conPeek(lineName, 6))
            {
                if (conLen(lineName) > 6)
                {
                    tamFundDetailTmp.String300_5 = conPeek(lineName, conLen(lineName));
                }
                else
                {
                    tamFundDetailTmp.String300_5 = conPeek(lineName, 6);
                }
            }
            //assign amounts to be displayed on the report
            tamFundDetailTmp.SumBudgetedAmount = tamFundCustCategory.BudgetedAmount;
            tamFundDetailTmp.SumTotalActual = this.calcActualAmt();
            tamFundDetailTmp.SumTotalIncurred = this.calcIncurredAmt();
            tamFundDetailTmp.SumTotalPlanned = this.calcPlannedAmt();
            tamFundDetailTmp.SumActualBB = actualBB;
            tamFundDetailTmp.SumActualLS = actualLS;
            tamFundDetailTmp.SumActualOI = actualOI;
            tamFundDetailTmp.SumIncurredBB = incurredBB;
            tamFundDetailTmp.SumIncurredLS = incurredLS;
            tamFundDetailTmp.SumIncurredOI = incurredOI;
            tamFundDetailTmp.SumPlannedBB = plannedBB;
            tamFundDetailTmp.SumPlannedLS = plannedLS;
            tamFundDetailTmp.SumPlannedOI = plannedOI;
            tamFundDetailTmp.Hierarchy = tamFundCustCategory.FundID;
            tamFundDetailTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by <c>TAMFundDetail</c> report.
    /// </remarks>
    public void processReport()
    {
        TAMFundDetailContract   contract;

        tamPromotionParameters = TAMPromotionParameters::find();
        transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        contract = this.parmDataContract() as TAMFundDetailContract;
        fundID = contract.parmFundId();
        setFundCustomers = new Set (Types::String);

        if (fundID)
        {
            this.insertTAMFundDetailTmp();
            this.insertNonCustPayment();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>