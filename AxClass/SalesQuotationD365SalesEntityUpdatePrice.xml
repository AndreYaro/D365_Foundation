<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationD365SalesEntityUpdatePrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SalesQuotationD365SalesEntityUpdatePrice extends SalesCDSUpdatePriceBase
{
    private SalesQuotationHeaderD365SalesEntity entity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updatePrices</Name>
				<Source><![CDATA[
    internal List updatePrices()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().updatePrices())
        {
            List relatedRecords;
        
            if (entity != null)
            {
                SalesCDSPrePricingAmountsTmp prePricingAmounts = SalesCDSPrePricingAmountsTmp::initPrePricingAmountsFromQuotationLines(entity.SalesQuotationNumber);
                this.calculatePrices();
                relatedRecords = this.getRecordsToSync(prePricingAmounts);
            }
            else
            {
                relatedRecords = new List(Types::Container);
            }
        
            activityContext.addCustomProperty('UpdatePriceCount', int2Str(relatedRecords.elements()));

            return relatedRecords;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    internal List updateTotals()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().updateTotals())
        {
            List relatedRecords;
        
            if (entity != null)
            {
                SalesCDSPrePricingAmountsTmp prePricingAmounts = SalesCDSPrePricingAmountsTmp::initPrePricingAmountsFromQuotationLines(entity.SalesQuotationNumber);
                this.calculatePrices(true);
                relatedRecords = this.getRecordsToSync(prePricingAmounts);
            }
            else
            {
                relatedRecords = new List(Types::Container);
            }
        
            activityContext.addCustomProperty('UpdateTotalsCount', int2Str(relatedRecords.elements()));

            return relatedRecords;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrices</Name>
				<Source><![CDATA[
    private void calculatePrices(boolean skipUpdateLinePriceDisc = false)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().calculatePrices())
        {
            if (!skipUpdateLinePriceDisc)
            {
                this.updateLinesPriceDisc();
            }

            SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(entity.SalesQuotationNumber, true);

            activityContext.addCustomProperty(tableStr(SalesQuotationTable), int642Str(salesQuotationTable.RecId));

            salesQuotationTable.updateFinalDisc();
            salesQuotationTable.updateMultiLineDisc();

            SalesQuotationTotalsCalculate::calculateTotalsForQuotation(entity.SalesQuotationNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesPriceDisc</Name>
				<Source><![CDATA[
    private void updateLinesPriceDisc()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().updateLinesPriceDisc())
        {
            SalesQuotationLine salesQuotationLine;

            while select forupdate salesQuotationLine
                where salesQuotationLine.QuotationId == entity.SalesQuotationNumber
            {
                salesQuotationLine.setPriceDisc(salesQuotationLine.inventDim());
                salesQuotationLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToSync</Name>
				<Source><![CDATA[
    private List getRecordsToSync(SalesCDSPrePricingAmountsTmp _prePricingAmounts)
    {
        boolean amountOutOfSyncFlightEnabled = DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled();
        boolean discountOutOfSyncFlightEnabled = DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled();

        List recordsToSync = new List(Types::Container);
        recordsToSync.addEnd([entity.TableId, entity.RecId]);

        SalesQuotationLineD365SalesEntity salesQuotationLineEntityRecord;
        Set salesQuotationLineRecords = new Set(Types::Int64);

        while select salesQuotationLineEntityRecord
                where salesQuotationLineEntityRecord.SalesQuotationNumber == entity.SalesQuotationNumber
            exists join _prePricingAmounts // Only amount fields changed lines to be synced.
                where _prePricingAmounts.ReferenceNumber == salesQuotationLineEntityRecord.SalesQuotationNumber
                    && _prePricingAmounts.LineCreationSequenceNumber == salesQuotationLineEntityRecord.LineCreationSequenceNumber
                    && (_prePricingAmounts.LineAmount != salesQuotationLineEntityRecord.LineAmount
                        || _prePricingAmounts.LineDisc != salesQuotationLineEntityRecord.LineDiscountAmount
                        || _prePricingAmounts.LinePercent != salesQuotationLineEntityRecord.LineDiscountPercentage
                        || _prePricingAmounts.MultiLnDisc != salesQuotationLineEntityRecord.MultilineDiscountAmount
                        || _prePricingAmounts.MultiLnPercent != salesQuotationLineEntityRecord.MultilineDiscountPercentage
                        || _prePricingAmounts.SalesMarkup != salesQuotationLineEntityRecord.FixedPriceCharges
                        || _prePricingAmounts.SalesPrice != salesQuotationLineEntityRecord.SalesPrice
                        || _prePricingAmounts.TotalTaxAmount != salesQuotationLineEntityRecord.TotalTaxAmount
                        || _prePricingAmounts.TotalChargesAmount != salesQuotationLineEntityRecord.TotalChargesAmount
                        || _prePricingAmounts.TotalDiscountAmount != salesQuotationLineEntityRecord.TotalDiscountAmount)
        {
            recordsToSync.addEnd([salesQuotationLineEntityRecord.TableId, salesQuotationLineEntityRecord.RecId]);
            if (amountOutOfSyncFlightEnabled || discountOutOfSyncFlightEnabled)
            {
                salesQuotationLineRecords.add(salesQuotationLineEntityRecord.RecId);
            }
        }

        if (amountOutOfSyncFlightEnabled || discountOutOfSyncFlightEnabled)
        {
            recordsToSync.appendList(this.getSalesPriceOrLineAmountOrLineDiscPercentageOrLineDiscAmountNotSyncedRecords(salesQuotationLineEntityRecord.TableId, salesQuotationLineRecords));
        }

        return recordsToSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPriceOrLineAmountOrLineDiscPercentageOrLineDiscAmountNotSyncedRecords</Name>
				<Source><![CDATA[
    private List getSalesPriceOrLineAmountOrLineDiscPercentageOrLineDiscAmountNotSyncedRecords(TableId _salesQuotationLineEntityTableId, Set _recordsToSync)
    {
        List records = new List(Types::Container);
        SalesQuotationLineNotSyncedWithCDSRecord salesQuotationLineNotSyncedWithCDSRecord;

        ttsbegin;

        while select forupdate salesQuotationLineNotSyncedWithCDSRecord
            where salesQuotationLineNotSyncedWithCDSRecord.QuotationId == entity.SalesQuotationNumber
                && (salesQuotationLineNotSyncedWithCDSRecord.FieldsType == SalesNotSyncedWithCDSFieldsType::SalesPriceOrLineAmount
                        && DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    || (salesQuotationLineNotSyncedWithCDSRecord.FieldsType == SalesNotSyncedWithCDSFieldsType::SalesLineDiscountPercentageOrLineDiscountAmount
                        && DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
        {
            if (!_recordsToSync.in(salesQuotationLineNotSyncedWithCDSRecord.QuotationLineRefRecId))
            {
                records.addEnd([_salesQuotationLineEntityTableId, salesQuotationLineNotSyncedWithCDSRecord.QuotationLineRefRecId]);
            }

            salesQuotationLineNotSyncedWithCDSRecord.delete();
        }

        ttscommit;

        return records;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEntity</Name>
				<Source><![CDATA[
    private void setEntity(SalesQuotationHeaderD365SalesEntity _entity)
    {
        entity = _entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRecord</Name>
				<Source><![CDATA[
    internal static SalesQuotationD365SalesEntityUpdatePrice newFromRecord(SalesQuotationHeaderD365SalesEntity _entity)
    {
        SalesQuotationD365SalesEntityUpdatePrice instance = new SalesQuotationD365SalesEntityUpdatePrice();
        
        instance.setEntity(_entity);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>