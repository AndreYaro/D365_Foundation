<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationJSONLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json;
using System.IO;
using ComplianceDataType = Microsoft.Dynamics365.LocalizationFramework.XppSupportLayer.ComplianceAnnotations.ComplianceDataType;
using xpp = Microsoft.Dynamics.Ax.Xpp;
using model = Microsoft.Dynamics.AX.Metadata.MetaModel;

internal final class WHSInstrumentationJSONLogger implements System.IDisposable
{
    StringWriter stringWriter;
    JsonTextWriter jsonWriter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        if (jsonWriter)
        {
            jsonWriter.Dispose();
        }

        if (stringWriter)
        {
            stringWriter.Dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        stringWriter = new StringWriter();
        jsonWriter = new JsonTextWriter(stringWriter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToActivityContext</Name>
				<Source><![CDATA[
    public void writeToActivityContext(SysInstrumentationActivityContext _context, str _propertyName)
    {
        ListEnumerator chunks = this.splitStringByMaxIXFPropertyLength(stringWriter.ToString()).getEnumerator();
        int propertyCount = 1;
        const int maxProperties = 30;

        while (chunks.moveNext())
        {
            _context.addCustomProperty(_propertyName+(propertyCount>1?int2Str(propertyCount):''), chunks.current());
            propertyCount++;
            if (propertyCount>maxProperties)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitStringByMaxIXFPropertyLength</Name>
				<Source><![CDATA[
    private List splitStringByMaxIXFPropertyLength(str _input)
    {
        const int maxPropertyLength = 1000;
        List result = new List(Types::String);
        int inputLength = strLen(_input);

        for (int i = 1; i<=inputLength; i+=maxPropertyLength)
        {
            result.addEnd(subStr(_input, i, maxPropertyLength));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startArray</Name>
				<Source><![CDATA[
    public void startArray(str _name)
    {
        jsonWriter.WritePropertyName(_name);
        jsonWriter.WriteStartArray();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endArray</Name>
				<Source><![CDATA[
    public void endArray()
    {        
        jsonWriter.WriteEndArray();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startObject</Name>
				<Source><![CDATA[
    public void startObject()
    {
        jsonWriter.WriteStartObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endObject</Name>
				<Source><![CDATA[
    public void endObject()
    {
        jsonWriter.WriteEndObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scrubValue</Name>
				<Source><![CDATA[
    private str scrubValue(str _value, ComplianceDataType _dataClassification)
    {
        if (!this.isDataClassificationSupported(_dataClassification))
        {
            return '-censored-';
        }
        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProperty</Name>
				<Source><![CDATA[
    public void addProperty(str _name, str _value, ComplianceDataType _dataClassification)
    {
        jsonWriter.WritePropertyName(_name);
        jsonWriter.WriteValue(this.scrubValue(_value, _dataClassification));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJsonProperty</Name>
				<Source><![CDATA[
    public void addJsonProperty(str _name, str _json, ComplianceDataType _dataClassification)
    {
        jsonWriter.WritePropertyName(_name);
        jsonWriter.WriteRawValue(this.scrubValue(_json, _dataClassification));
    }

]]></Source>
			</Method>
			<Method>
				<Name>complianceDataTypeForField</Name>
				<Source><![CDATA[
    private ComplianceDataType complianceDataTypeForField(DictField _dictField)
    {
        model.AxTable modelTable = xpp.MetadataSupport::getTable(tableId2Name(_dictField.tableid()));
        model.AxTableField modelField = modelTable.Fields.getObject(_dictField.name());

        str classification = modelField.AssetClassification;
        ComplianceDataType resultType;
        ComplianceDataType result = System.Enum::Parse(resultType.GetType(), strRem(classification, ' '), true);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldProperty</Name>
				<Source><![CDATA[
    public void addFieldProperty(Common _common, FieldId _fieldId)
    {
        DictField dictField = new DictField(_common.TableId, _fieldId);
        ComplianceDataType classification = this.complianceDataTypeForField(dictField);
        str propertyName = dictField.name();
        anytype propertyValue = _common.(_fieldId);

        switch (typeOf(propertyValue))
        {
            case Types::Integer:
                this.addProperty(propertyName, int2Str(propertyValue), classification);
                break;
                
            case Types::Real:
                str valueAsInvariantString = System.Convert::ToString(propertyValue, System.Globalization.CultureInfo::InvariantCulture);
                this.addProperty(propertyName, valueAsInvariantString, classification);
                break;

            case Types::Enum:
            case Types::UtcDateTime:
                this.addProperty(propertyName, enum2Symbol(dictField.enumId(), propertyValue), classification);
                break;

            case Types::Container:
                if (propertyValue)
                {
                    QueryRun queryRun = new QueryRun(propertyValue);
                    this.addJsonProperty(propertyName, new SysQuery(queryRun.query()).toScrubbedJson(), ComplianceDataType::SystemMetadata);
                }
                break;

            case Types::String:
                switch (dictField.typeId())
                {
                    case extendedTypeNum(InventLocationId):
                        InventLocation warehouse = InventLocation::find(propertyValue);
                        this.addProperty(propertyName, any2Str(warehouse.RecId), ComplianceDataType::SystemMetadata);
                        break;

                    default:
                        this.addProperty(propertyName, propertyValue, classification);
                        break;                        
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataClassificationSupported</Name>
				<Source><![CDATA[
    private boolean isDataClassificationSupported(ComplianceDataType _dataClassification)
    {
        return _dataClassification == ComplianceDataType::SystemMetadata
            || _dataClassification == ComplianceDataType::OII;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>