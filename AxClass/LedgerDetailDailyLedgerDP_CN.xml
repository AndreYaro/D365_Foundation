<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDetailDailyLedgerDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerDetailDailyReportDP_CN</c> extends SrsReportDataProviderPreProcessTempDB class provides data for the <c>LedgerDetailDailyReport_CN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>LedgerDetailDailyReport_CN</c>.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerDetailDailyLedgerContract_CN))
]
public class LedgerDetailDailyLedgerDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    TmpDailyLedger_CN   tmpDailyLedger;

    LedgerPreprintDetail_CN         ledgerPrePrintCode;
    LedgerPrintLayoutCurrency_CN    ledgerPrintCurrency;

    Counter         lineOfOnePage;
    MainAccountNum  fromMainAccount;
    MainAccountNum  toMainAccount;
    PeriodName      periodName;
    FiscalYearName  yearName;
    List            dimensionExpressionList;

    LedgerInquiryDaily_CN   ledgerInquiryDaily;

    const int DefaultMaxLines = 30; // The default max number of lines in one page of preprinted report.

    // Those three consts below are used to sort the data in group of report design
    const int FirstLine = 1;  // The line "Continued from the previous page".
    const int MiddleLine = 2; // The line includes the actual data.
    const int BottomLine = 3; // The line "The line "Continued on the next page" or the blank line.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Exchange Rate for the report.
    /// </summary>
    /// <param name="_tmpDailyLedger">
    /// The tmpDailyLedger table record.
    /// </param>
    /// <returns>
    /// The exchange rate calculated.
    /// </returns>
    private ExchRate calcExchRate(TmpDailyLedger_CN _tmpDailyLedger)
    {
        ExchRate    exchRate;

        if (_tmpDailyLedger.LedgerAccount)
        {
            exchRate = _tmpDailyLedger.CurrencyCode
                       ? ExchangeRateHelper::exchRate(_tmpDailyLedger.CurrencyCode, _tmpDailyLedger.TransDate)
                       : 0;
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TmpDailyLedger_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TmpDailyLedger_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpDailyLedger_CN))
    ]
    public TmpDailyLedger_CN getTmpDailyLedger()
    {
        return tmpDailyLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data achieved from query and inserts the results into the TmpDailyLedger_CN table.
    /// </summary>
    /// <param name="_isDetail">
    /// Identifies if the report is called from LedgerDetailLedger_CN form.
    /// </param>
    /// <param name="_prePrint">
    /// Identifies if the report is being printed on the pre-print paper.
    /// </param>
    public void initTmpDailyLedger(boolean _isDetail, boolean _prePrint)
    {
        TmpDailyLedger_CN   tmpDailyLedgerLocal;
        boolean             changeAccount;
        boolean             changePage;

        //Counts the records of the current page.
        Counter recOfCurrentPage;

        //Defines the page number of the current page.
        Counter pageBreakCounter;

        const int FirstPageNumber   = 1;
        const int PageCounterZero   = 0;
        const int PageCounterTwo    = 2;

        changeAccount   = false;
        changePage      = false;

        //Get tmp table data.
        ledgerInquiryDaily = new LedgerInquiryDaily_CN(
            fromMainAccount,
            toMainAccount,
            periodName,
            yearName,
            true,
            dimensionExpressionList);

        ledgerInquiryDaily.setDailySummary(!_isDetail);

        ledgerInquiryDaily.initTmpDailyLedger();
        tmpDailyLedgerLocal.linkPhysicalTableInstance(ledgerInquiryDaily.tmpDailyLedger());

        //Sets pageBreakCounter to 1 as the default starting number.
        pageBreakCounter = FirstPageNumber;

        RecordInsertList tmpDailyLedgerList = new RecordInsertList(tableNum(TmpDailyLedger_CN), true, true, true, true, true, tmpDailyLedger);

        //Insert the records of tmp table with a certain order.
        //When tmpDailyLedgerLocal still has records
        while select tmpDailyLedgerLocal
            order by tmpDailyLedgerLocal.SummaryAccount, tmpDailyLedgerLocal.TransDate, tmpDailyLedgerLocal.Voucher
        {
            if (tmpDailyLedger.SummaryAccount)
            {
                changeAccount = (tmpDailyLedger.SummaryAccount != tmpDailyLedgerLocal.SummaryAccount);
            }
            changePage = (recOfCurrentPage == lineOfOnePage);

            //When the number of records of current page reaches the maximum line number
            //or the AccountNum value of local table changes.
            if (changeAccount || changePage)
            {
                // Does modification to tmp table, which provides data for report, and reset the counter circumstantially.
                if (changeAccount && changePage)
                {
                    // If LedgerAccount and Page are changed at the same time, reset the recOfCurrentPage to 0.
                    recOfCurrentPage = PageCounterZero;
                }
                else if (changeAccount)
                {
                    // If mainAccountId is changed, reset the recOfCurrentPage to 0 after inserting blank records.
                    this.processChangeAccount(recOfCurrentPage);
                    recOfCurrentPage = PageCounterZero;
                }
                else
                {
                    // If page is changed, reset the recOfCurrentPage to 2 after modifying the previous tmp table records.
                    this.processChangePage();
                    recOfCurrentPage = PageCounterTwo;
                }
                pageBreakCounter++;
            }

            tmpDailyLedger.clear();
            tmpDailyLedger.SummaryAccount               = tmpDailyLedgerLocal.SummaryAccount;
            tmpDailyLedger.SummaryAccountName           = tmpDailyLedgerLocal.SummaryAccountName;
            tmpDailyLedger.AccountName                  = tmpDailyLedgerLocal.AccountName;
            tmpDailyLedger.LedgerAccount                = tmpDailyLedgerLocal.LedgerAccount;
            tmpDailyLedger.AmountCurCredit              = tmpDailyLedgerLocal.AmountCurCredit;
            tmpDailyLedger.AmountCurDebit               = tmpDailyLedgerLocal.AmountCurDebit;
            tmpDailyLedger.AmountMSTCredit              = tmpDailyLedgerLocal.AmountMSTCredit;
            tmpDailyLedger.AmountMSTDebit               = tmpDailyLedgerLocal.AmountMSTDebit;
            tmpDailyLedger.Balance                      = tmpDailyLedgerLocal.Balance;
            tmpDailyLedger.BalanceCur                   = tmpDailyLedgerLocal.BalanceCur;
            tmpDailyLedger.BalanceStatus                = tmpDailyLedgerLocal.BalanceStatus;
            tmpDailyLedger.CurrencyCode                 = tmpDailyLedgerLocal.CurrencyCode;
            tmpDailyLedger.ExchangeRate                 = this.calcExchRate(tmpDailyLedgerLocal);
            tmpDailyLedger.Explanation                  = tmpDailyLedgerLocal.Explanation;
            tmpDailyLedger.GeneralJournalAccountEntry   = tmpDailyLedgerLocal.GeneralJournalAccountEntry;
            tmpDailyLedger.JournalNum                   = tmpDailyLedgerLocal.JournalNum;
            tmpDailyLedger.LedgerOffsetAccount          = TmpDailyLedger_CN::composeAccountName(
                ledgerInquiryDaily.offsetLedgerAccounts(
                    tmpDailyLedgerLocal.Voucher,
                    tmpDailyLedgerLocal.LedgerAccount,
                    tmpDailyLedgerLocal.TransDate));
            tmpDailyLedger.PageBreakCounter             = pageBreakCounter;
            tmpDailyLedger.SortInGroup                  = MiddleLine;
            tmpDailyLedger.TransDate                    = tmpDailyLedgerLocal.TransDate;
            tmpDailyLedger.TransMonth                   = tmpDailyLedgerLocal.TransMonth;
            tmpDailyLedger.TransYear                    = tmpDailyLedgerLocal.TransYear;
            tmpDailyLedger.TransDay                     = tmpDailyLedgerLocal.TransDay;
            tmpDailyLedger.Voucher                      = tmpDailyLedgerLocal.Voucher;
            tmpDailyLedger.Voucher_CN                   = tmpDailyLedgerLocal.Voucher_CN;

            tmpDailyLedgerList.add(tmpDailyLedger);

            recOfCurrentPage++;
        }

        DimensionDisplayValue   lastTmpAccountId        = tmpDailyLedger.LedgerAccount;
        DimensionDisplayValue   lastTmpAccountName      = tmpDailyLedger.AccountName;
        DimensionDisplayValue   lastSummaryAccount      = tmpDailyLedger.SummaryAccount;
        DimensionDisplayValue   lastSummaryAccountName  = tmpDailyLedger.SummaryAccountName;

        //When the current page of report is not full, insert blank records into the tmp table
        while (!_prePrint && (recOfCurrentPage < lineOfOnePage))
        {
            tmpDailyLedger.clear();
            tmpDailyLedger.SummaryAccount       = lastSummaryAccount;
            tmpDailyLedger.SummaryAccountName   = lastSummaryAccountName;
            tmpDailyLedger.LedgerAccount        = lastTmpAccountId;
            tmpDailyLedger.AccountName          = lastTmpAccountName;
            tmpDailyLedger.PageBreakCounter     = pageBreakCounter;
            tmpDailyLedger.SortInGroup          = BottomLine;

            tmpDailyLedgerList.add(tmpDailyLedger);

            recOfCurrentPage++;
        }

        tmpDailyLedgerList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangeAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the tmp table when changing mainAccounts.
    /// </summary>
    /// <param name="_recOfCurrentPage">
    /// The current number of the records in the last page.
    /// </param>
    protected void processChangeAccount(Counter _recOfCurrentPage)
    {
        //Saves the tmpDailyLedger record.
        TmpDailyLedger_CN tmpDailyLedgerLocal;

        tmpDailyLedgerLocal.data(tmpDailyLedger);

        while (_recOfCurrentPage < lineOfOnePage)
        {
            tmpDailyLedger.clear();
            tmpDailyLedger.SummaryAccount       = tmpDailyLedgerLocal.SummaryAccount;
            tmpDailyLedger.SummaryAccountName   = tmpDailyLedgerLocal.SummaryAccountName;
            tmpDailyLedger.LedgerAccount        = tmpDailyLedgerLocal.LedgerAccount;
            tmpDailyLedger.AccountName          = tmpDailyLedgerLocal.AccountName;
            tmpDailyLedger.PageBreakCounter     = tmpDailyLedgerLocal.PageBreakCounter;
            tmpDailyLedger.SortInGroup          = BottomLine;
            tmpDailyLedger.insert();

            _recOfCurrentPage++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the tmp table when changing pages.
    /// </summary>
    protected void processChangePage()
    {
        TmpDailyLedger_CN   tmpDailyLedgerLocal;
        Counter             nextPageBreakCounter;

        tmpDailyLedgerLocal.data(tmpDailyLedger);
        nextPageBreakCounter = tmpDailyLedgerLocal.PageBreakCounter + 1;

        // Delete the last tmp table record.
        tmpDailyLedger.delete();

        tmpDailyLedger.clear();
        // Continued on the next page.
        tmpDailyLedger.Explanation          = "@GLS54675";
        tmpDailyLedger.SummaryAccount       = tmpDailyLedgerLocal.SummaryAccount;
        tmpDailyLedger.SummaryAccountName   = tmpDailyLedgerLocal.SummaryAccountName;
        tmpDailyLedger.LedgerAccount        = tmpDailyLedgerLocal.LedgerAccount;
        tmpDailyLedger.AccountName          = tmpDailyLedgerLocal.AccountName;
        tmpDailyLedger.PageBreakCounter     = tmpDailyLedgerLocal.PageBreakCounter;
        tmpDailyLedger.SortInGroup          = BottomLine;
        tmpDailyLedger.insert();

        tmpDailyLedger.clear();
        // Continued from the previous page.
        tmpDailyLedger.Explanation          = "@GLS54673";
        tmpDailyLedger.SummaryAccount       = tmpDailyLedgerLocal.SummaryAccount;
        tmpDailyLedger.SummaryAccountName   = tmpDailyLedgerLocal.SummaryAccountName;
        tmpDailyLedger.LedgerAccount        = tmpDailyLedgerLocal.LedgerAccount;
        tmpDailyLedger.AccountName          = tmpDailyLedgerLocal.AccountName;
        tmpDailyLedger.PageBreakCounter     = nextPageBreakCounter;
        tmpDailyLedger.SortInGroup          = FirstLine;
        tmpDailyLedger.insert();

        tmpDailyLedger.clear();
        tmpDailyLedger.data(tmpDailyLedgerLocal);
        tmpDailyLedger.PageBreakCounter = nextPageBreakCounter;
        tmpDailyLedger.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS
    /// </remarks>
    public void processReport()
    {
        LedgerDetailDailyLedgerContract_CN contract;

        contract = this.parmDataContract() as LedgerDetailDailyLedgerContract_CN;

        if (contract.parmPreprint())
        {
            ledgerPrePrintCode  = contract.parmLedgerPreprintDetailLayoutCode();
            lineOfOnePage       = DefaultMaxLines;
        }
        else
        {
            ledgerPrintCurrency = contract.parmLedgerPrintLayoutCurrency();
            lineOfOnePage       = contract.parmMaxLines();
        }

        fromMainAccount = contract.parmFromMainAccountNum();
        toMainAccount   = contract.parmToMainAccountNum();
        periodName      = contract.parmPeriodContract().parmPeriodName();
        yearName        = contract.parmPeriodContract().parmPeriodYearName();

        dimensionExpressionList = LedgerDimensionExpressionBuilderHelper_CN::stringList2ExpressionList(contract.parmDimensionExpressionList());

        this.initTmpDailyLedger(
            contract.parmIsDetail(),
            contract.parmPreprint());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>