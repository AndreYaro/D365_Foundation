<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesByStoreReportGrossSalesDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Data;

/// <summary>
/// The <c>RetailSalesByStoreReportGrossSalesDataProvider</c> class is the data provider
/// class for gross sales section in retail store summary report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailSalesByStoreReportGrossSalesDataProvider extends RetailSrsReportDataProviderChannelBase
{
    RetailSalesByStoreReportGrossSalesTable table;
    RetailReportParametersDataContract dc;
    SalesAmount     salesAmount = 0.00;
    SalesAmount     chargeAmount = 0.00;
    SalesAmount     taxAmount = 0.00;
    SalesAmount     returnsAmount = 0.00;
    SalesAmount     profitMargin = 0.00;
    real            profitPercentage = 0.00;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(RetailSalesByStoreReportGrossSalesTable))]
    public RetailSalesByStoreReportGrossSalesTable getTable()
    {
        select table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to
    ///    SSRS.Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        super();
        dc = this.parmDataContract();

        try
        {
            SysQueryRun::ExecuteInManagedStack(true);
            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
            this.populateSalesData();
            this.populateTaxData();
            this.populateReturnData();
            this.ClearChannelFilterTable();
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }

        this.insertIntoTempTable("@Retail:SalesByStoreReportTotalGrossAmount", salesAmount, false);
        this.insertIntoTempTable("@Retail:SalesByStoreReportCharges", chargeAmount, false);
        this.insertIntoTempTable("@Retail:SalesByStoreReportTaxes", taxAmount, false);
        this.insertIntoTempTable("@Retail:SalesByStoreReportReturns", returnsAmount, false);
        this.insertIntoTempTable("@Retail:SalesByStoreReportMargin", profitMargin, false);
        this.insertIntoTempTable("@Retail:SalesByStoreReportPercentage", profitPercentage, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query for sales data and insert results into temp table.
    /// </summary>
    void populateSalesData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailSalesByStoreReportGrossSalesView));

            // Add fields.
            qds.addSelectionField(fieldnum(RetailSalesByStoreReportGrossSalesView, LineAmountMST), SelectionField::Sum);
            qds.addSelectionField(fieldnum(RetailSalesByStoreReportGrossSalesView, COGS), SelectionField::Sum);
            qds.addSelectionField(fieldnum(RetailSalesByStoreReportGrossSalesView, LineAmountTaxMST), SelectionField::Sum);
            qds.addSelectionField(fieldnum(RetailSalesByStoreReportGrossSalesView, SumMarkupMST), SelectionField::Sum);

            //Add ranges.
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailSalesByStoreReportGrossSalesView, InvoiceDate));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailSalesByStoreReportGrossSalesView, InvoiceDate)));

            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(qds, fieldNum(RetailSalesByStoreReportGrossSalesView, RetailChannel));

            QueryRun qRun = new QueryRun(q);

            // run the query and insert the query results into the temp table.
            while ( qRun.next() )
            {
                RetailSalesByStoreReportGrossSalesView row = qRun.Get(tableNum(RetailSalesByStoreReportGrossSalesView));

                AmountMST grossProfitMargin = row.LineAmountMST - row.COGS;

                //If sales amount is 0, set the grossProfitMarginPercentage to 0, else set it to 100 * gross profit / amount.
                Percent grossProfitMarginPercentage = row.LineAmountMST == 0? 0: grossProfitMargin/row.LineAmountMST;

                salesAmount = row.LineAmountMST;
                chargeAmount = row.SumMarkupMST;
                profitMargin = grossProfitMargin;
                profitPercentage = grossProfitMarginPercentage;
            }
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query for tax data and insert results into temp table.
    /// </summary>
    void populateTaxData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailSalesByStoreReportTaxSalesView));

            // Add fields.
            qds.addSelectionField(fieldnum(RetailSalesByStoreReportTaxSalesView, Amount), SelectionField::Sum);

            //Add ranges.
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailSalesByStoreReportTaxSalesView, transDate));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailSalesByStoreReportTaxSalesView, transDate)));

            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(qds, fieldNum(RetailSalesByStoreReportTaxSalesView, Channel));

            QueryRun qRun = new QueryRun(q);

            // run the query and insert the query results into the temp table.
            while ( qRun.next() )
            {
                RetailSalesByStoreReportTaxSalesView row = qRun.Get(tableNum(RetailSalesByStoreReportTaxSalesView));
                taxAmount = row.Amount * -1;
            }
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReturnData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query for return transactions data and insert results into temp table.
    /// </summary>
    void populateReturnData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            Query q = new Query();
            QueryBuildDataSource  lineTable = q.addDataSource(tableNum(RetailTransactionsReportView));

            // Add fields.
            lineTable.addSelectionField(fieldnum(RetailTransactionsReportView, netAmount));
            lineTable.addGroupByField(fieldNum(RetailTransactionsReportView, transactionId));
            lineTable.addGroupByField(fieldNum(RetailTransactionsReportView, lineNum));
            lineTable.addGroupByField(fieldNum(RetailTransactionsReportView, netAmount));

            //Add ranges.
            QueryBuildRange dateTimeRange = lineTable.addRange(fieldnum(RetailTransactionsReportView, transDate));
            QueryBuildRange quantityRange = lineTable.addRange(fieldnum(RetailTransactionsReportView, qty));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailTransactionsReportView, transDate)));
            quantityRange.value('>0');

            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(lineTable, fieldNum(RetailTransactionsReportView, Channel));

            QueryRun qRun = new QueryRun(q);

            // run the query and insert the query results into the temp table.
            while ( qRun.next() )
            {
                RetailTransactionsReportView row = qRun.Get(tableNum(RetailTransactionsReportView));
                returnsAmount += row.netAmount;
            }
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    private void insertIntoTempTable(str measureName,real value , boolean isPercent)
    {
        // Insert record into the ax table.
        table.MeasureName = measureName;
        table.Value = value;

        // 0 is true and 1 is false.
        table.IsPercent = isPercent?1:0;
        table.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>