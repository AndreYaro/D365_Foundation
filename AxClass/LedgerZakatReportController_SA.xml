<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerZakatReportController_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerZakatReportController_SA</c> class is the controller class for Ledger Zakat SSRS
///    reports.
/// </summary>
/// <remarks>
///    Execution Procedure:
///    <list type="number">
///       <item>
///          <description>
///             Step 1: create a new instance of the <c>LedgerZakatReportController_SA</c> object
///          </description>
///       </item>
///       <item>
///          <description>
///             Step 2: initialize the controller class object with <c>FiscalYear</c> and <c>ZakatReportType</c>
///             control parameters
///          </description>
///       </item>
///       <item>
///          <description>Step 3: execute the report</description>
///       </item>
///    </list>
/// </remarks>
public class LedgerZakatReportController_SA extends SrsReportRunController implements BatchRetryable
{
    str                                     ledgerZakatReportName;
    str                                     ledgerZakatReportTitle;
    boolean                                 ledgerActivityReport;
    boolean                                 modifyDataContract;

    // session parameters
    LedgerFiscalYearZakat_SA                fiscalYear;
    LedgerItemTypeZakat_SA                  ledgerZakatItemType;

    // report RDL parameters
    const str ParameterReportCaption = 'ReportCaption';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoSA, GlobalizationConstants::FeatureReferenceSE00003] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeZakatReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run Zakat report
    /// </summary>
    private void executeZakatReport()
    {
        this.parmReportName(ledgerZakatReportName);
        this.parmDialogCaption(ledgerZakatReportTitle);
        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class members, sets the session control flags and report context.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_ledgerReportType">
    /// The record of the <c>LedgerReportTypeZakat_SA</c> table.
    /// </param>
    protected void initialize(LedgerFiscalYearZakat_SA _fiscalYear, LedgerReportTypeZakat_SA _ledgerReportType)
    {
        // validate session control arguments
        if (_fiscalYear == 0)
            throw error(Error::missingRecord(funcName()));

        // initialize class members
        fiscalYear = _fiscalYear;

        // session control flags
        ledgerActivityReport = false;
        modifyDataContract = true;

        // select report context
        this.selectReportContext(_ledgerReportType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        LedgerZakatReportContract_SA        ledgerZakatReportContract;
        LedgerActivityZakatContract_SA      ledgerActivityZakatContract;
        Query                               queryContract;

        super();

        if (modifyDataContract)
        {
            if (ledgerActivityReport)
            {
                // access the LedgerActivity RDP Data contract
                ledgerActivityZakatContract = this.parmReportContract().parmRdpContract();

                // set the RDP Data contract parameter values
                ledgerActivityZakatContract.parmFiscalYear(fiscalYear);
                ledgerActivityZakatContract.parmItemType(ledgerZakatItemType);

                // set the Report parameter value for "ReportCaption"
                this.parmReportContract().parmRdlContract().setValue(ParameterReportCaption, ledgerZakatReportTitle);
            }
            else
            {
                // access the Zakat RDP Data contract
                ledgerZakatReportContract = this.parmReportContract().parmRdpContract();

                // set the RDP Data contract parameter values
                ledgerZakatReportContract.parmFiscalYear(fiscalYear);
            }
        }
        else
        {
            queryContract = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

            // apply query filters
            SrsReportHelper::addParameterValueRangeToQuery(queryContract,
                                                           tableNum(AssetDepreciationZakat_SA),
                                                           fieldNum(AssetDepreciationZakat_SA, Year),
                                                           int2str(fiscalYear));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectReportContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select report context
    /// </summary>
    /// <param name = "_ledgerReportType">Zakat report type</param>
    private void selectReportContext(LedgerReportTypeZakat_SA _ledgerReportType)
    {
        switch (_ledgerReportType)
        {
            case LedgerReportTypeZakat_SA::MainZakatReport:

                ledgerZakatReportName               = ssrsReportStr(LedgerMainReportZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321615";
                break;
            case LedgerReportTypeZakat_SA::Depreciation:

                ledgerZakatReportName               = ssrsReportStr(AssetsDepreciation_SA, Report);
                ledgerZakatReportTitle              = "@SYS326009";

                 modifyDataContract = false;
                 break;
            case LedgerReportTypeZakat_SA::ProvisionsAndReservations:

                ledgerZakatReportName               = ssrsReportStr(LedgerProvisions_SA, Report);
                ledgerZakatReportTitle              = "@SYS321621";
                break;
            case LedgerReportTypeZakat_SA::RevenueForMainActivity:

                ledgerZakatReportName               = ssrsReportStr(LedgerRevenueActivity_SA, Report);
                ledgerZakatReportTitle              = "@SYS321616";
                break;
            case LedgerReportTypeZakat_SA::SubContractor:

                ledgerZakatReportName               = ssrsReportStr(VendSubcontractor_SA, Report);
                ledgerZakatReportTitle              = "@SYS22167";
                break;
            case LedgerReportTypeZakat_SA::ConsultationFees:

                ledgerZakatReportName               = ssrsReportStr(VendConsultationFees_SA, Report);
                ledgerZakatReportTitle              = "@SYS321620";
                break;
            case LedgerReportTypeZakat_SA::RevenueFromOtherActivity:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321617";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::OtherRevenue;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::DirectExpenses:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321618";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::DirectExpenses;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::OtherExpenses:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS108380";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::MiscExpenses;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::OtherAdjustments:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321623";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::NetProfitOtherAmendments;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::OtherAdditions:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321624";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::OtherAddedItems;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::Investments:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS79681";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::Investments;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::PresettingExpensesBalance:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321645";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::PresettingExpenses;
                ledgerActivityReport                = true;
                break;
            case LedgerReportTypeZakat_SA::OtherDeductions:

                ledgerZakatReportName               = ssrsReportStr(LedgerActivityZakat_SA, Report);
                ledgerZakatReportTitle              = "@SYS321626";

                ledgerZakatItemType                 = LedgerItemTypeZakat_SA::OtherChargedItems;
                ledgerActivityReport                = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerZakatReportController_SA ledgerZakatController;

        // validate session control arguments
        if (_args == null)
            throw error(Error::missingRecord(funcName()));

        // create an instance of the controller object and launch the report
        ledgerZakatController = new LedgerZakatReportController_SA();
        ledgerZakatController.initialize(_args.selectField(), _args.parmEnum());
        ledgerZakatController.parmArgs(_args);
        ledgerZakatController.executeZakatReport();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>