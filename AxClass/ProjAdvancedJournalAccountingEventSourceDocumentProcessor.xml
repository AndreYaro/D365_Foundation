<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalAccountingEventSourceDocumentProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProjAdvancedJournal), SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal)]
public class ProjAdvancedJournalAccountingEventSourceDocumentProcessor extends AccountingEventSourceDocumentProcessor
{
    private SourceDocumentLineItemList  sourceDocumentLineItemList;
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLineItemList</Name>
				<Source><![CDATA[
    private SourceDocumentLineItemList parmSourceDocumentLineItemList(SourceDocumentLineItemList _sourceDocumentLineItemList)
    {
        sourceDocumentLineItemList = _sourceDocumentLineItemList;

        return sourceDocumentLineItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToMaintainAccountingEvents</Name>
				<Source><![CDATA[
    public static void submitToMaintainAccountingEvents(
        SourceDocumentLineItemList _sourceDocumentLineItemList,
        SourceDocument _sourceDocument,
        AccountingEventType _targetAccountingEventType,
        SourceDocumentAccountingPolicy _sourceDocumentAccountingPolicy = null)
    {
        ProjAdvancedJournalAccountingEventSourceDocumentProcessor accountingEventProcessor 
            = ProjAdvancedJournalAccountingEventSourceDocumentProcessor::initProjAdvancedJournalAccountingEventSourceDocumentProcessor(_sourceDocumentLineItemList, _sourceDocument, _sourceDocumentAccountingPolicy);
        accountingEventProcessor.projAdvancedJournalMaintainAccountingEvents(_sourceDocumentLineItemList, _targetAccountingEventType, accountingEventProcessor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjAdvancedJournalAccountingEventSourceDocumentProcessor</Name>
				<Source><![CDATA[
    protected static ProjAdvancedJournalAccountingEventSourceDocumentProcessor initProjAdvancedJournalAccountingEventSourceDocumentProcessor(
        SourceDocumentLineItemList _sourceDocumentLineItemList,
        SourceDocument _sourceDocument,
        SourceDocumentAccountingPolicy _sourceDocumentAccountingPolicy = null)
    {
        ProjAdvancedJournalAccountingEventSourceDocumentProcessor accountingEventProcessor 
            = new ProjAdvancedJournalAccountingEventSourceDocumentProcessor();
        accountingEventProcessor.parmSourceDocument(_sourceDocument);
        accountingEventProcessor.parmSourceDocumentAccountingPolicy(_sourceDocumentAccountingPolicy);
        accountingEventProcessor.parmSourceDocumentLineItemList(_sourceDocumentLineItemList);
        accountingEventProcessor.initialize();

        return accountingEventProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdvancedJournalMaintainAccountingEvents</Name>
				<Source><![CDATA[
    protected void projAdvancedJournalMaintainAccountingEvents(
        SourceDocumentLineItemList                                  _sourceDocumentLineItemList,
        AccountingEventType                                         _accountingEventType,
        ProjAdvancedJournalAccountingEventSourceDocumentProcessor   _accountingEventSourceDocumentProcessor)
    {
        if (_accountingEventType == AccountingEventType::None)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        AccountingEventType     requiredAccountingEventType  = AccountingEventSourceDocumentProcessor::determineRequiredAccountingEventType(sourceDocumentHeaderId, _accountingEventType);
        AccountingEventState    accountingEventState;

        if (isAccountingRequiredForSourceDocument)
        {
            AccountingEvent accountingEvent;
            boolean         hasAccountingEvent = false;

            accountingEventState = accountingEventState::Started;

            while select AccountingDate, SourceDocumentHeader, State, Type
                    from accountingEvent
                    group by accountingEvent.AccountingDate
                    where accountingEvent.SourceDocumentHeader == sourceDocumentHeaderId &&
                        accountingEvent.State == AccountingEventState::Started &&
                        accountingEvent.Type == requiredAccountingEventType
            {
                hasAccountingEvent = true;
                AccountingEventSourceDocumentProcessor::maintainAccountingEvent(sourceDocumentHeaderId, accountingEvent.AccountingDate, accountingEventState);
            }

            if (!hasAccountingEvent)
            {
                ProjAdvancedJournalAccountingEventSourceDocumentProcessor::projAdvancedJournalCreateAccountingEvents(_sourceDocumentLineItemList, sourceDocumentHeaderId, requiredAccountingEventType, accountingEventState, _accountingEventSourceDocumentProcessor);
            }
        }
        else
        {
            accountingEventState = accountingEventState::Complete;

            // if accounting isn't required, accounting events will still be maintained with Complete state.
            AccountingEventSourceDocumentProcessor::createAccountingEvents(sourceDocumentHeaderId, requiredAccountingEventType, accountingEventState, _accountingEventSourceDocumentProcessor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdvancedJournalCreateAccountingEvents</Name>
				<Source><![CDATA[
    public static server void projAdvancedJournalCreateAccountingEvents(
        SourceDocumentLineItemList _sourceDocumentLineItemList,
        SourceDocumentHeaderRecId _sourceDocumentHeaderId,
        AccountingEventType _accountingEventType,
        AccountingEventState _accountingEventState,
        ProjAdvancedJournalAccountingEventSourceDocumentProcessor _accountingEventSourceDocumentProcessor = null)
    {
        if (_accountingEventSourceDocumentProcessor)
        {
            ttsbegin;
            _accountingEventSourceDocumentProcessor.projAdvancedJournalCreateAccountingEventsInstance(_sourceDocumentLineItemList, _sourceDocumentHeaderId, _accountingEventType, _accountingEventState);
            ttscommit;
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdvancedJournalCreateAccountingEventsInstance</Name>
				<Source><![CDATA[
    public void projAdvancedJournalCreateAccountingEventsInstance(
        SourceDocumentLineItemList  _sourceDocumentLineItemList,
        SourceDocumentHeaderRecId   _sourceDocumentHeaderId,
        AccountingEventType         _accountingEventType,
        AccountingEventState        _accountingEventState)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        SourceDocumentLineItemListEnumerator    sourceDocumentLineItemListEnumerator = _sourceDocumentLineItemList.getEnumerator();
        SourceDocumentLine sourceDocumentLine;

        while (sourceDocumentLineItemListEnumerator.moveNext())
        {
            SourceDocumentLineItem sourceDocumentLineItem = sourceDocumentLineItemListEnumerator.current();

            sourceDocumentLine = sourceDocumentLineItem.parmSourceDocumentLine();

            projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(sourceDocumentLine.RecId);
            
            AccountingEventRecId accountingEventRecId = this.createAccountingEvent(_sourceDocumentHeaderId, projAdvancedJournalLine.AccountingDate, _accountingEventType, _accountingEventState);
            ProjAdvancedJournalAccountingEventSourceDocumentProcessor::updateDistributionsForEvent(accountingEventRecId, projAdvancedJournalLine.AccountingDate, sourceDocumentLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAccountingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>AccountingEvent</c> record for the specified source document with the specified accounting date, accounting type, and accounting event state.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The record identity of the <c>SourceDocumentHeader</c>.
    /// </param>
    /// <param name="_accountingDate">
    /// The new accounting date.
    /// </param>
    /// <param name="_accountingEventType">
    /// The accounting event type.
    /// </param>
    /// <param name="_accountingEventState">
    /// The new accounting event state.
    /// </param>
    /// <returns>
    /// Accounting event recId.
    /// </returns>
    public AccountingEventRecId createAccountingEvent(
            SourceDocumentHeaderRecId    _sourceDocumentHeaderId,
            AccountingDate               _accountingDate,
            AccountingEventType          _accountingEventType,
            AccountingEventState         _accountingEventState)

    {
        AccountingEvent accountingEvent;

        //Insert any new accounting events that we need to create for the source document
        accountingEvent.SourceDocumentHeader    = _sourceDocumentHeaderId;
        accountingEvent.Type                    = _accountingEventType;
        accountingEvent.State                   = _accountingEventState;
        accountingEvent.AccountingDate          = _accountingDate;
        accountingEvent.insert();

        return accountingEvent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionsForEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accounting event for the related distributions.
    /// </summary>
    /// <param name = "_accountingEventRecId">
    /// Accounting event recid.
    /// </param>
    /// <param name = "_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name = "_sourceDocumentRecId">
    /// Source document line recId.
    /// </param>
    public static void updateDistributionsForEvent(recId _accountingEventRecId, AccountingDate _accountingDate, recId _sourceDocumentRecId)
    {
        #OCCRetryCount

        AccountingDistribution      accountingDistribution;
        AccountingDistribution      accountingDistributionChild;
        AccountingDistribution      accountingDistributionParent;

        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(ProjAdvancedJournalAccountingEventSourceDocumentProcessorExtension));
        using (var activityContext = logger.projOpsManagementActivity().updateAccountingDistributionsContext())
        {
            activityContext.addCustomProperty(ProjOpsManagementInstrumentationActivities::Action, 'Updating distributions for event');

            try
            {
                ttsbegin;

                update_recordSet accountingDistribution
                        setting AccountingEvent = _accountingEventRecId
                        where accountingDistribution.AccountingDate == _accountingDate
                           && accountingDistribution.AccountingEvent == 0
                           && accountingDistribution.SourceDocumentLine == _sourceDocumentRecId;

                // update child distributions with this accounting event -- like tax distributions.
                update_recordSet accountingDistributionChild
                    setting AccountingEvent = accountingDistributionParent.AccountingEvent
                        where accountingDistributionChild.ParentDistribution != 0
                            && accountingDistributionChild.AccountingEvent == 0
                    join accountingDistributionParent
                        where accountingDistributionParent.RecId == accountingDistributionChild.ParentDistribution
                            && accountingDistributionParent.AccountingEvent != 0
                            && accountingDistributionParent.SourceDocumentLine == _sourceDocumentRecId;

                // Updates GST child distribution with this accounting event.
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    TaxGSTProjAdvancedJournalUtils::updateChildDistributionsForEvent(_accountingEventRecId, _accountingDate, _sourceDocumentRecId);
                }

                ttscommit;
            
            }
            catch (Exception::Deadlock)
            {
                int currRetryCount = xSession::currentRetryCount();
                if (currRetryCount >= #RetryNum)
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::Deadlock, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    throw Exception::Deadlock;
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", 'Deadlock - retrying', currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                int currRetryCount = xSession::currentRetryCount();
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::UpdateConflictNotRecovered, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", 'Update conflict - retrying', currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                        retry;
                    }
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::UpdateConflict, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                int currRetryCount = xSession::currentRetryCount();
                if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::TransientSqlConnectionError, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                int currRetryCount = xSession::currentRetryCount();
                logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::Error, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>