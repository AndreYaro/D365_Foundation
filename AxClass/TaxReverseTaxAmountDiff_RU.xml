<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReverseTaxAmountDiff_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReverseTaxAmountDiff_RU extends TaxReverseTaxCustVendSettle_RU
{
    private boolean isFromSettlement;
    protected Set exchRateDiffTaxLedgerVoucherTransObjectTempRecIDs;
    protected TaxAmount taxAmountUseTaxTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Voucher _voucher,
                    TransDate _transDate,
                    LedgerJournalTransTxt _txt)
    {
        super(_voucher, _transDate, _txt);

        preserveSourceRecId = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(
        LedgerPostingController _ledgerPostingController,
        TaxTrans                _taxTrans,
        TaxAmount               _taxAmount,
        TaxAmount               _chargeAmount,
        CurrencyExchangeHelper  _exchRateHelper,
        LedgerDimensionAccount  _ledgerDimension,
        LedgerDimensionAccount  _transactionLineLedgerDimension,
        LedgerDimensionAccount  _taxOffsetUseTaxLedgerDimension,
        LedgerDetailLevel       _ledgerDetailLevel      = LedgerDetailLevel::AsDefault,
        ProjLedger              _projLedger = null,
        LedgerDimensionAccount  _offsetLedgerDimension  = 0,
        AmountMSTSecondary      _amountMSTSecondary     = 0)
    {
        if (! this.taxParameters().PurchTaxOnOperations || _taxTrans.TaxDirection == TaxDirection::OutgoingTax)
        {
            this.addNewLedgerVoucherTransObject(
                _ledgerPostingController,
                _ledgerDimension,
                _taxAmount,
                _amountMSTSecondary,
                _taxTrans.RecId,
                exchRateDiffTaxLedgerVoucherTransObjectTempRecIDs);

            if (_taxOffsetUseTaxLedgerDimension 
                && isFromSettlement 
                && _taxTrans.TaxDirection == TaxDirection::UseTax 
                && CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled())
            {
                taxAmountUseTaxTotal += _taxAmount ? -_taxAmount : -_amountMSTSecondary;
                this.addNewLedgerVoucherTransObject(
                    _ledgerPostingController,
                    _taxOffsetUseTaxLedgerDimension,
                    -_taxAmount,
                    -_amountMSTSecondary,
                    _taxTrans.RecId,
                    exchRateDiffTaxLedgerVoucherTransObjectTempRecIDs);
            }

            if (_offsetLedgerDimension)
            {
                this.addNewLedgerVoucherTransObject(
                    _ledgerPostingController,
                    _offsetLedgerDimension,
                    -_taxAmount,
                    -_amountMSTSecondary,
                    _taxTrans.RecId);

                if (_taxAmount || _amountMSTSecondary)
                {
                    _ledgerPostingController.getJournal().bondLast2_RU();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    private LedgerVoucherTransObject addNewLedgerVoucherTransObject(
        LedgerPostingController _ledgerPostingController, 
        LedgerDimensionAccount  _ledgerDimension,
        TaxAmount               _taxAmount,
        AmountMSTSecondary      _amountMSTSecondary,
        RefRecId                _taxTransRecId,
        Set                     _exchRateDiffTaxLedgerVoucherTransObjectTempRecIDs = null)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicMST_RU(
            _ledgerPostingController.getReference(),
            this.ledgerPostingType(),
            _ledgerDimension,
            sourceCurrencyCode,
            _taxAmount);
        if (_amountMSTSecondary)
        {
            ledgerVoucherTransObject.parmAmountMSTSecondary(_amountMSTSecondary);
        }
        if (_taxTransRecId)
        {
            ledgerVoucherTransObject.addTaxTransRelationship(_taxTransRecId, TaxTransRelationshipType::Tax);
        }
        _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        if (_exchRateDiffTaxLedgerVoucherTransObjectTempRecIDs && CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled())
        {
            _exchRateDiffTaxLedgerVoucherTransObjectTempRecIDs.add(ledgerVoucherTransObject.parmTempRecId());
        }
        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    void saveAndPost(LedgerPostingController _ledgerPostingController, boolean _posting = true)
    {
        TaxTrans                taxTrans;
        TaxTrans_RU             taxTrans_RU;
        NoYes                   correction;
        CurrencyExchangeHelper  exchangeRateHelper = CurrencyExchangeHelper::construct();
        AccountingEvent         accountingEvent;
        boolean                 taxSpecPosting = this.taxParameters().TaxSpecPosting_RU;
        DimensionAttribute      dimAttr;
        SourceDocumentLine      localSourceDocumentLine = sourceDocumentLine;

        void distributeAmounts()
        {
            AccountingDistribution              sourceDocumentDistribution;
            List                                sourceLineDistributionList = AccountingDistribution::getDistributionList(accountingEvent.RecId, localSourceDocumentLine.RecId);
            DimensionDefault                    distributionDimensionDefault;
            DimensionAttributeValueSetStorage   dimAttrValueSetStorage;
            AmountMST                           distributionTaxAmount;
            AmountMST                           remainAmount = taxTrans.TaxAmount;
            int                                 elements = sourceLineDistributionList.elements();
            ListEnumerator                      le = sourceLineDistributionList.getEnumerator();
            DimensionAttributeValue             dimensionAttributeValue;
            LedgerDimensionAccount              ledgerDimensionAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxWorkTrans.LedgerDimension);
            LedgerDimensionAccount              offsetLedgerDimensionAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxWorkTrans.OffsetLedgerDimension_RU);
            LedgerDimensionAccount              operationLedgerDimensionAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxWorkTrans.OperationLedgerDimension);
            LedgerDimensionAccount              taxOffsetUseTaxLedgerDimensionAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxWorkTrans.TaxOffsetUseTaxLedgerDimension);

            while (le.moveNext())
            {
                sourceDocumentDistribution = le.current();
                elements--;
                if (elements)
                {
                    distributionTaxAmount  = CurrencyExchangeHelper::amount(taxTrans.TaxAmount * sourceDocumentDistribution.AllocationFactor);
                }
                else
                {
                    distributionTaxAmount  = remainAmount;
                }

                distributionDimensionDefault = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(sourceDocumentDistribution.LedgerDimension), LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(taxWorkTrans.LedgerDimension));

                if (!taxSpecPosting)
                {
                    if (!dimAttr)
                    {
                        dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
                    }

                    dimensionAttributeValue = DimensionAttributeValue::find(
                        DimensionAttributeValueSetStorage::find(
                            LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId))).getValueByDimensionAttribute(dimAttr.RecId));

                    if (dimensionAttributeValue)
                    {
                        dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(distributionDimensionDefault);
                        dimAttrValueSetStorage.addItem(dimensionAttributeValue);
                        distributionDimensionDefault = dimAttrValueSetStorage.save();
                    }
                }

                taxTrans_RU = taxTrans.taxTrans_RU();
                taxTrans_RU.OffsetLedgerDimension_RU = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(LedgerDimensionFacade::serviceCreateLedgerDimension(offsetLedgerDimensionAccount, distributionDimensionDefault), offsetLedgerDimensionAccount);
                taxTrans.packTaxTrans_RU(taxTrans_RU);

                this.post(_ledgerPostingController,
                          taxTrans,
                          distributionTaxAmount,
                          taxTrans.TaxInCostPriceMST,
                          exchangeRateHelper,
                          LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionAccount, distributionDimensionDefault), ledgerDimensionAccount),
                          LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(LedgerDimensionFacade::serviceCreateLedgerDimension(operationLedgerDimensionAccount, distributionDimensionDefault), operationLedgerDimensionAccount),
                          LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(LedgerDimensionFacade::serviceCreateLedgerDimension(taxOffsetUseTaxLedgerDimensionAccount, distributionDimensionDefault), taxOffsetUseTaxLedgerDimensionAccount),
                          LedgerDetailLevel::AsDefault,
                          null,
                          taxTrans_RU.OffsetLedgerDimension_RU);
                remainAmount -= distributionTaxAmount;
            }
        }

        ttsbegin;

        while select taxWorkTrans
            where taxWorkTrans.HeadingRecId  == headingRecId &&
                  taxWorkTrans.TaxOrigin     != TaxOrigin::TaxReversed
        {
            if (taxWorkTrans.TaxAmount || taxWorkTrans.TaxBaseAmount || taxWorkTrans.TaxBaseQty)
            {
                taxTrans.clear();
                this.initFromTaxWorkTrans(taxTrans, taxWorkTrans, this.taxOrigin(taxWorkTrans.TaxOrigin));

                taxTrans.euroTriangulation = triangulation;
                taxTrans.Voucher           = voucher;
                taxTrans.JournalNum        = this.journalNum();

                if (_posting)
                {
                    this.initTaxTrans(taxTrans, _ledgerPostingController.getJournal().parmVoucherSeriesCode());
                    taxTrans.insert();
                }

                if (taxWorkTrans.ExemptTax == NoYes::No && taxTrans.TaxAmount)
                {
                    correction = _ledgerPostingController.getReference().parmCorrection();

                    if (taxTrans.SourceTableId == taxTrans.TableId)
                    {
                        _ledgerPostingController.getReference().parmCorrection(! correction);
                    }

                    exchangeRateHelper.parmExchangeRate1(exchRate);                  
                    exchangeRateHelper.parmExchangeRate2(exchRateSecond);
                    exchangeRateHelper.parmReportingExchangeRate1(reportingCurrencyExchRate);
                    exchangeRateHelper.parmReportingExchangeRate2(reportingCurrencyExchRateSecondary);
                    exchangeRateHelper.parmExchangeDate(taxTrans.TransDate);

                    if (!sourceDocumentLine)
                    {
                        if (taxTrans.SourceDocumentLine)
                        {
                            localSourceDocumentLine = sourceDocumentLine::find(taxTrans.SourceDocumentLine);
                        }
                        else
                        {
                            localSourceDocumentLine = TaxReverseTaxCustVendSettle_RU::sourceDocumentLine(taxTrans.SourceTableId, taxTrans.SourceRecId);
                        }
                    }

                    accountingEvent = AccountingDistribution::getLastSourceDocumentLineEvent(localSourceDocumentLine.RecId);

                    if (!this.parmSkipDistribution() && AccountingDistribution::existEventAndSourceDocumentLine(accountingEvent.RecId, localSourceDocumentLine.RecId))
                    {
                        distributeAmounts();
                    }
                    else
                    {
                       this.post(_ledgerPostingController,
                                 taxTrans,
                                 taxTrans.TaxAmount,
                                 taxTrans.TaxInCostPriceMST,
                                 exchangeRateHelper,
                                 taxWorkTrans.LedgerDimension,
                                 taxWorkTrans.OperationLedgerDimension,
                                 taxWorkTrans.TaxOffsetUseTaxLedgerDimension,
                                 LedgerDetailLevel::AsDefault,
                                 null,
                                 taxWorkTrans.OffsetLedgerDimension_RU);
                    }

                    _ledgerPostingController.getReference().parmCorrection(correction);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    protected TaxAmount taxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFromSettlement</Name>
				<Source><![CDATA[
    public boolean parmIsFromSettlement(boolean _isFromSettlement = isFromSettlement)
    {
        isFromSettlement = _isFromSettlement;
        return isFromSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType</Name>
				<Source><![CDATA[
    protected LedgerPostingType ledgerPostingType()
    {
        return LedgerPostingType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountUseTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total tax amount of use tax posted to General Ledger.
    /// </summary>
    /// <returns>The total use tax amount.</returns>
    public TaxAmount getTaxAmountUseTaxTotal()
    {
        return taxAmountUseTaxTotal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>