<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailZReportValidation_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailZReportValidation_BR</c> class implements the Z report validations.
/// </summary>
/// <remarks>
/// Although used primarily for posting, it can be used for general validation.
/// </remarks>
class RetailZReportValidation_BR
{
    RetailZReport_BR    retailZReport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of object <c>RetailZReportValidation_BR</c> given a
    /// <c>RetailZReport_BR</c> record.
    /// </summary>
    /// <param name="_retailZReport">
    /// The <c>RetailZReport_BR</c> to be validated.
    /// </param>
    public void new(RetailZReport_BR _retailZReport = null)
    {
        retailZReport = _retailZReport;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmRetailZReport</Name>
				<Source><![CDATA[
    public RetailZReport_BR parmRetailZReport(RetailZReport_BR _retailZReport = retailZReport)
    {
        retailZReport = _retailZReport;

        return retailZReport;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies all validations to the Z report.
    /// </summary>
    /// <returns>
    /// True if all validations passed; otherwise, false.
    /// </returns>
    public boolean validateAll()
    {
        return this.validateZReportAttributes()
            && this.validatePostedFiscalReceipts()
            && this.validatePerTotalizerName()
            && this.validatePerTaxCode();
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateForStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies all validations to the Z report when being posted by the statement.
    /// </summary>
    /// <returns>
    /// True if all validations passed; otherwise, false.
    /// </returns>
    public boolean validateForStatement()
    {
        return this.validatePerTotalizerName()
            && this.validatePerTaxCode();
    }
]]></Source>
			</Method>
			<Method>
				<Name>validatePerTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the sum of all fiscal receipt tax transactions grouped
    /// by tax code matches the tax base amount of the corresponding Z report
    /// totalizer tax transaction.
    /// </summary>
    /// <returns>
    /// True if the validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validatePerTaxCode()
    {
        boolean                             ok = true;
        RetailFiscalReceipt_BR              fiscalReceipt;
        RetailFiscalReceiptLine_BR          fiscalReceiptLine;
        RetailFiscalReceiptTaxTrans_BR      fiscalReceiptTaxTrans;
        RetailZReportTotalizerTaxTrans_BR   totalizerTaxTrans;

        while select TaxCode, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, FiscalValue
            from totalizerTaxTrans
                where   totalizerTaxTrans.AdditionalFiscalMemoryIndex   == retailZReport.AdditionalFiscalMemoryIndex
                    &&  totalizerTaxTrans.FiscalPrinterSerialNumber     == retailZReport.FiscalPrinterSerialNumber
                    &&  totalizerTaxTrans.ZReportNumber                 == retailZReport.ZReportNumber
        {
            select TaxCode, sum(TaxBaseAmount) from fiscalReceiptTaxTrans
                group by TaxCode
                where   fiscalReceiptTaxTrans.TaxType               == TaxType_BR::ICMS
                    &&  fiscalReceiptTaxTrans.TaxCode               == totalizerTaxTrans.TaxCode
            exists join fiscalReceiptLine
                where   fiscalReceiptLine.TransactionId             == fiscalReceiptTaxTrans.TransactionId
                    &&  fiscalReceiptLine.TerminalId                == fiscalReceiptTaxTrans.TerminalId
                    &&  fiscalReceiptLine.StoreId                   == fiscalReceiptTaxTrans.StoreId
                    &&  fiscalReceiptLine.LineNum                   == fiscalReceiptTaxTrans.LineNum
                    &&  fiscalReceiptLine.CancelledQuantity         == 0
            exists join fiscalReceipt
                where   fiscalReceipt.TransactionId                 == fiscalReceiptLine.TransactionId
                    &&  fiscalReceipt.TerminalId                    == fiscalReceiptLine.TerminalId
                    &&  fiscalReceipt.StoreId                       == fiscalReceiptLine.StoreId
                    &&  fiscalReceipt.AdditionalFiscalMemoryIndex   == retailZReport.AdditionalFiscalMemoryIndex
                    &&  fiscalReceipt.FiscalPrinterSerialNumber     == retailZReport.FiscalPrinterSerialNumber
                    &&  fiscalReceipt.ZReportNumber                 == retailZReport.ZReportNumber
                    &&  fiscalReceipt.Status                        == FiscalDocumentStatus_BR::Approved;

            if (totalizerTaxTrans.taxBaseAmountByFiscalValue() != fiscalReceiptTaxTrans.TaxBaseAmount)
            {
                ok = checkFailed(strFmt("@SYP4930008",
                                        retailZReport.ZReportNumber,
                                        retailZReport.FiscalPrinterSerialNumber,
                                        totalizerTaxTrans.taxBaseAmountByFiscalValue(),
                                        totalizerTaxTrans.TaxCode,
                                        fiscalReceiptTaxTrans.TaxBaseAmount));
            }
        }

        return ok;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validatePerTotalizerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the sum of all Z report totalizer tax transactions grouped
    /// by totalizer name matches the totalizer amount of the corresponding Z report
    /// totalizer.
    /// </summary>
    /// <returns>
    /// True if the validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validatePerTotalizerName()
    {
        boolean                             ok = true;
        RetailZReportTotalizer_BR           totalizer;
        RetailZReportTotalizerTaxTrans_BR   totalizerTaxTrans;
        Amount                              differenceTolerance = 0.50; // same tolerance accepted by PVA on C490

        while select TotalizerName, TotalizerAmount, AdditionalFiscalMemoryIndex, FiscalPrinterSerialNumber, ZReportNumber
            from totalizer
            where   totalizer.AdditionalFiscalMemoryIndex    == retailZReport.AdditionalFiscalMemoryIndex
                &&  totalizer.FiscalPrinterSerialNumber      == retailZReport.FiscalPrinterSerialNumber
                &&  totalizer.ZReportNumber                  == retailZReport.ZReportNumber
                &&  totalizer.TaxValue > 0
        {
            select sum(TaxBaseAmount), sum(TaxBaseAmountExempt), sum(TaxBaseAmountOther)
                from totalizerTaxTrans
                    group by TotalizerName
                where   totalizerTaxTrans.AdditionalFiscalMemoryIndex   == totalizer.AdditionalFiscalMemoryIndex
                    &&  totalizerTaxTrans.FiscalPrinterSerialNumber     == totalizer.FiscalPrinterSerialNumber
                    &&  totalizerTaxTrans.ZReportNumber                 == totalizer.ZReportNumber
                    &&  totalizerTaxTrans.TotalizerName                 == totalizer.TotalizerName;

            if (abs(totalizerTaxTrans.accountingAmount() - totalizer.TotalizerAmount) > differenceTolerance)
            {
                ok = checkFailed(strFmt("@SYP4930008",
                                        retailZReport.ZReportNumber,
                                        retailZReport.FiscalPrinterSerialNumber,
                                        totalizer.TotalizerAmount,
                                        totalizer.TotalizerName,
                                        totalizerTaxTrans.accountingAmount()));
            }
        }

        return ok;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validatePostedFiscalReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if all the valid fiscal receipts within the Z report were already posted.
    /// </summary>
    /// <returns>
    /// True if the validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validatePostedFiscalReceipts()
    {
        boolean                 ok = true;
        RetailFiscalReceipt_BR  fiscalReceipt;

        select count(RecId) from fiscalReceipt
            where   fiscalReceipt.IsStatementPosted             == NoYes::No
                &&  fiscalReceipt.Status                        == FiscalDocumentStatus_BR::Approved
                &&  fiscalReceipt.AdditionalFiscalMemoryIndex   == retailZReport.AdditionalFiscalMemoryIndex
                &&  fiscalReceipt.FiscalPrinterSerialNumber     == retailZReport.FiscalPrinterSerialNumber
                &&  fiscalReceipt.ZReportNumber                 == retailZReport.ZReportNumber;

        if (fiscalReceipt.RecId > 0)
        {
            ok = checkFailed(strFmt("@SYP4930009",
                                    retailZReport.ZReportNumber,
                                    retailZReport.FiscalPrinterSerialNumber,
                                    fiscalReceipt.RecId));
        }

        return ok;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateZReportAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the Z report contains the attributes to be synched to the booking period.
    /// </summary>
    /// <returns>
    /// True if the validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validateZReportAttributes()
    {
        boolean ok = true;

        if (retailZReport.Version < RetailZReportVersion_BR::v2)
        {
            ok = checkFailed(strFmt("@SYP4861458",
                retailZReport.ZReportNumber,
                retailZReport.FiscalPrinterSerialNumber,
                retailZReport.Version));
        }

        if (!retailZReport.IsStatementPosted)
        {
            ok = checkFailed(strFmt("@SYP4861441",
                retailZReport.ZReportNumber,
                retailZReport.FiscalPrinterSerialNumber,
                retailZReport.Version));
        }

        return ok;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>