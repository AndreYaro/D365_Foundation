<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayFSSFundRecon</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayFSSFundRecon extends RunBaseBatch implements BatchRetryable
{
    NoYesId     ignoreParms;
    DialogField dlgCalcYr, dlgIgnoreParms, dlgRecalcType;
    QueryRun    queryRun;

    RPaySickListRecalcType  recalcType;

    RPayTaxParameters       taxParameters;
    RPayCounterUnit         fssFundCode;
    Yr                      calcYr;
    TransDate               startDate, endDate, calcDaysEndDate;

    #define.FundLimitAmount(415000)
    #define.LawApplyDate(2010)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        calcYr,
        ignoreParms,
        recalcType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates excluded days for employee.
    /// </summary>
    /// <param name="_emplId">
    /// Employee code.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcDays(RHRMEmplId _emplId)
    {
        RPayExcludeDaysController excludeDays = RPayExcludeDaysController::construct(_emplId, calcYr);

        excludeDays.calcExcludeDays(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFund</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates fund amount and excluded days for employee.
    /// </summary>
    /// <param name="_emplId">
    /// Employee code.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcFund(RHRMEmplId _emplId)
    {
        RPayFundEmplSumTotal        fundEmplSumTotal;
        RpayFundEmplSum             fundEmplSum;
        RPayExcludeDaysController   excludeDays;

        container               conAmounts;

        select sum(RpayFundTotalAmount) from fundEmplSum
            where  fundEmplSum.EmplId == _emplId
                && fundEmplSum.RpayCounterUnit == fssFundCode
                && ((fundEmplSum.CorrectedPeriod >= startDate
                &&   fundEmplSum.CorrectedPeriod <= endDate)
                || (!fundEmplSum.CorrectedPeriod
                &&   fundEmplSum.PayPeriod >= startDate
                &&   fundEmplSum.PayPeriod <= endDate));

        if (fundEmplSum)
        {
            conAmounts = this.calcFundAmount(_emplId, fundEmplSum.RpayFundTotalAmount);
        }

        if (this.checkAmount(conAmounts, _emplId))
        {
            delete_from fundEmplSumTotal
                where   fundEmplSumTotal.emplId == _emplId
                    &&  fundEmplSumTotal.Yr     == calcYr
                    &&  !fundEmplSumTotal.IsManual
                    &&  !fundEmplSumTotal.VendAccount;

            if (conpeek(conAmounts, 1) > 0 || conpeek(conAmounts, 2) > 0 || conpeek(conAmounts, 3) > 0)
            {
                fundEmplSumTotal.clear();
                fundEmplSumTotal.initValue();
                fundEmplSumTotal.Amount             = conpeek(conAmounts, 1);
                fundEmplSumTotal.AmountOverLimit    = conpeek(conAmounts, 2);
                fundEmplSumTotal.AmountDeductions   = conpeek(conAmounts, 3);
                fundEmplSumTotal.emplId             = _emplId;
                fundEmplSumTotal.Yr                 = calcYr;
                fundEmplSumTotal.Include            = NoYes::Yes;
                fundEmplSumTotal.insert();
            }

            excludeDays = RPayExcludeDaysController::construct(_emplId, calcYr);
            excludeDays.calcExcludeDays();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFundAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcFundAmount(RHRMEmplId _emplId, RPayAmount _fundTotalAmount)
    {
        RPayFundEmplDeduction   rPayFundEmplDeduction;
        RpayFundDeductionTable  rPayFundDeductionTable;
        RPayAmount              deductionAmount;
        RPayAmount              overLimitAmount;
        RPayAmount              fundTotalAmount;
        container               payTypeAmounts;

        payTypeAmounts  = this.calcWagePayType(_emplId);
        fundTotalAmount = _fundTotalAmount + conpeek(payTypeAmounts, 1);

        select sum(DeductionAmount) from rPayFundEmplDeduction
            where    rPayFundEmplDeduction.RpayFundDeductionCode == taxParameters.FssBaseLimitDeduction
                    && rPayFundEmplDeduction.EmplId              == _emplId
                    && rPayFundEmplDeduction.RpayCounterUnit     == fssFundCode
                    && ((rPayFundEmplDeduction.CorrectedPeriod >= startDate
                    &&   rPayFundEmplDeduction.CorrectedPeriod <= endDate)
                    || (!rPayFundEmplDeduction.CorrectedPeriod
                    &&   rPayFundEmplDeduction.PayPeriod >= startDate
                    &&   rPayFundEmplDeduction.PayPeriod <= endDate));

        overLimitAmount = rPayFundEmplDeduction.DeductionAmount;

        select sum(DeductionAmount) from rPayFundEmplDeduction
            where   rPayFundEmplDeduction.RpayFundDeductionCode != taxParameters.FssInvalidDeduction
                    && rPayFundEmplDeduction.EmplId == _emplId
                    && rPayFundEmplDeduction.RpayCounterUnit == fssFundCode
                    && ((rPayFundEmplDeduction.CorrectedPeriod >= startDate
                    &&   rPayFundEmplDeduction.CorrectedPeriod <= endDate)
                    || (!rPayFundEmplDeduction.CorrectedPeriod
                    &&   rPayFundEmplDeduction.PayPeriod >= startDate
                    &&   rPayFundEmplDeduction.PayPeriod <= endDate));

        deductionAmount = rPayFundEmplDeduction.DeductionAmount - overLimitAmount;

        select sum(DeductionAmount) from rPayFundEmplDeduction
            where   rPayFundEmplDeduction.RpayFundDeductionCode != taxParameters.FssInvalidDeduction
                    && rPayFundEmplDeduction.EmplId == _emplId
                    && rPayFundEmplDeduction.RpayCounterUnit == fssFundCode
                    && ((rPayFundEmplDeduction.CorrectedPeriod >= startDate
                    &&   rPayFundEmplDeduction.CorrectedPeriod <= endDate)
                    || (!rPayFundEmplDeduction.CorrectedPeriod
                    &&   rPayFundEmplDeduction.PayPeriod >= startDate
                    &&   rPayFundEmplDeduction.PayPeriod <= endDate))
            exists join rPayFundDeductionTable
                where rPayFundDeductionTable.RpayFundDeductionCode == rPayFundEmplDeduction.RpayFundDeductionCode &&
                      rPayFundDeductionTable.RpayRateTaxValue;

        deductionAmount -= rPayFundEmplDeduction.DeductionAmount;
        deductionAmount += conpeek(payTypeAmounts, 2);

        if (calcYr < #LawApplyDate && overLimitAmount == 0)
        {
            overLimitAmount = max(0, fundTotalAmount - deductionAmount - #FundLimitAmount);
        }

        return [fundTotalAmount, overLimitAmount, deductionAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWagePayType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcWagePayType(RHRMEmplId _emplId)
    {
        RPayFSSFundReconParms   fundReconParms, fundReconParmsJoin;
        RPayTrans               payTrans;
        RPayAmount              payAmount, deductionAmount;

        void calcWage()
        {
            select sum(Amount) from payTrans
                where payTrans.Emplid   == _emplId
                   && payTrans.PayCtype == fundReconParms.PayCType
                   && ((payTrans.CorrectedPeriod >= startDate
                   &&   payTrans.CorrectedPeriod <= endDate)
                   || (!payTrans.CorrectedPeriod
                   &&   payTrans.PayPeriod >= startDate
                   &&   payTrans.PayPeriod <= endDate));

            if (fundReconParms.Include)
            {
                payAmount       += abs(payTrans.Amount);
                deductionAmount += min(abs(payTrans.Amount), fundReconParms.LimitAmount);
            }
            else
            {
                payAmount       -= abs(payTrans.Amount);
                deductionAmount -= min(abs(payTrans.Amount), fundReconParms.LimitAmount);
            }
        }

        if (!ignoreParms)
        {
            while select fundReconParms
                where fundReconParms.Yr          == 0 &&
                      fundReconParms.LimitPeriod == RPayRatePeriodFrequency::Year
                notexists join fundReconParmsJoin
                    where fundReconParmsJoin.PayCType    == fundReconParms.PayCType         &&
                          fundReconParmsJoin.LimitPeriod == RPayRatePeriodFrequency::Year   &&
                          fundReconParmsJoin.Yr          == calcYr
            {
                calcWage();
            }

            while select fundReconParms
                where fundReconParms.Yr          == calcYr &&
                      fundReconParms.LimitPeriod == RPayRatePeriodFrequency::Year
            {
                calcWage();
            }
        }

        return [payAmount, deductionAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void check()
    {
        if (!fssFundCode)
        {
            throw Error("@RUP3272");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkAmount(container _conAmounts, RHRMEmplId _emplId)
    {
        boolean ret = true;

        if (conpeek(_conAmounts, 1) < 0)
        {
            ret = checkFailed(strfmt("@RUP3273", _emplId, calcYr));
        }

        if (conpeek(_conAmounts, 3) < 0)
        {
            ret = checkFailed(strfmt("@RUP3274", _emplId, calcYr));
        }

        if ((conpeek(_conAmounts, 1) - conpeek(_conAmounts, 3) - conpeek(_conAmounts, 2)) < 0)
        {
            ret = checkFailed(strfmt("@RUP3295", _emplId, calcYr));
        }

        if (!ret)
        {
            checkFailed(strfmt("@RUP3296",
                               conpeek(_conAmounts, 1),
                               conpeek(_conAmounts, 2),
                               conpeek(_conAmounts, 3)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        #resAppl

        dlgCalcYr       = dialog.addFieldValue(extendedTypeStr(Yr), calcYr, "@SYS107162");
        dlgIgnoreParms  = dialog.addFieldValue(extendedTypeStr(NoYesId), ignoreParms, "@RUP3299", "@RUP3300");
        dlgRecalcType   = dialog.addFieldValue(enumStr(RPaySickListRecalcType), recalcType);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        calcYr      = dlgcalcYr.value();
        ignoreParms = dlgIgnoreParms.value();
        recalcType  = dlgRecalcType.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initCalc()
    {
        taxParameters = RPayTaxParameters::find();
        fssFundCode   = taxParameters.CounterUnit2011;

        startDate       = mkDate(1, 1, calcYr);
        endDate         = dateEndYr(startDate);
        calcDaysEndDate = min(endDate, RPayParameters::PayPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQueryRun()
    {
        Query query;

        query = new Query();
        query.addDataSource(tablenum(RHRMEmplTable));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMEmplTable   emplTable;
        #OCCRetryCount

        try
        {
            this.initCalc();
            this.check();

            ttsbegin;
            while (queryRun.next())
            {
                emplTable = queryRun.get(tablenum(RHRMEmplTable));

                if (recalcType == RPaySickListRecalcType::BasesDays)
                {
                    this.calcFund(emplTable.EmployeeId);
                }
                else
                {
                    this.calcDays(emplTable.EmployeeId);
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        PackedQueryRun  packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQueryRun] = packedClass;

                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                else
                {
                    this.initQueryRun();
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (calcYr == 0)
        {
            ret = checkFailed("@RUP3271");
        }

        if (calcYr < 0)
        {
            ret = checkFailed("@RUP3292");
        }

        if ((calcYr div 1000) == 0 || (calcYr div 1000) > 2)
        {
            ret = checkFailed("@RUP3298");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayFSSFundRecon construct()
    {
        return new RPayFSSFundRecon();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@RUP3297";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RPayFSSFundRecon    fssFundRecon;

        fssFundRecon = RPayFSSFundRecon::construct();

        if (fssFundRecon.prompt())
        {
            fssFundRecon.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>