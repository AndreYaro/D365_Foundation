<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendUnrealizedRevType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>CustVendUnrealizedRevType_TH</c> is the base type class for reversal journal.
/// </summary>
public abstract class CustVendUnrealizedRevType extends Object
{
    CustVendUnrealizedRev               unrealizedRev;
    CustVendUnrealizedRevRefRecId       unrealizedRecId;

    DataAreaId                          debitCompany;
    DataAreaId                          creditCompany;
    Map                                 numberSeqMap;
    LedgerVoucherGroup                  ledgerVoucherGroup;
    SysModule                           module;

    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildConstructQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for creating reversal journal.
    /// </summary>
    /// <returns>
    ///     The constructed query.
    /// </returns>
    public abstract Query buildConstructQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for updating reversal journal.
    /// </summary>
    /// <returns>
    ///     The constructed query.
    /// </returns>
    public abstract Query buildUpdateQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs to post reversal journal.
    /// </summary>
    protected void doPost()
    {
        boolean isRetry = false;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                this.reLoadUnrealizedRev(true);
            }

            if (!unrealizedRev.Posted)
            {
                if (!this.validatePost())
                {
                    throw error("@SYS21628");
                }

                unrealizedRev.Posted = NoYes::Yes;
                unrealizedRev.update();

                this.reverseTax();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the reversal journal record buffer is loaded.
    /// </summary>
    /// <returns>
    ///     True if it is loaded; otherwise, false.
    /// </returns>
    public boolean isDataLoaded()
    {
        return unrealizedRev
            && unrealizedRev.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendUnrealizedRev</Name>
				<Source><![CDATA[
        public CustVendUnrealizedRev parmCustVendUnrealizedRev(CustVendUnrealizedRev _unrealizedRev = unrealizedRev)
    {
        this.parmCustVendUnrealizedRevRefRecId(unrealizedRev.RecId);
        unrealizedRev = _unrealizedRev;
        return unrealizedRev;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendUnrealizedRevRefRecId</Name>
				<Source><![CDATA[
        public CustVendUnrealizedRevRefRecId parmCustVendUnrealizedRevRefRecId(CustVendUnrealizedRevRefRecId _unrealizedRecId = unrealizedRecId)
    {
        if (unrealizedRecId != _unrealizedRecId)
        {
            unrealizedRev = null;
        }
        unrealizedRecId = _unrealizedRecId;
        return unrealizedRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
        public SysModule parmModule(SysModule _module = module)
    {
        module = _module;
        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the reversal journal.
    /// </summary>
    public abstract void post()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reLoadUnrealizedRev</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reloads the <c>CustVendUnrealizedRev</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    protected void reLoadUnrealizedRev(boolean _forUpdate  = false)
    {
        CustVendUnrealizedRev    unrealizedRevLocal;

        unrealizedRevLocal = this.parmCustVendUnrealizedRev();

        if (this.isDataLoaded())
        {
            unrealizedRevLocal.reread();
            unrealizedRevLocal.selectForUpdate(_forUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reverses unrealized VAT to realized VAT.
    /// </summary>
    private void reverseTax()
    {
        CustVendSettle  custVendSettle;

        if (unrealizedRev.TableId == tableNum(VendUnrealizedRev))
        {
            custVendSettle = CustVendSettle::construct(SysModule::Vend);
        }
        else
        {
            custVendSettle = CustVendSettle::construct(SysModule::Cust);
        }
        custVendSettle.reverseTax(unrealizedRev);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether reversal journal can be posted. All tax invoice information must be filled in.
    ///     And tax invoice number must be unique.
    /// </summary>
    /// <returns>
    ///     Returns true if all tax invoice information are filled in, and tax invoice number is unique.
    ///     Otherwise, returns false.
    /// </returns>
    protected boolean validatePost()
    {
        boolean     ret = true;

        if (!unrealizedRev.CustVendUnrealizedRev::isTaxInfoFilled())
        {
            // Tax invoice information must be filled in.
            ret = checkFailed("@SYS4082804");
        }

        if (ret)
        {
            ret = VendTable::find(unrealizedRev.AccountNum).checkTaxInvoice(unrealizedRev.TaxInvoiceId, unrealizedRev.TaxInvoiceDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByUnrealizedRev</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the instance of <c>CustVendUnrealizedRevType_TH</c> based on a given
    ///     <c>CustVendUnrealizedRev_TH</c> record.
    /// </summary>
    /// <param name="_unrealizedRev">
    ///     The given <c>CustVendUnrealizedRev_TH</c>
    /// </param>
    /// <returns>
    ///     The constructed <c>CustVendUnrealizedRevType_TH</c> instance.
    /// </returns>
    public static CustVendUnrealizedRevType constructByUnrealizedRev(CustVendUnrealizedRev _unrealizedRev)
    {
        CustVendUnrealizedRevType    unrealizedRevType;

        if (_unrealizedRev)
        {
            switch (_unrealizedRev.TableId)
            {
                case tableNum(VendUnrealizedRev)   :
                    unrealizedRevType = VendUnrealizedRevType::construct(_unrealizedRev);
                    unrealizedRevType.parmModule(SysModule::Vend);
                    break;
            }
        }

        return unrealizedRevType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Marks or unmarks specified payment journal with specified reveral journal.
    /// </summary>
    /// <param name="_custVendSettlementExtensionTH">
    ///     Settlement extension record buffer.
    /// </param>
    /// <param name="_unrealizedRev">
    ///     Reversal journal record buffer.
    /// </param>
    /// <param name="_mark">
    ///     Indicates whether the payment journal is linked to reversal journal.
    /// </param>
    public static void markTrans(
        CustVendSettlementExtensionTH   _custVendSettlementExtensionTH,
        CustVendUnrealizedRev           _unrealizedRev,
        boolean                         _mark)
    {
        CustVendUnrealizedRevRefRecId       refRecId = _unrealizedRev.RecId;

        if (!_mark)
        {
            refRecId = 0;
        }

        _custVendSettlementExtensionTH.UnrealizedRev = refRecId;
        _custVendSettlementExtensionTH.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>