<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099IForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
interface Tax1099IForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Produces a string representing all the different amount fields that have a value for the given record.
    /// Used to produce 1099 electronic records.
    /// </summary>
    /// <param name = "_localIRSPayerRec">The record to check amount fields on.</param>
    /// <returns>A string with representation of the fields that have amounts.</returns>
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates IRS assigned return type of the form.
    /// Used to produce 1099 electronic records.
    /// </summary>
    /// <returns>A one character string of the return type.</returns>
    public str getReturnType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the type of 1099 form.
    /// </summary>
    /// <returns>A Tax1099Type Enum with the type of the 1099 form.</returns>
    public Tax1099Type getTax1099Type()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if this form type has a Federal Income Tax Withheld field.
    /// </summary>
    /// <returns>True if this form type has the field, otherwise false.</returns>
    public boolean hasFederalIncomeTaxWithheldField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if this form type has a State Tax Withheld field.
    /// </summary>
    /// <returns>True if this form type has the field, otherwise false.</returns>
    public boolean hasStateTaxWithheldField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a string representing part of a 1099 file with information specific to the 1099 form type.
    /// Used to produce 1099 electronic records.
    /// </summary>
    /// <param name = "_outputRecord">The string to be updated.</param>
    /// <param name = "_localIRSPayerRec">The table containing information to be added to the string.</param>
    /// <returns>The string that has the original _outputRecord information with information from the table record.</returns>
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an output record with information to be reported.
    /// Used to produce 1099 printed records.
    /// </summary>
    /// <param name = "_tax1099IRSPayerRec">The table containing input information.</param>
    /// <param name = "_tax1099IRSPayerRecTmp">The in memory table to be updated with new information.</param>
    /// <param name = "_payersRTN">The bank registration number for the payer.</param>
    /// <param name = "_onlyStateToPrint">The state code to print if only one state is to be printed.</param>
    /// <param name = "_fromDate">The lower bound on transaction dates when figuring state information.</param>
    /// <param name = "_toDate">The upper bound on transaction dates when figuring state information.</param>
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a processing record with information from the application.
    /// Used to produce 1099 printed records.
    /// </summary>
    /// <param name = "_localTax1099Summary">The summary record to pull summed amount information from.</param>
    /// <param name = "_tax1099IRSPayerRec">The processing record to insert information into.</param>
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record insert list with table changes needed to bring application up to date.
    /// Used to create and update 1099 fields.
    /// </summary>
    /// <param name = "_tax1099FieldsIM">The in memory table contianing all current records.</param>
    /// <param name = "_ril">A record insert list to be added to if changes are needed.</param>
    /// <param name = "_forceUpdate">A boolean indicating if a record should be forced to be updated even if a user updated it.</param>
    /// <returns>True if any records were updated or inserted, otherwise false.</returns>
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates processing table with information from a given summary table.
    /// Used to produce 1099 electronic records.
    /// </summary>
    /// <param name = "_tax1099Fields">The table containing information about which field is to be updated.</param>
    /// <param name = "_localIRSPayerRec">The processing table to be updated.</param>
    /// <param name = "_tax1099Summary">The summary table to update the processing table from.</param>
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>