<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimTrackingInventTransNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimTrackingInventTransNode</c> holds tracing relations for a single <c>InventTrans</c> record.
/// </summary>
class InventDimTrackingInventTransNode
{
    #define.TreeNodePartSeparator('  ●  ')

    boolean     isForwardExpanded;              // Has the node been fully expanded in the forward direction?
    boolean     isBackwardExpanded;             // Has the node been fully expanded in the backward direction?
    Set         forwardNodesSet;                // Set of transactions which are possible related nodes in the forward direction
    Set         backwardNodesSet;               // Set of transactions which are possible related nodes in the backward direction

    InventTrackingDimTracingInventTransDTO inventTransDTO;
    InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO;

    boolean     hasFullDateTime;        // Some transactions cannot be created with a different posting date - we might use the exact time then.
    utcdatetime fullTrackingDateTime;

    boolean     hasRelatedProductionBeenCalculated;
    str         relatedProductionText;

    RecId       inventTransRecId;
    RecId       inventTransOriginRecId;

    private static boolean includeWarehouseSpecificInventoryTransactions =
        WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventTransRecId,
        inventTransOriginRecId,
        isForwardExpanded,
        isBackwardExpanded,
        hasFullDateTime,
        fullTrackingDateTime,
        hasRelatedProductionBeenCalculated,
        relatedProductionText
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fullTrackingDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The full date and time information for the current transaction if present.
    /// </summary>
    /// <returns>
    ///    An utcDateTime.
    /// </returns>
    public utcdatetime fullTrackingDateTime()
    {
        return fullTrackingDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFullDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns if the related transaction has full date and time information or not.
    /// </summary>
    /// <returns>
    ///    A Boolean.
    /// </returns>
    public boolean hasFullDateTime()
    {
        return hasFullDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize internal date information based on the current transaction.
    /// </summary>
    protected void initDateInformation()
    {
        hasFullDateTime = false;
            
        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        this.initDateInformationDelegate(this, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            fullTrackingDateTime = eventHandlerResult.result();
            hasFullDateTime = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateInformationDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for initializing date information.
    /// </summary>
    /// <param name = "_inventDimTrackingInventTransNode">The class being initialized.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the fullTrackingDateTime.</param>
    delegate void initDateInformationDelegate(InventDimTrackingInventTransNode _inventDimTrackingInventTransNode, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransDTOMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads internal references from the map containing <c>InventTrackingDimTracingInventTransDTO</c> values 
    /// with RecIds of the inventory transactions as keys.
    /// </summary>
    /// <param name="_inventTransDTOMap">
    /// A map containing <c>InventTrackingDimTracingInventTransDTO</c> values
    /// with RecIds of the inventory transactions as the key.
    /// </param>
    /// <remarks>
    ///    This is intended for internal use by the <c>InventTrackingDimTracingRelations</c> class or other classes that may pack
    ///    a list of <c>InventDimTrackingInventTransNode</c> objects and have a means of providing the these records directly. If
    ///    not provided, this class will automatically read the record when needed.
    /// </remarks>
    public void initFromInventTransDTOMap(Map _inventTransDTOMap)
    {
        if (_inventTransDTOMap.exists(inventTransRecId))
        {
            inventTransDTO = _inventTransDTOMap.lookup(inventTransRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOriginDTOMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads internal references from the map containing <c>InventTransOrigin</c> records as values 
    /// with RecIds of the originators as keys.
    /// </summary>
    /// <param name="_inventTransDTOMap">
    /// A map containing <c>InventTransOrigin</c> records as values
    /// with RecIds of the originators as keys.
    /// </param>
    /// <remarks>
    /// This is intended for internal use by the <c>InventTrackingDimTracingRelations</c> class or other classes that may pack
    /// a list of <c>InventDimTrackingInventTransNode</c> objects and have a means of providing the these records directly. If
    /// not provided, this class will automatically read the record when needed.
    /// </remarks>
    public void initFromInventTransOriginDTOMap(Map _inventTransOriginDTOMap)
    {
        if (_inventTransOriginDTOMap.exists(inventTransOriginRecId))
        {
            inventTransOriginDTO = _inventTransOriginDTOMap.lookup(inventTransOriginRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        forwardNodesSet     = new Set(Types::String);
        backwardNodesSet    = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, forwardNodesSet.pack(), backwardNodesSet.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBackwardNodesSet</Name>
				<Source><![CDATA[
    public Set parmBackwardNodesSet(Set _backwardNodesSet = backwardNodesSet)
    {
        backwardNodesSet = _backwardNodesSet;

        return backwardNodesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForwardNodesSet</Name>
				<Source><![CDATA[
    public Set parmForwardNodesSet(Set _forwardNodesSet = forwardNodesSet)
    {
        forwardNodesSet = _forwardNodesSet;

        return forwardNodesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransDTO</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingInventTransDTO parmInventTransDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO = inventTransDTO)
    {
        if (!prmisDefault(_inventTransDTO))
        {
            inventTransRecId = _inventTransDTO ? _inventTransDTO.recId() : 0;
            inventTransDTO   = _inventTransDTO;
        }
        else if (!inventTransDTO && inventTransRecId)
        {
            inventTransDTO = InventTrackingDimTracingInventTransDTO::newFromInventTrans(InventTrans::findRecId(inventTransRecId));
        }

        return inventTransDTO ? inventTransDTO : InventTrackingDimTracingInventTransDTO::newFromInventTrans(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginDTO</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingInventTransOriginDTO parmInventTransOriginDTO(InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO = inventTransOriginDTO)
    {
        if (!prmisDefault(_inventTransOriginDTO))
        {
            inventTransOriginRecId = _inventTransOriginDTO ? _inventTransOriginDTO.recId() : 0;
            inventTransOriginDTO = _inventTransOriginDTO;
        }
        else
        {
            if (!_inventTransOriginDTO && inventTransOriginRecId)
            {
                inventTransOriginDTO = InventTrackingDimTracingInventTransOriginDTO::newFromInventTransOrigin(InventTransOrigin::find(inventTransOriginRecId));
            }
        }

        return inventTransOriginDTO ? inventTransOriginDTO : InventTrackingDimTracingInventTransOriginDTO::newFromInventTransOrigin(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBackwardExpanded</Name>
				<Source><![CDATA[
    public boolean parmIsBackwardExpanded(boolean _isBackwardExpanded = isBackwardExpanded)
    {
        isBackwardExpanded = _isBackwardExpanded;

        return isBackwardExpanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsForwardExpanded</Name>
				<Source><![CDATA[
    public boolean parmIsForwardExpanded(boolean _isForwardExpanded = isForwardExpanded)
    {
        isForwardExpanded = _isForwardExpanded;

        return isForwardExpanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedProductionText</Name>
				<Source><![CDATA[
    private str relatedProductionText()
    {
        PmfProdCoBy             prodCoBy;
        ProdTable               prodTable;
        InventTransOrigin       localInventTransOrigin;
        InventTrans             localInventTrans;

        if (!hasRelatedProductionBeenCalculated)
        {
            relatedProductionText = '';

            switch (this.parmInventTransOriginDTO().referenceCategory())
            {
                case InventTransType::Production:
                    while select TableId from prodCoBy
                        where prodCoBy.ProdId == this.parmInventTransOriginDTO().referenceId()
                            && prodCoBy.ProductType == PmfProductType::Co_Product
                    join ItemId from localInventTransOrigin
                        where localInventTransOrigin.InventTransId  == prodCoBy.InventTransId
                    exists join localInventTrans
                        where localInventTrans.InventTransOrigin == localInventTransOrigin.RecId
                            && localInventTrans.StatusIssue == StatusIssue::None
                            && localInventTrans.Qty > 0

                    {
                        if (relatedProductionText)
                        {
                            relatedProductionText += ', ';
                        }
                        relatedProductionText += localInventTransOrigin.ItemId;
                    }
                    break;

                case InventTransType::PmfProdCoBy:
                    select TableId from prodTable
                        where prodTable.ProdId == this.parmInventTransOriginDTO().referenceId()
                    join ItemId from localInventTransOrigin
                        where localInventTransOrigin.InventTransId == prodTable.InventTransId
                    exists join localInventTrans
                        where localInventTrans.InventTransOrigin == localInventTransOrigin.RecId
                        &&    localInventTrans.StatusIssue == StatusIssue::None
                        &&    localInventTrans.Qty > 0;

                    relatedProductionText = localInventTransOrigin.ItemId;
                    break;
            }

            hasRelatedProductionBeenCalculated = true;
        }

        return relatedProductionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a string which can be used for identification in debugging purposes.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public str toString()
    {
        return this.tracingNodeKey() + ' ' + this.parmInventTransOriginDTO().itemId() + strFmt(' %1:%2', this.parmInventTransOriginDTO().referenceCategory(), this.parmInventTransOriginDTO().referenceId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>tracingNodeKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a string which uniquely identifies this tracing node.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public str tracingNodeKey()
    {
        return InventTrackingDimTracingRelations::tracingNodeKey(tableNum(InventTrans), this.parmInventTransDTO().recId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The tracking date associated with this tracking node.
    /// </summary>
    /// <returns>
    ///    A date.
    /// </returns>
    public TransDate trackingDate()
    {
        return this.parmInventTransDTO().stockQtyChangeDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the text to use for the specified transaction.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public str treeNodeTxt()
    {
        str         lineTxt;

        void addFieldBreak()
        {
            lineTxt += #TreeNodePartSeparator;
        }

        InventTrackingDimTracingInventTransDTO inventTransDTOlocal = this.parmInventTransDTO();
        InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTOLocal = this.parmInventTransOriginDTO();
        ItemId itemId = inventTransOriginDTOLocal.itemId();

        lineTxt += itemId ? itemId : '--';
        addFieldBreak();

        if (inventTransOriginDTOLocal.referenceCategory() == InventTransType::Sales
            && inventTransDTOlocal.statusIssue() == StatusIssue::Picked)
        {
            lineTxt += enum2str(inventTransDTOlocal.statusIssue());
            addFieldBreak();
        }

        lineTxt += enum2str(inventTransOriginDTOLocal.referenceCategory()) + ' ';
        lineTxt += (inventTransOriginDTOLocal.referenceId() ? inventTransOriginDTOLocal.referenceId() : '--');
        addFieldBreak();

        lineTxt += (inventTransDTOlocal.stockQtyChangeDate() ? date2StrUsr(inventTransDTOlocal.stockQtyChangeDate(), DateFlags::FormatAll) : '--');
        addFieldBreak();

        // For Catch Weight items also show CW quantity and unit
        PdsCWUnitId cwUnitId = inventTransOriginDTOLocal.catchWeightUnitId();
        if (cwUnitId)
        {
            int cwQtyNoOfDecimals = new SysDictType(extendedTypeNum(PdsCWInventQty)).noOfDecimals();
            lineTxt += strFmt("@SYS311966", num2str(inventTransDTOlocal.catchWeightQty(), 0, cwQtyNoOfDecimals, 0, 0), cwUnitId);
            addFieldBreak();
        }

        lineTxt += strFmt("@SYS311966", inventTransDTOlocal.inventQty(), inventTransOriginDTOLocal.inventUnitId());
        addFieldBreak();

        lineTxt += inventTransDTOlocal.inventDim().preFix();

        if (this.relatedProductionText())
        {
            addFieldBreak();
            lineTxt += strFmt((inventTransOriginDTOLocal.referenceCategory() == InventTransType::Production ? "@SYS4004857" : "@SYS4004858"),
                this.relatedProductionText());
        }

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   packedForwardNodes;
        container   packedBackwardNodes;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList, packedForwardNodes, packedBackwardNodes] = _packedClass;
                forwardNodesSet = Set::create(packedForwardNodes);
                backwardNodesSet = Set::create(packedBackwardNodes);
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransRefId referenceId()
    {
        return this.parmInventTransOriginDTO().referenceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str referenceCategory()
    {
        return enum2Str(this.parmInventTransOriginDTO().referenceCategory());       
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQty inventQty()
    {
        return this.parmInventTransDTO().inventQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UnitOfMeasureSymbol inventUnitId()
    {
        return this.parmInventTransOriginDTO().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UnitOfMeasureSymbol catchWeightUnitId()
    {
        return this.parmInventTransOriginDTO().catchWeightUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PdsCWQty catchWeightQty()
    {
        return this.parmInventTransDTO().catchWeightQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineCommonXMLAttributes</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void defineCommonXMLAttributes(XmlWriter _xmlWriter)
    {            
        _xmlWriter.writeAttributeString('Item', this.getItemId());
        _xmlWriter.writeAttributeString('Category', strFmt('%1', this.referenceCategory()));
        _xmlWriter.writeAttributeString('Reference', strFmt('%1', this.referenceId()));

        _xmlWriter.writeAttributeString('Qty', InventTrackingDimExport::real2String(this.inventQty()));
        _xmlWriter.writeAttributeString('UnitId', this.inventUnitId());
        PdsCWUnitId cwUnitId = this.catchWeightUnitId();

        if (cwUnitId)
        {
            // Catch weight quantity must be integer numbers though it is stored in a real data type; use integer for external data representation.
            _xmlWriter.writeAttributeString('CatchWeightQty', InventTrackingDimExport::int2String(real2int(this.catchWeightQty())));
            _xmlWriter.writeAttributeString('CatchWeightUnitId', cwUnitId);
        }

        _xmlWriter.writeAttributeString('Date', InventTrackingDimExport::date2String(this.trackingDate()));

        InventTrackingDimExport::exportInventDimAsXML(_xmlWriter, this.getInventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNodeAttributesAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the tracing information for the node in the XML file.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The writer used to write the XML file.
    /// </param>
    public void writeNodeAttributesAsXML(XmlWriter _xmlWriter)
    {                
        if (includeWarehouseSpecificInventoryTransactions)
        {
            this.defineCommonXMLAttributes(_xmlWriter);

            if (this.relatedProductionText())
            {
                _xmlWriter.writeAttributeString(this.parmInventTransOriginDTO().referenceCategory() == InventTransType::Production ? 'CoProducts' : 'EndItem', this.relatedProductionText());
            }

            InventTrackingDimTracingInventTransDTO inventTransDTOLocal = this.parmInventTransDTO();

            if (this.parmInventTransOriginDTO().referenceCategory() == InventTransType::Sales
                && inventTransDTOLocal.statusReceipt() == StatusReceipt::None)
            {
                boolean pickedOnly = inventTransDTOLocal.statusIssue() == StatusIssue::Picked;
                _xmlWriter.writeAttributeString('PickedOnly', int2str(pickedOnly));
            }
        }
        else
        {
            InventTrackingDimTracingInventTransDTO inventTransDTOLocal = this.parmInventTransDTO();
            InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTOLocal = this.parmInventTransOriginDTO();
            InventDim inventDim = inventTransDTOLocal.inventDim();

            _xmlWriter.writeAttributeString('Item', this.parmInventTransOriginDTO().itemId());
            _xmlWriter.writeAttributeString('Category', strFmt('%1', this.parmInventTransOriginDTO().referenceCategory()));
            _xmlWriter.writeAttributeString('Reference', strFmt('%1', this.parmInventTransOriginDTO().referenceId()));
            _xmlWriter.writeAttributeString('Qty', InventTrackingDimExport::real2String(inventTransDTOLocal.inventQty()));
            _xmlWriter.writeAttributeString('UnitId', inventTransOriginDTOLocal.inventUnitId());
            PdsCWUnitId cwUnitId = inventTransOriginDTOLocal.catchWeightUnitId();
            if (cwUnitId)
            {
                // Catch weight quantity must be integer numbers though it is stored in a real data type; use integer for external data representation.
                _xmlWriter.writeAttributeString('CatchWeightQty', InventTrackingDimExport::int2String(real2int(inventTransDTOLocal.catchWeightQty())));
                _xmlWriter.writeAttributeString('CatchWeightUnitId', cwUnitId);
            }
            _xmlWriter.writeAttributeString('Date', InventTrackingDimExport::date2String(inventTransDTOLocal.stockQtyChangeDate()));
            InventTrackingDimExport::exportInventDimAsXML(_xmlWriter, inventDim);
            if (this.relatedProductionText())
            {
                _xmlWriter.writeAttributeString(this.parmInventTransOriginDTO().referenceCategory() == InventTransType::Production ? 'CoProducts' : 'EndItem', this.relatedProductionText());
            }

            if (this.parmInventTransOriginDTO().referenceCategory() == InventTransType::Sales
                && inventTransDTOLocal.statusReceipt() == StatusReceipt::None)
            {
                boolean pickedOnly = inventTransDTOLocal.statusIssue() == StatusIssue::Picked;
                _xmlWriter.writeAttributeString('PickedOnly', int2str(pickedOnly));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimTrackingInventTransNode construct()
    {
        return new InventDimTrackingInventTransNode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventDimTrackingInventTransNode</c> class and initialize it based on a packed version of the class data.
    /// </summary>
    /// <param name="_packedValues">
    ///    The packed version of the class data.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventDimTrackingInventTransNode</c> class.
    /// </returns>
    public static InventDimTrackingInventTransNode create(container _packedValues)
    {
        InventDimTrackingInventTransNode   inventDimTrackingInventTransNode = InventDimTrackingInventTransNode::construct();

        inventDimTrackingInventTransNode.unpack(_packedValues);
        return inventDimTrackingInventTransNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of this class based on the specified transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> transaction to base the instance on.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record related to the specified <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    ///    A new instance of this class.
    /// </returns>
    static public InventDimTrackingInventTransNode newFromInventTrans(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin)
    {
        return InventDimTrackingInventTransNode::newFromInventTransDTO(
            InventTrackingDimTracingInventTransDTO::newFromInventTrans(_inventTrans),
            InventTrackingDimTracingInventTransOriginDTO::newFromInventTransOrigin(_inventTransOrigin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransDTO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of this class based on the specified transaction.
    /// </summary>
    /// <param name="_inventTransDTO">
    ///    The inventory transaction information to base the instance on.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The inventory transaction originator information.
    /// </param>
    /// <returns>
    ///    A new instance of this class.
    /// </returns>
    static public InventDimTrackingInventTransNode newFromInventTransDTO(
        InventTrackingDimTracingInventTransDTO          _inventTransDTO,
        InventTrackingDimTracingInventTransOriginDTO    _inventTransOriginDTO)
    {
        var inventDimTrackingInventTransNode = InventDimTrackingInventTransNode::construct();

        inventDimTrackingInventTransNode.parmInventTransDTO(_inventTransDTO);
        inventDimTrackingInventTransNode.parmInventTransOriginDTO(_inventTransOriginDTO);
        inventDimTrackingInventTransNode.initDateInformation();

        return inventDimTrackingInventTransNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim getInventDim()
    {
        return this.parmInventTransDTO().inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId getInventDimId()
    {
        return this.parmInventTransDTO().inventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNodeForIssueTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isNodeForIssueTransaction()
    {
        return this.parmInventTransDTO().inventQty() < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ItemId getItemId()
    {
        return this.parmInventTransOriginDTO().itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeContainerToSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addNodeContainerToSet(Set _set)
    {
        // The set object automatically sorts its contents and the purpose of this code is to ensure that the inventory transactions are sorted by ItemId, StockQtyChangeDate, TransactionType, Originator, RecId
        _set.add([inventTransOriginDTO.itemId(), inventTransDTO.stockQtyChangeDate(), this.getTransactionType(), inventTransOriginDTO.recId(), inventTransDTO.recId()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTrackingTransactionType getTransactionType()
    {
        return InventTrackingTransactionType::InventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDTOSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean transactionDTOSet()
    {
        return this.parmInventTransOriginDTO().recId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>