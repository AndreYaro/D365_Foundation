<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictIndirectTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdWIPLedgerConflictIndirectTrans</c> class executes the extraction and verification of the
///    indirect transactions data, and calculates the balance for WIP.
/// </summary>
public class ProdWIPLedgerConflictIndirectTrans extends ProdWIPLedgerConflictTransBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(ProdWIPLedgerConflictIndirectTrans),
                                                          staticMethodStr(ProdWIPLedgerConflictIndirectTrans, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        ProdWIPLedgerConflictIndirectTrans  dataCollectionTask = new ProdWIPLedgerConflictIndirectTrans();
        container                           packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConflictMessagePhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a conflict message to the specified list of conflicts if a conflict has been detected on a
    ///    physical transaction.
    /// </summary>
    /// <param name="_conflicts">
    ///    The list of conflicts to which to add the conflict messages.
    /// </param>
    /// <param name="_prodWIPLedgerConflictIndirectUnionAll">
    ///    The view buffer that has indirect transaction data.
    /// </param>
    /// <param name="_prodTable">
    ///    The prodTable record of the corresponding conflicting transaction.
    /// </param>
    /// <param name="_modelGroupId">
    ///    The item group for the conflicting transaction.
    /// </param>
    /// <remarks>
    ///    This method does not indicate that a conflict has occurred. This must be checked before the method
    ///    is called.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addConflictMessagePhysical(
        List                                    _conflicts,
        ProdWIPLedgerConflictIndirectUnionAll   _prodWIPLedgerConflictIndirectUnionAll,
        ProdTable                               _prodTable,
        InventModelGroupId                      _modelGroupId)
    {
        // Apply site name to message if prodparameters are site specific
        String255 applySiteName(
            ProdParametersDim   _prodParametersDim,
            String255           _siteMessage,
            String255           _noSiteMessage)
        {
            String255   retVal;

            if (ProdParameters::find().ProdParamInventDimLookup == ProdParamInventDimLookup::Company)
            {
                retVal = _noSiteMessage;
            }
            else
            {
                retVal = strFmt(_siteMessage, _prodParametersDim.siteName());
            }

            return retVal;
        }

        // Always add this message
        if (InventModelGroup::find(_modelGroupId).PostOnhandPhysical == NoYes::No)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800112", _modelGroupId)));
        }
        else
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800113", _modelGroupId)));
        }

        ProdParametersDim prodParametersDim = ProdParametersDim::find(_prodTable.InventDimId);
        if (prodParametersDim.PostPickList == NoYes::No)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800114", "@GLS3800116")));
        }
        else
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800115", "@GLS3800117")));
        }
        if (prodParametersDim.PostReportedFinished == NoYes::No)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800118", "@GLS3800120")));
        }
        else
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800119", "@GLS3800121")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query that finds inventory transactions in a given period.
    /// </summary>
    /// <returns>
    ///    A query that finds inventory transactions.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query = new Query();
        boolean                 firstField = true;
        str                     rangeValue              = '';

        QueryBuildDataSource qbdsProdWIPLedgerConflictIndirectUnionAll = query.addDataSource(tableNum(ProdWIPLedgerConflictIndirectUnionAll));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addRange(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, TransDate)).value(SysQuery::range(
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate(),
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmToDate()));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addRange(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, LineType)).value(queryValue(InventValueReportLineType::Transaction));

        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, TransDate));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, Reference));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, Posted));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, PostingType));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, PostingTypeOffset));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, TransPostingType));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, DefaultDimension));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, LedgerDimension));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, LedgerDimensionOffset));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, Code));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, Voucher));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, Amount));
        qbdsProdWIPLedgerConflictIndirectUnionAll.addOrderByField(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, TransDate));

        if (inventLedgerConflictContract.parmExcludePhysicalToLedger() == NoYes::Yes)
        {
            // Transactions that are physical and not posted should be excluded
            // This is achieved by adding this range:
            // InventTransPostingType != InventTransPostingType::Physical or IsPosted != NoYes::No
            qbdsProdWIPLedgerConflictIndirectUnionAll.addRange(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, TransPostingType)).value(
                strFmt('( (%1 != %2) || (%3 != %4) )',
                fieldStr(ProdWIPLedgerConflictIndirectUnionAll,TransPostingType),
                any2int(ProdTransPostingType::Physical),
                fieldStr(ProdWIPLedgerConflictIndirectUnionAll, Posted),
                any2int(NoYes::No)));
        }

        QueryBuildDataSource qbdsProdTable = qbdsProdWIPLedgerConflictIndirectUnionAll.addDataSource(tableNum(ProdTable));
        qbdsProdTable.addSelectionField(fieldNum(ProdTable, ItemId));
        qbdsProdTable.addLink(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, Reference), fieldNum(ProdTable, ProdId));
        qbdsProdTable.joinMode(JoinMode::OuterJoin);
        qbdsProdTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsInventTable = qbdsProdTable.addDataSource(tableNum(InventTable));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, TableId));
        qbdsInventTable.addLink(fieldNum(ProdTable, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.joinMode(JoinMode::OuterJoin);
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsInventModelGroupItem = qbdsInventTable.addDataSource(tableNum(InventModelGroupItem));
        qbdsInventModelGroupItem.joinMode(JoinMode::OuterJoin);
        qbdsInventModelGroupItem.fetchMode(QueryFetchMode::One2One);
        qbdsInventModelGroupItem.relations(true);
        qbdsInventModelGroupItem.addSelectionField(fieldNum(InventModelGroupItem, ModelGroupId));

        // Filter on dimension attribute if selected in the dialog
        if (inventLedgerConflictContract.parmDimensionAttribute())
        {
            QueryBuildDataSource qbdsDimAttrValueComb = qbdsProdWIPLedgerConflictIndirectUnionAll.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttrValueComb.addLink(fieldNum(ProdWIPLedgerConflictIndirectUnionAll, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrValueComb.joinMode(JoinMode::OuterJoin);
            }
            else
            {
                qbdsDimAttrValueComb.joinMode(JoinMode::InnerJoin);
            }
            qbdsDimAttrValueComb.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrValueComb.addSelectionField(fieldNum(DimensionAttributeValueCombination, TableId)); // Trick to avoid selection of fields
            QueryBuildDataSource qbdsDimAttrLevelValueView = qbdsDimAttrValueComb.addDataSource(tableNum(DimensionAttributeLevelValueView));
            qbdsDimAttrLevelValueView.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            qbdsDimAttrLevelValueView.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(inventLedgerConflictContract.parmDimensionAttribute()));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::NoExistsJoin);
            }
            else
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::InnerJoin);
                qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance)).value(queryValue(inventLedgerConflictContract.parmEntityInstance()));
            }
            qbdsDimAttrValueComb.addSelectionField(fieldNum(DimensionAttributeLevelValueView, TableId)); // Trick to avoid selection of fields
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForConflicts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for conflicts in inventory transactions. The inventory transactions are stored in the
    /// <c>InventValueReportUnionAll</c> record.
    /// </summary>
    /// <param name="_prodWIPLedgerConflictIndirectUnionAll">
    /// The record with inventory transaction data.
    /// </param>
    /// <param name="_prodTable">
    /// The <c>prodTable</c> record of the corresponding conflicting transaction.
    /// </param>
    /// <param name="_itemGroupId">
    /// The item group for the transaction.
    /// </param>
    /// <returns>
    /// A list of conflict messages if any conflicts were detected.
    /// </returns>
    /// <remarks>
    ///    API changed. ItemType was not used.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List checkForConflicts(
        ProdWIPLedgerConflictIndirectUnionAll   _prodWIPLedgerConflictIndirectUnionAll,
        ProdTable                               _prodTable,
        ItemGroupId                             _itemGroupId)
    {
        List    retVal = new List(Types::Class);
        boolean conflict;

        // Apply posting rules
        void postingConflict()
        {
            conflict = this.postingRuleNotPosted(_prodWIPLedgerConflictIndirectUnionAll);

            if (conflict)
            {
                if (_prodWIPLedgerConflictIndirectUnionAll.TransPostingType == ProdTransPostingType::Financial)
                {
                    this.addConflictMessageFinancial(retVal, _prodWIPLedgerConflictIndirectUnionAll.PostingType, _itemGroupId);
                }
                else if (_prodWIPLedgerConflictIndirectUnionAll.TransPostingType == ProdTransPostingType::Physical)
                {
                    this.addConflictMessagePhysical(retVal, _prodWIPLedgerConflictIndirectUnionAll, _prodTable, _itemGroupId);
                }
            }
        }

        if (_prodWIPLedgerConflictIndirectUnionAll.TransPostingType != ProdTransPostingType::None)
        {
            // Apply rules
            if (_prodWIPLedgerConflictIndirectUnionAll.Posted)
            {
                this.validateMainAccount(retVal, _prodWIPLedgerConflictIndirectUnionAll.LedgerDimension, _prodWIPLedgerConflictIndirectUnionAll.LedgerDimensionOffset, _prodWIPLedgerConflictIndirectUnionAll.PostingType, _prodWIPLedgerConflictIndirectUnionAll.PostingTypeOffset);
            }
            postingConflict();
        }

        // All transactions with blank dimensions should have a conflict message
        if (inventLedgerConflictContract.parmIncludeBlankDimensions())
        {
            retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS332489"));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingRuleNotPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether a conflict has occurred on a non-transfer or non-journal physical transaction.
    /// </summary>
    /// <param name="_prodWIPLedgerConflictIndirectUnionAll">
    /// A record that has inventory transaction data.
    /// </param>
    /// <returns>
    /// true if a conflict has been detected; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean postingRuleNotPosted(ProdWIPLedgerConflictIndirectUnionAll _prodWIPLedgerConflictIndirectUnionAll)
    {
        return !_prodWIPLedgerConflictIndirectUnionAll.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the data collection that includes extraction and verification of the inventory
    /// transactions and calculates the balance for inventory.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        InventValueReportParm               inventValueReportParm;
        SRSDynaLink                         dynaLink = new SRSDynaLink();
        AmountMST                           balance = 0;
        InventLedgerConflictTmpBalance      inventLedgerConflictTmpBalance;
        InventLedgerConflictTmpConflict     inventLedgerConflictTmpConflict;
        boolean                             printAsterisk;
        Map                                 inventoryRelevantFields = new Map(Types::String, Types::Container);

        // Prepare drillThrough string
        dynaLink.context(SRSDynaLink::getReportRunContext(inventLedgerConflictContract.parmSRSPrintMediumType()));
        dynaLink.clientMenuFunction(menuitemDisplayStr(ProdIndirectTrans), MenuItemType::Display);
        dynaLink.tableId(tableNum(ProdIndirectTrans));

        Query query = this.buildQuery();
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;

        inventValueReportParm.SessionId = inventLedgerConflictContract.parmSessionId();
        inventValueReportParm.FromDate  = inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate();
        inventValueReportParm.insert();

        while (queryRun.next())
        {
            ProdWIPLedgerConflictIndirectUnionAll prodWIPLedgerConflictIndirectUnionAll = queryRun.get(tableNum(ProdWIPLedgerConflictIndirectUnionAll));
            InventModelGroupItem inventModelGroupItem = queryRun.get(tableNum(InventModelGroupItem));
            ProdTable prodTable = queryRun.get(tableNum(ProdTable));

            // we have to make amount negative, because we are using the same engine used for invent trans, but signs are different in the tables
            //ProdWIPLedgerConflictIndirectUnionAll.Amount = -ProdWIPLedgerConflictIndirectUnionAll.Amount;
            List comments = this.checkForConflicts(prodWIPLedgerConflictIndirectUnionAll, prodTable, inventModelGroupItem.ModelGroupId);
            if (comments.elements() > 0)
            {
                ListEnumerator listEnumerator = comments.getEnumerator();
                int messageNumber = 1;
                while (listEnumerator.moveNext())
                {
                    dynaLink.recordKey(queryValue(fieldNum(ProdIndirectTrans, RecId)) + ':' + queryValue(prodWIPLedgerConflictIndirectUnionAll.RecId));
                    InventLedgerConflictMessage inventLedgerConflictMessage = listEnumerator.current();
                    inventLedgerConflictTmpConflict.ItemId              = prodWIPLedgerConflictIndirectUnionAll.Code;

                    if (printAsterisk || messageNumber > 1)
                    {
                        inventLedgerConflictTmpConflict.Amount          = 0;
                    }
                    else
                    {
                        inventLedgerConflictTmpConflict.Amount          =  inventLedgerConflictMessage.parmAmountMultiplier() * prodWIPLedgerConflictIndirectUnionAll.Amount;
                    }

                    inventLedgerConflictTmpConflict.InventTransId       = prodWIPLedgerConflictIndirectUnionAll.Reference;
                    inventLedgerConflictTmpConflict.ReferenceCategory   = InventTransType::ProdLine;
                    inventLedgerConflictTmpConflict.TransDate           = prodWIPLedgerConflictIndirectUnionAll.TransDate;
                    inventLedgerConflictTmpConflict.PrintAsterisk       = false;
                    inventLedgerConflictTmpConflict.DrillThroughAction  = dynaLink.url();
                    inventLedgerConflictTmpConflict.MessageNumber       = messageNumber;
                    inventLedgerConflictTmpConflict.Comment             = inventLedgerConflictMessage.parmMessage();
                    inventLedgerConflictTmpConflict.SessionId           = inventLedgerConflictContract.parmSessionId();
                    inventLedgerConflictTmpConflict.ReportId            = inventLedgerConflictContract.parmReportId();
                    inventLedgerConflictTmpConflict.ReportDate          = inventLedgerConflictContract.parmReportDate();
                    inventLedgerConflictTmpConflict.ResourceType        = InventValueReportResourceType::Indirect;
                    inventLedgerConflictTmpConflict.insert();

                    messageNumber++;
                }
            }
            if (prodWIPLedgerConflictIndirectUnionAll.TransPostingType == ProdTransPostingType::Physical)
            {
                balance += prodWIPLedgerConflictIndirectUnionAll.Amount;
            }
        }

        select forupdate inventLedgerConflictTmpBalance where
            inventLedgerConflictTmpBalance.Module == InventLedgerConflictModule::WIP &&
            inventLedgerConflictTmpBalance.SessionId    == inventLedgerConflictContract.parmSessionId() &&
            inventLedgerConflictTmpBalance.ReportId     == inventLedgerConflictContract.parmReportId();

        inventLedgerConflictTmpBalance.Balance      += balance;
        inventLedgerConflictTmpBalance.Module       = InventLedgerConflictModule::WIP;
        inventLedgerConflictTmpBalance.SessionId    = inventLedgerConflictContract.parmSessionId();
        inventLedgerConflictTmpBalance.ReportId     = inventLedgerConflictContract.parmReportId();
        inventLedgerConflictTmpBalance.ReportDate   = inventLedgerConflictContract.parmReportDate();
        inventLedgerConflictTmpBalance.write();

        delete_from inventValueReportParm
              where inventValueReportParm.SessionId == inventLedgerConflictContract.parmSessionId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProdWIPLedgerConflictIndirectTrans construct()
    {
        return new ProdWIPLedgerConflictIndirectTrans();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>