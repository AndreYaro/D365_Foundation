<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataSyncContextSession</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailCDXDataSyncContextSession</c> contains information related to a specific download job session.
/// </summary>
internal class RetailCDXDataSyncContextSession
{
    private Microsoft.Dynamics.Retail.CommerceDataExchange.DataPackage dataPackage;

    private Set                             dataStoreRecIds;
    private int                             totalRowsAffected;
    private boolean                         skipJobSync;
    private RetailCDXDownloadSessionType    sessionType;
    private RetailCDXFilePathOrGuid         targetStorage;
    private RetailCDXSessionNumber          sessionNumber;
    private RetailCDXFileSize               fileSize;
    private RetailCDXCheckSum               checkSum;
    private int64                           replacedSessionDataStoreCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSessionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the session number.
    /// </summary>
    /// <param name = "_sessionNumber">The session number.</param>
    /// <returns>The session number.</returns>
    internal RetailCDXSessionNumber parmSessionNumber(RetailCDXSessionNumber _sessionNumber = sessionNumber)
    {
        sessionNumber = _sessionNumber;

        return sessionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipJobSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the parameter that determines if the job sync should be skipped.
    /// </summary>
    /// <param name = "_skipJobSync">Determines if the job sync should be skipped.</param>
    /// <returns>The parameter that determines if the job sync should be skipped.</returns>
    internal boolean parmSkipJobSync(boolean _skipJobSync = skipJobSync)
    {
        skipJobSync = _skipJobSync;

        return skipJobSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the data package that is associated with this session.
    /// </summary>
    /// <param name = "_dataPackage">The data package that is associated with this session.</param>
    /// <returns>The data package that is associated with this session.</returns>
    internal Microsoft.Dynamics.Retail.CommerceDataExchange.DataPackage parmDataPackage(Microsoft.Dynamics.Retail.CommerceDataExchange.DataPackage _dataPackage = dataPackage)
    {
        dataPackage = _dataPackage;

        return dataPackage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the file size of the session package.
    /// </summary>
    /// <param name = "_fileSize">The file size of the session package.</param>
    /// <returns>The file size of the session package.</returns>
    internal RetailCDXFileSize parmFileSize(RetailCDXFileSize _fileSize = fileSize)
    {
        fileSize = _fileSize;

        return fileSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the session package storage GUID or path location.
    /// </summary>
    /// <param name = "_targetStorage">The session package storage GUID or path location.</param>
    /// <returns>The session package storage GUID or path location.</returns>
    internal RetailCDXFilePathOrGuid parmTargetStorage(RetailCDXFilePathOrGuid _targetStorage = targetStorage)
    {
        targetStorage = _targetStorage;

        return targetStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalRowsAffected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the total number of rows affected.
    /// </summary>
    /// <param name = "_totalRowsAffected">The total number of rows affected.</param>
    /// <returns>The total number of rows affected.</returns>
    internal int parmTotalRowsAffected(int _totalRowsAffected = totalRowsAffected)
    {
        totalRowsAffected = _totalRowsAffected;

        return totalRowsAffected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the checksum of the data package file.
    /// </summary>
    /// <param name = "_checkSum">The checksum of the data package file.</param>
    /// <returns>The checksum of the data package file.</returns>
    internal RetailCDXCheckSum parmCheckSum(RetailCDXCheckSum _checkSum = checkSum)
    {
        checkSum = _checkSum;

        return checkSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacedSessionDataStoreCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the total number of sessions for the current datastore replaced by the newly created session.
    /// </summary>
    /// <param name = "_replacedSessionDataStoreCount">The total number of sessionDataStores replaced by the newly created session.</param>
    /// <returns>The total number of sessionDataStores replaced by the newly created session.</returns>
    internal int64 parmReplacedSessionDataStoreCount(int64 _replacedSessionDataStoreCount = replacedSessionDataStoreCount)
    {
        replacedSessionDataStoreCount = _replacedSessionDataStoreCount;

        return replacedSessionDataStoreCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the session type.
    /// </summary>
    /// <param name = "_checkSum">The session type.</param>
    /// <returns>The session type.</returns>
    /// <remarks>
    /// Default or DataFiltered.
    /// </remarks>
    internal RetailCDXDownloadSessionType parmSessionType(RetailCDXDownloadSessionType _sessionType = sessionType)
    {
        sessionType = _sessionType;

        return sessionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(RetailCDXDownloadSessionType _sessionType, boolean _skipJobSync = false)
    {
        sessionType = _sessionType;
        skipJobSync = _skipJobSync;
        dataStoreRecIds = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the data store record Id to the session context.
    /// </summary>
    /// <param name = "_dataStoreRecId">The data store record Id.</param>
    internal void addDataStore(RefRecId _dataStoreRecId)
    {
        if (!dataStoreRecIds.in(_dataStoreRecId))
        {
            dataStoreRecIds.add(_dataStoreRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataStores</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of data store record Ids.
    /// </summary>
    /// <returns>The list of data store record Ids.</returns>
    internal Set getDataStores()
    {
        return dataStoreRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>