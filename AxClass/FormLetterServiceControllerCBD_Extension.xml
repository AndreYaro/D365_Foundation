<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterServiceControllerCBD_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FormLetterServiceControllerCBD_Extension</c> is an extension class of the <c>FormLetterServiceController</c>
/// that supports ER runtime print destinations.
/// </summary>
[ExtensionOf(classStr(FormLetterServiceController))]
internal final class FormLetterServiceControllerCBD_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSupportedCBDReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if ER destination on runtime form is supported.
    /// </summary>
    /// <returns>true if ER destination on runtime form is supported; otherwise, false.</returns>
    internal boolean isSupportedCBDReport()
    {
        return CBDDestinationsFormLetterEngine::isSupportedPrintMgmtDocType(this.printMgmtDocumentType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>analyzePrintManagementSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the print management setup.
    /// </summary>
    /// <returns>A container of analyze results.</returns>
    internal container analyzePrintManagementSetup()
    {
        return CBDDestinationsFormLetterEngine::analyzePrintManagementSetup(this, this.printMgmtDocumentType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>callERPrintSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls ER destinations forms.
    /// </summary>
    /// <param name = "_formLetter">An instance of the class <c>FormLetterServiceController</c>.</param>
    /// <returns>true if ER destinations were selected; otherwise, false.</returns>
    internal static boolean callERPrintSettingsFormletter(FormLetterServiceController _formLetter)
    {
        boolean ret;

        NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult result = NonSSRSPrintMgmtAdapter::promptAndRestoreAdditionalParameters(
            CBDDestinationsFormLetterEngine::getFormatNamesDestinationMapByFormLetter(_formLetter, _formLetter.printMgmtDocumentType()),
            NonSSRSPrintMgmtPromptExtensionParameters::newFromPacked(_formLetter.printManagementExtensionsSettings()));

        if (result.parmPromptResult())
        {
            ret = true;

            if (result.parmExtensionParameters() &&
                !result.parmExtensionParameters().isEmpty())
            {
                _formLetter.updatePrintManagementExtensionsSettings(result.parmExtensionParameters().pack());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutput</Name>
				<Source><![CDATA[
    protected boolean checkClientOutput(boolean _showError)
    {
        boolean ret = next checkClientOutput(_showError);

        if (ret && this.isSupportedCBDReport())
        {
            boolean isSSRSPrintSetupExists;

            [isSSRSPrintSetupExists] = this.analyzePrintManagementSetup();

            if (!isSSRSPrintSetupExists)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>