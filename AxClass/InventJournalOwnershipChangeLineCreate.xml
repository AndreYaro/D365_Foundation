<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalOwnershipChangeLineCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalOwnershipChangeLineCreate</c> class controls inventory ownership change journal line creation.
/// </summary>
public class InventJournalOwnershipChangeLineCreate extends RunBaseBatch implements BatchRetryable
{
    QueryRun queryRun;

    DialogRunbase   dialog;
    DialogField     statusIssueField;

    JournalId                                               journalId;
    InventJournalOwnershipChangeLineCreateQueryStatusIssue  statusIssueFilter;

    private const int CurrentVersion = 1;
    #LOCALMACRO.CurrentList
        journalId,
        statusIssueFilter
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        queryRun = new QueryRun(InventJournalOwnershipChangeLineCreateQueryBuilder::construct().getQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventJournalOwnershipChangeLineCreate</c> class from a journal ID.
    /// </summary>
    /// <param name = "_journalId">ID of the journal for which the lines are created.</param>
    /// <returns>An instance of the <c>InventJournalOwnershipChangeLineCreate</c> class.</returns>
    private static InventJournalOwnershipChangeLineCreate newFromJournalId(JournalId _journalId)
    {
        var lineCreate = new InventJournalOwnershipChangeLineCreate();

        lineCreate.getLast();
        lineCreate.parmJournalId(_journalId);

        return lineCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes inventory ownership change journal line creation in UI.
    /// </summary>
    /// <param name = "_args">Arguments coming from the calling form. Should contain an <c>InventJournalTable</c> record.</param>
    public static void main(Args _args)
    {
        if (!_args.record() || _args.record().TableId != tableNum(InventJournalTable))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        InventJournalTable journalTable = _args.record();
        var lineCreation = InventJournalOwnershipChangeLineCreate::newFromJournalId(journalTable.JournalId);

        if (lineCreation.prompt())
        {
            lineCreation.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    private JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs inventory ownership change journal line creation.
    /// </summary>
    public void run()
    {
        var queryBuilder = InventJournalOwnershipChangeLineCreateQueryBuilder::newFromQuery(queryRun.query());
        queryBuilder.setStatusIssue(statusIssueFilter);

        InventJournalOwnershipChangeLineCreator::newFromParameters(journalId, new QueryRun(queryBuilder.getQuery()))
            .createLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        statusIssueField = dialog.addFieldValue(enumStr(InventJournalOwnershipChangeLineCreateQueryStatusIssue), statusIssueFilter, "@Consignment:Enum_InventJournalOwnershipChangeLineCreateQueryStatusIssue");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        statusIssueFilter = statusIssueField.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Consignment:Caption_InventJournalOwnershipChangeLineCreate";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                container packedQuery;
                [version, #CurrentList, packedQuery] = _packedClass;

                if (packedQuery)
                {
                   queryRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>