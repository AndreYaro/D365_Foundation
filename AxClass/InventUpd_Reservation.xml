<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_Reservation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventUpd_Reservation</c> class sets the status of inventory transactions as <c>Reserved
///    ordered</c> when reserved against a purchase order or <c>Reserved physical</c> when reserved
///    against stock.
/// </summary>
class InventUpd_Reservation extends InventUpdate
{
    // new parameters
    InventQty           reservation;
    InventDim           inventDimCriteria;
    InventDimParm       inventDimParm;
    InventDim           inventDimOnHandSelectionCriteria;
    InventDimFixed      inventDimFixed;

    // update result
    InventQty           updReservOrdered;
    InventQty           updReservPhysical;
    PdsCWInventQty      cwUpdReservOrdered;
    PdsCWInventQty      cwUpdReservPhysical;

    InventTransOriginId markingRefInventTransOrigin;

    // Show infolog
    boolean             showInfo;

    PdsCWInventQty      cwReservation;
    boolean             cwForceActual;

    TmpPdsBatchAttribSelect tmpAttrSel;
    // <GEERU>
    InventTransId       refInventTransId;
    boolean             reserveLessPhysicalFirst;
    boolean             updateMarking;
    // </GEERU>
    private boolean     updateMarkingWithAnyStatus;
    boolean             onlyUnReservePhysicalReserved;
    boolean             reservationFailed;
    boolean             throwOnInsufficientOnHand;
    boolean             onlyReserveOnWHSEnabledWarehouses;
    boolean             onHandCriteriaSet;
    private  boolean    hasDeterminedSerialNumberControlled;
    private  boolean    isSerialNumberControlled;

    protected InventUpdateReservationParameters reservationParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmReservationParameters</Name>
				<Source><![CDATA[
    public InventUpdateReservationParameters parmReservationParameters(InventUpdateReservationParameters _reservationParameters = reservationParameters)
    {
        reservationParameters = _reservationParameters;
        return reservationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is serial number controlled.
    /// </summary>
    /// <returns>true if the item is serial number controlled; otherwise, false.</returns>
    public boolean isSerialNumberControlled()
    {
        if (!hasDeterminedSerialNumberControlled)
        {
            isSerialNumberControlled = movement.inventDimGroupSetup().getFieldSetup(fieldNum(InventDim, InventSerialId)).isSerialNumberControlEnabled()  ? true : false;
            hasDeterminedSerialNumberControlled = true;
        }

        return isSerialNumberControlled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkingRefInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransOriginId parmMarkingRefInventTransOrigin(InventTransOriginId _markingRefInventTransOrigin = markingRefInventTransOrigin)
    {
        markingRefInventTransOrigin = _markingRefInventTransOrigin;
        return markingRefInventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReservationValidMarked</Name>
				<Source><![CDATA[
    boolean checkReservationValidMarked(InventMovement _movement, InventDim _inventDim)
    {
        if (_movement.inventDimId() != InventDim::findOrCreate(_inventDim).InventDimId)
        {
            InventDim inventDimOrig = _movement.inventdim();

            InventDimGroupFieldSetupEnumerator enumerator = movement.inventDimGroupSetup().getFieldSetupEnumerator();
            while (enumerator.moveNext())
            {
                InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();

                if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isFinancialInventoryEnabled())
                {
                    FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
                    if (_inventDim.(inventDimFieldId) != inventDimOrig.(inventDimFieldId)
                        && (inventDimOrig.(inventDimFieldId)
                        || !InventUpdCheckReservationValidMarkedFlight::instance().isEnabled()))
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateMovement</Name>
				<Source><![CDATA[
    protected boolean checkUpdateMovement(TransDate _transDate)
    {
        boolean ok                    = true;

        if (! movement.checkUpdateStandard(_transDate,NoYes::No))
        {
            ok = false;
        }

        if (reservation < 0)
        {
            if (! movement.checkDimFieldsValid(inventDimCriteria,null))
            {
                ok = false;
            }
        }
        else if (! movement.checkDimFieldsValid(movement.inventdim(),null))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvalidMarking</Name>
				<Source><![CDATA[
    void deleteInvalidMarking(InventMovement _movement, InventDim _inventDim)
    {
        InventTrans     inventTrans;
        boolean         alreadyPrinted;

        boolean deleteMarking = !this.checkReservationValidMarked(_movement, _inventDim);

        if (deleteMarking)
        {
            while select forupdate inventTrans
                where inventTrans.InventTransOrigin == _movement.inventTransOriginId()
                   &&
                     (inventTrans.StatusReceipt     == StatusReceipt::Ordered
                   || inventTrans.StatusReceipt     == StatusReceipt::QuotationReceipt
                   || inventTrans.StatusIssue       == StatusIssue::OnOrder
                   || inventTrans.StatusIssue       == StatusIssue::ReservPhysical
                   || inventTrans.StatusIssue       == StatusIssue::ReservOrdered
                   || inventTrans.StatusIssue       == StatusIssue::QuotationIssue)
            {
                if (inventTrans.deleteInvalidMarking() && ! alreadyPrinted )
                {
                    if (_movement && _movement.buffer() && FormDataUtil::isFormDataSource(_movement.buffer()))
                    {
                        info("@SYS79365");
                    }
                    alreadyPrinted = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new( InventMovement        _inventMovement)
    {
        super(_inventMovement);

        cwForceActual = false;
        throwOnInsufficientOnHand = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    InventDim parmInventDimCriteria(InventDim _inventDimCriteria  = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFixed</Name>
				<Source><![CDATA[
    InventDimFixed parmInventDimFixed(InventDimFixed _inventDimFixed = inventDimFixed)
    {
        inventDimFixed = _inventDimFixed;
        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyReserveOnWHSEnabledWarehouses</Name>
				<Source><![CDATA[
    public boolean parmOnlyReserveOnWHSEnabledWarehouses(boolean _onlyReserveOnWHSEnabledWarehouses = onlyReserveOnWHSEnabledWarehouses)
    {
        onlyReserveOnWHSEnabledWarehouses = _onlyReserveOnWHSEnabledWarehouses;
        return onlyReserveOnWHSEnabledWarehouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyUnReservePhysicalReserved</Name>
				<Source><![CDATA[
    public boolean parmOnlyUnReservePhysicalReserved(boolean _onlyUnReservePhysicalReserved = onlyUnReservePhysicalReserved)
    {
        onlyUnReservePhysicalReserved = _onlyUnReservePhysicalReserved;

        return onlyUnReservePhysicalReserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWForceActual</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets or sets the cwForceActual parameter.
    /// </summary>
    /// <param name="_cwForceActual">
    /// Value to be set.
    /// </param>
    /// <returns>
    /// The cwForceActual parameter.</returns>
    public boolean parmPdsCWForceActual(boolean _cwForceActual = cwForceActual)
    {
        cwForceActual = _cwForceActual;

        return cwForceActual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets or sets the cwReservation parameter.
    /// </summary>
    /// <param name="_cwReservation">
    /// Value to be set.
    /// </param>
    /// <returns>
    /// The cwReservation parameter.
    /// </returns>
    public PdsCWInventQty parmPdsCWInventQty(
        PdsCWInventQty _cwReservation = cwReservation)
    {
        cwReservation = _cwReservation;

        return cwReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsTmpAttrSel</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets or sets the tmpAttrSel record.
    /// </summary>
    /// <param name="_prevTmpAttrSel">
    /// Record to be set.
    /// </param>
    /// <returns>
    /// The tmpAttrSel record.
    /// </returns>
    public TmpPdsBatchAttribSelect parmPdsTmpAttrSel(
        TmpPdsBatchAttribSelect _prevTmpAttrSel = tmpAttrSel)
    {
        if (!prmisDefault(_prevTmpAttrSel))
        {
            tmpAttrSel = _prevTmpAttrSel;
        }

        return tmpAttrSel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservation</Name>
				<Source><![CDATA[
    InventQty parmReservation(InventQty _reservation = reservation)
    {
        reservation = _reservation;
        return reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReserveLessPhysicalFirst_RU</Name>
				<Source><![CDATA[
    boolean parmReserveLessPhysicalFirst_RU(boolean _reserveLessPhysicalFirst = reserveLessPhysicalFirst)
    {
        reserveLessPhysicalFirst = _reserveLessPhysicalFirst;
        return reserveLessPhysicalFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfo</Name>
				<Source><![CDATA[
    boolean parmShowInfo(boolean _showInfo = showInfo)
    {
        showInfo = _showInfo;
        return showInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateMarking_RU</Name>
				<Source><![CDATA[
    boolean parmUpdateMarking_RU(boolean _updateMarking = updateMarking)
    {
        updateMarking = _updateMarking;
        return updateMarking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateMarkingWithAnyStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmUpdateMarkingWithAnyStatus(boolean _updateMarkingWithAnyStatus = updateMarkingWithAnyStatus)
    {
        updateMarkingWithAnyStatus = _updateMarkingWithAnyStatus;
        return updateMarkingWithAnyStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationFailed</Name>
				<Source><![CDATA[
    public boolean parmReservationFailed()
    {
        return reservationFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowOnInsufficientOnHand</Name>
				<Source><![CDATA[
    public boolean parmThrowOnInsufficientOnHand(boolean _throwOnInsufficientOnHand = throwOnInsufficientOnHand)
    {
        throwOnInsufficientOnHand = _throwOnInsufficientOnHand;

        return throwOnInsufficientOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsGetLastBoxQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the value of the catch weight quantity field is removing quantity from the last box
    /// and how much.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record with reserved quantity.
    /// </param>
    /// <param name="_cwQty">
    /// A catch weight quantity being released from reservation.
    /// </param>
    /// <returns>
    /// A container to specify if the catch weight quantity is the last box and the related order quantity.
    /// </returns>
    private container pdsGetLastBoxQty(
        InventTrans     _inventTrans,
        PdsCWInventQty  _cwQty)
    {
        ItemId                  itemId = movement.itemId();
        InventDimParm           lclInventDimParm;

        InventQty inventQty = 0;

        if (_inventTrans)
        {
            InventOnHandQty cwInventOnhandQty = InventOnHandQty::newItemId(itemId);
            InventDim lclInventDimCriteria = _inventTrans.inventDim();
            lclInventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(itemId));
            lclInventDimParm.initFromInventDim(lclInventDimCriteria);
            lclInventDimParm.ItemIdFlag = NoYes::Yes;

            cwInventOnhandQty.parmInventDim(lclInventDimCriteria);
            cwInventOnhandQty.parmInventDimParm(lclInventDimParm);

            if (cwInventOnhandQty
                && cwInventOnhandQty.pdsCWAvailReservation(InventParameters::find().ReserveOnOrdered) == 0)
            {
                // Quantity to remove = Total quantity - remaining CW units in minimum quantity
                inventQty = _inventTrans.Qty - PdsCatchWeight::minInventQty(itemId, _inventTrans.PdsCWQty + _cwQty);
            }
        }

        return [inventQty != 0 ,-inventQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsLastCWUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the value of the catch weight quantity field is the last box.
    /// </summary>
    /// <param name="_inventDim">
    ///     Inventory dimension to check against.
    /// </param>
    /// <param name="_cwQty">
    ///     A catch weight quantity being reserved.
    /// </param>
    /// <returns>
    ///     A container to specify if the catch weight quantity is the last box and the related order quantity.
    /// </returns>
    /// <remarks>
    ///     If the requested catch weight quantity is the last box, the returned inventory quantity will get
    ///     sanitized against the catch weight min/max requirements. Because of this, not full remaining inventory quantity
    ///     might be used.
    /// </remarks>
    public container pdsLastCWUnit(
        InventDim       _inventDim,
        PdsCWInventQty  _cwQty)
    {
        ItemId          itemId = movement.itemId();
        InventDimParm   lclInventDimParm;
        PdsCWInventQty  cwQty = movement.transSign() * _cwQty;

        InventQty qty = 0;

        InventDim lclInventDimCriteria = InventDim::findDim(_inventDim);

        if (lclInventDimCriteria)
        {
            lclInventDimCriteria.clearNotActiveDim( InventDimGroupSetup::newItemId(itemId));
            lclInventDimParm.initFromInventDim(lclInventDimCriteria);

            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(itemId, lclInventDimCriteria, lclInventDimParm);
            NoYes reservedOnOrdered = InventParameters::find().ReserveOnOrdered;

            if (inventOnHandQty
                && inventOnHandQty.pdsCWAvailReservation(reservedOnOrdered) == cwQty)
            {
                qty = inventOnHandQty.availReservation(reservedOnOrdered);
                qty = min(PdsCatchWeight::maxInventQty(itemId, abs(_cwQty)), qty);
                qty = max(PdsCatchWeight::minInventQty(itemId, abs(_cwQty)), qty);
                qty = qty * movement.transSign();
            }
        }

        return [qty != 0,qty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSInventReserveDeltaQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setter for <c>whsInventReserveDeltaQueryBuilderSpecified</c> property of a class.
    /// </summary>
    /// <param name="_whsInventReserveDeltaQueryBuilderSpecified">
    /// New value for <c>whsInventReserveDeltaQueryBuilderSpecified</c> property of a class.
    /// </param>
    public void setWHSInventReserveDeltaQueryBuilder(WHSInventReserveDeltaQueryBuilder _whsInventReserveDeltaQueryBuilderSpecified)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSInventReserveQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setter for <c>whsInventReserveQueryBuilderSpecified</c> property of a class.
    /// </summary>
    /// <param name="_whsInventReserveQueryBuilderSpecified">
    /// New value for <c>whsInventReserveQueryBuilderSpecified</c> property of a class.
    /// </param>
    public void setWHSInventReserveQueryBuilder(WHSInventReserveQueryBuilder _whsInventReserveQueryBuilderSpecified)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSReservationHierarchyStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setter for <c>whsReservationHierarchyLevelStrategyList</c> property of the class.
    /// </summary>
    /// <param name="_whsReservationHierarchyLevelStrategyList">
    /// New value for <c>whsReservationHierarchyLevelStrategyList</c> property of the class.
    /// </param>
    public void setWHSReservationHierarchyStrategyList(List _whsReservationHierarchyLevelStrategyList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatchCriteriaSameBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates inventDim criteria for same batch requirements based on the batch passed in or the existing batch for the movement.
    /// </summary>
    /// <param name="_batchId">
    /// The batch idea that should be used to update the batch criteria.
    /// This is optional. If not specified the batch for the first transaction that is past the <c>OnOrder</c> status will be used.
    /// </param>
    /// <returns>
    /// The new inventDim with updated criteria for same batch requirements.
    /// </returns>
    protected InventDim updateBatchCriteriaSameBatch(InventBatchId _batchId = '')
    {
        InventBatch inventBatch;
        InventDim   retInventDim;
        retInventDim.data(this.determineInventDimOnHandCriteria());

        if (movement.pdsSameLotReservation()
        && !retInventDim.InventBatchId)
        {
            if (!_batchId)
            {
                inventBatch = movement.pdsSameLotReservationBatch();
            }
            else
            {
                inventBatch = InventBatch::find(_batchId, movement.itemId());
            }

            if (inventBatch)
            {
                retInventDim.InventBatchId = inventBatch.InventBatchId;
                retInventDim = InventDim::findOrCreate(retInventDim);
                inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimFixedClass::fieldId2Idx(fieldNum(InventDim,InventBatchId)));
            }
        }

        return retInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles synching the load lines with new transactions.
    /// </summary>
    /// <param name = "_inventUpd_Reservation">
    /// Current instance of <c>InventUpd_Reservation</c>.
    /// </param>
    /// <param name = "_result">
    /// An instance of <c>EventHandlerResult</c> where the subscriber can provide the result of the operation.
    /// </param>
    delegate void reservationCompleted(
        InventUpd_Reservation _inventUpd_Reservation,
        EventHandlerResult    _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInventDimReservationCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the inventory dimensions used for reservation criteria to be adjusted before the reservation takes place.
    /// </summary>
    /// <param name = "_inventDimCriteria">The <c>InventDim</c> inventory dimensions used as criteria.</param>
    /// <param name = "_inventDimParm">The <c>InventDimParm used for the criteria.</c></param>
    /// <returns>The adjusted <c>InventDim</c> inventory dimensions that will be used as criteria.</returns>
    protected InventDim adjustInventDimReservationCriteria(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        return _inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves the inventory.
    /// </summary>
    protected void updateReservation()
    {
        if (reservation && movement.canBeReserved())
        {
            if (!movement.checkUpdateReservation(this))
            {
                throw error("@SYS18447");
            }

            this.updateReservationImpl();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationImpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes actual logic to reserve inventory.
    /// </summary>
    [Hookable(false)]
    internal void updateReservationImpl()
    {
        if (reservation > 0)
        {
            this.updateReserveLess();
        }
        else
        {
            this.updateReserveMore();
        }

        EventHandlerResult result = new EventHandlerResult();
        this.reservationCompleted(this, result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        using (var telemetryTask = new InventUpdateInstrumentationTask(this))
        {
            InventInventoryDataServiceSoftReservationHelper::checkSoftReservation(movement);

            ttsbegin;

            inventDimCriteria = this.adjustInventDimReservationCriteria(inventDimCriteria, inventDimParm);
   
            if (!this.checkUpdateMovement(movement.transDate()))
            {
                throw error("@SYS18447");
            }

            this.updateReservation();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomIssueInventTrans</Name>
				<Source><![CDATA[
    internal boolean validateCustomIssueInventTrans(
        StatusIssue                             _fromStatus,
        StatusIssue                             _toStatus,
        InventDimId                             _inventDimId,
        InventDim                               _inventDimCriteria,
        InventDimParm                           _inventDimParm,
        InventTransChildType                    _inventTransChildType,
        InventTransChildRefId                   _inventTransChildRefId,
        InventUpdateCustomTransIssueListItem    _listItem)
    {
        return (!markingRefInventTransOrigin || _listItem.inventTrans.MarkingRefInventTransOrigin == markingRefInventTransOrigin)
                && super(_fromStatus, _toStatus, _inventDimId, _inventDimCriteria, _inventDimParm, _inventTransChildType, _inventTransChildRefId, _listItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLessInventTrans</Name>
				<Source><![CDATA[
    private InventTrans updateReserveLessInventTrans()
    {
        StatusIssue statusIssueFrom = StatusIssue::ReservPhysical;
        StatusIssue statusIssueTo = StatusIssue::ReservOrdered;

        if (this.parmOnlyUnReservePhysicalReserved())
        {
            statusIssueTo   = StatusIssue::ReservPhysical;
        }

        InventTrans inventTrans;

        if (this.parmCustomInventTransListInitialized())
        {
            this.initializeInventTransToIssueListWithCustomInventTransList(statusIssueFrom,
                                                                           statusIssueTo,
                                                                           inventDimCriteria.InventDimId,
                                                                           inventDimCriteria,
                                                                           inventDimParm,
                                                                           movement.transChildType(),
                                                                           movement.transChildRefId());

            this.getNextInventTransToIssue(inventTrans);
        }
        else
        {
            inventTrans = this.updateReserveLessQueryInventTrans(statusIssueFrom, statusIssueTo);
        }

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLessQueryInventTrans</Name>
				<Source><![CDATA[
    protected InventTrans updateReserveLessQueryInventTrans(StatusIssue _statusIssueFrom, StatusIssue _statusIssueTo)
    {
        InventTrans         inventTrans;
        InventDim           inventDim;
        SysDaQueryObject    queryObject = new SysDaQueryObject(inventTrans);
        
        if (!reserveLessPhysicalFirst)
        {
            queryObject.reverseHint = true;
        }
        queryObject.forUpdateHint = true;

        this.buildInventTransOrderByClause(queryObject);

        if (inventDimParm.isAllFlagNo())
        {
            queryObject.whereClause(this.buildInventTransWhereClause(inventTrans, _statusIssueFrom, _statusIssueTo));
        }
        else
        if (inventDimCriteria.InventDimId && inventDimParm.isAllFlagYes())
        {
            SysDaQueryExpression inventDimIdClause =    new SysDaEqualsExpression(
                                                            new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, InventDimId)),
                                                            new SysDaValueExpression(inventDimCriteria.InventDimId));
            queryObject.whereClause(this.buildInventTransWhereClause(inventTrans, _statusIssueFrom, _statusIssueTo)
                            .and(inventDimIdClause));
        }
        else
        {
            queryObject.forcePlaceholdersHint = true;
            queryObject.whereClause(this.buildInventTransWhereClause(inventTrans, _statusIssueFrom, _statusIssueTo));
            
            InventDim::dimAddInventDimExistsJoin(
            queryObject,
            new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, InventDimId)),
            inventDim,
            inventDimCriteria,
            inventDimParm);
        }

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransOrderByClause</Name>
				<Source><![CDATA[
    private void buildInventTransOrderByClause(SysDaQueryObject _queryObject)
    {
        _queryObject.orderByClause().add(fieldStr(InventTrans, StatusIssue));
        _queryObject.orderByClause().add(fieldStr(InventTrans, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for InventTrans query.
    /// </summary>
    /// <param name = "_inventTrans">
    ///     The <c>InventTrans</c> record.
    /// </param>
    /// <param name = "_statusIssueFrom">
    ///     The issue status from.
    /// </param>
    /// <param name = "_statusIssueTo">
    ///     The issue status to.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    protected SysDaQueryExpression buildInventTransWhereClause(InventTrans _inventTrans, StatusIssue _statusIssueFrom, StatusIssue _statusIssueTo)
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin)),
                                                new SysDaValueExpression(movement.inventTransOriginId()))
                                            .and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, TransChildType)),
                                                new SysDaValueExpression(movement.transChildType())))
                                            .and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, TransChildRefId)),
                                                new SysDaValueExpression(movement.transChildRefId())))
                                            .and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusReceipt)),
                                                new SysDaValueExpression(StatusReceipt::None)))
                                            .and(new SysDaGreaterThanOrEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                                                new SysDaValueExpression(_statusIssueFrom)))
                                            .and(new SysDaLessThanOrEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                                                new SysDaValueExpression(_statusIssueTo)));
        if (markingRefInventTransOrigin)
        {
            whereClause =   whereClause.and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, MarkingRefInventTransOrigin)),
                                                new SysDaValueExpression(markingRefInventTransOrigin)));
        }

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLess</Name>
				<Source><![CDATA[
    protected void updateReserveLess()
    {
        boolean         showOnlyOnce = true;
        InventQty       addQty   = reservation;
        PdsCWInventQty  cwAddQty = cwReservation;
        InventDimParm   inventDimParmLocal;

        setPrefix("@SYS15961");
        setPrefix(strFmt("@SYS26868",#PreFixFieldValue(inventTransOrigin,ReferenceCategory, movement.transType()),
                                     #PreFixFieldValue(inventTransOrigin,ReferenceId,movement.transRefId())));

        setPrefix(strFmt("@SYS26868",#PreFixFieldValue(inventTrans,ItemId, movement.itemId()),
                                     #PreFixFieldValue(inventTransOrigin,InventTransId, movement.transId())));

        InventTrans inventTrans = this.updateReserveLessInventTrans();

        while (inventTrans)
        {
            if (this.isUpdateReserveLessCompleted(inventTrans, addQty, cwAddQty))
            {
                break;
            }

            if (!cwForceActual && movement.pdsCWItem())
            {
                InventTrans pdsInventTrans;
                InventDim   pdsInventDim;

                select firstonly pdsInventTrans
                    where  pdsInventTrans.InventTransOrigin == movement.inventTransOriginId()
                        && pdsInventTrans.TransChildType    == movement.transChildType()
                        && pdsInventTrans.TransChildRefId   == movement.transChildRefId()
                        && pdsInventTrans.StatusIssue       >= StatusIssue::ReservPhysical
                        && pdsInventTrans.StatusIssue       <= StatusIssue::ReservOrdered
                        && pdsInventTrans.RecId             != inventTrans.RecId
                    #InventDimExistsJoin(pdsInventTrans.inventDimId,
                                             pdsInventDim,
                                             inventDimCriteria,
                                             InventDimParm);
                if (!pdsInventTrans)
                {
                    boolean     pdsLastBox;
                    InventQty   pdsNomQty;

                    [pdsLastBox,pdsNomQty] = this.pdsGetLastBoxQty(inventTrans, cwAddQty);

                    if (pdsLastBox)
                    {
                        reservation = pdsNomQty;
                        addQty = reservation;
                    }
                }
            }

            InventQty updateNowQuantity = this.transactionIssueQuantity(inventTrans, -addQty);

            if (updateNowQuantity > inventTrans.Qty)
            {
                inventTrans.updateSplit(updateNowQuantity, -cwAddQty);
            }

            addQty      += inventTrans.Qty;
            cwAddQty    += inventTrans.PdsCWQty;

            if (inventTrans.StatusIssue== StatusIssue::ReservPhysical)
            {
                InventUpdateProcessReceiptTransactionListsCache::cacheInstance();
                this.updateDimReservePhysical(InventDim::find(inventTrans.InventDimId),-inventTrans.Qty, 0, -inventTrans.PdsCWQty);
                InventUpdateProcessReceiptTransactionListsCache::processCacheValue();

                updReservPhysical   -= inventTrans.Qty;
                cwUpdReservPhysical -= inventTrans.PdsCWQty;
            }
            else
            {
                updReservOrdered   -= inventTrans.Qty;
                cwUpdReservOrdered -= inventTrans.PdsCWQty;
            }

            movement.transIdSum().setInventTransStatus(inventTrans,StatusReceipt::None,StatusIssue::OnOrder);

            if (inventTrans.MarkingRefInventTransOrigin && (this.parmUpdateMarking_RU() || this.parmUpdateMarkingWithAnyStatus()))
            {
                inventDimParmLocal.initFromInventDim(inventTrans.inventDim());
                InventTransOrigin::deleteMarking(
                    inventTrans.MarkingRefInventTransOrigin,
                    inventTrans.InventTransOrigin,
                    -inventTrans.Qty,
                    false,
                    inventTrans.inventDim(),
                    inventDimParmLocal,
                    false,
                    false,
                    -inventTrans.PdsCWQty,
                    new PmfQtyDataCarrier(),
                    !this.parmUpdateMarkingWithAnyStatus());
                inventTrans.clearMarking();
            }

            inventTrans.InventDimId     = movement.inventdim().InventDimId;
            inventTrans.InventDimFixed  = 0;

            InventUpdateProcessReceiptTransactionListsCache::cacheInstance();
            this.updateReserveLessUpdateInventTrans(inventTrans);
            InventUpdateProcessReceiptTransactionListsCache::processCacheValue();

            if (movement.pdsCWItem() && !InventUpdReservationSkipAdjustingQtyForCWContext::isActive())
            {
                InventQty pdsCWQuantityAdjustment = PdsCatchWeight::inventQtyAdjustment(inventTrans.ItemId, inventTrans.Qty, inventTrans.PdsCWQty);
                this.pdsAdjustInventoryQuantity(-pdsCWQuantityAdjustment, inventTrans.InventDimId);
            }

            if (showInfo && showOnlyOnce)
            {
                info("@SYS79529",'',inventTrans.infoActionOrigin());
                showOnlyOnce = false;
            }

            this.getNextInventTransToIssue(inventTrans);
        }

        this.verifyUpdateReserveLessCustomInventTransUpdate(inventTrans, addQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLessUpdateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">
    ///     An <c>InventTrans</c> record.
    /// </param>
    protected void updateReserveLessUpdateInventTrans(InventTrans _inventTrans)
    {
        InventUpdate::updateTransDimTransferReceipt(movement,_inventTrans,movement.inventdim());

        _inventTrans.update();

        _inventTrans.updateSumUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyUpdateReserveLessCustomInventTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the custom invent trans list is exhausted with no remaining quantity.
    /// </summary>
    /// <param name = "_inventTrans">An <c>InventTrans</c> record.</param>
    /// <param name = "_remainingQuantity">The remaining quantity to update.</param>
    private void verifyUpdateReserveLessCustomInventTransUpdate(InventTrans _inventTrans, InventQty _remainingQuantity)
    {
        if (this.parmCustomInventTransListInitialized() && (_inventTrans || _remainingQuantity))
        {
            throw error("@SCM:CustomInventTransListQtyNotMatchingUpdateQty");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateReserveLessCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>updateReserveLess</c> method is completed.
    /// </summary>
    /// <param name = "_inventTrans">
    /// The current inventory transaction being processed by the update loop.
    /// </param>
    /// <param name = "_remainingQtyToUnreserve">
    ///	The remaining quantity to unreserve.
    /// </param>
    /// <param name = "_remainingCWQtyToUnreserve">
    /// The remaining catch weight quantity to unreserve.
    /// </param>
    /// <returns>
    /// true if the update is completed; otherwise, false.
    /// </returns>
    protected boolean isUpdateReserveLessCompleted(InventTrans _inventTrans, InventQty _remainingQtyToUnreserve, PdsCWInventQty _remainingCWQtyToUnreserve)
    {
        return _remainingQtyToUnreserve == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveMore</Name>
				<Source><![CDATA[
    protected void updateReserveMore()
    {
        InventUpdateReserveMoreParameters parameters = InventUpdateReserveMoreParameters::newFromInventUpdate(this);

        parameters.updReservOrdered = updReservOrdered;
        parameters.updReservPhysical = updReservPhysical;
        parameters.cwUpdReservOrdered = cwUpdReservOrdered;
        parameters.cwUpdReservPhysical = cwUpdReservPhysical;

        InventUpdateReserveResult result = InventUpdateReserveMore::newFromParameters(parameters).reserve();

        updReservOrdered = result.updReservOrdered;
        updReservPhysical = result.updReservPhysical;
        cwUpdReservOrdered = result.cwUpdReservOrdered;
        cwUpdReservPhysical = result.cwUpdReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventUpd_Reservation</c> class.
    /// </summary>
    /// <param name="_movement">
    /// An inventory movement instance which originates the reservation.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An inventory dimension to reserve.
    /// </param>
    /// <param name="_inventDimParm">
    /// An inventory dimensions parameters.
    /// </param>
    /// <param name="_inventDimFixed">
    /// An inventory mandatory dimensions.
    /// </param>
    /// <param name="_markingRefInventTransOrigin">
    /// An inventory transactions originator.
    /// </param>
    /// <param name="_reservation">
    /// An inventory quantity to reserve.
    /// </param>
    /// <param name="_allowAutoReserveDim">
    /// A Boolean value specifying whether to give unreserved physical items to another issue.
    /// </param>
    /// <param name="_showInfo">
    /// A Boolean value specifying whether to show information, optional.
    /// </param>
    /// <param name="_cwQty">
    /// An inventory catch weight quantity to reserve, optional.
    /// </param>
    /// <param name="_cwForceActual">
    /// A Boolean value specifying whether is catch weight force actual or not, optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventUpd_Reservation</c> class.
    /// </returns>
    public static InventUpd_Reservation newWithMarking(
            InventMovement        _movement,
            InventDim             _inventDimCriteria,
            InventDimParm         _inventDimParm,
            InventDimFixed        _inventDimFixed,
            InventTransOriginId   _markingRefInventTransOrigin,
            InventQty             _reservation,
            boolean               _allowAutoReserveDim, // give unreserved physical items to another issue
            boolean               _showInfo = false,     // Show infolog when reservation is removed
            PdsCWInventQty        _cwQty = 0,
            boolean               _cwForceActual = false
            )
    {
        InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newParameters(
                                                              _movement,
                                                              _inventDimCriteria,
                                                              _inventDimParm,
                                                              _inventDimFixed,
                                                              _reservation,
                                                              _allowAutoReserveDim,  // give unreserved physical items to another issue
                                                              _showInfo,     // Show infolog when reservation is removed
                                                              _cwQty,
                                                              _cwForceActual
                                                              );

        inventUpd_Reservation.parmMarkingRefInventTransOrigin(_markingRefInventTransOrigin);

        return inventUpd_Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUpdateReserveMore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Added this method as WHS reservations are handled differently.
    /// </summary>
    [SysObsolete('Method is not used anymore - logic in the InventUpd_WHSReservation class should be used', true, 30\09\2022)]
    protected void whsUpdateReserveMore()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQtyLeftToReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the quantity left to reserve for updating whs reserve more.
    /// </summary>
    /// <param name = "_qtyLeftToReserve">The quantity left to reserve.</param>
    /// <param name = "_inventTrans">An <c>InventTrans</c> record.</param>
    /// <param name = "_invenDimOnHandCriteria">An <c>InventDim</c> record.</param>
    /// <param name = "_maxPhysicalReserved">The maximum physical reserved quantity.</param>
    /// <param name = "_noExactMatch">A boolean value indicating if there is no exact matching <c>InventTrans</c> record.</param>
    /// <returns>The quantity left to reserve.</returns>
    protected InventQty recalculateQtyLeftToReserve(
        InventQty _qtyLeftToReserve,
        InventTrans _inventTrans,
        InventDim _inventDimOnHandCriteria,
        InventQty _maxPhysicalReserved,
        boolean _noExactMatch)
    {
        return _qtyLeftToReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInventDimToIssueTrans</Name>
				<Source><![CDATA[
    private static void assignInventDimToIssueTrans(
        InventTrans     _issue,
        InventMovement  _issueMovement,
        InventDimId     _receiptInventDimId,
        boolean         _useIssueDimensionsForMerge = false)
    {
        InventDim   inventDimStorageDimFromIssueFinFromReceipt;
        InventDim   receiptInventDim = InventDim::find(_receiptInventDimId);
        
        if (_issue.StatusIssue == StatusIssue::OnOrder && _useIssueDimensionsForMerge)
        {
            /*
            // If the transaction is OnOrder and we don't expect to reserve it we allow some dimensions to differ to support scenarios where we are marked against a receipt,
            // but the items for the receipt is no longer on the storage dimensions where they were received.
            // So we build an InventDim with non-financial storage dimensions from the issue and financial dimensions from the receipt and merge that into the final receipt dim.
            */
            inventDimStorageDimFromIssueFinFromReceipt.initFromInventDim(_issue.inventDim(), InventDim::dimStorageDimEnabledFieldList());
            inventDimStorageDimFromIssueFinFromReceipt.initFromInventDim(receiptInventDim, _issueMovement.inventDimGroupSetup().activeFinancialInventoryFields());
            
            // Merge what is set on inventDimStorageDimFromIssueFinFromReceipt into receiptInventDim
            receiptInventDim.mergeUsedDim(_issueMovement.inventDimGroupSetup(), inventDimStorageDimFromIssueFinFromReceipt, null);
            receiptInventDim = InventDim::findOrCreate(receiptInventDim);
        }
        
        if (_issueMovement.isItemWHSEnabled())
        {
            // allow movements to clear dimensions on the issue, but pass the receipt's inventDim as both arguments
            // to retain the non-WHS logic when not relevant
            receiptInventDim = _issueMovement.getInventDimForIssueTransFromReceipt(receiptInventDim, receiptInventDim);
        }
        
        _issue.InventDimId = receiptInventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventDimFixed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an <c>InventDimFixed</c> value based on a movement and inventory dimensions.
    /// </summary>
    /// <param name = "_movementIssue">A movement.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> buffer.</param>
    /// <returns>An <c>InventDimFixed</c> value that represents the inventory dimensions that should be fixed for the reservation.</returns>
    public static InventDimFixed calculateInventDimFixed(InventMovement _movementIssue, InventDim _inventDim)
    {
        InventDimFixed inventDimFixed = InventDimFixedClass::inventDimParm2InventDimFixed(_movementIssue.initDimParmAutoReserv(_inventDim));
        inventDimFixed = InventDimFixedClass::clearNonPrimaryLocationDimensions(inventDimFixed, _movementIssue.inventDimGroupSetup());

        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReserveRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes reservation and marking for the specified inventory movement.
    /// </summary>
    /// <param name="_movementIssue">
    ///    The movement for which reservation and marking must be removed.
    /// </param>
    /// <param name="_unReserveNotMarked">
    ///    true if transactions that are not marked can have their reservation removed; otherwise, false.
    /// </param>
    static void deleteReserveRefTransId(
        InventMovement  _movementIssue,
        boolean         _unReserveNotMarked = false)
    {
        InventTrans             inventTrans;

        ttsbegin;

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin     == _movementIssue.inventTransOriginId()
               && inventTrans.TransChildType        == _movementIssue.transChildType()
               && inventTrans.TransChildRefId       == _movementIssue.transChildRefId()
               && inventTrans.StatusReceipt         == StatusReceipt::None
               && inventTrans.StatusIssue           >= StatusIssue::ReservPhysical
               && (_unReserveNotMarked || inventTrans.MarkingRefInventTransOrigin  != 0)
        {
            if (inventTrans.MarkingRefInventTransOrigin)
            {
                InventTransOrigin::deleteMarking(
                    inventTrans.MarkingRefInventTransOrigin,
                    inventTrans.InventTransOrigin,
                    -inventTrans.Qty,
                    true,
                    null,
                    null,
                    false,
                    false,
                    -inventTrans.PdsCWQty);

                inventTrans.clearMarking();
            }

            inventTrans.StatusIssue         = StatusIssue::OnOrder;
            inventTrans.update();

            if (_movementIssue.markingRefInventTransOrigin())
            {
                if (_movementIssue.interCompanyMarkingAllowed())
                {
                    _movementIssue.clearInventRefFields();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    private static InventUpd_Reservation newFromMovement(InventMovement _movement)
    {
        if (!_movement.isItemWHSEnabled())
        {
            return new InventUpd_Reservation(_movement);
        }

        return InventUpd_WHSReservation::construct(_movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDim</Name>
				<Source><![CDATA[
    static InventUpd_Reservation newInventDim(
                InventMovement        _movement,
                InventDim             _inventDim,
                InventQty             _reservation,
                boolean               _showInfo = false,
                PdsCWInventQty        _cwQty = 0)
    {
        InventDimParm           inventDimParm;
        InventDimParm           inventDimParmFixed;

        InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newFromMovement(_movement);

        inventUpd_Reservation.setParmAllowDefault();
        inventUpd_Reservation.parmAllowReserveReduction(true);

        inventDimParm.initFromInventDim(_inventDim);
        inventDimParmFixed.initFromInventDim(_inventDim);

        inventUpd_Reservation.parmInventDimCriteria(_inventDim);
        inventUpd_Reservation.parmInventDimParm(inventDimParm);
        inventUpd_Reservation.parmReservation(_reservation);
        inventUpd_Reservation.parmInventDimFixed(InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParmFixed));
        inventUpd_Reservation.parmShowInfo(_showInfo);

        inventUpd_Reservation.parmPdsCWInventQty(_cwQty);

        inventUpd_Reservation.initUpdate();

        return inventUpd_Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventUpd_Reservation</c> class from a Kanban inventory movement.
    /// </summary>
    /// <param name="_inventMovement">
    /// A Kanban inventory movement.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventUpd_Reservation</c> class.
    /// </returns>
    public static InventUpd_Reservation newKanbanJob(InventMovement _inventMovement)
    {
        KanbanJob kanbanJob = _inventMovement.buffer();
        InventQty qtyToReserve = InventTransIdSum::newTransOriginId(kanbanJob.issueInventTransOriginId()).onOrder();
        InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(_inventMovement, qtyToReserve, false);

        return reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventUpd_Reservation</c> class.
    /// </summary>
    /// <param name="_movement">
    /// An inventory movement instance which originates the reservation.
    /// </param>
    /// <param name="_reservation">
    /// An inventory quantity to reserve.
    /// </param>
    /// <param name="_mayBeReduced">
    /// A Boolean value specifying whether to allow reservation reduction.
    /// </param>
    /// <param name="_forceNotReserveOrdered">
    /// A Boolean value specifying whether to force not reserving against ordered stock.
    /// </param>
    /// <param name="_showInfo">
    /// A Boolean value specifying whether to show information.
    /// </param>
    /// <param name="_cwQty">
    /// An inventory catch weight quantity to reserve.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventUpd_Reservation</c> class.
    /// </returns>
    static InventUpd_Reservation newMovement(
                InventMovement       _movement,
                InventQty            _reservation,
                boolean              _mayBeReduced,
                boolean              _forceNotReserveOrdered = false,
                boolean              _showInfo = false,
                PdsCWInventQty       _cwQty = 0
                )
    {
        InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newFromMovement(_movement);
        inventUpd_Reservation.setParmAllowDefault();

        InventDim inventDimCriteria = _movement.inventdim();
        InventDimParm inventDimParm = _movement.initDimParmAutoReserv(inventDimCriteria);

        // Transfers need to enforce warehouse for the reservation even when they may have not
        // have it set as physical inventory. Otherwise circular reservations may occur.
        if (   inventDimCriteria.InventLocationId != ''
            && _movement.isTransfer())
        {
            inventDimParm.InventLocationIdFlag = NoYes::Yes;
        }

        inventUpd_Reservation.parmInventDimFixed(InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm));
        inventUpd_Reservation.parmInventDimCriteria(inventDimCriteria);
        inventDimParm.setAllProductDimensions();    // Product dimensions must be specified on movement and should be enforced - even when blank.
        inventUpd_Reservation.parmInventDimParm(inventDimParm);
        inventUpd_Reservation.parmReservation(_reservation);
        inventUpd_Reservation.parmShowInfo(_showInfo);
        inventUpd_Reservation.parmPdsCWInventQty(_cwQty);

        if (_forceNotReserveOrdered)
        {
            inventUpd_Reservation.parmAllowReserveOrdered(false);
        }

        inventUpd_Reservation.parmAllowReserveReduction(_mayBeReduced);
        inventUpd_Reservation.initUpdate();

        return inventUpd_Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovementWMS</Name>
				<Source><![CDATA[
    static InventUpd_Reservation newMovementWMS(
                InventMovement        _movement,
                InventDim             _inventDimCriteria,
                InventDimParm         _inventDimParm,
                InventDimFixed        _inventDimFixed,
                InventQty             _reservation,
                boolean               _showInfo = false,
                PdsCWInventQty        _pdsCWQty = 0
                )
    {
        InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newFromMovement(_movement);

        inventUpd_Reservation.setParmAllowDefault();
        inventUpd_Reservation.parmInventDimCriteria(_inventDimCriteria);
        inventUpd_Reservation.parmInventDimParm(_inventDimParm);
        inventUpd_Reservation.parmInventDimFixed(_inventDimFixed);
        inventUpd_Reservation.parmReservation(_reservation);
        inventUpd_Reservation.parmShowInfo(_showInfo);
        inventUpd_Reservation.parmAllowReserveOrdered(true);
        inventUpd_Reservation.parmPdsCWInventQty(_pdsCWQty);
        inventUpd_Reservation.parmWmsMovement(true);
        inventUpd_Reservation.parmPdsCWForceActual(false);
        inventUpd_Reservation.parmAllowReserveReduction(false);
        inventUpd_Reservation.initUpdate();

        return inventUpd_Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventUpd_Reservation newParameters(
                InventMovement        _movement,
                InventDim             _inventDimCriteria,
                InventDimParm         _inventDimParm,
                InventDimFixed        _inventDimFixed,
                InventQty             _reservation,
                boolean               _allowAutoReserveDim, // give unreserved physical items to another issue
                boolean               _showInfo = false,     // Show infolog when reservation is removed
                PdsCWInventQty        _cwQty = 0,
                boolean               _cwForceActual = false,
                boolean               _onlyReserveOnWHSEnabledWarehouses = false)
    {
        InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newFromMovement(_movement);

        inventUpd_Reservation.setParmAllowDefault();
        inventUpd_Reservation.parmAllowAutoReserveDim(_allowAutoReserveDim);

        inventUpd_Reservation.parmInventDimCriteria(_inventDimCriteria);
        inventUpd_Reservation.parmInventDimParm(_inventDimParm);
        inventUpd_Reservation.parmReservation(_reservation);
        inventUpd_Reservation.parmInventDimFixed(_inventDimFixed);
        inventUpd_Reservation.parmShowInfo(_showInfo);

        inventUpd_Reservation.parmPdsCWInventQty(_cwQty);
        inventUpd_Reservation.parmPdsCWForceActual(_cwForceActual);
        inventUpd_Reservation.parmOnlyReserveOnWHSEnabledWarehouses(_onlyReserveOnWHSEnabledWarehouses);

        inventUpd_Reservation.initUpdate();

        return inventUpd_Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateReserveLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves against the lot that is related to the <c>InventTransId</c> record.
    /// </summary>
    /// <param name="_movement">
    /// The issue movement.
    /// </param>
    /// <param name="_inventTransId">
    /// The receipt lot that will be reserved.
    /// </param>
    public static void pdsUpdateReserveLot(
        InventMovement  _movement,          // issue movement
        InventTransId   _inventTransId      // Receipt lot that should be reserved
        )
    {
        InventUpd_Reservation   reservation;

        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;

        InventDimParm           inventDimParm;

        PdsCWInventQty          cwReserveQty = 0;
        PdsCWInventQty          cwReserveNow = 0;
        boolean                 cwItem = false;

        using (var cache = _movement.constructRecordViewCache())
        {
            InventQty reserveQty = - _movement.transIdSum().estimatedIssue();

            if (PdsGlobal::pdsIsCWItem(_movement.itemId()))
            {
                cwItem = true;
                cwReserveQty = -_movement.transIdSum().pdsCWEstimatedIssue();
            }

            if (reserveQty > 0)
            {
                inventDimParm.initFromInventDim(_movement.inventdim());
                InventDimFixed inventDimFixed =
                    InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm);

                if (_movement.transIdSum().reserved())
                {
                    reservation =
                        InventUpd_Reservation::newParameters(
                                        _movement,
                                        null,
                                        null,
                                        0,
                                        -_movement.transIdSum().reserved(),
                                        true,
                                        false,
                                        cwItem ? -_movement.transIdSum().pdsCWReserved() : 0);

                    reservation.updateNow();
                }

                while select InventDimId, Qty, PdsCWQty from inventTrans
                    order by StatusReceipt
                    where  inventTrans.StatusIssue         == StatusIssue::None
                        && inventTrans.PackingSlipReturned == NoYes::No
                    join  TableId
                    from  inventTransOrigin
                    where  inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == _inventTransId
                {
                    InventDim inventDim = InventDim::find(inventTrans.InventDimId);
                    inventDimParm.initFromInventDim(inventDim);

                    InventQty reserveNow = min(reserveQty, inventTrans.Qty);
                    reserveQty -= reserveNow;

                    if (cwItem)
                    {
                        cwReserveNow = min(cwReserveQty,inventTrans.PdsCWQty);
                        cwReserveQty -= cwReserveNow;
                    }

                    reservation = InventUpd_Reservation::newParameters(
                                                            _movement,
                                                            inventDim,
                                                            inventDimParm,
                                                            inventDimFixed,
                                                            -reserveNow,
                                                            true,
                                                            false,
                                                            cwReserveNow);
                    reservation.updateNow();

                    if (! reserveQty)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdSameLotReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the same lot reservation.
    /// </summary>
    /// <param name="_buffer">
    /// A record buffer.
    /// </param>
    /// <param name="_reserveQty">
    /// An inventory quantity to reserve.
    /// </param>
    /// <param name="_inventMovSubType">
    /// The movement subtype.
    /// </param>
    /// <param name="_reserveCWQty">
    /// An inventory catch weight quantity to reserve.
    /// </param>
    public static void pdsUpdSameLotReserve(
        Common              _buffer,
        InventQty           _reserveQty,
        InventMovSubType    _inventMovSubType = InventMovSubType::None,
        PdsCWInventQty      _reserveCWQty = 0)
    {
        InventDim             inventDim;
        InventDimParm         inventDimParm;

        InventMovement inventMovement = InventMovement::constructNoThrow(
                                           _buffer,
                                           _inventMovSubType);

        if (inventMovement)
        {
            inventDim.data(inventMovement.inventdim());
            inventDimParm.initFromInventDim(inventDim);

            InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(
                                                      inventMovement,
                                                      _reserveQty,
                                                      true,
                                                      false,
                                                      false,
                                                      _reserveCWQty);

            reservation.parmInventDimCriteria(inventDim);
            reservation.parmInventDimParm(inventDimParm);
            reservation.parmShowInfo(false);
            reservation.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningCannotReserveByMarking</Name>
				<Source><![CDATA[
    private static void showWarningCannotReserveByMarking(
        InventTransOriginId _markingRefInventTransOrigin,
        InventTrans _inventTrans)
    {
        InventTransOrigin markedInventTransOrigin = InventTransOrigin::find(_markingRefInventTransOrigin);
        InventTransOrigin inventTransOrigin = _inventTrans.inventTransOrigin();
        warning(strFmt("@SYS85498",
                strFmt("@SYS76498", markedInventTransOrigin.ReferenceCategory, markedInventTransOrigin.ReferenceId),
                strFmt("@SYS76498", inventTransOrigin.ReferenceCategory, inventTransOrigin.ReferenceId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovementForUpdateReserveBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>InventMovement</c> class for updateReserveBuffer based on the supplied buffer.
    /// </summary>
    /// <param name="_buffer">
    /// Buffer for which inventory movement should be constructed.
    /// </param>
    /// <param name="_subType">
    /// Movement subtype.
    /// </param>
    /// <returns>
    /// The <c>InventMovement</c> created from the input buffer.
    /// </returns>
    protected static InventMovement inventMovementForUpdateReserveBuffer(Common _buffer, InventMovSubType _inventMovSubType)
    {
        return InventMovement::constructNoThrow(_buffer,_inventMovSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveBuffer</Name>
				<Source><![CDATA[
    static void updateReserveBuffer(
        Common                  _buffer,
        InventQty               _reserveQty,
        InventMovSubType        _inventMovSubType = InventMovSubType::None,
        PdsCWInventQty          _cwQty = 0,
        PdsBatchAttribAutoRes   _useAttrib = false,
        TmpPdsBatchAttribSelect _attrSel = null,
        InventDim               _inventDimCriteria = null
        )
    {
        InventUpd_Reservation reservation = InventUpd_Reservation::newReserveBuffer(_buffer,
                                                                    _reserveQty,
                                                                    _inventMovSubType,
                                                                    _cwQty,
                                                                    _useAttrib,
                                                                    _attrSel,
                                                                    _inventDimCriteria);

        if (reservation)
        {
            reservation.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovementForUpdateReserveFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>InventMovement</c> class for updateReserveFromForm based on the supplied buffer.
    /// </summary>
    /// <param name="_buffer">
    /// Buffer for which inventory movement should be constructed.
    /// </param>
    /// <param name="_subType">
    /// Movement subtype.
    /// </param>
    /// <returns>
    /// The <c>InventMovement</c> created from the input buffer.
    /// </returns>
    protected static InventMovement inventMovementForUpdateReserveFromForm(Common _buffer, InventMovSubType _inventMovSubType)
    {
        return InventMovement::construct(_buffer,_inventMovSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParametersFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventUpd_Reservation</c> class.
    /// </summary>
    /// <param name = "_movement">
    /// An inventory movement instance which originates the reservation.
    /// </param>
    /// <param name = "_inventDimReservation">
    /// An inventory dimension to reserve.
    /// </param>
    /// <param name = "_inventDimParmReservation">
    /// An inventory dimensions parameters.
    /// </param>
    /// <param name = "_inventDimParmFixed">
    /// An inventory mandatory dimensions.
    /// </param>
    /// <param name = "_reserveQty">
    /// An inventory quantity to reserve.
    /// </param>
    /// <param name = "_cwQty">
    /// An inventory catch weight quantity to reserve.
    /// </param>
    /// <param name = "_cwForceActual">
    /// A Boolean value specifying whether is catch weight force actual or not.
    /// </param>
    /// <retuns>The <c>InventUpd_Reservation</c> created from the input parameters.</retuns>
    protected static InventUpd_Reservation newParametersFromForm(
        InventMovement  _movement,
        InventDim       _inventDimReservation,
        InventDimParm   _inventDimParmReservation,
        InventDimFixed  _inventDimParmFixed,
        InventQty       _reserveQty,
        PdsCWInventQty  _cwQty,
        boolean         _cwForceActual)
    {
        InventUpd_Reservation reservation = InventUpd_Reservation::newParameters(
                _movement,
                _inventDimReservation,
                _inventDimParmReservation,
                _inventDimParmFixed,
                _reserveQty,
                true
                , false,
                _cwQty,
                _cwForceActual
                );

        reservation.parmAllowAutoReserveDim(false);

        return reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveFromForm</Name>
				<Source><![CDATA[
    static void updateReserveFromForm(
        Common              _buffer,
        InventDim           _inventDim,
        InventDimParm       _inventDimParm,
        InventQty           _reserveQty,
        InventMovSubType    _inventMovSubType = InventMovSubType::None,
        PdsCWInventQty      _cwQty = 0,
        boolean             _cwForceActual = false
        )
    {
        InventDimParm           inventDimParmFixed;
        InventDim               inventDimReservation;
        InventDimParm           inventDimParmReservation;
        InventDimGroupSetup     inventDimGroupSetup;
        InventDimParm           inventDimParmPrimary;

        ttsbegin;

        inventDimReservation.data(_inventDim);
        inventDimParmReservation.data(_inventDimParm);

        InventMovement movement = InventUpd_Reservation::inventMovementForUpdateReserveFromForm(_buffer, _inventMovSubType);

        if (_reserveQty > 0 && movement)
        {
            // Ensure that non-visible primary dimensions are still enforced during reservation
            InventDim inventDimMovement = movement.inventdim();

            List dimFields = InventDim::dimFieldsList();
            ListEnumerator enumerator = dimFields ? dimFields.getEnumerator() : null;
            if (enumerator)
            {
                while (enumerator.moveNext())
                {
                    FieldId dimFieldId = enumerator.current();
                    if (inventDimMovement.(dimFieldId) && !inventDimReservation.(dimFieldId))
                    {
                        // Value specified on movement but not in reservation form
                        if (!inventDimGroupSetup)
                        {
                            inventDimGroupSetup = movement.inventDimGroupSetup();
                            inventDimGroupSetup.inventDimParmActivePrimaryDimension(inventDimParmPrimary);
                        }
                        FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                        if (inventDimParmPrimary.(dimParmFieldId))
                        {
                            // Dimension is an active primary dimension which has been specified on movement
                            inventDimReservation.(dimFieldId) = inventDimMovement.(dimFieldId);
                            inventDimParmReservation.(dimParmFieldId) = NoYes::Yes;
                        }
                    }
                }
            }
        }

        inventDimParmFixed.initFromInventDim(inventDimReservation);

        InventUpd_Reservation reservation = InventUpd_Reservation::newParametersFromForm(
            movement,
            inventDimReservation,
            inventDimParmReservation,
            InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParmFixed),
            -_reserveQty,
            -_cwQty,
            _cwForceActual
            );

        reservation.updateNow();
        reservation.deleteInvalidMarking(movement, inventDimReservation);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLot_W</Name>
				<Source><![CDATA[
    static void updateReserveLot_W(
        InventMovement _movement,          // issue movement
        InventTransOriginId  _inventTransOrigin      // Receipt lot that should be reserved
        )
    {
        InventUpd_Reservation   reservation;

        InventTrans             inventTrans;

        InventDimParm           inventDimParm;

        using (var cache = _movement.constructRecordViewCache())
        {
            InventQty reserveQty = - _movement.transIdSum().estimatedIssue();

            if (reserveQty > 0)
            {
                inventDimParm.initFromInventDim(_movement.inventdim());

                InventDimFixed inventDimFixed = InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm);

                if (_movement.transIdSum().reserved())
                {
                    reservation = InventUpd_Reservation::newParameters(_movement,null,null,0,-_movement.transIdSum().reserved(),true);
                    reservation.updateNow();
                }

                while select InventDimId, Qty from inventTrans
                    order by StatusReceipt
                    where inventTrans.InventTransOrigin     == _inventTransOrigin           &&
                          inventTrans.StatusIssue           == StatusIssue::None        &&
                          inventTrans.PackingSlipReturned   == NoYes::No
                {
                    InventDim inventDim = InventDim::find(inventTrans.InventDimId);
                    inventDimParm.initFromInventDim(inventDim);

                    InventQty reserveNow = min(reserveQty,inventTrans.Qty);
                    reserveQty -= reserveNow;

                    reservation = InventUpd_Reservation::newParameters(_movement,inventDim,inventDimParm,inventDimFixed,-reserveNow,true);
                    reservation.updateNow();

                    if (! reserveQty)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveRefTransId</Name>
				<Source><![CDATA[
    static void updateReserveRefTransId(
        InventMovement      _movementIssue,
        boolean             _onlyOnOrder = false,
        boolean             _skipInventTransSumUp = false,
        boolean             _skipLoadLineSyncValidation = false)
    {
        InventTrans             inventTrans;
        InventTrans             receipt;

        InventTransOriginId     markingRefInventTransOrigin;
        InventDimId             inventDimIdReceipt;
        InventDimParm           inventDimParmIssue;
        InventDimParm           inventDimParmFixed;
        StatusReceipt           statusReceipt;
        InventQty               qty;
        boolean                 dimDiffOnIssuesNonBlankDimensions;

        Map                     mapReceipt;

        Set                     setRecId;

        boolean                 doSumTrans;

        PdsCWInventQty          cwQty;
        boolean                 isCwItem    = PdsGlobal::pdsIsCWItem(_movementIssue.itemId());

        // <GEERU>
        // </GEERU>

        const int LoopMatchOnReceiptInventDimId = 1;
        const int LoopMatchOnReceiptDimensionsAboveLocation = 2;
        const int LoopMatchOnDefaultIssueDimensions = 3;
        const int LoopMatchOnAnyDimensions = 4;

        ttsbegin;

        using (var cache = _movementIssue.constructRecordViewCache())
        {
            InventDimFixed inventDimFixed;

            InventUpdReserveRefProjSourceInventDimContext projContext = InventUpdReserveRefProjSourceInventDimContext::current();

            if (projContext && projContext.parmInventDimSource().RecId
                && _movementIssue is InventMov_Virtuel)
            {
                inventDimFixed = InventUpd_Reservation::calculateInventDimFixed(_movementIssue, projContext.parmInventDimSource());
            }
            else
            {
                inventDimFixed = InventUpd_Reservation::calculateInventDimFixed(_movementIssue, _movementIssue.inventdim());
            }

            while select sum(Qty),sum(QtySettled)
                        ,sum(PdsCWQty),sum(PdsCWSettled)
                from inventTrans
                group by MarkingRefInventTransOrigin
                where inventTrans.InventTransOrigin             == _movementIssue.inventTransOriginId()
                   &&   inventTrans.StatusReceipt               == StatusReceipt::None
                   &&   inventTrans.MarkingRefInventTransOrigin != 0
                   && (!_onlyOnOrder || inventTrans.StatusIssue == StatusIssue::OnOrder)
            {
                while select sum(Qty), sum(QtySettled)
                            ,sum(PdsCWQty),sum(PdsCWSettled)
                    from receipt
                    group by InventDimId,StatusReceipt
                    where receipt.InventTransOrigin                 == inventTrans.MarkingRefInventTransOrigin
                       &&(!_onlyOnOrder || receipt.StatusReceipt    == StatusReceipt::Ordered)
                       && receipt.StatusIssue                       == StatusIssue::None
                       && receipt.PackingSlipReturned               == NoYes::No
                       && receipt.MarkingRefInventTransOrigin       == _movementIssue.inventTransOriginId()
                {
                    if (! mapReceipt)
                    {
                        mapReceipt = new Map(Types::Container,Types::Container);
                    }

                    qty = min(receipt.openQty(),-inventTrans.openQty());
                    cwQty = min(receipt.pdsCWOpenQty(), -inventTrans.pdsCWOpenQty());
                    if (qty
                    || cwQty
                    )
                    {
                        mapReceipt.insert([inventTrans.MarkingRefInventTransOrigin, receipt.InventDimId, receipt.StatusReceipt],[qty,cwQty]);
                    }
                }
            }
            
            if (mapReceipt)
            {
                InventUpdateReserveRefTransIdFromBlockingMarkingSyncContext context = InventUpdateReserveRefTransIdFromBlockingMarkingSyncContext::current();
                // <GEERU>
                InventDim inventDimIssueDefault = _movementIssue.inventdim();
                // </GEERU>
                MapIterator mi = new MapIterator(mapReceipt);
                mi.begin();
                while (mi.more())
                {
                    [markingRefInventTransOrigin,inventDimIdReceipt,statusReceipt]   = mi.key();
                    [qty, cwQty] = mi.value();

                    InventDim inventDimReceipt = InventDim::find(inventDimIdReceipt);
                    InventDim inventDimReceiptAboveLocation = null;

                    //on whs enabled warehouses we do not sync all dimensions because we need to delay the reservation if work is created.
                    if (inventDimReceipt.InventLocationId && _movementIssue.canHaveReservedWork() && inventDimReceipt.inventLocation().WHSEnabled)
                    {
                        inventDimReceiptAboveLocation.data(inventDimReceipt);
                        inventDimReceiptAboveLocation.clearLocationAndBelowDim(_movementIssue.itemId());
                        inventDimReceiptAboveLocation = InventDim::findOrCreate(inventDimReceiptAboveLocation);
                    }
                    int loop = 0;

                    // <GEERU>
                    while (loop < 4)
                    // </GEERU>
                    {
                        inventDimReceipt = InventDim::find(inventDimIdReceipt);

                        loop++;

                        if (statusReceipt == StatusReceipt::Ordered
                            && context && (context.parmCheckDimDiffOnIssuesNonBlankDimensions() || context.parmIsUpdateMarkingReservationForOnOrderInventTransIssue()))
                        {
                            select forupdate inventTrans
                            order by StatusIssue desc
                            where inventTrans.InventTransOrigin             == _movementIssue.inventTransOriginId()
                               && inventTrans.StatusReceipt                 == StatusReceipt::None
                               && inventTrans.MarkingRefInventTransOrigin   == markingRefInventTransOrigin
                               && inventTrans.ValueOpen                     == InventTransOpen::Yes
                               && (!_onlyOnOrder || inventTrans.StatusIssue == StatusIssue::OnOrder)
                               // <GEERU>
                               && ((loop == LoopMatchOnAnyDimensions)
                               ||  (loop == LoopMatchOnDefaultIssueDimensions && inventTrans.InventDimId    == inventDimIssueDefault.InventDimId)
                               ||  (loop == LoopMatchOnReceiptDimensionsAboveLocation && inventDimReceiptAboveLocation && inventTrans.InventDimId == inventDimReceiptAboveLocation.inventDimId)
                               ||  (loop == LoopMatchOnReceiptInventDimId && inventTrans.InventDimId    == inventDimIdReceipt));
                            // </GEERU>
                        }
                        else
                        {
                            select forupdate inventTrans
                            order by StatusIssue
                            where inventTrans.InventTransOrigin             == _movementIssue.inventTransOriginId()
                               && inventTrans.StatusReceipt                 == StatusReceipt::None
                               && inventTrans.MarkingRefInventTransOrigin   == markingRefInventTransOrigin
                               && inventTrans.ValueOpen                     == InventTransOpen::Yes
                               && (!_onlyOnOrder || inventTrans.StatusIssue == StatusIssue::OnOrder)
                               // <GEERU>
                               && ((loop == LoopMatchOnAnyDimensions)
                               ||  (loop == LoopMatchOnDefaultIssueDimensions && inventTrans.InventDimId    == inventDimIssueDefault.InventDimId)
                               ||  (loop == LoopMatchOnReceiptDimensionsAboveLocation && inventDimReceiptAboveLocation && inventTrans.InventDimId == inventDimReceiptAboveLocation.inventDimId)
                               ||  (loop == LoopMatchOnReceiptInventDimId && inventTrans.InventDimId    == inventDimIdReceipt));
                            // </GEERU>
                        }

                        while (inventTrans.RecId)
                        {
                            if (!setRecId)
                            {
                                setRecId = new Set(typeName2Type(extendedTypeStr(RecId)));
                            }

                            if (! setRecId.in(inventTrans.RecId))
                            {
                                setPrefix(#prefixField(InventTrans,ItemId));

                                if ( (inventTrans.TransChildType != _movementIssue.transChildType() || inventTrans.TransChildRefId != _movementIssue.transChildRefId()) && // reservation must not be done if transaction is locked and new inventDim
                                      inventTrans.InventDimId != inventDimIdReceipt )
                                {
                                    InventUpd_Reservation::showWarningCannotReserveByMarking(markingRefInventTransOrigin, inventTrans);
                                    InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();
                                    warning(strFmt("@SYS85499",
                                            strFmt("@SYS76498", inventTransOrigin.ReferenceCategory, inventTransOrigin.ReferenceId),
                                            strFmt("@SYS76498", inventTrans.TransChildType, inventTrans.TransChildRefId)));

                                    setRecId.add(inventTrans.RecId);
                                    continue;
                                }

                                if (inventTrans.InventDimId != inventDimIdReceipt)
                                {
                                    // Specified dimensions must match for marked movements
                                    InventDim inventDimIssue = inventTrans.inventDim();
                                    inventDimParmIssue.initFromInventDim(inventDimIssue);
                                    inventDimParmIssue = InventDimParm::andParms(inventDimParmIssue, _movementIssue.markingInventDimParmFixed());

                                    if (_movementIssue.inventMovSubType() == InventMovSubType::TransferOrderTransitFrom)
                                    {
                                        inventDimParmFixed.initFromInventDimFixed(inventDimFixed);
                                        inventDimParmIssue = InventDimParm::andParms(inventDimParmIssue, inventDimParmFixed);
                                    }

                                    if (_movementIssue.mustShowMarkingWarningOnUpdate()
                                        && !InventDim::isInventDimParmEqual(inventDimIssue, inventDimReceipt, inventDimParmIssue, false))
                                    {
                                        InventUpd_Reservation::showWarningCannotReserveByMarking(markingRefInventTransOrigin, inventTrans);
                                        warning("@SYS127154");
                                        setRecId.add(inventTrans.RecId);
                                        continue;
                                    }
                                }

                                if (   isCwItem
                                    && cwQty
                                    && cwQty < -inventTrans.PdsCWQty)
                                {
                                    inventTrans.updateSplitFromCWQty(-cwQty,-qty);
                                    doSumTrans = true;
                                }
                                else
                                {
                                    if (qty < -inventTrans.Qty)
                                    {
                                        inventTrans.updateSplit(-qty
                                        ,inventTrans.PdsCWQty
                                        );
                                        doSumTrans = true;
                                    }
                                }

                                if (_movementIssue.isItemWHSEnabled())
                                {
                                    dimDiffOnIssuesNonBlankDimensions = WHSReservationHierarchyInventDimUtil::isDimDiffOnIssuesNonBlankDimensions(inventTrans.inventTable(), inventTrans.inventdim(), inventDimReceipt);
                                    if (!dimDiffOnIssuesNonBlankDimensions &&
                                        inventTrans.StatusIssue == StatusIssue::ReservOrdered &&
                                        statusReceipt == statusReceipt::Ordered)
                                    {
                                        if (context && context.parmCheckDimDiffOnIssuesNonBlankDimensions())
                                        {
                                            dimDiffOnIssuesNonBlankDimensions = inventTrans.inventDimId != inventDimReceipt.inventDimId;
                                        }
                                    }
                                }
                                else
                                {
                                    dimDiffOnIssuesNonBlankDimensions = inventTrans.inventDimId != inventDimReceipt.inventDimId;
                                }

                                if ( (inventTrans.StatusIssue == StatusIssue::ReservOrdered  && (dimDiffOnIssuesNonBlankDimensions || statusReceipt <= StatusReceipt::Registered ) ) ||
                                     (inventTrans.StatusIssue == StatusIssue::ReservPhysical && (dimDiffOnIssuesNonBlankDimensions || statusReceipt >= StatusReceipt::Arrived    ) )
                                   )
                                {
                                    _movementIssue.transIdSum().setInventTransStatus(inventTrans,StatusReceipt::None,StatusIssue::OnOrder);

                                    if (! _movementIssue.newMovement_TransferReceipt())
                                    {
                                        inventTrans.InventDimFixed  = 0;
                                        inventTrans.InventDimId     = _movementIssue.inventdim().InventDimId;
                                    }

                                    inventTrans.update();
                                }

                                if (inventTrans.StatusIssue == StatusIssue::OnOrder)
                                {
                                    InventQty reserveNow = min(qty,-inventTrans.Qty);
                                    PdsCWInventQty cwReserveNow = min(cwQty,-inventTrans.PdsCWQty);
                                    if (   isCwItem
                                        && cwReserveNow
                                        && cwReserveNow < -inventTrans.PdsCWQty)
                                    {
                                        inventTrans.updateSplitFromCWQty(-cwReserveNow,-reserveNow);
                                    }
                                    else
                                    {
                                        if (reserveNow < -inventTrans.Qty)
                                        {
                                            inventTrans.updateSplit(-reserveNow
                                            , inventTrans.PdsCWQty
                                            );
                                        }
                                    }

                                    if (loop == 2 && inventDimReceiptAboveLocation)
                                    {
                                        inventDimReceipt = inventDimReceiptAboveLocation;
                                    }

                                    if (_movementIssue.isItemWHSEnabled())
                                    {
                                        // Handle hierarchy hole
                                        inventDimReceipt = WHSReservationHierarchyInventDimUtil::inventDimRemoveNotAllowedBlanks(_movementIssue.inventTable(), inventDimReceipt, _movementIssue.inventDimGroupSetup());

                                        if (_movementIssue.mustAdjustReceiptDimOnMarkingReserve())
                                        {
                                            // For some scenarios we need to make sure the dimensions used for on-hand calculations are adjusted
                                            inventDimReceipt = _movementIssue.getInventDimForIssueTransFromReceipt(inventDimReceipt, inventDimReceipt);
                                        }
                                    }

                                    InventOnHandQty inventOnHandQty = InventOnHandQty::newPhysicalUpdate(_movementIssue, inventDimReceipt);

                                    //For scenarios where blank serial is allowed and serial is last in the reservation hierarchy we need to allow reservation on the batch level and not serial
                                    if (inventDimReceipt.InventBatchId
                                        && !inventDimReceipt.InventSerialId
                                        && _movementIssue.inventMovSubType() == InventMovSubType::TransferOrderTransitFrom
                                        && WhsReservationHierarchyProvider::construct().getDimFieldIdForBottomHierarchyLevel(_movementIssue.inventTable()) == fieldNum(InventDim, InventSerialId))
                                    {
                                        inventOnHandQty.parmInventDimParm().InventSerialIdFlag = false;
                                    }
                                    //For scenarios where blank GTD is allowed and Batch Id is above GTD in the reservation hierarchy we need to allow reservation on the batch level and not GTD
                                    else if (inventDimReceipt.InventBatchId
                                        && !inventDimReceipt.InventGtdId_RU
                                        && SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoRU])
                                        && _movementIssue.inventMovSubType() == InventMovSubType::TransferOrderTransitFrom
                                        && WHSReservationHierarchyInventDimUtil::isBatchAboveGTD_RU(_movementIssue.inventTable()))
                                    {
                                        inventOnHandQty.parmInventDimParm().InventGTDIdFlag_RU = false;
                                    }

                                    if (statusReceipt <= StatusReceipt::Registered)
                                    {
                                        if (isCwItem && _movementIssue.isItemWHSEnabled())
                                        {
                                            cwReserveNow = min(inventOnHandQty.pdsCWAvailPhysical(), -inventTrans.PdsCWQty);
                                            if (cwReserveNow || inventTrans.PdsCWQty || !_movementIssue.mustReserveBasedOnMarkingOnUpdate())
                                            {
                                                reserveNow = min(reserveNow, PdsCatchWeight::maxInventQty(_movementIssue.itemId(), cwReserveNow));
                                            }
                                        }
                                        else
                                        {
                                            reserveNow = min(inventOnHandQty.availPhysical(), -inventTrans.Qty);
                                            cwReserveNow = min(inventOnHandQty.pdsCWAvailPhysical(), -inventTrans.PdsCWQty);
                                        }
                                    }
                                    else
                                    {
                                        if (isCwItem && _movementIssue.isItemWHSEnabled())
                                        {
                                            cwReserveNow = min(inventOnHandQty.pdsCWAvailOrdered(false), -inventTrans.PdsCWQty);

                                            if (cwReserveNow)
                                            {
                                                reserveNow = min(reserveNow, PdsCatchWeight::maxInventQty(_movementIssue.itemId(), cwReserveNow));
                                            }
                                        }
                                        else
                                        {
                                            reserveNow = min(inventOnHandQty.availOrdered(false), -inventTrans.Qty);
                                            cwReserveNow = min(inventOnHandQty.pdsCWAvailOrdered(false), -inventTrans.PdsCWQty);
                                        }
                                    }

                                    if (reserveNow > 0)
                                    {
                                        RecId recId = 0;

                                        if ( reserveNow < -inventTrans.Qty
                                            || cwReserveNow < -inventTrans.PdsCWQty
                                            )
                                        {
                                            if (inventTrans.InventDimId != inventDimIdReceipt)
                                            {
                                                recId = inventTrans.RecId;
                                            }

                                            setRecId.add(inventTrans.RecId);

                                            qty += inventTrans.openQty() + reserveNow;
                                            cwQty += inventTrans.pdsCWOpenQty() + cwReserveNow;
                                            if (   isCwItem
                                                && cwReserveNow
                                                && cwReserveNow < -inventTrans.PdsCWQty)
                                            {
                                                inventTrans.updateSplitFromCWQty(-cwReserveNow, -reserveNow);
                                            }
                                            else
                                            {
                                                inventTrans.updateSplit(-reserveNow
                                                ,inventTrans.PdsCWQty
                                                );
                                            }

                                            doSumTrans = true;
                                        }

                                        InventUpd_Reservation::assignInventDimToIssueTrans(inventTrans, _movementIssue, inventDimIdReceipt);

                                        if (_movementIssue.isItemWHSEnabled())
                                        {
                                            var inventDimIssueLocal = WHSReservationHierarchyInventDimUtil::inventDimRemoveNotAllowedBlanks(_movementIssue.inventTable(), inventTrans.inventDim(), _movementIssue.inventDimGroupSetup());
                                            
                                            if (inventDimIssueLocal.inventDimId != inventTrans.inventDimId)
                                            {
                                                // There can be cases where dimensions, like batch, are specified on the order line but are cleared on the transactions to prevent holes in the reservations.
                                                // Therefore the initial calculated inventDimFixed may not be correct since it may cause a fix on a blank value.
                                                InventDimParm dimParmFromInventDimIssueLocal;
                                                dimParmFromInventDimIssueLocal.initFromInventDim(inventDimIssueLocal);

                                                InventDimFixed newDimFixedWithReducedDimensions = dimParmFromInventDimIssueLocal.inventDimFixed();
                                                
                                                if (inventDimFixed != newDimFixedWithReducedDimensions)
                                                {
                                                    //we need the AND of the two
                                                    inventDimFixed = inventDimFixed & newDimFixedWithReducedDimensions;
                                                }
                                            }
                                            inventTrans.inventDimId = inventDimIssueLocal.inventDimId;
                                        }

                                        if (_movementIssue.mustShowMarkingWarningOnUpdate()
                                            && !InventDim::isInventDimFixedEqual(inventTrans.inventDim(), inventDimReceipt, inventDimFixed, false))
                                        {
                                            InventUpd_Reservation::showWarningCannotReserveByMarking(markingRefInventTransOrigin, inventTrans);
                                            warning("@SYS127154");
                                            setRecId.add(inventTrans.RecId);
                                            continue;
                                        }

                                        inventTrans.InventDimFixed  = inventDimFixed;

                                        _movementIssue.transIdSum().setInventTransStatus(
                                            inventTrans,
                                            StatusReceipt::None,
                                            statusReceipt <= StatusReceipt::Registered ? StatusIssue::ReservPhysical : StatusIssue::ReservOrdered);

                                        InventUpdate::updateTransDimTransferReceipt(_movementIssue, inventTrans, inventTrans.inventDim(), false);

                                        inventTrans.update();

                                        doSumTrans = true;

                                        if (recId)
                                        {
                                            InventTrans issue = InventTrans::findRecId(recId,true);
                                            InventUpd_Reservation::assignInventDimToIssueTrans(issue, _movementIssue, inventDimIdReceipt);
                                            issue.update();
                                        }
                                    }
                                    else if (inventTrans.InventDimId != inventDimIdReceipt)
                                    {
                                        InventUpd_Reservation::assignInventDimToIssueTrans(inventTrans, _movementIssue, inventDimIdReceipt, true);
                                        inventTrans.update();
                                    }
                                }

                                setRecId.add(inventTrans.RecId);
                                qty += inventTrans.openQty();
                                cwQty += inventTrans.pdsCWOpenQty();
                                if (qty <= 0)
                                {
                                    // <GEERU>
                                    loop += 3;
                                    // </GEERU>
                                    break;
                                }
                            }

                            next inventTrans;
                        }
                    }
                    mi.next();
                }

                if (doSumTrans)
                {
                    if (!_skipInventTransSumUp)
                    {
                        _movementIssue.sumUpTransactions();
                    }

                    // Some inventory transactions were updated so check load line consistency
                    if (!_skipLoadLineSyncValidation
                    &&  _movementIssue.isItemWHSEnabled())
                    {
                        _movementIssue.checkWHSLoadLineInventTransConsistency();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveRefTransIdOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Attempts to update the reservation for marked inventory transactions that has status On order.
    /// </summary>
    /// <param name="_movementIssue">
    ///    <c>InventMovement</c> required to do the updates.
    /// </param>
    /// <param name="_skipInventTransSumUp">
    ///    Determines if <c>InventTrans</c> records should be summed together; optional.
    /// </param>
    public static void updateReserveRefTransIdOnOrder(InventMovement   _movementIssue, boolean _skipInventTransSumUp = false)
    {
        InventUpd_Reservation::updateReserveRefTransId(_movementIssue, true, _skipInventTransSumUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmRefInventTransId(InventTransId _refInventTransId = refInventTransId)
    {
        refInventTransId = _refInventTransId;
        return refInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInventDimOnHandCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inventory dimension criteria for a production input location can be set, therefore the proper criteria must be used
    /// </summary>
    /// <returns>
    ///  Returns inventory dimension criteria for the production input location if it exists, otherwise the standard inventory dimension criteria is returned
    /// </returns>
    protected InventDim determineInventDimOnHandCriteria()
    {
        if (onHandCriteriaSet)
        {
            return this.parmInventDimOnHandSelectionCriteria();
        }

        return this.parmInventDimCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimOnHandSelectionCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimOnHandSelectionCriteria(InventDim _inventDimOnHandSelectionCriteria = null)
    {
        // Set flag for determining whether or not this inventory dimension criteria will be used
        if (!prmisDefault(_inventDimOnHandSelectionCriteria))
        {
            inventDimOnHandSelectionCriteria = _inventDimOnHandSelectionCriteria;

            onHandCriteriaSet = true;
        }

        return inventDimOnHandSelectionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReserveBuffer</Name>
				<Source><![CDATA[
    public static InventUpd_Reservation newReserveBuffer(
        Common                  _buffer,
        InventQty               _reserveQty,
        InventMovSubType        _inventMovSubType = InventMovSubType::None,
        PdsCWInventQty        _cwQty = 0,
        PdsBatchAttribAutoRes   _useAttrib = false,
        TmpPdsBatchAttribSelect _attrSel = null,
        InventDim               _inventDimCriteria = null
        )
    {
        InventUpd_Reservation   reservation;
        InventMovement          inventMovement = InventMovement::constructNoThrow(_buffer,_inventMovSubType);

        if (inventMovement)
        {
            if (#PdsBatchAttribEnabled
            && PdsBatchAttribByItem::existItemIdAny(inventMovement.itemId()))
            {
                inventMovement.parmPdsBatchAttribAutoRes(_useAttrib);
            }
            reservation = InventUpd_Reservation::newMovement(inventMovement,
                                                         _reserveQty,
                                                         true,
                                                         false,
                                                         false,
                                                         _cwQty);

            TmpPdsBatchAttribSelect attrSel;
            attrSel.setTmpData(_attrSel);
            select firstonly attrSel;
            if (attrSel.RecId)
            {
                reservation.parmPdsTmpAttrSel(_attrSel);
            }

            if (_inventDimCriteria)
            {
                reservation.parmInventDimCriteria(_inventDimCriteria);

                InventDimParm localInventDimParm;
                localInventDimParm.initFromInventDim(_inventDimCriteria);
                reservation.parmInventDimParm(localInventDimParm);
                reservation.parmInventDimFixed(InventDimFixedClass::inventDimParm2InventDimFixed(localInventDimParm));
            }
        }

        return reservation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>