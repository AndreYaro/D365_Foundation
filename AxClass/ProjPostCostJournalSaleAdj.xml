<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostJournalSaleAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostJournalSaleAdj extends ProjPostCostJournal
{
    ProjCostTrans               projCostTransLocal;
    TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjCostTrans _projCostTrans, TmpProjAdjustmentCreateSale _tmpProjAdjustmentCreateSale)
    {
        LedgerJournalTrans  ledgerJournalTransLocal;

        projCostTransLocal = _projCostTrans;
        tmpProjAdjustmentCreateSale = _tmpProjAdjustmentCreateSale;

        super(ledgerJournalTransLocal);

        projTrans = ProjTrans::newProjTransCostTransSaleAdj(_projCostTrans, _tmpProjAdjustmentCreateSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        TransDate getLedgerTransDate()
        {
            return ledgerVoucher.lastTransDate();
        }

        ProjTransStatus getTransStatus()
        {
            ProjTransStatus ret;

            ret = this.parmTransStatus();

            if (!ret)
            {
                ret = ProjTransStatus::Posted;
            }

            return ret;
        }

        //Create ProjCostTransSale record
        projCostTransSale.clear();
        projCostTransSale = ProjCostTransSale::initTransFromAdjSale(tmpProjAdjustmentCreateSale);
        projCostTransSale.TransId = projCostTransLocal.TransId;
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            projCostTransSale.LedgerTransdate =this.parmAdjustmentDate();
        }
        else
        {
            projCostTransSale.LedgerTransdate = getLedgerTransDate();
        }
        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projCostTransSale.FundingSource))
        {
            projCostTransSale.LedgerSalesPosted  = true;
            projCostTransSale.LedgerSalesAmount = projTrans.transTurnoverMST();
        }
        projCostTransSale.TransStatus = getTransStatus();
        projCostTransSale.insert();

        this.parmTransIdSales(projCostTransSale.TransId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>