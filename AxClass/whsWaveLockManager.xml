<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLockManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWaveLockManager</c> class manages locks for warehouse wave execution processes.
/// </summary>
public class WhsWaveLockManager implements System.IDisposable
{
    #define.InvalidLevel(-1)
    ReqReaderWriterLock reqReaderWriterLock;
    Map                 mapLockNameNestingLevel;
    Map                 mapLockNameWaveId;
    private Map         mapLockNameShipmentId;
    private Map         mapLockNameProdBOMPool;
    [SysObsolete('The lockLog member is obsolete.', false, 19\04\2022)]
    static  Map         lockLog;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquireLockForShipmentWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to acquire a lock for shipment wave line creation.
    /// </summary>
    /// <param name="_shipmentId">
    ///    The shipment Id to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock was acquired; otherwise, false.
    /// </returns>
    private boolean acquireLockForShipmentWaveLineCreation(
        WHSShipmentId   _shipmentId,
        WHSWaveLockWait _waveLockWait)
    {
        boolean result = false;

        if (_shipmentId)
        {
            var lockName = WHSWaveLockManager::lockNameShipmentWaveLineCreation(_shipmentId, curext());

            if (this.canLockForShipmentId(lockName, _shipmentId))
            {
                result = reqReaderWriterLock.tryEnterUpdateLock(lockName, _waveLockWait);

                if (result)
                {
                    mapLockNameShipmentId.insert(lockName, _shipmentId);
                    this.increaseNestingLevel(lockName);
                }
            }            
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireLockForProdWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to acquire a lock for production wave line creation.
    /// </summary>
    /// <param name="_prodBomPoolInventTransId">
    ///    The InventTransId of the production BOM pool to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock was acquired; otherwise, false.
    /// </returns>
    private boolean acquireLockForProdWaveLineCreation(
        InventTransId   _prodBomPoolInventTransId,
        WHSWaveLockWait _waveLockWait)
    {
        boolean result = false;

        if (_prodBomPoolInventTransId)
        {
            var lockName = WHSWaveLockManager::lockNameProdWaveLineCreation(_prodBomPoolInventTransId, curext());

            if (this.canLockForProdBOMPool(lockName, _prodBomPoolInventTransId))
            {
                result = reqReaderWriterLock.tryEnterUpdateLock(lockName, _waveLockWait);

                if (result)
                {
                    mapLockNameProdBOMPool.insert(lockName, _prodBomPoolInventTransId);
                    this.increaseNestingLevel(lockName);
                }
            }            
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireLockForItemDemandWaveAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for wave allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id to acquire the lock for.
    /// </param>
    /// <param name="_demandInventDimId">
    ///    The inventDimId of the know dimensions of the demand.
    /// </param>
    /// <param name="_whsWaveId">
    ///    The wave ID to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock could be acquired; otherwise, false.
    /// </returns>
    private boolean acquireLockForItemDemandWaveAllocation(
        ItemId           _itemId,
        InventDimId      _demandInventDimId,
        WHSWaveId        _whsWaveId,
        WHSWaveLockWait  _waveLockWait)
    {
        boolean result = false;

        if (_itemId && _demandInventDimId)
        {
            var lockName = WHSWaveLockManager::lockNameItemDemandWaveAllocation(_itemId, _demandInventDimId);

            if (this.canLockForWaveId(lockName, _whsWaveId))
            {
                result = reqReaderWriterLock.tryEnterUpdateLock(lockName, _waveLockWait);

                if (result)
                {
                    mapLockNameWaveId.insert(lockName, _whsWaveId);
                    this.increaseNestingLevel(lockName);
                }
            }            
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireLockForProdPickQtyAllocation</Name>
				<Source><![CDATA[
    private boolean acquireLockForProdPickQtyAllocation(
        ItemId           _itemId,
        InventDimId      _allocationInventDimId,
        WHSWaveId        _whsWaveId,
        WHSWaveLockWait  _waveLockWait)
    {
        boolean result = false;

        if (_itemId && _allocationInventDimId)
        {
            var lockName = WHSWaveLockManager::lockNameProdPickQtyAllocation(_itemId, _allocationInventDimId);

            if (this.canLockForWaveId(lockName, _whsWaveId))
            {
                result = reqReaderWriterLock.tryEnterUpdateLock(lockName, _waveLockWait);

                if (result)
                {
                    mapLockNameWaveId.insert(lockName, _whsWaveId);
                    this.increaseNestingLevel(lockName);
                }
            }            
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the object and releases all currently held locks.
    /// </summary>
    public void dispose()
    {
        if (reqReaderWriterLock)
        {
            reqReaderWriterLock.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLockForWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given lock name can be used for wave ID.
    /// </summary>
    /// <param name="_lockName">
    ///    The name of the lock.
    /// </param>
    /// <param name="_whsWaveId">
    ///    The wave ID.
    /// </param>
    /// <returns>
    ///    true if the lock name can be used; otherwise, false.
    /// </returns>
    protected boolean canLockForWaveId(
        str       _lockName,
        WHSWaveId _whsWaveId)
    {
        boolean result = true;

        if (mapLockNameWaveId.exists(_lockName))
        {
            result = mapLockNameWaveId.lookup(_lockName) == _whsWaveId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLockForShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given lock name can be used for shipment Id.
    /// </summary>
    /// <param name="_lockName">
    ///    The name of the lock.
    /// </param>
    /// <param name="_whsShipmentId">
    ///    The shipment Id.
    /// </param>
    /// <returns>
    ///    true if the lock name can be used; otherwise, false.
    /// </returns>
    private boolean canLockForShipmentId(
        str             _lockName,
        WHSShipmentId   _whsShipmentId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLockForProdBOMPool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given lock name can be used for production BOM pool.
    /// </summary>
    /// <param name="_lockName">
    ///    The name of the lock.
    /// </param>
    /// <param name="_prodBomPoolInventTransId">
    ///    The production BOM pool.
    /// </param>
    /// <returns>
    ///    true if the lock name can be used; otherwise, false.
    /// </returns>
    private boolean canLockForProdBOMPool(
        str             _lockName,
        InventTransId   _prodBomPoolInventTransId)
    {
        
        return true;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseNestingLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the nesting level.
    /// </summary>
    /// <param name="_lockName">
    ///    The lock name.
    /// </param>
    /// <returns>
    ///    The current nesting level.
    /// </returns>
    protected int decreaseNestingLevel(str _lockName)
    {
        int currentLevel = #InvalidLevel;

        if (mapLockNameNestingLevel.exists(_lockName))
        {
            currentLevel = mapLockNameNestingLevel.lookup(_lockName) - 1;

            if (currentLevel)
            {
                mapLockNameNestingLevel.insert(_lockName,currentLevel);
            }
            else
            {
                mapLockNameNestingLevel.remove(_lockName);
            }
        }

        return currentLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseNestingLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increases the nesting level.
    /// </summary>
    /// <param name="_lockName">
    ///     The lock name.
    /// </param>
    protected void increaseNestingLevel(str _lockName)
    {
        int currentLevel = 0;

        if (mapLockNameNestingLevel.exists(_lockName))
        {
            currentLevel = mapLockNameNestingLevel.lookup(_lockName);
        }

        mapLockNameNestingLevel.insert(_lockName,currentLevel + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class instance variables.
    /// </summary>
    protected void init()
    {
        reqReaderWriterLock     = ReqReaderWriterLock::construct();
        mapLockNameNestingLevel = new Map(Types::String, Types::Integer);
        mapLockNameWaveId       = new Map(Types::String, Types::String);
        mapLockNameShipmentId   = new Map(Types::String, Types::String);
        mapLockNameProdBOMPool  = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockForItemDemandWaveAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for wave allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id to acquire the lock for.
    /// </param>
    /// <param name="_demandInventDimId">
    ///    The inventDimId of the know dimensions of the demand.
    /// </param>
    /// <param name="_whsWaveId">
    ///    The wave ID to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    The lock could not be acquired.
    /// </exception>
    public void lockForItemDemandWaveAllocation(
        ItemId           _itemId,
        InventDimId      _demandInventDimId,
        WHSWaveId        _whsWaveId,
        WHSWaveLockWait  _waveLockWait)
    {
        boolean result = this.acquireLockForItemDemandWaveAllocation(_itemId, _demandInventDimId, _whsWaveId, _waveLockWait);

        if (!result)
        {
            throw error(strFmt("@WAX:WaveAllocationKeyLockFailureError", _itemId, _demandInventDimId, _whsWaveId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseForWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a lock for a given wave ID.
    /// </summary>
    /// <param name="_waveId">
    ///    The wave ID.
    /// </param>
    public void releaseForWaveId(WHSWaveId _waveId)
    {
        if (_waveId)
        {
            reqReaderWriterLock.exit(WHSWaveLockManager::lockNameWaveId(_waveId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseForShipmentWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a lock for a given shipment wave line creation.
    /// </summary>
    /// <param name="_shipmentId">
    ///    The shipment Id of the lock being released.
    /// </param>
    /// <remarks>
    ///    The lock is released when the nesting level reaches zero; otherwise the level is decreased and the lock remains in place.
    /// </remarks>
    public void releaseForShipmentWaveLineCreation(
        WHSShipmentId      _shipmentId)
    {
        if (_shipmentId)
        {
            var lockName = WHSWaveLockManager::lockNameShipmentWaveLineCreation(_shipmentId, curext());

            if (this.decreaseNestingLevel(lockName) == 0)
            {
                mapLockNameWaveId.remove(lockName);
                reqReaderWriterLock.exit(lockName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseForProdWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a lock for a given production wave line creation.
    /// </summary>
    /// <param name="_prodBomPoolInventTransId">
    ///    The production BOM pool of the lock being released.
    /// </param>
    /// <remarks>
    ///    The lock is released when the nesting level reaches zero; otherwise the level is decreased and the lock remains in place.
    /// </remarks>
    public void releaseForProdWaveLineCreation(
        InventTransId      _prodBomPoolInventTransId)
    {
        if (_prodBomPoolInventTransId)
        {
            var lockName = WHSWaveLockManager::lockNameProdWaveLineCreation(_prodBomPoolInventTransId, curext());

            if (this.decreaseNestingLevel(lockName) == 0)
            {
                mapLockNameWaveId.remove(lockName);
                reqReaderWriterLock.exit(lockName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseForItemDemandWaveAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a lock for a given wave allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id of the item being allocated.
    /// </param>
    /// <param name="_demandInventDimId">
    ///    The inventDimId of the known dimensions of the demand.
    /// </param>
    /// <remarks>
    ///    The lock is released when the nesting level reaches zero; otherwise the level is decreased and the lock remains in place.
    /// </remarks>
    public void releaseForItemDemandWaveAllocation(
        ItemId      _itemId,
        InventDimId _demandInventDimId)
    {
        if (_itemId && _demandInventDimId)
        {
            var lockName = WHSWaveLockManager::lockNameItemDemandWaveAllocation(_itemId, _demandInventDimId);

            if (this.decreaseNestingLevel(lockName) == 0)
            {
                mapLockNameWaveId.remove(lockName);
                reqReaderWriterLock.exit(lockName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testLockForWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests if a lock can be aquired for the given wave Id.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id to test for a lock.
    /// </param>
    /// <returns>
    /// true if a lock can be made for the waveId; otherwise, false.
    /// </returns>
    public boolean testLockForWaveId(WHSWaveId  _waveId)
    {
        return ReqReaderWriterLock::testUpdate(WHSWaveLockManager::lockNameWaveId(_waveId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockForItemDemandWaveAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for wave allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id to acquire the lock for.
    /// </param>
    /// <param name="_demandInventDimId">
    ///    The inventDimId of the know dimensions of the demand.
    /// </param>
    /// <param name="_whsWaveId">
    ///    The wave ID to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock could be acquired; otherwise, false.
    /// </returns>
    public boolean tryLockForItemDemandWaveAllocation(
        ItemId           _itemId,
        InventDimId      _demandInventDimId,
        WHSWaveId        _whsWaveId,
        WHSWaveLockWait  _waveLockWait)
    {
        return this.acquireLockForItemDemandWaveAllocation(_itemId, _demandInventDimId, _whsWaveId, _waveLockWait);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockForProdPickQtyAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for production pick quantity allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id to acquire the lock for.
    /// </param>
    /// <param name="_allocationInventDimId">
    ///    The inventDimId of the know dimensions of the allocation.
    /// </param>
    /// <param name="_whsWaveId">
    ///    The wave ID to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    The lock could not be acquired.
    /// </exception>
    internal void lockForProdPickQtyAllocation(
        ItemId           _itemId,
        InventDimId      _allocationInventDimId,
        WHSWaveId        _whsWaveId,
        WHSWaveLockWait  _waveLockWait)
    {
        if (!this.acquireLockForProdPickQtyAllocation(_itemId, _allocationInventDimId, _whsWaveId, _waveLockWait))
        {
            throw error(strFmt("@WAX:WaveAllocationKeyLockFailureError", _itemId, _allocationInventDimId, _whsWaveId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockForShipmentWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for shipment wave line creation.
    /// </summary>
    /// <param name="_shipmentId">
    ///    The shipment Id to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock could be acquired; otherwise, false.
    /// </returns>
    public boolean tryLockForShipmentWaveLineCreation(
        WHSShipmentId   _shipmentId,
        WHSWaveLockWait _waveLockWait)
    {
        return this.acquireLockForShipmentWaveLineCreation(_shipmentId, _waveLockWait);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockForProdWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for production wave line creation.
    /// </summary>
    /// <param name="_prodBomPoolInventTransId">
    ///    The production BOM pool to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock could be acquired; otherwise, false.
    /// </returns>
    public boolean tryLockForProdWaveLineCreation(
        InventTransId   _prodBomPoolInventTransId,
        WHSWaveLockWait _waveLockWait)
    {
        return this.acquireLockForProdWaveLineCreation(_prodBomPoolInventTransId, _waveLockWait);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockForWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to acquire a lock for a given wave.
    /// </summary>
    /// <param name="_whsWaveId">
    ///    The wave ID to acquire the lock for.
    /// </param>
    /// <param name="_waveLockWait">
    ///    The number of milliseconds to wait for the lock to be acquired.
    /// </param>
    /// <param name="_throwErrorOnFailure">
    ///    A Boolean value that indicates if an error must be thrown in case the lock could not be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock could be acquired; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The lock could not be acquired and the parameter specified that an error must be thrown in that case.
    /// </exception>
    public boolean tryLockForWaveId(
        WHSWaveId        _whsWaveId,
        WHSWaveLockWait  _waveLockWait,
        boolean          _throwErrorOnFailure)
    {
        str     lockName;
        boolean result = false;

        if (_whsWaveId)
        {
            lockName = WHSWaveLockManager::lockNameWaveId(_whsWaveId);
            result = reqReaderWriterLock.tryEnterUpdateLock(lockName,_waveLockWait);
        }

        if (   !result
            && _throwErrorOnFailure)
        {
            throw error("@WAX5822");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLockForWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tries to reacquire a lock for a given wave.
    /// </summary>
    /// <param name="_whsWaveId">
    ///    The wave ID to acquire the lock for.
    /// </param>
    public void ensureLockForWaveId(WHSWaveId _whsWaveId)
    {
        str     lockName;
        boolean result = false;

        if (_whsWaveId)
        {
            lockName = WHSWaveLockManager::lockNameWaveId(_whsWaveId);
            reqReaderWriterLock.ensureStillHasUpdateLock(lockName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWaveLockManager construct()
    {
        return new WHSWaveLockManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockNameWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string that can be used to identify the lock.
    /// </summary>
    /// <param name="_waveId">
    ///    The waveId to Lock.
    /// </param>
    /// <returns>
    ///    A string that can be used to identify the lock.
    /// </returns>
    protected static str lockNameWaveId(WHSWaveId _waveId)
    {
        return strFmt('%1#%2#%3',funcName(),curext(),_waveId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockNameItemDemandWaveAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string that can be used to identify the lock for wave allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimensions Id.
    /// </param>
    /// <param name="_company">
    ///    The dataAreaId of the company the lock should be placed on; optional.
    /// </param>
    /// <returns>
    ///    A string that can be used to identify the lock for wave allocation.
    /// </returns>
    protected static str lockNameItemDemandWaveAllocation(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        DataAreaId          _company = curext())
    {
        return strFmt('%1#%2#%3#%4', funcName(), _company, _itemId ,_inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockNameProdPickQtyAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string that can be used to identify the lock for production pick quantity allocation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item Id.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimensions Id.
    /// </param>
    /// <param name="_company">
    ///    The dataAreaId of the company the lock should be placed on; optional.
    /// </param>
    /// <returns>
    ///    A string that can be used to identify the lock for production pick quantity allocation.
    /// </returns>
    internal static str lockNameProdPickQtyAllocation(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        DataAreaId          _company = curext())
    {
        return strFmt('%1#%2#%3#%4', funcName(), _company, _itemId ,_inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockNameShipmentWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string that can be used to identify the lock for wave line creation.
    /// </summary>
    /// <param name="_shipmentId">
    ///    The shipment Id.
    /// </param>
    /// <param name="_company">
    ///    The dataAreaId of the company the lock should be placed on; optional.
    /// </param>
    /// <returns>
    ///    A string that can be used to identify the lock for wave allocation.
    /// </returns>
    private static str lockNameShipmentWaveLineCreation(
        WHSShipmentID   _shipmentId,
        DataAreaId      _company)
    {
        return strFmt('%1#%2#%3', funcName(), _company, _shipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockNameProdWaveLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string that can be used to identify the lock for wave line creation.
    /// </summary>
    /// <param name="_prodBomPoolInventTransId">
    ///    The InventTransId of the production BOM pool.
    /// </param>
    /// <param name="_company">
    ///    The dataAreaId of the company the lock should be placed on; optional.
    /// </param>
    /// <returns>
    ///    A string that can be used to identify the lock for wave allocation.
    /// </returns>
    private static str lockNameProdWaveLineCreation(
        InventTransId   _prodBomPoolInventTransId,
        DataAreaId      _company)
    {
        return strFmt('%1#%2#%3', funcName(), _company, _prodBomPoolInventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSWaveLockManager</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSWaveLockManager</c> class.
    /// </returns>
    public static WHSWaveLockManager newStandard()
    {
        WHSWaveLockManager  whsWaveLockManager = WHSWaveLockManager::construct();

        whsWaveLockManager.init();

        return whsWaveLockManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>