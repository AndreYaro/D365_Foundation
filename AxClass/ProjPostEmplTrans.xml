<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostEmplTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostEmplTrans extends ProjPost
{
    ProjEmplTrans   projEmplTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a credit amount for the cost account; otherwise, false.
    /// </returns>
    protected boolean costEnterCredit()
    {
        if (projEmplTrans.projTable().isInvestmentProject())
        {
            if (this.parmElimination())
            {
                if (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet) // reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a debit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a debit amount for the cost account; otherwise, false.
    /// </returns>
    protected boolean costEnterDebit()
    {
        if (projEmplTrans.projTable().isInvestmentProject())
        {
            if (this.parmElimination())
            {
                if (this.parmLedgerStatusCost() != ProjLedgerStatus::BalanceSheet) // not reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension to use to post the credit side of transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension to use to post the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;

            switch (projTrans.ledgerStatusCost())
            {
                case ProjLedgerStatus::None         :
                    ledgerDimension = projTrans.payrollAllocationLedgerDimension(_fundingSourceId);
                    break;

                case ProjLedgerStatus::BalanceSheet :
                    if (projTrans.projLineProperty().ToBeCapitalize)
                    {
                        ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                    }
                    else
                    {
                        ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                    }
                    break;

                case ProjLedgerStatus::Operations   :
                    ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                    break;
            }
        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension to use to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;

            switch (projTrans.ledgerStatusCost())
            {
                case ProjLedgerStatus::None         :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::BalanceSheet :
                            if (projTrans.projLineProperty().ToBeCapitalize)
                            {
                                ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                            }
                            else
                            {
                                ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                            }
                            break;

                        case ProjLedgerStatus::Operations   :
                            ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                            break;
                    }
                    break;

                case ProjLedgerStatus::BalanceSheet :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::None         :
                            ledgerDimension = projTrans.payrollAllocationLedgerDimension(_fundingSourceId);
                            break;

                        case ProjLedgerStatus::Operations   :
                            ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                            break;
                    }
                    break;

                case ProjLedgerStatus::Operations   :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::None         :
                            ledgerDimension = projTrans.payrollAllocationLedgerDimension(_fundingSourceId);
                            break;

                        case ProjLedgerStatus::BalanceSheet :
                            if (projTrans.projLineProperty().ToBeCapitalize)
                            {
                                ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                            }
                            break;
                    }
            }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default dimension for the hour transaction line with worker resoruce default dimension.
    /// </summary>
    public DimensionDefault defaultDimension()
    {
        if (this.postingType() == LedgerPostingType::ProjPayrollAllocation)
        {
            return ResourceFacade::getDefaultDimension(projTrans.resource());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostEmplTrans</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        projEmplTrans   = _buffer;
        projTrans       = ProjTrans::newProjEmplTrans(projEmplTrans);

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type that is associated with posting project costs based on the
    /// current project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        LedgerPostingType ledgerPostingType;

            switch (projTrans.ledgerStatusCost())
            {
                case ProjLedgerStatus::None         :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::BalanceSheet :
                            if (projTrans.projLineProperty().ToBeCapitalize)
                            {
                                ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                            }
                            else
                            {
                            if (projTrans.isIntercompany())
                            {
                                ledgerPostingType = ledgerPostingType::IntercompanyCost;
                            }
                            else
                            {
                                ledgerPostingType = LedgerPostingType::ProjCost;
                            }
                        }
                            break;

                        case ProjLedgerStatus::Operations   :
                        if (projTrans.isIntercompany())
                        {
                            ledgerPostingType = ledgerPostingType::IntercompanyCost;
                        }
                        else
                        {
                            ledgerPostingType = LedgerPostingType::ProjCost;
                        }
                            break;
                    }
                    break;
                case ProjLedgerStatus::BalanceSheet :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::None         :
                            ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                            break;

                        case ProjLedgerStatus::Operations   :
                        if (projTrans.isIntercompany())
                        {
                            ledgerPostingType = ledgerPostingType::IntercompanyCost;
                        }
                        else
                        {
                            ledgerPostingType = LedgerPostingType::ProjCost;
                        }
                            break;
                    }
                    break;

                case ProjLedgerStatus::Operations   :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::None         :
                        if (projTrans.isIntercompany())
                        {
                            ledgerPostingType = LedgerPostingType::VendBalance;
                        }
                        else
                        {
                            ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                        }
                            break;

                        case ProjLedgerStatus::BalanceSheet :
                            if (projTrans.projLineProperty().ToBeCapitalize)
                        {
                                ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                        }
                            break;
                    }
                    break;
            }
        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type for project offset cost posting based on the current ledger
    /// status of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType   ledgerPostingType;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::None:
        if (projTrans.isIntercompany())
        {
            ledgerPostingType = LedgerPostingType::VendBalance;
        }
        else
        {
                    ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                }
                    break;

                case ProjLedgerStatus::BalanceSheet :
                    if (projTrans.projLineProperty().ToBeCapitalize)
                    {
                        ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                    }
                    else
                    {
                        ledgerPostingType = LedgerPostingType::ProjCost;
                    }
                    break;

                case ProjLedgerStatus::Operations   :
                if (projTrans.isIntercompany())
                {
                    ledgerPostingType = LedgerPostingType::IntercompanyCost;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                    break;
            }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>