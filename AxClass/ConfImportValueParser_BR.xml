<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfImportValueParser_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ConfImportValueParser_BR</c> provides methods to parse the configurator fields or methods and a method to validate date type fields.
/// </summary>
class ConfImportValueParser_BR
{
    ConfLayoutFields_BR confLayoutFields;
    str                 data;
    int                 currentFileLineNumber;
    List                listOfParsingErrors;
    anytype             parsedValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addParsingError</Name>
				<Source><![CDATA[
        private void addParsingError(str _errorMessage)
    {
        str tableFieldOrMethodName;

        tableFieldOrMethodName = confLayoutFields.TableName + '.';
        tableFieldOrMethodName += confLayoutFields.FieldName ? confLayoutFields.FieldName : confLayoutFields.MethodName;

        listOfParsingErrors.addEnd(strFmt("@GLS223813",
                                          currentFileLineNumber,
                                          confLayoutFields.StartPos,
                                          tableFieldOrMethodName,
                                          data,
                                          _errorMessage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doParse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the method getFieldValue to parse a string value and assigns it to a global variable.
    /// </summary>
    public void doParse()
    {
        parsedValue = this.getFieldValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Parses a string containing the value of a field being imported.
    /// </summary>
    /// <returns>
    ///     A <c>anytype</c> value representing the parsed value.
    /// </returns>
    protected anytype getFieldValue()
    {
        #ConfMacros_BR

        sysDictField    sysDictField;
        SysDictType     sysDictType;
        anytype         returnValue;
        int             formatLength, numOfDecimals;
        str             format      = confLayoutFields.Format;
        AmountCur       amountValue;

        // issue with timeOfDay type
        if (confLayoutFields.Type == ConfFieldType_BR::Integer)
        {
            sysDictField = new sysDictField(tablename2id(confLayoutFields.TableName),
                                            fieldname2id(tablename2id(confLayoutFields.TableName),
                                                         confLayoutFields.FieldName));

            if (sysDictField)
            {
                sysDictType = new SysDictType(sysDictField.typeId());

                if (sysDictType.extend() == extendedTypeNum(timeOfDay))
                {
                    confLayoutFields.Type = ConfFieldType_BR::Time_type;
                }
            }
        }

        switch (confLayoutFields.Type)
        {
            case ConfFieldType_BR::Date_type:
                if (!this.validateDateType(data, confLayoutFields.Format))
                {
                    this.addParsingError("@GLS1191");
                }
                returnValue = this.parseDate(data, confLayoutFields.Format);
                break;

            case ConfFieldType_BR::Integer:
                returnValue = any2int(data);
                break;

            case ConfFieldType_BR::Real_type:
                formatLength = strlen(format);
                if (strfind(format, 'V', 3, formatLength))
                {
                    amountValue = any2real(data);
                }
                else
                {
                    numOfdecimals = str2int(substr(format, (strscan(format, ')9(', 1, formatLength)+3), formatLength-1));
                    data = strins(data, #FullStop, (strlen(data) - numOfdecimals + 1));
                    if (strscan(data, #hyphen, 1, strlen(data)))
                    {
                        amountValue = -1 * str2num(strrem(data, #hyphen));
                    }
                    else
                    {
                        amountValue = str2num(data);
                    }
                }
                returnValue = amountValue;
                break;

            case ConfFieldType_BR::String_type:
                returnValue = strRTrim(strLTrim(any2str(data)));
                break;

            case ConfFieldType_BR::Time_type:
                returnValue = any2str(str2time(substr(data, 1, 2) + ':' + substr(data, 3, 2) + ':' + substr(data, 5, 2)));
                break;

            case ConfFieldType_BR::DateTime_type :
                returnValue = this.parseDateTime(data, #DateTimeFormat);
                break;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasParsingErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any parsing errors.
    /// </summary>
    /// <returns>
    /// true if there are parsing errors; false otherwise.
    /// </returns>
    public boolean hasParsingErrors()
    {
        return listOfParsingErrors.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <param name="_confLayoutFields">
    /// Table buffer ConfLayoutFields_BR containing the information of the field being imported.
    /// </param>
    /// <param name="_data">
    /// Data being parsed to import.
    /// </param>
    /// <param name="_currentFileLineNumber">
    /// Current line number of the file being imported.
    /// </param>
    public void new(ConfLayoutFields_BR _confLayoutFields, str _data, int _currentFileLineNumber)
    {
        confLayoutFields        = _confLayoutFields;
        data                    = _data;
        currentFileLineNumber   = _currentFileLineNumber;
        listOfParsingErrors     = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a string containing a date.
    /// </summary>
    /// <param name="_dateString">A string containing the date.</param>
    /// <param name="_format">A string containing the format of the date.</param>
    /// <returns>A <c>date</c> value parsed.</returns>
    protected date parseDate(str _dateString, str _format)
    {
        utcDateTime dateTime;

        int dateDay;
        int dateMonth;
        int dateYear;

        boolean ok = true;

        dateYear = str2int(substr(_dateString, strfind(_format,'YYYY', 1, strLen(_format)), 4));

        if (dateYear == 0)
        {
            dateYear = str2int(substr(_dateString, strfind(_format,'YY', 1, strLen(_format)), 2));
        }

        if (dateYear < 1900 || dateYear > 2155)
        {
            this.addParsingError(strfmt("@GLS60369", dateYear));
        }

        dateMonth = str2int(substr(_dateString, strfind(_format, 'MM', 1, strLen(_format)), 2));

        if (dateMonth < 1 || dateMonth > 12)
        {
            this.addParsingError(strfmt("@GLS60370", dateMonth));
        }

        dateDay = str2int(substr(_dateString, strfind(_format, 'DD', 1, strLen(_format)), 2));

        if (dateDay < 1 || dateDay > 31)
        {
            this.addParsingError(strfmt("@GLS60371", dateDay));
        }

        if (!this.hasParsingErrors())
        {
            dateTime = DateTimeUtil::addYears   (dateTime, dateYear - 1900);
            dateTime = DateTimeUtil::addMonths  (dateTime, dateMonth - 1);
            dateTime = DateTimeUtil::addDays    (dateTime, dateDay - 1);
        }

        return DateTimeUtil::date(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a string containing a datetime.
    /// </summary>
    /// <param name="_dateTimeString">A string containing the datetime.</param>
    /// <param name="_format">A string containing the format of the datetime.</param>
    /// <returns>A <c>utcDateTime</c> value parsed.</returns>
    protected utcDateTime parseDateTime(str _dateTimeString, str _format)
    {
        utcDateTime dateTime;

        int dateDay;
        int dateMonth;
        int dateYear;
        int dateHour;
        int dateMinute;
        int dateSecond;

        boolean ok = true;

        dateYear = str2int(substr(_dateTimeString, strfind(_format,'YYYY',1 , 14), 4));

        if (dateYear < 1900 || dateYear > 2155)
        {
            this.addParsingError(strfmt("@GLS60369",dateYear));
        }

        dateMonth = str2int(substr(_dateTimeString, strfind(_format,'MM', 1, 14), 2));

        if (dateMonth < 1 || dateMonth > 12)
        {
            this.addParsingError(strfmt("@GLS60370", dateMonth));
        }

        dateDay = str2int(substr(_dateTimeString, strfind(_format,'DD', 1, 14), 2));

        if (dateDay < 1 || dateDay > 31)
        {
            this.addParsingError(strfmt("@GLS60371", dateDay));
        }

        dateHour = str2int(substr(_dateTimeString, strfind(_format,'HH', 1, 14), 2));

        if (dateHour < 0 || dateHour > 23)
        {
            this.addParsingError(strfmt("@GLS60639", dateHour));
        }

        dateMinute = str2int(substr(_dateTimeString, strfind(_format, 'NN', 1, 14), 2));

        if (dateMinute < 0 || dateMinute > 59)
        {
            this.addParsingError(strfmt("@GLS60640", dateMinute));
        }

        dateSecond = str2int(substr(_dateTimeString, strfind(_format, 'SS', 1, 14), 2));

        if (dateSecond < 0 || dateSecond > 59)
        {
            this.addParsingError(strfmt("@GLS60641", dateSecond));
        }

        if (!this.hasParsingErrors())
        {
            dateTime = DateTimeUtil::addYears   (dateTime, dateYear - 1900);
            dateTime = DateTimeUtil::addMonths  (dateTime, dateMonth - 1);
            dateTime = DateTimeUtil::addDays    (dateTime, dateDay - 1);
            dateTime = DateTimeUtil::addHours   (dateTime, dateHour);
            dateTime = DateTimeUtil::addMinutes (dateTime, dateMinute);
            dateTime = DateTimeUtil::addSeconds (dateTime, dateSecond);
        }

        return dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the parsed value of the field being imported.
    /// </summary>
    /// <returns>
    /// Parsed value.
    /// </returns>
    public anyType parsedValue()
    {
        return parsedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsingErrorsAsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a string with all parsing errors and returns.
    /// </summary>
    /// <returns>
    /// A string containing the parsing errors.
    /// </returns>
    public str parsingErrorsAsString()
    {
        str             parsingErrorsAsString;
        ListEnumerator  le;

        le = listOfParsingErrors.getEnumerator();

        while (le.moveNext())
        {
            parsingErrorsAsString += le.current() + '\n\r';
        }

        return parsingErrorsAsString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a string represents a date.
    /// </summary>
    /// <param name="_date">The string containing the date value to be parsed.</param>
    /// <param name="_format">The string containing the date format.</param>
    /// <returns>true if the string represents a date; false, otherwise.</returns>
    protected boolean validateDateType(str _date, str _format)
    {
        int dateDay;
        int dateMonth;
        int dateYear;
        boolean ok = true;

        dateYear = str2int(substr(_date, strFind(_format, 'YYYY', 1, 8), 4));

        if (dateYear > 2155)
        {
            this.addParsingError(strfmt("@GLS60369", dateYear));
        }

        dateMonth = str2int(substr(_date, strFind(_format, 'MM', 1, 8), 2));

        if (dateMonth > 12)
        {
            this.addParsingError(strfmt("@GLS60370", dateMonth));
        }

        dateDay = str2int(substr(_date, strFind(_format, 'DD', 1, 8), 2));

        if (dateDay > 31)
        {
            this.addParsingError(strfmt("@GLS60371", dateDay));
        }

        return !this.hasParsingErrors();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>