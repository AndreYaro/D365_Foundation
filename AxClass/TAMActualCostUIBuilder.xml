<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMActualCostUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMActualCostUIBuilder</c> is the UI Builder class for <c>TAMActualCost</c> SSRS Report.
/// </summary>
public class TAMActualCostUIBuilder extends SrsReportDataContractUIBuilder
{
    TAMActualCostContract       contract;
    DialogField                 promotionIDField;
    DialogField                 custAccountField;
    DialogField                 detailField;
    DialogField                 plannedField;
    DialogField                 incurredField;
    DialogField                 actualField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds promotion ID, customer account, detail, planned,
    /// incurred, and actual fields to the dialog.
    /// </summary>
    public void build()
    {
        contract = this.dataContractObject() as TAMActualCostContract;
        promotionIDField = this.addDialogField(methodStr(TAMActualCostContract, parmPromotionID), contract);
        promotionIDField.lookupButton(2);

        custAccountField = this.addDialogField(methodStr(TAMActualCostContract, parmCustAccount), contract);
        custAccountField.lookupButton(2);

        detailField = this.addDialogField(methodStr(TAMActualCostContract, parmDetail), contract);
        plannedField = this.addDialogField(methodStr(TAMActualCostContract, parmPlanned), contract);
        incurredField = this.addDialogField(methodStr(TAMActualCostContract, parmIncurred), contract);
        actualField = this.addDialogField(methodStr(TAMActualCostContract, parmActual), contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccountLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters only customers that have promotion records, not all of them
    /// </summary>
    public void custAccountLookup()
    {
        Query                   query;
        QueryBuildDataSource    qbdsPromotionCust;
        container               selectedFields;
        int                     multiSelectTableNum = tableNum(TAMPromotionCust);
        query = new query();
        qbdsPromotionCust = query.addDataSource(tableNum(TAMPromotionCust));
        qbdsPromotionCust.fields().addField(fieldNum(TAMPromotionCust, CustAccount));
        qbdsPromotionCust.addGroupByField(fieldNum(TAMPromotionCust, CustAccount));

        selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(TAMPromotionCust, CustAccount))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), custAccountField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
        public void postRun()
    {
        this.promotionIDLookup();
        this.custAccountLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promotionIDLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the promotion ID selection.
    /// </summary>
    public void promotionIDLookup()
    {
        Query                   query;
        QueryBuildDataSource    qbdsTAMTradePromotion;
        container               selectedFields;
        int                     multiSelectTableNum = tableNum(TAMTradePromotion);
        query = new query();
        qbdsTAMTradePromotion = query.addDataSource(tableNum(TAMTradePromotion));
        qbdsTAMTradePromotion.fields().addField(fieldNum(TAMTradePromotion, PromotionID));
        qbdsTAMTradePromotion.fields().addField(fieldNum(TAMTradePromotion, PromotionDescription));

        selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(TAMTradePromotion, PromotionID))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), promotionIDField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>