<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchRFQCaseLineType extends InventType implements InventDistinctProductOrderDefaulting
{
    PurchRFQCaseLine    purchRFQCaseLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the RFQ line is allowed to be deleted or marked for deletion.
    /// </summary>
    /// <returns>
    /// true if the line is allowed to be deleted or marked for deletion; otherwise, false.
    /// </returns>
    public boolean deleteLineAllowed()
    {
        return this.canDelete() || this.canMarkForDeletion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ case line record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ case line record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current <c>PurchRFQCaseLine</c> record can be deleted.
    /// </summary>
    /// <returns>true if the record can be deleted; otherwise, false.</returns>
    public boolean canDelete()
    {
        PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQCaseLine.RFQCaseId);
        
        if ((purchRFQCaseLine.StatusLow == PurchRFQStatus::Created && purchRFQCaseLine.StatusHigh == PurchRFQStatus::Created)
           || (purchRFQCaseLine.StatusLow == PurchRFQStatus::Canceled && purchRFQCaseLine.StatusHigh == PurchRFQStatus::Canceled) 
           || purchRFQCaseTable.isAmended == NoYes::Yes)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMarkForDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether or not a RFQ case line can be marked for deletion.
    /// </summary>
    /// <returns>
    /// true if the RFQ case line can be marked for deletion; otherwise, false.
    /// </returns>
    public boolean canMarkForDeletion()
    {
        PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQCaseLine.RFQCaseId);
        
        return ( (purchRFQCaseLine.StatusHigh != PurchRFQStatus::Accepted && purchRFQCaseLine.StatusHigh != PurchRFQStatus::Canceled) 
                 && purchRFQCaseTable.isAmended == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory and financial dimensions for a <c>PurchRFQCaseLine</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record buffer.
    /// </param>
    /// <param name="_rfqLine">
    /// A <c>PurchRFQLine</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> record buffer.
    /// </returns>
    InventDim initDimensions(InventTable _inventTable, PurchRFQLine _rfqLine = null)
    {
        InventDim                               inventDim = purchRFQCaseLine.inventDim();
        InventDim                               rfqLineInventDim;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        if (_inventTable)
        {
            inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Purch, inventDim);
        }

        if (_rfqLine)
        {
            rfqLineInventDim = _rfqLine.inventDim();
            enumerator = InventDimGroupSetup::newInventTable(_inventTable).getFieldSetupEnumerator();
            while (enumerator.moveNext())
            {
                inventDimGroupFieldSetup = enumerator.current();
                inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                if (inventDimGroupFieldSetup.isActive()
                && inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled()
                && inventDimGroupFieldSetup.isMandatory()
                && !inventDim.(inventDimFieldId))
                {
                    inventDim.(inventDimFieldId) = rfqLineInventDim.(inventDimFieldId);
                }
            }
        }

        inventDim                = InventDim::findOrCreate(inventDim);
        purchRFQCaseLine.setInventDimId(inventDim.InventDimId, inventDim);
        purchRFQCaseLine.setAddressFromInventDim(inventDim);

        purchRFQCaseLine.DefaultDimension   = purchRFQCaseLine.mergeDimension(_inventTable.DefaultDimension, purchRFQCaseLine.DefaultDimension);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimensions based on the <c>InventTable</c> record and any dimensions specific settings.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> record to use for initializing base dimensions.</param>
    /// <param name = "_executeOnlyIfProductIsFullySpecified">true if dimension specific defaulting gets executed only if all active product dimensions are set; otherwise false.</param>
    public void initFromInventTable(InventTable _inventTable, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        InventDistinctProductOrderDefaultingController::itemIdModified(this, InventDistinctProductDimensionSpecificDefaultingArgs::construct(_inventTable, _executeOnlyIfProductIsFullySpecified, InventItemOrderSetupType::Purch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        purchRFQCaseLine.PurchRFQLineMap::initReleasedProductSpecificDefaulting(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Product dimension specific order defaulting arguments.</param>
    public void initDimensionsSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        purchRFQCaseLine.PurchRFQLineMap::initDimensionsSpecificDefaulting(_inventDistinctProductDimensionSpecificDefaultingArgs);

        if (TaxParameters::checkTaxParameters_IN())
        {
            InventTableModule inventTableModule = InventTableModule::find(purchRFQCaseLine.ItemId, ModuleInventPurchSales::Purch);
            purchRFQCaseLine.MaximumRetailPrice_IN = CurrencyExchangeHelper::curAmount(inventTableModule.MaximumRetailPrice_IN, purchRFQCaseLine.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQCaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PurchRFQCaseLine</c> record buffer, from the <c>PurchRFQCaseTable</c> record buffer.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record buffer.
    /// </param>
    public void  initFromPurchRFQCaseTable(PurchRFQCaseTable  _purchRFQCaseTable)
    {
        InventDim   inventDim = purchRFQCaseLine.inventDim();

        purchRFQCaseLine.rfqType            = _purchRFQCaseTable.rfqType;
        purchRFQCaseLine.rfqCaseId          = _purchRFQCaseTable.rfqCaseId;
        purchRFQCaseLine.CurrencyCode       = _purchRFQCaseTable.CurrencyCode;
        purchRFQCaseLine.DefaultDimension   = purchRFQCaseLine.copyDimension(_purchRFQCaseTable.DefaultDimension);
        purchRFQCaseLine.DeliveryDate       = _purchRFQCaseTable.DeliveryDate;
        purchRFQCaseLine.ExpiryDateTime     = _purchRFQCaseTable.ExpiryDateTime;

        if (_purchRFQCaseTable.InventLocationId || _purchRFQCaseTable.InventSiteId)
        {
            inventDim.InventLocationId      = _purchRFQCaseTable.InventLocationId;
            inventDim.InventSiteId          = _purchRFQCaseTable.InventSiteId;
        }

        purchRFQCaseLine.setInventDimIdFromInventDim(inventDim);
        purchRFQCaseLine.setAddressFromPurchRFQCaseTable(_purchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemFromPurchRFQLine</Name>
				<Source><![CDATA[
    public void initItemFromPurchRFQLine(PurchRFQLine  _purchRFQLine)
    {
        purchRFQCaseLine.LineItemType   = _purchRFQLine.LineType;
        purchRFQCaseLine.CategoryId     = _purchRFQLine.CategoryId;
        purchRFQCaseLine.ItemId         = _purchRFQLine.ItemId;
        purchRFQCaseLine.ItemName       = _purchRFQLine.ItemName;
        purchRFQCaseLine.Name           = _purchRFQLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    public void  initPurchQty()
    {
        purchRFQCaseLine.QtyOrdered = purchRFQCaseLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storage dimensions from header.
    /// </summary>
    public void initStorageDimensionsFromHeader()
    {
        InventDim inventDim = this.initInventDimFromPurchRFQCaseTable(purchRFQCaseLine.purchRFQCaseTable());
        purchRFQCaseLine.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromPurchRFQCaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventDim</c>.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">
    /// Parameters used to initialize the <c>PurchRFQCaseTable</c> instance with.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> instance.
    /// </returns>
    private InventDim initInventDimFromPurchRFQCaseTable(PurchRFQCaseTable _purchRFQCaseTable)
    {
        InventDim inventDim = purchRFQCaseLine.inventDim();

        if (_purchRFQCaseTable.InventLocationId && !inventDim.InventLocationId)
        {
            inventDim.InventLocationId = _purchRFQCaseTable.InventLocationId;
        }

        if (_purchRFQCaseTable.InventSiteId && !inventDim.InventSiteId)
        {
            inventDim.InventSiteId = _purchRFQCaseTable.InventSiteId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an <c>InventDim</c> relation.
    /// </summary>
    /// <param name = "_inventDim">A <c>InventDim</c> record buffer.</param>
    public void setInventDim(InventDim _inventDim)
    {
        purchRFQCaseLine.setInventDimIdFromInventDim(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated <c>InventDim</c> record.
    /// </summary>
    /// <returns>the associated <c>InventDim</c> record.</returns>
    public InventDim inventDim()
    {
        return purchRFQCaseLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ case line record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ case line record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventBeQuotationControlled</Name>
				<Source><![CDATA[
    boolean  mustInventBeQuotationControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void  new(PurchRFQCaseLine _purchRFQCaseLine, PurchRFQCaseTable _purchRFQCaseTable = _purchRFQCaseLine.purchRFQCaseTable())
    {
        purchRFQCaseLine        = _purchRFQCaseLine;

        super(_purchRFQCaseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQCaseLine</Name>
				<Source><![CDATA[
    public PurchRFQCaseLine parmPurchRFQCaseLine()
    {
        return purchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ case line record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ case line record has been updated.
    /// </summary>
    /// <param name="_purchRFQCaseLineOrig">
    /// The original RFQ case line which is updated.
    /// </param>
    public void updated(PurchRFQCaseLine _purchRFQCaseLineOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDim</Name>
				<Source><![CDATA[
    void updateInventDim()
    {
        InventDim           inventDim;
        PurchRFQCaseTable   purchRFQCaseTable;

        if (purchRFQCaseLine.LineItemType == PurchRFQLineItemType::Category ||
           purchRFQCaseLine.ItemId == '' )
        {
            inventDim = purchRFQCaseLine.inventDim();
            purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQCaseLine.rfqCaseId);

            //get from header (if exists)
            if (purchRFQCaseTable.InventLocationId)
            {
                inventDim.InventLocationId = purchRFQCaseTable.InventLocationId;
                inventDim.initFromInventLocation(inventDim.inventLocation());
            }
            else if (purchRFQCaseTable.InventSiteId)
            {
                inventDim.InventLocationId = '';
                inventDim.InventSiteId = purchRFQCaseTable.InventSiteId;
            }

            inventDim = InventDim::findOrCreate(inventDim);
            purchRFQCaseLine.setInventDimId(inventDim.InventDimId, inventDim);
            purchRFQCaseLine.setAddressFromInventDim(inventDim);
        }
        else
        {
            this.initFromInventTable(purchRFQCaseLine.inventTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    void updateStatus(boolean _setLowStatus2Created = false)
    {
        PurchRFQLine purchRFQLine;
        PurchRFQTable purchRFQTable;
        PurchRFQStatus statusLow = PurchRFQStatus::Created;
        PurchRFQStatus statusHigh = PurchRFQStatus::Created;

        if (purchRFQCaseLine.StatusHigh != PurchRFQStatus::Canceled)
        {
            ttsbegin;

            if (!_setLowStatus2Created)
            {
                select minof(Status) from purchRFQLine
                    exists join purchRFQTable
                        where purchRFQTable.rfqCaseId == purchRFQCaseLine.rfqCaseId
                           && purchRFQLine.rfqCaseLineRefRecId == purchRFQCaseLine.RecId
                           && purchRFQLine.rfqId == purchRFQTable.rfqId;

                statusLow = purchRFQLine.Status;
            }

            select maxof(Status) from purchRFQLine
                exists join purchRFQTable
                    where purchRFQTable.rfqCaseId == purchRFQCaseLine.rfqCaseId
                       && purchRFQLine.rfqCaseLineRefRecId == purchRFQCaseLine.RecId
                       && purchRFQLine.rfqId == purchRFQTable.rfqId;

            statusHigh = purchRFQLine.Status;

            if (statusLow != purchRFQCaseLine.StatusLow ||
               statusHigh != purchRFQCaseLine.StatusHigh)
            {
                purchRFQCaseLine.StatusLow = statusLow;
                purchRFQCaseLine.StatusHigh = statusHigh;
                purchRFQCaseLine.update(true);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean  validateField(FieldId  fieldId)
    {
        boolean  ok = true;

        switch (fieldId)
        {
            case fieldNum(PurchRFQCaseLine, ItemId):
                ok = purchRFQCaseLine.checkItemId();
                break;

            case fieldNum(PurchRFQCaseLine, LineNumber):
                ok = purchRFQCaseLine.checkLineNumber();
                break;

            case fieldNum(PurchRFQCaseLine, DeliveryDate):
                if (purchRFQCaseLine.DeliveryDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    // Delivery date must not be before today's date
                    ok = checkFailed("@SCM:PurchReceiptDateRequestedBeforeTodaysDateWarning");
                }
                break;

            case fieldNum(PurchRFQCaseLine, ExpiryDateTime):
                if (purchRFQCaseLine.ExpiryDateTime < DateTimeUtil::utcNow())
                {
                    // Expiry date must not be before today's date
                    ok = checkFailed("@SYS4009645");
                }
                break;

            case fieldNum(PurchRFQCaseLine, PurchQty):
                ok = this.validateQuantity();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantity</Name>
				<Source><![CDATA[
    protected boolean validateQuantity()
    {
        boolean isValid = true;
        
        if (purchRFQCaseLine.PurchQty < 0)
        {
            // Quantity may not be negative
            isValid = checkFailed("@SYS53966");
        }
        
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQCaseLineType construct(PurchRFQCaseLine _purchRFQCaseLine, PurchRFQCaseTable _purchRFQCaseTable = _purchRFQCaseLine.purchRFQCaseTable())
    {
        PurchRFQTypeFactoryAttribute        attribute       = new PurchRFQTypeFactoryAttribute(_purchRFQCaseLine.rfqType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_purchRFQCaseLine, _purchRFQCaseTable);
        PurchRFQCaseLineType                instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(PurchRFQCaseLineType), attribute, instantiation) as PurchRFQCaseLineType;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>