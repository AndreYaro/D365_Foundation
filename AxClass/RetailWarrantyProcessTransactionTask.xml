<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailWarrantyProcessTransactionTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Process <c>RetailWarrantyTransactionSales</c>, generate warrantied relation and warranty policy.
/// </summary>
internal class RetailWarrantyProcessTransactionTask extends RunBaseBatch implements BatchRetryable
{
    private RetailWarrantyChannelId warrantyChannel;
    private RetailWarrantyStoreId warrantyStore;
    private RetailWarrantyTerminalId warrantyTerminalId;
    private RetailWarrantyTransactionId warrantyTransactionId;

    private const int retryNum = 3;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        warrantyChannel,
        warrantyStore,
        warrantyTerminalId,
        warrantyTransactionId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strFmt("@RetailWarranty:WarrantyTransactionProcessingCaption", 
            warrantyStore, warrantyTerminalId, warrantyTransactionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarrantyChannel</Name>
				<Source><![CDATA[
    public RetailWarrantyChannelId parmWarrantyChannel(RetailWarrantyChannelId _warrantyChannel = warrantyChannel)
    {
        warrantyChannel = _warrantyChannel;
        return warrantyChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarrantyStore</Name>
				<Source><![CDATA[
    public RetailWarrantyStoreId parmWarrantyStore(RetailWarrantyStoreId _warrantyStore = warrantyStore)
    {
        warrantyStore = _warrantyStore;
        return warrantyStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarrantyTerminalId</Name>
				<Source><![CDATA[
    public RetailWarrantyTerminalId parmWarrantyTerminalId(RetailWarrantyTerminalId _warrantyTerminalId = warrantyTerminalId)
    {
        warrantyTerminalId = _warrantyTerminalId;
        return warrantyTerminalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarrantyTransactionId</Name>
				<Source><![CDATA[
    public RetailWarrantyTransactionId parmWarrantyTransactionId(RetailWarrantyTransactionId _warrantyTransactionId = warrantyTransactionId)
    {
        warrantyTransactionId = _warrantyTransactionId;
        return warrantyTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RetailWarranty:WarrantyTransactionsProcessingTask";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailWarrantyProcessTransactionTask</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailWarrantyProcessTransactionTask</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            this.processWarrantyTransactions();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWarrantyTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes warranty transactions, updatess warrantied relation and warranty policy.
    /// </summary>
    public void processWarrantyTransactions()
    {
        WarrantyTransactionDateTime lastTransactionDateTime = DateTimeUtil::minValue();

        // find date time of the last transaction which has been procesed.
        RetailWarrantyTransactionStatus transactionStatus
            = RetailWarrantyTransactionStatus::find(warrantyChannel, warrantyStore, warrantyTerminalId, warrantyTransactionId);
        if (transactionStatus)
        {
            lastTransactionDateTime = transactionStatus.LastTransactionDateTime;
        }

        try
        {
            // encapsulate this in one transaction, to avoid the situation where one transaction succeeded
            // and transaction status is set to that date time and skips all failed processed transactions going forward.
            RetailWarrantyTransactionSales warrantyTransaction, latestWarrantyTransaction;
            while select WarrantyLineNum, WarrantableChannel, WarrantableStore, WarrantableTerminalId,
                WarrantableTransactionId, WarrantableLineNum from warrantyTransaction
                group by warrantyTransaction.WarrantyLineNum, warrantyTransaction.WarrantableChannel,
                    warrantyTransaction.WarrantableStore, warrantyTransaction.WarrantableTerminalId,
                    warrantyTransaction.WarrantableTransactionId, warrantyTransaction.WarrantableLineNum
                where warrantyTransaction.WarrantyChannel == warrantyChannel
                    && warrantyTransaction.WarrantyStore == warrantyStore
                    && warrantyTransaction.WarrantyTerminalId == warrantyTerminalId
                    && warrantyTransaction.WarrantyTransactionId == warrantyTransactionId
                    && warrantyTransaction.TransactionDateTime > lastTransactionDateTime
            {
                // get the latest transactionStatus
                select firstonly latestWarrantyTransaction
                    order by TransactionDateTime desc
                    where latestWarrantyTransaction.WarrantableChannel == warrantyTransaction.WarrantableChannel
                        && latestWarrantyTransaction.WarrantableStore == warrantyTransaction.WarrantableStore
                        && latestWarrantyTransaction.WarrantableTerminalId == warrantyTransaction.WarrantableTerminalId
                        && latestWarrantyTransaction.WarrantableTransactionId == warrantyTransaction.WarrantableTransactionId
                        && latestWarrantyTransaction.WarrantableLineNum == warrantyTransaction.WarrantableLineNum
                        && latestWarrantyTransaction.WarrantyChannel == warrantyChannel
                        && latestWarrantyTransaction.WarrantyStore == warrantyStore
                        && latestWarrantyTransaction.WarrantyTerminalId == warrantyTerminalId
                        && latestWarrantyTransaction.WarrantyTransactionId == warrantyTransactionId
                        && latestWarrantyTransaction.WarrantyLineNum == warrantyTransaction.WarrantyLineNum;

                if (!this.updateWarrantiedRelationAndPolicy(latestWarrantyTransaction))
                {
                    // stop further processing. The unprocessed transactions should be processed later, where related sales line are created and invoiced.
                    eventSource.EventWriteWarrantyProcessTransactionsTaskNoUpdate(latestWarrantyTransaction.RecId);
                    break;
                }

                lastTransactionDateTime =
                    lastTransactionDateTime > latestWarrantyTransaction.TransactionDateTime ? lastTransactionDateTime : latestWarrantyTransaction.TransactionDateTime;
            }

            RetailWarrantyTransactionStatus::setTransactionStatus(
                warrantyChannel,
                warrantyStore,
                warrantyTerminalId,
                warrantyTransactionId,
                RetailWarrantyTransactionProcessingStatus::Succeeded,
                lastTransactionDateTime);
        }
        catch
        {
            eventSource.EventWriteWarrantyProcessTransactionsTaskError(
                warrantyChannel,
                warrantyStore,
                warrantyTerminalId,
                warrantyTransactionId);
            RetailWarrantyTransactionStatus::setTransactionStatus(
                warrantyChannel,
                warrantyStore,
                warrantyTerminalId,
                warrantyTransactionId,
                RetailWarrantyTransactionProcessingStatus::Failed,
                lastTransactionDateTime);
            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether batch task should retry in case of transient errors.
    /// </summary>
    /// <returns>true if task should be retried; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarrantiedRelationAndPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates warrantied relation and warranty policy.
    /// </summary>
    /// <param name = "_warrantyTransaction">retail warranty transaction</param>
    /// <returns>True if the warrantied relation and policy are updated; otherwise false.</returns>
    protected boolean updateWarrantiedRelationAndPolicy(RetailWarrantyTransactionSales _warrantyTransaction)
    {
        // sales line for warranty and warrantied must be created and invoiced, before warrantied relation and policy could be updated.

        RetailTransactionSalesTrans warrantyRetailTrans = RetailTransactionSalesTrans::find(
            _warrantyTransaction.WarrantyTransactionId,
            _warrantyTransaction.WarrantyStore,
            _warrantyTransaction.WarrantyTerminalId,
            _warrantyTransaction.WarrantyLineNum);

        SalesLine salesLineWarranty = this.getSaleslineFromRetailSalestrans(warrantyRetailTrans);
        if (!salesLineWarranty)
        {
            return false;
        }

        // for cash and carry, once it is completed, it is not possible to go back and edit.
        // And new sales order will be created for new transactions, so we don't need to worry about same SO getting invoiced multiple times.
        CustInvoiceTrans invoiceTransWarranty = CustInvoiceTrans::findInventTransid(salesLineWarranty.InventTransId);
        if (!invoiceTransWarranty)
        {
            return false;
        }

        RetailTransactionSalesTrans warrantiedRetailTrans = RetailTransactionSalesTrans::find(
            _warrantyTransaction.WarrantableTransactionId,
            _warrantyTransaction.WarrantableStore,
            _warrantyTransaction.WarrantableTerminalId,
            _warrantyTransaction.WarrantableLineNum);

        SalesLine salesLineWarrantied = this.getSaleslineFromRetailSalestrans(warrantiedRetailTrans);
        if (!salesLineWarrantied)
        {
            return false;
        }

        CustInvoiceTrans invoiceTransWarrantied = CustInvoiceTrans::findInventTransid(salesLineWarrantied.InventTransId);
        if (!invoiceTransWarrantied)
        {
            return false;
        }

        if (_warrantyTransaction.Action == WarrantySalesAction::Add)
        {
            ttsbegin;
            WarrantiedRelationSalesLine::addOrUpdateWarrantiedRelation(
                warrantiedRetailTrans.InventSerialId, salesLineWarrantied, salesLineWarranty);
            WarrantyPolicyFacade::createPolicyByWarrantyInvoiceTrans(invoiceTransWarranty);
            ttscommit;
        }
        else if (_warrantyTransaction.Action == WarrantySalesAction::Cancel)
        {
            RetailWarrantyTransactionSales originalWarrantyTrans;

            // find the original transaction
            select firstonly originalWarrantyTrans
                order by TransactionDateTime desc
                where originalWarrantyTrans.WarrantableChannel == _warrantyTransaction.WarrantableChannel
                    && originalWarrantyTrans.WarrantableStore == _warrantyTransaction.WarrantableStore
                    && originalWarrantyTrans.WarrantableTerminalId == _warrantyTransaction.WarrantableTerminalId
                    && originalWarrantyTrans.WarrantableTransactionId == _warrantyTransaction.WarrantableTransactionId
                    && originalWarrantyTrans.WarrantableLineNum == _warrantyTransaction.WarrantableLineNum
                    && originalWarrantyTrans.WarrantyChannel == warrantyChannel
                    && originalWarrantyTrans.WarrantyStore == warrantyStore
                    && originalWarrantyTrans.WarrantyTerminalId == warrantyTerminalId
                    && originalWarrantyTrans.WarrantyTransactionId == warrantyTransactionId
                    && originalWarrantyTrans.WarrantyLineNum == _warrantyTransaction.WarrantyLineNum
                    && originalWarrantyTrans.Action == WarrantySalesAction::Add;

            if (originalWarrantyTrans)
            {
                ttsbegin;
                WarrantiedRelationSalesLine::voidWarrantiedRelation(
                    originalWarrantyTrans.WarrantableSerialId, salesLineWarrantied, salesLineWarranty);
                WarrantyPolicyFacade::voidPolicyByItemSerialNumber(
                    salesLineWarrantied.CustAccount,
                    warrantiedRetailTrans.ItemId,
                    originalWarrantyTrans.WarrantableSerialId);
                ttscommit;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSaleslineFromRetailSalestrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sale line for the given retail sales trans.
    /// </summary>
    /// <param name = "_retailSalesTrans">retail sales trans</param>
    /// <returns>sale line for the given retail sales trans</returns>
    protected SalesLine getSaleslineFromRetailSalestrans(RetailTransactionSalesTrans _retailSalesTrans)
    {
        RetailTransactionTable transactionTable = RetailTransactionTable::find(
            _retailSalesTrans.transactionId, _retailSalesTrans.store, _retailSalesTrans.terminalId);

        CustAccount custAccount = _retailSalesTrans.custAccount ? _retailSalesTrans.custAccount : RetailStoreTable::find(_retailSalesTrans.store).DefaultCustAccount;

        SalesLine salesLine;
        select firstonly salesLine
            where
                salesLine.SalesId == transactionTable.salesOrderId &&
                salesLine.LineNum == _retailSalesTrans.lineNum &&
                salesLine.ItemId == _retailSalesTrans.ItemId &&
                salesLine.CustAccount == custAccount;

        return salesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>