<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventLedgerConflictInit</c> class initializes data for the <c>InventLedgerConflict</c>
///    report.
/// </summary>
/// <remarks>
///    This class is responsible for creating subtasks that can be executed asynchronously for generating
///    the data for the report.
/// </remarks>
public class InventLedgerConflictInit
{
    InventLedgerConflictContract    inventLedgerConflictContract;
    Query                           reportQuery;
    UserConnection                  userConnection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromAndToDateToDateCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the from and to dates by using the date code.
    /// </summary>
    protected void adjustFromAndToDateToDateCode()
    {
        if (inventLedgerConflictContract.parmInventCostDateCodeContract().parmDateCode() != '')
        {
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(inventLedgerConflictContract.parmInventCostDateCodeContract().parmDateCode());
            if (ledgerPeriodCode.RecId)
            {
                inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate(ledgerPeriodCode.fromDate());
                inventLedgerConflictContract.parmInventCostDateCodeContract().parmToDate(ledgerPeriodCode.toDate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventLedgerConflictContract</c> class.
    /// </summary>
    /// <returns>
    /// The <c>InventLedgerConflictContract</c> contract type.
    /// </returns>
    protected InventLedgerConflictContract createContract()
    {
        return InventLedgerConflictContract::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaskList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of task performed to prepare report data.
    /// </summary>
    /// <returns>
    /// The list of tasks.
    /// </returns>
    protected List createTaskList()
    {
        List                                list = new List(Types::Class);

        InventCostDateCodeContract dateCodeContract = inventLedgerConflictContract.parmInventCostDateCodeContract();
        date fromDate = dateCodeContract.parmFromDate();
        date toDate = dateCodeContract.parmToDate();

        while (fromDate <= toDate)
        {
            InventLedgerConflictContract inventLedgerConflictContractPerDay = InventLedgerConflictContract::construct();
            inventLedgerConflictContractPerDay.unpack(inventLedgerConflictContract.pack());
            inventLedgerConflictContractPerDay.parmInventCostDateCodeContract().parmFromDate(fromDate);
            inventLedgerConflictContractPerDay.parmInventCostDateCodeContract().parmToDate(fromDate);

            InventLedgerConflictGeneralLedger inventLedgerConflictGeneralLedger = InventLedgerConflictGeneralLedger::construct();
            inventLedgerConflictGeneralLedger.parmInventLedgerConflictContract(inventLedgerConflictContractPerDay);

            InventLedgerConflictInventory inventLedgerConflictInventory = InventLedgerConflictInventory::construct();
            inventLedgerConflictInventory.parmInventLedgerConflictContract(inventLedgerConflictContractPerDay);

            list.addEnd(inventLedgerConflictGeneralLedger);
            list.addEnd(inventLedgerConflictInventory);

            fromDate++;
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the interval in milliseconds that is used when pinging the connection.
    /// </summary>
    /// <returns>The interval in milliseconds that is used when pinging the connection.</returns>
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 15*60*1000; // 15 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for all tasks to be completed.
    /// </summary>
    /// <param name = "_threadTasklist">List of tasks currently executing.</param>
    /// <remarks>
    /// This method is used to keep the connection alive for the duration of the task life time. SQL Azure now has a hard time limit (variable depending on load)
    /// and it will kill any idle connection. Thus it is required to issue a simple keep alive query from the connection in order to avoid this from happening.
    /// </remarks>
    private void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();
        
        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            var statement = this.parmUserConnection().createStatement();
            var sqlKeepAlive = 'select SYSDATETIME();';
        
            ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
            resultset.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates subtasks for the data creation of the <c>InventLedgerConflict</c> report.
    /// </summary>
    /// <remarks>
    ///    The subtasks are either executed directly or by the enhanced batch framework.
    /// </remarks>
    public void createTasks()
    {
        // Adjust from- and to-date according to datecode
        this.adjustFromAndToDateToDateCode();

        List taskList = this.createTaskList();
        
        this.createTaskThreadsPerDay(taskList);

        var inventLedgerConflictPrintAsteriskNote = this.createPrintAsteriskNoteTask();
        inventLedgerConflictPrintAsteriskNote.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaskThreadsPerDateRange</Name>
				<Source><![CDATA[
    private void createTaskThreadsPerDateRange(List _taskList)
    {
        int taskListLength = _taskList.elements();
        ListEnumerator tasksEnumerator = _taskList.getEnumerator();

        inventLedgerConflictContract.parmIncludeBlankDimensions(false);

        System.Threading.Tasks.Task[] threadTasklist;
        System.Threading.Tasks.Task   threadTask;

        if (inventLedgerConflictContract.parmExcludeBlankDimensions() == NoYes::No)
        {
            threadTasklist = new System.Threading.Tasks.Task[taskListLength*2]();
        }
        else
        {
            threadTasklist = new System.Threading.Tasks.Task[taskListLength]();
        }
        tasksEnumerator.reset();
        int i = 0;

        while (tasksEnumerator.moveNext())
        {
            CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

            if (asyncRunnableTask)
            {
                threadTask = asyncRunnableTask.runAsync();
                threadTasklist.SetValue(threadTask, i);
                i++;
            }
        }

        // Once more for blank dimensions
        if (inventLedgerConflictContract.parmExcludeBlankDimensions() == NoYes::No)
        {
            inventLedgerConflictContract.parmIncludeBlankDimensions(true);
            tasksEnumerator.reset();
            while (tasksEnumerator.moveNext())
            {
                CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

                if (asyncRunnableTask)
                {
                    threadTask = asyncRunnableTask.runAsync();
                    threadTasklist.SetValue(threadTask, i);
                    i++;
                }
            }
        }

        this.waitForAsyncTasks(threadTasklist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaskThreadsPerDay</Name>
				<Source><![CDATA[
    private void createTaskThreadsPerDay(List _taskList)
    {
        const int MaxParellelThreadTaskCount = 1000;
        int taskListLength = _taskList.elements();
        ListEnumerator tasksEnumerator = _taskList.getEnumerator();

        inventLedgerConflictContract.parmIncludeBlankDimensions(false);

        System.Threading.Tasks.Task[] threadTasklist;
        System.Threading.Tasks.Task   threadTask;
        int                           threadTaskLength;

        if (inventLedgerConflictContract.parmExcludeBlankDimensions() == NoYes::No)
        {
            threadTaskLength = taskListLength*2;
        }
        else
        {
            threadTaskLength = taskListLength;
        }

        threadTasklist = new System.Threading.Tasks.Task[(threadTaskLength > MaxParellelThreadTaskCount ? MaxParellelThreadTaskCount : threadTaskLength)]();

        tasksEnumerator.reset();
        int i = 0;

        while (i < threadTaskLength && i < MaxParellelThreadTaskCount)
        {
            if (!tasksEnumerator.moveNext())
            {
                // Once more for blank dimensions
                inventLedgerConflictContract.parmIncludeBlankDimensions(true);
                tasksEnumerator.reset();
                tasksEnumerator.moveNext();
            }

            CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

            if (asyncRunnableTask)
            {
                CostILedgerConflict iLedgerConflict = tasksEnumerator.current() as CostILedgerConflict;
                iLedgerConflict.parmInventLedgerConflictContract().parmIncludeBlankDimensions(inventLedgerConflictContract.parmIncludeBlankDimensions());
                threadTask = asyncRunnableTask.runAsync();
                threadTasklist.SetValue(threadTask, i);
                i++;
            }
        }

        if (threadTaskLength > MaxParellelThreadTaskCount)
        {
            int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();
            int64 startTime = WinAPIServer::getTickCount();

            while (i < threadTaskLength)
            {
                int threadNo = 0;
            
                while ( threadNo < MaxParellelThreadTaskCount )
                {
                    System.Threading.Tasks.Task threadTaskLocal = threadTasklist.GetValue(threadNo) as System.Threading.Tasks.Task;
                
                    if (threadTaskLocal.IsCompleted)
                    {
                        if (!tasksEnumerator.moveNext())
                        {
                            // Once more for blank dimensions
                            inventLedgerConflictContract.parmIncludeBlankDimensions(true);
                            tasksEnumerator.reset();
                            tasksEnumerator.moveNext();
                        }

                        CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

                        if (asyncRunnableTask)
                        {
                            CostILedgerConflict iLedgerConflict = tasksEnumerator.current() as CostILedgerConflict;
                            iLedgerConflict.parmInventLedgerConflictContract().parmIncludeBlankDimensions(inventLedgerConflictContract.parmIncludeBlankDimensions());
                            threadTask = asyncRunnableTask.runAsync();
                            threadTasklist.SetValue(threadTask, threadNo);
                            i++;

                            if (i == threadTaskLength)
                            {
                                break;
                            }
                        }
                    }

                    threadNo++;
                }

                int64 endTime = WinAPIServer::getTickCount();

                if (endTime - startTime >= connectionKeepAlivePingIntervalInMilliSec)
                {
                    var statement = this.parmUserConnection().createStatement();
                    var sqlKeepAlive = 'select SYSDATETIME();';
        
                    ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
                    resultset.next();
                    startTime = endTime;
                }
            }
        }

        this.waitForAsyncTasks(threadTasklist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintAsteriskNoteTask</Name>
				<Source><![CDATA[
    protected InventLedgerConflictPrintAsteriskNote createPrintAsteriskNoteTask()
    {
        InventLedgerConflictPrintAsteriskNote inventLedgerConflictPrintAsteriskNote = InventLedgerConflictPrintAsteriskNote::construct();
        inventLedgerConflictPrintAsteriskNote.parmInventLedgerConflictContract(inventLedgerConflictContract);

        return inventLedgerConflictPrintAsteriskNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLedgerConflictContract</Name>
				<Source><![CDATA[
    public InventLedgerConflictContract parmInventLedgerConflictContract(InventLedgerConflictContract _inventLedgerConflictContract = inventLedgerConflictContract)
    {
        inventLedgerConflictContract = _inventLedgerConflictContract;

        return inventLedgerConflictContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInputQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the user selected values to the query that is to be executed.
    /// </summary>
    /// <param name="_relevantFields">
    /// The list of relevant fields to add to the query.
    /// </param>
    /// <param name="_inputQuery">
    /// The query that defines the user selected ranges.
    /// </param>
    /// <param name="_query">
    /// The query to add the user selected values to.
    /// </param>
    public static void applyInputQuery(
        Map     _relevantFields,
        Query   _inputQuery,
        Query   _query)
    {
        int                     tableId;
        int                     fieldId;
        int                     rangeNo;

        #define.emptyString     ('')
        #define.qbdAnd          ('&&')
        #define.queryAnd        ('AND')
        #define.qbdOr           ('||')
        #define.queryOr         ('OR')

        // Split the string according to the _delimiters. The Global version of this method cannot be used
        // as it splits on every character in _delimiters, which is not what is wanted here.
        List strSplit(
            str _stringToSplit,
            str _delimiter)
        {
            List    list  = new List(Types::String);
            int     oldPos = 1;
            int     pos;
            int     strLength = strLen(_stringToSplit);

            do
            {
                pos = strScan(_stringToSplit, _delimiter, oldPos, strLength);
                if (!pos)
                {
                    pos = strLength+1;
                }

                list.addEnd(subStr(_stringToSplit, oldPos, pos-oldPos));
                oldPos = pos+strLen(_delimiter);
            }
            while (pos <= strLength);

            return list;
        }

        // The range has to be converted. AND/OR has to be &&/|| and each element must be in ().
        str convertRangeValue(str _value)
        {
            str             splitValue;
            str             concatValue;
            List            list = new List(Types::String);
            ListEnumerator  listEnumerator;
            str             retVal = #emptyString;
            boolean         firstValue = true;

            // If there is AND or OR in the value, the values has to be split
            if (strScan(_value, #queryAnd, 1, strLen(_value)) > 0)
            {
                splitValue  = #queryAnd;
                concatValue = #qbdAnd;
            }
            else
            {
                if (strScan(_value, #queryOr, 1, strLen(_value)) > 0)
                {
                    splitValue  = #queryOr;
                    concatValue = #qbdOr;
                }
            }

            if (splitValue != #emptyString)
            {
                list = strSplit(_value, splitValue);
                listEnumerator = list.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    if (!firstValue)
                    {
                        retVal += ' ' + concatValue + ' ';
                    }
                    else
                    {
                        firstValue = false;
                    }
                    retVal += strFmt('(%1)', strLTrim(strRTrim(listEnumerator.current())));
                }
            }
            else
            {
                retVal = _value;
            }

            return retVal;
        }

        // Iterate through the ranges in the input query.
        int rangeCount = _inputQuery.dataSourceTable(tableNum(InventLedgerConflictTmpConflict)).rangeCount();
        for (rangeNo = 1; rangeNo <= rangeCount; rangeNo++)
        {
            QueryBuildRange inputQueryBuildRange = _inputQuery.dataSourceTable(tableNum(InventLedgerConflictTmpConflict)).range(rangeNo);
            if (inputQueryBuildRange.value() != #emptyString)
            {
                str fieldName = fieldId2name(tableNum(InventLedgerConflictTmpConflict), inputQueryBuildRange.field());
                if (_relevantFields.exists(fieldName))
                {
                    [fieldId, tableId] = _relevantFields.lookup(fieldName);
                    QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableId);
                    if (queryBuildDataSource)
                    {
                        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource,  fieldId);
                        if (queryBuildRange.value() == #emptyString)
                        {
                            queryBuildRange.value(strReplace(inputQueryBuildRange.value(), fieldname, fieldId2name(tableid, fieldid)));
                        }
                        else
                        {
                            queryBuildRange.value(strFmt('(%1 && (%2))', queryBuildRange.value(), strReplace(convertRangeValue(inputQueryBuildRange.toString()), fieldname, fieldId2name(tableid, fieldid))));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>_InventLedgerConflictContract</c> parameter.
    /// </summary>
    /// <param name="_inventLedgerConflictContract">
    ///    The contract class to initialize.
    /// </param>
    /// <param name="_query">
    ///    The query to add to the contract.
    /// </param>
    /// <remarks>
    ///    Each time this method is called, a new report ID is assigned. This is on purpose in order to
    ///    separate data from multiple reports.
    /// </remarks>
    protected void initContract(InventLedgerConflictContract _inventLedgerConflictContract, Query _query)
    {
        _inventLedgerConflictContract.parmSessionId(sessionId());
        _inventLedgerConflictContract.parmReportDate(DateTimeUtil::utcNow());
        _inventLedgerConflictContract.parmQuery(_query);
        _inventLedgerConflictContract.parmReportId(newGuid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the inventory conflict report.
    /// </summary>
    public void run()
    {
        this.initContract(inventLedgerConflictContract, reportQuery);
        this.createTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventLedgerConflictInit construct()
    {
        return new InventLedgerConflictInit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = reportQuery)
    {
        reportQuery = _query;

        return reportQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>