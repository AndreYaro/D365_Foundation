<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateEmpl_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalTransUpdateEmpl_RU extends LedgerJournalTransUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean  check(
        LedgerJournalTrans _ledgerJournalTrans,
        boolean _checkNoSettlement = true,
        LedgerVoucher _ledgerVoucher = null,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean ret = super(_ledgerJournalTrans, _checkNoSettlement, _ledgerVoucher, _ledgerPostingMessageCollection);

        return this.checkEmployee(_ledgerJournalTrans, _ledgerPostingMessageCollection) && ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmployee</Name>
				<Source><![CDATA[
    private boolean checkEmployee(LedgerJournalTrans _ledgerJournalTrans, LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean ok = true;

        if (! (_ledgerJournalTrans.PostingProfile || EmplParameters_RU::find().PostingProfile))
        {
            if (_ledgerPostingMessageCollection)
            {
                ok = _ledgerPostingMessageCollection.logCheckFailed("@GLS103565");
            }
            else
            {
                ok = checkFailed("@GLS103565");
            }
        }

        EmplVoucher_RU emplVoucher = EmplVoucher_RU::newEmplVoucherJournal(
            null,
            _ledgerJournalTrans,
            0);

        ok = ok && emplVoucher.check();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWhenPost</Name>
				<Source><![CDATA[
    public boolean checkWhenPost(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _checkNoSettlement = true,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean ret = super(_ledgerJournalTrans, _originalLedgerJournalTrans, _checkNoSettlement, _ledgerPostingMessageCollection);

        return this.checkEmployee(_ledgerJournalTrans, _ledgerPostingMessageCollection) && ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSourceTable</Name>
				<Source><![CDATA[
    private Common determineSourceTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTrans                vendTrans;
        BankAccountTrans         bankAccountTrans;
        Common                   ret;
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash;

        switch (_ledgerJournalTrans.orig().AccountType)
        {
            case LedgerJournalACType::Vend :
                if (! _ledgerJournalTrans.Invoice)
                {
                    ret = vendTrans;
                }
                break;
            case LedgerJournalACType::RCash :
                ledgerJournalTrans_RCash = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId);
                if (ledgerJournalTrans_RCash.CashDocId)
                {
                    ret = RCashTrans::find(_ledgerJournalTrans.orig().parmAccount(),
                                           ledgerJournalTrans_RCash.CashDocId,
                                           ledgerJournalTrans_RCash.DocType,
                                           _ledgerJournalTrans.orig().TransDate);
                }
                break;
            case LedgerJournalACType::Bank :
                select firstonly bankAccountTrans
                    where bankAccountTrans.AccountId == _ledgerJournalTrans.orig().parmAccount() &&
                          bankAccountTrans.Voucher   == _ledgerJournalTrans.orig().Voucher    &&
                          bankAccountTrans.TransDate == _ledgerJournalTrans.orig().TransDate;
                ret = bankAccountTrans;
                break;
        }

        if (! ret)
        {
            switch (_ledgerJournalTrans.orig().OffsetAccountType)
            {
                case LedgerJournalACType::RCash :
                    ledgerJournalTrans_RCash = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId);
                    ret = RCashTrans::find(_ledgerJournalTrans.orig().parmOffsetAccount(),
                                           ledgerJournalTrans_RCash.CashDocId,
                                           ledgerJournalTrans_RCash.DocType,
                                           _ledgerJournalTrans.orig().TransDate);
                    break;
                case LedgerJournalACType::Bank :
                    ret = bankAccountTrans;
                    break;
                case LedgerJournalACType::Vend :
                    if (! _ledgerJournalTrans.Invoice)
                    {
                        ret = vendTrans;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account of specified journal lines.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// The main account of specified journal lines.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimension(LedgerJournalTrans _journalTrans)
    {
        return EmplLedgerAccounts_RU::summaryLedgerDimension(_journalTrans.parmAccount(), _journalTrans.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow(
        LedgerVoucher _ledgerVoucher,
        LedgerPostingType  _posting,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _interCompany = false,
        boolean _reversalsMayExist = true,
        boolean _isDueToDueFromAccount =  false)
    {
        EmplTrans_RU     emplTrans;
        EmplVoucher_RU   emplVoucher;
        TaxAmount        taxAmount;
        AmountCur        originalAmountCur;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Employee_RU
            && !EmployeeTable_RU::findByEmployeeId(_ledgerJournalTrans.parmAccount()))
        {
            this.parmIsVoucherValid(false);
            checkFailed("@LedgerTranslation:AdvanceHolderDoesNotExist");
            return;
        }

        if (!this.checkEmployee(_ledgerJournalTrans))
        {
            return;
        }

        ttsbegin;

        if (taxVoucherService)
        {
            taxAmount = taxVoucherService.taxAmountForVendCustType(_ledgerJournalTrans, _interCompany, _posting, _isDueToDueFromAccount);
            if (_ledgerJournalTrans.AmountCurCredit)
            {
                originalAmountCur = _ledgerJournalTrans.AmountCurCredit;
                _ledgerJournalTrans.AmountCurCredit -= taxAmount;
            }
            if (_ledgerJournalTrans.AmountCurDebit)
            {
                originalAmountCur = _ledgerJournalTrans.AmountCurDebit;
                _ledgerJournalTrans.AmountCurDebit += taxAmount;
            }
        }

        if (! _ledgerJournalTrans.PostingProfile)
        {
            _ledgerJournalTrans.PostingProfile = EmplParameters_RU::find().PostingProfile;
        }

        emplVoucher = EmplVoucher_RU::newEmplVoucherJournal(
            _ledgerVoucher,
            _ledgerJournalTrans,
            0);
        emplVoucher.setSourceTable(this.determineSourceTable(_ledgerJournalTrans));
        emplVoucher.post(emplTrans);

        if (originalAmountCur)
        {
            if (_ledgerJournalTrans.AmountCurCredit)
            {
                _ledgerJournalTrans.AmountCurCredit = originalAmountCur;
            }
            if (_ledgerJournalTrans.AmountCurDebit)
            {
                _ledgerJournalTrans.AmountCurDebit = originalAmountCur;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>