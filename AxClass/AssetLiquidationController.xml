<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetLiquidationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetLiquidationController</c> class is the controller for the <c>AssetLiquidation</c> report.
/// </summary>
public class AssetLiquidationController extends SrsReportRunController implements BatchRetryable
{
    AssetBook  assetBook;
    AssetTrans netBookAssetTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the dialog is shown to the user.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// No record passed as an argument.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// No <c>AssetTrans</c> record passed as an argument.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// No <c>AssetBook</c> record found.
    /// </exception>
    protected void prePromptModifyContract()
    {
        AssetTrans               parmAssetTrans;
        AssetLiquidationContract contract;
        Query                    query;
        QueryBuildDataSource     qbds;

        if (!this.parmArgs())
        {
            throw error(strfmt("@GLS221124", this.parmArgs().menuItemName()));
        }
        parmAssetTrans = this.parmArgs().record() as AssetTrans;
        if (!parmAssetTrans)
        {
            throw error(strfmt("@GLS221124", this.parmArgs().menuItemName()));
        }
        assetBook = AssetBook::find(parmAssetTrans.AssetId, parmAssetTrans.BookId);
        if (!assetBook.RecId)
        {
            throw error(strfmt("@GLS221124", this.parmArgs().menuItemName()));
        }

        // The values need to be read from a NetBookValue transaction and not the transaction from which the report was invoked
        netBookAssetTrans = AssetTrans::findLastType_W(assetBook.AssetId, assetBook.BookId, AssetTransType::NetBookValue);
        contract          = this.parmReportContract().parmRdpContract() as AssetLiquidationContract;
        contract.parmDocumentDate(netBookAssetTrans.DocumentDate_W ? netBookAssetTrans.DocumentDate_W : netBookAssetTrans.TransDate);
        contract.parmDocumentNumber(netBookAssetTrans.DocumentNum_W);

        query = this.getFirstQuery();
        qbds  = query.dataSourceTable(tableNum(AssetBook));
        qbds.clearRanges();
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, AssetId)).value(assetBook.AssetId);
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, BookId)).value(assetBook.BookId);

        qbds = query.dataSourceTable(tableNum(AssetTable));
        qbds.clearRanges();
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetTable, AssetId)).value(assetBook.AssetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        AssetLiquidationContract contract;
        AssetSumCalc_Trans       assetSumCalcTrans;
        RNumDateInWordConverter  wordConverter;
        CompanyInfo              companyInfo;
        BankAccountTable         bankAccountTable;
        HcmWorkerRecId           commission1;
        HcmWorkerRecId           commission2;
        HcmWorkerRecId           commission3;
        DocumentDate             documentDate;
        DocumentNum              documentNumber;

        super();

        contract      = this.parmReportContract().parmRdpContract() as AssetLiquidationContract;
        wordConverter = RNumDateInWordConverter::construct(currentUserLanguage());

        if (netBookAssetTrans)
        {
            documentDate   = contract.parmDocumentDate();
            documentNumber = contract.parmDocumentNumber();
            netBookAssetTrans.updateDocument_W(documentNumber, documentDate);
        }

        commission1 = contract.parmCommission1();
        if (commission1)
        {
            contract.parmCommissionName1(HcmWorker::worker2Name(commission1));
            contract.parmCommissionTitle1(HcmWorker::worker2ProfessionalTitle(commission1));
        }
        commission2 = contract.parmCommission2();
        if (commission2)
        {
            contract.parmCommissionName2(HcmWorker::worker2Name(commission2));
            contract.parmCommissionTitle2(HcmWorker::worker2ProfessionalTitle(commission2));
        }
        commission3 = contract.parmCommission3();
        if (commission3)
        {
            contract.parmCommissionName3(HcmWorker::worker2Name(commission3));
            contract.parmCommissionTitle3(HcmWorker::worker2ProfessionalTitle(commission3));
        }

        companyInfo       = companyInfo::find();
        bankAccountTable  = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank);
        assetSumCalcTrans = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All);

        contract.parmCompanyAccountant(companyInfo.Accountant_LT);
        contract.parmCompanyHead(companyInfo.Head_LT);
        contract.parmLiquidationDateText(netBookAssetTrans.TransDate ? wordConverter.date2strExt(netBookAssetTrans.TransDate) : '');
        contract.parmOrderDateText(documentDate ? wordConverter.date2strExt(documentDate) : '');
        contract.parmAcquisitionDateText(wordConverter.date2strExt(assetBook.AcquisitionDate));
        contract.parmAssetBookDescription(strFmt("@SYS76498", assetBook.BookId, AssetBookTable::find(assetBook.BookId).Description));
        contract.parmBalance(strFmt("@GLS107545", assetSumCalcTrans.acquisitionValueAll() + assetSumCalcTrans.writeUpDownAdjValue(),
                      bankAccountTable.CurrencyCode, -(assetSumCalcTrans.depreciationValueAll() + assetSumCalcTrans.extraDepreciationValue()),
                      bankAccountTable.CurrencyCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a Select button will be added to the dialog.
    /// </summary>
    /// <param name="parameterName">
    /// The name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    /// true if the select button is displayed; otherwise, false .
    /// </returns>
    /// <remarks>
    /// This method is used by the query UI builder.
    /// </remarks>
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the query values will be added to the dialog.
    /// </summary>
    /// <param name="parameterName">
    /// The name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    /// true if query values are to be shown otherwise false .
    /// </returns>
    /// <remarks>
    /// This method is used by the query UI builder.
    /// </remarks>
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00008, funcName());

        AssetLiquidationController::newInstance(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetLiquidationController</c> class.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object which is to be provided to the newly created controller instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetLiquidationController</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetLiquidationController newInstance(Args _args)
    {
        AssetLiquidationController controller = new AssetLiquidationController();
        controller.parmReportName(ssrsReportStr(AssetLiquidation, Report));
        controller.parmArgs(_args);
        controller.parmDialogCaption("@GLS107531");
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>