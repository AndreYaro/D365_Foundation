<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_NL extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankTest</Name>
				<Source><![CDATA[
    public boolean bankTest(CompanyBankAccountId _accountNum)
    {
        boolean ret = true;
        AccountNum bankAccountNum = _accountNum;

        //check if the account number contains only digits
        if (strRem(bankAccountNum, '1234567890') != '')
        {
            error("@SYS75090");
            return false;
        }

        if (strLen(bankAccountNum) == 9)
        {
            bankAccountNum = '0' + bankAccountNum;
        }

        //check on the "11 proof" test
        if (strLen(bankAccountNum) != 10)
        {
            error(strfmt("@SYS54162", '9,10'));
            return false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        return this.checkBankAccountNum(_bankAccountMap.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNL00016, funcName());

        boolean ok = true;

        if (strLen(_bankAccount) == 9)
        {
            if (strRem(subStr(_bankAccount,1,9), '1234567890') != '')
            {
                error(strfmt("@SYS86814", _bankAccount));
                ok = false;
            }
        }

        if (ok)
        {
            // "P" or "G" Stands for a Giro Number (Post Bank)
            if (strUpr(subStr(_bankAccount,1,1)) == 'p' || strupr(subStr(_bankAccount,1,1)) == 'g')
            {
                ok = this.giroTest(_bankAccount);
            }
            else
            {
                ok = this.bankTest(_bankAccount);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giroTest</Name>
				<Source><![CDATA[
    public boolean giroTest(CompanyBankAccountId _accountNum)
    {
        boolean ret = true;
        int length = strlen(_accountNum);

        //check length of the account number
        if (length > 8)
        {
            error(strfmt("@SYS54162", '<8'));
            ret = false;
        }
        //check if the account number only contains digits
        else if (strRem(subStr(_accountNum, 2, length - 1), '1234567890') != '')
        {
            error("@SYS75090");
            ret = false;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>