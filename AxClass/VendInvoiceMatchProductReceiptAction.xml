<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceMatchProductReceiptAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[DataContract]
[SysCopilotChatGlobalAction]
[SysCopilotChatActionDefinition(
    identifierStr(MS.ServerForm.VendInvoiceCopilot.MatchProductReceipt),
    'Match product receipt',
    'Match vendor invoice with product receipt',
    'VendInvoiceMatchProductReceiptAction',
    MenuItemType::Action)]
public final class VendInvoiceMatchProductReceiptAction extends SysCopilotChatAction
{
    private const str metricNamespace = 'VendorInvoiceCopilot';
    private const str actionName = 'MS.ServerForm.VendInvoiceCopilot.MatchProductReceipt';
    private str invoiceId;
    private int fullyMatched;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    [DataMember('invoiceId'),
    SysCopilotChatActionInputParameter('The vendor invoice number to be matched', true)]
    public str parmInvoiceId(str _vendInvoiceId = invoiceId)
    {
        invoiceId = _vendInvoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullyMatched</Name>
				<Source><![CDATA[
    [DataMember('fullyMatched'),
    SysCopilotChatActionOutputParameter('Match result for invoice matching process')]
    public int parmFullyMatched(int _fullyMatched = fullyMatched)
    {
        fullyMatched = _fullyMatched;
        return fullyMatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    public void executeAction(SysCopilotChatActionDefinitionAttribute _actionDefinition, object _context)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(VendInvoiceMatchProductReceiptAction));

        using (var context = logger.activityContext(actionName, metricNamespace))
        {
            if (VendInvoiceCopilotMatchProductReceiptFlight::instance().isEnabled())
            {
                int matched = 1;
                VendInvoiceInfoTable vendInvoiceInfoTable;
                VendInvoiceInfoLine vendInvoiceInfoLine;

                select TableRefId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.Num == this.parmInvoiceId()
                        && vendInvoiceInfoTable.ParmId == '';

                if (vendInvoiceInfoTable.TableRefId)
                {
                    container range = this.wrapRecord(vendInvoiceInfoTable);
                    VendInvoiceMatch vendInvoiceMatch = VendInvoiceMatch::construct();
            
                    vendInvoiceMatch::match(range);
                }

                while select vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ReceiveNow != 0
                        && vendInvoiceInfoLine.PurchLineRecId != 0
                    join vendInvoiceInfoTable
                        where vendInvoiceInfoTable.Num == this.parmInvoiceId()
                            && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                {
                    if (VendInvoiceInfoLine.checkIfQuantityMatch() == LastMatchVarianceOptions::Warning)
                    {
                        matched = 0;
                        break;
                    }
                }
        
                this.parmFullyMatched(matched);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapRecord</Name>
				<Source><![CDATA[
    private container wrapRecord(VendInvoiceInfoTable _invoiceRecord)
    {
        List invoiceList = new List(Types::Record);

        invoiceList.addEnd(_invoiceRecord);
        return invoiceList.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>