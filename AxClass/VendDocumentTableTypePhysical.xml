<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableTypePhysical</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendDocumentTableTypePhysical</c> class is used for validation and applying default values
///    to document header records.
/// </summary>
/// <remarks>
///    This class represents the strategy related to the document origin.
/// </remarks>
abstract class VendDocumentTableTypePhysical
{
    VendDocumentTableMap vendDocumentTableMap;
    VendDocumentTableType mainStrategy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>vendDocumentTableMap</Name>
				<Source><![CDATA[
    protected VendDocumentTableMap vendDocumentTableMap(VendDocumentTableMap _vendDocumentTableMap = vendDocumentTableMap)
    {
        if (!prmisdefault(_vendDocumentTableMap))
        {
            vendDocumentTableMap = _vendDocumentTableMap;
        }

        return vendDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public abstract void defaultRow()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the recalculate field.
    /// </summary>
    /// <param name="_recalculate">
    /// The suggested value for the recalculate field.
    /// </param>
    /// <returns>
    /// The default value of the recalculate field for the current record.
    /// </returns>
    public abstract NoYes determineDefaultRecalculate(NoYes _recalculate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VendInvoiceGroup</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>VendInvoiceGroup</c> field for the current record.
    /// </returns>
    public abstract VendInvoiceGrouping determineDefaultVendInvoiceGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceSaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the Save Status of an invoice.
    /// </summary>
    /// <returns>
    ///    An applicable <c>VendInvoiceSaveStatus</c>.
    /// </returns>
    public abstract VendInvoiceSaveStatus determineDefaultVendInvoiceSaveStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCashDiscDate</Name>
				<Source><![CDATA[
    public abstract void initDefaultCashDiscDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal state.
    /// </summary>
    /// <remarks>
    ///    This method sets the internal touched flag for fields passed through table buffer into the methods
    ///    responsible for applying default values.
    /// </remarks>
    public void initState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainStrategy</Name>
				<Source><![CDATA[
    protected VendDocumentTableType mainStrategy(VendDocumentTableType _mainStrategy = mainStrategy)
    {
        if (!prmisdefault(_mainStrategy))
        {
            mainStrategy = _mainStrategy;
        }

        return mainStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCodeForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>CurrencyCode</c> field for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the <c>CurrencyCode</c> field is valid; otherwise, false.
    /// </returns>
    public abstract boolean validateCurrencyCodeForInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentDateForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>DocumentDate</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>DocumentDate</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateDocumentDateForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccountForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>InvoiceAccount</c> field for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the <c>InvoiceAccount</c> field is valid; otherwise, false.
    /// </returns>
    public abstract boolean validateInvoiceAccountForInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>Num</c> for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the <c>Num</c> field is valid; otherwise, false.
    /// </returns>
    public abstract boolean validateNumForInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchIdForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>PurchId</c> field for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the PurchId field is valid; otherwise, false.
    /// </returns>
    public boolean validatePurchIdForInvoice()
    {
        container checkIfInvoiceable;

        PurchTableCheckIfUpdateContract checkIfUpdateContract;
        PurchTableCanBeUpdatedContract canBeUpdatedContract;

        if (this.mainStrategy().vendDocumentTableMap().isNonPO())
        {
            // No need to validate non-PO invoices
            return true;
        }

        if (!this.mainStrategy().purchTable().PurchId)
        {
            checkFailed(
                strFmt("@SYS128608",
                    this.mainStrategy().vendDocumentTableMap().PurchId,
                    this.mainStrategy().vendDocumentTableMap().Num));

            return false;
        }

        checkIfUpdateContract = PurchTableCheckIfUpdateContract::construct();
        checkIfUpdateContract.parmCheckInvoice(true);
        checkIfInvoiceable = this.mainStrategy().purchTable().checkIfUpdate(checkIfUpdateContract.pack()); // only calculate for invoices
        canBeUpdatedContract = PurchTableCanBeUpdatedContract::create(checkIfInvoiceable);
        boolean isInvoiceable = canBeUpdatedContract.parmCanInvoiceBeUpdated();
        if (!isInvoiceable)
        {
            InvoiceUpdateAvailability invoiceUpdateAvailability = canBeUpdatedContract.parmInvoiceUpdateAvailability();
            switch (invoiceUpdateAvailability)
            {
                case InvoiceUpdateAvailability::VendorBlocked :
                    checkFailed(
                    strFmt("@SYS128411",
                        this.mainStrategy().purchTable().InvoiceAccount,
                        VendTable::blocked(this.mainStrategy().purchTable().InvoiceAccount)));
                    break;

                case InvoiceUpdateAvailability::SalesPurchCycleInactive,
                     InvoiceUpdateAvailability::POInterCompanyEndpointActionPolicyFailure,
                     InvoiceUpdateAvailability::PONotActiveAndNoQtyToInvoice :

                default: 
                    checkFailed(
                    strFmt("@SYS128609",
                        this.mainStrategy().purchTable().PurchId,
                        this.mainStrategy().vendDocumentTableMap().Num));
            }
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransDateForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>TransDate</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>TransDate</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateTransDateForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the strategy used to apply default values into either a <c>PurchParmTable</c> record or
    ///    <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_vendDocumentTableMap">
    ///    An instance of the <c>VendDocumentTableMap</c> object.
    /// </param>
    /// <param name="_mainStrategy">
    ///    An instance of the <c>VendDocumentTableType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>VendDocumentTableTypePhysical</c> class.
    /// </returns>
    /// <remarks>
    ///    Default values are applied differently depending on the document origin. The class derivatives
    ///    handle the differences.
    /// </remarks>
    public static VendDocumentTableTypePhysical create(VendDocumentTableMap _vendDocumentTableMap, VendDocumentTableType _mainStrategy)
    {
        DocumentOrigin origin = _vendDocumentTableMap.DocumentOrigin;
        VendDocumentTableTypePhysical physicalStrategy;

        switch (origin)
        {
            case DocumentOrigin::Manual, DocumentOrigin::VendorPortal:
                physicalStrategy = new VendDocumentTableTypePhysical_PurchParm();
                break;

            case DocumentOrigin::Service:
                physicalStrategy = new VendDocumentTableTypePhysical_VendIvc();
                break;
        }

        physicalStrategy.vendDocumentTableMap(_vendDocumentTableMap);
        physicalStrategy.mainStrategy(_mainStrategy);

        return physicalStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>