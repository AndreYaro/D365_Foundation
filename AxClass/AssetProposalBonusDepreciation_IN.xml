<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalBonusDepreciation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the asset proposal for bonus depreciation.
/// </summary>
class AssetProposalBonusDepreciation_IN extends AssetProposal implements BatchRetryable
{
    #DEFINE.CurrentVersion(10)

    #LOCALMACRO.CurrentList
        assetBudgetModelId,
        journalNum,
        isFixedAssetBudgetJournal,
        // <GCN>
        isFixedAssetJournal,
        voucherType_CN,
        // </GCN>
        batchEnabled,
        journalName,
        transType
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the asset transaction type.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AssetTransTypeJournal</c> class.
    /// </returns>
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::BonusDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS95700");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query               query = new Query(querystr(assetproposal));
        QueryBuildRange     qr_Range;

        super();

        query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, depreciation)).value(
            strFmt('((%1 == NoYes::Yes) || (%2 == NoYes::Yes))',
            fieldStr(AssetBook, Depreciation),
            fieldStr(AssetBook, AssetGroupDepreciation_IN)));

        qr_Range = query.dataSourceTable(tablenum(AssetBookTable)).addRange(fieldnum(AssetBookTable,CurrentOperationsTax));
        qr_Range.status(1);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        AssetJournal            assetJournal;
        AssetBook               assetBook;
        AmountCur               amountCur;
        Counter                 transactionCount = 0;
        boolean                 commitNeeded = false;
        boolean                 beginNeeded = true;
        LedgerJournalTransTxt   ledgerJournalTransTxt;
        AssetTableInterval      deprInterval;
        AssetTransDate          transDate;
        AssetTransDate          endDate;
        AssetBookTable          assetBookTable;
        FiscalCalendarYear      fiscalCalendarYear;
        AssetTransDate          sessionDate;

        #avifiles

        assetJournal = new AssetJournal(journalNum,this.assetTransType());

        queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open)+','+queryValue(AssetStatus::NoAcquisition));

        sessionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;
        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetBook)))
            {
                assetBook = queryRun.get(tablenum(AssetBook));
                if (assetBook.AssetGroupDepreciation_IN && assetBook.Status == AssetStatus::NoAcquisition)
                {
                    assetBook = null;
                }

                assetBookTable = AssetBookTable::find(assetBook.BookId);
                if (assetBook)
                {
                    fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(assetBookTable.FiscalCalendar, sessionDate);

                    //If fiscal calendar is not defined, check for previous calendar year.
                    if (fiscalCalendarYear.RecId == 0)
                    {
                        sessionDate  = mkDate(dayOfMth(sessionDate), mthOfYr(sessionDate), year(sessionDate) - 1);
                    }

                    deprInterval = AssetTableInterval::construct(assetBook.depreciationProfile(), assetBookTable.FiscalCalendar);
                    endDate = deprInterval.endPeriod(sessionDate);
                }

                if (assetBook)
                {
                    AssetBonusMethod_IN assetBonusMethod = new AssetBonusMethod_IN(assetBook);

                    while (assetBonusMethod.next())
                    {
                        amountCur = -assetBonusMethod.getNextBonusAmount();
                        ledgerJournalTransTxt =  assetBonusMethod.getNextBonusName();
                        transDate = assetBonusMethod.bonusDate();
                        if (transDate <= endDate && assetBook.AcquisitionDate < transDate && abs(amountCur) > 0)
                        {
                            assetJournal.createTrans(amountCur, assetBook, transDate, '', 0, 0, false, 0, 0, dateNull());
                        }
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version    = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>