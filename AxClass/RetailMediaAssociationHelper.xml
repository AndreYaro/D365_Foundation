<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaAssociationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Exception;

/// <summary>
/// Media association helper class.
/// </summary>
class RetailMediaAssociationHelper
{
    private const str filePathEndsWith = '/';
    private const int maxRetryCount = 3;
    private const str userDefinedImage = 'Edited by user';
    private const str urlEncodeEscapeCharacter = '^';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateCustomerMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the customer, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The media file path.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    public static void populateCustomerMediaTable(str mediaFilePath, str fileExtension)
    {
        CustTable customerTable;
        RetailCustTable retailCustTable;
        DirPartyTable partyTable;
        RetailTmpCustomerMedia customerMedia;
        RetailMediaAndMasterEntityRelation relationTable;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set ids = new Set(Types::Int64);

        ttsbegin;

        delete_from customerMedia;

        while select * from customerTable
                join partyTable
                where customerTable.PARTY == partyTable.RECID
                join retailCustTable
                where customerTable.AccountNum == retailCustTable.accountNum
                outer join relationTable
                where relationTable.MasterEntityRecId == customerTable.RecId &&
                relationTable.MasterEntityType == RetailMediaMasterEntity::Customer
        {
               if (relationTable && relationTable.MediaResourceId)
               {
                   retailMedia = RetailImageResource::findByResourceId(relationTable.MediaResourceId);
                   mediaUrl = retailMedia.ResourceUrl;
                   mediaFileName = strFmt("%1_%2_%3", userDefinedImage, partyTable.Name , int2Str(userEditedRecCounter));

                   userEditedRecCounter++;

                   RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                            0,
                            customerTable.accountNum,
                            partyTable.Name,
                            mediaIndex,
                            mediaFileName,
                            mediaUrl,
                            description,
                            mediaAssociationStatus,
                            mediaAssociatedOn,
                            mediaAssociationError);

                   mediaExcelTemplateSet.add(template);
               }

               if (!ids.in(customerTable.RecId))
               {
                   ids.add(customerTable.RecId);

                   mediaFileName = RetailMediaAssociationHelper::getFileName(customerTable.accountNum);
                   mediaFileName = mediaFileName + '.' + fileExtension;
                   mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                   RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                            0,
                            customerTable.accountNum,
                            partyTable.Name,
                            mediaIndex,
                            mediaFileName,
                            mediaUrl,
                            description,
                            mediaAssociationStatus,
                            mediaAssociatedOn,
                            mediaAssociationError);

                   mediaExcelTemplateSet.add(template);
               }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Customer);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkerMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the workers, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    public static void populateWorkerMediaTable(str mediaFilePath, str fileExtension)
    {
        RETAILSTAFFTABLE workerTable;
        HCMWORKER workerBaseTable;
        DIRPERSONENTITY personView;
        RetailTmpWorkerMedia workerMedia;
        RetailMediaAndMasterEntityRelation relationTable;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set ids = new Set(Types::Int64);

        ttsbegin;
        delete_from workerMedia;

        while select * from workerTable
                join workerBaseTable
                where workerTable.staffId == workerBaseTable.PersonnelNumber
                join personView
                where workerBaseTable.Person == personView.RecId
                outer join relationTable
                where relationTable.MasterEntityRecId == workerBaseTable.RecId
                    && relationTable.MasterEntityType == RetailMediaMasterEntity::Worker
        {
            if (relationTable && relationTable.MediaResourceId)
            {
                retailMedia = RetailImageResource::findByResourceId(relationTable.MediaResourceId);
                mediaUrl = retailMedia.ResourceUrl;
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, personView.Name , int2Str(userEditedRecCounter));

                userEditedRecCounter++;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        workerBaseTable.RecId,
                        workerTable.staffId,
                        personView.Name,
                        mediaIndex,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
            }

            if (!ids.in(workerBaseTable.RecId))
            {
                ids.add(workerBaseTable.RecId);

                mediaFileName = RetailMediaAssociationHelper::getFileName(workerTable.staffId);
                mediaFileName = mediaFileName + '.' + fileExtension;
                mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        workerBaseTable.RecId,
                        workerTable.staffId,
                        personView.Name,
                        mediaIndex,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Worker);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCatalogMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the catalog, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    public static void populateCatalogMediaTable(str mediaFilePath, str fileExtension)
    {
        RetailTmpCatalogMedia catalogMedia;
        CatalogTranslation catalogTranslationTable;
        Catalog catalogTable;
        RetailMediaAndMasterEntityRelation relationTable;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set ids = new Set(Types::Int64);

        ttsbegin;
        delete_from catalogMedia;

        while select * from catalogTranslationTable
        join catalogTable
        where catalogTranslationTable.Catalog == catalogTable.RecId
        outer join relationTable
        where relationTable.MasterEntityRecId == catalogTable.RecId && relationTable.MasterEntityType == RetailMediaMasterEntity::Catalog
            && catalogTranslationTable.Language == SystemParameters::getSystemLanguageId()
        {
            if (relationTable && relationTable.MediaResourceId)
            {
                retailMedia = RetailImageResource::findByResourceId(relationTable.MediaResourceId);
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, catalogTranslationTable.FriendlyName, int2Str(userEditedRecCounter));
                mediaUrl = retailMedia.ResourceUrl;
                userEditedRecCounter++;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        catalogTable.RecId,
                        '',
                        catalogTranslationTable.FriendlyName,
                        mediaIndex,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
            }

            if (!ids.in(catalogTable.RecId))
            {
                ids.add(catalogTable.RecId);

                mediaFileName = RetailMediaAssociationHelper::getFileName(catalogTranslationTable.FriendlyName);
                mediaFileName = mediaFileName + '.' + fileExtension;
                mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        catalogTable.RecId,
                        '',
                        catalogTranslationTable.FriendlyName,
                        mediaIndex,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Catalog);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMediaAssociationTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     To populate fields of media tables.
    /// </summary>
    /// <param name = "excelImageTemplate">
    ///     A set variable which holds excel image templates.
    /// </param>
    /// <param name = "masterEntity">
    ///     A retail media entity enum.
    /// </param>
    [Wrappable(true)]
    protected final static void populateMediaAssociationTable(Set excelImageTemplate, RetailMediaMasterEntity masterEntity)
    {
        RetailTmpCatalogMedia catalogMedia;
        RetailTmpCategoryMedia categoryMedia;
        RetailTmpCustomerMedia customerMedia;
        RetailTmpWorkerMedia workerMedia;
        RetailTmpProductMedia productMedia;
        RetailTmpColorMedia colorMedia;
        RetailTmpSizeMedia sizeMedia;
        RetailTmpStyleMedia styleMedia;
        RecordInsertList mediaRecordsToBeInserted;
        SetEnumerator excelImageTemplateEnumerator;

        switch (masterEntity)
        {
            case RetailMediaMasterEntity::Catalog:
                mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpCatalogMedia), // table id
                        false, // skip insert
                        false, // skip database log
                        false, // skip events
                        false, // skip aos validation
                        false, // skip RLS validation
                        catalogMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate catalogExcelTemplate = excelImageTemplateEnumerator.current();
                    catalogMedia.CatalogId = catalogExcelTemplate.Id();
                    catalogMedia.CatalogName = catalogExcelTemplate.Name();
                    catalogMedia.MediaUrl = catalogExcelTemplate.MediaUrl();
                    catalogMedia.MediaFileName = catalogExcelTemplate.MediaFileName();

                    mediaRecordsToBeInserted.add(catalogMedia);
                }

                break;

            case RetailMediaMasterEntity::Customer:
                mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpCustomerMedia), // table id
                        false, // skip insert
                        false, // skip database log
                        false, // skip events
                        false, // skip aos validation
                        false, // skip RLS validation
                        customerMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    customerMedia.Customer = template.IdInStr();
                    customerMedia.CustomerName = template.Name();
                    customerMedia.MediaUrl = template.MediaUrl();
                    customerMedia.MediaFileName = template.MediaFileName();

                    mediaRecordsToBeInserted.add(customerMedia);
                }

                break;

            case RetailMediaMasterEntity::Category:
                mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpCategoryMedia), // table id
                        false, // skip insert
                        false, // skip database log
                        false, // skip events
                        false, // skip aos validation
                        false, // skip RLS validation
                        categoryMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    categoryMedia.CategoryHierarchy = template.Id();
                    categoryMedia.CategoryName = template.Name();
                    categoryMedia.MediaUrl = template.MediaUrl();
                    categoryMedia.MediaFileName = template.MediaFileName();

                    mediaRecordsToBeInserted.add(categoryMedia);
                }

                break;

            case RetailMediaMasterEntity::Worker:
                mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpWorkerMedia), // table id
                        false, // skip insert
                        false, // skip database log
                        false, // skip events
                        false, // skip aos validation
                        false, // skip RLS validation
                        workerMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    workerMedia.Worker = template.IdInStr();
                    workerMedia.WorkerName = template.Name();
                    workerMedia.MediaUrl = template.MediaUrl();
                    workerMedia.MediaFileName = template.MediaFileName();

                    mediaRecordsToBeInserted.add(workerMedia);
                }

                break;

            case RetailMediaMasterEntity::Product:
                mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpProductMedia), // table id
                        false, // skip insert
                        false, // skip database log
                        false, // skip events
                        false, // skip aos validation
                        false, // skip RLS validation
                        productMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    productMedia.MediaFileName = template.MediaFileName();
                    productMedia.Product = template.Name();
                    productMedia.MediaUrl = template.MediaUrl();

                    mediaRecordsToBeInserted.add(productMedia);
                }

                break;

            case RetailMediaMasterEntity::Color:
                 mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpColorMedia),  //table id
                    false, // skip insert
                    false, // skip database log
                    false, // skip events
                    false, // skip aos validation
                    false, // skip RLS validation
                    colorMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    colorMedia.MediaFileName = template.MediaFileName();
                    colorMedia.Color = template.Name();
                    colorMedia.MediaUrl = template.MediaUrl();

                    mediaRecordsToBeInserted.add(colorMedia);
                }

                break;

            case RetailMediaMasterEntity::Size:
                 mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpSizeMedia),  //table id
                    false, // skip insert
                    false, // skip database log
                    false, // skip events
                    false, // skip aos validation
                    false, // skip RLS validation
                    sizeMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    sizeMedia.MediaFileName = template.MediaFileName();
                    sizeMedia.Size = template.Name();
                    sizeMedia.MediaUrl = template.MediaUrl();

                    mediaRecordsToBeInserted.add(sizeMedia);
                }

                break;

            case RetailMediaMasterEntity::Style:
                 mediaRecordsToBeInserted = new RecordInsertList(tableNum(RetailTmpStyleMedia),  //table id
                    false, // skip insert
                    false, // skip database log
                    false, // skip events
                    false, // skip aos validation
                    false, // skip RLS validation
                    styleMedia); // buffer where records will be inserted

                excelImageTemplateEnumerator = excelImageTemplate.getEnumerator();

                while (excelImageTemplateEnumerator.moveNext())
                {
                    RetailImageExcelTemplate template = excelImageTemplateEnumerator.current();
                    styleMedia.MediaFileName = template.MediaFileName();
                    styleMedia.Style = template.Name();
                    styleMedia.MediaUrl = template.MediaUrl();

                    mediaRecordsToBeInserted.add(styleMedia);
                }

                break;

        }

        mediaRecordsToBeInserted.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCategoryMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the catagories, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    public static void populateCategoryMediaTable(str mediaFilePath, str fileExtension)
    {
        EcoResCategory categoryTable;
        RetailMediaAndMasterEntityRelation mediaCategoryRelation;
        RetailTmpCategoryMedia categoryMedia;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set ids = new Set(Types::Int64);

        ttsbegin;
        delete_from categoryMedia;

        while select * from categoryTable
            outer join mediaCategoryRelation
            where categoryTable.RecId == mediaCategoryRelation.MasterEntityRecId
                    && mediaCategoryRelation.MasterEntityType == RetailMediaMasterEntity::Category
        {
            if (mediaCategoryRelation && mediaCategoryRelation.MediaResourceId)
            {
                retailMedia = RetailImageResource::findByResourceId(mediaCategoryRelation.MediaResourceId);
                mediaUrl = retailMedia.ResourceUrl;
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, categoryTable.Name, int2Str(userEditedRecCounter));

                userEditedRecCounter++;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        categoryTable.CategoryHierarchy,
                        '',
                        categoryTable.Name,
                        mediaIndex,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
            }

            if (!ids.in(categoryTable.RecId))
            {
                ids.add(categoryTable.RecId);

                mediaFileName = RetailMediaAssociationHelper::getFileName(categoryTable.Name);
                mediaFileName = mediaFileName + '.' + fileExtension;
                mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        categoryTable.CategoryHierarchy,
                        '',
                        categoryTable.Name,
                        mediaIndex,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Category);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProductMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the products, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    /// <param name = "numberOfImagesPerProduct">Number of images per product as per the image template.</param>
    public static void populateProductMediaTable(str mediaFilePath, str fileExtension, int numberOfImagesPerProduct = 0)
    {
        EcoResProduct productTable;
        RetailMediaTemplate retailMediaTemplate;
        RetailTmpProductMedia productMedia;
        RetailMediaProductRelation mediaProductRelation;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set productIds = new Set(Types::Int64);

        if (numberOfImagesPerProduct == 0)
        {
            throw error("@RetailMediaGalleryLabels:InvalidNumberOfProductImages");
        }

        ttsbegin;
        delete_from productMedia;

        while select DISPLAYPRODUCTNUMBER, RecId from productTable
            outer join mediaProductRelation where mediaProductRelation.Product == productTable.RecId
        {
            if (mediaProductRelation && mediaProductRelation.MediaResource)
            {
                retailMedia = RetailImageResource::find(mediaProductRelation.MediaResource);
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, productTable.DisplayProductNumber, int2Str(userEditedRecCounter));
                mediaUrl = retailMedia.ResourceUrl;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        productTable.RecId,
                        '',
                        productTable.DisplayProductNumber,
                        0,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
                userEditedRecCounter++;
            }

            if (!productIds.in(productTable.RecId))
            {
                productIds.add(productTable.RecId);

                for (int counter = 1; counter <= numberOfImagesPerProduct; counter++)
                {
                    mediaFileName = RetailMediaAssociationHelper::getFileName(productTable.DisplayProductNumber);
                    str currentIndexValue = strRFix(int2Str(counter), 3, '0'); //format the index value 1 as 001.
                    var mediaFileNameSuffix = RetailMediaHelper::ProductFileNameSeperator + currentIndexValue;
                    mediaFileName = mediaFileName + RetailMediaHelper::ProductFileNameSeperator + '000' + mediaFileNameSuffix + '.' + fileExtension;
                    mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                    RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                            productTable.RecId,
                            '',
                            productTable.DisplayProductNumber,
                            counter,
                            mediaFileName,
                            mediaUrl,
                            description,
                            mediaAssociationStatus,
                            mediaAssociatedOn,
                            mediaAssociationError);

                    mediaExcelTemplateSet.add(template);
                }
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Product);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpProductMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records into the Product media temp table, this table is populated to feed data into the Excel, when user select to edit the data in the Excel.
    /// </summary>
    /// <param name = "fileName">The product file name.</param>
    /// <param name = "displayProductNumber">The DisplayProductNumber value.</param>
    /// <param name = "url">Media url.</param>
    /// <param name = "currentIndex">Current product image index.</param>
    /// <param name = "fileExtension">File extension.</param>
    /// <param name = "isUserEdited">Whether this image is from default image template or edited by user.</param>
    private static void insertIntoTmpProductMediaTable(str fileName, str displayProductNumber, str url, int currentIndex, str fileExtension, boolean isUserEdited)
    {
        RetailTmpProductMedia productMedia;
        productMedia.initValue();
        productMedia.clear();

        str currentIndexValue = strRFix(int2Str(currentIndex), 3, '0'); //format the index value 1 as 001.
        var mediaFileNameSuffix = RetailMediaHelper::ProductFileNameSeperator + currentIndexValue;
        var mediaFileName = fileName;

        if (isUserEdited)
        {
            mediaFileName = userDefinedImage + RetailMediaHelper::ProductFileNameSeperator + mediaFileName + mediaFileNameSuffix;
        }
        else
        {
            mediaFileName = mediaFileName + RetailMediaHelper::ProductFileNameSeperator + '000' + mediaFileNameSuffix + '.' + fileExtension;
        }

        productMedia.MediaFileName = mediaFileName;
        productMedia.Product = displayProductNumber;
        productMedia.MediaUrl = url;
        productMedia.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associate media with a catalog.
    /// </summary>
    /// <param name = "catalogId">The catalog record identifier.</param>
    /// <param name = "url">The media Url.</param>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    public static void associateCatalog(CatalogId catalogId, str url, str description, NoYes isExternalImage = NoYes::Yes)
    {
        if (catalogId)
        {
            RefRecId productCatalogRecId = 0;
            RefRecId productInternalOrgRecId = 0;
            str imageXml = '';

            RetailMediaAssociationHelper::processMedia(
                    description,
                    url,
                    RetailMediaMasterEntity::Catalog,
                    catalogId,
                    imageXml,
                    productCatalogRecId,
                    productInternalOrgRecId,
                    isExternalImage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dissociateCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dissociate media from a catalog.
    /// </summary>
    /// <param name = "url">The media url.</param>
    /// <param name = "catalogId">The catalog record identifier.</param>
    public static void dissociateCatalog(str url, CatalogId catalogId)
    {
        RetailImageResource imageTable = RetailImageResource::findByImageUrl(url);

        if (catalogId && imageTable)
        {
            RetailMediaHelper::deleteFromMediaRelationTable(RetailMediaMasterEntity::Catalog, catalogId, imageTable.ResourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associate media with a customer.
    /// </summary>
    /// <param name = "customerAccountNumber">The customer account number.</param>
    /// <param name = "url">The media Url.</param>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    public static void associateCustomer(CustAccount customerAccountNumber, str url, str description, NoYes isExternalImage = NoYes::Yes)
    {
        CustTable custTable;
        custTable = CustTable::find(customerAccountNumber, true);

        if (custTable)
        {
            RefRecId productCatalogRecId = 0;
            RefRecId productInternalOrgRecId = 0;
            str imageXml = '';

            RetailMediaAssociationHelper::processMedia(
                    description,
                    url,
                    RetailMediaMasterEntity::Customer,
                    custTable.RecId,
                    imageXml,
                    productCatalogRecId,
                    productInternalOrgRecId,
                    isExternalImage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dissociateCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dissociate media from a customer.
    /// </summary>
    /// <param name = "url">The media url.</param>
    /// <param name = "customerAccountNumber">The customer account number.</param>
    public static void dissociateCustomer(str url, CustAccount customerAccountNumber)
    {
        CustTable custTable;
        System.Exception exec;
        custTable = CustTable::find(customerAccountNumber, true);
        RetailImageResource imageTable = RetailImageResource::findByImageUrl(url);

        if (custTable && imageTable)
        {
            RetailMediaHelper::deleteFromMediaRelationTable(RetailMediaMasterEntity::Customer, custTable.RecId, imageTable.ResourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associate media with a worker.
    /// </summary>
    /// <param name = "staffId">The worker record identifier.</param>
    /// <param name = "url">The media Url.</param>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    public static void associateWorker(RetailStaffId staffId, str url, str description, NoYes isExternalImage = NoYes::Yes)
    {
        HcmWorker staffTable;
        System.Exception exec;
        staffTable = HcmWorker::findByPersonnelNumber(staffId, true);

        if (staffTable)
        {
            RefRecId productCatalogRecId = 0;
            RefRecId productInternalOrgRecId = 0;
            str imageXml = '';

            RetailMediaAssociationHelper::processMedia(
                    description,
                    url,
                    RetailMediaMasterEntity::Worker,
                    staffTable.RecId,
                    imageXml,
                    productCatalogRecId,
                    productInternalOrgRecId,
                    isExternalImage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dissociateWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dissociate media from a worker.
    /// </summary>
    /// <param name = "url">The media url.</param>
    /// <param name = "staffId">The worker record identifier.</param>
    public static void dissociateWorker(str url, RetailStaffId staffId)
    {
        HcmWorker staffTable;
        RetailStaffTable retailStaffTable;
        System.Exception exec;
        staffTable = HcmWorker::findByPersonnelNumber(staffId, true);
        RetailImageResource imageTable = RetailImageResource::findByImageUrl(url);

        if (staffTable && imageTable)
        {
            RetailMediaHelper::deleteFromMediaRelationTable(RetailMediaMasterEntity::Worker, staffTable.RecId, imageTable.ResourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associate media with a category.
    /// </summary>
    /// <param name = "categoryRecId">The category record identifier.</param>
    /// <param name = "url">The media url.</param>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    public static void associateCategory(RefRecId categoryRecId, str url, str description, NoYes isExternalImage = NoYes::Yes)
    {
        EcoResCategory ecoResCategory = EcoResCategory::find(categoryRecId);

        if (ecoResCategory)
        {
            RefRecId productCatalogRecId = 0;
            RefRecId productInternalOrgRecId = 0;
            str imageXml = '';

            RetailMediaAssociationHelper::processMedia(
                    description,
                    url,
                    RetailMediaMasterEntity::Category,
                    categoryRecId,
                    imageXml,
                    productCatalogRecId,
                    productInternalOrgRecId,
                    isExternalImage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dissociateCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dissociate media from a category.
    /// </summary>
    /// <param name = "url">The media Url.</param>
    /// <param name = "categoryRecId">The Category record identifier.</param>
    public static void dissociateCategory(str url, RefRecId categoryRecId)
    {
        EcoResCategory ecoResCategory = EcoResCategory::find(categoryRecId);
        RetailImageResource imageTable = RetailImageResource::findByImageUrl(url);

        if (ecoResCategory && imageTable)
        {
            RetailMediaHelper::deleteFromMediaRelationTable(RetailMediaMasterEntity::Category, categoryRecId, imageTable.ResourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associate media with a product.
    /// </summary>
    /// <param name = "productRecId">The product record identifier.</param>
    /// <param name = "url">The media Url.</param>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    public static void associateProduct(RefRecId productRecId, str url, str description, NoYes isExternalImage = NoYes::Yes)
    {
        RefRecId productCatalogRecId = 0;
        RefRecId productInternalOrgRecId = 0;
        str imageXml;
        NoYes isDefault = NoYes::No;

        RetailMediaAssociationHelperContext context = RetailMediaAssociationHelperContext::current();

        if (context && context.parmIsDefault())
        {
            isDefault = context.parmIsDefault();
        }

        RetailMediaAssociationHelper::processMedia(
                    description,
                    url,
                    RetailMediaMasterEntity::Product,
                    productRecId,
                    imageXml,
                    productCatalogRecId,
                    productInternalOrgRecId,
                    isExternalImage,
                    isDefault);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dissociateProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dissociate media from a product.
    /// </summary>
    /// <param name = "productRecId">The product record identifier.</param>
    /// <param name = "catalogId">The catalog record identifier.</param>
    /// <param name = "internalOrgId">The internal organization identifier.</param>
    /// <param name = "url">The media Url.</param>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    public static void dissociateProduct(RefRecId productRecId, RefRecId catalogId, RefRecId internalOrgId, str url, str description, NoYes isExternalImage = NoYes::Yes)
    {
        RetailImageResource imageTable = RetailImageResource::findByImageUrl(url);

        if (productRecId && imageTable)
        {
            RetailMediaHelper::deleteFromMediaRelationTable(
                RetailMediaMasterEntity::Product,
                productRecId,
                imageTable.ResourceId,
                productRecId,
                catalogId,
                internalOrgId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMedia</Name>
				<Source><![CDATA[
    /// <summary>
    /// Onboards the new media into the gallery and update the entity-media relation table.
    /// </summary>
    /// <param name = "description">The description of the media.</param>
    /// <param name = "mediaUrl">The media url.</param>
    /// <param name = "masterEntity">Currently selected entity.</param>
    /// <param name = "entityRecId">The record identifier of the selected entity.</param>
    /// <param name = "currentImageXml">The current image association information as persisted in the Xml.</param>
    /// <param name = "catalogRecId">The Catalog record identifier.</param>
    /// <param name = "internalOrgRecId">The internal orgazination record identifier.</param>
    /// <param name = "isExternalImage">Indicates whether the image is hosted internally by the Microsoft Retail solution or externally.</param>
    /// <param name = "isDefault">Whether this media set as Default.</param>
    /// <returns>The updated Xml which contains the image association information.</returns>
    private static str processMedia(str description, str mediaUrl, RetailMediaMasterEntity masterEntity, RecId entityRecId, str currentImageXml = '',
                                        RefRecId catalogRecId = 0, RetailInternalOrgRefRecId internalOrgRecId = 0, NoYes isExternalImage = NoYes::Yes,
                                        NoYes isDefault = NoYes::No)
    {
        RetailRichMediaTmp richMediaGallery;
        //Import the image into the media gallery.

        int resourceId  = RetailMediaAssociationHelper::importMediaIntoGallery(
                            mediaUrl,
                            description,
                            masterEntity,
                            isExternalImage);

        if (resourceId > 0)
        {
            //For all the entities update the MediaRelationTable.
            RefRecId productRecId = entityRecId;
            RetailMediaHelper::updateMediaRelationTable(
                    masterEntity,
                    entityRecId,
                    resourceId,
                    catalogRecId,
                    internalOrgRecId,
                    productRecId,
                    isDefault);
        }

        return RetailRichMediaEncoder::encodeGallery(richMediaGallery, masterEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsoluteUrlFromPartialUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine returns a absolute url from a partial url. It appends the media server base url with the partial url.
    /// </summary>
    /// <param name = "partialUrl">The partial url.</param>
    /// <returns>The valid absolute url.</returns>
    private static str getAbsoluteUrlFromPartialUrl(str partialUrl)
    {
        str result = '';

        if (strContains(partialUrl, '{'))
        {
            //the partial url has Token in it.. hence do not process.
            return result;
        }
        else
        {
            //Valid partial url, i.e. no token in it.
            if ((strStartsWith(partialUrl, '/')) || (strStartsWith(partialUrl, '\\')))
            {
                partialUrl = subStr(partialUrl, 2, strLen(partialUrl));
            }

            RETAILCHANNELPROFILE channelProfile;
            RETAILCHANNELPROFILEPROPERTY channelProfileProperty;

            while select * from channelProfileProperty
            join  channelProfile
            where channelProfileProperty.ChannelProfile == channelProfile.RecId &&
            channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer &&
            channelProfileProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl
            {
                //Loop thru each channel profile and append the media base url with the partial url and validate whether that's a valid image.

                str baseUrl = channelProfileProperty.Value;
                str url = baseUrl;
                if (!((strEndsWith(url, '/')) || (strEndsWith(url, '\\'))))
                {
                    url = url + '/' + partialUrl;
                }
                else
                {
                    url = url +  partialUrl;
                }

                if (RetailMediaHelper::isAbsoluteURL(url) && RetailMediaHelper::getImageInBinaryByURL(url))
                {
                    //valid absolute url found.
                    result = url;
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMediaUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine gets the media path and name and return the media url.
    /// </summary>
    /// <param name = "mediaFilePath">The media file path.</param>
    /// <param name = "mediaFileName">The media file name.</param>
    /// <returns>Returns the media url.</returns>
    private static str getMediaUrl(str mediaFilePath, str mediaFileName)
    {
        if (!strEndsWith(mediaFilePath, filePathEndsWith))
        {
            mediaFilePath = mediaFilePath + filePathEndsWith;
        }

        return mediaFilePath + mediaFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importMediaIntoGallery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine onboard the media into the gallery.
    /// </summary>
    /// <param name = "mediaUrl">The media url.</param>
    /// <param name = "description">Description of the media.</param>
    /// <param name = "mediaMasterEntity">The master entity like catalog, customer etc.</param>
    /// <param name = "isExternalMedia">Is the media hosted by Microsoft Retail or hosted by the customer.</param>
    /// <returns>Returns the mediaID.</returns>
    private static int importMediaIntoGallery(str mediaUrl, str description, RetailMediaMasterEntity mediaMasterEntity, NoYes isExternalMedia)
    {
        RetailImageResource imageResource;
        boolean isAbsoluteUrl = RetailMediaHelper::isAbsoluteURL(mediaUrl);

        select forupdate * from imageResource
            where imageResource.ResourceUrl == mediaUrl;

        if (imageResource)
        {
            //the image already exist, just set the image usage.
            if (mediaMasterEntity == RetailMediaMasterEntity::Catalog)
            {
                imageResource.IsCatalog = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Category)
            {
                imageResource.IsCategory = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Product)
            {
                imageResource.IsProduct = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Worker)
            {
                imageResource.IsWorker = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Customer)
            {
                imageResource.IsCustomer = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Color)
            {
                imageResource.IsColor = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Size)
            {
                imageResource.IsSize = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Style)
            {
                imageResource.IsStyle = NoYes::Yes;
            }

            imageResource.InUse = NoYes::Yes;
            imageResource.update();
        }
        else
        {
            imageResource.clear();
            imageResource.initValue();

            container c;
            imageResource.Height = 0;
            imageResource.Width = 0;
            imageResource.SizeInKB = 0;
            imageResource.FileName = '';
            imageResource.ResourceUrl = mediaUrl;
            imageResource.IsPartialUrl = !isAbsoluteUrl;

            if (mediaMasterEntity == RetailMediaMasterEntity::Catalog)
            {
                imageResource.IsCatalog = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Category)
            {
                imageResource.IsCategory = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Product)
            {
                imageResource.IsProduct = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Worker)
            {
                imageResource.IsWorker = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Customer)
            {
                imageResource.IsCustomer = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Color)
            {
                imageResource.IsColor = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Size)
            {
                imageResource.IsSize = NoYes::Yes;
            }
            else if (mediaMasterEntity == RetailMediaMasterEntity::Style)
            {
                imageResource.IsStyle = NoYes::Yes;
            }

            imageResource.Description = description;
            imageResource.InUse = NoYes::Yes;
            if (isAbsoluteUrl)
            {
                RetailMediaHelper::updateGalleryWithCustomerHostedImageDetails(mediaUrl, imageResource);
            }

            imageResource.insert();
        }

        return imageResource.ResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine replace the special characters exists in the filename.
    /// </summary>
    /// <param name = "fileName">The filename.</param>
    /// <returns>The updated filename.</returns>
    public static str getFileName(str fileName)
    {
        var mediaFileName = strReplace(fileName, '\\', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '/', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, ':', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '*', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '?', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '"', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '<', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '>', urlEncodeEscapeCharacter);
        mediaFileName = strReplace(mediaFileName, '|', urlEncodeEscapeCharacter);

        return mediaFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateColorMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the color, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    /// <param name = "numberOfImagesPerProduct">Number of images per product as per the image template.</param>
    public static void populateColorMediaTable(str mediaFilePath, str fileExtension, int numberOfImagesPerColor = 0)
    {
        EcoResColor colorTable;
        RetailMediaTemplate retailMediaTemplate;
        RetailTmpColorMedia colorMedia;
        RetailMediaColorRelation mediaColorRelation;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set colorIds = new Set(Types::Int64);

        ttsbegin;
        delete_from colorMedia;

        while select Name, RecId from colorTable
            outer join mediaColorRelation where mediaColorRelation.Color == colorTable.RecId
        {
            if (mediaColorRelation && mediaColorRelation.MediaResource)
            {
                retailMedia = RetailImageResource::find(mediaColorRelation.MediaResource);
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, colorTable.Name, int2Str(userEditedRecCounter));
                mediaUrl = retailMedia.ResourceUrl;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        colorTable.RecId,
                        '',
                        colorTable.Name,
                        0,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
                userEditedRecCounter++;
            }

            if (!colorIds.in(colorTable.RecId))
            {
                colorIds.add(colorTable.RecId);

                for (int counter = 1; counter <= numberOfImagesPerColor; counter++)
                {
                    mediaFileName = RetailMediaAssociationHelper::getFileName(colorTable.Name);
                    str currentIndexValue = strRFix(int2Str(counter), 3, '0'); //format the index value 1 as 001.
                    mediaFileName = mediaFileName + '.' + fileExtension;
                    mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                    RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                            colorTable.RecId,
                            '',
                            colorTable.Name,
                            counter,
                            mediaFileName,
                            mediaUrl,
                            description,
                            mediaAssociationStatus,
                            mediaAssociatedOn,
                            mediaAssociationError);

                    mediaExcelTemplateSet.add(template);
                }
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Color);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSizeMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the Size, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    /// <param name = "numberOfImagesPerProduct">Number of images per product as per the image template.</param>
    public static void populateSizeMediaTable(str mediaFilePath, str fileExtension, int numberOfImagesPerSize = 0)
    {
        EcoResSize sizeTable;
        RetailMediaTemplate retailMediaTemplate;
        RetailTmpSizeMedia sizeMedia;
        RetailMediaSizeRelation mediaSizeRelation;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set sizeIds = new Set(Types::Int64);

        ttsbegin;
        delete_from sizeMedia;

        while select Name, RecId from sizeTable
            outer join mediaSizeRelation where mediaSizeRelation.Size == sizeTable.RecId
        {
            if (mediaSizeRelation && mediaSizeRelation.MediaResource)
            {
                retailMedia = RetailImageResource::find(mediaSizeRelation.MediaResource);
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, sizeTable.Name, int2Str(userEditedRecCounter));
                mediaUrl = retailMedia.ResourceUrl;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        sizeTable.RecId,
                        '',
                        sizeTable.Name,
                        0,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
                userEditedRecCounter++;
            }

            if (!sizeIds.in(sizeTable.RecId))
            {
                sizeIds.add(sizeTable.RecId);

                for (int counter = 1; counter <= numberOfImagesPerSize; counter++)
                {
                    mediaFileName = RetailMediaAssociationHelper::getFileName(sizeTable.Name);
                    str currentIndexValue = strRFix(int2Str(counter), 3, '0'); //format the index value 1 as 001.
                    
                    mediaFileName = mediaFileName + '.' + fileExtension;
                    mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                    RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                            sizeTable.RecId,
                            '',
                            sizeTable.Name,
                            counter,
                            mediaFileName,
                            mediaUrl,
                            description,
                            mediaAssociationStatus,
                            mediaAssociatedOn,
                            mediaAssociationError);

                    mediaExcelTemplateSet.add(template);
                }
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Size);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStyleMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media details for the style, these records works as the input for the data to be exported to Excel and the bulk association process.
    /// </summary>
    /// <param name = "mediaFilePath">The folder path of the customer media files.</param>
    /// <param name = "fileExtension">The media file extension.</param>
    /// <param name = "numberOfImagesPerProduct">Number of images per product as per the image template.</param>
    public static void populateStyleMediaTable(str mediaFilePath, str fileExtension, int numberOfImagesPerStyle = 0)
    {
        EcoResStyle styleTable;
        RetailMediaTemplate retailMediaTemplate;
        RetailTmpStyleMedia styleMedia;
        RetailMediaStyleRelation mediaStyleRelation;
        RetailImageResource retailMedia;
        int userEditedRecCounter = 1;
        Set mediaExcelTemplateSet = new Set(Types::Class);
        int mediaIndex = 0;
        str description = '';
        RetailMediaAssociationStatus mediaAssociationStatus;
        date mediaAssociatedOn;
        str mediaAssociationError;
        str mediaFileName;
        str mediaUrl;
        Set styleIds = new Set(Types::Int64);

        ttsbegin;
        delete_from styleMedia;

        while select Name, RecId from styleTable
            outer join mediaStyleRelation where mediaStyleRelation.Style == styleTable.RecId
        {
            if (mediaStyleRelation && mediaStyleRelation.MediaResource)
            {
                retailMedia = RetailImageResource::find(mediaStyleRelation.MediaResource);
                mediaFileName = strFmt("%1_%2_%3", userDefinedImage, styleTable.Name, int2Str(userEditedRecCounter));
                mediaUrl = retailMedia.ResourceUrl;

                RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                        styleTable.RecId,
                        '',
                        styleTable.Name,
                        0,
                        mediaFileName,
                        mediaUrl,
                        description,
                        mediaAssociationStatus,
                        mediaAssociatedOn,
                        mediaAssociationError);

                mediaExcelTemplateSet.add(template);
                userEditedRecCounter++;
            }

            if (!styleIds.in(styleTable.RecId))
            {
                styleIds.add(styleTable.RecId);

                for (int counter = 1; counter <= numberOfImagesPerStyle; counter++)
                {
                    mediaFileName = RetailMediaAssociationHelper::getFileName(styleTable.Name);
                    str currentIndexValue = strRFix(int2Str(counter), 3, '0'); //format the index value 1 as 001.
                    
                    mediaFileName = mediaFileName + '.' + fileExtension;
                    mediaUrl = RetailMediaAssociationHelper::getMediaUrl(mediaFilePath, mediaFileName);

                    RetailImageExcelTemplate template = new RetailImageExcelTemplate(
                            styleTable.RecId,
                            '',
                            styleTable.Name,
                            counter,
                            mediaFileName,
                            mediaUrl,
                            description,
                            mediaAssociationStatus,
                            mediaAssociatedOn,
                            mediaAssociationError);

                    mediaExcelTemplateSet.add(template);
                }
            }
        }

        RetailMediaAssociationHelper::populateMediaAssociationTable(mediaExcelTemplateSet, RetailMediaMasterEntity::Style);
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>