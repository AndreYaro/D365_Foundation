<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementViewFileExportBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementViewFileExportBase</c> class manages shared functionality to export settlement views to file.
/// </summary>
public class SettlementViewFileExportBase
{
    protected static const System.String delimiter = ',';

    internal protected Delimiter columnDelimiterString;

    private System.Globalization.NumberFormatInfo numberFormatInfo;
    private System.Globalization.DateTimeFormatInfo dateTimeFormatInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exportSettlementViewToCSV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Export the contents of a settlement view to CSV file.
    /// </summary>
    /// <param name = "_common">The settlement view.</param>
    protected void exportSettlementViewToCSV(Common _common)
    {
        System.IO.Stream memoryStream;
        System.IO.StreamWriter streamWriter;

        str fileName = this.createFileName();

        try
        {
            this.initCultureInfo();
            this.initCSVConfiguration();

            memoryStream = new System.IO.MemoryStream();
            streamWriter = new System.IO.StreamWriter(memoryStream, new System.Text.UTF8Encoding(true)); // for extended character sets encoding bom must be specified

            this.writeView(streamWriter, _common);

            streamWriter.Flush();
            memoryStream.Seek(0, System.IO.SeekOrigin::Begin);

            DocuFileSave::saveFileAs(memoryStream, fileName);
        }
        catch
        {
            throw error(strFmt("@DataExpTool:ErrMsg_FileExportFailed_1", fileName));
        }
        finally
        {
            streamWriter.Dispose();
            memoryStream.Dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the view to file.
    /// </summary>
    /// <param name = "_streamWriter">The file stream writer.</param>
    /// <param name = "_common">The view buffer.</param>
    protected void writeView(System.IO.StreamWriter _streamWriter, Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an <c>AmountCur</c> value to a locale-appropriate string representation.
    /// </summary>
    /// <param name = "_amountCur">The <c>AmountCur</c> value to convert to a locale string.</param>
    /// <returns>The string representation of the amount.</returns>
    /// <remarks>
    /// Decimal precision correlates to the decimal precision on the <c>AmountCur</c> EDT definition.
    /// </remarks>
    internal protected str amountCurToString(AmountCur _amountCur)
    {
        return System.String::Format(numberFormatInfo, '"{0:N}"', _amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>TransDate</c> value to a locale-appropriate date string representation.
    /// </summary>
    /// <param name = "_transDate">The <c>TransDate</c> value to convert to a locale string.</param>
    /// <returns>The string representation of the date.</returns>
    internal protected str transDateToString(TransDate _transDate)
    {
        str dateStr;

        if (_transDate)
        {
            new InteropPermission(InteropKind::ClrInterop).assert();
            System.DateTime dateTime = _transDate;

            dateStr = dateTime.ToString('d', dateTimeFormatInfo);
        }

        return dateStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualifyText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Qualifies text values by encapsulating them within a set of escape characters for the CSV format.
    /// </summary>
    /// <param name = "_textValue">The text value to qualify.</param>
    /// <returns>The qualified text value.</returns>
    internal protected str qualifyText(str _textValue)
    {
        str qualifiedValue;

        if (_textValue)
        {
            qualifiedValue = strFmt('"%1"', _textValue);
        }

        return qualifiedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCultureInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the localization information for export.
    /// </summary>
    internal protected void initCultureInfo()
    {
        System.Globalization.CultureInfo cultureInfo = System.Globalization.CultureInfo::CreateSpecificCulture(xUserInfo::find().PreferredLocale);

        numberFormatInfo = cultureInfo.NumberFormat;
        numberFormatInfo.NumberDecimalDigits = new SysDictType(extendedTypeNum(AmountCur)).effectivePrecision();

        dateTimeFormatInfo = cultureInfo.get_DateTimeFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCSVConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the CSV configuration for the export file.
    /// </summary>
    internal protected void initCSVConfiguration()
    {
        DMFDataSourceProperties dataSourceProperties = this.getCSVDataSourceProperities();

        this.setColumnDelimiterFromDataSourceProperties(dataSourceProperties);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCSVDataSourceProperities</Name>
				<Source><![CDATA[
    private DMFDataSourceProperties getCSVDataSourceProperities()
    {
        const str SourceFormatName = 'CSV';

        DMFDataSourceProperties dataSourceProperties;

        select firstonly dataSourceProperties
            where dataSourceProperties.Source == SourceFormatName;

        return dataSourceProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setColumnDelimiterFromDataSourceProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the CSV file format column delimiter based on DMF source format configuration.
    /// </summary>
    /// <param name = "_dataSourceProperties">The data source properties.</param>
    /// <remarks>
    /// If the DMF source format for CSV does not exist, then the default value is a comma.
    /// </remarks>
    private void setColumnDelimiterFromDataSourceProperties(DMFDataSourceProperties _dataSourceProperties)
    {
        columnDelimiterString = delimiter;

        if (_dataSourceProperties)
        {
            columnDelimiterString = DMFDataSourceProperties::delimiter(_dataSourceProperties.FileColumnDelimiter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileName</Name>
				<Source><![CDATA[
    private str createFileName()
    {
        str todayStr = date2Str(
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
            -1,
            DateDay::Digits2,
            DateSeparator::Hyphen,
            DateMonth::Digits2,
            DateSeparator::Hyphen,
            DateYear::Digits4,
            DateFlags::FormatAll);

        return strFmt("@SYS309930", "@CashManagement:ViewSettlement", todayStr) + '.csv';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>