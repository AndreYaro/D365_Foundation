<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBCIAPAssetTransCreateFromFiscalDoc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBCIAPAssetTransCreateFromFiscalDoc_BR</c> class is used to manage a temporary table with
/// information about existent invoices, where is possible to select some of them.
/// </summary>
public class FBCIAPAssetTransCreateFromFiscalDoc_BR extends RunBase
{
    Object                              callerForm;
    tableId                             sourceTableId;
    recId                               sourceRecId;
    TmpFBCIAPAssetTrans_FiscalDoc_BR    tmpRecord;
    FBCIAPAssetTrans_BR                 ciapAssetTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFromInvoiceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new record in the <c>TmpFiscalReference_BR</c> table initialized from a given map.
    /// </summary>
    /// <param name="_invoicesReferencedMap">
    /// The map to be used for initialization of the record.
    /// </param>
    /// <param name="_fiscalDocumentLine">
    /// Fiscal document line used for initialization of the record.
    /// </param>
    public void addFromInvoiceMap(FiscalDocument_BR _invoicesReferencedMap, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        FBCIAPAssetTrans_FiscalDoc_BR ciapAssetTransFiscalDoc;

        ciapAssetTransFiscalDoc.FBCIAPAssetTrans_BR     = ciapAssetTrans.RecId;
        ciapAssetTransFiscalDoc.FBCIAPAssetTable_BR     = ciapAssetTrans.FBCIAPAssetTable_BR;
        ciapAssetTransFiscalDoc.FiscalDocument_BR       = _invoicesReferencedMap.RecId;
        ciapAssetTransFiscalDoc.FiscalDocumentLine_BR   = _fiscalDocumentLine.RecId;
        ciapAssetTransFiscalDoc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the interface
    /// </summary>
    /// <returns>
    /// Returns the interface
    /// </returns>
    public Object  dialog()
    {
        Args            parameters = new Args();
        FormRun         fiscalReferenceCreateFromInvoices_BR;

        parameters.name(formStr(FBCIAPAssetTransCreateFromFiscalDoc_BR));
        parameters.caller(this);
        fiscalReferenceCreateFromInvoices_BR = classfactory.formRunClass(parameters);

        return fiscalReferenceCreateFromInvoices_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal establishment from the caller form.
    /// </summary>
    /// <returns>
    /// The <c>FiscalEstablishment_BR</c> table record; otherwise, null.
    /// </returns>
    public FiscalEstablishment_BR getFiscalEstablishment()
    {
        return callerForm.getFiscalEstablishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecIdsAlreadySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RecIds of the fiscal documents already referenced.
    /// </summary>
    /// <returns>String with the recIds to be passed to QueryBuildRange.value method.</returns>
    public str getRecIdsAlreadySelected()
    {
        str recidsAlreadySelected;

        while select tmpRecord
            where tmpRecord.RefTableId == tableNum(FiscalDocument_BR)
        {
            if (recidsAlreadySelected)
            {
                recidsAlreadySelected += ',';
            }
            recidsAlreadySelected += '!' + int642str(tmpRecord.RefRecId);
        }
        return recidsAlreadySelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    public Object parmCallerForm(Object _callerForm = callerForm)
    {
        callerForm = _callerForm;

        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCiapAssetTrans</Name>
				<Source><![CDATA[
    public FBCIAPAssetTrans_BR parmCiapAssetTrans(FBCIAPAssetTrans_BR _ciapAssetTrans = ciapAssetTrans)
    {
        ciapAssetTrans = _ciapAssetTrans;

        return ciapAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/define the original Record ID
    /// </summary>
    /// <param name= "_sourceRecId">
    /// Record identifier
    /// </param>
    /// <returns>
    /// Returns the rec ID
    /// </returns>
    public recId parmSourceRecId(recId _sourceRecId = sourceRecId)
    {
        sourceRecId = _sourceRecId;
        return  sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/define the original Table ID
    /// </summary>
    /// <param name = "_sourcetableId">
    /// Table identifier
    /// </param>
    /// <returns>
    /// Returns the table ID
    /// </returns>
    public tableId parmSourceTableId(tableId _sourcetableId = sourcetableId)
    {
        sourcetableId = _sourcetableId;
        return  sourcetableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpRecord</Name>
				<Source><![CDATA[
    public TmpFBCIAPAssetTrans_FiscalDoc_BR parmTmpRecord(TmpFBCIAPAssetTrans_FiscalDoc_BR _tmpRecord = tmpRecord)
    {
        tmpRecord = _tmpRecord;

        return tmpRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define the unpacking
    /// </summary>
    /// <param name = "packedClass">
    /// Collection that contains the packed objects
    /// </param>
    /// <returns>
    /// Returns true/false for unpacking
    /// </returns>
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateICMSValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ICMS fields on <c>FBCIAPAssetTrans_BR</c> table.
    /// </summary>
    public void updateICMSValues()
    {
        FBCIAPAssetTrans_FiscalDoc_BR ciapAssetTransFiscalDoc;
        FiscalDocument_BR             fiscalDocument;
        FiscalDocumentLine_BR         fiscalDocumentLine;

        TaxAmount                           icmsAmount;
        TaxAmount                           icmsSTAmount;
        TaxAmount                           icmsDiffAmount;

        while select FiscalDocument_BR, FiscalDocumentLine_BR from ciapAssetTransFiscalDoc
            where ciapAssetTransFiscalDoc.FBCIAPAssetTable_BR == ciapAssetTrans.FBCIAPAssetTable_BR
                join fiscalDocument
                    where fiscalDocument.RecId == ciapAssetTransFiscalDoc.FiscalDocument_BR
                    join fiscalDocumentLine
                        where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                            && fiscalDocumentLine.RecId == ciapAssetTransFiscalDoc.FiscalDocumentLine_BR
        {
            icmsAmount      += FBFiscalDocumentTaxSummarizer_BR::construct(fiscalDocument).getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMS).parmTaxAmountOther();
            icmsSTAmount    += FBFiscalDocumentTaxSummarizer_BR::construct(fiscalDocument).getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMSST).parmTaxAmountOther();
            icmsDiffAmount  += FBFiscalDocumentTaxSummarizer_BR::construct(fiscalDocument).getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMSDiff).parmTaxAmountOther();
        }

        ciapAssetTrans.ICMSAmount       = icmsAmount        ? icmsAmount        : ciapAssetTrans.ICMSAmount;
        ciapAssetTrans.ICMSSTAmount     = icmsSTAmount      ? icmsSTAmount      : ciapAssetTrans.ICMSSTAmount;
        ciapAssetTrans.ICMSDiffAmount   = icmsDiffAmount    ? icmsDiffAmount    : ciapAssetTrans.ICMSDiffAmount;

        if (ciapAssetTrans.ICMSDiffAmount)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10021, funcName());
        }
        if (ciapAssetTrans.ICMSSTAmount)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10003, funcName());
        }
        if (ciapAssetTrans.ICMSAmount)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10001, funcName());
        }

        ciapAssetTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets basic information in order to start the class.
    /// </summary>
    /// <param name= "args">
    /// Args
    /// </param>
    static void main(Args args)
    {
        TmpFBCIAPAssetTrans_FiscalDoc_BR            tmpFBCIAPAssetTransFiscalDoc;
        Object                                      callerFormDataSource;
        FBCIAPAssetTransCreateFromFiscalDoc_BR      ciapAssetTransCreateFromFiscalDocCreator;

        Object                                      callerForm;

        FiscalEstablishment_BR                      fiscalEstablishment;

        callerForm    = args.caller();

        tmpFBCIAPAssetTransFiscalDoc = args.record();
        callerFormDataSource = FormDataUtil::getFormDataSource(tmpFBCIAPAssetTransFiscalDoc);

        ciapAssetTransCreateFromFiscalDocCreator = new FBCIAPAssetTransCreateFromFiscalDoc_BR();
        ciapAssetTransCreateFromFiscalDocCreator.parmCallerForm(callerForm);
        ciapAssetTransCreateFromFiscalDocCreator.parmCiapAssetTrans(callerFormDataSource.ciapAssetTrans());

        fiscalEstablishment = callerForm.getFiscalEstablishment();

        changeCompany(fiscalEstablishment.dataAreaId)
        {
            if (ciapAssetTransCreateFromFiscalDocCreator.prompt())
            {
                ciapAssetTransCreateFromFiscalDocCreator.runOperation();
            }
        }

        callerFormDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>