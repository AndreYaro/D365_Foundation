<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTrackingDimensionGroupEntityClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Provides logic for the <c>EcoResTrackingDimensionGroupEntity</c> data entity.
/// </summary>
class EcoResTrackingDimensionGroupEntityClass
{
    private static EcoResTrackingDimensionGroupEntityClass singletonInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a singleton instance of <c>EcoResTrackingDimensionGroupEntityClass</c>.
    /// </summary>
    /// <returns>
    ///     An instance of <c>EcoResTrackingDimensionGroupEntityClass</c>.
    /// </returns>
    public static EcoResTrackingDimensionGroupEntityClass construct()
    {
        if(!singletonInstance)
        {
            singletonInstance = new EcoResTrackingDimensionGroupEntityClass();
        }

        return singletonInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceDimensionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the dimension field id for the given data source.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     The data source context.
    /// </param>
    /// <returns>
    ///     The dimension field id.
    /// </returns>
    public FieldId dataSourceDimensionFieldId(
        DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_Batch):
                return fieldNum(InventDim, InventBatchId);
            case dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_Serial):
                return fieldNum(InventDim, InventSerialId);
            case dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_InventoryOwner):
                return fieldNum(InventDim, InventOwnerId_RU);
            case dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_InventoryProfile):
                return fieldNum(InventDim, InventProfileId_RU);
            case dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_InventoryGTD):
                return fieldNum(InventDim, InventGtdId_RU);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFieldSetupDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes the field setup for the given <c>_entity</c>.
    /// </summary>
    /// <param name = "_entity">
    ///     The entity to refresh.
    /// </param>
    /// <param name = "_entityCtx">
    ///     The data entity context.
    /// </param>
    public void refreshFieldSetupDataSources(
        EcoResTrackingDimensionGroupEntity _entity,
        DataEntityRuntimeContext _entityCtx)
    {
        this.refreshDataSourceBuffer(_entity, _entityCtx, _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_Serial)));
        this.refreshDataSourceBuffer(_entity, _entityCtx, _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_Batch)));
        this.refreshDataSourceBuffer(_entity, _entityCtx, _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_InventoryOwner)));
        this.refreshDataSourceBuffer(_entity, _entityCtx, _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_InventoryProfile)));
        this.refreshDataSourceBuffer(_entity, _entityCtx, _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResTrackingDimensionGroupEntity, EcoResTrackingDimensionGroupFldSetup_InventoryGTD)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSourceBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes the data source buffer for the given <c>_entity</c>.
    /// </summary>
    /// <param name = "_entity">
    ///     The entity to refresh.
    /// </param>
    /// <param name = "_entityCtx">
    ///     The data entity context.
    /// </param>
    /// <param name = "_dataSourceCtx">
    ///     The data source context.
    /// </param>
    public void refreshDataSourceBuffer(
        EcoResTrackingDimensionGroupEntity _entity,
        DataEntityRuntimeContext _entityCtx, 
        DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        FieldId fieldId = this.dataSourceDimensionFieldId(_dataSourceCtx);
        EcoResTrackingDimensionGroupFldSetup fieldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(_entity.RecId, fieldId, true);

        Debug::assert(fieldSetup.RecId != 0);

        _dataSourceCtx.setBuffer(fieldSetup);
        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
        _entity.fromViewDataSource(_dataSourceCtx.id(), _dataSourceCtx.getBuffer());
        _entity.mapEntityToDataSource(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>