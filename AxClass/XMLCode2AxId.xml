<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlCode2AxId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>XMLCode2AxId</c> class is used to convert an internal value, which has been converted in the
///    sending company, to an actual value (such as currency code) in the receiving company.
/// </summary>
/// <remarks>
///    This class is used in the second conversion call of the <see cref="T:TradeInterCompanyConv" />.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class XmlCode2AxId
{
    anytype             primaryKey;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axId</Name>
				<Source><![CDATA[
    anytype axId()
    {
        return primaryKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAxId</Name>
				<Source><![CDATA[
    private void findAxId(XMLMapCode        _xmlMapCode,
                          tableId           _tableId,
                          ExtCodeSubModule  _extCodeSubModule,
                          str               _xmlCode,
                          ExtCodeId         _extCodeId,
                          anytype           _foreignKey)
    {
        switch (_xmlMapCode)
        {
            case XMLMapCode::NotSpecified:
                primaryKey = '';
                break;

            case XMLMapCode::Our:
                switch (_tableId)
                {
                    case tablenum(LogisticsAddressCounty):
                        primaryKey = ExtCodeTable::findRelationPrimaryKey2PrimaryKey(_tableId, [conpeek(_foreignKey, 1), conpeek(_foreignKey, 2),_xmlCode]);
                        break;

                    case tablenum(LogisticsAddressState):
                    case tablenum(MarkupTable):
                        primaryKey = ExtCodeTable::findRelationPrimaryKey2PrimaryKey(_tableId, [_foreignKey, _xmlCode]);
                        break;

                    default:
                        primaryKey = ExtCodeTable::findRelationPrimaryKey2PrimaryKey(_tableId, _xmlCode);
                }
                break;

            case XMLMapCode::ExternalCode:
                primaryKey  = ExtCodeTable::findValueAlias2RelationPrimaryKey(_tableId, _extCodeSubModule, _xmlCode, _extCodeId);
                break;
            case XMLMapCode::Your:
                primaryKey  = ExtCodeTable::findRelationYourKey2PrimaryKey(_tableId, _foreignKey, _xmlCode);
                break;
            case XMLMapCode::ISOCode:
                primaryKey  = ExtCodeTable::findRelationISOCode2PrimaryKey(_tableId, _xmlCode);
                break;
            case XMLMapCode::ExternalItemId:
                primaryKey  = ExtCodeTable::findRelationExternalItemId2PrimaryKey(_tableId, _xmlCode, _foreignKey);
                break;
            case XMLMapCode::BarCode:
                primaryKey  = ExtCodeTable::findRelationBarCode2PrimaryKey(_tableId, _xmlCode, _foreignKey);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(XMLMapCode _xmlMapCode, tableId _tableId, ExtCodeSubModule _extCodeSubModule, str _xmlCode, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        this.findAxId          (_xmlMapCode, _tableId, _extCodeSubModule, _xmlCode, _extCodeId, _foreignKey);
        this.validatePrimaryKey(_xmlMapCode, _tableId, _extCodeSubModule, _xmlCode, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrimaryKey</Name>
				<Source><![CDATA[
    private void validatePrimaryKey(XMLMapCode          _xmlMapCode,
                                    tableId             _tableId,
                                    ExtCodeSubModule    _extCodeSubModule,
                                    str                 _xmlCode,
                                    ExtCodeId           _extCodeId,
                                    anytype             _foreignKey)
    {
        if (!primaryKey)
        {
            switch (_xmlMapCode)
            {
                case XMLMapCode::NotSpecified:
                    throw error("@SYS72881");

                case XMLMapCode::Our:
                    switch (_tableId)
                    {
                        case tablenum(LogisticsAddressCounty):
                            throw error(ExtCodeTable::primaryKey2PrimaryKeyNotExists(_tableId, [conpeek(_foreignKey, 1), conpeek(_foreignKey, 2),_xmlCode]));

                        case tablenum(LogisticsAddressState):
                            throw error(ExtCodeTable::primaryKey2PrimaryKeyNotExists(_tableId, [_foreignKey, _xmlCode]));

                        default:
                            throw error(ExtCodeTable::primaryKey2PrimaryKeyNotExists(_tableId, _xmlCode));
                    }

                case XMLMapCode::ExternalCode:
                    throw error(ExtCodeTable::valueAlias2PrimaryKeyNotExists(_tableId, _xmlCode, _extCodeId));

                case XMLMapCode::Your:
                    throw error(ExtCodeTable::yourKey2PrimaryKeyNotExists(_tableId, _foreignKey, _xmlCode));

                case XMLMapCode::ISOCode:
                    throw error(ExtCodeTable::isoCode2PrimaryKeyNotExists(_tableId, _xmlCode));

                case XMLMapCode::ExternalItemId:
                    throw error(ExtCodeTable::externalItemId2PrimaryKeyNotExists(_tableId, _xmlCode, _foreignKey));

                case XMLMapCode::BarCode:
                    throw error(ExtCodeTable::barCode2PrimaryKeyNotExists(_tableId, _xmlCode, _foreignKey));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXMLMapCurrencyCode</Name>
				<Source><![CDATA[
    static XMLCode2AxId newXMLMapCurrencyCode(XMLMapCurrencyCode _xmlMapCurrencyCode,  tableId _tableId, ExtCodeSubModule _extCodeSubModule, str _xmlCode, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        return new XMLCode2AxId(XMLMap::xmlMapCurrencyCode2Code(_xmlMapCurrencyCode), _tableId, _extCodeSubModule, _xmlCode, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXMLMapExternalCode</Name>
				<Source><![CDATA[
    static XMLCode2AxId newXMLMapExternalCode(XMLMapExternalCode _xmlMapExternalCode, tableId _tableId, ExtCodeSubModule _extCodeSubModule, str _xmlCode, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        return new XMLCode2AxId(XMLMap::xmlMapExternalCode2Code(_xmlMapExternalCode), _tableId, _extCodeSubModule, _xmlCode, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXMLMapItemId</Name>
				<Source><![CDATA[
    static XMLCode2AxId newXMLMapItemId(XMLMapItemId _xmlMapItemId, tableId _tableId, ExtCodeSubModule _extCodeSubModule, str _xmlCode, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        return new XMLCode2AxId(XMLMap::xmlMapItemId2Code(_xmlMapItemId), _tableId, _extCodeSubModule, _xmlCode, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>