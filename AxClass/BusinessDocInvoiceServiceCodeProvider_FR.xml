<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocInvoiceServiceCodeProvider_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles service codes lookup for Chorus Pro integration.
/// </summary>
internal final class BusinessDocInvoiceServiceCodeProvider_FR
{
    private BusinessDocChorusProISiretProvider siretProvider;
    private str errorMessagesPrefix;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BusinessDocInvoiceServiceCodeProvider_FR construct(BusinessDocChorusProISiretProvider _siretProvider, str _errorMessagesPrefix)
    {
        var ret = new BusinessDocInvoiceServiceCodeProvider_FR();
        ret.siretProvider = _siretProvider;
        ret.errorMessagesPrefix = _errorMessagesPrefix;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceCodesLookupEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler for a lookup component displaying a list of service codes retrieved from Chorus Pro portal.
    /// </summary>
    /// <param name = "_sender">A sender form control.</param>
    /// <param name = "_e">Arguments.</param>
    public void serviceCodesLookupEventHandler(FormControl _sender, FormControlEventArgs _e)
    {
        setPrefix(errorMessagesPrefix);

        str siret = siretProvider.getSiret();
        if (!siret)
        {
            throw error("@BusinessDocumentSubmissionService:SiretNotSetForCustAccount");
        }

        BusinessDocChorusProServiceClient_FR serviceClient = BusinessDocChorusProServiceClient_FR::construct();
        serviceClient.refreshServiceCodes(siret);

        var siretCacheTable = BusinessDocChorusProSiretCacheTable_FR::findBySiret(siret);
        Query lookupQuery = new Query();
        QueryBuildDataSource serviceCodesQbds = lookupQuery.addDataSource(tableNum(BusinessDocChorusProServiceCodeTable_FR));
        serviceCodesQbds.addRange(fieldNum(BusinessDocChorusProServiceCodeTable_FR, SiretRefRecId)).value(queryValue(siretCacheTable.RecId));
        serviceCodesQbds.addRange(fieldNum(BusinessDocChorusProServiceCodeTable_FR, Active)).value(queryValue(NoYes::Yes));
        serviceCodesQbds.addRange(fieldNum(BusinessDocChorusProServiceCodeTable_FR, IsDeleted)).value(queryValue(NoYes::No));
        serviceCodesQbds.addSortField(fieldNum(BusinessDocChorusProServiceCodeTable_FR, ServiceCode), SortOrder::Ascending);
        
        var lookup = SysReferenceTableLookup::newParameters(tableNum(BusinessDocChorusProServiceCodeTable_FR), _sender);
        lookup.addLookupfield(fieldNum(BusinessDocChorusProServiceCodeTable_FR, ServiceCode));
        lookup.addLookupfield(fieldNum(BusinessDocChorusProServiceCodeTable_FR, ServiceLabel));
        lookup.parmQuery(lookupQuery);
        
        lookup.performFormLookup();

        FormControlCancelableSuperEventArgs cancelableArgs = _e as FormControlCancelableSuperEventArgs;
        cancelableArgs.CancelSuperCall();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>