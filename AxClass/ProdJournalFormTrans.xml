<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalFormTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class ProdJournalFormTrans extends JournalFormTrans
{
    InventDimCtrl_Frm_Mov       inventDimFormSetup;

    InventDim                   inventDim;
    FormDataSource              inventDim_ds;

    FormStringControl           ctrlProdIdGrid;
    boolean                     countryRegion_RU;
    FormFunctionButtonControl   ctrlReleaseCreate_RU;

    JournalFormTable            journalFormTableCaller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    public void datasourceLinkActivePre()
    {
        super();

        if (this.isJournalForSingleProdTable())
        {
            this.hideProdTableFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodLineLogImage</Name>
				<Source><![CDATA[
    container datasourceMethodLineLogImage(JournalTransMap _journalTrans)
    {
        if (!journalFormTable || !journalTableData)
        {
            this.initJournalFormTable();
        }

        return super(_journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProdIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProdIdPost()
    {
        if (journalTableData.journalVoucherNum())
        {
            if (journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
                journalTransData.initVoucher(journalTrans_last.Voucher,true);
            else
                journalTrans.Voucher = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        if (this.isJournalForSingleProdTable())
        {
            this.hideProdTableFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideProdTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Hides the fields of the production order on the form.
    /// </summary>
    protected void hideProdTableFields()
    {
        if (ctrlProdIdGrid)
        {
            ctrlProdIdGrid.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimInitPost</Name>
				<Source><![CDATA[
    void inventDimInitPost(InventDim _inventDim)
    {
        inventDim       = _inventDim;
        inventDim_ds    = FormDataUtil::getFormDataSource(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    InventDimCtrl_Frm_Mov inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    abstract InventMovement inventMovement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalForSingleProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the journal is for the single production order.
    /// </summary>
    /// <returns>
    ///    true if the journal is for the single production order; otherwise, false.
    /// </returns>
    protected boolean isJournalForSingleProdTable()
    {
        boolean             isForSingleProdTable = false;

        if (journalTableData)
        {
            ProdJournalTable prodJournalTable = journalTableData.journalTable();
            if (prodJournalTable.ProdId)
            {
                isForSingleProdTable = true;
            }
        }

        return isForSingleProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        super(_formRun);
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        // Need to keep the original caller class since journalFormTable may be overwritten later on the form
        journalFormTableCaller = journalFormTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    public void formClosePre()
    {
        super();

        if (journalFormTableCaller && journalFormTableCaller != journalFormTable)
        {
            // Do the same to journalFormTableCaller as is done to the journalFormTable in super()
            journalFormTableCaller.formRunLines(null);
            if (journalTableData)
            {
                journalFormTableCaller.updateFormCacheCurrent(journalTableData.journalTable(),true);
                journalFormTableCaller.datasourceActivePre();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProdIdGrid</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlProdIdGrid(FormStringControl _ctrlProdIdGrid = ctrlProdIdGrid)
    {
        ctrlProdIdGrid = _ctrlProdIdGrid;
        return ctrlProdIdGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReleaseCreate_RU</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlReleaseCreate_RU(FormFunctionButtonControl _ctrlReleaseCreate_RU = ctrlReleaseCreate_RU)
    {
        ctrlReleaseCreate_RU = _ctrlReleaseCreate_RU;
        return ctrlReleaseCreate_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate mode)
    {
        InventMovement movement = this.inventMovement();

        if (!movement)
            return;

        switch (mode)
        {
            case InventDimFormDesignUpdate::Init          :
                this.updateDesignInit(movement);

            case InventDimFormDesignUpdate::Active        :
                this.updateDesignActive(movement);
                break;

            case InventDimFormDesignUpdate::FieldChange   :
                this.updateDesignFieldChange(movement);
                break;

            default : throw error(strfmt("@SYS54195",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignActive</Name>
				<Source><![CDATA[
    protected void updateDesignActive(InventMovement _movement)
    {
        inventDimFormSetup.formActiveSetup(_movement.inventDimGroupSetup(),_movement);
        inventDimFormSetup.formSetControls(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignFieldChange</Name>
				<Source><![CDATA[
    protected void updateDesignFieldChange(InventMovement _movement)
    {
        inventDimFormSetup.formActiveSetup(_movement.inventDimGroupSetup(),_movement);
        inventDimFormSetup.formSetControls(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignInit</Name>
				<Source><![CDATA[
    protected void updateDesignInit(InventMovement _movement)
    {
        if (!inventDimFormSetup)
            inventDimFormSetup  = InventDimCtrl_Frm_Mov::newFromFormMovement(formRun,_movement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
