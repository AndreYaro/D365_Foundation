<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The factory class of the taxable document descriptors.
/// </summary>
public class TaxableDocumentDescriptorFactory
{
    Common      transactionTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the class id of determine taxable document descriptor by table id.
    /// </summary>
    /// <param name = "_transactionTable">The transaction table.</param>
    /// <returns>descriptor class id</returns>
    public ClassId determineTaxableDocumentDescriptor(Common _transactionTable)
    {
        ClassId ret = 0;

        CustInvoiceJour                     custInvoiceJour;
        InventTransferJour                  inventTransferJour;
        InventQualityOrderTable             inventQualityOrderTable;
        LedgerJournalTrans                  ledgerJournalTrans;
        TaxEngineQualityOrderTableHeader    taxEngineQualityOrderTableHeader;

        switch (_transactionTable.TableId)
        {
            //Purchase order
            case(tableNum(PurchTable)):
                ret = Classnum(TaxableDocumentDescriptorPurchaseOrder);
                break;

            //Purchase order journal
            case(tableNum(VendPurchOrderJour)):
                ret = Classnum(TaxableDocumentDescriptorPurchaseOrder);
                break;

            //purchase Packing slip, product receipt
            case(tableNum(PurchParmTable)):
                ret = classNum(TaxableDocumentDescriptorPurchaseOrderParm);
                break;

            //Vending Receipt list journal
            case(tableNum(VendReceiptsListJour)):
                ret = classNum(TaxableDocumentDescriptorPurchaseOrderParm);
                break;

            //Vending packing slip journal
            case(tableNum(VendPackingSlipJour)):
                ret = classNum(TaxableDocumentDescriptorPurchaseOrderParm);
                break;

            //vendor invoice
            case(tableNum(VendInvoiceInfoTable)):
                ret = classNum(TaxableDocumentDescriptorPurchaseInvoice);
                break;

            //vendor invoice journal
            case(tableNum(VendInvoiceJour)):
                ret = classNum(TaxableDocumentDescriptorPurchaseInvoice);
                break;

            //Purchase requisition
            case(tableNum(PurchReqLine)):
            case(tableNum(PurchReqTable)):
            case(tableNum(TaxEnginePurchReqHeader)):
                ret = classNum(TaxableDocumentDescriptorPurchaseRequisition);
                break;

            //Purchase RFQ
            case(tableNum(PurchRFQTable)):
                ret = classNum(TaxableDocumentDescriptorPurchaseRFQ);
                break;

            //Purchase RFQ parm and case
            case(tableNum(PurchRFQParmTable)):
            case(tableNum(PurchRFQCaseTable)):
                ret = classNum(TaxableDocumentDescriptorPurchaseRFQParm);
                break;

            //Purchase RFQ reply
            case(tableNum(PurchRFQReplyTable)):
                ret = classNum(TaxableDocumentDescriptorPurchaseRFQReply);
                break;

            //Purchase RFQ accept journal
            case(tableNum(VendRFQJour)):
                ret = Classnum(TaxableDocumentDescriptorPurchaseRFQParm);
                break;

            //sales order
            case(tableNum(SalesTable)):
                ret = Classnum(TaxableDocumentDescriptorSalesOrder);
                break;

            //Sales order journal
            case(tableNum(CustConfirmJour)):
                ret = Classnum(TaxableDocumentDescriptorSalesOrder);
                break;

            //sales picking slip, sales packing slip
            case(tableNum(SalesParmTable)):
                ret = Classnum(TaxableDocumentDescriptorSalesOrderParm);
                break;

            //Cust packing list journal
            case(tableNum(WMSPickingRoute)):
                ret = classNum(TaxableDocumentDescriptorSalesOrderParm);
                break;

            //Cust packing slip journal
            case(tableNum(CustPackingSlipJour)):
                ret = classNum(TaxableDocumentDescriptorSalesOrderParm);
                break;

            //sales invoice journal and free text invoice journal
            case(tableNum(CustInvoiceJour)):
                custInvoiceJour = _transactionTable as CustInvoiceJour;
                if(custInvoiceJour.salesTable())
                {
                    ret = Classnum(TaxableDocumentDescriptorSalesOrderParm);
                }
                else
                {
                    ret = classNum(TaxableDocumentDescriptorCustInvoice);
                }
                break;

            //Free text invoice
            case(tableNum(CustInvoiceTable)):
                ret = Classnum(TaxableDocumentDescriptorCustInvoice);
                break;

            //Sales quotation
            case(tableNum(SalesQuotationTable)):
                ret = Classnum(TaxableDocumentDescriptorSalesQuotation);
                break;

            // Sales quotation send and confirm
            case(tableNum(SalesQuotationParmTable)):
                ret = classNum(TaxableDocumentDescriptorSalesQuotationParm);
                break;

            //Tax journal
            case(tableNum(TaxEngineTaxJournal)):
            case(tableNum(LedgerJournalTable)):
                ret = classNum(TaxableDocumentDescriptorTaxJournal);
                break;

            //Journal
            case(tableNum(LedgerJournalTrans)):
                ledgerJournalTrans = _transactionTable as LedgerJournalTrans;
                if (TaxEngineTaxJournalUtil::isLedgerJournalTableCreatedFromTaxJournal(ledgerJournalTrans.ledgerJournalTable().RecId))
                {
                    ret = classNum(TaxableDocumentDescriptorTaxJournal);
                }
                else
                {
                    ret = classNum(TaxableDocumentDescriptorGeneralJournal);
                }
                break;

            //General journal
            case(tableNum(TaxEngineLedgerJournalTransHeader)):
                ret = classNum(TaxableDocumentDescriptorGeneralJournal);
                break;

            //Quality order
            case(tableNum(InventQualityOrderTable)):
            case(tableNum(TaxEngineQualityOrderTableHeader)):
                if (_transactionTable.TableId == tableNum(TaxEngineQualityOrderTableHeader))
                {
                    taxEngineQualityOrderTableHeader = _transactionTable as TaxEngineQualityOrderTableHeader;
                    InventQualityOrderTable = InventQualityOrderTable::find(taxEngineQualityOrderTableHeader.QualityOrderId);
                }
                else
                {
                    InventQualityOrderTable  = _transactionTable as InventQualityOrderTable;
                }
                if (InventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch)
                {
                    ret = classNum(TaxableDocumentDescriptorQualityOrderVend);
                }
                else if (InventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales)
                {
                    ret = classNum(TaxableDocumentDescriptorQualityOrderCust);
                }
                else
                {
                    ret = classNum(TaxableDocumentDescriptor);
                }
                break;

            //Sales quotation journal
            case(tableNum(CustQuotationJour)):
                ret = classNum(TaxableDocumentDescriptorSalesQuotationParm);
                break;

            //Sales quotation confirmation journal
            case(tableNum(CustQuotationConfirmJour)):
                ret = classNum(TaxableDocumentDescriptorSalesQuotationParm);
                break;

            //Stock transfer
            case(tableNum(InventTransferTable)):
                ret = classNum(TaxableDocumentDescriptorInventTransferOrder);
                break;

            //Stock transfer shipping and receive
            case(tableNum(InventTransferParmTable)):
                ret = classNum(TaxableDocumentDescriptorInventTransferOrderParm);
                break;

            //Stock transfer shipping and receive journal
            case(tableNum(InventTransferJour)):
                inventTransferJour = _transactionTable as InventTransferJour;
                if (inventTransferJour.UpdateType == InventTransferUpdateType::Receive
                    || inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
                {
                    ret = classNum(TaxableDocumentDescriptorInventTransferOrder);
                }
                else
                {
                    ret = classNum(TaxableDocumentDescriptorInventTransferOrderParm);
                }
                break;

            // Export order journal
            case(tableNum(CustomsShippingBillJour_IN)):
                ret = classNum(TaxableDocumentDescriptorSalesOrderParm);
                break;

            // Import order journal
            case(tableNum(CustomsVendBOEJour_IN)):
                ret = classNum(TaxableDocumentDescriptorPurchaseOrderParm);
                break;

            // Project - On account transaction
            case(tableNum(TaxEngineProjOnAcctTransHeader)):
            case(tableNum(TaxEngineProjOnAcctJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjOnAcctTrans);
                break;

            // Project - Revenue transaction
            case(tableNum(TaxEngineProjRevenueTransHeader)):
            case(tableNum(TaxEngineProjRevenueJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjRevenueTrans);
                break;

            // Project - Expense transaction
            case(tableNum(TaxEngineProjCostTransHeader)):
            case(tableNum(TaxEngineProjCostJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjCostTrans);
                break;

            // Project - Item transaction
            case(tableNum(TaxEngineProjItemTransHeader)):
            case(tableNum(TaxEngineProjItemJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjItemTrans);
                break;

            // Project - Empl transaction
            case(tableNum(TaxEngineProjEmplTransHeader)):
            case(tableNum(TaxEngineProjEmplJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjEmplTrans);
                break;

            // Project - Item transaction for SO
            case(tableNum(TaxEngineProjItemSOTransHeader)):
            case(tableNum(TaxEngineProjItemSOJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjItemSOTrans);
                break;

            // Project - Subscription transaction
            case(tableNum(TaxEngineProjRevenueSubTransHeader)):
            case(tableNum(TaxEngineProjRevenueSubJourHeader)):
                ret = classNum(TaxableDocumentDescriptorProjRevenueSubTrans);
                break;

            // Sales agreement
            case(tableNum(SalesAgreementHeader)):
            ret = classNum(TaxableDocumentDescriptorSalesAgreement);
                break;

            // Purchase agreement
            case(tableNum(PurchAgreementHeader)):
            ret = classNum(TaxableDocumentDescriptorPurchaseAgreement);
                break;

            // Project advanced journal (Project operation integration journal)
            case (tableNum(TaxEngineProjAdvancedJournalLineHeader)):
                ret = classNum(TaxableDocumentDescriptorProjAdvancedJournal);
                break;

            default:
                ret = classNum(TaxableDocumentDescriptor);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the taxable document descriptor by the transaction table.
    /// </summary>
    /// <param name = "_transactionTable">transaction table</param>
    /// <returns>taxable document descriptor</returns>
    public static TaxableDocumentDescriptor getTaxableDocumentDescriptor(Common _transactionTable)
    {
        TaxableDocumentDescriptor taxableDocumentDescriptor;

        TaxableDocumentDescriptorFactory factory = new TaxableDocumentDescriptorFactory();

        TaxableDocumentDescriptor = TaxableDocumentDescriptor::construct(factory.determineTaxableDocumentDescriptor(_transactionTable), _transactionTable);

        return taxableDocumentDescriptor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>