<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocEmailProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents an e-mail processor for Electronic Fiscal Documents.
/// The class will read attached XMLs and PDFs which represent Electronic Fiscal Documents issued by a third party
/// for a given fiscal establishment.
/// </summary>
public class EFDocEmailProcessor_BR
{
    int emailsCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTelemetry</Name>
				<Source><![CDATA[
    private void addTelemetry(System.Diagnostics.Stopwatch _stopwatch, boolean _status, str _funcName)
    {
        _stopwatch.Stop();
        int timePerLine = emailsCount ? _stopwatch.ElapsedMilliseconds / emailsCount : 0;
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
                GlobalizationConstants::FeatureReferenceBR00029,
                _funcName,
                GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                SysCountryRegionCode::countryInfo(),
                _stopwatch.ElapsedMilliseconds,
                false,
                _status,
                timePerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is the entry point that executes the whole email processing, retrieving new emails and calling the process method.
    /// </summary>
    /// <remarks>
    /// Use this method as the entry point.
    /// </remarks>
    public void execute()
    {
        SysEmailReader          emailReader;
        SysEmailAccountList     emailAccounts;

        emailAccounts = this.getAccountsToRead();

        emailReader = SysEmailReader::construct();
        emailReader.readingEmail += eventhandler(this.processEmail);

        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();
        System.Exception ex;

        try
        {
            emailReader.getUnreadEmailMessages(emailAccounts);
        }
        catch(ex)
        {
            this.addTelemetry(stopwatch, false, funcName());
            throw ex;
        }
        finally
        {
            this.addTelemetry(stopwatch, true, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountsToRead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records from EFDocumentEmailAccount_BR table
    /// </summary>
    /// <returns>
    /// A list of email accounts
    /// </returns>
    public SysEmailAccountList getAccountsToRead()
    {
        EFDocumentEmailAccount_BR efDocemailAccount;
        SysEmailAccount           emailAccount;
        SysEmailAccountList       emailAccountList;
        str                       password;

        emailAccountList = SysEmailAccountList::construct();

        while select efDocemailAccount
        {
            if (efDocemailAccount.UseModernAuth)
            {
                emailAccount = SysEmailAccount::newAccount(efDocemailAccount.ServerAddress, efDocemailAccount.Username, password, efDocemailAccount.Port, efDocemailAccount.UseSsl);

                SysEmailPopServerOAuthParameters emailAuthParams = new SysEmailPopServerOAuthParameters();

                emailAuthParams.parmResourceId(efDocemailAccount.ResourceId);
                emailAuthParams.parmAuthority(efDocemailAccount.LoginAuthority);
                emailAuthParams.parmTenantId(KeyVaultCertificateHelper::getManualSecretValue(efDocemailAccount.TenantIdKeyVaultRef));
                emailAuthParams.parmClientId(KeyVaultCertificateHelper::getManualSecretValue(efDocemailAccount.ClientIdKeyVaultRef));
                emailAuthParams.parmClientSecret(KeyVaultCertificateHelper::getManualSecretValue(efDocemailAccount.ClientSecretKeyVaultRef));

                emailAccount.initModernAuth(emailAuthParams);
            }
            else
            {
                password = this.getPassword(efDocemailAccount);
                emailAccount = SysEmailAccount::newAccount(efDocemailAccount.ServerAddress, efDocemailAccount.Username, password, efDocemailAccount.Port, efDocemailAccount.UseSsl);
            }

            emailAccountList.add(emailAccount);
        }

        if (emailAccountList.getCount() == 0)
        {
            warning("@SYS4003663");
        }

        return emailAccountList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will be called for each email in the list of new messange to be processed.
    /// It will extract the xml and the danfe from the e-mails.
    /// </summary>
    /// <param name="_emailMessage">
    /// The e-mail to be be parsed.
    /// </param>
    public void processEmail(SysEmailMessageRead _emailMessage)
    {
        this.saveEmailMessage(_emailMessage);
        emailsCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPassword</Name>
				<Source><![CDATA[
    private Password getPassword(EFDocumentEmailAccount_BR _efDocemailAccount)
    {
        Password password;

        if (_efDocemailAccount.Password != connull())
        {
            try
            {
                password = Global::editEncryptedField(_efDocemailAccount, '', fieldNum(EFDocumentEmailAccount_BR, Password), false);
            }
            catch
            {
                password = cryptoblob2str(ProtectedData::Unprotect(_efDocemailAccount.Password));

                ttsbegin;
                _efDocemailAccount.reread();
                _efDocemailAccount.selectForUpdate(true);
                _efDocemailAccount.editPassword(true, password);
                _efDocemailAccount.update();
                ttscommit;
            }
        }

        return password;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveEmailMessage</Name>
				<Source><![CDATA[
    private void saveEmailMessage(SysEmailMessageRead _currentEmailmessage)
    {
        EFDocumentIncomingXmlDocument_BR efDocumentIncomingXmlDoc;

        CNPJCPFNum_BR                    destCnpj;

        System.IO.MemoryStream           xmlStream;
        System.IO.MemoryStream           pdfStream;

        try
        {
            xmlStream = _currentEmailmessage.getAttachmentByTypeOrExtension('xml');

            if (xmlStream)
            {
                pdfStream = _currentEmailmessage.getAttachmentByTypeOrExtension('pdf');

                efDocumentIncomingXmlDoc = EFDocumentIncomingXmlDocument_BR::constructFromStream(xmlStream);

                destCnpj = efDocumentIncomingXmlDoc.getDestCnpj();

                if (destCnpj && FiscalInformationUtil_BR::isCNPJValid(destCnpj))
                {
                    this.saveReceivedXmlData(destCnpj,
                                                efDocumentIncomingXmlDoc.getAccessKey(),
                                                efDocumentIncomingXmlDoc.xml(),
                                                pdfStream);
                }
            }
        }
        catch
        {
            SysEmailPopClientClrExceptionHandler::construct().printLastExceptionToInfologAsWarning();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveReceivedXmlData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the XML content and PDF document.
    /// </summary>
    /// <param name="_destCNPJ">
    /// The CNPJ value.
    /// </param>
    /// <param name="_accessKey">
    /// The access key of the NF-e from which the email will be based on.
    /// </param>
    /// <param name="_xmlDocument">
    /// The XML content.
    /// </param>
    /// <param name="_pdfStream">
    /// The PDF document in stream.
    /// </param>
    public void saveReceivedXmlData(CNPJCPFNum_BR _destCNPJ, EFDocAccessKey_BR _accessKey, EFDocXml_BR _xmlDocument, System.IO.MemoryStream _pdfStream)
    {
        FiscalEstablishment_BR           fiscalEstablishment;
        EFDocumentReceivedXML_BR         efDocumentReceivedXml;

        try
        {
            ttsBegin;

            _destCNPJ = FiscalInformationUtil_BR::formatCNPJ(_destCNPJ);

            fiscalEstablishment = FiscalEstablishment_BR::findByCNPJ(_destCNPJ);

            if (fiscalEstablishment)
            {
                select RecId
                    from efDocumentReceivedXml
                    where efDocumentReceivedXml.Accesskey == _accessKey;

                if (!efDocumentReceivedXml)
                {
                    efDocumentReceivedXml.FiscalEstablishment_BR = fiscalEstablishment.RecId;
                    efDocumentReceivedXml.Accesskey = _accessKey;
                    efDocumentReceivedXml.modifiedField(fieldNum(EFDocumentReceivedXML_BR, AccessKey));
                    efDocumentReceivedXml.insert();
                }

                EFDocumentReceivedXMLData_BR::saveXmlDocument(efDocumentReceivedXml.RecId,
                                                              EFDocReceivedXMLDataType_BR::Received,
                                                              _xmlDocument);

                EFDocumentReceivedXmlView_BR::findOrCreate(efDocumentReceivedXml.RecId);

                EFDocumentReceivedDanfe_BR::savePdfDocument(efDocumentReceivedXml.RecId, _pdfStream);
            }

            ttsCommit;
        }
        catch
        {
            SysEmailPopClientClrExceptionHandler::construct().printLastExceptionToInfologAsWarning();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>