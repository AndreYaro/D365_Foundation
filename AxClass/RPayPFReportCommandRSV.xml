<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCommandRSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCommandRSV extends RPayPFReportCommand
{
    RPayCounterUnit                 tF, fF, sPP, ePP, fB;
    RPayGroup                       gr66, gr67;
    Range                           deductionCodeInvalids,
                                    deductionCodeExceedMax,
                                    deductionCode212,
                                    codesToExclude;
    RPayRateCode                    rounding;
    RPayAmount                      deductionAmount;
    Range                           keyDeduction;

    RPayPFReportKeyContract_RSV     keyContract;
    RPayPFReportValueContract_RSV   valueContract;

    #RPayPFReport_RSV1
    #RPayPFReportRSV_Excel
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTemplateParameters</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initTemplateParameters()
    {
        error("@SYS133275");
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        container cells; //cells to update
        container key   = conpeek(commandValue, 1);

        switch (conpeek(conInstanceParm, 1))
        {
            case #TotalAmountDS:
                keyContract.unpack(key);
                cells = this.section1() +
                        this.section2() +
                        this.section3();

                dataProvider.insert([#TotalAmountDS, cells, conpeek(commandValue, 2)]);

                break;

            case #InvalidDS:
                dataProvider.insert([#InvalidDS, key, conpeek(commandValue, 2)]);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterator</Name>
				<Source><![CDATA[
        public IRPayPFReportDataIterator iterator()
    {
        container con;

        con += conpeek(conInstanceParm, 1);
        con += this.parmValue();

        return dataProvider.iterator(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(IRPayPFReportData _dataProvider, container _conValue)
    {
        super(_dataProvider, _conValue);

        keyContract   = new RPayPFReportKeyContract_RSV();
        valueContract = new RPayPFReportValueContract_RSV();
        this.initTemplateParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>section1</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container section1()
    {
        container cells; //cells to update

        if (keyContract.parmFund() == sPP)
        {
            cells += #S1R110C3;

            switch (keyContract.parmPayPeriod())
            {
                case datenull() + 1:
                    cells += #S1R111C3;
                    break;
                case datenull() + 2:
                    cells += #S1R112C3;
                    break;
                case datenull() + 3:
                    cells += #S1R113C3;
                    break;
            }
        }

        if (keyContract.parmFund() == ePP)
        {
            cells += #S1R110C4;
            switch (keyContract.parmPayPeriod())
            {
                case datenull() + 1:
                    cells += #S1R111C4;
                    break;
                case datenull() + 2:
                    cells += #S1R112C4;
                    break;
                case datenull() + 3:
                    cells += #S1R113C4;
                    break;
            }
        }

        if (keyContract.parmFund() == fF)
        {
            cells += #S1R110C5;
            switch (keyContract.parmPayPeriod())
            {
                case datenull() + 1:
                    cells += #S1R111C5;
                    break;
                case datenull() + 2:
                    cells += #S1R112C5;
                    break;
                case datenull() + 3:
                    cells += #S1R113C5;
                    break;
            }
        }

        if (keyContract.parmFund() == tF)
        {
            cells += #S1R110C6;
            switch (keyContract.parmPayPeriod())
            {
                case datenull() + 1:
                    cells += #S1R111C6;
                    break;
                case datenull() + 2:
                    cells += #S1R112C6;
                    break;
                case datenull() + 3:
                    cells += #S1R113C6;
                    break;
            }
        }

        return cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>section2</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container section2()
    {
        container cells; //cells to update

        if (keyContract.parmCategory() == #InsuredPersonCatEmployee)
        {
            if (keyContract.parmFund() == sPP)
            {
                cells += #S2R241C3;

                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S2R241C4;
                        break;
                    case datenull() + 2:
                        cells += #S2R241C5;
                        break;
                    case datenull() + 3:
                        cells += #S2R241C6;
                        break;
                }

                if (keyContract.parmGroupId() == gr66)
                {
                    cells += #S2R201C3;
                    switch (keyContract.parmPayPeriod())
                    {
                        case datenull() + 1:
                            cells += #S2R201C4;
                            break;
                        case datenull() + 2:
                            cells += #S2R201C5;
                            break;
                        case datenull() + 3:
                            cells += #S2R201C6;
                            break;
                    }

                    if (keyContract.parmDeduction() == codesToExclude)
                    {
                        cells += #S2R211C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S2R211C4;
                                break;
                            case datenull() + 2:
                                cells += #S2R211C5;
                                break;
                            case datenull() + 3:
                                cells += #S2R211C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCode212)
                    {
                        cells += #S2R214C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S2R214C4;
                                break;
                            case datenull() + 2:
                                cells += #S2R214C5;
                                break;
                            case datenull() + 3:
                                cells += #S2R214C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCodeExceedMax)
                    {
                        cells += #S2R217C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S2R217C4;
                                break;
                            case datenull() + 2:
                                cells += #S2R217C5;
                                break;
                            case datenull() + 3:
                                cells += #S2R217C6;
                                break;
                        }
                    }
                }

                if (keyContract.parmGroupId() == gr67)
                {
                    cells += #S2R202C3;
                    switch (keyContract.parmPayPeriod())
                    {
                        case datenull() + 1:
                            cells += #S2R202C4;
                            break;
                        case datenull() + 2:
                            cells += #S2R202C5;
                            break;
                        case datenull() + 3:
                            cells += #S2R202C6;
                            break;
                    }

                    if (keyContract.parmDeduction() == codesToExclude)
                    {
                        cells += #S2R212C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S2R212C4;
                                break;
                            case datenull() + 2:
                                cells += #S2R212C5;
                                break;
                            case datenull() + 3:
                                cells += #S2R212C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCode212)
                    {
                        cells += #S2R215C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S2R215C4;
                                break;
                            case datenull() + 2:
                                cells += #S2R215C5;
                                break;
                            case datenull() + 3:
                                cells += #S2R215C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCodeExceedMax)
                    {
                        cells += #S2R218C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S2R218C4;
                                break;
                            case datenull() + 2:
                                cells += #S2R218C5;
                                break;
                            case datenull() + 3:
                                cells += #S2R218C6;
                                break;
                        }
                    }
                }
            }

            if (keyContract.parmFund() == ePP)
            {
                cells += #S2R242C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S2R242C4;
                        break;
                    case datenull() + 2:
                        cells += #S2R242C5;
                        break;
                    case datenull() + 3:
                        cells += #S2R242C6;
                        break;
                }
            }

            if (keyContract.parmFund() == fF)
            {
                cells += #S2R243C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S2R243C4;
                        break;
                    case datenull() + 2:
                        cells += #S2R243C5;
                        break;
                    case datenull() + 3:
                        cells += #S2R243C6;
                        break;
                }
            }

            if (keyContract.parmFund() == tF)
            {
                cells += #S2R244C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S2R244C4;
                        break;
                    case datenull() + 2:
                        cells += #S2R244C5;
                        break;
                    case datenull() + 3:
                        cells += #S2R244C6;
                        break;
                }
            }
        }
        return cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>section3</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container section3()
    {
        container cells; //cells to update

        if (keyContract.parmCategory() != #InsuredPersonCatEmployee)
        {
            if (keyContract.parmFund() == sPP)
            {
                cells += #S3R341C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S3R341C4;
                        break;
                    case datenull() + 2:
                        cells += #S3R341C5;
                        break;
                    case datenull() + 3:
                        cells += #S3R341C6;
                        break;
                }

                if (keyContract.parmGroupId() == gr66)
                {
                    cells += #S3R301C3;
                    switch (keyContract.parmPayPeriod())
                    {
                        case datenull() + 1:
                            cells += #S3R301C4;
                            break;
                        case datenull() + 2:
                            cells += #S3R301C5;
                            break;
                        case datenull() + 3:
                            cells += #S3R301C6;
                            break;
                    }

                    if (keyContract.parmDeduction() == codesToExclude)
                    {
                        cells += #S3R311C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S3R311C4;
                                break;
                            case datenull() + 2:
                                cells += #S3R311C5;
                                break;
                            case datenull() + 3:
                                cells += #S3R311C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCode212)
                    {
                        cells += #S3R314C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S3R314C4;
                                break;
                            case datenull() + 2:
                                cells += #S3R314C5;
                                break;
                            case datenull() + 3:
                                cells += #S3R314C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCodeExceedMax)
                    {
                        cells += #S3R317C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S3R317C4;
                                break;
                            case datenull() + 2:
                                cells += #S3R317C5;
                                break;
                            case datenull() + 3:
                                cells += #S3R317C6;
                                break;
                        }
                    }
                }

                if (keyContract.parmGroupId() == gr67)
                {
                    cells += #S3R302C3;
                    switch (keyContract.parmPayPeriod())
                    {
                        case datenull() + 1:
                            cells += #S3R302C4;
                            break;
                        case datenull() + 2:
                            cells += #S3R302C5;
                            break;
                        case datenull() + 3:
                            cells += #S3R302C6;
                            break;
                    }

                    if (keyContract.parmDeduction() == codesToExclude)
                    {
                        cells += #S3R312C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S3R312C4;
                                break;
                            case datenull() + 2:
                                cells += #S3R312C5;
                                break;
                            case datenull() + 3:
                                cells += #S3R312C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCode212)
                    {
                        cells += #S3R315C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S3R315C4;
                                break;
                            case datenull() + 2:
                                cells += #S3R315C5;
                                break;
                            case datenull() + 3:
                                cells += #S3R315C6;
                                break;
                        }
                    }

                    if (keyContract.parmDeduction() == deductionCodeExceedMax)
                    {
                        cells += #S3R318C3;
                        switch (keyContract.parmPayPeriod())
                        {
                            case datenull() + 1:
                                cells += #S3R318C4;
                                break;
                            case datenull() + 2:
                                cells += #S3R318C5;
                                break;
                            case datenull() + 3:
                                cells += #S3R318C6;
                                break;
                        }
                    }
                }
            }

            if (keyContract.parmFund() == ePP)
            {
                cells += #S3R342C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S3R342C4;
                        break;
                    case datenull() + 2:
                        cells += #S3R342C5;
                        break;
                    case datenull() + 3:
                        cells += #S3R342C6;
                        break;
                }
            }

            if (keyContract.parmFund() == fF)
            {
                cells += #S3R343C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S3R343C4;
                        break;
                    case datenull() + 2:
                        cells += #S3R343C5;
                        break;
                    case datenull() + 3:
                        cells += #S3R343C6;
                        break;
                }
            }

            if (keyContract.parmFund() == tF)
            {
                cells += #S3R344C3;
                switch (keyContract.parmPayPeriod())
                {
                    case datenull() + 1:
                        cells += #S3R344C4;
                        break;
                    case datenull() + 2:
                        cells += #S3R344C5;
                        break;
                    case datenull() + 3:
                        cells += #S3R344C6;
                        break;
                }
            }
        }

        return cells;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>