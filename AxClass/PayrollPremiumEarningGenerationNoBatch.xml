<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPremiumEarningGenerationNoBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPremiumEarningGenerationNoBatch</c> class is used to extend the <c>PayrollPremiumEarningGeneration</c> class
/// in order to ensure a non-batch mode dialog to be launched from forms.
/// </summary>
class PayrollPremiumEarningGenerationNoBatch extends PayrollPremiumEarningGeneration implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        callingRecord,
        payPeriodRecId,
        overridePremiumEarningLines,
        premiumEarningCodeSelectionOption
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:GeneratePremiumEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the input from the dialog which contains user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog which contains user input for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        payCycleRecId = this.getPayCycleRecId();
        payCycleReferenceControl.value(payCycleRecId);
        this.createPeriodList();
        payPeriodComboBox.selection(this.getPayPeriodIndex());

        payCycleReferenceControl.visible(false);
        payPeriodComboBox.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayCycleRecId</Name>
				<Source><![CDATA[
    private PayrollPayCycleRecId getPayCycleRecId()
    {
        PayrollEarningStatement payrollEarningStatement;

        payrollEarningStatement = callingRecord;

        return PayrollPayPeriod::find(payrollEarningStatement.PayPeriod).PayCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayPeriodIndex</Name>
				<Source><![CDATA[
    private int getPayPeriodIndex()
    {
        PayrollEarningStatement payrollEarningStatement = callingRecord;
        Integer                 length = conLen(payPeriodList);
        int                     counter;
        int                     payPeriodIndex = 0;

        for (counter = 0; counter < length; counter++)
        {
            if (payrollEarningStatement.PayPeriod == conPeek(payPeriodList, counter))
            {
                payPeriodIndex = counter - 1;
                break;
            }
        }

        return payPeriodIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack(), premiumEarningCodeContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingRecord</Name>
				<Source><![CDATA[
    public PayrollEarningStatement parmCallingRecord(PayrollEarningStatement _callingRecord = callingRecord)
    {
        callingRecord = _callingRecord;

        return callingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.filterListOfPremiumEarningCodes();

        if (!this.validateProcess())
        {
            return;
        }

        this.runScheduleJob([callingRecord]);

        info(this.showStatementCountMessage());

        info("@Payroll:TheProcessIsComplete");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version               version = RunBase::getVersion(packedClass);
        container             queryCon;
        boolean               overridePremiumEarningLinesLast;
        PayrollPayPeriodRecId payPeriodRecIdLast;
        boolean               IsUnpacked = false;

        #LOCALMACRO.SaveLastList
            callingRecord,
            payPeriodRecIdLast,
            overridePremiumEarningLinesLast,
            premiumEarningCodeSelectionOption
        #ENDMACRO

        if (version == #CurrentVersion)
        {
            if (this.inGetSaveLast())
            {
                [version, #SaveLastList, queryCon, premiumEarningCodeContainer] = packedClass;
            }
            else
            {
                [version, #CurrentList, queryCon, premiumEarningCodeContainer] = packedClass;
            }

            if (SysQuery::isPackedOk(queryCon))
            {
                queryRun = new QueryRun(queryCon);
            }
            else
            {
                this.initQuery();
            }

            IsUnpacked = true;
        }

        return IsUnpacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of the process class on server.
    /// </summary>
    /// <returns>
    /// An instance of the process class on server.
    /// </returns>
    public static PayrollPremiumEarningGenerationNoBatch construct()
    {
        return (new PayrollPremiumEarningGenerationNoBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PayrollPremiumEarningGenerationNoBatch premiumEarningGenerationNoBatch;

        premiumEarningGenerationNoBatch = PayrollPremiumEarningGenerationNoBatch::construct();

        if (_args && _args.record() && _args.record().TableId == tableNum(PayrollEarningStatement))
        {
            premiumEarningGenerationNoBatch.parmCallingRecord(_args.record());
        }
        else
        {
            throw error(error::missingParameter(premiumEarningGenerationNoBatch));
        }

        if (premiumEarningGenerationNoBatch.prompt())
        {
            premiumEarningGenerationNoBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>