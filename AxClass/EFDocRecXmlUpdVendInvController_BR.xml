<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocRecXmlUpdVendInvController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller responsible for invoking the service class that updates vendor invoice lines using the
/// values from NF-e received XML lines. This controller will also provide the data required for this
/// task to be completed through a contract.
/// </summary>
public class EFDocRecXmlUpdVendInvController_BR extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the controller that is responsible for the service of updating
    /// vendor invoice lines from NF-e received XML lines
    /// </summary>
    /// <param name="_args">
    /// Arguments for the method. The vendor invoice record is being passed through this parameter.
    /// </param>
    /// <returns>
    /// An instance of the controller
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception will be throw if the record passed by the parameter is not a VendInvoiceInfoTable
    /// </exception>
    public static EFDocRecXmlUpdVendInvController_BR construct(Args _args)
    {
        EFDocRecXmlUpdVendInvController_BR controller;
        EFDocRecXmlUpdVendInvContract_BR   contract;
        VendInvoiceInfoTable               vendorInvoice;

        if (_args.dataset() != tableNum(VendInvoiceInfoTable))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        controller = new EFDocRecXmlUpdVendInvController_BR(classStr(EFDocRecXmlUpdVendInvService_BR), methodStr(EFDocRecXmlUpdVendInvService_BR, updateVendorInvoiceLinesFromXml));

        vendorInvoice = _args.record();

        contract = controller.getDataContractObject();
        contract.parmVendorInvoiceRecId(vendorInvoice.RecId);

        controller.parmShowDialog(false);
        controller.showBatchTab(false);
        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmLoadFromSysLastValue(false);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EFDocRecXmlUpdVendInvController_BR  controller = EFDocRecXmlUpdVendInvController_BR::construct(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>