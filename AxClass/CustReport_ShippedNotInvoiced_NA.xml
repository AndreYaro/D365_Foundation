<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReport_ShippedNotInvoiced_NA</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustReport_ShippedNotInvoiced_NA
{
    CustShippedNotInvoicedTmp_NA custShippedNotInvoicedTmp_NA;
    Query dynamicQuery;
    TransDate cutOffDate;
    InventTransOrigin inventTransOrigin;
    InventTrans inventTrans;
    InventTable inventTable;
    InventTableModule inventTableModule;
    real accrual;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>CustReport_ShippedNotInvoiced_NA</c> class.
    /// </summary>
    /// <param name="custShippedNotInvoicedTmp_NA">
    /// The <c>CustShippedNotInvoicedTmp_NA</c> table buffer used on the report.
    /// </param>
    public void new(CustShippedNotInvoicedTmp_NA _custShippedNotInvoicedTmp_NA)
    {
        custShippedNotInvoicedTmp_NA = _custShippedNotInvoicedTmp_NA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract dynamicQuery.
    /// </summary>
    /// <param name="_dynamicQuery">
    /// The new value of the datacontract parameter dynamicQuery.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter dynamicQuery
    /// </returns>
    public Query parmQuery(Query _dynamicQuery = dynamicQuery)
    {
        dynamicQuery = _dynamicQuery;

        return dynamicQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery(Query _query)
    {
        QueryBuildDataSource qbds;

        str queryExpr = strFmt('((((%1 <= %3) && (%1 > %4)) && ((%2 > %3) || (%2 == %4))) || (((%1 > %3) || (%1 == %4)) && ((%2 <= %3) && (%2 > %4))))',
            fieldStr(InventTrans, DatePhysical),
            fieldStr(InventTrans, DateFinancial),
            date2StrXpp(cutOffDate),
            date2StrXpp(dateNull()));

        qbds = SysQuery::findOrCreateDataSource(_query, tableNum(InventTrans));
        SysQuery::findOrCreateRange(qbds, fieldNum(InventTrans, RecId)).value(queryExpr);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCutOffDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter CutOffDate.
    /// </summary>
    /// <param name="_cutOffDate">
    /// The new value of the datacontract parameter CutOffDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter CutOffDate
    /// </returns>
    public TransDate parmCutOffDate(TransDate _cutOffDate = cutOffDate)
    {
        cutOffDate = _cutOffDate;
        return cutOffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    protected void insert()
    {
        custShippedNotInvoicedTmp_NA.Qty = inventTrans.Qty;
        custShippedNotInvoicedTmp_NA.DatePhysical = inventTrans.DatePhysical;
        custShippedNotInvoicedTmp_NA.DateFinancial = inventTrans.DateFinancial;
        custShippedNotInvoicedTmp_NA.CostAmountPhysical = this.calPhysicalValue();
        custShippedNotInvoicedTmp_NA.CostAmountPosted = inventTrans.CostAmountPosted;
        custShippedNotInvoicedTmp_NA.Voucher = inventTrans.Voucher;
        custShippedNotInvoicedTmp_NA.VoucherPhysical = inventTrans.VoucherPhysical;
        custShippedNotInvoicedTmp_NA.Accural = accrual;
        custShippedNotInvoicedTmp_NA.ItemId = inventTransOrigin.ItemId;
        custShippedNotInvoicedTmp_NA.ReferenceId = inventTransOrigin.ReferenceId;
        custShippedNotInvoicedTmp_NA.ItemName = inventTransOrigin.itemName();
        custShippedNotInvoicedTmp_NA.Name = this.custName();
        custShippedNotInvoicedTmp_NA.InventUnit = this.inventUnit();
        custShippedNotInvoicedTmp_NA.CurrencyCode = CompanyInfoHelper::standardCurrency();
        custShippedNotInvoicedTmp_NA.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calPhysicalValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the calculated amount.
    /// </summary>
    /// <returns>
    ///    The physical amount.
    /// </returns>
    private CostAmountPhysical calPhysicalValue()
    {
        if (inventTrans.inventTable().modelGroup().inventModelType().stdCostBased())
        {
            return inventTrans.costAmountPhysicalAsPerDate(cutOffDate);
        }
        else
        {
            return inventTrans.CostAmountPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the customer for a particular invoice account.
    /// </summary>
    /// <returns>
    ///    The name of a customer.
    /// </returns>
    private str custName()
    {
        return SalesTable::find(inventTransOrigin.ReferenceId).customerName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the unit ID.
    /// </summary>
    /// <returns>
    ///    The unit ID from the <c>inventTransOrigin</c> record.
    /// </returns>
    private UnitOfMeasureSymbol inventUnit()
    {
        return InventTableModule::find(inventTransOrigin.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustNotInvoicedReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs selection and calaculation to populate CustShippedNotInvoicedTmp_NA records
    /// </summary>
    /// <param name="_userConnection">
    /// The user connection value.
    /// </param>
    /// <returns>
    /// The <c>CustShippedNotInvoicedTmp_NA</c> records.
    /// </returns>
    public CustShippedNotInvoicedTmp_NA processCustNotInvoicedReport(UserConnection _userConnection = null)
    {     
        if (_userConnection)
        {
            custShippedNotInvoicedTmp_NA.setConnection(_userConnection);
        }

        cutOffDate = this.parmCutOffDate();

        QueryRun qr = new QueryRun(this.buildQuery(this.parmQuery()));

        while (qr.next())
        {
            inventTransOrigin = qr.get(tablenum(InventTransOrigin));
            inventTrans = qr.get(tablenum(InventTrans));

            if (inventTrans.DatePhysical && inventTrans.DateFinancial)
            {
                if (inventTrans.DatePhysical < inventTrans.DateFinancial)
                {
                    accrual = this.calPhysicalValue();
                }
                else
                {
                    if (inventTrans.DatePhysical > inventTrans.DateFinancial)
                    {
                        accrual = -this.calPhysicalValue();
                    }
                    else
                    {
                        accrual = -inventTrans.CostAmountPosted;
                    }
                }
            }
            else
            {
                if (inventTrans.DatePhysical)
                {
                    accrual = this.calPhysicalValue();
                }

                if (inventTrans.DateFinancial)
                {
                    accrual = -inventTrans.CostAmountPosted;
                }
            }

            this.insert();
        }
        
        return custShippedNotInvoicedTmp_NA;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>