<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTransType_Output_OrderPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsOrderTransType_Output_OrderPick extends WMSOrderTransType_OutputDontPostTransfer
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateRefillTransport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the refill transport for the table.
    /// </summary>
    /// <remarks>
    ///    No refills are created for the <c>WMSOrderTransType_Output_OrderPick</c> table.
    /// </remarks>
    protected void activateRefillTransport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowShipmentUnReservationForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that determines whether the shipment un-reservation is allowed for a
    /// single line.
    /// </summary>
    /// <returns>
    /// false, because the shipment un-reservation for a single line is not allowed for order picking.
    /// </returns>
    public boolean allowShipmentUnReservationForLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoEndOrderPick</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finishes the <c>WMSOrder</c> record so that the related <c>InventTrans</c> records no longer have
    ///    the <c>childref</c> field set.
    /// </summary>
    protected void autoEndOrderPick()
    {
        WMSOrder    wmsOrderLocal;

        wmsOrder = null; //force a trip to the DB since the record has been updated
        wmsOrderLocal = this.wmsOrder(true);

        if (wmsOrderLocal.QtyNoShipment && !wmsOrderLocal.isBeingProcessed()) //there can't be any other open quantity
        {
            wmsOrderLocal.finish();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUnpicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the related <c>WMSOrderTrans</c> record has a status that allows for it to be
    ///    unpicked.
    /// </summary>
    /// <returns>
    ///    true if the related <c>WMSOrderTrans</c> record has a status that allows for it to be unpicked;
    ///    otherwise, false.
    /// </returns>
    public NoYes canBeUnpicked()
    {
        return (wmsOrderTrans.isPhysicalUpdated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    public void cancel(boolean _checkRoute = true)
    {
        super(_checkRoute);

        if (InventParameters::find().AutoEndOrderPick)
        {
            this.autoEndOrderPick();
        }

        wmsOrder.reread();
        wmsOrder.cleanUpInventTransChildReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    public void deleted()
    {
        super();

        if (InventParameters::find().AutoEndOrderPick)
        {
            this.autoEndOrderPick();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishPickingLine</Name>
				<Source><![CDATA[
    public void finishPickingLine(
        WMSPickPalletId   _wmsPickPalletId,
        InventDim         _inventDimPicked,
        HcmWorkerRecId    _worker,
        WMSExpeditionTime _time,
        boolean           _startRoute = true,
        boolean           _checkRoute = true)
    {
        super(_wmsPickPalletId, _inventDimPicked, _worker, _time,_startRoute,_checkRoute);

        if (InventParameters::find().AutoEndOrderPick)
        {
            this.autoEndOrderPick();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToInventDimFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the inventory dimensions.
    /// </summary>
    /// <remarks>
    ///    This method copies the from-dimensions to the to-dimensions.
    /// </remarks>
    void initToInventDimFromInventDim()
    {
        wmsOrderTrans.ToInventDimId = wmsOrderTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(WMSOrderTrans _wmsOrderTrans)
    {
        super(_wmsOrderTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WMSOrderTransType_Output_OrderPick construct(WMSOrderTrans _wmsOrderTrans)
    {
        return new WMSOrderTransType_Output_OrderPick(_wmsOrderTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSOrderTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>WMSOrderTransType_Output_OrderPick</c> class.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    The <c>WMSOrderTrans</c> record to use to initialize the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WMSOrderTransType_Output_OrderPick</c> class.
    /// </returns>
    public static WMSOrderTransType_Output_OrderPick newWMSOrderTrans(WMSOrderTrans _wmsOrderTrans)
    {
        return WMSOrderTransType_Output_OrderPick::construct(_wmsOrderTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>