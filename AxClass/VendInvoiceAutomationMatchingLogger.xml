<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationMatchingLogger</c> class logs automation matching of vendor invoices to product receipts results.
/// </summary>
internal final class VendInvoiceAutomationMatchingLogger
{
    private ProcessExecutionSourceLinkItem invoiceMatchingSourceLink;
    private RefRecId invoiceMatchingSourceLinkRecId;
    private ProcessExecutionId matchingExecutionId;
    private List messageLogEntries;
    private DocumentEvent documentMatchingEvent;
    private ProcessScheduleWorkItem processScheduleWorkItem;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeMatchingLogger</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationMatchingLogger initializeMatchingLogger(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationMatchingLogger matchingLogger =  new VendInvoiceAutomationMatchingLogger();
        matchingLogger.matchingExecutionId = _processScheduleWorkItem.parmExecutionId();
        matchingLogger.processScheduleWorkItem = _processScheduleWorkItem;

        return matchingLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceMatchingSourceLink</Name>
				<Source><![CDATA[
    private void initializeInvoiceMatchingSourceLink(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        VendInvoiceAutomationInvoiceTmp _invoicesRanMatch)
    {
        // Initializes automatic invoice matching process automation details.
        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmSourceTableId(tableNum(VendInvoiceInfoTable));
        
        // Set automatic invoice matching process automation invoice record details.
        sourceLinkItem.parmHeader(_invoicesRanMatch.VendInvoiceNum);
        sourceLinkItem.parmSourceRecId(_invoicesRanMatch.VendInvoiceRecId);
        
        invoiceMatchingSourceLink = sourceLinkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMatchingResultToProcessAutomationLogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes automatic invoice matching process results to process automation logs.
    /// </summary>
    /// <param name="_invoicesRanMatching"> List of invoices ran matching.</param>
    /// <param name="_matchStatus"> Match status for invoices.</param>
    /// <param name="_processWorkItem"> Automatic match process schedule workitem.</param>
    internal void writeMatchingResultToProcessAutomationLogs(
        VendInvoiceAutomationInvoiceTmp _invoicesRanMatching,
        VendInvoiceMatchProductReceiptToInvoiceLineEvent _matchStatus,
        DocumentEvent _documentMatchingEvent)
    {
        select firstonly RecId from _invoicesRanMatching;

        if (_invoicesRanMatching.RecId)
        {
            documentMatchingEvent = _documentMatchingEvent;

            while select * from _invoicesRanMatching
            {
                messageLogEntries = new List(Types::Class);
                this.initializeInvoiceMatchingSourceLink(processScheduleWorkItem, _invoicesRanMatching);

                if (_matchStatus == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed)
                {
                    this.writeUnsuccessfulMatchingToProcessAutomationResults();
                    this.writeFailedLineMatchToProcessAutomationResults(_invoicesRanMatching);
                }
                else if (_matchStatus == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed
                    || _matchStatus == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting)
                {
                    this.writeSuccessfulMatchingToProcessAutomationResults();
                    this.writeCompletedOrWaitingLineMatchToProcessAutomationResults(_invoicesRanMatching, _matchStatus);
                }
                else
                {
                    this.writeSuccessfulMatchingToProcessAutomationResults();
                }

                this.writeMatchingProcessAutomationResultsToDatabase();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSuccessfulMatchingToProcessAutomationResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes successful automatic invoice matching process results to process automation logs.
    /// </summary>
    private void writeSuccessfulMatchingToProcessAutomationResults()
    {
        invoiceMatchingSourceLink.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Success);
        invoiceMatchingSourceLink.parmMessage("@AccountsPayable:MatchProcessAutomationCompleted");
        invoiceMatchingSourceLinkRecId = ProcessExecutionSourceLink::insertSourceLink(invoiceMatchingSourceLink).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUnsuccessfulMatchingToProcessAutomationResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes unsuccessful automatic invoice matching process results to process automation logs.
    /// </summary>
    private void writeUnsuccessfulMatchingToProcessAutomationResults()
    {
        invoiceMatchingSourceLink.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Error);
        invoiceMatchingSourceLink.parmMessage("@AccountsPayable:MatchProcessAutomationFailed");
        invoiceMatchingSourceLinkRecId = ProcessExecutionSourceLink::insertSourceLink(invoiceMatchingSourceLink).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFailedLineMatchToProcessAutomationResults</Name>
				<Source><![CDATA[
    private void writeFailedLineMatchToProcessAutomationResults(VendInvoiceAutomationInvoiceTmp _invoicesRanMatching)
    {
        // Writes failed automatic invoice matching process line results to process automation logs.
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceLineMatchingTmp invoiceLineForInvoiceRanMatching;

        insert_recordset invoiceLineForInvoiceRanMatching (RefRecId, ItemId, ProcurementCategory)
            select RecId, ItemId, ProcurementCategory from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == _invoicesRanMatching.VendInvoiceParmId
                    && vendInvoiceInfoLine.TableRefId == _invoicesRanMatching.VendInvoiceTableRefId;
        
        DocumentEventLog documentEventLog;
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceLineAutomationHistory(invoiceLineForInvoiceRanMatching, documentMatchingEvent);
        
        while select ItemId, ProcurementCategory from invoiceLineForInvoiceRanMatching
            exists join documentEventLog
                where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                    && documentEventLog.SourceRecId == invoiceLineForInvoiceRanMatching.RefRecId
                    && documentEventLog.DocumentEvent == documentMatchingEvent.RecId
                    && documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed
            exists join documentEventLogTmp
                    where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId
        {
            container labelParameters = [invoiceLineForInvoiceRanMatching.ItemId,
                EcoResCategory::find(invoiceLineForInvoiceRanMatching.ProcurementCategory).Name,
                _invoicesRanMatching.VendInvoiceNum];

            this.writeMessageLogEntryToProcessAutomationResults(
                literalStr("@AccountsPayable:MatchProcessAutomationLineFailed"),
                Exception::Error,
                labelParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCompletedOrWaitingLineMatchToProcessAutomationResults</Name>
				<Source><![CDATA[
    private void writeCompletedOrWaitingLineMatchToProcessAutomationResults(
        VendInvoiceAutomationInvoiceTmp _invoicesRanMatching,
        VendInvoiceMatchProductReceiptToInvoiceLineEvent _matchStatus)
    {
        // Writes completed or waiting automatic invoice matching process line results to process automation logs.
        DocumentEventLog documentEventLog;
        
        select firstonly DateTimeUtc, RecId from documentEventLog
            order by documentEventLog.Sequence desc
                where documentEventLog.SourceRecId == _invoicesRanMatching.VendInvoiceRecId
                    && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                    && documentEventLog.DocumentEvent == documentMatchingEvent.RecId
                    && documentEventLog.EventEnumValue == _matchStatus;

        container labelParameters = [datetime2str(DateTimeUtil::applyTimeZoneOffset(documentEventLog.DateTimeUtc, DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll)];

        this.writeMessageLogEntryToProcessAutomationResults(
                literalStr("@AccountsPayable:MatchProcessAutomationLineSuccess"),
                Exception::Info,
                labelParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMessageLogEntryToProcessAutomationResults</Name>
				<Source><![CDATA[
    private void writeMessageLogEntryToProcessAutomationResults(
        LabelId _messageLabel,
        Exception _exception,
        container _labelParameters = conNull())
    {
        // Writes message logs entry to process automation results.
        ProcessExecutionMessageLogItem messageLogEntry = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndLabel(
            invoiceMatchingSourceLinkRecId,
            _exception,
            _messageLabel,
            _labelParameters);

        messageLogEntries.addEnd(messageLogEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMatchingProcessAutomationResultsToDatabase</Name>
				<Source><![CDATA[
    private void writeMatchingProcessAutomationResultsToDatabase()
    {
        ListEnumerator messageLogEntryEnumerator = messageLogEntries.getEnumerator();

        // Iterate over message log entries and write to database
        while (messageLogEntryEnumerator.moveNext())
        {
            ProcessExecutionMessageLogItem messageLogEntry = messageLogEntryEnumerator.current() as ProcessExecutionMessageLogItem;
            ProcessExecutionMessageLog::insertMessage(messageLogEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeHeaderMatchingResultToInvoiceDocumentHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes invoice matching result to document history.
    /// </summary>
    /// <param name="_invoicesRanMatching"> List of invoices ran matching.</param>
    /// <param name="_matchStatus"> Match status for invoices.</param>
    internal void writeHeaderMatchingResultToInvoiceDocumentHistory(
        VendInvoiceAutomationInvoiceTmp _invoicesRanMatching,
        VendInvoiceMatchProductReceiptToInvoiceLineEvent _matchStatus)
    {
        select firstonly RecId from _invoicesRanMatching;

        if (_invoicesRanMatching.RecId)
        {
            DocumentEventRequestDocumentsTmp documentEventRequestTmp;

            insert_recordset documentEventRequestTmp(SourceRecId)
                select VendInvoiceRecId from _invoicesRanMatching;
            
            DocumentEventLogRequest matchingStartEvent = new DocumentEventLogRequest();
            matchingStartEvent.eventEnumId = enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent);
            matchingStartEvent.eventEnumValue = _matchStatus;
            matchingStartEvent.sourceTableId = tableNum(VendInvoiceInfoTable);
            matchingStartEvent.executionId = matchingExecutionId;
            matchingStartEvent.requestDocumentsTmp = documentEventRequestTmp;
            DocumentEventLog::logDocumentEvent(matchingStartEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLineMatchingResultToInvoiceDocumentHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes invoice line matching result to document history.
    /// </summary>
    /// <param name="_invoiceLinesMatching"> List of invoice lines ran matching.</param>
    /// <param name="_matchStatus"> Match status for invoice lines.</param>
    internal void writeLineMatchingResultToInvoiceDocumentHistory(
        VendInvoiceLineMatchingTmp _invoiceLinesMatching,
        VendInvoiceMatchProductReceiptToInvoiceLineEvent _matchStatus)
    {
        select firstonly RecId from _invoiceLinesMatching;
        if (_invoiceLinesMatching.RecId)
        {
            DocumentEventRequestDocumentsTmp documentEventRequestTmp;

            insert_recordset documentEventRequestTmp(SourceRecId)
                select RefRecId from _invoiceLinesMatching;
            
            DocumentEventLogRequest matchingStartEvent = new DocumentEventLogRequest();
            matchingStartEvent.eventEnumId = enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent);
            matchingStartEvent.eventEnumValue = _matchStatus;
            matchingStartEvent.sourceTableId = tableNum(VendInvoiceInfoLine);
            matchingStartEvent.executionId = matchingExecutionId;
            matchingStartEvent.requestDocumentsTmp = documentEventRequestTmp;
            DocumentEventLog::logDocumentEvent(matchingStartEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAutomationMatchStatusLogPerInvoice</Name>
				<Source><![CDATA[
    internal void writeAutomationMatchStatusLogPerInvoice(
        VendInvoiceInfoTableRecId _invoiceRecId,
        VendInvoiceMatchProductReceiptToInvoiceLineEvent _matchStatus)
    {
        DocumentEventLogRequest matchingStartEvent = new DocumentEventLogRequest();
        matchingStartEvent.eventEnumId = enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent);
        matchingStartEvent.eventEnumValue = _matchStatus;
        matchingStartEvent.sourceTableId = tableNum(VendInvoiceInfoTable);
        matchingStartEvent.sourceRecId = _invoiceRecId;
        DocumentEventLog::logDocumentEvent(matchingStartEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeManualInvoiceResetAutomationMatchStatusLogWhenInvoiceLineQtyModified</Name>
				<Source><![CDATA[
    internal void writeManualInvoiceResetAutomationMatchStatusLogWhenInvoiceLineQtyModified(
        VendInvoiceInfoTable _vendInvoiceInfoTable,
        DocumentEventLog _documentEventLog,
        NoYes _matched)
    {
        // Check if the invoice line is not fully matched and recent invoice match status is completed or failed
        // then reset the invoice match status to waiting,
        // or check if the invoice line is fully matched and recent invoice match status is waiting or failed
        // then check if the invoice is fully matched then reset invoice match status to completed.
        if (_matched == NoYes::No
            && (_documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed
            || _documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed))
        {
            this.writeAutomationMatchStatusLogPerInvoice(_vendInvoiceInfoTable.RecId, VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting);
        }
        else if (_matched == NoYes::Yes
            && (_documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting
            || _documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed))
        {
            // Check vendor invoice with eligible lines fully matched
            // 1- invoice lines with reference to purchase order lines
            // 2- invoice lines with three way matching policy.
            boolean isInvoiceFullyMatched = VendInvoiceFullyMatchedCheck::isInvoiceFullyMatched(_vendInvoiceInfoTable.RecId);

            if(isInvoiceFullyMatched != 0)
            {
                this.writeAutomationMatchStatusLogPerInvoice(_vendInvoiceInfoTable.RecId, VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAutomationPausedDueToFailedMatchingToDocumentHistory</Name>
				<Source><![CDATA[
    // <summary>
    /// Writes automation paused due to failed matching into document history for given invoices.
    /// </summary>
    /// <param name="_invoicesRanMatching"> List of invoices failed matching.</param>
    internal void writeAutomationPausedDueToFailedMatchingToDocumentHistory(VendInvoiceAutomationInvoiceTmp _invoicesRanMatching)
    {
        select firstonly RecId from _invoicesRanMatching;
        if (_invoicesRanMatching.RecId)
        {
            DocumentEventRequestDocumentsTmp documentEventRequestTmp;
            
            insert_recordset documentEventRequestTmp(SourceRecId)
                select VendInvoiceRecId from _invoicesRanMatching;

            DocumentEventLogRequest pauseFailedAutomationStepEvent = new DocumentEventLogRequest();
            pauseFailedAutomationStepEvent.eventEnumId = enumNum(VendInvoiceAutomationPausedFailedStepEvent);
            pauseFailedAutomationStepEvent.eventEnumValue = VendInvoiceAutomationPausedFailedStepEvent::NotSpecified;
            pauseFailedAutomationStepEvent.sourceTableId = tableNum(VendInvoiceInfoTable);
            pauseFailedAutomationStepEvent.executionId = matchingExecutionId;
            pauseFailedAutomationStepEvent.requestDocumentsTmp = documentEventRequestTmp;
            DocumentEventLog::logDocumentEvent(pauseFailedAutomationStepEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeManualFullyMatchedInAutomation</Name>
				<Source><![CDATA[
    internal void writeManualFullyMatchedInAutomation(VendInvoiceAutomationInvoiceTmp _vendInvoiceAutomationInvoiceTmp)
    {
        if (VendInvoiceAutomationStateManagement::isAutomatedMatchingProcessEnabled())
        {
            this.collectVendInvoicesWithoutRecentHistoryCompletedOrNotApplicable(_vendInvoiceAutomationInvoiceTmp);
            this.writeHeaderMatchingResultToInvoiceDocumentHistory(_vendInvoiceAutomationInvoiceTmp, VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectVendInvoicesWithoutRecentHistoryCompletedOrNotApplicable</Name>
				<Source><![CDATA[
    private void collectVendInvoicesWithoutRecentHistoryCompletedOrNotApplicable(VendInvoiceAutomationInvoiceTmp _vendInvoiceAutomationInvoiceTmp)
    {
        DocumentEventLog documentEventLog;
        
        DocumentEvent documentEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));

        delete_from _vendInvoiceAutomationInvoiceTmp
            notexists join documentEventLog
                where documentEventLog.SourceRecId == _vendInvoiceAutomationInvoiceTmp.VendInvoiceRecId
                    && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                    && documentEventLog.DocumentEvent == documentEvent.RecId;

        delete_from _vendInvoiceAutomationInvoiceTmp
            exists join documentEventLog
                where documentEventLog.SourceRecId == _vendInvoiceAutomationInvoiceTmp.VendInvoiceRecId
                    && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                    && documentEventLog.DocumentEvent == documentEvent.RecId
                    && (documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed
                    || documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInvoiceAutomationMatchStatusManually</Name>
				<Source><![CDATA[
    internal void writeInvoiceAutomationMatchStatusManually(VendInvoiceInfoTableRecId _invoiceRecId)
    {
        if (VendInvoiceAutomationStateManagement::isAutomatedMatchingProcessEnabled())
        {
            DocumentEventLog documentEventLog = DocumentEventLog::findMostRecentLogEntryOfType(tableNum(VendInvoiceInfoTable), _invoiceRecId, enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));
            if(documentEventLog.RecId != 0)
            {
                // Check vendor invoice with eligible lines fully matched
                // 1- invoice lines with reference to purchase order lines
                // 2- invoice lines with three way matching policy.
                boolean isInvoiceFullyMatched = VendInvoiceFullyMatchedCheck::isInvoiceFullyMatched(_invoiceRecId);

                // Check if the invoice is not fully matched and recent invoice match status is completed
                // then reset the invoice match status to waiting,
                // or check if the invoice is fully matched and recent invoice match status is waiting or failed
                // then reset the invoice match status to completed.
                if (isInvoiceFullyMatched == 0
                    && (documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed
                    || documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed))
                {
                    this.writeAutomationMatchStatusLogPerInvoice(_invoiceRecId, VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting);
                }
                else if (isInvoiceFullyMatched != 0
                    && (documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting
                    || documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed))
                {
                    this.writeAutomationMatchStatusLogPerInvoice(_invoiceRecId, VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>