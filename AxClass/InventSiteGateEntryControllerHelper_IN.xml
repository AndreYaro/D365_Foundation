<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteGateEntryControllerHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the controller helper class for gate entry management.
/// </summary>
class InventSiteGateEntryControllerHelper_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeInventSiteGateEntryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the status of gate entry.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>InventSiteGateEntryControllerHelper_IN</c> class.
    /// </param>
    public static void changeInventSiteGateEntryStatus(Args _args)
    {
        InventSiteGateEntry_IN inventSiteGateEntry = _args.record();
        boolean isUpdate;

        switch (_args.menuItemName())
        {
            case identifierStr(InventSiteGateConfirmVehicleEntry_IN):
                if (inventSiteGateEntry.validateVehicleEntered())
                {
                    inventSiteGateEntry.Status = InventSiteGateEntryStatus_IN::VehicleEntered;
                    inventSiteGateEntry.ArrivalDateAndTime = DateTimeUtil::getSystemDateTime();
                    info(strFmt("@SYP4860290", inventSiteGateEntry.EntryId, strLwr(enum2str(InventSiteGateEntryStatus_IN::VehicleEntered))));
                    isUpdate = true;
                }
                break;

            case identifierStr(InventSiteGateEntryConfirmTareCheck_IN):
                if (inventSiteGateEntry.validateTareCheck())
                {
                    inventSiteGateEntry.Status = InventSiteGateEntryStatus_IN::TareCheck;
                    info(strFmt("@SYP4860290", inventSiteGateEntry.EntryId, strLwr(enum2str(InventSiteGateEntryStatus_IN::TareCheck))));
                    isUpdate = true;
                }
                break;

            case identifierStr(InventSiteGateEntryConfirmMeasurement_IN):
                if (inventSiteGateEntry.validateMeasured())
                {
                    inventSiteGateEntry.Status = InventSiteGateEntryStatus_IN::Measured;
                    info(strFmt("@SYP4860290", inventSiteGateEntry.EntryId, strLwr(enum2str(InventSiteGateEntryStatus_IN::Measured))));
                    isUpdate = true;
                }
                break;

            case identifierStr(InventSiteGateEntryConfirmVehicleExit_IN):
                if (inventSiteGateEntry.validateVehicleExit())
                {
                    inventSiteGateEntry.Status = InventSiteGateEntryStatus_IN::VehicleExit;
                    inventSiteGateEntry.ExitDateAndTime = DateTimeUtil::getSystemDateTime();
                    info(strFmt("@SYP4860290", inventSiteGateEntry.EntryId, strLwr(enum2str(InventSiteGateEntryStatus_IN::VehicleExit))));
                    isUpdate = true;
                }
                break;

            case identifierStr(InventSiteGateEntryCancel_IN):
                if (inventSiteGateEntry.validateCanceled())
                {
                    inventSiteGateEntry.Status = InventSiteGateEntryStatus_IN::Canceled;
                    info(strFmt("@SYP4860290", inventSiteGateEntry.EntryId, strLwr(enum2str(InventSiteGateEntryStatus_IN::Canceled))));
                    isUpdate = true;
                }
                break;
        }

        if (isUpdate)
        {
            inventSiteGateEntry.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>gateInwardRefDocType2GateRefDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method converts the InventSiteGateInwardRefDocType_IN enum value into InventSiteGateRefDocType_IN enum value.
    /// </summary>
    /// <param name="_set">
    /// Boolean value to set the value.
    /// </param>
    /// <param name="_inventSiteGateInwardRefDocType">
    /// InventSiteGateInwardRefDocType_IN enum value to displayed.
    /// </param>
    /// <param name="_inventSiteGateRefDocType">
    /// InventSiteGateRefDocType_IN value to set.
    /// </param>
    /// <returns>
    /// InventSiteGateRefDocType_IN enum type.
    /// </returns>
    static public InventSiteGateRefDocType_IN gateInwardRefDocType2GateRefDocType(
        boolean _set,
        InventSiteGateInwardRefDocType_IN _inventSiteGateInwardRefDocType,
        InventSiteGateRefDocType_IN _inventSiteGateRefDocType)
    {
        InventSiteGateRefDocType_IN     inventSiteGateRefDocType;

        if (_set)
        {
            switch (_inventSiteGateInwardRefDocType)
            {
                case InventSiteGateInwardRefDocType_IN::Others:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::Others;
                    break;

                case InventSiteGateInwardRefDocType_IN::PurchaseOrder:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::PurchaseOrder;
                    break;

                case InventSiteGateInwardRefDocType_IN::ReturnableGatePassReturn:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::ReturnableGatePassReturn;
                    break;

                case InventSiteGateInwardRefDocType_IN::SalesReturnOrder:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::SalesReturnOrder;
                    break;

                case InventSiteGateInwardRefDocType_IN::StockTransferIn:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::StockTransferIn;
                    break;

                case InventSiteGateInwardRefDocType_IN::SubContractReturn:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::SubContractReturn;
                    break;
            }
        }

        if (_set && _inventSiteGateRefDocType != inventSiteGateRefDocType)
        {
            _inventSiteGateRefDocType = inventSiteGateRefDocType;
        }

        return _inventSiteGateRefDocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gateOutwardRefDocType2GateRefDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method converts the InventSiteGateOutwardRefDocType_IN enum value into InventSiteGateRefDocType_IN enum value.
    /// </summary>
    /// <param name="_set">
    /// Boolean value to set the value.
    /// </param>
    /// <param name="_inventSiteGateOutwardRefDocType">
    /// InventSiteGateOutwardRefDocType_IN enum value to displayed.
    /// </param>
    /// <param name="_inventSiteGateRefDocType">
    /// InventSiteGateRefDocType_IN value to set.
    /// </param>
    /// <returns>
    /// InventSiteGateRefDocType_IN enum type.
    /// </returns>
    static public InventSiteGateRefDocType_IN gateOutwardRefDocType2GateRefDocType(
        boolean _set,
        InventSiteGateOutwardRefDocType_IN  _inventSiteGateOutwardRefDocType,
        InventSiteGateRefDocType_IN _inventSiteGateRefDocType)
    {
        InventSiteGateRefDocType_IN     inventSiteGateRefDocType;

        if (_set)
        {
            switch (_inventSiteGateOutwardRefDocType)
            {
                case InventSiteGateOutwardRefDocType_IN::Others:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::Others;
                    break;

                case InventSiteGateOutwardRefDocType_IN::PurchaseReturnOrder:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::PurchaseReturnOrder;
                    break;

                case InventSiteGateOutwardRefDocType_IN::ReturnableGatePass:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::ReturnableGatePass;
                    break;

                case InventSiteGateOutwardRefDocType_IN::SalesOrder:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::SalesOrder;
                    break;

                case InventSiteGateOutwardRefDocType_IN::StockTransferOut:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::StockTransferOut;
                    break;

                case InventSiteGateOutwardRefDocType_IN::SubContract:
                    inventSiteGateRefDocType = InventSiteGateRefDocType_IN::SubContract;
                    break;
            }
        }

        if (_set && _inventSiteGateRefDocType != inventSiteGateRefDocType)
        {
            _inventSiteGateRefDocType = inventSiteGateRefDocType;
        }

        return _inventSiteGateRefDocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gateRefDocType2GateInwardRefDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method converts the InventSiteGateRefDocType_IN enum value into InventSiteGateInwardRefDocType_IN enum value.
    /// </summary>
    /// <param name="_inventSiteGateRefDocType">
    /// InventSiteGateRefDocType_IN enum value.
    /// </param>
    /// <returns>
    /// InventSiteGateInwardRefDocType_IN enum type.
    /// </returns>
    static public InventSiteGateInwardRefDocType_IN gateRefDocType2GateInwardRefDocType(InventSiteGateRefDocType_IN _inventSiteGateRefDocType)
    {
        InventSiteGateInwardRefDocType_IN    inventSiteGateInwardRefDocType;

        switch (_inventSiteGateRefDocType)
        {
            case InventSiteGateRefDocType_IN::Others:
                inventSiteGateInwardRefDocType = InventSiteGateInwardRefDocType_IN::Others;
                break;

            case InventSiteGateRefDocType_IN::PurchaseOrder:
                inventSiteGateInwardRefDocType = InventSiteGateInwardRefDocType_IN::PurchaseOrder;
                break;

            case InventSiteGateRefDocType_IN::ReturnableGatePassReturn:
                inventSiteGateInwardRefDocType = InventSiteGateInwardRefDocType_IN::ReturnableGatePassReturn;
                break;

            case InventSiteGateRefDocType_IN::SalesReturnOrder:
                inventSiteGateInwardRefDocType = InventSiteGateInwardRefDocType_IN::SalesReturnOrder;
                break;

            case InventSiteGateRefDocType_IN::StockTransferIn:
                inventSiteGateInwardRefDocType = InventSiteGateInwardRefDocType_IN::StockTransferIn;
                break;

            case InventSiteGateRefDocType_IN::SubContractReturn:
                inventSiteGateInwardRefDocType = InventSiteGateInwardRefDocType_IN::SubContractReturn;
                break;
        }

        return inventSiteGateInwardRefDocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gateRefDocType2GateOutwardRefDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method converts the InventSiteGateRefDocType_IN enum value into InventSiteGateOutwardRefDocType_IN enum value.
    /// </summary>
    /// <param name="_inventSiteGateRefDocType">
    /// InventSiteGateRefDocType_IN enum value.
    /// </param>
    /// <returns>
    /// InventSiteGateOutwardRefDocType_IN enum type.
    /// </returns>
    static public InventSiteGateOutwardRefDocType_IN gateRefDocType2GateOutwardRefDocType(InventSiteGateRefDocType_IN _inventSiteGateRefDocType)
    {
        InventSiteGateOutwardRefDocType_IN    inventSiteGateOutwardRefDocType;

        switch (_inventSiteGateRefDocType)
        {
            case InventSiteGateRefDocType_IN::Others:
                inventSiteGateOutwardRefDocType = InventSiteGateOutwardRefDocType_IN::Others;
                break;

            case InventSiteGateRefDocType_IN::PurchaseReturnOrder:
                inventSiteGateOutwardRefDocType = InventSiteGateOutwardRefDocType_IN::PurchaseReturnOrder;
                break;

            case InventSiteGateRefDocType_IN::ReturnableGatePass:
                inventSiteGateOutwardRefDocType = InventSiteGateOutwardRefDocType_IN::ReturnableGatePass;
                break;

            case InventSiteGateRefDocType_IN::SalesOrder:
                inventSiteGateOutwardRefDocType = InventSiteGateOutwardRefDocType_IN::SalesOrder;
                break;

            case InventSiteGateRefDocType_IN::StockTransferOut:
                inventSiteGateOutwardRefDocType = InventSiteGateOutwardRefDocType_IN::StockTransferOut;
                break;

            case InventSiteGateRefDocType_IN::SubContract:
                inventSiteGateOutwardRefDocType = InventSiteGateOutwardRefDocType_IN::SubContract;
                break;
        }

        return inventSiteGateOutwardRefDocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupGateEntryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate customized lookup when user selects gate entry line field.
    /// </summary>
    /// <param name="_ctrl">
    /// The control on which to perform lookup.
    /// </param>
    /// <param name="_sourceTableId">
    /// Show lookup based on the selected source table id.
    /// </param>
    /// <param name="_sourceRecId">
    /// Show lookup based on the selected source rec id.
    /// </param>
    /// <returns>
    /// Selected <c>InventSiteGateEntryLine_IN</c> record.
    /// </returns>
    public static Common lookupGateEntryLine(
        FormReferenceControl _ctrl,
        RefTableId _sourceTableId,
        RefRecId _sourceRecId)
    {
        SysReferenceTableLookup  sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(InventSiteGateEntryLine_IN), _ctrl);
        Query   query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventSiteGateEntryLine_IN));

        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntryLine_IN, SourceTableId));
        queryBuildRange.value(SysQuery::value(_sourceTableId));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntryLine_IN, SourceRecId));
        queryBuildRange.value(SysQuery::value(_sourceRecId));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntryLine_IN, ReceiptShipmentNumber));
        queryBuildRange.value(SysQuery::valueEmptyString());

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventSiteGateEntry_IN));
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource.relations(true);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntry_IN, Status));
        queryBuildRange.value(enum2Value(InventSiteGateEntryStatus_IN::VehicleExit));

        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, EntryId));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, ChallanQty));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, MeasuredQty));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, MeasuringInstrumentId));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, MeasuringRunningNumber));

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lists all the invent location records.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object reference.
    /// </param>
    /// <param name="_isVendorLocation">
    /// boolean for sub-contract location.
    /// </param>
    public static void lookupInventLocation(
        FormStringControl _ctrl,
        boolean _isVendorLocation = false)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        Query                   query = new Query();

        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventLocationId));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, Name));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventSiteId));

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventLocation));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventLocation, VendAccount));
        queryBuildRange.status(RangeStatus::Hidden);

        if (_isVendorLocation)
        {
            sysTableLookup.addLookupfield(fieldNum(InventLocation, VendAccount));
            queryBuildRange.value(SysQuery::valueNotEmptyString());
        }
        else
        {
            queryBuildRange.value(SysQuery::valueEmptyString());
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRGPGateEntryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate customized lookup when user selects the Outward gate id field.
    /// </summary>
    /// <param name="_ctrl">
    /// The control on which to perform lookup.
    /// </param>
    /// <param name="_referencePartyId">
    /// Show lookup based on the selected reference party id.
    /// </param>
    /// <returns>
    /// Selected <c>InventSiteGateEntryLine_IN</c> record.
    /// </returns>
    public static Common lookupRGPGateEntryLine(
        FormReferenceControl _ctrl,
        InventSiteGateRefPartyId_IN _referencePartyId)
    {
        SysReferenceTableLookup  sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(InventSiteGateEntryLine_IN), _ctrl);
        Query   query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventSiteGateEntryLine_IN));

        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntryLine_IN, ReturnableGatePassStatus));
        queryBuildRange.value(SysQuery::value(NoYes::No));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntryLine_IN, RetrunableGatePassNumber));
        queryBuildRange.value(SysQuery::valueNotEmptyString());

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventSiteGateEntry_IN));
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource.relations(true);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntry_IN, Status));
        queryBuildRange.value(enum2Value(InventSiteGateEntryStatus_IN::VehicleExit));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSiteGateEntry_IN, ReferencePartyId));
        queryBuildRange.value(SysQuery::value(_referencePartyId));

        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, RetrunableGatePassNumber));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, EntryId));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, ChallanQty));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, MeasuredQty));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, MeasuringInstrumentId));
        sysTableLookup.addLookupfield(fieldNum(InventSiteGateEntryLine_IN, MeasuringRunningNumber));

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>InventSiteGateEntryControllerHelper_IN</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>InventSiteGateEntryControllerHelper_IN</c> class.
    /// </param>
    static void main(Args _args)
    {
        InventSiteGateEntryControllerHelper_IN::changeInventSiteGateEntryStatus(_args);

        FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
        if (formDataSource)
        {
            // The Document state and Status are changed on PurchTable.
            formDataSource.reread();
            formDataSource.refresh();

            // This is necessary to update the enable status of the fields on the header.
            formDataSource.active();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
