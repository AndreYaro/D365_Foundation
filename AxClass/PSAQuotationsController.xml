<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>PsaQuotationsController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>PSAQuotationsController</c> class is the controller class for the <c>PSAQuotationsReport</c>
/// report.
/// </summary>

class PsaQuotationsController extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    PrintCopyOriginal           printCopyOriginal;
    SalesQuotationEditLinesForm salesQuotationEditLines;
    CustQuotationJour           custQuotationJour;
    RecordSortedList            journalList;
    PSAQuotationsContract       psaQuotationsContract;
    QuotationIdBase             quotationId;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>buildQuotationJournalQuery</Name>
        <Source><![CDATA[
    private Query buildQuotationJournalQuery()
    {
        Query locQuery = new Query();
        QueryBuildDataSource journalDataSource;
        QueryBuildDataSource salesLinkDataSource;

        journalDataSource = locQuery.addDataSource(tableNum(CustQuotationJour));
        salesLinkDataSource = journalDataSource.addDataSource(tableNum(CustQuotationSalesLink));
        salesLinkDataSource.joinMode(JoinMode::ExistsJoin);
        salesLinkDataSource.relations(true);

        return locQuery;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createJournalListFromQuery</Name>
        <Source><![CDATA[
    private void createJournalListFromQuery()
    {
        Query                 reportQuery;
        Query                 journalQuery;
        QueryBuildDataSource  quotationDataSource;
        QueryBuildDataSource  linkDataSource;
        QueryBuildRange       quotationIdRange;
        QueryRun              reportQueryRun;
        QueryRun              journalQueryRun;
        SalesQuotationTable   salesQuotation;
        CustQuotationJour     tmpQuotationJour;
        PSAQuotationsContract quotationsContract;

        quotationsContract = this.parmReportContract().parmRdpContract() as PSAQuotationsContract;
        quotationId        = quotationsContract.parmQuotations();

        journalList = new RecordSortedList(tableNum(CustQuotationJour));
        journalList.sortOrder(fieldNum(CustQuotationJour, QuotationDate), fieldNum(CustQuotationJour, QuotationId));

        reportQuery    = this.getFirstQuery();
        journalQuery   = this.buildQuotationJournalQuery();
        linkDataSource = SysQuery::findOrCreateDataSource(journalQuery, tableNum(CustQuotationSalesLink));

        if (reportQuery)
        {
            if (quotationId)
            {
                quotationDataSource = reportQuery.dataSourceTable(tableNum(SalesQuotationTable));
                quotationIdRange = SysQuery::findOrCreateRange(quotationDataSource, fieldNum(SalesQuotationTable, QuotationId));
                quotationIdRange.value(queryValue(quotationId));
                quotationIdRange.enabled(true);
            }

            reportQueryRun = new QueryRun(reportQuery);

            while (reportQueryRun.next())
            {
                salesQuotation = reportQueryRun.get(tableNum(SalesQuotationTable));
                linkDataSource.addRange(fieldNum(CustQuotationSalesLink, OrigQuotationId)).value(queryValue(salesQuotation.QuotationId));
            }

            journalQueryRun = new QueryRun(journalQuery);

            while (journalQueryRun.next())
            {
                tmpQuotationJour = journalQueryRun.get(tableNum(CustQuotationJour));
                journalList.ins(tmpQuotationJour);
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>getReportTitle</Name>
        <Source><![CDATA[
    /// <summary>
    /// Finds the correct title for the report.
    /// </summary>
    /// <returns>The title of the report.</returns>
    protected ReportTitle getReportTitle()
    {
        ReportTitle title = SysLabel::labelId2String(literalStr("@SYS84513"), this.quoteLanguageId());

        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            if (custQuotationJour.isProforma())
            {
                title = SysLabel::labelId2String(literalStr("@GLS360231"), this.quoteLanguageId());
            }
            else
            {
                title = SysLabel::labelId2String(literalStr("@GLS360230"), this.quoteLanguageId());
            }
        }
        else if (custQuotationJour.isProforma())
        {
            title = SysLabel::labelId2String(literalStr("@GLS360232"), this.quoteLanguageId());
        }

        return title;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initArgs</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <param name="_args">
    /// An instance of <c>Args</c> class.
    /// </param>
    /// <param name="_reportName">
    /// Name of the report.
    /// </param>
    protected void initArgs(Args _args, SRSCatalogItemName _reportName)
    {
        this.parmArgs(_args);
        this.parmReportName(_reportName);

        if (_args.menuItemName() == menuitemOutputStr(PSAQuotations))
        {
            this.parmShowDialog(true);
        }
        else
        {
            this.parmShowDialog(false);
        }

        if (_args.parmEnumType() == enumNum(PrintCopyOriginal))
        {
            printCopyOriginal = _args.parmEnum();
        }

        salesQuotationEditLines = null;
        if (classIdGet(_args.caller()) == classNum(SalesQuotationEditLinesForm_Sales_Send) || classIdGet(_args.caller()) == classNum(SalesQuotationEditLinesForm_Proj_Send))
        {
            salesQuotationEditLines = _args.caller();
        }

        if (_args.record() && _args.dataset() == tableNum(CustQuotationJour))
        {
            journalList = SalesQuotationEditLinesForm::createJournalListCopy(_args.record() as CustQuotationJour);
        }
        else
        {
            journalList = _args.object();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>initFormLetterReport</Name>
        <Source><![CDATA[
    protected void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::ProjectQuotation);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesQuotationEditLines)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesQuotationEditLines.printerSettingsFormletter()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesQuotationEditLines.printerSettingsFormletter()));
            formLetterReport.parmUsePrintMgmtDestinations(salesQuotationEditLines.usePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            if (this.parmShowDialog() == true)
            {
                formLetterReport.parmDefaultCopyPrintJobSettings(this.parmReportContract().parmPrintSettings());
                formLetterReport.parmDefaultOriginalPrintJobSettings(this.parmReportContract().parmPrintSettings());
                formLetterReport.parmUsePrintMgmtDestinations(false);
            }
            else
            {
                formLetterReport.parmUsePrintMgmtDestinations(true);
            }
        }

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
    protected void prePromptModifyContract()
    {
        SysDictEnum                 dictEnum = new SysDictEnum(enumNum(Assessment));
        SalesQuotationEditLinesForm caller;
        NoYes                       printNonCharge;
        SrsReportRdpDataContractInfo rdpContractInfo;
        SrsReportDesignProperties    designProperties;
        Map                          memberInfoMap;
        str                         menuItemName;

        psaQuotationsContract = this.parmReportContract().parmRdpContract();

        caller = this.parmArgs().caller();

        if (caller && caller.salesQuotationTable())
        {
            printNonCharge = caller.parmPSAPrintNonCharge();
            if (this.parmArgs().parm())
            {
                psaQuotationsContract.parmAssessment(dictEnum.symbol2Value(this.parmArgs().parm()));
                psaQuotationsContract.parmM_bPrintNonCharge(printNonCharge);
            }
        }

        menuItemName = this.parmArgs().menuItemName();

        if (menuItemName == menuitemOutputStr(PSAQuotations) ||
            menuItemName == menuitemOutputStr(PSAQuotationsCopy) ||
            menuItemName == menuitemOutputStr(PSAQuotationsOriginal) ||
            menuItemName == menuitemOutputStr(PSAQuotationsPrint))
        {
            rdpContractInfo = this.getDataContractInfoObjects().lookup(classStr(PSAQuotationsContract));
            memberInfoMap   = rdpContractInfo.getMembers();

            designProperties = memberInfoMap.lookup(methodStr(PSAQuotationsContract, parmReportTitle));
            designProperties.parmHidden(true);

            designProperties = memberInfoMap.lookup(methodStr(PSAQuotationsContract, parmCustQuotationRecId));
            designProperties.parmHidden(true);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    protected void preRunModifyContract()
    {
        PSAQuotationsContract contract = this.parmReportContract().parmRdpContract();

        if (custQuotationJour.salesQuotationTable())
        {
            contract.parmQuotations(custQuotationJour.salesQuotationTable().QuotationId);
        }
        contract.parmReportTitle(this.getReportTitle());
        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
        &&  custQuotationJour.QuotationType == QuotationType::Project)
        {
            contract.parmAssessment(custQuotationJour.Assessment);
        }

        contract.parmCustQuotationRecId(this.getRecordId());

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>quoteLanguageId</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns the language id for the relevant sales quotation. 
    /// </summary>
    /// <returns>
    ///     The language id for the relevant sales quotation. 
    ///     If no language id is set for the relevant sales quotation, the language id of the associated company is returned.
    /// </returns>
    protected CustLanguageId quoteLanguageId()
    {
        CustLanguageId ret;

        if (custQuotationJour.LanguageId)
        {
            ret = custQuotationJour.LanguageId;
        }
        else
        {
            CustLanguageId languageId = SalesQuotationTable::find(quotationId).LanguageId;

            if (languageId)
            {
                ret = languageId;
            }
            else
            {
                ret = CompanyInfo::languageId();
            }
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>runPrintMgmt</Name>
        <Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        SRSPrintDestinationSettings     printSettings;
        PrintMgmtPrintSettingDetail     printSettingDetail;

        if (this.parmShowDialog() == true)
        {
            this.createJournalListFromQuery();
        }
        else if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(custQuotationJour);

        //---only load the printSettings if the printsettings dialog is launched
        if (this.parmShowDialog())
        {
            printSettings = new SRSPrintDestinationSettings(formLetterReport.parmReportRun().parmReportRunController().parmReportContract().parmPrintSettings().pack());
        }

        do
        {
            formLetterReport.loadPrintSettings(custQuotationJour, custQuotationJour.salesQuotationTable(), this.quoteLanguageId());

            if (printSettings && formLetterReport.moveNextPrintSetting())
            {
                printSettingDetail = formLetterReport.getCurrentPrintSetting();
                printSettingDetail.parmPrintJobSettings(printSettings);
                formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
            }

            CustLanguageId languageId = this.quoteLanguageId();

            this.parmReportContract().parmRdlContract().parmLabelLanguageId(languageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(languageId);
            this.outputReports();
        }
        while (journalList.next(custQuotationJour) && !this.parmCancelRun());
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        PSAQuotationsController controller = new PSAQuotationsController();

        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::ProjectQuotation).getDefaultReportFormat());
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>getRecordId</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the ID of the journal record that should be passed to the contract.
    /// </summary>
    /// <returns>
    /// The ID of the journal record.
    /// </returns>
    protected recId getRecordId()
    {
        return custQuotationJour.RecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>