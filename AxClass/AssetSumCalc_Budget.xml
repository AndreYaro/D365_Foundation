<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSumCalc_Budget</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetSumCalc_Budget extends AssetSumCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        query = new Query();

        queryBuildDataSource = query.addDataSource(tablenum(AssetBudget));

        queryBuildDataSource.orderMode(OrderMode::GroupBy);

        queryBuildDataSource.addSelectionField(fieldnum(AssetBudget,AmountCur),SelectionField::Sum);

        queryBuildDataSource.addSortField(fieldnum(AssetBudget,CurrencyCode));
        queryBuildDataSource.addSortField(fieldnum(AssetBudget,TransDate));
        queryBuildDataSource.addSortField(fieldnum(AssetBudget,TransType));

        queryBuildDataSource.addRange(fieldnum(AssetBudget,AssetId)).value(SysQuery::value(rangeAssetId));
        queryBuildDataSource.addRange(fieldnum(AssetBudget,BookId)).value(SysQuery::value(rangeBookId));
        queryBuildDataSource.addRange(fieldnum(AssetBudget,BudgetModel)).value(SysQuery::value(rangebudgetModel));
        queryBuildDataSource.addRange(fieldnum(AssetBudget,TransDate)).value(queryRange(dateFrom,dateTo));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        AmountMST assetAmount;
        if (calculated)
        {
            return;
        }

        if (onThinClient)
        {
            [#Server2Client] = AssetSumCalc_Budget::calcServer(this.packClient());
        }
        else
        {
            this.initYear();

            QueryRun queryRun = new QueryRun(this.buildQuery());

            while (queryRun.next())
            {
                AssetBudget assetBudget = queryRun.get(tablenum(AssetBudget));
                if (sumType == AssetSumCalcType::MST)
                {
                    assetAmount = CurrencyExchangeHelper::mstAmount(assetBudget.AmountCur, assetBudget.CurrencyCode, assetBudget.TransDate);
                }
                else
                {
                    assetAmount = assetBudget.AmountCur;
                }

                this.updateSum(assetBudget.TransType, assetAmount);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServer</Name>
				<Source><![CDATA[
    private static container calcServer(container packedClient)
    {
        AssetSumCalc assetSumCalcBudget = new AssetSumCalc_Budget();

        assetSumCalcBudget.unpackClient(packedClient);
        assetSumCalcBudget.calc();

        return assetSumCalcBudget.packServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AssetSumCalc_Budget</c> class.
    /// </summary>
    /// <param name="_rangeAssetId">
    /// The asset ID range.
    /// </param>
    /// <param name="_rangeBudgetModel">
    /// The budget model range.
    /// </param>
    /// <param name="_dateFrom">
    /// The start date of the period.
    /// </param>
    /// <param name="_dateTo">
    /// The end date of the period.
    /// </param>
    /// <param name="_rangeBookId">
    /// The value model range.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Budget</c> class.
    /// </returns>
    public static AssetSumCalc_Budget newAssetPeriod(
        Range _rangeAssetId,
        Range _rangeBudgetModel,
        TransDate _dateFrom,
        TransDate _dateTo,
        Range _rangeBookId)
    {
        AssetSumCalc_Budget assetSumCalc_Budget = new AssetSumCalc_Budget();

        assetSumCalc_Budget.parmRangeAssetId(_rangeAssetId);
        assetSumCalc_Budget.parmRangeBookId(_rangeBookId);
        assetSumCalc_Budget.parmRangeBudgetModel(_rangeBudgetModel);
        assetSumCalc_Budget.parmDateFrom(_dateFrom);
        assetSumCalc_Budget.parmDateTo(_dateTo);

        return assetSumCalc_Budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetYear</Name>
				<Source><![CDATA[
    public static AssetSumCalc_Budget newAssetYear(
             Range      _rangeAssetId,
             Range      _rangeBookId,
             Range      _rangeBudgetModel,
             TransDate  _assetDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
             AssetYear  _assetYear          = AssetYear::All
            )
    {
        AssetSumCalc_Budget assetSumCalc_Budget = new AssetSumCalc_Budget();
        ;
        assetSumCalc_Budget.parmRangeAssetId(_rangeAssetId);
        assetSumCalc_Budget.parmRangeBookId(_rangeBookId);
        assetSumCalc_Budget.parmRangeBudgetModel(_rangeBudgetModel);
        assetSumCalc_Budget.parmDateTo(_assetDate);
        assetSumCalc_Budget.parmAssetYear(_assetYear);

        return assetSumCalc_Budget;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>