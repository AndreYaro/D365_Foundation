<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostProdIndirectData_Invent</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostProdIndirectData_Invent extends InventCostProdIndirectData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the member-variables based on information from an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// An inventory transaction record.
    /// </param>
    protected void initFromInventTrans(InventTrans _inventTrans)
    {
        InventTransOrigin   inventTransOrigin = _inventTrans.inventTransOrigin();
        ProdTable           prodTable = ProdTable::find(inventTransOrigin.ReferenceId);

        this.initReference(
            inventTransOrigin.ReferenceId,
            InventCostProdIndirectData::inventTrans2ProdTransRefType(inventTransOrigin.ReferenceCategory),
            this.isTransactionPhysical(_inventTrans, prodTable),
            _inventTrans.inventDim().InventSiteId,
            inventTransOrigin.InventTransId,
            prodTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction is to be updated physically.
    /// </summary>
    /// <param name="_inventTrans">
    /// The inventory transaction record.
    /// </param>
    /// <param name="_prodTable">
    /// The production order header record that corresponds to the inventory transaction.
    /// </param>
    /// <returns>
    /// true if the transaction is to be updated physically; otherwise, false.
    /// </returns>
    protected boolean isTransactionPhysical(InventTrans _inventTrans, ProdTable _prodTable)
    {
        boolean transactionIsPhysical;

        if (_prodTable.RecId != 0)
        {
            transactionIsPhysical =
                _prodTable.ProdStatus != ProdStatus::Completed;
        }
        else
        {
            //The transaction status is used only if prodTable has been deleted (ended).
            transactionIsPhysical = !_inventTrans.isUpdatedFinancial();
        }

        return transactionIsPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedItemCostGroupRollupListMap</Name>
				<Source><![CDATA[
        public Map parmConsumedItemCostGroupRollupListMap(Map _consumedItemCostGroupRollupListMap = itemCostGroupRollupListMap)
    {
        itemCostGroupRollupListMap = _consumedItemCostGroupRollupListMap;

        return itemCostGroupRollupListMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static InventCostProdIndirectData_Invent construct()
    {
        return new InventCostProdIndirectData_Invent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsumptionFromInventTrans</Name>
				<Source><![CDATA[
        public static InventCostProdIndirectData newConsumptionFromInventTrans(
        InventTrans                      _inventTrans,
        Qty                              _finishedQty,
        ItemId                           _consumedItemId,
        Qty                              _consumedQty,
        CostAmount                       _consumedCostAmount,
        boolean                          _postLedger,
        InventItemCostGroupRollupList    _consumedCostGroupRollupList = null
        , boolean                        _stornoPhysical = false
        )
    {
        InventCostProdIndirectData_Invent prodIndirectData = InventCostProdIndirectData_Invent::construct();

        prodIndirectData.initFromInventTrans(_inventTrans);
        prodIndirectData.initFinishedGood(_inventTrans.ItemId, _finishedQty);

        // Build the map with the consumptions
        prodIndirectData.initItemCostGroupRollupListMap(
            _consumedItemId,
            _consumedQty,
            _consumedCostAmount,
            _consumedCostGroupRollupList);

        prodIndirectData.parmPostLedger(_postLedger);

        // <GEERU>
        prodIndirectData.parmStornoPhysical(_stornoPhysical);
        // </GEERU>

        return prodIndirectData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsumptionFromLeanProductionFlow</Name>
				<Source><![CDATA[
        public static InventCostProdIndirectData newConsumptionFromLeanProductionFlow(
        PlanName                            _transRefId,        // Where do the transactions belong to
        DimensionDefault                    _defaultDimension,         // Which dimensions should be used for the posting
        InventSiteId                        _inventSiteId,      // From which site should the indirect factors be used
        boolean                             _physical,          // Should this be a financial or physical posting
        Map                                 _itemCostGroupRollupListMap)
    {
        InventCostProdIndirectData_Invent      prodIndirectData = InventCostProdIndirectData_Invent::construct();

        prodIndirectData.initReference(_transRefId,
                                       ProdTransRefType::ProductionFlow,
                                       _physical,
                                       _inventSiteId,
                                       '',
                                       _defaultDimension);

        // For the production flow, no finished good item is set

        prodIndirectData.parmConsumedItemCostGroupRollupListMap(_itemCostGroupRollupListMap);

        return prodIndirectData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsumptionFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostProdIndirectData_Invent</c> class.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> record that represents a production order.
    /// </param>
    /// <param name="_finishedQty">
    /// A real value that represents a produced finished quantity.
    /// </param>
    /// <param name="_consumedItemId">
    /// A string value that represents an item ID that is consumed to the production order.
    /// </param>
    /// <param name="_consumedQty">
    /// A real value that represents the consumed quantity.
    /// </param>
    /// <param name="_consumedCostAmount">
    /// A real value that represents the consumed value.
    /// </param>
    /// <param name="_postLedger">
    /// A boolean value that represents if the ledger should be posted.
    /// </param>
    /// <param name="_consumedCostGroupRollupList">
    /// A <c>InventItemCostGroupRollupList</c> object that holds the cost broken down.
    /// </param>
    /// <returns>
    /// A <c>InventCostProdIndirectData_Invent</c> object.
    /// </returns>
    public static InventCostProdIndirectData newConsumptionFromProdTable(
        ProdTable                        _prodTable,
        Qty                              _finishedQty,
        ItemId                           _consumedItemId,
        Qty                              _consumedQty,
        CostAmount                       _consumedCostAmount,
        boolean                          _postLedger,
        InventItemCostGroupRollupList    _consumedCostGroupRollupList = null
        )
    {
        InventCostProdIndirectData_Invent prodIndirectData = InventCostProdIndirectData_Invent::construct();

        // Set the reference
        prodIndirectData.initReference(_prodTable.ProdId,
                                       ProdTransRefType::Production,
                                       _prodTable.ProdStatus == ProdStatus::Completed ? NoYes::No : NoYes::Yes,
                                       _prodTable.inventDim().InventSiteId,
                                       _prodTable.InventTransId,
                                       _prodTable.DefaultDimension);

        prodIndirectData.initFinishedGood(_prodTable.ItemId, _finishedQty);

        // Build the map with the consumptions
        prodIndirectData.initItemCostGroupRollupListMap(
            _consumedItemId,
            _consumedQty,
            _consumedCostAmount,
            _consumedCostGroupRollupList);

        prodIndirectData.parmPostLedger(_postLedger);

        return prodIndirectData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsumptionProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostProdIndirectData_Invent</c> class.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> record that represents a production order.
    /// </param>
    /// <param name="_finishedQty">
    /// A real value that represents a produced finished quantity.
    /// </param>
    /// <param name="_consumedItemId">
    /// A string value that represents an item ID that is consumed to the production order.
    /// </param>
    /// <param name="_consumedQty">
    /// A real value that represents the consumed quantity.
    /// </param>
    /// <param name="_consumedCostAmount">
    /// A real value that represents the consumed value.
    /// </param>
    /// <param name="_consumedCostGroupRollupList">
    /// A <c>InventCostGroupRollupList</c> object that holds the cost broken down.
    /// </param>
    /// <returns>
    /// A <c>InventCostProdIndirectData_Invent</c> object.
    /// </returns>
    public static InventCostProdIndirectData newConsumptionProdTable(
        ProdTable                        _prodTable,
        Qty                              _finishedQty,
        ItemId                           _consumedItemId,
        Qty                              _consumedQty,
        CostAmount                       _consumedCostAmount,
        InventItemCostGroupRollupList    _consumedCostGroupRollupList = null
        )
    {
        InventCostProdIndirectData_Invent       prodIndirectData            = InventCostProdIndirectData_Invent::construct();
        Map                                     itemCostGroupRollupListMap  = new Map(Types::String, Types::Class);

        // Set the reference
        prodIndirectData.initReference(_prodTable.prodId,
                                       ProdTransRefType::Production,
                                       _prodTable.ProdStatus != ProdStatus::Completed,
                                       _prodTable.inventDim().InventSiteId,
                                       _prodTable.InventTransId,
                                       _prodTable.DefaultDimension);

        // Now init the finished good
        prodIndirectData.initFinishedGood(_prodTable.ItemId, _finishedQty);

        // Now build the map with the consumptions
        prodIndirectData.initItemCostGroupRollupListMap(
            _consumedItemId,
            _consumedQty,
            _consumedCostAmount,
            _consumedCostGroupRollupList);

        return prodIndirectData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinishedFromInventTrans</Name>
				<Source><![CDATA[
        public static InventCostProdIndirectData newFinishedFromInventTrans(
        InventTrans _inventTrans,
        Qty         _finishedQty,
        Level       _level,
        boolean     _postLedger
        )
    {
        InventCostProdIndirectData_Invent prodIndirectData = InventCostProdIndirectData_Invent::construct();

        prodIndirectData.initFromInventTrans(_inventTrans);
        prodIndirectData.initFinishedGood(_inventTrans.ItemId, _finishedQty);

        prodIndirectData.parmLevel(_level);
        prodIndirectData.parmPostLedger(_postLedger);

        return prodIndirectData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinishedFromLeanProductionFlow</Name>
				<Source><![CDATA[
        public static InventCostProdIndirectData newFinishedFromLeanProductionFlow(
        PlanName                            _transRefId,        // Where do the transactions belong to
        DimensionDefault                    _defaultDimension,         // Which dimensions should be used for the posting
        InventSiteId                        _inventSiteId,      // From which site should the indirect factors be used
        boolean                             _physical,          // Should this be a financial or physical posting
        ItemId                              _finishedGood,
        Qty                                 _finishedQty
        )
    {
        InventCostProdIndirectData_Invent      prodIndirectData = InventCostProdIndirectData_Invent::construct();

        prodIndirectData.initReference(_transRefId,
                                       ProdTransRefType::ProductionFlow,
                                       _physical,
                                       _inventSiteId,
                                       '',
                                       _defaultDimension);

        prodIndirectData.initFinishedGood(_finishedGood,
                                          _finishedQty);

        return prodIndirectData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>