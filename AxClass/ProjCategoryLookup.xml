<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCategoryLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCategoryLookup
{
    NoYes               subscription;
    boolean             filterSubscription;
    boolean             useQueryCache;
    boolean             filterEstimate;
    boolean             filterIndirectComponent;
    boolean             showActiveOrSubscription;
    boolean             showInactiveCategories;
    boolean             production;
    boolean             excludeRevenue;
    boolean             expense;
    str                 formName;

    boolean             isIntercompany;

    ProjCategoryType    categoryType;
    ProjValCheckTrans   projValCheckTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryForWBSTaskCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the project category lookup query.
    /// </summary>
    /// <param name="_projId">
    /// Project ID used in the transaction.
    /// </param>
    /// <returns>
    /// The lookup query for project category.
    /// </returns>
    public Query buildQueryForWBSTaskCategory(ProjId _projId)
    {
        Query   query = new Query();

        QueryBuildDataSource projCategoryDS = query.addDataSource(tableNum(ProjCategory));

        QueryBuildRange rangeType = projCategoryDS.addRange(fieldNum(ProjCategory,CategoryType));
        rangeType.value(queryValue(categoryType));
        rangeType.status(RangeStatus::Locked);

        if (_projId && ProjCategory::createProjConnectionProjTable(ProjTable::find(_projId)))
        {
            QueryBuildDataSource projectCategoryAssocDS = projCategoryDS.addDataSource(tableNum(ProjProjectCategoryAssoc));
            projectCategoryAssocDS.relations(false);
            projectCategoryAssocDS.joinMode(JoinMode::ExistsJoin);
            projectCategoryAssocDS.addLink(fieldNum(ProjCategory, CategoryId), fieldNum(ProjProjectCategoryAssoc, CategoryId));
            projectCategoryAssocDS.addRange(fieldNum(ProjProjectCategoryAssoc, ProjId)).value(_projId);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the project category lookup query.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID of the table that has a foreign key to project category table.
    /// </param>
    /// <param name="_projId">
    /// Project ID used in the transaction,
    /// </param>
    /// <param name="_resourceRecId">
    /// Record ID of the resource used in the transaction.
    /// </param>
    /// <param name="_projTable">
    /// <c>ProjTable</c> record related to the transaction; optional.
    /// </param>
    /// <param name="_refRecord">
    /// The records that contains the foreign key to category.
    /// </param>
    /// <returns>
    /// The lookup query for project category.
    /// </returns>
    /// <remarks>
    /// The <c>_refRecord</c> parameter is currently used for entities from AP module only, i.e. purchase order line, and vendor invoice line.
    /// </remarks>
    public Query buildQuery(TableId _tableId, ProjId _projId, ResourceRecId _resourceRecId, ProjTable _projTable = null, Common _refRecord = null)
    {
        return this.buildQuery_PSA_impl(_tableId, _projId, _resourceRecId, _projTable, _refRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery_PSA_impl</Name>
				<Source><![CDATA[
    protected Query buildQuery_PSA_impl(TableId _tableId, ProjId _projId, ResourceRecId _resourceRecId, ProjTable _projTable = null, Common _refRecord = null)
    {
        Query                       q = new Query();
        QueryBuildRange             rangeType, rangeRevenue;
        QueryBuildDataSource        categoryDS,
                                    emplCategoryAssocDS,
                                    projectCategoryAssocDS,
                                    categoryTableDS;
        SysGlobalCache              cache = classfactory.globalCache();
        container                   cacheKey;
        boolean                     fromCache = false;
        boolean                     createEmplConnection = _resourceRecId && ProjCategory::createResourceConnection(_resourceRecId, isIntercompany);
        boolean                     createProjConnection;
        SalesPurchLine              salesPurchLine;
        VendInvoiceInfoLine_Project vendInvInfoLineProj;

        if (_projTable)
        {
            createProjConnection = ProjCategory::createProjConnectionProjTable(_projTable);
        }
        else if (_projId)
        {
            createProjConnection = ProjCategory::createProjConnection(_projId);
        }

        // When we use this method to fill project details from TSTimesheetService
        // This code path is hit many times. this makes instantiating the objects
        // for the query very expensive â€“ that is why this cache is used.
        cacheKey = [_tableId,
                    categoryType,
                    excludeRevenue,
                    showActiveOrSubscription,
                    showInactiveCategories,
                    filterSubscription,
                    filterEstimate,
                    showInactiveCategories,
                    createEmplConnection,
                    createProjConnection,
                    production];

        if (useQueryCache && cache.isSet(classStr(ProjCategoryLookup), cacheKey))
        {
            q = cache.get(classStr(ProjCategoryLookup), cacheKey);
            fromCache = true;
        }

        if (!fromCache)
        {
            categoryDS = q.addDataSource(tableNum(ProjCategory));

            switch (_tableId)
            {
                case tableNum(AdvancedLedgerEntryLine) :
                    categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::valueNot(ProjCategoryType::Item));
                    break;

                case tableNum(ProjTransferPrice) :
                    categoryDS.addRange(fieldNum(ProjCategory, SetupSubscription)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, SetupEstimate)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, psaIndirectComponent)).value(queryValue(NoYes::No));
                    break;

                case tableNum(PurchLine) :
                case tableNum(PurchReqLine):
                case tableNum(PurchRFQCaseLine):

                    categoryDS.addRange(fieldNum(ProjCategory, SetupSubscription)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, SetupEstimate)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, psaIndirectComponent)).value(queryValue(NoYes::No));
                    String50 categoryTypeFilterValue = enum2Value(ProjCategoryType::Item);

                    if (_refRecord.TableId == tableNum(PurchLine) ||
                        _refRecord.TableId == tableNum(PurchReqLine) ||
                        _refRecord.TableId == tableNum(PurchRFQCaseLine))
                    {
                        salesPurchLine = _refRecord;
                        if (!salesPurchLine.salesPurchLineInterface().parmItemId())
                        {
                            categoryTypeFilterValue += ',' + enum2Value(ProjCategoryType::Hour) + ',' + enum2Value(ProjCategoryType::Cost);
                        }
                    }
                    categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(categoryTypeFilterValue);
                    break;

                case tableNum(BudgetReservationLine_PSN):
                    categoryDS.addRange(fieldNum(ProjCategory, SetupSubscription)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, SetupEstimate)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, psaIndirectComponent)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Item));
                    categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Hour));
                    categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Cost));
                    break;

                case tableNum(VendInvoiceInfoLine_Project) :
                    categoryDS.addRange(fieldNum(ProjCategory, SetupSubscription)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, SetupEstimate)).value(queryValue(NoYes::No));
                    categoryDS.addRange(fieldNum(ProjCategory, psaIndirectComponent)).value(queryValue(NoYes::No));

                    if (_refRecord.TableId == tableNum(VendInvoiceInfoLine_Project))
                    {
                        vendInvInfoLineProj = _refRecord;
                        // Vendor invoice lines related to project in other LE should be either expense or hour, regardless
                        // of being related to inventory
                        if (vendInvInfoLineProj.isIntercompany() == false)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Item));
                        }
                        if (vendInvInfoLineProj.isIntercompany() || !vendInvInfoLineProj.getVendInvoiceInfoLine().ItemId)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Hour));
                            categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Cost));
                        }
                    }
                    else
                    {
                        categoryDS.addRange(fieldNum(ProjCategory, CategoryType)).value(SysQuery::value(ProjCategoryType::Item));
                    }
                    break;
                case tableNum(TSTimesheetLine) :
                    this.updateQueryRangeTsTimesheetLine(categoryDS, _projId);
                    break;

                default:
                    if (categoryType != ProjCategoryType::None)
                    {
                        rangeType = categoryDS.addRange(fieldNum(ProjCategory,CategoryType));
                        rangeType.value(queryValue(categoryType));
                        rangeType.status(RangeStatus::Locked);

                        if (categoryType == ProjCategoryType::Hour)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,psaIndirectComponent)).value(queryValue(NoYes::No));
                        }
                        if (categoryType == ProjCategoryType::Revenue)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,psaCustPaymentRetention)).value(queryValue(NoYes::No));
                        }
                    }

                    if (excludeRevenue)
                    {
                        rangeRevenue = categoryDS.addRange(fieldNum(ProjCategory,CategoryType));
                        rangeRevenue.value(strFmt('(%1 != %2)' ,  fieldStr(ProjCategory,CategoryType), enum2int(ProjCategoryType::Revenue)));
                        rangeRevenue.status(RangeStatus::Locked);
                    }

                    if (showActiveOrSubscription)
                    {
                        if (!showInactiveCategories)
                        {
                            // Show categories that are active OR subscription (this has been done for Fee categories on Quotation Lines)
                            categoryDS.addRange(fieldNum(ProjCategory,SetupSubscription)).value(
                                strFmt('( (%1.%2 == %3) || (%1.%4 == %5) ) && (%1.%6 == %7)',
                                    categoryDS.name(),
                                    fieldStr(ProjCategory,Active),            int2str(enum2int(NoYes::Yes)),
                                    fieldStr(ProjCategory,SetupSubscription), int2str(enum2int(NoYes::Yes)),
                                    fieldStr(ProjCategory,SetupEstimate),     int2str(enum2int(NoYes::No))));
                        }
                        else
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,SetupEstimate)).value(queryValue(NoYes::No));
                        }
                    }
                    else
                    {
                        if (filterSubscription)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,SetupSubscription)).value(queryValue(subscription));
                        }

                        if (filterEstimate)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,SetupEstimate)).value(queryValue(NoYes::No));
                        }

                        if (filterIndirectComponent)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,psaIndirectComponent)).value(queryValue(NoYes::No));
                        }

                        if (this.isJournal(_tableId) && !showInactiveCategories)
                        {
                            categoryDS.addRange(fieldNum(ProjCategory,Active)).value(queryValue(NoYes::Yes));
                        }
                    }
            }
        }
        if (createEmplConnection)
        {
            if (fromCache)
            {
                emplCategoryAssocDS = q.dataSourceTable(tableNum(ProjEmplCategoryAssoc));
                emplCategoryAssocDS.rangeField(fieldNum(ProjEmplCategoryAssoc, Resource)).value(queryValue(_resourceRecId));
            }
            else
            {
                emplCategoryAssocDS = categoryDS.addDataSource(tableNum(ProjEmplCategoryAssoc));
                emplCategoryAssocDS.relations(false);
                emplCategoryAssocDS.joinMode(JoinMode::ExistsJoin);
                emplCategoryAssocDS.addLink(fieldNum(ProjCategory, CategoryId), fieldNum(ProjEmplCategoryAssoc, CategoryId));
                emplCategoryAssocDS.addRange(fieldNum(ProjEmplCategoryAssoc, Resource)).value(queryValue(_resourceRecId));
            }
        }
        if (createProjConnection)
        {
            if (fromCache)
            {
                projectCategoryAssocDS = q.dataSourceTable(tableNum(ProjProjectCategoryAssoc));
                projectCategoryAssocDS.rangeField(fieldNum(ProjProjectCategoryAssoc, ProjId)).value(_projId);
            }
            else
            {
                projectCategoryAssocDS = categoryDS.addDataSource(tableNum(ProjProjectCategoryAssoc));
                projectCategoryAssocDS.relations(false);
                projectCategoryAssocDS.joinMode(JoinMode::ExistsJoin);
                projectCategoryAssocDS.addLink(fieldNum(ProjCategory, CategoryId), fieldNum(ProjProjectCategoryAssoc, CategoryId));
                projectCategoryAssocDS.addRange(fieldNum(ProjProjectCategoryAssoc, ProjId)).value(_projId);
            }
        }
        if (production)
        {
            categoryTableDS = categoryDS.addDataSource(tableNum(CategoryTable));
            categoryTableDS.joinMode(JoinMode::InnerJoin);
            categoryTableDS.addLink(fieldNum(ProjCategory, CategoryId), fieldNum(CategoryTable, CategoryId));
            categoryTableDS.addRange(fieldNum(CategoryTable, UseInProduction)).value(queryValue(NoYes::Yes));
        }
        if (expense)
        {
            categoryTableDS = categoryDS.addDataSource(tableNum(CategoryTable));
            categoryTableDS.joinMode(JoinMode::InnerJoin);
            categoryTableDS.addLink(fieldNum(ProjCategory, CategoryId), fieldNum(CategoryTable, CategoryId));
            categoryTableDS.addRange(fieldNum(CategoryTable, UseInExpense)).value(queryValue(NoYes::Yes));
        }
        //No need to store in cache if the object came from cache in the first place
        if (useQueryCache && !fromCache)
        {
            cache.set(classStr(ProjCategoryLookup), cacheKey, q);
        }
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRangeTsTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates timesheet project category query by adding new range values.
    /// </summary>
    /// <param name = "_projCategoryDatasource">
    ///     Project category query build datasource object.
    /// </param>
    /// <param name = "_projId">
    ///     A Project id.
    /// </param>
    protected void updateQueryRangeTsTimesheetLine(QueryBuildDataSource _projCategoryDatasource, ProjId _projId)
    {
        ProjParameters  projParameters = ProjParameters::find();
        QueryBuildRange queryBuildRange;
        NoYes           isAbsence;

        // Add absence category filter
        if (_projId &&
        (!ProjCategory::createProjConnection(_projId) || projParameters.ValidationProjCategory == ProjValParameter::Lookup) &&
        projParameters.TimesheetValidateAbsence)
        {
            isAbsence = _projId == projParameters.TimesheetAbsenceProjId;
            _projCategoryDatasource.addRange(fieldNum(ProjCategory, TsAbsence)).value(SysQuery::value(isAbsence));
        }

        _projCategoryDatasource.addRange(fieldNum(ProjCategory,psaIndirectComponent)).value(queryValue(NoYes::No));
        queryBuildRange = _projCategoryDatasource.addRange(fieldNum(ProjCategory,CategoryType));
        queryBuildRange.value(queryValue(categoryType));
        queryBuildRange.status(RangeStatus::Locked);

        queryBuildRange = _projCategoryDatasource.addRange(fieldNum(ProjCategory,Active));
        queryBuildRange.value(queryValue(NoYes::Yes));
        queryBuildRange.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryType</Name>
				<Source><![CDATA[
    public ProjCategoryType getCategoryType()
    {
        return categoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterEstimate</Name>
				<Source><![CDATA[
    public boolean getFilterEstimate()
    {
        return filterEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterSubscription</Name>
				<Source><![CDATA[
    public boolean getFilterSubscription()
    {
        return filterSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProduction</Name>
				<Source><![CDATA[
    public boolean getProduction()
    {
        return production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowActiveOrSubscription</Name>
				<Source><![CDATA[
    public boolean getShowActiveOrSubscription()
    {
        return showActiveOrSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowInactiveCategories</Name>
				<Source><![CDATA[
    public boolean getShowInactiveCategories()
    {
        return showInactiveCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubscription</Name>
				<Source><![CDATA[
    public NoYes getSubscription()
    {
        return subscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournal</Name>
				<Source><![CDATA[
    private boolean isJournal(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(ProjJournalTrans)        ||
        _tmpTableId == tableNum(InventJournalTrans)      ||
        _tmpTableId == tableNum(LedgerJournalTrans)      ||
        _tmpTableId == tableNum(LedgerJournalTrans_Project) ||
        _tmpTableId == tableNum(TmpProjAdjustmentCreate) ||
        _tmpTableId == tableNum(SalesTable)              ||
        _tmpTableId == tableNum(SalesLine)               ||
        _tmpTableId == tableNum(PurchTable)              ||
        _tmpTableId == tableNum(ProjForecastEmpl)        ||
        _tmpTableId == tableNum(ProjForecastRevenue)     ||
        _tmpTableId == tableNum(ProjForecastCost)        ||
        _tmpTableId == tableNum(ForecastSales)           ||
        _tmpTableId == tableNum(ProjControlPeriodTable)  ||
        _tmpTableId == tableNum(PurchLine)               ||
        _tmpTableId == tableNum(InventTable)             ||
        _tmpTableId == tableNum(ProjJournalTable)        ||
        _tmpTableId == tableNum(ProjActivity)            ||
        _tmpTableId == tableNum(InventTable)             ||
        _tmpTableId == tableNum(ProjParameters)          ||
        _tmpTableId == tableNum(SMAServiceOrderLine)     ||
        _tmpTableId == tableNum(SMAAgreementLine)        ||
        _tmpTableId == tableNum(SalesQuotationLine)      ||
        _tmpTableId == tableNum(ProdRoute)               ||
        _tmpTableId == tableNum(ProdJournalRoute)       ||
        _tmpTableId == tableNum(CustInvoiceLine)       ||
        _tmpTableId == tableNum(CustInvoiceStandardLineTemplate)       ||
        _tmpTableId == tableNum(CustBillingCode)         ||
        _tmpTableId == tableNum(TSTimesheetLine)         ||
        formName   == classStr(Dialog)
    )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        filterSubscription = false;
        filterEstimate = false;
        filterIndirectComponent = false;
        production = false;
        showActiveOrSubscription = false;
        showInactiveCategories = false;
        subscription = NoYes::No;
        categoryType = ProjCategoryType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryType</Name>
				<Source><![CDATA[
    public ProjCategoryType parmCategoryType(ProjCategoryType _categoryType = categoryType)
    {
        categoryType = _categoryType;
        return categoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeRevenue</Name>
				<Source><![CDATA[
    public NoYes parmExcludeRevenue(NoYes    _excludeRevenue = excludeRevenue)
    {
        excludeRevenue  = _excludeRevenue;
        return excludeRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterEstimate</Name>
				<Source><![CDATA[
    public NoYes parmFilterEstimate(NoYes    _filterEstimate = filterEstimate)
    {
        filterEstimate  = _filterEstimate;
        return filterEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterIndirectComponent</Name>
				<Source><![CDATA[
    public NoYes parmFilterIndirectComponent(NoYes _filterIndirectComponent = filterIndirectComponent)
    {
        filterIndirectComponent  = _filterIndirectComponent;
        return filterIndirectComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterSubscription</Name>
				<Source><![CDATA[
    public boolean parmFilterSubscription(boolean    _filterSubscription = filterSubscription)
    {
        filterSubscription  = _filterSubscription;
        return filterSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormName</Name>
				<Source><![CDATA[
    public str parmFormName(str _formName = formName)
    {
        formName = _formName;
        return formName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsIntercompany</Name>
				<Source><![CDATA[
    public boolean parmIsIntercompany(boolean _isIntercompany = isIntercompany)
    {
        isIntercompany = _isIntercompany;
        return isIntercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduction</Name>
				<Source><![CDATA[
    public boolean parmProduction(boolean _production = production)
    {
        production = _production;
        return production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowActiveOrSubscription</Name>
				<Source><![CDATA[
    public boolean parmShowActiveOrSubscription(boolean _showActiveOrSubscription)
    {
        showActiveOrSubscription = _showActiveOrSubscription;
        return showActiveOrSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInactiveCategories</Name>
				<Source><![CDATA[
    public boolean parmShowInactiveCategories(boolean _showInactiveCategories = showInactiveCategories)
    {
        showInactiveCategories = _showInactiveCategories;
        return showInactiveCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscription</Name>
				<Source><![CDATA[
    public NoYes parmSubscription(NoYes    _subscription = subscription)
    {
        subscription  = _subscription;
        return subscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjValCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ProjValCheckTrans</c> parameter.
    /// </summary>
    /// <param name="_projValCheckTrans">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>ProjValCheckTrans</c> parameter.
    /// </returns>
    /// <remarks>
    /// This is used in the initialize the value in the form.
    /// </remarks>
    public projValCheckTrans parmProjValCheckTrans(projValCheckTrans _projValCheckTrans = projValCheckTrans)
    {
        projValCheckTrans  = _projValCheckTrans;
        return projValCheckTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseQueryCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>UseQueryCache</c> parameter.
    /// </summary>
    /// <param name="_useQueryCache">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>UseQueryCache</c> parameter.
    /// </returns>
    /// <remarks>
    /// This is used in the PSA implementation of the buildQuery
    /// </remarks>
    public boolean parmUseQueryCache(boolean _useQueryCache = useQueryCache)
    {
        useQueryCache = _useQueryCache;
        return useQueryCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpense</Name>
				<Source><![CDATA[
    public boolean parmExpense(boolean _expense = expense)
    {
        expense = _expense;
        return expense;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>