<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReportTuning</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayReportTuning
{
    RPayReportTuningTable   rPayReportTuningTable;
    FormDataSource          rPayReportTuningTableDs;
    container               parameterName;
    RPayReportName          reportName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void clear()
    {
        ttsbegin;

        delete_from rPayReportTuningTable
            where rPayReportTuningTable.ReportName == reportName;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void init()
    {
        LabelId       labelId;
        LanguageId    userLngId;
        int i;

        select count(RecId) from rPayReportTuningTable
            where rPayReportTuningTable.ReportName == reportName;

        if (rPayReportTuningTable.RecId == conLen(parameterName))
        {
            return;
        }

        ttsbegin;

        delete_from rPayReportTuningTable
            where rPayReportTuningTable.ReportName == reportName;

        userLngId = LanguageTable::defaultLanguage();

        for (i = 1; i <= conLen(parameterName); i++)
        {
            labelId = conPeek(parameterName, i);

            if (!SysLabel::isLabelId(labelId))
            {
                throw error(Error::missingParameter(null));
            }

            rPayReportTuningTable.ParameterCode  = i;
            rPayReportTuningTable.ParmLabelId    = labelId;
            rPayReportTuningTable.ReportName     = reportName;
            rPayReportTuningTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void lookup(FormStringControl _lookupCtrl)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEDT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup based on extended type id.
    /// </summary>
    /// <param name="_typeId">
    /// The extended type id.
    /// </param>
    /// <param name="_lookupCtrl">
    /// The form control to perform lookup for.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookupEDT(ExtendedTypeId _typeId, FormStringControl _lookupCtrl)
    {
        Query query = new Query();
        SysTableLookup sysTableLookup;

        switch (_typeId)
        {
            case extendedTypeNum(RpayBudgetFund):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayCounterTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayCounterTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, LineType)).value(queryValue(RPayCtypeType::BudgetFund));
                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, CounterType)).value(queryValue(RPayCounterType::Fund));

                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, CounterUnit));
                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, Name));
                break;

            case extendedTypeNum(RPayGroup):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayGroupTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayGroupTable));

                sysTableLookup.addLookupfield(fieldNum(RPayGroupTable, PayGroup));
                sysTableLookup.addLookupfield(fieldNum(RPayGroupTable, Name));
                break;

            case extendedTypeNum(RpayTimeGroupCode):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayTimeGroupTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayTimeGroupTable));

                sysTableLookup.addLookupfield(fieldNum(RPayTimeGroupTable, TimeGroup));
                sysTableLookup.addLookupfield(fieldNum(RPayTimeGroupTable, Name));
                break;

            case extendedTypeNum(RpayTaxDeductionCode):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayTaxDeductionTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayTaxDeductionTable));

                sysTableLookup.addLookupfield(fieldNum(RPayTaxDeductionTable, RpayTaxDeductionCode));
                sysTableLookup.addLookupfield(fieldNum(RPayTaxDeductionTable, Name));
                break;

            case extendedTypeNum(RHRMReasonCodeId):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RHRMReasonCode), _lookupCtrl);
                query.addDataSource(tableNum(RHRMReasonCode));

                sysTableLookup.addLookupfield(fieldNum(RHRMReasonCode, ReasonCodeId));
                sysTableLookup.addLookupfield(fieldNum(RHRMReasonCode, Description));
                break;

            case extendedTypeNum(RpayFundDeductionCode):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayFundDeductionTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayFundDeductionTable));

                sysTableLookup.addLookupfield(fieldNum(RPayFundDeductionTable, RpayFundDeductionCode));
                sysTableLookup.addLookupfield(fieldNum(RPayFundDeductionTable, Name));
                break;

            case extendedTypeNum(RPayRateCode):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayRateTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayRateTable));

                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, PayRate));
                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, Name));
                break;

            case extendedTypeNum(RPayStandardDeductionCode):
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayStandardDeductionTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayStandardDeductionTable));

                sysTableLookup.addLookupfield(fieldNum(RPayStandardDeductionTable, DeductionCode));
                sysTableLookup.addLookupfield(fieldNum(RPayStandardDeductionTable, DeductionName));
                break;
        }

        if (sysTableLookup)
        {
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        #define.DataSourceName("PayReportTuningTable")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(RPayReportName _reportName, FormRun _formRun)
    {
        rPayReportTuningTableDs = _formRun.dataSource(#dataSourceName);
        reportName              = _reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportTemplate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void openReportTemplate()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void printReport()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean validateWrite()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static RPayReportTuning construct(RPayReportName _reportName, FormRun _formRun)
    {
        RPayReportTuning  rPayReportTuning;
        switch (_reportName)
        {
            case RPayReportName::RPayEmplMonthIncome:
                rPayReportTuning = new RPayReportTuning_EmplMonthIncome(_reportName,_formRun);
                break;
            case RPayReportName::RPayEmplPensionIncome:
                rPayReportTuning = new RPayReportTuning_EmplPensionIncome(_reportName,_formRun);
                break;
            case RPayReportName::RPayNDFL1:
                rPayReportTuning = new RPayReportTuning_NDFL1(_reportName,_formRun);
                break;
            case RPayReportName::RPayCalcPaySheet:
                rPayReportTuning = new RPayReportTuning_CalcPaySheet(_reportName,_formRun);
                break;
            case RPayReportName::RHrmReportT54a:
                rPayReportTuning = new RpayReportTuning_ReportT54a(_reportName,_formRun);
                break;
            case RPayReportName::HeadCountOverWages:
                rPayReportTuning = new RPayReportTuning_HeadCountOverWages(_reportName, _formRun);
                break;
            case RPayReportName::RPayReport4SIF_2012:
                rPayReportTuning = new RPayReportTuning_Report4SIF_2012(_reportName, _formRun);
                break;
            case RPayReportName::RPayReportRSV1_2012:
                rPayReportTuning = new RPayReportTuning_ReportRSV1_2012(_reportName, _formRun);
                break;
            case RPayReportName::RPayPersonalCardReport_2010:
                rPayReportTuning = new RPayReportTuning_PersonalCardReport_2010(_reportName, _formRun);
                break;
            case RPayReportName::MilitaryReserve:
                rPayReportTuning = new RPayReportTuning_MilitaryReserve(_reportName, _formRun);
                break;
            case RPayReportName::RPayReport3F_2013:
                rPayReportTuning = new RPayReportTuning_Report3F_2013(_reportName, _formRun);
                break;
            case RPayReportName::RPayReportP4_2013:
                rPayReportTuning = new RPayReportTuning_ReportP4_2013(_reportName, _formRun);
                break;
            case RPayReportName::RPayReportRSV1_2013:
                rPayReportTuning = new RPayReportTuning_ReportRSV1_2013(_reportName, _formRun);
                break;
            case RPayReportName::RPayReport4SIF_2013:
                rPayReportTuning = new RPayReportTuning_Report4SIF_2013(_reportName, _formRun);
                break;
            case RPayReportName::RPayReport4SIF_2014:
                rPayReportTuning = new RPayReportTuning_Report4SIF_2014(_reportName, _formRun);
                break;
            case RPayReportName::RPayReportRSV1_2014:
                rPayReportTuning = new RPayReportTuning_ReportRSV1_2014(_reportName, _formRun);
                break;

            default:
                rPayReportTuning = new RPayReportTuning(_reportName,_formRun);
                break;
        }
        return rPayReportTuning;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>