<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesAgreementFulfillmentCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The batch job to calculate sales agreement fulfillment value.
/// </summary>
internal class RetailSalesAgreementFulfillmentCalculate extends RunBaseBatch implements BatchRetryable
{
    // The timeout for trying to acquire the lock to run the Calculate Sales Agreement Fulfillment Value Job will be 10 minutes.
    private const int RetailSalesAgreementCalculateAcquireLockTimeOutMilliseconds = 600000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sales agreement fulfillment value.
    /// </summary>
    public void calculate()
    {
        int64 numberOfAgreementLineFulfillmentDeleted = 0;
        int64 numberOfAgreementLineQuantityCommitmentInserted = 0;
        int64 numberOfAgreementLineQuantityCommitmentUpdated = 0;
        int64 numberOfAgreementLineValueCommitmentInserted = 0;
        int64 numberOfAgreementLineValueCommitmentUpdated = 0;

        using (var telemetry = RetailPricingInstrumentationSegment::construct(classStr(RetailSalesAgreementFulfillmentCalculate), methodStr(RetailSalesAgreementFulfillmentCalculate, calculate)))
        {
            ttsbegin;

            AgreementLine agreementLine;
            RetailSalesAgreementFulfillment fulfillment;

            select count(RecId) from fulfillment;
            numberOfAgreementLineFulfillmentDeleted = fulfillment.RecId;

            delete_from fulfillment
                exists join agreementLine
                where fulfillment.AgreementLine == agreementLine.RecId
                    && (!agreementLine.IsMaxEnforced
                        || agreementLine.IsDeleted
                        || agreementLine.AgreementLineType == CommitmentType::ProductCategory
                        || agreementLine.AgreementLineType == CommitmentType::ProductRootCategory);

            select count(RecId) from fulfillment;
            numberOfAgreementLineFulfillmentDeleted -= fulfillment.RecId;

            RecordInsertList recordInsertList = new RecordInsertList(tableNum(RetailSalesAgreementFulfillment));

            #AgreementsRemains

            while select agreementLine
                where agreementLine.IsMaxEnforced
                    && !agreementLine.IsDeleted
                    && (agreementLine.AgreementLineType == CommitmentType::ProductQuantity
                        || agreementLine.AgreementLineType == CommitmentType::ProductVolume)
            {
                container lineFulfillment = agreementLine.calculateAgreementRemansOnServer();
                real usedQuantityOrAmount;

                fulfillment = RetailSalesAgreementFulfillment::findByAgreementLine(agreementLine.RecId, true);

                if (agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
                {
                    AgreementLineQuantityCommitment agreementLineQuantity = agreementLine;
                    usedQuantityOrAmount = agreementLineQuantity.CommitedQuantity - conPeek(lineFulfillment, #RemainingIndex);

                    if (!fulfillment.RecId)
                    {
                        fulfillment.clear();
                        fulfillment.AgreementLine = agreementLine.RecId;
                        fulfillment.AgreementLineType = agreementLine.AgreementLineType;
                        fulfillment.UsedQuantity = usedQuantityOrAmount;
                        recordInsertList.add(fulfillment);
                        numberOfAgreementLineQuantityCommitmentInserted++;
                    }
                    else if (fulfillment.UsedQuantity != usedQuantityOrAmount)
                    {
                        fulfillment.UsedQuantity = usedQuantityOrAmount;
                        fulfillment.update();
                        numberOfAgreementLineQuantityCommitmentUpdated++;
                    }
                }
                else
                {
                    AgreementLineVolumeCommitment agreementLineVolume = agreementLine;
                    usedQuantityOrAmount = agreementLineVolume.CommitedAmount - conPeek(lineFulfillment, #RemainingIndex);

                    if (!fulfillment.RecId)
                    {
                        fulfillment.clear();
                        fulfillment.AgreementLine = agreementLine.RecId;
                        fulfillment.AgreementLineType = agreementLine.AgreementLineType;
                        fulfillment.UsedAmount = usedQuantityOrAmount;
                        recordInsertList.add(fulfillment);
                        numberOfAgreementLineValueCommitmentInserted++;
                    }
                    else if (fulfillment.UsedAmount != usedQuantityOrAmount)
                    {
                        fulfillment.UsedAmount = usedQuantityOrAmount;
                        fulfillment.update();
                        numberOfAgreementLineValueCommitmentUpdated++;
                    }
                }
            }

            recordInsertList.insertDatabase();
            ttscommit;

            telemetry.addExtendedData('numberOfAgreementLineFulfillmentDeleted', int642Str(numberOfAgreementLineFulfillmentDeleted));
            telemetry.addExtendedData('numberOfAgreementLineQuantityCommitmentInserted', int642Str(numberOfAgreementLineQuantityCommitmentInserted));
            telemetry.addExtendedData('numberOfAgreementLineQuantityCommitmentUpdated', int642Str(numberOfAgreementLineQuantityCommitmentUpdated));
            telemetry.addExtendedData('numberOfAgreementLineValueCommitmentInserted', int642Str(numberOfAgreementLineValueCommitmentInserted));
            telemetry.addExtendedData('numberOfAgreementLineValueCommitmentUpdated', int642Str(numberOfAgreementLineValueCommitmentUpdated));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;

        using (RetailJobSyncManager jobSyncManager = this.initJobSyncManager())
        {
            // We will try to acquire an update lock such that only one Calculate Sales Agreement Fulfillment Value job may execute at a time.
            // If we are unable to acquire the lock after the set time, the job will throw an exception.
            jobSyncManager.acquireUpdateLock(RetailSalesAgreementCalculateAcquireLockTimeOutMilliseconds);

            try
            {
                this.calculate();
            }
            catch(ex)
            {
                var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(classStr(RetailSalesAgreementFulfillmentCalculate), methodStr(RetailSalesAgreementFulfillmentCalculate, calculate));
                str exceptionStr = strFmt("%1 Exception details: %2", "@RetailPricing:RetailSalesAgreementFulfillmentCalculateError", RetailSalesAgreementFulfillmentCalculate::exceptionToString(ex));
                exceptionTelemetry.addExtendedData('Exception details', exceptionStr);
                exceptionTelemetry.log();
                throw error("@RetailPricing:RetailSalesAgreementFulfillmentCalculateError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailSalesAgreementFulfillmentCalculate construct()
    {
        return new RetailSalesAgreementFulfillmentCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailSalesAgreementFulfillmentCalculate scheduler = new RetailSalesAgreementFulfillmentCalculate();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RetailPricing:RetailSalesAgreementFulfillmentCalculateLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailSalesAgreementFulfillmentCalculate</c> class
    ///  can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailSalesAgreementFulfillmentCalculate</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJobSyncManager</Name>
				<Source><![CDATA[
    private RetailJobSyncManager initJobSyncManager()
    {
        str lockName = RetailJobSyncManagerHelper::getRetailSalesAgreementFulfillmentCalculateJobLockName();

        RetailJobSyncManager jobSyncManager = RetailJobSyncManager::construct(lockName, funcName());
        jobSyncManager.parmExceptionMessage("@RetailPricing:RetailJobSyncManagerExceptionMessageCalculateSalesAgreementFulfillment");

        return jobSyncManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionToString</Name>
				<Source><![CDATA[
    private static str exceptionToString(System.Exception _exception)
    {
        if (_exception != null)
        {
            str exceptionType = _exception.GetType().FullName;
            str stackTrace = _exception.StackTrace != null ? _exception.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            str exceptionMessage = _exception.Message != null ? _exception.Message : 'Exception message was null';
            str exceptionToLog = strFmt('Exception Type: %1 / Exception message: %2 / Exception stacktrace: %3', exceptionType, exceptionMessage, stackTrace);

            return exceptionToLog;
        }
        else
        {
            return strFmt('%1 was called with a null exception. Printing the current call stack: %2', funcName(),  System.Environment::StackTrace);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the job must be run in batch.
    /// </summary>
    /// <returns>Always return true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>