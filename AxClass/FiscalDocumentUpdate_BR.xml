<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentUpdate_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class can update specific fields of a fiscal document that are
/// allowed to be changed before the document is approved by the government.
/// </summary>
class FiscalDocumentUpdate_BR
{
    FiscalDocument_BR       fiscalDocument;
    FiscalEstablishment_BR  fe;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTribSubsitutionRegistry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tributary substitution registry if applicable.
    /// </summary>
    /// <returns>
    /// The tributary substitution registry if applicable; empty string otherwise.
    /// </returns>
    private TributarySubstitutionRegistry_BR getTribSubsitutionRegistry()
    {
        FiscalDocumentLine_BR               line;
        FiscalDocumentTaxTrans_BR           taxTrans;
        RecID                               postalAddressRecId;
        LogisticsPostalAddress              postalAddress;
        TributarySubstitutionRegistry_BR    ieNum;

        // Checks if tributary substitution is applicable to this document
        select firstOnly RecId from taxTrans
            exists join line
            where line.FiscalDocument           == fiscalDocument.RecId
               && taxTrans.FiscalDocumentLine   == line.RecId
               && taxTrans.Type == TaxType_BR::ICMSST;

        if (taxTrans)
        {
            if (fiscalDocument.DeliveryLogisticsPostalAddress)
            {
                postalAddressRecId = fiscalDocument.DeliveryLogisticsPostalAddress;
            }
            else
            {
                postalAddressRecId = fiscalDocument.ThirdPartyPostalAddress;
            }

            postalAddress = LogisticsPostalAddress::findRecId(postalAddressRecId);

            ieNum = FiscalEstablishmentIEPerState_BR::findByFiscalEstablishmentState(
                                                                        fe.RecId,
                                                                        postalAddress.State,
                                                                        postalAddress.CountryRegionId).IENum_BR;
        }

        return ieNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiantes a new object to update a given fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> that will be updated.
    /// </param>
    protected void new(FiscalDocument_BR _fiscalDocument)
    {
        fiscalDocument = _fiscalDocument;
        fe             = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
/// <summary>
    /// Performs the update operation.
    /// </summary>
    public void run()
    {
        FiscalEstablishment_BR  thirdpartyFe;
        CustTable               custTable;
        VendTable               vendTable;

        ttsBegin;

        fiscalDocument.selectForUpdate(true);

        fiscalDocument.FiscalEstablishmentCCMNum                = fe.CCMNum_BR;
        fiscalDocument.FiscalEstablishmentCNPJCPF               = fe.CNPJCPFNum_BR;
        fiscalDocument.FiscalEstablishmentIE                    = fe.IENum_BR;
        fiscalDocument.FiscalEstablishmentName                  = fe.Name;
        fiscalDocument.FiscalEstablishmentPhone                 = fe.phone();
        fiscalDocument.FiscalEstablishmentTribSubstitutionReg   = this.getTribSubsitutionRegistry();

        if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Customer)
        {
            custTable = CustTable::find(fiscalDocument.FiscalDocumentAccountNum);

            fiscalDocument.ThirdPartyCCMNum     = custTable.CCMNum_BR;
            fiscalDocument.ThirdPartyCNPJCPF    = custTable.CNPJCPFNum_BR;
            fiscalDocument.ThirdPartyIE         = custTable.IENum_BR;
            fiscalDocument.ThirdPartyForeignerId    = custTable.ForeignerId_BR;
            fiscalDocument.ThirdPartyName       = custTable.name();
            fiscalDocument.ThirdPartyPhone      = custTable.phone();
            fiscalDocument.ThirdPartyFax        = custTable.telefax();
        }
        else if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Vendor)
        {
            vendTable = VendTable::find(fiscalDocument.FiscalDocumentAccountNum);

            fiscalDocument.ThirdPartyCCMNum     = vendTable.CCMNum_BR;
            fiscalDocument.ThirdPartyCNPJCPF    = vendTable.CNPJCPFNum_BR;
            fiscalDocument.ThirdPartyIE         = vendTable.IENum_BR;
            fiscalDocument.ThirdPartyForeignerId    = vendTable.ForeignerId_BR;
            fiscalDocument.ThirdPartyName       = vendTable.name();
            fiscalDocument.ThirdPartyPhone      = vendTable.phone();
            fiscalDocument.ThirdPartyFax        = vendTable.telefax();
        }
        else
        {
            thirdpartyFe = FiscalEstablishment_BR::findById(fiscalDocument.FiscalDocumentAccountNum);

            fiscalDocument.ThirdPartyCCMNum     = thirdpartyFe.CCMNum_BR;
            fiscalDocument.ThirdPartyCNPJCPF    = thirdpartyFe.CNPJCPFNum_BR;
            fiscalDocument.ThirdPartyIE         = thirdpartyFe.IENum_BR;
            fiscalDocument.ThirdPartyName       = thirdpartyFe.Name;
            fiscalDocument.ThirdPartyPhone      = thirdpartyFe.phone();
        }

        fiscalDocument.AccessKey = EFDocFactory_BR::construct().createAccessKey(
            fe.EFDocVersion,
            fiscalDocument.NumericCode,
            fiscalDocument);

        fiscalDocument.update();

        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>FiscalDocumentUpdate_BR</c> to update a given fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> to be updated.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentUpdate_BR</c> to update the given fiscal document.
    /// </returns>
    public static FiscalDocumentUpdate_BR construct (FiscalDocument_BR _fiscalDocument)
    {
        return new FiscalDocumentUpdate_BR(_fiscalDocument);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>