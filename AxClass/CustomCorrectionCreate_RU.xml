<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomCorrectionCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomCorrectionCreate_RU extends RunBase
{
    TransDate                       correctionDate;
    CustomCorrectionReason_RU       correctionReason;
    NoYesId                         costCorrection;
    NoYesId                         storno;

    DialogField                     fieldCorrectionId;
    DialogField                     fieldCorrectionDate;
    DialogField                     fieldCorrectionReason;
    DialogField                     fieldCostCorrection;
    DialogField                     fieldDescription;
    DialogField                     fieldStorno;

    CustomCorrectionAllocation_RU   correctionAllocation;
    CustomCorrectionBase_RU         correctionBase;
    CustomAmount_RU                 correctionAmount;
    Description                     description;

    CustomJournalTable_RU           customJournalTable;
    CustomCorrectionTable_RU        customCorrectionTable;

    Set                             markedSet;
    boolean                         addLinesOnly;
    NumberSequenceTable             numberSequenceTable;
    CustomCorrectionId_RU           correctionId;

    CurrencyCode                    customCurrencyCode;
    Map                             partitionValues;
    Map                             partitionDuty;

    private const int currentVersion = 1;
    private const int retryNum = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustRemainAmount</Name>
				<Source><![CDATA[
    protected void adjustRemainAmount(RefRecId          _transRecId,
                                      CustomAmount_RU   _remainAmount)
    {
        CustomCorrectionTrans_RU    customCorrectionTrans;

        customCorrectionTrans = CustomCorrectionTrans_RU::findRecId(_transRecId, true);

        if (! customCorrectionTrans)
        {
            return;
        }

        customCorrectionTrans.CorrectionCost += _remainAmount;
        customCorrectionTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllocAmount</Name>
				<Source><![CDATA[
    protected CustomAmount_RU calcAllocAmount(CustomJournalTrans_RU _customJournalTrans,
                                              real                  _base)
    {
        CustomAmount_RU ret;

        if (! _base)
            return 0;

        switch (correctionBase)
        {
            case CustomCorrectionBase_RU::Amount:
                ret = CurrencyExchangeHelper::amount(correctionAmount * _customJournalTrans.InvoiceCostInclMarkup / _base, customCurrencyCode);
                break;

            case CustomCorrectionBase_RU::Qty:
                ret = CurrencyExchangeHelper::amount(correctionAmount * _customJournalTrans.Qty / _base, customCurrencyCode);
                break;

            case CustomCorrectionBase_RU::Weight:
                ret = CurrencyExchangeHelper::amount(correctionAmount * _customJournalTrans.ItemGrossWeight / _base, customCurrencyCode);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBase</Name>
				<Source><![CDATA[
    protected real calcBase(Query _query)
    {
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        CustomJournalTrans_RU   customJournalTrans;

        real                    base = 0;

        queryRun = new QueryRun(_query);

        qbds = queryRun.query().dataSourceTable(tableNum(CustomJournalTrans_RU));
        qbds.addSelectionField(fieldNum(CustomJournalTrans_RU, Qty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(CustomJournalTrans_RU, InvoiceCostInclMarkup), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(CustomJournalTrans_RU, ItemGrossWeight), SelectionField::Sum);
        qbds.orderMode(OrderMode::GroupBy);

        if (queryRun.next())
        {
            customJournalTrans = queryRun.get(tableNum(CustomJournalTrans_RU));
            switch (correctionBase)
            {
                case CustomCorrectionBase_RU::Amount:
                    base = customJournalTrans.InvoiceCostInclMarkup;
                    break;

                case CustomCorrectionBase_RU::Qty:
                    base = customJournalTrans.Qty;
                    break;

                case CustomCorrectionBase_RU::Weight:
                    base = customJournalTrans.ItemGrossWeight;
                    break;
            }
        }

        return base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCharges</Name>
				<Source><![CDATA[
    protected void calcCharges(CustomJournalTrans_RU    _customJournalTrans,
                               CustomCorrectionTrans_RU _customCorrectionTrans)
    {
        CustomJournalCalc_RU                customJournalCalc;
        CustomJournalTransOnDateAmounts_RU  customJournalTransOnDateAmounts;
        CustomChargeAmount_RU               costAmount;
        TransDate                           calcDate = customJournalTable.PlanArrivalDate;

        AmountMST                           partitionCostAmount;
        Qty                                 partitionQty;
        ItemGrossWeight                     partitionItemGrossWeight;
        Volume                              partitionVolume;

        AmountMST                           partitionCorrectionDuty, remainCorrectionDuty;

        TaxCode                             taxCodeDuty = FEACCCustomRateTable_RU::findOnDate(_customCorrectionTrans.feaccId,
                                                                                              TaxType_W::CustomDuty_RU,
                                                                                              CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType),
                                                                                              _customCorrectionTrans.CountryRegionId,
                                                                                              calcDate);
        TaxTable                            taxTableDuty = TaxTable::find(taxCodeDuty);
        TaxBase                             baseAmount;

        customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(_customJournalTrans, correctionDate);
        costAmount                      = //_customJournalTrans.estimativeAmount(CustomTotalType_RU::Cost)    +
                                          customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Cost)  +
                                          _customCorrectionTrans.CorrectionCost;

        customJournalCalc  = CustomJournalCalc_RU::construct();
        customJournalCalc.initFromTrans(_customJournalTrans);

    //    _customCorrectionTrans.CorrectionDuty   = CurrencyExchangeHelper::amount(customJournalCalc.calcDuty(_customCorrectionTrans.ItemId,_customCorrectionTrans.FEACCId, calcDate, costAmount, _customJournalTrans.Qty, _customJournalTrans.unitId)
    //                                                               - customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Duty)
    //                                                               //- _customJournalTrans.estimativeAmount(CustomTotalType_RU::Duty)
    //                                                               , customCurrencyCode);
        if (correctionAllocation != CustomCorrectionAllocation_RU::Partition)
        {
            if (!costAmount)
            {
                _customCorrectionTrans.CorrectionDuty = -CurrencyExchangeHelper::amount(customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Duty), customCurrencyCode);
            }
            else
            {
                _customCorrectionTrans.CorrectionDuty   = CurrencyExchangeHelper::amount(customJournalCalc.calcDutyCorrection(_customCorrectionTrans.ItemId, _customCorrectionTrans.feaccId, _customCorrectionTrans.CountryRegionId, calcDate, costAmount, _customJournalTrans.Qty, _customJournalTrans.UnitId, _customJournalTrans.ItemGrossWeight, _customJournalTrans.Volume) - customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Duty), customCurrencyCode);
            }
        }
        else
        {
            [partitionCostAmount, partitionQty, partitionItemGrossWeight, partitionVolume] = partitionValues.lookup(_customJournalTrans.CustomPartition);
            if (!partitionDuty.exists(_customJournalTrans.CustomPartition))
            {
                if (!partitionCostAmount)
                {
                    partitionCorrectionDuty = -CurrencyExchangeHelper::amount(CustomJournalCalc_RU::calcPartitionDuty(_customJournalTrans, calcDate), customCurrencyCode);
                }
                else
                {
                    partitionCorrectionDuty = CurrencyExchangeHelper::amount(customJournalCalc.calcDutyCorrection(_customCorrectionTrans.ItemId, _customCorrectionTrans.feaccId, _customCorrectionTrans.CountryRegionId, calcDate, partitionCostAmount, partitionQty, _customJournalTrans.UnitId, partitionItemGrossWeight, partitionVolume), customCurrencyCode);
                }

                partitionDuty.insert(_customJournalTrans.CustomPartition, [partitionCorrectionDuty, partitionCorrectionDuty]);
            }
            [partitionCorrectionDuty, remainCorrectionDuty] = partitionDuty.lookup(_customJournalTrans.CustomPartition);

            if (remainCorrectionDuty)
            {
                if (taxTableDuty.CustomCombinedRate_RU == CustomCombinedRate_RU::Max)
                {
                    switch (taxTableDuty.CustomCalcMethod_RU)
                    {
                        case CustomCalcMethod_RU::Weight :
                            if (partitionItemGrossWeight)
                                _customCorrectionTrans.CorrectionDuty = CurrencyExchangeHelper::amount(partitionCorrectionDuty * _customJournalTrans.ItemGrossWeight / partitionItemGrossWeight, customCurrencyCode);
                            break;

                        case CustomCalcMethod_RU::Volume :
                            if (partitionVolume)
                                _customCorrectionTrans.CorrectionDuty = CurrencyExchangeHelper::amount(partitionCorrectionDuty * _customJournalTrans.Volume / partitionVolume, customCurrencyCode);
                            break;

                        case CustomCalcMethod_RU::Qty :
                            if (partitionCostAmount && costAmount)
                                _customCorrectionTrans.CorrectionDuty = CurrencyExchangeHelper::amount(partitionCorrectionDuty * costAmount / partitionCostAmount, customCurrencyCode);
                            else
                            {
                                baseAmount = CustomJournalCalc_RU::calcPartitionCost(_customJournalTrans, calcDate);
                                if (baseAmount)
                                {
                                    _customCorrectionTrans.CorrectionDuty = CurrencyExchangeHelper::amount(partitionCorrectionDuty * _customJournalTrans.estimativeAmount(CustomTotalType_RU::Cost) / baseAmount, customCurrencyCode);
                                }
                            }
                            break;
                    }
                }
                else
                {
                    if (partitionCostAmount)
                        _customCorrectionTrans.CorrectionDuty = CurrencyExchangeHelper::amount(partitionCorrectionDuty * costAmount / partitionCostAmount, customCurrencyCode);
                }
                remainCorrectionDuty -= _customCorrectionTrans.CorrectionDuty;
                if (remainCorrectionDuty <= Currency::find(customCurrencyCode).RoundingPrecision)
                {
                    _customCorrectionTrans.CorrectionDuty += remainCorrectionDuty;
                    remainCorrectionDuty = 0;
                }
                if (partitionCostAmount)
                {
                    _customCorrectionTrans.CorrectionDuty -= customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Duty);
                }

                partitionDuty.insert(_customJournalTrans.CustomPartition, [partitionCorrectionDuty, remainCorrectionDuty]);
            }
        }

        if (customJournalTable.CustomJournalType == CustomJournalType_RU::Import)
        {
            if (costAmount)
            {
                _customCorrectionTrans.CorrectionExcise = CurrencyExchangeHelper::amount(customJournalCalc.calcExcise(_customCorrectionTrans.ItemId, _customCorrectionTrans.feaccId, _customCorrectionTrans.CountryRegionId, calcDate, costAmount, _customJournalTrans.Qty, _customJournalTrans.UnitId) - customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Excise), customCurrencyCode);
            }
            else
            {
                _customCorrectionTrans.CorrectionExcise = -CurrencyExchangeHelper::amount(customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Excise), customCurrencyCode);
            }

            baseAmount = costAmount
                       + customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Duty)
                       + customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Excise)
                       +  _customCorrectionTrans.CorrectionDuty
                       +  _customCorrectionTrans.CorrectionExcise;
            if (baseAmount)
            {
                _customCorrectionTrans.CorrectionVAT    = CurrencyExchangeHelper::amount(customJournalCalc.calcVAT(_customCorrectionTrans.ItemId, _customCorrectionTrans.feaccId, calcDate, baseAmount, _customJournalTrans.Qty, _customJournalTrans.UnitId, customJournalTable.CustomJournalType, _customJournalTrans.CountryRegionId) - customJournalTransOnDateAmounts.amount(CustomTotalType_RU::VAT), customCurrencyCode);
            }
            else
            {
                _customCorrectionTrans.CorrectionVAT = -CurrencyExchangeHelper::amount(customJournalTransOnDateAmounts.amount(CustomTotalType_RU::VAT), customCurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorrectionTable</Name>
				<Source><![CDATA[
    protected void createCorrectionTable()
    {
        if (customCorrectionTable || ! correctionId)
            throw error("@SYS104799");

        customCorrectionTable.clear();
        customCorrectionTable.initValue();
        customCorrectionTable.initFromCustomJournalTable(customJournalTable);

        customCorrectionTable.CorrectionId         = correctionId;
        customCorrectionTable.CorrectionDate       = correctionDate;
        customCorrectionTable.CorrectionReason     = correctionReason;
        customCorrectionTable.CostCorrection       = costCorrection;
        customCorrectionTable.CorrectionStatus     = CustomCorrectionStatus_RU::Project;
        customCorrectionTable.Description          = description;
        customCorrectionTable.Storno               = storno;

        customCorrectionTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorrectionTrans</Name>
				<Source><![CDATA[
    protected CustomCorrectionTrans_RU createCorrectionTrans(CustomJournalTrans_RU  _customJournalTrans,
                                             CustomAmount_RU        _lineCorrectionAmount)
    {
        CustomCorrectionTrans_RU customCorrectionTrans;

        customCorrectionTrans = CustomCorrectionTrans_RU::findTransRecId(customCorrectionTable.CorrectionJournalId, _customJournalTrans.RecId, true);
        if (customCorrectionTrans.RecId == 0)
        {
            customCorrectionTrans.clear();
            customCorrectionTrans.initValue();
            customCorrectionTrans.initFromCustomCorrectionTable(customCorrectionTable);
            customCorrectionTrans.initFromCustomJournalTrans(_customJournalTrans);
            customCorrectionTrans.LineNum        = CustomCorrectionTrans_RU::maxLineNum(customCorrectionTrans.CorrectionJournalId) + 1;
        }
        customCorrectionTrans.CorrectionCost += _lineCorrectionAmount;
        customCorrectionTrans.write();

        return customCorrectionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    protected Query createQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        SetEnumerator           setEnumerator;
        container               rangeValueCon;

        query = new Query();

        qbds = query.addDataSource(tableNum(CustomJournalTrans_RU));
        qbds.addRange(fieldNum(CustomJournalTrans_RU, CustomJournalId)).value(SysQuery::value(customJournalTable.CustomJournalId));

        setEnumerator = markedSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            rangeValueCon += setEnumerator.current();
        }

        if (conLen(rangeValueCon))
        {
            switch (correctionAllocation)
            {
                case CustomCorrectionAllocation_RU::Line:
                    qbds.addRange(fieldNum(CustomJournalTrans_RU, LineNum)).value(con2Str(rangeValueCon));
                    break;
                case CustomCorrectionAllocation_RU::FEACC:
                    qbds.addRange(fieldNum(CustomJournalTrans_RU, feaccId)).value(con2Str(rangeValueCon));
                    break;
                case CustomCorrectionAllocation_RU::Partition:
                    qbds.addRange(fieldNum(CustomJournalTrans_RU, CustomPartition)).value(con2Str(rangeValueCon));
                    break;
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customCorrectionId_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is stub method to validate CustomCorrectionId value.
    /// </summary>
    /// <returns>
    /// This method always returns True.
    /// </returns>

    public boolean customCorrectionId_validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        const str customCorrectionId = 'CustomCorrectionId';
        DialogRunbase   dialog;
        DialogGroup     dialogGroup;

        dialog = Dialog::newFormnameRunbase(formStr(CustomCorrectionCreateDialog_RU), this);

        dialog.caption("@GLS115211");

        if (! addLinesOnly)
        {
            dialogGroup = dialog.addGroup("@GLS103250");
            dialogGroup.columns(2);

            dialog.customFieldName_RU(customCorrectionId);
            fieldCorrectionId     = dialog.addFieldValue(extendedTypeStr(CustomCorrectionId_RU), correctionId);
            fieldCorrectionId.lookupButton(FormLookupButton::Never);
            fieldCorrectionDate   = dialog.addFieldValue(extendedTypeStr(TransDate), dateNull(), "@GLS115164", "@GLS115342");
            fieldDescription      = dialog.addFieldValue(extendedTypeStr(Description), description, "@SYS25589", "@GLS115343");
            fieldCorrectionReason = dialog.addFieldValue(enumStr(CustomCorrectionReason_RU), correctionReason);
            fieldCostCorrection   = dialog.addField(extendedTypeStr(NoYesId), "@GLS115344");
            fieldCostCorrection.value(customJournalTable.IncludeIntoCostPrice);
            fieldCostCorrection.enabled(customJournalTable.CustomJournalType != CustomJournalType_RU::Export);
            fieldStorno           = dialog.addFieldValue(extendedTypeStr(NoYesId), storno, "@SYS6054", "@SYS10336");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld4_1_modified</Name>
				<Source><![CDATA[
    public boolean fld4_1_modified()
    {
        boolean ret;

        ret = fieldCorrectionReason.fieldControl().modified();
        fieldStorno.value(fieldCorrectionReason.value() == CustomCorrectionReason_RU::Error);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (! addLinesOnly)
            {
                correctionId     = fieldCorrectionId.value();
                correctionDate   = fieldCorrectionDate.value();
                correctionReason = fieldCorrectionReason.value();
                costCorrection   = fieldCostCorrection.value();
                description      = fieldDescription.value();
                storno           = fieldStorno.value();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private anytype getKey(CustomJournalTrans_RU _customJournalTrans)
    {
        anytype ret;

        switch (correctionAllocation)
        {
            case CustomCorrectionAllocation_RU::Line:
                ret = _customJournalTrans.LineNum;
                break;
            case CustomCorrectionAllocation_RU::FEACC:
                ret = _customJournalTrans.feaccId;
                break;
            case CustomCorrectionAllocation_RU::Partition:
                ret = _customJournalTrans.CustomPartition;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSource</Name>
				<Source><![CDATA[
    public void initFromSource(Common   _source,
                               NoYes    _addLinesOnly)
    {
        CustomCorrectionTable_RU        customCorrectionTableLoc;
        switch (_source.TableId)
        {
            case tableNum(CustomJournalTable_RU):
                customJournalTable = _source;
                break;

            case tableNum(CustomCorrectionTable_RU):
                customCorrectionTableLoc = _source;
                customJournalTable       = customCorrectionTableLoc.customJournalTable();
                storno                   = customCorrectionTableLoc.Storno;

                if (_addLinesOnly)
                {
                    customCorrectionTable = _source;
                }
                break;
        }

        addLinesOnly = _addLinesOnly;

        if (! addLinesOnly)
        {
            correctionId            = '';
            correctionDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>marked</Name>
				<Source><![CDATA[
    public NoYes marked(boolean                 _set,
                        CustomJournalTrans_RU   _customJournalTrans,
                        NoYes                   _mark)
    {
        anytype    key = this.getKey(_customJournalTrans);

        if (_set)
        {
            if (_mark)
            {
                markedSet.add(key);
            }
            else
            {
                markedSet.remove(key);
            }
        }

        return markedSet.in(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        customCurrencyCode      = CompanyInfoHelper::standardCurrency();
        partitionValues         = new Map(Types::String, Types::Container);
        partitionDuty           = new Map(Types::String, Types::Container);
        correctionAllocation    = CustomCorrectionAllocation_RU::Partition;

        this.renewMarked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, correctionReason];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionAllocation</Name>
				<Source><![CDATA[
    CustomCorrectionAllocation_RU parmCorrectionAllocation(CustomCorrectionAllocation_RU _correctionAllocation = correctionAllocation)
    {
        correctionAllocation = _correctionAllocation;
        return correctionAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionAmount</Name>
				<Source><![CDATA[
    CustomAmount_RU parmCorrectionAmount(CustomAmount_RU _correctionAmount = correctionAmount)
    {
        correctionAmount = _correctionAmount;
        return correctionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionBase</Name>
				<Source><![CDATA[
    CustomCorrectionBase_RU parmCorrectionBase(CustomCorrectionBase_RU _correctionBase = correctionBase)
    {
        correctionBase = _correctionBase;
        return correctionBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomCorrectionTable</Name>
				<Source><![CDATA[
    public CustomCorrectionTable_RU parmCustomCorrectionTable(CustomCorrectionTable_RU _customCorrectionTable = customCorrectionTable)
    {
        customCorrectionTable = _customCorrectionTable;

        return customCorrectionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
    public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;

        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renewMarked</Name>
				<Source><![CDATA[
    public void renewMarked()
    {
        Types    types = Types::AnyType;

        switch (correctionAllocation)
        {
            case CustomCorrectionAllocation_RU::Line:
                types = Types::Real;
                break;
            case CustomCorrectionAllocation_RU::FEACC:
                types = Types::String;
                break;
            case CustomCorrectionAllocation_RU::Partition:
                types = Types::String;
                break;
        }

        markedSet = new Set(types);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        QueryRun                    queryRun;
        Query                       query;
        CustomJournalTrans_RU       customJournalTrans;
        CustomCorrectionTrans_RU    customCorrectionTrans, customCorrectionTransUpdate;

        CustomJournalTransOnDateAmounts_RU  customJournalTransOnDateAmounts;
        CustomJournalTotalAmounts_RU        customJournalTotalAmounts;
        CustomCorrectionTotalAmounts_RU     customCorrectionTotalAmounts;

        real                        base;
        CustomAmount_RU             allocAmount;
        RefRecId                    adjustTransRecId = 0;
        CustomAmount_RU             maxCorrectionAmount = 0;
        CustomAmount_RU             totalAllocAmount = 0;

        RecordSortedList            correctionTransList = new RecordSortedList(tableNum(CustomCorrectionTrans_RU));

        correctionTransList.sortOrder(fieldNum(CustomJournalTrans_RU, RecId));

        try
        {
            ttsbegin;

            if (! addLinesOnly)
            {
                this.createCorrectionTable();
            }
            else
            {
                correctionDate = customCorrectionTable.CorrectionDate;
            }
            query = this.createQuery();
            base  = this.calcBase(query);

            if (! base)
            {
                throw error("@GLS115301");
            }

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                customJournalTrans      = queryRun.get(tableNum(CustomJournalTrans_RU));
                allocAmount             = this.calcAllocAmount(customJournalTrans, base);
                customCorrectionTrans   = this.createCorrectionTrans(customJournalTrans, allocAmount);

                customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(customJournalTrans, correctionDate);
                if (customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Cost) + customCorrectionTrans.CorrectionCost < 0)
                {
                    throw error(strFmt("@GLS115303", customJournalTrans.ItemId));
                }

                totalAllocAmount += allocAmount;

                if (! maxCorrectionAmount || (maxCorrectionAmount < abs(allocAmount)))
                {
                    maxCorrectionAmount = abs(allocAmount);
                    adjustTransRecId    = customCorrectionTrans.RecId;
                }
                correctionTransList.ins(customCorrectionTrans);
            }
            if (totalAllocAmount != correctionAmount && adjustTransRecId)
            {
                this.adjustRemainAmount(adjustTransRecId, correctionAmount - totalAllocAmount);
                customCorrectionTrans = CustomCorrectionTrans_RU::findRecId(adjustTransRecId, true);
                correctionTransList.ins(customCorrectionTrans, true);
            }

            if (correctionTransList.first(customCorrectionTrans))
            {
                do
                {
                    customCorrectionTransUpdate = CustomCorrectionTrans_RU::findRecId(customCorrectionTrans.RecId, true);
                    customJournalTrans          = customCorrectionTrans.customJournalTrans();
                    if (correctionAllocation == CustomCorrectionAllocation_RU::Partition)
                    {
                        if (!partitionValues.exists(customJournalTrans.CustomPartition))
                        {
                            partitionValues.insert(customJournalTrans.CustomPartition, CustomJournalCalc_RU::calcPartitionValues(customJournalTrans, correctionDate));
                        }
                    }
                    this.calcCharges(customJournalTrans, customCorrectionTransUpdate);
                    customCorrectionTransUpdate.update();
                }
                while (correctionTransList.next(customCorrectionTrans));
            }
            customCorrectionTable = CustomJournalCalc_RU::calcCorrectionAdminCharge(customCorrectionTable, customJournalTable, customCurrencyCode);
            customCorrectionTable.update();
            if (customCorrectionTable.CorrectionReason == CustomCorrectionReason_RU::Error)
            {
                customJournalTotalAmounts = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable);
                customCorrectionTotalAmounts = CustomCorrectionTotalAmounts_RU::createFromJournal(customJournalTable);
                if (CurrencyExchange::round(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost)
                                                + customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::Cost),
                                                  customCurrencyCode) == 0.0)
                {
                    CustomJournalCharge_RU::createReverseJournalCharges(customJournalTable.CustomJournalId, customCorrectionTable.CorrectionJournalId);
                }
            }
            ttscommit;

            if (! addLinesOnly)
            {
                info(strFmt("@GLS115300", correctionId));
            }
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00117, funcName());
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = conPeek(_packedClass, 1);

        switch (version)
        {
            case currentVersion:
                [version, correctionReason] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean                     ret;
        CustomCorrectionTable_RU    customCorrectionTableLocal;
        CustomCorrectionTrans_RU    customCorrectionTransLocal;
        SetEnumerator               setEnumerator;
        CustomJournalTrans_RU       customJournalTrans, customJournalTransLocal;
        Set                         customPartitionSet;

        void customPartitionSetAdd(CustomPartition_RU   _customPartition)
        {
            while select RecId from customJournalTransLocal
                where customJournalTransLocal.CustomJournalId   == customJournalTable.CustomJournalId &&
                      customJournalTransLocal.CustomPartition   == _customPartition
            {
                if (customPartitionSet.in(_customPartition))
                    ret = checkFailed(strFmt("@GLS115313", _customPartition));
                else
                    customPartitionSet.add(_customPartition);
            }
            customPartitionSet = new Set(Types::String);
        }

        ret = super();

        if (storno && correctionAmount > 0)
        {
            ret = checkFailed("@GLS115314");
        }
        customCorrectionTableLocal = CustomCorrectionTable_RU::findNotPosted(customJournalTable.CustomJournalId);
        if (! addLinesOnly)
        {
            if (customCorrectionTableLocal)
            {
                return checkFailed(strFmt("@GLS115315",
                                          customJournalTable.CustomJournalId,
                                          customCorrectionTableLocal.CorrectionId,
                                          customCorrectionTableLocal.CorrectionDate));
            }

            if (! correctionId)
            {
                ret = checkFailed(strFmt("@GLS115316", "@GLS114922"));
            }

            if (! correctionDate)
            {
                ret = checkFailed(strFmt("@GLS115316", "@GLS115164"));
            }
            else
            {
                customCorrectionTableLocal = CustomCorrectionTable_RU::findOnDate(customJournalTable.CustomJournalId, correctionDate);

                if (customCorrectionTableLocal)
                {
                    ret = checkFailed(strFmt("@GLS115317", customCorrectionTableLocal.CorrectionId));
                }

                if (correctionDate < customJournalTable.PlanArrivalDate)
                    ret = checkFailed("@GLS115318");
            }
        }
        else
        {
            select firstonly customCorrectionTransLocal
                where customCorrectionTransLocal.CorrectionJournalId == customCorrectionTableLocal.CorrectionJournalId;
            if (customCorrectionTransLocal && sign(customCorrectionTransLocal.CorrectionCost) != sign(correctionAmount))
            {
                ret = checkFailed(strFmt("@GLS115319", sign(customCorrectionTransLocal.CorrectionCost) == 1 ? "@GLS115320" : "@GLS115321"));
            }
        }

        if (! correctionAmount)
        {
            ret = checkFailed("@GLS115322");
        }

        if (! markedSet || ! markedSet.elements())
        {
            ret = checkFailed("@GLS115324");
        }

        if (correctionAllocation == CustomCorrectionAllocation_RU::Line || correctionAllocation == CustomCorrectionAllocation_RU::FEACC)
        {
            customPartitionSet = new Set(Types::String);

            setEnumerator = markedSet.getEnumerator();
            while (setEnumerator.moveNext())
            {
                if (!ret)
                    continue;

                switch (correctionAllocation)
                {
                    case CustomCorrectionAllocation_RU::Line:
                        select firstonly customJournalTrans
                            where customJournalTrans.CustomJournalId    == customJournalTable.CustomJournalId &&
                                  customJournalTrans.LineNum            == setEnumerator.current();

                        customPartitionSetAdd(customJournalTrans.CustomPartition);
                        break;
                    case CustomCorrectionAllocation_RU::FEACC:

                        select firstonly customJournalTrans
                            where customJournalTrans.CustomJournalId    == customJournalTable.CustomJournalId &&
                                  customJournalTrans.feaccId            == setEnumerator.current();

                        customPartitionSetAdd(customJournalTrans.CustomPartition);
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustomCorrectionCreate_RU construct()
    {
        return new CustomCorrectionCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static Description description()
    {
        return "@GLS115092";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomCorrectionCreate_RU   customCorrectionCreate;
        FormRun                     callerFormRun;
        FormDataSource              callerFormDataSource;

        if (! _args || (_args.dataset() != tableNum(CustomJournalTable_RU) && _args.dataset() != tableNum(CustomCorrectionTable_RU)))
        {
            throw error(strFmt("@SYS25516", CustomCorrectionCreate_RU::description()));
        }
        if (! _args.record() || ! FormDataUtil::isFormDataSource(_args.record()))
        {
            throw error("@SYS82774");
        }
        if (! _args.parmEnumType() || _args.parmEnumType() != enumNum(NoYes))
        {
            throw error("@SYS30498");
        }
        customCorrectionCreate = CustomCorrectionCreate_RU::construct();

        customCorrectionCreate.initFromSource(_args.record(), _args.parmEnum());

        if (customCorrectionCreate.prompt())
        {
            customCorrectionCreate.runOperation();
        }

        if (_args.caller() &&
            SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)))
        {
            callerFormRun = _args.caller();

            if (_args.caller().name() == formStr(CustomCorrectionTable_RU) && formHasMethod(callerFormRun, identifierStr(tableFormDataSource)))
            {
                callerFormDataSource = _args.caller().tableFormDataSource();
                callerFormDataSource.reread();
                callerFormDataSource.active();

                if (callerFormRun.args().caller() && SysDictClass::isEqualOrSuperclass(classIdGet(callerFormRun.args().caller()), classNum(FormRun)))
                {
                    if (callerFormRun.args().caller().name() == formStr(CustomJournalTable_RU) && formHasMethod(callerFormRun.args().caller(), identifierStr(tableFormDataSource)))
                    {
                        callerFormDataSource = callerFormRun.args().caller().tableFormDataSource();
                        callerFormDataSource.reread();
                        callerFormDataSource.active();
                    }
                }
            }
            else
            {
                callerFormDataSource = FormDataUtil::getFormDataSource(_args.record());

                if (callerFormDataSource)
                {
                    callerFormDataSource.reread();
                    callerFormDataSource.refresh();
                    callerFormDataSource.active();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>