<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport347TableTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides the user with the ability to obtain all the totals for a
/// <c>TaxReport347Table</c> table record in one batch.
/// </summary>
public class TaxReport347TableTotals
{
    Map operationAmountsByOperationKey;
    Map operationCountsByOperationKey;

    TaxRep347AmountMST  totalAmountTenants;
    Counter             totalOperTenants;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        totalAmountTenants,
        totalOperTenants
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    private void calculateTotals(
        TaxReport347Table _taxReport347Table,
        TaxReport347Trans _taxReport347Trans,
        TaxReport347Tenants _taxReport347Tenants)
    {
        while select OperationKey, count(RecId), sum(Amount) from _taxReport347Trans
            group by _taxReport347Trans.OperationKey
            where  _taxReport347Trans.TaxReport347Table == _taxReport347Table.RecId
        {
            operationCountsByOperationKey.insert(_taxReport347Trans.OperationKey, _taxReport347Trans.RecId);
            operationAmountsByOperationKey.insert(_taxReport347Trans.OperationKey, _taxReport347Trans.Amount);
        }

        select count(RecId), sum(Amount) from _taxReport347Tenants
            where _taxReport347Tenants.TaxReport347Table == _taxReport347Table.RecId;

        totalAmountTenants  = _taxReport347Tenants.Amount;
        totalOperTenants    = int642int(_taxReport347Tenants.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountByOperationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines having the specified operation key.
    /// </summary>
    /// <param name="_operationKey">
    /// Operation key.
    /// </param>
    /// <returns>
    /// Total number of report lines having the specified operation key.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter getCountByOperationKey(TaxRep347OperationKey _operationKey)
    {
        if (operationCountsByOperationKey && operationCountsByOperationKey.exists(_operationKey))
        {
            return operationCountsByOperationKey.lookup(_operationKey);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountByOperationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines having the specified operation key.
    /// </summary>
    /// <param name="_operationKey">
    /// Operation key.
    /// </param>
    /// <returns>
    /// Total amount of report lines having the specified operation key.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST getTotalAmountByOperationKey(TaxRep347OperationKey _operationKey)
    {
        if (operationAmountsByOperationKey && operationAmountsByOperationKey.exists(_operationKey))
        {
            return operationAmountsByOperationKey.lookup(_operationKey);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        operationAmountsByOperationKey  = new Map(Types::Enum, Types::Real);
        operationCountsByOperationKey   = new Map(Types::Enum, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    private container pack()
    {
        container packedAmountsByOperationKey = operationAmountsByOperationKey.pack();
        container packedOperationCountsByOperationKey = operationCountsByOperationKey.pack();

        return [#CurrentVersion, #CurrentList, packedAmountsByOperationKey, packedOperationCountsByOperationKey];
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines.
    /// </summary>
    /// <returns>
    /// Total amount of report lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmount()
    {
        return this.totalAmountPaymentMediation()
            + this.totalAmountPublicEntities()
            + this.totalAmountPurchases()
            + this.totalAmountSales()
            + this.totalAmountSubsidies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountPaymentMediation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines having operation key <c>PaymentMediation</c>.
    /// </summary>
    /// <returns>
    /// Total amount of report lines having operation key <c>PaymentMediation</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmountPaymentMediation()
    {
        return this.getTotalAmountByOperationKey(TaxRep347OperationKey::PaymentMediation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountPublicEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines having operation key <c>PurchPublicEntity</c>.
    /// </summary>
    /// <returns>
    /// Total amount of report lines having operation key <c>PurchPublicEntity</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmountPublicEntities()
    {
        return this.getTotalAmountByOperationKey(TaxRep347OperationKey::PurchPublicEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountPurchases</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines having operation key <c>Purchase</c>.
    /// </summary>
    /// <returns>
    /// Total amount of report lines having operation key <c>Purchase</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmountPurchases()
    {
        return this.getTotalAmountByOperationKey(TaxRep347OperationKey::Purchase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines having operation key <c>Sales</c>.
    /// </summary>
    /// <returns>
    /// Total amount of report lines having operation key <c>Sales</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmountSales()
    {
        return this.getTotalAmountByOperationKey(TaxRep347OperationKey::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountSubsidies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of report lines having operation key <c>Subsidy</c>.
    /// </summary>
    /// <returns>
    /// Total amount of report lines having operation key <c>Subsidy</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmountSubsidies()
    {
        return this.getTotalAmountByOperationKey(TaxRep347OperationKey::Subsidy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountTenants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of tenants lines.
    /// </summary>
    /// <returns>
    /// Total amount of tenants lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRep347AmountMST totalAmountTenants()
    {
        return totalAmountTenants;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines.
    /// </summary>
    /// <returns>
    /// Total number of report lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOper()
    {
        return this.totalOperPaymentMediation()
            + this.totalOperPublicEntities()
            + this.totalOperPurchases()
            + this.totalOperSales()
            + this.totalOperSubsidies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOperPaymentMediation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines having operation key <c>PaymentMediation</c>.
    /// </summary>
    /// <returns>
    /// Total number of report lines having operation key <c>PaymentMediation</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOperPaymentMediation()
    {
        return this.getCountByOperationKey(TaxRep347OperationKey::PaymentMediation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOperPublicEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines having operation key <c>PurchPublicEntity</c>.
    /// </summary>
    /// <returns>
    /// Total number of report lines having operation key <c>PurchPublicEntity</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOperPublicEntities()
    {
        return this.getCountByOperationKey(TaxRep347OperationKey::PurchPublicEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOperPurchases</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines having operation key <c>Purchase</c>.
    /// </summary>
    /// <returns>
    /// Total number of report lines having operation key <c>Purchase</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOperPurchases()
    {
        return this.getCountByOperationKey(TaxRep347OperationKey::Purchase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOperSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines having operation key <c>Sales</c>.
    /// </summary>
    /// <returns>
    /// Total number of report lines having operation key <c>Sales</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOperSales()
    {
        return this.getCountByOperationKey(TaxRep347OperationKey::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOperSubsidies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of report lines having operation key <c>Subsidy</c>.
    /// </summary>
    /// <returns>
    /// Total number of report lines having operation key <c>Subsidy</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOperSubsidies()
    {
        return this.getCountByOperationKey(TaxRep347OperationKey::Subsidy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOperTenants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of tenants lines.
    /// </summary>
    /// <returns>
    /// Total number of tenants lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter totalOperTenants()
    {
        return totalOperTenants;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    private void unpack(container _containerWithTotals)
    {
        container packedAmountsByOperationKey;
        container packedOperationCountsByOperationKey;

        Integer version = conpeek(_containerWithTotals, 1);

        switch (version)
        {
            case #CurrentVersion:
                [
                    version,
                    #CurrentList,
                    packedAmountsByOperationKey,
                    packedOperationCountsByOperationKey
                ] = _containerWithTotals;

                operationAmountsByOperationKey = Map::create(packedAmountsByOperationKey);
                operationCountsByOperationKey = Map::create(packedOperationCountsByOperationKey);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the totals for a <c>TaxReport347Table</c> record in one batch. If temporary table buffers
    /// are passed as <c>_taxReport347Trans</c> and <c>_taxReport347Tenants</c> then the totals will be
    /// populated based on this temporary data.
    /// </summary>
    /// <param name="_taxReport347Table">
    /// A <c>TaxReport347Table</c> record for which to retrieve totals.
    /// </param>
    /// <param name="_taxReport347Trans">
    /// A <c>TaxReport347Trans</c> table buffer that will be used to retrieve totals. If the <paramref
    /// name="_taxReport347Trans" /> parameter is a temporary table buffer, totals will be populated based
    /// on this temporary data.
    /// </param>
    /// <param name="_taxReport347Tenants">
    /// A <c>TaxReport347Tenants</c> table buffer which will be used to retrieve totals. If the <paramref
    /// name="_taxReport347Tenants" /> parameter is a temporary table buffer, totals will be populated
    /// based on this temporary data.
    /// </param>
    /// <returns>
    /// An instance of the <c>TaxReport347TableTotals</c> class, which contains totals for the specified
    /// <c>TaxReport347Table</c> record.
    /// </returns>
    /// <remarks>
    /// No matter from which tier, client or server, you call this method, the resulting object will reside
    /// on the tier you called this method from.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxReport347TableTotals getTotals(
        TaxReport347Table _taxReport347Table,
        TaxReport347Trans _taxReport347Trans = null,
        TaxReport347Tenants _taxReport347Tenants = null)
    {
        if (!_taxReport347Table)
        {
            return new TaxReport347TableTotals();
        }

        return TaxReport347TableTotals::getTotalsOnServer(
            _taxReport347Table,
            _taxReport347Trans,
            _taxReport347Tenants);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalsOnServer</Name>
				<Source><![CDATA[
    private static TaxReport347TableTotals getTotalsOnServer(
        TaxReport347Table _taxReport347Table,
        TaxReport347Trans _taxReport347Trans = null,
        TaxReport347Tenants _taxReport347Tenants = null)
    {
        TaxReport347TableTotals result = new TaxReport347TableTotals();

        TaxReport347Trans   taxReport347Trans;
        TaxReport347Tenants taxReport347Tenants;

        if (_taxReport347Trans || _taxReport347Trans.isTmp())
        {
            taxReport347Trans = _taxReport347Trans;
        }

        if (_taxReport347Tenants || _taxReport347Tenants.isTmp())
        {
            taxReport347Tenants = _taxReport347Tenants;
        }

        result.calculateTotals(_taxReport347Table, taxReport347Trans, taxReport347Tenants);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>