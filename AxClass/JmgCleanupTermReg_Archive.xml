<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCleanupTermReg_Archive</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This class is used to clean up the <c>JmgTermRegArchive</c> table.
/// </summary>
/// <remarks>
///    This class should not be used directly. Instead use the <see cref="M:JmgCleanupTermReg::main" />
///    method to run the class.
/// </remarks>
class JmgCleanupTermReg_Archive extends JmgCleanupTermReg implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <param name="dialog">
    /// An already initialized dialog; optional.
    /// </param>
    /// <param name="forceOnClient">
    /// A Boolean value that specifies whether the dialog must be instantiated on the client; optional.
    /// </param>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// The <c>JmgCleanupTermReg</c> class adds three fields to the dialog box: cleanup mode, maximum age,
    /// and archive file name. The <c>JmgCleanupTermReg_Archive</c> class makes sure that the cleanup mode
    /// to table cannot be selected.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Object ret;

        if (cleanupMode == JmgTermRegCleanupMode::ToTable)
        {
            cleanupMode = JmgTermRegCleanupMode::ToFile;
        }

        ret = super(dialog, forceOnClient);
        dfCleanupMode.hideFirstEntry(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39821";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the dialog values to the internal variables after the dialog is closed.
    /// </summary>
    /// <returns>
    ///    true if user input is validated successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgCleanupTermReg</c> retrieves value from cleanup mode, maximum age, and archive file name
    ///    dialog fields. It checks that the maximum age is greater than or equal to 1.The
    ///    <c>JmgCleanupTermReg_Archive</c> adds a check that cleanup mode cannot be set to the 'To
    ///    table'.Remember to call <c>super()</c> if you override this method.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (cleanupMode == JmgTermRegCleanupMode::ToTable)
        {
            ret = checkFailed(strfmt("@SYS39826", JmgTermRegCleanupMode::ToTable));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>QueryRun</c> object which fetches the records to be cleaned up.
    /// </summary>
    /// <returns>
    ///    The <c>queryRun</c> that references the records to be cleaned up.
    /// </returns>
    /// <remarks>
    ///    Based on the maximum age field, a query is constructed that returns records from the
    ///    <c>JmgTermRegArchive</c> table with a registration date that is earlier than today's date - maximum
    ///    age.
    /// </remarks>
    protected QueryRun initQueryRun()
    {
        Query                   q = new Query();
        QueryBuildDataSource    qbds =  q.addDataSource(tablenum(JmgTermRegArchive));
        qbds.addRange(fieldnum(JmgTermRegArchive, RegDateTime)).value(
                queryRange(DateTimeUtil::minValue(), DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - maxAge, 0, DateTimeUtil::getUserPreferredTimeZone()))
        );
        qbds.update(true);

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Export to file option is possible for interactive browser session only;
    /// </summary>
    /// <returns>False for Export to file option; otherwise true</returns>
    protected boolean canRunInNewSession()
    {
        return cleanupMode == JmgTermRegCleanupMode::ToFile ? false : true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>