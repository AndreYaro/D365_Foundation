<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjustPostClosingCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventAdjustPostClosingCancel</c> class posts the duplicated records that have been created
///    during a cancellation into the ledger.
/// </summary>
/// <remarks>
///    This class will post <c>prodIndirectTrans</c>, <c>inventCostTransVariances </c>and
///    <c>inventSettlements</c> records.
/// </remarks>

class InventAdjustPostClosingCancel extends InventAdjustPostClosing
{
    TransDate       offsetDate;
    boolean         ended;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Voucher                _voucher,
             TransDate              _transDate,
             InventAdjustmentSpec   _specification,
             LedgerTransTxt         _transTxtType,
             NoYes                  _correct            = NoYes::No,
             Voucher                _offsetVoucher      = '',
             boolean                _onClosingDate      = false,
             boolean                _checkOpen          = true,
             NumberSequenceCode     _voucherSequence    = '',
             TransDate              _offsetDate         = dateNull(),
             boolean                _ended              = true
            )
    {
        super(_voucher, _transDate, _specification, _transTxtType, _correct, _offsetVoucher, _onClosingDate, _checkOpen, _voucherSequence);

        offsetDate = _offsetDate;
        ended      = _ended;

        if (!offsetVoucher || !offsetDate)
        {
            throw error("@SYS117087");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the postings for a given <c>inventCostTransVariance</c> record.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>inventCostTransVariance</c> record that should be posted.
    /// </param>

    protected void processInventCostTransVariance(InventCostTransVariance  _inventCostTransVariance)
    {
        AmountMST                   costAmount;
        AmountCur                   costAmountCur;

        costAmount = CurrencyExchangeHelper::amount(_inventCostTransVariance.CostAmountPosted);

        if (currencyCode == standardCurrency)
        {
            costAmountCur = costAmount;
        }
        else
        {
            costAmountCur = CurrencyExchangeHelper::curAmount(costAmount, currencyCode, transDate);
        }

        if (_inventCostTransVariance.LedgerDimension &&
            _inventCostTransVariance.OffsetLedgerDimension)
        {
            // Add variance to the ledgerVoucher
            this.addLedger( ledgerVoucher,
                            _inventCostTransVariance.Posting,
                            _inventCostTransVariance.LedgerDimension,
                            _inventCostTransVariance.DefaultDimension,
                            costAmountCur);

            this.addLedger( ledgerVoucher,
                            _inventCostTransVariance.PostingOffset,
                            _inventCostTransVariance.OffsetLedgerDimension,
                            _inventCostTransVariance.DefaultDimension,
                            -costAmountCur);

            // <GEERU>
            if (correspondenceEnable && this.ledgerBondClient_RU())
            {
                this.ledgerBondClient_RU().bondLast2();
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the inventory settlements that must be processed.
    /// </summary>
    /// <remarks>
    ///    For a non-ended inventory closing, no new settlements have been created. Instead, settlements where
    ///    the transaction has changed form physical to financial must be posted.
    /// </remarks>
    protected void updateItem()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSettlementRanges</Name>
				<Source><![CDATA[
    protected void setInventSettlementRanges(QueryBuildDataSource _qbdsInventSettlement)
    {
        super(_qbdsInventSettlement);

        if (ended)
        {
            // Ok, inventory closing was ended properly
            // post all the inventSettlements that have been created during cancelation
            // These records must hold the cancel flag
            findOrCreateRange_W(_qbdsInventSettlement, fieldNum(InventSettlement, Cancelled), queryValue(NoYes::Yes));
        }
        else
        {
            // Closing was interupted, I only need to post the records where the transaction
            // was updated to sold in the meantime
            // Important: Here I do not need to reverse the sign, due to the fact, that I need
            // to post this as it was during the interupted closing
            // These records also have not been marked as cancelled and hold still the old voucher
            findOrCreateRange_W(_qbdsInventSettlement, fieldNum(InventSettlement, TransDate), queryValue(offsetDate));
            findOrCreateRange_W(_qbdsInventSettlement, fieldNum(InventSettlement, Voucher), queryValue(offsetVoucher));
            findOrCreateRange_W(_qbdsInventSettlement, fieldNum(InventSettlement, Cancelled), queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the processed records as posted.
    /// </summary>
    /// <param name="_canceled">
    ///    A flag to mark for cancellation. Default value is No.
    /// </param>
    /// <remarks>
    ///    The super call will make sure that the <c>inventSettlement</c> and <c>prodIndirectTrans</c> records
    ///    get marked as posted. This is only done for an ended inventory closing.
    ///    For an interrupted
    ///    closing, only the records that have been reposted will be flagged as posted.
    /// </remarks>

    protected void updatePosted(NoYes _canceled = NoYes::No)
    {
        InventSettlement            inventSettlement;
        InventTrans                 inventTrans;
        InventCostTrans             inventCostTrans;
        InventCostTransVariance     inventCostTransVariance;

        if (ended)
        {
            // In the case of a ended clsoing, no records needs to be reposted
            // All the ones that have been posted now to do the offset must be marked as posted
            // so call super
            super(NoYes::Yes);

            // Now mark the variances as posted
            update_recordset inventCostTransVariance
                setting IsPosted = NoYes::Yes
                where inventCostTransVariance.IsPosted == NoYes::No
                exists join inventCostTrans
                where inventCostTrans.RecId == inventCostTransVariance.InventCostTransRefRecId
                   && inventCostTrans.Voucher   == voucher
                   && inventCostTrans.TransDate == transDate
                   && inventCostTrans.Canceled  == NoYes::Yes;
        }
        else
        {
            // Update the records, that have been posted now from the old voucher
            update_recordset inventSettlement
                setting Posted    = NoYes::Yes,
                        Voucher   = voucher,
                        TransDate = transDate
                where inventSettlement.TransDate            == offsetDate
                   && inventSettlement.Voucher              == offsetVoucher
                   && inventSettlement.CostAmountAdjustment != 0
                   // <GEERU>
                   && inventSettlement.InventTransCurrency_RU   == this.inventTransCurrency_RU()
                   // </GEERU>
                   && inventSettlement.Posted               == NoYes::No
                   && (inventSettlement.BalanceSheetLedgerDimension != 0
                    || inventSettlement.OperationsLedgerDimension   != 0)
            exists join inventTrans
                where inventTrans.RecId            == inventSettlement.TransRecId
                   && inventTrans.StatusIssue      == StatusIssue::Sold
                   && inventTrans.StatusReceipt    == StatusReceipt::None
                   && inventSettlement.SettleModel == InventSettleModel::PhysicalValue;

            // The closing was not ended, so only for ended production orders
            // prodIndirectTrans existsed and they have been already marked as
            // cancelled, so there is no need to handle them in here
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>prodIndirectTrans</c> records that should be posted.
    /// </summary>
    /// <remarks>
    ///    This is only done for an ended closing. In this case, <c>prodIndirectTrans</c> and
    ///    <c>inventCostTransVariance</c> records will be posted.
    /// </remarks>

    protected void updateProduction()
    {
        ProdIndirectTrans           prodIndirectTrans;
        InventCostTrans             inventCostTrans;
        InventCostTransVariance     inventCostTransVariance;

        if (ended)
        {
            // The closing was ended
            // Get all the indirect cost records that have been duplicated and post them
            // All of these needs to be offset
            while select sum(Amount) from prodIndirectTrans
                group by OpenProdOrder, DefaultDimension,
                         PostingEstimatedIndirectAbsorption, EstimatedIndirectAbsorpLedgerDimension,
                         PostingEstimatedIndirectAbsorptionOffset, EstimIndirectAbsorpOffsetLedgerDimension,
                         PostingIndirectAbsorption, IndirectAbsorptionLedgerDimension,
                         PostingIndirectAbsorptionOffset, IndirectAbsorptionOffsetLedgerDimension
                where ((prodIndirectTrans.VoucherEstimation == voucher && prodIndirectTrans.DateEstimation == transDate)
                   ||  (prodIndirectTrans.VoucherCalc       == voucher && prodIndirectTrans.DateCalc       == transDate))
                   && prodIndirectTrans.Posted          == NoYes::No
                   && prodIndirectTrans.Canceled        == NoYes::Yes
            {
                this.processProdIndirectTrans(prodIndirectTrans);
            }

            // For an ended closing, variance records have been posted.
            // I need to offset these postings now
            // <GEERU>
            while select sum(CostAmountPosted), sum(CostAmountPostedSecCur_RU) from inventCostTransVariance
            // </GEERU>
                group by DefaultDimension,
                         Posting, LedgerDimension,
                         PostingOffset, OffsetLedgerDimension
                where inventCostTransVariance.IsPosted == NoYes::No
                   && ((inventCostTransVariance.Level == InventCostLevel::Total && inventCostTransVariance.Split == NoYes::No) ||
                       (inventCostTransVariance.Level == InventCostLevel::Single))
                exists join inventCostTrans
                where inventCostTrans.RecId == inventCostTransVariance.InventCostTransRefRecId
                   && inventCostTrans.Voucher   == voucher
                   && inventCostTrans.TransDate == transDate
                   && inventCostTrans.Canceled  == NoYes::Yes
            {
                this.processInventCostTransVariance(inventCostTransVariance);
            }
        }
        else
        {
            // Closing was not ended, so no variancce postings have been made
            // Only for ended production orders prodIndirectTrans records could have existsed
            // So there is no need for reposting something where the status has changed
            // All the records for the ended production order have been marked as cancelled already,
            // so there is No need here to post something.
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCurrency_RU</Name>
				<Source><![CDATA[
    static InventAdjustPostClosingCancel newFromCurrency_RU(
        Voucher                _voucher,
        TransDate              _transDate,
        InventAdjustmentSpec   _specification,
        LedgerTransTxt         _transTxtType,
        NoYes                  _correct,
        Voucher                _offsetVoucher,
        boolean                _onClosingDate,
        boolean                _checkOpen,
        NumberSequenceCode     _voucherSequence,
        TransDate              _offsetDate,
        boolean                _ended,
        InventTransCurrency_RU _inventTransCurrency)
    {

        var factoryAttr = new InventTransCurrencyAdjPostClosingCancelFactoryAttribute(_inventTransCurrency);
        var instatiationStrategy = new InventAdjustPostClosingCancelInstantiation(_voucher,
                                                                     _transDate,
                                                                     _specification,
                                                                     _transTxtType,
                                                                     _correct,
                                                                     _offsetVoucher,
                                                                     _onClosingDate,
                                                                     _checkOpen,
                                                                     _voucherSequence,
                                                                     _offsetDate,
                                                                     _ended);

        var instance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(InventAdjustPostClosingCancel),
            factoryAttr, instatiationStrategy);

        if (instance == null)
        {
            instance = new InventAdjustPostClosingCancel(_voucher,
                                              _transDate,
                                              _specification,
                                              _transTxtType,
                                              _correct,
                                              _offsetVoucher,
                                              _onClosingDate,
                                              _checkOpen,
                                              _voucherSequence,
                                              _offsetDate,
                                              _ended);
        }

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>