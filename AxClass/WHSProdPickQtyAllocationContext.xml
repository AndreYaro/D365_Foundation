<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProdPickQtyAllocationContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSProdPickQtyAllocationContext implements System.IDisposable
{
    private static WHSProdPickQtyAllocationContext instance;
    private WHSWaveId waveId;
    private WHSWaveExecutionID waveExecutionID;
    private boolean allocationWasExecuted = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        if (allocationWasExecuted)
        {
            WHSProdPickQtyAllocationHandler::newForWaveExecution(waveId, waveExecutionID);
        }

        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSProdPickQtyAllocationContext construct(WHSWaveId _waveId, WHSWaveExecutionID _waveExecutionID)
    {
        WHSProdPickQtyAllocationContext context = new WHSProdPickQtyAllocationContext();
        context.waveId = _waveId;
        context.waveExecutionID = _waveExecutionID;
        
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks allocation in WHSProdPickQtyAllocationContext instance and ensures that the instance if for the same wave execution as allocation.
    /// </summary>
    /// <param name = "_waveId">The wave ID.</param>
    /// <param name = "_waveExecutionId">The wave execution ID.</param>
    [Hookable(false)]
    internal static void markAllocation(WHSWaveId _waveId, WHSWaveExecutionID _waveExecutionId)
    {
        if (instance == null || instance.waveId != _waveId || instance.waveExecutionID != _waveExecutionId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance.allocationWasExecuted = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>