<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayNDFLSectionExcel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayNDFLSectionExcel extends RPayNDFLSection
{
    COMExcelDocument_RU excelDocument;

    int startRow;

    #RPay2NDFLExcel
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEmployeeData</Name>
				<Source><![CDATA[
    protected void addEmployeeData()
    {
        RHRMEmplTable           emplTable     = document.emplTable();
        RHRMPersonTable         personTable   = emplTable.personTable();
        DirPersonName           dirPersonName = personTable.dirPersonName();
        RPayEmplTaxStatus       taxStatus     = emplTaxInfo.emplTaxStatus();
        date                    BirthDate     = personTable.hcmPersonPrivateDetails().BirthDate;

        #define.NumberSign("â„–")

        excelDocument.insertValue('J15',  emplTable.payINN(document.payPeriod()));
        excelDocument.insertValue('AZ15', strfmt("@SYS53179", dirPersonName.lastName, dirPersonName.firstName, dirPersonName.middleName));
        excelDocument.insertValue('AD16', int2str(RPayTaxReportValue::emplTaxStatus2ReportStatus(taxStatus)));

        if (BirthDate != datenull())
        {
            excelDocument.insertValue('BD16',this.convertDayMonth(dayofmth(BirthDate)));
            excelDocument.insertValue('BI16',this.convertDayMonth(mthofyr(BirthDate)));
            excelDocument.insertValue('BN16',year(BirthDate));
        }

        excelDocument.insertValue('DB16', personTable.citizenshipCountryRegion(DateTimeUtil::date(DateTimeUtil::newDateTime(document.inquireDate(), 0))).OKSMCode_RU);
        excelDocument.insertValue('AR17', personTable.identityCardTable_RU().IdentityCardCode);
        excelDocument.insertValue('CB17', strrem(personTable.IdentityCardSeriesAndNumber(), #NumberSign));

        if (emplAddress.isRuAddress())
        {
            excelDocument.insertValue('BX18', emplAddress.zipCode());
            excelDocument.insertValue('CT18', emplAddress.state());
            excelDocument.insertValue('K19',  emplAddress.countyName());
            excelDocument.insertValue('AS19', emplAddress.townName());
            excelDocument.insertValue('CK19', emplAddress.settlementName());
            excelDocument.insertValue('K20',  emplAddress.streetName());
            excelDocument.insertValue('BK20', emplAddress.estate());
            excelDocument.insertValue('CB20', emplAddress.building());
            excelDocument.insertValue('CU20', emplAddress.flat());
        }

        if (emplAddress.isForeignAddress(taxStatus))
        {
            excelDocument.insertValue('AO21', emplAddress.OKSMCode());
            excelDocument.insertValue('AZ21', strRemoveCr(emplAddress.foreignAddress()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected void addHeader()
    {
        ReportPeriod_RU reportPeriod = document.payPeriod();
        ReportPeriod_RU inquireDate  = document.inquireDate();

        excelDocument.insertValue('BE6', (frac(year(reportPeriod) / 100) * 100) div 1);
        excelDocument.insertValue('BP6', document.inquireNumber());
        excelDocument.insertValue('CB6', this.convertDayMonth(dayofmth(inquireDate)));
        excelDocument.insertValue('CG6', this.convertDayMonth(mthofyr(inquireDate)));
        excelDocument.insertValue('CL6', year(inquireDate));
        excelDocument.insertValue('DA6', emplTaxInfo.reportSign());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIncomeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Income data section in the excel document.
    /// </summary>
    protected void addIncomeData()
    {
        RpayTaxReportValue  rpayTaxReportValue;
        Map                 map;
        MapEnumerator       mapEnumerator;
        RPayRateCode        taxRateCode = emplTaxInfo.taxRateCode();
        Percent     percentValue;
        int         i, n, j, k;
        str         tmp_str[5];
        container   con, conItem, conValues;

        if (!this.parmIsFirstTaxRateToPrint())
        {
            this.copySection(#IncomeStartRow, #IncomeEndRow, startRow);
        }

        percentValue = RPayRateTable::find(taxRateCode).getValue(RPayRateCallContext::construct(document.payPeriod(), document.emplTable().EmployeeId));
        excelDocument.insertValue('AG' + int2str(startRow), percentValue);

        rpayTaxReportValue = emplTaxInfo.taxReportValue();
        if (emplTaxInfo.reportSign() == 2)
        {
            conValues = emplTaxInfo.reportValues();
            map = rpayTaxReportValue.getReversedIncDedByMonthBranch(taxRateCode, emplTaxInfo.taxBranchId(), conpeek(conValues, 1));
        }
        else
        {
            map = rpayTaxReportValue.getIncDedByMonthBranch(taxRateCode, emplTaxInfo.taxBranchId());
        }

         mapEnumerator = map.getEnumerator();
        if (map.elements() > 4)
        {
            while (mapEnumerator.moveNext())
            {
            conItem = mapEnumerator.currentValue();

            if (conpeek(conItem, 1))
            {
                i++;
                if (i > 4 && (i mod 2) == 1)
                {
                    excelDocument.insertRow(#IncomeFirstInsertRow + startRow);
                }
            }
            }
        }

        mapEnumerator.reset();

        while (mapEnumerator.moveNext())
        {
            con     = mapEnumerator.currentKey();
            conItem = mapEnumerator.currentValue();

            if (conpeek(conItem, 1))
            {
                if (n > 0)
                {
                    k = n mod 2;
                    j = (n mod 2) ? j : j+1;
                }

                tmp_str[1] = ! k ? 'A'  : 'BH';
                tmp_str[2] = ! k ? 'H'  : 'BO';
                tmp_str[3] = ! k ? 'P'  : 'BW';
                tmp_str[4] = ! k ? 'AF' : 'CM';
                tmp_str[5] = ! k ? 'AN' : 'CU';

                excelDocument.insertValue(tmp_str[1] + int2str(#IncomeFirstInsertRow + startRow + j), this.convertDayMonth(mthofyr(conpeek(con, 1))));
                excelDocument.insertValue(tmp_str[2] + int2str(#IncomeFirstInsertRow + startRow + j), this.convertCode(conpeek(con, 2)));
                excelDocument.insertValue(tmp_str[3] + int2str(#IncomeFirstInsertRow + startRow + j), this.convertAmount(conpeek(conItem, 1)));
                if (conpeek(conItem, 2))
                {
                    excelDocument.insertValue(tmp_str[4] + int2str(#IncomeFirstInsertRow + startRow + j), this.convertCode(conpeek(con, 3)));
                    excelDocument.insertValue(tmp_str[5] + int2str(#IncomeFirstInsertRow + startRow + j), this.convertAmount(conpeek(conItem, 2)));
                }

                n++;
            }
        }

        if (n > 2)
        {
            j--;
        }

        position = [startRow + j + #IncomeEndRow - #IncomeStartRow + 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOfficials</Name>
				<Source><![CDATA[
    protected void addOfficials()
    {
        excelDocument.insertValue(#RespName, document.responsibleName());
        excelDocument.insertValue(#RespTitle, document.responsibleTitle());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStandardDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Standart deduction data section in the excel document.
    /// </summary>
    protected void addStandardDeductions()
    {
        RpayTaxReportValue  rpayTaxReportValue;
        RPayAmount  currentValue;
        int         i, j, k, shift;
        str         tmp_str[2];
        container   con, conItem;

        if (!this.parmIsFirstTaxRateToPrint())
        {
            this.copySection(#StandardDeductionStartRow, #StandardDeductionEndRow, startRow);
        }

        if (emplTaxInfo.reportSign() != 2)
        {
            rpayTaxReportValue = emplTaxInfo.taxReportValue();

            con = rpayTaxReportValue.getDeductionByCodeBranch(emplTaxInfo.taxRateCode(), emplTaxInfo.taxBranchId());

            for (i = 1; i <= (conlen(con) - 1) div 4; i ++)
            {
                excelDocument.insertRow(#FirstInsertedRowStDeduct + startRow);
            }

            for (i = 1; i <= conlen(con); i++)
            {
                j = (i - 1) div 4;
                k = (i - 1) mod 4;

                tmp_str[1] = ! k ? 'A' : k == 1 ? 'AD' : k == 2 ? 'BH' : 'CK';
                tmp_str[2] = ! k ? 'L' : k == 1 ? 'AO' : k == 2 ? 'BS' : 'CV';

                conItem = conpeek(con, i);
                excelDocument.insertValue(tmp_str[1] + int2str(#firstInsertedRowStDeduct + startRow + j), this.convertCode(conpeek(conItem, 1)));
                excelDocument.insertValue(tmp_str[2] + int2str(#firstInsertedRowStDeduct + startRow + j), this.convertAmount(conpeek(conItem, 2)));
            }

            shift += j;

            currentValue = rpayTaxReportValue.assessedDeductionAmountRateBranch(emplTaxInfo.taxBranchId(), emplTaxInfo.taxRateCode());

            if (currentValue)
            {
                con = rpayTaxReportValue.getAssessedDeductionDocument();
                excelDocument.insertValue('BW' + int2str(#firstInsertedRowStDeduct + startRow + shift + 1), conpeek(con, 2));

                if (conpeek(con, 1) != datenull())
                {
                    excelDocument.insertValue('AC' + int2str(#firstInsertedRowStDeduct + startRow + shift + 2),this.convertDayMonth(dayofmth(conpeek(con, 1))));
                    excelDocument.insertValue('AG' + int2str(#firstInsertedRowStDeduct + startRow + shift + 2),this.convertDayMonth(mthofyr(conpeek(con, 1))));
                    excelDocument.insertValue('AK' + int2str(#firstInsertedRowStDeduct + startRow + shift + 2),year(conpeek(con, 1)));
                }
                excelDocument.insertValue('CY' + int2str(#firstInsertedRowStDeduct + startRow + shift + 2), document.emplTable().personTable().payGniCode);
            }
        }
        position = [startRow + j + #StandardDeductionEndRow - #StandardDeductionStartRow + 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxAgentData</Name>
				<Source><![CDATA[
    protected void addTaxAgentData()
    {
        CompanyInfo             companyInfo = CompanyInfo::find();
        int                     phonePos1, phonePos2;
        TaxTable                taxTable;
        TaxPeriodHead           taxPeriod;
        TaxAuthorityAddress     taxAuthority;
        BranchId_RU             branchId            = emplTaxInfo.taxBranchId();
        GniCode_RU              gniCode;
        VendTable               vendTable;
        TaxAuthorityOKATO_RU    taxAuthorityOKATO_RU;
        Phone                   phone;

        GniCode_RU getMainGniCode()
        {
            taxTable      = TaxTable::find(emplTaxInfo.taxCode());
            taxPeriod     = TaxPeriodHead::find(taxTable.TaxPeriod);
            taxAuthority  = TaxAuthorityAddress::find(taxPeriod.TaxAuthority);
            return taxAuthority.GniCode_RU;
        }

        if (branchId)
        {
            vendTable = VendTable::find(Branches_RU::find(branchId).VendAccount);

            select firstonly TaxAuthority from taxAuthorityOKATO_RU
                where taxAuthorityOKATO_RU.OKATO == vendTable.partyOKATOasOfDate_RU(document.payPeriod());

            taxAuthority  = TaxAuthorityAddress::find(taxAuthorityOKATO_RU.TaxAuthority);
            gniCode = taxAuthority.GniCode_RU;
        }
        else
        {
            gniCode  = getMainGniCode();
        }

        excelDocument.insertValue('DE8', gniCode);
        excelDocument.insertValue('BF9', branchId ? vendTable.partyINNasOfDate_RU(document.payPeriod())   : companyInfo.partyINNasOfDate_RU(document.payPeriod()));
        excelDocument.insertValue('CD9', branchId ? vendTable.partyKPPasOfDate_RU(document.payPeriod())   : companyInfo.partyKPPasOfDate_RU(document.payPeriod()));
        excelDocument.insertValue('P12', branchId ? vendTable.partyOKATOasOfDate_RU(document.payPeriod()) : CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, document.payPeriod()));

        phone = branchId ? vendTable.Phone() : companyInfo.Phone();
        phonePos1 = strfind(companyInfo.phone(),'(',1,strlen(phone));
        phonePos2 = strfind(companyInfo.phone(),')',1,strlen(phone));

        if (phonePos1 > 0 && phonePos2 > phonePos1 + 2)
        {
            excelDocument.insertValue('CE12', substr(phone,phonePos1+1,phonePos2-phonePos1 -1 ));
            excelDocument.insertValue('CL12', strltrim(substr(phone,phonePos2+1,strlen(phone)-phonePos2)));
        }
        else
        {
            excelDocument.insertValue('CL12', phone);
        }

        excelDocument.insertValue('A11', branchId ? vendTable.Name() : companyInfo.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Total amount section in the excel document.
    /// </summary>
    protected void addTotalAmounts()
    {
        Percent         percentValue;
        RPayRateCode    taxRateCode = emplTaxInfo.taxRateCode();
        container reportValues = emplTaxInfo.reportValues();
        #define.paymentYear(2011)

        if (!this.parmIsFirstTaxRateToPrint())
        {
            this.copySection(#TotalAmountsStartRow, #TotalAmountsEndRow, startRow);
        }

        percentValue = RPayRateTable::find(taxRateCode).getValue(RPayRateCallContext::construct(document.payPeriod(), document.emplTable().EmployeeId));
        excelDocument.insertValue('BT' + int2str(startRow), percentValue);

        excelDocument.insertValue('CM' + int2str(startRow + 1), this.convertAmount(conpeek(reportValues, 1)));
        excelDocument.insertValue('CM' + int2str(startRow + 2), this.convertAmount(conpeek(reportValues, 2)));
        excelDocument.insertValue('CM' + int2str(startRow + 3), this.convertAmount(conpeek(reportValues, 3), 0));
        if (emplTaxInfo.reportSign() != 2)
        {
            excelDocument.insertValue('CM' + int2str(startRow + 4), this.convertAmount(conpeek(reportValues, 4), 0));
            if (year(document.payPeriod()) >= #paymentYear)
                excelDocument.insertValue('CM' + int2str(startRow + 5), this.convertAmount(conpeek(reportValues, 5), 0));

            excelDocument.insertValue('CM' + int2str(startRow + 6), this.convertAmount(conpeek(reportValues, 6), 0));
        }
        excelDocument.insertValue('CM' + int2str(startRow + 7), this.convertAmount(conpeek(reportValues, 7), 0));

        position = [startRow + #TotalAmountsEndRow - #TotalAmountsStartRow + 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPosition</Name>
				<Source><![CDATA[
    protected void calcPosition()
    {
        super();
        [startRow] = position;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void copySection(int _srcStartRow, int _srcEndRow, int _destRow)
    {
        excelDocument.insertRowsRange(_srcStartRow, _srcEndRow, _destRow, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentMedia</Name>
				<Source><![CDATA[
    protected void initDocumentMedia()
    {
        super();
        excelDocument = document.media();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>