<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TemporaryDifferences</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.assetProfitID("Asset")
#define.assetClothsProfitID("AssetCloth")
#define.assetRiggingProfitID("AssetRigg")
final class rTax25RegCalc_TemporaryDifferences extends RTax25RegCalc implements BatchRetryable
{
    RAssetStandardId rAssetStandardId,rAssetStandardTaxId;
    RDeferralsBookId rDeferralsBookId,rDeferralsBookTaxId;
    Range            parmTypeId;
    Counter          transCount;
    TaxCode          assetTaxCode,lastTaxCode;
    TaxCode          debtReserveTaxCode;
    Map              registerLineMap;
    RefRecId         lastProfitTableRecId;
    AmountMST        totalAmountReceipt,totalAmountIssue,totalBalance,totalCreatingDTA,totalDecreasingDTA,
                     totalCreatingDTL,totalDecreasingDTL,totalWritingOffDTA,totalWritingOffDTL;
    AmountMST        taxCodeAmountReceipt,taxCodeAmountIssue,taxCodeBalance,taxCodeCreatingDTA,taxCodeDecreasingDTA,
                     taxCodeCreatingDTL,taxCodeDecreasingDTL,taxCodeWritingOffDTA,taxCodeWritingOffDTL;
    AmountMST        profitAmountReceipt,profitAmountIssue,profitBalance,profitCreatingDTA,profitDecreasingDTA,
                     profitCreatingDTL,profitDecreasingDTL,profitWritingOffDTA,profitWritingOffDTL;
    
    const str DebtReserveProfitID = 'DebtReserve';

    #define.FieldNum1(1)
    #define.FieldNum2(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        SysQueryRun         assetQueryRun, deferralsQueryRun, assetClothsQueryRun, assetRiggingQueryRun;
        RAssetTable         rAssetTable;
        RDeferralsTable     rDeferralsTable;
        ;
        assetQueryRun        = this.queryRunAsset(RAssetGroupTypes::FixedAssets);
        assetClothsQueryRun  = this.queryRunAsset(RAssetGroupTypes::Cloths);
        assetRiggingQueryRun = this.queryRunAsset(RAssetGroupTypes::Rigging);
        deferralsQueryRun    = this.queryRunDeferrals();
        this.progressInit("",SysQuery::countLoops(assetQueryRun) + SysQuery::countLoops(assetClothsQueryRun) +
                                SysQuery::countLoops(assetRiggingQueryRun) +SysQuery::countLoops(deferralsQueryRun) + this.isDebtReserves());
        try
        {

            ttsbegin;

            super();

            assetQueryRun.init();
            while (assetQueryRun.next())
            {
                rAssetTable = assetQueryRun.get(tablenum(RAssetTable));
                progress.setText(strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
                progress.incCount();
                this.createBodyAsset(rAssetTable, RAssetGroupTypes::FixedAssets);
            }

            assetClothsQueryRun.init();
            while (assetClothsQueryRun.next())
            {
                rAssetTable = assetClothsQueryRun.get(tablenum(RAssetTable));
                progress.setText(strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
                progress.incCount();
                this.createBodyAsset(rAssetTable, RAssetGroupTypes::Cloths);
            }

            assetRiggingQueryRun.init();
            while (assetRiggingQueryRun.next())
            {
                rAssetTable = assetRiggingQueryRun.get(tablenum(RAssetTable));
                progress.setText(strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
                progress.incCount();
                this.createBodyAsset(rAssetTable, RAssetGroupTypes::Rigging);
            }

            deferralsQueryRun.init();
            while (deferralsQueryRun.next())
            {
                rDeferralsTable = deferralsQueryRun.get(tablenum(RDeferralsTable));
                progress.setText(strfmt("@GLS107170", rDeferralsTable.DeferralsId, rDeferralsTable.Name));
                progress.incCount();
                this.createBodyDeferrals(rDeferralsTable);
            }

            if (this.isDebtReserves())
            {
                progress.setText("@RTax25BadDebtReserve:ReserveBadDebts");
                progress.incCount();
                this.createBodyDebtReserve();
            }
 
            this.sortRegisterTrans();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDiffForReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax differences for bad debt reserves.
    /// </summary>
    /// <param name="_profitTableRecId">
    /// A record ID of the profit table.
    /// </param>
    /// <param name="_key">
    /// A container holding accounting object ID information.
    /// </param>
    /// <param name="_valueRAP">
    /// A container holding amounts calculated for business accounting model.
    /// </param>
    /// <param name="_valueTAX">
    /// A container holding amounts calculated for tax accounting model.
    /// </param>
    /// <param name="_writtenOff">
    /// A container holding written-off amounts.
    /// </param>

    private void calcDiffForReserve(
        RefRecId    _profitTableRecId,
        container   _key,
        container   _valueRAP,
        container   _valueTAX,
        boolean     _writtenOff)
    {
        AmountMST       startBalance;
        AmountMST       creatingDTA,
                        creatingDTL,
                        decreasingDTA,
                        decreasingDTL,
                        currentDifference;

        startBalance        = conPeek(_valueRAP, 1) - conPeek(_valueTAX, 1);
        currentDifference   = conPeek(_valueRAP, 2) - conPeek(_valueTAX, 2);

        if (startBalance || currentDifference)
        {
            transCount++;
            [startBalance,currentDifference,creatingDTA,decreasingDTA,creatingDTL,decreasingDTL] = this.calcLineAmounts(startBalance,
                                                                                                                    currentDifference,
                                                                                                                    debtReserveTaxCode,
                                                                                                                    true);
            this.insertRegisterMap(assetTaxCode,
                                regQuery.addBodyRecord(_profitTableRecId,
                                                        [conPeek(_key, 4),                              //posting date
                                                        strFmt("@RTax25BadDebtReserve:ReserveFor", conPeek(_key, 3)), //invoice number
                                                        dateTo,
                                                        conPeek(_valueRAP, 1) + conPeek(_valueRAP, 2),  //expense on the period end for RAP
                                                        conPeek(_valueTAX, 1) + conPeek(_valueTAX, 2),  //expense on the period end for TAX
                                                        startBalance,
                                                        creatingDTA,
                                                        _writtenOff ? 0.00 : decreasingDTA,
                                                        creatingDTL,
                                                        _writtenOff ? 0.00 : decreasingDTL,
                                                        _writtenOff ? decreasingDTA : 0.00,
                                                        _writtenOff ? decreasingDTL : 0.00],
                                                        conPeek(_key, 1),       //RefTableId
                                                        conPeek(_key, 2),       //RefRecId
                                                        conPeek(_key, 1) != 0 ?
                                                        strfmt("@RTax25BadDebtReserve:TempDiffForInv", conPeek(_key, 3)) :
                                                        "@RTax25BadDebtReserve:TempDiffTotal",
                                                        -transCount,
                                                        CurrencyExchangeHelper::amount(conPeek(_valueRAP, 2) - conPeek(_valueTAX, 2))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcLineAmounts(AmountMST _startBalance,
                                        AmountMST _currentDiffrence,
                                        TaxCode   _taxCode,
                                        boolean   _calcTaxBalance)
    {
        AmountMST creatingDTA,creatingDTL,decreasingDTA,decreasingDTL;
        Tax       tax = new Tax();
        AmountMST startBalance,currentDiffrence;
        ;
        if (_calcTaxBalance)
        {
            startBalance = tax.taxCalcWithoutSource_RU(_taxCode,
                                                       dateTo,
                                                       CompanyInfoHelper::standardCurrency(),
                                                       _startBalance,
                                                       TaxModuleType::Voucher);
        }
        else
        {
            startBalance = _startBalance;
        }
        tax = new Tax();
        currentDiffrence = tax.taxCalcWithoutSource_RU(_taxCode,
                                                       dateTo,CompanyInfoHelper::standardCurrency(),
                                                       _currentDiffrence,
                                                       TaxModuleType::Voucher);
        if (startBalance >= 0)
        {
            if (currentDiffrence >= 0)
            {
                 creatingDTA =  currentDiffrence;
            }
            else
            {
                if (startBalance >= - currentDiffrence)
                {
                    decreasingDTA = - currentDiffrence;
                }
                else
                {
                    decreasingDTA = startBalance;
                    creatingDTL   = - currentDiffrence - startBalance;
                }
            }
        }
        else
        {
            if (currentDiffrence <= 0)
            {
                 creatingDTL =  - currentDiffrence;
            }
            else
            {
                if ( -startBalance >= currentDiffrence)
                {
                    decreasingDTL = currentDiffrence;
                }
                else
                {
                    decreasingDTL = -startBalance;
                    creatingDTA   = currentDiffrence + startBalance;
                }
            }
        }
        return [startBalance,currentDiffrence,creatingDTA,decreasingDTA,creatingDTL,decreasingDTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            if (! rAssetStandardId)
                ret = checkFailed(strfmt("@GLS107145","@SYS12578"));
            if (! rAssetStandardTaxId)
                ret = checkFailed(strfmt("@GLS107146","@SYS12578"));
            if (! rDeferralsBookId)
                ret = checkFailed(strfmt("@GLS107145","@GLS103666"));
            if (! rDeferralsBookTaxId)
                ret = checkFailed(strfmt("@GLS107146","@GLS103666"));
            if (rAssetStandardId == rAssetStandardTaxId)
                ret =checkFailed(strfmt("@GLS107147","@SYS12578"));
            if (rDeferralsBookId == rDeferralsBookTaxId)
                ret =checkFailed(strfmt("@GLS107147","@GLS103666"));
            if (! assetTaxCode)
                ret = checkFailed("@GLS107150");

            if (! debtReserveTaxCode)
            {
                ret = checkFailed("@RTax25BadDebtReserve:BadDebtTaxCodeNotSet");
            }

        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBodyDebtReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates tax difference register lines for doubtful debt reserves.
    /// </summary>
    protected void createBodyDebtReserve()
    {
        RTax25DebtModel rTax25DebtModel;
        Map             mapExpenseRAP;
        Map             mapExpenseTAX;
        MapEnumerator   enumerator;
        container       key, valueRAP, valueTAX;
        TransDate       modelStartDate, modelEndDate;
        Set             setWrittenOff;
        Set             setProcessedKeys = new Set(Types::Container);
        RefRecId        profitTableRecId = RTax25ProfitTable::findByProfitId(DebtReserveProfitID).RecId;

        RTax25DebtReserveTaxExpenseCalc expenseCalc;

        Map summarizeMap(Map _map)
        {
            container       value;
            container       total       = [0, 0];
            Map             mapResult   = new Map(Types::Container, Types::Container);
            MapEnumerator   e           = _map.getEnumerator();

            while (e.moveNext())
            {
                value = e.currentValue();
                total = [conPeek(total, 1) + conPeek(value, 1), conPeek(total, 2) + conPeek(value, 2)];
            }

            mapResult.insert([0, 0, '', dateNull()], total);

            return mapResult;
        }

        rTax25DebtModel = RTax25DebtModel::findRecId(CustParameters::rTax25DebtModelTax());

        [modelStartDate, modelEndDate] = RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, dateTo);

        if (modelEndDate != dateTo)
        {
            return;
        }

        expenseCalc     = RTax25DebtReserveTaxExpenseCalc::newParameters(modelStartDate, modelEndDate, RTax25DebtModelType::RAP, true);
        mapExpenseRAP   = expenseCalc.getExpenseMap();
        setWrittenOff   = expenseCalc.getWrittenOffSet();

        expenseCalc     = RTax25DebtReserveTaxExpenseCalc::newParameters(modelStartDate, modelEndDate, RTax25DebtModelType::TAX, true);
        mapExpenseTAX   = expenseCalc.getExpenseMap();
        if (! setWrittenOff.elements())
        {
            setWrittenOff = expenseCalc.getWrittenOffSet();
        }

        if (RTax25DebtModel::findRecId(CustParameters::rTax25DebtModel()).AccountingPolicy == RTax25DebtPolicy::Total)
        {
            mapExpenseTAX = summarizeMap(mapExpenseTAX);
        }

        if (RTax25DebtModel::findRecId(CustParameters::rTax25DebtModelTax()).AccountingPolicy == RTax25DebtPolicy::Total)
        {
            mapExpenseRAP = summarizeMap(mapExpenseRAP);
        }

        enumerator = mapExpenseRAP.getEnumerator();
        while (enumerator.moveNext())
        {
            key         = enumerator.currentKey();
            valueRAP    = enumerator.currentValue();

            if (mapExpenseTAX.exists(key))
            {
                valueTAX = mapExpenseTAX.lookup(key);
                setProcessedKeys.add(key);
            }
            else
            {
                valueTAX = [0, 0];
            }

            this.calcDiffForReserve(
            profitTableRecId,
            key,
            valueRAP,
            valueTAX,
            setWrittenOff.in([conPeek(key, 1), conPeek(key, 2)]));
        }

        enumerator = mapExpenseTAX.getEnumerator();
        while (enumerator.moveNext())
        {
            key         = enumerator.currentKey();
            valueTAX    = enumerator.currentValue();

            if (setProcessedKeys.in(key))
            {
                continue;
            }

            this.calcDiffForReserve(
            profitTableRecId,
            key,
            [0, 0],
            valueTAX,
            setWrittenOff.in([conPeek(key, 1), conPeek(key, 2)]));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBodyAsset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createBodyAsset(RAssetTable _rAssetTable, RAssetGroupTypes _assetGroupTypes = RAssetGroupTypes::FixedAssets)
    {
        RAssetSumCalc_TransCorr rAssetSumCalc_Trans;
    
        RAssetStandards     rAssetStandards = RAssetStandards::find(_rAssetTable.AccountNum,rAssetStandardId);
        TransDate           startDate;
        TransDate           endDate;
        TransDate           transDate;
        AmountMST           startBalance;
        AmountMST           netBookValue,taxNetBookValue;
        AmountMST           depreciation,taxDepreciation;
        AmountMST           creatingDTA,creatingDTL,decreasingDTA,decreasingDTL,currentDifference = 0.0,disposalAmount = 0.0;
        RefRecId            profitTableRecId;
    
    
        for (endDate = dateFrom; endDate <= dateTo && ! disposalAmount; endDate = endmth(nextmth(endDate)))
        {
            startDate = endmth(prevmth(endDate));
            if (endDate == dateFrom)
            {
                rAssetSumCalc_Trans = RAssetSumCalc_TransCorr::newAssetPeriod(_rAssetTable.AccountNum, rAssetStandardId);
                rAssetSumCalc_Trans.parmDateTo(startDate);
                startBalance = -rAssetSumCalc_Trans.depreciationTotalMST();
                rAssetSumCalc_Trans.parmRangeAssetStandard(rAssetStandardTaxId);
                startBalance += rAssetSumCalc_Trans.depreciationTotalMST();
            }
            else
            {
                startBalance += currentDifference;
            }
            transDate = endmth(endDate);
            rAssetSumCalc_Trans.parmRangeAssetStandard(rAssetStandardId);
            rAssetSumCalc_Trans.parmDateFrom(startDate + 1);
            rAssetSumCalc_Trans.parmDateTo(transDate);
            depreciation = - rAssetSumCalc_Trans.depreciationTotalMST();
            rAssetSumCalc_Trans.parmRangeAssetStandard(rAssetStandardTaxId);
            taxDepreciation = - rAssetSumCalc_Trans.depreciationTotalMST();
            currentDifference = depreciation - taxDepreciation;
            if (startBalance || currentDifference)
            {
                transCount++;
                [startBalance,currentDifference,creatingDTA,decreasingDTA,creatingDTL,decreasingDTL] = this.calcLineAmounts(startBalance,
                                                                                                                           currentDifference,
                                                                                                                           assetTaxCode,
                                                                                                                           endDate == dateFrom);
                if (rAssetStandards.DisposalDate >= startDate &&
                    rAssetStandards. DisposalDate <= transDate)
                {
                    transDate = rAssetStandards.DisposalDate;
                    disposalAmount = startBalance + currentDifference;
                }
                else
                {
                    rAssetSumCalc_Trans.parmRangeAssetStandard(rAssetStandardId);
                    rAssetSumCalc_Trans.parmDateFrom(dateNull());
                    rAssetSumCalc_Trans.parmDateTo(transDate);
                    netBookValue = rAssetSumCalc_Trans.netBookValue();
                    rAssetSumCalc_Trans.parmRangeAssetStandard(rAssetStandardTaxId);
                    taxNetBookValue = rAssetSumCalc_Trans.netBookValue();
                    if (netBookValue == 0 && taxNetBookValue == 0)
                    {
                        disposalAmount = startBalance + currentDifference;
                    }
                }
    
                switch(_assetGroupTypes)
                {
                    case RAssetGroupTypes::FixedAssets:
                        profitTableRecId = RTax25ProfitTable::findByProfitId(#assetProfitId).RecId;
                        break;
    
                    case RAssetGroupTypes::Cloths:
                        profitTableRecId = RTax25ProfitTable::findByProfitId(#assetClothsProfitID).RecId;
                        break;
    
                    case RAssetGroupTypes::Rigging:
                        profitTableRecId = RTax25ProfitTable::findByProfitId(#assetRiggingProfitID).RecId;
                        break;
    
                    default:
                        profitTableRecId = RTax25ProfitTable::findByProfitId(#assetProfitId).RecId;
                        break;
                }
    
                this.insertRegisterMap(assetTaxCode,
                                       regQuery.addBodyRecord(profitTableRecId,
                                                              [_rAssetTable.AcquisitionDate,
                                                              strfmt("@GLS116360",_rAssetTable.AccountNum,_rAssetTable.Name),
                                                              transDate,
                                                              depreciation,
                                                              taxDepreciation,
                                                              startBalance,
                                                              creatingDTA,
                                                              decreasingDTA,
                                                              creatingDTL,
                                                              decreasingDTL,
                                                              disposalAmount >= 0 ?  disposalAmount : 0.0,
                                                              disposalAmount <  0 ? -disposalAmount : 0.0],
                                                              _rAssetTable.TableId,
                                                              _rAssetTable.RecId,
                                                              strfmt("@GLS116360", _rAssetTable.AccountNum, _rAssetTable.Name),
                                                              -transCount,
                                                              CurrencyExchangeHelper::amount(depreciation - taxDepreciation)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBodyDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createBodyDeferrals(RDeferralsTable _rDeferralsTable)
    {
        RDeferralsSumCalc_TransCorr rDeferralsSumCalc_Trans;
    
        RDeferralsBook          rDeferralsBook, rDeferralsTaxBook;
        TransDate               startDate;
        TransDate               endDate;
        TransDate               transDate;
        AmountMST               startBalance, startWritingOffAmount;
        AmountMST               netBookValue,taxNetBookValue;
        AmountMST               writingOffAmount,taxWritingOffAmount;
        AmountMST               creatingDTA,creatingDTL,decreasingDTA,decreasingDTL,currentDifference = 0,retiredAmount = 0;
        TaxCode                 taxCode = RTax25ProfitTable::find(_rDeferralsTable.rTax25ProfitTable).taxCode();
        Tax                     tax = new Tax();
        boolean                 calcTaxBalance = true;
        RTax25Description       transText = strfmt("@GLS107170", _rDeferralsTable.DeferralsId, _rDeferralsTable.Name);
    
    
        rDeferralsBook = RDeferralsBook::find(_rDeferralsTable.DeferralsId,rDeferralsBookId);
        if (! rDeferralsBook.RecId)
        {
            rDeferralsBook = RDeferralsBook::find(_rDeferralsTable.DeferralsId,rDeferralsBookTaxId);
            rDeferralsTaxBook = rDeferralsBook;
        }
        if (_rDeferralsTable.RefRecId && _rDeferralsTable.RefTableId == tableNum(RAssetTable) && taxCode)
        {
            if (_rDeferralsTable.AcquisitionDate <= dateTo)
            {
                if (!rDeferralsTaxBook)
                {
                    rDeferralsTaxBook = RDeferralsBook::find(_rDeferralsTable.DeferralsId,rDeferralsBookTaxId);
                }
                startBalance = rDeferralsTaxBook.DeferralsAmount;
                // Add register trans if deferral AcquisitionDate within register period
                if (_rDeferralsTable.AcquisitionDate >= dateFrom && startBalance != 0)
                {
    
                    creatingDTA = tax.taxCalcWithoutSource_RU(taxCode,
                                                dateTo,
                                                CompanyInfoHelper::standardCurrency(),
                                                startBalance,
                                                TaxModuleType::Voucher);
                    transCount ++;
                    this.insertRegisterMap(taxCode,
                                           regQuery.addBodyRecord(_rDeferralsTable.rTax25ProfitTable,
                                                                  [_rDeferralsTable.AcquisitionDate,
                                                                  transText,
                                                                  _rDeferralsTable.AcquisitionDate,
                                                                  startBalance,
                                                                  0.0,
                                                                  0.0,
                                                                  creatingDTA,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0],
                                                                  _rDeferralsTable.TableId,
                                                                  _rDeferralsTable.RecId,
                                                                  transText,
                                                                  -transCount,
                                                                  startBalance));
                }
            }
        }
    
        for (endDate = dateFrom; endDate <= dateTo && taxCode && ! retiredAmount; endDate = endmth(nextmth(endDate)))
        {
            startDate = endmth(prevmth(endDate));
            if (endDate == dateFrom)
            {
                rDeferralsSumCalc_Trans = RDeferralsSumCalc_TransCorr::newDeferralsPeriod(_rDeferralsTable.DeferralsId,rDeferralsBookId);
                rDeferralsSumCalc_Trans.parmDateTo(startDate);
                startWritingOffAmount -= rDeferralsSumCalc_Trans.writingOffValue();
                rDeferralsSumCalc_Trans.parmRangeDeferralsBookId(rDeferralsBookTaxId);
                startWritingOffAmount += rDeferralsSumCalc_Trans.writingOffValue();
                startBalance += startWritingOffAmount;
            }
            else
            {
                startBalance += currentDifference;
            }
            transDate = endmth(endDate);
            rDeferralsSumCalc_Trans.parmRangeDeferralsBookId(rDeferralsBookId);
            rDeferralsSumCalc_Trans.parmDateFrom(startDate + 1);
            rDeferralsSumCalc_Trans.parmDateTo(transDate);
            writingOffAmount = - rDeferralsSumCalc_Trans.writingOffValue();
            rDeferralsSumCalc_Trans.parmRangeDeferralsBookId(rDeferralsBookTaxId);
            taxWritingOffAmount = - rDeferralsSumCalc_Trans.writingOffValue();
            currentDifference = writingOffAmount - taxWritingOffAmount;
            if ((!calcTaxBalance && startBalance) || (calcTaxBalance && startWritingOffAmount) || currentDifference)
            {
                transCount++;
                [startBalance,currentDifference,creatingDTA,decreasingDTA,creatingDTL,decreasingDTL] = this.calcLineAmounts(startBalance,
                                                                                                                           currentDifference,
                                                                                                                           taxCode,
                                                                                                                           calcTaxBalance);
                calcTaxBalance = false;
                if (rDeferralsBook.RetirementDate >= startDate &&
                    rDeferralsBook.RetirementDate <= transDate   &&
                    rDeferralsBook.Status == RDeferralsStatus::Retired)
                {
                    transDate = rDeferralsBook.RetirementDate;
                    retiredAmount = startBalance + currentDifference;
                }
                else
                {
                    rDeferralsSumCalc_Trans.parmRangeDeferralsBookId(rDeferralsBookId);
                    rDeferralsSumCalc_Trans.parmDateFrom(dateNull());
                    rDeferralsSumCalc_Trans.parmDateTo(transDate);
                    netBookValue = rDeferralsSumCalc_Trans.netBookValue();
                    rDeferralsSumCalc_Trans.parmRangeDeferralsBookId(rDeferralsBookTaxId);
                    taxNetBookValue = rDeferralsSumCalc_Trans.netBookValue();
                    if (netBookValue == 0 && taxNetBookValue == 0)
                    {
                        retiredAmount = startBalance + currentDifference;
                    }
                }
                this.insertRegisterMap(taxCode,
                                       regQuery.addBodyRecord(_rDeferralsTable.rTax25ProfitTable,
                                                              [_rDeferralsTable.AcquisitionDate,
                                                              transText,
                                                              transDate,
                                                              writingOffAmount,
                                                              taxWritingOffAmount,
                                                              startBalance,
                                                              creatingDTA,
                                                              decreasingDTA,
                                                              creatingDTL,
                                                              decreasingDTL,
                                                              retiredAmount >= 0 ? retiredAmount : 0.0,
                                                              retiredAmount <  0 ? -retiredAmount : 0.0],
                                                              _rDeferralsTable.TableId,
                                                              _rDeferralsTable.RecId,
                                                              transText,
                                                              -transCount,
                                                              CurrencyExchangeHelper::amount(writingOffAmount - taxWritingOffAmount)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFooter(Counter       _i,
                                RTax25FieldId _blockFieldNum = 0)
    {
        TaxValue          taxValue = TaxData::percent(lastTaxCode,dateTo,0);
        RefRecId          profitTableRecId;
        RTax25Description description;
    
        switch(_blockFieldNum)
        {
            case #FieldNum1:
                regQuery.addFooterRecord(0,
                                        [dateNull(),
                                         "",
                                         dateNull(),
                                         taxCodeAmountReceipt,
                                         taxCodeAmountIssue,
                                         taxCodeBalance,
                                         taxCodeCreatingDTA,
                                         taxCodeDecreasingDTA,
                                         taxCodeCreatingDTL,
                                         taxCodeDecreasingDTL,
                                         taxCodeWritingOffDTA,
                                         taxCodeWritingOffDTL],
                                         0,
                                         strfmt("@GLS107102", lastTaxCode,taxValue),
                                         _i);
                taxCodeAmountReceipt = 0;
                taxCodeAmountIssue   = 0;
                taxCodeBalance       = 0;
                taxCodeCreatingDTA   = 0;
                taxCodeDecreasingDTA = 0;
                taxCodeCreatingDTL   = 0;
                taxCodeDecreasingDTL = 0;
                taxCodeWritingOffDTA = 0;
                taxCodeWritingOffDTL = 0;
            break;
            case #FieldNum2:
                switch (lastProfitTableRecId)
                {
                    case RTax25ProfitTable::findByProfitId(#assetProfitId).RecId:
                        profitTableRecId    = 0;
                        description = strfmt("@SYS90673","@SYS12578");
                        break;
    
                    case RTax25ProfitTable::findByProfitId(#assetClothsProfitID).RecId:
                        profitTableRecId    = 0;
                        description = strfmt("@SYS90673", "@GLS113945");
                        break;
    
                    case RTax25ProfitTable::findByProfitId(#assetRiggingProfitID).RecId:
                        profitTableRecId    = 0;
                        description = strfmt("@SYS90673","@GLS113946");
                        break;

                    case RTax25ProfitTable::findByProfitId(DebtReserveProfitID).RecId:
                        profitTableRecId    = 0;
                        description = strfmt("@SYS90673","@RTax25BadDebtReserve:ReserveBadDebts");
                        break;
    
                    default:
                        profitTableRecId    = lastProfitTableRecId;
                        description = strfmt("@GLS103999", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId);
                        break;
                }
    
                regQuery.addFooterRecord(profitTableRecId,
                                        [dateNull(),
                                         "",
                                         dateNull(),
                                         profitAmountReceipt,
                                         profitAmountIssue,
                                         profitBalance,
                                         profitCreatingDTA,
                                         profitDecreasingDTA,
                                         profitCreatingDTL,
                                         profitDecreasingDTL,
                                         profitWritingOffDTA,
                                         profitWritingOffDTL],
                                         0,
                                         description,
                                         _i);
                profitAmountReceipt = 0;
                profitAmountIssue   = 0;
                profitBalance       = 0;
                profitCreatingDTA   = 0;
                profitDecreasingDTA = 0;
                profitCreatingDTL   = 0;
                profitDecreasingDTL = 0;
                profitWritingOffDTA = 0;
                profitWritingOffDTL = 0;
            break;
            default:
                regQuery.addFooterRecord(0,
                                        [dateNull(),
                                         "",
                                         dateNull(),
                                         totalAmountReceipt,
                                         totalAmountIssue,
                                         totalBalance,
                                         totalCreatingDTA,
                                         totalDecreasingDTA,
                                         totalCreatingDTL,
                                         totalDecreasingDTL,
                                         totalWritingOffDTA,
                                         totalWritingOffDTL],
                                         0,
                                         "@SYS37297",
                                         _i);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createHeader(Counter       _i,
                                RTax25FieldId _blockFieldNum = 0)
    
    {
        RefRecId          profitTableRecId;
        RTax25Description description;
    
        switch(_blockFieldNum)
        {
            case #FieldNum1:
                regQuery.addHeaderRecord(0,
                                         conNull(),
                                         0,
                                         strfmt("@GLS107103",lastTaxCode, TaxData::percent(lastTaxCode,dateTo,0)),
                                         _i);
            break;
            case #FieldNum2:
                switch (lastProfitTableRecId)
                {
                    case RTax25ProfitTable::findByProfitId(#assetProfitId).RecId:
                        profitTableRecId    = 0;
                        description = "@SYS19633";
                        break;
    
                    case RTax25ProfitTable::findByProfitId(#assetClothsProfitID).RecId:
                        profitTableRecId    = 0;
                        description = "@GLS113945";
                        break;
    
                    case RTax25ProfitTable::findByProfitId(#assetRiggingProfitID).RecId:
                        profitTableRecId    = 0;
                        description = "@GLS113946";
                        break;

                    case RTax25ProfitTable::findByProfitId(DebtReserveProfitID).RecId:
                        profitTableRecId    = 0;
                        description = "@RTax25BadDebtReserve:ReserveBadDebts";
                        break;
    
                    default:
                        profitTableRecId    = lastProfitTableRecId;
                        description = strfmt("@GLS104111", lastProfitTableRecId);
                        break;
                }
    
                regQuery.addHeaderRecord(profitTableRecId,
                                         conNull(),
                                         0,
                                         description,
                                         _i);
            break;
            default:
                 regQuery.addHeaderRecord(0,
                                          conNull(),
                                          0,
                                          "@SYS28004",
                                          _i);
            break;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    #define.RegisterCode2(2)
    #define.RegisterCode3(3)
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        RTax25ProfitTable   registerTable;
        boolean ret = super(_registerJournalTrans, _batch);
        const int RegisterCode5 = 5;
    
        rAssetStandardId    = RAssetParameters::standardIdDefault();
        rAssetStandardTaxId = RAssetParameters::standardTaxIdDefault();
        rDeferralsBookId    = RDeferralsParameters::find().DeferralsBookIdDefault;
        rDeferralsBookTaxId = RTax25Parameters::find().DeferralsBookId;
        parmTypeId          = RTax25RegisterParameters::find(registerId, #RegisterCode2).Parameter;
        assetTaxCode        = strltrim(strrtrim(RTax25RegisterParameters::find(registerId, #RegisterCode3).Parameter));
        debtReserveTaxCode  = strltrim(strrtrim(RTax25RegisterParameters::find(registerId, RegisterCode5).Parameter));

        if(! parmTypeId)
        {
           parmTypeId =  queryValue(RAssetType::Tangible);
           parmTypeId =  queryRangeConcat(parmTypeId,RAssetType::LandBuilding);
        }
        registerLineMap = new Map(Types::String,Types::Class);
    
        if(!RTax25ProfitTable::exist(#assetProfitID))
        {
            registerTable.ProfitId = #assetProfitID;
            registerTable.doInsert();
        }
        if(!RTax25ProfitTable::exist(#assetClothsProfitID))
        {
            registerTable.ProfitId = #assetClothsProfitID;
            registerTable.doInsert();
        }
        if(!RTax25ProfitTable::exist(#assetRiggingProfitID))
        {
            registerTable.ProfitId = #assetRiggingProfitID;
            registerTable.doInsert();
        }
        if(!RTax25ProfitTable::exist(DebtReserveProfitID))
        {
            registerTable.ProfitId = DebtReserveProfitID;
            registerTable.TaxCode  = debtReserveTaxCode;
            registerTable.doInsert();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDebtReserves</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax differences for doubtful debt reserves should be calculated.
    /// </summary>
    /// <returns>
    /// A boolean value indicating if tax differences for doubtful debt reserves should be calculated.
    /// </returns>

    private boolean isDebtReserves()
    {
        RTax25RegisterTable rTax25RegisterTable;

        select firstOnly RecId from rTax25RegisterTable
            where rTax25RegisterTable.RegisterType  == RTax25RegisterType::DebtDebitReservation
               || rTax25RegisterTable.RegisterType  == RTax25RegisterType::DebtDebitReservationDetail
               || rTax25RegisterTable.RegisterType  == RTax25RegisterType::DebtDebitReservationRAP
               || rTax25RegisterTable.RegisterType  == RTax25RegisterType::DebtDebitReservationDetailRAP;

        return rTax25RegisterTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterMap</Name>
				<Source><![CDATA[
    private void insertRegisterMap(TaxCode             _taxCode,
                                   RTax25RegisterTrans_TemporaryDifferences _regTrans)
    {
        RecordSortedList registerTransList;
    
        if (registerLineMap.exists(_taxCode))
        {
            registerTransList = registerLineMap.lookup(_taxCode);
        }
        else
        {
            registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_TemporaryDifferences));
            registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_TemporaryDifferences, RTax25ProfitTable),
                                        fieldnum(RTax25RegisterTrans_TemporaryDifferences, LineNumber));
        }
        _regTrans.LineNumber = -_regTrans.LineNumber;
        registerTransList.ins(_regTrans);
        registerLineMap.insert(_taxCode, registerTransList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunAsset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected SysQueryRun queryRunAsset(RAssetGroupTypes _assetGroupTypes = RAssetGroupTypes::FixedAssets)
    {
        SysQuery                query = new SysQuery();
        SysQueryRun             queryRun;
        QueryBuildDataSource    qbds, qbdsRAssetTable;
        Range                   queryRange = queryValue(rAssetStandardTaxId);
        ;
        qbdsRAssetTable = query.addDataSource(tablenum(RAssetTable));
    
        if (_assetGroupTypes == RAssetGroupTypes::FixedAssets)
            qbdsRAssetTable.addRange(fieldnum(RAssetTable, AssetType)).value(parmTypeId);
    
        qbds = qbdsRAssetTable.addDataSource(tablenum(RAssetMainGroup));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addSelectionField(fieldNum(RAssetMainGroup, TableId));
        qbds.addRange(fieldnum(RAssetMainGroup, GroupType)).value(queryValue(_assetGroupTypes));
        qbds.addLink(fieldnum(RAssetTable,  AssetGroup), fieldnum(RAssetMainGroup,  AssetMainGroupId));
    
        qbds = qbdsRAssetTable.addDataSource(tablenum(RAssetStandards));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldnum(RAssetStandards,AssetStandardId)).value(queryRange);
        qbds.addRange(fieldnum(RAssetStandards,AssetGroup)).value(RTax25RegisterParameters::find(registerId, 1).Parameter);
    
        qbds = qbds.addDataSource(tablenum(RAssetTransReportingView));
        qbds.joinMode(JoinMode::ExistsJoin);
    
        qbds.addLink(fieldnum(RAssetStandards, AssetId),
                     fieldnum(RAssetTransReportingView, AccountNum));
    
        qbds.addRange(fieldnum(RAssetTransReportingView,AssetStandardId)).value(queryRangeConcat(queryRange, rAssetStandardId));
    
        queryRange = queryValue(RAssetTransType::Depreciation);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::DepreciationAdj);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::WriteDownAdj);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::Disposal);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::DisposalScrap);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::DisposalSale);
    
        qbds.addRange(fieldnum(RAssetTransReportingView,AssetTransType)).value(queryRange);
        qbds.addRange(fieldnum(RAssetTransReportingView,StornoRecId)).value(queryValue(0));
        rTax25PeriodIterator.applyExtendedRange(qbds);
    
        queryRun = new SysQueryRun(query.pack());
    
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunDeferrals</Name>
				<Source><![CDATA[
    #define.RegisterCode4(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected SysQueryRun queryRunDeferrals()
    {
        SysQuery                query = new SysQuery();
        SysQueryRun             queryRun;
        QueryBuildDataSource    qbds;
        Range                   queryRange = queryValue(rDeferralsBookTaxId);
        ;
        qbds = query.addDataSource(tablenum(RDeferralsTable));
        qbds.addRange(fieldnum(RDeferralsTable, rTax25ProfitTable)).value(SysQuery::valueNot(0));
        qbds = qbds.addDataSource(tablenum(RDeferralsBook));
        qbds.relations(true);
        qbds.addRange(fieldnum(RDeferralsBook,DeferralsBookId)).value(queryRange);
        qbds.addRange(fieldnum(RDeferralsBook,DeferralsGroupId)).value(RTax25RegisterParameters::find(registerId, #RegisterCode4).Parameter);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds = qbds.addDataSource(tablenum(RDeferralsTransReportingView));
        qbds.addLink(fieldnum(RDeferralsBook,DeferralsId),
                     fieldnum(RDeferralsTransReportingView, DeferralsId));
        qbds.addRange(fieldnum(RDeferralsTransReportingView,DeferralsBookId)).value(queryRangeConcat(queryRange,rDeferralsBookId));
        queryRange = queryValue(RDeferralsTransType::WritingOff);
        queryRange = queryRangeConcat(queryRange,RDeferralsTransType::Retired);
        qbds.addRange(fieldnum(RDeferralsTransReportingView,TransType)).value(queryRange);
        qbds.addRange(fieldnum(RDeferralsTransReportingView,StornoRecId)).value(queryValue(0));
        rTax25PeriodIterator.applyExtendedRange(qbds);
    
        queryRun = new SysQueryRun(query.pack());
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    #define.FieldNum1(1)
    #define.FieldNum2(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void sortRegisterTrans()
    {
        RTax25RegisterTrans_TemporaryDifferences   regTrans;
        int                   i = 1;
        MapEnumerator         mapEnumerator = registerLineMap.getEnumerator();
        RecordSortedList      registerTransList;
    
        progress.setText("@SYS4138");
        progress.setTotal(transCount);
        progress.setCount(0);
    
        while (mapEnumerator.moveNext())
        {
            registerTransList = mapEnumerator.currentValue();
            if (i == 1)
            {
                this.createHeader(i);
            }
            i++;
            lastTaxCode = mapEnumerator.currentKey();
            this.createHeader(i,1);
            lastProfitTableRecId = 0;
            while (registerTransList.next(regTrans))
            {
                if (regTrans.rTax25ProfitTable != lastProfitTableRecId)
                {
                    if (lastProfitTableRecId)
                    {
                        i++;
                        this.createFooter(i,#FieldNum2);
                    }
                    i++;
                    lastProfitTableRecId = regTrans.rTax25ProfitTable;
                    this.createHeader(i,#FieldNum2);
                }
                i++;
                this.totals(regTrans);
                regTrans.LineNumber = -regTrans.LineNumber;
                if (regQuery.getSortedList().find(regTrans))
                {
                    regQuery.getSortedList().del(regTrans);
                    regTrans.LineNumber = i;
    
                    if (regTrans.rTax25ProfitTable == RTax25ProfitTable::findByProfitId(#assetProfitId).RecId
                       || regTrans.rTax25ProfitTable == RTax25ProfitTable::findByProfitId(#assetClothsProfitID).RecId
                       || regTrans.rTax25ProfitTable == RTax25ProfitTable::findByProfitId(#assetRiggingProfitID).RecId
                       || regTrans.rTax25ProfitTable == RTax25ProfitTable::findByProfitId(DebtReserveProfitID).RecId)
                {
                        regTrans.rTax25ProfitTable = 0;
                    }
    
                    regQuery.getSortedList().ins(regTrans);
                }
                progress.incCount();
            }
            i++;
            this.createFooter(i,#FieldNum2);
            i++;
            this.createFooter(i,#FieldNum1);
        }
        if (i > 1 )
        {
           i++;
           this.createFooter(i);
        }
        progress.incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void totals(RTax25RegisterTrans_TemporaryDifferences _regTrans)
    {
        boolean   initialBalance;
        TransDate transDate;
        ;
    
        transDate = _regTrans.TransactionDate;
        initialBalance = (endmth(transDate) == endmth(dateFrom));
        totalAmountReceipt += _regTrans.BaseAmount;
        totalAmountIssue   += _regTrans.TaxAmount;
        totalBalance       += initialBalance ? _regTrans.InitialDTADTL : 0;
        totalCreatingDTA   += _regTrans.CreatingDTA;
        totalDecreasingDTA += _regTrans.DecreasingDTA;
        totalCreatingDTL   += _regTrans.CreatingDTL;
        totalDecreasingDTL += _regTrans.DecreasingDTL;
        totalWritingOffDTA += _regTrans.WritingOffDTA;
        totalWritingOffDTL += _regTrans.WritingOffDTL;
    
        taxCodeAmountReceipt += _regTrans.BaseAmount;
        taxCodeAmountIssue   += _regTrans.TaxAmount;
        taxCodeBalance       += initialBalance ? _regTrans.InitialDTADTL : 0;
        taxCodeCreatingDTA   += _regTrans.CreatingDTA;
        taxCodeDecreasingDTA += _regTrans.DecreasingDTA;
        taxCodeCreatingDTL   += _regTrans.CreatingDTL;
        taxCodeDecreasingDTL += _regTrans.DecreasingDTL;
        taxCodeWritingOffDTA += _regTrans.WritingOffDTA;
        taxCodeWritingOffDTL += _regTrans.WritingOffDTL;
    
        profitAmountReceipt += _regTrans.BaseAmount;
        profitAmountIssue   += _regTrans.TaxAmount;
        profitBalance       += initialBalance ? _regTrans.InitialDTADTL : 0;
        profitCreatingDTA   += _regTrans.CreatingDTA;
        profitDecreasingDTA += _regTrans.DecreasingDTA;
        profitCreatingDTL   += _regTrans.CreatingDTL;
        profitDecreasingDTL += _regTrans.DecreasingDTL;
        profitWritingOffDTA += _regTrans.WritingOffDTA;
        profitWritingOffDTL += _regTrans.WritingOffDTL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU                correctedPeriodDate;
        RAssetTransCorrectiveView       assetTrans;
        RDeferralsTransCorrectiveView   deferralsTrans;
        QueryRun                        qrCheck;
    
        qrCheck = this.queryRunAssetCheck(_fromDateCalc, _toDateCalc, _toDateCorr, RAssetGroupTypes::FixedAssets);
    
        if (qrCheck.next())
        {
            assetTrans = qrCheck.get(tableNum(RAssetTransCorrectiveView));
            correctedPeriodDate = dateEndQtr(assetTrans.ReportingDate);
        }
    
        qrCheck = this.queryRunAssetCheck(_fromDateCalc, _toDateCalc, _toDateCorr, RAssetGroupTypes::Cloths);
    
        if (qrCheck.next())
        {
            assetTrans = qrCheck.get(tableNum(RAssetTransCorrectiveView));
    
            if (!correctedPeriodDate || correctedPeriodDate > assetTrans.ReportingDate)
            {
                correctedPeriodDate = dateEndQtr(assetTrans.ReportingDate);
            }
        }
    
        qrCheck = this.queryRunAssetCheck(_fromDateCalc, _toDateCalc, _toDateCorr, RAssetGroupTypes::Rigging);
    
        if (qrCheck.next())
        {
            assetTrans = qrCheck.get(tableNum(RAssetTransCorrectiveView));
    
            if (!correctedPeriodDate || correctedPeriodDate > assetTrans.ReportingDate)
            {
                correctedPeriodDate = dateEndQtr(assetTrans.ReportingDate);
            }
        }
    
        qrCheck = this.queryRunDeferralsCheck(_fromDateCalc, _toDateCalc, _toDateCorr);
    
        if (qrCheck.next())
        {
            deferralsTrans = qrCheck.get(tableNum(RDeferralsTransCorrectiveView));
    
            if (!correctedPeriodDate || correctedPeriodDate > deferralsTrans.ReportingDate)
            {
                correctedPeriodDate = dateEndQtr(deferralsTrans.ReportingDate);
            }
        }
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunAssetCheck</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun queryRunAssetCheck(
        FromDate            _fromDateCalc,
        ToDate              _toDateCalc,
        ToDate              _toDateCorr,
        RAssetGroupTypes    _assetGroupTypes = RAssetGroupTypes::FixedAssets)
    {
        Query                   query = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    qbds, qbdsAssetTrans;
        Range                   queryRange;
    
        qbdsAssetTrans = query.addDataSource(tableNum(RAssetTransCorrectiveView));
        qbdsAssetTrans.addSortField(fieldNum(RAssetTransCorrectiveView, ReportingDate), SortOrder::Ascending);
        qbdsAssetTrans.firstOnly(true);
        qbdsAssetTrans.addRange(fieldnum(RAssetTransCorrectiveView, AssetStandardId)).value(queryRangeConcat(queryValue(rAssetStandardTaxId), rAssetStandardId));
        queryRange = queryValue(RAssetTransType::Depreciation);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::DepreciationAdj);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::WriteDownAdj);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::Disposal);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::DisposalScrap);
        queryRange = queryRangeConcat(queryRange,RAssetTransType::DisposalSale);
        qbdsAssetTrans.addRange(fieldnum(RAssetTransCorrectiveView, AssetTransType)).value(queryRange);
        qbdsAssetTrans.addRange(fieldnum(RAssetTransCorrectiveView, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
        qbdsAssetTrans.addRange(fieldnum(RAssetTransCorrectiveView, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
    
        qbds = qbdsAssetTrans.addDataSource(tableNum(RAssetStandards));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::ExistsJoin);
    
        qbds.addLink(fieldnum(RAssetTransCorrectiveView, AccountNum),
                     fieldnum(RAssetStandards, AssetId));
    
        qbds.addRange(fieldnum(RAssetStandards, AssetStandardId)).value(queryValue(rAssetStandardTaxId));
        qbds.addRange(fieldnum(RAssetStandards, AssetGroup)).value(RTax25RegisterParameters::find(registerId, 1).Parameter);
    
        qbds = qbdsAssetTrans.addDataSource(tablenum(RAssetTable));
        qbds.addLink(fieldNum(RAssetTransCorrectiveView, AccountNum), fieldNum(RAssetTable, AccountNum));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::ExistsJoin);
    
        if (_assetGroupTypes == RAssetGroupTypes::FixedAssets)
            qbds.addRange(fieldnum(RAssetTable, AssetType)).value(parmTypeId);
    
        qbds = qbds.addDataSource(tablenum(RAssetMainGroup));
        qbds.addLink(fieldnum(RAssetTable,  AssetGroup), fieldnum(RAssetMainGroup,  AssetMainGroupId));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addRange(fieldnum(RAssetMainGroup, GroupType)).value(queryValue(_assetGroupTypes));
    
        queryRun = new QueryRun(query);
    
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunDeferralsCheck</Name>
				<Source><![CDATA[
    #define.RegisterCode4(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun queryRunDeferralsCheck(
        FromDate _fromDateCalc,
        ToDate   _toDateCalc,
        ToDate   _toDateCorr)
    {
        Query                query = new Query();
        QueryRun             queryRun;
        QueryBuildDataSource qbds, qbdsTrans;
        Range                queryRange = queryValue(rDeferralsBookTaxId);
    
        qbdsTrans = query.addDataSource(tablenum(RDeferralsTransCorrectiveView));
        qbdsTrans.addSortField(fieldNum(RDeferralsTransCorrectiveView, ReportingDate), SortOrder::Ascending);
        qbdsTrans.firstOnly(true);
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView,DeferralsBookId)).value(queryRangeConcat(queryValue(rDeferralsBookTaxId),rDeferralsBookId));
        queryRange = queryValue(RDeferralsTransType::WritingOff);
        queryRange = queryRangeConcat(queryRange,RDeferralsTransType::Retired);
    
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView,TransType)).value(queryRange);
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
    
        qbds = qbdsTrans.addDataSource(tablenum(RDeferralsBook));
        qbds.addLink(fieldNum(RDeferralsTransCorrectiveView, DeferralsId), fieldNum(RDeferralsBook,DeferralsId));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
    
        qbds.addRange(fieldNum(RDeferralsBook,DeferralsBookId)).value(queryValue(rDeferralsBookTaxId));
        qbds.addRange(fieldNum(RDeferralsBook,DeferralsGroupId)).value(RTax25RegisterParameters::find(registerId, #RegisterCode4).Parameter);
    
        qbds = qbdsTrans.addDataSource(tableNum(RDeferralsTable));
        qbds.addRange(fieldnum(RDeferralsTable, rTax25ProfitTable)).value(SysQuery::valueNot(0));
        qbds.addLink(fieldNum(RDeferralsTransCorrectiveView, DeferralsId), fieldNum(RDeferralsTable, DeferralsId));
        qbds.fetchMode(QueryFetchMode::One2One);
    
        queryRun = new QueryRun(query);
    
        return queryRun;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>