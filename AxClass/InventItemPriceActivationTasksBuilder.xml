<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceActivationTasksBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceActivationTasksBuilder</c> class bundles pending <c>InventItemPriceSim</c> records
/// and builds a collection of tasks that activate them.
/// </summary>
class InventItemPriceActivationTasksBuilder
{
    List                                        tasks;
    InventItemPriceActivationTaskActivateSim    prototype;
    InventItemPriceActivationTaskActivateSim    task;

    // bundling strategy
    int                                         processedRecordsCount;
    InventItemPriceActivationBundleSize         bundleSize;
    InventItemPriceSim                          lastProcessedInventItemPriceSim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventItemPriceSimForActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds pending <c>InventItemPriceSim</c> record to collection of prices that should be activated.
    /// </summary>
    /// <param name="_priceToBeActivated">
    /// Price to be bundled and activated.
    /// </param>
    /// <returns>
    /// Instance of self.
    /// </returns>
    public InventItemPriceActivationTasksBuilder addInventItemPriceSimForActivation(InventItemPriceSim _priceToBeActivated)
    {
        if (lastProcessedInventItemPriceSim.ItemId != _priceToBeActivated.ItemId)
        {
            if (processedRecordsCount mod bundleSize == 0)
            {
                task = this.createTask(prototype);
                tasks.addEnd(task);
            }
            processedRecordsCount++;
        }

        task.addPriceForActivation(_priceToBeActivated);

        lastProcessedInventItemPriceSim.data(_priceToBeActivated.data());

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new task from prototype.
    /// </summary>
    /// <param name="_prototype">
    /// The prototype task to create new task from.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventItemPriceActivationTaskActivateSim</c> class.
    /// </returns>
    /// <remarks>
    /// The prototype is used to initialize values of new instance of the <c>InventItemPriceActivationTaskActivateSim</c> class.
    /// </remarks>
    private InventItemPriceActivationTaskActivateSim createTask(InventItemPriceActivationTaskActivateSim _prototype)
    {
        InventItemPriceActivationTaskActivateSim result = InventItemPriceActivationTaskActivateSim::construct();

        if (_prototype)
        {
            result.unpack(_prototype.pack());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the result of the bundling operation.
    /// </summary>
    /// <returns>
    /// Enumerator for collection of instances of the <c>InventItemPriceActivationTaskActivateSim</c> class.
    /// </returns>
    public Enumerator getResult()
    {
        return tasks.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        tasks = new List(Types::Class);

        bundleSize = 40;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBundleSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets size of the created bundle.
    /// </summary>
    /// <param name="_bundleSize">
    /// Maximum number of items allowed to be in the same bundle.
    /// </param>
    /// <returns>
    /// Instance of self.
    /// </returns>
    public InventItemPriceActivationTasksBuilder setBundleSize(InventItemPriceActivationBundleSize _bundleSize)
    {
        bundleSize = _bundleSize;

        if (bundleSize <= 0)
        {
            bundleSize = maxInt();
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrototype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets prototype to be used for initialization of values of new instances of the <c>InventItemPriceActivationTaskActivateSim</c> class.
    /// </summary>
    /// <param name="_prototype">
    /// A class instance to be used as prototype.
    /// </param>
    /// <returns>
    /// Instance of self.
    /// </returns>
    public InventItemPriceActivationTasksBuilder setPrototype(InventItemPriceActivationTaskActivateSim _prototype)
    {
        prototype = _prototype;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventItemPriceActivationTasksBuilder construct()
    {
        return new InventItemPriceActivationTasksBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>