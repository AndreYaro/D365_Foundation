<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableChangeProposalWorkflowApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustTableChangeProposalWorkflowApprovalEventHandler</c> workflow outcome event handler.
/// </summary>
public final class CustTableChangeProposalWorkflowApprovalEventHandler implements WorkflowElementCanceledEventHandler,
	WorkflowElemChangeRequestedEventHandler,
	WorkflowElementCompletedEventHandler,
	WorkflowElementReturnedEventHandler,
	WorkflowElementStartedEventHandler,
	WorkflowElementDeniedEventHandler,
	WorkflowWorkItemsCreatedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
	{
        // no-op
	}

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
	{
        // no-op
	}

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// This is the approval event. It sets the status to approved.
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
	{
        RecId custRecId = _workflowElementEventArgs.parmWorkflowContext().parmRecId();
        CustTable::updateWorkflowState(custRecId, CustTableChangeProposalWorkflowState::Approved);
	}

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
	{
		// no-op
	}

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void changeRequested(WorkflowElementEventArgs _workflowElementEventArgs)
	{
        // no-op
	}

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// This method handles the rejection event, and sets the status to "Rejected".
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
	{
        RecId custRecId = _workflowElementEventArgs.parmWorkflowContext().parmRecId();
        CustTable::updateWorkflowState(custRecId, CustTableChangeProposalWorkflowState::Rejected);
	}

]]></Source>
			</Method>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowElementEventArgs">The arguments object for the event handler.</param>
    public void created(WorkflowWorkItemsEventArgs _workflowWorkItemsEventArgs)
	{
        // no-op
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>