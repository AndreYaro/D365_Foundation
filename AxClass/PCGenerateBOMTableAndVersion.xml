<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGenerateBOMTableAndVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for generating the bom table and version data.
/// </summary>
public class PcGenerateBOMTableAndVersion
{
    PCValidationNumberSequence validationNumberSequence;
    List generatedBomTableRecords, generatedBomVersionRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approveGeneratedBoms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the generated bills of material.
    /// </summary>
    /// <param name="_approver">
    /// The approver of the product configuration model.
    /// </param>
    public void approveGeneratedBoms(BOMRouteApprover _approver)
    {
        BOMTable    bomTable;
        BOMVersion  bomVersion;
        boolean     recalculateBomLevels = false;

        ListEnumerator le = generatedBomTableRecords.getEnumerator();

        ttsBegin;

        while (le.moveNext())
        {
            bomTable = le.current();
            // a reread is needed here because the insertion of bom lines will update record
            bomTable.reread();
            bomTable.Approver = _approver;
            bomTable.Approved = NoYes::Yes;
            bomTable.CheckBOM = false; // skip bom circularity check
            bomTable.doUpdate();
            recalculateBomLevels = true;
        }

        le = generatedBomVersionRecords.getEnumerator();

        while (le.moveNext())
        {
            bomVersion = le.current();
            bomVersion.Approver = _approver;
            bomVersion.Approved = NoYes::Yes;
            bomVersion.Active   = NoYes::Yes;
            bomVersion.doUpdate();
            recalculateBomLevels = true;
        }

        // create lists, this code may be called again, if price or ship date is calculated before the configuration is accepted
        this.initializeRecordCollections();

        if (recalculateBomLevels)
        {
            BOMLevelCalc::setBOMLevelRecalculationNeeded();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new BOM and a BOM version for the specified component.
    /// </summary>
    /// <param name="_inventDim">
    /// The dimension that is to be attached.
    /// </param>
    /// <param name="_productModelName">
    /// The name of the product model.
    /// </param>
    /// <param name="_componentName">
    /// The name of the component or the sub-component.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that is associated with the version.
    /// </param>
    /// <param name="_generateBOMVersion">
    /// A Boolean value that states whether a version of the BOM must be created.
    /// </param>
    /// <returns>
    /// The ID of the BOM that was created.
    /// </returns>
    /// <remarks>
    /// The approval for the generated boms has been moved to the approveGeneratedBoms method,
    /// to support the Block editing parameter.
    /// </remarks>
    public BOMId generate(
        InventDim           _inventDim,
        PCName              _productModelName,
        EcoResCategoryName  _componentName,
        ItemId              _itemId,
        boolean             _generateBOMVersion = true)
    {
        ttsbegin;

        BOMTable bomTable;

        bomTable.initValue();

        InventTable inventTable = InventTable::find(_itemId);
        if (inventTable)
        {
            bomTable.ItemGroupId = inventTable.itemGroupId();
        }

        bomTable.bomId  = validationNumberSequence.getNewBomIdBasedOnNumberSequence();
        bomTable.SiteId = _inventDim.InventSiteId;
        bomTable.Name   = strFmt("@SYS76681", "@SYS40230", _productModelName, _componentName);
        bomTable.insert();

        generatedBomTableRecords.addEnd(bomTable);

        if (_generateBOMVersion)
        {
            BOMVersion bomVersion;

            bomVersion.initValue();
            bomVersion.ItemId = _itemId;
            bomVersion.initFromBOMTable(bomTable);
            bomVersion.InventDimId = _inventDim.InventDimId;
            bomVersion.insert(false); // set false to avoid checking for circularity

            generatedBomVersionRecords.addEnd(bomVersion);
        }

        ttscommit;

        return bomTable.bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRecordCollections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized record collections.
    /// </summary>
    protected void initializeRecordCollections()
    {
        generatedBomTableRecords    = new List(Types::Record);
        generatedBomVersionRecords  = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        validationNumberSequence = PCValidationNumberSequence::construct();

        this.initializeRecordCollections();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateNumberSequence</Name>
				<Source><![CDATA[
    public PCValidationNumberSequence parmValidateNumberSequence(PCValidationNumberSequence _validationNumberSequence = validationNumberSequence)
    {
        validationNumberSequence = _validationNumberSequence;

        return validationNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCGenerateBOMTableAndVersion construct()
    {
        PCGenerateBOMTableAndVersion generateBOMTableAndVersion = new PCGenerateBOMTableAndVersion();
        return generateBOMTableAndVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>