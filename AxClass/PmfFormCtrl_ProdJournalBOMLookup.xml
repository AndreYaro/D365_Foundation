<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdJournalBOMLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdJournalBOMLookup</c> form
/// </summary>
class PmfFormCtrl_ProdJournalBOMLookup extends PmfFormCtrl
{
    ProdBOM     prodBOM;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the cached rule evaluation results.
    /// </summary>
    /// <remarks>
    /// When the next refresh action is performed the rules relevant for the refresh will reevaluated
    /// </remarks>
    public void clearCache()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>ProdBOM</c> datasource has been initialized
    /// </summary>
    /// <param name="_prodBOM">
    /// The record buffer associated with the datasource
    /// </param>
    public void dataSourceInitPost(Common _prodBOM)
    {
        Query   q;

        super(_prodBOM);

        if (this.isPmfEnabled())
        {
            q = this.parmFormDataSource(FormDataUtil::getFormDataSource(_prodBOM)).query();

            this.parmFormDataSource().query(q);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    /// String identifying the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
        super(_ruleFunctionName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <remarks>
    /// This implementation just triggers the update of the form design
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the form element has not been set for this class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdBOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdJournalBOMLookup construct()
    {
        return new PmfFormCtrl_ProdJournalBOMLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdJournalBOMLookup newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdJournalBOMLookup::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>