<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contrib_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the SPED EFD-Contributions file.
/// </summary>
class FBSpedFileCreator_Contrib_BR extends FBSpedFileCreatorBase_BR
{
    private const str featureReference = GlobalizationConstants::FeatureReferenceBR10011;

    protected FiscalEstablishment_BR fiscalEstablishmentRoot;
    protected FiscalOrganization_BR fiscalOrganization;

    protected FBSPEDFileType_BR spedFileType;
    protected FBContribVersion_BR fbContribVersion;
    protected FBContribSituationType_BR situationType;
    protected FBReasonIdentification_BR fbReasonIdentification;
    protected FBSpedContribFileContract_BR contract;

    protected FBSpedFileCostCenterDimensionTmp_BR spedFileCostCenterDimension;
    protected FBSpedFileMainAccountTmp_BR spedFileMainAccount;

    protected List listOfFiscalEstablishmentBranches;

    protected Map taxAmountsByPeriod, taxAmounts18xByPeriod, refProcessByPeriod, refProcess188ByPeriod;

    protected boolean isABlocksEmpty, isCBlocksEmpty, isDBlocksEmpty, isFBlocksEmpty, isMBlocksEmpty;
    private CurrencyCode accountingCurrency = Ledger::accountingCurrency();

    private readonly boolean spedContributionsCreditBaseSourceDateEffectiveFeature = FeatureStateProvider::isFeatureEnabled(FBSpedContributionsCreditBaseSourceDateEffectiveFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFiscalEstablishmentBranches</Name>
				<Source><![CDATA[
    private void addFiscalEstablishmentBranches()
    {
        FiscalEstablishment_BR                  fiscalEstablishmentBranch;

        while select crossCompany fiscalEstablishmentBranch
            where fiscalEstablishmentBranch.FiscalOrganization_BR == fiscalOrganization.RecId
                && (!(fiscalOrganization.FiscalEstablishmentId == fiscalEstablishmentBranch.FiscalEstablishmentId
                      && fiscalOrganization.FiscalEstablishmentDataArea == fiscalEstablishmentBranch.dataAreaId))
        {
            listOfFiscalEstablishmentBranches.addEnd(fiscalEstablishmentBranch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxTransSumInAllBranches</Name>
				<Source><![CDATA[
    private void calcTaxTransSumInAllBranches()
    {
        if (fiscalEstablishmentRoot.isReportingTypeNFeAndNFCeConsolidated())
        {
            changeCompany(fiscalEstablishmentRoot.dataAreaId)
            {
                this.calcTaxTransSumAndAddToTaxData(FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(
                fiscalEstablishmentRoot.FiscalEstablishmentId,
                fiscalEstablishmentRoot.dataAreaId,
                fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear));
            }
        }
    
        ListEnumerator le = listOfFiscalEstablishmentBranches.getEnumerator();
        while (le.moveNext())
        {
            FiscalEstablishment_BR fiscalEstablishmentBranch = le.current();
            if (fiscalEstablishmentBranch && fiscalEstablishmentBranch.isReportingTypeNFeAndNFCeConsolidated())
            {
                changeCompany(fiscalEstablishmentBranch.dataAreaId)
                {
                    this.calcTaxTransSumAndAddToTaxData(FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(
                        fiscalEstablishmentBranch.FiscalEstablishmentId,
                        fiscalEstablishmentBranch.dataAreaId,
                        fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentRecord</Name>
				<Source><![CDATA[
    private void createAdjustmentRecord(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessmentClassification_BR    _adjustmentClassification,
                                        FBGeneralAdjustmentCodeRecId_BR     _generalAdjustmentCodeRecId,
                                        TaxAmount                           _taxAmount,
                                        FBComplementaryDescription_BR       _complementaryDescription,
                                        FBTaxAssessmentAdjustment_BR        _fbTaxAssessmentAdjustment = null,
                                        FBTaxTrans_BR                       _fbTaxTrans = null,
                                        FBTaxAdjustmentProcessNum_BR _taxAdjustmentProcessNum = '')
    {
        FBSpedRecord_BR                         spedRecord;
        FBGeneralAdjustmentCodePISCOFINS_BR     generalAdjustmentCodePisCofins;
        FBSpedFileRecordIdentification_BR       childRecordIdentification;

        generalAdjustmentCodePisCofins  = FBGeneralAdjustmentCode_BR::find(_generalAdjustmentCodeRecId) as FBGeneralAdjustmentCodePISCOFINS_BR;

        spedRecord = this.newRecord(_recordIdentification);

        if (    _adjustmentClassification == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment
            ||  _adjustmentClassification == FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment)
        {
            spedRecord.addFieldString('0');                                                         // IND_AJ
        }
        else
        {
            spedRecord.addFieldString('1');                                                         // IND_AJ
        }

        spedRecord.addFieldNumeric(_taxAmount, 2);                                                  // VL_AJ
        spedRecord.addFieldString(generalAdjustmentCodePisCofins.SpedAdjustmentCodePISCOFINS, 2);   // COD_AJ
        spedRecord.addFieldString(_taxAdjustmentProcessNum); // NUM_DOC
        spedRecord.addFieldString(_complementaryDescription);                                       // DESCR_AJ
        spedRecord.addFieldEmpty();                                                                 // DT_REF

        this.addChildRecord(_parentRecord, spedRecord);

        switch (_recordIdentification)
        {
            case 'M220':
                childRecordIdentification = 'M225';

                if (fbContribVersion >= FBContribVersion_BR::v4)
                {
                    this.createRecordM225OrM625(spedRecord, childRecordIdentification, _fbTaxAssessmentAdjustment, _fbTaxTrans);
                }
                break;
            case 'M620':
                childRecordIdentification = 'M625';

                if (fbContribVersion >= FBContribVersion_BR::v4)
                {
                    this.createRecordM225OrM625(spedRecord, childRecordIdentification, _fbTaxAssessmentAdjustment, _fbTaxTrans);
                }
                break;
            case 'M110':
                childRecordIdentification = 'M115';

                if (fbContribVersion >= FBContribVersion_BR::v6)
                {
                    this.createRecordM115OrM515(
                        spedRecord,
                        childRecordIdentification,
                        _adjustmentClassification,
                        _complementaryDescription,
                        _taxAdjustmentProcessNum);
                }
                break;
            case 'M510':
                childRecordIdentification = 'M515';

                if (fbContribVersion >= FBContribVersion_BR::v6)
                {
                    this.createRecordM115OrM515(
                        spedRecord,
                        childRecordIdentification,
                        _adjustmentClassification,
                        _complementaryDescription,
                        _taxAdjustmentProcessNum);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC100</Name>
				<Source><![CDATA[
    private boolean createAllRecordsC100(
        FBSpedRecord_BR _parentRecord,
        boolean _isC010AlreadyCreated,
        FBBookingPeriod_BR _bookingPeriod,
        SPEDContribReportingType_BR _reportingTypeNFe,
        SPEDContribReportingType_BR _reportingTypeNFCe)
    {
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;
        FiscalDocument_BR fiscalDocument;

        void createC100Records()
        {
            this.createRecordC100(_parentRecord, fiscalDocument, fbBookingPeriodFiscalDocument);

            this.getRunBaseProgress().incCount(1);
            this.getRunBaseProgress().setText(strFmt("@SYS4001677", fiscalDocument.FiscalDocumentSeries, fiscalDocument.FiscalDocumentNumber));
            this.getRunBaseProgress().update(true);
        }

        select count(RecId) from fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == _bookingPeriod.RecId
                && fbBookingPeriodFiscalDocument.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C100
            exists join fiscalDocument
                where fiscalDocument.RecId == fbBookingPeriodFiscalDocument.FiscalDocument_BR
                    && !((_reportingTypeNFe == SPEDContribReportingType_BR::Consolidated && fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
                    || (_reportingTypeNFCe == SPEDContribReportingType_BR::Consolidated && fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_65));

        int64 totalC100Records = fbBookingPeriodFiscalDocument.RecId;

        if (_isC010AlreadyCreated == false && totalC100Records > 0)
        {
            _isC010AlreadyCreated = true;
            this.addRecord(_parentRecord);
        }

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(totalC100Records);
        this.getRunBaseProgress().setCaption(strFmt("@SYS4001688", FiscalBooksConstants_BR::SpedRecord_C100, _bookingPeriod.FiscalEstablishmentId));
        this.getRunBaseProgress().update(true);

        Query queryFD = new Query();

        QueryBuildDataSource qbdsFD = queryFD.addDataSource(tableNum(FiscalDocument_BR));

        QueryBuildDataSource qbdsBookingPeriodFD = qbdsFD.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFD.relations(true);
        qbdsBookingPeriodFD.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriodFD.joinMode(JoinMode::InnerJoin);
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(queryValue(_bookingPeriod.RecId));
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord)).value(queryValue(FiscalBooksConstants_BR::SpedRecord_C100));

        if (fbContribVersion >= FBContribVersion_BR::v6)
        {
            QueryBuildDataSource qbdsFDLines = qbdsFD.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFDLines.relations(true);
            qbdsFDLines.fetchMode(QueryFetchMode::One2Many);
            qbdsFDLines.joinMode(JoinMode::ExistsJoin);

            QueryBuildDataSource qbdsFDTaxTransCofins = qbdsFDLines.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFDTaxTransCofins.relations(true);
            qbdsFDTaxTransCofins.joinMode(JoinMode::ExistsJoin);
            qbdsFDTaxTransCofins.addRange(fieldNum(FiscalDocumentTaxTrans_BR, Type)).value(enum2Str(TaxType_BR::COFINS));

            QueryBuildDataSource qbdsFDTaxTrans = qbdsFDTaxTransCofins.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFDTaxTrans.relations(true);
            qbdsFDTaxTrans.joinMode(JoinMode::NoExistsJoin);
            qbdsFDTaxTrans.addLink(fieldNum(FiscalDocumentTaxTrans_BR, RecId), fieldNum(FiscalDocumentTaxTrans_BR, RecId), qbdsFDTaxTransCofins.name());

            QueryBuildDataSource qbdsTaxationCode = qbdsFDTaxTrans.addDataSource(tableNum(TaxationCodeTable_BR));
            qbdsTaxationCode.fetchMode(QueryFetchMode::One2One);
            qbdsTaxationCode.joinMode(JoinMode::ExistsJoin);
            qbdsTaxationCode.addLink(fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), fieldNum(TaxationCodeTable_BR, TaxationCode));
            qbdsTaxationCode.addLink(fieldNum(FiscalDocumentTaxTrans_BR, FiscalValue), fieldNum(TaxationCodeTable_BR, FiscalValue));
            qbdsTaxationCode.addRange(fieldNum(TaxationCodeTable_BR, ToDate)).value(
                strFmt('((%1.%2 >= %3.%4) && ((%1.%2 <= %3.%5) || (%3.%5 == %6)))',
                    qbdsFD.name(),
                    fieldStr(FiscalDocument_BR, FiscalDocumentDate),
                    qbdsTaxationCode.name(),
                    fieldStr(TaxationCodeTable_BR, FromDate),
                    fieldStr(TaxationCodeTable_BR, ToDate),
                    date2StrXpp(dateNull())));

            QueryBuildDataSource qbdsRules = qbdsTaxationCode.addDataSource(tableNum(FBSpedC100D100Rules_BR));
            qbdsRules.fetchMode(QueryFetchMode::One2One);
            qbdsRules.joinMode(JoinMode::ExistsJoin);
            qbdsRules.addLink(fieldNum(TaxationCodeTable_BR, RecId), fieldNum(FBSpedC100D100Rules_BR, TaxationCodeTable_BR));
            findOrCreateRange_W(qbdsRules, fieldNum(FBSpedC100D100Rules_BR, FiscalOrganizationRecId), queryValue(fiscalOrganization.RecId));
        }

        QueryRun queryRunFD = new QueryRun(queryFD);
        while (queryRunFD.next())
        {
            fiscalDocument = queryRunFD.get(tablenum(FiscalDocument_BR));
            fbBookingPeriodFiscalDocument = queryRunFD.get(tablenum(FBBookingPeriodFiscalDocument_BR));

            switch (fiscalDocument.Model)
            {
                case FiscalBooksConstants_BR::FiscalDocModel_55:
                    if (_reportingTypeNFe == SPEDContribReportingType_BR::Detailed)
                    {
                        createC100Records();
                    }
                    break;
                case FiscalBooksConstants_BR::FiscalDocModel_65:
                    if (_reportingTypeNFCe == SPEDContribReportingType_BR::Detailed)
                    {
                        createC100Records();
                    }
                    break;
                default:
                    createC100Records();
            }
        }

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC180</Name>
				<Source><![CDATA[
    private boolean createAllRecordsC180(FBSpedRecord_BR _parentRecord, boolean _isC010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod, SPEDContribReportingType_BR _reportingTypeNFe, SPEDContribReportingType_BR _reportingTypeNFCe)
    {
        FBFiscalDocumentLineView_BR             fbFiscalDocumentLineView;
        int64                                   totalC180Lines;

        void createC180Records()
        {
            this.createRecordC180(_parentRecord, _bookingPeriod, fbFiscalDocumentLineView);
    
            this.getRunBaseProgress().incCount(fbFiscalDocumentLineView.RecId);
            this.getRunBaseProgress().setText(strFmt("@SYS4006899", fbFiscalDocumentLineView.ItemId));
            this.getRunBaseProgress().update(true);
        }

        if (_reportingTypeNFe != SPEDContribReportingType_BR::Consolidated
            && _reportingTypeNFCe != SPEDContribReportingType_BR::Consolidated)
        {
            return _isC010AlreadyCreated;
        }

        select count(RecId) from fbFiscalDocumentLineView
            where fbFiscalDocumentLineView.FBBookingPeriod_BR == _bookingPeriod.RecId
                && fbFiscalDocumentLineView.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C100
                && fbFiscalDocumentLineView.Direction == FiscalDocDirection_BR::Outgoing
                && ((fbFiscalDocumentLineView.Model == FiscalBooksConstants_BR::FiscalDocModel_55 && _reportingTypeNFe == SPEDContribReportingType_BR::Consolidated)
                 || (fbFiscalDocumentLineView.Model == FiscalBooksConstants_BR::FiscalDocModel_65 && _reportingTypeNFCe == SPEDContribReportingType_BR::Consolidated));
        totalC180Lines = fbFiscalDocumentLineView.RecId;

        if (_isC010AlreadyCreated == false && totalC180Lines > 0)
        {
            _isC010AlreadyCreated = true;
            this.addRecord(_parentRecord);
        }

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(totalC180Lines);
        this.getRunBaseProgress().setCaption(strFmt("@SYS4001688", FiscalBooksConstants_BR::SpedRecord_C180, _bookingPeriod.FiscalEstablishmentId));
        this.getRunBaseProgress().update(true);

        while select count(RecId),
                    sum(AccountingAmount),
                    minOf(FiscalDocumentDate1),
                    maxOf(FiscalDocumentDate2)
            from fbFiscalDocumentLineView
            group by Model, ItemId, FiscalEstablishment, TaxFiscalClassification_BR
            where fbFiscalDocumentLineView.FBBookingPeriod_BR == _bookingPeriod.RecId
                && fbFiscalDocumentLineView.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C100
                && fbFiscalDocumentLineView.Direction == FiscalDocDirection_BR::Outgoing
                && ((fbFiscalDocumentLineView.Model == FiscalBooksConstants_BR::FiscalDocModel_55 && _reportingTypeNFe == SPEDContribReportingType_BR::Consolidated)
                || (fbFiscalDocumentLineView.Model == FiscalBooksConstants_BR::FiscalDocModel_65 && _reportingTypeNFCe == SPEDContribReportingType_BR::Consolidated))
        { 
            createC180Records();
        }

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC188</Name>
				<Source><![CDATA[
    private void createAllRecordsC188(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        List refProcessData = this.getRefProcessDataFromMap(refProcess188ByPeriod, _bookingPeriod.RecId, _itemId);
        if (refProcessData)
        {
            var refEnumerator = refProcessData.getEnumerator();
            while (refEnumerator.moveNext())
            {
                this.createRecordC188(_parentRecord, refEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC190</Name>
				<Source><![CDATA[
    private boolean createAllRecordsC190(FBSpedRecord_BR _parentRecord, boolean _isC010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod, SPEDContribReportingType_BR _reportingType)
    {
        FBFiscalDocumentLineView_BR             fbFiscalDocumentLineView;
        int64                                   totalC190Lines;

        if (_reportingType != SPEDContribReportingType_BR::Consolidated)
        {
            return _isC010AlreadyCreated;
        }

        select count(RecId) from fbFiscalDocumentLineView
            where fbFiscalDocumentLineView.FBBookingPeriod_BR == _bookingPeriod.RecId
                && fbFiscalDocumentLineView.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C100
                && fbFiscalDocumentLineView.Model == FiscalBooksConstants_BR::FiscalDocModel_55
                && fbFiscalDocumentLineView.Direction == FiscalDocDirection_BR::Incoming;

        totalC190Lines = fbFiscalDocumentLineView.RecId;

        if (_isC010AlreadyCreated == false && totalC190Lines > 0)
        {
            _isC010AlreadyCreated = true;
            this.addRecord(_parentRecord);
        }

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(totalC190Lines);
        this.getRunBaseProgress().setCaption(strFmt("@SYS4001688", FiscalBooksConstants_BR::SpedRecord_C190, _bookingPeriod.FiscalEstablishmentId));
        this.getRunBaseProgress().update(true);

        while select count(RecId),
                     sum(AccountingAmount),
                     minOf(FiscalDocumentDate1),
                     maxOf(FiscalDocumentDate2)
            from fbFiscalDocumentLineView
            group by ItemId, FiscalEstablishment, TaxFiscalClassification_BR
            where fbFiscalDocumentLineView.FBBookingPeriod_BR == _bookingPeriod.RecId
                && fbFiscalDocumentLineView.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C100
                && fbFiscalDocumentLineView.Model == FiscalBooksConstants_BR::FiscalDocModel_55
                && fbFiscalDocumentLineView.Direction == FiscalDocDirection_BR::Incoming
        {
            this.createRecordC190(_parentRecord, _bookingPeriod, fbFiscalDocumentLineView);

            this.getRunBaseProgress().incCount(fbFiscalDocumentLineView.RecId);
            this.getRunBaseProgress().setText(strFmt("@SYS4006899", fbFiscalDocumentLineView.ItemId));
            this.getRunBaseProgress().update(true);
        }

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC198</Name>
				<Source><![CDATA[
    private void createAllRecordsC198(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        List refProcessData = this.getRefProcessDataFromMap(refProcessByPeriod, _bookingPeriod.RecId, _itemId);
        if (refProcessData)
        {
            var refEnumerator = refProcessData.getEnumerator();
            while (refEnumerator.moveNext())
            {
                this.createRecordC198(_parentRecord, refEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC199</Name>
				<Source><![CDATA[
    private void createAllRecordsC199(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        FBTaxTransView_BR           taxTransView;
        PurchImportDeclaration_BR   purchImportDeclaration;

        ImportDeclarationRecId_BR   currentImportDeclarationRecId = 0;
        PurchDIType_BR              currentDIType;
        PurchDINumber_BR            currentDINumber;
        TaxAmount                   currentPisAmount;
        TaxAmount                   currentCofinsAmount;
        DrawBackNumber_BR           currentDrawBackNumber;

        while select Type, TaxAmount
            from taxTransView
            order by ImportDeclaration
            where taxTransView.FBBookingPeriod_BR == _bookingPeriod.RecId
                && taxTransView.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C100
                && taxTransView.Model == FiscalBooksConstants_BR::FiscalDocModel_55
                && taxTransView.Direction == FiscalDocDirection_BR::Incoming
                && taxTransView.ItemId == _itemId
            join Type, DINumber, DrawBackNumber from purchImportDeclaration
                where taxTransView.ImportDeclaration == purchImportDeclaration.RecId
        {
            if (currentImportDeclarationRecId != purchImportDeclaration.RecId)
            {
                if (currentImportDeclarationRecId != 0)
                {
                    this.createRecordC199(_parentRecord,
                                          currentDIType,
                                          currentDINumber,
                                          currentPisAmount,
                                          currentCofinsAmount,
                                          currentDrawBackNumber);
                }
                currentImportDeclarationRecId = purchImportDeclaration.RecId;
                currentDIType = purchImportDeclaration.Type;
                currentDINumber = purchImportDeclaration.DINumber;
                currentDrawBackNumber = purchImportDeclaration.DrawBackNumber;
                currentPisAmount = 0;
                currentCofinsAmount = 0;
            }

            if (taxTransView.Type == TaxType_BR::PIS)
            {
                currentPisAmount += taxTransView.TaxAmount;
            }
            else if (taxTransView.Type == TaxType_BR::COFINS)
            {
                currentCofinsAmount += taxTransView.TaxAmount;
            }
        }

        if (currentImportDeclarationRecId != 0)
        {
            this.createRecordC199(_parentRecord,
                                  currentDIType,
                                  currentDINumber,
                                  currentPisAmount,
                                  currentCofinsAmount,
                                  currentDrawBackNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC400</Name>
				<Source><![CDATA[
    private boolean createAllRecordsC400(FBSpedRecord_BR _parentRecord, boolean _isC010AlreadyCreated, FBBookingPeriod_BR _fbBookingPeriod, FiscalEstablishment_BR _fiscalEstablishment)
    {
        RetailFiscalPrinter_BR  retailFiscalPrinter;
        RetailZReport_BR        retailZReport;
        boolean                 hasC400Records;

        if (_fiscalEstablishment.SPEDContribReportingTypeNFe != SPEDContribReportingType_BR::Detailed)
        {
            return _isC010AlreadyCreated;
        }

        select count(RecId)
            from retailFiscalPrinter
            exists join retailZReport
                where  retailZReport.FiscalEstablishment        == _fiscalEstablishment.FiscalEstablishmentId
                    && retailZReport.AdditionalFiscalMemoryIndex== retailFiscalPrinter.AdditionalFiscalMemoryIndex
                    && retailZReport.FiscalPrinterSerialNumber  == retailFiscalPrinter.SerialNumber
                    && retailZReport.AccountingDate             >= fbBookingPeriod.periodFrom()
                    && retailZReport.AccountingDate             <= fbBookingPeriod.periodTo();

        hasC400Records = retailFiscalPrinter.RecId > 0;

        if (_isC010AlreadyCreated == false && hasC400Records)
        {
            this.addRecord(_parentRecord);
            _isC010AlreadyCreated = true;
        }

        while select *
            from retailFiscalPrinter
            exists join retailZReport
                where  retailZReport.FiscalEstablishment        == _fiscalEstablishment.FiscalEstablishmentId
                    && retailZReport.AdditionalFiscalMemoryIndex== retailFiscalPrinter.AdditionalFiscalMemoryIndex
                    && retailZReport.FiscalPrinterSerialNumber  == retailFiscalPrinter.SerialNumber
                    && retailZReport.AccountingDate             >= fbBookingPeriod.periodFrom()
                    && retailZReport.AccountingDate             <= fbBookingPeriod.periodTo()
        {
            this.createRecordC400(_parentRecord, _fbBookingPeriod, retailFiscalPrinter);
        }

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC490</Name>
				<Source><![CDATA[
    private boolean createAllRecordsC490(FBSpedRecord_BR _parentRecord, boolean _isC010AlreadyCreated, FBBookingPeriod_BR _fbBookingPeriod, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBRetailFiscalReceiptTaxTransView_BR    fbRetailFiscalReceiptTaxTransView;
        date                                    minFiscalReceiptDate, maxFiscalReceiptDate;
        boolean                                 hasC490Records;

        if (_fiscalEstablishment.SPEDContribReportingTypeNFe != SPEDContribReportingType_BR::Consolidated)
        {
            return _isC010AlreadyCreated;
        }

        select minOf(AccountingDate)
            from fbRetailFiscalReceiptTaxTransView
            where fbRetailFiscalReceiptTaxTransView.FBBookingPeriod_BR  == _fbBookingPeriod.RecId;

        minFiscalReceiptDate = fbRetailFiscalReceiptTaxTransView.AccountingDate;

        select maxOf(AccountingDate)
            from fbRetailFiscalReceiptTaxTransView
            where fbRetailFiscalReceiptTaxTransView.FBBookingPeriod_BR  == _fbBookingPeriod.RecId;

        maxFiscalReceiptDate = fbRetailFiscalReceiptTaxTransView.AccountingDate;

        if (minFiscalReceiptDate && maxFiscalReceiptDate)
        {
            hasC490Records = true;
        }

        if (_isC010AlreadyCreated == false && hasC490Records)
        {
            this.addRecord(_parentRecord);
            _isC010AlreadyCreated = true;
        }

        if (minFiscalReceiptDate && maxFiscalReceiptDate)
        {
            this.createRecordC490(_parentRecord, _fbBookingPeriod, minFiscalReceiptDate, maxFiscalReceiptDate);
        }

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsC500</Name>
				<Source><![CDATA[
    private boolean createAllRecordsC500(FBSpedRecord_BR _parentRecord, boolean _isC010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        while select fiscalDocument
            where fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
            join FiscalSituation from fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == _bookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && fbBookingPeriodFiscalDocument.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C500
        {
            if (!_isC010AlreadyCreated)
            {
                this.addRecord(_parentRecord);
                _isC010AlreadyCreated = true;
            }

            if (fbContribVersion >=  FBContribVersion_BR::v6 || (fbContribVersion <  FBContribVersion_BR::v6 && fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_66))
            {
                this.createRecordC500(_parentRecord, fiscalDocument, fbBookingPeriodFiscalDocument);
            }
        }

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsF100</Name>
				<Source><![CDATA[
    private boolean createAllRecordsF100(FBSpedRecord_BR _parentRecord, boolean _isF010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FBNonFiscalOperation_BR             fbNonFiscalOperation;
        FBNonFiscalOperationTaxTrans_BR     pisNonFiscalOperation, cofinsNonFiscalOperation, nonFiscalOperationTaxTrans;

        while select fbNonFiscalOperation
            where fbNonFiscalOperation.FBBookingPeriod_BR == _bookingPeriod.RecId
            exists join pisNonFiscalOperation
                where   fbNonFiscalOperation.RecId  == pisNonFiscalOperation.FBNonFiscalOperation_BR
                    &&  pisNonFiscalOperation.Type  == TaxType_BR::PIS
            exists join cofinsNonFiscalOperation
                where   fbNonFiscalOperation.RecId              == cofinsNonFiscalOperation.FBNonFiscalOperation_BR
                    &&  cofinsNonFiscalOperation.Type           == TaxType_BR::COFINS
                    &&  cofinsNonFiscalOperation.TaxationCode   == pisNonFiscalOperation.TaxationCode
        {
            select firstonly TaxationCode from nonFiscalOperationTaxTrans
                where   nonFiscalOperationTaxTrans.FBNonFiscalOperation_BR  == fbNonFiscalOperation.RecId
                    &&  nonFiscalOperationTaxTrans.Type                     == TaxType_BR::PIS;

            if (this.operationTypeF100(nonFiscalOperationTaxTrans.TaxationCode) != FBNonFiscalOperationType_BR::NonCredit)
            {
                if (!_isF010AlreadyCreated)
                {
                    this.addRecord(_parentRecord);

                    _isF010AlreadyCreated = true;
                }

                this.createRecordF100(_parentRecord, fbNonFiscalOperation);
            }
        }

        return _isF010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsF120</Name>
				<Source><![CDATA[
    private boolean createAllRecordsF120(FBSpedRecord_BR _parentRecord, boolean _isF010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FBContribAssetTrans_BR              pisCofinsAssetTrans;
        FBContribAssetTable_BR              pisCofinsAssetTable;

        while select    sum(PISInstallmentAmount),
                        sum(COFINSInstallmentAmount),
                        sum(PISInstallmentBaseAmount),
                        sum(COFINSInstallmentBaseAmount),
                        sum(NonTaxableAmount) from pisCofinsAssetTrans
            group by    pisCofinsAssetTrans.FBContribAssetTable_BR,
                        pisCofinsAssetTrans.FBBookingPeriod_BR,
                        pisCofinsAssetTrans.PISTaxationCode,
                        pisCofinsAssetTrans.COFINSTaxationCode,
                        pisCofinsAssetTrans.PISTaxValue,
                        pisCofinsAssetTrans.COFINSTaxValue
            where       pisCofinsAssetTrans.FBBookingPeriod_BR == _bookingPeriod.RecId
                     && pisCofinsAssetTrans.TransType == FBContribAssetTransType_BR::InstallmentCredit
            exists join pisCofinsAssetTable
                where   pisCofinsAssetTable.RecId == pisCofinsAssetTrans.FBContribAssetTable_BR
                    && (pisCofinsAssetTable.AssetAppropriationMethod == FBPISCOFINSFixedAssetAppropMethod_BR::Amortization
                    ||  pisCofinsAssetTable.AssetAppropriationMethod == FBPISCOFINSFixedAssetAppropMethod_BR::Depreciation)
        {
            if (    pisCofinsAssetTrans.PISInstallmentAmount        > 0
                 && pisCofinsAssetTrans.COFINSInstallmentAmount     > 0
                 && pisCofinsAssetTrans.PISInstallmentBaseAmount    > 0
                 && pisCofinsAssetTrans.COFINSInstallmentBaseAmount > 0)
            {
                if (!_isF010AlreadyCreated)
                {
                    this.addRecord(_parentRecord);

                    _isF010AlreadyCreated = true;
                }

                this.createRecordF120(_parentRecord, pisCofinsAssetTrans);
            }
        }

        return _isF010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsF130</Name>
				<Source><![CDATA[
    private boolean createAllRecordsF130(FBSpedRecord_BR _parentRecord, boolean _isF010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FBContribAssetTrans_BR              pisCofinsAssetTrans;
        FBContribAssetTable_BR              pisCofinsAssetTable;

        while select pisCofinsAssetTrans
            where pisCofinsAssetTrans.FBBookingPeriod_BR == _bookingPeriod.RecId
              && (pisCofinsAssetTrans.TransType == FBContribAssetTransType_BR::Acquisition
              ||  pisCofinsAssetTrans.TransType == FBContribAssetTransType_BR::InstallmentCredit)
            join  pisCofinsAssetTable
                where pisCofinsAssetTable.RecId == pisCofinsAssetTrans.FBContribAssetTable_BR
                  &&  pisCofinsAssetTable.AssetAppropriationMethod == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition
        {
            if (!_isF010AlreadyCreated)
            {
                this.addRecord(_parentRecord);

                _isF010AlreadyCreated = true;
            }

            this.createRecordF130(_parentRecord, pisCofinsAssetTrans, pisCofinsAssetTable);
        }

        return _isF010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsF600</Name>
				<Source><![CDATA[
    private boolean createAllRecordsF600(FBSpedRecord_BR _parentRecord, boolean _isF010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FBTaxWithholdTrans_BR fbTaxWithholdTrans;

        while select sum(TaxWithholdBaseAmount),
            sum(PisWithholdAmount),
            sum(CofinsWithholdAmount),
            sum(OtherTaxWithholdAmount) from fbTaxWithholdTrans
            group by ThirdPartyCNPJCPF, CustWhtContributionType, TransDate
                where fbTaxWithholdTrans.fbBookingPeriod_BR == _bookingPeriod.RecId
        {
            if (    fbTaxWithholdTrans.PisWithholdAmount        != 0
                ||  fbTaxWithholdTrans.CofinsWithholdAmount     != 0
                ||  (!FBSpedContribF600OnlyForPisCofins_BRFlight::instance().isEnabled() && fbTaxWithholdTrans.OtherTaxWithholdAmount != 0)
                )
            {
                if (!_isF010AlreadyCreated)
                {
                    this.addRecord(_parentRecord);

                    _isF010AlreadyCreated = true;
                }

                this.createRecordF600(_parentRecord, fbTaxWithholdTrans);
            }
        }

        return _isF010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsF700</Name>
				<Source><![CDATA[
    private boolean createAllRecordsF700(FBSpedRecord_BR _parentRecord, boolean _isF010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FBTaxAssessmentAdjustment_BR        pisCofinsDeduction;
        FBGeneralAdjustmentCodePISCOFINS_BR pisCofinsGeneralAdjustmentCode;

        while select sum(TaxBaseAmount), sum(TaxAmount) from pisCofinsDeduction
            group by    pisCofinsDeduction.TaxType_BR,
                        pisCofinsGeneralAdjustmentCode.AdjustmentType,
                        pisCofinsDeduction.DeductionCNPJ,
                        pisCofinsDeduction.ComplementaryDescription
            where   pisCofinsDeduction.FBTaxAssessment_BR       != 0
                &&  pisCofinsDeduction.TransDate                >= _bookingPeriod.periodFrom()
                &&  pisCofinsDeduction.TransDate                <= _bookingPeriod.periodTo()
                &&  pisCofinsDeduction.FiscalEstablishmentId    == _bookingPeriod.FiscalEstablishmentId
            join AdjustmentType from pisCofinsGeneralAdjustmentCode
                where   pisCofinsGeneralAdjustmentCode.RecId            == pisCofinsDeduction.FBGeneralAdjustmentCode_BR
                    && (pisCofinsGeneralAdjustmentCode.AdjustmentType   == FBGeneralAdjustmentTypePISCOFINS_BR::CumulativeDeduction
                     || pisCofinsGeneralAdjustmentCode.AdjustmentType   == FBGeneralAdjustmentTypePISCOFINS_BR::NonCumulativeDeduction)
        {
            if (!_isF010AlreadyCreated)
            {
                this.addRecord(_parentRecord);

                _isF010AlreadyCreated = true;
            }

            this.createRecordF700(  _parentRecord,
                                    pisCofinsDeduction.TaxType_BR,
                                    pisCofinsGeneralAdjustmentCode.AdjustmentType,
                                    pisCofinsDeduction.TaxBaseAmount,
                                    pisCofinsDeduction.TaxAmount,
                                    pisCofinsDeduction.DeductionCNPJ,
                                    pisCofinsDeduction.ComplementaryDescription);
        }

        return _isF010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllRecordsF800</Name>
				<Source><![CDATA[
    private boolean createAllRecordsF800(FBSpedRecord_BR _parentRecord, boolean _isF010AlreadyCreated, FBBookingPeriod_BR _bookingPeriod)
    {
        FBGeneralAdjustmentCodePISCOFINS_BR pisCofinsGeneralAdjustmentCode;
        FBTaxAssessmentAdjustment_BR        pisCofinsAdjustment;
        FBContribCreditType_BR              pisCofinsCreditType;

        while select RecID, DeductionCNPJ, ContribAssessmentPeriod, TaxAmount, TaxType_BR, ContribTransferredCreditPercentage, TransDate
            from    pisCofinsAdjustment
                where   pisCofinsAdjustment.FBTaxAssessment_BR          != 0
                        &&  pisCofinsAdjustment.TransDate               >= _bookingPeriod.periodFrom()
                        &&  pisCofinsAdjustment.TransDate               <= _bookingPeriod.periodTo()
                        &&  pisCofinsAdjustment.FiscalEstablishmentId   == _bookingPeriod.FiscalEstablishmentId
            join    RecId, TransferEvent from pisCofinsGeneralAdjustmentCode
                where   pisCofinsGeneralAdjustmentCode.RecId                == pisCofinsAdjustment.FBGeneralAdjustmentCode_BR
                        && pisCofinsGeneralAdjustmentCode.AdjustmentType    == FBGeneralAdjustmentTypePISCOFINS_BR::CreditTransfer
            join  RecId, Code from      pisCofinsCreditType
                where   pisCofinsCreditType.RecId                           == pisCofinsAdjustment.FBContribCreditType_BR
        {
            if (!_isF010AlreadyCreated)
            {
                this.addRecord(_parentRecord);

                _isF010AlreadyCreated = true;
            }

            this.createRecordF800(  _parentRecord,
                                    pisCofinsAdjustment.TaxType_BR,
                                    pisCofinsGeneralAdjustmentCode.TransferEvent,
                                    pisCofinsAdjustment.TransDate,
                                    pisCofinsAdjustment.DeductionCNPJ,
                                    pisCofinsAdjustment.ContribAssessmentPeriod,
                                    pisCofinsCreditType.Code,
                                    pisCofinsAdjustment.TaxAmount,
                                    pisCofinsAdjustment.ContribTransferredCreditPercentage);
        }

        return _isF010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock0</Name>
				<Source><![CDATA[
    private void createBlock0()
    {
        this.createRecord0000();
        this.createRecord0001();
        this.createRecord0100();
        this.createRecord0110();

        if (isABlocksEmpty || isCBlocksEmpty || isDBlocksEmpty || isFBlocksEmpty || isMBlocksEmpty)
        {
            if (fbContribVersion < FBContribVersion_BR::v4 || fbReasonIdentification != FBReasonIdentification_BR::None)
            {
                this.createRecord0120();
            }
        }

        this.createRecord0140();
        this.createRecord0500();
        this.createRecord0600();
        if (fbContribVersion >= FBContribVersion_BR::v6 && contract.parmContribLateSubmission() == NoYes::Yes)
        {
            this.createRecord0900();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock1</Name>
				<Source><![CDATA[
    private void createBlock1()
    {
        if (fbContribVersion >= FBContribVersion_BR::v5)
        {
            this.createRecord1050();
        }

        if (FBTaxAssessment_BR::countOfTaxAssessments(fbBookingPeriod.RecId, TaxType_BR::PIS) != 0)
        {
            this.createRecord1100Or1500('1100', TaxType_BR::PIS);
            this.createRecord1300Or1700('1300', TaxType_BR::PIS);
        }

        if (FBTaxAssessment_BR::countOfTaxAssessments(fbBookingPeriod.RecId, TaxType_BR::COFINS) != 0)
        {
            this.createRecord1100Or1500('1500', TaxType_BR::COFINS);
            this.createRecord1300Or1700('1700', TaxType_BR::COFINS);
        }

        this.createRecord1990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock9</Name>
				<Source><![CDATA[
    private void createBlock9()
    {
        this.createRecord9900();
        this.createRecord9990();
        this.createRecord9999();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockA</Name>
				<Source><![CDATA[
    private void createBlockA()
    {
        ListEnumerator          le;
        FiscalEstablishment_BR  fiscalEstablishmentBranch;

        changeCompany(fiscalEstablishmentRoot.dataAreaId)
        {
            // fiscal documents booked for the main Fiscal Establishment
            this.createRecordA010(fiscalEstablishmentRoot);
        }

        // Fiscal documents booked for each of the branch fiscal establishments
        le = listOfFiscalEstablishmentBranches.getEnumerator();
        while (le.moveNext())
        {
            fiscalEstablishmentBranch = le.current();
            if (fiscalEstablishmentBranch)
            {
                changeCompany(fiscalEstablishmentBranch.dataAreaId)
                {
                    this.createRecordA010(fiscalEstablishmentBranch);
                }
            }
        }

        this.createRecordA990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockC</Name>
				<Source><![CDATA[
    private void createBlockC()
    {
        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedContribBlockC,
            funcName(),
            enum2Str(fbContribVersion)))
        {
            try
            {
                changeCompany(fiscalEstablishmentRoot.dataAreaId)
                {
                    // fiscal documents booked for the main Fiscal Establishment
                    this.createRecordC010(fiscalEstablishmentRoot);
                }

                ListEnumerator le = listOfFiscalEstablishmentBranches.getEnumerator();
                while (le.moveNext())
                {
                    FiscalEstablishment_BR fiscalEstablishmentBranch = le.current();
                    if (fiscalEstablishmentBranch)
                    {
                        changeCompany(fiscalEstablishmentBranch.dataAreaId)
                        {
                            // Fiscal documents booked for each of the branch fiscal establishments
                            this.createRecordC010(fiscalEstablishmentBranch);
                        }
                    }
                }

                this.createRecordC990();

                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsInBlock('C'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockD</Name>
				<Source><![CDATA[
    private void createBlockD()
    {
        ListEnumerator          le;
        FiscalEstablishment_BR  fiscalEstablishmentBranch;

        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            return;
        }

        changeCompany(fiscalEstablishmentRoot.dataAreaId)
        {
            // fiscal documents booked for the main Fiscal Establishment
            this.createRecordD010(fiscalEstablishmentRoot);
        }

        // Fiscal documents booked for each of the branch fiscal establishments
        le = listOfFiscalEstablishmentBranches.getEnumerator();
        while (le.moveNext())
        {
            fiscalEstablishmentBranch = le.current();
            if (fiscalEstablishmentBranch)
            {
                changeCompany(fiscalEstablishmentBranch.dataAreaId)
                {
                    this.createRecordD010(fiscalEstablishmentBranch);
                }
            }
        }

        this.createRecordD990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates block F.
    /// </summary>
    protected void createBlockF()
    {
        ListEnumerator          le;
        FiscalEstablishment_BR  fiscalEstablishmentBranch;

        changecompany(fiscalEstablishmentRoot.DataAreaId)
        {
            // fiscal documents booked for the main Fiscal Establishment
            this.createRecordF010(fiscalEstablishmentRoot);
        }

        le = listOfFiscalEstablishmentBranches.getEnumerator();
        while (le.moveNext())
        {
            fiscalEstablishmentBranch = le.current();
            if (fiscalEstablishmentBranch)
            {
                changecompany(fiscalEstablishmentBranch.DataAreaId)
                {
                    // Fiscal documents booked for each of the branch fiscal establishments
                    this.createRecordF010(fiscalEstablishmentBranch);
                }
            }
        }

        this.createRecordF990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates block M.
    /// </summary>
    protected void createBlockM()
    {
        FBBookingPeriod_BR bookingPeriod;

        bookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(fiscalEstablishmentRoot.FiscalEstablishmentId, fiscalEstablishmentRoot.dataAreaId, fBBookingPeriod.PeriodMonth, fBBookingPeriod.PeriodYear);

        if (FBTaxAssessment_BR::countOfTaxAssessments(fbBookingPeriod.RecId, TaxType_BR::PIS) != 0 && FBTaxAssessment_BR::countOfTaxAssessments(fbBookingPeriod.RecId, TaxType_BR::COFINS) != 0)
        {
            this.createRecordM100OrM500('M100', TaxType_BR::PIS);
            this.createRecordM200OrM600('M200', TaxType_BR::PIS);
            this.createRecordM400OrM800('M400', TaxType_BR::PIS);
            this.createRecordM100OrM500('M500', TaxType_BR::COFINS);
            this.createRecordM200OrM600('M600', TaxType_BR::COFINS);
            this.createRecordM400OrM800('M800', TaxType_BR::COFINS);
        }

        this.createRecordM990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    private void createRecord0000()
    {
        FBSpedRecord_BR             spedRecord;
        LogisticsPostalAddress      fiscalEstablishmentAddress = fiscalEstablishmentRoot.postalAddress();

        spedRecord = FBSpedRecord_BR::constructEmpty('0000');

        spedRecord.addFieldNumericFilledWithZeros   (fbContribVersion, 3);
        spedRecord.addFieldNumeric                  (spedFileType, 0, 1);

        if (situationType == FBContribSituationType_BR::None)
        {
            spedRecord.addFieldEmpty                ();
        }
        else
        {
            spedRecord.addFieldNumeric              (situationType, 0, 1);
        }

        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldDate                     (fbBookingPeriod.periodFrom());
        spedRecord.addFieldDate                     (fbBookingPeriod.periodTo());
        spedRecord.addFieldString                   (this.formatCompanyName(fiscalEstablishmentRoot.Name));
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishmentRoot.CNPJCPFNum_BR), 14);
        spedRecord.addFieldString                   (fiscalEstablishmentAddress.State);
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumericFilledWithZeros   (enum2int(fiscalOrganization.LegalEntityType), 2);
        spedRecord.addFieldNumeric                  (enum2int(fiscalOrganization.ActivityType), 0, 1);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0001</Name>
				<Source><![CDATA[
    private void createRecord0001()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('0001');
        spedRecord.addFieldNumeric(0);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0100</Name>
				<Source><![CDATA[
    private void createRecord0100()
    {
        FBSpedRecord_BR         spedRecord = this.newRecord('0100');
        Accountant_BR           accountant;
        LogisticsPostalAddress  postalAddress;

        accountant      = fbBookingPeriod.FiscalEstablishment().primaryAccountant();
        postalAddress   = accountant.postalAddress();

        spedRecord.addFieldString                   (accountant.Name);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(accountant.CPFNum_BR), 11);
        spedRecord.addFieldString                   (this.keepAlphaWithoutAccents(accountant.CRCNum_BR));
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(accountant.CNPJNum_BR), 14);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(postalAddress.ZipCode), 8);
        spedRecord.addFieldString                   (postalAddress.Street, 60);
        spedRecord.addFieldString                   (postalAddress.StreetNumber, 10);
        spedRecord.addFieldString                   (postalAddress.BuildingCompliment, 60);
        spedRecord.addFieldString                   (postalAddress.DistrictName, 60);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Phone).Locator), 10);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Fax).Locator), 10);
        spedRecord.addFieldString                   (accountant.electronicAddress(LogisticsElectronicAddressMethodType::Email).Locator);
        spedRecord.addFieldNumericFilledWithZeros   (LogisticsAddressCity::findRecId(postalAddress.CityRecId).IBGECode_BR, 7);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0110</Name>
				<Source><![CDATA[
    private void createRecord0110()
    {
        FBSpedRecord_BR     spedRecord = this.newRecord('0110');

        spedRecord.addFieldNumeric    (enum2int(fiscalOrganization.AssessmentRegimen), 0, 1); // COD_INC_TRIB

        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            spedRecord.addFieldEmpty  (); // IND_APRO_CRED
        }
        else
        {
            spedRecord.addFieldNumeric(enum2int(fiscalOrganization.CreditAllocationMethod), 0, 1); // IND_APRO_CRED
        }

        spedRecord.addFieldNumeric    (enum2int(fiscalOrganization.AssessmentContributionType)); // COD_TIPO_CONT

        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            spedRecord.addFieldNumeric(enum2int(fiscalOrganization.AssessmentCriteria)); // IND_REG_CUM
        }
        else
        {
            spedRecord.addFieldEmpty  (); // IND_REG_CUM
        }

        this.addRecord(spedRecord);

        if (fiscalOrganization.AssessmentRegimen != FBContribAssessmentRegimen_BR::Cumulative && fiscalOrganization.CreditAllocationMethod == FBContribCreditAllocationMethod_BR::Proportional)
        {
            this.createRecord0111(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0111</Name>
				<Source><![CDATA[
    private void createRecord0111(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        FBTaxAssessment_BR      fbTaxAssessmentPis;
        FBTaxAssessment_BR      fbTaxAssessmentCofins;
        container               revenueAmountsAndNonCumulativeRate;

        LineAmount           totalGrossIncome = 0;

        select firstonly RecId from fbTaxAssessmentPis
            where fbTaxAssessmentPis.FBBookingPeriod_BR == fbBookingPeriod.RecId
              &&  fbTaxAssessmentPis.TaxType            == TaxType_BR::PIS;

        select firstonly RecId from fbTaxAssessmentCofins
            where fbTaxAssessmentCofins.FBBookingPeriod_BR == fbBookingPeriod.RecId
              &&  fbTaxAssessmentCofins.TaxType            == TaxType_BR::COFINS;

        if (fbTaxAssessmentPis.RecId && fbTaxAssessmentCofins.RecId)
        {
            revenueAmountsAndNonCumulativeRate = FBContribCreditBalanceControl_BR::getRevenueAmountAndNonCumulativeRate(fbTaxAssessmentPis.RecId);

            spedRecord = this.newRecord('0111');                                                // REG
            spedRecord.addFieldNumeric(conPeek(revenueAmountsAndNonCumulativeRate, 1), 2);      // REC_BRU_NCUM_TRIB_MI
            spedRecord.addFieldNumeric(conPeek(revenueAmountsAndNonCumulativeRate, 2), 2);      // REC_BRU_NCUM_NT_MI
            spedRecord.addFieldNumeric(conPeek(revenueAmountsAndNonCumulativeRate, 3), 2);      // REC_BRU_NCUM_EXP
            spedRecord.addFieldNumeric(conPeek(revenueAmountsAndNonCumulativeRate, 4), 2);      // REC_BRU_CUM
            spedRecord.addFieldNumeric(conPeek(revenueAmountsAndNonCumulativeRate, 5), 2);      // REC_BRU_TOTAL

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0120</Name>
				<Source><![CDATA[
    private void createRecord0120()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0120');

        spedRecord.addFieldString(this.getPeriodFormatted(fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear)); // MES_REFER
        spedRecord.addFieldString(this.getFBReasonIdentification(fbReasonIdentification)); // INF_COMP

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0140</Name>
				<Source><![CDATA[
    private void createRecord0140()
    {
        FBSpedRecord_BR         spedRecord;
        FiscalEstablishment_BR  fiscalEstablishmentBranch;
        ListEnumerator          le;

        void addRecordForFiscalEstablishment(FiscalEstablishment_BR _fiscalEstablishment)
        {
            const IENum_BR ExemptIe = 'ISENTO';
            LogisticsPostalAddress  fiscalEstablishmentAddress = _fiscalEstablishment.postalAddress();

            spedRecord = this.newRecord('0140');

            spedRecord.addFieldString                   (_fiscalEstablishment.FiscalEstablishmentId, 60);
            spedRecord.addFieldString                   (_fiscalEstablishment.Name, 100);
            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(_fiscalEstablishment.CNPJCPFNum_BR), 14);
            spedRecord.addFieldString                   (fiscalEstablishmentAddress.State, 2);

            if (_fiscalEstablishment.IENum_BR == ExemptIe)
            {
                spedRecord.addFieldString('');
            }
            else
            {
                spedRecord.addFieldString(_fiscalEstablishment.IENum_BR, 14);
            }

            spedRecord.addFieldNumericFilledWithZeros   (LogisticsAddressCity::findRecId(fiscalEstablishmentAddress.CityRecId).IBGECode_BR, 7);
            spedRecord.addFieldString                   (this.keepNumbers(_fiscalEstablishment.CCMNum_BR));
            spedRecord.addFieldEmpty                    ();

            this.addRecord(spedRecord);

            this.createRecord0150(spedRecord, _fiscalEstablishment);
            this.createRecord0200(spedRecord, _fiscalEstablishment);
            this.createRecord0400(spedRecord, _fiscalEstablishment);
            this.createrecord0450(spedRecord, _fiscalEstablishment);
        }

        changeCompany(fiscalEstablishmentRoot.dataAreaId)
        {
            // Add record for the main Fiscal Establishment
            addRecordForFiscalEstablishment(fiscalEstablishmentRoot);
        }

        // Add record for each branch fiscal establishment
        le = listOfFiscalEstablishmentBranches.getEnumerator();
        while (le.moveNext())
        {
            fiscalEstablishmentBranch = le.current();
            if (fiscalEstablishmentBranch)
            {
                changeCompany(fiscalEstablishmentBranch.dataAreaId)
                {
                    addRecordForFiscalEstablishment(fiscalEstablishmentBranch);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    protected void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0500</Name>
				<Source><![CDATA[
    private void createRecord0500()
    {
        FBSpedRecord_BR spedRecord;
        TransDate transDate = fbBookingPeriod.periodFrom();

        while select spedFileMainAccount
        {
            spedRecord = this.newRecord('0500');

            spedRecord.addFieldDate(transDate); // DT_ALT
            spedRecord.addFieldString(this.getAccountNatureCode(spedFileMainAccount.Type), 2); // COD_ NAT_CC
            spedRecord.addFieldString(this.getFieldString(), 1); // IND_CTA
            spedRecord.addFieldNumericFilledWithZeros(spedFileMainAccount.AccountLevel, 5); // NIVEL
            spedRecord.addFieldString(spedFileMainAccount.MainAccountId); // COD_CTA
            spedRecord.addFieldString(spedFileMainAccount.Name); // NOME_CTA
            spedRecord.addFieldEmpty(); // COD_CTA_REF
            spedRecord.addFieldEmpty(); // CNPJ_ESR

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string value to add to the field.
    /// </summary>
    /// <returns>
    /// The string.
    /// </returns>
    [Wrappable(true)]
    protected final str getFieldString()
    {
        return (spedFileMainAccount.Type == DimensionLedgerAccountType::Total ? 'S' : 'A');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0600</Name>
				<Source><![CDATA[
    private void createRecord0600()
    {
        FBSpedRecord_BR spedRecord;
        TransDate       transDate = fbBookingPeriod.periodFrom();

        while select spedFileCostCenterDimension
        {
            spedRecord = this.newRecord('0600');

            spedRecord.addFieldDate(transDate);                                     // DT_ALT
            spedRecord.addFieldString(spedFileCostCenterDimension.DimensionValue);  // COD_CCUS
            spedRecord.addFieldString(spedFileCostCenterDimension.Name);            // CCUS

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0900</Name>
				<Source><![CDATA[
    private void createRecord0900()
    {
        const container taxationCodes = ['01', '02', '03', '04', '05', '06', '07', '08', '09'];

        FBSpedRecord_BR spedRecord;
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLines;
        FBNonFiscalOperation_BR fbNonFiscalOperation;
        FBNonFiscalOperationTaxTrans_BR fbNonFiscalOperationTaxTrans;

        Amount totalAmountA, totalLineAmountA, totalAmountC, totalLineAmountC, totalAmountF, totalTaxBaseAmountF, totalGrossRev, totalNotGrossRev;

        FBBookingPeriod_BR bookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(fiscalEstablishmentRoot.FiscalEstablishmentId, fiscalEstablishmentRoot.dataAreaId,
            fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear);

        if (!bookingPeriod)
        {
            return;
        }

        // Summarize amounts from block A
        // Query selects totals from FiscalDocuments
        Query queryFD = new Query();
        QueryBuildDataSource qbdsFDSum = queryFD.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFDSum.addSelectionField(fieldNum(FiscalDocument_BR, TotalGoodsAmount), SelectionField::Sum);
        qbdsFDSum.addSelectionField(fieldNum(FiscalDocument_BR, TotalServicesAmount), SelectionField::Sum);

        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            qbdsFDSum.addRange(fieldNum(FiscalDocument_BR, Direction)).value(queryValue(FiscalDocDirection_BR::Outgoing));
        }

        QueryBuildDataSource qbdsBookingPeriodFD = qbdsFDSum.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFD.relations(true);
        qbdsBookingPeriodFD.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriodFD.joinMode(JoinMode::ExistsJoin);
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord)).value(queryValue(FiscalBooksConstants_BR::SpedRecord_A100));

        QueryBuildDataSource qbdsTaxTrans = qbdsFDSum.addDataSource(tableNum(FBTaxTrans_BR));
        qbdsTaxTrans.relations(true);
        qbdsTaxTrans.fetchMode(QueryFetchMode::One2Many);
        qbdsTaxTrans.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(qbdsTaxTrans, fieldnum(FBTaxTrans_BR, TaxationCode), con2Str(taxationCodes, ','));

        spedRecord = this.newRecord('0900'); // 01 REG

        QueryRun queryRunFD = new QueryRun(queryFD);
        if (queryRunFD.next())
        {
            fiscalDocument = queryRunFD.get(tablenum(FiscalDocument_BR));

            totalAmountA = fiscalDocument.TotalGoodsAmount + fiscalDocument.TotalServicesAmount;
            spedRecord.addFieldNumeric(totalAmountA, 2); // 02 REC_TOTAL_BLOCK_A
        }
        else
        {
            spedRecord.addFieldNumeric(0.00, 2); // 02 REC_TOTAL_BLOCK_A
        }

        // Query selects totals from FiscalDocumentLines
        Query queryFDLine = new Query();
        QueryBuildDataSource qbdsFDLines = queryFDLine.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbdsFDLines.addSelectionField(fieldNum(FiscalDocumentLine_BR, LineAmount), SelectionField::Sum);
        qbdsFDLines.addSelectionField(fieldNum(FiscalDocumentLine_BR, LineDiscount), SelectionField::Sum);

        QueryBuildDataSource qbdsFD = qbdsFDLines.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFD.fetchMode(QueryFetchMode::One2One);
        qbdsFD.joinMode(JoinMode::ExistsJoin);
        qbdsFD.relations(false);
        qbdsFD.addLink(fieldNum(FiscalDocumentLine_BR, FiscalDocument), fieldNum(FiscalDocument_BR, RecId));
        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            qbdsFD.addRange(fieldNum(FiscalDocument_BR, Direction)).value(queryValue(FiscalDocDirection_BR::Outgoing));
        }

        qbdsBookingPeriodFD = qbdsFD.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFD.relations(true);
        qbdsBookingPeriodFD.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriodFD.joinMode(JoinMode::ExistsJoin);
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord)).value(queryValue(FiscalBooksConstants_BR::SpedRecord_A100));

        qbdsTaxTrans = qbdsFD.addDataSource(tableNum(FBTaxTrans_BR));
        qbdsTaxTrans.relations(true);
        qbdsTaxTrans.fetchMode(QueryFetchMode::One2Many);
        qbdsTaxTrans.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(qbdsTaxTrans, fieldnum(FBTaxTrans_BR, TaxationCode), con2Str(taxationCodes, ','));

        QueryRun queryRunFDLine = new QueryRun(queryFDLine);
        if (queryRunFDLine.next())
        {
            fiscalDocumentLines = queryRunFDLine.get(tablenum(FiscalDocumentLine_BR));
            totalLineAmountA = totalAmountA - (fiscalDocumentLines.LineAmount - fiscalDocumentLines.LineDiscount);
            spedRecord.addFieldNumeric(totalLineAmountA, 2); // 03 REC_NRB_BLOCK_A
        }
        else
        {
            spedRecord.addFieldNumeric(0.00, 2); // 03 REC_NRB_BLOCK_A
        }

        // Summarize amounts from Block C
        queryFD = new Query();

        // Query selects totals from FiscalDocuments
        qbdsFDSum = queryFD.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFDSum.addSelectionField(fieldNum(FiscalDocument_BR, TotalGoodsAmount), SelectionField::Sum);
        qbdsFDSum.addSelectionField(fieldNum(FiscalDocument_BR, TotalServicesAmount), SelectionField::Sum);

        qbdsBookingPeriodFD = qbdsFDSum.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFD.relations(true);
        qbdsBookingPeriodFD.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriodFD.joinMode(JoinMode::ExistsJoin);
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord)).value(queryValue(FiscalBooksConstants_BR::SpedRecord_C100));

        qbdsBookingPeriodFD.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FiscalSituation))
            .value(strFmt('!%1,!%2,!%3', enum2Str(FBFiscalDocumentSituation_BR::Cancelled), enum2Str(FBFiscalDocumentSituation_BR::Denied), enum2Str(FBFiscalDocumentSituation_BR::Discarded)));

        qbdsTaxTrans = qbdsFDSum.addDataSource(tableNum(FBTaxTrans_BR));
        qbdsTaxTrans.relations(true);
        qbdsTaxTrans.fetchMode(QueryFetchMode::One2Many);
        qbdsTaxTrans.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(qbdsTaxTrans, fieldnum(FBTaxTrans_BR, TaxationCode), con2Str(taxationCodes, ','));

        queryRunFD = new QueryRun(queryFD);
        if (queryRunFD.next())
        {
            fiscalDocument = queryRunFD.get(tablenum(FiscalDocument_BR));

            totalAmountC = fiscalDocument.TotalGoodsAmount + fiscalDocument.TotalServicesAmount;
            spedRecord.addFieldNumeric(totalAmountC, 2); // 04 REC_TOTAL_BLOCK_C
        }
        else
        {
            spedRecord.addFieldNumeric(0.00, 2); // 04 REC_TOTAL_BLOCK_C
        }

        // Query selects totals from FiscalDocumentLines
        queryFDLine = new Query();
        qbdsFDLines = queryFDLine.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbdsFDLines.addSelectionField(fieldNum(FiscalDocumentLine_BR, LineAmount), SelectionField::Sum);
        qbdsFDLines.addSelectionField(fieldNum(FiscalDocumentLine_BR, LineDiscount), SelectionField::Sum);

        qbdsFD = qbdsFDLines.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFD.fetchMode(QueryFetchMode::One2One);
        qbdsFD.joinMode(JoinMode::ExistsJoin);
        qbdsFD.relations(false);
        qbdsFD.addLink(fieldNum(FiscalDocumentLine_BR, FiscalDocument), fieldNum(FiscalDocument_BR, RecId));

        qbdsBookingPeriodFD = qbdsFD.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFD.relations(true);
        qbdsBookingPeriodFD.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriodFD.joinMode(JoinMode::ExistsJoin);
        qbdsBookingPeriodFD.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));
        qbdsBookingPeriodFD.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord)).value(queryValue(FiscalBooksConstants_BR::SpedRecord_C100));
        qbdsBookingPeriodFD.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FiscalSituation))
            .value(strFmt('!%1,!%2,!%3', enum2Str(FBFiscalDocumentSituation_BR::Cancelled), enum2Str(FBFiscalDocumentSituation_BR::Denied), enum2Str(FBFiscalDocumentSituation_BR::Discarded)));
        
        qbdsTaxTrans = qbdsFD.addDataSource(tableNum(FBTaxTrans_BR));
        qbdsTaxTrans.relations(true);
        qbdsTaxTrans.fetchMode(QueryFetchMode::One2Many);
        qbdsTaxTrans.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(qbdsTaxTrans, fieldnum(FBTaxTrans_BR, TaxationCode), con2Str(taxationCodes, ','));

        queryRunFDLine = new QueryRun(queryFDLine);
        if (queryRunFDLine.next())
        {
            fiscalDocumentLines = queryRunFDLine.get(tablenum(FiscalDocumentLine_BR));
            totalLineAmountC = totalAmountC - (fiscalDocumentLines.LineAmount - fiscalDocumentLines.LineDiscount);
            spedRecord.addFieldNumeric(totalLineAmountC, 2); // 05 REC_NRB_BLOCK_C
        }
        else
        {
            spedRecord.addFieldNumeric(0.00, 2); // 05 REC_NRB_BLOCK_C
        }

        // Block D - Not supported
        spedRecord.addFieldNumeric(0.00, 2); // 06 REC_TOTAL_BLOCK_D
        spedRecord.addFieldNumeric(0.00, 2); // 07 REC_NRB_BLOCK_D

        // Summarize amounts from Block F
        Query queryNFO = new Query();
        QueryBuildDataSource qbdsNFOSum = queryNFO.addDataSource(tableNum(FBNonFiscalOperation_BR));
        qbdsNFOSum.name('NonFiscalOperation');
        qbdsNFOSum.addSelectionField(fieldNum(FBNonFiscalOperation_BR, TotalAmount), SelectionField::Sum);
        qbdsNFOSum.addRange(fieldNum(FBNonFiscalOperation_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));

        QueryBuildDataSource qbdsNFO_PIS = qbdsNFOSum.addDataSource(tableNum(FBNonFiscalOperationTaxTrans_BR));
        qbdsNFO_PIS.name('TaxTransPIS');
        qbdsNFO_PIS.fetchMode(QueryFetchMode::One2One);
        qbdsNFO_PIS.joinMode(JoinMode::ExistsJoin);
        qbdsNFO_PIS.relations(true);
        qbdsNFO_PIS.addRange(fieldNum(FBNonFiscalOperationTaxTrans_BR, Type)).value(enum2Str(TaxType_BR::PIS));
        findOrCreateRange_W(qbdsNFO_PIS, fieldnum(FBNonFiscalOperationTaxTrans_BR, TaxationCode), con2Str(taxationCodes, ','));

        QueryBuildDataSource qbdsNFO_COFINS = qbdsNFO_PIS.addDataSource(tableNum(FBNonFiscalOperationTaxTrans_BR));
        qbdsNFO_COFINS.name('TaxTransCOFINS');
        qbdsNFO_COFINS.fetchMode(QueryFetchMode::One2One);
        qbdsNFO_COFINS.joinMode(JoinMode::ExistsJoin);
        qbdsNFO_COFINS.relations(false);
        qbdsNFO_COFINS.addLink(fieldNum(FBNonFiscalOperationTaxTrans_BR, TaxationCode), fieldNum(FBNonFiscalOperationTaxTrans_BR, TaxationCode));
        qbdsNFO_COFINS.addLink(fieldNum(FBNonFiscalOperationTaxTrans_BR, FBNonFiscalOperation_BR), fieldNum(FBNonFiscalOperationTaxTrans_BR, FBNonFiscalOperation_BR));
        qbdsNFO_COFINS.addRange(fieldNum(FBNonFiscalOperationTaxTrans_BR, Type)).value(enum2Str(TaxType_BR::COFINS));

        QueryRun queryRunNFO = new QueryRun(queryNFO);
        if (queryRunNFO.next())
        {
            fbNonFiscalOperation = queryRunNFO.get(tablenum(FBNonFiscalOperation_BR));

            totalAmountF = fbNonFiscalOperation.TotalAmount;
            spedRecord.addFieldNumeric(totalAmountF, 2); // 08 REC_TOTAL_BLOCK_F
        }
        else
        {
            spedRecord.addFieldNumeric(0.00, 2); // 08 REC_TOTAL_BLOCK_F
        }

        Query queryNFOTaxTrans = new Query();
        QueryBuildDataSource qbdsNFO_PISSum = queryNFOTaxTrans.addDataSource(tableNum(FBNonFiscalOperationTaxTrans_BR), 'TaxTransPIS');
        qbdsNFO_PISSum.name('TaxTransPIS');
        qbdsNFO_PISSum.addSelectionField(fieldNum(FBNonFiscalOperationTaxTrans_BR, TaxBaseAmount),SelectionField::Sum);
        qbdsNFO_PISSum.addRange(fieldNum(FBNonFiscalOperationTaxTrans_BR, Type)).value(enum2Str(TaxType_BR::PIS));
        findOrCreateRange_W(qbdsNFO_PISSum, fieldnum(FBNonFiscalOperationTaxTrans_BR, TaxationCode), con2Str(taxationCodes, ','));

        qbdsNFO_COFINS = qbdsNFO_PISSum.addDataSource(tableNum(FBNonFiscalOperationTaxTrans_BR), 'TaxTransCOFINS');
        qbdsNFO_COFINS.name('TaxTransCOFINS');
        qbdsNFO_COFINS.fetchMode(QueryFetchMode::One2One);
        qbdsNFO_COFINS.joinMode(JoinMode::ExistsJoin);
        qbdsNFO_COFINS.relations(false);
        qbdsNFO_COFINS.addLink(fieldNum(FBNonFiscalOperationTaxTrans_BR, TaxationCode), fieldNum(FBNonFiscalOperationTaxTrans_BR, TaxationCode));
        qbdsNFO_COFINS.addLink(fieldNum(FBNonFiscalOperationTaxTrans_BR, FBNonFiscalOperation_BR), fieldNum(FBNonFiscalOperationTaxTrans_BR, FBNonFiscalOperation_BR));
        qbdsNFO_COFINS.addRange(fieldNum(FBNonFiscalOperationTaxTrans_BR, Type)).value(enum2Str(TaxType_BR::COFINS));

        QueryBuildDataSource qbdsNFO = qbdsNFO_PISSum.addDataSource(tableNum(FBNonFiscalOperation_BR), 'NonFiscalOperation');
        qbdsNFO.name('NonFiscalOperation');
        qbdsNFO.fetchMode(QueryFetchMode::One2One);
        qbdsNFO.joinMode(JoinMode::ExistsJoin);
        qbdsNFO.relations(false);
        qbdsNFO.addRange(fieldNum(FBNonFiscalOperation_BR, RecId)).value(
            strFmt('(%1.%2 == %3.%4)',
                qbdsNFO_PISSum.name(),
                fieldStr(FBNonFiscalOperationTaxTrans_BR, FBNonFiscalOperation_BR),
                qbdsNFO.name(),
                fieldStr(FBNonFiscalOperation_BR, RecId)));
        qbdsNFO.addRange(fieldNum(FBNonFiscalOperation_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));

        QueryRun queryRunNFOTaxTrans = new QueryRun(queryNFOTaxTrans);
        if (queryRunNFOTaxTrans.next())
        {
            fbNonFiscalOperationTaxTrans = queryRunNFOTaxTrans.get(tablenum(FBNonFiscalOperationTaxTrans_BR));

            totalTaxBaseAmountF = totalAmountF - fbNonFiscalOperationTaxTrans.TaxBaseAmount;

            spedRecord.addFieldNumeric(totalTaxBaseAmountF, 2); // 09 REC_NRB_BLOCK_F
        }
        else
        {
            spedRecord.addFieldNumeric(0.00, 2); // 09 REC_NRB_BLOCK_F
        }

        // Block I - Not supported
        spedRecord.addFieldNumeric(0.00, 2); // 10 REC_TOTAL_BLOCK_I
        spedRecord.addFieldNumeric(0.00, 2); // 11 REC_NRB_BLOCK_I

        // Block 1 - Not supported
        spedRecord.addFieldNumeric(0.00, 2); // 12 REC_TOTAL_BLOCK_1
        spedRecord.addFieldNumeric(0.00, 2); // 13 REC_NRB_BLOCK_1

        // Totals
        totalGrossRev = totalAmountA + totalAmountC + totalAmountF;
        totalNotGrossRev = totalLineAmountA + totalLineAmountC + totalTaxBaseAmountF;

        spedRecord.addFieldNumeric(totalGrossRev, 2); // 14 REC_TOTAL_PERIODO
        spedRecord.addFieldNumeric(totalNotGrossRev, 2); // 15 REC_TOTAL_NRB_PERIODO

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0990</Name>
				<Source><![CDATA[
    private void createRecord0990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('0990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('0') + 1);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1050</Name>
				<Source><![CDATA[
    private void createRecord1050()
    {
        FBTaxAssessment_BR fbTaxAssessmentPisCofins;
        FBTaxAssessmentAdjustment_BR fbTaxAssessmentAdjustment;
        FBTaxTrans_BR fbTaxTransAdjustment;
        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCodePISCOFINS;
        FBSpedRecord_BR spedRecord;

        str formattedCNPJ = this.formatCNPJ(fiscalEstablishmentRoot.CNPJCPFNum_BR);

        while select sum(TaxBaseAmount) from fbTaxTransAdjustment
            group by
                fbTaxAssessmentPisCofins.TaxType,
                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                fbTaxAssessmentAdjustment.TransDate,
                fbTaxAssessmentAdjustment.ReceiptNumber
            join fbTaxAssessmentAdjustment
                where fbTaxAssessmentAdjustment.RecId == fbTaxTransAdjustment.FBTaxAssessmentAdjustment_BR
            join generalAdjustmentCodePISCOFINS
                where generalAdjustmentCodePISCOFINS.RecId == fbTaxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                    && (generalAdjustmentCodePISCOFINS.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseIncrease
                        || generalAdjustmentCodePISCOFINS.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseDecrease)
            join fbTaxAssessmentPisCofins
                where fbTaxAssessmentPisCofins.RecId == fbTaxAssessmentAdjustment.FBTaxAssessment_BR
                    && (fbTaxAssessmentPisCofins.TaxType == TaxType_BR::PIS || fbTaxAssessmentPisCofins.TaxType == TaxType_BR::COFINS)
                    && fbTaxAssessmentPisCofins.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            spedRecord = this.newRecord('1050');

            spedRecord.addFieldDate(fbTaxAssessmentAdjustment.TransDate);                                                                                   // DT_REF
            spedRecord.addFieldString(generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS);                                                          // IND_AJ_BC
            spedRecord.addFieldString(formattedCNPJ);                                                                                                       // CNPJ
            spedRecord.addFieldNumeric(fbTaxTransAdjustment.TaxBaseAmount, 2);                                                                              // VL_AJ_TOT

            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('01',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST01
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('02',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST02
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('03',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST03
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('04',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST04
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('05',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST05
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('06',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST06
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('07',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST07
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('08',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST08
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('09',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST09
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('49',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST49
            spedRecord.addFieldNumeric(this.getBaseAdjustmentAmountByTaxationCode('99',
                                                                                fbTaxAssessmentPisCofins.TaxType,
                                                                                generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS,
                                                                                fbTaxAssessmentAdjustment), 2);												// VL_AJ_CST99
            spedRecord.addFieldString(fbTaxAssessmentPisCofins.TaxType == TaxType_BR::PIS ? '02' : '03');                                                   // IND_APROP
            spedRecord.addFieldString(fbTaxAssessmentAdjustment.ReceiptNumber);                                                                             // NUM_REC
            spedRecord.addFieldEmpty();                                                                                                                     // INFO_COMPL

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1100Or1500</Name>
				<Source><![CDATA[
    private void createRecord1100Or1500(FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        TaxType_BR                          _taxType)
    {
        FBTaxAssessment_BR                      fbTaxAssessmentPisCofins;
        FBSpedRecord_BR                         spedRecord;
        FBContribCreditControlDetail_BR         fbContribCreditControlDetail;

        select firstonly RecId from fbTaxAssessmentPisCofins
            where   fbTaxAssessmentPisCofins.FBBookingPeriod_BR   == fbBookingPeriod.RecId
                &&  fbTaxAssessmentPisCofins.TaxType              == _taxType;

        while select crossCompany fbContribCreditControlDetail
            order by fbContribCreditControlDetail.PeriodYear, fbContribCreditControlDetail.PeriodMonth
            where fbContribCreditControlDetail.FBTaxAssessment_BR == fbTaxAssessmentPisCofins.RecId
        {
            if (  !(fbContribCreditControlDetail.PeriodMonth    == fbBookingPeriod.PeriodMonth
                &&  fbContribCreditControlDetail.PeriodYear     == fbBookingPeriod.PeriodYear
                &&  fbContribCreditControlDetail.CreditBalance  == 0))
            {
                spedRecord = this.newRecord(_recordIdentification);

                spedRecord.addFieldString(this.getPeriodFormatted(fbContribCreditControlDetail.PeriodMonth, fbContribCreditControlDetail.PeriodYear));  // PER_APU_CRED
                spedRecord.addFieldNumericFilledWithZeros(fbContribCreditControlDetail.CreditOrigin, 2);                            // ORIG_CRED
                spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(fbContribCreditControlDetail.CreditOriginCNPJ), 14);     // CNPJ_SUC
                spedRecord.addFieldString(fbContribCreditControlDetail.CreditType, 3);                      // COD_CRED
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.PreviousCreditBalance, 2);          // VL_CRED_APU
                spedRecord.addFieldNumeric(0, 2);                                                           // VL_CRED_EXT_APU
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.PreviousCreditBalance, 2);          // VL_TOT_CRED_APU
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.PreviousCreditDeducted, 2);         // VL_CRED_DESC_PA_ANT
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.PreviousReimbursementDeducted, 2);  // VL_CRED_PER_PA_ANT
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.PreviousCompensationDeducted, 2);   // VL_CRED_COMP_PA_ANT
                spedRecord.addFieldNumeric(abs(fbContribCreditControlDetail.PreviousCreditBalance
                                        - fbContribCreditControlDetail.PreviousCreditDeducted
                                        - fbContribCreditControlDetail.PreviousReimbursementDeducted
                                        - fbContribCreditControlDetail.PreviousCompensationDeducted), 2);    // SD_CRED_DISP_EFD

                spedRecord.addFieldNumeric(abs(fbContribCreditControlDetail.CurrentCreditDeducted), 2);          // VL_CRED_DESC_EFD
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.CurrentCreditReimbursed, 2);        // VL_CRED_PER_EFD
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.CurrentCreditCompensated, 2);       // VL_CRED_COMP_EFD
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.CurrentCreditTransferred, 2);       // VL_CRED_TRANS
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.OtherDeductedAmount, 2);            // VL_CRED_OUT
                spedRecord.addFieldNumeric(fbContribCreditControlDetail.CreditBalance, 2);                  // SLD_CRED_FIM

                this.addRecord(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1300Or1700</Name>
				<Source><![CDATA[
    private void createRecord1300Or1700(FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        TaxType_BR                          _taxType)
    {
        FBTaxAssessment_BR                      fbTaxAssessmentPisCofins;
        FBSpedRecord_BR                         spedRecord;
        FBTaxWithholdTransCreditDetail_BR       fbTaxWithholdTransCredit;

        select firstonly RecId from fbTaxAssessmentPisCofins
            where   fbTaxAssessmentPisCofins.FBBookingPeriod_BR   == fbBookingPeriod.RecId
                &&  fbTaxAssessmentPisCofins.TaxType              == _taxType;

        while select crossCompany fbTaxWithholdTransCredit
            order by fbTaxWithholdTransCredit.PeriodYear, fbTaxWithholdTransCredit.PeriodMonth
            where fbTaxWithholdTransCredit.FBTaxAssessment_BR == fbTaxAssessmentPisCofins.RecId
        {
            spedRecord = this.newRecord(_recordIdentification);

            if (fbTaxWithholdTransCredit.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
            {
                spedRecord.addFieldString(this.getCustomerWhtContribTypeForCumulative(fbTaxWithholdTransCredit.CustWhtContributionType));       // IND_NAT_RET
            }
            else
            {
                spedRecord.addFieldString(this.getCustomerWhtContribTypeNonCumulative(fbTaxWithholdTransCredit.CustWhtContributionType));       // IND_NAT_RET
            }

            spedRecord.addFieldString(this.getPeriodFormatted(fbTaxWithholdTransCredit.PeriodMonth, fbTaxWithholdTransCredit.PeriodYear));      // PR_REC_RET
            spedRecord.addFieldNumeric(fbTaxWithholdTransCredit.TotalWithholdingAmount, 2);                                                     // VL_RET_APU
            spedRecord.addFieldNumeric(fbTaxWithholdTransCredit.PreviousDeductedAmount + fbTaxWithholdTransCredit.CurrentDeductedAmount, 2);    // VL_RET_DED
            spedRecord.addFieldNumeric(fbTaxWithholdTransCredit.RefundedAmount, 2);                                                             // VL_RET_PER
            spedRecord.addFieldNumeric(fbTaxWithholdTransCredit.CompensationAmount, 2);                                                         // VL_RET_DCOMP
            spedRecord.addFieldNumeric(fbTaxWithholdTransCredit.WithholdingBalance, 2);                                                         // SLD_RET

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1990</Name>
				<Source><![CDATA[
    private void createRecord1990()
    {
        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('1990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('1') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA010</Name>
				<Source><![CDATA[
    private void createRecordA010(FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                     spedRecord;
        boolean                             isA010AlreadyCreated = false;
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriod_BR                  bookingPeriod;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        bookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(_fiscalEstablishment.FiscalEstablishmentId,
                                                                               _fiscalEstablishment.dataAreaId,
                                                                               fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear);

        if (!bookingPeriod)
        {
            return;
        }

        spedRecord = this.newRecord('A010');
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(_fiscalEstablishment.CNPJCPFNum_BR), 14);

        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            while select fiscalDocument
                where fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing
                join fbBookingPeriodFiscalDocument
                    where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId
                        && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                        && fbBookingPeriodFiscalDocument.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_A100
            {
                if (!isA010AlreadyCreated)
                {
                    this.addRecord(spedRecord);
                    isA010AlreadyCreated = true;
                }

                this.createRecordA100(spedRecord, fiscalDocument, fbBookingPeriodFiscalDocument);
            }
        }
        else
        {
            while select fiscalDocument
                join fbBookingPeriodFiscalDocument
                    where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId
                        && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                        && fbBookingPeriodFiscalDocument.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_A100
            {
                if (!isA010AlreadyCreated)
                {
                    this.addRecord(spedRecord);
                    isA010AlreadyCreated = true;
                }

                this.createRecordA100(spedRecord, fiscalDocument, fbBookingPeriodFiscalDocument);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA100</Name>
				<Source><![CDATA[
    private void createRecordA100(FBSpedRecord_BR                   _parentRecord,
                                    FiscalDocument_BR                 _fiscalDocument,
                                    FBBookingPeriodFiscalDocument_BR  _fbBookingPeriodFiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        spedRecord = this.newRecord('A100');

        spedRecord.addFieldString(_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
        spedRecord.addFieldString(int2str(_fiscalDocument.FiscalDocumentIssuer), 1);

        if (_fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Cancelled)
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType),
                                                                   _fiscalDocument.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(_fiscalDocument);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType)
                        && spedFileParty.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;
            }

            spedRecord.addFieldString(spedFileParty.code(), 60);
        }
        else
        {
            spedRecord.addFieldEmpty();
        }

        spedRecord.addFieldNumericFilledWithZeros   (_fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Cancelled ? 2 : 0, 2);
        spedRecord.addFieldString                   (_fiscalDocument.FiscalDocumentSeries, 3);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumeric                  (_fiscalDocument.FiscalDocumentNumber);

        if (_fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Cancelled)
        {
            spedRecord.addFieldEmptyNTimes          (13);

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }
        }
        else
        {
            spedRecord.addFieldString               (_fiscalDocument.AccessKey);
            spedRecord.addFieldDate                 (_fiscalDocument.FiscalDocumentDate);
            spedRecord.addFieldDate                 (_fiscalDocument.AccountingDate);
            spedRecord.addFieldNumeric              (_fiscalDocument.TotalAmount, 2);
            spedRecord.addFieldString               (this.paymentTypeA100(_fbBookingPeriodFiscalDocument.paymentType()), 1);
            spedRecord.addFieldNumeric              (_fiscalDocument.TotalDiscountAmount, 2);

            spedRecord.addFieldNumeric              (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::PIS), 2);
            spedRecord.addFieldNumeric              (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);

            spedRecord.addFieldNumeric              (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::COFINS), 2);
            spedRecord.addFieldNumeric              (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);

            spedRecord.addFieldEmpty                ();
            spedRecord.addFieldEmpty                ();

            spedRecord.addFieldNumeric              (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ISS), 2);

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }

            this.createRecordA110(spedRecord, _fiscalDocument);
            this.createRecordA120(spedRecord, _fiscalDocument, taxSummarizer);
            this.createRecordA170(spedRecord, _fiscalDocument);
        }
        isABlocksEmpty = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA110</Name>
				<Source><![CDATA[
    private void createRecordA110(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecordA110;
        FiscalDocumentTextListParmData_BR   listOfLegalTexts;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalEstablishment_BR              localFiscalEstablishment;
        String255                           legalText;
        Notes                               notes;
        int                                 legalTextLength;
        int                                 i;

        localFiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);

        listOfLegalTexts = _fiscalDocument.getAllLegalTexts();

        while (listOfLegalTexts.moveNext())
        {
            fiscalDocumentTextParmData = listOfLegalTexts.getCurrent();

            notes = fiscalDocumentTextParmData.parmNotes();
            legalTextLength = strLen(notes);

            // If the legal text has more than 255 characters, the text will be broken in 255 characters each part
            for(i = 0; i < legalTextLength; i += MaxLegalTextLength)
            {
                legalText = subStr(notes, i + 1, i + MaxLegalTextLength);

                spedFileText.insertFromTextDescription(localFiscalEstablishment.RecId, legalText);

                spedRecordA110 = this.newRecord('A110');

                spedRecordA110.addFieldString   (int2str(spedFiletext.TextId), 6);
                spedRecordA110.addFieldEmpty    ();

                this.addChildRecord(_parentRecord, spedRecordA110);
            }
        }

        this.createRecordA111(_parentRecord, listOfLegalTexts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA111</Name>
				<Source><![CDATA[
    private void createRecordA111(FBSpedRecord_BR _parentRecord, FiscalDocumentTextListParmData_BR _listOfLegalTexts)
    {
        FBSpedRecord_BR                     spedRecordA111;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        ListEnumerator                      le;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;

        _listOfLegalTexts.reset();

        while (_listOfLegalTexts.moveNext())
        {
            fiscalDocumentTextParmData = _listOfLegalTexts.getCurrent();

            if (fiscalDocumentTextParmData.parmFiscalRefProcessList())
            {
                le = fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

                while (le.moveNext())
                {
                    fiscalDocumentRefProcessParmData = le.current();

                    if (fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaFederal
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Secex
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Other)
                    {
                        fiscalDocumentRefProcessParmData = le.current();

                        spedRecordA111 = this.newRecord('A111');

                        spedRecordA111.addFieldString   (this.keepAlphaWithoutAccents(fiscalDocumentRefProcessParmData.parmProcessNumber()));
                        spedRecordA111.addFieldString   (int2str(enum2int(fiscalDocumentRefProcessParmData.parmAgency())), 1);

                        this.addChildRecord(_parentRecord, spedRecordA111);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA120</Name>
				<Source><![CDATA[
    private void createRecordA120(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        FBSpedRecord_BR             spedRecord;

        if (!_fiscalDocument.isThirdPartyForeign())
        {
            return;
        }

        spedRecord = this.newRecord('A120');

        spedRecord.addFieldNumeric  (_fiscalDocument.TotalServicesAmount, 2);
        spedRecord.addFieldNumeric  (_taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);
        spedRecord.addFieldEmpty    ();
        spedRecord.addFieldEmpty    ();
        spedRecord.addFieldNumeric  (_taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);
        spedRecord.addFieldEmpty    ();
        spedRecord.addFieldEmpty    ();
        spedRecord.addFieldString   ('0');

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA170</Name>
				<Source><![CDATA[
    private void createRecordA170(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR   taxTransPis, taxTransCofins;
        InventTable                 inventTable;
        FiscalEstablishment_BR      fiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);

        while select Description, ItemId, LineAmount, LineDiscount, LineNum, Origin, RecId, Unit, FinancialLedgerDimension
            from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
        {
            select sum(TaxBaseAmount), sum(TaxAmount), maxOf(TaxValue), maxOf(TaxationCode)
                from taxTransPis
                where taxTransPis.Type == TaxType_BR::PIS
                    && fiscalDocumentLine.RecId == taxTransPis.FiscalDocumentLine;

            select sum(TaxBaseAmount), sum(TaxAmount), maxOf(TaxValue), maxOf(TaxationCode)
                from taxTransCofins
                where taxTransCofins.Type == TaxType_BR::COFINS
                    && fiscalDocumentLine.RecId == taxTransCofins.FiscalDocumentLine;

            spedRecord = this.newRecord('A170');

            inventTable = InventTable::find(fiscalDocumentLine.ItemId);

            if (inventTable && !FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }
            else if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId))
            {
                spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, fiscalDocumentLine.ItemId);
            }

            if (fiscalDocumentLine.Unit && !FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit);
            }

            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineNum, 0, 4);
            spedRecord.addFieldString                   (fiscalDocumentLine.ItemId, 60);
            spedRecord.addFieldString                   (fiscalDocumentLine.Description, 255);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineDiscount, 2);
            if (_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming)
            {
                spedRecord.addFieldString               ('03', 2);                                                                                  // 07   NAT_BC_CRED
                spedRecord.addFieldString               (int2str(_fiscalDocument.isThirdPartyForeign()), 1);                                        // 08   IND_ORG_CRED
            }
            else
            {
                spedRecord.addFieldEmptyNTimes          (2);																						// 07-08
            }

            spedRecord.addFieldNumericFilledWithZeros   (taxTransPis.TaxationCode, 2);
            spedRecord.addFieldNumeric                  (taxTransPis.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (taxTransPis.TaxValue, 2);
            spedRecord.addFieldNumeric                  (taxTransPis.TaxAmount, 2);

            spedRecord.addFieldNumericFilledWithZeros   (taxTransCofins.TaxationCode, 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.TaxValue, 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.TaxAmount, 2);

            // Reporting the parent account because project invoices has a granular main account configuration
            // and fiscal document lines created are aggregation from project invoice transactions
            spedFileMainAccount.insertFromMainAccount(MainAccount::find(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension).RecId));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId); // COD_CTA
            spedRecord.addFieldEmpty                    ();

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordA990</Name>
				<Source><![CDATA[
    private void createRecordA990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('A990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('A') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC010</Name>
				<Source><![CDATA[
    private void createRecordC010(FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                     spedRecord;
        boolean                             isC010AlreadyCreated = false;
        FBBookingPeriod_BR                  bookingPeriod;

        bookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(_fiscalEstablishment.FiscalEstablishmentId,
                                                                               _fiscalEstablishment.dataAreaId,
                                                                               fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear);

        if (!bookingPeriod)
        {
            return;
        }

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C010); // REG
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(_fiscalEstablishment.CNPJCPFNum_BR), 14); // CNPJ
        if (_fiscalEstablishment.SPEDContribReportingTypeNFe == SPEDContribReportingType_BR::Consolidated)
        {
            spedRecord.addFieldNumeric(1, 0, 1); // IND_ESCRI
        }
        else
        {
            spedRecord.addFieldNumeric(2, 0, 1); // IND_ESCRI
        }

        isC010AlreadyCreated = this.createAllRecordsC100(spedRecord, isC010AlreadyCreated, bookingPeriod, _fiscalEstablishment.SPEDContribReportingTypeNFe, _fiscalEstablishment.SPEDContribReportingTypeNFCe);
        isC010AlreadyCreated = this.createAllRecordsC180(spedRecord, isC010AlreadyCreated, bookingPeriod, _fiscalEstablishment.SPEDContribReportingTypeNFe, _fiscalEstablishment.SPEDContribReportingTypeNFCe);
        isC010AlreadyCreated = this.createAllRecordsC190(spedRecord, isC010AlreadyCreated, bookingPeriod, _fiscalEstablishment.SPEDContribReportingTypeNFe);
        isC010AlreadyCreated = this.createRecordC380(spedRecord, isC010AlreadyCreated, bookingPeriod, _fiscalEstablishment);
        isC010AlreadyCreated = this.createAllRecordsC400(spedRecord, isC010AlreadyCreated, bookingPeriod, _fiscalEstablishment);
        isC010AlreadyCreated = this.createAllRecordsC490(spedRecord, isC010AlreadyCreated, bookingPeriod, _fiscalEstablishment);
        isC010AlreadyCreated = this.createAllRecordsC500(spedRecord, isC010AlreadyCreated, bookingPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC100</Name>
				<Source><![CDATA[
    private void createRecordC100(FBSpedRecord_BR                   _parentRecord,
                                  FiscalDocument_BR                 _fiscalDocument,
                                  FBBookingPeriodFiscalDocument_BR  _fbBookingPeriodFiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        boolean                             isExceptionFiscalSituation = _fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Cancelled
                                                                        || _fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Denied
                                                                        || _fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Discarded;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C100);                                      // REG

        spedRecord.addFieldString(_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);     // IND_OPER
        spedRecord.addFieldString(int2str(_fiscalDocument.FiscalDocumentIssuer), 1);                                // IND_EMIT

        if (!isExceptionFiscalSituation && !_fiscalDocument.isElectronicConsumerFiscalDoc())
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType),
                                                                   _fiscalDocument.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(_fiscalDocument);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType)
                        && spedFileParty.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;
            }

            spedRecord.addFieldString(spedFileParty.code(), 60);                                                    // COD_PART
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                             // COD_PART
        }

        spedRecord.addFieldString   (_fiscalDocument.Model, 2);                                                     // COD_MOD
        spedRecord.addFieldString   (strRFix(int2str(enum2int(_fbBookingPeriodFiscalDocument.FiscalSituation)), 2, '0'), 2); // COD_SIT
        spedRecord.addFieldString   ((!_fiscalDocument.FiscalDocumentSeries                                         // SER
            && (_fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55 || _fiscalDocument.Model ==  FiscalBooksConstants_BR::FiscalDocModel_65))
            ? '000'
            : _fiscalDocument.FiscalDocumentSeries, 3);
        spedRecord.addFieldNumeric  (_fiscalDocument.FiscalDocumentNumber);                                         // NUM_DOC

        if (_fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Discarded)
        {
            spedRecord.addFieldString       (_fiscalDocument.AccessKey);                                            // CHV_NFE
        }
        else
        {
            spedRecord.addFieldEmpty        ();                                                                     // CHV_NFE
        }

        if (!isExceptionFiscalSituation)
        {
            spedRecord.addFieldDate         (_fiscalDocument.FiscalDocumentDate);                                   // DT_DOC
            spedRecord.addFieldDate         (_fiscalDocument.AccountingDate);                                       // DT_E_S
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalAmount, 2);                                       // VL_DOC
            spedRecord.addFieldString       (int2str(_fbBookingPeriodFiscalDocument.paymentType()), 1);             // IND_PGTO
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalDiscountAmount, 2);                               // VL_DESC
            spedRecord.addFieldEmpty        ();                                                                     // VL_ABAT_NT
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalGoodsAmount + _fiscalDocument.TotalServicesAmount, 2); // VL_MERC
            spedRecord.addFieldString       (this.getFreightIdentification(_fiscalDocument.FreightChargeTerms), 1); // IND_FRT
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalMarkupFreightAmount, 2);                          // VL_FRT
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalMarkupInsuranceAmount, 2);                        // VL_SEG
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalMarkupOtherAmount, 2);                            // VL_OUT_DA

            if (_fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
            {
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2);      // VL_BC_ICMS
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);          // VL_ICMS

                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMSST), 2);    // VL_BC_ICMS_ST
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMSST), 2);        // VL_ICMS_ST

                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::IPI), 2);           // VL_IPI
            }
            else
            {
                spedRecord.addFieldEmptyNTimes  (5);
            }

            spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);           // VL_PIS
            spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);        // VL_COFINS

            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;
            FiscalDocumentLine_BR fiscalDocumentLine;
            select firstonly RecId from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode05
            exists join fiscalDocumentLine
                where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                    && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId;
            if (fiscalDocumentTaxTrans.RecId) //todo
            {
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);       // VL_PIS_ST
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);    // VL_COFINS_ST
            }
            else
            {
                spedRecord.addFieldNumeric      (0, 2);                                                         // VL_PIS_ST
                spedRecord.addFieldNumeric      (0, 2);                                                         // VL_COFINS_ST
            }
        }
        else
        {
            spedRecord.addFieldEmptyNTimes  (20);
        }

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        if (!isExceptionFiscalSituation)
        {
            this.createRecordC110(spedRecord, _fiscalDocument);
            this.createRecordC120(spedRecord, _fiscalDocument, taxSummarizer);
        }

        if (!isExceptionFiscalSituation)
        {
            this.createRecordC170_telemetry(spedRecord, _fiscalDocument, taxSummarizer);
            this.createRecordC175(spedRecord, _fiscalDocument);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC110</Name>
				<Source><![CDATA[
    private void createRecordC110(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentTextListParmData_BR   listOFLegalTexts;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalEstablishment_BR              localFiscalEstablishment;
        String255                           legalText;
        Notes                               notes;
        int                                 legalTextLength;
        int                                 i;

        localFiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);

        listOFLegalTexts = _fiscalDocument.getAllLegalTexts();

        while (listOFLegalTexts.moveNext())
        {
            fiscalDocumentTextParmData = listOFLegalTexts.getCurrent();

            notes = fiscalDocumentTextParmData.parmNotes();
            legalTextLength = strLen(notes);

            // If the legal text has more than 255 characters, the text will be broken in 255 characters each part
            for (i = 0; i < legalTextLength; i += MaxLegalTextLength)
            {
                legalText = subStr(notes, i + 1, i + MaxLegalTextLength);

                spedFileText = FBSpedFileTextTmp_BR::findByDescription(spedFileText, localFiscalEstablishment.RecId, legalText);

                if (!spedFileText)
                {
                    spedFileText.insertFromTextDescription(localFiscalEstablishment.RecId, legalText);
                }

                spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C110);

                spedRecord.addFieldString   (int2str(spedFiletext.TextId), 6);
                spedRecord.addFieldEmpty    ();

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }

        listOFLegalTexts.reset();

        while (listOFLegalTexts.moveNext())
        {
            fiscalDocumentTextParmData = listOFLegalTexts.getCurrent();

            this.createRecordC111(_parentRecord, fiscalDocumentTextParmData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC111</Name>
				<Source><![CDATA[
    private void createRecordC111(FBSpedRecord_BR                 _parentRecord,
                                  FiscalDocumentTextParmData_BR   _fiscalDocumentTextParmData)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;
        ListEnumerator                      le;

        if (_fiscalDocumentTextParmData.parmFiscalRefProcessList())
        {
            le = _fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

            while (le.moveNext())
            {
                fiscalDocumentRefProcessParmData = le.current();

                if (fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaFederal
                    || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Secex
                    || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Other)
                {
                    spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C111);

                    spedRecord.addFieldString(this.keepAlphaWithoutAccents(fiscalDocumentRefProcessParmData.parmProcessNumber())); // NUM_PROC
                    spedRecord.addFieldString(int2str(enum2int(fiscalDocumentRefProcessParmData.parmAgency())), 1); // IND_PROC

                    this.addChildRecord(_parentRecord, spedRecord);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC120</Name>
				<Source><![CDATA[
    private void createRecordC120(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        FBSpedRecord_BR             spedRecord;
        PurchImportDeclaration_BR   purchImportDeclaration;

        if (!_fiscalDocument.ImportDeclaration)
        {
            return;
        }

        select firstOnly Type, DINumber, DrawBackNumber from purchImportDeclaration
            where purchImportDeclaration.RecId == _fiscalDocument.ImportDeclaration;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C120);
        spedRecord.addFieldString(purchImportDeclaration.Type == PurchDIType_BR::Normal ? '0' : '1');
        spedRecord.addFieldString(purchImportDeclaration.DINumber);
        spedRecord.addFieldNumeric(_taxSummarizer.getDocTaxAmountWithNonRecoverableAmount(TaxType_BR::PIS), 2);
        spedRecord.addFieldNumeric(_taxSummarizer.getDocTaxAmountWithNonRecoverableAmount(TaxType_BR::COFINS), 2);
        spedRecord.addFieldString(purchImportDeclaration.DrawBackNumber);

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC170_telemetry</Name>
				<Source><![CDATA[
    private void createRecordC170_telemetry(
        FBSpedRecord_BR _parentRecord,
        FiscalDocument_BR _fiscalDocument,
        FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedContribRecordC170,
            funcName(),
            enum2Str(fbContribVersion)))
        {
            try
            {
                this.createRecordC170(FBSpedFiscalMethodParameters_BR::construct()
                                .withParentRecord(_parentRecord)
                                .withFiscalDocument(_fiscalDocument)
                                .withTaxSummarizer(_taxSummarizer));

                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsOfType(FiscalBooksConstants_BR::SpedRecord_C170));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC170</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C170 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordC170(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR                 spedRecord;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        InventTable                     inventTable;
        UnitOfMeasure                   unitOfMeasure;
        FBTaxTransTotalsByLine_BR       taxtransIcms, taxTransIcmsst, taxTransIpi, taxTransPis, taxTransCofins;
        TaxationCode_BR                 taxationCode;
        if (_parameters == null || _parameters.parmFiscalDocument() == null)
        {
            throw error(Error::missingParameter(this));
        }
        FiscalDocument_BR               fiscalDocument = _parameters.parmFiscalDocument();
        FiscalEstablishment_BR          fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment);
        VendInvoiceJour                 vendInvoiceJour;
        int                             createInventTrans;

        if (fiscalDocument.isElectronicConsumerFiscalDoc())
        {
            return;
        }

        select firstOnly SalesPurchOperationType_BR from vendInvoiceJour
            where vendInvoiceJour.RecId == fiscalDocument.RefRecId;
        
        if (vendInvoiceJour.SalesPurchOperationType_BR)
        {
            createInventTrans = !SalesPurchOperationType_BR::find(vendinvoicejour.SalesPurchOperationType_BR).CreateInventTrans;
        }

        while select fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        {
            FBFiscalDocumentTaxSummarizer_BR taxSummarizer = _parameters.parmTaxSummarizer();
            if (taxSummarizer == null)
            {
                throw error(Error::missingParameter(this));
            }
            taxSummarizer.parmPrintTaxValue(this.isVersion134OrMore());
            taxtransIcms    = taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMS);
            taxTransIcmsst  = taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMSST);
            taxTransIpi     = taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::IPI);
            taxTransPis     = taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::PIS);
            taxTransCofins  = taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::COFINS);

            taxationCode = taxTransIcms.parmTaxationCode();
            inventTable = InventTable::find(fiscalDocumentLine.ItemId);
            unitOfMeasure = UnitOfMeasure::findBySymbol(fiscalDocumentLine.Unit);

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }
            if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit);
            }
            if (!FBSpedFileOperationNatureTmp_BR::existsForCFOP(spedFileOperationNature, fiscalEstablishment.RecId, fiscalDocumentLine.CFOP))
            {
                spedFileOperationNature.insertFromCFOPId(fiscalEstablishment.RecId, fiscalDocumentLine.CFOP);
            }

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C170);

            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineNum, 0, 3);
            spedRecord.addFieldString                   (fiscalDocumentLine.ItemId, 60);
            spedRecord.addFieldString                   (strLRTrim(fiscalDocumentLine.Description));
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.Quantity > 0 ? fiscalDocumentLine.Quantity : 1.00, 5);
            spedRecord.addFieldString                   (FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol( spedFileUnitSymbol, fiscalDocumentLine.Unit));
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineDiscount, 2);
            spedRecord.addFieldString                   (int2str(createinventtrans));
            spedRecord.addFieldNumericFilledWithZeros   (int2str(enum2int(fiscalDocumentLine.Origin)) + taxationCode, 3);
            spedRecord.addFieldNumeric                  (strKeep(fiscalDocumentLine.CFOP, '0123456789'), 0, 4);
            spedRecord.addFieldString                   (strKeep(fiscalDocumentLine.CFOP, '0123456789'), 10);

            if (taxTransIcms.parmFiscalValue() == TaxFiscalValue_BR::WithoutCreditDebitExempt)
            {
                spedRecord.addFieldNumeric              (0, 2);
                spedRecord.addFieldNumeric              (0, 2);
                spedRecord.addFieldNumeric              (0, 2);
            }
            else
            {
                spedRecord.addFieldNumeric              (taxtransIcms.parmTaxbaseAmount(), 2);
                spedRecord.addFieldNumeric              (taxtransIcms.parmTaxValue(), 2);
                spedRecord.addFieldNumeric              (taxtransIcms.parmTaxAmount(), 2);
            }

            spedRecord.addFieldNumeric                  (taxtransIcmsSt.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxtransIcmsSt.parmTaxValue(), 2);
            spedRecord.addFieldNumeric                  (taxtransIcmsSt.parmTaxAmount(), 2);

            if (fiscalOrganization.ActivityType != FBContribActivityType_BR::Manufacturing
                && fbContribVersion >= FBContribVersion_BR::v6)
            {
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
            }
            else
            {
                spedRecord.addFieldString(int2str(this.getIPITaxAssessmentPeriodocity()));
                spedRecord.addFieldNumericFilledWithZeros(taxtransIpi.parmTaxationCode(), 2);
            }

            spedRecord.addFieldEmpty                    ();
            spedRecord.addFieldNumeric                  (taxTransIpi.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransIpi.parmTaxValue(), 2);
            spedRecord.addFieldNumeric                  (taxTransIpi.parmTaxAmount(), 2);
            spedRecord.addFieldNumericFilledWithZeros   (taxtransPis.parmTaxationCode(), 2);
            spedRecord.addFieldNumeric                  (taxTransPis.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransPis.parmTaxValue(), 2);
            spedRecord.addFieldEmpty();
            spedRecord.addFieldEmpty();
            spedRecord.addFieldNumeric                  (taxTransPis.parmTaxAmount(), 2);
            spedRecord.addFieldNumericFilledWithZeros   (taxTransCofins.parmTaxationCode(), 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.parmTaxValue(), 2);
            spedRecord.addFieldEmpty();
            spedRecord.addFieldEmpty();
            spedRecord.addFieldNumeric                  (taxTransCofins.parmTaxAmount(), 2);

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId); // COD_CTA

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC175</Name>
				<Source><![CDATA[
    private void createRecordC175(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscaldocument)
    {
        ListEnumerator                      le;
        FBFiscalDocumentTaxSummary_BR       taxSummary;
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentPISCOFINSSummarizer_BR    taxSummarizer;

        if (_fiscaldocument.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
        {
            return;
        }

        taxSummarizer = FBFiscalDocumentPISCOFINSSummarizer_BR::construct(_fiscaldocument);

        le = taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            taxSummary = le.current();

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C175);

            spedRecord.addFieldNumericFilledWithZeros   (strKeep(taxSummary.parmCFOP(), '0123456789'), 4);  // CFOP
            spedRecord.addFieldNumeric                  (taxSummary.parmOperationAmount(), 2);              // VL_OPR
            spedRecord.addFieldNumeric                  (taxSummary.parmDiscountAmount(), 2);               // VL_DESC

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmPisCST(), 2);                       // CST_PIS
            spedRecord.addFieldNumeric                  (taxSummary.parmPisBaseAmount(), 2);                // VL_BC_PIS
            spedRecord.addFieldNumeric                  (taxSummary.parmPisTaxPct(), 2);                    // ALIQ_PIS
            spedRecord.addFieldEmpty();                                                                     // QUANT_BC_PIS
            spedRecord.addFieldEmpty();                                                                     // ALIQ_PIS_QUANT
            spedRecord.addFieldNumeric                  (taxSummary.parmPisAmount(), 2);                    // VL_PIS

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmCofinsCST(), 2);                    // CST_COFINS
            spedRecord.addFieldNumeric                  (taxSummary.parmCofinsBaseAmount(), 2);             // VL_BC_COFINS
            spedRecord.addFieldNumeric                  (taxSummary.parmCofinsTaxPct(), 2);                 // ALIQ_COFINS
            spedRecord.addFieldEmpty();                                                                     // QUANT_BC_COFINS
            spedRecord.addFieldEmpty();                                                                     // ALIQ_COFINS_QUANT
            spedRecord.addFieldNumeric                  (taxSummary.parmCofinsAmount(), 2);                 // VL_COFINS

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(taxSummary.parmFinancialLedgerDimension()));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);                // COD_CTA
            spedRecord.addFieldEmpty();                                                                     // INFO_COMPL

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC180</Name>
				<Source><![CDATA[
    private void createRecordC180(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, FBFiscalDocumentLineView_BR _fbFiscalDocumentLineView)
    {
        FBSpedRecord_BR                         spedRecord;
        FiscalEstablishment_BR                  fiscalEstablishment;
        InventTable                             inventTable;

        // Code to insert used products in the 0200 record
        fiscalEstablishment = FiscalEstablishment_BR::findById(_fbFiscalDocumentLineView.FiscalEstablishment);
        inventTable = InventTable::find(_fbFiscalDocumentLineView.ItemId);
        if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _fbFiscalDocumentLineView.ItemId))
        {
            spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
        }

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C180); // REG
        spedRecord.addFieldString(_fbFiscalDocumentLineView.Model, 2); // COD_MOD
        spedRecord.addFieldDate(_fbFiscalDocumentLineView.FiscalDocumentDate1); // DT_REF_INI
        spedRecord.addFieldDate(_fbFiscalDocumentLineView.FiscalDocumentDate2); // DT_REF_FIN
        spedRecord.addFieldString(_fbFiscalDocumentLineView.ItemId, 60); // COD_ITEM
        spedRecord.addFieldString(this.keepNumbers(_fbFiscalDocumentLineView.TaxFiscalClassification_BR), 8); // COD_NCM
        spedRecord.addFieldEmpty();
        spedRecord.addFieldNumeric(_fbFiscalDocumentLineView.AccountingAmount,2); // VL_TOT_ITEM

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        this.createRecordC181(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
        this.createRecordC185(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
        this.createAllRecordsC188(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC181</Name>
				<Source><![CDATA[
    private void createRecordC181(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        this.createRecordC18x(_parentRecord, _bookingPeriod, _itemId, FiscalBooksConstants_BR::SpedRecord_C181, TaxType_BR::PIS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC185</Name>
				<Source><![CDATA[
    private void createRecordC185(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        this.createRecordC18x(_parentRecord, _bookingPeriod, _itemId, FiscalBooksConstants_BR::SpedRecord_C185, TaxType_BR::COFINS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC188</Name>
				<Source><![CDATA[
    private void createRecordC188(FBSpedRecord_BR _parentRecord,
                                  FiscalDocumentReferencedProcess_BR _fiscalDocumentReferencedProcess)
    {
        FBSpedRecord_BR spedRecord;
        int             processOrigin;

        switch (_fiscalDocumentReferencedProcess.Agency)
        {
            case Agency_BR::JusticaFederal:
                processOrigin = 1;
                break;
            case Agency_BR::Secex:
                processOrigin = 3;
                break;
            default:
                processOrigin = 9;
        }
        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C188); // REG
        spedRecord.addFieldString(_fiscalDocumentReferencedProcess.ProcessNumber, 20); // NUM_PROC
        spedRecord.addFieldNumeric(processOrigin, 0, 1); // IND_PROC

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC18x</Name>
				<Source><![CDATA[
    private void createRecordC18x(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId, str _record, TaxType_BR _taxType)
    {
        List taxData = this.getTaxDataFromMap(taxAmounts18xByPeriod, _bookingPeriod.RecId, _itemId, _taxType);

        if (taxData)
        {
            var taxEnumerator = taxData.getEnumerator();
            while (taxEnumerator.moveNext())
            {
                SalesPurchCFOPId_BR cFOP;
                AmountMST accountingAmount;
                FiscalDocumentDiscAmount_BR lineDiscount;
                TaxationCode_BR taxationCode;
                TaxValue taxValue;
                TaxAmount taxAmount;
                TaxBaseCur taxBaseAmount;
                MainAccountNum mainAccountId;
                [cFOP, taxationCode, taxValue, accountingAmount, lineDiscount, taxAmount, taxBaseAmount, mainAccountId] = taxEnumerator.current();
                
                // Code to insert used CFOPs in the 0400 record
                FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(_bookingPeriod.FiscalEstablishmentId);
                if (!FBSpedFileOperationNatureTmp_BR::existsForCFOP(spedFileOperationNature, fiscalEstablishment.RecId, cFOP))
                {
                    spedFileOperationNature.insertFromCFOPId(fiscalEstablishment.RecId, cFOP);
                }

                FBSpedRecord_BR spedRecord = this.newRecord(_record); // REG
                spedRecord.addFieldString(taxationCode); // CST_PIS
                spedRecord.addFieldString(this.keepNumbers(cFOP), 4); // CFOP
                spedRecord.addFieldNumeric(accountingAmount, 2); // VL_ITEM
                spedRecord.addFieldNumeric(lineDiscount, 2); // VL_DESC
                spedRecord.addFieldNumeric(taxBaseAmount, 2); // VL_BC_PIS
                spedRecord.addFieldNumeric(taxValue, 4); // ALIQ_PIS
                spedRecord.addFieldEmptyNTimes(2);
                spedRecord.addFieldNumeric(taxAmount, 2); // VL_PIS

                spedRecord.addFieldString(mainAccountId); // COD_CTA

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC190</Name>
				<Source><![CDATA[
    private void createRecordC190(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, FBFiscalDocumentLineView_BR _fbFiscalDocumentLineView)
    {
        FBSpedRecord_BR                         spedRecord;
        FiscalEstablishment_BR                  fiscalEstablishment;
        InventTable                             inventTable;

        // Code to insert used products in the 0200 record
        fiscalEstablishment = FiscalEstablishment_BR::findById(_fbFiscalDocumentLineView.FiscalEstablishment);
        inventTable = InventTable::find(_fbFiscalDocumentLineView.ItemId);
        if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _fbFiscalDocumentLineView.ItemId))
        {
            spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
        }

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C190); // REG
        spedRecord.addFieldString(FiscalBooksConstants_BR::FiscalDocModel_55, 2); // COD_MOD
        spedRecord.addFieldDate(_fbFiscalDocumentLineView.FiscalDocumentDate1); // DT_REF_INI
        spedRecord.addFieldDate(_fbFiscalDocumentLineView.FiscalDocumentDate2); // DT_REF_FIN
        spedRecord.addFieldString(_fbFiscalDocumentLineView.ItemId, 60); // COD_ITEM
        spedRecord.addFieldString(this.keepNumbers(_fbFiscalDocumentLineView.TaxFiscalClassification_BR), 8); // COD_NCM
        spedRecord.addFieldEmpty();
        spedRecord.addFieldNumeric(_fbFiscalDocumentLineView.AccountingAmount,2); // VL_TOT_ITEM

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        this.createRecordC191(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
        this.createRecordC195(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
        this.createAllRecordsC198(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
        this.createAllRecordsC199(spedRecord, _bookingPeriod, _fbFiscalDocumentLineView.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC191</Name>
				<Source><![CDATA[
    private void createRecordC191(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        this.createRecordC19x(_parentRecord, _bookingPeriod, _itemId, FiscalBooksConstants_BR::SpedRecord_C191, TaxType_BR::PIS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC195</Name>
				<Source><![CDATA[
    private void createRecordC195(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        this.createRecordC19x(_parentRecord, _bookingPeriod, _itemId, FiscalBooksConstants_BR::SpedRecord_C195, TaxType_BR::COFINS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC198</Name>
				<Source><![CDATA[
    private void createRecordC198(FBSpedRecord_BR _parentRecord,
                                  FiscalDocumentReferencedProcess_BR _fiscalDocumentReferencedProcess)
    {
        FBSpedRecord_BR spedRecord;
        int             processOrigin;

        switch (_fiscalDocumentReferencedProcess.Agency)
        {
            case Agency_BR::JusticaFederal:
                processOrigin = 1;
                break;
            case Agency_BR::Secex:
                processOrigin = 3;
                break;
            default:
                processOrigin = 9;
        }
        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C198); // REG
        spedRecord.addFieldString(_fiscalDocumentReferencedProcess.ProcessNumber, 20); // NUM_PROC
        spedRecord.addFieldNumeric(processOrigin, 0, 1); // IND_PROC

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC199</Name>
				<Source><![CDATA[
    private void createRecordC199(FBSpedRecord_BR _parentRecord,
                                  PurchDIType_BR _purchDIType,
                                  PurchDINumber_BR _purchDINumber,
                                  TaxAmount _pisAmount,
                                  TaxAmount _cofinsAmount,
                                  DrawBackNumber_BR _drawBackNumber)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C199); // REG
        switch (_purchDIType)
        {
            case PurchDIType_BR::Normal:
                spedRecord.addFieldNumeric(0, 0, 1); // COD_DOC_IMP
                break;
            case PurchDIType_BR::Simplified:
                spedRecord.addFieldNumeric(1, 0, 1); // COD_DOC_IMP
                break;
            case PurchDIType_BR::Unique:
                spedRecord.addFieldNumeric(2, 0, 1); // COD_DOC_IMP
                break;
        }

        spedRecord.addFieldNumeric(_purchDINumber, 0, fbContribVersion >= FBContribVersion_BR::v5 ? 15 : 10); // NUM_DOC_IMP
        spedRecord.addFieldNumeric(_pisAmount, 2); // VL_PIS_IMP
        spedRecord.addFieldNumeric(_cofinsAmount, 2); // VL_COFINS_IMP
        spedRecord.addFieldNumeric(_drawBackNumber, 0, 20); // NUM_ACDRAW

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxTransSumAndAddToTaxData</Name>
				<Source><![CDATA[
    private void calcTaxTransSumAndAddToTaxData(FBBookingPeriod_BR _bookingPeriod)
    {
        FiscalDocumentTaxTrans_BR taxTrans;
        FiscalDocumentLine_BR     docLine;
        FiscalDocument_BR         fiscalDocument;        
        FBBookingPeriodFiscalDocument_BR bookingPeriodFiscalDocument; 
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans_BR;
        TaxationCodeTable_BR taxationCodeTable_BR;
        FbSpedC100D100Rules_BR fbSpedC100D100Rules_BR;

        while select sum(TaxAmount), sum(TaxBaseAmount) from taxTrans
            group by TaxationCode, TaxValue, Type
            where (taxTrans.Type == TaxType_BR::PIS
                || taxTrans.Type == TaxType_BR::COFINS)
        join sum(AccountingAmount), sum(LineDiscount), maxof(FinancialLedgerDimension) from docLine
            group by CFOP, ItemId
            where docLine.RecId == taxTrans.FiscalDocumentLine
        exists join fiscalDocument
            where fiscalDocument.RecId == docLine.FiscalDocument
                && (fiscalDocument.Model == #FiscalDocModel_55 || fiscalDocument.Model == #FiscalDocModel_65)
                && fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing
        exists join bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                && bookingPeriodFiscalDocument.FBBookingPeriod_BR == _bookingPeriod.RecId
                && bookingPeriodFiscalDocument.SpedContribRecord == #SpedRecord_C100
        notexists join taxationCodeTable_BR
            where taxationCodeTable_BR.TaxationCode == taxTrans.TaxationCode &&
                  taxationCodeTable_BR.FiscalValue == taxTrans.FiscalValue    &&
                  taxationCodeTable_BR.FiscalValue == TaxFiscalValue_BR::WithoutCreditDebitOther &&
                  fiscalDocument.FiscalDocumentDate >= taxationCodeTable_BR.FromDate &&
                  (fiscalDocument.FiscalDocumentDate <= taxationCodeTable_BR.ToDate ||
                  taxationCodeTable_BR.ToDate == dateNull())
        exists join fbSpedC100D100Rules_BR
            where fbSpedC100D100Rules_BR.TaxationCodeTable_BR == taxationCodeTable_BR.RecId &&
                  fbSpedC100D100Rules_BR.FiscalOrganizationRecId == fiscalOrganization.RecId
        {
            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(docLine.FinancialLedgerDimension));

            List taxData = this.insertIntoMap(taxAmounts18xByPeriod, _bookingPeriod.RecId, taxTrans.Type, docLine.ItemId);
            taxData.addEnd([docLine.CFOP, taxTrans.TaxationCode, taxTrans.TaxValue, docLine.AccountingAmount, docLine.LineDiscount, taxTrans.TaxAmount,
                taxTrans.TaxBaseAmount, spedFileMainAccount.MainAccountId]);
        }

        while select sum(TaxAmount), sum(TaxBaseAmount) from taxTrans
            group by TaxationCode, TaxValue, Type
            where (taxTrans.Type == TaxType_BR::PIS
                || taxTrans.Type == TaxType_BR::COFINS)
        join sum(AccountingAmount), sum(LineDiscount), maxof(FinancialLedgerDimension) from docLine
            group by CFOP, ItemId
            where docLine.RecId == taxTrans.FiscalDocumentLine
        join ThirdPartyCNPJCPF, maxof(ThirdPartyPostalAddress) from fiscalDocument
            group by ThirdPartyCNPJCPF, FiscalEstablishment
            where fiscalDocument.RecId == docLine.FiscalDocument
                && fiscalDocument.Model == #FiscalDocModel_55
                && fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
        exists join bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                && bookingPeriodFiscalDocument.FBBookingPeriod_BR == _bookingPeriod.RecId
                && bookingPeriodFiscalDocument.SpedContribRecord == #SpedRecord_C100
        {
            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(docLine.FinancialLedgerDimension));

            List taxData = this.insertIntoMap(taxAmountsByPeriod, _bookingPeriod.RecId, taxTrans.Type, docLine.ItemId);
            taxData.addEnd([DirPartyType::None, fiscalDocument.ThirdPartyCNPJCPF, docLine.CFOP, taxTrans.TaxationCode, taxTrans.TaxValue,
                docLine.AccountingAmount, docLine.LineDiscount, taxTrans.TaxAmount, taxTrans.TaxBaseAmount,
                spedFileMainAccount.MainAccountId, fiscalDocument.ThirdPartyPostalAddress]);
        }

        this.fillFiscalDocumentReferencedProcess(refProcessByPeriod, _bookingPeriod.RecId, FiscalDocDirection_BR::Incoming);
        this.fillFiscalDocumentReferencedProcess(refProcess188ByPeriod, _bookingPeriod.RecId, FiscalDocDirection_BR::Outgoing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFiscalDocumentReferencedProcess</Name>
				<Source><![CDATA[
    private void fillFiscalDocumentReferencedProcess(Map _map, RefRecId _bookingPeriodRecId, FiscalDocDirection_BR _direction)
    {
        FiscalDocumentReferencedProcess_BR  fiscalDocumentReferencedProcess;
        DocuRefExt_BR                       docuRefExt;
        DocuRef                             docuRef;
        FiscalDocumentLine_BR               docLine;
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;

        while select ItemId, RecId, FiscalDocument from docLine
            exists join fiscalDocument
                where fiscalDocument.RecId == docLine.FiscalDocument
                    && fiscalDocument.Model == #FiscalDocModel_55
                    && fiscalDocument.Direction == _direction
            exists join bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && bookingPeriodFiscalDocument.FBBookingPeriod_BR == _bookingPeriodRecId
                    && bookingPeriodFiscalDocument.SpedContribRecord == #SpedRecord_C100
        {
            while select Agency, ProcessNumber from fiscalDocumentReferencedProcess
                exists join docuRefExt
                    where docuRefExt.RecId == fiscalDocumentReferencedProcess.DocuRefExt_BR
                        && docuRefExt.FiscalInformation == NoYes::Yes
                exists join docuRef
                    where docuRef.RefCompanyId == docuRefExt.DataAreaId
                        && docuRef.RecId == docuRefExt.DocuRef
                        && ((docuRef.RefTableId == tableNum(FiscalDocumentLine_BR) && docuRef.RefRecId == docLine.RecId)
                        || (docuRef.RefTableId == tableNum(FiscalDocument_BR) && docuRef.RefRecId == docLine.FiscalDocument))
            {
                List refProcessData = this.insertIntoMapByBookPeriodAndItem(_map, _bookingPeriodRecId, docLine.ItemId);
                refProcessData.addEnd(fiscalDocumentReferencedProcess);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMapByBookPeriodAndItem</Name>
				<Source><![CDATA[
    private List insertIntoMapByBookPeriodAndItem(Map _map, RefRecId _bookingPeriodRecId, ItemId _itemId)
    {
        List ret;
        Map amountsByItem;
        if (_map.exists(_bookingPeriodRecId))
        {
            amountsByItem = _map.lookup(_bookingPeriodRecId);
        }
        else
        {
            amountsByItem = new Map(Types::String, Types::Class);
            _map.insert(_bookingPeriodRecId, amountsByItem);
        }
        if (amountsByItem.exists(_itemId))
        {
            ret = amountsByItem.lookup(_itemId);
        }
        else
        {
            ret = new List(Types::Record);
            amountsByItem.insert(_itemId, ret);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMap</Name>
				<Source><![CDATA[
    private List insertIntoMap(Map _map, RefRecId _bookingPeriodRecId, TaxType_BR _type, ItemId _itemId)
    {
        List ret;
        Map amountsByType, amountsByItem;
        if (_map.exists(_bookingPeriodRecId))
        {
            amountsByType = _map.lookup(_bookingPeriodRecId);
        }
        else
        {
            amountsByType = new Map(Types::Int64, Types::Class);
            _map.insert(_bookingPeriodRecId, amountsByType);
        }
        if (amountsByType.exists(_type))
        {
            amountsByItem = amountsByType.lookup(_type);
        }
        else
        {
            amountsByItem = new Map(Types::String, Types::Class);
            amountsByType.insert(_type, amountsByItem);
        }
        if (amountsByItem.exists(_itemId))
        {
            ret = amountsByItem.lookup(_itemId);
        }
        else
        {
            ret = new List(Types::Container);
            amountsByItem.insert(_itemId, ret);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDataFromMap</Name>
				<Source><![CDATA[
    private List getTaxDataFromMap(Map _map, RefRecId _bookingPeriodRecId, ItemId _itemId, TaxType_BR _taxType)
    {
        List ret;
        if (_map.exists(_bookingPeriodRecId))
        {
            Map amountsByType = _map.lookup(_bookingPeriodRecId);
            if (amountsByType.exists(_taxType))
            {
                Map amountsByItem = amountsByType.lookup(_taxType);
                if (amountsByItem.exists(_itemId))
                {
                    ret = amountsByItem.lookup(_itemId);
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefProcessDataFromMap</Name>
				<Source><![CDATA[
    private List getRefProcessDataFromMap(Map _map, RefRecId _bookingPeriodRecId, ItemId _itemId)
    {
        List ret;
        if (_map.exists(_bookingPeriodRecId))
        {
            Map amountsByItem = _map.lookup(_bookingPeriodRecId);
            if (amountsByItem.exists(_itemId))
            {
                ret = amountsByItem.lookup(_itemId);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC19x</Name>
				<Source><![CDATA[
    private void createRecordC19x(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId, str _record, TaxType_BR _taxType)
    {
        List taxData = this.getTaxDataFromMap(taxAmountsByPeriod, _bookingPeriod.RecId, _itemId, _taxType);
        if (taxData)
        {
            var taxEnumerator = taxData.getEnumerator();
            while (taxEnumerator.moveNext())
            {
                DirPartyType thirdPartyType;
                CNPJCPFNum_BR thirdPartyCNPJCPF;
                SalesPurchCFOPId_BR cFOP;
                AmountMST accountingAmount;
                FiscalDocumentDiscAmount_BR lineDiscount;
                TaxationCode_BR taxationCode;
                TaxValue taxValue;
                TaxAmount taxAmount;
                TaxBaseCur taxBaseAmount;
                MainAccountNum mainAccountid;
                LogisticsPostalAddressRecId thirdPartyPostalAddress;
                [thirdPartyType, thirdPartyCNPJCPF, cFOP, taxationCode, taxValue, accountingAmount, lineDiscount, taxAmount, taxBaseAmount,
                    mainAccountid, thirdPartyPostalAddress] = taxEnumerator.current();

                // Code to insert used CFOPs in the 0400 record
                FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(_bookingPeriod.FiscalEstablishmentId);
                if (!FBSpedFileOperationNatureTmp_BR::existsForCFOP(spedFileOperationNature, fiscalEstablishment.RecId, cFOP))
                {
                    spedFileOperationNature.insertFromCFOPId(fiscalEstablishment.RecId, cFOP);
                }

                FBSpedRecord_BR spedRecord = this.newRecord(_record); // REG

                if ((_record == FiscalBooksConstants_BR::SpedRecord_C191 || _record == FiscalBooksConstants_BR::SpedRecord_C195)
                    && !this.isCountryAddressCodeBRA(ThirdPartyPostalAddress))
                {
                    spedRecord.addFieldEmpty(); // CNPJ_CPF_PART
                }
                else if(subStr(cFOP, 1, 1) == FiscalBooksConstants_BR::IncomingForeigner)
                {
                    if (thirdPartyType == DirPartyType::Person)
                    {
                        spedRecord.addFieldString(FiscalBooksConstants_BR::ForeignerCPF, 14); // CNPJ_CPF_PART
                    }
                    else
                    {
                        spedRecord.addFieldString(FiscalBooksConstants_BR::ForeignerCNPJ, 14); // CNPJ_CNPJ_PART
                    }
                }
                else
                {
                    spedRecord.addFieldString(this.keepNumbers(ThirdPartyCNPJCPF), 14); // CNPJ_CPF_PART
                }
                spedRecord.addFieldString(taxationCode); // CST_PIS/CST_COFINS
                spedRecord.addFieldString(this.keepNumbers(cFOP), 4); // CFOP
                spedRecord.addFieldNumeric(accountingAmount, 2); // VL_ITEM
                spedRecord.addFieldNumeric(lineDiscount, 2); // VL_DESC
                spedRecord.addFieldNumeric(taxBaseAmount, 2);// VL_BC_PIS/VL_BC_COFINS
                spedRecord.addFieldNumeric(taxValue, 4); // ALIQ_PIS/ALIQ_COFINS
                spedRecord.addFieldEmptyNTimes(2);
                spedRecord.addFieldNumeric(taxAmount, 2); // VL_PIS/VL_COFINS
                spedRecord.addFieldString(mainAccountId); //COD_CTA

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC380</Name>
				<Source><![CDATA[
    private boolean createRecordC380(  FBSpedRecord_BR _parentRecord,
                                    boolean _isC010AlreadyCreated,
                                    FBBookingPeriod_BR _fbBookingPeriod,
                                    FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        date    firstDate;
        date    lastDate;
        Num     lowerNumber;
        Num     higherNumber;
        real    totalAmount;
        real    canceledAmount;

        select firstonly Recid from fiscalDocument
            where fiscalDocument.FiscalEstablishment == _fiscalEstablishment.FiscalEstablishmentId
            exists join fbBookingPeriodFiscalDocument
                where   fbBookingPeriodFiscalDocument.FiscalDocument_BR     == fiscalDocument.RecId
                    &&  fbBookingPeriodFiscalDocument.FBBookingPeriod_BR    == _fbBookingPeriod.RecId
                    &&  fbBookingPeriodFiscalDocument.SpedContribRecord     == FiscalBooksConstants_BR::SpedRecord_C380
                    &&  fiscalDocument.Status != FiscalDocumentStatus_BR::Cancelled;

        if (fiscalDocument.RecId)
        {
            if (_isC010AlreadyCreated == false)
            {
                this.addRecord(_parentRecord);
                _isC010AlreadyCreated = true;
            }
        }
        else
        {
            return _isC010AlreadyCreated;
        }

        select minOf(FiscalDocumentDate), minOf(FiscalDocumentNumber)
            from fiscalDocument
            where fiscalDocument.FiscalEstablishment == _fiscalEstablishment.FiscalEstablishmentId
            exists join fbBookingPeriodFiscalDocument
                where   fbBookingPeriodFiscalDocument.FiscalDocument_BR     == fiscalDocument.RecId
                    &&  fbBookingPeriodFiscalDocument.FBBookingPeriod_BR    == _fbBookingPeriod.RecId
                    &&  fbBookingPeriodFiscalDocument.SpedContribRecord     == FiscalBooksConstants_BR::SpedRecord_C380;

        firstDate = fiscalDocument.FiscalDocumentDate;
        lowerNumber = fiscalDocument.FiscalDocumentNumber;

        select maxOf(FiscalDocumentDate), maxOf(FiscalDocumentNumber), sum(totalAmount)
            from fiscalDocument
            where fiscalDocument.FiscalEstablishment == _fiscalEstablishment.FiscalEstablishmentId
            exists join fbBookingPeriodFiscalDocument
                where   fbBookingPeriodFiscalDocument.FiscalDocument_BR     == fiscalDocument.RecId
                    &&  fbBookingPeriodFiscalDocument.FBBookingPeriod_BR    == _fbBookingPeriod.RecId
                    &&  fbBookingPeriodFiscalDocument.SpedContribRecord     == FiscalBooksConstants_BR::SpedRecord_C380;

        lastDate = fiscalDocument.FiscalDocumentDate;
        higherNumber = fiscalDocument.FiscalDocumentNumber;
        totalAmount = fiscalDocument.totalAmount;

        select sum(totalAmount) from fiscalDocument
            where fiscalDocument.FiscalEstablishment == _fiscalEstablishment.FiscalEstablishmentId
            exists join fbBookingPeriodFiscalDocument
                where   fbBookingPeriodFiscalDocument.FiscalDocument_BR     == fiscalDocument.RecId
                    &&  fbBookingPeriodFiscalDocument.FBBookingPeriod_BR    == _fbBookingPeriod.RecId
                    &&  fbBookingPeriodFiscalDocument.SpedContribRecord     == FiscalBooksConstants_BR::SpedRecord_C380
                    &&  fiscalDocument.Status                               == FiscalDocumentStatus_BR::Cancelled;

        canceledAmount = fiscalDocument.totalAmount;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C380);

        spedRecord.addFieldString   (FiscalBooksConstants_BR::FiscalDocModel_02);               // COD_MOD
        spedRecord.addFieldDate     (firstDate);                        // DT_DOC_INI
        spedRecord.addFieldDate     (lastDate);                         // DT_DOC_FIN
        spedRecord.addFieldNumeric  (lowerNumber);                      // NUM_DOC_INI
        spedRecord.addFieldNumeric  (higherNumber);                     // NUM_DOC_FIN
        spedRecord.addFieldNumeric  (totalAmount, 2);                   // VL_DOC
        spedRecord.addFieldNumeric  (canceledAmount,2);                 // VL_DOC_CANC

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        // Child records
        this.createRecordC381(spedRecord, _fiscalEstablishment);
        this.createRecordC385(spedRecord, _fiscalEstablishment);

        return _isC010AlreadyCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC380Child</Name>
				<Source><![CDATA[
    private void createRecordC380Child(FBSpedRecord_BR _parentRecord, str _record, TaxType_BR _taxType, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentLineView_BR         fiscalDocumentLine;
        FiscalDocumentTaxTransView_BR       fiscalDocumentTaxTrans;

        while select sum(AccountingAmount), ItemId, maxOf(FinancialLedgerDimension) from fiscalDocumentLine
                group by fiscalDocumentLine.ItemId, fiscalDocumentTaxTrans.TaxationCode, fiscalDocumentTaxTrans.TaxValue
            where fiscalDocumentLine.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_C380
                && fiscalDocumentLine.FiscalEstablishment == _fiscalEstablishment.FiscalEstablishmentId
                && fiscalDocumentLine.fiscaldocumentStatus != FiscalDocumentStatus_BR::Cancelled
                && fiscalDocumentLine.FBBookingPeriod_BR == fbBookingPeriod.RecId
            join sum(TaxBaseAmount), sum(TaxAmount) from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type == _taxType
        {
            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishmentRoot.RecId, fiscalDocumentLine.ItemId))
            {
                spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishmentRoot.RecId, fiscalDocumentLine.ItemId);
            }

            spedRecord = this.newRecord(_record);

            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);   // CST_PIS or CST_COFINS
            spedRecord.addFieldString                   (fiscalDocumentLine.ItemId, 60);            // COD_ITEM
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);   // VL_ITEM
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);  // VL_BC_PIS or VL_BC_COFINS
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 2);       // ALIQ_PIS or ALIQ_COFINS
            spedRecord.addFieldEmpty                    ();                                         // QUANT_BC_PIS or QUANT_BC_COFINS
            spedRecord.addFieldEmpty                    ();                                         // ALIQ_PIS_QUANT or ALIQ_COFINS_QUANT
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);      // VL_PIS or VL_COFINS

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC381</Name>
				<Source><![CDATA[
    private void createRecordC381(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        this.createRecordC380Child(_parentRecord, FiscalBooksConstants_BR::SpedRecord_C381, TaxType_BR::PIS, _fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC385</Name>
				<Source><![CDATA[
    private void createRecordC385(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        this.createRecordC380Child(_parentRecord, FiscalBooksConstants_BR::SpedRecord_C385, TaxType_BR::COFINS, _fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC400</Name>
				<Source><![CDATA[
    private void createRecordC400(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _fbBookingPeriod, RetailFiscalPrinter_BR _retailFiscalPrinter)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('C400');

        spedRecord.addFieldString   (_retailFiscalPrinter.FiscalReceiptModel, 2);   // COD_MOD
        spedRecord.addFieldString   (_retailFiscalPrinter.ModelNumber, 20);         // ECF_MOD
        spedRecord.addFieldString   (_retailFiscalPrinter.SerialNumber, 20);        // ECF_FAB
        spedRecord.addFieldNumeric  (_retailFiscalPrinter.TerminalNumber, 0, 3);    // ECF_CX

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        this.createRecordC405(spedRecord, _fbBookingPeriod, _retailFiscalPrinter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC405</Name>
				<Source><![CDATA[
    private void createRecordC405(FBSpedRecord_BR           _parentRecord,
                                  FBBookingPeriod_BR        _fbBookingPeriod,
                                  RetailFiscalPrinter_BR    _retailFiscalPrinter)
    {
        FBSpedRecord_BR     spedRecord;
        RetailZReport_BR    retailZReport;

        while select * from retailZReport
            order by retailZReport.AccountingDate
            where retailZReport.FiscalPrinterSerialNumber       == _retailFiscalPrinter.SerialNumber
                && retailZReport.AdditionalFiscalMemoryIndex    == _retailFiscalPrinter.AdditionalFiscalMemoryIndex
                && retailZReport.AccountingDate                 >= fbBookingPeriod.periodFrom()
                && retailZReport.AccountingDate                 <= fbBookingPeriod.periodTo()
        {
            spedRecord = this.newRecord('C405');

            spedRecord.addFieldDate      (retailZReport.AccountingDate);                 // DT_DOC
            spedRecord.addFieldNumeric   (retailZReport.RestartOperationNumber, 0, 3);   // CRO
            spedRecord.addFieldNumeric   (retailZReport.ZReportNumber, 0, 6);            // CRZ
            spedRecord.addFieldNumeric   (retailZReport.LastReceiptNumber, 0, 6);        // NUM_COO_FIN
            spedRecord.addFieldNumeric   (retailZReport.FinalGrandTotalAmount, 2);       // GT_FIN
            spedRecord.addFieldNumeric   (retailZReport.GrossDailySale, 2);              // VL_BRT

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordC481(_parentRecord, retailZReport);
            this.createRecordC485(_parentRecord, retailZReport);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC481</Name>
				<Source><![CDATA[
    private void createRecordC481(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport)
    {
        this.createRecordC481OrC485(_parentRecord, _retailZReport, TaxType_BR::PIS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC481OrC485</Name>
				<Source><![CDATA[
    private void createRecordC481OrC485(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport, TaxType_BR _taxType)
    {
        FBSpedRecord_BR                         spedRecord;
        FiscalEstablishment_BR                  fiscalEstablishment;
        FBRetailFiscalReceiptTaxTransView_BR    fiscalReceiptTaxTransView;
        str                                     recordIdentification;

        switch (_taxType)
        {
            case TaxType_BR::PIS:
                recordIdentification = 'C481';
                break;
            case TaxType_BR::COFINS:
                recordIdentification = 'C485';
                break;
        }

        while select sum(LineAmount), sum(LineDiscountAmount), sum(TaxBaseAmount), sum(TaxAmount)
            from fiscalReceiptTaxTransView
            group by fiscalReceiptTaxTransView.FiscalEstablishment, fiscalReceiptTaxTransView.TaxationCode, fiscalReceiptTaxTransView.ItemId, fiscalReceiptTaxTransView.TaxValue
            where  fiscalReceiptTaxTransView.FiscalPrinterSerialNumber        == _retailZReport.FiscalPrinterSerialNumber
                && fiscalReceiptTaxTransView.ZReportNumber                    == _retailZReport.ZReportNumber
                && fiscalReceiptTaxTransView.AdditionalFiscalMemoryIndex      == _retailZReport.AdditionalFiscalMemoryIndex
                && fiscalReceiptTaxTransView.CancelledQuantity                == 0
                && fiscalReceiptTaxTransView.TaxType                          == _taxType
        {
            fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalReceiptTaxTransView.FiscalEstablishment);

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, fiscalReceiptTaxTransView.ItemId))
            {
                spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, fiscalReceiptTaxTransView.ItemId);
            }

            spedRecord = this.newRecord(recordIdentification);

            spedRecord.addFieldNumericFilledWithZeros   (this.strRight(fiscalReceiptTaxTransView.TaxationCode, 2), 2);                              // CST_PIS
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.LineAmount - fiscalReceiptTaxTransView.LineDiscountAmount, 2);   // VL_ITEM
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.TaxBaseAmount, 2);                                               // VL_BC_PIS
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.TaxValue, 4, 0);                                                 // ALIQ_PIS
            spedRecord.addFieldEmpty                    ();                                                                                         // QUANT_BC_PIS
            spedRecord.addFieldEmpty                    ();                                                                                         // ALIQ_PIS_QUANT
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.TaxAmount, 2);                                                   // VL_PIS
            spedRecord.addFieldString                   (fiscalReceiptTaxTransView.ItemId, 60);                                                     // COD_ITEM

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(FBSpedFileCreator_Contrib_BR::getFinancialDimensionByItemId(InventAccountType::SalesIssue, fiscalReceiptTaxTransView.ItemId)));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);                                                        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC485</Name>
				<Source><![CDATA[
    private void createRecordC485(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport)
    {
        this.createRecordC481OrC485(_parentRecord, _retailZReport, TaxType_BR::COFINS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC490</Name>
				<Source><![CDATA[
    private void createRecordC490(FBSpedRecord_BR       _parentRecord,
                                  FBBookingPeriod_BR    _fbBookingPeriod,
                                  date                  _minFiscalReceiptDate,
                                  date                  _maxFiscalReceiptDate)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('C490');

        spedRecord.addFieldDate     (_minFiscalReceiptDate);    // DT_DOC_INI
        spedRecord.addFieldDate     (_maxFiscalReceiptDate);    // DT_DOC_FIN
        spedRecord.addFieldString   (FiscalBooksConstants_BR::FiscalDocModel_2D, 2);    // COD_MOD

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        this.createRecordC491(spedRecord, _fbBookingPeriod, _minFiscalReceiptDate, _maxFiscalReceiptDate);
        this.createRecordC495(spedRecord, _fbBookingPeriod, _minFiscalReceiptDate, _maxFiscalReceiptDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC491</Name>
				<Source><![CDATA[
    private void createRecordC491(FBSpedRecord_BR       _parentRecord,
                                  FBBookingPeriod_BR    _fbBookingPeriod,
                                  date                  _minFiscalReceiptDate,
                                  date                  _maxFiscalReceiptDate)

    {
        this.createRecordC491OrC495(_parentRecord, _fbBookingPeriod, _minFiscalReceiptDate, _maxFiscalReceiptDate, TaxType_BR::PIS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC491OrC495</Name>
				<Source><![CDATA[
    private void createRecordC491OrC495(FBSpedRecord_BR       _parentRecord,
                                        FBBookingPeriod_BR    _fbBookingPeriod,
                                        date                  _minFiscalReceiptDate,
                                        date                  _maxFiscalReceiptDate,
                                        TaxType_BR            _taxType)

    {
        FBSpedRecord_BR                         spedRecord;
        FBRetailFiscalReceiptTaxTransView_BR    fiscalReceiptTaxTransView;
        FiscalEstablishment_BR                  fiscalEstablishment;
        str                                     recordIdentification;

        switch (_taxType)
        {
            case TaxType_BR::PIS:
                recordIdentification = FiscalBooksConstants_BR::SpedRecord_C491;
                break;
            case TaxType_BR::COFINS:
                recordIdentification = FiscalBooksConstants_BR::SpedRecord_C495;
                break;
        }

        while select sum(LineAmount), sum(LineDiscountAmount), sum(TaxBaseAmount), sum(TaxAmount)
            from fiscalReceiptTaxTransView
            group by fiscalReceiptTaxTransView.ItemId, fiscalReceiptTaxTransView.TaxValue, fiscalReceiptTaxTransView.TaxationCode, fiscalReceiptTaxTransView.CFOP
            where  fiscalReceiptTaxTransView.FBBookingPeriod_BR == _fbBookingPeriod.RecId
                && fiscalReceiptTaxTransView.AccountingDate     >= _minFiscalReceiptDate
                && fiscalReceiptTaxTransView.AccountingDate     <= _maxFiscalReceiptDate
                && fiscalReceiptTaxTransView.CancelledQuantity  == 0
                && fiscalReceiptTaxTransView.TaxType            == _taxType
        {
            fiscalEstablishment = FiscalEstablishment_BR::findById(_fbBookingPeriod.FiscalEstablishmentId);
            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, fiscalReceiptTaxTransView.ItemId))
            {
                spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, fiscalReceiptTaxTransView.ItemId);
            }

            spedRecord = this.newRecord(recordIdentification);                                                                                      // REG

            spedRecord.addFieldString                   (fiscalReceiptTaxTransView.ItemId, 60);                                                     // COD_ITEM
            spedRecord.addFieldNumericFilledWithZeros   (fiscalReceiptTaxTransView.TaxationCode, 2);                                                // CST_PIS
            spedRecord.addFieldNumeric                  (strKeep(fiscalReceiptTaxTransView.CFOP, '0123456789'), 0, 4);                              // CFOP
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.LineAmount - fiscalReceiptTaxTransView.LineDiscountAmount, 2);   // VL_ITEM
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.TaxBaseAmount, 2);                                               // VL_BC_PIS
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.TaxValue, 2);                                                    // ALIQ_PIS
            spedRecord.addFieldEmpty                    ();                                                                                         // QUANT_BC_PIS
            spedRecord.addFieldEmpty                    ();                                                                                         // ALIQ_PIS_QUANT
            spedRecord.addFieldNumeric                  (fiscalReceiptTaxTransView.TaxAmount, 2);                                                   // VL_PIS

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(FBSpedFileCreator_Contrib_BR::getFinancialDimensionByItemId(InventAccountType::SalesIssue, fiscalReceiptTaxTransView.ItemId)));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);                                                        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC495</Name>
				<Source><![CDATA[
    private void createRecordC495(FBSpedRecord_BR       _parentRecord,
                                  FBBookingPeriod_BR    _fbBookingPeriod,
                                  date                  _minFiscalReceiptDate,
                                  date                  _maxFiscalReceiptDate)

    {
        this.createRecordC491OrC495(_parentRecord, _fbBookingPeriod, _minFiscalReceiptDate, _maxFiscalReceiptDate, TaxType_BR::COFINS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC500</Name>
				<Source><![CDATA[
    private void createRecordC500(FBSpedRecord_BR                       _parentRecord,
                                    FiscalDocument_BR                   _fiscalDocument,
                                    FBBookingPeriodFiscalDocument_BR    _fbBookingPeriodFiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        spedRecord = this.newRecord('C500');

        if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId,
                                                                this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType),
                                                                _fiscalDocument.FiscalDocumentAccountNum))
        {
            spedFileParty.insertFromFiscalDocument(_fiscalDocument);
        }
        else
        {
            select firstonly spedFileParty
                where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType)
                    && spedFileParty.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;
        }

        spedRecord.addFieldString                   (spedFileParty.code());
        spedRecord.addFieldString                   (_fiscalDocument.Model);
        spedRecord.addFieldNumericFilledWithZeros   (enum2int(_fbBookingPeriodFiscalDocument.FiscalSituation), 2);
        spedRecord.addFieldString                   (_fiscalDocument.FiscalDocumentSeries, 4);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumeric                  (_fiscalDocument.FiscalDocumentNumber);
        spedRecord.addFieldDate                     (_fiscalDocument.FiscalDocumentDate);
        spedRecord.addFieldDate                     (_fiscalDocument.AccountingDate);
        spedRecord.addFieldNumeric                  (_fiscalDocument.TotalAmount, 2);
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);

        if (fbContribVersion >= FBContribVersion_BR::v6)
        {
            if ( _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55 || _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_66)
            {
                spedRecord.addFieldString(_fiscalDocument.AccessKey);
            }
            else
            {
                spedRecord.addFieldEmpty();
            }
        }

        this.addChildRecord(_parentRecord, spedRecord);
        isCBlocksEmpty = false;

        this.createRecordC501(spedRecord, _fiscalDocument);
        this.createRecordC505(spedRecord, _fiscalDocument);
        this.createRecordC509(spedRecord, _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC501</Name>
				<Source><![CDATA[
    private void createRecordC501(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        FBNonFiscalOpCreditSourceCode_BR    creditBaseSourceCode;

        while select sum(AccountingAmount), FiscalDocument, RecId, maxOf(FinancialLedgerDimension), maxOf(ServiceCode) from fiscalDocumentLine
            group by fiscalDocumentLine.CFOP, fiscalDocumentTaxTrans.TaxationCode, fiscalDocumentTaxTrans.FiscalValue, fiscalDocumentTaxTrans.TaxValue
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            join maxOf(TaxationCode), maxof(TaxValue), sum(TaxBaseAmount), sum(TaxAmount)
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type == TaxType_BR::PIS
        {
            spedRecord = this.newRecord('C501');                                                    // REG

            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);   // CST_PIS
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);   // VL_ITEM

            if (fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit)
            {
                if (spedContributionsCreditBaseSourceDateEffectiveFeature)
                {
                    creditBaseSourceCode = FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCodeOnDate(
                        fiscalDocumentLine.CFOP, 
                        _fiscalDocument.FiscalDocumentDate,
                        fiscalDocumentLine.ServiceCode);
                }
                else
                {
                    creditBaseSourceCode = FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCode(fiscalDocumentLine.CFOP, fiscalDocumentLine.ServiceCode);
                }
                spedRecord.addFieldNumericFilledWithZeros   (creditBaseSourceCode, 2);              // NAT_BC_CRED
            }
            else
            {
                spedRecord.addFieldEmpty                    ();                                     // NAT_BC_CRED
            }

            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);  // VL_BC_PIS
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 4, 8);    // ALIQ_PIS
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);      // VL_PIS

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC505</Name>
				<Source><![CDATA[
    private void createRecordC505(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        FBNonFiscalOpCreditSourceCode_BR    creditBaseSourceCode;

        while select sum(AccountingAmount), FiscalDocument, RecId, maxOf(FinancialLedgerDimension), maxOf(ServiceCode) from fiscalDocumentLine
            group by fiscalDocumentLine.CFOP, fiscalDocumentTaxTrans.TaxationCode, fiscalDocumentTaxTrans.FiscalValue, fiscalDocumentTaxTrans.TaxValue
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            join maxOf(TaxationCode), maxof(TaxValue), sum(TaxBaseAmount), sum(TaxAmount)
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type == TaxType_BR::COFINS
        {
            spedRecord = this.newRecord('C505');                                                    // REG

            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);   // CST_COFINS
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);   // VL_ITEM

            if (fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit)
            {
                if (spedContributionsCreditBaseSourceDateEffectiveFeature)
                {
                    creditBaseSourceCode = FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCodeOnDate(
                        fiscalDocumentLine.CFOP, 
                        _fiscalDocument.FiscalDocumentDate,
                        fiscalDocumentLine.ServiceCode);
                }
                else
                {
                    creditBaseSourceCode = FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCode(fiscalDocumentLine.CFOP, fiscalDocumentLine.ServiceCode);
                }
                spedRecord.addFieldNumericFilledWithZeros   (creditBaseSourceCode, 2);              // NAT_BC_CRED
            }
            else
            {
                spedRecord.addFieldEmpty                    ();                                     // NAT_BC_CRED
            }

            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);  // VL_BC_COFINS
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 4, 8);    // ALIQ_COFINS
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);      // VL_COFINS

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC509</Name>
				<Source><![CDATA[
    private void createRecordC509(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        ListEnumerator                      le;

        fiscalDocumentTextListParmData = _fiscalDocument.getLegalTexts(DocuRestriction::External);

        while (fiscalDocumentTextListParmData.moveNext())
        {
            fiscalDocumentTextParmData = fiscalDocumentTextListParmData.getCurrent();

            if (fiscalDocumentTextParmData.parmFiscalRefProcessList())
            {
                le = fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

                while (le.moveNext())
                {
                    fiscalDocumentRefProcessParmData = le.current();

                    if (fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaFederal
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Secex
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Other)
                    {
                        spedRecord = this.newRecord('C509');

                        spedRecord.addFieldString(this.keepAlphaWithoutAccents(fiscalDocumentRefProcessParmData.parmProcessNumber()));
                        spedRecord.addFieldString(int2str(enum2int(fiscalDocumentRefProcessParmData.parmAgency())), 1);

                        this.addChildRecord(_parentRecord, spedRecord);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC990</Name>
				<Source><![CDATA[
    private void createRecordC990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('C990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('C') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD010</Name>
				<Source><![CDATA[
    private void createRecordD010(FiscalEstablishment_BR _fiscalEstablishment)
    {
        boolean isD010AlreadyCreated = false;
        FiscalDocument_BR fiscalDocument;
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;

        FBBookingPeriod_BR bookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(
            _fiscalEstablishment.FiscalEstablishmentId,
            _fiscalEstablishment.dataAreaId,
            fbBookingPeriod.PeriodMonth,
            fbBookingPeriod.PeriodYear);

        if (!bookingPeriod)
        {
            return;
        }

        FBSpedRecord_BR spedRecord = this.newRecord('D010');
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(_fiscalEstablishment.CNPJCPFNum_BR), 14);

        Query queryFD = new Query();

        QueryBuildDataSource qbdsFD = queryFD.addDataSource(tableNum(FiscalDocument_BR));
        QueryBuildDataSource qbdsBookingPeriodFD = qbdsFD.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookingPeriodFD.addSelectionField(fieldNum(FBBookingPeriodFiscalDocument_BR, FiscalSituation));
        qbdsBookingPeriodFD.relations(true);
        qbdsBookingPeriodFD.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriodFD.joinMode(JoinMode::InnerJoin);
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(queryValue(bookingPeriod.RecId));
        qbdsBookingPeriodFD.addRange(
            fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord)).value(queryValue(FiscalBooksConstants_BR::SpedRecord_D100));

        if (fbContribVersion >= FBContribVersion_BR::v6)
        {
            QueryBuildDataSource qbdsFDLines = qbdsFD.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFDLines.relations(true);
            qbdsFDLines.fetchMode(QueryFetchMode::One2Many);
            qbdsFDLines.joinMode(JoinMode::ExistsJoin);

            QueryBuildDataSource qbdsFDTaxTransCofins = qbdsFDLines.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFDTaxTransCofins.relations(true);
            qbdsFDTaxTransCofins.joinMode(JoinMode::ExistsJoin);
            qbdsFDTaxTransCofins.addRange(fieldNum(FiscalDocumentTaxTrans_BR, Type)).value(enum2Str(TaxType_BR::COFINS));

            QueryBuildDataSource qbdsFDTaxTrans = qbdsFDTaxTransCofins.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFDTaxTrans.relations(true);
            qbdsFDTaxTrans.joinMode(JoinMode::NoExistsJoin);
            qbdsFDTaxTrans.addLink(fieldNum(FiscalDocumentTaxTrans_BR, RecId), fieldNum(FiscalDocumentTaxTrans_BR, RecId), qbdsFDTaxTransCofins.name());

            QueryBuildDataSource qbdsTaxationCode = qbdsFDTaxTrans.addDataSource(tableNum(TaxationCodeTable_BR));
            qbdsTaxationCode.fetchMode(QueryFetchMode::One2One);
            qbdsTaxationCode.joinMode(JoinMode::ExistsJoin);
            qbdsTaxationCode.addLink(fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), fieldNum(TaxationCodeTable_BR, TaxationCode));
            qbdsTaxationCode.addLink(fieldNum(FiscalDocumentTaxTrans_BR, FiscalValue), fieldNum(TaxationCodeTable_BR, FiscalValue));
            qbdsTaxationCode.addRange(fieldNum(TaxationCodeTable_BR, ToDate)).value(
                strFmt('((%1.%2 >= %3.%4) && ((%1.%2 <= %3.%5) || (%3.%5 == %6)))',
                    qbdsFD.name(),
                    fieldStr(FiscalDocument_BR, FiscalDocumentDate),
                    qbdsTaxationCode.name(),
                    fieldStr(TaxationCodeTable_BR, FromDate),
                    fieldStr(TaxationCodeTable_BR, ToDate),
                    date2StrXpp(dateNull())));

            QueryBuildDataSource qbdsRules = qbdsTaxationCode.addDataSource(tableNum(FBSpedC100D100Rules_BR));
            qbdsRules.fetchMode(QueryFetchMode::One2One);
            qbdsRules.joinMode(JoinMode::ExistsJoin);
            qbdsRules.addLink(fieldNum(TaxationCodeTable_BR, RecId), fieldNum(FBSpedC100D100Rules_BR, TaxationCodeTable_BR));
            findOrCreateRange_W(qbdsRules, fieldNum(FBSpedC100D100Rules_BR, FiscalOrganizationRecId), queryValue(fiscalOrganization.RecId));
        }

        QueryRun queryRunFD = new QueryRun(queryFD);
        while (queryRunFD.next())
        {
            if (!isD010AlreadyCreated)
            {
                this.addRecord(spedRecord);
                isD010AlreadyCreated = true;
            }
            fiscalDocument = queryRunFD.get(tablenum(FiscalDocument_BR));
            fbBookingPeriodFiscalDocument = queryRunFD.get(tablenum(FBBookingPeriodFiscalDocument_BR));

            this.createRecordD100(spedRecord, fiscalDocument, fbBookingPeriodFiscalDocument);
        }

        while select fiscalDocument
            where fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
            join FiscalSituation from fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && fbBookingPeriodFiscalDocument.SpedContribRecord == FiscalBooksConstants_BR::SpedRecord_D500
        {
            if (!isD010AlreadyCreated)
            {
                this.addRecord(spedRecord);
                isD010AlreadyCreated = true;
            }

            this.createRecordD500(spedRecord, fiscalDocument, fbBookingPeriodFiscalDocument);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD100</Name>
				<Source><![CDATA[
    private void createRecordD100(FBSpedRecord_BR                       _parentRecord,
                                    FiscalDocument_BR                   _fiscalDocument,
                                    FBBookingPeriodFiscalDocument_BR    _fbBookingPeriodFiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        spedRecord = this.newRecord('D100');

        spedRecord.addFieldString(_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);     // 02   IND_OPER
        spedRecord.addFieldString(int2str(_fiscalDocument.FiscalDocumentIssuer), 1);                                // 03   IND_EMIT

        if (_fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Cancelled)
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType),
                                                                   _fiscalDocument.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(_fiscalDocument);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType)
                        && spedFileParty.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;
            }

            spedRecord.addFieldString(spedFileParty.code(), 60);                                                    // 04   COD_PART
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                             // 04   COD_PART
        }

        spedRecord.addFieldString(_fiscalDocument.Model, 2);                                                        // 05   COD_MOD
        spedRecord.addFieldNumericFilledWithZeros((enum2int(_fbBookingPeriodFiscalDocument.FiscalSituation)), 2);   // 06   COD_SIT
        spedRecord.addFieldString(_fiscalDocument.FiscalDocumentSeries, 3);                                         // 07   SER
        spedRecord.addFieldEmpty();                                                                                 // 08   SUB
        spedRecord.addFieldNumeric(_fiscalDocument.FiscalDocumentNumber);                                           // 09   NUM_DOC

        if (_fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Cancelled)
        {
            if (this.shouldCreateD100CHVCTE(_fiscalDocument))
            {
                spedRecord.addFieldString(_fiscalDocument.AccessKey);                                               // 10   CHV_CTE
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                         // 10   CHV_CTE
            }

            spedRecord.addFieldDate(_fiscalDocument.FiscalDocumentDate);                                            // 11   DT_DOC
            spedRecord.addFieldDate(_fiscalDocument.AccountingDate);                                                // 12   DT_A_P

            if (this.shouldCreateD100TPCTe(_fiscalDocument))
            {
                spedRecord.addFieldNumeric(enum2int(_fiscalDocument.TypeOfCTe), 0, 1);                              // 13   TP_CT-e
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                         // 13   TP_CT-e
            }

            spedRecord.addFieldEmpty();                                                                             // 14   CHV_CTE_REF
            spedRecord.addFieldNumeric(_fiscalDocument.TotalAmount, 2);                                             // 15   VL_DOC
            spedRecord.addFieldNumeric(_fiscalDocument.TotalDiscountAmount, 2);                                     // 16   VL_DESC
            spedRecord.addFieldString(this.getFreightIdentification(_fiscalDocument.FreightChargeTerms), 1);        // 17   IND_FRT
            spedRecord.addFieldNumeric(_fiscalDocument.TotalServicesAmount, 2);                                     // 18   VL_SERV
            spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2);                // 19   VL_BC_ICMS
            spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);                    // 20   VL_ICMS
            spedRecord.addFieldEmpty();                                                                             // 21   VL_NT
            spedRecord.addFieldEmpty();                                                                             // 22   COD_INF
        }
        else
        {
            spedRecord.addFieldEmptyNTimes(14);                                                                     // 10-22
        }

        FiscalDocumentLine_BR fiscalDocumentLine;

        select maxOf(FinancialLedgerDimension) from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId;

        spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
        spedRecord.addFieldString(spedFileMainAccount.MainAccountId);                                               // 23   COD_CTA

        this.addChildRecord(_parentRecord, spedRecord);
        isDBlocksEmpty = false;

        this.createRecordD101(spedRecord, _fiscalDocument);
        this.createRecordD105(spedRecord, _fiscalDocument);
        this.createRecordD111(spedRecord, _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD101</Name>
				<Source><![CDATA[
    private void createRecordD101(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        while select sum(AccountingAmount), FreightNature, maxOf(FinancialLedgerDimension), maxOf(ServiceCode)
            from fiscalDocumentLine group by FreightNature, CFOP
                where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            join maxOf(TaxationCode), maxof(TaxValue), sum(TaxBaseAmount), sum(TaxAmount)
                from fiscalDocumentTaxTrans group by TaxationCode, TaxValue
                    where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                        && fiscalDocumentTaxTrans.Type == TaxType_BR::PIS
        {
            spedRecord = this.newRecord('D101');

            spedRecord.addFieldString                   (int2str(enum2int(fiscalDocumentLine.FreightNature)), 1);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);
            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);

            
            if (spedContributionsCreditBaseSourceDateEffectiveFeature)
            {
                FBNonFiscalOpCreditSourceCode_BR creditBaseSourceCode = FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCodeOnDate(
                    fiscalDocumentLine.CFOP,
                    _fiscalDocument.FiscalDocumentDate,
                    fiscalDocumentLine.ServiceCode);
                spedRecord.addFieldNumericFilledWithZeros(enum2int(creditBaseSourceCode), 2);
            }
            else
            {
                spedRecord.addFieldNumericFilledWithZeros(enum2int(FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCode(fiscalDocumentLine.CFOP, fiscalDocumentLine.ServiceCode)), 2);
            }
            
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 4, 8);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);
            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD105</Name>
				<Source><![CDATA[
    private void createRecordD105(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        while select sum(AccountingAmount), FreightNature, maxOf(FinancialLedgerDimension), maxOf(ServiceCode)
            from fiscalDocumentLine group by FreightNature, CFOP
                where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            join maxOf(TaxationCode), maxof(TaxValue), sum(TaxBaseAmount), sum(TaxAmount)
                from fiscalDocumentTaxTrans group by TaxationCode, TaxValue
                    where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                        && fiscalDocumentTaxTrans.Type == TaxType_BR::COFINS
        {
            spedRecord = this.newRecord('D105');

            spedRecord.addFieldString                   (int2str(enum2int(fiscalDocumentLine.FreightNature)), 1);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);
            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);

            if (spedContributionsCreditBaseSourceDateEffectiveFeature)
            {
                FBNonFiscalOpCreditSourceCode_BR creditBaseSourceCode = FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCodeOnDate(
                    fiscalDocumentLine.CFOP,
                    _fiscalDocument.FiscalDocumentDate,
                    fiscalDocumentLine.ServiceCode);
                spedRecord.addFieldNumericFilledWithZeros(enum2int(creditBaseSourceCode), 2);
            }
            else
            {
                spedRecord.addFieldNumericFilledWithZeros(enum2int(FBCFOPCreditBaseSource_BR::findCreditBaseSourceByCFOPServiceCode(fiscalDocumentLine.CFOP, fiscalDocumentLine.ServiceCode)), 2);
            }
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 4, 8);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);
            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId);        // COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD111</Name>
				<Source><![CDATA[
    private void createRecordD111(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        ListEnumerator                      le;

        fiscalDocumentTextListParmData = _fiscalDocument.getLegalTexts(DocuRestriction::External);

        while (fiscalDocumentTextListParmData.moveNext())
        {
            fiscalDocumentTextParmData = fiscalDocumentTextListParmData.getCurrent();

            if (fiscalDocumentTextParmData.parmFiscalRefProcessList())
            {
                le = fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

                while (le.moveNext())
                {
                    fiscalDocumentRefProcessParmData = le.current();

                    if (fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaFederal
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Secex
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Other)
                    {
                        spedRecord = this.newRecord('D111');

                        spedRecord.addFieldString(this.keepAlphaWithoutAccents(fiscalDocumentRefProcessParmData.parmProcessNumber()));
                        spedRecord.addFieldString(int2str(enum2int(fiscalDocumentRefProcessParmData.parmAgency())), 1);

                        this.addChildRecord(_parentRecord, spedRecord);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD500</Name>
				<Source><![CDATA[
    private void createRecordD500(FBSpedRecord_BR                       _parentRecord,
                                    FiscalDocument_BR                   _fiscalDocument,
                                    FBBookingPeriodFiscalDocument_BR    _fbBookingPeriodFiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        spedRecord = this.newRecord('D500');

        spedRecord.addFieldString                   (_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
        spedRecord.addFieldString                   (int2str(_fiscalDocument.FiscalDocumentIssuer), 1);

        if (_fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Cancelled)
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType),
                                                                   _fiscalDocument.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(_fiscalDocument);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType)
                        && spedFileParty.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;
            }

            spedRecord.addFieldString               (spedFileParty.code(), 60);
        }
        else
        {
            spedRecord.addFieldEmpty();
        }

        spedRecord.addFieldString                   (_fiscalDocument.Model, 2);
        spedRecord.addFieldNumericFilledWithZeros   (enum2int(_fbBookingPeriodFiscalDocument.FiscalSituation), 2);
        spedRecord.addFieldString                   (_fiscalDocument.FiscalDocumentSeries, 3);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumeric                  (_fiscalDocument.FiscalDocumentNumber);
        spedRecord.addFieldDate                     (_fiscalDocument.FiscalDocumentDate);
        spedRecord.addFieldDate                     (_fiscalDocument.AccountingDate);
        spedRecord.addFieldNumeric                  (_fiscalDocument.TotalAmount, 2);
        spedRecord.addFieldNumeric                  (_fiscalDocument.TotalDiscountAmount, 2);
        spedRecord.addFieldNumeric                  (_fiscalDocument.TotalServicesAmount, 2);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumeric                  (_fiscalDocument.TotalMarkupFreightAmount +
                                                        _fiscalDocument.TotalMarkupInsuranceAmount +
                                                        _fiscalDocument.TotalMarkupOtherAmount +
                                                        _fiscalDocument.TotalGoodsAmount, 2);
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2);
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);
        spedRecord.addFieldEmpty                    ();
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);
        spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);

        this.addChildRecord(_parentRecord, spedRecord);
        isDBlocksEmpty = false;

        this.createRecordD501(spedRecord, _fiscalDocument);
        this.createRecordD505(spedRecord, _fiscalDocument);
        this.createRecordD509(spedRecord, _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD501</Name>
				<Source><![CDATA[
    private void createRecordD501(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        while select sum(AccountingAmount), FiscalDocument, RecId, maxOf(FinancialLedgerDimension)
            from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            join maxOf(TaxationCode), maxof(TaxValue), sum(TaxBaseAmount), sum(TaxAmount)
                from fiscalDocumentTaxTrans
                group by TaxationCode, TaxValue, Type, FiscalValue
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type == TaxType_BR::PIS
                    && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit
        {
            spedRecord = this.newRecord('D501');

            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);
            spedRecord.addFieldString                   ('03');
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 4, 8);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId); //COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD505</Name>
				<Source><![CDATA[
    private void createRecordD505(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        while select sum(AccountingAmount), FiscalDocument, RecId, maxOf(FinancialLedgerDimension)
            from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            join maxOf(TaxationCode), maxof(TaxValue), sum(TaxBaseAmount), sum(TaxAmount)
                from fiscalDocumentTaxTrans
                group by TaxationCode, TaxValue, Type, FiscalValue
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type == TaxType_BR::COFINS
                    && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit
        {
            spedRecord = this.newRecord('D505');

            spedRecord.addFieldNumericFilledWithZeros   (fiscalDocumentTaxTrans.TaxationCode, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);
            spedRecord.addFieldString                   ('03');
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxValue, 4, 8);
            spedRecord.addFieldNumeric                  (fiscalDocumentTaxTrans.TaxAmount, 2);

            spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension));
            spedRecord.addFieldString                   (spedFileMainAccount.MainAccountId); //COD_CTA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD509</Name>
				<Source><![CDATA[
    private void createRecordD509(FBSpedRecord_BR       _parentRecord,
                                    FiscalDocument_BR   _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        ListEnumerator                      le;

        fiscalDocumentTextListParmData = _fiscalDocument.getLegalTexts(DocuRestriction::External);

        while (fiscalDocumentTextListParmData.moveNext())
        {
            fiscalDocumentTextParmData = fiscalDocumentTextListParmData.getCurrent();

            if (fiscalDocumentTextParmData.parmFiscalRefProcessList())
            {
                le = fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

                while (le.moveNext())
                {
                    fiscalDocumentRefProcessParmData = le.current();

                    if (fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaFederal
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Secex
                        || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Other)
                    {
                        spedRecord = this.newRecord('D509');

                        spedRecord.addFieldString(this.keepAlphaWithoutAccents(fiscalDocumentRefProcessParmData.parmProcessNumber()));
                        spedRecord.addFieldString(int2str(enum2int(fiscalDocumentRefProcessParmData.parmAgency())), 1);

                        this.addChildRecord(_parentRecord, spedRecord);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD990</Name>
				<Source><![CDATA[
    private void createRecordD990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('D990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('D') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF010</Name>
				<Source><![CDATA[
    private void createRecordF010(FiscalEstablishment_BR _branchFiscalEstablishment)
    {
        FBSpedRecord_BR                         spedRecord;
        boolean                                 isF010AlreadyCreated = false;
        FBBookingPeriod_BR                      bookingPeriod;
        FBTaxAssessment_BR                      pisTaxAssessment, cofinsTaxAssessment;
        FBContribAssetAssessment_BR             contribAssetAssessment;
        AmountMST                               pisCreditAssetAdjAmount, cofinsCreditAssetAdjAmount;
        FBTaxAssessmentCalculatorPISCOFINS_BR   pisTaxAssessmentCalculator, cofinsTaxAssessmentCalculator;

        bookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(_branchFiscalEstablishment.FiscalEstablishmentId,
                                                                               _branchFiscalEstablishment.DataAreaId,
                                                                               fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear);

        if (!bookingPeriod)
        {
            return;
        }

        pisTaxAssessment        = FBTaxAssessment_BR::findByBookingPeriodAndTaxType(fbBookingPeriod.RecId, TaxType_BR::PIS);
        cofinsTaxAssessment     = FBTaxAssessment_BR::findByBookingPeriodAndTaxType(fbBookingPeriod.RecId, TaxType_BR::COFINS);
        contribAssetAssessment  = FBContribAssetAssessment_BR::findByBookingPeriod(fbBookingPeriod.RecId);

        spedRecord = this.newRecord('F010');
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(_branchFiscalEstablishment.cnpjcpfNum_BR), 14);

        isF010AlreadyCreated = this.createAllRecordsF100(spedRecord, isF010AlreadyCreated, bookingPeriod);
        
        if (pisTaxAssessment && cofinsTaxAssessment && contribAssetAssessment)
        {
            pisTaxAssessmentCalculator      = FBTaxAssessmentCalculator_BR::construct(pisTaxAssessment) as FBTaxAssessmentCalculatorPISCOFINS_BR;
            cofinsTaxAssessmentCalculator   = FBTaxAssessmentCalculator_BR::construct(cofinsTaxAssessment) as FBTaxAssessmentCalculatorPISCOFINS_BR;

            pisCreditAssetAdjAmount     = pisTaxAssessmentCalculator.getSumOfAssetCreditAdjByTaxAssessment();
            cofinsCreditAssetAdjAmount  = cofinsTaxAssessmentCalculator.getSumOfAssetCreditAdjByTaxAssessment();

            if (    pisCreditAssetAdjAmount     == CurrencyExchange::round(contribAssetAssessment.PISInstallmentSum, accountingCurrency)
                &&  cofinsCreditAssetAdjAmount  == CurrencyExchange::round(contribAssetAssessment.COFINSInstallmentSum, accountingCurrency))
            {
                isF010AlreadyCreated = this.createAllRecordsF120(spedRecord, isF010AlreadyCreated, bookingPeriod);
                isF010AlreadyCreated = this.createAllRecordsF130(spedRecord, isF010AlreadyCreated, bookingPeriod);
            }
        }

        isF010AlreadyCreated = this.createAllRecordsF600(spedRecord, isF010AlreadyCreated, bookingPeriod);
        isF010AlreadyCreated = this.createAllRecordsF700(spedRecord, isF010AlreadyCreated, bookingPeriod);
        isF010AlreadyCreated = this.createAllRecordsF800(spedRecord, isF010AlreadyCreated, bookingPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF100</Name>
				<Source><![CDATA[
    private void createRecordF100(  FBSpedRecord_BR         _parentRecord,
                                    FBNonFiscalOperation_BR _fbNonFiscalOperation)
    {
        FBSpedRecord_BR                 spedRecord;
        FBNonFiscalOperationTaxTrans_BR pisTaxTrans, cofinsTaxTrans;
        FBThirdPartyType_BR             thirdPartyType;
        MainAccount                     offsetMainAccount;
        DimensionAttributeValue         offsetCostCenter;
        LogisticsPostalAddress          logisticsPostalAddress;

        select firstonly pisTaxTrans
            where   pisTaxTrans.FBNonFiscalOperation_BR == _fbNonFiscalOperation.RecId
                &&  pisTaxTrans.Type                    == TaxType_BR::PIS;

        select firstonly cofinsTaxTrans
            where   cofinsTaxTrans.FBNonFiscalOperation_BR == _fbNonFiscalOperation.RecId
                &&  cofinsTaxTrans.Type                    == TaxType_BR::COFINS;

        // Creating a new record
        spedRecord = this.newRecord('F100');

        spedRecord.addFieldNumeric  (this.operationTypeF100(pisTaxTrans.TaxationCode));     // IND_OPER

        // In case of credit operation, the participant code must be filled.
        if (    this.operationTypeF100(pisTaxTrans.TaxationCode) == FBNonFiscalOperationType_BR::Credit
            &&  _fbNonFiscalOperation.AccountType != LedgerJournalACType::Bank)
        {
            if (_fbNonFiscalOperation.AccountType == LedgerJournalACType::Cust)
            {
                thirdPartyType  = FBThirdPartyType_BR::Customer;
            }
            else if (_fbNonFiscalOperation.AccountType == LedgerJournalACType::Vend)
            {
                thirdPartyType = FBThirdPartyType_BR::Vendor;
            }

            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                        _fbNonFiscalOperation.FiscalEstablishment_BR,
                                                        thirdPartyType,
                                                        _fbNonFiscalOperation.accountNum()))
            {
                spedFileParty.insertFromNonFiscalOperation(_fbNonFiscalOperation);
            }

            spedRecord.addFieldString               (spedFileParty.code(), 60);             // COD_PART
        }
        else
        {
            spedRecord.addFieldEmpty    ();                                                 // COD_PART
        }

        spedRecord.addFieldEmpty    ();                                                     // COD_ITEM
        spedRecord.addFieldDate     (_fbNonFiscalOperation.TransDate);                      // DT_OPER
        spedRecord.addFieldNumeric  (_fbNonFiscalOperation.TotalAmount, 2);                 // VL_OPER

        spedRecord.addFieldString   (pisTaxTrans.TaxationCode, 2);                          // CST_PIS
        spedRecord.addFieldNumeric  (pisTaxTrans.TaxBaseAmount, 2);                         // VL_BC_PIS
        spedRecord.addFieldNumeric  (pisTaxTrans.TaxValue, 4);                              // ALIQ_PIS
        spedRecord.addFieldNumeric  (pisTaxTrans.TaxAmount, 2);                             // VL_PIS

        spedRecord.addFieldString   (cofinsTaxTrans.TaxationCode, 2);                       // CST_COFINS
        spedRecord.addFieldNumeric  (cofinsTaxTrans.TaxBaseAmount, 2);                      // VL_BC_COFINS
        spedRecord.addFieldNumeric  (cofinsTaxTrans.TaxValue, 4);                           // ALIQ_COFINS
        spedRecord.addFieldNumeric  (cofinsTaxTrans.TaxAmount, 2);                          // VL_COFINS

        if (    this.operationTypeF100(pisTaxTrans.TaxationCode) == FBNonFiscalOperationType_BR ::Credit
            &&  _fbNonFiscalOperation.AccountType != LedgerJournalACType::Bank)
        {
            spedRecord.addFieldNumericFilledWithZeros(enum2int(_fbNonFiscalOperation.CreditSourceCode), 2);     // NAT_BC_CRED
        }
        else
        {
            spedRecord.addFieldEmpty    ();                                                 // NAT_BC_CRED
        }

        // In case of credit operation, the credit origin must be filled.
        if (    this.operationTypeF100(pisTaxTrans.TaxationCode) == FBNonFiscalOperationType_BR ::Credit
            &&  _fbNonFiscalOperation.AccountType != LedgerJournalACType::Bank)
        {
            switch (_fbNonFiscalOperation.AccountType)
            {
                case LedgerJournalACType::Cust:
                    logisticsPostalAddress = CustTable::find(_fbNonFiscalOperation.accountNum()).postalAddress();
                    break;
                case LedgerJournalACType::Vend:
                    logisticsPostalAddress = VendTable::find(_fbNonFiscalOperation.accountNum()).postalAddress();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (logisticsPostalAddress.CountryRegionId == fbBookingPeriod.fiscalEstablishment().postalAddress().CountryRegionId)
            {
                spedRecord.addFieldNumeric  (0);                                            // IND_ORIG_CRED
            }
            else
            {
                spedRecord.addFieldNumeric  (1);                                            // IND_ORIG_CRED
            }
        }
        else
        {
            spedRecord.addFieldEmpty    ();                                                 // IND_ORIG_CRED
        }

        if (_fbNonFiscalOperation.OffsetLedgerDimension)
        {
            offsetMainAccount = MainAccount::findByLedgerDimension(_fbNonFiscalOperation.OffsetLedgerDimension);
            spedFileMainAccount.insertFromMainAccount(offsetMainAccount);

            spedRecord.addFieldString   (offsetMainAccount.MainAccountId);                  // COD_CTA
        }
        else
        {
            spedRecord.addFieldEmpty    ();                                                 // COD_CTA
        }

        if (_fbNonFiscalOperation.OffsetDefaultDimension)
        {
            offsetCostCenter = DimensionAttributeValue::find(_fbNonFiscalOperation.OffsetDefaultDimension);
            spedFileCostCenterDimension.insertFromDimensionAttribute(_fbNonFiscalOperation.OffsetDefaultDimension);

            spedRecord.addFieldString   (offsetCostCenter.getValue());                      // COD_CCUS
        }
        else
        {
            spedRecord.addFieldEmpty    ();                                                 // COD_CCUS
        }

        spedRecord.addFieldString   (_fbNonFiscalOperation.Description);                    // DESC_DOC_OPER

        this.addChildRecord(_parentRecord, spedRecord);
        isFBlocksEmpty = false;

        // Create child record: referenced process
        this.createRecordF111(spedRecord, _fbNonFiscalOperation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF111</Name>
				<Source><![CDATA[
    private void createRecordF111(  FBSpedRecord_BR         _parentRecord,
                                    FBNonFiscalOperation_BR _fbNonFiscalOperation)
    {
        FbNonFiscalOpReferencedProcess_BR   referencedProcess;

        while select referencedProcess
            where referencedProcess.FBNonFiscalOperation_BR == _fbNonFiscalOperation.RecId
        {
            if (    referencedProcess.Agency == Agency_BR::JusticaFederal
                ||  referencedProcess.Agency == Agency_BR::Secex
                ||  referencedProcess.Agency == Agency_BR::Other)
            {
                this.createRecordReferencedProcess(_parentRecord, 'F111', referencedProcess.Agency, referencedProcess.ProcessNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF120</Name>
				<Source><![CDATA[
    private void createRecordF120(  FBSpedRecord_BR         _parentRecord,
                                    FBContribAssetTrans_BR  _fbContribAssetTrans)
    {
        FBSpedRecord_BR                         spedRecord;
        FBContribAssetTable_BR                  fbContribAssetTable;
        MainAccount                             mainAccount;
        DimensionAttributeValue                 costCenter;
        FBContribAssetTrans_BR                  fbContribAssetTransRefProc;
        FBContribAssetTransReferencedProcess_BR referencedProcess;

        fbContribAssetTable = FBContribAssetTable_BR::find(_fbContribAssetTrans.FBContribAssetTable_BR);

        spedRecord = this.newRecord('F120');                                                                                        // REG
        spedRecord.addFieldNumericFilledWithZeros(enum2int(fbContribAssetTable.AssetAppropriationMethod), 2);                       // NAT_BC_CRED
        spedRecord.addFieldNumericFilledWithZeros(enum2int(fbContribAssetTable.AssetCreditGroup), 2);                               // IDENT_BEM_IMOB
        spedRecord.addFieldNumeric(enum2int(fbContribAssetTable.AssetOrigin));                                                      // IND_ORIG_CRED
        spedRecord.addFieldNumeric(enum2int(fbContribAssetTable.AssetCreditPurpose));                                               // IND_UTIL_BEM_IMOB

        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISInstallmentBaseAmount, 2);                                               // VL_OPER_DEP
        spedRecord.addFieldNumeric(_fbContribAssetTrans.NonTaxableAmount, 2);                                                       // PARC_OPER_NAO_VC_CRED

        spedRecord.addFieldString(_fbContribAssetTrans.PISTaxationCode, 2);                                                         // CST_PIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISInstallmentBaseAmount - _fbContribAssetTrans.NonTaxableAmount, 2);       // VL_BC_PIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISTaxValue, 4);                                                            // ALIQ_PIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISInstallmentAmount, 2);                                                   // VL_PIS

        spedRecord.addFieldString(_fbContribAssetTrans.COFINSTaxationCode, 2);                                                      // CST_COFINS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.COFINSInstallmentBaseAmount - _fbContribAssetTrans.NonTaxableAmount, 2);    // VL_BC_COFINS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.COFINSTaxValue, 4);                                                         // ALIQ_COFINS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.COFINSInstallmentAmount, 2);                                                // VL_COFINS

        if (fbContribAssetTable.LedgerDimension)
        {
            mainAccount = MainAccount::findByLedgerDimension(fbContribAssetTable.LedgerDimension);
            spedFileMainAccount.insertFromMainAccount(mainAccount);

            spedRecord.addFieldString(mainAccount.MainAccountId);                                                           // COD_CTA
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                                     // COD_CTA
        }

        if (fbContribAssetTable.DefaultDimension)
        {
            costCenter = DimensionAttributeValue::find(fbContribAssetTable.DefaultDimension);
            spedFileCostCenterDimension.insertFromDimensionAttribute(fbContribAssetTable.DefaultDimension);

            spedRecord.addFieldString(costCenter.getValue());                                                               // COD_CCUS
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                                     // COD_CCUS
        }

        spedRecord.addFieldString(strFmt('%1-%2', fbContribAssetTable.AssetTable, fbContribAssetTable.AssetName));          // DESC_BEM_IMOB

        this.addChildRecord(_parentRecord, spedRecord);
        isFBlocksEmpty = false;

        // Child record: Referenced process
        while select referencedProcess
            where  (referencedProcess.Agency == Agency_BR::JusticaFederal
                ||  referencedProcess.Agency == Agency_BR::Secex
                ||  referencedProcess.Agency == Agency_BR::Other)
            exists join fbContribAssetTransRefProc
                where   fbContribAssetTransRefProc.RecId                    == referencedProcess.FBContribAssetTrans_BR
                    &&  fbContribAssetTransRefProc.FBBookingPeriod_BR       == _fbContribAssetTrans.FBBookingPeriod_BR
                    &&  fbContribAssetTransRefProc.FBContribAssetTable_BR   == _fbContribAssetTrans.FBContribAssetTable_BR
        {
            this.createRecordReferencedProcess(_parentRecord, 'F129', referencedProcess.Agency, referencedProcess.ProcessNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF130</Name>
				<Source><![CDATA[
    private void createRecordF130(  FBSpedRecord_BR         _parentRecord,
                                    FBContribAssetTrans_BR  _fbContribAssetTrans,
                                    FBContribAssetTable_BR  _fbContribAssetTable)
    {
        FBSpedRecord_BR                         spedRecord;
        MainAccount                             mainAccount;
        DimensionAttributeValue                 costCenter;
        FBContribAssetTransReferencedProcess_BR referencedProcess;

        spedRecord = this.newRecord('F130');                                                                                    // REG
        spedRecord.addFieldNumericFilledWithZeros(enum2int(_fbContribAssetTable.AssetAppropriationMethod), 2);                  // NAT_BC_CRED
        spedRecord.addFieldNumericFilledWithZeros(enum2int(_fbContribAssetTable.AssetCreditGroup), 2);                          // IDENT_BEM_IMOB
        spedRecord.addFieldNumeric(enum2int(_fbContribAssetTable.AssetOrigin));                                                 // IND_ORIG_CRED
        spedRecord.addFieldNumeric(enum2int(_fbContribAssetTable.AssetCreditPurpose));                                          // IND_UTIL_BEM_IMOB
        spedRecord.addFieldString( date2str(_fbContribAssetTable.AssetAcquisitionDate, 123,
                                        DateDay::None,
                                        DateSeparator::None,
                                        DateMonth::Digits2,
                                        DateSeparator::None,
                                        DateYear::Digits4,
                                        DateFlags::None) );                                                                     // MES_OPER_AQUIS

        spedRecord.addFieldNumeric(_fbContribAssetTable.PISTaxBaseAmount, 2);                                                   // VL_OPER_AQUIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.NonTaxableAmount, 2);                                                   // PARC_OPER_NAO_VC_CRED
        spedRecord.addFieldNumeric(_fbContribAssetTable.PISTaxBaseAmount - _fbContribAssetTrans.NonTaxableAmount, 2);           // VL_BC_CRED
        spedRecord.addFieldNumeric(this.getNumberOfInstallmentsIndex(_fbContribAssetTable.Installments));                       // IND_NR_PARC

        spedRecord.addFieldString(_fbContribAssetTrans.PISTaxationCode, 2);                                                     // CST_PIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISInstallmentBaseAmount, 2);                                           // VL_BC_PIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISTaxValue, 4);                                                        // ALIQ_PIS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.PISInstallmentAmount, 2);                                               // VL_PIS

        spedRecord.addFieldString(_fbContribAssetTrans.COFINSTaxationCode, 2);                                                  // CST_COFINS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.COFINSInstallmentBaseAmount, 2);                                        // VL_BC_COFINS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.COFINSTaxValue, 4, 8);                                                  // ALIQ_COFINS
        spedRecord.addFieldNumeric(_fbContribAssetTrans.COFINSInstallmentAmount, 2);                                            // VL_COFINS

        if (_fbContribAssetTable.LedgerDimension)
        {
            mainAccount = MainAccount::findByLedgerDimension(_fbContribAssetTable.LedgerDimension);
            spedFileMainAccount.insertFromMainAccount(mainAccount);

            spedRecord.addFieldString(mainAccount.MainAccountId);                                                               // COD_CTA
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                                         // COD_CTA
        }

        if (_fbContribAssetTable.DefaultDimension)
        {
            costCenter = DimensionAttributeValue::find(_fbContribAssetTable.DefaultDimension);
            spedFileCostCenterDimension.insertFromDimensionAttribute(_fbContribAssetTable.DefaultDimension);

            spedRecord.addFieldString(costCenter.getValue());                                                                   // COD_CCUS
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                                         // COD_CCUS
        }

        spedRecord.addFieldString(strFmt('%1-%2', _fbContribAssetTable.AssetTable, _fbContribAssetTable.AssetName));            // DESC_BEM_IMOB

        this.addChildRecord(_parentRecord, spedRecord);
        isFBlocksEmpty = false;

        // Child record: Referenced process
        while select referencedProcess
            where   referencedProcess.FBContribAssetTrans_BR == _fbContribAssetTrans.RecId
                && (referencedProcess.Agency == Agency_BR::JusticaFederal
                ||  referencedProcess.Agency == Agency_BR::Secex
                ||  referencedProcess.Agency == Agency_BR::Other)
        {
            this.createRecordReferencedProcess(_parentRecord, 'F139', referencedProcess.Agency, referencedProcess.ProcessNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF600</Name>
				<Source><![CDATA[
    private void createRecordF600(  FBSpedRecord_BR         _parentRecord,
                                    FBTaxWithholdTrans_BR   _fbTaxWithholdTrans)
    {
        FBSpedRecord_BR             spedRecord;
        AmountMST                   totalWithholdAmount;

        totalWithholdAmount = _fbTaxWithholdTrans.PisWithholdAmount + _fbTaxWithholdTrans.CofinsWithholdAmount + _fbTaxWithholdTrans.OtherTaxWithholdAmount;

        // Creating record
        spedRecord = this.newRecord('F600');

        // IND_NAT_RET
        if (_fbTaxWithholdTrans.CustWhtContributionType == CustWhtContributionType_BR::Other)
        {
            spedRecord.addFieldNumeric                  (99);
        }
        else
        {
            spedRecord.addFieldNumericFilledWithZeros   (enum2int(_fbTaxWithholdTrans.CustWhtContributionType), 2);
        }

        spedRecord.addFieldDate     (_fbTaxWithholdTrans.TransDate);                // DT_RET
        spedRecord.addFieldNumeric  (_fbTaxWithholdTrans.TaxWithholdBaseAmount, 2); // VL_BC_RET
        spedRecord.addFieldNumeric  (totalWithholdAmount, 2);                        // VL_RET
        spedRecord.addFieldEmpty    ();                                             // COD_REC

        // IND_NAT_REC
        if (fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
        {
            spedRecord.addFieldNumeric(1);
        }
        else
        {
            // NonCumulative and Both
            spedRecord.addFieldNumeric(0);
        }

        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(_fbTaxWithholdTrans.ThirdPartyCNPJCPF), 14);   // CNPJ
        spedRecord.addFieldNumeric  (_fbTaxWithholdTrans.PisWithholdAmount, 2);     // VL_RET_PIS
        spedRecord.addFieldNumeric  (_fbTaxWithholdTrans.CofinsWithholdAmount, 2);  // VL_RET_COFINS

        // IND_DEC
        if (_fbTaxWithholdTrans.CustWhtContributionType == CustWhtContributionType_BR::Cooperative)
        {
            spedRecord.addFieldNumeric(1);
        }
        else
        {
            spedRecord.addFieldNumeric(0);
        }

        this.addChildRecord(_parentRecord, spedRecord);
        isFBlocksEmpty = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF700</Name>
				<Source><![CDATA[
    private void createRecordF700(  FBSpedRecord_BR                     _parentRecord,
                                    TaxType_BR                          _taxType,
                                    FBGeneralAdjustmentTypePISCOFINS_BR _deductionType,
                                    TaxAmount                           _taxBaseAmount,
                                    TaxAmount                           _taxAmount,
                                    CNPJNum_BR                          _deductionCnpj,
                                    FBComplementaryDescription_BR       _complementaryDescription)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('F700');        // REG
        spedRecord.addFieldString('99');            // IND_ORI_DED

        if (_deductionType == FBGeneralAdjustmentTypePISCOFINS_BR::NonCumulativeDeduction)
        {
            spedRecord.addFieldString('0');         // IND_NAT_DED
        }
        else
        {
            spedRecord.addFieldString('1');         // IND_NAT_DED
        }

        if (_taxType == TaxType_BR::PIS)
        {
            spedRecord.addFieldNumeric(_taxAmount, 2);              // VL_DED_PIS
            spedRecord.addFieldNumeric(0, 2);                       // VL_DED_COFINS
        }
        else
        {
            spedRecord.addFieldNumeric(0, 2);                       // VL_DED_PIS
            spedRecord.addFieldNumeric(_taxAmount, 2);              // VL_DED_COFINS
        }

        spedRecord.addFieldNumeric(_taxBaseAmount, 2);              // VL_BC_OPER
        spedRecord.addFieldString(_deductionCnpj, 14);              // CNPJ
        spedRecord.addFieldString(_complementaryDescription, 90);   // INF_COMP

        this.addChildRecord(_parentRecord, spedRecord);
        isFBlocksEmpty = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF800</Name>
				<Source><![CDATA[
    private void createRecordF800(  FBSpedRecord_BR                     _parentRecord,
                                    TaxType_BR                          _taxType,
                                    FBContribTransferEvent_BR           _transferEvent,
                                    TransDate                           _transDate,
                                    CNPJNum_BR                          _cnpj,
                                    FBContribAssessmentPeriod_BR        _assementPeriod,
                                    FBContribCreditTypeCode_BR          _creditTypeCode,
                                    TaxAmount                           _taxAmount,
                                    Percent                             _percent)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('F800');                                        // REG
        spedRecord.addFieldNumericFilledWithZeros(enum2int(_transferEvent), 2);     // IND_NAT_EVEN
        spedRecord.addFieldDate(_transDate);                                        // DT_EVEN
        spedRecord.addFieldString(_cnpj, 14);                                       // CNPJ_SUCED
        spedRecord.addFieldString( date2str(_assementPeriod, 123,
                                            DateDay::None,
                                            DateSeparator::None,
                                            DateMonth::Digits2,
                                            DateSeparator::None,
                                            DateYear::Digits4,
                                            DateFlags::None) );                     // PA_CONT_CRED
        spedRecord.addFieldString(_creditTypeCode, 3);                              // COD_CRED

        if (_taxType == TaxType_BR::PIS)
        {
            spedRecord.addFieldNumeric(_taxAmount, 2);  // VL_CRED_PIS
            spedRecord.addFieldNumeric(0,2);            // VL_CRED_COFINS
        }
        else
        {
            spedRecord.addFieldNumeric(0,2);            // VL_CRED_PIS
            spedRecord.addFieldNumeric(_taxAmount, 2);  // VL_CRED_COFINS
        }

        if (_transferEvent == FBContribTransferEvent_BR::PartialDivision || _transferEvent == FBContribTransferEvent_BR::TotalDivision)
        {
            spedRecord.addFieldNumeric(_percent,2,6);   // PER_CRED_CIS
        }
        else
        {
            spedRecord.addFieldEmpty();                 // PER_CRED_CIS
        }

        this.addChildRecord(_parentRecord, spedRecord);
        isFBlocksEmpty = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordF990</Name>
				<Source><![CDATA[
    private void createRecordF990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('F990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('F') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM001</Name>
				<Source><![CDATA[
    private void createRecordM001()
    {
        FBSpedRecord_BR         spedRecord;

        spedRecord = this.newRecord('M001');

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM100OrM500</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record M100 or M500.
    /// </summary>
    /// <param name = "_recordIdentification">Record identification.</param>
    /// <param name = "_taxType">Type of tax.</param>
    protected void createRecordM100OrM500(FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        TaxType_BR                          _taxType)
    {
        FBTaxAssessment_BR                      fbTaxAssessmentPisCofins;
        FBSpedRecord_BR                         spedRecord;
        FBContribCreditTypeTaxTrans_BR          creditTypeTaxTrans;
        FBTaxAssessmentCalculatorPISCOFINS_BR   calculatorPisCofins;
        AmountMST                               usedCredit, creditAmountWithAdjustments, adjustmentIncreaseAmount, adjustmentDecreaseAmount;
        FBTaxTrans_BR                           fbTaxTransAdjustmentCredit, fbTaxTransAdjustmentCreditReversal;
        FBTaxAssessmentAdjustment_BR            taxAssessmentAdjustment;
        FBGeneralAdjustmentCodePISCOFINS_BR     taxAdjustmentCode;
        FBSpedFileRecordIdentification_BR       childRecordIdentification;
        FBContribCreditType_BR                  fbContribCreditType;

        select fbTaxAssessmentPisCofins
            where   fbTaxAssessmentPisCofins.FBBookingPeriod_BR   == fbBookingPeriod.RecId
                &&  fbTaxAssessmentPisCofins.TaxType              == _taxType;

        calculatorPisCofins = fbTaxAssessmentPisCofins.getCalculator();
        calculatorPisCofins.calculate();
        usedCredit = calculatorPisCofins.getUsedNonCumCreditsFromCurrentPeriod();

        while select sum(TaxBaseAmount), sum(TaxAmount) from creditTypeTaxTrans
            group by CreditType, CreditOrigin, TaxValue
            order by CreditType
            where   creditTypeTaxTrans.FBTaxAssessment_BR       == fbTaxAssessmentPisCofins.RecId
        {
            // Adjustment Credit Increase
            select sum(TaxAmount), sum(TaxBaseAmount) from fbTaxTransAdjustmentCredit
                exists join taxAssessmentAdjustment
                    where   fbTaxTransAdjustmentCredit.FBTaxAssessmentAdjustment_BR  == taxAssessmentAdjustment.RecId
                        &&  fbTaxTransAdjustmentCredit.FBTaxAssessment_BR            == fbTaxAssessmentPisCofins.RecId
                        &&  fbTaxTransAdjustmentCredit.Classification                == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment
                exists join taxAdjustmentCode
                    where   taxAdjustmentCode.RecId             == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                        &&  taxAdjustmentCode.AdjustmentType    != FBGeneralAdjustmentTypePISCOFINS_BR::CreditTransfer
                        &&  taxAdjustmentCode.AdjustmentType    != FBGeneralAdjustmentTypePISCOFINS_BR::AssetCreditAppropriation
                exists join fbContribCreditType
                    where   fbContribCreditType.RecId   == taxAssessmentAdjustment.FBContribCreditType_BR
                        &&  fbContribCreditType.Code    == creditTypeTaxTrans.CreditType;

            // Adjustment Credit Decrease
            select sum(TaxAmount), sum(TaxBaseAmount) from fbTaxTransAdjustmentCreditReversal
                exists join taxAssessmentAdjustment
                    where   fbTaxTransAdjustmentCreditReversal.FBTaxAssessmentAdjustment_BR == taxAssessmentAdjustment.RecId
                    &&      fbTaxTransAdjustmentCreditReversal.FBTaxAssessment_BR           == fbTaxAssessmentPisCofins.RecId
                    &&      fbTaxTransAdjustmentCreditReversal.Classification               == FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment
                exists join taxAdjustmentCode
                    where   taxAdjustmentCode.RecId             == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                        &&  taxAdjustmentCode.AdjustmentType    != FBGeneralAdjustmentTypePISCOFINS_BR::CreditTransfer
                exists join fbContribCreditType
                    where   fbContribCreditType.RecId   == taxAssessmentAdjustment.FBContribCreditType_BR
                        &&  fbContribCreditType.Code    == creditTypeTaxTrans.CreditType;

            if (creditTypeTaxTrans.CreditOrigin == FBContribCreditOrigin_BR::OwnOperation)
            {
                creditAmountWithAdjustments = creditTypeTaxTrans.TaxAmount + fbTaxTransAdjustmentCredit.TaxAmount - fbTaxTransAdjustmentCreditReversal.TaxAmount;
                adjustmentIncreaseAmount    = fbTaxTransAdjustmentCredit.TaxAmount;
                adjustmentDecreaseAmount    = fbTaxTransAdjustmentCreditReversal.TaxAmount;
            }
            else
            {
                creditAmountWithAdjustments = creditTypeTaxTrans.TaxAmount;
                adjustmentIncreaseAmount    = 0;
                adjustmentDecreaseAmount    = 0;
            }

            // Record
            spedRecord = this.newRecord(_recordIdentification);                             // REG
            spedRecord.addFieldString(creditTypeTaxTrans.CreditType);                       // COD_CRED

            if (creditTypeTaxTrans.CreditOrigin == FBContribCreditOrigin_BR::OwnOperation)
            {
                spedRecord.addFieldString('0');                                             // IND_CRED_ORI
                spedRecord.addFieldNumeric(creditTypeTaxTrans.TaxBaseAmount, 2);            // VL_BC_PIS
                spedRecord.addFieldNumeric(creditTypeTaxTrans.TaxValue, 4);                 // ALIQ_PIS
            }
            else
            {
                spedRecord.addFieldString('1');                                             // IND_CRED_ORI
                spedRecord.addFieldEmpty();                                                 // VL_BC_PIS
                spedRecord.addFieldEmpty();                                                 // ALIQ_PIS
            }

            spedRecord.addFieldEmpty();                                                     // QUANT_BC_PIS
            spedRecord.addFieldEmpty();                                                     // ALIQ_PIS_QUANT
            spedRecord.addFieldNumeric(creditTypeTaxTrans.TaxAmount, 2);                    // VL_CRED
            spedRecord.addFieldNumeric(adjustmentIncreaseAmount, 2);                        // VL_AJUS_ACRES
            spedRecord.addFieldNumeric(adjustmentDecreaseAmount, 2);                        // VL_AJUS_REDUC
            spedRecord.addFieldNumeric(0, 2);                                               // VL_CRED_DIF
            spedRecord.addFieldNumeric(creditAmountWithAdjustments, 2);                     // VL_CRED_DISP

            if (creditAmountWithAdjustments > usedCredit)
            {
                // Total credit use
                spedRecord.addFieldString('1');                                             // IND_DESC_CRED
                spedRecord.addFieldNumeric(usedCredit, 2);                                  // VL_CRED_DESC
                spedRecord.addFieldNumeric(creditAmountWithAdjustments - usedCredit, 2);    // SLD_CRED
                usedCredit = 0;
            }
            else
            {
                // Partial credit use
                spedRecord.addFieldString('0');                                             // IND_DESC_CRED
                spedRecord.addFieldNumeric(creditAmountWithAdjustments, 2);                 // VL_CRED_DESC
                spedRecord.addFieldNumeric(0, 2);                                           // SLD_CRED
                usedCredit -= creditAmountWithAdjustments;
            }
            this.addRecord(spedRecord);
            isMBlocksEmpty = false;

            // Child records

            // Credit type by taxation code
            if (_recordIdentification == 'M100')
            {
                this.createRecordM105OrM505(spedRecord, 'M105', fbTaxAssessmentPisCofins.RecId, creditTypeTaxTrans.CreditType, creditTypeTaxTrans.CreditOrigin, creditTypeTaxTrans.TaxValue);
            }
            else
            {
                this.createRecordM105OrM505(spedRecord, 'M505', fbTaxAssessmentPisCofins.RecId, creditTypeTaxTrans.CreditType, creditTypeTaxTrans.CreditOrigin, creditTypeTaxTrans.TaxValue);
            }

            // Adjustments
            // Adjustment Credit Increase
            while select sum(TaxAmount) from fbTaxTransAdjustmentCredit
                group by taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                    taxAssessmentAdjustment.ComplementaryDescription,
                    taxAssessmentAdjustment.TaxAdjustmentProcessNum
                join taxAssessmentAdjustment
                    where   fbTaxTransAdjustmentCredit.FBTaxAssessmentAdjustment_BR  == taxAssessmentAdjustment.RecId
                        &&  fbTaxTransAdjustmentCredit.FBTaxAssessment_BR            == fbTaxAssessmentPisCofins.RecId
                        &&  fbTaxTransAdjustmentCredit.Classification                == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment
                exists join taxAdjustmentCode
                    where   taxAdjustmentCode.RecId             == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                        &&  taxAdjustmentCode.AdjustmentType    != FBGeneralAdjustmentTypePISCOFINS_BR::CreditTransfer
                        &&  taxAdjustmentCode.AdjustmentType    != FBGeneralAdjustmentTypePISCOFINS_BR::AssetCreditAppropriation
                exists join fbContribCreditType
                    where   fbContribCreditType.RecId   == taxAssessmentAdjustment.FBContribCreditType_BR
                        &&  fbContribCreditType.Code    == creditTypeTaxTrans.CreditType
            {
                if (_recordIdentification == 'M100')
                {
                    childRecordIdentification = 'M110';
                }
                else
                {
                    childRecordIdentification = 'M510';
                }

                this.createRecordM110OrM510(spedRecord,
                                            childRecordIdentification,
                                            FBTaxAssessmentClassification_BR::GeneralCreditAdjustment,
                                            taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                                            fbTaxTransAdjustmentCredit.TaxAmount,
                                            taxAssessmentAdjustment.ComplementaryDescription,
                                            taxAssessmentAdjustment.TaxAdjustmentProcessNum);
            }

            // Adjustment Credit Decrease
            while select sum(TaxAmount) from fbTaxTransAdjustmentCreditReversal
                group by taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                    taxAssessmentAdjustment.ComplementaryDescription,
                    taxAssessmentAdjustment.TaxAdjustmentProcessNum
                join taxAssessmentAdjustment
                    where   fbTaxTransAdjustmentCreditReversal.FBTaxAssessmentAdjustment_BR == taxAssessmentAdjustment.RecId
                    &&      fbTaxTransAdjustmentCreditReversal.FBTaxAssessment_BR           == fbTaxAssessmentPisCofins.RecId
                    &&      fbTaxTransAdjustmentCreditReversal.Classification               == FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment
                exists join taxAdjustmentCode
                    where   taxAdjustmentCode.RecId             == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                        &&  taxAdjustmentCode.AdjustmentType    != FBGeneralAdjustmentTypePISCOFINS_BR::CreditTransfer
                exists join fbContribCreditType
                    where   fbContribCreditType.RecId   == taxAssessmentAdjustment.FBContribCreditType_BR
                        &&  fbContribCreditType.Code    == creditTypeTaxTrans.CreditType
            {
                if (_recordIdentification == 'M100')
                {
                    childRecordIdentification = 'M110';
                }
                else
                {
                    childRecordIdentification = 'M510';
                }

                this.createRecordM110OrM510(spedRecord,
                                            childRecordIdentification,
                                            FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment,
                                            taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                                            fbTaxTransAdjustmentCreditReversal.TaxAmount,
                                            taxAssessmentAdjustment.ComplementaryDescription,
                                            taxAssessmentAdjustment.TaxAdjustmentProcessNum);
            }
        }

        this.createRecordM100OrM500ForCreditTransfer(_recordIdentification, _taxType, fbTaxAssessmentPisCofins);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM100OrM500ForCreditTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an empty M100 when a normal M500 will be generated for a specific credit transfer transaction or
    /// created a M500 a normal M100 will be generated.
    /// </summary>
    /// <param name="_recordIdentification">
    /// The record identification, either M100 or M500.
    /// </param>
    /// <param name="_taxType">
    /// The Tax type.
    /// </param>
    /// <param name="_fbTaxAssessmentPisCofins">
    /// The tax assessment.
    /// </param>
    /// <remarks>
    /// This record is created only if the other corresponding tax assessment (Cofins in case of PIS and PIS in case of COFINS)
    /// has a credit transfer transation for a credit type and CNPJ origin, but the actual tax assesment does not.
    /// </remarks>
    private void createRecordM100OrM500ForCreditTransfer(FBSpedFileRecordIdentification_BR   _recordIdentification,
                                                         TaxType_BR                          _taxType,
                                                         FBTaxAssessment_BR                  _fbTaxAssessmentPisCofins)
    {
        FBSpedRecord_BR                         spedRecord;
        FBTaxAssessment_BR                      fbTaxAssessmentPisCofinsOther;
        FBContribCreditTypeTaxTrans_BR          creditTypeTaxTrans, creditTypeTaxTransOther;

        select firstonly RecId from fbTaxAssessmentPisCofinsOther
            where   fbTaxAssessmentPisCofinsOther.FBBookingPeriod_BR    == fbBookingPeriod.RecId
                &&  (fbTaxAssessmentPisCofinsOther.TaxType              == TaxType_BR::PIS
                    || fbTaxAssessmentPisCofinsOther.TaxType            == TaxType_BR::COFINS)
                &&  fbTaxAssessmentPisCofinsOther.TaxType               != _taxType;

        while select RecId from creditTypeTaxTransOther
            group by CreditType
            order by CreditType
            where   creditTypeTaxTransOther.FBTaxAssessment_BR      == fbTaxAssessmentPisCofinsOther.RecId
                &&  creditTypeTaxTransOther.CreditOrigin            == FBContribCreditOrigin_BR::TransferredFromLegalEntity
        notExists join creditTypeTaxTrans
            where   creditTypeTaxTrans.CreditType                   == creditTypeTaxTransOther.CreditType
                &&  creditTypeTaxTrans.CreditOriginCNPJ             == creditTypeTaxTransOther.CreditOriginCNPJ
                &&  creditTypeTaxTrans.CreditOrigin                 == FBContribCreditOrigin_BR::TransferredFromLegalEntity
                &&  creditTypeTaxTrans.FBTaxAssessment_BR           == _fbTaxAssessmentPisCofins.RecId
        {
            // Record
            spedRecord = this.newRecord(_recordIdentification);                             // REG
            spedRecord.addFieldString(creditTypeTaxTransOther.CreditType);                  // COD_CRED

            spedRecord.addFieldString('1');                                                 // IND_CRED_ORI
            spedRecord.addFieldEmpty();                                                     // VL_BC_PIS
            spedRecord.addFieldEmpty();                                                     // ALIQ_PIS
            spedRecord.addFieldEmpty();                                                     // QUANT_BC_PIS
            spedRecord.addFieldEmpty();                                                     // ALIQ_PIS_QUANT
            spedRecord.addFieldNumeric(0, 2);                                               // VL_CRED
            spedRecord.addFieldNumeric(0, 2);                                               // VL_AJUS_ACRES
            spedRecord.addFieldNumeric(0, 2);                                               // VL_AJUS_REDUC
            spedRecord.addFieldNumeric(0, 2);                                               // VL_CRED_DIF
            spedRecord.addFieldNumeric(0, 2);                                               // VL_CRED_DISP

            // If the Total amount equals zero, than the indicator of used credit must also be zero.
            spedRecord.addFieldString('0');                                                 // IND_DESC_CRED
            spedRecord.addFieldNumeric(0, 2);                                               // VL_CRED_DESC
            spedRecord.addFieldNumeric(0, 2);                                               // SLD_CRED

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM105OrM505</Name>
				<Source><![CDATA[
    protected void createRecordM105OrM505(FBSpedRecord_BR                     _parentRecord,
                                          FBSpedFileRecordIdentification_BR   _recordIdentification,
                                          FBTaxAssessmentRecId_BR             _fbTaxAssessmentRecId,
                                          FBContribCreditTypeCode_BR          _creditType,
                                          FBContribCreditOrigin_BR            _creditOrigin,
                                          TaxValue                            _taxValue)
    {
        FBSpedRecord_BR                         spedRecord;
        FBContribCreditTypeTaxTrans_BR          creditTypeTaxTrans;

        while select creditTypeTaxTrans
            where   creditTypeTaxTrans.FBTaxAssessment_BR       == _fbTaxAssessmentRecId
                &&  creditTypeTaxTrans.CreditType               == _creditType
                &&  creditTypeTaxTrans.CreditOrigin             == _creditOrigin
                &&  creditTypeTaxTrans.CreditOriginCNPJ         == ''
                &&  creditTypeTaxTrans.TaxValue                 == _taxValue
        {
            spedRecord = this.newRecord(_recordIdentification);

            spedRecord.addFieldNumericFilledWithZeros(creditTypeTaxTrans.CreditBaseSourceValue, 2); // NAT_BC_CRED
            spedRecord.addFieldString(creditTypeTaxTrans.TaxationCode);                             // CST
            spedRecord.addFieldNumeric(creditTypeTaxTrans.OriginalTaxBaseAmount, 2);                // VL_BC_PIS_TOT
            spedRecord.addFieldNumeric(creditTypeTaxTrans.CumulativeTaxBaseAmount, 2);              // VL_BC_PIS_CUM
            spedRecord.addFieldNumeric(creditTypeTaxTrans.NonCumulativeTaxBaseAmount, 2);           // VL_BC_PIS_NC
            spedRecord.addFieldNumeric(creditTypeTaxTrans.TaxBaseAmount, 2);                        // VL_BC_PIS
            spedRecord.addFieldEmpty();                                                             // QUANT_BC_PIS_TOT
            spedRecord.addFieldEmpty();                                                             // QUANT_BC_PIS
            spedRecord.addFieldEmpty();                                                             // DESC_CRED

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM110OrM510</Name>
				<Source><![CDATA[
    private void createRecordM110OrM510(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessmentClassification_BR    _adjustmentClassification,
                                        FBGeneralAdjustmentCodeRecId_BR     _generalAdjustmentCodeRecId,
                                        TaxAmount                           _taxAmount,
                                        FBComplementaryDescription_BR       _complementaryDescription,
                                        FBTaxAdjustmentProcessNum_BR _taxAdjustmentProcessNum)
    {
        this.createAdjustmentRecord(
            _parentRecord,
            _recordIdentification,
            _adjustmentClassification,
            _generalAdjustmentCodeRecId,
            _taxAmount,
            _complementaryDescription,
            null,
            null,
            _taxAdjustmentProcessNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM200OrM600</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record M200 or M600.
    /// </summary>
    /// <param name = "_recordIdentification">Record identification.</param>
    /// <param name = "_taxType">Type of tax.</param>
    protected void createRecordM200OrM600(FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        TaxType_BR                          _taxType)
    {
        FBTaxAssessment_BR                      fbTaxAssessmentPisCofins;
        FBTaxAssessmentCalculatorPISCOFINS_BR   calculatorPisCofins;
        FBSpedRecord_BR                         spedRecord;

        AmountMST                               balance;

        select fbTaxAssessmentPisCofins
            where   fbTaxAssessmentPisCofins.FBBookingPeriod_BR   == fbBookingPeriod.RecId
                &&  fbTaxAssessmentPisCofins.TaxType              == _taxType;

        calculatorPisCofins = fbTaxAssessmentPisCofins.getCalculator();
        calculatorPisCofins.calculate();

        balance = calculatorPisCofins.getBalanceDue();

        spedRecord = this.newRecord(_recordIdentification);                                             // REG

        // Non cumulative section
        spedRecord.addFieldNumeric(abs(calculatorPisCofins.getDebitsWithAdjustments()),  2);                  // VL_TOT_CONT_NC_PER
        spedRecord.addFieldNumeric(abs(calculatorPisCofins.getUsedNonCumCreditsFromCurrentPeriod()), 2);     // VL_TOT_CRED_DESC
        spedRecord.addFieldNumeric(abs(calculatorPisCofins.getUsedNonCumCreditsFromPreviousPeriod()), 2);    // VL_TOT_CRED_DESC_ANT
        spedRecord.addFieldNumeric(balance, 2);                                                         // VL_TOT_CONT_NC_DEV
        spedRecord.addFieldNumeric(calculatorPisCofins.getUsedNonCumulativeWhtCredit(), 2);             // VL_RET_NC
        spedRecord.addFieldNumeric(calculatorPisCofins.getDeductions(), 2);                             // VL_OUT_DED_NC
        spedRecord.addFieldNumeric(calculatorPisCofins.getNonCumulativeTaxAmountToPay(), 2);            // VL_CONT_NC_REC

        // Cumulative section
        spedRecord.addFieldNumeric(abs(calculatorPisCofins.getCumulativeDebitsWithAdjustments()), 2);        // VL_TOT_CONT_CUM_PER
        spedRecord.addFieldNumeric(calculatorPisCofins.getCumulativeWithholdings(), 2);                 // VL_RET_CUM
        spedRecord.addFieldNumeric(calculatorPisCofins.getCumulativeDeductions(), 2);                   // VL_OUT_DED_CUM
        spedRecord.addFieldNumeric(calculatorPisCofins.getCumulativeTaxAmountToPay(), 2);               // VL_CONT_CUM_REC

        // Balance
        spedRecord.addFieldNumeric(abs(calculatorPisCofins.getNonCumulativeTaxAmountToPay()
                                    +   calculatorPisCofins.getCumulativeTaxAmountToPay()), 2);          // VL_TOT_CONT_REC

        this.addRecord(spedRecord);
        isMBlocksEmpty = false;

        // Child record
        if (_recordIdentification == 'M200')
        {
            this.createRecordM205OrM605(spedRecord, 'M205', fbTaxAssessmentPisCofins);
            this.createRecordM210OrM610(spedRecord, 'M210', fbTaxAssessmentPisCofins);
        }
        else
        {
            this.createRecordM205OrM605(spedRecord, 'M605', fbTaxAssessmentPisCofins);
            this.createRecordM210OrM610(spedRecord, 'M610', fbTaxAssessmentPisCofins);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM205OrM605</Name>
				<Source><![CDATA[
    private void createRecordM205OrM605(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessment_BR                  _fbTaxAssessment)
    {
        FBSpedRecord_BR             spedRecord;
        FBTaxAssessmentPayment_BR   taxAssessmentPayment;

        while select sum(TaxAmountToPay) from taxAssessmentPayment
            group by ContribAssessmentRegimen, RevenueCode
            where   taxAssessmentPayment.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                &&  taxAssessmentPayment.Reversed           == NoYes::No
        {
            spedRecord = this.newRecord(_recordIdentification);                     // REG

            switch (taxAssessmentPayment.ContribAssessmentRegimen)
            {
                case   FBContribAssessmentRegimen_BR::Cumulative :
                    spedRecord.addFieldString('12');                                // NUM_CAMPO
                    break;

                case   FBContribAssessmentRegimen_BR::NonCumulative :
                    spedRecord.addFieldString('08');                                // NUM_CAMPO
                    break;
            }

            spedRecord.addFieldString(taxAssessmentPayment.RevenueCode, 6);         // COD_REC
            spedRecord.addFieldNumeric(taxAssessmentPayment.TaxAmountToPay, 2);     // VL_DEBITO

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM210OrM610</Name>
				<Source><![CDATA[
    private void createRecordM210OrM610(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessment_BR                  _fbTaxAssessment)
    {
        FBTaxTrans_BR                       fbTaxTrans, fbTaxTransContribution, fbTaxTransAdjustmentDebit, fbTaxTransAdjustmentCredit, fbTaxTransBaseAdjDebit, fbTaxTransBaseAdjCredit, fbTaxTransTaxationCode05;
        AmountMST                           amountDebitAdjustment, amountCreditAdjustment;
        FBSpedRecord_BR                     spedRecord;
        str                                 contributionCode;
        FBTaxAssessmentAdjustment_BR        taxAssessmentAdjustmentBaseAdjDebit, taxAssessmentAdjustmentBaseAdjCredit;
        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCodePISCOFINSBaseAdjDebit, generalAdjustmentCodePISCOFINSBaseAdjCredit;

        container applicableClassification = [
            FBTaxAssessmentClassification_BR::DocumentDebit,
            FBTaxAssessmentClassification_BR::CumulativeContribution,
            FBTaxAssessmentClassification_BR::GeneralDebitAdjustment,
            FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment];

        if (!FBDoNotIncludeInvormativeFBTaxTransIntoM210M610_BRFlight::instance().isEnabled())
        {
            applicableClassification += FBTaxAssessmentClassification_BR::Informative;
        }

        while select fbTaxTrans
            group by TaxationCode, TaxValue
            where   fbTaxTrans.FBTaxAssessment_BR   == _fbTaxAssessment.RecId
                && (fbTaxTrans.Classification in applicableClassification
                ||  (this.isVersion134OrMore() && fbTaxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode05))
        {
            select sum(LineAmount), sum(TaxAmount), sum(TaxBaseAmount) from fbTaxTransContribution
                where   fbTaxTransContribution.FBTaxAssessment_BR   == _fbTaxAssessment.RecId
                    &&  fbTaxTransContribution.TaxationCode         == fbTaxTrans.TaxationCode
                    &&  fbTaxTransContribution.TaxValue             == fbTaxTrans.TaxValue
                    &&  (fbTaxTransContribution.Classification      == FBTaxAssessmentClassification_BR::DocumentDebit
                    || fbTaxTransContribution.Classification        == FBTaxAssessmentClassification_BR::CumulativeContribution);

            // Adjustment Increase
            select sum(TaxAmount) from fbTaxTransAdjustmentDebit
                where   fbTaxTransAdjustmentDebit.FBTaxAssessmentAdjustment_BR  != 0
                    &&  fbTaxTransAdjustmentDebit.FBTaxAssessment_BR            == _fbTaxAssessment.RecId
                    &&  fbTaxTransAdjustmentDebit.Classification                == FBTaxAssessmentClassification_BR::GeneralDebitAdjustment
                    &&  fbTaxTransAdjustmentDebit.TaxationCode                  == fbTaxTrans.TaxationCode
                    &&  fbTaxTransAdjustmentDebit.TaxValue                      == fbTaxTrans.TaxValue;

            // Adjustment decrease
            select sum(TaxAmount) from fbTaxTransAdjustmentCredit
                where   fbTaxTransAdjustmentCredit.FBTaxAssessmentAdjustment_BR != 0
                &&      fbTaxTransAdjustmentCredit.FBTaxAssessment_BR           == _fbTaxAssessment.RecId
                &&      fbTaxTransAdjustmentCredit.Classification               == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment
                &&      fbTaxTransAdjustmentCredit.TaxationCode                 == fbTaxTrans.TaxationCode
                &&      fbTaxTransAdjustmentCredit.TaxValue                     == fbTaxTrans.TaxValue;

            select sum(LineAmount) from fbTaxTransTaxationCode05
                where fbTaxTransTaxationCode05.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                    && this.isVersion134OrMore()
                    && fbTaxTransTaxationCode05.TaxationCode == fbTaxTrans.TaxationCode
                    && fbTaxTransTaxationCode05.TaxValue == fbTaxTrans.TaxValue
                    && fbTaxTransTaxationCode05.TaxationCode == FiscalBooksConstants_BR::TaxationCode05
                    && !(fbTaxTransTaxationCode05.Classification in applicableClassification);

            amountDebitAdjustment   = 0;
            amountCreditAdjustment  = 0;
            contributionCode        = this.getPisCofinsContributionCode(_fbTaxAssessment.TaxType, fbTaxTrans.TaxationCode, fbTaxTrans.TaxValue, _fbTaxAssessment.ContribAssessmentRegimen);

            spedRecord = this.newRecord(_recordIdentification);                     // REG
            spedRecord.addFieldString(contributionCode);                            // COD_CONT
            spedRecord.addFieldNumeric(fbTaxTransContribution.LineAmount + fbTaxTransTaxationCode05.LineAmount, 2); // VL_REC_BRT
            spedRecord.addFieldNumeric(fbTaxTransContribution.TaxBaseAmount, 2);    // VL_BC_CONT
            if (fbContribVersion >= FBContribVersion_BR::v5)
            {
                select sum(TaxBaseAmount) from fbTaxTransBaseAdjDebit
                    where fbTaxTransBaseAdjDebit.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                        && fbTaxTransBaseAdjDebit.TaxationCode == fbTaxTrans.TaxationCode
                        && fbTaxTransBaseAdjDebit.TaxValue == fbTaxTrans.TaxValue
                    exists join taxAssessmentAdjustmentBaseAdjDebit
                        where taxAssessmentAdjustmentBaseAdjDebit.RecId == fbTaxTransBaseAdjDebit.FBTaxAssessmentAdjustment_BR
                    exists join generalAdjustmentCodePISCOFINSBaseAdjDebit
                        where generalAdjustmentCodePISCOFINSBaseAdjDebit.RecId == taxAssessmentAdjustmentBaseAdjDebit.FBGeneralAdjustmentCode_BR
                            && generalAdjustmentCodePISCOFINSBaseAdjDebit.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseIncrease;
                
                spedRecord.addFieldNumeric(fbTaxTransBaseAdjDebit.TaxBaseAmount, 2);  // VL_AJUS_ACRES_BC_PIS
                
                select sum(TaxBaseAmount) from fbTaxTransBaseAdjCredit
                    where fbTaxTransBaseAdjCredit.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                        && fbTaxTransBaseAdjCredit.TaxationCode == fbTaxTrans.TaxationCode
                        && fbTaxTransBaseAdjCredit.TaxValue == fbTaxTrans.TaxValue
                    exists join taxAssessmentAdjustmentBaseAdjCredit
                        where taxAssessmentAdjustmentBaseAdjCredit.RecId == fbTaxTransBaseAdjCredit.FBTaxAssessmentAdjustment_BR
                    exists join generalAdjustmentCodePISCOFINSBaseAdjCredit
                        where generalAdjustmentCodePISCOFINSBaseAdjCredit.RecId == taxAssessmentAdjustmentBaseAdjCredit.FBGeneralAdjustmentCode_BR
                            && generalAdjustmentCodePISCOFINSBaseAdjCredit.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseDecrease;
                
                spedRecord.addFieldNumeric(fbTaxTransBaseAdjCredit.TaxBaseAmount, 2); // VL_AJUS_REDUC_BC_PIS
                
                spedRecord.addFieldNumeric(fbTaxTransContribution.TaxBaseAmount +
                                           fbTaxTransBaseAdjDebit.TaxBaseAmount -
                                           fbTaxTransBaseAdjCredit.TaxBaseAmount, 2); // VL_BC_CONT_AJUS
            }
            spedRecord.addFieldNumeric(fbTaxTrans.TaxValue, 4, 8);                  // ALIQ_PIS
            spedRecord.addFieldEmpty();                                             // QUANT_BC_PIS
            spedRecord.addFieldEmpty();                                             // ALIQ_PIS_QUANT
            spedRecord.addFieldNumeric(fbTaxTransContribution.TaxAmount, 2);        // VL_CONT_APUR
            spedRecord.addFieldNumeric(fbTaxTransAdjustmentDebit.TaxAmount, 2);     // VL_AJUS_ACRES
            spedRecord.addFieldNumeric(fbTaxTransAdjustmentCredit.TaxAmount, 2);    // VL_AJUS_REDUC
            spedRecord.addFieldNumeric(0, 2);                                       // VL_CONT_DIFER
            spedRecord.addFieldNumeric(0, 2);                                       // VL_CONT_DIFER_ANT
            spedRecord.addFieldNumeric( abs(fbTaxTransContribution.TaxAmount +
                                        fbTaxTransAdjustmentDebit.TaxAmount -
                                        fbTaxTransAdjustmentCredit.TaxAmount), 2);   // VL_CONT_PER

            this.addChildRecord(_parentRecord, spedRecord);

            // Child record
            if (_recordIdentification == 'M210')
            {
                if (fbContribVersion >= FBContribVersion_BR::v5)
                {
                    this.createRecordM215OrM615(spedRecord,'M215', _fbTaxAssessment, fbTaxTrans.TaxationCode, fbTaxTrans.TaxValue);
                }

                this.createRecordM220OrM620(spedRecord,'M220', _fbTaxAssessment, fbTaxTrans.TaxationCode, fbTaxTrans.TaxValue);
            }
            else
            {
                if (fbContribVersion >= FBContribVersion_BR::v5)
                {
                    this.createRecordM215OrM615(spedRecord,'M615', _fbTaxAssessment, fbTaxTrans.TaxationCode, fbTaxTrans.TaxValue);
                }

                this.createRecordM220OrM620(spedRecord,'M620', _fbTaxAssessment, fbTaxTrans.TaxationCode, fbTaxTrans.TaxValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM215OrM615</Name>
				<Source><![CDATA[
    private void createRecordM215OrM615(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessment_BR                  _fbTaxAssessment,
                                        TaxationCode_BR                     _taxationCode,
                                        TaxValue                            _taxValue)
    {
        FBTaxTrans_BR fbTaxTransBaseAdjustment;
        FBTaxAssessmentAdjustment_BR taxAssessmentAdjustment;
        FBSpedRecord_BR spedRecord;
        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCodePisCofins;

        str formattedCNPJ = this.formatCNPJ(fiscalEstablishmentRoot.CNPJCPFNum_BR);

        while select sum(TaxBaseAmount) from fbTaxTransBaseAdjustment
            group by
                taxAssessmentAdjustment.TaxationCode,
                taxAssessmentAdjustment.TaxValue,
                taxAssessmentAdjustment.TransDate,
                taxAssessmentAdjustment.ComplementaryDescription,
                generalAdjustmentCodePisCofins.Description,
                generalAdjustmentCodePisCofins.SpedAdjustmentCodePISCOFINS,
                taxAssessmentAdjustment.TaxAdjustmentProcessNum,
                taxAssessmentAdjustment.FiscalEstablishmentId,
                generalAdjustmentCodePisCofins.AdjustmentType,
                taxAssessmentAdjustment.BaseAdjMainAccount
            where fbTaxTransBaseAdjustment.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                && fbTaxTransBaseAdjustment.TaxationCode == _taxationCode
                && fbTaxTransBaseAdjustment.TaxValue == _taxValue
            join taxAssessmentAdjustment
                where taxAssessmentAdjustment.RecId == fbTaxTransBaseAdjustment.FBTaxAssessmentAdjustment_BR
            join generalAdjustmentCodePisCofins
                where generalAdjustmentCodePisCofins.RecId == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                    && (generalAdjustmentCodePisCofins.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseIncrease
                        || generalAdjustmentCodePisCofins.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseDecrease)
        {
            spedRecord = this.newRecord(_recordIdentification);

            if (generalAdjustmentCodePisCofins.AdjustmentType == FBGeneralAdjustmentTypePISCOFINS_BR::DebitBaseIncrease)
            {
                spedRecord.addFieldString('1');                                                         // IND_AJ_BC
            }
            else
            {
                spedRecord.addFieldString('0');                                                         // IND_AJ_BC
            }

            spedRecord.addFieldNumeric(fbTaxTransBaseAdjustment.TaxBaseAmount, 2);                      // VL_AJ_BC
            spedRecord.addFieldString(generalAdjustmentCodePisCofins.SpedAdjustmentCodePISCOFINS, 2);   // COD_AJ_BC
            spedRecord.addFieldString(taxAssessmentAdjustment.TaxAdjustmentProcessNum);                 // NUM_DOC
            spedRecord.addFieldString(generalAdjustmentCodePisCofins.Description);                      // DESCR_AJ_BC
            spedRecord.addFieldDate(taxAssessmentAdjustment.TransDate);                                 // DT_REF
            spedFileMainAccount.insertFromMainAccount(MainAccount::findByMainAccountId(taxAssessmentAdjustment.BaseAdjMainAccount));
            spedRecord.addFieldString(spedFileMainAccount.MainAccountId);                               // COD_CTA
            spedRecord.addFieldString(formattedCNPJ);                                                   // CNPJ
            spedRecord.addFieldString(taxAssessmentAdjustment.ComplementaryDescription);                // INFO_COMPL

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM220OrM620</Name>
				<Source><![CDATA[
    private void createRecordM220OrM620(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessment_BR                  _fbTaxAssessment,
                                        TaxationCode_BR                     _taxationCode,
                                        TaxValue                            _taxValue)
    {
        FBTaxTrans_BR                   fbTaxTransAdjustmentDebit, fbTaxTransAdjustmentCredit;
        FBTaxAssessmentAdjustment_BR    taxAssessmentAdjustment;

        // Adjustment Increase
        while select sum(TaxAmount) from fbTaxTransAdjustmentDebit
            group by
                taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                taxAssessmentAdjustment.ComplementaryDescription,
                taxAssessmentAdjustment.TaxationCode,
                taxAssessmentAdjustment.TaxValue,
                taxAssessmentAdjustment.TransDate,
                taxAssessmentAdjustment.ComplementaryDescriptionPISCOFINS,
                fbTaxTransAdjustmentDebit.FinancialLedgerDimension
            join sum(TaxAmount), sum(TaxBaseAmount) from taxAssessmentAdjustment
                where   fbTaxTransAdjustmentDebit.FBTaxAssessmentAdjustment_BR  == taxAssessmentAdjustment.RecId
                    &&  fbTaxTransAdjustmentDebit.FBTaxAssessment_BR            == _fbTaxAssessment.RecId
                    &&  fbTaxTransAdjustmentDebit.Classification                == FBTaxAssessmentClassification_BR::GeneralDebitAdjustment
                    &&  fbTaxTransAdjustmentDebit.TaxationCode                  == _taxationCode
                    &&  fbTaxTransAdjustmentDebit.TaxValue                      == _taxValue
        {
            this.createAdjustmentRecord(_parentRecord,
                                _recordIdentification,
                                FBTaxAssessmentClassification_BR::GeneralDebitAdjustment,
                                taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                                fbTaxTransAdjustmentDebit.TaxAmount,
                                taxAssessmentAdjustment.ComplementaryDescription,
                                taxAssessmentAdjustment,
                                fbTaxTransAdjustmentDebit);
        }

        // Adjustment decrease
        while select sum(TaxAmount) from fbTaxTransAdjustmentCredit
            group by
                taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                taxAssessmentAdjustment.ComplementaryDescription,
                taxAssessmentAdjustment.TaxationCode,
                taxAssessmentAdjustment.TaxValue,
                taxAssessmentAdjustment.TransDate,
                taxAssessmentAdjustment.ComplementaryDescriptionPISCOFINS,
                fbTaxTransAdjustmentCredit.FinancialLedgerDimension
            join sum(TaxAmount), sum(TaxBaseAmount) from taxAssessmentAdjustment
                where   fbTaxTransAdjustmentCredit.FBTaxAssessmentAdjustment_BR == taxAssessmentAdjustment.RecId
                    &&  fbTaxTransAdjustmentCredit.FBTaxAssessment_BR           == _fbTaxAssessment.RecId
                    &&  fbTaxTransAdjustmentCredit.Classification               == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment
                    &&  fbTaxTransAdjustmentCredit.TaxationCode                 == _taxationCode
                    &&  fbTaxTransAdjustmentCredit.TaxValue                     == _taxValue
        {
            this.createAdjustmentRecord(_parentRecord,
                        _recordIdentification,
                        FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment,
                        taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR,
                        fbTaxTransAdjustmentCredit.TaxAmount,
                        taxAssessmentAdjustment.ComplementaryDescription,
                        taxAssessmentAdjustment,
                        fbTaxTransAdjustmentCredit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM400OrM800</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record M400 or M800.
    /// </summary>
    /// <param name = "_recordIdentification">Record identification.</param>
    /// <param name = "_taxType">Type of tax.</param>
    protected void createRecordM400OrM800(FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        TaxType_BR                          _taxType)
    {
        FBTaxTrans_BR           fbTaxTrans, fbTaxTransTypeOfRevenue;
        FBSpedRecord_BR         spedRecord;
        FBTaxAssessment_BR      fbTaxAssessmentPisCofins;

        select firstonly RecId from fbTaxAssessmentPisCofins
            where   fbTaxAssessmentPisCofins.FBBookingPeriod_BR   == fbBookingPeriod.RecId
                &&  fbTaxAssessmentPisCofins.TaxType              == _taxType;

        while select sum(LineAmount), maxOf(FinancialLedgerDimension) from fbTaxTrans
            group by TaxationCode
            where   fbTaxTrans.FBTaxAssessment_BR               == fbTaxAssessmentPisCofins.RecId
                &&  fbTaxTrans.PisCofinsRevenueClassification   != FBPISCofinsRevenueClassification_BR::None
                && !(this.isVersion134OrMore() && fbTaxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode05)
                && (fbTaxTrans.Classification                   == FBTaxAssessmentClassification_BR::CumulativeExempt
                 || fbTaxTrans.Classification                   == FBTaxAssessmentClassification_BR::CumulativeNonRecoverable
                 || fbTaxTrans.Classification                   == FBTaxAssessmentClassification_BR::TaxExempt
                 || fbTaxTrans.Classification                   == FBTaxAssessmentClassification_BR::TaxNonRecoverable)
        {
            spedRecord = this.newRecord(_recordIdentification);         // REG
            spedRecord.addFieldString(fbTaxTrans.TaxationCode, 2);      // CST
            spedRecord.addFieldNumeric(fbTaxTrans.LineAmount, 2);       // VL_TOT_REC

            spedFileMainAccount.insertFromMainAccount(MainAccount::find(MainAccount::findByLedgerDimension(fbTaxTrans.FinancialLedgerDimension).ParentMainAccount));
            spedRecord.addFieldString(spedFileMainAccount.MainAccountId);       // COD_CTA
            spedRecord.addFieldEmpty();                                         // DESC_COMPL

            this.addRecord(spedRecord);
            isMBlocksEmpty = false;

            while select sum(LineAmount), maxOf(FinancialLedgerDimension) from fbTaxTransTypeOfRevenue
                group by RevenueSourcePISCOFINS
                where   fbTaxTransTypeOfRevenue.FBTaxAssessment_BR              == fbTaxAssessmentPisCofins.RecId
                    &&  fbTaxTransTypeOfRevenue.TaxationCode                    == fbTaxTrans.TaxationCode
                    &&  fbTaxTransTypeOfRevenue.PisCofinsRevenueClassification  != FBPISCofinsRevenueClassification_BR::None
                    && (fbTaxTransTypeOfRevenue.Classification                  == FBTaxAssessmentClassification_BR::CumulativeExempt
                     || fbTaxTransTypeOfRevenue.Classification                  == FBTaxAssessmentClassification_BR::CumulativeNonRecoverable
                     || fbTaxTransTypeOfRevenue.Classification                  == FBTaxAssessmentClassification_BR::TaxExempt
                     || fbTaxTransTypeOfRevenue.Classification                  == FBTaxAssessmentClassification_BR::TaxNonRecoverable)
            {
                spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(fbTaxTrans.FinancialLedgerDimension));

                if (_taxType == TaxType_BR::PIS)
                {
                    this.createRecordM410OrM810(spedRecord, 'M410', fbTaxTransTypeOfRevenue.RevenueSourcePISCOFINS, fbTaxTransTypeOfRevenue.LineAmount, spedFileMainAccount.MainAccountId);
                }
                else
                {
                    this.createRecordM410OrM810(spedRecord, 'M810', fbTaxTransTypeOfRevenue.RevenueSourcePISCOFINS, fbTaxTransTypeOfRevenue.LineAmount, spedFileMainAccount.MainAccountId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM410OrM810</Name>
				<Source><![CDATA[
    private void createRecordM410OrM810(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBRevenueSource_BR                  _revenueSource,
                                        AmountMST                           _revenueAmount,
                                        MainAccountNum                      _mainAccountId)
    {
        FBSpedRecord_BR spedRecord = this.newRecord(_recordIdentification); // REG
        spedRecord.addFieldString(_revenueSource, 3);       // NAT_REC
        spedRecord.addFieldNumeric(_revenueAmount, 2);      // VL_REC
        spedRecord.addFieldString(_mainAccountId);          // COD_CTA
        spedRecord.addFieldEmpty();                         // DESC_COMPL

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM990</Name>
				<Source><![CDATA[
    private void createRecordM990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('M990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('M') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordReferencedProcess</Name>
				<Source><![CDATA[
    private void createRecordReferencedProcess( FBSpedRecord_BR                     _parentRecord,
                                                FBSpedFileRecordIdentification_BR   _recordIdentification,
                                                Agency_BR                           _agency,
                                                RefProcessNo_BR                     _processNumber)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord(_recordIdentification);     // REG

        spedRecord.addFieldString(_processNumber, 20);          // NUM_PROC
        spedRecord.addFieldNumeric(enum2int(_agency));          // IND_PROC

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCNPJ</Name>
				<Source><![CDATA[
    private str formatCNPJ(CNPJCPFNum_BR _cnpj)
    {
        return System.Text.RegularExpressions.Regex::Replace(_cnpj,'[^0-9]+','');
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCompanyName</Name>
				<Source><![CDATA[
    private str formatCompanyName(FiscalEstablishmentName_BR _name)
    {
        return System.Text.RegularExpressions.Regex::Replace(_name, @"[^a-zA-Z0-9 /,.-@:&*+_<>()!?'$%]+", '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseAdjustmentAmountByTaxationCode</Name>
				<Source><![CDATA[
    private Amount getBaseAdjustmentAmountByTaxationCode(TaxationCode_BR _taxationCode,
                                                         TaxType_BR _taxType,
                                                         FBGeneralTaxAdjustmentCode_BR _adjustmentCode,
                                                         FBTaxAssessmentAdjustment_BR _taxAssessmentAdjustment)
    {
        FBTaxAssessment_BR fbTaxAssessmentPisCofins;
        FBTaxAssessmentAdjustment_BR fbTaxAssessmentAdjustment;
        FBTaxTrans_BR fbTaxTransAdjustment;
        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCodePISCOFINS;

        select sum(TaxBaseAmount) from fbTaxTransAdjustment
            where fbTaxTransAdjustment.TaxationCode == _taxationCode
            exists join fbTaxAssessmentAdjustment
                where fbTaxAssessmentAdjustment.RecId == fbTaxTransAdjustment.FBTaxAssessmentAdjustment_BR
                    && fbTaxAssessmentAdjustment.TransDate == _taxAssessmentAdjustment.TransDate
                    && fbTaxAssessmentAdjustment.FiscalEstablishmentId == _taxAssessmentAdjustment.FiscalEstablishmentId
                    && fbTaxAssessmentAdjustment.ReceiptNumber == _taxAssessmentAdjustment.ReceiptNumber
            exists join generalAdjustmentCodePISCOFINS
                where generalAdjustmentCodePISCOFINS.RecId == fbTaxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
                    && generalAdjustmentCodePISCOFINS.SpedAdjustmentCodePISCOFINS == _adjustmentCode
            exists join fbTaxAssessmentPisCofins
                where fbTaxAssessmentPisCofins.RecId == fbTaxAssessmentAdjustment.FBTaxAssessment_BR
                    && fbTaxAssessmentPisCofins.TaxType == _taxType
                    && fbTaxAssessmentPisCofins.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        return fbTaxTransAdjustment.TaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerWhtContribTypeForCumulative</Name>
				<Source><![CDATA[
    private str getCustomerWhtContribTypeForCumulative(CustWhtContributionType_BR _custWhtContributionType)
    {
        switch (_custWhtContributionType)
        {
            case CustWhtContributionType_BR::Cooperative:
                return '54';
            case CustWhtContributionType_BR::FederalAgencyAutarchyOrFoundation:
                return '51';
            case CustWhtContributionType_BR::MachineOrVehicleManufacturer:
                return '55';
            case CustWhtContributionType_BR::Other:
                return '59';
            case CustWhtContributionType_BR::OtherFederalAdministrationEntity:
                return '52';
            case CustWhtContributionType_BR::PrivateCompany:
                return '53';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerWhtContribTypeNonCumulative</Name>
				<Source><![CDATA[
    private str getCustomerWhtContribTypeNonCumulative(CustWhtContributionType_BR _custWhtContributionType)
    {
        switch (_custWhtContributionType)
        {
            case CustWhtContributionType_BR::Cooperative:
                return '04';
            case CustWhtContributionType_BR::FederalAgencyAutarchyOrFoundation:
                return '01';
            case CustWhtContributionType_BR::MachineOrVehicleManufacturer:
                return '05';
            case CustWhtContributionType_BR::Other:
                return '99';
            case CustWhtContributionType_BR::OtherFederalAdministrationEntity:
                return '02';
            case CustWhtContributionType_BR::PrivateCompany:
                return '03';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFBReasonIdentification</Name>
				<Source><![CDATA[
    private str getFBReasonIdentification(FBReasonIdentification_BR _fbReasonIdentification)
    {
        str ret;

        switch (_fbReasonIdentification)
        {
            case FBReasonIdentification_BR::ImuneOrIRPJ:
                ret = '01';
                break;
            case FBReasonIdentification_BR::PublicOrOtherFoundations:
                ret = '02';
                break;
            case FBReasonIdentification_BR::Inactive:
                ret = '03';
                break;
            case FBReasonIdentification_BR::LEWithoutRevenueAndCreditOps:
                ret = '04';
                break;
            case FBReasonIdentification_BR::SCP:
                ret = '05';
                break;
            case FBReasonIdentification_BR::CooWithoutRevenueAndCreditOps:
                ret = '06';
                break;
            case FBReasonIdentification_BR::Bookkeeping:
                ret = '07';
                break;
            case FBReasonIdentification_BR::Other:
                ret = '99';
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountId</Name>
				<Source><![CDATA[
    private MainAccountNum getMainAccountId(LedgerDimensionAccount financialLedgerDimension)
    {
        return MainAccount::findByLedgerDimension(financialLedgerDimension).MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfInstallmentsIndex</Name>
				<Source><![CDATA[
    private int getNumberOfInstallmentsIndex(ICMSCreditInstallments_BR _installments)
    {
        int installmentsIndex;

        switch (_installments)
        {
            case 1:
                installmentsIndex = 1;                                                                          // IND_NR_PARC
                break;
            case 12:
                installmentsIndex = 2;                                                                          // IND_NR_PARC
                break;
            case 24:
                installmentsIndex = 3;                                                                          // IND_NR_PARC
                break;
            case 48:
                installmentsIndex = 4;                                                                          // IND_NR_PARC
                break;
            case 6:
                installmentsIndex = 5;                                                                          // IND_NR_PARC
                break;
            default:
                installmentsIndex = 9;                                                                          // IND_NR_PARC
        }

        return installmentsIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodFormatted</Name>
				<Source><![CDATA[
    private str getPeriodFormatted(FBBookingPeriodMonth_BR _periodMonth, FBBookingPeriodYear_BR _periodYear)
    {
        str whtPeriod, whtMonth, whtYear;

        whtMonth    = int2str(_periodMonth);
        whtYear     = int2str(_periodYear);

        if (strLen(whtMonth) < 2)
        {
            whtPeriod = strFmt('0%1%2', whtMonth, whtYear);
        }
        else
        {
            whtPeriod = strFmt('%1%2', whtMonth, whtYear);
        }

        return whtPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPisCofinsContributionCode</Name>
				<Source><![CDATA[
    private str getPisCofinsContributionCode(   TaxType_BR                      _taxType,
                                                TaxationCode_BR                 _taxationCode,
                                                TaxValue                        _taxValue,
                                                FBContribAssessmentRegimen_BR   _contribAssessmentRegimen)
    {
        BrazilParameters brazilParameters = BrazilParameters::find();

        switch (_taxationCode)
        {
            case '01':
                if (    (_taxType == TaxType_BR::PIS &&_taxValue    == BrazilParameters.BasicTaxValuePISNonCumulative)
                    ||  (_taxType == TaxType_BR::COFINS &&_taxValue == brazilParameters.BasicTaxValueCOFINSNonCumulative))
                {
                    return '01';
                }
                else if (    (_taxType == TaxType_BR::PIS &&_taxValue    == BrazilParameters.BasicTaxValuePISCumulative)
                    ||  (_taxType == TaxType_BR::COFINS &&_taxValue == brazilParameters.BasicTaxValueCOFINSCumulative))
                {
                    return '51';
                }
                break;

            case '02':
                if (_contribAssessmentRegimen == FBContribAssessmentRegimen_BR::NonCumulative
                    || _contribAssessmentRegimen == FBContribAssessmentRegimen_BR::Both)
                {
                    return '02';
                }
                else
                {
                    return '52';
                }

            case '03':
                if (_contribAssessmentRegimen == FBContribAssessmentRegimen_BR::NonCumulative
                    || _contribAssessmentRegimen == FBContribAssessmentRegimen_BR::Both)
                {
                    return '03';
                }
                else
                {
                    return '53';
                }

            case '05':
                if (    (_taxType == TaxType_BR::PIS &&_taxValue    == BrazilParameters.BasicTaxValuePISCumulative)
                    ||  (_taxType == TaxType_BR::COFINS &&_taxValue == brazilParameters.BasicTaxValueCOFINSCumulative))
                {
                    return '31';
                }
                else
                {
                    return '32';
                }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryAddressCodeBRA</Name>
				<Source><![CDATA[
    private boolean isCountryAddressCodeBRA(LogisticsPostalAddressRecId _adressId)
    {
        return LogisticsPostalAddress::findRecId(_adressId).CountryRegionId == 'BRA';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBReasonIdentification</Name>
				<Source><![CDATA[
    public FBReasonIdentification_BR parmFBReasonIdentification(FBReasonIdentification_BR _fbReasonIdentification = FBReasonIdentification_BR::None)
    {
        fbReasonIdentification = _fbReasonIdentification;

        return fbReasonIdentification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBSpedContribFileContract</Name>
				<Source><![CDATA[
    public FBSpedContribFileContract_BR parmFBSpedContribFileContract(FBSpedContribFileContract_BR _contract = contract)
    {
        contract = _contract;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FBBookingPeriod_BR _fbBookingPeriod,
        FBFile_BR _file,
        FBSPEDFileType_BR _spedFileType,
        FBContribVersion_BR _fbContribVersion,
        FBContribSituationType_BR _situationType,
        FBReasonIdentification_BR _fbReasonIdentification = FBReasonIdentification_BR::None)
    {
        fbBookingPeriod                   = _fbBookingPeriod;
        fbFile                            = _file;
        spedFileType                      = _spedFileType;
        fbContribVersion                  = _fbContribVersion;
        situationType                     = _situationType;
        spedFile                          = new FBSpedFile_BR();
        listOfFiscalEstablishmentBranches = new List(Types::Record);
        taxAmountsByPeriod                = new Map(Types::Int64, Types::Class);
        taxAmounts18xByPeriod             = new Map(Types::Int64, Types::Class);
        refProcessByPeriod                = new Map(Types::Int64, Types::Class);
        refProcess188ByPeriod             = new Map(Types::Int64, Types::Class);
        fbReasonIdentification            = _fbReasonIdentification;
        isABlocksEmpty                    = true;
        isCBlocksEmpty                    = true;
        isDBlocksEmpty                    = true;
        isFBlocksEmpty                    = true;
        isMBlocksEmpty                    = true;

        super();

        fiscalEstablishmentRoot           = fbBookingPeriod.fiscalEstablishment();

        fiscalOrganization                = FiscalOrganization_BR::findByFiscalEstablishmentId(fiscalEstablishmentRoot.FiscalEstablishmentId, fiscalEstablishmentRoot.dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationTypeF100</Name>
				<Source><![CDATA[
    private FBNonFiscalOperationType_BR operationTypeF100(TaxationCode_BR _taxationCode)
    {
        int taxationCodeValue = str2int(_taxationCode);

        if (taxationCodeValue >= 50 && taxationCodeValue <= 66)
        { 
            return FBNonFiscalOperationType_BR::Credit;
        }

        switch (taxationCodeValue)
        {
            case 1:
            case 2:
            case 3:
            case 5:
                return FBNonFiscalOperationType_BR::Taxable;
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
            case 49:
            case 99:
                return FBNonFiscalOperationType_BR::NonTaxable;
            default:
                return FBNonFiscalOperationType_BR::NonCredit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentTypeA100</Name>
				<Source><![CDATA[
    private str paymentTypeA100(FBPaymentType_BR _paymentType)
    {
        switch (_paymentType)
        {
            case FBPaymentType_BR::Cash:
                return '0';

            case FBPaymentType_BR::Installments:
                return '1';

            case FBPaymentType_BR::Other:
                return '9';

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    protected void populateFileContent()
    {
        this.addFiscalEstablishmentBranches();

        this.calcTaxTransSumInAllBranches();

        this.createBlockA();

        this.createBlockC();

        this.createBlockD();

        this.createBlockF();

        this.createBlockM();

        this.createBlock0();

        this.createBlock1();

        this.createRecord0990();

        this.createBlock9();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FBSpedFileCreator_Contrib_BR</c>.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    ///     The booking period to be used by the class in oder to determine which data should be selected to be exported to the file.
    /// </param>
    /// <param name="_fbFile">
    ///     An instance of <c>FBFile_BR</c> representing the disk file where the data should be written to.
    /// </param>
    /// <param name="_spedFileType">
    ///     A <c>FBSPEDFileType_BR</c> enum element.
    /// </param>
    /// <param name="_fbContribVersion">
    ///     The version of the SPED Contributions file.
    /// </param>
    /// <param name="_situationType">
    ///     A <c>FBContribSituationType_BR</c> enum element.
    /// </param>
    /// <param name="_fbReasonIdentification">
    ///     A <c>FBReasonIdentification_BR</c> enum element.
    /// </param>
    /// <returns>
    ///     The new instance of <c>FBSpedFileCreator_Contrib_BR</c>.
    /// </returns>
    public static FBSpedFileCreator_Contrib_BR construct(FBBookingPeriod_BR _fbBookingPeriod,
        FBFile_BR _fbFile,
        FBSPEDFileType_BR _spedFileType,
        FBContribVersion_BR _fbContribVersion,
        FBContribSituationType_BR _situationType,
        FBReasonIdentification_BR _fbReasonIdentification = FBReasonIdentification_BR::None)
    {
        return new FBSpedFileCreator_Contrib_BR(_fbBookingPeriod, _fbFile, _spedFileType, _fbContribVersion, _situationType, _fbReasonIdentification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimensionByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given Item.
    /// </summary>
    /// <param name="_inventAccountType">
    /// Account type.
    /// </param>
    /// <param name="_itemId">
    /// Id of the item.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static RecId getFinancialDimensionByItemId(InventAccountType _inventAccountType, ItemId _itemId)
    {
        str cacheScopeName = classId2Name(classNum(FBSpedFileCreator_Contrib_BR))+'Cache';
        SysGlobalObjectCache cache = new SysGlobalObjectCache();
        container cachedDimensionCon = cache.find(cacheScopeName, [_inventAccountType, _itemId]);

        if (cachedDimensionCon == conNull())
        {
            LedgerDimensionAccount ledgerDimension =
                InventPosting::itemLedgerDimensionFromParameter(InventPostingItemLedgerDimensionParameters::newFromParameters(_inventAccountType, _itemId));

            cachedDimensionCon = [ledgerDimension];
            cache.insert(cacheScopeName, [_inventAccountType, _itemId], cachedDimensionCon);
        }

        return conPeek(cachedDimensionCon, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateD100CHVCTE</Name>
				<Source><![CDATA[
    private boolean shouldCreateD100CHVCTE(FiscalDocument_BR _fiscalDocument)
    {
        return conFind([FiscalBooksConstants_BR::FiscalDocModel_57, FiscalBooksConstants_BR::FiscalDocModel_63, FiscalBooksConstants_BR::FiscalDocModel_67], _fiscalDocument.Model);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateD100TPCTe</Name>
				<Source><![CDATA[
    private boolean shouldCreateD100TPCTe(FiscalDocument_BR _fiscalDocument)
    {
        return conFind([FiscalBooksConstants_BR::FiscalDocModel_57, FiscalBooksConstants_BR::FiscalDocModel_67], _fiscalDocument.Model);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM225OrM625</Name>
				<Source><![CDATA[
    private void createRecordM225OrM625(FBSpedRecord_BR                     _parentRecord,
                                        FBSpedFileRecordIdentification_BR   _recordIdentification,
                                        FBTaxAssessmentAdjustment_BR        _taxAdjustmentPisCofins,
                                        FBTaxTrans_BR                       _fbTaxTrans)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord(_recordIdentification);                                     // 01   REG
        spedRecord.addFieldNumeric(_taxAdjustmentPisCofins.TaxAmount, 2);                       // 02   DET_VALOR_AJ
        spedRecord.addFieldString(_taxAdjustmentPisCofins.TaxationCode, 2);                     // 03   CST
        spedRecord.addFieldNumeric(_taxAdjustmentPisCofins.TaxBaseAmount, 2);                   // 04   DET_BC_CRED
        spedRecord.addFieldNumeric(_taxAdjustmentPisCofins.TaxValue, 4, 8);                     // 05   DET_ALIQ
        spedRecord.addFieldDate(_taxAdjustmentPisCofins.TransDate);                             // 06   DT_OPER_AJ
        spedRecord.addFieldString(_taxAdjustmentPisCofins.ComplementaryDescription);            // 07   DESC_AJ
        spedFileMainAccount.insertFromMainAccount(MainAccount::findByLedgerDimension(_fbTaxTrans.FinancialLedgerDimension));
        spedRecord.addFieldString(spedFileMainAccount.MainAccountId);                           // 08   COD_CTA
        spedRecord.addFieldString(_taxAdjustmentPisCofins.ComplementaryDescriptionPISCOFINS);   // 09   INFO_COMPL

        this.addChildRecord(_parentRecord, spedRecord);

    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordM115OrM515</Name>
				<Source><![CDATA[
    private void createRecordM115OrM515(
        FBSpedRecord_BR _parentRecord,
        FBSpedFileRecordIdentification_BR _recordIdentification,
        FBTaxAssessmentClassification_BR _adjustmentClassification,
        FBComplementaryDescription_BR _complementaryDescription,
        FBTaxAdjustmentProcessNum_BR _taxAdjustmentProcessNum)
    {
        FBContribCreditTypeTaxTrans_BR creditTypeTaxTrans;
        FBTaxAssessmentAdjustment_BR taxAssessmentAdjustment;
        FBSpedRecord_BR spedRecord;

        TaxType_BR taxType = _recordIdentification == 'M115' ? TaxType_BR::PIS : TaxType_BR::COFINS;

        RefRecId fbTaxAssessmentPisCofinsRecId =
            (select firstonly RecId
                from FBTaxAssessment_BR
                where FBTaxAssessment_BR.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && FBTaxAssessment_BR.TaxType == taxType).RecId;

        while select CreditType from creditTypeTaxTrans
            group by CreditType
            order by CreditType
            where creditTypeTaxTrans.FBTaxAssessment_BR == fbTaxAssessmentPisCofinsRecId
        {
            Query queryAsAj = new Query();

            QueryBuildDataSource qbdsAsAj = queryAsAj.addDataSource(tableNum(FBTaxAssessmentAdjustment_BR));
            findOrCreateRange_W(qbdsAsAj, fieldNum(FBTaxAssessmentAdjustment_BR, ComplementaryDescription), queryValue(_complementaryDescription));
            findOrCreateRange_W(qbdsAsAj, fieldNum(FBTaxAssessmentAdjustment_BR, TaxAdjustmentProcessNum), queryValue(_taxAdjustmentProcessNum));
            QueryBuildDataSource qbdsAjCr = qbdsAsAj.addDataSource(tableNum(FBTaxTrans_BR));
            qbdsAjCr.relations(true);
            qbdsAjCr.joinMode(JoinMode::ExistsJoin);
            findOrCreateRange_W(qbdsAjCr, fieldNum(FBTaxTrans_BR, FBTaxAssessment_BR), queryValue(fbTaxAssessmentPisCofinsRecId));
            findOrCreateRange_W(qbdsAjCr, fieldNum(FBTaxTrans_BR, Classification), queryValue(_adjustmentClassification));
            QueryBuildDataSource qbdsAjCode = qbdsAsAj.addDataSource(tableNum(FBGeneralAdjustmentCodePISCOFINS_BR));
            qbdsAjCode.relations(false);
            qbdsAjCode.joinMode(JoinMode::ExistsJoin);
            qbdsAjCode.addLink(fieldNum(FBTaxAssessmentAdjustment_BR, FBGeneralAdjustmentCode_BR), fieldNum(FBGeneralAdjustmentCodePISCOFINS_BR, RecId));
            qbdsAjCode.addRange(fieldNum(FBGeneralAdjustmentCodePISCOFINS_BR, AdjustmentType)).value(
                strFmt('!%1', enum2Str(FBGeneralAdjustmentTypePISCOFINS_BR::CreditTransfer)));
            if (_adjustmentClassification == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment)
            {
                qbdsAjCode.addRange(fieldNum(FBGeneralAdjustmentCodePISCOFINS_BR, AdjustmentType)).value(
                    strFmt('!%1', enum2Str(FBGeneralAdjustmentTypePISCOFINS_BR::AssetCreditAppropriation)));
            }
            QueryBuildDataSource qbdsCrType = qbdsAsAj.addDataSource(tableNum(FBContribCreditType_BR));
            qbdsCrType.relations(true);
            qbdsCrType.joinMode(JoinMode::ExistsJoin);
            findOrCreateRange_W(qbdsCrType, fieldNum(FBContribCreditType_BR, Code), queryValue(creditTypeTaxTrans.CreditType));

            QueryRun queryRunAsAj = new QueryRun(queryAsAj);
            while (queryRunAsAj.next())
            {
                taxAssessmentAdjustment = queryRunAsAj.get(tablenum(FBTaxAssessmentAdjustment_BR));

                spedRecord = this.newRecord(_recordIdentification); // 01   REG
                spedRecord.addFieldNumeric(taxAssessmentAdjustment.TaxAmount, 2); // 02   DET_VALOR_AJ
                spedRecord.addFieldString(taxAssessmentAdjustment.TaxationCode, 2); // 03   CST_PIS
                spedRecord.addFieldNumeric(taxAssessmentAdjustment.TaxBaseAmount, 2); // 04   DET_BC_CRED
                spedRecord.addFieldNumeric(taxAssessmentAdjustment.TaxValue, 4, 8); // 05   DET_ALIQ
                spedRecord.addFieldDate(taxAssessmentAdjustment.TransDate); // 06   DT_OPER_AJ
                spedRecord.addFieldString(taxAssessmentAdjustment.ComplementaryDescription); // 07   DESC_AJ
                if (_adjustmentClassification == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment)
                {
                    spedFileMainAccount.insertFromMainAccount(LedgerJournalTrans::findRecId(taxAssessmentAdjustment.LedgerJournalTrans, false)
                        .findMainAccountForOffset());
                }
                else
                {
                    spedFileMainAccount.insertFromMainAccount(LedgerJournalTrans::findRecId(taxAssessmentAdjustment.LedgerJournalTrans, false)
                        .findMainAccount());
                }
                spedRecord.addFieldString(spedFileMainAccount.MainAccountId); // 08   COD_CTA
                spedRecord.addFieldString(taxAssessmentAdjustment.ComplementaryDescriptionPISCOFINS); // 09   INFO_COMPL

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersion134OrMore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determination applied version 1.34 of the report by booking period.
    /// </summary>
    /// <returns>true if booking period >= April 2021; otherwise, false.</returns>
    private boolean isVersion134OrMore()
    {
        return (fbBookingPeriod.PeriodYear > 2021 || (fbBookingPeriod.PeriodYear == 2021 && fbBookingPeriod.PeriodMonth >= MonthsOfYear::April));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>