<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailLabelDP</c> class used to process the SSRS report.
/// </summary>
[
    SRSReportQueryAttribute     (querystr(RetailLabel))
]
class RetailLabelDP extends SRSReportDataProviderBase
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    RetailLabelTmp  tmpTable;
    Integer         columnNumber;
    //<GEERU>
    #ISOCountryRegionCodes
    boolean         countryRegionRU;
    Name            companyName;
    Addressing      companyAddress;
    Map             storeAddressesMap;
    LanguageId      systemLanguageId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barCodeStr</Name>
				<Source><![CDATA[
    private BarCodeString barCodeStr(ItemBarCode _itemBarCode)
    {
        BarcodeSetup        tBarcodeSetup;
        InventItemBarcode   tInventItemBarcode;
        Barcode             cBarcode;
        str                 barcodeString;

        tInventItemBarcode  = InventItemBarcode::findRetailBarcode(_itemBarCode);
        tBarcodeSetup       = BarcodeSetup::find(tInventItemBarcode.barcodeSetupId);
        barcodeString       = tInventItemBarcode.itemBarCode;

        switch (tBarcodeSetup.barcodeType)
        {
            case    BarcodeType::Code128    :
                break;
            case    BarcodeType::Code39     :
                break;
            case    BarcodeType::EAN128     :
                break;
            case    BarcodeType::EAN13      :
                barcodeString = substr(tInventItemBarcode.itemBarCode, 0, 12);
                break;
            case    BarcodeType::EAN8       :
                barcodeString = substr(tInventItemBarcode.itemBarCode, 0, 7);
                break;
            case    BarcodeType::Interleaved2of5    :
                break;
            case    BarcodeType::NoBarcode  :
                break;
            case    BarcodeType::UPCA       :
                barcodeString = substr(tInventItemBarcode.itemBarCode, 0, 11);
                break;
            case    BarcodeType::UPCE       :
                break;
        }

        cBarcode = Barcode::construct(tBarcodeSetup.barcodeType);

        if (cBarcode.validateBarcode(barcodeString))
        {
            cBarcode.string(true, barcodeString, BarcodeContentType::Item);
            cBarcode.encode();

            eventSource.EventWriteReportingRetailLabelDPSuccess(classId2Name(ClassIdGet(this)), funcName());
        }
        else
        {
            eventSource.EventWriteReportingRetailLabelDPError(classId2Name(ClassIdGet(this)), funcName());
            // When a barcode is not valid, an error should be thrown here
            throw(error(strfmt("@RET5019", barcodeString)));
        }

        return cBarcode.barcodeStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparisonCode</Name>
				<Source><![CDATA[
    private str comparisonCode(ItemId _itemId, RetailLabelPrice _compLabelPrice)
    {
        if ( (RetailInventTable::find(_itemId).baseComparisonUnitCode != "") && (_compLabelPrice != 0))
        {
            return strFmt("%1%2", "@RET5007", RetailInventTable::find(_itemId).baseComparisonUnitCode);
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBarcodeSetup</Name>
				<Source><![CDATA[
    private BarcodeSetup getBarcodeSetup(ItemBarCode _itemBarCode)
    {
        InventItemBarcode   barcodeTable;
        BarcodeSetup        barcodeSetup;

        barcodeTable = InventItemBarcode::findRetailBarcode(_itemBarCode);

        if (barcodeTable.barcodeSetupId)
        {
            barcodeSetup = BarcodeSetup::find(barcodeTable.barcodeSetupId);
        }

        return barcodeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailLabelTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the record selected in the <c>RetailLabelTmp</c> table.
    /// </summary>
    /// <returns>
    /// The record selected in the <c>RetailLabelTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(RetailLabelTmp))]
    public RetailLabelTmp getRetailLabelTmp()
    {
        select * from tmpTable;
        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailLabelTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record buffer of <c>RetailLabelTmp</c> temporary table.
    /// </summary>
    /// <param name = "_table">
    /// The record buffer of <c>RetailInventItemLabel</c> table.
    /// </param>
    /// <param name = "_tmpTable">
    /// The record buffer of <c>RetailLabelTmp</c> temporary table.
    /// </param>
    /// <returns>
    /// Returns the record buffer of <c>RetailLabelTmp</c> temporary table with initialized values.
    /// </returns>
    protected RetailLabelTmp initRetailLabelTmp(RetailInventItemLabel _table, RetailLabelTmp _tmpTable)
    {
        BarcodeSetup barcodeSetup;

        _tmpTable.Text1             = _table.Text1;
        _tmpTable.Text2             = _table.Text2;
        _tmpTable.VariantId         = _table.VariantId;
        _tmpTable.ItemId            = _table.ItemId;
        _tmpTable.ItemBarCode       = this.barCodeStr(_table.ItemBarCode);
        _tmpTable.UnitID            = _table.UnitID;
        _tmpTable.PriceNoDecimals   = this.priceNoDecimals(_table.Price);
        _tmpTable.PriceDecimals     = this.priceDecimals(_table.Price);
        _tmpTable.CompLabelPrice    = _table.CompLabelPrice;
        _tmpTable.ComparisonCode    = this.comparisonCode(_table.ItemId, _table.CompLabelPrice);
        barcodeSetup                = this.getBarcodeSetup(_table.ItemBarCode);
        _tmpTable.Font              = barcodeSetup.fontName;
        _tmpTable.FontSize          = barcodeSetup.fontSize;
        _tmpTable.StoreName         = RetailStoreTable::find(_table.StoreId).name();
        _tmpTable.ItemBarCodeNum    = _table.ItemBarCode;

        return _tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    private void insertTmpTable(RetailInventItemLabel _table)
    {
        int qty;
        RetailInventItemLabel   retailLabel;
        //<GEERU>
        RetailInventTable       retailInventTable;
        InventTable             inventTable;
        LanguageId              storeLanguage;
        //</GEERU>

        tmpTable.clear();
        if (columnNumber > 3)
        {
            columnNumber = 1;
        }

        tmpTable = this.initRetailLabelTmp(_table, tmpTable);

        retailInventTable = RetailInventTable::find(tmpTable.ItemId);

        if (retailInventTable)
        {
            inventTable = InventTable::find(tmpTable.ItemId);

            [storeLanguage, tmpTable.StoreAddress]   = this.getStoreInfo(_table.StoreId);

            tmpTable.CompanyName    = companyName;
            tmpTable.CompanyAddress = companyAddress;
            tmpTable.ValidOnDate    = _table.ValidOnDate;

            //<GEERU>
            if (countryRegionRU)
            {
                this.fillAttributeFields(inventTable, retailInventTable, storeLanguage);
            }
            //</GEERU>

            this.fillInventDimFields(inventTable, storeLanguage);
        }

        for (qty = 1; qty <= _table.Qty; qty++)
        {
            tmpTable.ColumnNumber = columnNumber;
            tmpTable.insert();
            columnNumber++;

            if (columnNumber > 3)
            {
                columnNumber = 1;
            }
        }

        eventSource.EventWriteReportingGenericMessage(classId2Name(ClassIdGet(this)), funcName(), strFmt('Records inserted into table: %1', tableStr(RetailLabelTmp)));

        ttsBegin;
        select forUpdate firstOnly retailLabel where retailLabel.RecId == _table.RecId;

        if (retailLabel)
        {
            retailLabel.Printed = true;
            retailLabel.update();
        }
        else
        {
            eventSource.EventWriteReportingGenericMessage(classId2Name(ClassIdGet(this)), funcName(), strFmt('Field Printed is unmarked into table: %1', tableStr(RetailInventItemLabel)));
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDecimals</Name>
				<Source><![CDATA[
    private str priceDecimals(RetailLabelPrice _price)
    {
        str s;
        int i;

        s = num2str(_price, 2, 2, 2, 0);
        i = strfind(s, @",", 1, 20);
        s = substr(s, i + 1, 2);

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceNoDecimals</Name>
				<Source><![CDATA[
    private str priceNoDecimals(RetailLabelPrice _price)
    {
        str s;
        int i;

        s = num2str(_price, 2, 2, 2, 0);
        i = strfind(s, @",", 1, 20);
        s = substr(s, 1, i - 1);

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query           query    = this.parmQuery();
        QueryRun        queryRun = new QueryRun(query);
        Common          cursor;
        //<GEERU>
        CompanyInfo companyInfo;
        //</GEERU>

        //<GEERU>
        countryRegionRU     = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        systemLanguageId    = SystemParameters::getSystemLanguageId();
        storeAddressesMap   = new Map(Types::String, Types::Container);
        if (countryRegionRU)
        {
            companyInfo     = CompanyInfo::find();
            companyName     = companyInfo.Name;
            companyAddress  = companyInfo.primaryAddress();
        }
        //</GEERU>
        super();
        columnNumber = 1;
        while (queryRun.next())
        {
            cursor                  = queryRun.get(tablenum(RetailInventItemLabel));
            this.insertTmpTable(cursor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAttributeFields</Name>
				<Source><![CDATA[
    private void fillAttributeFields(InventTable _inventTable, RetailInventTable _retailInventTable, LanguageId _languageId)
    {
        if (_inventTable && _retailInventTable)
        {
            [tmpTable.Attribute1Name, tmpTable.Attribute1FriendlyName, tmpTable.Attribute1Value, tmpTable.Attribute1UnitId, tmpTable.Attribute1CurrencyCode]
                = this.getAttributeInfo(_inventTable, _retailInventTable.LabelAttribute1, _languageId);
            [tmpTable.Attribute2Name, tmpTable.Attribute2FriendlyName, tmpTable.Attribute2Value, tmpTable.Attribute2UnitId, tmpTable.Attribute2CurrencyCode]
                = this.getAttributeInfo(_inventTable, _retailInventTable.LabelAttribute2, _languageId);
            [tmpTable.Attribute3Name, tmpTable.Attribute3FriendlyName, tmpTable.Attribute3Value, tmpTable.Attribute3UnitId, tmpTable.Attribute3CurrencyCode]
                = this.getAttributeInfo(_inventTable, _retailInventTable.LabelAttribute3, _languageId);
            [tmpTable.Attribute4Name, tmpTable.Attribute4FriendlyName, tmpTable.Attribute4Value, tmpTable.Attribute4UnitId, tmpTable.Attribute4CurrencyCode]
                = this.getAttributeInfo(_inventTable, _retailInventTable.LabelAttribute4, _languageId);
            [tmpTable.Attribute5Name, tmpTable.Attribute5FriendlyName, tmpTable.Attribute5Value, tmpTable.Attribute5UnitId, tmpTable.Attribute5CurrencyCode]
                = this.getAttributeInfo(_inventTable, _retailInventTable.LabelAttribute5, _languageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInventDimFields</Name>
				<Source><![CDATA[
    private void fillInventDimFields(InventTable _inventTable, LanguageId _languageId)
    {
        InventDimCombination    inventDimCombination;
        InventDim               inventDim;

        if (tmpTable.VariantId && _inventTable)
        {
            inventDimCombination = InventDimCombination::findVariantId(tmpTable.VariantId);
            if (inventDimCombination)
            {
                inventDim = inventDimCombination.inventDim();

                if (inventDim.configId)
                {
                    tmpTable.ConfigurationLabel = SysLabel::labelId2String(literalStr("@SYS14011"), _languageId);
                    tmpTable.ConfigurationId    = inventDim.configId;
                    tmpTable.ConfigurationName  = this.findConfigurationName(_inventTable.Product, inventDim, _languageId);
                }

                if (inventDim.InventSizeId)
                {
                    tmpTable.SizeLabel  = SysLabel::labelId2String(literalStr("@SYS73727"), _languageId);
                    tmpTable.SizeId     = inventDim.InventSizeId;
                    tmpTable.SizeName   = this.findSizeName(_inventTable.Product, inventDim, _languageId);
                }

                if (inventDim.InventColorId)
                {
                    tmpTable.ColorLabel = SysLabel::labelId2String(literalStr("@SYS73726"), _languageId);
                    tmpTable.ColorId    = inventDim.InventColorId;
                    tmpTable.ColorName  = this.findColorName(_inventTable.Product, inventDim, _languageId);
                }

                if (inventDim.InventStyleId)
                {
                    tmpTable.StyleLabel = SysLabel::labelId2String(literalStr("@FPK270000"), _languageId);
                    tmpTable.StyleId    = inventDim.InventStyleId;
                    tmpTable.StyleName  = this.findStyleName(_inventTable.Product, inventDim, _languageId);
                }
		
		        if (inventDim.InventVersionId)
                {
                    tmpTable.VersionLabel = SysLabel::labelId2String(literalStr("@SCM:Version"), _languageId);
                    tmpTable.VersionId    = inventDim.InventVersionId;
                    tmpTable.VersionName  = this.findVersionName(_inventTable.Product, inventDim, _languageId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findColorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds color name for particular product and language.
    /// </summary>
    /// <param name="_product">
    /// Product Id.
    /// </param>
    /// <param name="_inventDim">
    /// InventDim table with specified color.
    /// </param>
    /// <param name="_languageId">
    /// Language Id.
    /// </param>
    /// <returns>
    /// Color name in specified language.
    /// </returns>
    protected Name findColorName(
            EcoResProductRecId      _product,
            InventDim               _inventDim,
            LanguageId              _languageId)
    {
        EcoResProductMasterColor ecoResProductMasterColor;
        EcoResColor              ecoResColor;
        Name                     result;

        ecoResColor = EcoResColor::findByName(_inventDim.InventColorId);
        ecoResProductMasterColor = EcoResProductMasterColor::find(
            _product,
            EcoResColor.RecId);

        result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterColor.RecId, _languageId);
        if (!result)
        {
            result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterColor.RecId, systemLanguageId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConfigurationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds configuration name for particular product and language.
    /// </summary>
    /// <param name="_product">
    /// Product Id.
    /// </param>
    /// <param name="_inventDim">
    /// InventDim table with specified configuration.
    /// </param>
    /// <param name="_languageId">
    /// Language Id.
    /// </param>
    /// <returns>
    /// Configuration name in specified language.
    /// </returns>
    private Name findConfigurationName(
            EcoResProductRecId      _product,
            InventDim               _inventDim,
            LanguageId              _languageId)
    {
        EcoResProductMasterConfiguration    ecoResProductMasterConfiguration;
        EcoResConfiguration                 ecoResConfiguration;
        Name                                result;

        ecoResConfiguration = EcoResConfiguration::findByName(_inventDim.configId);
        ecoResProductMasterConfiguration = EcoResProductMasterConfiguration::find(
            _product,
            ecoResConfiguration.RecId);

        result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterConfiguration.RecId, _languageId);
        if (!result)
        {
            result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterConfiguration.RecId, systemLanguageId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSizeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds size name for particular product and language.
    /// </summary>
    /// <param name="_product">
    /// Product Id.
    /// </param>
    /// <param name="_inventDim">
    /// InventDim table with specified size.
    /// </param>
    /// <param name="_languageId">
    /// Language Id.
    /// </param>
    /// <returns>
    /// Size name in specified language.
    /// </returns>
    protected Name findSizeName(
            EcoResProductRecId      _product,
            InventDim               _inventDim,
            LanguageId              _languageId)
    {
        EcoResProductMasterSize ecoResProductMasterSize;
        EcoResSize              ecoResSize;
        Name                    result;

        ecoResSize = EcoResSize::findByName(_inventDim.InventSizeId);
        ecoResProductMasterSize = EcoResProductMasterSize::find(
            _product,
            EcoResSize.RecId);

        result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterSize.RecId, _languageId);
        if (!result)
        {
            result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterSize.RecId, systemLanguageId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStyleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds style name for particular product and language.
    /// </summary>
    /// <param name="_product">
    /// Product Id.
    /// </param>
    /// <param name="_inventDim">
    /// InventDim table with specified style.
    /// </param>
    /// <param name="_languageId">
    /// Language Id.
    /// </param>
    /// <returns>
    /// Style name in specified language.
    /// </returns>
    protected Name findStyleName(
            EcoResProductRecId      _product,
            InventDim               _inventDim,
            LanguageId              _languageId)
    {
        EcoResProductMasterStyle ecoResProductMasterStyle;
        EcoResStyle              ecoResStyle;
        Name                     result;

        ecoResStyle = EcoResStyle::findByName(_inventDim.InventStyleId);
        ecoResProductMasterStyle = EcoResProductMasterStyle::find(
            _product,
            EcoResStyle.RecId);

        result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterStyle.RecId, _languageId);
        if (!result)
        {
            result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterStyle.RecId, systemLanguageId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVersionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds version name for particular product and language.
    /// </summary>
    /// <param name="_product">
    /// Product Id.
    /// </param>
    /// <param name="_inventDim">
    /// InventDim table with specified version.
    /// </param>
    /// <param name="_languageId">
    /// Language Id.
    /// </param>
    /// <returns>
    /// Version name in specified language.
    /// </returns>
    protected Name findVersionName(
            EcoResProductRecId      _product,
            InventDim               _inventDim,
            LanguageId              _languageId)
    {
        EcoResProductMasterVersion ecoResProductMasterVersion;
        EcoResVersion              ecoResVersion;
        Name                       result;

        ecoResVersion = EcoResVersion::findByName(_inventDim.InventVersionId);
        ecoResProductMasterVersion = EcoResProductMasterVersion::find(
            _product,
            EcoResVersion.RecId);

        result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterVersion.RecId, _languageId);
        if (!result)
        {
            result = EcoResProductMasterDimValueTranslation::getNameOrDefaultName(ecoResProductMasterVersion.RecId, systemLanguageId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeInfo</Name>
				<Source><![CDATA[
    private container getAttributeInfo(InventTable _inventTable, RefRecId _attribute, LanguageId _language)
    {
        EcoResAttribute             ecoResAttribute;
        EcoResProductAttributeValue ecoResProdAttrValue;
        EcoResValue                 ecoResValue;
        EcoResAttributeTranslation  ecoResAttrTranslation;
        AttributeValueText          attrValue;
        UnitOfMeasureSymbol         attrUOM;
        CurrencyCode                attrCurrencyCode;

        container getValue()
        {
            EcoResCurrencyValue         ecoResCurrencyValue;

            if (ecoResValue)
            {
                switch (ecoResValue.getInstanceRelationType())
                {
                    case tableStr(EcoResCurrencyValue):
                        ecoResCurrencyValue = (ecoResValue as EcoResCurrencyValue);
                        return [strFmt('%1', ecoResCurrencyValue.CurrencyValue), '', ecoResCurrencyValue.CurrencyCode];
                    default:
                        return [ecoResValue.getValueAsText(_language), ecoResValue.unitOfMeasure(ecoResValue), ''];
                }
            }

            return ['','',''];
        }

        if (_attribute && _inventTable)
        {
            ecoResAttribute = EcoResAttribute::find(_attribute);
            if (ecoResAttribute)
            {
                select firstonly Product, Attribute from ecoResProdAttrValue
                    where ecoResProdAttrValue.Attribute == _attribute
                        && ecoResProdAttrValue.Product == _inventTable.Product
                    join ecoResValue
                        where ecoResValue.RecId == ecoResProdAttrValue.Value;

                ecoResAttrTranslation = EcoResAttributeTranslation::findByAttributeAndLanguage(_attribute, _language);
                if (!ecoResAttrTranslation)
                {
                    ecoResAttrTranslation = EcoResAttributeTranslation::findByAttributeAndLanguage(_attribute, systemLanguageId);
                }

                [attrValue, attrUOM, attrCurrencyCode] = getValue();
            }
        }

        return [ecoResAttribute.Name, ecoResAttrTranslation.FriendlyName, attrValue, attrUOM, attrCurrencyCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoreInfo</Name>
				<Source><![CDATA[
    private container getStoreInfo(RetailStoreId _storeId)
    {
        RetailStoreTable    storeTable;
        OMOperatingUnit     omOperatingUnit;
        container           result;

        if (storeAddressesMap.exists(_storeId))
        {
            result = storeAddressesMap.lookup(_storeId);
        }
        else
        {
            storeTable    = RetailStoreTable::find(_storeId);
            omOperatingUnit = OMOperatingUnit::find(storeTable.OMOperatingUnitID, OMOperatingUnitType::RetailChannel);
            result = [storeTable.cultureName, omOperatingUnit.primaryAddress()];
            storeAddressesMap.insert(_storeId, result);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>