<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentSummary_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class fetches impairment related information from FA VM/Dep book
/// and can perform impairment test and calculate the impairment adjustment.
/// </summary>
public class AssetImpairmentSummary_JP implements AssetDocumentSummary_JP
{
    AssetAccountingStandard_JP              accountStandard;

    AssetGroupId                            assetGroupId;
    AssetId                                 assetId;
    AssetName                               assetName;
    AssetBookMergeId                        bookId;
    AssetStatus                             assetStatus;

    // Impairment information
    AssetImpairment_JP                      impairment;
    AssetScrapValue                         expectedScrapValue;
    AssetRecoverableAmount_JP               recoverableAmount;
    AssetUndiscountedCashFlow_JP            undiscountedCashFlow;
    AssetTransDate                          recovAmtLastUpdate;
    AssetTransDate                          undiscCashFlowLastUpdate;
    RefRecId                                recoverableAmtRef;
    RefRecId                                undiscCashFlowRef;
    AssetTransDate                          indicatorFromDate;
    AssetTransDate                          indicatorToDate;

    // Impairment test
    boolean                                 isTested;
    boolean                                 isImpaired;
    AssetImpairmentAdjustment_JP            impairmentAdjValue;
    AssetDocumentSumCalcUtil_JP             calcUtil;

    Set                                     docTypes;
    AssetSumCalc                            assetSumCalc;
    AssetSumCalc_Trans                      transSumCalc;
    AssetImpairmentTest_JP                  assetImpairmentTest;

    TransDate                               assetDate;
    AssetYear                               assetYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>expectedScrapValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the expected scrap value
    /// </summary>
    /// <returns>
    /// The expected scrap value
    /// </returns>
    public AssetScrapValue expectedScrapValue()
    {
        return expectedScrapValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impairmentAdjValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the impairment adjustment value
    /// </summary>
    /// <returns>
    /// The impairment adjustment value
    /// </returns>
    public AssetImpairmentAdjustment_JP impairmentAdjValue()
    {
        if (!isTested)
        {
            this.impairmentTest();
        }

        return impairmentAdjValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impairmentTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform impairment test.
    /// </summary>
    /// <remarks>
    /// Judge if impairment happened then calculate the impairment adjustment value.
    /// </remarks>
    private void impairmentTest()
    {
        if (isTested)
        {
            return;
        }

        isImpaired = assetImpairmentTest.isImpaired(this);
        impairmentAdjValue = assetImpairmentTest.calculateImpairmentAdj(this);

        isTested = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impairmentValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the total existing impairment value
    /// </summary>
    /// <returns>
    /// The total existing impairment value
    /// </returns>
    public AssetImpairment_JP impairmentValue()
    {
        return impairment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize current <c>AssetImpairmentSummary_JP</c> instance.
    /// </summary>
    public void init()
    {
        AssetBook                               assetBook;

        assetBook = AssetBook::find(assetId, bookId);
        assetGroupId = assetBook.AssetGroup;
        assetName = assetBook.assetName();
        assetStatus = assetBook.Status;
        expectedScrapValue = assetBook.ScrapValue;

        transSumCalc = assetSumCalc as AssetSumCalc_Trans;
        if (transSumCalc == null)
        {
            throw error(strFmt("@SYS4005190", classStr(AssetSumCalc_Trans)));
        }
        impairment = transSumCalc.getAssetDocTypeVarValue_JP(AssetTransType::WriteDownAdj, AssetDocumentType_JP::AssetImpairment);

        assetImpairmentTest = AssetImpairmentTest_JP::constructAssetImpairmentTest(AssetParameters::accountingStandard_JP());

        this.refreshIndicators();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpaired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get if this asset/asset book is impaired.
    /// </summary>
    /// <returns>
    /// Boolean value of if this asset/asset book is impaired.
    /// </returns>
    public boolean isImpaired()
    {
        if (!isTested)
        {
            this.impairmentTest();
        }

        return isImpaired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>AssetImpairmentSummary_JP</c>
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_bookType">
    /// The book type.
    /// </param>
    /// <param name="_sumCalc">
    /// The <c>AssetSumCalc</c> instance to perform calculation.
    /// </param>
    /// <param name="_assetDate">
    /// The asset date.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year.
    /// </param>
    private void new(
        AssetId                     _assetId,
        AssetBookMergeId            _bookId,
        AssetSumCalc                _sumCalc,
        TransDate                   _assetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        AssetYear                   _assetYear = AssetYear::All)
    {
        assetId = _assetId;
        bookId = _bookId;

        docTypes = new Set(Types::Container);
        docTypes.add([AssetTransType::WriteDownAdj, AssetDocumentType_JP::AssetImpairment]);

        assetDate = _assetDate;
        assetYear = _assetYear;

        assetSumCalc = _sumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocSumCalc</Name>
				<Source><![CDATA[
    public AssetSumCalc parmAssetDocSumCalc(AssetSumCalc _sumCalc = assetSumCalc)
    {
        assetSumCalc = _sumCalc;
        return assetSumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupId</Name>
				<Source><![CDATA[
    public AssetGroupId parmAssetGroupId()
    {
        return assetGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId()
    {
        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetName</Name>
				<Source><![CDATA[
    public AssetName parmAssetName()
    {
        return assetName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetStatus</Name>
				<Source><![CDATA[
    public AssetStatus parmAssetStatus()
    {
        return assetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookId</Name>
				<Source><![CDATA[
    public AssetBookMergeId parmBookId()
    {
        return bookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentSumCalcUtil</Name>
				<Source><![CDATA[
    private AssetDocumentSumCalcUtil_JP parmDocumentSumCalcUtil(AssetDocumentSumCalcUtil_JP _calcUtil = calcUtil)
    {
        calcUtil = _calcUtil;
        return calcUtil;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndicatorFromDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmIndicatorFromDate(AssetTransDate _fromDate = indicatorFromDate)
    {
        indicatorFromDate = _fromDate;
        return indicatorFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndicatorToDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmIndicatorToDate(AssetTransDate _toDate = indicatorToDate)
    {
        indicatorToDate = _toDate;
        return indicatorToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecoverableAmount</Name>
				<Source><![CDATA[
    public AssetRecoverableAmount_JP parmRecoverableAmount()
    {
        return recoverableAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecoverableAmountLastUpdated</Name>
				<Source><![CDATA[
    public AssetTransDate parmRecoverableAmountLastUpdated()
    {
        return recovAmtLastUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecoverableAmtRef</Name>
				<Source><![CDATA[
    public RefRecId parmRecoverableAmtRef()
    {
        return recoverableAmtRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUndiscountedCashFlow</Name>
				<Source><![CDATA[
    public AssetUndiscountedCashFlow_JP parmUndiscountedCashFlow()
    {
        return undiscountedCashFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUndiscountedCashFlowLastUpdated</Name>
				<Source><![CDATA[
    public AssetTransDate parmUndiscountedCashFlowLastUpdated()
    {
        return undiscCashFlowLastUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUndiscountedCashFlowRef</Name>
				<Source><![CDATA[
    public RefRecId parmUndiscountedCashFlowRef()
    {
        return undiscCashFlowRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculate all values. Do not perform impairment test.
    /// </summary>
    public void refresh()
    {
        this.init();

        isTested = false;
        isImpaired = false;
        impairmentAdjValue = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAndTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculate every value. Perform impairment test.
    /// </summary>
    public void refreshAndTest()
    {
        this.refresh();
        this.impairmentTest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshIndicators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculate the indicator values and related information.
    /// </summary>
    public void refreshIndicators()
    {
        container   cont        = AssetImpairmentIndicator_JP::getIndicatorsAndLastUpdatedDate(assetId, bookId, indicatorToDate);
        container   recovCont, undiscCont;
        [recovCont, undiscCont] = cont;
        [recoverableAmount, recovAmtLastUpdate, recoverableAmtRef] = recovCont;
        [undiscountedCashFlow, undiscCashFlowLastUpdate, undiscCashFlowRef] = undiscCont;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDocTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the trans document types.
    /// </summary>
    /// <returns>
    /// Returns the trans document types.
    /// </returns>
    public Set transDocTypes()
    {
        return docTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an <c>AssetImpairmentSummary_JP</c> instance.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The asset book id.
    /// </param>
    /// <param name="_bookType">
    /// The asset book type.
    /// </param>
    /// <param name="_sumCalc">
    /// An <c>AssetSumCalc</c> instance that performs calculation.
    /// </param>
    /// <param name="_calcUtil">
    /// An <c>AssetDocumentSumCalcUtil_JP</c> instance that performs calculation for asset document transactions.
    /// </param>
    /// <param name="_assetDate">
    /// The asset date.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year.
    /// </param>
    /// <param name="_indicatorFromDate">
    /// The from date to get the indicator.
    /// </param>
    /// <param name="_indicatorToDate">
    /// The to date to get the indicator.
    /// </param>
    /// <returns>
    /// A new instance of <c>AssetImpairmentSummary_JP</c> with values.
    /// </returns>
    public static AssetImpairmentSummary_JP construct(
        AssetId                     _assetId,
        AssetBookMergeId            _bookId,
        AssetBookType               _bookType,
        AssetSumCalc                _sumCalc,
        AssetDocumentSumCalcUtil_JP _calcUtil,
        TransDate                   _assetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        AssetYear                   _assetYear = AssetYear::All,
        AssetTransDate              _indicatorFromDate = dateNull(),
        AssetTransDate              _indicatorToDate = dateMax())
    {
        AssetImpairmentSummary_JP   summary = new AssetImpairmentSummary_JP(_assetId, _bookId, _sumCalc, _assetDate, _assetYear);
        summary.parmIndicatorFromDate(_indicatorFromDate);
        summary.parmIndicatorToDate(_indicatorToDate);
        _calcUtil.registerSummary(summary);
        summary.parmDocumentSumCalcUtil(_calcUtil);
        return summary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>