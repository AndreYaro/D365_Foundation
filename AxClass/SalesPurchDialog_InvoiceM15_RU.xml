<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchDialog_InvoiceM15_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class SalesPurchDialog_InvoiceM15_RU extends SalesPurchDialog_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    protected boolean checkJour(CustVendInvoiceJour _jour)
    {
        CustInvoiceJour jour = _jour;
        return jour.custInvoiceJour_RU().CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::M_15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJour</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour findJour(PrintoutTable_RU _table)
    {
        return CustInvoiceJour::findFromCustInvoiceTrans(_table.SalesPurchId,
                                                         _table.DocumentId,
                                                         _table.DocumentDate,
                                                         _table.CustVendNumSeqGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRecIdField</Name>
				<Source><![CDATA[
    protected fieldId jourRecIdField()
    {
        return fieldnum(CustInvoiceJour, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopPrintoutTable</Name>
				<Source><![CDATA[
    protected void loopPrintoutTable(Set _typeSet,
                                     Set _locationSet,
                                     Set _numSet,
                                     Set _recIdSet)
    {
        PrintoutTable_RU     printout;

        while select InventLocationId, JournalType, JournalNum, RecId from printout
            where printout.DocumentId          == invoiceJour.InvoiceId      &&
                  printout.DocumentDate        == invoiceJour.InvoiceDate    &&
                  printout.SalesPurchId        == invoiceJour.Num            &&
                  printout.CustVendAccount     == invoiceJour.InvoiceAccount &&
                  printout.CustVendNumSeqGroup == invoiceJour.NumberSequenceGroupId
        {
            _locationSet.add(printout.InventLocationId);
            _typeSet.add    (enum2str(printout.JournalType));
            _numSet.add     (printout.JournalNum);
            _recIdSet.add   (printout.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RecordSortedList    _journalList = new RecordSortedList(tablenum(CustInvoiceJour)),
                    CustVendInvoiceJour _invoiceJour = null)
    {
        super(_journalList, _invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    protected void runReport(Args _args)
    {
        SalesReport_InvoiceM15_RU::main(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return strfmt("@GLS106646", "@SYS55777", "@GLS106999");
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>