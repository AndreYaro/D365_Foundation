<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPaySheetEngine_TaxReturn</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPaySheetEngine_TaxReturn extends RPaySheetEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSheetChange</Name>
				<Source><![CDATA[
        protected boolean canSheetChange(boolean _needMessage = true)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheet</Name>
				<Source><![CDATA[
        #AviFiles
    public void createSheet()
    {
        RPayTrans               payTrans;
        RPaySheetTrans          rPaySheetTransLocal;
        RHRMEmplId              tekEmplid, curEmplId;
        Amount                  emplAmount = 0;
        RHRMEmplTable           emplTable;
        RpayHRMOrganizationId   currentHrmOrgId;
        NumberSeq               numberSeqLocal;
        SysOperationProgress    operationProgress;
        RPayTrans               rPayTrans;
        Map                     sheetTableMap = null, tmpMap;
        MapEnumerator           tmpMapEnumerator, sheetTableMapEnumerator;

        void insertOrUpdateSheetTable(RHRMEmplId _emplId = "")
        {
            ttsbegin;
            currentHrmOrgId = _emplId ? RPayHistory::getHistoryLineByDate(_emplId,
                                                                          this.parmSheetTransDate()).HrmOrganizationId : "";
            if (! sheetTableMap.exists(currentHrmOrgId))
            {
                numberSeqLocal = NumberSeq::newGetNum(RPayParameters::numRefSheetNum(),true);
                paySheetTable.clear();
                paySheetTable.Name              = this.description();
                paySheetTable.PaySheetNum       = numberSeqLocal.num();
                paySheetTable.PayPeriod         = endmth(ctrlPayPeriod.dateValue());
                paySheetTable.TransDate         = this.parmSheetTransDate();
                paySheetTable.PaySheetType      = this.paySheetType();
                paySheetTable.PaySheetSost      = RPaySheetSost::NoPaid;
                paySheetTable.HrmOrganisationId = currentHrmOrgId;
                paySheetTable.SumSheet          = emplAmount;
                paySheetTable.insert();

                tmpMap = new Map(Types::Int64, Types::Class);
                tmpMap.insert(paySheetTable.RecId, numberSeqLocal);
                sheetTableMap.insert(currentHrmOrgId, tmpMap);
            }
            else
            {
                tmpMap           = sheetTableMap.lookup(currentHrmOrgId);
                tmpMapEnumerator = tmpMap.getEnumerator();
                tmpMapEnumerator.moveNext();

                select firstonly forupdate paySheetTable
                    where paySheetTable.HrmOrganisationId == currentHrmOrgId &&
                          paySheetTable.RecId             == tmpMapEnumerator.currentKey();

                 paySheetTable.SumSheet += emplAmount;
                 paySheetTable.update();
            }
            ttscommit;
        }

        void updateSheetTrans()
        {
            ttsbegin;
            rPaySheetTransLocal.selectForUpdate(true);
            if (emplAmount > 0)
            {
                rPaySheetTransLocal.Amount = emplAmount;
                rPaySheetTransLocal.update();
            }
            else
            {
                while select forupdate rPayTrans
                    where rPayTrans.RefSheetTransRecid == rPaySheetTransLocal.RecId
                {
                    rPayTrans.RefSheetTransRecid = 0;
                    rPayTrans.doUpdate();
                }
                rPaySheetTransLocal.delete();
            }
            ttscommit;
            tekEmplid = payTrans.Emplid;
            emplAmount = 0;
        }

        void insertSheetTrans()
        {
             rPaySheetTransLocal.SheetTableRecId = paySheetTable.RecId;
             rPaySheetTransLocal.Emplid = tekEmplid;
             rPaySheetTransLocal.BankPayment = NoYes::Yes;
             rPaySheetTransLocal.insert();
        }

        if (! this.paySheetCreateDialog())
        {
            return;
        }

        sheetTableMap = new Map(Types::String, Types::Class);

        switch (this.parmPaySheetTypeCreate())
        {
            case RpaySheetTypeCreate::Plant:
                insertOrUpdateSheetTable();
                this.createSheetTrans(numberSeqLocal);

                if (paySheetTable.SumSheet == 0)
                {
                    this.deleteSheet();
                    paySheetTable.delete();
                }
                sheetTableDs.research();
                return;

            case RpaySheetTypeCreate::SubDivision:
                 break;
        }

        this.updateQuery();

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@RUP550");
        operationProgress.setAnimation(#AviUpdate);
        operationProgress.setTotal(SysQuery::countTotal(queryRun));

        ttsbegin;

        if (queryRun.next())
        {
            payTrans  = queryRun.get(tableNum(RPayTrans));
            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            tekEmplid = payTrans.Emplid;
            curEmplId = payTrans.Emplid;

            insertOrUpdateSheetTable(tekEmplid);
            insertSheetTrans();

            if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                payTrans.RefSheetTransRecid == 0 )
            {
                emplAmount += payTrans.Amount;
                payTrans.RefSheetTransRecid = rPaySheetTransLocal.RecId;

                payTrans.skipTTSCheck(true);
                payTrans.selectForUpdate(true);
                payTrans.doUpdate();
            }
        }

        while (queryRun.next())
        {
            payTrans.selectForUpdate(true);
            payTrans  = queryRun.get(tableNum(RPayTrans));
            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            curEmplId = payTrans.Emplid;

            operationProgress.setText("@RUP372" + emplTable.EmployeeId);
            operationProgress.incCount();

            if (payTrans.Emplid != tekEmplid)
            {
                insertOrUpdateSheetTable(tekEmplid);
                updateSheetTrans();
                insertOrUpdateSheetTable(payTrans.Emplid);
                insertSheetTrans();
            }

            if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                payTrans.RefSheetTransRecid == 0)
            {
                emplAmount += payTrans.Amount;
                payTrans.RefSheetTransRecid = rPaySheetTransLocal.RecId;

                payTrans.skipTTSCheck(true);
                payTrans.selectForUpdate(true);
                payTrans.doUpdate();
            }
        }

        insertOrUpdateSheetTable(curEmplId);
        updateSheetTrans();

        sheetTableMapEnumerator = sheetTableMap.getEnumerator();
        while (sheetTableMapEnumerator.moveNext())
        {
            tmpMap           = sheetTableMapEnumerator.currentValue();
            tmpMapEnumerator = tmpMap.getEnumerator();
            tmpMapEnumerator.moveNext();

            select firstonly forupdate paySheetTable
                where paySheetTable.RecId == tmpMapEnumerator.currentKey();

            if (paySheetTable.SumSheet)
            {
                numberSeqLocal = tmpMapEnumerator.currentValue();
                numberSeqLocal.used();
            }
            else
            {
                this.deleteSheet();
                paySheetTable.delete();
            }
        }
        ttscommit;
        sheetTableDs.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheetTrans</Name>
				<Source><![CDATA[
        #AviFiles
    public void createSheetTrans(NumberSeq _numberSeq = null)
    {
        RPayTrans            payTrans;
        RPaySheetTrans       rPaySheetTrans;
        RHRMEmplId           tekEmplid;
        Amount               emplAmount,sumAmount;
        SysOperationProgress operationProgress;

        void deleteSheetTrans()
        {
            RPayTrans       rPayTrans;

            while select forupdate rPayTrans
                where rPayTrans.RefSheetTransRecid == rPaySheetTrans.RecId
            {
                rPayTrans.RefSheetTransRecid = 0;
                rPayTrans.doUpdate();
            }
            rPaySheetTrans.delete();
        }

        this.updateQuery();

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@RUP550");
        operationProgress.setAnimation(#AviUpdate);
        operationProgress.setTotal(SysQuery::countTotal(queryRun));

        ttsbegin;

        if (queryRun.next())
        {
            payTrans.selectForUpdate(true);
            payTrans = queryRun.get(tableNum(RPayTrans));

            tekEmplid = payTrans.Emplid;

            if (RPayParameters::payPeriod(tekEmplid) == endmth(ctrlPayPeriod.dateValue()))
            {
                rPaySheetTrans.SheetTableRecId = paySheetTable.RecId;
                rPaySheetTrans.Emplid          = tekEmplid;
                rPaySheetTrans.BankPayment     = NoYes::Yes;
                if (!rPaySheetTrans.validateWrite())
                    throw Exception::Error;
                rPaySheetTrans.insert();

                if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                   payTrans.RefSheetTransRecid == 0)
                {
                    emplAmount      += payTrans.Amount;
                    payTrans.RefSheetTransRecid = rPaySheetTrans.RecId;
                    payTrans.doUpdate();
                }
            }

            operationProgress.setText("@RUP372" + payTrans.Emplid);
            operationProgress.incCount();
        }
        while (queryRun.next())
        {
            payTrans.selectForUpdate(true);
            payTrans = queryRun.get(tableNum(RPayTrans));

            if (payTrans.Emplid != tekEmplid)
            {
                if (RPayParameters::payPeriod(tekEmplid) == endmth(ctrlPayPeriod.dateValue()))
                {
                    if (emplAmount > 0)
                    {
                        rPaySheetTrans.Amount       = emplAmount;
                        rPaySheetTrans.update();
                        sumAmount += emplAmount;
                    }
                    else
                    {
                        deleteSheetTrans();
                    }
                }

                tekEmplid = payTrans.Emplid;
                emplAmount   = 0;

                if (RPayParameters::payPeriod(tekEmplid) == endmth(ctrlPayPeriod.dateValue()))
                {
                    rPaySheetTrans.SheetTableRecId = paySheetTable.RecId;
                    rPaySheetTrans.Emplid          = tekEmplid;
                    rPaySheetTrans.BankPayment     = NoYes::Yes;
                    if (!rPaySheetTrans.validateWrite())
                        throw Exception::Error;
                    rPaySheetTrans.insert();
                }
            }

            if (RPayParameters::payPeriod(tekEmplid) == endmth(ctrlPayPeriod.dateValue()))
            {
                if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                    payTrans.RefSheetTransRecid == 0)
                {
                    emplAmount      += payTrans.Amount;

                    payTrans.RefSheetTransRecid = rPaySheetTrans.RecId;
                    payTrans.doUpdate();
                }
            }

            operationProgress.setText("@RUP372" + payTrans.Emplid);
            operationProgress.incCount();
        }

        if (RPayParameters::payPeriod(tekEmplid) == endmth(ctrlPayPeriod.dateValue()))
        {
            if (emplAmount > 0)
            {
                 rPaySheetTrans.Amount    = emplAmount;
                 rPaySheetTrans.update();
                 sumAmount += emplAmount;
            }
            else
            {
                deleteSheetTrans();
            }
        }

        if (sumAmount > 0)
        {
            paySheetTable.SumSheet = sumAmount;
            sheetTableDs.write();
            sheetTransDs.research();
            if (_numberSeq)
            {
                _numberSeq.used();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSheet</Name>
				<Source><![CDATA[
        public void deleteSheet()
    {
        RPaySheetTrans paySheetTrans;
        RPayTrans      rPayTrans;

        rPayTrans.skipDataMethods(true);
        update_recordset rPayTrans setting
            RefSheetTransRecid = 0
                join paySheetTrans
                where paySheetTrans.SheetTableRecId == paySheetTable.RecId
                  &&  rPayTrans.RefSheetTransRecid == paySheetTrans.RecId;
        rPayTrans.skipDataMethods(false);

        sheetTableDs.research();
        this.updateFormDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
        public void deleteTrans()
    {
        RPayTrans       rPayTrans;
        RPaySheetTrans  paySheetTrans;
        super();

        paySheetTrans = sheetTransDs.cursor();

        update_recordset rPayTrans
            setting RefSheetTransRecid = 0
            where rPayTrans.RefSheetTransRecid == paySheetTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        protected TempStr description()
    {
        return "@RUP3144";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FormRun _formRun)
    {
        super(_formRun);
        ctrlCreate.visible(true);
        ctrlDeleteAll.visible(false);
        ctrlPrint.visible(true);
        ctrlPay.visible(true);
        ctrlSetSumm.visible(false);
        ctrlQuery.visible(false);
        ctrlPaySheetType.visible(false);
        ctrlTax.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetCreateQueryDialog</Name>
				<Source><![CDATA[
        protected boolean paySheetCreateQueryDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetType</Name>
				<Source><![CDATA[
        protected RPaySheetType paySheetType()
    {
        return RPaySheetType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
        public void updateFormDesign()
    {
        super();

        sheetTableDs.allowCreate(false);
        sheetTableDs.allowDelete(false);
        sheetTransDs.allowCreate(false);
        sheetTransDs.allowDelete(false);
        sheetTransDs.allowEdit(false);
        sheetTableDs.allowDelete(true);

        if (paySheetTable.RecId)
        {
           ctrlCreate.enabled(false);
           ctrlDeleteAll.enabled(true);
           ctrlCalcReport.visible(false);
           ctrlCalcPayReport.visible(false);
           ctrlTransDate.allowEdit(false);
        }
        else
        {
           ctrlCreate.enabled(this.canSheetChange(false));
           ctrlDeleteAll.enabled(false);
           ctrlCalcReport.visible(false);
           ctrlCalcPayReport.visible(false);
        }

        if (endmth(ctrlPayPeriod.dateValue()) != RPayParameters::payPeriod())
        {
             ctrlCreate.enabled(false);
             ctrlDeleteAll.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
        protected void updateQuery()
    {
        QueryBuildDataSource qbds;

        qbds = queryRun.query().dataSourceTable(tableNum(RPayTrans));
        findOrCreateRange_W(qbds, fieldNum(RPayTrans, TaxRedemption), queryValue(NoYes::Yes));
        findOrCreateRange_W(qbds, fieldNum(RPayTrans, RefSheetTransRecid), SysQuery::valueEmptyString());
        findOrCreateRange_W(qbds, fieldNum(RPayTrans, PayPeriod), SysQuery::valueUnlimited());

        qbds.addOrderByField(fieldNum(RPayTrans, Emplid));
        qbds.addOrderByField(fieldNum(RPayTrans, PayPeriod), SortOrder::Descending);

        if (RPayTaxParameters::find().ReimbursementType == RPayTaxReimbursementType::RefundPayroll)
        {
             qbds = queryRun.query().dataSourceTable(tableNum(RHRMEmplTable));
             findOrCreateRange_W(qbds, fieldNum(RHRMEmplTable, PayBankPayment), queryValue(NoYes::No));
        }

        queryRun.reset();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>