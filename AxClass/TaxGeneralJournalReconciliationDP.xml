<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGeneralJournalReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>TaxGeneralJournalReconciliationDP</c> class handles the data processing for the <c>TaxGeneralJournalReconciliation</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxGeneralJournalReconciliation)),
    SRSReportParameterAttribute(classStr(TaxGeneralJournalReconciliationContract))
]
class TaxGeneralJournalReconciliationDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxGeneralJournalReconciliationTmp  taxGeneralJournalReconciliationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxGeneralJournalReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves the data for the report from the <c>taxGeneralJournalReconciliationTmp</c> table.
    /// </summary>
    /// <returns>
    ///  The <c>taxGeneralJournalReconciliationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxGeneralJournalReconciliationTmp))
    ]
    public TaxGeneralJournalReconciliationTmp getTaxGeneralJournalReconciliationTmp()
    {
        select taxGeneralJournalReconciliationTmp;
        return taxGeneralJournalReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        UserConnection                          connection;
        TaxGeneralJournalReconciliationHelper   helper;
        TaxGeneralJournalReconciliationContract contract;
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            contract = this.parmDataContract() as TaxGeneralJournalReconciliationContract;
            connection = new UserConnection();
            taxGeneralJournalReconciliationTmp.setConnection(connection);

            helper = new TaxGeneralJournalReconciliationHelper();
            helper.parmUserConnection(connection);
            helper.parmReportContract(contract);
            helper.parmReportQuery(this.parmQuery());
            helper.parmReportTable(taxGeneralJournalReconciliationTmp);
            helper.process();

            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            connection.finalize();
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxGeneralJournalReconciliation), MenuItemType::Output).label(), 'TaxGeneralJournalReconciliation', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>