<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoicePostProcessAutomationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendInvoicePostProcessAutomationTask</c> fulfills the contract needed for <c>ProcessAutomationTask</c>.
/// </summary>
[ExportMetadata(classStr(ProcessAutomationTask), classStr(VendInvoicePostProcessAutomationTask))]
[Export(identifierStr('Microsoft.Dynamics.AX.Application.ProcessAutomationTask'))]
internal class VendInvoicePostProcessAutomationTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is work to submit to the <c>ProcessAutomation</c>.
    /// </summary>
    /// <returns>true if there is one or more invoices in the queue; otherwise, false.</returns>
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        /// This method gets called by the polling service in the <c>ProcessAutomationTask</c>.
        /// If this method returns true, then the <c>ProcessAutomationTask</c> will call the <c>getListOfWorkToBePerformed</>, which creates a batch.
        /// This method should have returned <c>VendInvoicePostTaskFeature::isEnabled()</c>. But that would result in creation of a batch on each poll
        /// even in the case when the queue is empty. Hence, checking the element count is an efficient approach to minimize the load on batch.
        /// This approach handles the case where a user turns off the feature when the queue is not empty.
        /// Note that the check for <c>VendInvoicePostTaskFeature::isEnabled()</c> is performed before inserting an element into the queue.

        return VendInvoiceQueueFactory::getVendInvoiceQueue().count() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a <c>VendInvoicePostController</c> to the <c>ProcessAutomation</c>.
    /// </summary>
    /// <returns>A one element list of <c>VendInvoicePostController</c> object.</returns>
    protected List getListOfWorkToBePerformed()
    {
        VendInvoicePostController vendInvoicePostController = new VendInvoicePostController(
            classStr(VendInvoicePostController),
            methodStr(VendInvoicePostController, initProcessExecutionSourceLinkItem),
            SysOperationExecutionMode::ReliableAsynchronous);

        ProcessScheduleWorkItem processScheduleWorkItemContract = vendInvoicePostController.getDataContractObject() as ProcessScheduleWorkItem;
        ProcessScheduleWorkItem processScheduleWorkItem = this.parmProcessScheduleWorkItem();

        // The only use case for this check is a unit test that does not run in a batch.
        if (processScheduleWorkItem)
        {
            processScheduleWorkItemContract.initializeFromScheduleWorkItem(processScheduleWorkItem);
        }

        List workList = new List(Types::Class);
        workList.addEnd(vendInvoicePostController);

        // Log telemetry to indicate that the work list was submitted to the Process Automation.
        VendInstrumentation::logTelemetry(
            VendInvoicePostTaskConstants::InstrumentationNamespace,
            this.toString(),
            funcName(),
            this.toString(),
            funcName());

        return workList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caption of the batch job that will be prepared by the <c>ProcessAutomationTask</c>
    /// </summary>
    /// <returns>The caption for the batch job.</returns>
    protected BatchCaption batchJobCaption()
    {
        return "@AccountsPayable:VendInvoicePostProcessAutomationTask_Caption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>