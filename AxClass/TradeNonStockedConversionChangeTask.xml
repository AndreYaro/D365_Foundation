<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionChangeTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TradeNonStockedConversionChangeTask
extends TradeNonStockedConversionTask implements BatchRetryable
{
    TradeNonStockedConversionLogWriter  tradeNonStockedConversionLogWriter;

    #Define.CurrentVersion(1)
    #Localmacro.CurrentList
        tradeNonStockedConversion,
        tradeNonStockedConversionItem
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeType</Name>
				<Source><![CDATA[
    private TradeNonStockedConversionChangeType changeType()
    {
        return TradeNonStockedConversionChangeType::NotStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventTable</Name>
				<Source><![CDATA[
    protected void convertInventTable()
    {
        TradeNonStockedConversionItem           conversionItem;
        TradeNonStockedCurrentItemModelGroupId  originalItemModelGroupId;
        InventModelGroupItem                    inventModelGroupItem;

        while select conversionItem
            where conversionItem.NonStockedConversion   == tradeNonStockedConversion.RecId
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId))
        {
            inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(conversionItem.ItemId, conversionItem.ItemIdDataAreaId, true);
            if (inventModelGroupItem.ModelGroupId != conversionItem.TargetItemModelGroupId)
            {
                originalItemModelGroupId = inventModelGroupItem.ModelGroupId;
                inventModelGroupItem.ModelGroupId = conversionItem.TargetItemModelGroupId;
                inventModelGroupItem.update();

                this.writeLog(this.changeType(),
                      conversionItem,
                      tableNum(InventTable),
                      fieldNum(InventTable, ItemId),
                      inventModelGroupItem.ItemId,
                      0,
                      '',
                      originalItemModelGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchLine</Name>
				<Source><![CDATA[
    protected void convertPurchLine()
    {
        PurchLine           purchLine;
        InventUpd_Estimated estimated;
        TradeNonStockedConversionItem conversionItem;

        while select conversionItem
            where conversionItem.NonStockedConversion   == tradeNonStockedConversion.RecId
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId))
        {
            changecompany(conversionItem.legalEntity().DataArea)
            {
                while select forupdate purchLine
                        where (purchLine.PurchStatus == PurchStatus::Backorder
                        ||     purchLine.PurchStatus == PurchStatus::Received)
                        &&    purchLine.ItemId       == conversionItem.ItemId
                        &&    purchLine.StockedProduct == NoYes::Yes
                {
                    purchLine.StockedProduct = NoYes::No;
                    purchLine.doUpdate();//Orig buffer must have StockedProduct::No before calling inventupd_estimated.
                    purchLine.stockedProductChanged();

                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(purchLine));
                    estimated.updateNow();
                    purchLine.doUpdate();

                    this.writeLog(this.changeType(),
                                  conversionItem,
                                  tableNum(PurchLine),
                                  fieldNum(PurchLine, InventTransId),
                                  purchLine.InventTransId,
                                  tableNum(PurchTable),
                                  purchLine.PurchId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchRFQCaseLine</Name>
				<Source><![CDATA[
    protected void convertPurchRFQCaseLine()
    {
        PurchRFQCaseLine        purchRFQCaseLine;
        InventUpd_Estimated     estimated;
        PurchQty                origPurchQty;
        TradeNonStockedConversionItem conversionItem;

        while select conversionItem
            where conversionItem.NonStockedConversion   == tradeNonStockedConversion.RecId
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId))
        {
            changecompany(conversionItem.legalEntity().DataArea)
            {
                while select forupdate purchRFQCaseLine
                    where purchRFQCaseLine.rfqType      == PurchRFQType::Purch
                    &&    purchRFQCaseLine.ItemId       == conversionItem.ItemId
                    &&    purchRFQCaseLine.StatusHigh   != PurchRFQStatus::Accepted
                    &&    purchRFQCaseLine.StatusHigh   != PurchRFQStatus::Rejected
                    &&    purchRFQCaseLine.StatusLow    != PurchRFQStatus::Accepted
                    &&    purchRFQCaseLine.StatusLow    != PurchRFQStatus::Rejected
                    &&    purchRFQCaseLine.QtyOrdered   != 0
                {
                    purchRFQCaseLine.QtyOrdered = 0;
                    purchRFQCaseLine.RemainInventPhysical = 0;
                    purchRFQCaseLine.RemainPurchPhysical  = 0;
                    origPurchQty = purchRFQCaseLine.PurchQty;
                    purchRFQCaseLine.PurchQty = 0; //PurchQty must be zero before calling inventUpd_esitmated.

                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(purchRFQCaseLine));
                    estimated.updateNow();

                    purchRFQCaseLine.PurchQty = origPurchQty;//original purchQty must be set back before update.
                    purchRFQCaseLine.doUpdate();

                    this.writeLog(this.changeType(),
                                  conversionItem,
                                  tableNum(PurchRFQCaseLine),
                                  fieldNum(PurchRFQCaseLine, LineNum),
                                  queryValue(purchRFQCaseLine.LineNum),
                                  tableNum(PurchRFQCaseTable),
                                  purchRFQCaseLine.rfqCaseId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchRFQLine</Name>
				<Source><![CDATA[
    protected void convertPurchRFQLine()
    {
        PurchRFQLine            purchRFQLine;
        PurchRFQReplyLine       purchRFQReplyLine;
        InventUpd_Estimated     estimated;
        PurchQty                origPurchQty;
        TradeNonStockedConversionItem conversionItem;

        while select conversionItem
            where conversionItem.NonStockedConversion   == tradeNonStockedConversion.RecId
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId))
        {
            changecompany(conversionItem.legalEntity().DataArea)
            {
                while select forupdate purchRFQLine
                    where purchRFQLine.rfqType == PurchRFQType::Purch
                    &&    purchRFQLine.ItemId == conversionItem.ItemId
                    &&    purchRFQLine.rfqCaseLineRefRecId == 0
                    &&    purchRFQLine.Status != PurchRFQStatus::Accepted
                    &&    purchRFQLine.Status != PurchRFQStatus::Rejected
                    &&    purchRFQLine.LineType == PurchRFQLineItemType::Item
                    &&    purchRFQLine.QtyOrdered != 0
                    join forupdate purchRFQReplyLine
                        where purchRFQReplyLine.rfqLineRecId == purchRFQLine.RecId
                {
                    purchRFQReplyLine.QtyOrdered = 0;
                    purchRFQReplyLine.doUpdate();

                    origPurchQty = purchRFQLine.PurchQty;
                    purchRFQLine.PurchQty   = 0; //PurchQty must be zero before calling inventUpd_esitmated.
                    purchRFQLine.QtyOrdered = 0;

                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(purchRFQLine));
                    estimated.updateNow();

                    purchRFQLine.PurchQty = origPurchQty; //original purchQty must be set back before update.
                    purchRFQLine.doUpdate();

                    this.writeLog(this.changeType(),
                                  conversionItem,
                                  tableNum(PurchRFQLine),
                                  fieldNum(PurchRFQLine, LineNum),
                                  queryValue(purchRFQLine.LineNum),
                                  tableNum(PurchRFQTable),
                                  purchRFQLine.rfqId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSalesLine</Name>
				<Source><![CDATA[
    protected void convertSalesLine()
    {
        SalesLine           salesLine;
        InventUpd_Estimated estimated;
        TradeNonStockedConversionItem conversionItem;

        while select conversionItem
            where conversionItem.NonStockedConversion   == tradeNonStockedConversion.RecId
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId))
        {
            changecompany(conversionItem.legalEntity().DataArea)
            {
                while select forupdate salesLine
                        where (salesLine.SalesStatus == SalesStatus::Backorder
                        ||     salesLine.SalesStatus == SalesStatus::Delivered)
                        &&     salesLine.ItemId      == conversionItem.ItemId
                        &&     salesLine.StockedProduct == NoYes::Yes
                {
                    salesLine.StockedProduct = NoYes::No;
                    salesLine.doUpdate();//Orig buffer must have StockedProduct::No before calling inventupd_estimated.
                    salesLine.stockedProductChanged();

                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(salesLine));
                    estimated.updateNow();
                    salesLine.doUpdate();

                    this.writeLog(this.changeType(),
                                  conversionItem,
                                  tableNum(SalesLine),
                                  fieldNum(SalesLine, InventTransId),
                                  salesLine.InventTransId,
                                  tableNum(SalesTable),
                                  salesLine.SalesId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSalesQuotationLine</Name>
				<Source><![CDATA[
    protected void convertSalesQuotationLine()
    {
        SalesQuotationLine  salesQuotationLine;
        SalesQuotationTable salesQuotationTable;
        InventUpd_Estimated estimated;
        TradeNonStockedConversionItem conversionItem;

        while select conversionItem
            where conversionItem.NonStockedConversion   == tradeNonStockedConversion.RecId
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId))
        {
            changecompany(conversionItem.legalEntity().DataArea)
            {
                while select salesQuotationTable
                    where (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
                    ||     salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent)
                    join forupdate salesQuotationLine
                        where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                        &&    salesQuotationLine.ItemId      == conversionItem.ItemId
                        &&    salesQuotationLine.StockedProduct == NoYes::Yes
                {
                    salesQuotationLine.StockedProduct = NoYes::No;
                    salesQuotationLine.doUpdate();//Orig buffer must have StockedProduct::No before calling inventupd_estimated.
                    salesQuotationLine.stockedProductChanged();

                    estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(salesQuotationLine));
                    estimated.updateNow();
                    salesQuotationLine.doUpdate();

                    this.writeLog(this.changeType(),
                                  conversionItem,
                                  tableNum(SalesQuotationLine),
                                  fieldNum(SalesQuotationLine, InventTransId),
                                  salesQuotationLine.InventTransId,
                                  tableNum(SalesQuotationTable),
                                  salesQuotationLine.QuotationId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the task.
    /// </summary>
    public void run()
    {
        ttsbegin;
        this.convertSalesLine();
        ttscommit;

        ttsbegin;
        this.convertSalesQuotationLine();
        ttscommit;

        ttsbegin;
        this.convertPurchLine();
        ttscommit;

        ttsbegin;
        this.convertPurchRFQLine();
        ttscommit;

        ttsbegin;
        this.convertPurchRFQCaseLine();
        ttscommit;

        ttsbegin;
        this.convertInventTable();
        ttscommit;

        ttsbegin;
        this.updateStatus(TradeNonStockedConversionStatus::Checked, TradeNonStockedConversionStatus::Converted);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
    protected void writeLog(
        TradeNonStockedConversionChangeType         _changeType,
        TradeNonStockedConversionItem               _conversionItem,
        RefTableId                                  _refTableId,
        FieldId                                     _refFieldId,
        TradeNonStockedIdentifyingAttributeValue    _identifyingAttributeValue,
        RefTableId                                  _refParentTableId = 0,
        TradeNonStockedIdentifyingAttributeValue    _parentIdentifyingAttributeValue = '',
        TradeNonStockedCurrentItemModelGroupId      _originalItemModelGroupId = '')
    {
        if (!tradeNonStockedConversionLogWriter)
        {
            tradeNonStockedConversionLogWriter = TradeNonStockedConversionLogWriter::newLogWriter(_conversionItem);
        }
        else
        {
            tradeNonStockedConversionLogWriter.parmTradeNonStockedConversionItem(_conversionItem);
        }

        tradeNonStockedConversionLogWriter.parmOriginalItemModelGroupId(_originalItemModelGroupId);
        tradeNonStockedConversionLogWriter.writeChangeLog(_changeType,
                                                          _refTableId,
                                                          _refFieldId,
                                                          _identifyingAttributeValue,
                                                          _refParentTableId,
                                                          _parentIdentifyingAttributeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TradeNonStockedConversionChangeTask construct()
    {
        return new TradeNonStockedConversionChangeTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS323899";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionChangeTask newTask(
        TradeNonStockedConversion       _tradeNonStockedConversion,
        TradeNonStockedConversionItem   _tradeNonStockedConversionItem = null)
    {
        TradeNonStockedConversionChangeTask tradeNonStockedConversionChangeTask = TradeNonStockedConversionChangeTask::construct();

        tradeNonStockedConversionChangeTask.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionChangeTask.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);

        return tradeNonStockedConversionChangeTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>