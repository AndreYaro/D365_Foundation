<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanSqlUpdateStatementBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqDemPlanSqlUpdateStatementBuilder</c> class is a utility for building direct SQL set-based update queries.
/// </summary>
public class ReqDemPlanSqlUpdateStatementBuilder
{
    private SysDictTable dictTable;
    private System.Text.StringBuilder result;
    private boolean hasFilters;
    private boolean hasSetValue;
    private SqlSystem sqlSystem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TableId _tableId)
    {
        dictTable = new SysDictTable(_tableId);
        sqlSystem = new SqlSystem();
        result = new System.Text.StringBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the query string.
    /// </summary>
    /// <returns>The direct SQL query string.</returns>
    public str toString()
    {
        return result.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the initial expression in the update statement.
    /// </summary>
    public void buildUpdateExpression()
    {
        System.Text.StringBuilder preAppendString = new System.Text.StringBuilder();
        preAppendString.AppendFormat('UPDATE [{0}]', ReqDemPlanDataProcessingHelper::dbTableName(dictTable.id()));

        result.Insert(0, preAppendString.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSelectExpressionWithCountRecIdField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the initial expression in the select statement.
    /// </summary>
    public void buildSelectExpressionWithCountRecIdField()
    {
        System.Text.StringBuilder preAppendString = new System.Text.StringBuilder();
        preAppendString.AppendFormat('SELECT COUNT(RECID) FROM [{0}]', ReqDemPlanDataProcessingHelper::dbTableName(dictTable.id()));

        result.Insert(0, preAppendString.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIncreaseValueBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set expression which increases the field value by the given percentage in the format of SET field = field + field * percentage.
    /// </summary>
    /// <param name = "_fieldId">The field ID to update.</param>
    /// <param name = "_percent">The percentage to update the field value with.</param>
    public void addIncreaseValueBy(FieldId _fieldId, real _percent)
    {
        this.addSetValueRaw(_fieldId, strFmt('[%1] + [%1] * %2', ReqDemPlanDataProcessingHelper::dbFieldName(dictTable.id(), _fieldId),
            sqlSystem.sqlLiteral(_percent)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIncreaseValueByFromField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set expression which increases the field value by the given percentage in the format of SET fieldTo = fieldTo + fieldFrom * percentage.
    /// </summary>
    /// <param name = "_fieldIdTo">The field ID to update.</param>
    /// <param name = "_fieldIdFrom">The field ID to use value from.</param>
    /// <param name = "_percent">The percentage to update the field value with.</param>
    public void addIncreaseValueByFromField(FieldId _fieldIdTo, FieldId _fieldIdFrom, real _percent)
    {
        this.addSetValueRaw(
            _fieldIdTo, 
            strFmt(
                '[%1] + [%2] * %3',
                ReqDemPlanDataProcessingHelper::dbFieldName(dictTable.id(), _fieldIdTo),
                ReqDemPlanDataProcessingHelper::dbFieldName(dictTable.id(), _fieldIdFrom),
                sqlSystem.sqlLiteral(_percent)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldConcat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set expression which concatenates a list of fields and assigns the result to the specified field.
    /// </summary>
    /// <param name = "_targetFieldId">The field ID to update.</param>
    /// <param name = "_sourceFields">The list of fields to concatenate.</param>
    /// <param name = "_separator">The separator to use between values.</param>
    /// <param name = "_emptyValueReplacement">The text used as a replacement for empty field value.</param>
    public void addFieldConcat(FieldId _targetFieldId, List _sourceFields, str _separator = '', str _emptyValueReplacement = '')
    {
        str expression = ReqDemPlanDataProcessingHelper::addFieldConcat(dictTable.id(), _sourceFields, _separator, _emptyValueReplacement);
        this.addSetValueRaw(_targetFieldId, expression ? expression : '\'\'');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set expression which updates the field value in the format of SET field = value.
    /// </summary>
    /// <param name = "_fieldId">The field ID.</param>
    /// <param name = "_value">The field value.</param>
    public void addSetValue(FieldId _fieldId, anytype _value)
    {
        this.addSetValueRaw(_fieldId, sqlSystem.sqlLiteral(_value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSetValueRaw</Name>
				<Source><![CDATA[
    private void addSetValueRaw(FieldId _fieldId, str _value)
    {
        result.AppendLine();
        if (!hasSetValue)
        {
            result.Append('SET ');
        }
        else
        {
            result.Append('  , ');
        }
        result.AppendFormat('[{0}] = {1}', ReqDemPlanDataProcessingHelper::dbFieldName(dictTable.id(), _fieldId), _value);

        hasSetValue = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the filter expression in the format of WHERE field = value.
    /// </summary>
    /// <param name = "_fieldId">The ID of the field to filter by.</param>
    /// <param name = "_value">The filter value.</param>
    public void addFilter(FieldId _fieldId, anytype _value)
    {
        result.AppendLine();
        if (!hasFilters)
        {
            result.AppendLine('WHERE');
        }
        else
        {
            result.Append('  AND ');
        }

        result.AppendFormat('[{0}] = {1}', ReqDemPlanDataProcessingHelper::dbFieldName(dictTable.id(), _fieldId),
            sqlSystem.sqlLiteral(_value));

        hasFilters = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>