<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmReport_T5a</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmReport_T5a extends RHRMReport implements BatchRetryable
{
    RHRMOrderTable           orderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1720";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1820";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        orderTable = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMOrderTrans           orderTrans;
        RPayHistory              payHistory;
        int                      countPass = #Value4;
        RHRMWage                 riseWage;

        wordDocument.insertFieldValue(#CI_Name,                CompanyInfo::find().Name);

        wordDocument.insertFieldValue(#CI_CodeOKPO_RU,         CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), orderTable.TransDate));

        wordDocument.insertFieldValue(#OT_OrderNum,            orderTable.OrderNum);

        wordDocument.insertFieldValue(#OT_TransDate,           this.dateInNumber(orderTable.TransDate));

        wordDocument.insertFieldValue(#OTR_title,              OfficialsTable_RU::findDirector().Title);
        wordDocument.insertFieldValue(#OTR_name,               OfficialsTable_RU::findDirector().Name);

        wordDocument.tableGoToCell(countPass, 1, #Table);

        while select orderTrans
            where orderTrans.OrderTableRecId == orderTable.RecId
        {
            wordDocument.tableGoToCell(countPass, 1);
            wordDocument.tableInsertRowsBelow();

            wordDocument.tableInsertValue(countPass,1, orderTrans.emplName());

            wordDocument.tableInsertValue(countPass, #Value2, orderTrans.EmplId);

            payHistory = RPayHistory::findLastSignOnMove(orderTrans.EmplId, orderTrans.StartDate, orderTrans.RecId);
            wordDocument.tableInsertValue(countPass, #Value3, payHistory.organizationDescription());

            wordDocument.tableInsertValue(countPass, #Value4, orderTrans.organizationDescription());

            wordDocument.tableInsertValue(countPass, #Value5, this.positionAndCategory(payHistory.titleId(), payHistory.TradeCategory));

            wordDocument.tableInsertValue(countPass, #Value6, this.positionAndCategory(orderTrans.titleId(), orderTrans.TradeCategory));

            riseWage     = orderTrans.RiseInWages + orderTrans.RiseInWages2 + orderTrans.RiseInWages3;

            wordDocument.tableInsertValue(countPass,
                                          #Value7,
                                          (riseWage ?
                                           num2str(orderTrans.ValueSum, 0, #Value2, 1, 0) + "@GLS116882" + " " + num2str(riseWage, 0, #Value2, 1, 0) :
                                           num2str(orderTrans.ValueSum, 0, #Value2, 1, 0)));

            wordDocument.tableInsertValue(countPass, #Value8, this.dateInNumber(orderTrans.StartDate));

            wordDocument.tableInsertValue(countPass, #Value9, this.dateInNumber(orderTrans.EndDate));
            wordDocument.tableInsertValue(countPass, #Value10, orderTrans.AttachDocNum);
            wordDocument.tableInsertValue(countPass, #Value11, this.dateInNumber(orderTrans.AttachDocDate));
            countPass++;
        }
        wordDocument.tableDeleteRow();
        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>