<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TSWorkflowCancelManager</c> class is used for recalling a timesheet
///    workflow.
/// </summary>
public class TSWorkflowCancelManager extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// If invoked from a form (<c>_args</c> contain a valid caller), delegates the execution to <c>super(_args)</c>.
    /// If Invoked from a service context (<c>_args.parmObject() is TSWorkflowControlContext</c>) calls the workflow cancel
    /// and <c>updateDocument()</c> routines to complete the cancel request.
    /// </summary>
    /// <param name="_args">
    /// If called from a form, an <c>Args</c> instance with <c>_args.caller()</c> not null.
    /// If called from a service context, an <c>Args</c> instance with <c>_args.parmObject() is TSWorkflowControlContext</c>.
    /// </param>
    public void run(Args _args)
    {
        // Called from a form
        if (_args.caller())
        {
            super(_args);
        }
        // Called from a service
        else if (_args.parmObject()  is TSWorkflowControlContext)
        {
            var context = _args.parmObject() as TSWorkflowControlContext;
            WorkflowCancelManager::cancelWorkflows(TSWorkflowCancelManager::getWorkflowsToCancel(_args), context.parmWorkflowComment());
            this.updateDocument(_args);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overridden in a derived class to perform the necessary application logic when the workflow cancel
    ///    action is taken from the UI.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>WorkflowCancelManager</c> class.
    /// </param>
    public void updateDocument(Args _args)
    {
        var timesheetEntryForm = TSWorkflowCancelManager::getTsITimesheetEntryFromArgs(_args);

        if (timesheetEntryForm)
        {
            timesheetEntryForm.workflowActionCompleted();
        }
        else
        {
            var timesheetEntryMobileForm = TsWorkflowCancelManager::getTsITimesheetEntryMobileFromArgs(_args);
            if (timesheetEntryMobileForm)
            {
                timesheetEntryMobileForm.workflowActionCompleted();
            }
        }
        

    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelDocument</Name>
				<Source><![CDATA[
    private boolean canCancelDocument(List list)
    {
        boolean         result          = true;
        ListEnumerator  listEnumerator  = list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            var workflowCorrelationId = listEnumerator.current();
            var workflowTable = TSWorkflowCancelManager::findRootWorkflow(workflowCorrelationId);

            if (workflowTable.ContextTableId == tablenum(TSTimesheetTable))
            {
                var tsTimesheetTable = TSTimesheetTable::findRecId(workflowTable.ContextRecId);
                if (tsTimesheetTable.canCancelWorkflow() == false)
                {
                    error(strFmt("@Timesheet:Timesheet_Workflow_CancelError", tsTimesheetTable.TimesheetNbr));
                    result = false;
                }
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancelList</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Wrapper around getWorkflowsToCancel
    /// </summary>
    /// <param name="_args">
    ///    If called from a form, an <c>Args</c> instance with <c>_args.caller()</c> not null.
    /// </param>
    /// <returns>
    ///    The list of workflow correlation IDs to cancel.
    /// </returns>
    public static List getWorkflowsToCancelList(Args _args)
    {
        List list = TSWorkflowCancelManager::getWorkflowsToCancel(_args);
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of workflow correlation IDs to cancel.
    ///    If called from a form, delegates the list generation to <c>WorkflowCancelManager::getWorkflowsToCancel()</c>.
    ///    If called from a service context, retrieves the correlation ID from the <c>TSWorkflowControlContext</c> parameter.
    /// </summary>
    /// <param name="_args">
    ///    If called from a form, an <c>Args</c> instance with <c>_args.caller()</c> not null.
    ///    If called from a service context, an <c>Args</c> instance with <c>_args.parmObject() is TSWorkflowControlContext</c>.
    /// </param>
    /// <returns>
    ///    The list of workflow correlation IDs to cancel.
    /// </returns>
    private static List getWorkflowsToCancel(Args _args)
    {
        List result;

        // Called from a form
        if (_args.caller())
        {
            result = WorkflowCancelManager::getWorkflowsToCancel(_args.caller());
        }
        // Called from a service
        else if (_args.parmObject() is TSWorkflowControlContext)
        {
            var context = _args.parmObject() as TSWorkflowControlContext;
            result = new List(Types::Guid);

            WorkflowTrackingStatusTable trackingStatusTable = context.parmWorkflowTrackingStatusTable();
            if (trackingStatusTable.RecId != 0)
            {
                result.addEnd(trackingStatusTable.CorrelationId);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootWorkflow</Name>
				<Source><![CDATA[
    private static SysWorkflowTable findRootWorkflow(WorkflowCorrelationId _workflowCorrelationId)
    {
        var workflowTable = SysWorkflowTable::find(_workflowCorrelationId);

        if (!workflowTable)
        {
            throw error("@SYS116100");
        }

        var rootCorrelationId = workflowTable.RootCorrelationId;

        if (rootCorrelationId != _workflowCorrelationId)
        {
            workflowTable = SysWorkflowTable::find(rootCorrelationId);
            if (!workflowTable)
            {
                throw error("@SYS116092");
            }
        }

        return workflowTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTsITimesheetEntryFromArgs</Name>
				<Source><![CDATA[
    private static TSITimesheetEntry getTsITimesheetEntryFromArgs(Args _args)
    {
        if (_args.caller() is TSITimesheetEntry)
        {
            return _args.caller();
        }
        else if (_args.caller() is WorkflowIDropDialog)
        {
            var dropDialogForm = _args.caller() as WorkflowIDropDialog;

            if (dropDialogForm.getCallingForm().args().caller() is TSITimesheetEntry)
            {
                return dropDialogForm.getCallingForm().args().caller();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTsITimesheetEntryMobileFromArgs</Name>
				<Source><![CDATA[
    private static TSITimesheetEntryMobile getTsITimesheetEntryMobileFromArgs(Args _args)
    {
        if (_args.caller() is TSITimesheetEntryMobile)
        {
            return _args.caller();
        }
        else if (_args.caller() is WorkflowIDropDialog)
        {
            var dropDialogForm = _args.caller() as WorkflowIDropDialog;

            if (dropDialogForm.getCallingForm().args().caller() is TSITimesheetEntryMobile)
            {
                return dropDialogForm.getCallingForm().args().caller();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TSWorkflowCancelManager construct()
    {
        return new TSWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        List list                   = TSWorkflowCancelManager::getWorkflowsToCancelList(_args);
        var  workflowCancelManager  = TSWorkflowCancelManager::construct();

        if (workflowCancelManager.canCancelDocument(list))
        {
            workflowCancelManager.run(_args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>