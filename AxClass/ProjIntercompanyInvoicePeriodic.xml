<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjIntercompanyInvoicePeriodic</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// This class generates customer invoices automatically for intercompany project transactions.
/// </summary>
class ProjIntercompanyInvoicePeriodic extends RunBaseBatch implements BatchRetryable
{
    Dialog                              dialogRunBase;
    boolean                             includeHours;
    DialogField                         includeHoursField;
    boolean                             includeExpenses;
    DialogField                         includeExpensesField;
    boolean                             includeVendorInvoices;
    DialogField                         includeVendorInvoicesField;
    boolean                             includeProjectAdvancedJournals;
    DialogField                         includeProjectAdvancedJournalsField;
    CompanyId                           borrowingLE;
    DialogField                         dflBorrowingLE;
    ProjIntercompanyAutoInvoiceGrouping invoiceGrouping;
    DialogField                         dflinvoiceGrouping;

    Map                                 transToInvoiceMap;
    QueryRun                            projectQueryRun;

    private FormStringControl formStringControl;
    private FormBuildControl formBuildControl;
    private FormBuildStringControl formBuildStringControl;
    private SysLookupMultiSelectCtrl sysMultiselectCompany;
    container conSelectedCompanies;

    private boolean projOpsIntegEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

    #define.CurrentVersion(3)
    #localMacro.CurrentList
    includeHours,
    includeExpenses,
    includeVendorInvoices,
    borrowingLE,
    conSelectedCompanies,
    invoiceGrouping,
    includeProjectAdvancedJournals
    #endmacro

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>createCustomerInvoice</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates an intercompany customer invoice from a list of transactions.
    /// </summary>
    /// <param name="_origtransList">
    /// A <c>List</c> of <c>ProjIntercompanyInvoiceOrigTrans</c> entries to be invoiced.
    /// </param>
    protected void createCustomerInvoice(List _origtransList)
    {
        ProjIntercompanyCustomerInvoiceCreator  invoiceCreator;
        if (this.IsInBatch() && ProjParameters::find().UseRecurrenceBatchTimezone == NoYes::Yes)
        {
            BatchJob batchJob;
            select firstOnly RecurrenceData from batchJob where batchJob.RecId == BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
            invoiceCreator = ProjIntercompanyCustomerInvoiceCreator::construct(_origtransList, DateTimeUtil::getSystemDate(SysRecurrence::getRecurrenceTimezone(batchJob.RecurrenceData)));
        }
        else
        {
            invoiceCreator = ProjIntercompanyCustomerInvoiceCreator::construct(_origtransList, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        invoiceCreator.createInvoice();
    }

]]></Source>
      </Method>
      <Method>
        <Name>initializeFromArgs</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes class variables based on the <c>Args</c> object provided when calling the class.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object.
    /// </param>
    protected void initializeFromArgs(Args _args)
    {
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns an object that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// An object that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialogRunBase = super();
        DialogGroup  selectTransactionsGroup = dialogRunBase.addGroup("@FPK270095");
        if (projOpsIntegEnabled)
        {
            formBuildControl = dialogRunBase.formBuildDesign().control(selectTransactionsGroup.name());
            formBuildStringControl = formBuildControl.addControl(FormControlType::String, "@SYS13342");
            formBuildStringControl.label("@SYS13342");
        }
        else
        {
            dflBorrowingLE = dialogRunBase.addFieldValue(extendedTypeStr(SelectableDataArea), borrowingLE);
            selectTransactionsGroup.addFieldname(dflBorrowingLE.name());
        }
     
        dflinvoiceGrouping = dialogRunBase.addFieldValue(enumStr(ProjIntercompanyAutoInvoiceGrouping), invoiceGrouping);
        selectTransactionsGroup = dialogRunBase.addGroup("@GLS360149");
        selectTransactionsGroup.addFieldname(dflinvoiceGrouping.name());

        if (!projOpsIntegEnabled)
        {
            includeHoursField = dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), includeHours, "@GLS360150", "@GLS360151");
            selectTransactionsGroup.addFieldname(includeHoursField.name());

            includeExpensesField = dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), includeExpenses, "@GLS360087", "@GLS360088");
            selectTransactionsGroup.addFieldname(includeExpensesField.name());

            includeVendorInvoicesField = dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), includeVendorInvoices, "@SYS313555", "@SYS4001482");
            selectTransactionsGroup.addFieldname(includeVendorInvoicesField.name());
        }

        includeProjectAdvancedJournalsField = dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), includeProjectAdvancedJournals, "@Proj:ProjectAdvancedJournalLine", "@Proj:IncludeProjectAdvancedJournalTransactionsInQuery");
        selectTransactionsGroup.addFieldname(includeProjectAdvancedJournalsField.name());

        return dialogRunBase;
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialogPostRun</Name>
        <Source><![CDATA[
    /// <summary>
    /// Dialog post run
    /// </summary>
    /// <param name="_dialogPostRun">The <c>Runbase</c> dialog object.</param>
    public void dialogPostRun(DialogRunbase _dialogPostRun)
    {
        if (projOpsIntegEnabled)
        {
            Query queryMultiSelectDataAreaID = new Query();
            QueryBuildDataSource queryBuildDataSource = queryMultiSelectDataAreaID.addDataSource(tableNum(CompanyInfo));
            super(_dialogPostRun);
            
            queryBuildDataSource.fields().addField(fieldNum(CompanyInfo, DataArea));
            queryBuildDataSource.fields().addField(fieldNum(CompanyInfo, Name));
       
            LedgerInterCompany ledgerInterCompany;
            while select DestinationCompany from ledgerInterCompany
                  where ledgerInterCompany.OriginatingCompany == curExt()
            {
                queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(ledgerInterCompany.DestinationCompany);
            }

            FormRun dialogFormRun = _dialogPostRun.dialogForm().formRun();
            if (dialogFormRun)
            {
                sysMultiselectCompany = SysLookupMultiSelectCtrl::constructWithQuery(dialogFormRun, dialogFormRun.design().control(formBuildStringControl.id()), queryMultiSelectDataAreaID);
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>getFromDialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Stores the value entered by users into local variables.
    /// </summary>
    /// <returns>
    /// True if the values were stored successfully; otherwise false.
    /// </returns>
    boolean getFromDialog()
    {
        if (!projOpsIntegEnabled)
        {
            includeHours = includeHoursField.value();
            includeExpenses = includeExpensesField.value();
            includeVendorInvoices = includeVendorInvoicesField.value();
            borrowingLE = dflBorrowingLE.value();
        }
        else
        {
            conSelectedCompanies = sysMultiselectCompany.getSelectedFieldValues();
        }
        includeProjectAdvancedJournals = includeProjectAdvancedJournalsField.value();
        invoiceGrouping = dflinvoiceGrouping.value();
        return super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>initQuery</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes the query to be used for fetching records to be processed.
    /// </summary>
    protected void initQuery()
    {
        QueryBuildDataSource qbds;
        Query                query = new Query();

        query.allowCrossCompany(true);
        qbds = query.addDataSource(tableNum(ProjTable));
        qbds.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
        qbds.addRange(fieldNum(ProjTable, ProjId));

        projectQueryRun = new QueryRun(query);
    }

]]></Source>
      </Method>
      <Method>
        <Name>insertMap</Name>
        <Source><![CDATA[
    private void insertMap(ProjIntercompanyInvoiceOrigTrans _origTrans)
    {
        List        origTransList;
        container   transKey;

        if (!transToInvoiceMap)
        {
            transToInvoiceMap = new Map(Types::Container, Types::Class);
        }

        switch (invoiceGrouping)
        {
            case ProjIntercompanyAutoInvoiceGrouping::LegalEntity:
                transKey = [_origTrans.getProjectDataAreaId()];
                break;

            case ProjIntercompanyAutoInvoiceGrouping::Project:
                transKey = [_origTrans.getProjectDataAreaId(), _origTrans.getProjectId()];
                break;
        }

        if (transToInvoiceMap.exists(transKey))
        {
            origTransList = transToInvoiceMap.lookup(transKey);
        }
        else
        {
            origTransList = new List(Types::Class);
        }
        origTransList.addEnd(_origTrans);
        transToInvoiceMap.insert(transKey, origTransList);
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    protected void new()
    {
        super();
        this.initQuery();
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, projectQueryRun.pack()];
    }

]]></Source>
      </Method>
      <Method>
        <Name>queryRun</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog and if a select menu item is added to a dialog.
    ///    Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in the
    ///    <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return projectQueryRun;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if ((projOpsIntegEnabled && !conSelectedCompanies) || (!projOpsIntegEnabled && !borrowingLE))
        {
            return;
        }
        ProjIntercompanyTransQueryParams queryParams = new ProjIntercompanyTransQueryParams();
        queryParams.parmIncludeExpenses(includeExpenses);
        queryParams.parmIncludeHours(includeHours);
        queryParams.parmIncludeVendorInvoiceLines(includeVendorInvoices);
        queryParams.parmIncludeProjAdvancedJournalLines(includeProjectAdvancedJournals);
        queryParams.parmProjectQuery(projectQueryRun.query());
       
        if (!projOpsIntegEnabled)
        {
            queryParams.parmBorrowingLE(borrowingLE);
            this.createTransQuery(queryParams);
        }
        else
        {
            int conCount = 1;
            while(conCount <= conLen(conSelectedCompanies))
            {
                borrowingLE = conPeek(conSelectedCompanies, conCount);
                queryParams.parmBorrowingLE(borrowingLE);
                this.createTransQuery(queryParams);
                conCount++;
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>showQueryValues</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> class.If you change the return value to false, the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createTransQuery</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the transaction query to be used for creating invoice.
    /// </summary>
    /// <param name = "_queryParams">Hold the query parameters.</param>
    protected void createTransQuery(ProjIntercompanyTransQueryParams _queryParams)
    {
        ProjIntercompanyTransQuery transQuery = ProjIntercompanyTransQuery::construct(_queryParams);
        List transList = transQuery.getTransList();
        ListEnumerator transListEnumerator = transList.getEnumerator();
        transToInvoiceMap = null;
        ProjIntercompanyInvoiceOrigTrans origTrans;
        while (transListEnumerator.moveNext())
        {
            origTrans = transListEnumerator.current();
            this.insertMap(origTrans);
        }

        MapEnumerator  transToInvoiceEnum;
        if (transToInvoiceMap)
        {
            transToInvoiceEnum = transToInvoiceMap.getEnumerator();
            while (transToInvoiceEnum.moveNext())
            {
                this.createCustomerInvoice(transToInvoiceEnum.currentValue());
            }
        }

    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);
        container   packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQueryRun] = packedClass;
                projectQueryRun = new QueryRun(packedQueryRun);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>ProjIntercompanyInvoicePeriodic</c> class.
    /// </summary>
    /// <returns>
    /// Instance of <c>ProjIntercompanyInvoicePeriodic</c> class.
    /// </returns>
    public static ProjIntercompanyInvoicePeriodic construct()
    {
        return new ProjIntercompanyInvoicePeriodic();
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4005083";
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        ProjIntercompanyInvoicePeriodic    projIntercompanyInvoicePeriodic = ProjIntercompanyInvoicePeriodic::construct();

        projIntercompanyInvoicePeriodic.initializeFromArgs(_args);

        if (projIntercompanyInvoicePeriodic.prompt())
        {
            projIntercompanyInvoicePeriodic.runOperation();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>