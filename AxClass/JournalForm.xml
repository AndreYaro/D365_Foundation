<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The classes which are post fixed with Form, FormTable and FormTrans contains the code used to
///    control and manage the header and line forms.
/// </summary>
// This class is base for the classes that controls the forms
abstract class JournalForm
{
    JournalTableData            journalTableData;

    ImageListAppl_journal       imageListAppl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    // This method is called from the infolog to find the actual journaltrans
    abstract public void findRecord(JournalTransMap _journalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalFormTable</Name>
				<Source><![CDATA[
    abstract JournalForm getJournalFormTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    JournalTableMap journalTable()
    {
        return journalTableData.journalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTableData</Name>
				<Source><![CDATA[
    JournalTableData journalTableData(JournalTableData _data = journalTableData)
    {
        journalTableData = _data;
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransData</Name>
				<Source><![CDATA[
    JournalTransData journalTransData(JournalTransData _data = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        imageListAppl = ImageListAppl_journal::newList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainCancel</Name>
				<Source><![CDATA[
    // This method is called when the cancel button has been pressed in a journal runbase dialog.
    abstract public void runbaseMainCancel(JournalId _journalId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    // This method is called when a journal runbase function is finished
    abstract public void runbaseMainEnd(
        JournalRunbaseCallbackable  _runBaseBatch,
        boolean                     _fromCatchError)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainStart</Name>
				<Source><![CDATA[
    // This method is called when starting a journal runbase function.
    abstract public void runbaseMainStart()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCacheTransferJournal</Name>
				<Source><![CDATA[
    protected void updateFormCacheTransferJournal(JournalId _journalIdTransfer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromArgs</Name>
				<Source><![CDATA[
    // This method returns the current journalForm class
    static JournalForm fromArgs(Args _args)
    {
        Object  object;

        if (! _args || !_args.caller())
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        object = _args.caller();

        return object.journalForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>