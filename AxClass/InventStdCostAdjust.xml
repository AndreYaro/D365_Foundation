<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostAdjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventStdCostAdjust
{
    InventTable                         inventTable;
    CostPrice                           newPcsPrice;
    InventDim                           inventDimCriteria;
    InventStdCostRevaluationVoucherId   voucherId;
    TransDate                           transDate;
    InventItemPrice                     inventItemPrice;
    InventItemPrice                     preInventItemPrice;
    NumberSequenceCode                  voucherSequence;
    InventAdjustPost                    inventAdjustPost;
    LedgerVoucher                       ledgerVoucher;
    boolean                             priceActivation;
    InventTransCurrency_RU              inventTransCurrency;
    Map                                 inventTransCache;

    private boolean skipInventTransOrigin;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustStdCostFinancial</Name>
				<Source><![CDATA[
    protected void adjustStdCostFinancial(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventSum       _inventSum)
    {
        InventTrans         inventTrans;
        InventDim           inventDim;
        CostAmount          amountLeft;
        // <GEERU>
        RecordSortedList    inventTransRSL;
        // </GEERU>
        StatusIssue         statusIssue;
        StatusReceipt       statusReceipt;

        Qty qtyLeft = _inventSum.PostedQty;

        if (_inventSum.PostedQty)
        {
            // <GEERU>
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
            // </GEERU>
                amountLeft = CurrencyExchangeHelper::amount(newPcsPrice * qtyLeft) - _inventSum.PostedValue;
            // <GEERU>
            }
            else
            {
                amountLeft = CurrencyExchangeHelper::amount(newPcsPrice * qtyLeft, CompanyInfoHelper::secondaryCurrency_RU()) - _inventSum.PostedValueSecCur_RU;
            }
            // </GEERU>
            CostPrice adjustPcsPrice = amountLeft / qtyLeft;

            // <GEERU>
            if (inventTransCache)
            {
                if (inventTransCache.exists(_inventDimCriteria))
                {
                    inventTransRSL = inventTransCache.lookup(_inventDimCriteria);

                    inventTransRSL.first(inventTrans);
                    do
                    {
                        [ qtyLeft, amountLeft ] = this.adjustStdCostFinancial_Trans(inventTrans, adjustPcsPrice, qtyLeft, amountLeft);
                    }
                    while (inventTransRSL.next(inventTrans));

                    inventTransRSL = null;
                }
                else
                {
                    inventTransRSL = new RecordSortedList(tablenum(InventTrans));
                    inventTransRSL.sortOrder(fieldnum(InventTrans, RecId));
                }
            }
            // </GEERU>

            if ( _inventSum.PostedQty > 0)
            {
                statusReceipt = StatusReceipt::Purchased;
                statusIssue = StatusIssue::None;
            }
            else
            {
                statusReceipt = StatusReceipt::None;
                statusIssue = StatusIssue::Sold;
            }

            if (skipInventTransOrigin)
            {
                while select forupdate inventTrans
                order by DateStatus desc
                where inventTrans.ItemId == inventTable.ItemId
                    && inventTrans.StatusReceipt == statusReceipt
                    && inventTrans.StatusIssue == statusIssue
                    && inventTrans.ValueOpen == InventTransOpen::Yes
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,_inventDimCriteria,_inventDimParmCriteria)
                {
                    if (!qtyLeft)
                    {
                        break;
                    }

                    if (inventTrans.DateFinancial > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        throw error("@SYS111966");
                    }

                    [ qtyLeft, amountLeft ] = this.adjustStdCostFinancial_Trans(inventTrans, adjustPcsPrice, qtyLeft, amountLeft);

                    // <GEERU>
                    if (inventTransRSL)
                    {
                        inventTransRSL.ins(inventTrans, true);
                    }
                    // </GEERU>
                }
            }
            else
            {
                InventTransOrigin inventTransOrigin;
                // There is no index on DateFinancial, but DateStatus and equals DateFinancial for financially updated records,
                // and then we can use the index StatusItemIdx
                while select firstFast forupdate inventTrans
                order by DateStatus desc
                where inventTrans.ItemId == inventTable.ItemId
                    && inventTrans.StatusReceipt == statusReceipt
                    && inventTrans.StatusIssue == statusIssue
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,_inventDimCriteria,_inventDimParmCriteria)
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
                {
                    if (inventTrans.valueOpen == InventTransOpen::No)
                    {
                        continue;
                    }

                    if (!qtyLeft)
                    {
                        break;
                    }

                    if (inventTrans.DateFinancial > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        throw error("@SYS111966");
                    }

                    [ qtyLeft, amountLeft ] = this.adjustStdCostFinancial_Trans(inventTrans, adjustPcsPrice, qtyLeft, amountLeft);

                    // <GEERU>
                    if (inventTransRSL)
                    {
                        inventTransRSL.ins(inventTrans, true);
                    }
                    // </GEERU>
                }
            }
            // <GEERU>
            if (inventTransCache && inventTransRSL)
            {
                inventTransCache.insert(_inventDimCriteria, inventTransRSL);
            }
            // </GEERU>
            if (qtyLeft || amountLeft)
            {
                CostManagementInstrumentationLogger logger =  CostManagementInstrumentationLogger::createLogger(classStr(InventStdCostAdjust));

                RecId inventTableRecId = InventTable::find(_inventSum.ItemId).RecId;
                str inventDimIdStr = _inventDimCriteria.getInventDimFieldValueOnInventDimParm(_inventDimParmCriteria);
                using (var inventModelTypeActivityContext = logger.stdCostAdjustActivities().adjustStdCostFinancial(
                    classStr(InventStdCostAdjust),
                    inventDimIdStr,
                    inventTableRecId,
                    _inventSum.PostedQty,
                    newPcsPrice,
                    qtyLeft,
                    amountLeft))
                {
                    infolog.add(Exception::Error, strFmt("@SCM:RemainingAfterInventoryTransactionsAdjusted", inventDimIdStr, _inventSum.ItemId, _inventSum.PostedQty, qtyLeft, amountLeft));
                    throw error(strFmt("@SYS19378",funcName()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustStdCostFinancial_Trans</Name>
				<Source><![CDATA[
    private container adjustStdCostFinancial_Trans( InventTrans _inventTrans,
                                                    CostPrice   _adjustPcsPrice,
                                                    Qty         _qtyLeft,
                                                    CostAmount  _amountLeft)
    {
        Qty                 qtyLeft    = _qtyLeft;
        CostAmount          amountLeft = _amountLeft;

        this.initVoucher();
        if (abs(_inventTrans.Qty) > abs(qtyLeft))
        {
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
                _inventTrans.updateSplit(qtyLeft);
            }
            else
            {
                _inventTrans.updateSplitSecCur_RU(qtyLeft);
            }
        }
        InventSettlement inventSettlement;
        InventCostPriceRevaluationHelper helper = new InventCostPriceRevaluationHelper();

        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            helper.parmPreInventSettlement(InventSettlement::GetPreInventSettlementAccordingToPreInventCostTrans(preInventItemPrice, _inventTrans));
            inventSettlement = helper.updateStdCostPriceRevaluationFin(_inventTrans,
                                                                        inventTable,
                                                                        voucherId,
                                                                        CurrencyExchangeHelper::amount(_inventTrans.Qty * _adjustPcsPrice, inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? CompanyInfoHelper::standardCurrency() : CompanyInfoHelper::secondaryCurrency_RU()),
                                                                        transDate,
                                                                        null,
                                                                        false,
                                                                        inventTransCurrency);
        }
        else
        {
            inventSettlement = _inventTrans.updateStdCostPriceRevaluationFin(inventTable,
                                                                             voucherId,
                                                                             CurrencyExchangeHelper::amount(_inventTrans.Qty * _adjustPcsPrice, inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? CompanyInfoHelper::standardCurrency() : CompanyInfoHelper::secondaryCurrency_RU()),
                                                                             transDate,
                                                                             null,
                                                                             false,
                                                                             inventTransCurrency);
        }

        if (inventSettlement.CostAmountAdjustment)
        {
            this.postAndInsertSettlement(inventSettlement);
            amountLeft -= inventSettlement.CostAmountAdjustment;
        }

        qtyLeft -= _inventTrans.Qty;

        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            inventSettlement = helper.updateStdCostPriceRevaluationFin(_inventTrans,
                                                                        inventTable,
                                                                        voucherId,
                                                                        amountLeft - CurrencyExchangeHelper::amount(_adjustPcsPrice * qtyLeft, inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? CompanyInfoHelper::standardCurrency() : CompanyInfoHelper::secondaryCurrency_RU()),
                                                                        transDate,
                                                                        null,
                                                                        true,
                                                                        inventTransCurrency);
        }
        else
        {
            inventSettlement = _inventTrans.updateStdCostPriceRevaluationFin(inventTable,
                                                                             voucherId,
                                                                             amountLeft - CurrencyExchangeHelper::amount(_adjustPcsPrice * qtyLeft, inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? CompanyInfoHelper::standardCurrency() : CompanyInfoHelper::secondaryCurrency_RU()),
                                                                             transDate,
                                                                             null,
                                                                             true,
                                                                             inventTransCurrency);
        }

        if (inventSettlement.CostAmountAdjustment)
        {
            this.postAndInsertSettlement(inventSettlement);
            amountLeft -= inventSettlement.CostAmountAdjustment;
        }

        _inventTrans.update();

        return [ qtyLeft, amountLeft ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustStdCostPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust physical inventory transaction to the new standard cost.
    /// </summary>
    /// <param name="_inventDimCriteria">
    /// An InventDim specifying the financial dimension to adjust.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// The financial inventory dimension parameters to the item dimension group.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The transaction cannot be adjusted if one of the transaction is posted at a later date.
    /// </exception>
    protected void adjustStdCostPhysical(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;
        CostAmount          costAmount;
        Qty                 qty;

        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(classStr(InventStdCostAdjust));

        using (var activityContext = logger.inventTrans().updateInventTransContext())
        {
            logger.logInformation(strFmt("Updates the InventTrans record for Item with RecID: %1", inventTable.RecId));

            while select forupdate inventTrans
                where inventTrans.ItemId == inventTable.ItemId
                    && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
                    || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
                join ReferenceId from inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,_inventDimCriteria,_inventDimParmCriteria)
            {
                // Skip physical inventory adjustment for project transaction when reference Id is not available, in order to activate pending price successfully.
                if (inventTrans.ProjId && !inventTransOrigin.ReferenceId)
                {                    
                    continue;
                }

                if (inventTrans.DatePhysical > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    throw error("@SYS104478");
                }
                this.initVoucher();
                // <GEERU>
                InventSettlement inventSettlement;

                if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
                {
                    InventCostPriceRevaluationHelper helper = new InventCostPriceRevaluationHelper();
                    helper.parmPreInventSettlement(InventSettlement::GetPreInventSettlementAccordingToPreInventCostTrans(preInventItemPrice, inventTrans));
                    inventSettlement = helper.updateStdCostPriceRevaluationPhy(inventTrans,
                                                                            inventTable,
                                                                            voucherId,
                                                                            inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                                                            CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice) - inventTrans.CostAmountPhysical :
                                                                            CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice, CompanyInfoHelper::secondaryCurrency_RU()) - inventTrans.CostAmountSecCurPhysical_RU,
                                                                            transDate,
                                                                            null,
                                                                            inventTransCurrency);
                }
                else
                {
                    inventSettlement = inventTrans.updateStdCostPriceRevaluationPhy(inventTable,
                                                                                    voucherId,
                                                                                    inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                                                                    CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice) - inventTrans.CostAmountPhysical :
                                                                                    CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice, CompanyInfoHelper::secondaryCurrency_RU()) - inventTrans.CostAmountSecCurPhysical_RU,
                                                                                    transDate,
                                                                                    null,
                                                                                    inventTransCurrency);
                    // </GEERU>
                }

                if (inventSettlement.CostAmountAdjustment)
                {
                    this.setInventSettlement(inventSettlement,inventTrans);
                    this.postAndInsertSettlement(inventSettlement);
                    CostAmount curCostAmount = inventSettlement.CostAmountAdjustment;
                }

                qty += inventTrans.Qty;
                // <GEERU>
                costAmount += inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? inventTrans.CostAmountPhysical : inventTrans.CostAmountSecCurPhysical_RU;
                // </GEERU>

                inventTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdjust</Name>
				<Source><![CDATA[
    protected void initAdjust(InventDim   _inventDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransCache_RU</Name>
				<Source><![CDATA[
    final public Map initInventTransCache_RU(Map _inventTransCache = null)
    {
        if (_inventTransCache)
        {
            inventTransCache = _inventTransCache;
        }
        else
        {
            inventTransCache = new Map(Types::Record, Types::Class);
        }

        return inventTransCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucher</Name>
				<Source><![CDATA[
    protected void initVoucher()
    {
        if (!voucherId)
        {
            ttsbegin;
            NumberSeq numberSeq;
            
            numberSeq = InventModelType_StdCost::getInventStdCostRevaluationNumberSeq();

            voucherId           = numberSeq.num();
            transDate           = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            voucherSequence = numberSeq.parmNumberSequenceCode();

            TransactionLog::create(TransactionLogType::InventStdCostChange, voucherId);
            ttscommit;
        }

        if (voucherId)
        {
            if (priceActivation)
            {
                inventAdjustPost = InventAdjustPost_PriceActivation::construct(voucherId,
                                                        transDate,
                                                        InventAdjustmentSpec::Total,
                                                        LedgerTransTxt::InventStdCostRevaluation,
                                                        inventItemPrice                   
                                                       );
            }
            else
            {
                // <GEERU>
                inventAdjustPost = InventAdjustPost::newFromCurrency_RU(voucherId,
                // </GEERU>
                                                    transDate,
                                                    InventAdjustmentSpec::Total,
                                                    // <GEERU>
                                                    LedgerTransTxt::InventStdCostRevaluation,
                                                    inventTransCurrency);
                                                   // </GEERU>
            }

            // Initialize the ledgerVoucher
            inventAdjustPost.parmVoucherSequence(voucherSequence);

            if (!ledgerVoucher)
            {
                ledgerVoucher = inventAdjustPost.initLedgerVoucherExt();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockInventSum</Name>
				<Source><![CDATA[
    protected void lockInventSum(
        InventDim     _inventDimCriteria,
        InventDimParm _inventDimParmCriteria)
    {
        InventDim       inventDim;
        InventSum       inventSum;

        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            select pessimisticlock InventDimId from inventSum
            where inventSum.ItemId == inventTable.ItemId
               && inventSum.Closed == NoYes::No
               && inventSum.IsExcludedFromInventoryValue == NoYes::No
               && #InventDimFieldsFilter(inventSum, _inventDimCriteria, _inventDimParmCriteria);
        }
        else
        {
            select pessimisticlock InventDimId from inventSum
            where inventSum.ItemId == inventTable.ItemId
               && inventSum.Closed == NoYes::No
               && inventSum.IsExcludedFromInventoryValue == NoYes::No
            #inventDimExistsJoin(inventSum.inventDimId,inventDim,_inventDimCriteria,_inventDimParmCriteria);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemPrice</Name>
				<Source><![CDATA[
    public InventItemPrice parmInventItemPrice(InventItemPrice _inventItemPrice = inventItemPrice)
    {
        inventItemPrice = _inventItemPrice;

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPcsPrice</Name>
				<Source><![CDATA[
    public CostPrice parmNewPcsPrice(CostPrice _newPcsPrice = newPcsPrice)
    {
        newPcsPrice = _newPcsPrice;

        return newPcsPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceActivation</Name>
				<Source><![CDATA[
    public boolean parmPriceActivation(boolean _priceActivation = priceActivation)
    {
        priceActivation = _priceActivation;

        return priceActivation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public InventStdCostRevaluationVoucherId parmVoucher()
    {
        return voucherId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the ledger postings of the standard cost adjustment.
    /// </summary>
    /// <remarks>
    ///    This method triggers the <c>inventCostRevaluate</c> class.
    /// </remarks>

    protected void post()
    {
        if (voucherId)
        {
            // Now call into the inventCostRevaluate engine
            if ( inventItemPrice )
            {
                // <GEERU>
                InventCostRevaluate::revaluateFromStdCostChange(inventItemPrice, ledgerVoucher, inventTransCurrency);
                // </GEERU>
            }

            inventAdjustPost.updateNow(ledgerVoucher, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAndInsertSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts and inserts a <c>InventSettlement</c> record.
    /// </summary>
    /// <param name="_inventSettlment">
    /// A <c>InventSettlement</c> record to be posted and inserted.
    /// </param>
    private void postAndInsertSettlement(InventSettlement _inventSettlment)
    {
        if (priceActivation)
        {
            _inventSettlment.post(ledgerVoucher);
        }
        _inventSettlment.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSettlement</Name>
				<Source><![CDATA[
    protected void setInventSettlement(
        InventSettlement    _inventSettlement,
        InventTrans         _inventTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        if (inventTable.inventItemType().mustInventBeControlled())
        {
            ttsbegin;
            this.updateStdCost();
            this.post();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcludedFromInventoryValueTransOriginExists</Name>
				<Source><![CDATA[
    private boolean isExcludedFromInventoryValueTransOriginExists(ItemId _itemId)
    {
        InventTransOrigin inventTransOrigin;

        select firstonly RecId from inventTransOrigin
            where inventTransOrigin.ItemId == _itemId
                && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::Yes;

        return inventTransOrigin.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStdCost</Name>
				<Source><![CDATA[
    protected void updateStdCost()
    {
        Query                   query;
        InventDimParm           inventDimParm;
        InventDimParm           inventDimParmCriteria;

        skipInventTransOrigin = InventAdjustStdCostFinancialImprovePerfFlight::instance().isEnabled() && ! this.isExcludedFromInventoryValueTransOriginExists(inventTable.ItemId);

        inventDimParmCriteria.initFromInventDim(inventDimCriteria);
        inventDimParmCriteria.ItemIdFlag = NoYes::Yes;
        InventDimGroupSetup::newInventTable(inventTable).inventDimParmActiveFinancialInventory(inventDimParm);
        this.lockInventSum(inventDimCriteria, inventDimParmCriteria);
        // Obtain the lock, record will not be used here
        // To ensure, that process will be blocked if a transaction is currently running
        preInventItemPrice = InventItemPrice::stdCostFindPrevLocked(inventItemPrice.ItemId, inventItemPrice.InventDimId, inventItemPrice.CreatedDateTime);
        query = InventSum::newQuery(query, inventTable.ItemId, inventDimCriteria, inventDimParmCriteria, inventDimParm);
        query.dataSourceTable(tableNum(InventSum)).addRange(fieldNum(InventSum, IsExcludedFromInventoryValue)).value(queryValue(NoYes::No));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            InventSum inventSum = queryRun.get(tableNum(InventSum));
            InventDim inventDim = queryRun.get(tableNum(InventDim));

            // Fields might not have been selected on the specified buffer
            inventDim.checkInvalidFieldAccess(false);

            this.initAdjust(inventDim);

            this.adjustStdCostPhysical(inventDim, inventDimParm);
            this.adjustStdCostFinancial(inventDim, inventDimParm, inventSum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStdCostAdjust construct()
    {
        return new InventStdCostAdjust();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDimStdCost</Name>
				<Source><![CDATA[
    public static InventStdCostAdjust newInventDimStdCost(
        InventTable            _inventTable,
        InventDim              _inventDim,
        InventItemPrice        _inventItemPrice,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostAdjust inventStdCostAdjust = InventStdCostAdjust::construct();

        inventStdCostAdjust.parmInventTable           (_inventTable);
        inventStdCostAdjust.parmInventDimCriteria     (_inventDim);
        // <GEERU>
        inventStdCostAdjust.parmNewPcsPrice           (_inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                                       _inventItemPrice.pcsPrice()                                :
                                                       _inventItemPrice.pcsPriceSecCur_RU());
                                                       // </GEERU>
        inventStdCostAdjust.parmInventItemPrice       (_inventItemPrice);
        // <GEERU>
        inventStdCostAdjust.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>

        return inventStdCostAdjust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStdCost</Name>
				<Source><![CDATA[
    public static InventStdCostAdjust newStdCost(
        InventTable            _inventTable,
        InventItemPrice        _inventItemPrice,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostAdjust    inventStdCostAdjust = InventStdCostAdjust::construct();

        inventStdCostAdjust.parmInventTable           (_inventTable);
        // <GEERU>
        inventStdCostAdjust.parmNewPcsPrice           (_inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                                       _inventItemPrice.pcsPrice()                                :
                                                       _inventItemPrice.pcsPriceSecCur_RU());
                                                       // </GEERU>
        inventStdCostAdjust.parmInventItemPrice       (_inventItemPrice);
        // <GEERU>
        inventStdCostAdjust.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>

        return inventStdCostAdjust;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>