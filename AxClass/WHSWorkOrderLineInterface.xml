<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkOrderLineInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkOrderLineInterface</c> class provides an abstraction for work order liens, such as <c>WHSWorkLine</c> records.
/// </summary>
public abstract class WHSWorkOrderLineInterface
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[

    /// <summary>
    /// Retrieves record buffer.
    /// </summary>
    /// <returns>Instance of <c>Common</c>.</returns>
    public abstract Common buffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkOrderInterface</Name>
				<Source><![CDATA[
    internal abstract WHSWorkOrderInterface createWorkOrderInterface()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    internal abstract WHSWorkId parmWorkId(WHSWorkId _workId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    internal abstract WHSLineNum parmLineNum(WHSLineNum _lineNum = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQtyWork</Name>
				<Source><![CDATA[
    internal abstract WHSInventQtyWork parmInventQtyWork(WHSInventQtyWork _handlingQty = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    internal abstract WMSLocationId parmWMSLocationId(WMSLocationId _wmsLocationId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocatedWMSLocationId</Name>
				<Source><![CDATA[
    internal abstract WMSLocationId parmAllocatedWMSLocationId(WMSLocationId _allocatedWmsLocationId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyRemain</Name>
				<Source><![CDATA[
    internal abstract WHSQtyRemain parmQtyRemain(WHSQtyRemain _qtyRemain = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyWork</Name>
				<Source><![CDATA[
    internal abstract WHSQtyWork parmQtyWork(WHSQtyWork _qtyWork = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQtyRemain</Name>
				<Source><![CDATA[
    internal abstract WHSInventQtyRemain parmInventQtyRemain(WHSInventQtyRemain _inventQtyRemain = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    internal abstract WHSLoadId parmLoadId(WHSLoadId _loadId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    internal abstract WHSOrderNum parmOrderNum(WHSOrderNum _orderNum = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkType</Name>
				<Source><![CDATA[
    internal abstract WHSWorkType parmWorkType(WHSWorkType _workType = WHSWorkType::None)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortCode</Name>
				<Source><![CDATA[
    internal abstract WMSSortCode parmSortCode(WMSSortCode _sortCode = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZoneId</Name>
				<Source><![CDATA[
    internal abstract WHSZoneId parmZoneId(WHSZoneId _zoneId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    internal abstract ItemId parmItemId(ItemId _itemId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    internal abstract InventDimId parmInventDimId(InventDimId _inventDimId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    internal abstract WHSHighestUnitId parmUnitId(WHSHighestUnitId _unitId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    internal abstract InventTransId parmInventTransId(InventTransId _inventTransId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginIdSupply</Name>
				<Source><![CDATA[
    internal InventTransOriginIdMarked parmInventTransOriginIdSupply(InventTransOriginIdMarked _inventTransOriginIdSupply = 0)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    internal abstract WHSShipmentId parmShipmentId(WHSShipmentId _shipmentId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    internal abstract WHSContainerId parmContainerId(WHSContainerId _containerId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadLineRefRecId</Name>
				<Source><![CDATA[
    internal abstract RefRecId parmLoadLineRefRecId(RefRecId _loadLineRefRecId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplenDemand</Name>
				<Source><![CDATA[
    internal abstract NoYes parmReplenDemand(NoYes _replenDemand = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailPhysical</Name>
				<Source><![CDATA[
    internal abstract InventQtyAvailPhysical parmAvailPhysical(InventQtyAvailPhysical _availPhysical = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFefoBatchId</Name>
				<Source><![CDATA[
    internal abstract WHSFEFOBatchId parmFefoBatchId(WHSFEFOBatchId _fefoBatchId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocatedLPId</Name>
				<Source><![CDATA[
    internal abstract WHSLocatedLPId parmLocatedLPId(WHSLocatedLPId _locatedLPId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtraInventHandlingQty</Name>
				<Source><![CDATA[
    internal abstract WHSExtraInventHandlingQty parmExtraInventHandlingQty(WHSExtraInventHandlingQty _extraInventHandlingQty = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutboundSortPosition</Name>
				<Source><![CDATA[
    internal abstract WHSOutboundSortPositionRecId parmOutboundSortPosition(WHSOutboundSortPositionRecId _outboundSortPosition = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderCommittedInventDimId</Name>
				<Source><![CDATA[
    internal abstract InventDimId parmOrderCommittedInventDimId(InventDimId _orderCommittedInventDimId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventLocationId parmInventLocationId()
    {
        return WHSWorkOrderInterface::createInstanceFromWorkOrderLine(this).parmInventLocationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markWorkOrderLineAsFailedDueToReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the work order line as failed due to a reservation failure.
    /// </summary>
    internal abstract void markWorkOrderLineAsFailedDueToReservation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMarkWorkOrderLineAsFailedDueToReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if work order line can be marked as failed due to a reservation failure.
    /// </summary>
    [Hookable(false)]
    internal boolean canMarkWorkOrderLineAsFailedDueToReservation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the work inventory transactions using the specified paramaters.
    /// </summary>
    /// <param name = "_witCreationParameters">
    /// An instance of <c>WHSWorkInventTransCreationParameters</c> with all the necessary parameters to create
    /// the work inventory transactions.
    /// </param>
    internal abstract void createWorkInventTrans(WHSWorkInventTransCreationParameters _witCreationParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkLineFromTmpWorkLineAndTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the underlying buffer based on the provided <c>WHSTmpWorkLine</c> and <c>WHSWorkTemplateTable</c>
    /// </summary>
    /// <param name = "_tmpWorkLine">The <c>WHSTmpWorkLine</c> to be used for the initialization.</param>
    /// <param name = "_inventQtyWork">The quantity to be used for initializing the InventQtyWork field of the underlying work.</param>
    /// <param name = "_workTemplateLine">The <c>WHSWorkTemplateTable</c> to be used for the initialization.</param>
    [Hookable(false)]
    internal void initializeWorkLineFromTmpWorkLineAndTemplate(
        WHSTmpWorkLine          _tmpWorkLine,
        WHSInventQtyWork        _inventQtyWork,
        WHSWorkTemplateLine     _workTemplateLine)
    {
        // Set all of the values on the WHSWorkLine record, but do not insert it.
        this.initValue();

        /// The method whsWorkLine.initFromWorkTemplateLineRecord() sets the workType field.
        /// This method is called from the WhsWorkCreate.initWorkLine() where we reset the workType field
        /// from the the tmpWorkLine this time, after having called the initFromWorkTemplateLineRecord().
        /// To avoid overriding the wanted value which comes from the tmpWorkLine, we need to call the
        /// initFromWorkTemplateLineRecord method before setting other fields.
        this.initializeFromWorkTemplate(_workTemplateLine);
        this.initFromInventQtyWork(_inventQtyWork);
        this.initFromTempWorkLine(_tmpWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTempWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes based on the provided <c>WHSTmpWorkLine</c>.
    /// </summary>
    /// <param name = "_tmpWorkLine">The <c>WHSTmpWorkLine</c> to be used for the initialization.</param>
    protected void initFromTempWorkLine(WHSTmpWorkLine _tmpWorkLine)
    {
        this.parmWorkType(_tmpWorkLine.WorkType);
        this.parmWMSLocationId(_tmpWorkLine.WMSLocationId);
        this.parmAllocatedWMSLocationId(_tmpWorkLine.WMSLocationId);
        this.parmSortCode(_tmpWorkLine.sortCode);
        this.parmZoneId(_tmpWorkLine.ZoneId);
        this.parmItemId(_tmpWorkLine.ItemId);
        this.parmInventDimId(_tmpWorkLine.InventDimId);
        this.parmUnitId(_tmpWorkLine.HighestUnitId);
        this.parmQtyWork(_tmpWorkLine.HighestQty);
        this.parmQtyRemain(_tmpWorkLine.HighestQty);
        this.parmInventTransId(_tmpWorkLine.InventTransId);
        this.parmOrderNum(_tmpWorkLine.OrderNum);
        this.parmLoadId(_tmpWorkLine.LoadId);
        this.parmShipmentId(_tmpWorkLine.ShipmentId);
        this.parmContainerId(_tmpWorkLine.ContainerId);
        this.parmLoadLineRefRecId(_tmpWorkLine.LoadLineRefRecId);
        this.parmReplenDemand(_tmpWorkLine.ReplenDemand);
        this.parmAvailPhysical(_tmpWorkLine.AvailPhysical);
        this.parmFefoBatchId(_tmpWorkLine.FEFOBatchId);
        this.parmLocatedLPId(_tmpWorkLine.LocatedLPId);
        this.parmExtraInventHandlingQty(_tmpWorkLine.ExtraInventHandlingQty);
        this.parmOutboundSortPosition(_tmpWorkLine.OutboundSortPosition);
        this.parmOrderCommittedInventDimId(_tmpWorkLine.OrderCommittedInventDimId);  
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventQtyWork</Name>
				<Source><![CDATA[
    private void initFromInventQtyWork(WHSInventQtyWork _inventQtyWork)
    {        
        this.parmInventQtyWork(_inventQtyWork);
        this.parmInventQtyRemain(_inventQtyWork);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWorkTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the underlying record using the <c>WHSWorkTemplateLine</c> provided.
    /// </summary>
    /// <param name = "_workTemplateLine">The <c>WHSWorkTemplateLine</c> to be used for the initialization.</param>
    internal abstract void initializeFromWorkTemplate(WHSWorkTemplateLine _workTemplateLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize the default values the buffer.
    /// </summary>
    internal abstract void initValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventDim associated with the work line.
    /// </summary>
    /// <returns>The InventDim buffer associated with the work line.</returns>
    internal abstract InventDim inventDim()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the work line.
    /// </summary>
    [Hookable(false)]
    internal void insert()
    {
        this.buffer().insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToRecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the workLine to the provided RecordSortedList.
    /// </summary>
    /// <param name = "_recordSortedList">An instance of <c>RecordSortedList</c> to add the work line.</param>
    [Hookable(false)]
    internal void addToRecordSortedList(RecordSortedList _recordSortedList)
    {
        _recordSortedList.ins(this.buffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the class based on the buffer.
    /// </summary>
    /// <param name = "_buffer">A record buffer.</param>
    public abstract void initializeFromBuffer(Common _buffer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWorkOrderLineInterface</c> instance based on the provided buffer.
    /// </summary>
    /// <param name = "_buffer">
    /// A <buffer used to create the instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWorkOrderLineInterface</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkOrderLineInterface createInstanceFromBuffer(Common _buffer)
    {
        var instance = WHSWorkOrderLineInterface::createInstanceFromTableName(tableId2Name(_buffer.tableId));

        instance.initializeFromBuffer(_buffer);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWorkOrderLineInterface</c> instance based on the table name.
    /// </summary>
    /// <param name = "_tableName">
    /// The table name used to create the instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWorkOrderLineInterface</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkOrderLineInterface createInstanceFromTableName(TableName _tableName)
    {
        var attr = new WHSWorkOrderLineInterfaceFactoryAttribute(_tableName);
        
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkOrderLineInterface), attr) as WHSWorkOrderLineInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromFirstInRecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the underlying record to the first record in the <c>RecordSortedList</c> provided.
    /// </summary>
    /// <param name = "_recordSortedList">The <c>RecordSortedList</c> from which to get the frist record.</param>
    /// <returns>True if the method is successful; otherwise false.</returns>
    [Hookable(false)]
    internal boolean setFromFirstInRecordSortedList(RecordSortedList _recordSortedList)
    {
        return _recordSortedList.first(this.buffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromNextInRecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the underlying record to the next record in the <c>RecordSortedList</c> provided.
    /// </summary>
    /// <param name = "_recordSortedList">The <c>RecordSortedList</c> from which to get the next record.</param>
    /// <returns>True if the operation was successful; otherwise false.</returns>
    [Hookable(false)]
    internal boolean setFromNextInRecordSortedList(RecordSortedList _recordSortedList)
    {
        return _recordSortedList.next(this.buffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastPutWorkOrderLineForWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the final put work order line of the same work order.
    /// </summary>
    /// <returns>An instance of <c>WHSWorkOrderLineInterface</c> if a put work order line is found; otherwise null.</returns>
    internal abstract WHSWorkOrderLineInterface getLastPutWorkOrderLineForWork()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLineMetadataProviderInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the metadata provider interface for work order implementation.
    /// </summary>
    /// <returns>The metadata provider interface for work order implementation.</returns>
    [Hookable(false)]
    internal WHSWorkOrderLineMetadataProviderInterface workOrderLineMetadataProviderInterface()
    {
        return WHSWorkOrderLineMetadataProviderInterface::createInstanceFromWorkOrderLineInterface(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>