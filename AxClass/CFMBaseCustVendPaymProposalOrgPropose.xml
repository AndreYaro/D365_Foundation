<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMBaseCustVendPaymProposalOrgPropose</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFMBaseCustVendPaymProposalOrgPropose extends CustVendPaymProposalOrg
{
    DimensionDefault mergedDimDefault;
    DimensionDefault defaultDimensionCustVend;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reorganize</Name>
				<Source><![CDATA[
    public void reorganize(CustVendPaymProposalCalcPaym _custVendPaymProposalCalc = null)
    {
        CustVendTransOpen custVendTransOpen = paymProposal.custVendTransStatic().custVendTransOpen();

        CustVendPaymProposalCalcPaym custVendPaymProposalCalcPaym = _custVendPaymProposalCalc ? _custVendPaymProposalCalc : CustVendPaymProposalCalcPaym::construct(paymProposal.ledgerJournalType());
        container companies = CustVendOpenTransManager::findSharedServiceCompanies(this.paymProposal.parmLedgerJournalTableCompany());

        CustVendPaymProposalLine custVendPaymProposalLine;
        SpecTrans specTrans;

        while select CrossCompany:companies DataAreaId, RecId from custVendPaymProposalLine
            where custVendPaymProposalLine.JournalCompany == paymProposal.parmLedgerJournalTableCompany()
               && custVendPaymProposalLine.JournalId == paymProposal.ledgerJournalId()
        join RecId from specTrans
            where specTrans.SpecCompany == custVendPaymProposalLine.DataAreaId
               && specTrans.SpecTableId == tablenum(CustVendPaymProposalLine)
               && specTrans.SpecRecId == custVendPaymProposalLine.RecId
        join custVendTransOpen
            where custVendTransOpen.DataAreaId == specTrans.RefCompany
               && custVendTransOpen.TableId == specTrans.RefTableId
               && custVendTransOpen.RecId == specTrans.RefRecId
        {
            custVendPaymProposalCalcPaym.calc(custVendTransOpen);

            paymProposal.reorgCustVendTransOpen(custVendTransOpen, custVendPaymProposalCalcPaym.paymDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension that is associated to the payment proposal line.
    /// </summary>
    /// <param name="_custVendPaymProposalLine">
    /// A <c>CustVendPaymProposalLine</c> record.
    /// </param>
    /// <returns>
    /// The ID of the <c>DimensionAttributeValueSet</c> record that represents the default dimension.
    /// </returns>
    public DimensionDefault getCustVendDefaultDimension(CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        if (_custVendPaymProposalLine.AccountType == ModuleCustVend::Cust)
        {
            CustTable custTable = CustTable::find(_custVendPaymProposalLine.AccountNum);
            defaultDimensionCustVend = custTable.DefaultDimension;
        }
        else
        {
            VendTable vendTable = VendTable::find(_custVendPaymProposalLine.AccountNum);
            defaultDimensionCustVend = vendTable.DefaultDimension;
        }

        return defaultDimensionCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProposalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified payment proposal line.
    /// </summary>
    /// <param name="_paymProposalLine">
    ///    A record in the <c>CustVendPaymProposalLine</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustVendPaymProposalLine</c> table.
    /// </returns>
    public CustVendPaymProposalLine findProposalLine(
        CustVendPaymProposalLine _paymProposalLine,
        boolean _forUpdate)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;

        #ISOCountryRegionCodes

        changecompany(this.paymProposal.parmLedgerJournalTableCompany())
        {
            custVendPaymProposalLine.selectForUpdate(_forUpdate);

            select firstonly custVendPaymProposalLine
                where custVendPaymProposalLine.JournalId                    == _paymProposalLine.JournalId
                   && custVendPaymProposalLine.AccountNum                   == _paymProposalLine.AccountNum
                   && custVendPaymProposalLine.AccountNumCompany            == _paymProposalLine.AccountNumCompany
                   && custVendPaymProposalLine.CurrencyCode                 == _paymProposalLine.CurrencyCode
                   && custVendPaymProposalLine.PaymMode                     == _paymProposalLine.PaymMode
                   && custVendPaymProposalLine.PaymSpec                     == _paymProposalLine.PaymSpec
                   && custVendPaymProposalLine.PaymId                       == _paymProposalLine.PaymId
                   && custVendPaymProposalLine.NegInstID                    == _paymProposalLine.NegInstID
                   && custVendPaymProposalLine.NegInstSeqNum                == _paymProposalLine.NegInstSeqNum
                   && custVendPaymProposalLine.NegInstStatus                == _paymProposalLine.NegInstStatus
                   && custVendPaymProposalLine.PaymDate                     == _paymProposalLine.PaymDate
                   && custVendPaymProposalLine.TransOpenRecId               == _paymProposalLine.TransOpenRecId
                   && custVendPaymProposalLine.PaymAccountType              == _paymProposalLine.PaymAccountType
                   && custVendPaymProposalLine.LedgerDimension              == _paymProposalLine.LedgerDimension
                   && custVendPaymProposalLine.ThirdPartyBankAccountID      == _paymProposalLine.ThirdPartyBankAccountID
                   && custVendPaymProposalLine.BankRemittanceType           == _paymProposalLine.BankRemittanceType
                   && custVendPaymProposalLine.CompanyBankAccountIdNegInst  == _paymProposalLine.CompanyBankAccountIdNegInst
                   && custVendPaymProposalLine.Invoice                      == _paymProposalLine.Invoice
                   && (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ||
                       (custVendPaymProposalLine.InvoiceTaxCode_RU            == _paymProposalLine.InvoiceTaxCode_RU
                       // note that parameter validation is on buildPaymProposalLine() only
                       && custVendPaymProposalLine.DefaultDimension          == _paymProposalLine.DefaultDimension))
                   && custVendPaymProposalLine.BankCentralBankPurposeCode   == _paymProposalLine.BankCentralBankPurposeCode
                   && custVendPaymProposalLine.BankCentralBankPurposeText   == _paymProposalLine.BankCentralBankPurposeText
                   && custVendPaymProposalLine.VendPaymentGroup             == _paymProposalLine.VendPaymentGroup
                   && (!isPaymentRequestEnabled
                       || (custVendPaymProposalLine.CFMPaymentRequestRecId       == _paymProposalLine.CFMPaymentRequestRecId
                       && custVendPaymProposalLine.CFMPrepayment                == _paymProposalLine.CFMPrepayment
                       && custVendPaymProposalLine.CFMTaxGroup                  == _paymProposalLine.CFMTaxGroup
                       && custVendPaymProposalLine.CFMTaxItemGroup              == _paymProposalLine.CFMTaxItemGroup
                       && custVendPaymProposalLine.CFMPaymentOrderHash          == _paymProposalLine.CFMPaymentOrderHash))
                   && custVendPaymProposalLine.RemittanceLocation           == _paymProposalLine.RemittanceLocation;
        }

        return custVendPaymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymProposalLine</Name>
				<Source><![CDATA[
    public CustVendPaymProposalLine buildPaymProposalLine(
        CustVendTransOpen _custVendTransOpen,
        TransDate _paymDate,
        CurrencyCode _paymCurrency)
    {
        CustVendPaymProposalLine paymProposalLine;
        CustVendTransOpenData custVendTransOpenData = CustVendTransOpenData::construct(_custVendTransOpen);
        CustVendTrans custVendTrans = custVendTransOpenData.custVendTrans();
        container custVendInfo;
        Set setPaymAttributes;
        SetEnumerator setPaymAttributesEnumerator;
        LedgerJournalAccountAndType ledgerJournalAccountAndType;
        VendTrans vendTrans;

        #ISOCountryRegionCodes

        boolean copyDimension;
        CFMPaymentRequestTable paymentRequest;
        container custVendTaxInfoConMap, custVendTaxInfoCon;
        Map custVendTaxInfoMap;
        MapEnumerator mapEnum;

        if (isPaymentRequestEnabled)
        {
            paymentRequest = CFMPaymentRequestTable::findPaymentRequestOnCustVendTransOpen(_custVendTransOpen);
        }

        // ensure the payment proposal line buffer is created in the same company as the ledger journal that will contain it
        changecompany(paymProposal.parmLedgerJournalTableCompany())
        {
            paymProposalLine.clear();
            
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                copyDimension = (custVendTrans.TableId == tableNum(CustTrans)   &&
                                (CustParameters::find().CopyInvoiceDimension_RU ||
                                 CustParameters::find().DimSettlementCtrlType_RU != DimSettlementCtrlType_RU::None)) ||
                                (custVendTrans.TableId == tableNum(VendTrans)   &&
                                (VendParameters::find().CopyInvoiceDimension_RU ||
                                 VendParameters::find().DimSettlementCtrlType_RU != DimSettlementCtrlType_RU::None));
            }
        }

        // The assignments are done in the transaction's company context since methods on transaction related classes
        // are intended to be invoked within the context of the transaction company.
        changecompany(_custVendTransOpen.company())
        {
            custVendInfo = paymProposal.resolvePaymCustVend(custVendTrans);

            // if a cust/vend was found for which to create a payment that includes this transaction then create the proposal line
            if (conPeek(custVendInfo, 1) != '')
            {
                paymProposalLine.JournalId = paymProposal.ledgerJournalId();
                paymProposalLine.AccountType = paymProposal.custVendTransStatic().moduleCustVend();
                paymProposalLine.AccountNum = conPeek(custVendInfo, 1);     // AccountNum;
                paymProposalLine.AccountNumCompany = conPeek(custVendInfo, 2);     // CompanyId
                paymProposalLine.CurrencyCode = _paymCurrency;

                if (isPaymentRequestEnabled)
                {
                    paymProposalLine.PaymMode = paymentRequest.PaymMode;
                    paymProposalLine.PaymSpec = paymentRequest.PaymSpec;
                    paymProposalLine.cfmPrepayment = paymentRequest.Prepayment;

                    if (paymentRequest.Prepayment)
                    {
                        custVendTaxInfoConMap = paymentRequest.custVendTaxGroupBaseAmountMap();

                        if (custVendTaxInfoConMap != conNull())
                        {
                            custVendTaxInfoMap = Map::create(custVendTaxInfoConMap);
                            mapEnum = custVendTaxInfoMap.getEnumerator();

                            if (mapEnum.moveNext())
                            {
                                custVendTaxInfoCon = mapEnum.currentKey();

                                paymProposalLine.cfmTaxGroup = conPeek(custVendTaxInfoCon, 1);
                                paymProposalLine.cfmTaxItemGroup = conPeek(custVendTaxInfoCon, 2);
                            }
                        }
                    }
                }
                else
                {
                    paymProposalLine.PaymMode = custVendTrans.PaymMode;
                    paymProposalLine.PaymSpec = custVendTrans.PaymSpec;
                }
                
                if (isPaymentRequestEnabled)
                {
                    paymProposalLine.PostingProfile = paymentRequest.PostingProfile;
                    paymProposalLine.cfmPaymentOrderHash = CFMPaymentRequestPaymentOrder::findByRecId(paymentRequest.PaymentOrder).Hash;

                }
                else
                {
                    paymProposalLine.PostingProfile = custVendTrans.PostingProfile;
                }

                paymProposalLine.NegInstID = custVendTrans.NegInstId;
                paymProposalLine.NegInstSeqNum = custVendTrans.NegInstSeqNum;
                paymProposalLine.NegInstStatus = custVendTrans.NegInstStatus;

                paymProposalLine.ThirdPartyBankAccountID = this.getPaymProposalLineThirdPartyBankId(paymProposalLine,
                    custVendTrans);

                //copy the vendPaymentGroup if and only if the custVendTrans map maps to a vendTrans table record.
                if (custVendTrans.TableId == tableNum(VendTrans))
                {
                    vendTrans = custVendTrans;
                    paymProposalLine.VendPaymentGroup  = vendTrans.VendPaymentGroup;
                    paymProposalLine.RemittanceLocation = LogisticsLocation::isLocationActive(vendTrans.RemittanceLocation) ? vendTrans.RemittanceLocation : VendTable::getDefaultRemittanceLocation(paymProposalLine.AccountNum, paymProposalLine.AccountNumCompany);
                }
                if (paymProposalLine.NegInstStatus == CustVendNegInstStatus::InvoiceRemitted)
                {
                    paymProposalLine.CompanyBankAccountIdNegInst = custVendTrans.CompanyBankAccountId;
                }
                else
                {
                    paymProposalLine.CompanyBankAccountIdNegInst = paymProposal.resolveCompanyBankAccountIdNegInst(paymProposalLine);
                }
                paymProposalLine.BankRemittanceType = paymProposal.resolveBankRemittanceType(paymProposalLine, custVendTransOpenData);
                paymProposalLine.PaymDate = _paymDate;

                if (VendParameters::find().ConfirmingInvoices &&
                   (paymProposal.ledgerJournalType() == LedgerJournalType::VendPaymRemittance ||
                    paymProposal.ledgerJournalType() == LedgerJournalType::VendPromissoryNoteSettle))
                {
                    paymProposalLine.Invoice = custVendTrans.Invoice;
                }

                if (custVendTransOpenData.findPaymModeTable(false).PaymSumBy == PaymSumBy::Invoice)
                {
                    paymProposalLine.TransOpenRecId = _custVendTransOpen.RecId;
                }

                if (isPaymentRequestEnabled)
                {
                    setPaymAttributes = CustVendPaymModeData::newCustVendPaymProposalLine(paymProposalLine).setOfPaymAttributes();
                }
                else
                {
                    setPaymAttributes = CustVendPaymModeData::newCustVendTrans(custVendTrans).setOfPaymAttributes();
                }
                setPaymAttributesEnumerator = setPaymAttributes.getEnumerator();

                while (setPaymAttributesEnumerator.moveNext())
                {
                    switch (setPaymAttributesEnumerator.current())
                    {
                        case PaymAttribute::PaymID :
                            paymProposalLine.PaymId = custVendTrans.PaymId;
                            break;

                        case PaymAttribute::PaymIDStructured_BE :
                            if (!setPaymAttributes.in(PaymAttribute::PaymID) &&
                                Bank_BE::isPaymIdStructured(custVendTrans.PaymId))
                            {
                                paymProposalLine.PaymId = custVendTrans.PaymId;
                            }
                            break;

                        case PaymAttribute::ThirdPartyBank :
                            if (isPaymentRequestEnabled)
                            {
                                paymProposalLine.ThirdPartyBankAccountID = paymentRequest.RecepientBankAccountId;
                            }
                            else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))  && custVendTrans.TableId == tableNum(VendTrans))
                            {
                                paymProposalLine.ThirdPartyBankAccountID = _custVendTransOpen.ThirdPartyBankAccountId;
                            }
                            else
                            {
                                paymProposalLine.ThirdPartyBankAccountID = this.getPaymProposalLineThirdPartyBankId(paymProposalLine, custVendTrans);
                            }
                            break;

                        case PaymAttribute::PaymentAccount :
                            if (isPaymentRequestEnabled)
                            {
                                ledgerJournalAccountAndType = paymProposalLine.resolvePaymAccountAndType(LedgerJournalACType::Bank, paymentRequest.PaymentAccountNum);
                            }
                            else
                            {
                                ledgerJournalAccountAndType = paymProposalLine.resolvePaymAccountAndType(LedgerJournalACType::Bank, custVendTrans.CompanyBankAccountId);
                            }

                            paymProposalLine.PaymAccountType = ledgerJournalAccountAndType.parmAccountType();

                            if (paymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
                            {
                                paymProposalLine.parmLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension());
                            }
                            else
                            {
                                paymProposalLine.parmPaymAccount(ledgerJournalAccountAndType.parmAccountNum(), ledgerJournalAccountAndType.parmAccountType());
                            }
                            break;

                        default :
                            EventHandlerResult eventResult = new EventHandlerResult();
                            this.initCFMBasePaymProposalLineFromPaymAttributeDelegate(
                                setPaymAttributesEnumerator.current(),
                                setPaymAttributes,
                                paymProposalLine,
                                custVendTrans,
                                _custVendTransOpen,
                                isPaymentRequestEnabled,
                                paymentRequest,
                                eventResult);

                            if (!eventResult.hasResult())
                            {
                                throw error(Error::wrongUseOfFunction(funcname()));
                            }
                    }

                    if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                     && !BankAccountTable::isActive(paymProposalLine.parmPaymAccount(), paymProposalLine.PaymDate))
                    {
                        paymProposalLine.parmPaymAccount('', LedgerJournalACType::Bank);
                    }
                }

                if (!paymProposalLine.parmLedgerDimension())
                {
                    // CustVendPaymProposalLine table's LedgerDimension field needs to be resolved base on LedgerJournalTable's company.
                    changecompany(paymProposal.parmLedgerJournalTableCompany())
                    {
                        ledgerJournalAccountAndType = paymProposal.resolvePaymAccountAndType(paymProposalLine, LedgerJournalACType::Ledger);

                        paymProposalLine.PaymAccountType = ledgerJournalAccountAndType.parmAccountType();

                        if (paymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
                        {
                            paymProposalLine.parmLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension());
                        }
                        else
                        {
                            paymProposalLine.parmPaymAccount(ledgerJournalAccountAndType.parmAccountNum(), ledgerJournalAccountAndType.parmAccountType());
                        }

                        if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                         && !BankAccountTable::isActive(paymProposalLine.parmPaymAccount(), paymProposalLine.PaymDate))
                        {
                            paymProposalLine.parmPaymAccount('', LedgerJournalACType::Bank);
                        }
                    }
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    if (copyDimension)
                    {
                        paymProposalLine.DefaultDimension = custVendTrans.DefaultDimension;
                    }
                    else
                    {
                        paymProposalLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(
                        AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension).RecId,
                        paymProposalLine.DefaultDimension);
                    }
                }
            }
        }

        // verify associations between the currencies involved
        if (!paymProposal.validatePaymentCurrency(paymProposalLine.CurrencyCode, paymProposalLine.AccountNumCompany, _custVendTransOpen.company()))
        {
            paymProposalLine.clear();
        }

        return paymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCFMBasePaymProposalLineFromPaymAttributeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the buildPaymProposalLine method for setting payment attribute related fields.
    /// </summary>
    /// <param name = "_paymAttribute">The payment attribute enum value.</param>
    /// <param name = "_paymAttributes">The set of payment attributes.</param>
    /// <param name = "_paymProposalLine">The payment proposal line.</param>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <param name = "_custVendTransOpen">The open customer or vendor transaction.</param>
    /// <param name = "_isPaymentRequestEnabled">A boolean whether payment request is enabled.</param>
    /// <param name = "_paymentRequest">A <c>CFMPaymentRequestTable</c> table buffer.</param>
    /// <param name = "_eventResult">The <c>EventHandlerResult</c> instance to be assigned before exiting the method.</param>
    delegate void initCFMBasePaymProposalLineFromPaymAttributeDelegate(
        PaymAttribute _paymAttribute,
        Set _paymAttributes,
        CustVendPaymProposalLine _paymProposalLine,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        boolean _isPaymentRequestEnabled,
        CFMPaymentRequestTable _paymentRequest,
        EventHandlerResult _eventResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers a <c>LedgerJournalTrans</c> record into a payment proposal for editing.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to be transferred into a payment proposal.
    /// </param>
    public void addLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;
        TransDate transDate;
        CFMPaymentRequestRef paymentRequestReqId;

        CustVendTransOpen custVendTransOpen = paymProposal.custVendTransStatic().custVendTransOpen();
        CustVendPaymProposalCalcPaym custVendPaymProposalCalcPaym = paymProposal.parmPaymProposalCalcPaym();

        // preset the CustVendTable record to be used as the customer or vendor of the payment proposal records that will be generated
        paymProposal.setPaymCustVendTableFromJournalTrans(_ledgerJournalTrans);

        // set the default offset account type and num so these values are retained in the payment proposal lines being generated
        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            paymProposal.parmDefaultOffsetLedgerDimension(_ledgerJournalTrans.parmOffsetLedgerDimension());
        }
        else
        {
            paymProposal.parmDefaultOffsetAccount(_ledgerJournalTrans.parmOffsetAccount());
        }

        paymProposal.parmDefaultOffsetAccountType(_ledgerJournalTrans.OffsetAccountType);

        while select CrossCompany Balance01, SpecRecId, CashDiscToTake from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
               && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
               && specTrans.SpecRecId == _ledgerJournalTrans.RecId
        join custVendTransOpen
            where custVendTransOpen.DataAreaId == specTrans.RefCompany
               && custVendTransOpen.TableId == specTrans.RefTableId
               && custVendTransOpen.RecId == specTrans.RefRecId
        {
            if (isPaymentRequestEnabled)
            {
                paymentRequestReqId = CFMPaymentRequestTable::findPaymentRequestOnCustVendTransOpen(custVendTransOpen).RecId;

                if (! CFMPaymentRequestTable::isAllowedToIncludeToPaymentJournal(paymentRequestReqId))
                {
                    continue;
                }
            }

            custVendPaymProposalCalcPaym.calc(custVendTransOpen);
            transDate = custVendPaymProposalCalcPaym.paymDate();

            paymProposal.addCustVendTransOpen(custVendTransOpen,
                transDate,
                _ledgerJournalTrans.CurrencyCode,
                specTrans.Balance01,
                specTrans.CashDiscToTake);
        }

        // clear the preset CustVendTable that was used as the customer or vendor for the payment proposal records that were generated
        paymProposal.clearPaymCustVendTable();

        // clear the default offset account type and num so payment offset account type and num may be reset as payments are modified
        paymProposal.parmDefaultOffsetAccountType(LedgerJournalACType::Ledger);
        paymProposal.parmDefaultOffsetAccount('');
        paymProposal.parmDefaultOffsetLedgerDimension(0);

        // Insert dummy line to track what journal lines we have loaded but not used
        custVendPaymProposalLine.JournalId = _ledgerJournalTrans.JournalNum;
        custVendPaymProposalLine.LedgerJournalTransRecId = _ledgerJournalTrans.RecId;
        custVendPaymProposalLine.doInsert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>