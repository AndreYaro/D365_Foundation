<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocAccessKeyBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class EFDocAccessKeyBase_BR
{
    #FiscalDocumentConstants_BR

    private const int AccessKeyYearSize = 2;
    private const int AccessKeyYearPosition = 3;

    private const int AccessKeyMonthSize = 2;
    private const int AccessKeyMonthPosition = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an access key
    /// </summary>
    /// <param name="_numericCode">Numeric code for the electronic fiscal document</param>
    /// <param name="_fiscalDocument">Fiscal document associated with an NF-e</param>
    /// <returns>Generated access key</returns>
    public abstract str generate(int _numericCode, FiscalDocument_BR _fiscalDocument)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLeft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a string with 0's on the left until specified length is reached.
    /// </summary>
    /// <param name="_number">String to be filled</param>
    /// <param name="_length">Length of desired string</param>
    /// <returns>String filled with 0's</returns>
    public static str fillLeft(str _number, int _length)
    {
        return strRFix(_number, _length, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateVerifierDigit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates verifier digit for the given access key
    /// </summary>
    /// <param name="numeralsTxt">Access key to generate the digit from</param>
    /// <returns>The verifier digit.</returns>
    public static int generateVerifierDigit(str 50 numeralsTxt)
    {
        int             numerals;
        int             vector;
        int             sumNumerals;
        int             modNumerals;

        vector      = 2;
        numeralsTxt = strkeep(numeralsTxt,'0123456789');

        while (numeralsTxt)
        {
            numerals    = str2int(substr(numeralsTxt,999,-2)) * vector;
            numeralsTxt = strdel(numeralsTxt,999,-2);

            sumNumerals += numerals;
            vector     += 1;

            if (vector > 9)
            {
              vector = 2;
            }
        }

        modNumerals = (sumNumerals mod 11);

        if (modNumerals == 0
            || modNumerals == 1)
        {
            return 0;
        }

        return  (11 - modNumerals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCNPJNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CNPJ number from a given access key
    /// </summary>
    /// <param name="_accessKey">
    /// The given accessKey
    /// </param>
    /// <returns>
    /// Returns the CNPJ number identification
    /// </returns>
    public static str getCNPJNumber(EFDocAccessKey_BR _accessKey)
    {
        return substr(_accessKey, #AccessKeyCnpjPosition, #AccessKeyCnpjSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIbgeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the State IBGE code from a given access key
    /// </summary>
    /// <param name="_accessKey">
    /// The given accessKey
    /// </param>
    /// <returns>
    /// Returns the State IBGE code identification
    /// </returns>
    public static str getIbgeCode(EFDocAccessKey_BR _accessKey)
    {
        return substr(_accessKey, #AccessKeyStateIBGECodePosition, #AccessKeyStateIBGECodeSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the month from a given access key
    /// </summary>
    /// <param name="accessKey">
    /// The given accessKey
    /// </param>
    /// <returns>
    /// Returns the number of the month
    /// </returns>
    public static int getMonth(EFDocAccessKey_BR accessKey)
    {
        return str2int(substr(accessKey, AccessKeyMonthPosition, AccessKeyMonthSize));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the year from a given access key
    /// </summary>
    /// <param name="accessKey">
    /// The given accessKey
    /// </param>
    /// <returns>
    /// Returns the year
    /// </returns>
    public static int getYear(EFDocAccessKey_BR accessKey)
    {
        // Adding 2000 to year because accessKey has only the last 2 digits of the year
        return str2int(substr(accessKey, AccessKeyYearPosition, AccessKeyYearSize)) + 2000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice number from a given access key
    /// </summary>
    /// <param name="_accessKey">
    /// The given accessKey
    /// </param>
    /// <returns>
    /// Returns the Invoice number
    /// </returns>
    public static str getInvoiceNumber(EFDocAccessKey_BR _accessKey)
    {
        return subStr(_accessKey,#AccessKeyInvoicePosition,#AccessKeyInvoiceSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice series from a given access key
    /// </summary>
    /// <param name="_accessKey">
    /// The given accessKey
    /// </param>
    /// <returns>
    /// Returns the Invoice Series
    /// </returns>
    public static str getInvoiceSeries(EFDocAccessKey_BR _accessKey)
    {
        return substr(_accessKey,#AccessKeySeriesPosition,#AccessKeySeriesSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the size and the digit fom a given access key
    /// </summary>
    /// <param name="numeralsTxt">Access key to verify the digit and size from</param>
    /// <returns>True if the access key is valid, otherwise false</returns>
    public static boolean validate(str 50 numeralsTxt)
    {
        str accessKey = subStr(numeralsTxt, 1, strLen(numeralsTxt) - 1);
        int digit = str2int(subStr(numeralsTxt, strLen(numeralsTxt), 1));
        int keySize = strLen(numeralsTxt);

        return (keySize == #AccessKeySize
            && strKeep(numeralsTxt, '123456789')
            && digit == EFDocAccessKeyBase_BR::generateVerifierDigit(accessKey));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>