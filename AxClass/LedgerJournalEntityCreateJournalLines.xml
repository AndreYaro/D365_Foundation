<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEntityCreateJournalLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEntityCreateJournalLines</c> class used to insert records in to the <c>LedgerJournalTrans</c> table related to the <c>LedgerJournalEntity</c> entity.
/// </summary>
public final class LedgerJournalEntityCreateJournalLines
{
    private DMFDefinitionGroupExecution dmfDefinitionGroupExecution;
    private LedgerJournalEntityStaging staging;

    private boolean delayTaxCalculation;
    private SelectableDataArea currentCompany = curExt();
    private SelectableDataArea currentOffsetCompany = curExt();
    private Approved approved = NoYes::Yes;
    private HcmApprover approver = HcmWorker::userId2Worker(curUserId());

    private ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);
    private ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records to <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_delayTaxCalculation">
    /// Determines whether to delay tax calculation.
    /// </param>
    /// <returns>
    /// The journal lines buffer.
    /// </returns>
    internal static LedgerJournalTrans createJournalLines(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef,
        boolean _delayTaxCalculation)
    {
        LedgerJournalEntityCreateJournalLines ledgerJournalEntityCreateJournalLines = new LedgerJournalEntityCreateJournalLines();
        ledgerJournalEntityCreateJournalLines.initialize(_dmfDefinitionGroupExecution, _delayTaxCalculation);

        LedgerJournalTrans ledgerJournalTrans;
        ledgerJournalTrans.skipDataMethods(true);

        if (LedgerJournalEntityAdditionalSkipEventsFlight::instance().isEnabled())
        {
            ledgerJournalTrans.skipEvents(true);
            ledgerJournalTrans.skipDatabaseLog(true);
        }

        SysDaInsertObject insertObject = ledgerJournalEntityCreateJournalLines.getLedgerJournalTransInsertObject(ledgerJournalTrans);
        SysDaQueryObject queryObject = ledgerJournalEntityCreateJournalLines.getQueryObject(
            _dimCacheTmp,
            _dimCacheTmpRef,
            _defaultDimCacheTmp,
            _defaultDimCacheTmpRef);

        insertObject.query(queryObject);
        SysDaInsertStatement ledgerJournalTransInsertStatement = new SysDaInsertStatement();

        ledgerJournalTransInsertStatement.insert(insertObject);

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, boolean _delayTaxCalculation)
    {
        dmfDefinitionGroupExecution = _dmfDefinitionGroupExecution;
        delayTaxCalculation = _delayTaxCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTransInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>LedgerJournalTrans</c> table fields to an Insert object.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <returns>
    /// The insert object with the fields added.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaInsertObject getLedgerJournalTransInsertObject(LedgerJournalTrans _ledgerJournalTrans)
    {
        SysDaInsertObject ledgerJournalTransInsertObject = new SysDaInsertObject(_ledgerJournalTrans);

        ledgerJournalTransInsertObject.fields()
            .add(fieldStr(LedgerJournalTrans, JournalNum))
            .add(fieldStr(LedgerJournalTrans, Txt))
            .add(fieldStr(LedgerJournalTrans, OffsetTxt))
            .add(fieldStr(LedgerJournalTrans, Voucher))
            .add(fieldStr(LedgerJournalTrans, TransDate))
            .add(fieldStr(LedgerJournalTrans, LineNum))
            .add(fieldStr(LedgerJournalTrans, Company))
            .add(fieldStr(LedgerJournalTrans, OffsetCompany))
            .add(fieldStr(LedgerJournalTrans, CashDiscPercent))
            .add(fieldStr(LedgerJournalTrans, CashDiscAmount))
            .add(fieldStr(LedgerJournalTrans, AmountCurCredit))
            .add(fieldStr(LedgerJournalTrans, AmountCurDebit))
            .add(fieldStr(LedgerJournalTrans, CurrencyCode))
            .add(fieldStr(LedgerJournalTrans, ExchRate))
            .add(fieldStr(LedgerJournalTrans, ExchRateSecond))
            .add(fieldStr(LedgerJournalTrans, ReportingCurrencyExchRate))
            .add(fieldStr(LedgerJournalTrans, ReportingCurrencyExchRateSecondary))
            .add(fieldStr(LedgerJournalTrans, AccountType))
            .add(fieldStr(LedgerJournalTrans, OffsetAccountType))
            .add(fieldStr(LedgerJournalTrans, Qty))
            .add(fieldStr(LedgerJournalTrans, TaxWithholdCalculate_TH))
            .add(fieldStr(LedgerJournalTrans, Voucher_CN))
            .add(fieldStr(LedgerJournalTrans, Invoice))
            .add(fieldStr(LedgerJournalTrans, Due))
            .add(fieldStr(LedgerJournalTrans, PaymId))
            .add(fieldStr(LedgerJournalTrans, VATNumJournal))
            .add(fieldStr(LedgerJournalTrans, TaxCode))
            .add(fieldStr(LedgerJournalTrans, TaxItemGroup))
            .add(fieldStr(LedgerJournalTrans, CashDiscCode))
            .add(fieldStr(LedgerJournalTrans, DateCashDisc))
            .add(fieldStr(LedgerJournalTrans, DocumentNum))
            .add(fieldStr(LedgerJournalTrans, DocumentDate))
            .add(fieldStr(LedgerJournalTrans, PaymMode))
            .add(fieldStr(LedgerJournalTrans, PostingProfile))
            .add(fieldStr(LedgerJournalTrans, TaxGroup))
            .add(fieldStr(LedgerJournalTrans, PaymReference))
            .add(fieldStr(LedgerJournalTrans, TransactionType))
            .add(fieldStr(LedgerJournalTrans, DelayTaxCalculation))
            .add(fieldStr(LedgerJournalTrans, ReverseDate))
            .add(fieldStr(LedgerJournalTrans, ReverseEntry))
            .add(fieldStr(LedgerJournalTrans, Approved))
            .add(fieldStr(LedgerJournalTrans, Approver))
            .add(fieldStr(LedgerJournalTrans, AcknowledgementDate))
            .add(fieldStr(LedgerJournalTrans, LedgerDimension))
            .add(fieldStr(LedgerJournalTrans, OffsetLedgerDimension))
            .add(fieldStr(LedgerJournalTrans, DefaultDimension))
            .add(fieldStr(LedgerJournalTrans, OffsetDefaultDimension));

        return ledgerJournalTransInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getQueryObject(
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef)
    {
        SysDaQueryObject ledgerJournalEntityStagingQuery = this.getLedgerJournalEntityStagingQueryObject();
        SysDaQueryObject dimCacheTmpQuery = this.getDimCacheTmpQueryObject(_dimCacheTmp);
        ledgerJournalEntityStagingQuery.joinClause(SysDaJoinKind::InnerJoin, dimCacheTmpQuery);

        SysDaQueryObject dimeCacheTmpRefQuery = this.getDimCacheTmpRefQueryObject(_dimCacheTmpRef);
        dimCacheTmpQuery.joinClause(SysDaJoinKind::InnerJoin, dimeCacheTmpRefQuery);

        SysDaQueryObject defaultDimCacheTmpQuery = this.getDefaultDimCacheTmpQueryObject(_defaultDimCacheTmp);
        dimeCacheTmpRefQuery.joinClause(SysDaJoinKind::InnerJoin, defaultDimCacheTmpQuery);

        SysDaQueryObject defaultDimCacheTmpRefQuery = this.getDefaultDimCacheTmpRefQueryObject(_defaultDimCacheTmpRef);
        defaultDimCacheTmpQuery.joinClause(SysDaJoinKind::InnerJoin, defaultDimCacheTmpRefQuery);

        SysDaQueryObject ledgerJournalTrans_ExistsQuery = this.getLedgerJournalTableExistsQueryObject();
        defaultDimCacheTmpRefQuery.joinClause(SysDaJoinKind::NotExistsJoin, ledgerJournalTrans_ExistsQuery);

        return ledgerJournalEntityStagingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getLedgerJournalEntityStagingQueryObject()
    {
        SysDaQueryObject ledgerJournalEntityStagingQuery = new SysDaQueryObject(staging);

        this.addFieldsToLedgerJournalEntityStagingQueryObject(ledgerJournalEntityStagingQuery);
        this.addWhereClauseToLedgerJournalEntityStagingQueryObject(ledgerJournalEntityStagingQuery);

        return ledgerJournalEntityStagingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalEntityStaging</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_ledgerJournalEntityStagingQuery">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToLedgerJournalEntityStagingQueryObject(SysDaQueryObject _ledgerJournalEntityStagingQuery)
    {
        _ledgerJournalEntityStagingQuery.projection()
            .add(fieldStr(LedgerJournalEntityStaging, JournalBatchNumber))
            .add(fieldStr(LedgerJournalEntityStaging, Text))
            .add(fieldStr(LedgerJournalEntityStaging, OffsetText))
            .add(fieldStr(LedgerJournalEntityStaging, Voucher))
            .add(fieldStr(LedgerJournalEntityStaging, TransDate))
            .add(fieldStr(LedgerJournalEntityStaging, LineNumber))
            .addValue(currentCompany)
            .addValue(currentOffsetCompany)
            .add(fieldStr(LedgerJournalEntityStaging, DiscountPercentage))
            .add(fieldStr(LedgerJournalEntityStaging, CashDiscountAmount))
            .add(fieldStr(LedgerJournalEntityStaging, CreditAmount))
            .add(fieldStr(LedgerJournalEntityStaging, DebitAmount))
            .add(fieldStr(LedgerJournalEntityStaging, CurrencyCode))
            .add(fieldStr(LedgerJournalEntityStaging, ExchangeRate))
            .add(fieldStr(LedgerJournalEntityStaging, ExchangeRateSecondary))
            .add(fieldStr(LedgerJournalEntityStaging, ReportingCurrencyExchRate))
            .add(fieldStr(LedgerJournalEntityStaging, ReportingCurrencyExchRateSecondary))
            .add(fieldStr(LedgerJournalEntityStaging, AccountType))
            .add(fieldStr(LedgerJournalEntityStaging, OffsetAccountType))
            .add(fieldStr(LedgerJournalEntityStaging, Quantity))
            .add(fieldStr(LedgerJournalEntityStaging, IsWithholdingCalculationEnabled))
            .add(fieldStr(LedgerJournalEntityStaging, ChineseVoucher))
            .add(fieldStr(LedgerJournalEntityStaging, Invoice))
            .add(fieldStr(LedgerJournalEntityStaging, DueDate))
            .add(fieldStr(LedgerJournalEntityStaging, PaymentId))
            .add(fieldStr(LedgerJournalEntityStaging, TaxExemptNumber))
            .add(fieldStr(LedgerJournalEntityStaging, SalesTaxCode))
            .add(fieldStr(LedgerJournalEntityStaging, ItemSalesTaxGroup))
            .add(fieldStr(LedgerJournalEntityStaging, CashDiscount))
            .add(fieldStr(LedgerJournalEntityStaging, CashDiscountDate))
            .add(fieldStr(LedgerJournalEntityStaging, Document))
            .add(fieldStr(LedgerJournalEntityStaging, DocumentDate))
            .add(fieldStr(LedgerJournalEntityStaging, PaymentMethod))
            .add(fieldStr(LedgerJournalEntityStaging, PostingProfile))
            .add(fieldStr(LedgerJournalEntityStaging, SalesTaxGroup))
            .add(fieldStr(LedgerJournalEntityStaging, PaymentReference))
            .addValue(LedgerTransType::GeneralJournal)
            .addValue(delayTaxCalculation)
            .add(fieldStr(LedgerJournalEntityStaging, ReverseDate))
            .add(fieldStr(LedgerJournalEntityStaging, ReverseEntry))
            .addValue(approved)
            .addValue(approver)
            .add(fieldStr(LedgerJournalEntityStaging, AcknowledgementDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    private void addWhereClauseToLedgerJournalEntityStagingQueryObject(SysDaQueryObject _ledgerJournalEntityStagingQuery)
    {
        _ledgerJournalEntityStagingQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, DefinitionGroup)),
                new SysDaFieldExpression(dmfDefinitionGroupExecution, fieldStr(DMFDefinitionGroupExecution, DefinitionGroup))),
            new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, ExecutionId)),
                new SysDaFieldExpression(dmfDefinitionGroupExecution, fieldStr(DMFDefinitionGroupExecution, ExecutionId))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, TransferStatus)),
                new SysDaValueExpression(DMFTransferStatus::NotStarted))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimCacheTmpQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getDimCacheTmpQueryObject(DimensionDataEntitySFKCacheTmp _dimCacheTmp)
    {
        SysDaQueryObject dimCacheTmpQuery = new SysDaQueryObject(_dimCacheTmp);

        dimCacheTmpQuery.projection()
            .add(fieldStr(DimensionDataEntitySFKCacheTmp, ResolvedReference));

        dimCacheTmpQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, IntegrationString)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, AccountDisplayValue))),
            new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, EnumValue)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, AccountType))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, HierarchyType)),
                new SysDaValueExpression(DimensionHierarchyType::DataEntityLedgerDimensionFormat)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, ExtendedDataType)),
                new SysDaValueExpression(dataType))));

        return dimCacheTmpQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimCacheTmpRefQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getDimCacheTmpRefQueryObject(DimensionDataEntitySFKCacheTmp _dimCacheTmpRef)
    {
        SysDaQueryObject dimCacheTmpRefQuery = new SysDaQueryObject(_dimCacheTmpRef);

        dimCacheTmpRefQuery.projection()
            .add(fieldStr(DimensionDataEntitySFKCacheTmp, ResolvedReference));

        dimCacheTmpRefQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, IntegrationString)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, OffsetAccountDisplayValue))),
            new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, EnumValue)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, OffsetAccountType))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, HierarchyType)),
                new SysDaValueExpression(DimensionHierarchyType::DataEntityLedgerDimensionFormat)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_dimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, ExtendedDataType)),
                new SysDaValueExpression(dataType))));

        return dimCacheTmpRefQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimCacheTmpQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getDefaultDimCacheTmpQueryObject(DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp)
    {
        SysDaQueryObject defaultDimCacheTmpQuery = new SysDaQueryObject(_defaultDimCacheTmp);

        defaultDimCacheTmpQuery.projection()
            .add(fieldStr(DimensionDataEntitySFKCacheTmp, ResolvedReference));

        defaultDimCacheTmpQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(_defaultDimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, IntegrationString)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, DefaultDimensionDisplayValue))),
            new SysDaEqualsExpression(new SysDaFieldExpression(_defaultDimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, HierarchyType)),
                new SysDaValueExpression(DimensionHierarchyType::DataEntityDefaultDimensionFormat)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_defaultDimCacheTmp, fieldStr(DimensionDataEntitySFKCacheTmp, ExtendedDataType)),
                new SysDaValueExpression(defaultDimensionDataType))));

        return defaultDimCacheTmpQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimCacheTmpRefQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getDefaultDimCacheTmpRefQueryObject(DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef)
    {
        SysDaQueryObject defaultDimCacheTmpRefQuery = new SysDaQueryObject(_defaultDimCacheTmpRef);

        defaultDimCacheTmpRefQuery.projection()
            .add(fieldStr(DimensionDataEntitySFKCacheTmp, ResolvedReference));

        defaultDimCacheTmpRefQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(_defaultDimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, IntegrationString)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, OffsetDefaultDimensionDisplayValue))),
            new SysDaEqualsExpression(new SysDaFieldExpression(_defaultDimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, HierarchyType)),
                new SysDaValueExpression(DimensionHierarchyType::DataEntityDefaultDimensionFormat)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_defaultDimCacheTmpRef, fieldStr(DimensionDataEntitySFKCacheTmp, ExtendedDataType)),
                new SysDaValueExpression(defaultDimensionDataType))));

        return defaultDimCacheTmpRefQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTableExistsQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getLedgerJournalTableExistsQueryObject()
    {
        LedgerJournalTrans ledgerJournalTrans_Exists;

        SysDaQueryObject ledgerJournalTrans_ExistsQuery = new SysDaQueryObject(ledgerJournalTrans_Exists);

        ledgerJournalTrans_ExistsQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(ledgerJournalTrans_Exists, fieldStr(LedgerJournalTrans, JournalNum)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, JournalBatchNumber))),
            new SysDaEqualsExpression(new SysDaFieldExpression(ledgerJournalTrans_Exists, fieldStr(LedgerJournalTrans, LineNum)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, LineNumber)))));

        return ledgerJournalTrans_ExistsQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>