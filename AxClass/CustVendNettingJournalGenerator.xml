<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingJournalGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendNettingJournalGenerator</c> class creates customer and vendor netting journals.
/// </summary>
internal class CustVendNettingJournalGenerator implements INettingJournalGenerator
{
    private const InvoiceId MultiInvoice = '*';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LedgerJournalTable generate(NettingAmountDistribution _distribution)
    {
        CustVendNettingExecution execution;
        select firstonly execution
            where execution.RecId == _distribution.getExecutionRecId();

        changecompany(execution.DataAreaId)
        {
            LedgerDefaultDimensionValueSet offsetDefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(MainAccount::findByLedgerDimension(execution.LedgerDimension).RecId, CompanyInfo::current()).DefaultDimension;
            LedgerDimensionAccount offsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                execution.LedgerDimension,
                offsetDefaultDimension);
            LedgerJournalTable nettingJournal = this.createLedgerJournalTable(execution);
            this.createJournalTransAndSpecTrans(execution, _distribution, nettingJournal, offsetLedgerDimension);
            return nettingJournal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable createLedgerJournalTable(CustVendNettingExecution _execution)
    {
        NumberSequenceTable journalNumberSequence = LedgerParameters::numRefJournalNum().numberSequenceTable();
        if (!journalNumberSequence)
        {
            throw error("@CashManagement:NoNumberSequence");
        }

        if (journalNumberSequence.Blocked == NoYes::Yes)
        {
            throw error(strFmt("@SYS25068", journalNumberSequence.NumberSequence));
        }

        LedgerJournalName ledgerJournalName = LedgerJournalName::find(_execution.JournalName);

        if (!ledgerJournalName)
        {
            throw error(strFmt("@SYS22462", _execution.JournalName));
        }

        if (ledgerJournalName.JournalType != LedgerJournalType::CustVendNetting)
        {
            throw error(strFmt("@SYS74909", _execution.JournalName));
        }

        LedgerJournalTable createdJournal;
        createdJournal.JournalName = ledgerJournalName.JournalName;
        createdJournal.JournalNum = JournalTableData::newTable(createdJournal).nextJournalId();
        createdJournal.initFromLedgerJournalName();

        createdJournal.insert();
        return createdJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTransAndSpecTrans</Name>
				<Source><![CDATA[
    private void createJournalTransAndSpecTrans(
        CustVendNettingExecution _execution,
        NettingAmountDistribution _distribution,
        LedgerJournalTable _nettingJournal,
        LedgerDimensionAccount _offsetLedgerDimension)
    {
        // Create LedgerJournalTrans and SpecTrans for the customer
        CustVendNettingExchRateCalculator custNettingExchRateCalculator = CustVendNettingExchRateCalculator::construct(
            _execution.CreditCompany,
            _execution.CurrencyToProcess,
            _execution.NettingDate);
        LedgerJournalTrans ledgerJournalTrans = this.createLedgerJournalTrans(
            _execution, 
            _distribution,
            _nettingJournal,
            _offsetLedgerDimension,
            custNettingExchRateCalculator.getExchRate(),
            custNettingExchRateCalculator.getExchRateSecondary(),
            custNettingExchRateCalculator.getExchRateReporting(),
            custNettingExchRateCalculator.getExchRateSecondaryReporting(),
            false);
        this.createSpecTrans(_execution, _distribution.getCreditDistribution(), ledgerJournalTrans, _distribution.getCreditAccountType(), _execution.CreditCompany);

        // Create LedgerJournalTrans and SpecTrans for the vendor
        CustVendNettingExchRateCalculator vendNettingExchRateCalculator = CustVendNettingExchRateCalculator::construct(
            _execution.DebitCompany,
            _execution.CurrencyToProcess,
            _execution.NettingDate);
        ledgerJournalTrans = this.createLedgerJournalTrans(
            _execution,
            _distribution,
            _nettingJournal,
            _offsetLedgerDimension,
            vendNettingExchRateCalculator.getExchRate(),
            vendNettingExchRateCalculator.getExchRateSecondary(),
            vendNettingExchRateCalculator.getExchRateReporting(),
            vendNettingExchRateCalculator.getExchRateSecondaryReporting(),
            true);
        this.createSpecTrans(_execution, _distribution.getDebitDistribution(), ledgerJournalTrans, _distribution.getDebitAccountType(), _execution.DebitCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans createLedgerJournalTrans(
        CustVendNettingExecution _execution,
        NettingAmountDistribution _distribution,
        LedgerJournalTable _nettingJournal,
        LedgerDimensionAccount _offsetLedgerDimension,
        ExchRate _exchRate,
        ExchrateSecondary _exchRateSecondary,
        ExchRate _exchRateReporting,
        ExchrateSecondary _exchRateSecondaryReporting,
        boolean _isDebit)
    {
        CustVendAC custVendAC;
        LedgerJournalTrans ledgerJournalTrans;

        LedgerJournalACType ledgerJournalACType;
        CompanyId accountCompany;

        if (_isDebit)
        {
            ledgerJournalTrans.AmountCurDebit = _distribution.getDebitTotalAmountCur();
            ledgerJournalACType = _distribution.getDebitAccountType();
            custVendAC = _distribution.getDebitAccount();
            accountCompany = _execution.DebitCompany;
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = _distribution.getCreditTotalAmountCur();
            ledgerJournalACType = _distribution.getCreditAccountType();
            custVendAC = _distribution.getCreditAcount();
            accountCompany = _execution.CreditCompany;
        }

        CustVendTable custVendTable;

        changecompany(accountCompany)
        {
            if (ledgerJournalACType == LedgerJournalACType::Cust)
            {
                custVendTable = CustTable::find(custVendAC);

                if (_distribution.getCreditDistribution().elements() > 1)
                {
                    ledgerJournalTrans.MarkedInvoice = MultiInvoice;
                }
                else
                {
                    MapEnumerator enumerator = _distribution.getCreditDistribution().getEnumerator();
                    enumerator.moveNext();

                    CustTransOpen custTransOpen = this.getCustTransOpenFromRef(enumerator.currentKey());
                    CustTrans custTrans = CustTrans::find(custTransOpen.RefRecId);

                    ledgerJournalTrans.MarkedInvoice = custTrans.Invoice;
                    ledgerJournalTrans.MarkedInvoiceRecId = custTransOpen.RecId;
                    ledgerJournalTrans.MarkedInvoiceCompany = custTrans.DataAreaId;
                }

                ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfile;
            }
            else
            {
                custVendTable = VendTable::find(custVendAC);
                ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfile;
                ledgerJournalTrans.RemittanceLocation = VendTable::getDefaultRemittanceLocation(custVendAC);

                LogisticsPostalAddress logisticsPostalAddress;
                select firstonly RecId from logisticsPostalAddress
                    where logisticsPostalAddress.Location == ledgerJournalTrans.RemittanceLocation;
                ledgerJournalTrans.RemittanceAddress = logisticsPostalAddress.RecId;
            }
        }

        ledgerJournalTrans.Approved = NoYes::Yes;
        ledgerJournalTrans.JournalNum = _nettingJournal.JournalNum;
        ledgerJournalTrans.Voucher = this.getVoucher(_nettingJournal);
        ledgerJournalTrans.TransDate = _distribution.getTransDate();
        ledgerJournalTrans.CurrencyCode = _execution.CurrencyToProcess;
        ledgerJournalTrans.parmAccount(custVendAC, ledgerJournalACType, accountCompany);
        ledgerJournalTrans.DefaultDimension = _nettingJournal.DefaultDimension ? _nettingJournal.DefaultDimension : custVendTable.DefaultDimension;
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetLedgerDimension = _offsetLedgerDimension;
        ledgerJournalTrans.ExchRate = _exchRate;
        ledgerJournalTrans.ExchRateSecond = _exchRateSecondary;
        ledgerJournalTrans.ReportingCurrencyExchRate = _exchRateReporting;
        ledgerJournalTrans.ReportingCurrencyExchRateSecondary = _exchRateSecondaryReporting;
        ledgerJournalTrans.BankCentralBankPurposeCode = custVendTable.BankCentralBankPurposeCode;
        ledgerJournalTrans.BankCentralBankPurposeText = custVendTable.BankCentralBankPurposeText;
        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
        ledgerJournalTrans.TransactionType = LedgerTransType::CustVendNetting;
        ledgerJournalTrans.Txt = this.determineTransactionText(
            ledgerJournalACType == LedgerJournalACType::Cust ? LedgerTransTxt::CustVendNettingCust : LedgerTransTxt::CustVendNettingVend,
            ledgerJournalTrans,
            _execution);
        ledgerJournalTrans.insert();
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecTrans</Name>
				<Source><![CDATA[
    private void createSpecTrans(
        CustVendNettingExecution _execution,
        Map _creditDebitDistribution,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalACType _ledgerJournalACType,
        CompanyId _refCompany)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);
        MapEnumerator enumerator = _creditDebitDistribution.getEnumerator();
        List markedOpenLineList = new List(Types::Int64);

        while (enumerator.moveNext())
        {
            TableId refTableId = conPeek(enumerator.currentKey(), 1);
            RecId refRecId = conPeek(enumerator.currentKey(), 2);

            if (refTableId == tableNum(VendTransOpen) || refTableId == tableNum(CustTransOpen))
            {
                if (NettingSetSelectedDateUsedToCalcCashDiscFlight::instance().isEnabled())
                {
                    specTransManager.insert(
                        _refCompany,
                        refTableId,
                        refRecId,
                        enumerator.currentValue(),
                        _execution.CurrencyToProcess,
                        NoYes::No,
                        0,
                        _execution.NettingDate);
                }
                else
                {
                    specTransManager.insert(
                        _refCompany,
                        refTableId,
                        refRecId,
                        enumerator.currentValue(),
                        _execution.CurrencyToProcess);
                }
            }
            else if (refTableId == tableNum(CustTransOpenLine))
            {
                markedOpenLineList.addEnd(refRecId);
            }
        }

        changecompany(_refCompany)
        {
            this.processMarkedOpenLine(_execution, _ledgerJournalTrans, specTransManager, markedOpenLineList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    private Voucher getVoucher(LedgerJournalTable _nettingJournal)
    {
        NumberSeq numberSeq = NumberSeq::newGetVoucherFromId(_nettingJournal.NumberSequenceTable);
        return numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOpenFromRef</Name>
				<Source><![CDATA[
    private CustTransOpen getCustTransOpenFromRef(container _ref)
    {
        TableId refTableId = conPeek(_ref, 1);
        RecId refRecId = conPeek(_ref, 2);

        CustTransOpen custTransOpen;

        switch (refTableId)
        {
            case tableNum(CustTransOpen):
                custTransOpen = CustTransOpen::find(refRecId);
                break;
            case tableNum(CustTransOpenLine):
                custTransOpen = CustTransOpen::find(CustTransOpenLine::find(refRecId).CustTransOpen);
                break;
        }

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMarkedOpenLine</Name>
				<Source><![CDATA[
    private void processMarkedOpenLine(CustVendNettingExecution _execution, LedgerJournalTrans _ledgerJournalTrans, SpecTransManager _specTransManager, List _markedOpenLineList)
    {
        Map markedOpenLineDistribution = new Map(Types::Int64, Types::Class);
        ListEnumerator enumerator = _markedOpenLineList.getEnumerator();

        while (enumerator.moveNext())
        {
            CustTransOpenLine custTransOpenLine = CustTransOpenLine::find(enumerator.current());
            RecId transOpenRecId = custTransOpenLine.CustTransOpen;

            if (!markedOpenLineDistribution.exists(transOpenRecId))
            {
                Set openLineSet = new Set(Types::Int64);
                openLineSet.add(custTransOpenLine.RecId);

                markedOpenLineDistribution.add(transOpenRecId, openLineSet);
                if (NettingSetSelectedDateUsedToCalcCashDiscFlight::instance().isEnabled())
                {
                    _specTransManager.insert(
                        _execution.CreditCompany,
                        tableNum(CustTransOpen),
                        transOpenRecId,
                        CustTransOpen::find(transOpenRecId).AmountCur,
                        _execution.CurrencyToProcess,
                        NoYes::No,
                        0,
                        _execution.NettingDate);
                }
                else
                {
                    _specTransManager.insert(
                        _execution.CreditCompany,
                        tableNum(CustTransOpen),
                        transOpenRecId,
                        CustTransOpen::find(transOpenRecId).AmountCur,
                        _execution.CurrencyToProcess);
                }
            }
            else
            {
                Set openLineSet = markedOpenLineDistribution.lookup(transOpenRecId);
                openLineSet.add(custTransOpenLine.RecId);
            }
        }

        MapEnumerator mapEnumerator = markedOpenLineDistribution.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            RecId transOpenRecId = mapEnumerator.currentKey();
            Set openLineSet = mapEnumerator.currentValue();

            CustOpenTransLineManager custOpenTransLineManager = CustOpenTransLineManager::construct(transOpenRecId, _ledgerJournalTrans);

            CustTransOpenLine custTransOpenLine;

            while select custTransOpenLine
                where custTransOpenLine.CustTransOpen == transOpenRecId
            {
                if (!openLineSet.in(custTransOpenLine.RecId))
                {
                    custOpenTransLineManager.unmarkTransLine(custTransOpenLine);

                    // Cash disc will be fit into this scenario afterwards
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTransactionText</Name>
				<Source><![CDATA[
    private TransactionTextLarge determineTransactionText(
        LedgerTransTxt _ledgerTransTxt,
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendNettingExecution _execution)
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();

        transactionTxt.setType(_ledgerTransTxt);
        transactionTxt.setVoucher(_ledgerJournalTrans.Voucher);
        transactionTxt.setDate(_ledgerJournalTrans.TransDate);

        CustVendNettingAgreement agreement = CustVendNettingAgreement::findByPair(_execution.NettingPair);
        transactionTxt.setFormLetter(agreement.Name);

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>