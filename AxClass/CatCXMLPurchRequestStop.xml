<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPurchRequestStop</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class CatCXMLPurchRequestStop
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>stopPR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stop the Purchase request
    /// </summary>
    /// <param name = "_cxmlPurchRequest">
    /// An instance of <c>CatCXMLPurchRequest</c> data type
    /// </param>
    static void stopPR(CatCXMLPurchRequest _cxmlPurchRequest)
    {
        CatCXMLPurchRequestHistory cxmlPurchRequestHistory;
        
        if (_cxmlPurchRequest.PurchReqSendStatus == PurchReqSendStatus::Sent)
        {
            throw error("@CXM:StopPurchaseRequestError");
        }

        ttsBegin;

        //The PurchRequest will be re-set to waiting.
        _cxmlPurchRequest.PurchReqSendStatus = PurchReqSendStatus::Stopped;
        _cxmlPurchRequest.PurchReqVendStatus = PurchReqVendStatus::Waiting;
        _cxmlPurchRequest.update();

        //find all the history records for the PurchId and where the record hasn't been archived.
        //This should be the last record as the archived records should be stopped anyway.
        cxmlPurchRequestHistory = CatCXMLPurchRequestHistory::findByCurrent(_cxmlPurchRequest.PurchId,true);

        cxmlPurchRequestHistory.PurchReqSendStatus = PurchReqSendStatus::Stopped;
        cxmlPurchRequestHistory.PurchReqStatusChangedDateTime = DateTimeUtil::getSystemDateTime();
        cxmlPurchRequestHistory.PurchReqVendStatus = PurchReqVendStatus::Waiting;

        cxmlPurchRequestHistory.UserID = curUserId();

        cxmlPurchRequestHistory.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.record())
        {

            CatCXMLPurchRequestStop::stopPR(_args.record());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>