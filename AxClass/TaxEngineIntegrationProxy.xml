<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEngineIntegrationProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics365.Tax.Core;
using Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// Instance of GTE interface <c>ITaxIntegrationUtilsProxy</c> providing FinOps implementation.
/// </summary>
[ExportMetadataAttribute(identifierStr(ITaxIntegrationUtilsProxy), 'Default')]
[ExportAttribute(identifierStr(Microsoft.Dynamics365.Tax.Core.GTEPlus.ITaxIntegrationUtilsProxy))]
internal final class TaxEngineIntegrationProxy implements GTEPlus.ITaxIntegrationUtilsProxy
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ConvertUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity from base unit to tax unit
    /// </summary>
    /// <param name = "_itemId">Item Id</param>
    /// <param name = "_quantity">Quantity</param>
    /// <param name = "_baseUnit">Base Unit</param>
    /// <param name = "_taxUnit">Tax Unit</param>
    /// <param name = "_itemInventDimId">Item Invent Dimension Id</param>
    /// <param name = "_packaging">Packaging</param>
    /// <returns></returns>
    public Amount ConvertUnit(str _itemId,
                        Qty _quantity,
                        UnitOfMeasureSymbol _baseUnit,
                        UnitOfMeasureSymbol _taxUnit,
                        InventDimId _itemInventDimId,
                        boolean _classifyAsPackingDuty)
    {
        if (_classifyAsPackingDuty)
        {
            return Tax::packagingQuantity(_quantity,
                                    _baseUnit,
                                    _itemId,
                                    _itemInventDimId);
        }
        else
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                    _itemInventDimId,
                                                                                    _quantity,
                                                                                    _baseUnit,
                                                                                    _taxUnit,
                                                                                    NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSolution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns solution
    /// </summary>
    /// <param name="feature guid">feature Guid</param>
    /// <param name="feature version number">feature version number</param>
    /// <returns>solution</returns>
    public Solution GetSolution(str featureGuid, int featureVersionNumber)
    {
        return TaxServiceFeatureSetupProvider::construct().getSolution(featureGuid, featureVersionNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns logger
    /// </summary>
    /// <param name="loggerNamespace">logger namespace</param>
    /// <returns>logger</returns>
    public GTEPlus.ITaxLogger CreateLogger(str loggerNamespace)
    {
        return new TaxLogger(loggerNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSecretValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns secret value
    /// </summary>
    /// <param name="key vault secret name"></param>
    /// <returns>secret value</returns>
    public str GetSecretValue(str keyVaultSecretName)
    {
        KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findByName(keyVaultSecretName);

        if (!keyVaultCertificateTable)
        {
            throw new System.Exception(strFmt("@TaxIntegration:KeyVaultRuntimeValidationException", keyVaultSecretName, curExt()));
        }

        KeyVaultParameters keyVaultParameter = KeyVaultParameters::findRecId(keyVaultCertificateTable.KeyVaultRef);

        KeyVaultClient keyVaultClient = KeyVaultClientHelper::getOrCreateClient(
            keyVaultParameter.Url,
            keyVaultParameter.AppClientId,
            keyVaultParameter.getClientSecretKey());

        return keyVaultClient.GetValue(keyVaultCertificateTable.KeyVaultCertificate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>