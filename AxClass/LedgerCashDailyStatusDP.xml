<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCashDailyStatusDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCashDailyStatusDP</c> class provides data for the <c>LedgerCashDailyStatus</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the data provider class for the <c>LedgerCashDailyStatus</c> SSRS report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(LedgerCashDailyStatus)),
    SRSReportParameterAttribute(classStr(LedgerCashDailyStatusContract))
]
class LedgerCashDailyStatusDP extends SrsReportDataProviderBase
{
    LedgerCashDailyStatusTmp    ledgerCashDailyStatusTmp;
    AmountMSTDebCred            accountingCurrencyBalance;
    AmountMSTDebCred            accountingCurrencyDebitBalance;
    AmountMSTDebCred            accountingCurrencyCreditBalance;
    Counter                     numberOfDtTrans;
    Counter                     numberOfCrTrans;
    CurrentOperationsTax        postingLayer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the main account.
    /// </summary>
    /// <param name="_accountNum">
    /// The main account number.
    /// </param>
    /// <param name="_startDate">
    /// The start date.
    /// </param>
    /// <param name="_endDate">
    /// The end date.
    /// </param>
    /// <param name="_separateDebitsAndCredits">
    /// A Boolean value that indicates whether credits should be excluded from the balance; optional.
    /// </param>
    private void calculateBalance(
        MainAccountNum  _accountNum,
        TransDate       _startDate,
        TransDate       _endDate,
        boolean         _separateDebitsAndCredits = false)
    {
        NoYes                       drCrediting;
        Query                       query;
        QueryRun                    qr;
        QueryBuildRange             qbRange;
        QueryBuildDataSource        qbdsMainAccount;
        QueryBuildDataSource        qbdsGeneralJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;

        query = new Query(queryStr(LedgerCashDailyStatus));

        qbdsMainAccount = query.dataSourceTable(tableNum(MainAccount));

        SysQuery::findOrCreateRange(
            qbdsMainAccount,
            fieldNum(MainAccount, MainAccountId)).value(queryValue(_accountNum));

        qbdsGeneralJournalEntry = query.dataSourceTable(tableNum(GeneralJournalEntry));

        GeneralJournalEntry::addSecureRangeForLedger(qbdsGeneralJournalEntry);

        qbRange = qbdsGeneralJournalEntry.findRange(fieldNum(GeneralJournalEntry, AccountingDate));
        qbRange.value(SysQuery::range(_startDate, _endDate));

        qbRange = qbdsGeneralJournalEntry.findRange(fieldNum(GeneralJournalEntry, PostingLayer));
        qbRange.value(queryValue(postingLayer));

        qbRange = qbdsGeneralJournalEntry.findRange(fieldNum(GeneralJournalEntry, Ledger));
        qbRange.value(queryValue(Ledger::current()));

        qr = new QueryRun(query);

        while (qr.next())
        {
            generalJournalAccountEntry = qr.get(tableNum(GeneralJournalAccountEntry));

            drCrediting = generalJournalAccountEntry.IsCredit;

            if (_separateDebitsAndCredits)
            {
                if (drCrediting == NoYes::No)
                {
                    accountingCurrencyDebitBalance = generalJournalAccountEntry.AccountingCurrencyAmount;
                    numberOfDtTrans = int642int(generalJournalAccountEntry.RecId);
                }
                else
                {
                    accountingCurrencyCreditBalance = generalJournalAccountEntry.AccountingCurrencyAmount;
                    numberOfCrTrans = int642int(generalJournalAccountEntry.RecId);
                }
            }
            else
            {
                accountingCurrencyBalance += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related bank data for a main account by account number.
    /// </summary>
    /// <param name="_accountNum">
    /// The main account number
    /// </param>
    /// <returns>
    /// An instance of the bank account table.
    /// </returns>
    private BankAccountTable getBankAccountTable(MainAccountNum _accountNum)
    {
        BankAccountTable                    bankAccountTable;
        MainAccount                         mainAccount;
        DimensionAttributeValueCombination  dimAttrValueCombo;

        select firstonly RecId, AccountNum, Name from bankAccountTable
            exists join dimAttrValueCombo
            where bankAccountTable.LedgerDimension == dimAttrValueCombo.RecId
                exists join mainAccount
                where mainAccount.RecId == dimAttrValueCombo.MainAccount
                    && mainAccount.MainAccountId == _accountNum
                    && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerCashDailyStatusTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>LedgerCashDailyStatusTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>LedgerCashDailyStatusTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerCashDailyStatusTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerCashDailyStatusTmp getLedgerCashDailyStatusTmp()
    {
        select ledgerCashDailyStatusTmp;
        return ledgerCashDailyStatusTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SSRS report.
    /// </summary>
    /// <remarks>
    /// The method will compute the data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        TransDate                       startDate;
        TransDate                       endDate;
        LedgerCashDailyStatusContract   contract;
        LedgerCashReportType            ledgerCashReportType;
        MainAccount                     mainAccount;
        BankAccountTable                bankAccountTable;
        CurrencyCode                    currencyCode;

        // Main account cash category flag, which has taken the fixed value '1'
        // while initializing the MainAccountCategory table default records,
        // refer to MainAccountCategory.createDefaultAcctCategories() method.
        #Define.CashCategory(1)

        contract = this.parmDataContract();

        ledgerCashReportType = contract.parmLedgerCashReportType();

        if (ledgerCashReportType == LedgerCashReportType::CashDaily)
        {
            startDate = contract.parmAsOnDate();
            endDate = contract.parmAsOnDate();
        }
        else
        {
            startDate = contract.parmFromDate();
            endDate = contract.parmToDate();
        }

        postingLayer = contract.parmPostingLayer();
        currencyCode = Ledger::accountingCurrency();

        // all cash related ledger accounts
        while select MainAccountId, RecId from mainAccount
            order by MainAccountId
            where mainAccount.AccountCategoryRef == #CashCategory
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            // Beginning balance
            this.calculateBalance(mainAccount.MainAccountId, dateNull(), startDate - 1);

            // Debit/Credit ammount and number of trans
            this.calculateBalance(mainAccount.MainAccountId, startDate, endDate, true);

            // Bank of the cash account
            bankAccountTable = this.getBankAccountTable(mainAccount.MainAccountId);

            ledgerCashDailyStatusTmp.clear();
            ledgerCashDailyStatusTmp.AccountNum = mainAccount.MainAccountId;
            ledgerCashDailyStatusTmp.AccountName = MainAccount::getLocalizedName(mainAccount.RecId);
            ledgerCashDailyStatusTmp.CurrencyCode = currencyCode;

            ledgerCashDailyStatusTmp.BeginningBalance = accountingCurrencyBalance;

            ledgerCashDailyStatusTmp.AmountDebit = accountingCurrencyDebitBalance;
            ledgerCashDailyStatusTmp.AmountCredit = -accountingCurrencyCreditBalance;

            // End balance
            ledgerCashDailyStatusTmp.EndBalance = accountingCurrencyBalance + accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;

            ledgerCashDailyStatusTmp.DtQuantity = numberOfDtTrans;
            ledgerCashDailyStatusTmp.CrQuantity = numberOfCrTrans;

            ledgerCashDailyStatusTmp.BankAccount = bankAccountTable.AccountNum;
            ledgerCashDailyStatusTmp.BankName = bankAccountTable.Name;

            ledgerCashDailyStatusTmp.insert();

            accountingCurrencyBalance       = 0;
            accountingCurrencyDebitBalance  = 0;
            accountingCurrencyCreditBalance = 0;
            numberOfDtTrans                 = 0;
            numberOfCrTrans                 = 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>