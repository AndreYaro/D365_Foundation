<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOpsManagementInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>ProjOpsManagementInstrumentationActivities</c> represents different contexts/activities pertaining to project operations management and accounting.
/// </summary>
public final class ProjOpsManagementInstrumentationActivities extends ProjOpsInstrumentationBaseActitivies
{
    private const str ProjOpsManagementPrefix = 'ProjOpsManagement.';
    private const str ProjItemTransInsert = 'ProjItemTransInsert';
    private const str ProjForecastUpsert = 'ProjForecastUpsert';
    private const str CalcPurchNewTotalAmount = 'CalcPurchNewTotalAmount';
    private const str ProjInventTransMarkingUpdate = 'ProjInventTransMarkingUpdate';
    private const str ProjItemReqProjSubledgerDeletion = 'ProjItemReqProjSubledgerDeletion';
    private const str ProjItemReqInvProposalPosting = 'ProjItemReqInvProposalPosting';
    private const str ProjItemReqPackingSlipCancellation = 'ProjItemReqPackingSlipCancellation';
    private const str ProjPOProdReceiptCancellation = 'ProjPOProdReceiptCancellation';
    private const str ProjItemReqWithMultipleFundingSources = 'ProjItemReqWithMultipleFundingSources';
    private const str ProjReleaseVendorRetentionContext = 'ProjReleaseVendorRetentionContext';
    private const str InsertCommittedCostContext = 'InsertCommittedCost';
    private const str UpdateCommittedCostContext = 'UpdateCommittedCost';
    private const str ReverseCommittedCostContext = 'ReverseCommittedCost';
    private const str DeleteCommittedCostContext = 'DeleteCommittedCost';
    private const str ValidateTaskPredecessors = 'ValidateTaskPredecessors';
    
    // Activity property constants
    internal static const str ProjForecastOperation = 'Operation';
    internal static const str ProjForecastInsert = 'Insert';
    internal static const str ProjForecastUpdate = 'Update';
    internal static const str CommittedCostOrig = 'CommittedCostOrig';
    public const str Action = 'Action';
    public const str ProjTableLookup = 'ProjTableLookup';
    public const str ProjTableLookupBuildQuery = 'ProjTableBuildLookupQuery';
    public const str ProjectId = 'ProjectId';
    public const str TransId = 'TransId';
    public const str CallStack = 'CallStack';
    public const str UpdateAccountingDistributions = 'UpdateAccountingDistributions';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateAccountingDistributionsContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for updating accounting distributions operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext updateAccountingDistributionsContext()
    {
        return logger.activityContext(this.activity(UpdateAccountingDistributions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTableLookupContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for project table lookup run operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projTableLookupContext()
    {
        return logger.activityContext(this.activity(ProjTableLookup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjTableLookupBuildQueryContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for project table lookup build query operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext ProjTableLookupBuildQueryContext()
    {
        return logger.activityContext(this.activity(ProjTableLookupBuildQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemTransInsertContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for project item transaction insert operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projItemTransInsertContext()
    {
        return logger.activityContext(this.activity(ProjItemTransInsert));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInventTransMarkingUpdateContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for invent trans update marking operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projInventTransMarkingUpdateContext()
    {
        return logger.activityContext(this.activity(ProjInventTransMarkingUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemReqProjSubledgerDeletionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for item requirement project subledger creation
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false), SysObsolete('Usage of this method has been removed', false, 11\10\2023)]
    public SysInstrumentationActivityContext projItemReqProjSubledgerDeletionContext()
    {
        return logger.activityContext(this.activity(ProjItemReqProjSubledgerDeletion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemReqInvProposalPostingContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for item requirement invoice proposal posting when ProjCancelItemReqPackingSlipFeature is on 
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projItemReqInvProposalPostingContext()
    {
        return logger.activityContext(this.activity(ProjItemReqInvProposalPosting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemReqPackingSlipCancellationContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for item requirement packing slip cancellation when ProjCancelItemReqPackingSlipFeature is on
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projItemReqPackingSlipCancellationContext()
    {
        return logger.activityContext(this.activity(ProjItemReqPackingSlipCancellation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPOProdReceiptCancellationContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for product receipt cancellation when PO is linked to item requirement and ProjCancelPOReceiptWithItemRequirementFeature is on
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projPOProdReceiptCancellationContext()
    {
        return logger.activityContext(this.activity(ProjPOProdReceiptCancellation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemReqWithMultipleFundingSourcesContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for setting/using funding sources on SalesLine of type Item req their SalesTable when ProjItemRequirementMultipleFundingSources feature is enabled
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projItemReqWithMultipleFundingSourcesContext()
    {
        return logger.activityContext(this.activity(ProjItemReqWithMultipleFundingSources));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projForecastUpsertContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for project forecast insert/update operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projForecastUpsertContext()
    {
        return logger.activityContext(this.activity(ProjForecastUpsert));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPurchNewTotalAmountContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for vendor invoice purch total amount calculation with rentention.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext calcPurchNewTotalAmountContext()
    {
        return logger.activityContext(this.activity(CalcPurchNewTotalAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projReleaseVendorRetentionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for releasing vendor retention without invoice quantity.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext projReleaseVendorRetentionContext()
    {
        return logger.activityContext(this.activity(ProjReleaseVendorRetentionContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCommittedCostContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for inserting committed cost record.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext insertCommittedCostContext()
    {
        return logger.activityContext(this.activity(InsertCommittedCostContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCostContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for updating committed cost record.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext updateCommittedCostContext()
    {
        return logger.activityContext(this.activity(UpdateCommittedCostContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCostContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for reversing committed cost record.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext reverseCommittedCostContext()
    {
        return logger.activityContext(this.activity(ReverseCommittedCostContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCommittedCostContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for deleting committed cost record.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext deleteCommittedCostContext()
    {
        return logger.activityContext(this.activity(DeleteCommittedCostContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaskPredecessorsContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for validating WBS task predecessors.
    /// </summary>
    /// <returns>Instrumentation activity context object.</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext validateTaskPredecessorsContext()
    {
        return logger.activityContext(this.activity(ValidateTaskPredecessors));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for <c>ProjOpsManagementInstrumentationActivities</c> object.
    /// </summary>
    /// <param name = "_logger"><c>ProjOpsManagementInstrumentationLogger</c> object.</param>
    /// <returns><c>ProjOpsManagementInstrumentationActivities</c> instance.</returns>
    [Hookable(false)]
    public static ProjOpsManagementInstrumentationActivities construct(ProjOpsInstrumentationLogger  _logger)
    {
        ProjOpsManagementInstrumentationActivities activities = new ProjOpsManagementInstrumentationActivities();
        activities.logger = _logger;
        activities.Prefix = ProjOpsManagementPrefix;
        return activities;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>