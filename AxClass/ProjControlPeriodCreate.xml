<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlPeriodCreate extends ProjControlPeriod implements BatchRetryable
{
    boolean     periodCodeSet;
    boolean     periodDateSet;

    ProjControlCompletionMethod     origProjCompletionMethod;
    boolean                         origContinuousPeriods;
    ProjPeriodId                    origPeriodId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateCostGroup</Name>
				<Source><![CDATA[
    protected boolean canCreateCostGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOutput</Name>
				<Source><![CDATA[
    boolean canOutput()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (this.isForecastModelRequired())
        {
            if (!this.parmForecastModelId())
            {
                this.parmForecastModelId(ProjParameters::find().TotalForecastModel);
                if (!this.parmForecastModelId())
                {
                    return checkFailed("@SYS76154");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForecastModelRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a forecast model is required.
    /// </summary>
    /// <returns>
    /// true if a forecast model is required; otherwise, false.
    /// </returns>
    protected boolean isForecastModelRequired()
    {
        return (this.parmProjEstimateMethod() == ProjEstimateMethod::RemainingEstimate)      ||
                (this.parmProjEstimateMethod() == ProjEstimateMethod::TotBudgetMinusActual)   ||
                (this.parmProjEstimateMethod() == ProjEstimateMethod::PreviousEstimate)       ||
                (this.parmProjEstimateMethod() == ProjEstimateMethod::CostTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(projControlPeriod_create),this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputIncludeCreated</Name>
				<Source><![CDATA[
    NoYes outputIncludeCreated()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS73682";
    }

]]></Source>
			</Method>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected void action()
    {
        boolean recalcFlag;
        boolean validEstimate = true;

        if (queryRun.changed(tableNum(ProjWIPTable)))
        {
            projWIPTable = queryRun.get(tableNum(ProjWIPTable));

            //Check permissions to create estimates
            if (!this.parmSkipCreateEstimateValidation() && !this.isValidToCreateEstimate(projWIPTable))
            {
                validEstimate = false;
            }
            
            if (validEstimate)
            {
                recalcFlag = this.hasRecalculatedExistingEstimates(projWIPTable);
            }
        }

        if (validEstimate && !recalcFlag)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRecalculatedExistingEstimates</Name>
				<Source><![CDATA[
    private boolean hasRecalculatedExistingEstimates(ProjWIPTable _projWIPTable)
    {
        boolean recalcFlag;

        // set the default parameters on a per project basis and find the estimate if one exist for the current or specified period
        if (this.parmPeriodic())
        {
            if (ProjControl::isStraightLine(_projWIPTable.ProjId))
            {
                projCompletionMethod = ProjControlCompletionMethod::Automatic;
                continuesPeriodes    = true;
            }
            else
            {
                projCompletionMethod = origProjCompletionMethod;
                continuesPeriodes    = origContinuousPeriods;
            }

            if (!periodCodeSet)
            {
                this.parmProjPeriodId(_projWIPTable.PeriodId);
                this.parmProjControlId(_projWIPTable.ControlId);
            }

            if (!periodDateSet)
            {
                ProjPeriodLine periodLine = ProjPeriodLine::findFromPeriod(_projWIPTable.PeriodId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                this.parmProjPeriodFrom(periodLine.PeriodFrom);
                this.parmProjPeriodTo(periodLine.PeriodTo);
            }

            ProjControlPeriodTable localProjControlPeriodTable = ProjControlPeriodTable::findUsingBegBal(_projWIPTable.ProjId, _projWIPTable.ControlId, this.parmProjPeriodFrom(), this.parmBeginningBalance());

            if (localProjControlPeriodTable && localProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created)
            {
                recalcFlag = true;
                this.parmUpdateCalculation(recalcFlag);
                this.parmProjPeriodId(_projWIPTable.PeriodId);
                this.recalculateEstimate(localProjControlPeriodTable);
            }
        }

        return recalcFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        periodCodeSet = (this.parmProjPeriodId())? true: false;
        periodDateSet = (this.parmProjPeriodTo() != dateNull())? true: false;
        //initialize the values for straight line project
        if (this.parmPeriodic())
        {
            origProjCompletionMethod    = projCompletionMethod;
            origContinuousPeriods       = continuesPeriodes;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (!this.batchInfo().fieldBatchExecuteValue())
        {
            ret = super(calledFrom);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create estimate per specific estimate project execution.
    /// </summary>
    /// <param name = "_batchGUID">Batch unique GUID to identify the batch execution.</param>
    /// <param name = "_subtaskID">Subtask ID to idnentif the subtask execution.</param>
    /// <param name = "_projWIPId">The work in progress project ID to create project estimate.</param>
    /// <param name = "_projControlPeriodCreate">The project control period create object.</param>
    /// <remarks>
    /// This method is meant to be called by <c>ProjControlPeriodCreateTask</c> run() method
    /// for batch multiple subtasks purpose.
    /// </remarks>
    public static void createEstimate(guid _batchGUID, int _subtaskID,
        ProjWipId _projWIPId, ProjControlPeriodCreate _projControlPeriodCreate)
    {
        ProjRevRecInstrumentationLogger logger = ProjRevRecInstrumentationLogger::createLogger(classStr(ProjControlPeriodCreate));
        using (var activityContext = logger.revRecActivity().createEstimateSubTasksExecution())
        {
            _projControlPeriodCreate.periodCodeSet = (_projControlPeriodCreate.parmProjPeriodId())? true: false;
            _projControlPeriodCreate.periodDateSet = (_projControlPeriodCreate.parmProjPeriodTo() != dateNull())? true: false;

            activityContext.addCustomProperty(ProjRevRecInstrumentationActivities::BatchExecutionGUID, guid2Str(_batchGUID));
            activityContext.addCustomProperty(ProjRevRecInstrumentationActivities::BatchSubtasksId, int2Str(_subtaskID));
            
            boolean validEstimate = true;
            ProjWIPTable projWIPTableLoc;
            if (_projWIPId)
            {
                projWIPTableLoc = ProjWIPTable::find(_projWIPId);
                if (projWIPTableLoc)
                {
                    if (!_projControlPeriodCreate.isValidToCreateEstimate(projWIPTableLoc))
                    {
                        const str LoggerErrorMsg = 'Method: %1 ProjWIPTable: %2 Error: %3';
                        logger.logError(strFmt(LoggerErrorMsg,
                            'ProjControlPeriodCreate.createEstimate()',
                            projWIPTableLoc.RecId,
                            'Estimate project is not valid to create estimate.'));
                        validEstimate = false;
                    }
                    else
                    {
                        _projControlPeriodCreate.parmProjWIPTable(projWIPTableLoc);
                        _projControlPeriodCreate.parmIsContractLineUsed(projWIPTableLoc.IsContractLineUsed);
                        activityContext.addCustomProperty(ProjRevRecInstrumentationActivities::ProjWIPTableRecId, int642Str(projWIPTableLoc.RecId));
                    }
                }
                else
                {
                    const str LoggerErrorMsg = 'Method: %1 DataAreaId: %2 ProjWIPID: %3 Error: %4';
                    logger.logError(strFmt(LoggerErrorMsg,
                        'ProjControlPeriodCreate.createEstimate()',
                        curExt(),
                        _projWIPId,
                        'Estimate project is not found from ProjWIPTable table.'));
                    validEstimate = false;
                }
            }
            else
            {
                logger.logError(strFmt(ProjConstants::GeneralLoggerErrorMsg,
                        'ProjControlPeriodCreate.createEstimate()',
                        'Estimate project ID parameter has no value.'));
                validEstimate = false;
            }

            _projControlPeriodCreate.initRunProgress(false);

            if (validEstimate)
            {
                try
                {
                    ttsbegin;
                    if (!_projControlPeriodCreate.hasRecalculatedExistingEstimates(projWIPTableLoc))
                    {
                        _projControlPeriodCreate.addEstimates(projWIPTableLoc);
                    }

                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.logError(strFmt(LoggerRetryExceptionMsg, 'Deadlock', 'ProjControlPeriodCreate.createEstimate()', projWIPTableLoc.RecId));
                        throw Exception::Deadlock;
                    }
                    else
                    {
                        sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            logger.logError(strFmt(LoggerRetryExceptionMsg, 'UpdateConflict', 'ProjControlPeriodCreate.createEstimate()', projWIPTableLoc.RecId));
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        logger.logError(strFmt(LoggerTTSLevelNotZeroExceptionMsg, 'UpdateConflict', 'ProjControlPeriodCreate.createEstimate()', projWIPTableLoc.RecId));
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        logger.logError(strFmt(LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ProjControlPeriodCreate.createEstimate()', projWIPTableLoc.RecId));
                        throw Exception::TransientSqlConnectionError;
                    }
                }
                catch (Exception::Error)
                {
                    logger.logError(strFmt(LoggerRetryExceptionMsg, 'Exception', 'ProjControlPeriodCreate.createEstimate()', projWIPTableLoc.RecId));
                    throw error("@SYS21628");
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>