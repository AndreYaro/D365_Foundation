<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingSimulatorAttributeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPricingSimulatorAttributeHelper</c> class is a helper class for property-based retail price simulator
/// that contains method for looking up attribute related records.
/// </summary>
internal static class RetailPricingSimulatorAttributeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAttributeDefinitionsByPricingPropertyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get list of attribute definitions by pricing property level.
    /// </summary>
    /// <param name = "_propertyLevel">The pricing property level.</param>
    /// <returns>List of attribute definitions for the attribute-typed pricing properties.</returns>
    internal static Map getAttributeDefinitionsByPricingPropertyLevel(RetailPricingPropertyLevel _propertyLevel)
    {
        Query query = RetailPricingSimulatorAttributeHelper::getAttributeDeifintionsQueryByPricingPropertyLevel(_propertyLevel);
        return RetailAttributeHelper::getAttributeDefinitionsByQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeDeifintionsQueryByPricingPropertyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the query to retrieve attribute definitions by pricing property level.
    /// </summary>
    /// <param name = "_propertyLevel">The pricing property level.</param>
    /// <returns>The query to retrieve attribute definitions.</returns>
    private static Query getAttributeDeifintionsQueryByPricingPropertyLevel(RetailPricingPropertyLevel _propertyLevel)
    {
        Query query = new Query();
        QueryBuildRange qbr;
        QueryBuildDataSource qbdsProperty, qbdsAttribute;

        qbdsProperty = query.addDataSource(tableNum(RetailPricingPropertyDefinition));
        qbdsProperty.addRange(fieldNum(RetailPricingPropertyDefinition, PropertyLevel)).value(queryValue(_propertyLevel));
        qbdsProperty.addRange(fieldNum(RetailPricingPropertyDefinition, Status)).value(queryValue(RetailPricingPropertyProcessStatus::Published));
        qbdsProperty.addRange(fieldNum(RetailPricingPropertyDefinition, PropertyType)).value(queryValue(RetailPricingPropertyType::EcoResAttribute));
        qbdsProperty.addRange(fieldNum(RetailPricingPropertyDefinition, PropertySource)).value(queryValue(
            _propertyLevel == RetailPricingPropertyLevel::Header ? RetailPricingPropertySource::SalesOrderHeader : RetailPricingPropertySource::SalesOrderLine));

        qbdsAttribute = qbdsProperty.addDataSource(tableNum(RetailEcoResAttributeDefinitionsView));
        qbdsAttribute.addLink(fieldNum(RetailPricingPropertyDefinition, EcoResAttributeRecId), fieldNum(RetailEcoResAttributeDefinitionsView, AttributeDefinitionRecId));
        qbdsAttribute.joinMode(JoinMode::InnerJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEcoResAttributeValuesForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete EcoResAttribute values for given price simulator sales line.
    /// </summary>
    /// <param name = "_psLine">The price simulator sales line.</param>
    internal static void deleteEcoResAttributeValuesForSalesLine(RetailPricingSimulatorSalesLine _psLine)
    {
        var instanceValue = RetailPricingSimulatorInstanceValue::findByTransaction(_psLine.RetailPricingSimulatorSalesTransaction, _psLine.SalesLineNum, true);
        RecId instanceValueRecId = instanceValue.RecId;

        if (instanceValueRecId)
        {
            ttsbegin;
            
            EcoResValue ecoResValue;
            EcoResAttributeValue ecoResAttributeValue;
            
            // delete from EcoResValue
            ecoResValue.skipDatabaseLog(true);
            ecoResValue.skipDataMethods(true);
            ecoResValue.skipEvents(true);
            ecoResValue.skipDeleteActions(true);
            ecoResValue.skipDeleteMethod(true);

            delete_from ecoResValue
                exists join ecoResAttributeValue where ecoResAttributeValue.Value == ecoResValue.RecId && ecoResAttributeValue.InstanceValue == instanceValueRecId;
            
            // delete from EcoResAttributeValue
            ecoResAttributeValue.skipDeleteActions(true);
            ecoResAttributeValue.skipDeleteMethod(true);
            ecoResAttributeValue.skipDatabaseLog(true);
            ecoResAttributeValue.skipDataMethods(true);
            ecoResAttributeValue.skipEvents(true);

            delete_from ecoResAttributeValue where  ecoResAttributeValue.InstanceValue == instanceValueRecId;

            instanceValue.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>