<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrCustPaym_OnAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustPaym_OnAccount</c> class to create a customer payment of type "on account".
/// </summary>
class mcrCustPaym_OnAccount extends MCRCustPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCustBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates customer balance.
    /// </summary>
    /// <returns>
    ///     The amount of a customer's balance.
    /// </returns>
    public AmountMST calcCustBalanceMST()
    {
        CustTable   custTable;
        SalesTable  salesTable;
        AmountMST   custBalance;

        if (mcrCustPaymTable.RefTableId == tablenum(SalesTable))
        {
            salesTable  = SalesTable::findRecId(mcrCustPaymTable.RefRecId);
            custTable   = CustTable::find(salesTable.InvoiceAccount);
            custBalance = custTable.openBalanceMST();
        }
        return custBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustBalancePlusNonInvoicedMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates a customer's balance including non-invoiced orders.
    /// </summary>
    /// <param name="_custPaymTotals">
    ///     The <c>MCRCustPaymTotals</c> record containing relevant payment information.
    /// </param>
    /// <param name="_custBalanceMST">
    ///     The amount of a customer's balance; optional.
    /// </param>
    /// <returns>
    ///     The amount of the customer's balance.
    /// </returns>
    public AmountMST calcCustBalancePlusNonInvoicedMST(MCRCustPaymTotals _custPaymTotals, AmountMST _custBalanceMST = 0)
    {
        CustTable custTable;

        custTable = CustTable::find(_custPaymTotals.getInvoiceAccount());
        return custTable.openInvoiceBalanceMSTDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
        public boolean canPost(AmountCur _postAmount)
    {
        if (_postAmount != 0
            && mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a credit check for this "on account" payment.
    /// </summary>
    /// <returns>
    ///     true if no credit check is performed, if the credit check is
    ///     successful, or if the order has been allowed to be processed
    ///     despite the fact that it puts the customer over their limit;
    ///     otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the payment amount is positive and the customer is configured with a
    ///     credit limit or with a mandatory credit check, then a credit check is
    ///     performed.  If the credit check fails, a message is written to the infolog.
    ///     The credit check takes into account the current customer balance, including
    ///     uninvoiced amounts and non-posted payment amounts on sales orders that have
    ///     been authorized to be picked, as well as uninvoiced amounts and non-posted
    ///     payment amounts on the sales order or free-text invoice currently being
    ///     authorized.
    ///     Sales orders that are "open order", "on hold", or "pending", and free-text
    ///     invoices that have not been posted, are not considered in this credit check.
    ///     No credit is "reserved" for sales orders and free-text invoices in such
    ///     states, even though an "on account" payment associated with one of them
    ///     might have a status of "authorized".  Thus, re-authorization of an
    ///     "authorized" "on account" payment might fail, even if the amount has not
    ///     changed.
    ///     Posted payment amounts for sales orders that have been re-opened are
    ///     considered in the credit check, however, because all posted payment amounts
    ///     are included in the current customer balance.
    /// </remarks>
    public boolean checkCreditLimit()
    {
        boolean         ret = true;
        CustCreditLimit custCreditLimit;

        MCRCustPaymTotals   mcrCustPaymTotals;
        MCROrderEventTable  mcrOrderEventTable;
        CustTable          custTable;

        SalesTable salesTable;
        Common     common;

        setPrefix("@MCR20667");

        // Only perform credit checking if turned on.
        if ((mcrCustPaymTable.RefTableId == tablenum(SalesTable) && !CustParameters::find().mcrSalesCheckCredit())
            || (mcrCustPaymTable.RefTableId == tablenum(CustInvoiceTable) && !CustParameters::find().mcrFreeInvoiceCheckCredit()))
        {
            return true;
        }

        // if the payment amount is non-positive or already authorized, do not perform
        // a credit check.
        if (mcrCustPaymTable.getPostedAmount() < 0
            || (mcrCustPaymTable.Amount <= 0.0 && mcrCustPaymTable.PercentAmount <= 0.0)
            || (mcrCustPaymTable.OnAccountAuthorized == NoYes::Yes))
        {
            return true;
        }

        // find the customer for the invoice account
        mcrCustPaymTotals = MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId,
                                                      mcrCustPaymTable.RefRecId);
        custTable = CustTable::find(mcrCustPaymTotals.getInvoiceAccount());

        // If credit check is not required for the customer, no credit check needed.
        if (!custTable.creditMax && !custTable.mandatoryCreditLimit)
        {
            return true;
        }

        // Check the customer's credit based on the record tied to the payment.
        switch (mcrCustPaymTable.RefTableId)
        {
            case tablenum(SalesTable):
                common = SalesTable::findRecId(mcrCustPaymTable.RefRecId);
            break;
            case tablenum(CustInvoiceTable):
                common = CustInvoiceTable::FindRecId(mcrCustPaymTable.RefRecId);
            break;
            // No credit check for payments on:  MCRContinuityCustHeader,
            // CustPaymSchedLine, LedgerJournalTrans, MCRCustCreditTable
            default:
                return true;
        }

        // If record found, perform the credit check.
        if (common)
        {
            custCreditLimit = CustCreditLimit::construct(common);
            custCreditLimit.mcrDisplayMessage(false);
            ret = custCreditLimit.check();
        }

        // If credit check failed, display the error message.
        if (!ret)
        {
            // Insert order event, payment is about to go on credit limit hold
            MCROrderEventTable.insertPaymentEvent(MCROrderEventType::OverCreditLimit, mcrCustPaymTable,
                strfmt("@MCR24830", (custCreditLimit.balanceTotals())));

            // if credit limit is configured to be a hard error, decline authorization
            if (CustParameters::find().CreditLineError == CreditLineErrorType::Error)
            {
                error(custCreditLimit.mcrGetErrorMessage());
            }
            else if (CustParameters::find().CreditLineError == CreditLineErrorType::MCRReview)
            {
                warning(custCreditLimit.mcrGetErrorMessage());
            }
            else // credit limit is just a warning
            {
                salesTable = mcrCustPaymTable.salesTable();
                // if user input is allowed, ask user to authorize or decline payment
                if (this.allowUserInput())
                {
                    if (!this.promptCreditLimitExceeded(custCreditLimit.mcrGetErrorMessage()))
                    {
                        warning(custCreditLimit.mcrGetErrorMessage());
                    }
                    else
                    {
                        ret = true;
                    }
                }
                //  Have to take free text invoices and mail batches
                //  (neither allow user input, but need to go on over
                //      credit limit "hold")
                //  If it is a quote, want it to go over credit limit
                else if (mcrCustPaymTable.RefTableId == tablenum(CustInvoiceTable)
                         || salesTable.QuotationId)
                {
                    warning(custCreditLimit.mcrGetErrorMessage());
                }
                else // give warning, but authorize payment by returning true
                {
                    warning(custCreditLimit.mcrGetErrorMessage());
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the default value for the field passed in.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method finds a default value.
    /// </param>
    /// <returns>
    ///     The default value for the specified field if it has been defined; otherwise, null.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        MCRCustPaymTotals custPaymTotals;

        Percent totalPercentAmount = 0.0;

        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrepay):
                return NoYes::No;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                // default to remaining balance
                custPaymTotals =
                    MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId,
                                                mcrCustPaymTable.RefRecId);

                if (custPaymTotals)
                {
                    totalPercentAmount = custPaymTotals.getTotalPercentAmount();
                }

                return max(100.0 - totalPercentAmount, 0.0);
            case fieldnum(MCRCustPaymTable, Amount):
                return 0.0;
        }

        return super(_fieldID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    /// <remarks>
    ///     An "on account" payment has no
    ///     additional required data.
    /// </remarks>
    public boolean hasPaymTypeData()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(MCRCustPaymTable _mcrCustPaymTable, boolean _allowUserInput)
    {
        if (_mcrCustPaymTable.CustPaymType != MCRCustPaymType::OnAccount)
        {
            throw error(strFmt("@MCR32269", funcName(),
                               enum2str(MCRCustPaymType::OnAccount)));
        }

        super(_mcrCustPaymTable, _allowUserInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    [Hookable(false)]
    protected real performBalanceCheck()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs authorization on this payment.
    /// </summary>
    /// <returns>
    ///    the resulting payment status of <c>MCRCustPaymStatus::Authorized</c>
    ///     or <c>MCRCustPaymStatus::OverCreditLimit</c>.
    /// </returns>
    /// <remarks>
    ///     A payment of type "on account" is automatically authorized if it is a
    ///     credit (non-negative amount).
    ///     For a debit (negative amount), a credit is performed.  Errors or warnings
    ///     might be written to the infolog during the credit check.  If the credit
    ///     check fails, the resulting status is MCRCustPaymStatus::OverCreditLimit.
    /// </remarks>
    protected MCRCustPaymStatus performAuth()
    {
        MCRCustPaymStatus resultingStatus;

        // automatically authorize credits
        if (mcrCustPaymTable.Amount <= 0.0)
        {
            // In case of On Account payments, we are setting th payment status
            // to posted instead of authorized, in order to avoid 2 round trips to DB
            resultingStatus = MCRCustPaymStatus::Posted;
            mcrCustPaymTable.OnAccountAuthorized = NoYes::Yes;
        }
        else    // debit -- perform credit check
        {
            if (this.checkCreditLimit())
            {
                // In case of On Account payments, we are setting th payment status
                // to posted instead of authorized, in order to avoid 2 round trips to DB
                resultingStatus = MCRCustPaymStatus::Posted;
            }
            else
            {
                if (CustParameters::find().CreditLineError == CreditLineErrorType::Error)
                {
                    resultingStatus = MCRCustPaymStatus::NotSubmitted;
                }
                else if (CustParameters::find().CreditLineError == CreditLineErrorType::Warning)
                {
                    // If we are authorizing the payment and the error type is warning, we know
                    //      that the user has clicked 'No' otherwise authorization wouldn't happen
                    resultingStatus = MCRCustPaymStatus::NotSubmitted;
                }
                // Parameter is review, so send it to the workbench
                else if (CustParameters::find().CreditLineError == CreditLineErrorType::MCRReview)
                {
                    // If not error, set to over credit limit
                    resultingStatus = MCRCustPaymStatus::Declined;
                }
            }
        }

        mcrCustPaymTable.Status = resultingStatus;
        ttsBegin;
        mcrCustPaymTable.update();
        ttsCommit;

        return resultingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs posting operations after posting records to the
    ///     ledger journal.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    protected void performPost(Amount _amount)
    {
        // nothing to do...
        // In case of On Account payments, we are setting the payment status
        // to posted instead of authorized during the performAuth() step,
        // in order to avoid 2 round trips to DB
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Does nothing when posting a payment of type "on account".
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    /// <param name="_isPrepay">
    ///     A boolean denoting whether this payment is a prepay or not.
    /// </param>
    /// <remarks>
    ///     Ledger journal entries are never created for "on account" payments.
    ///     Instead, a debit or credit will be left on the customer's account for
    ///     the payment amount, after the full sales amount has been invoiced and
    ///     all other payments have been posted.
    /// </remarks>
    public void postToLedgerJournal(Amount _amount, boolean _isPrepay)
    {
        // Do nothing for on account
        // super(_amount, _isPrepay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the posted amount to keep it
    ///      consistent with all other payment types.
    /// </summary>
    /// <param name="_postAmount">
    ///     The amount to be processed for this payment.
    /// </param>
    /// <returns>
    ///     The <c>MCRCustPaymStatus</c> after payment processing.
    /// </returns>
    public MCRCustPaymStatus processPaym(AmountCur _postAmount)
    {
        if (this.canAuthorize())
        {
            this.performAuth();
        }

        mcrCustPaymTable.reread();

        if (this.canPost(_postAmount))
        {
            mcrCustPaymTable.updatePostedAmount(_postAmount);
        }

        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCreditLimitExceeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prompts the user to authorize or decline a payment that exceeds the
    ///     customer's credit limit.
    /// </summary>
    /// <param name="_message">
    ///     Description of the credit limit overage.
    /// </param>
    /// <returns>
    ///     True if the user chooses to authorize payment; otherwise, false.
    /// </returns>
    private boolean promptCreditLimitExceeded(str _message)
    {
        return Box::yesNo(Global::strFmtLB(_message + '\n\n' + "@MCR12922"),
                          DialogButton::No)
               == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for an insert or update
    ///     Overridden to perform validations specific to this payment type.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean that determines whether errors should be written to an infolog; optional.
    /// </param>
    /// <param name="_validateAccountSetup">
    ///     A boolean determing whether to validate if an account is
    ///     setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and should be allowed
    ///     to be saved to the database; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Overridden to skip checking for an account on the retail payment setup.
    /// </remarks>
    public boolean validateWrite(boolean _showErrors = true,
                                 boolean _validateAccountSetup = true)
    {
        // Account is not required for on account payments, pass false
        //      to skip account setup validation
        boolean isValid = super(_showErrors, false);

        // must not be prepay
        if (this.isPrePay(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strfmt("@MCR10598", enum2str(mcrCustPaymTable.CustPaymType)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrePay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>IsPrepay</c> field of <c>MCRCustPaymTable</c> is check marked.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if <c>IsPrepay</c> field of <c>MCRCustPaymTable</c> is check marked; otherwise, false.
    /// </returns>
    protected boolean isPrePay(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.IsPrepay == NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>