<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalGTDCancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalGTDCancel_RU extends CustomJournalGTDOperation_RU
{
    NoYesId     inventGTDDelete;
    DialogField fieldInventGTDDelete;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventJournalTransfer</Name>
				<Source><![CDATA[
    protected InventTransId createInventJournalTransfer(Common              _common,
                                                        InventGTDId_RU      _toInventGtdId,
                                                        InventLocationId    _toInventLocationId,
                                                        InventProfileId_RU  _inventProfileId,
                                                        Qty                 _qty = 0,
                                                        DimensionDefault    _dimension = 0)
    {
        InventJournalTrans  inventJournalTrans = _common;
        InventJournalTrans  ret;
        JournalTransData    journalTransData;

        ret.initValue();
        ret.initFromInventJournalTrans(inventJournalTrans, true);
        ret.initFromInventJournalTable(this.inventJournalTable());
        ret.Voucher       = '';
        ret.ToInventDimId = inventJournalTrans.InventDimId;
        ret.InventDimId   = inventJournalTrans.ToInventDimId;
        ret.TransDate     = customJournalTable.PlanArrivalDate;
        ret.LineNum       = InventJournalTrans::lastLineNum(ret.JournalId) + 1;

        journalTransData = JournalTransData::newTransTableLineNum(ret, this.inventJournalTable(), inventJournalTrans.LineNum);
        journalTransData.create(false, true);

        return ret.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog;

        dialog = super();

        dialog.caption("@GLS115084");

        fieldInventGTDDelete = dialog.addFieldValue(extendedTypeStr(NoYesId), inventGTDDelete, "@GLS115259");
        if (customJournalTable.CustomJournalType        == CustomJournalType_RU::Import &&
            customJournalTable.CustomInventTransStatus  == CustomInventTransStatus_RU::Purchased)
        {
            fieldInventGTDDelete.enabled(false);
        }

        fieldStatementNum.enabled(false);
        fieldGTDDate.enabled(false);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            inventGTDDelete = fieldInventGTDDelete.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTable</Name>
				<Source><![CDATA[
    protected InventJournalTable inventJournalTable()
    {
        InventJournalName inventJournalName;

        if (inventJournalTable)
            return inventJournalTable;

        inventJournalName = InventJournalName::find(InventParameters::find().TransferJournalNameId);

        inventJournalTable.initValue();
        inventJournalTable.initFromInventJournalName(inventJournalName);

        inventJournalTable.JournalId = NumberSeq::newGetNum(InventParameters::numRefInventJournalId()).num();
        inventJournalTable.Description += strfmt(' ' + "@GLS115451", inventGTDId);
        inventJournalTable.insert();

        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventGTD_RU            inventGTD;
        CustomJournalTrans_RU   customJournalTrans;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;

        SalesLine               salesLine;
        PurchLine               purchLine;

        InventJournalTrans      inventJournalTransLoc;

        void updateInventTrans(InventTransId _inventTransId, InventDimId _inventDimId)
        {
            while select forupdate inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.recId == inventTrans.InventTransOrigin &&
                            inventTransOrigin.InventTransId == _inventTransId
            {
                inventTrans.InventDimId = _inventDimId;
                inventTrans.update();
            }
        }

        try
        {
            ttsbegin;

            while select customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                switch (customJournalTable.CustomInventTransStatus)
                {
                    case CustomInventTransStatus_RU::Purchased  :
                        while select forupdate inventTrans
                            where   ! inventTrans.MarkingRefInventTransOrigin                         &&
                                    inventTrans.InvoiceId       == customJournalTrans.InvoiceId       &&
                                    inventTrans.DateFinancial   == customJournalTrans.InvoiceDate     &&
                                    inventTrans.GroupRefId_RU   == customJournalTable.CustomJournalId &&
                                    (((inventTrans.StatusIssue == StatusIssue::Deducted || inventTrans.StatusIssue == StatusIssue::Sold) && ! inventTrans.StatusReceipt) ||
                                    ((inventTrans.StatusReceipt == StatusReceipt::Received || inventTrans.StatusReceipt == StatusReceipt::Purchased) && ! inventTrans.StatusIssue))
                                    exists join inventTransOrigin
                                        where inventTransOrigin.recId         == inventTrans.InventTransOrigin &&
                                              inventTransOrigin.InventTransId == customJournalTrans.SalesPurchInventTransId
                        {
                            inventDim                   = inventTrans.inventDim();
                            inventDim.InventGtdId_RU    = '';
                            inventTrans.InventDimId     = InventDim::findOrCreate(inventDim).InventDimId;
                            inventTrans.GroupRefType_RU = InventTransGroupRefType_RU::None;
                            inventTrans.GroupRefId_RU   = '';
                            inventTrans.update();

                            InventTransSumUp::newInventTransSumUp(inventTrans.RecId).runOperation();
                        }
                        break;
                    case CustomInventTransStatus_RU::Ordered, CustomInventTransStatus_RU::Empty      :
                        switch (customJournalTable.CustomJournalType)
                        {
                            case CustomJournalType_RU::Import :
                                purchLine = customJournalTrans.salesPurchLine(true);
                                if (purchLine.QtyOrdered != EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                                                  purchLine.InventDimId,
                                                                                                                                  purchLine.RemainPurchPhysical,
                                                                                                                                  purchLine.PurchUnit,
                                                                                                                                  purchLine.inventTable().inventUnitId(),
                                                                                                                                  NoYes::Yes))
                                {
                                    throw error(strfmt("@GLS115389", purchLine.PurchId, purchLine.LineNumber, purchLine.ItemId));
                                }
                                inventDim                  = purchLine.inventDim();
                                inventDim.InventGtdId_RU   = '';
                                purchLine.InventDimId      = InventDim::findOrCreate(inventDim).InventDimId;
                                purchLine.doUpdate();
                                updateInventTrans(purchLine.InventTransId, purchLine.InventDimId);
                                break;
                            case CustomJournalType_RU::Export :
                                salesLine                  = customJournalTrans.salesPurchLine(true);
                                inventDim                  = salesLine.inventDim();
                                inventDim.InventGtdId_RU   = '';
                                salesLine.InventDimId      = InventDim::findOrCreate(inventDim).InventDimId;
                                salesLine.doUpdate();
                                updateInventTrans(salesLine.InventTransId, salesLine.InventDimId);
                                break;
                        }
                        break;
                }
            }

            if (FeatureStateProvider::isFeatureEnabled(CustomJournalImportGTDIssueWorkSupportFeature_RU::instance()))
            {
                CustomJournalImportGTDIssueWorkCancel_RU::construct(customJournalTable.CustomJournalId).run();
            }

            if (customJournalTable.TransferInventJournalId)
            {
                while select inventJournalTransLoc
                    where inventJournalTransLoc.JournalId == customJournalTable.TransferInventJournalId
                {
                    this.createInventJournalTransfer(inventJournalTransLoc, '', '', '');
                }

                if (inventJournalTable)
                {
                    this.postInventJournalTransfer();
                }

                inventJournalTable.reread();

                if (!inventJournalTable.Posted)
                    throw error("@GLS115388");

                customJournalTable.selectForUpdate(true);
                customJournalTable.reread();
                customJournalTable.TransferInventJournalId = '';
            }

            if (!customJournalTable.selectForUpdate())
            {
                customJournalTable.selectForUpdate(true);
                customJournalTable.reread();
            }

            if (!inventGTDDelete)
                customJournalTable.CanceledInventGTDId = NoYes::Yes;

            customJournalTable.InventGTDId              = '';
            customJournalTable.gtdDate                  = dateNull();
            customJournalTable.CustomJournalStatus      = CustomJournalStatus_RU::Open;
            customJournalTable.update();
            ttscommit;

            ttsbegin;
            if (inventGTDDelete)
            {
                while select ItemId from customJournalTrans group by ItemId
                    where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
                {
                    inventGTD = InventGTD_RU::find(inventGTDId, customJournalTrans.ItemId, true);
                    if (inventGTD.RecId != 0 && inventGTD.validateDelete())
                    {
                        inventGTD.delete();
                    }
                }
            }
            ttscommit;

            this.updateFactureExp();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFactureExpDate</Name>
				<Source><![CDATA[
    protected void updateFactureExpDate(FactureJour_RU _factureJour)
    {
        if (_factureJour.ExportDate)
        {
            if (_factureJour.ProcessingType == SalesBookFactureProcessingType_RU::None)
            {
                if (Box::yesNo(strfmt("@GLS115903", _factureJour.FactureExternalId), DialogButton::Yes) == DialogButton::Yes)
                {
                    ttsbegin;

                    _factureJour.selectForUpdate(true);
                    _factureJour.ExportDate = dateNull();
                    _factureJour.update();

                    ttscommit;
                }
            }
            else
            {
                warning(strfmt("@GLS115905", _factureJour.FactureExternalId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115084";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>