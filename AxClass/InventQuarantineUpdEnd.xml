<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineUpdEnd</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventQuarantineUpdEnd extends InventQuarantineUpd
{
    NoYes   ignorePalletLocation;
    boolean skipQualityOrderCreation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIgnorePalletLocation</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public NoYes parmIgnorePalletLocation(NoYes _ignorePalletLocation = ignorePalletLocation)
    {
        ignorePalletLocation = _ignorePalletLocation;
        return ignorePalletLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipQualityOrderCreation</Name>
				<Source><![CDATA[
    public boolean parmSkipQualityOrderCreation(boolean _skipQualityOrderCreation = skipQualityOrderCreation)
    {
        skipQualityOrderCreation = _skipQualityOrderCreation;
        return skipQualityOrderCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateQuarantineOrder</Name>
				<Source><![CDATA[
    protected void preUpdateQuarantineOrder()
    {
        super();

        if (!skipQualityOrderCreation)
        {
            InventQualityManagementCreateHandler::createQuarantineEndBefore(inventParmQuarantineOrder);
        }        

        InventQualityManagementBlockHandler::blockQuarantineEnd(inventQuarantineOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(InventQuarantineMultiEnd::description());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimReservePhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the issue status of reserved ordered transactions when the quarantine order is ended.
    /// </summary>
    /// <param name="_inventUpd_Financial">
    ///    The <c>InventUpd_Financial</c> class instance that set the quarantine order inventory transaction at the
    ///    original receipt location to 'purchased'.
    /// </param>
    /// <remarks>
    ///    When the quarantine order is ended and the items are moved to their original receipt location, they become physically available
    ///    for other issues that are currently reserved ordered.
    ///    This is normally done by the <c>InventUpdate</c> class. However, in the case of quarantine orders, it needs to be done
    ///    when the quarantine order is ended to prevent a potential reservation of the receipt at the quarantine warehouse against
    ///    unrelated issues in other warehouses (in case warehouse is not a primary stocking dimension).
    /// </remarks>
    protected void updateDimReservePhysical(InventUpd_Financial _inventUpd_Financial)
    {
        InventTrans     inventTrans;
        InventDim       inventDimExistsJoin;
        InventLocation  inventLocation;

        ttsbegin;
        while select InventDimId, Qty, PdsCWQty, MarkingRefInventTransOrigin from inventTrans
            where inventTrans.InventTransOrigin == _inventUpd_Financial.movement().inventTransOriginId()
               && inventTrans.StatusReceipt     == StatusReceipt::Purchased
               && inventTrans.StatusIssue       == StatusIssue::None
            exists join inventDimExistsJoin
                where inventDimExistsJoin.inventDimId == inventTrans.inventDimId
            exists join inventLocation
                where inventLocation.InventLocationId == inventDimExistsJoin.InventLocationId
                    && inventLocation.InventLocationType != InventLocationType::Quarantine
        {
            InventDim inventDim = inventTrans.inventDim();

            _inventUpd_Financial.updateDimReservePhysical(inventDim,inventTrans.Qty,inventTrans.MarkingRefInventTransOrigin,inventTrans.PdsCWQty);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuarantineOrder</Name>
				<Source><![CDATA[
    void updateQuarantineOrder()
    {
        InventMov_Quarantine        movement        = InventMovement::construct(inventQuarantineOrder);
        InventMov_QuarantineInvent  movement_Invent = InventMovement::construct(inventQuarantineOrder,InventMovSubType::TransferReceipt);

        InventQty                   remainQty       = inventQuarantineOrder.RemainQty - inventParmQuarantineOrder.Qty;

        InventQty                   startQty        = 0;

        PdsCWInventQty              cwRemainQty     = inventQuarantineOrder.PdsCWRemainQty - inventParmQuarantineOrder.PdsCWQty;
        PdsCWInventQty              cwStartQty      = 0;
        boolean                     cwItem          = PdsGlobal::pdsIsCWItem(inventQuarantineOrder.ItemId);

        if (inventParmQuarantineOrder.PdsCWQty > inventQuarantineOrder.PdsCWRemainQty - movement.transIdSum().pdsCWReceived())
        {
            cwStartQty = inventParmQuarantineOrder.PdsCWQty - (inventQuarantineOrder.PdsCWRemainQty - movement.transIdSum().pdsCWReceived());
        }
        if (inventParmQuarantineOrder.Qty > inventQuarantineOrder.RemainQty - movement.transIdSum().received())
        {
            startQty = inventParmQuarantineOrder.Qty - (inventQuarantineOrder.RemainQty - movement.transIdSum().received());
        }

        if (startQty)
        {
            inventQuarantineOrder.startFinancial(startQty, remainQty, ledgerVoucher, cwStartQty, cwRemainQty);
        }

        movement.parmInventDirection(InventDirection::Issue);
        InventUpd_Financial financial = InventUpd_Financial::newInventQuarantineOrder(movement, ledgerVoucher, -inventParmQuarantineOrder.Qty,-remainQty,0, -inventParmQuarantineOrder.PdsCWQty, -cwRemainQty);
        financial.updateNow();

        movement_Invent.parmInventDirection(InventDirection::Receipt);
        financial = InventUpd_Financial::newInventQuarantineOrder(movement_Invent, ledgerVoucher, inventParmQuarantineOrder.Qty,remainQty,-financial.updCostAmountInvent(), cwStartQty, cwRemainQty);
        
        using (ProjInventOrderIssueListForQuarantineContext context = ProjInventOrderIssueListForQuarantineContext::construct())
        {
            if (ProjReorderInventIssueListForQuarantineOrderFlight::instance().isEnabled())
            {
                InventTrans inventTrans = InventTrans::findTransId(inventQuarantineOrder.InventTransIdRef);
                // If the quarantine order has a reference to InventTrans record that has project stamped on it, 
                // set the context parmRefInventTransOrigin to the InventTransOrigin recID of the quarantine order
                // This value is then used while creating InventTransIssue list in correct order
                if (inventTrans.ProjId)
                {
                    context.parmRefInventTransOrigin(movement_Invent.inventTransOriginId());
                }
            }

            // Physical reservation will be done in updateDimReservePhysical
            financial.parmAllowAutoReserveDim(false);
            financial.updateNow();
        }

        if (!inventQuarantineOrder.RemainQty)
        {
            inventQuarantineOrder.Status = InventQuarantineStatus::Ended;
            inventQuarantineOrder.update();

            // update reservation of other (reserved ordered) issues
            financial.parmAllowAutoReserveDim(true);
            this.updateDimReservePhysical(financial);

            if (inventQuarantineOrder.hasReturnOrderReference())
            {
                SalesLine returnLine = SalesLine::findInventTransId(inventQuarantineOrder.InventTransIdRef, true);
                returnLine.ReturnDispositionCodeId = inventQuarantineOrder.ReturnDispositionCodeId;
                returnLine.update();

                SalesTable salesTableReturn = returnLine.salesTable();
                if (SalesTableType_ReturnItem::shouldAdjustReturnCredit(salesTableReturn))
                {
                    // Adjusts payments for cases when disposition code had a charge associated that affected sales total.
                    SalesTableType_ReturnItem::mcrAdjustReturnCredit(salesTableReturn);
                }

                DispositionAction dispositionAction = ReturnDispositionCode::find(inventQuarantineOrder.ReturnDispositionCodeId).DispositionAction;
                
				if (dispositionAction == DispositionAction::Scrap || dispositionAction == DispositionAction::ReplaceScrap || dispositionAction == DispositionAction::ReturnToCust)
                {
                    returnLine.createReturnReservationLine();
                }
                else if (returnLine.returnLineHasReservationLine())
                {
                    returnLine.returnDeleteReservationLine();
                }

                if (returnLine.SalesStatus == SalesStatus::Invoiced && returnLine.returnCreateScrap() && !returnLine.isReturnLineScrapped())
                {
					returnLine.returnLineScrap();                    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        if (inventQuarantineOrder.Status < InventQuarantineStatus::Started)
        {
            return checkFailed(strFmt("@SYS58580",InventQuarantineStatus::Started, InventQuarantineStatus::ReportedFinished));
        }

        if (inventParmQuarantineOrder.Qty <= 0)
        {
            return checkFailed(("@SYS58583"));
        }

        if (inventParmQuarantineOrder.TransDate < inventQuarantineOrder.QuarantineDate)
        {
            return checkFailed(strFmt("@SYS91655",inventQuarantineOrder.QuarantineId));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventQuarantineUpdEnd construct()
    {
        InventQuarantineUpdEnd inventQuarantineUpdEnd = new InventQuarantineUpdEnd();

        return inventQuarantineUpdEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    static InventQuarantineUpdEnd newParmBuffer(InventParmQuarantineOrder inventParmQuarantineOrder)
    {
        inventParmQuarantineOrder.skipTTSCheck(true);
        inventParmQuarantineOrder.ParmBuffer::initParmId();
        inventParmQuarantineOrder.write();

        InventQuarantineUpdEnd inventQuarantineUpdEnd = InventQuarantineUpdEnd::construct();
        inventQuarantineUpdEnd.parmParmBuffer(inventParmQuarantineOrder);

        return inventQuarantineUpdEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuarantineOrder</Name>
				<Source><![CDATA[
    static InventQuarantineUpdEnd newQuarantineOrder(InventQuarantineOrder inventQuarantineOrder, InventQty qty, PdsCWInventQty _pdsCWQty = 0)
    {
        InventQuarantineUpdEnd      inventQuarantineUpdEnd = InventQuarantineUpdEnd::construct();
        InventParmQuarantineOrder   inventParmQuarantineOrder;

        inventParmQuarantineOrder.skipTTSCheck(true);
        inventParmQuarantineOrder.ParmBuffer::initParmId();
        inventParmQuarantineOrder.QuarantineId  = inventQuarantineOrder.QuarantineId;
        inventParmQuarantineOrder.LineNum       = 1;
        inventParmQuarantineOrder.Qty           = qty;
        inventParmQuarantineOrder.PdsCWQty      = _pdsCWQty;
        inventParmQuarantineOrder.TransDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        inventParmQuarantineOrder.write();

        inventQuarantineUpdEnd.parmParmBuffer(inventParmQuarantineOrder);

        return inventQuarantineUpdEnd;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>