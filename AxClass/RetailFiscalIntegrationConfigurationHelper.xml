<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalIntegrationConfigurationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailFiscalIntegrationConfigurationHelper</c> class is the hepler class about fiscal integration configuration.
/// </summary>
public class RetailFiscalIntegrationConfigurationHelper
{
    private Array propertiesArray;
    private FormGroupControl parent;
    private int dynamicControlNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructPropertyXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs XML according fiscal integration extension property node lists.
    /// </summary>
    /// <param name = "_xml">
    /// An xml string.
    /// </param>
    /// <param name = "_propertyList">
    /// A list contains node list of fiscal integration extension properties.
    /// </param>
    /// <returns>
    /// The new constructed xml object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static XML constructPropertyXML(List _propertyList)
    {
        XmlDocument doc = new XmlDocument();
        doc.appendChild(doc.createElement(RetailFiscalIntegrationConnectorContants::ConfigurationProperties));

        if (_propertyList)
        {
            ListEnumerator enumerator = _propertyList.getEnumerator();

            while (enumerator.moveNext())
            {
                XmlNodeList xmlNodeList = enumerator.current();
                XMLNodeListIterator xmlNodeListIterator = new xmlNodeListIterator(xmlNodeList);

                while (xmlNodeListIterator.moreValues())
                {
                    XmlNode propertyNode = xmlNodeListIterator.value();
                    doc.documentElement().appendChild(doc.importNode(propertyNode, true));
                    xmlNodeListIterator.nextValue();
                }
            }
        }
        
        return doc.outerXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalIntegrationPropertyNodeListByNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get xml node list contains fiscal integration extension property.
    /// </summary>
    /// <param name = "_manifest">
    /// The xml configuration of fiscal connector.
    /// </param>
    /// <param name = "_nameSpace">
    /// A str of namespace to filter the xml configuration.
    /// </param>
    /// <returns>
    /// A <c>XmlNodeList</c> object contains fiscal integration extension properties information.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public XmlNodeList getFiscalIntegrationPropertyNodeListByNameSpace(XML _manifest, str _nameSpace)
    {
        XmlDocument xmlDoc = new XmlDocument();
        XmlNodeList propertyNodeList;

        xmlDoc.loadXml(_manifest);
        propertyNodeList = xmlDoc.selectNodes(strFmt('//ConfigurationProperties//ConfigurationProperty[Namespace=\'%1\']', _nameSpace));

        return propertyNodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalIntegrationProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>RetailFiscalIntegrationProperties</c> object according xml configuration.
    /// </summary>
    /// <param name = "_propertyNodeList">
    /// A <c>XmlNodeList</c> object contains fiscal integration extension properties information.
    /// </param>
    /// <returns>
    /// A <c>RetailFiscalIntegrationProperties</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RetailFiscalIntegrationProperties getFiscalIntegrationProperties(XMLNodeList _propertyNodeList)
    {
        RetailFiscalIntegrationProperties fiscalIntegrationProperties = new RetailFiscalIntegrationProperties();

        if (_propertyNodeList)
        {
            int tempPropertiesCount = 1;

            XmlNode propertyNode;
            XMLNodeListIterator xmlNodeListIterator = new xmlNodeListIterator(_propertyNodeList);

            while (xmlNodeListIterator.moreValues())
            {
                propertyNode = xmlNodeListIterator.value();

                str name = propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::Name).text();

                // Store fiscal connector property into <c>RetailFiscalIntegrationProperty</c>.
                RetailFiscalIntegrationProperty fiscalIntegrationProperty = new RetailFiscalIntegrationProperty();
                fiscalIntegrationProperty.parmNamespace(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::Namesspace).text());
                fiscalIntegrationProperty.parmName(name);
                fiscalIntegrationProperty.parmStringValue(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::StringValue).text());
                fiscalIntegrationProperty.parmDecimalValue(str2Int(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::DecimalValue).text()));
                fiscalIntegrationProperty.parmBooleanValue(RetailFiscalIntegrationProperty::toFalseTrue(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::BooleanValue).text()));
                fiscalIntegrationProperty.parmDateTimeValue(this.str2UtcDateTime(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::DateValue).text()));
                fiscalIntegrationProperty.parmIntegerValue(str2Int(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::IntegerValue).text()));

                XmlNode axEDTNode = propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::ExtendedDataType);
                if (axEDTNode != null)
                {
                    fiscalIntegrationProperty.parmAxEDTName(axEDTNode.text());
                }

                RetailFiscalIntegrationConnectorPropertyDataType dataType = RetailFiscalIntegrationProperty::toDataType(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::ValueType).text());
                fiscalIntegrationProperty.parmValueType(dataType);

                FalseTrue isEncrypted = RetailFiscalIntegrationProperty::toFalseTrue(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::IsEncrypted).text());
                fiscalIntegrationProperty.parmIsEncrypted(isEncrypted);

                FalseTrue isPassword = RetailFiscalIntegrationProperty::toFalseTrue(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::IsPassword).text());
                fiscalIntegrationProperty.parmIsPassword(isPassword);

                FalseTrue isReadOnly = RetailFiscalIntegrationProperty::toFalseTrue(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::IsReadOnly).text());
                fiscalIntegrationProperty.parmIsReadonly(isReadOnly);

                FalseTrue isHidden = RetailFiscalIntegrationProperty::toFalseTrue(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::IsHidden).text());
                fiscalIntegrationProperty.parmIsHidden(isHidden);

                fiscalIntegrationProperty.parmDisplayHeight(str2Int(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::DisplayHeight).text()));
                fiscalIntegrationProperty.parmSequenceNumber(propertyNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::SequenceNumber).text());

                XmlNode displayPropertyNode = propertyNode.selectSingleNode(strFmt('//ConfigurationProperties//ConfigurationProperty[Name=\'%1\']//DisplayProperty', name));

                if (displayPropertyNode)
                {
                    fiscalIntegrationProperty.parmIsDisplayPropertyNodeExist(true);
                    XmlNode displayValueNode = propertyNode.selectSingleNode(strFmt('//ConfigurationProperties//ConfigurationProperty[Name=\'%1\']//DisplayProperty//DisplayValue', name));

                    if (displayValueNode)
                    {
                        fiscalIntegrationProperty.parmIsDisplayValueNodeExist(true);
                        LanguageId languageId = displayValueNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::LanguageId).text();

                        if (languageId)
                        {
                            fiscalIntegrationProperty.parmLanguageId(languageId);
                            fiscalIntegrationProperty.parmDisplayName(displayValueNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::DisplayName).text());
                            fiscalIntegrationProperty.parmDisplayDescription(displayValueNode.selectSingleNode(RetailFiscalIntegrationConnectorContants::Description).text());
                        }
                        else
                        {
                            fiscalIntegrationProperty.parmDisplayName(name);
                        }
                    }
                }

                // Add fiscal service property to <c>RetailFiscalIntegrationProperties</c>.
                fiscalIntegrationProperties.addProperty(tempPropertiesCount, fiscalIntegrationProperty);
                xmlNodeListIterator.nextValue();

                tempPropertiesCount++;
            }

            propertiesArray = fiscalIntegrationProperties.getPropertiesArray();
        }

        return fiscalIntegrationProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parent control for all connector groups.
    /// </summary>
    /// <param name="_parent">
    /// A group control.
    /// </param>
    /// <param name="_modifiedMethodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setParentControl(FormGroupControl _parent, MethodName _modifiedMethodName = '')
    {
        parent = _parent;
        this.addPropertiesToGroup(parent, propertiesArray, _modifiedMethodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertiesToGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to a group for the specified properties.
    /// </summary>
    /// <param name="_groupControl">
    /// A group control.
    /// </param>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    /// <param name="_methodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addPropertiesToGroup(FormGroupControl _groupControl, Array _properties, MethodName _methodName)
    {
        _groupControl.widthMode(1);

        for (int tempInt = 1; tempInt <= _properties.lastIndex(); tempInt++)
        {
            RetailFiscalIntegrationProperty property = _properties.value(tempInt);
            this.addPropertyToGroup(_groupControl, property, _methodName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyToGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a control to a group for the specified property.
    /// </summary>
    /// <param name="_group">
    /// A group control.
    /// </param>
    /// <param name="_property">
    /// A property.
    /// </param>
    /// <param name="_methodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addPropertyToGroup(FormGroupControl _group, RetailFiscalIntegrationProperty _property, MethodName _methodName)
    {
        FalseTrue isHidden = _property.parmIsHidden();
        str propLabel = this.controlLabel(_property);
        str helpText = this.controlHelpText(_property);

        dynamicControlNumber ++;
        var propName = strfmt('%1%2', propLabel, dynamicControlNumber);

        switch (_property.parmValueType())
        {
            case RetailFiscalIntegrationConnectorPropertyDataType::DateTime:
                FormDateTimeControl fieldDateTimeControl = _group.addControl(FormControlType::DateTime, propName);

                if (_methodName)
                {
                    fieldDateTimeControl.registerOverrideMethod(methodStr(FormDateTimeControl, modified), _methodName);
                }

                fieldDateTimeControl.widthMode(2);
                fieldDateTimeControl.label(propLabel);
                fieldDateTimeControl.visible(!isHidden);
                fieldDateTimeControl.helpText(helpText);
                break;

            case RetailFiscalIntegrationConnectorPropertyDataType::Decimal:
                FormRealControl fieldRealControl = _group.addControl(FormControlType::Real, propName);

                if (_methodName)
                {
                    fieldRealControl.registerOverrideMethod(methodStr(FormRealControl, modified), _methodName);
                }

                fieldRealControl.displayLength(255);
                fieldRealControl.widthMode(FormWidth::SizeToAvailable);
                fieldRealControl.label(propLabel);
                fieldRealControl.visible(!isHidden);
                fieldRealControl.helpText(helpText);
                break;

            case RetailFiscalIntegrationConnectorPropertyDataType::String:
                FormStringControl fieldStringControl = _group.addControl(FormControlType::String, propName);
                
                if (_methodName)
                {
                    fieldStringControl.registerOverrideMethod(methodStr(FormStringControl, modified), _methodName);
                }

                fieldStringControl.extendedDataType(extendedTypeName2Id(_property.parmAxEDTName()));

                fieldStringControl.displayLength(255);
                fieldStringControl.widthMode(FormWidth::SizeToAvailable);

                var displayHeight = _property.parmDisplayHeight();

                if (displayHeight > 1)
                {
                    fieldStringControl.multiLine(true);
                    fieldStringControl.displayHeight(displayHeight);
                }

                fieldStringControl.label(propLabel);
                fieldStringControl.helpText(helpText);

                if (_property.parmIsEncrypted())
                {
                    fieldStringControl.passwordStyle(true);
                }

                // Since connector or document provider name have already displayed on fiscal functional and technical from, make control invisiable to avoid duplicating.
                if ((parent.name() == RetailFiscalIntegrationConnectorContants::ConnectorGroup || parent.name() == RetailFiscalIntegrationConnectorContants::ProviderGroup)
                    && (_property.parmName() == RetailFiscalIntegrationConnectorContants::Name))
                {
                    fieldStringControl.visible(false);
                }
                else
                {
                    fieldStringControl.visible(!isHidden);
                }

                break;

            case RetailFiscalIntegrationConnectorPropertyDataType::Boolean:
                FormCheckBoxControl fieldCheckBoxControl = _group.addControl(FormControlType::CheckBox, propName);

                if (_methodName)
                {
                    fieldCheckBoxControl.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), _methodName);
                }

                fieldCheckBoxControl.widthMode(FormWidth::SizeToAvailable);
                fieldCheckBoxControl.label(propLabel);
                fieldCheckBoxControl.visible(!isHidden);
                fieldCheckBoxControl.helpText(helpText);
                break;

            case RetailFiscalIntegrationConnectorPropertyDataType::Integer:
                FormIntControl fieldIntControl = _group.addControl(FormControlType::Integer, propName);

                if (_methodName)
                {
                    fieldIntControl.registerOverrideMethod(methodStr(FormIntControl, modified), _methodName);
                }

                fieldIntControl.displayLength(255);
                fieldIntControl.widthMode(FormWidth::SizeToAvailable);
                fieldIntControl.label(propLabel);
                fieldIntControl.visible(!isHidden);
                fieldIntControl.helpText(helpText);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPropertyValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of controls for a given fiscal service connector.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void displayPropertyValues()
    {
        int n = parent.controlCount();

        if (propertiesArray.lastIndex() == n)
        {
            for (int i = 1; i <= n; i++)
            {
                RetailFiscalIntegrationProperty property = propertiesArray.value(i);
                this.displayPropertyValue(property, parent.controlNum(i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of a control for a given property.
    /// </summary>
    /// <param name="_property">
    /// The property from which the characteristics of the value will be taken.
    /// </param>
    /// <param name="_control">
    /// The control where the value will be set.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void displayPropertyValue(RetailFiscalIntegrationProperty _property, FormControl _control)
    {
        _control.allowEdit(!_property.parmIsReadonly());

        switch (_property.parmValueType())
        {
            case RetailFiscalIntegrationConnectorPropertyDataType::DateTime:
                FormDateTimeControl fieldDateTimeControl = _control;
                fieldDateTimeControl.dateTimeValue(_property ? clrSystemDateTime2UtcDateTime(_property.parmDateTimeValue()) : DateTimeUtil::minValue());
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::Decimal:
                FormRealControl fieldRealControl = _control;
                fieldRealControl.realValue(_property ? _property.parmDecimalValue() : 0);
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::String:
                FormStringControl fieldStringControl = _control;
                fieldStringControl.passwordStyle(_property.parmIsPassword());
                fieldStringControl.text(_property ? _property.parmStringValue() : '');
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::Boolean:
                FormCheckBoxControl fieldCheckBoxControl = _control;
                fieldCheckBoxControl.checked(_property ? _property.parmBooleanValue() : false);
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::Integer:
                FormIntControl fieldIntControl = _control;
                fieldIntControl.value(_property ? _property.parmIntegerValue() : 0);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyValuesAsXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns XML node for the property values in the controls of the named connector.
    /// Get the properties from the form, this is because when we save we want to use
    /// the values that the user entered.
    /// </summary>
    /// <param name = "_parent">
    /// A from group control of fiscal service properties displayed on.
    /// </param>
    /// <param name = "_propertiesArray">
    /// A fiscal connector properties array.
    /// </param>
    /// <param name = "_namespace">
    /// A str that represent the fiscal connector property namespace.
    /// </param>
    /// <returns>
    /// The XML node of fiscal connector properties.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public XmlNode getPropertyValuesAsXmlString(FormGroupControl _parent, Array _propertiesArray, str _namespace)
    {
        Array properties = this.groupToPropertyArray(_parent, _propertiesArray);

        return this.ConvertPropertyArrayToXML(properties, _parent, _namespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertPropertyArrayToXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts array of fiscal service properties to XML.
    /// </summary>
    /// <param name = "_properties">
    /// A fiscal connector properties array.
    /// </param>
    /// <param name = "_propertyGroup">
    /// A from group control of fiscal connector properties displayed on.
    /// </param>
    /// <param name = "_namespace">
    /// A str that represent the fiscal connector property namespace.
    /// </param>
    /// <returns>
    /// The converted XML node of fiscal connector properties.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public XMLNode ConvertPropertyArrayToXML(Array _properties, FormGroupControl _propertyGroup, str _namespace)
    {
        XmlNode     fiscalPropertyNode;
        XmlNode     configurationPropertyNode;
        XmlNode     namespaceNode;
        XmlNode     nameNode;
        XmlNode     valueTypeNode;
        XmlNode     stringValueNode;
        XmlNode     decimalValueNode;
        XmlNode     booleanValueNode;
        XmlNode     dateValueNode;
        XmlNode     integerValueNode;
        XmlNode     isEncryptedNode;
        XmlNode     isPasswordNode;
        XmlNode     isReadOnlyNode;
        XmlNode     isHiddenNode;
        XmlNode     displayHeightNode;
        XmlNode     sequenceNumberNode;
        XmlNode     displayPropertyNode;
        XmlNode     displayValueNode;
        XmlNode     languageIdNode;
        XmlNode     displayNameNode;
        XmlNode     descriptionNode;
        XmlNode     axEDTNode;

        // Add xml document root element.
        XmlDocument doc = XmlDocument::newBlank();
        fiscalPropertyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ConfigurationProperties);
        doc.appendChild(fiscalPropertyNode);

        int n = _propertyGroup.controlCount();

        /// Construct xml document according fiscal integration extension property.
        for (int i = 1; i <= n; i++)
        {
            RetailFiscalIntegrationProperty property = _properties.value(i);

            configurationPropertyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ConfigurationProperty);
            fiscalPropertyNode.appendChild(configurationPropertyNode);

            namespaceNode = doc.createElement(RetailFiscalIntegrationConnectorContants::Namesspace);
            namespaceNode.appendChild(doc.createTextNode(property.parmNamespace()));
            configurationPropertyNode.appendChild(namespaceNode);

            nameNode = doc.createElement(RetailFiscalIntegrationConnectorContants::Name);
            nameNode.appendChild(doc.createTextNode(property.parmName()));
            configurationPropertyNode.appendChild(nameNode);

            valueTypeNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ValueType);
            valueTypeNode.appendChild(doc.createTextNode(enum2Symbol(enumNum(RetailFiscalIntegrationConnectorPropertyDataType), enum2int(property.parmValueType()))));
            configurationPropertyNode.appendChild(valueTypeNode);

            stringValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::StringValue);
            stringValueNode.appendChild(doc.createTextNode(property.parmStringValue()));
            configurationPropertyNode.appendChild(stringValueNode);

            decimalValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DecimalValue);
            decimalValueNode.appendChild(doc.createTextNode(int2Str(real2int(property.parmDecimalValue()))));
            configurationPropertyNode.appendChild(decimalValueNode);

            booleanValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::BooleanValue);
            booleanValueNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(boolean), property.parmBooleanValue()))));
            configurationPropertyNode.appendChild(booleanValueNode);
            
            dateValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DateValue);
            dateValueNode.appendChild(doc.createTextNode(DateTimeUtil::toStr(property.parmDateTimeValue())));
            configurationPropertyNode.appendChild(dateValueNode);

            integerValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IntegerValue);
            integerValueNode.appendChild(doc.createTextNode(int2Str(property.parmIntegerValue())));
            configurationPropertyNode.appendChild(integerValueNode);

            isEncryptedNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsEncrypted);
            isEncryptedNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsEncrypted()))));
            configurationPropertyNode.appendChild(isEncryptedNode);

            isPasswordNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsPassword);
            isPasswordNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsPassword()))));
            configurationPropertyNode.appendChild(isPasswordNode);

            isReadOnlyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsReadOnly);
            isReadOnlyNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsReadonly()))));
            configurationPropertyNode.appendChild(isReadOnlyNode);

            isHiddenNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsHidden);
            isHiddenNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsHidden()))));
            configurationPropertyNode.appendChild(isHiddenNode);

            displayHeightNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayHeight);
            displayHeightNode.appendChild(doc.createTextNode(int2Str(property.parmDisplayHeight())));
            configurationPropertyNode.appendChild(displayHeightNode);

            sequenceNumberNode = doc.createElement(RetailFiscalIntegrationConnectorContants::SequenceNumber);
            sequenceNumberNode.appendChild(doc.createTextNode(property.parmSequenceNumber()));
            configurationPropertyNode.appendChild(sequenceNumberNode);

            axEDTNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ExtendedDataType);
            axEDTNode.appendChild(doc.createTextNode(property.parmAxEDTName()));
            configurationPropertyNode.appendChild(axEDTNode);

            if (property.parmIsDisplayPropertyNodeExist())
            {
                displayPropertyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayProperty);
                configurationPropertyNode.appendChild(displayPropertyNode);

                if (property.parmIsDisplayValueNodeExist())
                {
                    displayValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayValue);
                    displayPropertyNode.appendChild(displayValueNode);

                    languageIdNode = doc.createElement(RetailFiscalIntegrationConnectorContants::LanguageId);
                    languageIdNode.appendChild(doc.createTextNode(property.parmLanguageId()));
                    displayValueNode.appendChild(languageIdNode);

                    displayNameNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayName);
                    displayNameNode.appendChild(doc.createTextNode(property.parmDisplayName()));
                    displayValueNode.appendChild(displayNameNode);

                    descriptionNode = doc.createElement(RetailFiscalIntegrationConnectorContants::Description);
                    descriptionNode.appendChild(doc.createTextNode(property.parmDisplayDescription()));
                    displayValueNode.appendChild(descriptionNode);
                }
                else
                {
                    displayPropertyNode.appendChild(doc.createTextNode(''));
                }
            }
        }

        return doc.documentElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPropertyXmlNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends xml node 'ConfigurationProperty' for fiscal service propertiess.
    /// </summary>
    /// <param name = "_doc">A xml document object that only has root element 'ConfigurationProperties'.</param>
    /// <param name = "_groupControl">
    /// A from group control of fiscal service properties displayed on.
    /// </param>
    /// <param name = "_propertiesArray">
    /// A fiscal connector properties array.
    /// </param>
    /// <param name = "_namespace">
    /// A str that represent the fiscal service property namespace.
    /// </param>
    /// <returns>
    /// The XML document of fiscal service properties.
    /// </returns>
    public XmlDocument appendPropertyXmlNode(XmlDocument _doc, FormGroupControl _groupControl, Array _propertiesArray, str _namespace)
    {
        XmlElement xmlElement = _doc.documentElement();
        XMLNode propertyNode = this.getPropertyValuesAsXmlString(_groupControl, _propertiesArray, _namespace);
        XmlNodeList propertyNodeList = propertyNode.selectNodes((strFmt('//ConfigurationProperties//ConfigurationProperty[Namespace=\'%1\']', _namespace)));

        if (propertyNodeList)
        {
            XMLNodeListIterator xmlNodeListIterator = new xmlNodeListIterator(propertyNodeList);

            while (xmlNodeListIterator.moreValues())
            {
                xmlElement.appendChild(_doc.importNode(xmlNodeListIterator.value(), true));
                xmlNodeListIterator.nextValue();
            }
        }

        return _doc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPropertyToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends xml node 'ConfigurationProperty' missing on the form.
    /// </summary>
    /// <param name = "_doc">A xml document object that only has root element 'ConfigurationProperties'.</param>
    /// <param name = "_propertiesArray">
    /// A fiscal connector properties array.
    /// </param>
    /// <param name = "_namespace">
    /// A str that represent the fiscal service property namespace.
    /// </param>
    /// <returns>
    /// The XML document of fiscal service properties.
    /// </returns>
    public XmlDocument appendPropertyToXml(XmlDocument _doc, List _propertiesArray, str _namespace)
    {
        XmlElement xmlElement = _doc.documentElement();

        if (_propertiesArray)
        {
            ListEnumerator enumerator = _propertiesArray.getEnumerator();
            while (enumerator.moveNext())
            {
                XmlNodeList xmlNodeList = enumerator.current();
                XMLNodeListIterator xmlNodeListIterator = new xmlNodeListIterator(xmlNodeList);

                while (xmlNodeListIterator.moreValues())
                {
                    XmlNode propertyNode = xmlNodeListIterator.value();
                    xmlElement.appendChild(_doc.importNode(propertyNode, true));
                    xmlNodeListIterator.nextValue();
                }
            }
        }

        return _doc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2UtcDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts str to utcdatetime that reads from the tag 'StringValue' in xml configuration.
    /// </summary>
    /// <param name = "_str">A string value.</param>
    /// <returns>The converted utcdatetime.</returns>
    public utcdatetime str2UtcDateTime(str _str)
    {
        return str2Datetime(strPoke(_str, ' ', 11), 321);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertPropertyListToXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts array of fiscal service properties to XML.
    /// </summary>
    /// <param name = "_properties">
    /// A fiscal connector properties array.
    /// </param>
    /// <returns>
    /// The converted XML of fiscal connector properties.
    /// </returns>
    internal XML ConvertPropertyListToXML(List _properties)
    {
        if (!_properties)
        {
            throw Error(Error::missingParameter(_properties));
        }

        // Add xml document root element.
        XmlDocument doc = XmlDocument::newBlank();
        XmlNode fiscalPropertyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ConfigurationProperties);
        doc.appendChild(fiscalPropertyNode);

        ListEnumerator enumerator = _properties.getEnumerator();
        enumerator.reset();

        /// Construct xml document according fiscal integration extension property.
        while (enumerator.moveNext())
        {
            RetailFiscalIntegrationProperty property = enumerator.current();

            XmlNode configurationPropertyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ConfigurationProperty);
            fiscalPropertyNode.appendChild(configurationPropertyNode);

            XmlNode namespaceNode = doc.createElement(RetailFiscalIntegrationConnectorContants::Namesspace);
            namespaceNode.appendChild(doc.createTextNode(property.parmNamespace()));
            configurationPropertyNode.appendChild(namespaceNode);

            XmlNode nameNode = doc.createElement(RetailFiscalIntegrationConnectorContants::Name);
            nameNode.appendChild(doc.createTextNode(property.parmName()));
            configurationPropertyNode.appendChild(nameNode);

            XmlNode valueTypeNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ValueType);
            valueTypeNode.appendChild(doc.createTextNode(enum2Symbol(enumNum(RetailFiscalIntegrationConnectorPropertyDataType), enum2int(property.parmValueType()))));
            configurationPropertyNode.appendChild(valueTypeNode);

            XmlNode stringValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::StringValue);
            stringValueNode.appendChild(doc.createTextNode(property.parmStringValue()));
            configurationPropertyNode.appendChild(stringValueNode);

            XmlNode decimalValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DecimalValue);
            decimalValueNode.appendChild(doc.createTextNode(int2Str(real2int(property.parmDecimalValue()))));
            configurationPropertyNode.appendChild(decimalValueNode);

            XmlNode booleanValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::BooleanValue);
            booleanValueNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(boolean), property.parmBooleanValue()))));
            configurationPropertyNode.appendChild(booleanValueNode);
            
            XmlNode dateValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DateValue);
            dateValueNode.appendChild(doc.createTextNode(DateTimeUtil::toStr(property.parmDateTimeValue())));
            configurationPropertyNode.appendChild(dateValueNode);

            XmlNode integerValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IntegerValue);
            integerValueNode.appendChild(doc.createTextNode(int2Str(property.parmIntegerValue())));
            configurationPropertyNode.appendChild(integerValueNode);

            XmlNode isEncryptedNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsEncrypted);
            isEncryptedNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsEncrypted()))));
            configurationPropertyNode.appendChild(isEncryptedNode);

            XmlNode isPasswordNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsPassword);
            isPasswordNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsPassword()))));
            configurationPropertyNode.appendChild(isPasswordNode);

            XmlNode isReadOnlyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsReadOnly);
            isReadOnlyNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsReadonly()))));
            configurationPropertyNode.appendChild(isReadOnlyNode);

            XmlNode isHiddenNode = doc.createElement(RetailFiscalIntegrationConnectorContants::IsHidden);
            isHiddenNode.appendChild(doc.createTextNode(strLwr(enum2Symbol(enumNum(FalseTrue), property.parmIsHidden()))));
            configurationPropertyNode.appendChild(isHiddenNode);

            XmlNode displayHeightNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayHeight);
            displayHeightNode.appendChild(doc.createTextNode(int2Str(property.parmDisplayHeight())));
            configurationPropertyNode.appendChild(displayHeightNode);

            XmlNode sequenceNumberNode = doc.createElement(RetailFiscalIntegrationConnectorContants::SequenceNumber);
            sequenceNumberNode.appendChild(doc.createTextNode(property.parmSequenceNumber()));
            configurationPropertyNode.appendChild(sequenceNumberNode);

            XmlNode axEDTNode = doc.createElement(RetailFiscalIntegrationConnectorContants::ExtendedDataType);
            axEDTNode.appendChild(doc.createTextNode(property.parmAxEDTName()));
            configurationPropertyNode.appendChild(axEDTNode);

            if (property.parmIsDisplayPropertyNodeExist())
            {
                XmlNode displayPropertyNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayProperty);
                configurationPropertyNode.appendChild(displayPropertyNode);

                if (property.parmIsDisplayValueNodeExist())
                {
                    XmlNode displayValueNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayValue);
                    displayPropertyNode.appendChild(displayValueNode);

                    XmlNode languageIdNode = doc.createElement(RetailFiscalIntegrationConnectorContants::LanguageId);
                    languageIdNode.appendChild(doc.createTextNode(property.parmLanguageId()));
                    displayValueNode.appendChild(languageIdNode);

                    XmlNode displayNameNode = doc.createElement(RetailFiscalIntegrationConnectorContants::DisplayName);
                    displayNameNode.appendChild(doc.createTextNode(property.parmDisplayName()));
                    displayValueNode.appendChild(displayNameNode);

                    XmlNode descriptionNode = doc.createElement(RetailFiscalIntegrationConnectorContants::Description);
                    descriptionNode.appendChild(doc.createTextNode(property.parmDisplayDescription()));
                    displayValueNode.appendChild(descriptionNode);
                }
                else
                {
                    displayPropertyNode.appendChild(doc.createTextNode(''));
                }
            }
        }

        return doc.outerXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTechnicalProfileProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates properties. 
    /// Removes properties that are missing in the new document and adds new ones that are missing in the old one.
    /// </summary>
    /// <param name = "_updatePropertiesParameters">updatePropertiesParameters object that contains parameters for updating technical profile properties.</param>
    /// <returns>Xml document with updated properties.</returns>
    internal XML updateTechnicalProfileProperties(RetailFiscalIntegrationUpdatePropertiesParameters _updatePropertiesParameters)
    {
        if (!_updatePropertiesParameters || !_updatePropertiesParameters.parmNewTechnicalProfileProperties())
        {
            throw Error(Error::missingParameter(_updatePropertiesParameters));
        }

        List propertiesList = new List(Types::Class);
        XML sourceTechnicalProfileProperties = _updatePropertiesParameters.parmSourceTechnicalProfileProperties() ?
            _updatePropertiesParameters.parmSourceTechnicalProfileProperties() :
            _updatePropertiesParameters.parmNewTechnicalProfileProperties();

        if (_updatePropertiesParameters.parmUpdateConnectionInfo())
        {
            this.fillTechnicalProfileProperties(propertiesList, _updatePropertiesParameters.parmNewTechnicalProfileProperties(),
                sourceTechnicalProfileProperties, RetailFiscalIntegrationConnectorContants::ConnectorConnectionInfo);
        }

        if (_updatePropertiesParameters.parmUpdateSettingsInfo())
        {
            this.fillTechnicalProfileProperties(propertiesList, _updatePropertiesParameters.parmNewTechnicalProfileProperties(),
                sourceTechnicalProfileProperties, RetailFiscalIntegrationConnectorContants::ConnectorSettingsInfo);
        }

        if (_updatePropertiesParameters.parmUpdatePrivacyInfo())
        {
            this.fillTechnicalProfileProperties(propertiesList, _updatePropertiesParameters.parmNewTechnicalProfileProperties(),
                sourceTechnicalProfileProperties, RetailFiscalIntegrationConnectorContants::ConnectorPrivacyInfo);
        }

        if (_updatePropertiesParameters.parmUpdateGeneralInfo())
        {
            this.fillTechnicalProfileProperties(propertiesList, _updatePropertiesParameters.parmNewTechnicalProfileProperties(),
                sourceTechnicalProfileProperties, RetailFiscalIntegrationConnectorContants::ConnectorGeneralInfo);
        }

        return this.ConvertPropertyListToXML(propertiesList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTechnicalProfileProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills technical profile properties.
    /// </summary>
    /// <param name = "_propertiesList">List to fill.</param>
    /// <param name = "_newTechnicalProfileProperties">New properties.</param>
    /// <param name = "_sourceTechnicalProfileProperties">Source properties.</param>
    /// <param name = "_namespace">Fiscal connector namespace.</param>
    private void fillTechnicalProfileProperties(List _propertiesList, XML _newTechnicalProfileProperties, XML _sourceTechnicalProfileProperties, str _namespace)
    {
        XMLNodeList connectionXmlNodeList = this.getFiscalIntegrationPropertyNodeListByNameSpace(_newTechnicalProfileProperties, _namespace);
        Array generalPropertiesArrayNew = this.getFiscalIntegrationProperties(connectionXmlNodeList).getPropertiesArray();

        connectionXmlNodeList = this.getFiscalIntegrationPropertyNodeListByNameSpace(_sourceTechnicalProfileProperties, _namespace);
        Array generalPropertiesArrayOld = this.getFiscalIntegrationProperties(connectionXmlNodeList).getPropertiesArray();

        this.updateTechnicalProfilesFields(_propertiesList, generalPropertiesArrayOld, generalPropertiesArrayNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupToPropertyArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an array of properties with values from the controls of the specified group.
    /// </summary>
    /// <param name="_propertyGroup">
    /// A group.
    /// </param>
    /// <param name="_propertiesArray">
    /// A array of unmodified fiscal properties .
    /// </param>
    /// <returns>
    /// An array of updated fiscal properties.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Array groupToPropertyArray(FormGroupControl _propertyGroup, Array _propertiesArray)
    {
        int n = _propertyGroup.controlCount();

        for (int i = 1; i <= n; i++)
        {
            RetailFiscalIntegrationProperty property = _propertiesArray.value(i);
            this.getPropertyValue(property, _propertyGroup.controlNum(i));
        }

        return _propertiesArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a property with the value from the specified control.
    /// </summary>
    /// <param name="_property">
    /// A property.
    /// </param>
    /// <param name="_control">
    /// A control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getPropertyValue(RetailFiscalIntegrationProperty _property, FormControl _control)
    {
        switch (_property.parmValueType())
        {
            case RetailFiscalIntegrationConnectorPropertyDataType::DateTime:
                FormDateTimeControl fieldDateTimeControl = _control;
                _property.parmDateTimeValue(fieldDateTimeControl.dateTimeValue());
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::Decimal:
                FormRealControl fieldRealControl = _control;
                _property.parmDecimalValue(str2num(fieldRealControl.valueStr()));
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::String:
                FormStringControl fieldStringControl = _control;
                _property.parmStringValue(fieldStringControl.valueStr());
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::Boolean:
                FormCheckBoxControl fieldCheckBoxControl = _control;
                if (fieldCheckBoxControl.value())
                {
                    _property.parmBooleanValue(true);
                }
                else
                {
                    _property.parmBooleanValue(false);
                }
                break;
            case RetailFiscalIntegrationConnectorPropertyDataType::Integer:
                FormIntControl fieldIntControl = _control;
                _property.parmIntegerValue(str2Int(fieldIntControl.valueStr()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get control label from fiscal integration property, if dispaly name existes, use display name; else, use name.
    /// </summary>
    /// <param name = "_property">
    /// A <c>RetailFiscalIntegrationProperty</c> object.
    /// </param>
    /// <returns>
    /// The label of form control.
    /// </returns>
    private str controlLabel(RetailFiscalIntegrationProperty _property)
    {
        str propLabel = _property.parmName();

        if (_property.parmIsDisplayPropertyNodeExist() && _property.parmIsDisplayValueNodeExist())
        {
            str displayName = _property.parmDisplayName();

            if (displayName != '')
            {
                propLabel = this.str2LabelText(displayName, _property);
            }
        }

        return propLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get control help text from fiscal integration property
    /// </summary>
    /// <param name = "_property">
    /// A <c>RetailFiscalIntegrationProperty</c> object.
    /// </param>
    /// <returns>
    /// The help text of form control.
    /// </returns>
    private str controlHelpText(RetailFiscalIntegrationProperty _property)
    {
        str helpText = _property.parmName();

        if (_property.parmIsDisplayPropertyNodeExist() && _property.parmIsDisplayValueNodeExist())
        {
            helpText = _property.parmDisplayDescription();

            if (helpText != '')
            {
                helpText = this.str2LabelText(helpText, _property);
            }
        }

        return helpText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2Label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts string to label.
    /// </summary>
    /// <param name = "_str">
    /// The string need to convert.
    /// </param>
    /// <returns>
    /// A string value, if the string is start with '@', return text of label, else, the parm string.
    /// </returns>
    private str str2Label(str _str)
    {
        if (strFind(_str, '@', 1, 1))
        {
            return strFmt('%1', _str);
        }
        else
        {
            return _str;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2LabelText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts string to label text.
    /// </summary>
    /// <param name = "_str">
    /// The string need to convert.
    /// </param>
    /// <param name = "_property">
    /// A <c>RetailFiscalIntegrationProperty</c> object.
    /// </param>
    /// <returns>
    /// A string value, if the string is start with '@', return text of label, else, the label text.
    /// </returns>
    private str str2LabelText(str _str, RetailFiscalIntegrationProperty _property)
    {
        str labelText;

        if (_str != '')
        {
            // If input str start with '@', check whether it's a label at first;
            // if it's a label, get label text, else get property name.
            if (SysLabel::isLabelId(_str))
            {
                labelText = SysLabel::labelId2String(_str);

                if (labelText == '' || SysLabel::isLabelId(labelText))
                {
                    labelText = _property.parmName();
                }
            }
            else
            {
                labelText = _str;
            }
        }
        else
        {
            // If input str is empty, get property name.
            labelText = _property.parmName();
        }

        return labelText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTechnicalProfilesFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the list with properties from arrays.
    /// Adds properties from array 1 to the list if they are in array 2 and updates its nodes.
    /// Adds properties to the list from array 2 if they are not in array 1.
    /// </summary>
    /// <param name = "_list">List to fill.</param>
    /// <param name = "_originalProperties">Array with original properties.</param>
    /// <param name = "_newProperties">Array with new properties.</param>
    private void updateTechnicalProfilesFields(List _list, Array _originalProperties, Array _newProperties)
    {
        RetailFiscalIntegrationProperty propertyForCheck;
        RetailFiscalIntegrationProperty sourceProperty;

        for (int i = 1; i <= _originalProperties.lastIndex(); i++)
        {
            sourceProperty = _originalProperties.value(i);
            propertyForCheck = this.getPropertyFromArrayByName(_newProperties, sourceProperty.parmName());
            if (propertyForCheck)
            {
                if (propertyForCheck.parmValueType() == sourceProperty.parmValueType())
                {
                    this.updatePropertyParameters(sourceProperty, propertyForCheck);
                    _list.addEnd(sourceProperty);
                }
                else
                {
                    _list.addEnd(propertyForCheck);
                }
            }
        }

        for (int i = 1; i <= _newProperties.lastIndex(); i++)
        {
            sourceProperty = _newProperties.value(i);
            propertyForCheck = this.getPropertyFromArrayByName(_originalProperties, sourceProperty.parmName());
            if (!propertyForCheck)
            {
                _list.addEnd(_newProperties.value(i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyFromArrayByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for a property in an array by name.
    /// </summary>
    /// <param name = "_propertiesArray">Tha array properties.</param>
    /// <param name = "_propertyName">The name of the property to search for.</param>
    /// <returns>Property with the same name, otherwise null.</returns>
    private RetailFiscalIntegrationProperty getPropertyFromArrayByName(Array _propertiesArray, str _propertyName)
    {
        for (int i = 1; i <= _propertiesArray.lastIndex(); i++)
        {
            RetailFiscalIntegrationProperty item = _propertiesArray.value(i);
            if (!strCmp(item.parmName(), _propertyName))
            {
                return item;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePropertyParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and updates the source property settings if they differ from the new property settings.
    /// </summary>
    /// <param name = "_sourceProperty">Tha source property.</param>
    /// <param name = "_newProperty">The new property.</param>
    private void updatePropertyParameters(RetailFiscalIntegrationProperty _sourceProperty, RetailFiscalIntegrationProperty _newProperty)
    {
        if (_sourceProperty && _newProperty)
        {
            if (_sourceProperty.parmIsEncrypted() != _newProperty.parmIsEncrypted())
            {
                _sourceProperty.parmIsEncrypted(_newProperty.parmIsEncrypted());
            }

            if (_sourceProperty.parmIsPassword() != _newProperty.parmIsPassword())
            {
                _sourceProperty.parmIsPassword(_newProperty.parmIsPassword());
            }

            if (_sourceProperty.parmIsReadonly() != _newProperty.parmIsReadonly())
            {
                _sourceProperty.parmIsReadonly(_newProperty.parmIsReadonly());
            }

            if (_sourceProperty.parmIsHidden() != _newProperty.parmIsHidden())
            {
                _sourceProperty.parmIsHidden(_newProperty.parmIsHidden());
            }

            if (_sourceProperty.parmDisplayHeight() != _newProperty.parmDisplayHeight())
            {
                _sourceProperty.parmDisplayHeight(_newProperty.parmDisplayHeight());
            }

            if (_sourceProperty.parmSequenceNumber() != _newProperty.parmSequenceNumber())
            {
                _sourceProperty.parmSequenceNumber(_newProperty.parmSequenceNumber());
            }

            if (_sourceProperty.parmLanguageId() != _newProperty.parmLanguageId())
            {
                _sourceProperty.parmLanguageId(_newProperty.parmLanguageId());
            }

            if (_sourceProperty.parmDisplayName() != _newProperty.parmDisplayName())
            {
                _sourceProperty.parmDisplayName(_newProperty.parmDisplayName());
            }

            if (_sourceProperty.parmDisplayDescription() != _newProperty.parmDisplayDescription())
            {
                _sourceProperty.parmDisplayDescription(_newProperty.parmDisplayDescription());
            }

            if (_sourceProperty.parmAxEDTName() != _newProperty.parmAxEDTName())
            {
                _sourceProperty.parmAxEDTName(_newProperty.parmAxEDTName());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>