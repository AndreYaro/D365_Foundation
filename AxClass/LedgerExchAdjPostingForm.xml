<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExchAdjPostingForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerExchAdjPostingForm
{
    private Common callerRecord;
    private boolean called;

    private PostingProfileAccountCode accountCode;
    private PostingProfileAccountRelation accountRelation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new (Common _callerRecord)
    {
        callerRecord = _callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateNow()
    {
        called = false;

        if (callerRecord.RecId)
        {
            called = true;
            accountCode = TableGroupAll::All;
            accountRelation = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGL</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void queryGL(FormDataSource _generalLedgerDS, CurrencyGainLossAccountType _selectedAccountType)
    {
        this.searchIndex(_generalLedgerDS, LedgerExchAdjPostingModule::GeneralLedger, _selectedAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void queryAP(FormDataSource _accountsPayableDS, CurrencyGainLossAccountType _selectedAccountType)
    {
        this.searchIndex(_accountsPayableDS, LedgerExchAdjPostingModule::AccountsPayable, _selectedAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAR</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void queryAR(FormDataSource _accountsReceivableDS, CurrencyGainLossAccountType _selectedAccountType)
    {
        this.searchIndex(_accountsReceivableDS, LedgerExchAdjPostingModule::AccountsReceivable, _selectedAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBank</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void queryBank(FormDataSource _bankDS, CurrencyGainLossAccountType _selectedAccountType)
    {
        this.searchIndex(_bankDS, LedgerExchAdjPostingModule::Bank, _selectedAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchIndex</Name>
				<Source><![CDATA[
    protected void searchIndex(
        FormDataSource _formDataSource, 
        LedgerExchAdjPostingModule _selectedModule, 
        CurrencyGainLossAccountType _selectedAccountType)
    {
        Query query;
        QueryBuildDataSource qbds;

        query = _formDataSource.query();

        if (query)
        {
            qbds = query.dataSourceTable(tableNum(LedgerExchAdjPosting));

            qbds.clearRanges();
            qbds.addRange(fieldNum(LedgerExchAdjPosting, Module)).value(queryValue(_selectedModule));
            qbds.addRange(fieldNum(LedgerExchAdjPosting, AccountType)).value(queryValue(_selectedAccountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCodeRange</Name>
				<Source><![CDATA[
    protected str accountCodeRange()
    {
        str range;

        // Create a range which selects the records that match the calling buffer with a 'Table' match, 'Group' match, 'Category' match, or 'All' match.
        // However, if the code is 'All' then this range does not apply.
        switch (accountCode)
        {
            case TableGroupAll::Table:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(LedgerExchAdjPosting, AccountCode),
                    enum2int(TableGroupAll::Table),
                    fieldStr(LedgerExchAdjPosting, AccountRelation),
                    accountRelation);
            // Fall through
            case TableGroupAll::GroupId:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(LedgerExchAdjPosting, AccountCode),
                    enum2int(TableGroupAll::GroupId),
                    fieldStr(LedgerExchAdjPosting, AccountRelation),
                    accountRelation);
                
                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range = strFmt('( %1 (%2 == %3))',
                    range,
                    fieldStr(LedgerExchAdjPosting, AccountCode),
                    enum2int(TableGroupAll::All));

                break;
            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }

        return range;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>