<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesUpdateRemain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class encapsulating logic of manipulating Sales Order delivery remainder.
/// </summary>
public class SalesUpdateRemain
{
    private boolean singleLineUpdateRemain;
    private boolean refundPayments;
    private FormDataSource formDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SetSingleLineUpdateRemain</Name>
				<Source><![CDATA[
    private void SetSingleLineUpdateRemain(boolean _singleLineUpdateRemain)
    {
        singleLineUpdateRemain = _singleLineUpdateRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefundPayments</Name>
				<Source><![CDATA[
    internal void setRefundPayments(boolean _refundPayments)
    {
        refundPayments = _refundPayments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// The form data source instance is a parameter for the changeReturnStatus
    /// method from the Sales table to process to cancel Return order 
    /// </summary>
    /// <param name = "_formDataSource">The form data source</param>
    /// <returns>The <c>formDataSource</c></returns>
    [Hookable(false)]
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource)
    {
        formDataSource = _formDataSource;

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        singleLineUpdateRemain = true;
        refundPayments = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesUpdateRemain construct()
    {
        return new SalesUpdateRemain();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRemainderOnManySalesOrders</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesUpdateRemain.cancelMultipleOrdersDeliveryRemainder instead', false, 30\11\2017)]
    public static void cancelRemainderOnManySalesOrders(container _packedSalesRecIdList)
    {
        List ordersToCancel = List::create(_packedSalesRecIdList);
        SalesUpdateRemain::construct().cancelMultipleOrdersDeliveryRemainder(ordersToCancel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelMultipleOrdersDeliveryRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops over many Sales Orders invoking <c>cancelOpenOrderLinesDeliveryRemainder</c> method on them.
    /// </summary>
    /// <param name="_salesRecIdList">
    /// A list of RecId's for <c>SalesTable</c> records.
    /// </param>
    /// <remarks>
    /// This operation is not atomic.
    /// </remarks>
    public void cancelMultipleOrdersDeliveryRemainder(List _salesRecIdList)
    {
        ListEnumerator le = _salesRecIdList.getEnumerator();
        boolean voidedOkay;
        SalesStatus preCancelStatus;

        while (le.moveNext())
        {
            voidedOkay = true;
            RecId salesTableRecId = le.current();
            SalesTable salesTable = SalesTable::findRecId(salesTableRecId, true);
            preCancelStatus = salesTable.SalesStatus;

            // show warning if call center order has not voided payment
            if (RetailTransactionPaymentsHelper::isCallCenterOrCommercePaymentsEnabledOrder(salesTable))
            {
                if (ReturnOrderCanNotBeCancelledSalesOrderIsNotEitherFlight::instance().isEnabled() && !this.canCancelSalesOrder(salesTable))
                {
                    return;
                }

                using (McrSalesOrderCancellationContext context = McrSalesOrderCancellationContext::construct())
                {
                    context.parmCaller(this);
                    voidedOkay = MCRSalesOrderCancellation::cancelOrder(salesTable);
                }

                if (voidedOkay)
                {
                    RetailEventNotificationAction::InsertRetailOENAction(RetailEventNotificationType::OrderCancellation, salesTable.RecId, salesTable);
                }
            }
            else
            {
                this.cancelOpenOrderLinesDeliveryRemainder(salesTable);

                if (salesTable.CreditCardApprovalAmount && salesTable.SalesStatus == SalesStatus::Canceled)
                {
                    voidedOkay = salesTable.tryVoidCreditCardPreauthorize();
                }
            }

            if (salesTable.mcrIsCallCenter() && salesTable.SalesStatus == SalesStatus::Canceled)
            {
                // The order is cancelled need to void any authorizations.
                voidedOkay = salesTable.tryVoidCreditCardPreauthorize();
            }

            if (!voidedOkay && salesTable.SalesStatus == SalesStatus::Canceled)
            {
                // sales lines cancelled but payment failed to void
                ttsbegin;
                salesTable.SalesStatus = preCancelStatus;
                salesTable.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllCustomerPaymentsVoided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all the customer payments are voided.
    /// </summary>
    /// <param name = "_salesTableRecId">The <c>RefRecId</c> of the sales order.</param>
    /// <returns>true if all the customer payments are voided; otherwise, false.</returns>
    public boolean areAllCustomerPaymentsVoided(RefRecId _salesTableRecId)
    {
        MCRCustPaymTable    custPaymTable;

        select firstonly Status from custPaymTable
            where custPaymTable.RefTableId == tableNum(SalesTable)
            && custPaymTable.RefRecId == _salesTableRecId
            && (custPaymTable.Status == MCRCustPaymStatus::Authorized || custPaymTable.Status == MCRCustPaymStatus::Paid || custPaymTable.Status == MCRCustPaymStatus::Posted);

        return custPaymTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCancelOpenOrderLinesDeliveryRemainderQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used for the <c>cancelOpenOrderLinesDeliveryRemainder</c> method.
    /// </summary>
    /// <param name = "_salesTable">The <c>SalesTable</c> used to identify the <c>SalesId</c>
    /// of the <c>SalesLine</c>.</param>
    /// <returns>The <c>Query</c></returns>
    protected Query buildCancelOpenOrderLinesDeliveryRemainderQuery(SalesTable _salesTable)
    {
        Query query = new Query();
        QueryBuildDataSource salesLineDataSource = query.addDataSource(tableNum(SalesLine));
        salesLineDataSource.update(true);
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            salesLineDataSource.addSortField(fieldNum(SalesLine, LineNum), SortOrder::Descending);
        }

        QueryBuildRange salesIdRange = salesLineDataSource.addRange(fieldNum(SalesLine, SalesId));
        salesIdRange.value(queryValue(_salesTable.SalesId));
        QueryBuildRange salesStatusRange = salesLineDataSource.addRange(fieldNum(SalesLine, SalesStatus));
        salesStatusRange.value(queryValue(SalesStatus::Backorder));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRemainderOnOpenSalesLines</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesUpdateRemain.cancelOpenOrderLinesDeliveryRemainder instead', false, 30\11\2017)]
    public static boolean cancelRemainderOnOpenSalesLines(SalesTable _salesTable)
    {
        return SalesUpdateRemain::construct().cancelOpenOrderLinesDeliveryRemainder(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOpenOrderLinesDeliveryRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets delivery remainder to 0 (cancels) on all open sales order's lines.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order for which lines will be cancelled.
    /// </param>
    /// <returns>
    /// true if cancellation was successful; otherwise, false.
    /// </returns>
    public boolean cancelOpenOrderLinesDeliveryRemainder(SalesTable _salesTable)
    {
        if (!_salesTable.RecId || _salesTable.SalesStatus != SalesStatus::Backorder
            || (ReturnOrderCanNotBeCancelledSalesOrderIsNotEitherFlight::instance().isEnabled()
            && !this.canCancelSalesOrder(_salesTable)))
        {
            return false;
        }

        ttsbegin;

        MCRSalesOrderCancellation mcrSalesOrderCancellation;

        if (RetailMCRChannelTable::findChannelBySalesTable(_salesTable).mcrEnableOrderCompletion ||
            (RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(_salesTable, funcName()) && refundPayments))
        {
            mcrSalesOrderCancellation = new MCRSalesOrderCancellation();
            // Need to calculate the order total before cancellation, to know
            // how much needs to be refunded
            mcrSalesOrderCancellation.preCancel(_salesTable);
        }

        if (!this.cancelOpenOrderLinesDeliveryRemainderAndUpdateStatus(_salesTable))
        {
            throw error("@SCM:SalesOrderNotCanceled");
        }

        this.updateOrderAfterCancelingDeliveryRemainder(_salesTable, mcrSalesOrderCancellation);

        RetailEventNotificationAction::InsertRetailOENAction(RetailEventNotificationType::OrderCancellation, _salesTable.RecId, _salesTable);

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderAfterCancelingDeliveryRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales order after cancelling the delivery remainder on the sales order lines.
    /// </summary>
    /// <param name = "_salesTable">A <c>SalesTable</c> record.</param>
    /// <param name = "_mcrSalesOrderCancellation">An instance of the <c>MCRSalesOrderCancellation</c> class.</param>
    protected void updateOrderAfterCancelingDeliveryRemainder(SalesTable _salesTable, MCRSalesOrderCancellation _mcrSalesOrderCancellation)
    {
        if (_salesTable.SalesStatus != SalesStatus::Canceled)
        {
            info(strFmt("@SYS4004577", _salesTable.SalesId, _salesTable.SalesStatus ));
        }
        // If order completion is enabled and the order is completely cancelled
        //  need cancel related call center records
        else if (_mcrSalesOrderCancellation)
        {
            _mcrSalesOrderCancellation.postCancelOrder(_salesTable);
        }

        // Always refund if something was cancelled
        if (_mcrSalesOrderCancellation && refundPayments)
        {
            // Refund if necessary
            _mcrSalesOrderCancellation.postCancelAdjPayment(_salesTable);
        }

        if (BrazilParameters::isEnabled())
        {
            _salesTable.removeReferenceToCancelledFiscalDoc_BR();
        }

        if (formDataSource
            && _salesTable.ReturnItemNum
            && _salesTable.SalesStatus == SalesStatus::Canceled)                    
        {
            SalesTable::changeReturnStatus(formDataSource, ReturnUpdateAction::Cancel);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOpenOrderLinesDeliveryRemainderAndUpdateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the delivery remainder on open <c>SalesLine</c> records and updates status on the lines to canceled.
    /// </summary>
    /// <param name = "_salesTable">
    /// The sales order for which lines will be canceled.
    /// </param>
    /// <returns>
    /// true if the cancellation was successful; otherwise, false.
    /// </returns>
    protected boolean cancelOpenOrderLinesDeliveryRemainderAndUpdateStatus(SalesTable _salesTable)
    {
        boolean                     updated = false;
        boolean                     salesLineExist = false;

        this.SetSingleLineUpdateRemain(false);

        QueryRun queryRunner = new QueryRun(this.buildCancelOpenOrderLinesDeliveryRemainderQuery(_salesTable));
        while (queryRunner.next())
        {

            SalesLine salesLine = queryRunner.get(tableNum(SalesLine));
                
            salesLineExist = true;

            if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
            {
                updated = this.updateCatchWeightDeliverRemainder(salesLine, 0);
            }
            else
            {
                updated = this.updateDeliverRemainder(salesLine, 0, 0);
            }

            if (!updated)
            {
                return false;
            }
            else if (salesLine.SalesStatus != SalesStatus::Canceled && salesLine.SalesQty == 0)
            {
                salesLine.SalesStatus = SalesStatus::Canceled;
                salesLine.update();
            }
        }

        _salesTable.reread();

        if (!salesLineExist)
        {
            _salesTable.SalesStatus = SalesStatus::Canceled;
            _salesTable.update();
        }
        else if (_salesTable.setEstimate())
        {
            _salesTable.doUpdate();
        }

        this.SetSingleLineUpdateRemain(true);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryRemainder</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesUpdateRemain.updateDeliverRemainder instead', false, 30\11\2017)]
    public static boolean updateDeliveryRemainder(
        SalesLine      _salesLine,
        InventQty      _remainSalesPhysical,
        InventQty      _remainInventPhysical,
        PdsCWInventQty _cWRemainInventPhysical = 0)
    {
        return SalesUpdateRemain::construct().updateDeliverRemainder(_salesLine, _remainSalesPhysical, _remainInventPhysical, _cWRemainInventPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliverRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates delivery remainder on sales line to given values. Update is propagated over chained purchase line if exists.
    /// </summary>
    /// <param name="_salesLine">
    /// The instance of <c>SalesLine</c> for which delivery remainder is set.
    /// </param>
    /// <param name="_remainSalesPhysical">
    /// New value for remaining physical sales quantity.
    /// </param>
    /// <param name="_remainInventPhysical">
    /// New value for remaining physical inventory quantity.
    /// </param>
    /// <param name="_CWRemainInventPhysical">
    /// New value for remaining physical inventory CW quantity.
    /// </param>
    /// <returns>
    /// true if the line's delivery remainder was successfully updated; otherwise, false.
    /// </returns>
    public boolean updateDeliverRemainder(
        SalesLine      _salesLine, 
        InventQty      _remainSalesPhysical, 
        InventQty      _remainInventPhysical, 
        PdsCWInventQty _cWRemainInventPhysical = 0)
    {
        if (InventInventoryDataServiceSoftReservationUpdateDeliverRemainderFlight::instance().isEnabled())
        {
            InventInventoryDataServiceSoftReservationHelper::checkSoftReservationWhenUpdateDeliverRemainder(_salesLine, _remainInventPhysical);
        }

        if (SalesUpdateRemainAvoidUpdateWhenCWQtyNotChangedFlight::instance().isEnabled()
            && PdsGlobal::pdsIsCWItem(_salesLine.ItemId) 
            && _salesLine.orig().PdsCWRemainInventPhysical == _cWRemainInventPhysical)
        {
            return true;
        }

        InventQty      diffRemainSalesPhysical       = _salesLine.RemainSalesPhysical               - _remainSalesPhysical;
        InventQty      diffRemainInventPhysical      = _salesLine.RemainInventPhysical              - _remainInventPhysical;
        PdsCWInventQty diffPdsCWRemainInventPhysical = _salesLine.orig().PdsCWRemainInventPhysical  - _cWRemainInventPhysical;

        _salesLine.RemainSalesPhysical  = _remainSalesPhysical;
        _salesLine.RemainInventPhysical = _remainInventPhysical;

        if (_salesLine.RemainInventPhysical)
        {
            if (!_salesLine.RemainSalesPhysical)
            {
                throw error("@SCM:InventoryQuantityCannotBe0WhenOrderQuantityIs0");
            }
            if (sign(_salesLine.RemainInventPhysical) != sign(_salesLine.RemainSalesPhysical))
            {
                throw error("@SCM:InventoryQuantityMustHaveSameSignAsOrderQuantity");
            }
        }

        SalesTableType salesTableType = SalesTableType::construct(_salesLine.salesTable());
        salesTableType.parmSalesLineCaller(_salesLine);

        if (_salesLine.validateWrite() && salesTableType.checkUpdate())
        {
            ttsbegin;

            this.updateInterCompanyDeliverRemainder(_salesLine, diffRemainSalesPhysical, diffRemainInventPhysical, diffPdsCWRemainInventPhysical);

            _salesLine.write();

            if (singleLineUpdateRemain)
            {
                this.updateCorrespondingSalesOrder(_salesLine);
            }

            // If order completion is enabled need cancel related call center records
            this.cancelCallCenterRelatedRecords(this.salesTable(_salesLine), _salesLine);

            ttscommit;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorrespondingSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SalesTable</c> record corresponding to the specified <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record for which delivery reminder is set.</param>
    /// <returns>the <c>SalesTable</c> record corresponding to the specified <c>SalesLine</c>.</returns>
    protected SalesTable updateCorrespondingSalesOrder(SalesLine _salesLine)
    {
        SalesTable salesTable = this.salesTable(_salesLine);

        if (salesTable.setEstimate())
        {
            salesTable.doUpdate();
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelCallCenterRelatedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the related call center records.
    /// </summary>
    /// <param name = "_salesTable">The <c>SalesTable</c> record corresponding to the specified <c>SalesLine</c>.</param>
    /// <param name = "_salesLine">The <c>SalesLine</c> record for which delivery remainder is set.</param>
    protected void cancelCallCenterRelatedRecords(SalesTable _salesTable, SalesLine _salesLine)
    {
        if (RetailMCRChannelTable::findChannelBySalesTable(_salesTable).mcrEnableOrderCompletion)
        {
            MCRSalesOrderCancellation mcrSalesOrderCancellation = new MCRSalesOrderCancellation();
            mcrSalesOrderCancellation.postCancelLine(_salesLine);

            if (_salesTable.SalesStatus == SalesStatus::Canceled)
            {
                // The order is cancelled need to void any authorizations.
                _salesTable.voidCreditCardPreauthorize();
            }

            // If sales order is invoiced or sales line is invoiced, try to post the earned loyalty points for this transaction
            if (_salesTable.SalesStatus == SalesStatus::Invoiced || _salesLine.SalesStatus == SalesStatus::Invoiced)
            {
                // if sales order gets invoiced post the loyalty points
                RetailLoyaltyManager::PostCardTransFromSalesTable(_salesTable.SalesId);
            }

            // If after cancelling a line and the sales order status becomes invoiced, MCROrderStopped should be set to No
            if (_salesTable.SalesStatus == SalesStatus::Invoiced)
            {
                ttsbegin;
                _salesTable.selectForUpdate(true);
                _salesTable.MCROrderStopped = NoYes::No;
                _salesTable.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInterCompanyDeliverRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the intercompany delivery remainder.
    /// </summary>
    /// <param name="_salesLine">
    /// The instance of <c>SalesLine</c> for which delivery remainder is set.
    /// </param>
    /// <param name="_diffRemainSalesPhysical">
    /// The difference between the old and the new value for remaining physical sales quantity.
    /// </param>
    /// <param name="_diffRemainInventPhysical">
    /// The difference between the old and the new value for remaining physical inventory quantity.
    /// </param>
    /// <param name="_diffPdsCWRemainInventPhysical">
    /// The difference between the old and the new value for remaining physical inventory CW quantity.
    /// </param>
    protected void updateInterCompanyDeliverRemainder(
                SalesLine      _salesLine,
                InventQty      _diffRemainSalesPhysical,
                InventQty      _diffRemainInventPhysical,
                PdsCWInventQty _diffPdsCWRemainInventPhysical)
    {
        InterCompanyUpdateRemPhys::synchronize(_salesLine,
                                               _diffRemainInventPhysical,
                                               _diffRemainSalesPhysical,
                                               InterCompanySkipUpdate::No,
                                               _diffPdsCWRemainInventPhysical);

        if (_salesLine.InterCompanyInventTransId
            || (_salesLine.InventRefType == InventRefType::Purch
            &&  _salesLine.InventRefTransId
            &&  _salesLine.DeliveryType == TradeLineDlvType::DropShip))
        {
            InventQty      remainSalesPhysical      = _salesLine.RemainSalesPhysical;
            InventQty      remainInventPhysical     = _salesLine.RemainInventPhysical;
            PdsCWInventQty cWRemainInventPhysical   = _salesLine.orig().PdsCWRemainInventPhysical  - _diffPdsCWRemainInventPhysical;

            _salesLine.reread();
            _salesLine.RemainSalesPhysical       = remainSalesPhysical;
            _salesLine.RemainInventPhysical      = remainInventPhysical;
            _salesLine.PdsCWRemainInventPhysical = cWRemainInventPhysical;
        }

        this.syncIntercompanyInventTransOnSalesLineUpdate(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>SalesTable</c> record based on the passed <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesLine">
    /// The passed <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>SalesTable</c> record.
    /// </returns>
    protected SalesTable salesTable(SalesLine _salesLine)
    {
        return SalesTable::find(_salesLine.SalesId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryRemainderCW</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesUpdateRemain.updateCatchWeightDeliverRemainder instead', false, 30\11\2017)]
    public static boolean updateDeliveryRemainderCW(SalesLine _salesLine, PdsCWInventQty _remainingCWInventQty)
    {
        return SalesUpdateRemain::construct().updateCatchWeightDeliverRemainder(_salesLine, _remainingCWInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatchWeightDeliverRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Catch Weight delivery remainder on sales line to given value.
    /// </summary>
    /// <param name="_salesLine">
    /// The instance of <c>SalesLine</c> for which delivery remainder is set.
    /// </param>
    /// <param name="_remainingCWInventQty">
    /// New value for remaining physical Catch Weight quantity.
    /// </param>
    /// <returns>
    /// true if the line's delivery remainder was successfully updated; otherwise, false.
    /// </returns>
    public boolean updateCatchWeightDeliverRemainder(SalesLine _salesLine, PdsCWInventQty _remainingCWInventQty)
    {
        InventQty       remainingInventPhysical = PdsCatchWeight::minInventQty(_salesLine.ItemId, _remainingCWInventQty);
        InventQty       remainingSalesPhysical = PdsFormCtrl_UpdateRemain::convertQtyToUOM(_salesLine.ItemId, _salesLine.SalesUnit, remainingInventPhysical);

        _salesLine.PdsCWRemainInventPhysical = _remainingCWInventQty;

        return this.updateDeliverRemainder(_salesLine, remainingSalesPhysical, remainingInventPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelSalesOrder</Name>
				<Source><![CDATA[
    private boolean canCancelSalesOrder(SalesTable _salesTable)
    {
        boolean ret = true;

        if (_salesTable.SalesType == SalesType::ReturnItem)
        {
            if (_salesTable.ReturnStatus != ReturnStatusHeader::Created)
            {
                ret = checkFailed(strFmt("@SCM:WrongReturnOrderStatusWhenCancellingSalesOrder", ReturnStatusHeader::Created));
            }
            if (ret && _salesTable.type().interCompanyIsDerivedOrder())
            {
                ret = checkFailed("@SCM:IntercompanyReturnOrderCanNotBeCancelled");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncIntercompanyInventTransOnSalesLineUpdate</Name>
				<Source><![CDATA[
    private void syncIntercompanyInventTransOnSalesLineUpdate(SalesLine _salesLine)
    {
        SalesTable salesTable = SalesTable::find(_salesLine.SalesId);

        if (salesTable && salesTable.isInterCompanyOrder() && !salesTable.isInterCompanyPOInvoiceMatched() && !salesTable.InterCompanyDirectDeliveryOrig)
        {
            InterCompanyTransferInventDim::doTransfer(_salesLine.DataAreaId,
                                                        _salesLine.InventTransId,
                                                        salesTable.InterCompanyCompanyId,
                                                        _salesLine.InterCompanyInventTransId,
                                                        salesTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External),
                                                        StatusIssue::Deducted);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>