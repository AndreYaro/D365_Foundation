<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportXML_SPV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class implements generation of electronic format SPV-2.
/// </summary>
class RPayPFReportXML_SPV2 extends RPayPFReportXML_SPV1_2011
{
    RPayAmount      fundAmountExtra1, fundAmountExtra2;
    Counter         docPersonQty, docPersonQtyMax;
    boolean         isFirstDocument;
    ListEnumerator  totalPerFileEnumerator;

    #define.ReportTitle("@SYP4882101")
    #RPayPFReportSPV2
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }
]]></Source>
			</Method>
			<Method>
				<Name>descriptionTag</Name>
				<Source><![CDATA[
    protected str descriptionTag()
    {
        return 'ВХОДЯЩАЯ_ОПИСЬ';
    }
]]></Source>
			</Method>
			<Method>
				<Name>docQty</Name>
				<Source><![CDATA[
    protected int docQty(
        str 100             _docType,
        str 20              _personCategory = '',
        RPayPFSeniorityType _seniorityType = RPayPFSeniorityType::None)
    {
        container ret;

        if (totalPerFileEnumerator.moveNext())
        {
            ret = totalPerFileEnumerator.current();
        }
        else
        {
            ret = connull();
        }

        return conpeek(ret, 1);
    }
]]></Source>
			</Method>
			<Method>
				<Name>docType</Name>
				<Source><![CDATA[
    protected str docType()
    {
        return #DocTypeSPV2;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillAmounts</Name>
				<Source><![CDATA[
    protected void fillAmounts()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillDocContPerFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates document quantity.
    /// </summary>
    protected void fillDocContPerFile()
    {
        container   con;
        int         counter;
        List        totalPerFile;

        totalPerFile   = new List(Types::Container);
        totalFundCommand.parmValue(connull());

        fundDataIterator = totalFundCommand.iterator();

        if (fundDataIterator.more())
        {
            while (fundDataIterator.more())
            {
                con = fundDataIterator.value();
                this.getKeyValue(con);

                if (this.isNewFile())
                {
                    if (counter)
                    {
                        totalPerFile.addEnd([counter]);
                    }

                    counter = 0;
                }

                if (this.isNewDocument())
                {
                    docPersonQty++;
                    counter ++;
                }

                fundDataIterator.moveNext();
            }
        }

        if (counter)
        {
            totalPerFile.addEnd([counter]);
        }

        totalPerFileEnumerator = totalPerFile.getEnumerator();
        keyDocChanged  = new Set(Types::Container);
        docPersonQty = 0;
        isFirstDocument = true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillFormType</Name>
				<Source><![CDATA[
    protected void fillFormType(str 20 _formType)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillHeaderCategory</Name>
				<Source><![CDATA[
    protected void fillHeaderCategory(str 20 _personCategory)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillLine</Name>
				<Source><![CDATA[
    protected void fillLine(RHRMEmplTable       _emplTable,
                            str 20              _formType,
                            str 20              _personCategory,
                            RPayPFSeniorityType _seniorityType)
    {
        #define.YES('ДА')
        #define.NO('НЕТ')

        super(_emplTable, _formType, _personCategory, _seniorityType);

        if (reportType == RpayPensionFundExportKindOfCorrection::Cancellative)
        {
            this.fillPreparationDate(_emplTable);
        }
        else
        {
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ПризнакНачисленияВзносовОПС', fundAmountIns ? #YES : #NO);
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ПризнакНачисленияВзносовПоДопТарифу', (fundAmountExtra1 || fundAmountExtra2) ? #YES : #NO);
        }

        docPersonQty++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPeriodHeader</Name>
				<Source><![CDATA[
    protected void fillPeriodHeader()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getKeyValue</Name>
				<Source><![CDATA[
    protected void getKeyValue(container _con)
    {
        [#parmKeyReport] = conpeek(_con, 1);
        [#parmValue]     = conpeek(_con, 2);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getReportPeriodName</Name>
				<Source><![CDATA[
    protected str 20 getReportPeriodName(
        ReportPeriod_RU _reportStartPeriod,
        ReportPeriod_RU _reportEndPeriod)
    {
        return super(dateStartYr(_reportStartPeriod), _reportEndPeriod);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getReportPeriodQtrStr</Name>
				<Source><![CDATA[
    protected str 20 getReportPeriodQtrStr(ReportPeriod_RU _reportEndPeriod)
    {
        str 20 ret;

        switch (date2Qtr(_reportEndPeriod))
        {
            case 1:
                ret = '3';
            break;
            case 2:
                ret = '6';
            break;
            case 3:
                ret = '9';
            break;
            case 4:
                ret = '0';
            break;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        super();

        if (payTaxParameters.SZVPersonCounter)
        {
            docPersonQtyMax = any2int(RPayRateTable::find(payTaxParameters.SZVPersonCounter).getValue(RPayRateCallContext::construct(reportEndPeriod)));

            if (maxDocPerFile)
            {
                docPersonQtyMax = min(maxDocPerFile, docPersonQtyMax);
            }
        }
        else
        {
            docPersonQtyMax = maxDocPerFile;
        }

        isFirstDocument = true;
        this.fillDocContPerFile();
    }
]]></Source>
			</Method>
			<Method>
				<Name>isNewDocument</Name>
				<Source><![CDATA[
    protected boolean isNewDocument()
    {
        boolean ret;

        if (keyDocChanged.in([#parmKeyReport]) || !keyCategory)
        {
            ret = false;
        }
        else
        {
            ret = true;
            keyDocChanged.add([#parmKeyReport]);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isNewFile</Name>
				<Source><![CDATA[
    protected boolean isNewFile()
    {
        boolean ret;

        if ((docPersonQtyMax && docPersonQtyMax <= docPersonQty || isFirstDocument) &&
            keyEmplId)
        {
            ret = true;
            docPersonQty = 0;
            isFirstDocument = false;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>needCorrectedPeriod</Name>
				<Source><![CDATA[
    protected boolean needCorrectedPeriod()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }
]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    protected enumId periodType()
    {
        return enumnum(RPayReportSocialTaxPeriod);
    }
]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSPV2XML();
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();

                break;

            default:
                return false;
        }
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return #ReportTitle;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>