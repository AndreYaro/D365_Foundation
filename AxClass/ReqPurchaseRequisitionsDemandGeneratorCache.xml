<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPurchaseRequisitionsDemandGeneratorCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqPurchaseRequisitionsDemandGeneratorCache</c> class helps <c>ReqPurchaseRequisitionsDemandGenerator</c> 
///     while iterating PurchReqLines by caching required parameters are being used.
/// </summary>
internal class ReqPurchaseRequisitionsDemandGeneratorCache
{
    private InventDimId             currentInventDimId;
    private InventDimGroupSetup     inventDimGroupSetup;
    private InventTable             inventTable;
    private ItemId                  currentItemId;
    private ReqCalc                 reqCalc;
    private ReqSetupDim             reqSetupDim;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>ReqPurchaseRequisitionsDemandGeneratorCache</c> class.
    /// </summary>
    /// <param name = "_reqCalc">An instance of <c>ReqCalc</c> to able to access its functionalities.</param>
    /// <returns>An instance of <c>ReqPurchaseRequisitionsDemandGeneratorCache</c>.</returns>
    [Hookable(false)]
    internal static ReqPurchaseRequisitionsDemandGeneratorCache newStandard(ReqCalc _reqCalc)
    {
        var instance = new ReqPurchaseRequisitionsDemandGeneratorCache();
        instance.reqCalc = _reqCalc;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cached InventTable instance by itemId and inventDimId.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventDim">An instance of <c>InventDim</c> class.</param>
    /// <returns>An instance of <c>InventTable</c>.</returns>
    [Hookable(false)]
    internal InventTable getInventTable(ItemId _itemId, InventDim _inventDim)
    {
        this.updateCachedParameters(_itemId, _inventDim);

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cached InventDimGroupSetup instance by itemId and inventDimId.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventDim">An instance of <c>InventDim</c> class.</param>
    /// <returns></returns>
    [Hookable(false)]
    internal InventDimGroupSetup getInventDimGroupSetup(ItemId _itemId, InventDim _inventDim)
    {
        this.updateCachedParameters(_itemId, _inventDim);

        return inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cached instance of ReqSetupDim which contains master planning parameters.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventDim">An instance of <c>InventDim</c> class.</param>
    /// <returns>An instance of <c>ReqSetupDim</c>.</returns>An></returns>
    [Hookable(false)]
    internal ReqSetupDim getReqSetupDim(ItemId _itemId, InventDim _inventDim)
    {
        this.updateCachedParameters(_itemId, _inventDim);

        return reqSetupDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets itemId which is cached.
    /// </summary>
    /// <returns>Returns cached itemId.</returns>
    [Hookable(false)]
    internal ItemId itemId()
    {
        return currentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCachedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update cached parameters regarding to change on itemId or inventDimId.
    /// </summary>
    [Hookable(false)]
    private void updateCachedParameters(ItemId _itemId, InventDim _inventDim)
    {
        if (currentItemId != _itemId)
        {
            inventTable = InventTable::find(_itemId);
            inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
            currentItemId = inventTable.ItemId;
        }

        if (currentItemId != _itemId || currentInventDimId != _inventDim.inventDimId)
        {               
            var reqCovInventDimId = _inventDim.reqCovDimId(inventDimGroupSetup);

            reqSetupDim = reqCalc.getSetupDim(_itemId, reqCovInventDimId);
            currentInventDimId = _inventDim.inventDimId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>