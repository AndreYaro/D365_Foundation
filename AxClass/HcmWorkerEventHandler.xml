<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HcmWorkerEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmWorker_Post_delete</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(HcmWorker), tableMethodStr(HcmWorker, delete))]
    public static void HcmWorker_Post_delete(XppPrePostArgs _args)
    {
        RHRMPersonTable rhrmPersonTable;
        RetailStaffTable retailStaff;

        HcmWorker worker = _args.getThis();

        // Delete the associated RHRMPersonTable records
        delete_from rhrmPersonTable
            where rhrmPersonTable.PersonnelNumber == worker.PersonnelNumber;

        // Delete linked data from RetailStaffTable as well so that the deleted HcmWorker cannot login into POS.
        delete_from retailStaff
            where   retailStaff.StaffId == worker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_Pre_Delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-EventHandler to delete() method of HcmWorker table to verify if there are open journal registrations for the associated HcmWorker record.
    /// If true, throw error. Else delete associated JmgStampJournalTable record and JmgEmployee record.
    /// </summary>
    /// <param name = "_args"> XppPrePostArgs variable. </param>
    [PreHandlerFor(tableStr(HcmWorker), tableMethodStr(HcmWorker, delete))]
    public static void HcmWorker_Pre_Delete(XppPrePostArgs _args)
    {
        HcmWorker hcmWorker = _args.getThis();
        JmgStampJournalTrans jmgStampJournalTrans;
        select firstonly RecId from jmgStampJournalTrans where jmgStampJournalTrans.Worker == hcmWorker.RecId;
            
        if (jmgStampJournalTrans)
        {
            var dirPerson = DirPersonName::find(hcmWorker.Person);
            throw error(strFmt("@SCM:DeleteHcmWorkerOpenJournalReg", dirPerson.FirstName, dirPerson.LastName, hcmWorker.PersonnelNumber));
        }

        JmgStampJournalTable jmgStampJournalTable;
        delete_from jmgStampJournalTable where jmgStampJournalTable.Worker == hcmWorker.RecId;
          
        JmgEmployee jmgEmployee = JmgEmployee::findPersonnelNumber(hcmWorker.PersonnelNumber);
        jmgEmployee.selectForUpdate(true);
        jmgEmployee.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_Pre_validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// DataEventHandler to validatingDelete event to verify if the worker is activated for registration terminals.
    /// If true, throw error.
    /// </summary>
    /// <param name = "_sender"> The sender of common type. In this case HcmWorker. </param>
    /// <param name = "_e"> DataEventArgs variable. </param>

    [DataEventHandler(tableStr(HcmWorker), DataEventType::ValidatingDelete)]
    public static void HcmWorker_Pre_validateDelete(Common _sender, DataEventArgs _e)
    {
        HcmWorker hcmWorker = _sender as HcmWorker;
        JmgEmployee jmgEmployee = JmgEmployee::findPersonnelNumber(hcmWorker.PersonnelNumber);

        if (jmgEmployee.Active == NoYes::Yes)
        {
            var dirPerson = DirPersonName::find(hcmWorker.Person);
            throw error(strFmt("@SCM:DeleteActiveHcmWorker", dirPerson.FirstName, dirPerson.LastName, hcmWorker.PersonnelNumber));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>