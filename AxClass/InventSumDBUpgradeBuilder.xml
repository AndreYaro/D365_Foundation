<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDBUpgradeBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSumDBUpgradeBuilder</c> class is responsible for updating records in table <c>InventSum</c> with inventory dimension values from table <c>InventDim</c>.
/// </summary>
internal class InventSumDBUpgradeBuilder extends ApplicationSQLObjects
{
    private str inventSumTableName;
    private str inventSumPartition;
    private str inventSumDataAreaId;
    private str inventSumInventDimId;
    private str inventSumRecId;
    private str inventSumConfigId;
    private str inventSumInventBatchId;
    private str inventSumInventColorId;
    private str inventSumInventLocationId;
    private str inventSumInventSerialId;
    private str inventSumInventSiteId;
    private str inventSumInventSizeId;
    private str inventSumInventStatusId;
    private str inventSumInventStyleId;
    private str inventSumInventVersionId;
    private str inventSumLicensePlateId;
    private str inventSumWMSLocationId;
    private str inventSumWMSPalletId;
    private str inventSumInventGtdId_RU;
    private str inventSumInventOwnerId_RU;
    private str inventSumInventProfileId_RU;
    private str inventSumInventDimension1;
    private str inventSumInventDimension2;
    private str inventSumInventDimension3;
    private str inventSumInventDimension4;
    private str inventSumInventDimension5;
    private str inventSumInventDimension6;
    private str inventSumInventDimension7;
    private str inventSumInventDimension8;
    private str inventSumInventDimension9;
    private str inventSumInventDimension10;
    private str inventSumInventDimension11;
    private str inventSumInventDimension12;

    private str inventDimTableName;
    private str inventDimPartition;
    private str inventDimDataAreaId;
    private str inventDimInventDimId;
    private str inventDimConfigId;
    private str inventDimInventBatchId;
    private str inventDimInventColorId;
    private str inventDimInventLocationId;
    private str inventDimInventSerialId;
    private str inventDimInventSiteId;
    private str inventDimInventSizeId;
    private str inventDimInventStatusId;
    private str inventDimInventStyleId;
    private str inventDimInventVersionId;
    private str inventDimLicensePlateId;
    private str inventDimWMSLocationId;
    private str inventDimWMSPalletId;
    private str inventDimInventGtdId_RU;
    private str inventDimInventOwnerId_RU;
    private str inventDimInventProfileId_RU;
    private str inventDimInventDimension1;
    private str inventDimInventDimension2;
    private str inventDimInventDimension3;
    private str inventDimInventDimension4;
    private str inventDimInventDimension5;
    private str inventDimInventDimension6;
    private str inventDimInventDimension7;
    private str inventDimInventDimension8;
    private str inventDimInventDimension9;
    private str inventDimInventDimension10;
    private str inventDimInventDimension11;
    private str inventDimInventDimension12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFunctions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates functions to upgrade data.
    /// </summary>
    protected boolean createFunctions()
    {
        //If feature flighting is off, skip updating data
        if (!InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            return true;
        }

        return this.updateInventSumWithInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumWithInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>InventSum</c> with inventory dimensions
    /// </summary>
    /// <returns>
    /// True if the data upgrade was successful; otherwise, false.
    /// </returns>
    private boolean updateInventSumWithInventDim()
    {
        if (InventSumInventDimEnable::hasDataUpgradeCompleted())
        {
            return true;
        }

        boolean isSuccessful;

        var logger = InventInstrumentationLogger::createLogger(classStr(InventSumDBUpgradeBuilder));
        var activity = logger.activity(methodStr(InventSumDBUpgradeBuilder, updateInventSumWithInventDim));
        using (var activityContext = logger.activityContext(activity))
        {
            SysSQLStatementText sqlStatementText = this.getUpdateSqlStmt();

            isSuccessful = this.executeSQLStatement(sqlStatementText);

            if (isSuccessful)
            {
                InventSumInventDimEnable::markDataUpgradeComplete();
            }
        }
        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL statement to update data on <c>InventSum</c>.
    /// </summary>
    /// <returns>The SQL statement to update data.</returns>
    /// <remarks>
    /// BEGIN
    ///     UPDATE INVENTSUM
    ///     SET INVENTSUM.CONFIGID = INVENTDIM.CONFIGID,
    ///         INVENTSUM.INVENTSIZEID = INVENTDIM.INVENTSIZEID,
    ///         INVENTSUM.INVENTCOLORID = INVENTDIM.INVENTCOLORID,
    ///         INVENTSUM.INVENTSTYLEID = INVENTDIM.INVENTSTYLEID,
    ///         INVENTSUM.INVENTVERSIONID = INVENTDIM.INVENTVERSIONID,
    ///         INVENTSUM.INVENTSITEID = INVENTDIM.INVENTSITEID,
    ///         INVENTSUM.INVENTLOCATIONID = INVENTDIM.INVENTLOCATIONID,
    ///         INVENTSUM.INVENTBATCHID = INVENTDIM.INVENTBATCHID,
    ///         INVENTSUM.WMSLOCATIONID = INVENTDIM.WMSLOCATIONID,
    ///         INVENTSUM.WMSPALLETID = INVENTDIM.WMSPALLETID,
    ///         INVENTSUM.LICENSEPLATEID = INVENTDIM.LICENSEPLATEID,
    ///         INVENTSUM.INVENTSTATUSID = INVENTDIM.INVENTSTATUSID,
    ///         INVENTSUM.INVENTSERIALID = INVENTDIM.INVENTSERIALID,
    ///         INVENTSUM.INVENTDIMENSION1 = INVENTDIM.INVENTDIMENSION1,
    ///         INVENTSUM.INVENTDIMENSION2 = INVENTDIM.INVENTDIMENSION2,
    ///         INVENTSUM.INVENTDIMENSION3 = INVENTDIM.INVENTDIMENSION3,
    ///         INVENTSUM.INVENTDIMENSION4 = INVENTDIM.INVENTDIMENSION4,
    ///         INVENTSUM.INVENTDIMENSION5 = INVENTDIM.INVENTDIMENSION5,
    ///         INVENTSUM.INVENTDIMENSION6 = INVENTDIM.INVENTDIMENSION6,
    ///         INVENTSUM.INVENTDIMENSION7 = INVENTDIM.INVENTDIMENSION7,
    ///         INVENTSUM.INVENTDIMENSION8 = INVENTDIM.INVENTDIMENSION8,
    ///         INVENTSUM.INVENTDIMENSION9 = INVENTDIM.INVENTDIMENSION9,
    ///         INVENTSUM.INVENTDIMENSION10 = INVENTDIM.INVENTDIMENSION10,
    ///         INVENTSUM.INVENTDIMENSION11 = INVENTDIM.INVENTDIMENSION11,
    ///         INVENTSUM.INVENTDIMENSION12 = INVENTDIM.INVENTDIMENSION12,
    ///         INVENTSUM.INVENTGTDID_RU = INVENTDIM.INVENTGTDID_RU,
    ///         INVENTSUM.INVENTPROFILEID_RU = INVENTDIM.INVENTPROFILEID_RU,
    ///         INVENTSUM.INVENTOWNERID_RU = INVENTDIM.INVENTOWNERID_RU
    ///     FROM INVENTSUM
    ///     JOIN INVENTDIM
    ///         ON INVENTSUM.PARTITION = INVENTDIM.PARTITION
    ///         AND INVENTSUM.DATAAREAID = INVENTDIM.DATAAREAID
    ///         AND INVENTSUM.INVENTDIMID = INVENTDIM.INVENTDIMID
    /// END
    /// </remarks>
    private SysSQLStatementText getUpdateSqlStmt()
    {
        SysSQLStatementText sqlStmt = 'BEGIN';
        sqlStmt += ' UPDATE ' + inventSumTableName + ' SET ';

        if (inventSumInventDimension1 && inventDimInventDimension1)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension1 + ' = ' + inventDimTableName + '.' + inventDimInventDimension1 + ', ';
        }
        if (inventSumInventDimension2 && inventDimInventDimension2)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension2 + ' = ' + inventDimTableName + '.' + inventDimInventDimension2 + ', ';
        }
        if (inventSumInventDimension3 && inventDimInventDimension3)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension3 + ' = ' + inventDimTableName + '.' + inventDimInventDimension3 + ', ';
        }
        if (inventSumInventDimension4 && inventDimInventDimension4)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension4 + ' = ' + inventDimTableName + '.' + inventDimInventDimension4 + ', ';
        }
        if (inventSumInventDimension5 && inventDimInventDimension5)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension5 + ' = ' + inventDimTableName + '.' + inventDimInventDimension5 + ', ';
        }
        if (inventSumInventDimension6 && inventDimInventDimension6)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension6 + ' = ' + inventDimTableName + '.' + inventDimInventDimension6 + ', ';
        }
        if (inventSumInventDimension7 && inventDimInventDimension7)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension7 + ' = ' + inventDimTableName + '.' + inventDimInventDimension7 + ', ';
        }
        if (inventSumInventDimension8 && inventDimInventDimension8)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension8 + ' = ' + inventDimTableName + '.' + inventDimInventDimension8 + ', ';
        }
        if (inventSumInventDimension9 && inventDimInventDimension9)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension9 + ' = ' + inventDimTableName + '.' + inventDimInventDimension9 + ', ';
        }
        if (inventSumInventDimension10 && inventDimInventDimension10)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension10 + ' = ' + inventDimTableName + '.' + inventDimInventDimension10 + ', ';
        }
        if (inventSumInventDimension11 && inventDimInventDimension11)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension11 + ' = ' + inventDimTableName + '.' + inventDimInventDimension11 + ', ';
        }
        if (inventSumInventDimension12 && inventDimInventDimension12)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventDimension12 + ' = ' + inventDimTableName + '.' + inventDimInventDimension12 + ', ';
        }
        if (inventSumInventGtdId_RU && inventDimInventGtdId_RU)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventGtdId_RU + ' = ' + inventDimTableName + '.' + inventDimInventGtdId_RU + ', ';
        }
        if (inventSumInventProfileId_RU && inventDimInventProfileId_RU)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventProfileId_RU + ' = ' + inventDimTableName + '.' + inventDimInventProfileId_RU + ', ';
        }
        if (inventSumInventOwnerId_RU && inventDimInventOwnerId_RU)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventOwnerId_RU + ' = ' + inventDimTableName + '.' + inventDimInventOwnerId_RU + ', ';
        }
        if (inventSumConfigId && inventDimConfigId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumConfigId + ' = ' + inventDimTableName + '.' + inventDimConfigId + ', ';
        }
        if (inventSumInventSizeId && inventDimInventSizeId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventSizeId + ' = ' + inventDimTableName + '.' + inventDimInventSizeId + ', ';
        }
        if (inventSumInventColorId && inventDimInventColorId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventColorId + ' = ' + inventDimTableName + '.' + inventDimInventColorId + ', ';
        }
        if (inventSumInventStyleId && inventDimInventStyleId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventStyleId + ' = ' + inventDimTableName + '.' + inventDimInventStyleId + ', ';
        }
        if (inventSumInventVersionId && inventDimInventVersionId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventVersionId + ' = ' + inventDimTableName + '.' + inventDimInventVersionId + ', ';
        }
        if (inventSumWMSLocationId && inventDimWMSLocationId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumWMSLocationId + ' = ' + inventDimTableName + '.' + inventDimWMSLocationId + ', ';
        }
        if (inventSumWMSPalletId && inventDimWMSPalletId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumWMSPalletId + ' = ' + inventDimTableName + '.' + inventDimWMSPalletId + ', ';
        }
        if (inventSumLicensePlateId && inventDimLicensePlateId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumLicensePlateId + ' = ' + inventDimTableName + '.' + inventDimLicensePlateId + ', ';
        }
        if (inventSumInventStatusId && inventDimInventStatusId)
        {
            sqlStmt += inventSumTableName + '.' + inventSumInventStatusId + ' = ' + inventDimTableName + '.' + inventDimInventStatusId + ', ';
        }
        // The following dimension has the same configurtion key as InventSum - LogisticsBasic
        sqlStmt += inventSumTableName + '.' + inventSumInventSiteId + ' = ' + inventDimTableName + '.' + inventDimInventSiteId + ', ';
        sqlStmt += inventSumTableName + '.' + inventSumInventLocationId + ' = ' + inventDimTableName + '.' + inventDimInventLocationId + ', ';
        sqlStmt += inventSumTableName + '.' + inventSumInventBatchId + ' = ' + inventDimTableName + '.' + inventDimInventBatchId + ', ';
        sqlStmt += inventSumTableName + '.' + inventSumInventSerialId + ' = ' + inventDimTableName + '.' + inventDimInventSerialId + ' ';

        sqlStmt += 'FROM ' + inventSumTableName + ' JOIN ' + inventDimTableName + ' ';
        sqlStmt += 'ON ' + inventSumTableName + '.' + inventSumPartition + ' = ' + inventDimTableName + '.' + inventDimPartition + ' ';
        sqlStmt += 'AND ' + inventSumTableName + '.' + inventSumDataAreaId + ' = ' + inventDimTableName + '.' + inventDimDataAreaId + ' ';
        sqlStmt += 'AND ' + inventSumTableName + '.' + inventSumInventDimId + ' = ' + inventDimTableName + '.' + inventDimInventDimId + ' ';
        sqlStmt += 'END';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = InventSumDBUpgradeBuilder::contruct();

        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>InventSumDBUpgradeBuilder</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>InventSumDBUpgradeBuilder</c> class.</returns>
    public static InventSumDBUpgradeBuilder contruct()
    {
        return new InventSumDBUpgradeBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        SysDictTable inventSumDictTable     = new SysDictTable(tableNum(InventSum));
        inventSumTableName                  = inventSumDictTable.name(DbBackend::Sql);
        inventSumPartition                  = inventSumDictTable.fieldObject(fieldNum(InventSum, Partition)).name(DbBackend::Sql);
        inventSumDataAreaId                 = inventSumDictTable.fieldObject(fieldNum(InventSum, DataAreaId)).name(DbBackend::Sql);
        inventSumInventDimId                = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimId)).name(DbBackend::Sql);
        inventSumRecId                      = inventSumDictTable.fieldObject(fieldNum(InventSum, RecId)).name(DbBackend::Sql);
        inventSumConfigId                   = inventSumDictTable.fieldObject(fieldNum(InventSum, Configid)).name(DbBackend::Sql);
        inventSumInventBatchId              = inventSumDictTable.fieldObject(fieldNum(InventSum, InventBatchId)).name(DbBackend::Sql);
        inventSumInventColorId              = inventSumDictTable.fieldObject(fieldNum(InventSum, InventColorId)).name(DbBackend::Sql);
        inventSumInventLocationId           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventLocationId)).name(DbBackend::Sql);
        inventSumInventSerialId             = inventSumDictTable.fieldObject(fieldNum(InventSum, InventSerialId)).name(DbBackend::Sql);
        inventSumInventSiteId               = inventSumDictTable.fieldObject(fieldNum(InventSum, InventSiteId)).name(DbBackend::Sql);
        inventSumInventSizeId               = inventSumDictTable.fieldObject(fieldNum(InventSum, InventSizeId)).name(DbBackend::Sql);
        inventSumInventStatusId             = inventSumDictTable.fieldObject(fieldNum(InventSum, InventStatusId)).name(DbBackend::Sql);
        inventSumInventStyleId              = inventSumDictTable.fieldObject(fieldNum(InventSum, InventStyleId)).name(DbBackend::Sql);
        inventSumInventVersionId            = inventSumDictTable.fieldObject(fieldNum(InventSum, InventVersionId)).name(DbBackend::Sql);
        inventSumLicensePlateId             = inventSumDictTable.fieldObject(fieldNum(InventSum, LicensePlateId)).name(DbBackend::Sql);
        inventSumWMSLocationId              = inventSumDictTable.fieldObject(fieldNum(InventSum, wMSLocationId)).name(DbBackend::Sql);
        inventSumWMSPalletId                = inventSumDictTable.fieldObject(fieldNum(InventSum, wMSPalletId)).name(DbBackend::Sql);
        inventSumInventGtdId_RU             = inventSumDictTable.fieldObject(fieldNum(InventSum, InventGtdId_RU)).name(DbBackend::Sql);
        inventSumInventOwnerId_RU           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventOwnerId_RU)).name(DbBackend::Sql);
        inventSumInventProfileId_RU         = inventSumDictTable.fieldObject(fieldNum(InventSum, InventProfileId_RU)).name(DbBackend::Sql);
        inventSumInventDimension1           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension1)).name(DbBackend::Sql);
        inventSumInventDimension2           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension2)).name(DbBackend::Sql);
        inventSumInventDimension3           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension3)).name(DbBackend::Sql);
        inventSumInventDimension4           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension4)).name(DbBackend::Sql);
        inventSumInventDimension5           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension5)).name(DbBackend::Sql);
        inventSumInventDimension6           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension6)).name(DbBackend::Sql);
        inventSumInventDimension7           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension7)).name(DbBackend::Sql);
        inventSumInventDimension8           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension8)).name(DbBackend::Sql);
        inventSumInventDimension9           = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension9)).name(DbBackend::Sql);
        inventSumInventDimension10          = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension10)).name(DbBackend::Sql);
        inventSumInventDimension11          = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension11)).name(DbBackend::Sql);
        inventSumInventDimension12          = inventSumDictTable.fieldObject(fieldNum(InventSum, InventDimension12)).name(DbBackend::Sql);

        SysDictTable inventDimDictTable     = new SysDictTable(tableNum(InventDim));
        inventDimTableName                  = inventDimDictTable.name(DbBackend::Sql);
        inventDimPartition                  = inventDimDictTable.fieldObject(fieldNum(InventDim, Partition)).name(DbBackend::Sql);
        inventDimDataAreaId                 = inventDimDictTable.fieldObject(fieldNum(InventDim, DataAreaId)).name(DbBackend::Sql);
        inventDimInventDimId                = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimId)).name(DbBackend::Sql);
        inventDimConfigId                   = inventDimDictTable.fieldObject(fieldNum(InventDim, Configid)).name(DbBackend::Sql);
        inventDimInventBatchId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventBatchId)).name(DbBackend::Sql);
        inventDimInventColorId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventColorId)).name(DbBackend::Sql);
        inventDimInventLocationId           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventLocationId)).name(DbBackend::Sql);
        inventDimInventSerialId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSerialId)).name(DbBackend::Sql);
        inventDimInventSiteId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSiteId)).name(DbBackend::Sql);
        inventDimInventSizeId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSizeId)).name(DbBackend::Sql);
        inventDimInventStatusId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStatusId)).name(DbBackend::Sql);
        inventDimInventStyleId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStyleId)).name(DbBackend::Sql);
        inventDimInventVersionId            = inventDimDictTable.fieldObject(fieldNum(InventDim, InventVersionId)).name(DbBackend::Sql);
        inventDimLicensePlateId             = inventDimDictTable.fieldObject(fieldNum(InventDim, LicensePlateId)).name(DbBackend::Sql);
        inventDimWMSLocationId              = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSLocationId)).name(DbBackend::Sql);
        inventDimWMSPalletId                = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSPalletId)).name(DbBackend::Sql);
        inventDimInventGtdId_RU             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventGtdId_RU)).name(DbBackend::Sql);
        inventDimInventOwnerId_RU           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventOwnerId_RU)).name(DbBackend::Sql);
        inventDimInventProfileId_RU         = inventDimDictTable.fieldObject(fieldNum(InventDim, InventProfileId_RU)).name(DbBackend::Sql);
        inventDimInventDimension1           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension1)).name(DbBackend::Sql);
        inventDimInventDimension2           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension2)).name(DbBackend::Sql);
        inventDimInventDimension3           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension3)).name(DbBackend::Sql);
        inventDimInventDimension4           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension4)).name(DbBackend::Sql);
        inventDimInventDimension5           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension5)).name(DbBackend::Sql);
        inventDimInventDimension6           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension6)).name(DbBackend::Sql);
        inventDimInventDimension7           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension7)).name(DbBackend::Sql);
        inventDimInventDimension8           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension8)).name(DbBackend::Sql);
        inventDimInventDimension9           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension9)).name(DbBackend::Sql);
        inventDimInventDimension10          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension10)).name(DbBackend::Sql);
        inventDimInventDimension11          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension11)).name(DbBackend::Sql);
        inventDimInventDimension12          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension12)).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>