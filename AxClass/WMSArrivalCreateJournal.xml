<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsArrivalCreateJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSArrivalCreateJournal</c> class is used to create arrival journals based on
/// <c>WMSArrivalDetailTmp</c> records.
/// </summary>
class WmsArrivalCreateJournal
{
    WMSJournalNameId        wmsJournalNameId;
    InventSiteId            inventSiteId;
    InventLocationId        inventLocationId;
    WMSLocationId           wmsLocationId;

    WMSJournalTable         wmsJournalTable;
    WMSJournalId            createdJournalId;
    Counter                 numberOfLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWMSJournalFromTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>wmsJournalTable</c> record.
    /// </summary>
    /// <param name="_wmsArrivalDetailTmp">
    /// A <c>WMSArrivalDetailTmp</c> record.
    /// </param>
    private void createWMSJournalFromTmp(WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        boolean                 singleOrder  = true;
        boolean                 singleVend   = true;
        boolean                 singleType   = true;
        boolean                 singleRMANum = true;
        boolean                 first        = true;
        DirPartyRecId           party;
        InventTransRefId        refrenceId;
        InventTransType         referenceCategory;
        ReturnItemNum           returnItemNum;

        WMSArrivalDetailTmp     wmsArrivalDetailTmpLocal;
        wmsArrivalDetailTmpLocal.setTmpData(_wmsArrivalDetailTmp);
        while select InventTransId, ReturnItemNum from wmsArrivalDetailTmpLocal
            group by InventTransId
            where wmsArrivalDetailTmpLocal.Selected == NoYes::Yes
        {
            if (wmsArrivalDetailTmpLocal.ReturnItemNum)
            {
                SalesLine::changeReturnOrderType(wmsArrivalDetailTmpLocal.InventTransId);
            }

            InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(wmsArrivalDetailTmpLocal.InventTransId);
            if (first)
            {
                first             = false;
                refrenceId        = inventTransOrigin.ReferenceId;
                referenceCategory = inventTransOrigin.ReferenceCategory;
                party             = inventTransOrigin.Party;
                returnItemNum     = wmsArrivalDetailTmpLocal.ReturnItemNum;
            }
            else
            {
                if (singleType)
                {
                    if (referenceCategory != inventTransOrigin.ReferenceCategory)
                    {
                        singleType = false;
                        singleOrder = false;
                    }
                }

                if (singleVend)
                {
                    if (party != inventTransOrigin.Party)
                    {
                        singleVend = false;
                        singleOrder = false;
                    }
                }

                if (singleOrder)
                {
                    if (refrenceId != inventTransOrigin.ReferenceId)
                    {
                        singleOrder = false;
                    }
                }

                if (singleRMANum)
                {
                    if (returnItemNum != wmsArrivalDetailTmpLocal.ReturnItemNum)
                    {
                        singleRMANum = false;
                    }
                }

                refrenceId        = inventTransOrigin.ReferenceId;
                referenceCategory = inventTransOrigin.ReferenceCategory;
                party             = inventTransOrigin.Party;
                returnItemNum     = wmsArrivalDetailTmpLocal.ReturnItemNum;
            }
        }

        InventDim inventDim;
        inventDim.InventLocationId  = inventLocationId;
        inventDim.wmsLocationId     = wmsLocationId;
        if (inventSiteId)
        {
            inventDim.InventSiteId      = inventSiteId;
        }
        else
        {
            inventDim.initFromInventLocation(inventDim.inventLocation());
        }
        
        InventTransType     inventTransType     = (singleType) ? referenceCategory : InventTransType::Purch;
        VendAccount         vendAccount         = (singleVend) ? VendTable::findByPartyRecId(party).AccountNum : '';
        InventTransRefId    inventTransRefId    = (singleOrder) ? refrenceId : '';
        ReturnItemNum       returnItem          = (singleRMANum) ? returnItemNum : '';

        this.initWMSJournalFromTmp(inventDim, inventTransType, vendAccount, inventTransRefId, returnItemNum);
        
        if (!wmsJournalTable.validateWrite())
        {
            throw error("@SCM:WMSJournalTableCannotBeCreated");
        }
            
        wmsJournalTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSJournalFromTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>WMSJournalTable</c> record.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record used to initialize the <c>WMSJournalTable</c> record.</param>
    /// <param name = "_inventTransType">An <c>InventTransType</c> value used to initialize the <c>WMSJournalTable</c> record.</param>
    /// <param name = "_vendAccount">A <c>VendAccount</c> value used to initialize the <c>WMSJournalTable</c> record.</param>
    /// <param name = "_inventTransRefId">An <c>InventTransRefId</c> value used to initialize the <c>WMSJournalTable</c> record.</param>
    /// <param name = "_returnItemNum">A <c>ReturnItemNum</c> value used to initialize the <c>WMSJournalTable</c> record.</param>
    protected void initWMSJournalFromTmp(
        InventDim           _inventDim,
        InventTransType     _inventTransType,
        VendAccount         _vendAccount,
        InventTransRefId    _inventTransRefId,
        ReturnItemNum       _returnItemNum)
    {
        wmsJournalTable.initFromWMSJournalName(WMSJournalName::find(wmsJournalNameId));
        wmsJournalTable.InventTransType = _inventTransType;

        if (wmsJournalTable.InventTransType == InventTransType::Purch)
        {
            wmsJournalTable.VendAccount     = _vendAccount;
        }
        else
        {
            wmsJournalTable.VendAccount     = '';
        }

        wmsJournalTable.InventTransRefId    = _inventTransRefId;
        wmsJournalTable.ReturnItemNum       = _returnItemNum;
        wmsJournalTable.InventDimId         = InventDim::findOrCreate(_inventDim).InventDimId;
        wmsJournalTable.JournalId           = JournalTableData::newTable(wmsJournalTable).nextJournalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an arrival journal based on the <c>WMSArrivalDetailTmp</c> record.
    /// </summary>
    /// <param name="_wmsArrivalDetailTmp">
    /// A <c>WMSArrivalDetailTmp</c> record that is used to create the journal data.
    /// </param>
    /// <remarks>
    /// A <c>WMSJournalTable</c> record will be created when it does not already exist. The <c>finish</c>
    /// method will be called to update the <c>WMSJournalTable</c> record with information from the lines
    /// when all the lines have been added.
    /// </remarks>
    public void createWMSJournalTrans(WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        if (!this.canCreateJournalTransFromArrivalDetail(_wmsArrivalDetailTmp))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!wmsJournalNameId)
        {
            throw(error("@SYS63354"));
        }

        if (_wmsArrivalDetailTmp.DirectRegistration)
        {
            throw error("@SYS313986");
        }

        ttsbegin;

        if (!wmsJournalTable.RecId)
        {
            this.createWMSJournalFromTmp(_wmsArrivalDetailTmp);
        }

        if (_wmsArrivalDetailTmp.ReturnItemNum)
        {
            select firstOnly DateStatus from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         ==  inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == _wmsArrivalDetailTmp.InventTransId
                       && !inventTrans.PackingSlipReturned;

            _wmsArrivalDetailTmp.DateStatus = inventTrans.DateStatus;
        }

        numberOfLines += this.createWMSJournalTransFromArrivalDetails(_wmsArrivalDetailTmp);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalTransFromArrivalDetail</Name>
				<Source><![CDATA[
    protected boolean canCreateJournalTransFromArrivalDetail(WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        return _wmsArrivalDetailTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateWMSJournalTransFromTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether the <c>WMSJournalTrans</c> that is initialized from the <c>WMSArrivalDetailTmp</c> record, must be created.
    /// </summary>
    /// <param name = "_wmsArrivalDetailTmp">A <c>WMSArrivalDetailTmp</c> record.</param>
    /// <returns>true if the <c>WMSJournalTrans</c> must be created; otherwise, false.</returns>
    [Replaceable]
    protected boolean mustCreateWMSJournalTransFromTmp(WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSJournalTransFromArrivalDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>WMSJournalTrans</c> records based on a <c>WMSArrivalDetailTmp</c> record.
    /// </summary>
    /// <param name="_wmsArrivalDetailTmp">
    /// A <c>WMSArrivalDetailTmp</c> record that is used for creating <c>WMSJournalTrans</c> records.
    /// </param>
    /// <returns>
    /// The number of <c>WMSJournalTrans</c> records that was created.
    /// </returns>
    protected int createWMSJournalTransFromArrivalDetails(WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        int numOfLines = 0;

        if (!this.mustCreateWMSJournalTransFromTmp(_wmsArrivalDetailTmp))
        {
            return numOfLines;
        }

        InventTransOriginId             inventTransOriginId     = InventTransOrigin::findByInventTransId(_wmsArrivalDetailTmp.InventTransId).RecId;
        WMSParameters                   wmsParameters = WMSParameters::find();
        InventTransIdSum                inventTransIdSum = InventTransIdSum::newTransOriginId(inventTransOriginId);
        InventQty                       orderedQty   = inventTransIdSum.ordered();
        PdsCWInventQty                  cwOrderedQty = inventTransIdSum.pdsCWOrdered();
        InventQty                       inProgress;
        PdsCWInProgressQty              cwInProgress;

        [inProgress, cwInProgress] = WMSJournalTable::pdsReceiptQtyInProgress(_wmsArrivalDetailTmp.InventTransId);

        InventQty      maxQty = _wmsArrivalDetailTmp.InventQty;
        PdsCWInventQty cwMaxQty = _wmsArrivalDetailTmp.PdsCWQty;

        if (cwMaxQty > cwOrderedQty - cwInProgress)
        {
            if (cwOrderedQty > cwInProgress)
            {
                warning(strFmt("@SYS104231",
                _wmsArrivalDetailTmp.ItemId, _wmsArrivalDetailTmp.InventTransType, _wmsArrivalDetailTmp.InventTransRefId),
                '', SysInfoAction_TableField::newBuffer(WMSJournalTable::find(WMSJournalTable::latestArrivalJournal(_wmsArrivalDetailTmp.InventTransId, wmsJournalTable.JournalId))));
            }
            else
            {
                warning(strFmt("@SYS104232",
                _wmsArrivalDetailTmp.ItemId, _wmsArrivalDetailTmp.InventTransType, _wmsArrivalDetailTmp.InventTransRefId),
                '', SysInfoAction_TableField::newBuffer(WMSJournalTable::find(WMSJournalTable::latestArrivalJournal(_wmsArrivalDetailTmp.InventTransId, wmsJournalTable.JournalId))));
            }
            maxQty  = orderedQty - inProgress;
            cwMaxQty = _wmsArrivalDetailTmp.PdsCWQty - cwInProgress;
        }

        if (maxQty > orderedQty - inProgress)
        {
            if (orderedQty > inProgress)
            {
                warning(strFmt("@SYS104231",
                _wmsArrivalDetailTmp.ItemId, _wmsArrivalDetailTmp.InventTransType, _wmsArrivalDetailTmp.InventTransRefId),
                '', SysInfoAction_TableField::newBuffer(WMSJournalTable::find(WMSJournalTable::latestArrivalJournal(_wmsArrivalDetailTmp.InventTransId, wmsJournalTable.JournalId))));
            }
            else
            {
                warning(strFmt("@SYS104232",
                _wmsArrivalDetailTmp.ItemId, _wmsArrivalDetailTmp.InventTransType, _wmsArrivalDetailTmp.InventTransRefId),
                '', SysInfoAction_TableField::newBuffer(WMSJournalTable::find(WMSJournalTable::latestArrivalJournal(_wmsArrivalDetailTmp.InventTransId, wmsJournalTable.JournalId))));
            }
            maxQty = orderedQty - inProgress;
            cwMaxQty = cwOrderedQty - cwInProgress;
        }

        WMSJournalTrans wmsJournalTrans;
        //initFromWMSJournalTable method uses ItemId field so we need to initialize it here
        wmsJournalTrans.ItemId                 = _wmsArrivalDetailTmp.ItemId;
        wmsJournalTrans.initFromWMSJournalTable(wmsJournalTable);

        wmsJournalTrans.initFromWMSArrivalDetailTmp(_wmsArrivalDetailTmp);

        if (wmsJournalTrans.InventTransRefId)
        {
            switch (wmsJournalTrans.InventTransType)
            {
                case InventTransType::Purch :
                    wmsJournalTrans.VendAccount = PurchTable::find(wmsJournalTrans.InventTransRefId).OrderAccount;
                    break;
                case InventTransType::Sales :
                    wmsJournalTrans.VendAccount = SalesTable::find(wmsJournalTrans.InventTransRefId).CustAccount;
                    break;
            }
        }

        InventTable                         inventTable = InventTable::find(wmsJournalTrans.ItemId);
        InventDimGroupFieldSetupEnumerator  enumerator = InventDimGroupSetup::newInventTable(inventTable).getFieldSetupEnumerator();
        boolean                             inventLocationIdActive;
        boolean                             wmsLocationIdActive;
        InventDim                           inventDimTrans;
        InventTransOrigin                   inventTransOrigin;
        InventTrans                         inventTrans;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        FieldId                             inventDimFieldId;

        while select ReferenceCategory, InventTransId, RecId from inventTransOrigin
        group by ReferenceCategory,InventTransId,RecId
        where inventTransOrigin.RecId           == inventTransOriginId
        join sum(Qty),sum(PdsCWQty),ItemId,InventDimId from inventTrans
            group by ItemId,InventDimId
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                && inventTrans.StatusIssue           == StatusIssue::None
                && inventTrans.StatusReceipt         == StatusReceipt::Ordered
                && inventTrans.DateStatus            == _wmsArrivalDetailTmp.DateStatus
            exists join inventDimTrans
                where inventDimTrans.InventDimId        == inventTrans.InventDimId
                    && inventDimTrans.InventSiteId       == _wmsArrivalDetailTmp.InventSiteId
                    && inventDimTrans.InventLocationId   == _wmsArrivalDetailTmp.InventLocationId
        {
            if (inventTrans.Qty > maxQty)
            {
                inventTrans.Qty = maxQty;
            }
            maxQty -= inventTrans.Qty;

            if (inventTrans.PdsCWQty > cwMaxQty)
            {
                inventTrans.PdsCWQty = cwMaxQty;
            }
            cwMaxQty -= inventTrans.PdsCWQty;
            
            this.initWMSJournalTransFromInventTrans(wmsJournalTrans, inventTrans, inventTransOrigin);
            
            inventLocationIdActive  = true;
            wmsLocationIdActive     = true;

            enumerator.reset();
            while (enumerator.moveNext())
            {
                inventDimGroupFieldSetup = enumerator.current();

                if (!inventDimGroupFieldSetup.isActive())
                {
                    inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
                    switch (inventDimFieldId)
                    {
                        case fieldNum(InventDim, wmsPalletId):
                            wmsJournalTrans.CheckBufferLocation    = NoYes::No;
                            wmsJournalTrans.PalletTransports       = NoYes::No;
                            break;
                        case fieldNum(InventDim, InventLocationId):
                            inventLocationIdActive  = false;
                            break;
                        case fieldNum(InventDim, wmsLocationId):
                            wmsJournalTrans.CheckPickingLocation    = NoYes::No;
                            wmsLocationIdActive  = false;
                            break;
                    }
                }
            }

            InventDim inventDim = inventTrans.inventDim();

            if (inventTransOrigin.ReferenceCategory == InventTransType::QuarantineOrder)
            {
                InventQuarantineOrder inventQuarantineOrder = InventTransOriginQuarantineOrder::inventQuarantineOrder(inventTransOrigin.RecId);

                if (inventQuarantineOrder.Status == InventQuarantineStatus::ReportedFinished)
                {
                    InventDim inventDimMovement = InventDim::find(inventQuarantineOrder.InventDimIdQuarantine);

                    if (inventLocationIdActive)
                    {
                        inventDim.InventLocationId = inventDimMovement.InventLocationId;
                    }

                    if (wmsLocationIdActive)
                    {
                        inventDim.wmsLocationId = inventDimMovement.wmsLocationId;
                    }

                    if (inventLocationIdActive || wmsLocationIdActive)
                    {
                        if (!WMSLocation::exist(inventDim.wmsLocationId, inventDim.InventLocationId))
                        {
                            inventDim.wmsLocationId = '';
                        }

                        inventDim = InventDim::findOrCreate(inventDim);
                    }
                }
            }

            if (wmsJournalTrans.CheckBufferLocation || wmsJournalTrans.PalletTransports || wmsJournalTrans.CheckPickingLocation || inventLocationId || wmsLocationId)
            {
                if (!(inventTransOrigin.ReferenceCategory == InventTransType::QuarantineOrder && // If not moving back from quarantine warehouse
                inventLocationId &&
                InventLocation::find(inventLocationId).InventLocationType == InventLocationType::Quarantine))
                {
                    if (inventLocationIdActive && inventLocationId)
                    {
                        inventDim.InventLocationId  = inventLocationId;
                        inventDim.initFromInventLocation(inventDim.inventLocation());
                    }
                    if (wmsLocationIdActive && wmsLocationId)
                    {
                        inventDim.wmsLocationId     = wmsLocationId;

                        inventDim.clearLicensePlateIfInvalid();
                    }
                    if (inventLocationIdActive || wmsLocationIdActive)
                    {
                        inventDim = InventDim::findOrCreate(inventDim);
                    }
                }
            }

            wmsJournalTrans.InventDimId             = inventDim.InventDimId;
            
            if (wmsJournalTrans.Qty > 0 && (wmsJournalTrans.PdsCWQty > 0 || !PdsGlobal::pdsIsCWItem(_wmsArrivalDetailTmp.ItemId)))
            {
                if (wmsJournalTrans.LineNum)
                {
                    wmsJournalTrans.LineNum += 1;
                }

                wmsJournalTrans.updateWarehouseForQuarantine();

                this.insertWMSJournalTrans(wmsJournalTrans, _wmsArrivalDetailTmp);
                
                numOfLines++;
            }
            
            if (!maxQty && (!cwMaxQty || !PdsGlobal::pdsIsCWItem(_wmsArrivalDetailTmp.ItemId)))
            {
                break;
            }
        }
        
        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWMSJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the location journal line record if valid.
    /// </summary>
    /// <param name = "_wmsJournalTrans">
    /// The <c>WMSJournalTrans</c> record.
    /// </param>
    /// <param name = "_wmsArrivalDetailTmp">
    /// The <c>WMSArrivalDetailTmp</c> record.
    /// </param>
    protected void insertWMSJournalTrans(WMSJournalTrans _wmsJournalTrans, WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        if (!_wmsJournalTrans.validateWrite())
        {
            throw error ("@SCM:WMSJournalTransCannotBeCreated");
        }
        _wmsJournalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSJournalTransFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>WMSJournalTrans</c> record based on the passed arguments.
    /// </summary>
    /// <param name = "_wmsJournalTrans">
    /// The <c>WMSJournalTrans</c> record.
    /// </param>
    /// <param name = "_inventTrans">
    /// A <c>InventTrans</c> record.
    /// </param>
    /// <param name = "_inventTransOrigin">
    /// A <c>InventTransOrigin</c> record.
    /// </param>
    //This is an extension point to control the initialization of <c>WMSJournalTrans</c> record.
    protected void initWMSJournalTransFromInventTrans(WMSJournalTrans _wmsJournalTrans, InventTrans _inventTrans, InventTransOrigin _inventTransOrigin)
    {
        _wmsJournalTrans.Qty = _inventTrans.Qty;
        _wmsJournalTrans.PdsCWQty = _inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes the journal creation.
    /// </summary>
    /// <returns>
    /// The <c>WMSJournalId</c> parameter after a <c>wmsJournalTable</c> record is created.
    /// </returns>
    /// <remarks>
    /// This method is called after you have finished adding journal lines.
    /// </remarks>
    public WMSJournalId finish()
    {
        if (wmsJournalTable.RecId)
        {
            if (!numberOfLines)
            {
                throw(error("@SYS104230"));
            }

            wmsJournalTable.NumOfLines = numberOfLines;
            wmsJournalTable.update();
            info(strFmt("@SYS58788", wmsJournalTable.JournalId),
                 '', SysInfoAction_TableField::newBuffer(wmsJournalTable));
        }

        return wmsJournalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsJournalNameId</Name>
				<Source><![CDATA[
    public WMSJournalNameId parmWmsJournalNameId(WMSJournalNameId _wmsJournalNameId = wmsJournalNameId)
    {
        wmsJournalNameId = _wmsJournalNameId;
        return wmsJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmWmsLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;
        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSArrivalCreateJournal construct()
    {
        return new WMSArrivalCreateJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSArrivalCreateJournal</c> class that is based on parameters.
    /// </summary>
    /// <param name="_wmsJournalNameId">
    /// A <c>journalname</c> record ID that is used to create arrival journals.
    /// </param>
    /// <param name="_inventLocationId">
    /// An <c>InventLocationId</c> record ID that is used to create arrival journals.
    /// </param>
    /// <param name="_inventSiteId">
    /// An <c>InventSiteId</c> record ID that is used to create arrival journals.
    /// </param>
    /// <param name="_wmsLocationId">
    /// A <c>WMSLocationId</c> record ID that is used to create arrival journals.
    /// </param>
    /// <returns>
    /// An instance of the <c>WMSArrivalCreateJournal</c> class.
    /// </returns>
    static public WMSArrivalCreateJournal newFromParameters(
        WMSJournalNameId    _wmsJournalNameId,
        InventLocationId    _inventLocationId,
        InventSiteId        _inventSiteId,
        WMSLocationId       _wmsLocationId)
    {
        WMSArrivalCreateJournal wmsArrivalCreateJournal = WMSArrivalCreateJournal::construct();

        wmsArrivalCreateJournal.parmWmsJournalNameId(_wmsJournalNameId);
        wmsArrivalCreateJournal.parmInventSiteId(_inventSiteId);
        wmsArrivalCreateJournal.parmInventLocationId(_inventLocationId);
        wmsArrivalCreateJournal.parmWmsLocationId(_wmsLocationId);

        return wmsArrivalCreateJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>