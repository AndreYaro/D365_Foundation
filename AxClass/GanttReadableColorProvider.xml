<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttReadableColorProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides methods for calculating an appropriate foreground 
/// color for text so that the readability of the text is maximized over a 
/// given background.
/// 
/// The implementation follows the W3C WCAG20 guidelines on accessibility and
/// results in text that has a contrast ration of at least 4.5 with respect to
/// the background.
/// </summary>
internal class GanttReadableColorProvider
{
    // W3C-defined constants. See https://www.w3.org/TR/WCAG20/ to see where they come from.
    private const real W3C_contrastRatioAddedConstant = 0.05;
    private const real W3C_luminanceRedScale =  0.2126;
    private const real W3C_luminanceGreenScale =  0.7152;
    private const real W3C_luminanceBlueScale =  0.0722;
    private const real W3C_sRGBLinearThreshold = 0.03928;
    private const real W3C_sRGBLinearScale = 12.92;
    private const real W3C_sRGBOffset = 0.055;
    private const real W3C_sRGBGamma = 2.4;
    private const real colorByteMaxValue = 255;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReadableTextColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a color that maximizes the readability of text over the specified background.
    /// </summary>
    /// <param name = "_backgroundColorId">The color id of the background over which the text will be placed.</param>
    /// <returns>The color id of the text that maximizes the readability over the specified background.</returns>
    [Hookable(false)]
    internal static int getReadableTextColor(int _backgroundColorId)
    {
        // Here we follow the W3C recommendations https://www.w3.org/TR/WCAG20/ (see glossary - "contrast ratio")
        // to select either black and white so that we have the best contrast wrt the background.

        real backgroundLuminance = GanttReadableColorProvider::getColorLuminance(_backgroundColorId);
        const real blackLuminance = 0;
        const real whiteLuminance = 1;
        
        // Compare the contrast of black wrt the contrast of white, and choose the largest one.
        real blackContrast = (backgroundLuminance + W3C_contrastRatioAddedConstant) / 
                             (blackLuminance      + W3C_contrastRatioAddedConstant);

        real whiteContrast = (whiteLuminance      + W3C_contrastRatioAddedConstant) / 
                             (backgroundLuminance + W3C_contrastRatioAddedConstant);

        if (blackContrast > whiteContrast)
        {
            return WinAPI::RGB2int(0, 0, 0); // black
        }
        else
        {
            return WinAPI::RGB2int(255, 255, 255); // white
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColorLuminance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the luminance of the specified color id as calculated in the W3C WCAG20 guidelines
    /// </summary>
    /// <param name = "_colorId">Color id for which to calculate the luminance</param>
    /// <returns>The luminance of the color (a real between 0 and 1)</returns>
    [Hookable(false)]
    internal static real getColorLuminance(int _colorId)
    {
        // Get the RGB components as 8 bit values (0..255) .
        int r8bit, g8bit, b8bit;
        [r8bit, g8bit, b8bit] = WinAPI::RGBint2Con(_colorId);

        // Translate the color to sRGB color space.
        real r, g, b;
        r = GanttReadableColorProvider::transformColorChannelFrom8bitTosRGB(r8bit);
        g = GanttReadableColorProvider::transformColorChannelFrom8bitTosRGB(g8bit);
        b = GanttReadableColorProvider::transformColorChannelFrom8bitTosRGB(b8bit);

        // calculate the luminance according to W3C formula https://www.w3.org/TR/WCAG20/ (see glossary - "relative luminance")
        // The constants are given by the formula, which take into account the different perception of brightness of the eye for the different channels.
        return W3C_luminanceRedScale * r + W3C_luminanceGreenScale * g + W3C_luminanceBlueScale * b;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformColorChannelFrom8bitTosRGB</Name>
				<Source><![CDATA[
    // Utility function for getColorLuminance
    private static real transformColorChannelFrom8bitTosRGB(int _channel8bitValue)
    {
        // This formula (and the constants are given in the W3C accessibility reccomendations
        // https://www.w3.org/TR/WCAG20/ (see glossary - "relative luminance")
        real sRGB = _channel8bitValue / colorByteMaxValue;
        if(sRGB <= W3C_sRGBLinearThreshold)
        {
            return sRGB / W3C_sRGBLinearScale;
        }
        else
        {
            return power(((sRGB + W3C_sRGBOffset) / (W3C_sRGBOffset + 1)), W3C_sRGBGamma);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>