<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTaskControllerInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// ReqCalcTaskController instrumentation activities.
/// </summary>
internal final class ReqCalcTaskControllerInstrumentationActivities
{
    public const str ReqCalcTaskControllerPrefix = 'CalcTaskController.';

    public const str DeleteAllTasks = 'DeleteAllTasks';
    public const str ResetAssignedNotCompletedBundles = 'ResetAssignedNotCompletedBundles';
    public const str ResetAssignedNotCompletedBundlesProcessThread = 'ResetAssignedNotCompletedBundlesProcessThread';
    public const str TaskBundleCleanupProcess = 'TaskBundleCleanupProcess';
    public const str DetectAndResetOrphanTasksBundles = 'DetectAndResetOrphanTasksBundles';
    public const str AssignBundlePeriodic = 'AssignBundlePeriodic';
    public const str SetBundleAsProcessing = 'SetBundleAsProcessing';

    // ReqProcessThreadList parameters
    public const str ParmReqProcessThreadListRecId = "ReqProcessThreadListRecId";
    public const str ParmInfoMessage = "InfoMessage";
    public const str ParmProcessId = "ProcessId";
    public const str ParmThreadId = "ThreadId";
    public const str ParmBatchTaskRecId = "BatchTaskRecId";

    // AssignBundlePeriodic parameters
    public const str FoundBundle = "FoundBundle";
    public const str MoreTasks = "MoreTasks";

    // setBundleAsRunning parameters
    public const str ReqProcessStatus = "ReqProcessStatus";
    public const str BOMLevel = "BOMLevel";
    public const str ReqLevelState = "ReqLevelState";

    private ReqInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ReqInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static ReqCalcTaskControllerInstrumentationActivities newFromLogger(ReqInstrumentationLogger _logger)
    {
        return new ReqCalcTaskControllerInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllTasks</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext deleteAllTasks()
    {
        return this.createActivityContext(DeleteAllTasks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAssignedNotCompletedBundles</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resetAssignedNotCompletedBundles()
    {
        return this.createActivityContext(ResetAssignedNotCompletedBundles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAssignedNotCompletedBundlesProcessThread</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resetAssignedNotCompletedBundlesProcessThread()
    {
        return this.createActivityContext(ResetAssignedNotCompletedBundlesProcessThread);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskBundleCleanupProcess</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext taskBundleCleanupProcess()
    {
        return this.createActivityContext(TaskBundleCleanupProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectAndResetOrphanTasksBundles</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext detectAndResetOrphanTasksBundles()
    {
        return this.createActivityContext(DetectAndResetOrphanTasksBundles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignBundlePeriodic</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext assignBundlePeriodic(ReqProcessId _processId, ReqProcessThreadId _threadId)
    {
        SysInstrumentationActivityContext activityContext = this.createActivityContext(AssignBundlePeriodic);

        activityContext.addCustomProperty(ParmProcessId, any2Str(_processId));
        activityContext.addCustomProperty(ParmThreadId, any2Str(_threadId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBundleAsRunning</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext setBundleAsRunning(
        ReqProcessId _processId,
        ReqProcessThreadId _threadId,
        ReqProcessStatus _status,
        BOMLevel _level,
        ReqLevelState _levelState)
    {
        SysInstrumentationActivityContext activityContext = this.createActivityContext(SetBundleAsProcessing);

        activityContext.addCustomProperty(ParmProcessId, any2Str(_processId));
        activityContext.addCustomProperty(ParmThreadId, any2Str(_threadId));
        activityContext.addCustomProperty(ReqProcessStatus, enum2Symbol(enumNum(ReqProcessStatus), _status));
        activityContext.addCustomProperty(BOMLevel, any2Str(_level));
        activityContext.addCustomProperty(ReqLevelState, enum2Symbol(enumNum(ReqLevelState), _levelState));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext createActivityContext(str _activityName)
    {
        SysInstrumentationActivity activity = logger.activity(ReqCalcTaskControllerPrefix + _activityName);
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>