<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrMarginAlert</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRMarginAlert</c> class handles calculation of margins, and
/// displays appropriate alerts.
/// </summary>
abstract class McrMarginAlert
{
    MCRMarginAlertMap   mcrMarginAlertMap;
    
    // Variables to prevent finding multiple times
    InventTable         inventTable;
    UnitOfMeasureSymbol inventUnitId;

    // Not calculated, must be set by caller
    AmountCur           totalVendorRebate;

    // Publicly accessible results
    MCRMarginPecentStr  mcrMarginPercentStr;
    Percent             marginPercent;
    PriceCur            extendedUnitPrice;
    PriceCur            extendedUnitDiscount;
    PriceCur            marginPrice;
    PriceCur            estimatedSalesPrice;
    CostPrice           costPricePcs;

    // Publicly accessible per unit amounts
    AmountCur           brokerAmountPerUnit;
    AmountCur           custRebateAmountPerUnit;
    AmountCur           vendRebateAmountPerUnit;
    AmountCur           royaltyAmountPerUnit;

    private MCRMarginInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCostPricePcs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost price for an item in pieces.
    /// </summary>
    /// <param name="_isRound">
    /// Whether the cost price should be rounded or not.
    /// </param>
    /// <returns>
    /// The cost price of an item in pieces.
    /// </returns>
    protected CostPrice calcCostPricePcs(boolean _isRound = true)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcCostPricePcs())
        {
            CostPrice           costPricePcsLocal;
            InventDimParm       inventDimParmFinancial, inventDimParmActive;
            InventOnhand        inventOnhand;
            ItemId              itemId = this.parmItemId();
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(itemId);

            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
            inventDimGroupSetup.inventDimParmActive(inventDimParmActive);
            inventOnhand = InventOnhand::newParametersActive(itemId, InventDim::find(this.parmInventDimId()), inventDimParmFinancial, inventDimParmActive);
            costPricePcsLocal = inventOnhand.costPricePcs();
            if (_isRound)
            {
                return CurrencyExchangeHelper::price(costPricePcsLocal);
            }
            else
            {
                return costPricePcsLocal;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEstimatedSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the estimated sales price of an item.
    /// </summary>
    /// <returns>
    /// The <c>SalesPrice</c> price of an item.
    /// </returns>
    protected SalesPrice calcEstimatedSalesPrice()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcEstimatedSalesPrice())
        {
            PriceDiscTable  priceDiscTable;
            SalesParameters salesParameters;
            PurchParameters purchParameters;
            InventDim       inventDimAllActivated;
            SalesPrice      baseSalesPrice;
            SalesPrice      salesTradePrice;
            SalesPrice      salesTradePriceOptimisticPessimistic;
            SalesPrice      sumSalesPrices;
            CurrencyCode    genericCurrency;
            int             numPrices;

            baseSalesPrice = this.parmInventTable().salesPcsPrice();

            // Add the base sales price to the sum for averages
            if (baseSalesPrice)
            {
                sumSalesPrices = baseSalesPrice;
                numPrices      = 1;
            }

            // Initialize the best/worst price to be the base sales price.
            salesTradePriceOptimisticPessimistic = baseSalesPrice;

            purchParameters = PurchParameters::find();
            salesParameters = SalesParameters::find();
            genericCurrency = salesParameters.GenericCurrency;

            TradeModuleType tradeModuleType = TradeModuleType::newFromModule(ModuleInventPurchSales::Sales);
            inventDimAllActivated.initFromInventDim(InventDim::find(this.parmInventDimId()), tradeModuleType.activePriceFields(this.parmItemId()));

            // Find all active sales price trade agreements that could match the item and use
            // the standard company currency.
            while select priceDiscTable
                where (priceDiscTable.ItemRelation == this.parmItemId()
                       || priceDiscTable.ItemCode  == PriceDiscProductCodeType::All
                       || (priceDiscTable.ItemCode         == PriceDiscProductCodeType::GroupId
                           && priceDiscTable.ItemRelation  == this.parmInventTable().itemGroupId()))
                   && (!this.parmUnitId() || priceDiscTable.UnitId  ==  this.parmUnitId())
                   && priceDiscTable.Relation == PriceType::PriceSales
                   && (priceDiscTable.FromDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                       || priceDiscTable.FromDate == dateNull())
                   && (priceDiscTable.ToDate    >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                       || priceDiscTable.ToDate == dateNull())
                   && (priceDiscTable.Currency == CompanyInfoHelper::standardCurrency()
                       || (priceDiscTable.GenericCurrency
                           &&   priceDiscTable.Currency == genericCurrency))
                   && priceDiscTable.InventDimId == InventDim::findDim(inventDimAllActivated).inventDimId
            {
                salesTradePrice = priceDiscTable.pcsPrice();

                // If there is no item sales price, then initialize to the first trade price found.
                if (salesTradePriceOptimisticPessimistic == 0)
                {
                    salesTradePriceOptimisticPessimistic = salesTradePrice;
                }

                // Update the sales price to use based on the latest one found and the
                // margin alert threshold.
                switch (purchParameters.mcrMarginAlertsThreshold)
                {
                    case MCRMarginAlertThreshold::Average       :
                        // Record number of trade agreements and their sum to calculate average.
                        numPrices++;
                        sumSalesPrices += salesTradePrice;
                        break;

                    case MCRMarginAlertThreshold::Optimistic    :
                        // Use if new trade price is highest yet.  Optimisitc threshold finds highest price.
                        if (salesTradePriceOptimisticPessimistic < salesTradePrice)
                        {
                            salesTradePriceOptimisticPessimistic = salesTradePrice;
                        }
                        break;

                    case MCRMarginAlertThreshold::Pessimistic   :
                        // Use if new trade price is lowest yet.  Pessimistic threshold finds lowest price.
                        if (salesTradePrice < salesTradePriceOptimisticPessimistic)
                        {
                            salesTradePriceOptimisticPessimistic = salesTradePrice;
                        }
                }
            }

            if (purchParameters.mcrMarginAlertsThreshold == MCRMarginAlertThreshold::Average
                && numPrices)
            {
                return sumSalesPrices / numPrices;
            }
            return salesTradePriceOptimisticPessimistic;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtendedUnitDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the extended unit discount.
    /// </summary>
    /// <returns>
    /// The extended discount per unit.
    /// </returns>
    protected PriceCur calcExtendedUnitDiscount()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcExtendedUnitDiscount())
        {
            LineAmount  lineAmount;
            Qty         qty;
            PriceCur    priceNoDiscount;
            PriceCur    priceWithDiscount;
            PriceCur    extendedDiscount;

            qty = this.parmUnitQty();

            if (! qty)
            {
                // If quantity is 0, then calculate unit price for quantity 1.
                qty = 1;
            }

            // Force line amount calculation with no discounts applied
            lineAmount = PriceDisc::price2Amount(
                this.parmPrice(),
                this.parmPriceUnit(),
                0,
                qty,
                qty,
                this.parmMarkup(),
                0,
                this.parmCurrencyCode(),
                0,
                true);

            priceNoDiscount   = lineAmount / qty;
            priceNoDiscount   = this.convertPrice(priceNoDiscount);
            priceWithDiscount = this.calcExtendedUnitPrice();
            extendedDiscount  = priceNoDiscount - priceWithDiscount;

            return extendedDiscount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDefaultMultiLineParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default multi line enum value for the specified <c>ModuleInventPurchSales</c> enum value.
    /// </summary>
    /// <returns>The default <c>LineMultiLn</c> enum value from the corresponding module parameters.</returns>
    protected LineMultiLn retrieveDefaultMultiLineParameter()
    {
        if (this.parmModuleInventPurchSales() == ModuleInventPurchSales::Sales)
        {
            return SalesParameters::find().Disc;
        }

        return PurchParameters::find().Disc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtendedUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the extended unit price of a sales line.
    /// </summary>
    /// <returns>
    /// The price of per unit of an item on a sales line.
    /// </returns>
    protected PriceCur calcExtendedUnitPrice()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcExtendedUnitPrice())
        {
            LineAmount  lineAmount;
            Qty         qty;
            PriceCur    price;
            LineMultiLn lineMultiLn;
            DiscAmount  combinedDiscAmount;
            DiscPct     combinedDiscPct;

            qty        = this.parmUnitQty();
            lineAmount = this.parmLineAmountExclTax();

            if (! qty)
            {
                // If quantity is 0, then calculate unit price for quantity 1.
                qty = 1;
            }

            if (! lineAmount)
            {
                lineMultiLn = this.retrieveDefaultMultiLineParameter();

                combinedDiscAmount = PriceDisc::discAmount(lineMultiLn, this.parmLineDisc(), this.parmMultiLnDisc());
                combinedDiscPct    = PriceDisc::discPercent(lineMultiLn, this.parmLinePercent(), this.parmMultiLnPercent());

                lineAmount = PriceDisc::price2Amount(
                    this.parmPrice(),
                    this.parmPriceUnit(),
                    combinedDiscAmount,
                    qty,
                    qty,
                    this.parmMarkup(),
                    combinedDiscPct,
                    this.parmCurrencyCode(),
                    0,
                    true);
            }

            price = lineAmount / qty;

            price = this.convertPrice(price);

            return price;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates margin percentage and all values related to the margin calculation.
    /// </summary>
    public void calcMargin()
    {
        Qty             qtyBaseUnit;
        PriceCur        salesPrice;
        PriceCur        purchPrice;

        if (this.shouldCalcMargin())
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcMargin())
            {
                qtyBaseUnit          = this.convertQtyToBaseUnit();
                extendedUnitPrice    = this.calcExtendedUnitPrice();
                extendedUnitDiscount = this.calcExtendedUnitDiscount();
                costPricePcs         = this.calcCostPricePcs(false);

                if (this.useEstimatedSalesPrice())
                {
                    estimatedSalesPrice = this.calcEstimatedSalesPrice();
                    salesPrice          = estimatedSalesPrice;
                }
                else
                {
                    salesPrice = extendedUnitPrice;
                }

                if (qtyBaseUnit)
                {
                    // Royalty
                    if (this.shouldDeductRoyalty())
                    {
                        royaltyAmountPerUnit = this.calcTotalRoyaltyAmount() / qtyBaseUnit;
                    }

                    // Broker
                    if (this.shouldDeductBroker())
                    {
                        brokerAmountPerUnit = this.calcTotalBrokerAmount() / qtyBaseUnit;
                    }

                    // Rebate
                    if (this.shouldDeductCustRebate())
                    {
                        custRebateAmountPerUnit = this.calcTotalCustRebateAmount() / qtyBaseUnit;
                    }
                }

                // Deduct all the amounts from the sales price.
                salesPrice = this.calculateMarginSalesPrice(salesPrice);

                if (this.usePurchPriceForMarginCalc())
                {
                    // The purchase price is used as the base for calculating margin.
                    if (qtyBaseUnit
                        && this.shouldDeductVendorRebate())
                    {
                        vendRebateAmountPerUnit = this.parmTotalVendorRebate() / qtyBaseUnit;
                    }
                    purchPrice    = this.calculateMarginPurchPrice();
                    marginPrice   = purchPrice;
                    marginPercent = MCRMarginAlert::calcMarginPercent(salesPrice, purchPrice);
                }
                else
                {
                    // The inventory cost is used as the base for calculating margin.
                    CostPrice costPriceForMargin = costPricePcs;
                    UnitOfMeasureSymbol salesUnitId = this.parmInventTable().salesUnitId();

                    if (this.parmInventUnitId() != salesUnitId)
                    {
                        // Convert price from inventory to sales (the opposite logic than for quantity)
                        costPriceForMargin = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                                   this.parmInventDimId(),
                                                                                                                   costPriceForMargin,
                                                                                                                   salesUnitId,
                                                                                                                   inventUnitId,
                                                                                                                   NoYes::No,
                                                                                                                   NoYes::No);
                    }

                    marginPrice   = salesPrice;
                    marginPercent = MCRMarginAlert::calcMarginPercent(salesPrice, costPriceForMargin);
                }
            }
        }

        mcrMarginPercentStr = MCRMarginAlert::marginPercentToMarginPercentStr(salesPrice, marginPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMarginSalesPrice</Name>
				<Source><![CDATA[
    protected PriceCur calculateMarginSalesPrice(PriceCur _salesPrice)
    {
        return _salesPrice - royaltyAmountPerUnit - brokerAmountPerUnit - custRebateAmountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMarginPurchPrice</Name>
				<Source><![CDATA[
    protected PriceCur calculateMarginPurchPrice()
    {
        return extendedUnitPrice - vendRebateAmountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPdsRebateAgreementLineAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate agreement line amount.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The <c>PdsRebateAgreement</c> object to be considered in calculation.
    /// </param>
    /// <param name="_pdsRebateAgreementLine">
    /// The <c>PdsRebateAgreementLine</c> object to be considered in calculation.
    /// </param>
    /// <returns>
    /// The amount of the <c>PdsRebateAgreementLine</c> line.
    /// </returns>
    protected Amount calcPdsRebateAgreementLineAmt(
        PdsRebateAgreement      _pdsRebateAgreement,
        PdsRebateAgreementLine  _pdsRebateAgreementLine)
    {
        Amount                  rebateAmount;
        Qty                     calcQty;
        UnitOfMeasureSymbol     calcUOM;
        AmountCur               calcAmt;

        if (PdsRebateAgreement::convertRebateValue(_pdsRebateAgreementLine.RebateValue, _pdsRebateAgreementLine.RebateAmtType, _pdsRebateAgreementLine.Currency, this.parmCurrencyCode()))
        {
            if (_pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
            {
                calcQty = this.parmUnitQty();
                calcUOM = this.parmUnitId();
            }
            else
            {
                calcQty = this.parmPDSCWQty();
                calcUOM = PdsCatchWeight::cwUnitId(this.parmItemId());
            }

            if (_pdsRebateAgreement.PdsRebateTakenFrom == PdsRebateTakenFrom::Gross)
            {
                calcAmt = this.parmGrossAmountExclTax();
            }
            else
            {
                calcAmt = this.parmLineAmountExclTax();
            }

            if (_pdsRebateAgreement.RebateGenericCurrency == NoYes::Yes)
            {
                calcAmt = CurrencyExchangeHelper::curAmount2CurAmount(calcAmt, this.parmCurrencyCode(), _pdsRebateAgreement.RebateCurrency);
            }

            RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(calcQty,
                                                                                                                    calcUOM,
                                                                                                                    this.parmItemId(),
                                                                                                                    this.parmInventDimId(),
                                                                                                                    false);

            if (
                    ((_pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                    && _pdsRebateAgreementLine.checkRebateQuantityRequirements(contract)
                ||(_pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                    && _pdsRebateAgreementLine.checkRebateAmtRequirements(calcAmt)))))
            {
                switch (_pdsRebateAgreementLine.RebateAmtType)
                {
                    case PdsRebateAmtType::AmountPerUnit :
                        rebateAmount = this.calcRebateAmountPerUnit(
                            _pdsRebateAgreement,
                            _pdsRebateAgreementLine);
                        break;

                    case PdsRebateAmtType::FixedAmount:
                        rebateAmount = this.convertToNegativeRebateAmount(_pdsRebateAgreementLine.RebateValue, calcQty);
                        break;

                    case PdsRebateAmtType::Percentage:
                        rebateAmount = calcAmt * _pdsRebateAgreementLine.RebateValue / 100;
                        break;

                    default:
                        throw error("@PDS1430");
                }

                rebateAmount = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, _pdsRebateAgreementLine.Currency, this.parmCurrencyCode());
            }
        }

        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRebateAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate agreement line amount per unit.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The <c>PdsRebateAgreement</c> object to be considered in calculation.
    /// </param>
    /// <param name="_pdsRebateAgreementLine">
    /// The <c>PdsRebateAgreementLine</c> object to be considered in calculation.
    /// </param>
    /// <returns>
    /// The amount of the <c>PdsRebateAgreementLine</c> line per unit.
    /// </returns>
    protected Amount calcRebateAmountPerUnit(
        PdsRebateAgreement      _pdsRebateAgreement,
        PdsRebateAgreementLine  _pdsRebateAgreementLine)
    {
        Qty                     rebateQty;
        Qty                     calcQty;
        UnitOfMeasureSymbol     calcUOM;

        if (_pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
        {
            calcQty = this.parmUnitQty();
            calcUOM = this.parmUnitId();
        }
        else
        {
            calcQty = this.parmPDSCWQty();
            calcUOM = PdsCatchWeight::cwUnitId(this.parmItemId());
        }

        EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                                                                    this.parmInventDimId(),
                                                                                                                                    calcUOM,
                                                                                                                                    _pdsRebateAgreementLine.RebateUnit,
                                                                                                                                    NoYes::No,
                                                                                                                                    NoYes::No);
        if (ecoResProductUnitConverter.canValueBeConverted())
        {
            rebateQty = ecoResProductUnitConverter.convertValue(calcQty);
        }

        return rebateQty * _pdsRebateAgreementLine.RebateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRoyaltyAmountForPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the royalty amount per quantity for pricing.
    /// </summary>
    /// <param name="_mcrRoyaltyTablePricing">
    /// The <c>MCRRoyaltyTablePricing</c> record that contains pricing information.
    /// </param>
    /// <param name="_mcrRoyaltyTable">
    /// The <c>MCRRoyaltyTable</c> record that contains header level information
    /// about the royalty.
    /// </param>
    /// <param name="_calcQty">
    /// The quantity to be calculated.
    /// </param>
    /// <param name="_calcUOM">
    /// The unit of measure of the qty.
    /// </param>
    /// <returns>
    /// The royalty amount per quantity for pricing.
    /// </returns>
    protected AmountCur calcRoyaltyAmountForPricing(
        MCRRoyaltyTablePricing  _mcrRoyaltyTablePricing,
        MCRRoyaltyTable         _mcrRoyaltyTable,
        Qty                     _calcQty,
        UnitOfMeasureSymbol     _calcUOM)
    {
        AmountCur           royaltyAmount;
        AmountCur           salesAmount;
        MCRRoyaltyContract  mcrRoyaltyContract  = _mcrRoyaltyTable.royaltyContract();

        if (mcrRoyaltyContract.RoyaltyTakenFrom == MCRRoyaltyTakenFrom::Gross)
        {
            salesAmount = this.parmUnitQty() * this.parmPrice();
        }
        else
        {
            salesAmount = this.parmLineAmount();
        }

        switch (_mcrRoyaltyTable.RoyaltyAmtType)
        {
            case MCRRoyaltyAmtType::AmountPerUnit :
                royaltyAmount = this.calcRoyaltyAmountPerUnit(
                    _mcrRoyaltyTablePricing,
                    _mcrRoyaltyTable,
                    _calcQty,
                    _calcUOM);
                break;

            case MCRRoyaltyAmtType::FixedAmount:
                royaltyAmount = _mcrRoyaltyTablePricing.RoyaltyValue;
                if (_calcQty < 0)
                {
                    royaltyAmount = royaltyAmount * -1;
                }
                break;

            case MCRRoyaltyAmtType::Percentage:
                royaltyAmount = salesAmount * _mcrRoyaltyTablePricing.RoyaltyValue / 100;
                break;
        }

        return royaltyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRoyaltyAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the royalty amount per unit for pricing.
    /// </summary>
    /// <param name="_mcrRoyaltyTablePricing">
    /// The <c>MCRRoyaltyTablePricing</c> record that contains pricing information.
    /// </param>
    /// <param name="_mcrRoyaltyTable">
    /// The <c>MCRRoyaltyTable</c> record that contains header level information
    /// about the royalty.
    /// </param>
    /// <param name="_calcQty">
    /// The quantity to be calculated.
    /// </param>
    /// <param name="_calcUOM">
    /// The unit of measure of the qty.
    /// </param>
    /// <returns>
    /// The royalty amount per unit for pricing.
    /// </returns>
    protected AmountCur calcRoyaltyAmountPerUnit(
        MCRRoyaltyTablePricing  _mcrRoyaltyTablePricing,
        MCRRoyaltyTable         _mcrRoyaltyTable,
        Qty                     _calcQty,
        UnitOfMeasureSymbol     _calcUOM)
    {
        Qty                 royaltyQty;
        AmountCur           amountPerUnit;
        PriceCur            localPrice;
        MCRRoyaltyContract  mcrRoyaltyContract  = _mcrRoyaltyTable.royaltyContract();

        EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                                                                  this.parmInventDimId(),
                                                                                                                                  _calcUOM,
                                                                                                                                  _mcrRoyaltyTablePricing.UnitID,
                                                                                                                                  NoYes::No,
                                                                                                                                  NoYes::No);
        if (ecoResProductUnitConverter.canValueBeConverted())
        {
            royaltyQty = ecoResProductUnitConverter.convertValue(_calcQty);

            if (mcrRoyaltyContract.RoyaltyTakenFrom == MCRRoyaltyTakenFrom::Gross)
            {
                amountPerUnit = royaltyQty * _mcrRoyaltyTablePricing.RoyaltyValue;
            }
            else if (mcrRoyaltyContract.RoyaltyTakenFrom    == MCRRoyaltyTakenFrom::Net)
            {
                localPrice = this.parmPrice();

                // Ensure no divide by zero errors.
                if (localPrice
                    && _mcrRoyaltyTablePricing.RoyaltyValue)
                {
                    amountPerUnit = this.parmLineAmount() / localPrice * _mcrRoyaltyTablePricing.RoyaltyValue;
                }
                else
                {
                    amountPerUnit = 0;
                }

                if (_calcQty < 0)
                {
                    amountPerUnit = royaltyAmountPerUnit * -1;
                }
            }
        }

        return amountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalBillbackAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total billback amount.
    /// </summary>
    /// <returns>
    /// The total billback amount.
    /// </returns>
    protected Amount calcTotalBillbackAmount()
    {
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateAgreementLine  pdsRebateAgreementLine;
        CustTable               custTable;
        TAMPromotionItem        tamPromotionItem;
        TAMPromotionCust        tamPromotionCust;
        TAMMerchandisingEvent   tamMerchEvent;
        InventDim               inventDimLocal;
        InventDim               inventDim;
        Qty                     calcQty;
        UnitOfMeasureSymbol     calcUOM;
        date                    calcDate;
        AmountCur               grossAmt;
        Amount                  rebateAmount;
        date                    dateMin = dateNull();
        date                    dateMax = maxDate();

        if (pdsRebateAgreement.isTmp() || tamMerchEvent.isTmp() || tamPromotionCust.isTmp() || tamPromotionItem.isTmp())
        {
            return 0;
        }

        custTable = CustTable::find(this.parmCustAccount());
        if (! custTable.RecId)
        {
            return 0;
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcTotalBillbackAmount())
        {
            inventDim = InventDim::find(this.parmInventDimId());

            int agreementCount;
            int agreementLineCount;

            while select validTimeState(dateMin, dateMax) pdsRebateAgreement
                where pdsRebateAgreement.Validated
                    && pdsRebateAgreement.Verifier
                    && pdsRebateAgreement.PdsRebateProgramType == PdsRebateProgramType::BillBack
                    && (!PdsGlobal::pdsIsCWItem(this.parmItemId())
                        || pdsRebateAgreement.PdsUnitType == PdsUnitType::CWUnit)
                    && pdsRebateAgreement.RebateCurrency         == this.parmCurrencyCode()

                    && (pdsRebateAgreement.RebateUOMOption       == PdsRebateUOMOption::Convert
                        || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::InventoryUnit
                            && pdsRebateAgreement.PdsRebateUnit  == this.parmUnitId())
                        || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::CWUnit
                            && pdsRebateAgreement.PdsRebateUnit  == PdsCatchWeight::cwUnitId(this.parmItemId())))
                join MerchandisingEventID, PromotionID from tamMerchEvent
                    where tamMerchEvent.MerchandisingEventID       == pdsRebateAgreement.tamMerchandisingEventID
                       && tamMerchEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
                join RecId from tamPromotionCust
                    where tamPromotionCust.PromotionID  == tamMerchEvent.PromotionID
                        && tamPromotionCust.CustAccount == custTable.AccountNum
                join InventDimID from tamPromotionItem
                    where tamPromotionItem.ItemID               == this.parmItemId()
                       && tamPromotionItem.MerchandisingEventID == tamMerchEvent.MerchandisingEventID
                #TAMRebateInventDimExistsJoin(tamPromotionItem.InventDimId, inventDimLocal, inventDim)
            {
                agreementCount++;

                calcDate = this.getPdsRebateAgreementCalcDate(pdsRebateAgreement);
                if (!pdsRebateAgreement.checkValidDate(calcDate))
                {
                    continue;
                }

                if (pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
                {
                    calcQty = this.parmUnitQty();
                    calcUOM = this.parmUnitId();
                }
                else
                {
                    calcQty = this.parmPDSCWQty();
                    calcUOM = PdsCatchWeight::cwUnitId(this.parmItemId());
                }

                grossAmt = this.parmUnitQty() * this.parmPrice();

                RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(grossAmt,
                                                                                                                                 calcQty,
                                                                                                                                 calcUOM,
                                                                                                                                 this.parmCurrencyCode(),
                                                                                                                                 this.parmItemId(),
                                                                                                                                 this.parmInventDimId());

                if (pdsRebateAgreement.checkRebateRequirement(contract))
                {
                    while select pdsRebateAgreementLine
                        where
                            pdsRebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                    {
                        agreementLineCount++;

                        rebateAmount += this.calcPdsRebateAgreementLineAmt(
                            pdsRebateAgreement,
                            pdsRebateAgreementLine);
                    }
                }
            }

            activityContext
                .addCustomProperty('Agreements', int2str(agreementCount))
                .addCustomProperty('AgreementLines', int2Str(agreementLineCount));

            rebateAmount = this.convertPrice(rebateAmount);
        }

        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalBrokerAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total broker amount.
    /// </summary>
    /// <returns>
    /// The total broker amount.
    /// </returns>
    protected AmountCur calcTotalBrokerAmount()
    {
        AmountCur           brokerAmount;
        MarkupTrans         markupTrans;
        MCRBrokerCommission mcrBrokerCommission;

        if (mcrBrokerCommission.isTmp())
        {
            return 0;
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcTotalBrokerAmount())
        {
            if (mcrMarginAlertMap && mcrMarginAlertMap.TableId == tableNum(SalesLine))
            {
                SalesLine salesLine = SalesLine::findRecId(mcrMarginAlertMap.RecId);
                TransDate transDate = DateTimeUtil::date(salesLine.salesTable().CreatedDateTime);

                while select markupTrans
                    exists join mcrBrokerCommission
                        where mcrBrokerCommission.SalesLineRecID == mcrMarginAlertMap.RecId
                           && markupTrans.RecId == mcrBrokerCommission.MarkupTransRecID
                {
                    brokerAmount += Markup::calcMarkupAmount(markupTrans,
                                                             salesLine.SalesQty,
                                                             salesLine.lineAmountExclTax(), // _amount
                                                             0.0, //_intercompanyAmount
                                                             NoYes::No, // _isInclTax
                                                             NoYes::Yes, // _convertSign
                                                             markupTrans.CurrencyCode,
                                                             transDate);

                }
            }

            brokerAmount = this.convertPrice(brokerAmount);
        }

        return brokerAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalCustRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total customer rebate amount.
    /// </summary>
    /// <returns>
    /// The total customer rebate amount.
    /// </returns>
    protected Amount calcTotalCustRebateAmount()
    {
        Amount  pdsRebateAmount;
        Amount  billBackAmount;

        pdsRebateAmount = this.calcTotalPdsRebateAmount();
        billBackAmount  = this.calcTotalBillbackAmount();

        return pdsRebateAmount + billBackAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalPdsRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total rebate amount.
    /// </summary>
    /// <returns>
    /// The total rebate amount.
    /// </returns>
    protected Amount calcTotalPdsRebateAmount()
    {
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateAgreementLine  pdsRebateAgreementLine;
        CustTable               custTable;
        PdsRebateItem           pdsRebateItem;
        InventDim               inventDimLocal;
        InventDim               inventDimItemLocal;
        InventDim               inventDim;
        Amount                  rebateAmount;
        Qty                     calcQty;
        UnitOfMeasureSymbol     calcUOM;
        date                    calcDate;
        AmountCur               grossAmt;
        date                    dateMin = dateNull();
        date                    dateMax = maxDate();

        if (pdsRebateAgreement.isTmp())
        {
            return 0;
        }

        custTable = CustTable::find(this.parmCustAccount());
        if (! custTable.RecId)
        {
            return 0;
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcTotalPdsRebateAmount())
        {
            inventDim = InventDim::find(this.parmInventDimId());

            // Find all applicable Rebate Agreements.
            while select validTimeState(dateMin, dateMax) pdsRebateAgreement order by PdsFindNext
                where pdsRebateAgreement.Validated
                    && pdsRebateAgreement.Verifier
                    && (pdsRebateAgreement.PdsCustRebateCode                    == TableGroupAll::All
                        || (pdsRebateAgreement.PdsCustRebateCode                == TableGroupAll::GroupId
                            && pdsRebateAgreement.PdsCustRebateRelation         == custTable.PdsCustRebateGroupId)
                        || (pdsRebateAgreement.PdsCustRebateCode                == TableGroupAll::GroupId
                            && pdsRebateAgreement.PdsRebateProgramType          == PdsRebateProgramType::Freight
                            && pdsRebateAgreement.PdsCustRebateRelation         == custTable.PartyCountry)
                        || (pdsRebateAgreement.PdsCustRebateCode                == TableGroupAll::GroupId
                            && pdsRebateAgreement.PdsRebateProgramType          == PdsRebateProgramType::TMA
                            && pdsRebateAgreement.PdsCustRebateRelation         == custTable.PdsRebateTMAGroup)
                        || (pdsRebateAgreement.PdsCustRebateCode                == TableGroupAll::Table
                            && pdsRebateAgreement.PdsCustRebateRelation         == custTable.AccountNum))
                    && (pdsRebateAgreement.PdsItemRebateCode                    == PdsRebateItemCode::All
                        || ((pdsRebateAgreement.PdsRebateProgramType            == PdsRebateProgramType::Rebate
                            || pdsRebateAgreement.PdsRebateProgramType          == PdsRebateProgramType::TMA)
                            && pdsRebateAgreement.PdsItemRebateCode             == PdsRebateItemCode::GroupId
                            && pdsRebateAgreement.PdsItemRebateRelation         == this.parmInventTable().PdsItemRebateGroupId)
                        || (pdsRebateAgreement.PdsRebateProgramType             == PdsRebateProgramType::Freight
                            && pdsRebateAgreement.PdsItemRebateCode             == PdsRebateItemCode::GroupId
                            && pdsRebateAgreement.PdsItemRebateRelation         == this.parmInventTable().PdsFreightAllocationGroupId
                            && custTable.PdsFreightAccrued                      == NoYes::Yes)
                        || (pdsRebateAgreement.PdsItemRebateCode                == PdsRebateItemCode::Table
                            && pdsRebateAgreement.PdsItemRebateRelation         == this.parmItemId())
                        || pdsRebateAgreement.PdsItemRebateCode                 == PdsRebateItemCode::Selection)
                    && pdsRebateAgreement.PdsRebateProgramType                  != PdsRebateProgramType::BillBack
                    && (!PdsGlobal::pdsIsCWItem(this.parmItemId())
                        || pdsRebateAgreement.PdsUnitType                       == PdsUnitType::CWUnit)
                    && (pdsRebateAgreement.RebateGenericCurrency == NoYes::Yes
                        ||  pdsRebateAgreement.RebateCurrency    == this.parmCurrencyCode())

                    && (pdsRebateAgreement.RebateUOMOption       == PdsRebateUOMOption::Convert
                        || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::InventoryUnit
                            && pdsRebateAgreement.PdsRebateUnit  == this.parmUnitId())
                        || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::CWUnit
                            && pdsRebateAgreement.PdsRebateUnit  == PdsCatchWeight::cwUnitId(this.parmItemId())))
                #TAMRebateInventDimExistsJoin(pdsRebateAgreement.InventDimId, inventDimLocal, inventDim)
            {
                calcDate = this.getPdsRebateAgreementCalcDate(pdsRebateAgreement);
                if (!pdsRebateAgreement.checkValidDate(calcDate))
                {
                    continue;
                }

                if (pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
                {
                    calcQty = this.parmUnitQty();
                    calcUOM = this.parmUnitId();
                }
                else
                {
                    calcQty = this.parmPDSCWQty();
                    calcUOM = PdsCatchWeight::cwUnitId(this.parmItemId());
                }

                grossAmt = this.parmUnitQty() * this.parmPrice();

                RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(grossAmt,
                                                                                                                                 calcQty,
                                                                                                                                 calcUOM,
                                                                                                                                 this.parmCurrencyCode(),
                                                                                                                                 this.parmItemId(),
                                                                                                                                 this.parmInventDimId());

                if (pdsRebateAgreement.checkRebateRequirement(contract))
                {
                    // Agreements with the custom item code are using an item list.
                    if (pdsRebateAgreement.PdsItemRebateCode == PdsRebateItemCode::Selection)
                    {
                        // Ensure that the item and dimensions on the transaction
                        // are also included in the item list if the custom code is selected.
                        while select pdsRebateAgreementLine
                            where
                                  pdsRebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                        exists join pdsRebateItem
                            where pdsRebateItem.RebateAgreementRefRecId == pdsRebateAgreementLine.RebateAgreementRefRecId
                                && pdsRebateItem.ItemID                 == this.parmItemId()
                        #TAMRebateInventDimExistsJoin(pdsRebateItem.InventDimId, inventDimItemLocal, inventDim)
                        {
                            rebateAmount += this.calcPdsRebateAgreementLineAmt(
                                pdsRebateAgreement,
                                pdsRebateAgreementLine);
                        }
                    }
                    else
                    {
                        while select pdsRebateAgreementLine
                            where
                                  pdsRebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                        {
                            rebateAmount += this.calcPdsRebateAgreementLineAmt(
                                pdsRebateAgreement,
                                pdsRebateAgreementLine);
                        }
                    }
                }
            }

            rebateAmount = this.parmCurrencyCode() == CompanyInfoHelper::standardCurrency() ? rebateAmount :
                CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, this.parmCurrencyCode(), CompanyInfoHelper::standardCurrency());
        }
            
        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalRoyaltyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total royalty amount.
    /// </summary>
    /// <returns>
    /// The total royalty amount.
    /// </returns>
    protected AmountCur calcTotalRoyaltyAmount()
    {
        InventDim                   inventDim;
        InventDim                   inventDimTransaction;
        Qty                         calcQty;
        UnitOfMeasureSymbol         calcUOM;
        date                        calcDate;

        AmountCur                   calcAmt;
        AmountCur                   breakAmt;
        MCRRoyaltyContract          mcrRoyaltyContract;
        MCRRoyaltyTablePricing      mcrRoyaltyTablePricing;
        MCRRoyaltyTable             mcrRoyaltyTable;
        MCRRoyaltyItemCode          mcrRoyaltyItemCode;
        AmountCur                   totalRoyaltyAmount;
        CurrencyExchangeRate        exchangeRate;      
        CurrencyCode                currencyCodeRoyalty, 
                                    currencyCodeDefault =  mcrMarginAlertMap.CurrencyCode;

        if (mcrRoyaltyItemCode.isTmp() || mcrRoyaltyContract.isTmp() || mcrRoyaltyTable.isTmp())
        {
            return 0;
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().marginAlertActivities().calcTotalRoyaltyAmount())
        {
            Ledger                      ledger = Ledger::find(Ledger::current());
            ItemId                      itemId = this.parmItemId();
            date                        systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            //This date is only valid in the case when the mcrRoyaltyTable.CalcDates field
            // is equal to MCRTradeCustCalcDates::RequestShipDate.

            inventDimTransaction = InventDim::find(this.parmInventDimId());

            // Find all approved applicable royalty agreements.
            // We are checking the exchange rate pair here because we do not want an error on the call to
            // CurrencyExchangeHelper::curAmount2CurAmount, we just want to skip royalty calculation in that scenario

            //Find all approved applicable royalty agreements.
            while select RecId from mcrRoyaltyItemCode
                where mcrRoyaltyItemCode.ItemID             == itemId
                join RecId, RoyaltyTakenFrom, UnitType, ItemRoyaltyCode, Currency
                from  mcrRoyaltyContract
                where mcrRoyaltyContract.RoyaltyContract    == mcrRoyaltyItemCode.RoyaltyContract
                   && mcrRoyaltyContract.ItemRoyaltyCode    == MCRItemRoyaltyCode::Selection
                       && mcrRoyaltyContract.Validated            == NoYes::Yes
                join  mcrRoyaltyTable
                where mcrRoyaltyTable.RoyaltyCode       == mcrRoyaltyItemCode.RoyaltyCode
                    && mcrRoyaltyTable.RoyaltyContract       == mcrRoyaltyContract.RoyaltyContract
                        #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction)
            {
                calcDate = this.getRoyaltyCalcDate(mcrRoyaltyTable);
                if (!mcrRoyaltyTable.checkValidDate(calcDate))
                {
                    continue;
                }

                if (mcrRoyaltyContract.Currency != this.parmCurrencyCode())
                {
                    exchangeRate = ExchangeRateHelper::getVariableExchangeRate(
                                                                        this.parmCurrencyCode(),
                                                                        mcrRoyaltyContract.Currency,
                                                                        ledger.DefaultExchangeRateType,
                                                                        systemDate,
                                                                        true);
                    if (!exchangeRate)
                    {
                        continue;
                    }

                    currencyCodeRoyalty = mcrRoyaltyContract.Currency;
                }

                if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::InventoryUnit)
                {
                    calcQty = this.parmUnitQty();
                    calcUOM = this.parmUnitId();
                }
                else
                {
                    calcQty = this.parmPDSCWQty();
                    calcUOM = PdsCatchWeight::cwUnitId(this.parmItemId());
                }

                if (mcrRoyaltyContract.RoyaltyTakenFrom == MCRRoyaltyTakenFrom::Gross)
                {
                    calcAmt = this.parmUnitQty() * this.parmPrice();
                }
                else
                {
                    calcAmt = this.parmLineAmount();
                }

                breakAmt     = CurrencyExchangeHelper::curAmount2CurAmount(calcAmt, this.parmCurrencyCode(), mcrRoyaltyContract.Currency, systemDate);

                mcrRoyaltyTablePricing = MCRRoyaltyTablePricing::findPricingFromInventDimId(
                    mcrRoyaltyTable,
                    this.parmItemId(),
                    this.parmInventDimId(),
                    calcQty,
                    calcUOM,
                    mcrRoyaltyContract.Currency,
                    breakAmt);
                if (mcrRoyaltyTablePricing)
                {
                    totalRoyaltyAmount += this.calcRoyaltyAmountForPricing(
                        mcrRoyaltyTablePricing,
                        mcrRoyaltyTable,
                        calcQty,
                        calcUOM);
                }
            }
               
            totalRoyaltyAmount = this.convertPriceWithCorrectCurrency(totalRoyaltyAmount, currencyCodeRoyalty, currencyCodeDefault);
        }
     
        return totalRoyaltyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPriceWithCorrectCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert price with or Royalty currency code or the Default currency code.
    /// </summary>
    /// <param name = "_totalRoyaltyAmount">The amount to be converted</param>
    /// <param name = "_currencyCodeRoyalty">Royalty currency code</param>
    /// <param name = "_currencyCodeDefault">Default currency code</param>
    /// <returns>The converted amount</returns>
    protected amountCur convertPriceWithCorrectCurrency(AmountCur _totalRoyaltyAmount, 
                                                    CurrencyCode _currencyCodeRoyalty,
                                                    CurrencyCode _currencyCodeDefault)
    {
        AmountCur                   totalRoyaltyAmount;

        if (this.parmCurrencyCode() != '' &&
            this.parmCurrencyCode() != _currencyCodeRoyalty)
        {
            mcrMarginAlertMap.CurrencyCode = _currencyCodeRoyalty ? _currencyCodeRoyalty : _currencyCodeDefault;
            totalRoyaltyAmount = this.convertPrice(_totalRoyaltyAmount);
            mcrMarginAlertMap.CurrencyCode = _currencyCodeDefault;
        }
        
        return totalRoyaltyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified price based on the class variables.
    /// </summary>
    /// <param name="_price">
    /// The price to be converted.
    /// </param>
    /// <returns>
    /// The converted price
    /// </returns>
    protected PriceCur convertPrice(PriceCur _price)
    {
        PriceConvertFactory priceConvertFactory;
        PriceConvert        priceConvert;
        PriceCur            convertedPrice;
        UnitOfMeasureSymbol baseUnit;
        CurrencyCode        standardCurrency = CompanyInfoHelper::standardCurrency();

        convertedPrice = _price;
        baseUnit       = InventTableModule::find(this.parmItemId(), this.parmModuleInventPurchSales()).UnitId;

        // No need to convert if the unit and currency are the same as base unit and
        // standard currency.
        if (baseUnit            != this.parmUnitId()
            || standardCurrency != this.parmCurrencyCode())
        {
            priceConvertFactory = PriceConvertFactory::newItemPrice(
                this.parmItemId(),
                this.parmUnitId(),
                _price,
                this.parmPriceUnit(),
                this.parmMarkup(),
                this.parmUnitQty(),
                this.parmCurrencyCode());

            // Convert to base unit if necessary.
            if (baseUnit != this.parmUnitId())
            {
                priceConvertFactory.parmNewUnitId(baseUnit);
            }

            // Convert to standard currency if necessary.
            if (standardCurrency != this.parmCurrencyCode())
            {
                priceConvertFactory.parmNewCurrencyCode(standardCurrency);
            }

            priceConvertFactory.parmInventDimId(this.parmInventDimId());

            priceConvert   = priceConvertFactory.priceConvert();
            convertedPrice = priceConvert.parmPrice();
        }

        return convertedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyToBaseUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity to the base unit.
    /// </summary>
    /// <returns>
    /// The converted quantity.
    /// </returns>
    protected Qty convertQtyToBaseUnit()
    {
        Qty                 convertedQty;

        convertedQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                             this.parmInventDimId(),
                                                                                             this.parmUnitQty(),
                                                                                             this.parmUnitId(),
                                                                                             InventTableModule::find(this.parmItemId(), this.parmModuleInventPurchSales()).UnitId,
                                                                                             NoYes::No,
                                                                                             NoYes::No);
        return convertedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToNegativeRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the sign of the specified rebate amount if the rebate quantity is less than zero.
    /// </summary>
    /// <param name="_rebateAmount">
    /// The rebate amount in which to change the sign if the rebate quantity is less than zero.
    /// </param>
    /// <param name="_rebateQty">
    /// The rebate qty used to determine if the sign of the rebate amounts needs to be changed.
    /// </param>
    /// <returns>
    /// The converted rebate amount.
    /// </returns>
    protected Amount convertToNegativeRebateAmount(
        Amount              _rebateAmount,
        Qty                 _rebateQty)
    {
        PdsRebateAmt  rebateAmount = _rebateAmount;

        if (_rebateQty < 0)
        {
            rebateAmount = _rebateAmount * (-1);
        }
        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdsRebateAgreementCalcDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate agreement calculated date.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The rebate agreement in which to retrieve the calculated date.
    /// </param>
    /// <returns>
    /// The rebate agreement calculated date.
    /// </returns>
    protected date getPdsRebateAgreementCalcDate(PdsRebateAgreement _pdsRebateAgreement)
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoyaltyCalcDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty calculated date.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// The royalty agreement in which to retrieve the calculated date.
    /// </param>
    /// <returns>
    /// The royalty agreement calculated date.
    /// </returns>
    protected date getRoyaltyCalcDate(MCRRoyaltyTable _mcrRoyaltyTable)
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoyaltyCalcDateRequestShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty calculated date if the royalty record's CalcDates field is set to MCRTradeCustCalcDates::RequestShipDate.
    /// </summary>
    /// <returns>
    /// The royalty agreement calculated date if the royalty record's CalcDates field is set to MCRTradeCustCalcDates::RequestShipDate.
    /// </returns>
    protected date getRoyaltyCalcDateRequestShipDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBrokerAmountPerUnit</Name>
				<Source><![CDATA[
    public AmountCur parmBrokerAmountPerUnit()
    {
        return brokerAmountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPricePcs</Name>
				<Source><![CDATA[
    public CostPricePcs parmCostPricePcs()
    {
        return costPricePcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode parmCurrencyCode()
    {
        return mcrMarginAlertMap.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    protected CustAccount parmCustAccount()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustRebateAmountPerUnit</Name>
				<Source><![CDATA[
    public AmountCur parmCustRebateAmountPerUnit()
    {
        return custRebateAmountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEstimatedSalesPrice</Name>
				<Source><![CDATA[
    public PriceCur parmEstimatedSalesPrice()
    {
        return estimatedSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtendedUnitDiscount</Name>
				<Source><![CDATA[
    public PriceCur parmExtendedUnitDiscount()
    {
        return extendedUnitDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtendedUnitPrice</Name>
				<Source><![CDATA[
    public PriceCur parmExtendedUnitPrice()
    {
        return extendedUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId parmInventDimId()
    {
        return mcrMarginAlertMap.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    protected Qty parmInventQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    protected InventTable parmInventTable()
    {
        if (! inventTable)
        {
            inventTable = InventTable::find(this.parmItemId());
        }
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUnitId</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol parmInventUnitId()
    {
        if (! inventUnitId)
        {
            inventUnitId = this.parmInventTable().inventUnitId();
        }

        return inventUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    protected ItemId parmItemId()
    {
        return mcrMarginAlertMap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    protected LineAmount parmLineAmount()
    {
        return mcrMarginAlertMap.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
    protected DiscAmount parmLineDisc()
    {
        return mcrMarginAlertMap.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePercent</Name>
				<Source><![CDATA[
    protected DiscPct parmLinePercent()
    {
        return mcrMarginAlertMap.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarginPercent</Name>
				<Source><![CDATA[
    public Percent parmMarginPercent()
    {
        return marginPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarginPrice</Name>
				<Source><![CDATA[
    public AmountMST parmMarginPrice()
    {
        return marginPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    protected PriceMarkup parmMarkup()
    {
        return mcrMarginAlertMap.Markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRMarginAlertMap</Name>
				<Source><![CDATA[
    protected MCRMarginAlertMap parmMCRMarginAlertMap(MCRMarginAlertMap _mcrMarginAlertMap = mcrMarginAlertMap)
    {
        mcrMarginAlertMap = _mcrMarginAlertMap;
        return mcrMarginAlertMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRMarginPercentStr</Name>
				<Source><![CDATA[
    public MCRMarginPecentStr parmMCRMarginPercentStr()
    {
        return mcrMarginPercentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleInventPurchSales</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales parmModuleInventPurchSales()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
    protected DiscAmount parmMultiLnDisc()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
    protected DiscPct parmMultiLnPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSCWQty</Name>
				<Source><![CDATA[
    protected Qty parmPDSCWQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    protected PriceCur parmPrice()
    {
        return mcrMarginAlertMap.Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    protected PriceUnit parmPriceUnit()
    {
        return mcrMarginAlertMap.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoyaltyAmountPerUnit</Name>
				<Source><![CDATA[
    public AmountCur parmRoyaltyAmountPerUnit()
    {
        return royaltyAmountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalVendorRebate</Name>
				<Source><![CDATA[
    public AmountCur parmTotalVendorRebate(AmountCur _totalVendorRebate = totalVendorRebate)
    {
        totalVendorRebate = _totalVendorRebate;

        return totalVendorRebate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol parmUnitId()
    {
        return mcrMarginAlertMap.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitQty</Name>
				<Source><![CDATA[
    protected UnitQty parmUnitQty()
    {
        return mcrMarginAlertMap.UnitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendRebateAmountPerUnit</Name>
				<Source><![CDATA[
    public AmountCur parmVendRebateAmountPerUnit()
    {
        return vendRebateAmountPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductBroker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the broker amount should be deducted.
    /// </summary>
    /// <returns>
    /// true if the broker amount should be deducted; otherwise, false.
    /// </returns>
    protected boolean shouldDeductBroker()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductCustRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the customer rebate amount should be deducted.
    /// </summary>
    /// <returns>
    /// true if the customer rebate amount should be deducted; otherwise, false.
    /// </returns>
    protected boolean shouldDeductCustRebate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductRoyalty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the royalty amount should be deducted.
    /// </summary>
    /// <returns>
    /// true if the royalty amount should be deducted; otherwise, false.
    /// </returns>
    protected boolean shouldDeductRoyalty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductVendorRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the vendor rebate amount should be deducted.
    /// </summary>
    /// <returns>
    /// true if the vendor rebate amount should be deducted; otherwise, false.
    /// </returns>
    protected boolean shouldDeductVendorRebate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalcMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether margin should be calculated.
    /// </summary>
    /// <returns>
    /// true if margin should be calculated; otherwise, false.
    /// </returns>
    protected boolean shouldCalcMargin()
    {
        boolean shouldCalcMargin = true;

        // Do not calculate margin if the quantity is negative
        if (this.parmUnitQty() <= 0)
        {
            shouldCalcMargin = false;
        }

        return shouldCalcMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useEstimatedSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the estimated sales price should be used.
    /// </summary>
    /// <returns>
    /// true if the estimated sales price should be used; otherwise, false.
    /// </returns>
    protected boolean useEstimatedSalesPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePurchPriceForMarginCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase price should be used for margin calculations.
    /// </summary>
    /// <returns>
    /// true if the purchase price should be used for margin calculations; otherwise, false.
    /// </returns>
    protected boolean usePurchPriceForMarginCalc()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarginPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the margin percent based on a given price and cost price.
    /// </summary>
    /// <param name="_salesPrice">
    /// The sales price included in the margin percent calculation.
    /// </param>
    /// <param name="_costPriceOrPurchPrice">
    /// The cost included in the margin percent calculation.
    /// </param>
    /// <returns>
    /// The margin percent based on a given price and cost price.
    /// </returns>
    public static Percent calcMarginPercent(
        AmountMST   _salesPrice,
        AmountMST   _costPriceOrPurchPrice)
    {
        Percent percent;

        if (_salesPrice)
        {
            percent = ((_salesPrice - _costPriceOrPurchPrice) / _salesPrice) * 100;
        }
        else
        {
            percent = 0;
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarginSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the margin symbol based on the sales parameter setup.
    /// </summary>
    /// <param name="_marginPercent">
    /// The <c>Percent</c> to retrieve the alert icon for.
    /// </param>
    /// <returns>
    /// The margin icon based on the passed <c>Percent</c>.
    /// </returns>
    public static SymbolFontGlyphName getMarginSymbol(Percent  _marginPercent)
    {
        SalesParameters     salesParameters = SalesParameters::find();
        SymbolFontGlyphName marginSymbol;

        if (_marginPercent >= salesParameters.mcrAcceptableSalesMargin)
        {
            marginSymbol = ImageReferenceSymbol::Accept;
        }
        else if (_marginPercent >= salesParameters.mcrQuestionableSalesMargin)
        {
            marginSymbol = ImageReferenceSymbol::Warning;
        }
        else
        {
            marginSymbol = ImageReferenceSymbol::Error;
        }
        return marginSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarginToolTip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the margin textual status, based on setup parameters for margin alerts.
    /// </summary>
    /// <param name="_marginPercent">
    /// The <c>Percent</c> to retrieve the alert icon for.
    /// </param>
    /// <returns>
    /// The margin textual status.
    /// </returns>
    public static ToolTip getMarginToolTip(Percent  _marginPercent)
    {
        SalesParameters     salesParameters = SalesParameters::find();
        ToolTip             tooltip;

        if (_marginPercent >= salesParameters.mcrAcceptableSalesMargin)
        {
            tooltip = "@MCR36242";
        }
        else if (_marginPercent >= salesParameters.mcrQuestionableSalesMargin)
        {
            tooltip = "@MCR36243";
        }
        else
        {
            tooltip = "@MCR36244";
        }
        return tooltip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginPercentToMarginPercentStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a numeric percentage to the string to be displayed.
    /// </summary>
    /// <param name="_salesPrice">
    /// The sales price included in the margin percent calculation.
    /// </param>
    /// <param name="_marginPercentage">
    /// The numeric percentage to be converted.
    /// </param>
    /// <returns>
    /// The text version of the numeric percentage.  If the percentage is 0 will return
    /// indication that the percentage is not applicable (e.g., N/A)
    /// </returns>
    public static MCRMarginPecentStr marginPercentToMarginPercentStr(AmountMST _salesPrice, Percent _marginPercentage)
    {
        return McrMarginAlert::marginPercentToMarginPercentStrExt(_marginPercentage, _salesPrice != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginPercentToMarginPercentStrExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a numeric percentage to the string to be displayed.
    /// </summary>
    /// <param name="_marginPercentage">
    /// The numeric percentage to be converted.
    /// </param>
    /// <param name="_couldBeCalculated">
    /// A boolean value that indicates if the margin percentage could be calculated; optional.
    /// </param>
    /// <returns>
    /// The text version of the numeric percentage.  If the percentage is set to realMin (can happen if there is no sales prices available) or if the _couldBeCalculated parameter is true
    /// the method will return an indication that the percentage is not applicable (e.g., N/A)
    /// </returns>
    public static MCRMarginPecentStr marginPercentToMarginPercentStrExt(Percent _marginPercentage, boolean _couldBeCalculated = (_marginPercentage != McrMarginAlert::percentValueForNotCalculated()))
    {
        MCRMarginPecentStr  mcrMarginPercentStr;

        if (_couldBeCalculated)
        {
            mcrMarginPercentStr = num2str(_marginPercentage, -1, -1, -1, -1);
        }
        else
        {
            mcrMarginPercentStr = "@SYS180118";
        }

        return mcrMarginPercentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmountExclTax</Name>
				<Source><![CDATA[
    abstract protected LineAmount parmLineAmountExclTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossAmountExclTax</Name>
				<Source><![CDATA[
    abstract protected AmountCur parmGrossAmountExclTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentValueForNotCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a const value that is used to indicate that the margin percentage could not be calculated. 
    /// </summary>
    /// <returns>A const percentage value.</returns>
    public static McrMarginPercent percentValueForNotCalculated()
    {
        return realMin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistMarginCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the margin calculation if applicable.
    /// </summary>
    public void persistMarginCalculation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal MCRMarginInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRMarginInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>