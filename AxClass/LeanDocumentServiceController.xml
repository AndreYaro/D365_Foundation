<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentServiceController</c> class is the controller class for the lean document
///    creation service.
/// </summary>
/// <remarks>
///    This class is primarily used for overriding the template form, that is used as the service user
///    interface.
/// </remarks>
class LeanDocumentServiceController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  internal use only.
    /// </summary>
    public void getFromDialog()
    {
        // avoid calling super as the service's form takes care for populating the contract
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SysOperationServiceController</c> class.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    public void new(
        identifierName              _className = '',
        identifierName              _methodName = '',
        SysOperationExecutionMode   _executionMode = SysOperationExecutionMode::ReliableAsynchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///  internal use only.
    /// </summary>
    /// <returns>
    /// A <c>formName</c> value.
    /// </returns>
    protected formName templateForm()
    {
        return formstr(LeanDocumentServiceCreation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareAgainstOriginalQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the quantity for an existing subcontracting document and compares it against the
    /// current manually modified quantity by the user, issuing warnings for differences.
    /// </summary>
    /// <param name="_leanDocument">
    /// The document for which the quantity must be recalculated.
    /// </param>
    /// <param name="_serviceInstance">
    /// The service executing the request; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void compareAgainstOriginalQuantity(Common _leanDocument, LeanDocumentService _serviceInstance = null)
    {
        void compareQty(InventQty _actualQty, UnitOfMeasureSymbol _uomSymbol, str _warningLabelId)
        {
            InventQty recalculatedQty =
                LeanDocumentServiceController::recalculateQuantityForAssignedJobs(_leanDocument, _serviceInstance);

            if (_actualQty != recalculatedQty)
            {
                warning(strfmt(_warningLabelId, recalculatedQty, _uomSymbol));
            }
        }

        if (!_serviceInstance)
        {
            _serviceInstance = LeanDocumentService::construct();
        }

        switch (_leanDocument.TableId)
        {
            case tablenum(PurchLine):
                PurchLine purchLine = _leanDocument;
                compareQty(purchLine.PurchQty, purchLine.PurchUnit, "@SYS335572");
                break;

            case tablenum(VendPackingSlipTrans):
                VendPackingSlipTrans vendPackingSlipTrans = _leanDocument;
                if (vendPackingSlipTrans.Qty == 0)
                {
                    KanbanJobReceiptAdviceLine::unassignAllJobs(vendPackingSlipTrans.RecId);
                }
                else
                {
                    compareQty(vendPackingSlipTrans.Qty, vendPackingSlipTrans.PurchUnit, "@SYS335573");
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanDocumentServiceController</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LeanDocumentServiceController</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentServiceController construct()
    {
        return new LeanDocumentServiceController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        identifierName className;
        identifierName methodName;
        SysOperationExecutionMode executionMode;

        [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(_args);
        LeanDocumentServiceController controller = new LeanDocumentServiceController(className, methodName, executionMode);

        if (_args)
        {
            LeanDocumentServiceController::runController(controller, _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQuantityForAssignedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates the quantity for an existing subcontracting document.
    /// </summary>
    /// <param name="_leanDocument">
    ///    The document for which the quantity must be recalculated.
    /// </param>
    /// <param name="_serviceInstance">
    ///    The service executing the request; optional.
    /// </param>
    /// <returns>
    ///    The new quantity for the document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventQty recalculateQuantityForAssignedJobs(
        Common              _leanDocument,
        LeanDocumentService _serviceInstance = null)
    {
        if (!_serviceInstance)
        {
            _serviceInstance = LeanDocumentService::construct();
        }

        return _serviceInstance.recalculateQuantityForAssignedJobs(_leanDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runController</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <param name="_controller">
    ///    The controller that will be used.
    /// </param>
    /// <param name="_args">
    ///    The arguments that will be used.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runController(LeanDocumentServiceController _controller, Args _args)
    {
        _controller.parmArgs(_args);
        _controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubcontractingDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates related subcontracting documents for jobs that belong to the same group as the kanban job
    ///    that is passed as parameter.
    /// </summary>
    /// <param name="_documentType">
    ///    The type of document that must be updated.
    /// </param>
    /// <param name="_filterKanbanJob">
    ///    The filtered kanban job.
    /// </param>
    /// <param name="_serviceInstance">
    ///    The service executing the request; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateSubcontractingDocuments(
        LeanDocumentCreationType    _documentType,
        KanbanJob                   _filterKanbanJob,
        LeanDocumentService         _serviceInstance = null)
    {
        if (!_serviceInstance)
        {
            _serviceInstance = LeanDocumentService::construct();
        }

        _serviceInstance.updateSubcontractingDocuments(_documentType, _filterKanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
