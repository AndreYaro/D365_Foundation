<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmUpdateBusRelStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmUpdateBusRelStatistics extends RunBaseBatch implements BatchRetryable
{
    DirPartyRecId       party;

    DialogField         fromDate;
    DialogField         toDate;
    DialogField         prevFromDate;
    DialogField         prevToDate;

    smmPeriodFrom       fromDateVal;
    smmPeriodTo         toDateVal;
    smmPeriodFrom       prevFromDateVal;
    smmPeriodTo         prevToDateVal;

    Amount              curRevenue;
    Amount              prevRevenue;

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        fromDateVal,
        toDateVal,
        prevFromDateVal,
        prevToDateVal,
        party,
        curRevenue,
        prevRevenue
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS80647";
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS80647";
    }

]]></Source>
			</Method>
			<Method>
				<Name>curRevenue</Name>
				<Source><![CDATA[
    Amount curRevenue()
    {
        return curRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();
        // Current year
        dialog.addGroup("@SYS96939");

        fromDate = dialog.addField(extendedTypeStr(smmPeriodFrom));
        toDate   = dialog.addField(extendedTypeStr(smmPeriodTo));

        fromDate.value(fromDateVal);
        toDate.value(toDateVal);

        // Previous year
        dialog.addGroup("@SYS96940");

        prevFromDate = dialog.addField(extendedTypeStr(smmPeriodFrom));
        prevToDate   = dialog.addField(extendedTypeStr(smmPeriodTo));

        prevFromDate.value(prevFromDateVal);
        prevToDate.value(prevToDateVal);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDateVal = fromDate.value();
        toDateVal   = toDate.value();
        prevFromDateVal  = prevFromDate.value();
        prevToDateVal = prevToDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurFromDate</Name>
				<Source><![CDATA[
    smmPeriodFrom parmCurFromDate(smmPeriodFrom _fromDate = fromDateVal)
    {
        fromDateVal = _fromDate;
        return fromDateVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurToDate</Name>
				<Source><![CDATA[
    smmPeriodTo parmCurToDate(smmPeriodTo _toDateVal = toDateVal)
    {
        toDateVal = _toDateVal;
        return toDateVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParty</Name>
				<Source><![CDATA[
    DirPartyRecId parmParty(DirPartyRecId _Party = Party)
    {
        Party = _Party;
        return Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevFromDate</Name>
				<Source><![CDATA[
    smmPeriodFrom parmPrevFromDate(smmPeriodFrom _fromDate = prevFromDateVal)
    {
        prevFromDateVal = _fromDate;
        return prevFromDateVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevToDate</Name>
				<Source><![CDATA[
    smmPeriodTo parmPrevToDate(smmPeriodTo _toDate = prevToDateVal)
    {
        prevToDateVal = _toDate;
        return prevToDateVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevRevenue</Name>
				<Source><![CDATA[
    Amount prevRevenue()
    {
        return prevRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Query               query;

        super();

        query = new Query(querystr(custUpdateFinancials));

        smmBusRelRevenue    busRelRevenue;
        select firstonly busRelRevenue where busRelRevenue.Party == Party;

        smmBusRelRevenue::updateFinancials(new QueryRun(query), fromDateVal, toDateVal);
        smmBusRelRevenue::updateFinancials(new QueryRun(query), prevFromDateVal, prevToDateVal);

        curRevenue  = busRelRevenue.calculateTotalRevenue(fromDateVal, toDateVal, false);
        prevRevenue = busRelRevenue.calculateTotalRevenue(prevFromDateVal, prevToDateVal, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean         ret;
        ProjPeriodLine  projPeriodLine;
        ProjPeriodId    periodId;
        int             n;

        ret = super(_calledFrom);

        if (ret)
        {
            periodId = smmParametersTable::find().PeriodId;

            if (!periodId)
            {
                // Period must be selected in CRM parameters.
                throw error("@SYS97163");
            }

            if (fromDate.value() && toDate.value() && fromDate.value() > toDate.value())
            {
                // From date must be before To date
                return checkFailed("@SYS91020");
            }
            if (!ProjPeriodLine::findFromPeriodFrom(periodId,fromDate.value())
                || !ProjPeriodLine::findFromPeriodTo(periodId,toDate.value()))
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }

            if (prevFromDate.value() && prevToDate.value() && prevFromDate.value() > prevToDate.value())
            {
                // From date must be before To date
                return checkFailed("@SYS91020");
            }
            if (!ProjPeriodLine::findFromPeriodFrom(periodId,prevFromDate.value())
                || !ProjPeriodLine::findFromPeriodTo(periodId,prevToDate.value()))
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
            select count(RecId) from projPeriodLine
                where projPeriodLine.PeriodId == periodId &&  projPeriodLine.PeriodFrom >= fromDateVal && projPeriodLine.PeriodTo <= toDateVal;

            n = any2int(projPeriodLine.RecId);

            select count(RecId) from projPeriodLine
                where projPeriodLine.PeriodId == periodId &&  projPeriodLine.PeriodFrom >= prevFromDateVal && projPeriodLine.PeriodTo <= prevToDateVal;

            if ( n != projPeriodLine.RecId)
            {
                // The number of periods for current year -%1 must be equal to number of periods for previous year -%2.
                return checkFailed(strfmt("@SYS96943",n,projPeriodLine.RecId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmUpdateBusRelStatistics   busRelUpdateBusRelStatistics;
        custTable                   custTable;
        smmBusRelRevenue            busRelRevenue;
        DirPartyRecId               Party;

        if (args && args.dataset() == tablenum(custTable))
        {
            custTable     = args.record();
            Party   = custTable.Party;
        }
        else if (args && args.dataset() == tablenum(smmBusRelRevenue))
        {
            busRelRevenue   = args.record();
            Party     = busRelRevenue.Party;
        }

        busRelUpdateBusRelStatistics = new smmUpdateBusRelStatistics();
        busRelUpdateBusRelStatistics.getLast();
        busRelUpdateBusRelStatistics.parmParty(Party);

        if (busRelUpdateBusRelStatistics.prompt())
        {
            busRelUpdateBusRelStatistics.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBusRelStatisticsTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all data from <c>smmBusRelStatisticsTmp</c> table.
    /// </summary>
    public static void resetBusRelStatisticsTmpData(smmBusRelStatisticsTmp _smmBusRelStatisticsTmp)
    {
        delete_from _smmBusRelStatisticsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRevenueLastThisData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load data for the revenue chart into temporary table.
    /// </summary>
    /// <param name = "_partyRecId">Indicates the party for which to load data.</param>
    /// <param name = "_lastYearFrom">Date for start of previous period.</param>
    /// <param name = "_lastYearTo">Date for end of previous period.</param>
    /// <param name = "_thisYearFrom">Date for start of current period.</param>
    /// <param name = "_thisYearTo">Date for end of current period.</param>
    /// <param name = "_smmBusRelStatisticsTmp">Buffer for temporary table.</param>
    /// <returns>true if data was loaded; otherwise, false.</returns>
    public static boolean loadRevenueLastThisData(DirPartyRecId _partyRecId, date _lastYearFrom, date _lastYearTo,
        date _thisYearFrom, date _thisYearTo, smmBusRelStatisticsTmp _smmBusRelStatisticsTmp)
    {
        smmUpdateBusRelStatistics::resetBusRelStatisticsTmpData(_smmBusRelStatisticsTmp);

        boolean                 foundData = false;

        smmBusRelRevenue busRelRevenue;
        select firstonly RecId from busRelRevenue
            where busRelRevenue.Party == _partyRecId;

        smmBusRelRevenueTrans   busRelRevenueTrans;
        smmBusRelRevenueTrans   busRelRevenueTransPrev;
        select FromDate, ToDate, AmountMST from busRelRevenueTransPrev
        where busRelRevenueTransPrev.RefRecId == busRelRevenue.RecId &&
                busRelRevenueTransPrev.FromDate >= _lastYearFrom && busRelRevenueTransPrev.ToDate <= _lastYearTo;

        while select FromDate, ToDate, AmountMST from busRelRevenueTrans
        where busRelRevenueTrans.RefRecId == busRelRevenue.RecId &&
                busRelRevenueTrans.FromDate >= _thisYearFrom && busRelRevenueTrans.ToDate <= _thisYearTo
        {
            foundData = true;
            str 100 label = strfmt("@SYS97016", date2StrUsr(busRelRevenueTransPrev.FromDate, DateFlags::FormatAll),
                                                date2StrUsr(busRelRevenueTransPrev.ToDate, DateFlags::FormatAll),
                                                date2StrUsr(busRelRevenueTrans.FromDate, DateFlags::FormatAll),
                                                date2StrUsr(busRelRevenueTrans.ToDate, DateFlags::FormatAll));
            smmBusRelStatisticsTmp::loadData(_smmBusRelStatisticsTmp, label, "@SYS96751", busRelRevenueTransPrev.AmountMST);
            smmBusRelStatisticsTmp::loadData(_smmBusRelStatisticsTmp, label, "@SYS96752", busRelRevenueTrans.AmountMST);

            next busRelRevenueTransPrev;
        }

        return foundData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load data for the item group chart into temporary table.
    /// </summary>
    /// <param name = "_custAccount">Indicates the customer for which to load data.</param>
    /// <param name = "_prevFromDate">Date for start of previous period.</param>
    /// <param name = "_prevToDate">Date for end of previous period.</param>
    /// <param name = "_curFromDate">Date for start of current period.</param>
    /// <param name = "_curToDate">Date for end of current period.</param>
    /// <param name = "_smmBusRelStatisticsTmp">Buffer for temporary table.</param>
    /// <returns>true if data was loaded; otherwise, false.</returns>
    public static boolean loadItemGroupData(CustAccount _custAccount,  date _prevFromDate, date _prevToDate,
        date _curFromDate, date _curToDate, smmBusRelStatisticsTmp _smmBusRelStatisticsTmp)
    {
        smmUpdateBusRelStatistics::resetBusRelStatisticsTmpData(_smmBusRelStatisticsTmp);

        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTrans    custInvoiceTrans;
        boolean             found = false;

        while select SalesId, InvoiceDate from custInvoiceJour
            where custInvoiceJour.OrderAccount == _custAccount
        {
            while select ItemId, LineAmount from custInvoiceTrans
                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
            {
                ItemGroupId itemGroupId = InventTable::find(custInvoiceTrans.ItemId).itemGroupId();

                if (custInvoiceJour.InvoiceDate >= _prevFromDate && custInvoiceJour.InvoiceDate <= _prevToDate)
                {
                    found = true;
                    smmBusRelStatisticsTmp::loadData(_smmBusRelStatisticsTmp, itemGroupId, "@SYS96940", custInvoiceTrans.LineAmount);
                }

                if (custInvoiceJour.InvoiceDate >= _curFromDate && custInvoiceJour.InvoiceDate <= _curToDate)
                {
                    found = true;
                    smmBusRelStatisticsTmp::loadData(_smmBusRelStatisticsTmp, itemGroupId, "@SYS96939", custInvoiceTrans.LineAmount);
                }
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load data for the item chart into temporary table.
    /// </summary>
    /// <param name = "_custAccount">Indicates the customer for which to load data.</param>
    /// <param name = "_prevFromDate">Date for start of previous period.</param>
    /// <param name = "_prevToDate">Date for end of previous period.</param>
    /// <param name = "_curFromDate">Date for start of current period.</param>
    /// <param name = "_curToDate">Date for end of current period.</param>
    /// <param name = "_smmBusRelStatisticsTmp">Buffer for temporary table.</param>
    /// <returns>true if data was loaded; otherwise, false.</returns>
    public static boolean loadItemData(CustAccount _custAccount,  date _prevFromDate, date _prevToDate,
        date _curFromDate, date _curToDate, smmBusRelStatisticsTmp _smmBusRelStatisticsTmp)
    {
        smmUpdateBusRelStatistics::resetBusRelStatisticsTmpData(_smmBusRelStatisticsTmp);

        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTrans    custInvoiceTrans;
        boolean             found = false;

        while select InvoiceDate from custInvoiceJour where custInvoiceJour.OrderAccount == _custAccount
              join ItemId, LineAmount from custInvoiceTrans
                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
        {
            if (custInvoiceJour.InvoiceDate >= _prevFromDate && custInvoiceJour.InvoiceDate <= _prevToDate)
            {
                found = true;
                smmBusRelStatisticsTmp::loadData(_smmBusRelStatisticsTmp, custInvoiceTrans.ItemId, "@SYS96940", custInvoiceTrans.LineAmount);
            }

            if (custInvoiceJour.InvoiceDate >= _curFromDate && custInvoiceJour.InvoiceDate <= _curToDate)
            {
                found = true;
                smmBusRelStatisticsTmp::loadData(_smmBusRelStatisticsTmp, custInvoiceTrans.ItemId, "@SYS96939", custInvoiceTrans.LineAmount);
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>