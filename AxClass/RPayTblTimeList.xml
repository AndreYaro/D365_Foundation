<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblTimeList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class-container for time list entity.
/// </summary>
final class RPayTblTimeList
{
    List periods;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the time to the end of list.
    /// </summary>
    /// <param name="_tblTime">
    /// The time.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addEnd(RPayTblTime _tblTime)
    {
        periods.addEnd(_tblTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>append</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the list with time.
    /// </summary>
    /// <param name="_list">
    /// The list.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void append(RPayTblTimeList _list)
    {
        if (_list && _list.elements())
        {
            this.periods().appendList(_list.periods());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clones the time list.
    /// </summary>
    /// <returns>
    /// The cloned time list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public anytype clone()
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        ListEnumerator le = this.periods().getEnumerator();
        List newPeriods = new List(Types::Class);

        while (le.moveNext())
        {
            newPeriods.addEnd(le.current().clone());
        }

        ret.periods(newPeriods);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of elements in the list.
    /// </summary>
    /// <returns>
    /// The number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter elements()
    {
        return periods.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if time lists are equal.
    /// </summary>
    /// <param name="_list">
    /// The list to compare to.
    /// </param>
    /// <returns>
    /// True if time lists are equal.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean equal(Object _list)
    {
        ListEnumerator la = this.periods().getEnumerator();
        ListEnumerator lb = _list.periods().getEnumerator();
        RPayTblTime a, b;
        boolean   found;

        if (this.periods().elements() != _list.periods().elements())
        {
            return false;
        }

        while (la.moveNext())
        {
            a = la.current();

            found = false;
            lb.reset();
            while (!found && lb.moveNext())
            {
                b = lb.current();
                found = b.equal(a);
            }

            if ( !found)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the time dimensions in the list.
    /// </summary>
    /// <param name="_dimensionMapFunc">
    /// The dimension mapping function.
    /// </param>
    /// <param name="_context">
    /// The time context.
    /// </param>
    /// <returns>
    /// The resulted time list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList fillDimension(RPayTblIDimensionFiller _dimensionMapFunc, RPayTblContext _context)
    {
        return _dimensionMapFunc.fill(this, _context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the filter to time list.
    /// </summary>
    /// <param name="_filter">
    /// The filter.
    /// </param>
    /// <param name="_context">
    /// The time context.
    /// </param>
    /// <returns>
    /// The filtered time list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList filter(RPayTblIFilter _filter, RPayTblContext _context)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        ListEnumerator le = this.periods().getEnumerator();

        while (le.moveNext())
        {
            if (_filter.isValid(le.current(), _context))
            {
                ret.addEnd(le.current().clone());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the time list is empty.
    /// </summary>
    /// <returns>
    /// True if the time list is empty.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isEmpty()
    {
        return periods.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        periods = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the list of periods.
    /// </summary>
    /// <param name="_periods">
    /// The list of periods, set if specified.
    /// </param>
    /// <returns>
    /// The list of periods.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List periods(List _periods = periods)
    {
        periods = _periods;

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the time list.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reverse()
    {
        ListEnumerator  le = periods.getEnumerator();
        RPayTblTime     time;

        while (le.moveNext())
        {
            time = le.current();
            time.reverse();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortWith</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts the time list.
    /// </summary>
    /// <param name="_comparer">
    /// The time comparer function.
    /// </param>
    /// <returns>
    /// The sorted time list.
    /// </returns>
    /// <remarks>
    /// _comparer is in-place function which returns absolute position of element as its hash code
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList sortWith(RPayTblTimeComparer _comparer)
    {
        RPayTblTimeList sortedList  = new RPayTblTimeList();
        Map             map         = new Map(Types::Container, Types::Class);
        Map             keyExtIdx   = new Map(Types::Container, Types::Integer);
        ListEnumerator  le          = periods.getEnumerator();
        MapEnumerator   me;
        container       con;
        Integer         keyExt;

        while (le.moveNext())
        {
            con = _comparer.getTblTimeHash(le.current());

            if (keyExtIdx.exists(con))
            {
                keyExt = keyExtIdx.lookup(con) + 1;
            }
            else
            {
                keyExt = 0;
            }

            keyExtIdx.insert(con, keyExt);

            con += keyExt; //add extension to key to avoid duplication

            map.insert(con, le.current());
        }

        me = map.getEnumerator();

        while (me.moveNext())
        {
            sortedList.addEnd(me.currentValue());
        }

        return sortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>substract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts time lists.
    /// </summary>
    /// <param name="_subtrahend">
    /// The list to subtract.
    /// </param>
    /// <param name="_substracter">
    /// The subtracter class.
    /// </param>
    /// <returns>
    /// The subtracted resulted time list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList substract(RPayTblTimeList _subtrahend, RPayTblSubstracter _substracter = new RPayTblSubstracter())
    {
        return _substracter.substract(this, _subtrahend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string description.
    /// </summary>
    /// <returns>
    /// The string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str toString()
    {
        str ret;
        ListEnumerator le = this.periods().getEnumerator();
        RPayTblTime tblTime;

        ret = "{";
        while (le.moveNext())
        {
            tblTime = le.current() as RPayTblTime;
            ret += "(" + tblTime.toString() + ")";
        }
        ret += "}";
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEndUniquePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds time period to the list without period duplication.
    /// </summary>
    /// <param name="_tblTime">
    /// The time period should be added.
    /// </param>
    /// <returns>
    /// The time list period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList addEndUniquePeriod(RPayTblTime _tblTime)
    {
        RPayTblTimeList ret = new RPayTblTimeList(), addTimeList = new RPayTblTimeList(), addTimeListIterate = new RPayTblTimeList();
        RPayTblTime     time, addTime;
        ListEnumerator  le = periods.getEnumerator(), leAdd;

        void addPeriod(StartDate _startDate, EndDate _endDate, RPayTblTime _addTime)
        {
            RPayTblTime     newTime;

            newTime = _addTime.clone();
            newTime.parmStartDate(_startDate);
            newTime.parmEndDate(_endDate);
            addTimeList.addEnd(newTime);
        }

        addTimeList.addEnd(_tblTime);

        while (le.moveNext())
        {
            time = le.current();

            addTimeListIterate = addTimeList.clone();
            leAdd = addTimeListIterate.periods().getEnumerator();
            addTimeList = new RPayTblTimeList();

            while (leAdd.moveNext())
            {
                addTime = leAdd.current();

                if (RPayTblTime::isIntersects(time, addTime) && time.dimension().equal(addTime.dimension()))
                {
                    if (addTime.parmStartDate() < time.parmStartDate())
                    {
                        addPeriod(addTime.parmStartDate(), time.parmStartDate() - 1, addTime);
                    }

                    if (addTime.parmEndDate() > time.parmEndDate())
                    {
                        addPeriod(time.parmEndDate() + 1, addTime.parmEndDate(), addTime);
                    }
                }
                else
                {
                    addPeriod(addTime.parmStartDate(), addTime.parmEndDate(), addTime);
                }
            }
        }

        ret = this.clone();
        ret.append(addTimeList);

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>