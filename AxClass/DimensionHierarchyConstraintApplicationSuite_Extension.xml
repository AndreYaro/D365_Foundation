<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionHierarchyConstraintApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(DimensionHierarchyConstraint))]
internal final class DimensionHierarchyConstraintApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setHierarchyActivatingStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void setHierarchyActivatingStatus(DimensionHierarchyId _hierarchyId, boolean _isActivating, RecID _batchId)
    {
        next setHierarchyActivatingStatus(_hierarchyId, _isActivating, _batchId);

        if (_isActivating)
        {
            DimensionHierarchyView draftDimensionHierarchyView = DimensionHierarchyView::findByHierarchy(_hierarchyId);

            if (DimensionHierarchyConstraint::isDraftStructureDifferentThanActiveStructure(draftDimensionHierarchyView)
                && DimensionHierarchyConstraint::isAccountStructureBudgetControlled(draftDimensionHierarchyView.ActiveRecId)
                && DimensionHierarchyConstraint::doesActiveStructureReferenceExistInBudgetTransLine(draftDimensionHierarchyView.ActiveRecId))
            {
                warning("@budget:RunBudgetControlDimensionValueProviderDataMaintenance");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesActiveStructureReferenceExistInBudgetTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there is an entry in budget transaction line with given dimension hierarchy (Account structure).
    /// </summary>
    /// <param name = "_accountStructureId">
    /// Dimension hierarchy Id.
    /// </param>
    /// <returns>
    /// Return true if entry with given dimension hierarchy exists in budget transaction line.
    /// </returns>
    internal static boolean doesActiveStructureReferenceExistInBudgetTransLine(DimensionHierarchyId _accountStructureId)
    {
        BudgetTransactionLine budgetTransactionLine;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        select firstonly RecId from dimensionAttributeValueCombination
            exists join budgetTransactionLine
                where budgetTransactionLine.LedgerDimension == dimensionAttributeValueCombination.RecId
                    && dimensionAttributeValueCombination.AccountStructure == _accountStructureId;

        return dimensionAttributeValueCombination.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountStructureBudgetControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the given account structure is budget controlled or not
    /// </summary>
    /// <param name = "_accountStructureId">
    /// Dimension hierarchy Id.
    /// </param>
    /// <returns>
    /// Return true if the account structure is budget controlled.
    /// </returns>
    internal static boolean isAccountStructureBudgetControlled(DimensionHierarchyId _accountStructureId)
    {
        BudgetControlConfiguration  budgetControlConfiguration;

        select firstonly RecId from budgetControlConfiguration
            where budgetControlConfiguration.IsActive== NoYes::Yes
                && budgetControlConfiguration.DimensionHierarchyAccountStructure == _accountStructureId;

        return budgetControlConfiguration.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDraftStructureDifferentThanActiveStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the draft dimension hierarchy's (Account structure) segments have changed from the active dimension hierarchy.
    /// </summary>
    /// <param name = "_draftDimensionHierarchyView">
    /// Draft dimension hierarchy view.
    /// </param>
    /// <returns>
    /// Return true if draft dimension hierarchy's segments is different than the active dimension hierarchy's segments.
    /// </returns>
    internal static boolean isDraftStructureDifferentThanActiveStructure(DimensionHierarchyView _draftDimensionHierarchyView)
    {
        DimensionHierarchyView activeDimensionHierarchyView;
        select firstonly activeDimensionHierarchyView
            where activeDimensionHierarchyView.ActiveRecId == _draftDimensionHierarchyView.ActiveRecId
                && activeDimensionHierarchyView.IsDraft == 0;

        return activeDimensionHierarchyView.Segments != _draftDimensionHierarchyView.Segments;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>