<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPolicyRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for handling price and discount policy rules for tables mapped to the <c>PriceDiscResultFields</c> policy table map.
/// </summary>
abstract class PriceDiscPolicyRule 
{
    private PriceDiscResultFields priceDiscResultFields;

    private PriceDiscPolicyRule origInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializePriceDiscResultFields</Name>
				<Source><![CDATA[
    private void initializePriceDiscResultFields(PriceDiscResultFields _priceDiscResultFields)
    {
        priceDiscResultFields = _priceDiscResultFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscResultFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public PriceDiscResultFields parmPriceDiscResultFields()
    {
        return priceDiscResultFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceCalcTriggeringPolicyFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the list of policy fields that trigger price/discount calculation.
    /// </summary>
    /// <returns>
    /// The <c>PriceDiscPolicyFieldList</c> object containing policy fields, that trigger price/discount calculation.
    /// </returns>
    [Hookable(false)]
    final public PriceDiscPolicyFieldList priceCalcTriggeringPolicyFieldList()
    {
        PriceDiscPolicyFieldList priceCalcTriggeringPolicyFieldList = PriceDiscPolicyFieldList::newList();

        this.addPriceCalcTriggeringPolicyFields(priceCalcTriggeringPolicyFieldList);

        return priceCalcTriggeringPolicyFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPriceCalcTriggeringPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds policy fields to the list, that trigger price/discount calculation.
    /// </summary>
    /// <param name = "_priceCalcTriggeringPolicyFieldList">
    /// A <c>PriceDiscPolicyFieldList</c> object to add policy fields to.
    /// </param>
    protected void addPriceCalcTriggeringPolicyFields(PriceDiscPolicyFieldList _priceCalcTriggeringPolicyFieldList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceCalcTriggeringFieldDependent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a triggering of price discount calculation is dependent on changes to field values.
    /// </summary>
    /// <returns>
    /// true if price discount calculation is field dependent; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean isPriceCalcTriggeringFieldDependent()
    {
        return this.priceCalcTriggeringPolicyFieldList().policyFieldListElements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDiscResultFieldsChanged</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean isPriceDiscResultFieldsChanged()
    {
        PriceDiscPolicyFieldMappingCache fieldMapping = PriceDiscResultFields::tableFieldMapping();
        Common priceDiscResultFieldsOrig = this.parmPriceDiscResultFields().orig();
        Common current = this.parmPriceDiscResultFields();

        Enumerator triggeringFieldsSetEnumerator = this.priceCalcTriggeringPolicyFieldList().getEnumerator();

        while (triggeringFieldsSetEnumerator.moveNext())
        {
            PriceDiscPolicyField policyField = triggeringFieldsSetEnumerator.current();
            FieldId fieldId = fieldMapping.policyField2TableField(this.parmPriceDiscResultFields().TableId, policyField);

            if (!fieldId)
            {
                // A field mapping must be implemented between the tables as table mappings on the specific table.
                // It could be a missing registration of an extension in the PriceDiscPolicyFieldMappingCache.addPolicyTableMap() method.

                throw error(strFmt("@SCM:PriceDiscMissingTableFieldMapping",
                    tableId2Name(this.parmPriceDiscResultFields().TableId), 
                    tableId2Name(policyField.parmTableMapId()),
                    fieldId2Name(policyField.parmTableMapId(), policyField.parmTableMapFieldId())));
            }

            if (current.(fieldId) != priceDiscResultFieldsOrig.(fieldId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceCalcTriggerFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a field that is a price discount trigger has changed.
    /// </summary>
    /// <returns>
    /// true if a price discount trigger has changed in value; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean isPriceCalcTriggerFieldChanged()
    {
        boolean ret = true;

        if (this.isPriceCalcTriggeringFieldDependent())
        {
            ret = this.isPriceDiscResultFieldsChanged();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreatePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether a price discount change policy can be created for a certain policy field.
    /// </summary>
    /// <param name="_policyField">
    /// The <c>PriceDiscPolicyField</c> object representing the policy field.
    /// </param>
    /// <returns>
    /// true if the price discount policy can be created, otherwise; false.
    /// </returns>
    [Hookable(false)]
    final public boolean canCreatePolicy(PriceDiscPolicyField _policyField)
    {
        return this.canCreateFixedPolicy(_policyField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateFixedPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether a price discount change policy can be created for a certain policy field.
    /// </summary>
    /// <param name="_policyField">
    /// The <c>PriceDiscPolicyField</c> object representing the policy field.
    /// </param>
    /// <returns>
    /// true if the price discount policy can be created, otherwise; false.
    /// </returns>
    protected boolean canCreateFixedPolicy(PriceDiscPolicyField _policyField)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoTotalDiscountEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether automatic calculation of the total discount percentage is enabled.
    /// </summary>
    /// <returns>
    /// true if the automatic calculation of the total discount percentage is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isAutoTotalDiscountEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSystemPolicyFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of default system policy fields.
    /// </summary>
    /// <returns>
    /// A <c>PriceDiscPolicyFieldList</c> object containing the default policy fields.
    /// </returns>
    abstract public PriceDiscPolicyFieldList retrieveSystemPolicyFieldList(PriceDiscPolicyFindOrCreate _policyFindOrCreate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchPolicyDialogForSinglePolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog for a single policy field.
    /// </summary>
    /// <param name="_policyField">
    /// A <c>PriceDiscPolicyField</c>object to launch the dialog for.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean launchPolicyDialogForSinglePolicyField(PriceDiscPolicyField _policyField)
    {
        return this.launchPolicyDialog(_policyField, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchPolicyDialogForAllPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog for all policy fields.
    /// </summary>
    /// <param name="_showLineItem">
    /// A boolean controlling if item and line number should be displayed in the dialog. Default value is false.
    /// </param>
    /// <param name="_skipTriggerFieldCheck">
    /// A boolean specifying whether changes to price discount trigger fields should be verified.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean launchPolicyDialogForAllPolicyFields(
        boolean _showLineItem,
        boolean _skipTriggerFieldCheck)
    {
        return this.launchPolicyDialog(null, _showLineItem, _skipTriggerFieldCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchPolicyDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog.
    /// </summary>
    /// <param name = "_tableMapField">
    /// The <c>PriceDiscPolicyField</c> object representing the policy field.
    /// </param>
    /// <param name = "_showLineItem">
    /// A boolean controlling if item and line number should be displayed in the dialog. Default value is false.
    /// </param>
    /// <param name = "_skipTriggerFieldCheck">
    /// A boolean specifying whether changes to price discount trigger fields should be verified.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>
    protected boolean launchPolicyDialog(
        PriceDiscPolicyField    _tableMapField,
        boolean                 _showLineItem,
        boolean                 _skipTriggerFieldCheck)
    {
        boolean                 ret = true;
        PriceDiscPolicyDialog   priceDiscPolicyDialog;
        PriceDiscResultFields   localPriceDiscResultFields;

        boolean shouldLaunchPolicyDialog = RetailPricingSalesDocumentHelper::shouldLaunchPolicyDialogForSalesDocument(
            this.parmPriceDiscResultFields().TableId,
            this.parmPriceDiscResultFields().SalesPurchId);

        if (shouldLaunchPolicyDialog && PriceDiscResultFields::isPriceDiscPolicyEnabled(this.parmPriceDiscResultFields().TableId))
        {
            if (this.parmPriceDiscResultFields().ManualEntryChangePolicy
                || this.parmPriceDiscResultFields().SystemEntryChangePolicy)
            {
                //External clients needs special handling as the runbase dialog only works for the rich client.
                if (clientKind() == ClientType::COMObject)
                {
                    if (this.parmPriceDiscResultFields().ManualEntryChangePolicy
                        || this.parmPriceDiscResultFields().SystemEntryChangePolicy)
                    {
                        warning("@SYS138345");
                        if (this.parmPriceDiscResultFields().ManualEntryChangePolicy)
                        {
                            this.parmPriceDiscResultFields().ManualEntryChangePolicy = 0;
                        }

                        if (this.parmPriceDiscResultFields().SystemEntryChangePolicy)
                        {
                            this.parmPriceDiscResultFields().SystemEntryChangePolicy = 0;
                        }
                    }
                }
                else
                {
                    if (appl.ttsLevel() == 0)
                    {
                        boolean runDialog = _skipTriggerFieldCheck;

                        if (!runDialog)
                        {
                            runDialog = this.isPriceCalcTriggerFieldChanged();
                        }

                        if (runDialog)
                        {
                            if (_tableMapField)
                            {
                                priceDiscPolicyDialog = PriceDiscPolicyDialog::newForSingleField(this.parmPriceDiscResultFields(), _tableMapField);
                            }
                            else
                            {
                                priceDiscPolicyDialog = PriceDiscPolicyDialog::newForAllFields(this.parmPriceDiscResultFields(), _showLineItem);
                            }

                            ret                   = priceDiscPolicyDialog.runPolicyDialog();

                            if (ret)
                            {
                                localPriceDiscResultFields   = priceDiscPolicyDialog.parmPriceDiscResultFields();
                                this.parmPriceDiscResultFields().SystemEntryChangePolicy = localPriceDiscResultFields.SystemEntryChangePolicy;
                                this.parmPriceDiscResultFields().SystemEntrySource       = localPriceDiscResultFields.SystemEntrySource;
                                this.parmPriceDiscResultFields().ManualEntryChangePolicy = localPriceDiscResultFields.ManualEntryChangePolicy;
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceUpdateLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean forceUpdateLineAmount()
    {
        boolean ret = true;

        if (PriceDiscResultFields::isPriceDiscPolicyEnabled(this.parmPriceDiscResultFields().TableId))
        {
            
            if (this.parmPriceDiscResultFields().ManualEntryChangePolicy)
            {
                this.parmPriceDiscResultFields().ManualEntryChangePolicy = 0;
            }

            if (this.parmPriceDiscResultFields().SystemEntryChangePolicy)
            {
                this.parmPriceDiscResultFields().SystemEntryChangePolicy = 0;
            }
            
            if (this.parmPriceDiscResultFields().SystemEntrySource)
            {
                this.parmPriceDiscResultFields().SystemEntrySource = PriceDiscSystemSource::None;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PriceDiscPolicyRule</c> object based on the <c>PriceDiscResultFields</c> orig-record.
    /// </summary>
    /// <returns>
    /// The instantiated <c>PriceDiscPolicyRule</c> object.
    /// </returns>
    final public PriceDiscPolicyRule origInstance()
    {
        if (!origInstance)
        {
            origInstance = PriceDiscPolicyRule::createInstance(this.parmPriceDiscResultFields().orig());
        }

        return origInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PriceDiscPolicyRule</c> object based on the provided <c>SalesPurchLine</c> record.
    /// </summary>
    /// <param name = "_priceDiscResultFields">
    /// A record to create a <c>PriceDiscPolicyRule</c> object for.
    /// </param>
    /// <returns>
    /// The instantiated <c>PriceDiscPolicyRule</c> object.
    /// </returns>
    [Hookable(false)]
    public static PriceDiscPolicyRule createInstance(Common _priceDiscResultFields)
    {
        PriceDiscPolicyRuleFactoryAttribute attr = new PriceDiscPolicyRuleFactoryAttribute(tableId2Name(_priceDiscResultFields.tableId));
        
        PriceDiscPolicyRule instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PriceDiscPolicyRule), attr) as PriceDiscPolicyRule;

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance.initializePriceDiscResultFields(_priceDiscResultFields);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>