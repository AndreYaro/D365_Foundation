<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureOperationCodesUpdate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base class for the facture operation code update procedure.
/// </summary>
class FactureOperationCodesUpdate_RU extends RunBase
{
    FactureOperationTypeCodes_RU    factureOperationTypeCodesFrom;
    FactureOperationTypeCodes_RU    factureOperationTypeCodesTo;

    ForeignResident_RU          foreignResident;
    MemberOfCustomsUnion_RU     memberOfCustomsUnion;
    LogisticsLocationRoleType   roleType;
    ModuleCustVend              custVend;

    DialogField factureOperationTypeCodesFromDialogField;
    DialogField factureOperationTypeCodesToDialogField;

    DialogField custVendDialogField;
    DialogField foreignResidentDialogField;
    DialogField memberOfCustomsUnionDialogField;
    DialogField roleTypeDialogField;

    QueryRun    queryRun;
    Set         markedLinesSet;

    protected const int currentVersionIL = 1;
    protected const int currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addContragentDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends contragent datasource to the query and apply selected filters.
    /// </summary>
    protected void addContragentDataSource()
    {
        Query query = queryRun.query();
        QueryBuildDataSource qbdsContragent, qbdsDirPartyLocation,
        qbdsDirPartyLocationRole, qbdsLogisticsLocationRole,
        qbdsLogisticsPostalAddress, qbdsLogisticsAddressCountryRegion;
        RefTableId contragentTableId = (custVend == ModuleCustVend::Cust) ? tablenum(CustTable) : tablenum(VendTable);
        RefFieldId contragentPartyFieldId = (custVend == ModuleCustVend::Cust) ? fieldnum(CustTable, Party) : fieldnum(VendTable, Party);
        RefFieldId contragentForeignResidentFieldId = (custVend == ModuleCustVend::Cust) ? fieldnum(CustTable, ForeignResident_RU) : fieldnum(VendTable, ForeignResident_RU);
        RefFieldId contragentAccountNum = (custVend == ModuleCustVend::Cust) ? fieldnum(CustTable, AccountNum) : fieldnum(VendTable, AccountNum);

        qbdsContragent = query.dataSourceTable(contragentTableId);

        if (!qbdsContragent)
        {
            qbdsContragent = query.dataSourceTable(tablenum(FactureJour_RU)).addDataSource(contragentTableId);
            qbdsContragent.relations(false);
            qbdsContragent.addLink(fieldnum(FactureJour_RU, CustVendInvoiceAccount), contragentAccountNum);
            qbdsContragent.joinMode(JoinMode::ExistsJoin);
        }

        findOrCreateRange_W(qbdsContragent, contragentForeignResidentFieldId, queryValue(foreignResident));

        qbdsDirPartyLocation = qbdsContragent.addDataSource(tablenum(DirPArtyLocation));
        qbdsDirPartyLocation.addLink(contragentPartyFieldId, fieldnum(DirPArtyLocation, Party));
        qbdsDirPartyLocation.joinMode(JoinMode::ExistsJoin);

        qbdsDirPartyLocation.addRange(fieldnum(DirPArtyLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
        qbdsDirPartyLocation.addRange(fieldnum(DirPArtyLocation, IsPrimary)).value(queryValue(NoYes::Yes));

        if (DirPArtyLocation::isDenormalizedRole(roleType))
        {
            qbdsDirPartyLocation.addRange(DirPArtyLocation::denormalizedRoleFieldId(roleType)).value(queryValue(NoYes::Yes));
        }
        else
        {
            qbdsDirPartyLocationRole = qbdsDirPartyLocation.addDataSource(tableNum(DirPartyLocationRole));
            qbdsDirPartyLocationRole.addLink(fieldNum(DirPArtyLocation, RecId), fieldNum(DirPartyLocationRole, PartyLocation));
            qbdsDirPartyLocationRole.joinMode(JoinMode::ExistsJoin);

            qbdsLogisticsLocationRole = qbdsDirPartyLocationRole.addDataSource(tableNum(LogisticsLocationRole));
            qbdsLogisticsLocationRole.addLink(fieldNum(DirPartyLocationRole, LocationRole), fieldNum(LogisticsLocationRole, RecId));
            qbdsLogisticsLocationRole.joinMode(JoinMode::ExistsJoin);
            qbdsLogisticsLocationRole.addRange(fieldNum(LogisticsLocationRole, Type)).value(queryValue(roleType));
        }

        qbdsLogisticsPostalAddress = qbdsDirPartyLocation.addDataSource(tableNum(LogisticsPostalAddress));
        qbdsLogisticsPostalAddress.addLink(fieldNum(DirPArtyLocation, Location), fieldNum(LogisticsPostalAddress, Location));
        qbdsLogisticsPostalAddress.joinMode(JoinMode::ExistsJoin);

        qbdsLogisticsAddressCountryRegion = qbdsLogisticsPostalAddress.addDataSource(tableNum(LogisticsAddressCountryRegion));
        qbdsLogisticsAddressCountryRegion.addLink(fieldNum(LogisticsPostalAddress, CountryRegionId), fieldNum(LogisticsAddressCountryRegion, CountryRegionId));
        qbdsLogisticsAddressCountryRegion.joinMode(JoinMode::ExistsJoin);
        qbdsLogisticsAddressCountryRegion.addRange(fieldNum(LogisticsAddressCountryRegion, MemberOfCustomsUnion_RU)).value(queryValue(memberOfCustomsUnion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return FactureOperationCodesUpdate_RU::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the transaction has been selected by user to update.
    /// </summary>
    /// <param name="_transRecId">
    /// The record identificator.
    /// </param>
    /// <returns>
    /// true if given trasaction has been selected to update; false. otherwise.
    /// </returns>
    protected boolean check(RefRecID _transRecId)
    {
        return markedLinesSet.in(_transRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countTotal</Name>
				<Source><![CDATA[
    protected Counter countTotal()
    {
        QueryRun                queryRunTotal = new QueryRun(queryRun.pack());
        queryBuildDataSource    qbds;

        qbds = queryRunTotal.query().dataSourceNo(1);
        qbds.addSelectionField(fieldnum(Common, RecId), SelectionField::Count);

        queryRunTotal.next();
        return any2int(queryRunTotal.getNo(1).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS109972");
        factureOperationTypeCodesFromDialogField = dialog.addFieldValue(extendedTypeStr(FactureOperationTypeCodes_RU), factureOperationTypeCodesFrom);
        dialog.addGroup("@SYS81168");
        factureOperationTypeCodesToDialogField = dialog.addFieldValue(extendedTypeStr(FactureOperationTypeCodes_RU), factureOperationTypeCodesTo);
        dialog.addGroup("@GLS103250");
        memberOfCustomsUnionDialogField = dialog.addFieldValue(extendedTypeStr(MemberOfCustomsUnion_RU), memberOfCustomsUnion);
        foreignResidentDialogField = dialog.addFieldValue(extendedTypeStr(ForeignResident_RU), foreignResident);
        roleTypeDialogField = dialog.addFieldValue(enumStr(LogisticsLocationRoleType), roleType);
        custVendDialogField = dialog.addFieldValue(enumStr(ModuleCustVend), custVend, "@GLS111888", "@GLS114506");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFactureDate_External</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdFactureDate_External(Common _common)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFactureExternalId</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdFactureExternalId(Common _common)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdOperationTypeCodes</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdOperationTypeCodes(Common _common = null)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        factureOperationTypeCodesTo     = factureOperationTypeCodesToDialogField.value();
        factureOperationTypeCodesFrom   = factureOperationTypeCodesFromDialogField.value();
        custVend                        = custVendDialogField.value();
        foreignResident                 = foreignResidentDialogField.value();
        roleType                        = roleTypeDialogField.value();
        memberOfCustomsUnion            = memberOfCustomsUnionDialogField.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewFactureOperationTypeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies facture operation code replacing to the given operation code.
    /// </summary>
    /// <param name="_operationTypeCodes">
    /// The givend facture operation code.
    /// </param>
    /// <returns>
    /// The new facture operation code with replaced values.
    /// </returns>
    public FactureOperationTypeCodes_RU getNewFactureOperationTypeCode(FactureOperationTypeCodes_RU _operationTypeCodes)
    {
        FactureOperationTypeCodes_RU ret;

        if (!factureOperationTypeCodesFrom)
        {
            ret = factureOperationTypeCodesTo;
        }
        else
        {
            ret = strReplace(_operationTypeCodes, factureOperationTypeCodesFrom, factureOperationTypeCodesTo);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        this.initMarkedLinesSet();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        if (!_args)
        {
            throw error(Error::missingParameter(this));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkedLinesSet</Name>
				<Source><![CDATA[
    protected void initMarkedLinesSet()
    {
        markedLinesSet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        roleType = LogisticsLocationRoleType::Delivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the form name user will be prompted to accept changes.
    /// </summary>
    /// <returns>
    /// The form name user will be prompted to accept changes.
    /// </returns>
    /// <remarks>
    /// The method should be overridden.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// In case when method has not been overridden.
    /// </exception>
    protected str linesForm()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesFormBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the buffer for the lines form user will be prompted to accept changes.
    /// </summary>
    /// <returns>
    /// The buffer for the lines form user will be prompted to accept changes.
    /// </returns>
    /// <remarks>
    /// The method should be overridden.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// In case when method has not been overridden.
    /// </exception>
    protected Common linesFormBuffer()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks all transaction for the current query.
    /// </summary>
    /// <returns>
    /// The packed Set of record ids of selected transactions.
    /// </returns>
    public container markAll()
    {
        Common common;
        QueryRun queryRunLoc = new QueryRun(this.queryRun().pack());
        QueryBuildDataSource qbds;

        this.initMarkedLinesSet();

        qbds = queryRunLoc.query().dataSourceNo(1);
        qbds.addSelectionField(fieldnum(Common, RecId));

        queryRunLoc.reset();

        while (queryRunLoc.next())
        {
            common = queryRunLoc.getNo(1);
            markedLinesSet.add(common.RecId);
        }

        return markedLinesSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, 
                factureOperationTypeCodesFrom,
                factureOperationTypeCodesTo,
                foreignResident,
                memberOfCustomsUnion,
                roleType,
                custVend, 
                queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs class members for runing in IL.
    /// </summary>
    /// <returns>
    /// The container of packed members.
    /// </returns>
    protected container packIL()
    {
        return [currentVersionIL, this.pack(), markedLinesSet.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkedLinesSet</Name>
				<Source><![CDATA[
    public container parmMarkedLinesSet(container _packedSet = markedLinesSet.pack())
    {
        markedLinesSet = Set::create(_packedSet);
        return markedLinesSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Promps user of accepting changes.
    /// </summary>
    /// <returns>
    /// true if form closed as OK; false, otherwise.
    /// </returns>
    protected boolean promptLines()
    {
        FormRun         formRun;
        Args            args = new Args(this.linesForm());

        this.updateQueryRun();

        this.initMarkedLinesSet();

        args.caller(this);
        args.record(this.linesFormBuffer());

        formRun = classFactory.formRunClass(args);
        formRun.run();
        formRun.wait();

        if (!formRun.closedOk())
        {
            info("@GLS101992");
        }

        return formRun.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshs datasource after operation completed.
    /// </summary>
    protected void refreshDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #AVIFiles
        #OCCRetryCount
        Common common;

        try
        {
            this.progressInit("@SYS4081809", this.countTotal(), #AviUpdate);
            ttsbegin;

            while (queryRun.next())
            {
                common = queryRun.getNo(1);
                this.parmProgress().setText(strfmt('%1 %2', common.(this.getFieldIdFactureExternalId(common)), common.(this.getFieldIdFactureDate_External(common))));
                this.parmProgress().incCount();

                if (this.check(common.RecId))
                {
                    this.updateCode(common);
                }
            }

            ttscommit;
        }
        catch (exception::DeadLock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmptyOperationTypeCodesFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets empty string value to the facture operation code field.
    /// </summary>
    protected void setEmptyOperationTypeCodesFilter()
    {
        findOrCreateRange_W(queryRun.query().dataSourceNo(1), this.getFieldIdOperationTypeCodes(), SysQuery::valueEmptyString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        boolean     ret = true;
        container   queryPacked;

        switch (version)
        {
            case currentVersion:
                [   version, 
                    factureOperationTypeCodesFrom,
                    factureOperationTypeCodesTo,
                    foreignResident,
                    memberOfCustomsUnion,
                    roleType,
                    custVend, 
                    queryPacked] = _packedClass;

                if (SysQuery::isPackedOk(queryPacked))
                {
                    queryRun = new QueryRun(queryPacked);
                }

                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks class members for runing in IL.
    /// </summary>
    /// <param name="_packedILClass">
    /// The container with packed class by packIL method.
    /// </param>
    /// <returns>
    /// true if unpack completed successfully; false, otherwise.
    /// </returns>
    protected boolean unpackIL(container _packedILClass)
    {
        Integer     version = RunBase::getVersion(_packedILClass);
        boolean     ret = true;
        container   classPacked, setPacked;

        switch (version)
        {
            case currentVersionIL:
                [version, classPacked, setPacked] = _packedILClass;

                ret = this.unpack(classPacked);

                markedLinesSet = Set::create(setPacked);

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCode</Name>
				<Source><![CDATA[
    protected void updateCode(Common _common)
    {
        Common origRecord = _common.data();
        FieldId operationTypeCodesFieldId = this.getFieldIdOperationTypeCodes(_common);

        _common.selectForUpdate(true);

        _common.(operationTypeCodesFieldId) = this.getNewFactureOperationTypeCode(_common.(operationTypeCodesFieldId));

        if (origRecord.(operationTypeCodesFieldId) != _common.(operationTypeCodesFieldId))
        {
            _common.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRun</Name>
				<Source><![CDATA[
    protected void updateQueryRun()
    {
        if (!factureOperationTypeCodesFrom)
        {
            this.setEmptyOperationTypeCodesFilter();
        }

        this.addContragentDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!factureOperationTypeCodesTo)
        {
            ret = checkfailed(strfmt("@GLS103654", "@SYS4081779" + ' ' + "@SYS81168"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@SYS4081809";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FactureOperationCodesUpdate_RU factureOperationCodesUpdate = FactureOperationCodesUpdate_RU::newOperationCodesUpdate(_args);

        if (factureOperationCodesUpdate.prompt() && factureOperationCodesUpdate.promptLines())
        {
            // Run process as IL
            FactureOperationCodesUpdate_RU::runIL([classId2Name(classIdGet(factureOperationCodesUpdate)), factureOperationCodesUpdate.packIL()]);
            factureOperationCodesUpdate.refreshDS();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOperationCodesUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the object of the facture operation code updating depending on a given parameters.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    /// <returns>
    /// The child inctance of the <c>FactureOperationCodesUpdate_RU</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// In the case of wrong input parameters.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// In the case of wrong input dataset.
    /// </exception>
    public static FactureOperationCodesUpdate_RU newOperationCodesUpdate(Args _args)
    {
        FactureOperationCodesUpdate_RU factureOperationCodesUpdate;

        if (!_args || !_args.dataset())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_args.dataset())
        {
            case tablenum(PurchBookTable_RU):
                factureOperationCodesUpdate = new FactureOperationCodesUpdatePurchBook_RU();
                break;
            case tablenum(SalesBookTable_RU):
                factureOperationCodesUpdate = new FactureOperationCodesUpdateSalesBook_RU();
                break;
            case tablenum(FactureJour_RU):
                factureOperationCodesUpdate = new FactureOperationCodesUpdateFacture_RU();
                break;
            default:
                throw error(Error::missingRecord(funcName()));
        }

        factureOperationCodesUpdate.init();
        factureOperationCodesUpdate.initFromArgs(_args);

        return factureOperationCodesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    private static server container runIL(container _pack)
    {
        FactureOperationCodesUpdate_RU  instance;
        ClassName                       className;
        container                       packedILClass;

        [className, packedILClass] = _pack;
        instance = SysDictClass::newName(className).makeObject();

        if (instance.unpackIL(packedILClass))
        {
            instance.runOperation();
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>