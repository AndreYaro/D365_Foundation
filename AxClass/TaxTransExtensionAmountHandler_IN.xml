<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransExtensionAmountHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransExtensionAmountHandler_IN</c> class is the handler of the tax transaction extension amount.
/// </summary>
public class TaxTransExtensionAmountHandler_IN extends TaxTransExtensionQuantityHandler_IN
{
    TaxModelVATable_IN          taxModelVATable;
    TaxModelSalesTaxable_IN     taxModelSalesTaxable;
    TaxModelCustomsTaxable_IN   taxModelCustomsTaxable;
    TaxModelServiceTaxable_IN   taxModelServiceTaxable;

    TaxModelTaxTransactionImpl_IN taxTransaction;

    TaxType_IN                  taxType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax type information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxType_IN</c> class.
    /// </returns>
    protected TaxType_IN getTaxType()
    {
        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the TaxTrans extension
    /// </summary>
    public void init()
    {
        taxType = TaxTable::find(TaxTransaction.parmTaxCode()).TaxType_IN;

        switch (this.getTaxType())
        {
            case TaxType_IN::Customs :
                taxModelCustomsTaxable = taxModelTaxable as TaxModelCustomsTaxable_IN;
                break;
            case TaxType_IN::VAT :
                taxModelVATable = taxModelTaxable as TaxModelVATable_IN;
                break;
            case TaxType_IN::SalesTax :
                taxModelSalesTaxable = taxModelTaxable as TaxModelSalesTaxable_IN;
                break;
            case TaxType_IN::ServiceTax :
                taxModelServiceTaxable = taxModelTaxable as TaxModelServiceTaxable_IN;
                break;
            case TaxType_IN::Excise :
                taxModelExciseTaxable = taxModelTaxable as TaxModelExciseTaxable_IN;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataPartyRegisteration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data party registeration information.
    /// </summary>
    /// <param name="_taxInformation">
    /// The tax information.
    /// </param>
    protected void setDataPartyRegisteration(TaxInformation_IN _taxInformation)
    {
        switch (this.getTaxType())
        {
            case TaxType_IN::Customs :
            case TaxType_IN::VAT :
            case TaxType_IN::SalesTax :
            case TaxType_IN::ServiceTax :
                taxTransExtension.CustVendRegistrationNumber = _taxInformation.getTaxRegistrationNumbersTable(this.getTaxType()).RecId;
                break;
            case TaxType_IN::Excise :
                super(_taxInformation);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax data.
    /// </summary>
    protected void setDataTax()
    {
        TaxModelTaxTransaction_IN taxTransTable;

        taxTransExtension.RefRecId                = taxTransaction.getRecId();
        this.setDataTaxSetup();
        this.setDataTaxAmounts();

        taxTransTable = taxTransaction.getTaxTransactionTable();
        if (taxTransTable.TableId == tableNum(TaxTrans))
        {
            this.setDataTaxTransTable(taxTransTable);
        }

        switch (this.getTaxType())
        {
            case TaxType_IN::Customs :
                this.setDataTaxCustoms();
                this.setDataTaxCustomsAccounts();
                break;
            case TaxType_IN::VAT :
                this.setDataTaxVAT();
                this.setDataTaxVATAccounts();
                break;
            case TaxType_IN::SalesTax :
                this.setDataTaxSales();
                this.setDataTaxSalesAccounts();
                break;
            case TaxType_IN::ServiceTax :
                this.setDataTaxService();
                this.setDataTaxServiceAccounts();
                break;
            case TaxType_IN::Excise :
                this.setDataTaxExcise();
                this.setDataTaxExciseAccounts();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data tax amounts.
    /// </summary>
    protected void setDataTaxAmounts()
    {
        taxTransExtension.VoucherCurrency               = taxTransaction.parmCurrencyCode();
        taxTransExtension.SourceCurrencyCode            = taxTransaction.parmSourceCurrencyCode();
        taxTransExtension.TaxCurrency                   = taxTransaction.parmCurrencyCode();
        taxTransExtension.InventTransId                 = taxTransaction.parmInventTransId();
        taxTransExtension.Source                        = taxTransaction.parmSource();
        taxTransExtension.TransDate                     = taxTransaction.parmTransDate();
        taxTransExtension.TaxType                       = this.getTaxType();
        taxTransExtension.Exempt                        = taxTransaction.parmExemptTax();

        taxTransExtension.SourceTaxAmountCur            = taxTransaction.parmSourceTaxAmountCur();
        taxTransExtension.SourceBaseAmountCurRegulated  = taxTransaction.parmSourceBaseAmountCurRegulated();
        taxTransExtension.SourceRegulateAmountCur       = taxTransaction.parmSourceRegulateAmountCur();
        taxTransExtension.SourceBaseAmountCur           = taxTransaction.parmSourceBaseAmountCur();
        taxTransExtension.SourceTaxAmountCur            = taxTransaction.parmSourceTaxAmountCur();
        taxTransExtension.TaxAmount                     = taxTransaction.parmTaxAmount();
        taxTransExtension.TaxAmountSecondary            = CurrencyExchangeHelper::amountMST2MSTSecond_RU(taxTransExtension.TaxAmount, taxTransExtension.TransDate);
        taxTransExtension.AbatementAmount               = taxTransaction.parmAbatementAmount();
        taxTransExtension.PostedTaxAmout                = taxTransaction.getPostedTaxAmount();
        taxTransExtension.LoadOnInventoryAmount         = taxTransaction.parmLoadOnInventoryTax();
        if (taxTransaction.parmClaimPercentage())
        {
            taxTransExtension.DeferredAmount            = taxTransExtension.PostedTaxAmout * (100 - taxTransaction.parmClaimPercentage()) / 100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxCustoms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax customs.
    /// </summary>
    protected void setDataTaxCustoms()
    {
        taxTransExtension.CompanyRegistrationNumber  = taxModelCustomsTaxable.getCustomsTaxRegistrationRefRecId();
        taxTransExtension.CustomsTariffCodeTable     = taxModelCustomsTaxable.getCustomsTariffCodeRefRecId();
        taxTransExtension.CustomsDirection           = taxModelCustomsTaxable.getCustomsDirection();

        taxTransExtension.ApplyExcise               = TaxComponentTable_IN::find(taxTransExtension.TaxComponentTable).ApplyExcise;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxCustomsAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data tax customs accounts.
    /// </summary>
    protected void setDataTaxCustomsAccounts()
    {
        TaxAccountType_IN accountType;
        LedgerDimensionAccount taxAccount;

        accountType = taxModelCustomsTaxable.getCustomsTaxAccountType(TaxOnItem::find(taxTransExtension.TaxItemGroup, taxTransExtension.TaxCode));
        taxAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTransExtension.RefRecId);

        switch (accountType)
        {
            case TaxAccountType_IN::CustomsExportDutyPayableAccount:
                taxTransExtension.ExportDutyPayLedgerDimension = taxAccount;
                break;
            case TaxAccountType_IN::CustomsExportDutyExpenseAccount:
                taxTransExtension.ExportDutyExpenseLedgerDimension = taxAccount;
                break;
            case TaxAccountType_IN::CustomsImportDutyPayableAccount:
                taxTransExtension.ImportDutyPayLedgerDimension = taxAccount;
                break;
            case TaxAccountType_IN::CustomsImportDutyExpenseAccount:
                taxTransExtension.ImportDutyExpenseLedgerDimension = taxAccount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax excise information.
    /// </summary>
    protected void setDataTaxExcise()
    {
        super();
        taxTransExtension.ClaimPercentage   = taxTransaction.parmClaimPercentage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxExciseAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax excise accounts.
    /// </summary>
    protected void setDataTaxExciseAccounts()
    {
        TaxAccountType_IN accountType;
        LedgerDimensionAccount taxAccount;

        accountType = taxModelExciseTaxable.getExciseTaxAccountType(TaxOnItem::find(taxTransExtension.TaxItemGroup, taxTransExtension.TaxCode));
        taxAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTransExtension.RefRecId);

        switch (accountType)
        {
            case TaxAccountType_IN::ExcisePayableAccount:
                taxTransExtension.PayableLedgerDimension = taxAccount;
                taxTransExtension.PayableAmount = taxTransExtension.PostedTaxAmout - taxTransExtension.DeferredAmount;
                break;
            case TaxAccountType_IN::ExciseRG23DPayableAccount:
                taxTransExtension.rg23dcenvatCreditTransLedgerDimension = taxAccount;
                taxTransExtension.rg23dcenvatCreditTransferredAmount = taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::ExciseRecoverableAccount:
                taxTransExtension.RecoverableLedgerDimension = taxAccount;
                taxTransExtension.RecoverableAmount  = taxTransExtension.PostedTaxAmout - taxTransExtension.DeferredAmount;
                break;
            case TaxAccountType_IN::ExciseRG23DRecoverableAccount:
                taxTransExtension.rg23dcenvatCreditLedgerDimension = taxAccount;
                taxTransExtension.rg23dcenvatCreditAmount = taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::ExciseDeferredRG23AAccount:
                taxTransExtension.rg23aDeferredLedgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(taxTransExtension.TaxLedgerAccountGroup,
                                                                                                         accountType,
                                                                                                         taxTransExtension.TaxComponentTable).LedgerDimension;
                taxTransExtension.rg23aDeferredAmount = taxTransExtension.DeferredAmount;
                break;
            case TaxAccountType_IN::ExciseDeferredRG23CAccount:
                taxTransExtension.rg23cDeferredLedgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(taxTransExtension.TaxLedgerAccountGroup,
                                                                                                         accountType,
                                                                                                         taxTransExtension.TaxComponentTable).LedgerDimension;
                taxTransExtension.rg23cDeferredAmount = taxTransExtension.DeferredAmount;
                break;
            case TaxAccountType_IN::ExcisePLAAccount:
                taxTransExtension.plaLedgerDimension = taxAccount;
                taxTransExtension.PayableAmount = taxTransExtension.PostedTaxAmout - taxTransExtension.DeferredAmount;
                break;
            case TaxAccountType_IN::ExciseExpenseAccount:
                taxTransExtension.ExpenseLedgerDimension = taxAccount;
                taxTransExtension.ExpenseAmount = taxTransExtension.PostedTaxAmout;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data tax sales information.
    /// </summary>
    protected void setDataTaxSales()
    {
        taxTransExtension.CompanyRegistrationNumber  = taxModelSalesTaxable.getSalesTaxRegistrationRefRecId();
        taxTransExtension.SalesTaxFormTypes      = taxModelSalesTaxable.getSalesTaxFormTypesRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxSalesAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax sales accounts informaiton.
    /// </summary>
    protected void setDataTaxSalesAccounts()
    {
        TaxAccountType_IN accountType;
        LedgerDimensionAccount taxAccount;

        accountType = taxModelSalesTaxable.getSalesTaxAccountType(TaxOnItem::find(taxTransExtension.TaxItemGroup, taxTransExtension.TaxCode));
        taxAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTransExtension.RefRecId);

        switch (accountType)
        {
            case TaxAccountType_IN::SalesTaxPayableAccount:
                taxTransExtension.PayableLedgerDimension = taxAccount;
                taxTransExtension.RecoverableAmount  =  taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::SalesTaxExpenseAccount:
                taxTransExtension.ExpenseLedgerDimension = taxAccount;
                taxTransExtension.PayableAmount  =  taxTransExtension.PostedTaxAmout;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax service information.
    /// </summary>
    protected void setDataTaxService()
    {
        taxTransExtension.CompanyRegistrationNumber  = taxModelServiceTaxable.getServiceTaxRegistrationRefRecId();
        taxTransExtension.ServiceCodeTable           = taxModelServiceTaxable.getServiceCodeRefRecId();
        taxTransExtension.gtaServiceCategory         = taxModelServiceTaxable.getServiceGTACategory();
        taxTransExtension.MinorHead                  = ServiceCodeTable_IN::find(taxTransExtension.ServiceCodeTable).MinorHead;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxServiceAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax service accounts information.
    /// </summary>
    protected void setDataTaxServiceAccounts()
    {
        TaxAccountType_IN accountType;
        LedgerDimensionAccount taxAccount;

        accountType = taxModelServiceTaxable.getServiceTaxAccountType(TaxOnItem::find(taxTransExtension.TaxItemGroup, taxTransExtension.TaxCode));
        taxAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTransExtension.RefRecId);

        switch (accountType)
        {
            case TaxAccountType_IN::ServiceTaxInterimPayableAccount:
                taxTransExtension.InterimRecoverableLedgerDimension = taxAccount;
                taxTransExtension.RecoverableAmount = taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::ServiceTaxRecoverableAccount:
                taxTransExtension.ServiceRecoverableLedgerDimension = taxAccount;
                taxTransExtension.RecoverableAmount = taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::ServiceTaxPayableAccount:
                taxTransExtension.ServicePayableLedgerDimension = taxAccount;
                taxTransExtension.PayableAmount = taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::ServiceTaxExpenseAccount:
                taxTransExtension.ExpenseLedgerDimension = taxAccount;
                taxTransExtension.ExpenseAmount = taxTransExtension.PostedTaxAmout;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax setup information.
    /// </summary>
    protected void setDataTaxSetup()
    {
        TaxOnItem       taxOnItem;
        TaxGroupData    taxGroupData;
        TaxTable        taxTable;

        taxTransExtension.TaxCode                         = taxTransaction.parmTaxCode();
        taxTransExtension.TaxGroup                        = taxTransaction.parmTaxGroup();
        taxTransExtension.TaxItemGroup                    = taxTransaction.parmTaxItemGroup();
        taxOnItem  = TaxOnItem::find(taxTransExtension.TaxItemGroup, taxTransExtension.TaxCode);
        taxGroupData = TaxGroupData::find(taxTransExtension.TaxGroup, taxTransExtension.TaxCode);
        taxTable   = TaxTable::find(taxTransExtension.TaxCode);

        taxTransExtension.LoadOnInventoryPercent    = taxOnItem.LoadOnInventoryPercent_IN;
        taxTransExtension.AbatementPercent          = taxOnItem.AbatementPercent_IN;
        taxTransExtension.vatScheduleName           = taxGroupData.vatScheduleName_IN;

        taxTransExtension.TaxLedgerAccountGroup     = taxTable.TaxLedgerAccountGroup_IN;
        taxTransExtension.TaxComponentTable         = taxTable.TaxComponentTable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax trans table.
    /// </summary>
    /// <param name="_taxTrans">
    /// The tax transaction.
    /// </param>
    protected void setDataTaxTransTable(TaxTrans _taxTrans)
    {
        taxTransExtension.TaxPeriod     = _taxTrans.TaxPeriod;
        taxTransExtension.TaxValue      = _taxTrans.TaxValue;
        taxTransExtension.Voucher       = _taxTrans.Voucher;
        taxTransExtension.ExemptCode    = _taxTrans.ExemptCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tax data in VAT.
    /// </summary>
    protected void setDataTaxVAT()
    {
        taxTransExtension.CompanyRegistrationNumber  = taxModelVATable.getVATRegistrationRefRecId();
        taxTransExtension.NonRecoverablePct          = taxModelVATable.getVATNonRecoverablePercent();
        taxTransExtension.vatGoodsType               = taxModelVATable.getVATGoodsType();

        if (taxTransExtension.vatGoodsType == VATGoodsType_IN::CapitalGoods)
        {
            if (DefermentScheduleTrans_IN::existExtRecId(taxTransExtension.SourceRecId))
            {
                taxTransExtension.vatDefermentExtRecId    = taxTransExtension.SourceRecId;
                taxTransExtension.vatDeferementExtTableId = taxTransExtension.SourceTableId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTaxVATAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data tax VAT accounts.
    /// </summary>
    protected void setDataTaxVATAccounts()
    {
        TaxAccountType_IN accountType;
        LedgerDimensionAccount taxAccount;

        accountType = taxModelVATable.getVATAccountType(TaxOnItem::find(taxTransExtension.TaxItemGroup, taxTransExtension.TaxCode));
        taxAccount = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTransExtension.RefRecId);

        switch (accountType)
        {
            case TaxAccountType_IN::VATRecoverableAccount:
                taxTransExtension.RecoverableLedgerDimension = taxAccount;
                taxTransExtension.RecoverableAmount  =  taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::VATPayableAccount:
                taxTransExtension.PayableLedgerDimension = taxAccount;
                taxTransExtension.PayableAmount  =  taxTransExtension.PostedTaxAmout;
                break;
            case TaxAccountType_IN::VATDeferredAccount:
                taxTransExtension.DeferredLedgerDimension = taxAccount;
                taxTransExtension.DeferredAmount  =  taxTransExtension.PostedTaxAmout;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax transaction object.
    /// </summary>
    /// <param name="_taxTransaction">
    /// The given taxTransaction object
    /// </param>
    public void setTaxTransaction(TaxModelTaxTransactionImpl_IN _taxTransaction)
    {
        taxTransaction = _taxTransaction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>