<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateRouteBurden</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdJournalCreateRouteBurden</c> class creates a burden route card journal.
/// </summary>
class ProdJournalCreateRouteBurden extends ProdJournalCreateRoute
{
    PmfProdCoBy             pmfProdCoBy;
    Amount                  currentProductionCost;
    boolean                 reversalOnly;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBurdenTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the by-product burden journal lines.
    /// </summary>
    /// <param name="_qty">
    /// By product quantity.
    /// </param>
    /// <param name="_burdenAmount">
    /// Burden amount.
    /// </param>
    /// <remarks>
    /// Creates a route transaction that will carry the cost of the burden item. We put it
    /// on a route tranasction so that cost will be left separate from material issue where with costing
    /// of the order or the inventory closing/recalc will cause matching of issues/receipts based on
    /// the inventory model that will cause the material cost to change.
    /// </remarks>
    private void createBurdenTrans(
        Qty         _qty,
        Amount      _burdenAmount)
    {
        if (_qty && _burdenAmount)
        {
            prodJournalRoute.clear();
            prodJournalTableData.initJournalId();
            prodJournalRoute.ProdId             = this.parmProdId();

            prodJournalRoute.JournalId          = prodJournalTable.JournalId;
            prodJournalRoute.QtyGood            = _qty;
            prodJournalRoute.QtyError           = 0;
            prodJournalRoute.Hours              = 0;

            prodJournalRoute.CategoryQtyId = ProdParameters::find().PmfBurdenCostCategory;

            prodJournalRoute.QtyPrice          = _burdenAmount / _qty;

            prodJournalRoute.JobFinished        = NoYes::Yes;
            prodJournalRoute.LineNum            = ProdJournalRoute::lastLineNum(prodJournalTable.JournalId) + 1.0;
            prodJournalRoute.JobType            = RouteJobType::Burden;
            prodJournalRoute.TransDate          = this.parmTransDate();
            prodJournalRoute.OprNum             = 0;
            prodJournalRoute.WrkCtrId           = '';
            prodJournalRoute.DefaultDimension   = prodJournalRoute.copyDimension(ProdTable::find(this.parmProdId()).DefaultDimension);

            prodJournalRoute.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineForBurdenEstimation</Name>
				<Source><![CDATA[
    private void createLineForBurdenEstimation()
    {
        Amount                      burdenAmt;
        InventQty                   burdenQty;

        switch (pmfProdCoBy.BurdenType)
        {
            case PmfBurdenType::Percent :
                // the field burden.OverheadAmt contains in this case a percent of the cost of material + route consumption (prodTableJour.AmountFinancial)
                burdenQty = this.parmCurrentProductionCost();
                burdenAmt = pmfProdCoBy.OverheadAmt / 100 * burdenQty;
                break;
            case PmfBurdenType::PerSeries :
                if (pmfProdCoBy.CoByQty != 0)
                {
                    burdenQty = pmfProdCoBy.QtyCoByCalc;
                    burdenAmt = pmfProdCoBy.OverheadAmt * burdenQty / pmfProdCoBy.CoByQty;
                }
                break;
            case PmfBurdenType::PerQuantity :
                if (pmfProdCoBy.CoByQty != 0)
                {
                    burdenQty = pmfProdCoBy.inventTransIdSum().physical();
                    burdenAmt = pmfProdCoBy.OverheadAmt * burdenQty / pmfProdCoBy.CoByQty;
                }
                break;
        }

        this.createBurdenTrans(burdenQty, burdenAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesForBurdenReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal lines reversing the previous burden estimation.
    /// </summary>
    private void createLinesForBurdenReversal()
    {
        ProdRouteTrans prodRouteTransToBeReversed;

        while select forUpdate prodRouteTransToBeReversed
        where   prodRouteTransToBeReversed.ServiceInventDimId == pmfProdCoBy.InventDimId &&
                prodRouteTransToBeReversed.ServiceItemId      == pmfProdCoBy.ItemId &&
                prodRouteTransToBeReversed.JobType            == RouteJobType::Burden &&
                prodRouteTransToBeReversed.TransRefId         == pmfProdCoBy.ProdId &&
                prodRouteTransToBeReversed.Cancelled          == NoYes::No &&
                prodRouteTransToBeReversed.Calculated         == NoYes::No
        {
            this.reverseProdRouteTrans(prodRouteTransToBeReversed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesProdRoute</Name>
				<Source><![CDATA[
    protected void createLinesProdRoute()
    {
        this.createLinesForBurdenReversal();
        if (!reversalOnly)
        {
            this.createLineForBurdenEstimation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentProductionCost</Name>
				<Source><![CDATA[
    public Amount parmCurrentProductionCost(Amount _currentProductionCost = currentProductionCost)
    {
        currentProductionCost = _currentProductionCost;
        return currentProductionCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProdCoBy</Name>
				<Source><![CDATA[
    public void parmPmfProdCoBy(PmfProdCoBy _pmfProdCoBy)
    {
        pmfProdCoBy = _pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalOnly</Name>
				<Source><![CDATA[
    public boolean parmReversalOnly(boolean _reversalOnly = reversalOnly)
    {
        reversalOnly = _reversalOnly;
        return reversalOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdJournalCreateRouteBurden</c> class instance.
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// The <c>PmfProdCoBy</c> record for which the journal should be created.
    /// </param>
    /// <returns>
    /// The <c>ProdJournalCreateRouteBurden</c> class instance.
    /// </returns>
    public static ProdJournalCreateRouteBurden newFromPmfProdCoBy(PmfProdCoBy _pmfProdCoBy)
    {
        ProdJournalCreateRouteBurden prodJournalCreateRouteBurden = new ProdJournalCreateRouteBurden();

        prodJournalCreateRouteBurden.parmPmfProdCoBy(_pmfProdCoBy);
        prodJournalCreateRouteBurden.parmProdId(_pmfProdCoBy.ProdId);
        prodJournalCreateRouteBurden.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        prodJournalCreateRouteBurden.parmJournalNameId(ProdParametersDim::find(_pmfProdCoBy.InventDimId).RouteJournalNameId);

        prodJournalCreateRouteBurden.init();

        return prodJournalCreateRouteBurden;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>