<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDisc_LineDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDisc_LineDisc
{
    ModuleInventPurchSales  moduleType;
    ItemId                  itemId;
    InventDim               inventDim;
    UnitOfMeasureSymbol     unitID;
    TransDate               discDate;
    Qty                     qty;
    CustVendAC              accountNum;
    CurrencyCode            currencyCode;
    LineDiscCode            accountLineDiscCode;
    InventLineDiscCode      itemLineDiscCode;
    Num                     orderNum;

    DiscAmount              discAmount;
    DiscPct                 discPct;
    DiscPct                 discPercent1;
    DiscPct                 discPercent2;

    boolean                 lineDiscFound;
    NoYes                   priceDiscAgreementExist;
    NoYes                   mcrTradePromoAgreementExist;
    boolean                 useRetailPricing;

    // <GEERU>
    AgreementHeaderExtRecId_RU agreementHeaderExtRecId;
    CustVendAC                 agreementPartnerCode;
    NoYes                      ruAgreementExists;
    #ISOCountryRegionCodes
    // </GEERU>

    SalesPurchLine          salesPurchLine;

    DiscAmount              discAmtTradePromo;
    DiscPct                 discPctTradePromo;

    RecordSortedList        recordSortedListPriceDiscTable;
    RecordSortedList        recordSortedListMerchEventPricing;

    #define.TAMPromotionCustExistsCacheScope('TAMPromotionCustExistsCacheScope')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementExists_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an agreement exists for an item or account combination.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value of Yes if a discount agreement exists; otherwise, a
    ///    <c>NoYes::No</c> enumeration value.
    /// </returns>
    public NoYes agreementExists_RU()
    {
        return ruAgreementExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAgreementExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a discount agreement exists for an item or account combination.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value of Yes if a discount agreement exists; otherwise, a
    ///    <c>NoYes::No</c> enumeration value.
    /// </returns>
    public NoYes discAgreementExist()
    {
        return (priceDiscAgreementExist || mcrTradePromoAgreementExist) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public DiscAmount discAmount()
    {
        this.findLineDiscAgreement();

        return discAmount + discAmtTradePromo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPct</Name>
				<Source><![CDATA[
    public DiscPct discPct()
    {
        this.findLineDiscAgreement();

        return discPct + discPctTradePromo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters()
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(this.parmModuleType());
        parameters.parmItemId( this.parmItemId());
        parameters.parmInventDim(this.parmInventDim());
        parameters.parmUnitID(this.parmUnitID());
        parameters.parmPriceDiscDate(this.parmDiscDate());
        parameters.parmQty(this.parmQty());
        parameters.parmAccountNum(this.parmAccountNum());
        parameters.parmCurrencyCode(this.parmCurrencyCode());

        parameters.parmAgreementHeaderExt_RU(this.parmAgreementHeaderExt_RU());
        parameters.parmAgreementPartnerCode_RU(this.parmAgreementPartnerCode_RU());
        parameters.parmUseRetailPricing(this.parmUseRetailPricing());

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineDiscAgreement</Name>
				<Source><![CDATA[
    public void findLineDiscAgreement()
    {
        this.mcrFindTradePromoLineDisc();

        container               recordListContainer;
        SysRecordSortedList     recordSortedList;

        if (lineDiscFound)
        {
            return;
        }

        PriceDiscParameters parameters = this.createAndInitPriceDiscParameters();
        PriceDisc priceDisc = this.createPriceDiscInstance(parameters);
        TradeAgreementInstrumentationLogger tradeAgreementInstrumentationLogger = TradeAgreementInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = tradeAgreementInstrumentationLogger.tradeAgreementPriceDisc_LineDiscActivities().findLineDiscAgreement())
        {
            tradeAgreementInstrumentationLogger.logInformation(TradeAgreementInstrumentationPriceDisc_LineDiscActivities::serializeBasicRunParameters(parameters).toString());

            priceDiscAgreementExist = priceDisc.findLineDisc(this.parmItemLineDiscCode(), this.parmAccountLineDiscCode());
        }
        this.retrieveAndSetLineDiscFields(priceDisc);

        lineDiscFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAndSetLineDiscFields</Name>
				<Source><![CDATA[
    protected void retrieveAndSetLineDiscFields(PriceDisc _priceDisc)
    {
        discAmount  = _priceDisc.lineDiscAmount();
        discPct = _priceDisc.lineDiscPct();
        discPercent1 = _priceDisc.percent1();
        discPercent2 = _priceDisc.percent2();
        this.parmMCRPriceDiscTableList(_priceDisc.parmMCRPriceDiscTableList());

        ruAgreementExists = _priceDisc.parmPriceDiscParameters().parmAgreementExists_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscFound</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line discounts were calculated.
    /// </summary>
    /// <returns>
    ///    true if the line discounts have been calculated; otherwise, false.
    /// </returns>
    public boolean lineDiscFound()
    {
        return lineDiscFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAddTAMMerchEventPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>TAMMerchEventPricing</c> record into the class level record list.
    /// </summary>
    /// <param name="_tamMerchEventPricing">
    /// The <c>TAMMerchEventPricing</c> record to be inserted into the record list.
    /// </param>
    public void mcrAddTAMMerchEventPricing(TAMMerchEventPricing _tamMerchEventPricing)
    {
        recordSortedListMerchEventPricing.ins(_tamMerchEventPricing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradePromoLineDiscApplyForModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if trade promotion discounts apply for the current trade module type.
    /// </summary>
    /// <returns>true, if trade promotion discounts apply for trade module type; otherwise, false.</returns>
    protected boolean tradePromoLineDiscApplyForModuleType()
    {
        return moduleType == ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTamPromotionCustomersExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if promition customers exist or not.
    /// </summary>
    /// <returns>
    /// true if one or more records exists for the current company; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean doTamPromotionCustomersExist()
    {
        SysGlobalObjectCache cache = new SysGlobalObjectCache();
        container key = [getCurrentPartition(), curExt()];
        boolean result;

        // Checks to see if TAM functionality is even in use.
        // If it is, store the result in the SysGlobalObjectCache.
        container cacheValue = cache.find(#TAMPromotionCustExistsCacheScope, key);
        
        if (cacheValue == conNull())
        {
            TAMPromotionCust tamPromotionCust;

            select firstOnly RecId from tamPromotionCust;

            result = tamPromotionCust.RecId != 0;
            cacheValue = [result];
            cache.insert(#TAMPromotionCustExistsCacheScope, key, cacheValue);
        }
        else
        {
            [result] = conPeek(cacheValue, 1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindTradePromoLineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates trade promotions discounts if the configuration
    /// key is turned on and the related module is sales.
    /// </summary>
    public void mcrFindTradePromoLineDisc()
    {
        if (this.tradePromoLineDiscApplyForModuleType())
        {
            boolean canFindPriceDiscTradePromo = true;

            if (PriceDisc_LineDisc::doTamPromotionCustomersExist())
            {
                // Reinitialize list to clear out any previously found merchandising pricing.
                recordSortedListMerchEventPricing = new RecordSortedList(tableNum(TAMMerchEventPricing));
                recordSortedListMerchEventPricing.sortOrder(fieldNum(TAMMerchEventPricing, RecId));

                // Do not find off-invoice discounts for item requirement and subscription orders.
                if (salesPurchLine.TableId == tableNum(SalesLine))
                {
                    SalesLine   salesLine = salesPurchLine as SalesLine;
                    SalesTable  salesTable = salesLine.salesTable();

                    if (salesTable.recid && (salesTable.SalesType    == SalesType::ItemReq || salesTable.SalesType == SalesType::Subscription))
                    {
                        canFindPriceDiscTradePromo = false;
                    }
                }

                if (canFindPriceDiscTradePromo)
                {
                    [discAmtTradePromo, discPctTradePromo] = TAMPromotionItem::findPriceDiscTradePromo(this);

                    mcrTradePromoAgreementExist = (discAmtTradePromo != 0) || (discPctTradePromo != 0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        currencyCode    = Ledger::accountingCurrency(CompanyInfo::current());
        discDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        lineDiscFound   = false;

        recordSortedListMerchEventPricing = new RecordSortedList(tableNum(TAMMerchEventPricing));
        recordSortedListMerchEventPricing.sortOrder(fieldNum(TAMMerchEventPricing, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmAccountLineDiscCode(LineDiscCode _accountLineDiscCode = accountLineDiscCode)
    {
        if (_accountLineDiscCode != accountLineDiscCode)
        {
            lineDiscFound = false;
        }

        accountLineDiscCode = _accountLineDiscCode;
        return accountLineDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    public CustVendAC parmAccountNum(CustVendAC _accountNum = accountNum)
    {
        if (_accountNum != accountNum)
        {
            lineDiscFound = false;
        }

        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    public AgreementHeaderExtRecId_RU parmAgreementHeaderExt_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = agreementHeaderExtRecId)
    {
        if (_agreementHeaderExtRecId != agreementHeaderExtRecId)
        {
            lineDiscFound = false;
        }
        agreementHeaderExtRecId = _agreementHeaderExtRecId;
        return agreementHeaderExtRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementPartnerCode_RU</Name>
				<Source><![CDATA[
    public CustVendAC parmAgreementPartnerCode_RU(CustVendAC _agreementPartnerCode = agreementPartnerCode)
    {
        if (_agreementPartnerCode != agreementPartnerCode)
        {
            lineDiscFound = false;
        }
        agreementPartnerCode = _agreementPartnerCode;
        return agreementPartnerCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        if (_currencyCode != currencyCode)
        {
            lineDiscFound = false;
        }

        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscDate</Name>
				<Source><![CDATA[
    public TransDate parmDiscDate(TransDate _discDate = discDate)
    {
        if (_discDate != discDate)
        {
            lineDiscFound = false;
        }

        discDate = _discDate;
        return discDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim.data())
    {
        if (!prmisdefault(_inventDim) && !InventDim::isInventDimEqual(_inventDim, inventDim))
        {
            lineDiscFound = false;
        }

        inventDim = _inventDim.data();
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (_itemId != itemId)
        {
            lineDiscFound = false;
        }

        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemLineDiscCode</Name>
				<Source><![CDATA[
    public InventLineDiscCode parmItemLineDiscCode(InventLineDiscCode _itemLineDiscCode = itemLineDiscCode)
    {
        if (_itemLineDiscCode != itemLineDiscCode)
        {
            lineDiscFound = false;
        }

        itemLineDiscCode = _itemLineDiscCode;
        return itemLineDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRMerchEventList</Name>
				<Source><![CDATA[
    public RecordSortedList parmMCRMerchEventList()
    {
        return recordSortedListMerchEventPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPriceDiscTableList</Name>
				<Source><![CDATA[
    public RecordSortedList parmMCRPriceDiscTableList(RecordSortedList _recordSortedList = recordSortedListPriceDiscTable)
    {
        recordSortedListPriceDiscTable = _recordSortedList;
        return recordSortedListPriceDiscTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales parmModuleType(ModuleInventPurchSales _moduleType = moduleType)
    {
        if (_moduleType != moduleType)
        {
            lineDiscFound = false;
        }

        moduleType = _moduleType;
        return moduleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    public Num parmOrderNum(Num _orderNum = orderNum)
    {
        if (_orderNum != orderNum)
        {
            lineDiscFound = false;
        }

        orderNum = _orderNum;
        return orderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        if (_qty != qty)
        {
            lineDiscFound = false;
        }

        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitID</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitID(UnitOfMeasureSymbol _unitID = unitID)
    {
        if (_unitID != unitID)
        {
            lineDiscFound = false;
        }
        unitID = _unitID;
        return unitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PriceDisc_LineDisc construct()
    {
        return new PriceDisc_LineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamPromotionCustClearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the trade allowance promotion customer cache used by the <c>mcrFindTradePromoLineDisc</c> method.
    /// </summary>
    public static void tamPromotionCustClearCache()
    {
        SysGlobalObjectCache cache = new SysGlobalObjectCache();

        cache.clear(#TAMPromotionCustExistsCacheScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
    public SalesPurchLine parmSalesPurchLine(SalesPurchLine _salesPurchLine = salesPurchLine)
    {
        // A promotion record that isn't saved yet could be used resulting in no price agreement being found
        // After saving the record, we want to enable the code to search again for a discount.
        if (!salesPurchLine.RecId && _salesPurchLine.RecId)
        {
            lineDiscFound = false;
        }

        salesPurchLine = _salesPurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRetailPricing</Name>
				<Source><![CDATA[
    public boolean parmUseRetailPricing(boolean _useRetailPricing = useRetailPricing)
    {
        useRetailPricing = _useRetailPricing;
        return useRetailPricing;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>