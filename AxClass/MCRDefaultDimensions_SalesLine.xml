<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRDefaultDimensions_SalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRDefaultDimensions_SalesLine</c> class is used to find and set default dimensions for a <c>SalesLine</c>.
/// </summary>
class MCRDefaultDimensions_SalesLine extends MCRDefaultDimensions
{
    SalesLine salesLine;
    MCRSalesLine mcrSalesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the default dimensions based on which part of the hierarchy is being evaluated.
    /// </summary>
    /// <param name="_mcrItemOrCustOrCatalog">
    /// Specifies whether finding dimensions for item, customer, or catalog.
    /// </param>
    protected void determineDimensions(MCRItemOrCustOrCatalog _mcrItemOrCustOrCatalog)
    {
        switch (_mcrItemOrCustOrCatalog)
        {
            case MCRItemOrCustOrCatalog::Customer  :
                this.setCustomerDefaults();
                break;

            case MCRItemOrCustOrCatalog::Item      :
                this.setItemDefaults();
                break;

            case MCRItemOrCustOrCatalog::Catalog   :
                if (mcrSalesLine.SourceId)
                {
                    this.setCatalogDefaults();
                }
                break;

            default:
                throw error (strfmt("@MCR10766", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatalogDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the catalog dimensions off of the <c>Catalog</c> table.
    /// </summary>
    /// <returns>
    /// The catalog default dimensions.
    /// </returns>
    protected DimensionDefault getCatalogDimensions()
    {
        return Catalog::find(MCRSourceCodeSetup::find(mcrSalesLine.SourceId).Catalog).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the customer dimensions off of the <c>CustTable</c>.
    /// </summary>
    /// <returns>
    /// The default customer dimensions.
    /// </returns>
    protected DimensionDefault getCustDimensions()
    {
        return CustTable::find(salesLine.CustAccount).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the item dimensions off of the <c>InventTable</c>.
    /// </summary>
    /// <returns>
    /// the default item dimensions for the item.
    /// </returns>
    protected DimensionDefault getItemDimensions()
    {
        return InventTable::find(salesLine.ItemId).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the table buffer passed in to the global variable <c>salesLine</c> upon
    /// creating an instance of this class.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> table buffer passed in for default dimension processing.
    /// </param>
    public void new(SalesLine _salesLine)
    {
        super();
        salesLine = _salesLine;
        mcrSalesLine = salesLine.mcrSalesLine();
        this.setMCRSourceCode(mcrSalesLine.SourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the global variable to the table buffer.
    /// </summary>
    protected void setDimensions()
    {
        salesLine.DefaultDimension = salesLine.copyDimension(dimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSiteDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the site dimension link if active.
    /// </summary>
    protected void setSiteDimension()
    {
        salesLine.inventDim().modifiedInventSiteFromParent(salesLine);
        this.setDefaults(salesLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy of how to assign dimensions and then set the dimensions.
    /// </summary>
    public void setDefaultDimensions()
    {
        if (!this.shouldCleanCurrentDimensions())
        {
            // Blank out the dimension on source code modified, this way
            // the defaulting will come from the hierarchy set up on the AR parameters
            // field AccountRevenue.
            salesLine.DefaultDimension = 0;
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>