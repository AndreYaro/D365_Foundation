<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransAdjustSecCur_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventTransCurrencyFactoryAttribute(InventTransCurrency_RU::SecondaryCur)]
final class InventTransAdjustSecCur_RU extends InventTransAdjust
{
    private boolean isTelemetryForSecCurSent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTransCurrency_RU</Name>
				<Source><![CDATA[
    protected InventTransCurrency_RU inventTransCurrency_RU()
    {
        return InventTransCurrency_RU::SecondaryCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
        void updateNow( InventTrans                 _inventTrans,
                    NoYes                       _onlyOpenQty,
                    NoYes                       _changeStdCostPrice,
                    CostAmount                  _adjustment,
                    boolean                     _useOperationsAccount    = false,
                    LedgerPostingType           _operationsPosting       = LedgerPostingType::None,
                    LedgerDimensionAccount      _operationsAccount       = 0,
                    boolean                     _useBalanceAccount       = false,
                    LedgerPostingType           _balanceSheetPosting     = LedgerPostingType::None,
                    LedgerDimensionAccount      _balanceSheetAccount     = 0,
                    boolean                     _usePostOnhandFinancial  = true,
                    LedgerVoucher               _ledgerVoucher           = null, // For adjustments of items using the standard cost inventory model.
                    InventAdjustmentSpec    _inventAdjustmentSpec        = InventAdjustmentSpec::Total)
    {
        InventSettlement    inventSettlement;
        InventModelGroup    inventModelGroup = _inventTrans.inventTable().modelGroup();

        if (!this.checkItemPostedDate(_inventTrans.ItemId, _date))
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        if (_adjustment != 0 || _onlyOpenQty)
        {
            if (_inventTrans.PackingSlipReturned)
            {
                throw error("@SYS62017");
            }

            if (_onlyOpenQty)
            {
                if (! _inventTrans.financialOpenQtySecCur_RU())
                {
                    throw error("@SYS19296");
                }

                if (_inventTrans.financialOpenQtySecCur_RU() != _inventTrans.Qty)
                {
                   _inventTrans.updateSplitSecCur_RU(_inventTrans.financialOpenQtySecCur_RU());
                }
            }

            if (!isTelemetryForSecCurSent)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00111, funcName());
                isTelemetryForSecCurSent = true;
            }

            inventSettlement.initFromInventTrans(_inventTrans,_inventTrans.dimensionFinancialDefaultDimension());

            inventSettlement.TransDate              = _date;
            inventSettlement.Voucher                = _voucher;
            inventSettlement.CostAmountAdjustment   = _adjustment;
            inventSettlement.InventTransCurrency_RU = InventTransCurrency_RU::SecondaryCur;
            inventSettlement.SettleModel            = InventSettleModel::Adjustment;
            inventSettlement.SettleType             = _onlyOpenQty   ? InventSettleType::RemainAdjustment: InventSettleType::CompleteAdjustment;
            inventSettlement.MarkupCode_RU          = markupCode_RU;
            inventSettlement.VendAccountMarkup_RU   = vendAccountMarkup_RU;
            inventSettlement.VendInvoiceIdMarkup_RU = vendInvoiceIdMarkup_RU;

            if (!_usePostOnhandFinancial || (inventModelGroup.PostOnhandFinancial && inventModelGroup.PostOnhandFinancialSecCur_RU))
            {
                inventSettlement.OperationsPosting      = _useOperationsAccount ? _operationsPosting      : _inventTrans.postingOperations();
                inventSettlement.OperationsLedgerDimension      = _useOperationsAccount ? _operationsAccount      : _inventTrans.accountOperationsLedgerDimension();
                inventSettlement.BalanceSheetPosting    = _useBalanceAccount    ? _balanceSheetPosting    : _inventTrans.postingBalanceSheet();
                inventSettlement.BalanceSheetLedgerDimension    = _useBalanceAccount    ? _balanceSheetAccount    : _inventTrans.accountBalanceSheetLedgerDimension();
            }

            _inventTrans.CostAmountSecCurAdjustment_RU += _adjustment;

            if (_changeStdCostPrice)
            {
                _inventTrans.CostAmountStdSecCur_RU = _inventTrans.costValueSecCur_RU();
            }
            else if (inventModelGroup.StandardCost)
            {
                _inventTrans.updateStdCostAdjust(-_adjustment, _date, _voucher, _inventTrans.dimensionFinancialDefaultDimension(), InventTransCurrency_RU::SecondaryCur);
            }

            if ((_inventTrans.costValueSecCur_RU() < 0 && _inventTrans.Qty > 0) ||
                (_inventTrans.costValueSecCur_RU() > 0 && _inventTrans.Qty < 0))
            {
                if (_inventTrans.costValueSecCur_RU() < 0 )
                {
                    error("@SYS53174");
                }
                else
                {
                    error("@SYS53173");
                }

                throw error("@SYS18738");
            }

            if (_inventTrans.DateFinancial > _date)
            {
                throw error("@SYS18740");
            }

            inventSettlement.insert();

            InventTable inventTable = _inventTrans.inventTable();
            InventModelType inventModelType = inventModelGroup.inventModelTypeSecCur_RU();
            inventModelType.postUpdateFinancialAdjustment(_inventTrans, _voucher, _date, _adjustment);

            // Pass the adjustment amount to the invent cost framework
            inventModelType.adjustCostTrans(_inventTrans, _ledgerVoucher, _voucher, _date, _adjustment, null, _inventAdjustmentSpec, InventTransCurrency_RU::SecondaryCur);

            _inventTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>