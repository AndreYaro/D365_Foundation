<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeRoot</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheetNodeRoot extends CostSheetNodeComposite
{
    #define.CurrentVersion(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchCostGroupIdsForImpactUpdate</Name>
				<Source><![CDATA[
/// <summary>
    ///    Retrieves a set that contains all cost group IDs because the root node should always be loaded.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet identifier.
    /// </param>
    /// <returns>
    ///    A set of cost group IDs.
    /// </returns>
    public Set fetchCostGroupIdsForImpactUpdate(CostSheet _costSheet)
    {
        BOMCostGroup                bomCostGroup;

        Set costGroupIdSet = new Set(Types::String);
        while select CostGroupId from bomCostGroup
        {
            costGroupIdSet.add(bomCostGroup.CostGroupId);
        }

        // Inherit the existed impact set.
        if (costGroupImpactSet)
        {
            costGroupIdSet = Set::union(costGroupIdSet, costGroupImpactSet);
        }

        return costGroupIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResultLineList</Name>
				<Source><![CDATA[
public void fillResultLineList(
        CostSheet   _costSheet,
        List        _resultLineList)
    {
        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            subnode.fillResultLineList(_costSheet, _resultLineList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPriceNode</Name>
				<Source><![CDATA[
public CostSheetNodePrice getCostPriceNode(CostPriceType _costType)
    {
        // Can not do calculation with an undefined cost type
        if (_costType == CostPriceType::Undefined)
        {
            throw error("@SCM:CostPriceTypeUndefined");
        }

        ListEnumerator subnodeEnumerator = subnodeList.getEnumerator();

        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            if (subnode.getType() == CostSheetNodeType::Price)
            {
                CostSheetNodePrice costPriceNode = subnode;
                if (costPriceNode.getCostType() == _costType)
                    return costPriceNode;
            }
        }

        throw error("@SCM:CostPriceNodeDoesNotExist"); // there must be a cost price node
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imageRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::Root;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion, this.getType()] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container           base;
        boolean             ret;
        Integer             version = RunBase::getVersion(_packedClass);
        CostSheetNodeType   nodeType;

        switch (version)
        {
            case #CurrentVersion:
                [version, nodeType, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validSubnodeTypeSet</Name>
				<Source><![CDATA[
    public Set validSubnodeTypeSet()
    {
        Set ret = new Set(Types::Enum);

        ret.add(CostSheetNodeType::Price);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
/// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeRoot</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeRoot</c> class.
    /// </returns>
    public static CostSheetNodeRoot construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        return new CostSheetNodeRoot(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
/// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeRoot</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodeRoot</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeRoot</c> class.
    /// </returns>
    public static CostSheetNodeRoot create(container _packedNode)
    {
        CostSheetNodeRoot costSheetNodeRoot = CostSheetNodeRoot::construct(null, 0, CostSheetModeStrategyPackUnpack::construct());
        boolean ret = costSheetNodeRoot.unpack(_packedNode);

        return ret ? costSheetNodeRoot : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>