<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateCorrectClaims</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsRebateCorrectClaims</c> class corrects claims generated from sales invoices.
/// </summary>
public class PdsRebateCorrectClaims
{
    date                    startOfCumulationPeriod;
    date                    endOfCumulationPeriod;
    Amount                  amountToDistribute;
    PdsRebateTable          pdsRebateTableSum;
    PdsRebateTable          pdsRebateTableInit;
    boolean                 isCWAgreement;
    PdsRebateAgreementLine  pdsRebateAgreementLine;
    PdsRebateAgreement      pdsRebateAgreement;
    Map                     custInvTransExpectedRebate;
    Map                     custInvTransRebateAlreadyGiven;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateExpectedValuePerClaim</Name>
				<Source><![CDATA[
    private Amount calculateExpectedValuePerClaim()
    {
        PdsRebateTable pdsRebateTable;
        Amount         totalExpectedAmount = 0;
        Amount         claimExpectedAmount;
        Amount         rebateAlreadyGiven;

        // Loop over all claims which are not adjustment claims
        while select pdsRebateTable
            where pdsRebateTable.CustAccount                 == pdsRebateTableInit.CustAccount
                && pdsRebateTable.ItemId                     == pdsRebateTableInit.ItemId
                && pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateTableInit.pdsRebateAgreementRefRecId
                && (pdsRebateTable.PdsRebateStatus           == PdsRebateStatus::ToCalculate
                    || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::Calculated
                    || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::Approved
                    || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::Processed
                    || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::MarkForCredit)
                && pdsRebateTable.RebateCalcDate             >= startOfCumulationPeriod
                && pdsRebateTable.RebateCalcDate             <= endOfCumulationPeriod
                // Not adjustment claims
                && (pdsRebateTable.SalesInvoicedQty || pdsRebateTable.PdsCWSalesInvoicedQty)
        {
            // find how much was supposed to be given
            claimExpectedAmount = this.claimExpectedAmount(pdsRebateTable);

            // find how much was already given
            rebateAlreadyGiven = this.rebateAlreadyGiven(pdsRebateTable);

            custInvTransExpectedRebate.insert(pdsRebateTable.custInvoiceTransRefRecId, claimExpectedAmount);
            custInvTransRebateAlreadyGiven.insert(pdsRebateTable.custInvoiceTransRefRecId, rebateAlreadyGiven);

            totalExpectedAmount += claimExpectedAmount - rebateAlreadyGiven;
        }

        return totalExpectedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>claimDifferenceAmount</Name>
				<Source><![CDATA[
    private Amount claimDifferenceAmount(PdsRebateTable  _pdsRebateTable, Amount _totalDifferenceAmount)
    {
        if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity)
        {
            if (isCWAgreement)
            {
                return CurrencyExchangeHelper::amount(this.lineShareCWQtyBased(_pdsRebateTable) * _totalDifferenceAmount, _pdsRebateTable.CurrencyCode);
            }

            return CurrencyExchangeHelper::amount(this.lineShareQtyBased(_pdsRebateTable) * _totalDifferenceAmount, _pdsRebateTable.CurrencyCode);
        }
        else if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount)
        {
            return CurrencyExchangeHelper::amount(this.lineShareAmountBased(_pdsRebateTable) * _totalDifferenceAmount, _pdsRebateTable.CurrencyCode);
        }
        
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>claimExpectedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the expected amount for a claim.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// A <c>PdsRebateTable</c>
    /// </param>
    /// <returns>
    /// The expected amount.
    /// </returns>
    private Amount claimExpectedAmount(PdsRebateTable  _pdsRebateTable)
    {
        PdsRebateAmt    rebateAmount;
        switch (pdsRebateAgreementLine.RebateAmtType)
        {
            case PdsRebateAmtType::AmountPerUnit :
                rebateAmount = this.rebateAmountPerUnit(_pdsRebateTable);
                break;

            case PdsRebateAmtType::FixedAmount:
                rebateAmount = _pdsRebateTable.convertToNegativeRebate(pdsRebateAgreementLine.RebateValue);
                break;

            case PdsRebateAmtType::Percentage:
                rebateAmount = _pdsRebateTable.SalesAmount
                                    * pdsRebateAgreementLine.RebateValue
                                    / 100;
                break;

            default:
                throw error("@PDS1430");
        }

        rebateAmount = CurrencyExchangeHelper::amount(rebateAmount, pdsRebateAgreementLine.Currency);
        rebateAmount = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, pdsRebateAgreementLine.Currency, _pdsRebateTable.CurrencyCode);

        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctClaims</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Corrects the claims generated from invoice posting.
    /// </summary>
    public void correctClaims()
    {
        PdsRebateTable              pdsRebateTable;
        PdsRebateTable              pdsRebateTableCreated;
        Amount                      claimCorrectAmount;
        Amount                      claimCorrectAmountSum;
        Amount                      roundingDiff;
        Amount                      rebateAlreadyGiven;
        Amount                      rebateExpected;
        Amount                      totalDifferenceBetweenExpectedAndActual;
        Amount                      totalExpectedAmount;

        if (pdsRebateTableSum.PdsCWSalesInvoicedQty || pdsRebateTableSum.SalesInvoicedQty)
        {
            if (amountToDistribute)
            {
                // Calculate expected value per claim and store
                totalExpectedAmount = this.calculateExpectedValuePerClaim();
                totalDifferenceBetweenExpectedAndActual = totalExpectedAmount - amountToDistribute;

                ttsBegin;
                // Loop over all claims which are not adjustment claims
                while select pdsRebateTable
                    where pdsRebateTable.CustAccount                 == pdsRebateTableInit.CustAccount
                        && pdsRebateTable.ItemId                     == pdsRebateTableInit.ItemId
                        && pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateTableInit.pdsRebateAgreementRefRecId
                        && (pdsRebateTable.PdsRebateStatus           == PdsRebateStatus::ToCalculate
                            || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::Calculated
                            || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::Approved
                            || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::Processed
                            || pdsRebateTable.PdsRebateStatus        == PdsRebateStatus::MarkForCredit)
                        && pdsRebateTable.RebateCalcDate             >= startOfCumulationPeriod
                        && pdsRebateTable.RebateCalcDate             <= endOfCumulationPeriod
                        // Not adjustment claims
                        && (pdsRebateTable.SalesInvoicedQty || pdsRebateTable.PdsCWSalesInvoicedQty)
                {
                    rebateAlreadyGiven = custInvTransRebateAlreadyGiven.lookup(pdsRebateTable.custInvoiceTransRefRecId);

                    rebateExpected = custInvTransExpectedRebate.lookup(pdsRebateTable.custInvoiceTransRefRecId);

                    // the delta
                    claimCorrectAmount = rebateExpected - rebateAlreadyGiven;

                    // Adjustment because of upper threshold or if it is of type Fixed
                    if (totalDifferenceBetweenExpectedAndActual)
                    {
                        if (totalDifferenceBetweenExpectedAndActual < 0 || amountToDistribute < 0)
                        {
                            claimCorrectAmount -= this.claimDifferenceAmount(pdsRebateTable, totalDifferenceBetweenExpectedAndActual);
                        }
                        else
                        {
                            claimCorrectAmount = this.claimDifferenceAmount(pdsRebateTable, totalDifferenceBetweenExpectedAndActual);
                        }
                    }

                    if (claimCorrectAmount != 0)
                    {
                        claimCorrectAmountSum += claimCorrectAmount;
                        pdsRebateTableCreated = this.createClaimCorrection(pdsRebateTable, claimCorrectAmount, endOfCumulationPeriod);
                    }
                }

                roundingDiff = amountToDistribute - claimCorrectAmountSum;
                if (roundingDiff && pdsRebateTableCreated)
                {
                    pdsRebateTableCreated.PdsStartingRebateAmt  += roundingDiff;
                    pdsRebateTableCreated.PdsCorrectedRebateAmt += roundingDiff;
                    pdsRebateTableCreated.PdsRebateBalance      += roundingDiff;
                    pdsRebateTableCreated.doupdate();
                }
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClaimCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a correction claim.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// The <c>PdsRebateTable</c> record to create the correction claim for.
    /// </param>
    /// <param name="_amountDiff">
    /// The correction amount
    /// </param>
    /// <param name="_endOfCumulationPeriod">
    /// The end date for the cumulation period.
    /// </param>
    /// <returns>
    /// The created correction claim.
    /// </returns>
    private pdsRebateTable createClaimCorrection(
        PdsRebateTable      _pdsRebateTable,
        Amount              _amountDiff,
        PdsRebateCalcDate   _endOfCumulationPeriod)
    {
        PdsRebateTable      pdsRebateTable;

        ttsbegin;
        pdsRebateTable.initFromPdsRebateTable(_pdsRebateTable);
        pdsRebateTable.PdsStartingRebateAmt  = _amountDiff;
        pdsRebateTable.PdsCorrectedRebateAmt = _amountDiff;
        pdsRebateTable.PdsRebateBalance      = _amountDiff;
        pdsRebateTable.PdsRebateStatus       = PdsRebateStatus::Calculated;
        pdsRebateTable.PdsRebateAmtType      = PdsRebateAmtType::FixedAmount;
        pdsRebateTable.RebateCalcDate        = _endOfCumulationPeriod;
        pdsRebateTable.doInsert();
        ttscommit;

        return pdsRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineShareAmountBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the claims share of all claims being corrected for amount based rebates.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// A <c>PdsRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The claims share of all claims being corrected.
    /// </returns>
    private real lineShareAmountBased(PdsRebateTable  _pdsRebateTable)
    {
        return pdsRebateTableSum.SalesAmount ? _pdsRebateTable.SalesAmount/pdsRebateTableSum.SalesAmount : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineShareCWQtyBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the claims share of all claims being corrected for catch weight items for quantity based rebates.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// A <c>PdsRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The claims share of all claims being corrected.
    /// </returns>
    private real lineShareCWQtyBased(PdsRebateTable  _pdsRebateTable)
    {
        return pdsRebateTableSum.PdsCWSalesInvoicedQty ? _pdsRebateTable.PdsCWSalesInvoicedQty/pdsRebateTableSum.PdsCWSalesInvoicedQty : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineShareQtyBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the claims share of all claims being corrected for quantity based rebates.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// A <c>PdsRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The claims share of all claims being corrected.
    /// </returns>
    private real lineShareQtyBased(PdsRebateTable  _pdsRebateTable)
    {
        return pdsRebateTableSum.SalesInvoicedQty ? _pdsRebateTable.SalesInvoicedQty/pdsRebateTableSum.SalesInvoicedQty : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        custInvTransExpectedRebate      = new Map(Types::Int64, Types::Real);
        custInvTransRebateAlreadyGiven  = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountToDistribute</Name>
				<Source><![CDATA[
    public Amount parmAmountToDistribute(Amount _amountToDistribute = amountToDistribute)
    {
        amountToDistribute = _amountToDistribute;

        return amountToDistribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndOfCumulationPeriod</Name>
				<Source><![CDATA[
    public TransDate parmEndOfCumulationPeriod(TransDate _endOfCumulationPeriod = endOfCumulationPeriod)
    {
        endOfCumulationPeriod = _endOfCumulationPeriod;

        return endOfCumulationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCWAgreement</Name>
				<Source><![CDATA[
    public boolean parmIsCWAgreement(boolean _isCWAgreement = isCWAgreement)
    {
        isCWAgreement = _isCWAgreement;

        return isCWAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateAgreement</Name>
				<Source><![CDATA[
    public PdsRebateAgreement parmPdsRebateAgreement(PdsRebateAgreement _pdsRebateAgreement = pdsRebateAgreement)
    {
        pdsRebateAgreement = _pdsRebateAgreement;

        return pdsRebateAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateAgreementLine</Name>
				<Source><![CDATA[
    public PdsRebateAgreementLine parmPdsRebateAgreementLine(PdsRebateAgreementLine _pdsRebateAgreementLine = pdsRebateAgreementLine)
    {
        pdsRebateAgreementLine = _pdsRebateAgreementLine;

        return pdsRebateAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateTableInit</Name>
				<Source><![CDATA[
    public PdsRebateTable parmPdsRebateTableInit(PdsRebateTable _pdsRebateTableInit = pdsRebateTableInit)
    {
        pdsRebateTableInit = _pdsRebateTableInit;

        return pdsRebateTableInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateTableSum</Name>
				<Source><![CDATA[
    public PdsRebateTable parmPdsRebateTableSum(PdsRebateTable _pdsRebateTableSum = pdsRebateTableSum)
    {
        pdsRebateTableSum = _pdsRebateTableSum;

        return pdsRebateTableSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartOfCumulationPeriod</Name>
				<Source><![CDATA[
    public TransDate parmStartOfCumulationPeriod(TransDate _startOfCumulationPeriod = startOfCumulationPeriod)
    {
        startOfCumulationPeriod = _startOfCumulationPeriod;

        return startOfCumulationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAlreadyGiven</Name>
				<Source><![CDATA[
    private Amount rebateAlreadyGiven(PdsRebateTable _pdsRebateTable)
    {
        PdsRebateTable              pdsRebateTable;
        Amount                      rebateAlreadyGiven;

        select sum(PdsStartingRebateAmt) from pdsRebateTable
            where pdsRebateTable.PdsRebateAgreementRefRecId == _pdsRebateTable.PdsRebateAgreementRefRecId
               && pdsRebateTable.custInvoiceTransRefRecId == _pdsRebateTable.custInvoiceTransRefRecId;

        rebateAlreadyGiven = pdsRebateTable.PdsStartingRebateAmt;

        return rebateAlreadyGiven;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amount when the rebate amount type is calculated per unit.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// A <c>PdsRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    private Amount rebateAmountPerUnit(PdsRebateTable _pdsRebateTable)
    {
        Qty                     rebateQty;

        rebateQty = pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit
                                                ? _pdsRebateTable.SalesInvoicedQty
                                                : _pdsRebateTable.PdsCWSalesInvoicedQty;

        return rebateQty * pdsRebateAgreementLine.RebateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PdsRebateCorrectClaims construct()
    {
        return new PdsRebateCorrectClaims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromCumulate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PdsRebateCorrectClaims</c> class.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// A <c>PdsRebateTable</c> buffer.
    /// </param>
    /// <param name="_pdsRebateAgreement">
    /// A <c>PdsRebateAgreement</c> buffer.
    /// </param>
    /// <param name="_pdsRebateAgreementLine">
    /// A <c>PdsRebateAgreementLine</c> buffer.
    /// </param>
    /// <param name="_startOfCumulationPeriod">
    /// The start date of the cumulation period to correct claims for.
    /// </param>
    /// <param name="_endOfCumulationPeriod">
    /// The end date of the cumulation period to correct claims for.
    /// </param>
    /// <param name="_amountToDistribute">
    /// The amount to correct the claims with.
    /// </param>
    /// <param name="_pdsRebateTableSum">
    /// A <c>PdsRebateTable</c> buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsRebateCorrectClaims</c> class.
    /// </returns>
    public static PdsRebateCorrectClaims constructFromCumulate(
        PdsRebateTable          _pdsRebateTable,
        PdsRebateAgreement      _pdsRebateAgreement,
        pdsRebateAgreementLine  _pdsRebateAgreementLine,
        date                    _startOfCumulationPeriod,
        date                    _endOfCumulationPeriod,
        Amount                  _amountToDistribute,
        PdsRebateTable          _pdsRebateTableSum
        )
    {
        PdsRebateCorrectClaims  pdsRebateCorrectClaims = PdsRebateCorrectClaims::construct();

        pdsRebateCorrectClaims.parmPdsRebateTableInit(_pdsRebateTable);
        pdsRebateCorrectClaims.parmPdsRebateAgreementLine(_pdsRebateAgreementLine);
        pdsRebateCorrectClaims.parmStartOfCumulationPeriod(_startOfCumulationPeriod);
        pdsRebateCorrectClaims.parmEndOfCumulationPeriod(_endOfCumulationPeriod);
        pdsRebateCorrectClaims.parmAmountToDistribute(_amountToDistribute);
        pdsRebateCorrectClaims.parmPdsRebateTableSum(_pdsRebateTableSum);
        pdsRebateCorrectClaims.parmPdsRebateAgreement(_pdsRebateAgreement);
        pdsRebateCorrectClaims.parmIsCWAgreement(_pdsRebateAgreement.PdsUnitType == PdsUnitType::CWUnit);

        return pdsRebateCorrectClaims;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>