<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvS2STokenProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.AX.Configuration.CertificateHandler;
using Microsoft.Dynamics.Utilities.ExpenseReceiptHelper;
using System.Security.Cryptography.X509Certificates;


/// <summary>
/// The <c>TrvS2STokenProvider</c> class is responsible for generating JWT tokens
/// that are signed using the environment-specific S2S certificate.
/// </summary>
public class TrvS2STokenProvider
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the jwt token.
    /// </summary>
    /// <param name = "_audience">The audience of the token, an external service url.</param>
    /// <param name = "_certThumbPrint">S2S Certificate thumbprint from configuration file.</param>
    /// <param name = "_environmentId">LCS Environment identifier.</param>
    /// <returns>A token in string format.</returns>
    public static str getToken(str _audience, str _certThumbPrint, str _environmentId)
    {
        str token;

        try
        {
            str header = '{"typ":"JWT","alg":"RS256"}';
            str payload = TrvS2STokenProvider::getPayload(_audience, _certThumbPrint, DateTimeUtil::utcNow(), _environmentId);

            str data = TrvS2STokenProvider::ConvertStringToBase64UrlString(header) + '.' + TrvS2STokenProvider::ConvertStringToBase64UrlString(payload);
            var dataBytes = System.Text.Encoding::UTF8.GetBytes(data);

            X509Certificate2 cert = TrvS2SCertificateProvider::getCertificate();

            var rsa = RSACertificateExtensions::GetRSAPrivateKey(cert);

            var signatureBytes = rsa.SignData(dataBytes, System.Security.Cryptography.HashAlgorithmName::SHA256, System.Security.Cryptography.RSASignaturePadding::Pkcs1);
            var signature = TrvS2STokenProvider::ConvertBytesToBase64UrlString(signatureBytes);

            token = data + '.' + signature;
        }
        catch 
        {
            error("@Expense:TokenGenerationFailed");
            System.Exception sysException = CLRInterop::getLastException();
            error(sysException.get_Message());
        }
        return token;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertBytesToBase64UrlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a byte array to base 64 string.
    /// </summary>
    /// <param name = "_input">Byte array.</param>
    /// <returns>A base64 string representation of the byte array.</returns>
    private static str convertBytesToBase64UrlString(System.Byte[] _input)
    {
        System.String result = System.Convert::ToBase64String(_input);
        return result.TrimEnd('=').Replace('+', '-').Replace('/', '_');
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertStringToBase64UrlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a string to base64 string.
    /// </summary>
    /// <param name = "_input">Any string.</param>
    /// <returns>Base64 string/</returns>
    private static str convertStringToBase64UrlString(str _input)
    {
        System.Byte[] bytes = System.Text.Encoding::UTF8.GetBytes(_input);
        return TrvS2STokenProvider::convertBytesToBase64UrlString(bytes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEpochTimeString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts date time to Epoch time string.
    /// </summary>
    /// <param name = "_dateTime">Date time object.</param>
    /// <returns>Epoch time string.</returns>
    private static str getEpochTimeString(System.DateTime _dateTime)
    {
        var epochStart = new System.DateTime(1970, 1, 1, 0, 0, 0, System.DateTimeKind::Utc);
        var timeSpanSinceEpochStart = _dateTime.Subtract(epochStart);
        var totalSeconds = timeSpanSinceEpochStart.TotalSeconds;
        return System.Convert::ToString(System.Math::Round(totalSeconds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the payload for the token.
    /// </summary>
    /// <param name = "_audience">The audience of the token, an external service url.</param>
    /// <param name = "_signingCertificateThumbprint">S2S Certificate thumbprint from configuration file.</param>
    /// <param name = "_utcNow">Current utc date time.</param>
    /// <param name = "_environmentId">LCS Environment identifier.</param>
    /// <returns>A payload for the JWT token.</returns>
    private static str getPayload(
        str _audience, 
        str _signingCertificateThumbprint,
        System.DateTime _utcNow,
        str _environmentId)
    {

        str issuedAt = TrvS2STokenProvider::getEpochTimeString(_utcNow);
        str notBefore = issuedAt;
        const int TokenValidityPeriodInMinutes = 60;

        str expires = TrvS2STokenProvider::getEpochTimeString(_utcNow.AddMinutes(TokenValidityPeriodInMinutes));

        return '{"iat":"' + issuedAt 
            + '","exp":"' + expires 
            + '","nbf":"' + notBefore 
            + '","aud":"' + _audience
            + '","x-ms-finops-microservice-cert-thumbprint":"' + _signingCertificateThumbprint
            + '","x-ms-finops-microservice-lcs-environment-id":"' + _environmentId + '"}';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>