<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSumCalc_Budget_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the asset budget amount.
/// </summary>
class AssetSumCalc_Budget_IN extends AssetSumCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query to calculate sum of transaction amount.
    /// </summary>
    /// <returns>
    /// Returns a query object.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(AssetBudget));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSelectionField(fieldnum(AssetBudget,AmountCur),SelectionField::Sum);
        queryBuildDataSource.addSortField(fieldnum(AssetBudget,CurrencyCode));
        queryBuildDataSource.addSortField(fieldnum(AssetBudget,TransDate));
        queryBuildDataSource.addSortField(fieldnum(AssetBudget,TransType));
        queryBuildDataSource.addRange(fieldnum(AssetBudget,AssetGroup_IN)).value(rangeAssetGroupId);
        queryBuildDataSource.addRange(fieldnum(AssetBudget,BookId)).value(rangeBookId);
        queryBuildDataSource.addRange(fieldnum(AssetBudget,BudgetModel)).value(rangebudgetModel);
        queryBuildDataSource.addRange(fieldnum(AssetBudget,TransDate)).value(queryRange(dateFrom,dateTo));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the asset amount.
    /// </summary>
    public void calc()
    {
        QueryRun    queryRun;
        AssetBudget assetBudget;
        AmountMST   assetAmount;

        if (calculated)
        {
            return;
        }

        if (onThinClient)
        {
            [#Server2Client] = AssetSumCalc_Budget_IN::calcServer(this.packClient());
        }
        else
        {
            this.initYear();

            queryRun = new QueryRun(this.buildQuery());

            while (queryRun.next())
            {
                assetBudget = queryRun.get(tablenum(AssetBudget));

                assetAmount = CurrencyExchangeHelper::mstAmount(assetBudget.AmountCur, assetBudget.CurrencyCode, assetBudget.TransDate);

                this.updateSum(assetBudget.TransType, assetAmount);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the calc method on server.
    /// </summary>
    /// <param name="packedClient">
    /// The client arguments.
    /// </param>
    /// <returns>
    /// Returns the calculated values.
    /// </returns>
    private static container calcServer(container packedClient)
    {
        AssetSumCalc assetSumCalcBudget = new AssetSumCalc_Budget_IN();

        assetSumCalcBudget.unpackClient(packedClient);
        assetSumCalcBudget.calc();

        return assetSumCalcBudget.packServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an <c>AssetSumCalc_Budget_IN</c> object.
    /// </summary>
    /// <param name="_rangeAssetGroupId">
    /// Id of the asset group.
    /// </param>
    /// <param name="_rangeBudgetModel">
    /// The budget model value.
    /// </param>
    /// <param name="_dateFrom">
    /// From date of the period.
    /// </param>
    /// <param name="_dateTo">
    /// To date of the period.
    /// </param>
    /// <param name="_rangeBookId">
    /// Book id of the asset.
    /// </param>
    /// <returns>
    /// Returns an <c>AssetSumCalc_Budget_IN</c> object.
    /// </returns>
    public static AssetSumCalc_Budget_IN newAssetPeriod(Range      _rangeAssetGroupId,
                                                        Range      _rangeBudgetModel,
                                                        TransDate  _dateFrom,
                                                        TransDate  _dateTo,
                                                        Range      _rangeBookId)
    {
        AssetSumCalc_Budget_IN assetSumCalc_Budget = new AssetSumCalc_Budget_IN();

        assetSumCalc_Budget.parmRangeAssetGroupId_IN(_rangeAssetGroupId);
        assetSumCalc_Budget.parmRangeBookId(_rangeBookId);
        assetSumCalc_Budget.parmRangeBudgetModel(_rangeBudgetModel);
        assetSumCalc_Budget.parmDateFrom(_dateFrom);
        assetSumCalc_Budget.parmDateTo(_dateTo);

        return assetSumCalc_Budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an <c>AssetSumCalc_Budget_IN</c> object.
    /// </summary>
    /// <param name="_rangeAssetGroupId">
    /// The id of the asset group.
    /// </param>
    /// <param name="_rangeBookId">
    /// The book id of the asset.
    /// </param>
    /// <param name="_rangeBudgetModel">
    /// The budget model value.
    /// </param>
    /// <param name="_assetDate">
    /// The asset date of the period.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year of the period.
    /// </param>
    /// <returns>
    /// Returns an <c>AssetSumCalc_Budget_IN</c> object.
    /// </returns>
    public static AssetSumCalc_Budget_IN newAssetYear(Range      _rangeAssetGroupId,
                                                      Range      _rangeBookId,
                                                      Range      _rangeBudgetModel,
                                                      TransDate  _assetDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                      AssetYear  _assetYear          = AssetYear::All)
    {
        AssetSumCalc_Budget_IN assetSumCalc_Budget = new AssetSumCalc_Budget_IN();

        assetSumCalc_Budget.parmRangeAssetGroupId_IN(_rangeAssetGroupId);
        assetSumCalc_Budget.parmRangeBookId(_rangeBookId);
        assetSumCalc_Budget.parmRangeBudgetModel(_rangeBudgetModel);
        assetSumCalc_Budget.parmDateTo(_assetDate);
        assetSumCalc_Budget.parmAssetYear(_assetYear);

        return assetSumCalc_Budget;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
