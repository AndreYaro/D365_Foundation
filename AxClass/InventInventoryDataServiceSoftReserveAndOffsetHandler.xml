<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceSoftReserveAndOffsetHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceSoftReserveAndOffsetHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTrans), DataEventType::Inserted),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void InventTrans_onInserted(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationAndOffset(sender, DataEventType::Inserted);
        }
        else
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationOrReservationOffset(sender, DataEventType::Inserted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTrans), DataEventType::Updated),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void InventTrans_onUpdated(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationAndOffset(sender, DataEventType::Updated);
        }
        else
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationOrReservationOffset(sender, DataEventType::Updated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTrans), DataEventType::Deleted),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void InventTrans_onDeleted(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationAndOffset(sender, DataEventType::Deleted);
        }
        else
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationOrReservationOffset(sender, DataEventType::Deleted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesLine_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(SalesLine), DataEventType::Inserted),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void SalesLine_onInserted(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationAndOffset(sender, DataEventType::Inserted);
        }
        else
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationOrReservationOffset(sender, DataEventType::Inserted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesLine_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(SalesLine), DataEventType::Updated),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void SalesLine_onUpdated(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationAndOffset(sender, DataEventType::Updated);
        }
        else
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservationOrReservationOffset(sender, DataEventType::Updated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferLine_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTransferLine), DataEventType::Inserted),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void InventTransferLine_onInserted(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceReservationOffsetFeature::isEnabled())
        {
            InventTransferLine inventTransferLine = sender as InventTransferLine;

            if ((inventTransferLine.InventoryServiceReservationId != '' || inventTransferLine.InventoryServiceAutoOffset))
            {
                InventInventoryDataServiceSoftReserveAndOffsetHandler::processReservationOffset(sender, DataEventType::Inserted);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferLine_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTransferLine), DataEventType::Updated),
     SuppressBPWarningAttribute('BPParameterNotUsed', 'No use for DataeventArgs')]
    public static void InventTransferLine_onUpdated(Common sender, DataEventArgs e)
    {
        if (InventInventoryDataServiceReservationOffsetFeature::isEnabled())
        {
            InventTransferLine inventTransferLine = sender as InventTransferLine;
            if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
            {
                if ((inventTransferLine.InventoryServiceReservationId != inventTransferLine.orig().InventoryServiceReservationId || inventTransferLine.InventoryServiceAutoOffset != inventTransferLine.orig().InventoryServiceAutoOffset)
                    || (inventTransferLine.InventDimId != inventTransferLine.orig().InventDimId && (inventTransferLine.InventoryServiceReservationId != "" || inventTransferLine.InventoryServiceAutoOffset)))
                {
                    InventInventoryDataServiceSoftReserveAndOffsetHandler::processReservationOffset(sender, DataEventType::Updated);
                }
            }
            else
            {
                if ((inventTransferLine.InventoryServiceReservationId != inventTransferLine.orig().InventoryServiceReservationId || inventTransferLine.InventoryServiceAutoOffset != inventTransferLine.orig().InventoryServiceAutoOffset))
                {
                    InventInventoryDataServiceSoftReserveAndOffsetHandler::processReservationOffset(sender, DataEventType::Updated);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSoftReservationOrReservationOffset</Name>
				<Source><![CDATA[
    // old version
    private static void processSoftReservationOrReservationOffset(Common sender, DataEventType dataEventType)
    {
        if (InventInventoryDataServiceSoftReserveAndOffsetHandler::rawCheck(sender))
        {
            if (InventInventoryDataServiceSoftReservationFeature::isEnabled())
            {
                InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReservation(sender, dataEventType);
            }
            else if (InventInventoryDataServiceReservationOffsetFeature::isEnabled())
            {
                InventInventoryDataServiceSoftReserveAndOffsetHandler::processReservationOffset(sender, dataEventType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSoftReservation</Name>
				<Source><![CDATA[
    // old version, only for v1
    private static void processSoftReservation(Common sender, DataEventType dataEventType)
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
        if (parameter.isInventoryServiceStatusEnable())
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReserve(sender, dataEventType, parameter);
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processOffsetByVersion(sender, dataEventType, parameter, InventInventoryDataServiceSoftReserveAndOffsetVersion::v1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSoftReserve</Name>
				<Source><![CDATA[
    // both old version and new version can use it
    private static void processSoftReserve(Common sender, DataEventType dataEventType, InventInventoryDataServiceParameters _parameter)
    {
        if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled())
        {
            if (sender.tableId == tableNum(InventTrans))
            {
                InventTrans         inventTrans = sender as InventTrans;
                InventInventoryDataServiceSoftReservationProcessor::processInventTrans(inventTrans, dataEventType);
            }
            else if (sender.tableId == tableNum(SalesLine))
            {
                SalesLine salesLine = sender as SalesLine;
                if (dataEventType == DataEventType::Inserted)
                {
                    salesLine.SoftReserveBlockLevel = _parameter.DefaultSoftReserveBlockLevel;
                }
                
                InventInventoryDataServiceSoftReservationProcessor::processSalesLine(salesLine, dataEventType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReservationOffset</Name>
				<Source><![CDATA[
    // only for v0, old version and transfer order line will use it
    private static void processReservationOffset(Common sender, DataEventType dataEventType)
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
        if (parameter.isInventoryServiceStatusEnable() && parameter.IsReservationOffsetEnabled)
        {
            InventInventoryDataServiceSoftReserveAndOffsetHandler::processOffsetByVersion(sender, dataEventType, parameter, InventInventoryDataServiceSoftReserveAndOffsetVersion::v0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOffsetByVersion</Name>
				<Source><![CDATA[
    // old version
    private static void processOffsetByVersion(Common sender, DataEventType dataEventType, InventInventoryDataServiceParameters parameter, InventInventoryDataServiceSoftReserveAndOffsetVersion _version)
    {
        StatusIssue offsetStatusIssue = InventInventoryDataServiceSoftReserveAndOffsetHandler::getOffsetStatusIssue(parameter.ReservationOffsetModifier, _version);

        if (sender.tableId == tableNum(InventTrans))
        {
            InventTrans inventTrans = sender as InventTrans;
            InventInventoryDataServiceReservationOffsetProcessor::processInventTransByVersion(inventTrans, dataEventType, parameter.IsProcessingQueueBackup, _version, offsetStatusIssue);
        }
        else if (sender.tableId == tableNum(SalesLine))
        {
            SalesLine salesLine = sender as SalesLine;
            InventInventoryDataServiceReservationOffsetProcessor::processSalesLineByVersion(salesLine, dataEventType, parameter.IsProcessingQueueBackup, _version, offsetStatusIssue);
        }
        else if (sender.tableId == tableNum(InventTransferLine))
        {
            InventTransferLine inventTransferLine = sender as InventTransferLine;
            InventInventoryDataServiceReservationOffsetProcessor::processInventTransferLine(inventTransferLine, dataEventType, parameter.IsProcessingQueueBackup, offsetStatusIssue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSoftReservationAndOffset</Name>
				<Source><![CDATA[
    // new version, combine v0 and v1
    private static void processSoftReservationAndOffset(Common sender, DataEventType dataEventType)
    {
        if (InventInventoryDataServiceSoftReserveAndOffsetHandler::rawCheck(sender))
        {
            boolean isSoftReservationFeatureEnabled = InventInventoryDataServiceSoftReservationFeature::isEnabled();
            boolean isReservationOffsetFeatureEnabled = InventInventoryDataServiceReservationOffsetFeature::isEnabled();
            if (isSoftReservationFeatureEnabled || isReservationOffsetFeatureEnabled)
            {
                InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
                if (parameter.isInventoryServiceStatusEnable())
                {
                    if (isSoftReservationFeatureEnabled)
                    {
                        InventInventoryDataServiceSoftReserveAndOffsetHandler::processSoftReserve(sender, dataEventType, parameter);
                    }

                    if (InventInventoryDataServiceSoftReservationHelper::isOffsetEnabled(parameter))
                    {
                        // have not check parameter.IsReservationOffsetEnabled yet, should check later if go v0 logic
                        InventInventoryDataServiceSoftReserveAndOffsetHandler::processOffset(sender, dataEventType, parameter);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOffset</Name>
				<Source><![CDATA[
    private static void processOffset(Common sender, DataEventType dataEventType, InventInventoryDataServiceParameters parameter)
    {
        if (sender.tableId == tableNum(InventTrans))
        {
            InventTrans inventTrans = sender as InventTrans;
            InventInventoryDataServiceReservationOffsetProcessor::processInventTrans(inventTrans, dataEventType, parameter);
        }
        else if (sender.tableId == tableNum(SalesLine))
        {
            SalesLine salesLine = sender as SalesLine;
            InventInventoryDataServiceReservationOffsetProcessor::processSalesLine(salesLine, dataEventType, parameter);
        }
        else if (sender.tableId == tableNum(InventTransferLine))
        {
            InventTransferLine inventTransferLine = sender as InventTransferLine;
            InventInventoryDataServiceReservationOffsetProcessor::processInventTransferLine(inventTransferLine, dataEventType, parameter.IsProcessingQueueBackup, parameter.getReservationOffsetV0StatusIssue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rawCheck</Name>
				<Source><![CDATA[
    private static boolean rawCheck(Common _sender)
    {
        boolean result = false;
        if (_sender.tableId == tableNum(InventTrans))
        {
            Inventtrans inventTrans = _sender as Inventtrans;
            result = inventTrans.StatusIssue >= StatusIssue::Sold
            && inventTrans.StatusIssue <= StatusIssue::OnOrder
            && inventTrans.ValueOpen == InventTransOpen::Yes
            && inventTrans.orig().ValueOpen == InventTransOpen::Yes;
        }
        else if (_sender.tableId == tableNum(SalesLine))
        {
            SalesLine salesLine = _sender as SalesLine;
            result = salesLine.SalesType == SalesType::Sales
            && salesLine.STOCKEDPRODUCT;
        }
        else if (_sender.tableId == tableNum(InventTransferLine))
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetStatusIssue</Name>
				<Source><![CDATA[
    private static StatusIssue getOffsetStatusIssue(InventInventoryDataServiceReservationOffsetModifier _modifier, InventInventoryDataServiceSoftReserveAndOffsetVersion _version)
    {
        StatusIssue offsetStatusIssue = StatusIssue::OnOrder;

        if (_version == InventInventoryDataServiceSoftReserveAndOffsetVersion::v1 || _modifier == InventInventoryDataServiceReservationOffsetModifier::Reserved)
        {
            offsetStatusIssue = StatusIssue::ReservOrdered;
        }

        return offsetStatusIssue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>