<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099AmountCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Stores and updates Tax1099 amounts that are found in 1099 boxes along with the cumulative State and Local tax withheld
/// </summary>
public class Tax1099AmountCollection
{
    Map boxesToValues;
    int numberOfPayees;

    Tax1099StateTaxWithheld stateTaxWithheld;
    Tax1099LocalTaxWithheld localTaxWitheld;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a Tax1099AmountCollection object with a given set of starting amounts
    /// </summary>
    /// <param name = "_localIRSPayerRec">The Tax1099IRSPayerRec from which to draw initial amounts (optional)</param>
    /// <returns>A Tax1099AmountCollection object</returns>
    public static Tax1099AmountCollection construct(Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        return new Tax1099AmountCollection(_localIRSPayerRec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        boxesToValues = new Map(Types::Int64, Types::Real);
        this.setValues(_localIRSPayerRec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPayees</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of payees associated with this Tax1099AmountCollection
    /// </summary>
    /// <returns>number of payees</returns>
    public int getNumberOfPayees()
    {
        return numberOfPayees;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateTaxWithheld</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total State Tax Withholding associated with this Tax1099AmountCollection
    /// </summary>
    /// <returns>number of payees</returns>
    public Tax1099StateTaxWithheld getStateTaxWithheld()
    {
        return stateTaxWithheld;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalTaxWithheld</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total Local Tax Withholding associated with this Tax1099AmountCollection
    /// </summary>
    /// <returns>number of payees</returns>
    public Tax1099LocalTaxWithheld getLocalTaxWithheld()
    {
        return localTaxWitheld;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks to see if there are any amounts stored in the collection
    /// </summary>
    /// <returns>A boolean indicating whether or not there are any non-zero amounts in the collection</returns>
    public boolean hasAnyAmounts()
    {
        boolean hasAmounts = stateTaxWithheld > 0 || localTaxWitheld > 0;

        if (!hasAmounts)
        {
            MapEnumerator mapEnum = new MapEnumerator(boxesToValues);

            while (mapEnum.moveNext())
            {
                if (mapEnum.currentValue() > 0)
                {
                    hasAmounts = true;
                    break;
                }
            }
        }

        return hasAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds amount values to a container and returns the result
    /// </summary>
    /// <returns>A container containing each amount value stored in this instance</returns>
    public container getAmounts()
    {
        container amounts;

        MapEnumerator mapEnum = new MapEnumerator(boxesToValues);

        while (mapEnum.moveNext())
        {
            amounts += mapEnum.currentValue();
        }

        return amounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets initial values for amounts stored in Tax1099AmountCollection
    /// </summary>
    private void setValues(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        numberOfPayees = _localIRSPayerRec ? 1 : 0;

        SysDictTable    dictTable = new SysDictTable(tableNum(Tax1099IRSPayerRec));
        SysDictField    dictField;
        FieldId         fieldId = dictTable.fieldNext(0);
        FieldName       nameOfField;
        anytype         valueOfField;

        for (int counter = 1; counter <= dictTable.fieldCnt(); counter++)
        {
            fieldId = dictTable.fieldCnt2Id(counter);
            dictField = dictTable.fieldObject(fieldId);

            nameOfField = dictField.name();

            if (strStartsWith(nameOfField, 'Amount') || strStartsWith(nameOfField, 'Section'))
            {
                valueOfField = _localIRSPayerRec ? _localIRSPayerRec.getFieldValue(nameOfField) : 0;
                boxesToValues.insert(fieldId, valueOfField);
            }
        }

        stateTaxWithheld = _localIRSPayerRec ? _localIRSPayerRec.StateTaxWitheld : 0;
        localTaxWitheld = _localIRSPayerRec? _localIRSPayerRec.LocalTaxWithheld : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds amount values to existing values in this Tax1099AmountCollection
    /// </summary>
    /// <param name = "_localIRSPayerRec">The Tax1099IRSPayerRec from which to grab new values</param>
    public void addToValues(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        numberOfPayees += 1;

        Map freshBoxesAndValues = new Map(Types::Int64, Types::Real);
        var fieldToAmountEnum = new MapEnumerator(boxesToValues);

        FieldId key;
        AmountMST oldValue;
        AmountMST incomingValue;

        while (fieldToAmountEnum.moveNext())
        {
            key = fieldToAmountEnum.currentKey();
            oldValue = fieldToAmountEnum.currentValue();
            incomingValue = _localIRSPayerRec.(key);

            freshBoxesAndValues.insert(key, oldValue + incomingValue);
        }

        boxesToValues = freshBoxesAndValues;

        stateTaxWithheld += _localIRSPayerRec.StateTaxWitheld;
        localTaxWitheld += _localIRSPayerRec.LocalTaxWithheld;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>