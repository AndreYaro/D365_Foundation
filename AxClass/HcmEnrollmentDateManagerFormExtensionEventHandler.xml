<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmEnrollmentDateManagerFormExtensionEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite module form extension events for the HcmEnrollmentDateManager form.
/// </summary>
class HcmEnrollmentDateManagerFormExtensionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail LegalEntity form data object OnModified event handler for the HcmEnrollmentDateManager form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmEnrollmentDateManager, PayrollWorkerEnrolledBenefitDetail, LegalEntity), FormDataFieldEventType::Modified)]
    public static void LegalEntity_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail  = _sender.dataSource().cursor();
        payrollWorkerEnrolledBenefitDetail.VendAccountNum = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendAccountNum_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail VendAccountNum form data object OnModified event handler for the HcmEnrollmentDateManager form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmEnrollmentDateManager, PayrollWorkerEnrolledBenefitDetail, VendAccountNum), FormDataFieldEventType::Modified)]
    public static void VendAccountNum_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail  = _sender.dataSource().cursor();
        DataAreaId vendDataAreaId = CompanyInfo::getDataArea(payrollWorkerEnrolledBenefitDetail.LegalEntity);
        payrollWorkerEnrolledBenefitDetail.VendDataAreaId = vendDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendAccountNum_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail VendAccountNum form data object OnValidated event handler for the HcmEnrollmentDateManager form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmEnrollmentDateManager, PayrollWorkerEnrolledBenefitDetail, VendAccountNum), FormDataFieldEventType::Validated)]
    public static void VendAccountNum_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail  = _sender.dataSource().cursor();
        DataAreaId paidByDataArea;

        if (payrollWorkerEnrolledBenefitDetail.LegalEntity)
        {
            paidByDataArea = CompanyInfo::getDataArea(payrollWorkerEnrolledBenefitDetail.LegalEntity);

            changecompany(paidByDataArea)
            {
                if (!VendTable::exist(payrollWorkerEnrolledBenefitDetail.VendAccountNum))
                {
                    throw warning(strFmt("@Payroll:TheValue1InField2IsNotFoundInTheRelatedTable3",
                        payrollWorkerEnrolledBenefitDetail.VendAccountNum,
                        fieldPName(PayrollWorkerEnrolledBenefitDetail, VendAccountNum),
                        tablePName(VendTable)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerEnrolledBenefitDetail_VendAccountNum_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail VendAccountNum form control OnLookup event handler for the HcmEnrollmentDateManager form extension.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEnrollmentDateManager, PayrollWorkerEnrolledBenefitDetail_VendAccountNum), FormControlEventType::Lookup)]
    public static void PayrollWorkerEnrolledBenefitDetail_VendAccountNum_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmEnrollmentDateManagerForm = _sender.formRun();
        FormDataSource payrollWorkerEnrolledBenefitDetail_ds = hcmEnrollmentDateManagerForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitDetail)) as FormDataSource;
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail = payrollWorkerEnrolledBenefitDetail_ds.cursor();

        DataAreaId paidByDataArea;

        if (payrollWorkerEnrolledBenefitDetail.LegalEntity)
        {
            paidByDataArea = CompanyInfo::getDataArea(payrollWorkerEnrolledBenefitDetail.LegalEntity);

            VendTable::lookupVendor(_sender, paidByDataArea);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEnrollmentDateManager_postSetPayrollControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the postSetPayrollControls event on the <c>HcmEnrollmentDateManager</c> from and updates the controls on the form.
    /// </summary>
    /// <param name = "_formElement">The form context.</param>
    /// <param name = "_isPayrollInfoEnabled">true if the <c>HRMAdministrationPayrollInfo</c> configuration key is enabled; otherwise, false</param>
    /// <param name = "_hasPayrollImpact">true if the benefit plan has payroll impact; otherwise, false</param>
    /// <param name = "_isOverrideLimitSelected">true if the override limit is selected; otherwise, false</param>
    /// <param name = "_isRetirementBenefit">true if the benefit plan is a retirement benefit; otherwise, false</param>
    /// <param name = "_isRetirementType401">true if the benefit plan is a retirment type of 401k; otherwise, false</param>
    /// <param name = "_isContributionOnly">true if the payroll impact is contribution only; otherwise, false</param>
    /// <param name = "_isDeductionOnly">true if the payroll impact is deduction only; otherwise, false</param>
    [SubscribesTo(formStr(HcmEnrollmentDateManager), delegateStr(HcmEnrollmentDateManager, postSetPayrollControls))]
    public static void HcmEnrollmentDateManager_postSetPayrollControls(FormRun _formElement,
        boolean _isPayrollInfoEnabled,
        boolean _hasPayrollImpact,
        boolean _isOverrideLimitSelected,
        boolean _isRetirementBenefit,
        boolean _isRetirementType401,
        boolean _isContributionOnly,
        boolean _isDeductionOnly)
    {
        if (_isPayrollInfoEnabled && _hasPayrollImpact && _isRetirementBenefit)
        {
            boolean allowRetirementLimitOverrideSelected = PayrollParameters::find().AllowRetirementLimitOverride;

            FormCheckBoxControl payrollWorkerEnrolledBenefitDetail_OverrideLimit = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, payrollWorkerEnrolledBenefitDetail_OverrideLimit)) as FormCheckBoxControl;
            payrollWorkerEnrolledBenefitDetail_OverrideLimit.visible(allowRetirementLimitOverrideSelected && !_isRetirementType401);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>