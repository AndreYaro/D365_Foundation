<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationActionAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class delegates the actions on bank reconciliation journal line form.
/// </summary>
class BankReconciliationActionAdapter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkArgsFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Throws the exception for the failure of the parameter validation.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     The error of the parameter validation.
    /// </exception>
    private static void checkArgsFailed()
    {
        throw error("@GLS221621");
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (!args || args.parmEnumType() != enumNum(BankReconciliationActionType) || args.record().TableId != tableNum(BankReconciliationHeader))
        {
            BankReconciliationActionAdapter::checkArgsFailed();
        }

        RecId headerRecId = args.record().RecId;

        switch (args.parmEnum())
        {
            case BankReconciliationActionType::Reconcile:
                SysOperationSandbox::callStaticMethod(
                    classNum(BankReconciliationActionAdapter),
                    staticMethodStr(BankReconciliationActionAdapter, doReconcile),
                    [headerRecId],
                    strFmt("@SYS76498", "@SYS69067", "@SYS137068"),
                    strFmt("@SYS76498", "@SYS69067", "@SYS30270"),
                    "@SYS319214");
                break;

            case BankReconciliationActionType::CancelReconcile:
                SysOperationSandbox::callStaticMethod(
                    classNum(BankReconciliationActionAdapter),
                    staticMethodStr(BankReconciliationActionAdapter, doUnreconcile),
                    [headerRecId],
                    strFmt("@SYS76498", "@CashManagement:BankReconciliactionUnreconcile", "@SYS137068"),
                    strFmt("@SYS76498", "@CashManagement:BankReconciliactionUnreconcile", "@SYS30270"),
                    "@SYS319214");
                break;

            case BankReconciliationActionType::ReconcileInBatch:
                BankReconciliationHeaderReconcileInBatch::schedule(headerRecId);
                break;

            default:
                BankReconciliationActionAdapter::checkArgsFailed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReconcile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs reconciliation.
    /// </summary>
    /// <param name = "_recId">The <c>BankReconciliationHeader</c> record ID.</param>
    public static void doReconcile(container _recId)
    {
        RecId reconciliationRecId = conPeek(_recId, 1);

        BankReconciliationHeader::reconcile(reconciliationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUnreconcile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs unreconciliation.
    /// </summary>
    /// <param name = "_recId">The <c>BankReconciliationHeader</c> record ID.</param>
    public static void doUnreconcile(container _recId)
    {
        RecId reconciliationRecId = conPeek(_recId, 1);

        BankReconciliationHeader::unreconcile(reconciliationRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>