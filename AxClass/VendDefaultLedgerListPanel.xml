<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDefaultLedgerListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendDefaultLedgerListPanel extends SysListPanel
{
    const str defaultLabel = "@AccountsPayable:DefaultAccount";
    VendAccount vendAccount;
    VendGroupId vendGroup;
    LedgerJournalACType ledgerJournalACType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    public void addData(container data)
    {
        if (!VendDefaultAccounts::existVendAccountForType(vendAccount, ledgerJournalACType))
        {
            this.writeFields();
        }

        VendDefaultAccounts::writeFromPackedAccount(data, ledgerJournalACType, vendAccount, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDefault</Name>
				<Source><![CDATA[
    public void clearDefault()
    {
        VendDefaultAccounts vendDefaultAccounts;

        if (!VendDefaultAccounts::existVendAccountForType(vendAccount, ledgerJournalACType))
        {
            this.writeFields();
        }

        if (vendAccount)
        {
            update_recordset vendDefaultAccounts
                setting IsDefault = NoYes::No
                where vendDefaultAccounts.VendAccount == vendAccount &&
                      vendDefaultAccounts.LedgerJournalACType == ledgerJournalACType &&
                      vendDefaultAccounts.IsDefault;
        }
        else
        {
            update_recordset vendDefaultAccounts
                setting IsDefault = NoYes::No
                where vendDefaultAccounts.VendGroup == vendGroup &&
                      vendDefaultAccounts.LedgerJournalACType == ledgerJournalACType &&
                      vendDefaultAccounts.IsDefault;
        }

        this.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    public container getData()
    {
        List selectedAccountList;
        ListEnumerator selectedEnumerator;

        DimensionDisplayValue account;
        DimensionLedgerAccountType accountType;
        DimensionDisplayValue selectedAccount[];

        Name accountName;
        boolean isDefault;
        container selectedData, availableData;
        int i;
        int noOfaccounts;
        boolean selectedFound;

        // Populate the selected list
        selectedAccountList = List::create(VendDefaultAccounts::packedSelectedAccountList(vendAccount, ledgerJournalACType));
        selectedEnumerator = selectedAccountList.getEnumerator();

        while (selectedEnumerator.moveNext())
        {
            if (ledgerJournalACType == LedgerJournalACType::Ledger)
            {
                [account, accountName, accountType, isDefault] = selectedEnumerator.current();
                selectedData += [[account, account, accountName, enum2str(accountType), isDefault ? defaultLabel : '']];
            }
            else
            {
                [account, accountName, isDefault] = selectedEnumerator.current();
                selectedData += [[account, account, accountName, isDefault ? defaultLabel : '']];
            }

            i++;
            selectedAccount[i] = account;
        }
        noOfAccounts = i;

        // Populate the non selected list
        selectedAccountList = List::create(VendDefaultAccounts::packedNotSelectedAccountList(ledgerJournalACType));
        selectedEnumerator = selectedAccountList.getEnumerator();

        while (selectedEnumerator.moveNext())
        {
            if (ledgerJournalACType == LedgerJournalACType::Ledger)
            {
                [account, accountName, accountType] = selectedEnumerator.current();
                selectedFound = false;
                for (i=1; i<=noOfAccounts; i++)
                {
                    if (selectedAccount[i] == account)
                    {
                        selectedFound = true;
                        break;
                    }
                }
                if (! selectedFound)
                {
                    availableData += [[account, account, accountName, enum2str(accountType)]];
                }
            }
            else
            {
                [account, accountName] = selectedEnumerator.current();
                selectedFound = false;
                for (i=1; i<=noOfAccounts; i++)
                {
                    if (selectedAccount[i] == account)
                    {
                        selectedFound = true;
                        break;
                    }
                }
                if (! selectedFound)
                {
                    availableData += [[account, account, accountName]];
                }
            }
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp_Selected</Name>
				<Source><![CDATA[
    protected void moveUp_Selected()
    {
        super();
        this.writeFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown_Selected</Name>
				<Source><![CDATA[
    protected void moveDown_Selected()
    {
        super();
        this.writeFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumnsSelected</Name>
				<Source><![CDATA[
    public int numOfColumnsSelected()
    {
        return ledgerJournalACType == LedgerJournalACType::Ledger ? 4 : 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumnsAvailable</Name>
				<Source><![CDATA[
    public int numOfColumnsAvailable()
    {
        return ledgerJournalACType == LedgerJournalACType::Ledger ? 3 : 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalACType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmLedgerJournalACType(LedgerJournalACType _ledgerJournalACType = ledgerJournalACType)
    {
        ledgerJournalACType = _ledgerJournalACType;

        return ledgerJournalACType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendGroup</Name>
				<Source><![CDATA[
    public VendAccount parmVendGroup(VendGroupId _vendGroup = vendGroup)
    {
        vendGroup = _vendGroup;

        return vendGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    public void removeData(container data)
    {
        this.writeFields();

        VendDefaultAccounts::deleteAccounts(data, vendAccount, vendGroup,ledgerJournalACType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefault</Name>
				<Source><![CDATA[
    public void setDefault()
    {
        int idx;
        FormListItem formListItem;
        container dataContainer;
        DimensionDisplayValue defaultAccountNumber;

        idx = viewSelected.getNextItem(FormListNext::Selected);

        formListItem = viewSelected.getItem(idx);

        if (formListItem)
        {
            dataContainer = formListItem.data();
            if (conLen(dataContainer))
            {
                defaultAccountNumber = conPeek(dataContainer, 1);

                ttsbegin;

                if (!VendDefaultAccounts::existVendAccountForType(vendAccount, ledgerJournalACType))
                {
                    this.writeFields();
                }

                VendDefaultLedgerListPanel::updateDefault(vendAccount,
                                                          vendGroup,
                                                          defaultAccountNumber,
                                                          ledgerJournalACType);

                ttscommit;

                this.fill();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates state of the internal variables of the bank account for activation.
    /// </summary>
    /// <param name="_data">
    ///    The selected items in the list to validate.
    /// </param>
    /// <param name="_addRemove">
    ///    A Boolean value that specifies whether the selected items should be added or removed.
    /// </param>
    /// <returns>
    ///    true if the bank account is active; otherwise, false.
    /// </returns>
    public boolean validate(anytype _data, AddRemove _addRemove)
    {
        boolean isValid;

        isValid = super(_data, _addRemove);

        if (this.parmLedgerJournalACType() == LedgerJournalACType::Bank)
        {
            isValid = isValid && BankAccountTable::checkIsActive(_data);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFields</Name>
				<Source><![CDATA[
    public void writeFields()
    {
        int idx;
        container data;

        idx = viewSelected.getNextItem(FormListNext::All);

        while (idx != -1)
        {
            data += viewSelected.getItem(idx).text();
            idx = viewSelected.getNextItem(FormListNext::All, idx);
        }
        VendDefaultAccounts::writeFromPackedAccount(data, ledgerJournalACType, vendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendDefaultLedgerListPanel construct(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(VendGroup) :
                return new VendDefaultLedgerListPanelGroup();
            default:
                return new VendDefaultLedgerListPanel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static VendDefaultLedgerListPanel newForm(FormRun _formRun,
                                              int _parentId,
                                              str _captionSelected,
                                              str _captionAvailable,
                                              Common _common,
                                              LedgerJournalACType _ledgerJournalACType)
    {
        VendDefaultLedgerListPanel sysListPanel = VendDefaultLedgerListPanel::construct(_common);

        sysListPanel.parmFormRun(_formRun);
        sysListPanel.parmParentId(_parentId);
        sysListPanel.parmCaptionAvailable(_captionAvailable);
        sysListPanel.parmCaptionSelected(_captionSelected);
        sysListPanel.parmLedgerJournalACType(_ledgerJournalACType);
        sysListPanel.parmHasAddAllButton(false);
        sysListPanel.parmHasRemoveAllButton(false);
        sysListPanel.parmHasUpDownButton(true);
        sysListPanel.build();

        return sysListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefault</Name>
				<Source><![CDATA[
    static protected void updateDefault(VendAccount _vendAccount,
                                               VendGroupId _vendGroup,
                                               DimensionDisplayValue _defaultAccountNumber,
                                               LedgerJournalACType _ledgerJournalACType)
    {
        VendDefaultAccounts vendDefaultAccounts;
        VendTable vendTable;
        VendTable vendTableForUpdate;
        DimensionAttributeValueCombination dimAttrValueCombination;
        LedgerDimensionDefaultAccount defaultAccount;

        if (_vendAccount)
        {
            update_recordset vendDefaultAccounts
                setting IsDefault = NoYes::No
                where vendDefaultAccounts.VendAccount == _vendAccount &&
                      vendDefaultAccounts.IsDefault;

            update_recordset vendDefaultAccounts
                setting IsDefault = NoYes::Yes
                where vendDefaultAccounts.VendAccount == _vendAccount &&
                      vendDefaultAccounts.LedgerJournalACType == _ledgerJournalACType
                exists join dimAttrValueCombination where
                    dimAttrValueCombination.RecId == vendDefaultAccounts.LedgerDimension &&
                    dimAttrValueCombination.DisplayValue == _defaultAccountNumber;
        }
        else
        {
            update_recordset vendDefaultAccounts
                setting IsDefault = NoYes::No
                where vendDefaultAccounts.VendGroup == _vendGroup &&
                      vendDefaultAccounts.IsDefault;

            update_recordset vendDefaultAccounts
                setting IsDefault = NoYes::Yes
                where vendDefaultAccounts.VendGroup == _vendGroup &&
                      vendDefaultAccounts.LedgerJournalACType == _ledgerJournalACType
                exists join dimAttrValueCombination where
                    dimAttrValueCombination.RecId == vendDefaultAccounts.LedgerDimension &&
                    dimAttrValueCombination.DisplayValue == _defaultAccountNumber;

            defaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(_defaultAccountNumber);

            while select AccountNum, OffsetAccountType, OffsetLedgerDimension from vendTable
                where vendTable.VendGroup == _vendGroup
            {
                if (!VendDefaultAccounts::existVendAccount(vendTable.AccountNum))
                {
                    update_recordset vendTableForUpdate
                        setting OffsetAccountType = _ledgerJournalACType,
                                OffsetLedgerDimension = defaultAccount
                        where vendTableForUpdate.AccountNum == vendTable.AccountNum;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>