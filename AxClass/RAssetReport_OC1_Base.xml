<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC1_Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class rAssetReport_OC1_Base extends RAssetReport  implements ERIReportPostProcessingSupported
{
    protected Struct structCompanyInfoAcquire;
    protected Struct structCompanyInfoDeliver;
    protected Struct structSection_1;
    protected Struct structSection_2;
    protected RAssetDeprProfile rAssetDeprProfile;
    protected MainAccountNum controlMainAccountNum;
    protected str szReportShortName;
    protected RAssetReport_ShortDescription shortDescription;

    protected const str CompanyAddress = 'CompanyAddress';
    protected const str CompanyPhone = 'CompanyPhone';
    protected const str CompanyFax = 'CompanyFax';
    protected const str Bic = 'Bic';
    protected const str BankName = 'BankName';
    protected const str BankAccount = 'BankAccount';
    protected const str BankCorrAccount = 'BankCorrAccount';
    protected const str UsefulLife = 'UsefulLife';
    protected const str DeprProfileName = 'DeprProfileName';
    protected const str DepreciationRate = 'DepreciationRate';
    protected const str OldGuaranteeDate = 'OldGuaranteeDate';
    protected const str OldTransDate = 'OldTransDate';
    protected const str OldDepreciation = 'OldDepreciation';
    protected const str OldDeprCost = 'OldDeprCost';
    protected const str OldAcquisitPrice = 'OldAcquisitPrice';
    protected const str OldDateRevaluationLast = 'OldDateRevaluationLast';
    protected const str OldUsefulLife = 'OldUsefulLife';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionPrice</Name>
				<Source><![CDATA[
    protected abstract Amount acquisitionPrice()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldIntoShortDescription</Name>
				<Source><![CDATA[
    protected void addFieldIntoShortDescription()
    {
        shortDescription.addPrintedField(fieldNum(RAssetScrap, ItemId), 'A');
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        if (this.isAcquisition() && this.isDepreciation())
        {
            return strFmt("@GLS116755", szReportShortName);
        }
        else if (this.isAcquisition())
        {
            return strFmt("@GLS116753", szReportShortName);
        }
        else
        {
            return strFmt("@GLS116754", szReportShortName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the main account and analysis dimension value for the asset.
    /// </summary>
    /// <returns>
    /// The main account num and analysis dimension for the asset.
    /// </returns>
    protected abstract MainAccountNum controlMainAccountNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFromBusinessAccounting</Name>
				<Source><![CDATA[
    protected abstract TransDate dateFromBusinessAccounting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>employee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual person in charge for the fixed asset which is printed.
    /// </summary>
    /// <param name="_curDate">
    /// A date value used to select the person in charge from the transfer history table.
    /// </param>
    protected void employee(TransDate _curDate)
    {
        RAssetMoveHist rAssetMoveHistIssue = this.rAssetMoveHistCompanyIssue();
        RAssetMoveHist rAssetMoveHistReceipt = this.rAssetMoveHistCompanyReceipt();

        if (rAssetMoveHistReceipt)
        {
            if (rAssetMoveHistReceipt.Company)
            {
                changecompany(rAssetMoveHistReceipt.Company)
                {
                    oldEmployee = EmployeeTable_RU::findByEmployeeId(
                        RAssetMoveHist::findLastOperation(rAssetMoveHistReceipt.AssetId,
                            RAssetMoveType::Transfer,
                            NoYes::No,
                            _curDate).NewEmployee);
                }
            }

            newEmployee = EmployeeTable_RU::findByEmployeeId(
                RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,
                    RAssetMoveType::Transfer,
                    NoYes::No,
                    _curDate).NewEmployee);
        }
        else if (rAssetMoveHistIssue)
        {
            if (rAssetMoveHistIssue.Company)
            {
                changecompany(rAssetMoveHistIssue.Company)
                {
                    newEmployee = EmployeeTable_RU::findByEmployeeId(
                        RAssetMoveHist::findLastOperation(rAssetMoveHistIssue.AssetId,
                            RAssetMoveType::Transfer,
                            NoYes::No,
                            _curDate).NewEmployee);
                }
            }

            oldEmployee = EmployeeTable_RU::findByEmployeeId(
                RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,
                    RAssetMoveType::Transfer,
                    NoYes::No,
                    _curDate).NewEmployee);
        }
        else
        {
            super(_curDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstRowSection_3</Name>
				<Source><![CDATA[
    protected int firstRowSection_3()
    {
        const int firstRow = 24;

        return firstRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    protected Struct getCompanyInfo()
    {
        Struct struct = RAssetReport_OC1_Base::companyInfo_Null();
        struct.value(ConstChiefPost, OfficialsTable_RU::findDirector().Title);
        struct.value(ConstChiefName, OfficialsTable_RU::findDirector().getFIO());
        struct.value(ConstDateChiefSignature, this.transDate());
        struct.value(ConstCompanyName, companyInfo.name());
        struct.value(CompanyAddress, companyInfo.postalAddress().getAddressAsLine_RU());
        struct.value(CompanyPhone, companyInfo.phone());
        struct.value(CompanyFax, companyInfo.teleFax());
        struct.value(ConstCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, this.documentDate()));
        struct.value(ConstChiefAccountantName, OfficialsTable_RU::findAccountant().getFIO());

        if (companyInfo.Bank)
        {
            BankAccountTable bankAccountTable = BankAccountTable::find(companyInfo.Bank);

            if (bankAccountTable)
            {
                BankGroup bankGroup = BankGroup::find(bankAccountTable.BankGroupId);

                struct.value(Bic, bankGroup.BankBIC_RU);
                struct.value(BankName, bankGroup.Name);
                struct.value(BankAccount, bankAccountTable.AccountNum);
                struct.value(BankCorrAccount, bankAccountTable.CorrAccount_W);
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfoTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects data from the subsidiary company where the asset is transfered to.
    /// </summary>
    /// <param name="_companyId">
    /// The subsidiary company ID.
    /// </param>
    /// <returns>
    /// The subsidiary company data: company name, address, phone, OKPO, company bank account data.
    /// </returns>
    protected Struct getCompanyInfoTransfer(CompanyId _companyId)
    {
        Struct struct;

        changecompany(_companyId)
        {
            CompanyInfo companyInfoTo = CompanyInfo::find();

            struct = RAssetReport_OC1_Base::companyInfo_Null();

            struct.value(ConstChiefPost, OfficialsTable_RU::findDirector().Title);
            struct.value(ConstChiefName, OfficialsTable_RU::findDirector().getFIO());
            struct.value(ConstDateChiefSignature, this.transDate());
            struct.value(ConstCompanyName, companyInfoTo.name());
            struct.value(CompanyAddress, companyInfoTo.postalAddress().getAddressAsLine_RU());
            struct.value(CompanyPhone, companyInfoTo.phone());
            struct.value(CompanyFax, companyInfoTo.teleFax());
            struct.value(ConstCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfoTo, this.documentDate()));
            struct.value(ConstChiefAccountantName, OfficialsTable_RU::findAccountant().getFIO());

            if (companyInfoTo.Bank)
            {
                BankAccountTable bankAccountTable = BankAccountTable::find(companyInfoTo.Bank);

                if (bankAccountTable)
                {
                    BankGroup bankGroup = BankGroup::find(bankAccountTable.BankGroupId);

                    struct.value(Bic, bankGroup.BankBIC_RU);
                    struct.value(BankName, bankGroup.Name);
                    struct.value(BankAccount, bankAccountTable.AccountNum);
                    struct.value(BankCorrAccount, bankAccountTable.CorrAccount_W);
                }
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendIntoCompanyInfo</Name>
				<Source><![CDATA[
    protected Struct getCustVendIntoCompanyInfo(CustVendTable _custVendTable)
    {
        Struct struct = RAssetReport_OC1_Base::companyInfo_Null();

        if(_custVendTable)
        {
            struct.value(ConstDateChiefSignature, this.transDate());
            struct.value(ConstCompanyName, _custVendTable.name());
            struct.value(CompanyAddress, DirParty::primaryPostalAddress(_custVendTable.Party).getAddressAsLine_RU());
            struct.value(CompanyPhone, _custVendTable.phone());
            struct.value(CompanyFax, _custVendTable.telefax());
            struct.value(ConstCodeOKPO, _custVendTable.partyOKPOasOfDate_RU(this.documentDate()));

            if (_custVendTable.BankAccountId)
            {
                BankAccountMap custVendBankAccountTable;
                if (_custVendTable.TableId == tableNum(VendTable))
                {
                    custVendBankAccountTable = VendBankAccount::find(_custVendTable.AccountNum, _custVendTable.BankAccountId);
                }
                else
                {
                    custVendBankAccountTable = CustBankAccount::find(_custVendTable.AccountNum, _custVendTable.BankAccountId);
                }

                if (custVendBankAccountTable)
                {
                    struct.value(Bic, custVendBankAccountTable.bankBIC_RU());
                    struct.value(BankName, custVendBankAccountTable.bankName_RU());
                    struct.value(BankAccount, custVendBankAccountTable.AccountNum);
                    struct.value(BankCorrAccount, custVendBankAccountTable.CorrAccount_W);
                }
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoAcquire</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoAcquire()
    {
        RAssetMoveHist rAssetMoveHistIssue = this.rAssetMoveHistCompanyIssue();
        Struct struct;

        if (this.isAcquisition())
        {
            struct = this.getCompanyInfo();
            struct.value(ConstDepartamentName, this.newLocationName());
        }
        else if (this.isDepreciation() && (rAssetTable.CustAccount))
        {
            struct = this.getCustVendIntoCompanyInfo(CustTable::find(rAssetTable.CustAccount));
        }
        else if (rAssetMoveHistIssue.Company)
        {
            struct = this.getCompanyInfoTransfer(rAssetMoveHistIssue.Company);
        }
        else
        {
            struct = RAssetReport_OC1_Base::companyInfo_Null();
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoDeliver</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoDeliver()
    {
        RAssetMoveHist rAssetMoveHistReceipt = this.rAssetMoveHistCompanyReceipt();
        Struct struct;

        if (this.isDepreciation())
        {
            struct = this.getCompanyInfo();
            struct.value(ConstDepartamentName, this.oldLocationName());
        }
        else if (this.isAcquisition() && (rAssetTable.VendAccount))
        {
            struct = this.getCustVendIntoCompanyInfo(VendTable::find(rAssetTable.VendAccount));
        }
        else if (rAssetMoveHistReceipt.Company)
        {
            struct = this.getCompanyInfoTransfer(rAssetMoveHistReceipt.Company);
        }
        else
        {
            struct = RAssetReport_OC1_Base::companyInfo_Null();
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSection_1</Name>
				<Source><![CDATA[
    protected Struct initDataSection_1()
    {
        Struct struct = new Struct(Types::Date, OldGuaranteeDate,
            Types::Date, OldTransDate,
            Types::Real, OldDepreciation,
            Types::Real, OldDeprCost,
            Types::Real, OldAcquisitPrice,
            Types::Date, OldDateRevaluationLast,
            Types::Integer, ConstObservedLife);


        struct.value(OldGuaranteeDate, rAssetTable.GuaranteeDate);
        struct.value(OldDepreciation, -this.depreciation(this.transDate()));
        struct.value(OldDateRevaluationLast, this.dateRevaluationLast(this.transDate()));
        struct.value(OldTransDate, acquisitionFirstTrans.TransDate);
        struct.value(OldAcquisitPrice, this.acquisition(acquisitionFirstTrans.TransDate));

        TransDate dt = max(acquisitionFirstTrans.TransDate, this.transDate() - 1);

        struct.value(OldDeprCost, this.netBookValue(dt));
        struct.value(ConstObservedLife, rAssetStandards.lifeTimePass(dt));

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSection_2</Name>
				<Source><![CDATA[
    protected final Struct initDataSection_2()
    {
        Struct struct = new Struct(Types::Real, ConstAcquisitionPrice,
            Types::Real, UsefulLife,
            Types::String, DeprProfileName,
            Types::Real, DepreciationRate);

        struct.value(DeprProfileName, rAssetDeprProfile.Name);
        struct.value(UsefulLife, rAssetStandards.lifetime(documentDate));
        struct.value(DepreciationRate, rassetNamor);
        struct.value(ConstAcquisitionPrice, this.acquisition(acquisitionFirstTrans.TransDate));

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        boolean ret = super();

        this.employee(this.transDate());
        this.assetNamor(this.transDate() - 1);

        rAssetDeprProfile = rAssetStandards.deprProfile(this.transDate() - 1);
        structCompanyInfoAcquire    = this.initCompanyInfoAcquire();
        structCompanyInfoDeliver    = this.initCompanyInfoDeliver();
        controlMainAccountNum       = this.controlMainAccountNum();

        if (this.isDepreciation())
        {
            structSection_1 = this.initDataSection_1();
        }

        if (this.isAcquisition())
        {
            structSection_2 = this.initDataSection_2();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportShortName</Name>
				<Source><![CDATA[
    protected str initReportShortName()
    {
        const str reportShortName = 'ОС-1а';

        return reportShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcquisition</Name>
				<Source><![CDATA[
    protected abstract boolean isAcquisition()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciation</Name>
				<Source><![CDATA[
    protected abstract boolean isDepreciation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args  _args)
    {
        if (!rAssetTable)
        {
            throw error(Error::missingRecord(funcName()));
        }

        szReportShortName = this.initReportShortName();

        super(_args);

        shortDescription = new RAssetReport_ShortDescription(rAssetTable.AccountNum, this.transDate());
        this.addFieldIntoShortDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLocationName</Name>
				<Source><![CDATA[
    protected abstract RAssetLocationName newLocationName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>oldLocationName</Name>
				<Source><![CDATA[
    protected abstract RAssetLocationName oldLocationName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>outSection_1</Name>
				<Source><![CDATA[
    protected void outSection_1()
    {
        date dt = structSection_1.value(OldGuaranteeDate);

        this.insertDateIntoDoc(OldGuaranteeDate, dt);

        dt = structSection_1.value(OldTransDate);
        this.insertDateIntoDoc(OldTransDate, dt);

        Amount amount = structSection_1.value(OldDepreciation);
        this.insertValueIntoDoc(OldDepreciation, this.amountRound(amount));

        amount = structSection_1.value(OldDeprCost);
        this.insertValueIntoDoc(OldDeprCost, this.amountRound(amount));

        amount = structSection_1.value(OldAcquisitPrice);
        this.insertValueIntoDoc(OldAcquisitPrice, this.amountRound(amount));

        dt = structSection_1.value(OldDateRevaluationLast);
        this.insertDateIntoDoc(OldDateRevaluationLast, dt);

        int i = structSection_1.value(ConstObservedLife);
        this.insertValueIntoDoc(ConstOldObservedLife, this.dateIntervalAsStr(i));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outSection_2</Name>
				<Source><![CDATA[
    protected void outSection_2()
    {
        Amount amount = structSection_2.value(ConstAcquisitionPrice);
        this.insertValueIntoDoc(ConstNewAcquisitionPrice, this.amountRound(amount));

        real r = structSection_2.value(UsefulLife);
        this.insertValueIntoDoc(ConstNewUsefulLife, r);

        str sz = structSection_2.value(DeprProfileName);
        this.insertValueIntoDoc(ConstNewDeprProfileName, sz);

        amount = structSection_2.value(DepreciationRate);

        if (amount != 0)
        {
            this.insertValueIntoDoc(ConstNewDepreciationRate, this.amountRound(amount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage01</Name>
				<Source><![CDATA[
    protected final void printPage01()
    {
        str sz;
        Struct tmpStruct;
        str szPrefix;

        void outStr(str _sName)
        {
            sz = tmpStruct.value(_sName);
            str szBookmarkName = szPrefix + _sName;

            this.insertValueIntoDoc(szBookmarkName, sz);
        }

        void outCompanyInfo()
        {
            outStr(ConstChiefPost);
            outStr(ConstChiefName);

            date dt = tmpStruct.value(ConstDateChiefSignature);
            this.insertValueIntoDoc(szPrefix + ConstDateChiefSignature, this.dateAsStr(max(dt, this.documentDate())));

            outStr(ConstCompanyName);

            str sz1 = tmpStruct.value(CompanyAddress);
            str sz2 = tmpStruct.value(CompanyPhone);
            str sz3 = tmpStruct.value(CompanyFax);

            sz  = this.mergeStr(sz1, sz2, "@GLS116750");
            sz  = this.mergeStr(sz, sz3, "@GLS116751");

            this.insertValueIntoDoc(szPrefix + CompanyAddress, sz);

            sz1 = tmpStruct.value(BankName);
            sz2 = tmpStruct.value(BankAccount);
            sz3 = tmpStruct.value(Bic);
            str sz4 = tmpStruct.value(BankCorrAccount);

            sz  = this.mergeStr(sz1, sz2, "@GLS101791");
            sz  = this.mergeStr(sz, sz3, "@GLS116752");
            sz  = this.mergeStr(sz, sz4, "@GLS101793");

            this.insertValueIntoDoc(szPrefix + ConstBank, sz);

            outStr(ConstDepartamentName);
            outStr(ConstCodeOKPO);
        }

        tmpStruct = structCompanyInfoDeliver;
        szPrefix = ConstDeliver;
        outCompanyInfo();

        tmpStruct = structCompanyInfoAcquire;
        szPrefix = ConstAcquire;
        outCompanyInfo();

        this.insertValueIntoDoc(ConstAccountNum, rAssetTable.AccountNum);
        this.insertValueIntoDoc(ConstSerialNum,  rAssetTable.SerialNum);
        this.insertValueIntoDoc(ConstActNumber, this.documentNumber());
        this.insertValueIntoDoc(ConstActDate, date2StrUsr(this.documentDate(),DateFlags::None));

        sz = this.mergeStr(rAssetTable.Name, rAssetTable.Model);
        this.insertValueIntoDoc(ConstAssetName, sz);
        this.insertValueIntoDoc(ConstMake, rAssetTable.Make);
        this.insertValueIntoDoc(ConstAssetGroup,rAssetStandards.AssetGroup);
        this.insertValueIntoDoc(ConstControlAccount, controlMainAccountNum);
        this.insertValueIntoDoc(ConstAssetLocation, RAssetLocation::find(this.location(this.transDate())).Name);

        if (this.isAcquisition())
        {
            this.insertDateIntoDoc(ConstDateToBusinessAccounting, this.dateToBusinessAccounting());
        }

        if (this.isDepreciation())
        {
            this.insertDateIntoDoc(ConstDateFromBusinessAccounting, this.dateFromBusinessAccounting());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage02</Name>
				<Source><![CDATA[
    protected void printPage02()
    {
        if (this.isDepreciation())
        {
            this.outSection_1();
        }

        if (this.isAcquisition())
        {
            this.outSection_2();
        }

        shortDescription.outputIntoExcel(excelDocument,
            curWorkSheetNum,
            this.firstRowSection_3(),
            this.rowIntoTemplateSection_3());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage03</Name>
				<Source><![CDATA[
    protected final void printPage03()
    {
        str sz;
        HrmDescription hrmDescription;
        RAssetMoveHist rAssetMoveHistCompanyIssue = this.rAssetMoveHistCompanyIssue();
        RAssetMoveHist rAssetMoveHistCompanyReceipt = this.rAssetMoveHistCompanyReceipt();

        date dtOldEmplDateSignature = dateNull();
        date dtNewEmplDateSignature = dateNull();

        if (this.isAcquisition()
            || rAssetMoveHistCompanyIssue.Company)
        {
            this.insertValueIntoDoc(ConstNewEmplName, newEmployee.worker().getFIO_RU());
            this.insertValueIntoDoc(ConstNewEmplID, newEmployee.EmployeeId);
            hrmDescription = HcmPosition::findByPosition(newEmployee.worker().primaryPositionId()).description();
            this.insertValueIntoDoc(ConstNewEmplTitle, hrmDescription
                ? hrmDescription
                : newEmployee.worker().primaryPositionId());

            dtNewEmplDateSignature = max(this.transDate(), this.documentDate());

            sz = structCompanyInfoAcquire.value(ConstChiefAccountantName);
            this.insertValueIntoDoc(ConstNewChiefAccountantName, sz);

            if (rAssetMoveHistCompanyIssue.Company)
            {
                changecompany (rAssetMoveHistCompanyIssue.Company)
                {
                    RAssetTable rAssetTableIssueTo = RAssetTable::find(rAssetMoveHistCompanyIssue.AssetId);

                    this.insertValueIntoDoc(ConstNewInvKartNumber, rAssetTableIssueTo.InvKartNumber);
                    this.insertDateIntoDoc(ConstNewInvKartDate, rAssetTableIssueTo.InvKartDate);
                }
            }
            else
            {
                this.insertValueIntoDoc(ConstNewInvKartNumber, rAssetTable.InvKartNumber);
                this.insertDateIntoDoc(ConstNewInvKartDate, rAssetTable.InvKartDate);
            }
        }

        if (this.isDepreciation()
            || rAssetMoveHistCompanyReceipt.Company)
        {
            this.insertValueIntoDoc(ConstOldEmplName, oldEmployee.worker().getFIO_RU());
            this.insertValueIntoDoc(ConstOldEmplID, oldEmployee.EmployeeId);
            hrmDescription = HcmPosition::findByPosition(oldEmployee.worker().primaryPositionId()).description();
            this.insertValueIntoDoc(ConstOldEmplTitle, hrmDescription
                ? hrmDescription
                : oldEmployee.worker().primaryPositionId());

            dtOldEmplDateSignature = max(this.transDate(), this.documentDate());

            sz = structCompanyInfoDeliver.value(ConstChiefAccountantName);
            this.insertValueIntoDoc(ConstOldChiefAccountantName, sz);
        }

        this.insertValueIntoDoc(ConstOldEmplDateSignature, this.dateAsStr(dtOldEmplDateSignature));
        this.insertValueIntoDoc(ConstNewEmplDateSignature, this.dateAsStr(dtNewEmplDateSignature));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetMoveHistCompanyIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last posted company issue record from the <c>RAssetMoveHist</c> history table.
    /// </summary>
    /// <returns>
    /// The last posted company issue record.
    /// </returns>
    protected RAssetMoveHist rAssetMoveHistCompanyIssue()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetMoveHistCompanyReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last posted company receipt record from the <c>RAssetMoveHist</c> history table.
    /// </summary>
    /// <returns>
    /// The last posted company receipt record.
    /// </returns>
    protected RAssetMoveHist rAssetMoveHistCompanyReceipt()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowIntoTemplateSection_3</Name>
				<Source><![CDATA[
    protected int rowIntoTemplateSection_3()
    {
        const int countRow = 4;

        return  countRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        curWorkSheetNum = 1;
        this.printPage01();

        curWorkSheetNum = 2;
        this.printPage02();

        curWorkSheetNum = 3;
        this.printPage03();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAsset_1a);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo_Null</Name>
				<Source><![CDATA[
    public static Struct companyInfo_Null()
    {
        Struct struct = new Struct(Types::String, ConstChiefPost,
            Types::String, ConstChiefName,
            Types::Date, ConstDateChiefSignature,
            Types::String, ConstCompanyName,
            Types::String, CompanyAddress,
            Types::String, CompanyPhone,
            Types::String, CompanyFax,
            Types::String, ConstDepartamentName,
            Types::String, Bic,
            Types::String, BankName,
            Types::String, BankAccount,
            Types::String, BankCorrAccount,
            Types::String, ConstCodeOKPO,
            Types::String, ConstChiefAccountantName);

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'FA1A';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>