<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjCashFlowCalc
{
    // Container object
    container               projCashFlowCon;
    ProjCashFlow            projCashFlow;
    ProjCashFlowCalcEngine  projCashFlowCalcEngine;

    // Table declaration
    TmpProjCashFlow             tmpCashFlow;
    ProjTransIdBase             transId;
    TmpProjCashFlowExcelPivot   tmpExcelExport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPreQuery</Name>
				<Source><![CDATA[
    // This method will build the pre query for the calculations
private Query buildPreQuery()
{
    Query                   query   = new Query();
    QueryBuildDataSource    dataSource;

    // We set the query as per the variables set on the calling form
    // Called from the project form
    if (this.parmProjTable())
    {
        dataSource          = query.addDataSource(tableNum(ProjTable));
        if (projCashFlow.parmProjGroupId())
        {
            dataSource.addRange(fieldNum(ProjTable, ProjGroupId)).value(projCashFlow.parmProjGroupId());
        }
        else if (projCashFlow.parmProjId())
        {
            dataSource.addRange(fieldNum(ProjTable, ProjId)).value(queryValue(projCashFlow.parmProjId()));
        }
        else if (projCashFlow.parmProjInvoiceProjId())
        {
            dataSource.addRange(fieldNum(ProjTable, ProjInvoiceProjId)).value(projCashFlow.parmProjInvoiceProjId());
        }
        else if (projCashFlow.parmProjWIPId())
        {
            dataSource.addRange(fieldNum(ProjTable, wipProject)).value(projCashFlow.parmProjWIPId());
        }
        else if (projCashFlow.parmCustAccount())
        {
            dataSource.addRange(fieldNum(ProjTable, CustAccount)).value(projCashFlow.parmCustAccount());
        }
        else if (projCashFlow.parmSorting1())
        {
            dataSource.addRange(fieldNum(ProjTable, SortingId), 1).value(projCashFlow.parmSorting1());
        }
        else if (projCashFlow.parmSorting2())
        {
            dataSource.addRange(fieldNum(ProjTable, SortingId), 2).value(projCashFlow.parmSorting2());
        }
        else if (projCashFlow.parmSorting3())
        {
            dataSource.addRange(fieldNum(ProjTable, SortingId), 3).value(projCashFlow.parmSorting3());
        }

        if (projCashFlow.parmProjTree())
        {
            dataSource.addRange(fieldNum(ProjTable, ProjId)).value(projCashFlow.parmProjId()+'*');
        }
    }
    // Called from the project category form
    else if (this.parmProjCategory())
    {
        dataSource     = query.addDataSource(tableNum(ProjCategory));
        if (projCashFlow.parmCategoryGroupId())
        {
            dataSource.addRange(fieldNum(ProjCategory, CategoryGroupId)).value(projCashFlow.parmCategoryGroupId());
        }
        if (projCashFlow.parmCategoryId())
        {
            dataSource.addRange(fieldNum(ProjCategory, CategoryId)).value(projCashFlow.parmCategoryId());
        }
    }
    // Called from the resource form
    else if (this.parmResource())
    {
        dataSource     = query.addDataSource(tableNum(ResourceView));
        if (projCashFlow.parmResource())
        {
            dataSource.addRange(fieldNum(ResourceView, RecId)).value(queryValue(projCashFlow.parmResource()));
        }
    }
    // Called from the resource category form
    else if (this.parmResourceCategory())
    {
        dataSource     = query.addDataSource(tableNum(ResourceCategoryView));
        if (projCashFlow.parmResourceCategory())
        {
            dataSource.addRange(fieldNum(ResourceCategoryView, RecId)).value(queryValue(projCashFlow.parmResourceCategory()));
        }
    }
    // Called from the Inventory form
    else if (this.parmInventTable())
    {
        dataSource     = query.addDataSource(tableNum(InventTable));
        if (projCashFlow.parmitemId())
        {
            dataSource.addRange(fieldNum(InventTable, ItemId)).value(projCashFlow.parmitemId());
        }
    }
    // Called from the SMASubscription form
    else if (this.parmSMASubscriptionTable())
    {
        dataSource     = query.addDataSource(tableNum(SMASubscriptionTable));
        if (projCashFlow.parmSubscriptionGroupId())
        {
            dataSource.addRange(fieldNum(SMASubscriptionTable, GroupId)).value(projCashFlow.parmSubscriptionGroupId());
        }

        if (projCashFlow.parmSubscriptionId())
        {
            dataSource.addRange(fieldNum(SMASubscriptionTable, SubscriptionId)).value(projCashFlow.parmSubscriptionId());
        }
    }

    return query;
}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TmpProjCashFlow _tmpCashFlow)
{
    tmpCashFlow.setTmpData(_tmpCashFlow);
}

]]></Source>
			</Method>
			<Method>
				<Name>paramTransId</Name>
				<Source><![CDATA[
    public ProjTransIdBase paramTransId(ProjTransIdBase _transId = transId)
{
    transId = _transId;
    return transId;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTable</Name>
				<Source><![CDATA[
    private boolean parmCustTable()
{
    boolean ret;
    if (projCashFlow.parmCustAccount())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    private boolean parmInventTable()
{
    boolean ret;

    if (projCashFlow.parmitemId())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCashFlowCon</Name>
				<Source><![CDATA[
    public container parmProjCashFlowCon(container _projCashFlowCon = projCashFlowCon)
{
    projCashFlowCon = _projCashFlowCon;
    return projCashFlowCon;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategory</Name>
				<Source><![CDATA[
    private boolean parmProjCategory()
{
    boolean ret;
    if (projCashFlow.parmCategoryGroupId() || projCashFlow.parmCategoryId())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    private boolean parmProjTable()
{
    boolean ret;

    if (projCashFlow.parmProjId()            ||
        projCashFlow.parmProjGroupId()       ||
        projCashFlow.parmProjInvoiceProjId() ||
        projCashFlow.parmProjTree()          ||
        projCashFlow.parmSorting1()          ||
        projCashFlow.parmSorting2()          ||
        projCashFlow.parmSorting3()          ||
        projCashFlow.parmCustAccount()       ||
        projCashFlow.parmProjWIPId())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    private boolean parmResource()
{
    boolean ret;

    if (projCashFlow.parmResource())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategory</Name>
				<Source><![CDATA[
    private boolean parmResourceCategory()
{
    boolean ret;

    if (projCashFlow.parmResourceCategory())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSMASubscriptionTable</Name>
				<Source><![CDATA[
    private boolean parmSMASubscriptionTable()
{
    boolean ret;

    if (projCashFlow.parmSubscriptionGroupId() || projCashFlow.parmSubscriptionId())
    {
        ret = true;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpCashFlow</Name>
				<Source><![CDATA[
    // Returns the table instance
public TmpProjCashFlow parmTmpCashFlow(TmpProjCashFlow _tmpCashFlow = tmpCashFlow)
{
    tmpCashFlow = _tmpCashFlow;
    return tmpCashFlow;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpExcelExport</Name>
				<Source><![CDATA[
    public TmpProjCashFlowExcelPivot parmTmpExcelExport(TmpProjCashFlowExcelPivot _tmpExcelExport = tmpExcelExport)
{
    tmpExcelExport = _tmpExcelExport;
    return tmpExcelExport;
}

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
{
    Query                   query;
    QueryRun                queryRun;

    ProjTable               projTable;
    ResourceView            resource;
    ResourceCategoryView    resourceCategory;
    ProjCategory            projCategory;
    InventTable             inventTable;
    SMASubscriptionTable    smaSubscriptionTable;
    CustTable               custTable;

    projCashFlow = new ProjCashFlow();
    // Unpack the param class set by the client
    projCashFlow.unpack(this.parmProjCashFlowCon());

    // Initialise the calculate engine object
    projCashFlowCalcEngine = new ProjCashFlowCalcEngine(projCashFlow);

    delete_from tmpExcelExport;

    // Set the empty Excel export temp table
    projCashFlowCalcEngine.parmTmpExcelExport(tmpExcelExport);

    tmpCashFlow.clear();

    query    = this.buildPreQuery();
    queryRun = new QueryRun(query);

    while (queryRun.next())
    {
        if (this.parmProjTable())
        {
            if (queryRun.changed(tableNum(ProjTable)))
            {
                projTable       = queryRun.get(tableNum(ProjTable));
                projCashFlow.parmProjId(projTable.ProjId);
            }
        }
        else
        {
            if (this.parmProjCategory())
            {
                if (queryRun.changed(tableNum(ProjCategory)))
                {
                    projCategory    = queryRun.get(tableNum(ProjCategory));
                    projCashFlow.parmCategoryId(projCategory.CategoryId);
                }
            }
            else if (this.parmResource())
            {
                if (queryRun.changed(tableNum(ResourceView)))
                {
                    resource       = queryRun.get(tableNum(ResourceView));
                    projCashFlow.parmResource(resource.RecId);
                }
            }
            else if (this.parmResourceCategory())
            {
                if (queryRun.changed(tableNum(ResourceCategoryView)))
                {
                    resourceCategory       = queryRun.get(tableNum(ResourceCategoryView));
                    projCashFlow.parmResourceCategory(resourceCategory.RecId);
                }
            }
            else if (this.parmInventTable())
            {
                if (queryRun.changed(tableNum(InventTable)))
                {
                    inventTable       = queryRun.get(tableNum(InventTable));
                    projCashFlow.parmEmplItemId(inventTable.ItemId);
                }
            }
            else if (this.parmSMASubscriptionTable())
            {
                if (queryRun.changed(tableNum(SMASubscriptionTable)))
                {
                    smaSubscriptionTable       = queryRun.get(tableNum(SMASubscriptionTable));
                    projCashFlow.parmSubscriptionId(smaSubscriptionTable.SubscriptionId);
                }
            }
            else if (this.parmCustTable())
            {
                if (queryRun.changed(tableNum(CustTable)))
                {
                    custTable       = queryRun.get(tableNum(CustTable));
                    projCashFlow.parmCustAccount(custTable.AccountNum);
                }
            }
        }

        // Set the values of the table before inserting
        // This method sets the values of the database table columns before inserting
        this.setTmpCashFlow();
    }
    // Insert values into the table
    tmpCashFlow.insert();

    // Copy calculated Excel export temp table
    tmpExcelExport.setTmpData(projCashFlowCalcEngine.parmTmpExcelExport());
}

]]></Source>
			</Method>
			<Method>
				<Name>setTmpCashFlow</Name>
				<Source><![CDATA[
    // This method will set the values of the columns of the table
private void setTmpCashFlow()
{
    projCashFlowCalcEngine.setClientSettings();
    // Build the initial query based on the settings from the client

    // Choose which columns have to be set depending on the choice made
    switch (projCashFlow.parmActualBudget())
    {
        // Actual selected
        case ProjActualBudget::Actual:
            tmpCashFlow.Actual_Cashinflow += projCashFlowCalcEngine.getActualCashInflow();
            tmpCashFlow.Actual_Cashoutflow += projCashFlowCalcEngine.getActualCashOutflow();
            tmpCashFlow.Actual_Netcashflow = tmpCashFlow.Actual_Cashinflow - tmpCashFlow.Actual_Cashoutflow;
            tmpCashFlow.CashOutflowValue = tmpCashFlow.Actual_Cashoutflow;
            tmpCashFlow.NetCashFlowValue = tmpCashFlow.Actual_Netcashflow;
            tmpCashFlow.SalesCashInflow = tmpCashFlow.Actual_Cashinflow;

            tmpCashFlow.CashPaidHourValue += projCashFlowCalcEngine.getActualCashPaidHourValue();
            tmpCashFlow.CashPaidIExpensesValue += projCashFlowCalcEngine.getActualCashPaidExpensesValue();
            tmpCashFlow.CashPaidItemValue += projCashFlowCalcEngine.getActualCashPaidItemValue();

            tmpCashFlow.InvoicedOnaccountValue += projCashFlowCalcEngine.getActualInvoicedOnaccountValue();
            tmpCashFlow.InvoicedRevenueValue += projCashFlowCalcEngine.getActualInvoicedRevenueValue();

            break;

        // Budget selected
        case ProjActualBudget::Budget:
            tmpCashFlow.Budget_CashInFlow += projCashFlowCalcEngine.getBudgetCashInFlow();
            tmpCashFlow.Budget_CashOutFlow += projCashFlowCalcEngine.getBudgetCashOutFlow();
            tmpCashFlow.Budget_NetCashFlow = tmpCashFlow.Budget_CashInFlow - tmpCashFlow.Budget_CashOutFlow;
            tmpCashFlow.BudgetCashOutflowValue = tmpCashFlow.Budget_CashOutFlow;
            tmpCashFlow.BudgetNetCashFlowValue = tmpCashFlow.Budget_NetCashFlow;
            tmpCashFlow.BudgetSalesCashInflow = tmpCashFlow.Budget_CashInFlow;

            tmpCashFlow.CashPaidHourValue += projCashFlowCalcEngine.getBudgetCashPaidHourValue();
            tmpCashFlow.CashPaidIExpensesValue += projCashFlowCalcEngine.getBudgetCashPaidExpensesValue();
            tmpCashFlow.CashPaidItemValue += projCashFlowCalcEngine.getBudgetCashPaidItemValue();

            tmpCashFlow.InvoicedOnaccountValue += projCashFlowCalcEngine.getBudgetInvoicedOnaccountValue();
            tmpCashFlow.InvoicedRevenueValue += projCashFlowCalcEngine.getBudgetInvoicedRevenueValue();

            break;

        // Sum selected
        case ProjActualBudget::Sum_:
            tmpCashFlow.Actual_Cashinflow += projCashFlowCalcEngine.getActualCashInflow();
            tmpCashFlow.Actual_Cashoutflow += projCashFlowCalcEngine.getActualCashOutflow();
            tmpCashFlow.Actual_Netcashflow = tmpCashFlow.Actual_Cashinflow - tmpCashFlow.Actual_Cashoutflow;

            tmpCashFlow.CashOutflowValue = tmpCashFlow.Actual_Cashoutflow;
            tmpCashFlow.NetCashFlowValue = tmpCashFlow.Actual_Netcashflow;
            tmpCashFlow.SalesCashInflow = tmpCashFlow.Actual_Cashinflow;

            tmpCashFlow.Budget_CashInFlow += projCashFlowCalcEngine.getBudgetCashInFlow();
            tmpCashFlow.Budget_CashOutFlow += projCashFlowCalcEngine.getBudgetCashOutFlow();
            tmpCashFlow.Budget_NetCashFlow = tmpCashFlow.Budget_CashInFlow - tmpCashFlow.Budget_CashOutFlow;

            tmpCashFlow.BudgetCashOutflowValue = tmpCashFlow.Budget_CashOutFlow;
            tmpCashFlow.BudgetNetCashFlowValue = tmpCashFlow.Budget_NetCashFlow;
            tmpCashFlow.BudgetSalesCashInflow = tmpCashFlow.Budget_CashInFlow;

            tmpCashFlow.Sum_CashInFlow  = tmpCashFlow.Actual_Cashinflow  + tmpCashFlow.Budget_CashInFlow;
            tmpCashFlow.Sum_CashOutFlow = tmpCashFlow.Actual_Cashoutflow + tmpCashFlow.Budget_CashOutFlow;
            tmpCashFlow.Sum_NetCashFlow = tmpCashFlow.Actual_Netcashflow + tmpCashFlow.Budget_NetCashFlow;

            tmpCashFlow.SumCashOutflowValue = tmpCashFlow.Sum_CashOutFlow;
            tmpCashFlow.SumNetCashFlowValue = tmpCashFlow.Sum_NetCashFlow;
            tmpCashFlow.SumSalesCashInflow  = tmpCashFlow.Sum_CashInFlow;

            tmpCashFlow.CashPaidHourValue = projCashFlowCalcEngine.getActualCashPaidHourValue() +
                                            projCashFlowCalcEngine.getBudgetCashPaidHourValue();
            tmpCashFlow.CashPaidIExpensesValue = projCashFlowCalcEngine.getActualCashPaidExpensesValue() +
                                                 projCashFlowCalcEngine.getBudgetCashPaidExpensesValue();
            tmpCashFlow.CashPaidItemValue = projCashFlowCalcEngine.getActualCashPaidItemValue() +
                                            projCashFlowCalcEngine.getBudgetCashPaidItemValue();

            tmpCashFlow.InvoicedOnaccountValue = projCashFlowCalcEngine.getActualInvoicedOnaccountValue() +
                                                 projCashFlowCalcEngine.getBudgetInvoicedOnaccountValue();
            tmpCashFlow.InvoicedRevenueValue = projCashFlowCalcEngine.getActualInvoicedRevenueValue() +
                                               projCashFlowCalcEngine.getBudgetInvoicedRevenueValue();
            break;

        // Deviation selected
        case ProjActualBudget::Deviation:
            tmpCashFlow.Actual_Cashinflow += projCashFlowCalcEngine.getActualCashInflow();
            tmpCashFlow.Actual_Cashoutflow += projCashFlowCalcEngine.getActualCashOutflow();
            tmpCashFlow.Actual_Netcashflow = tmpCashFlow.Actual_Cashinflow - tmpCashFlow.Actual_Cashoutflow;

            tmpCashFlow.CashOutflowValue = tmpCashFlow.Actual_Cashoutflow;
            tmpCashFlow.NetCashFlowValue = tmpCashFlow.Actual_Netcashflow;
            tmpCashFlow.SalesCashInflow  = tmpCashFlow.Actual_Cashinflow;

            tmpCashFlow.Budget_CashInFlow += projCashFlowCalcEngine.getBudgetCashInFlow();
            tmpCashFlow.Budget_CashOutFlow += projCashFlowCalcEngine.getBudgetCashOutFlow();
            tmpCashFlow.Budget_NetCashFlow = tmpCashFlow.Budget_CashInFlow - tmpCashFlow.Budget_CashOutFlow;

            tmpCashFlow.BudgetCashOutflowValue = tmpCashFlow.Budget_CashOutFlow;
            tmpCashFlow.BudgetNetCashFlowValue = tmpCashFlow.Budget_NetCashFlow;
            tmpCashFlow.BudgetSalesCashInflow = tmpCashFlow.Budget_CashInFlow;

            tmpCashFlow.Deviation_CashInFlow  = tmpCashFlow.Actual_Cashinflow  - tmpCashFlow.Budget_CashInFlow;
            tmpCashFlow.Deviation_CashOutFlow = tmpCashFlow.Actual_Cashoutflow - tmpCashFlow.Budget_CashOutFlow;
            tmpCashFlow.Deviation_NetCashFlow = tmpCashFlow.Actual_Netcashflow - tmpCashFlow.Budget_NetCashFlow;

            tmpCashFlow.DeviationCashOutflowValue = tmpCashFlow.Deviation_CashOutFlow;
            tmpCashFlow.DeviationNetCashFlowValue = tmpCashFlow.Deviation_NetCashFlow;
            tmpCashFlow.DeviationSalesCashInflow  = tmpCashFlow.Deviation_CashInFlow;

            tmpCashFlow.CashPaidHourValue = projCashFlowCalcEngine.getActualCashPaidHourValue() -
                                            projCashFlowCalcEngine.getBudgetCashPaidHourValue();
            tmpCashFlow.CashPaidIExpensesValue = projCashFlowCalcEngine.getActualCashPaidExpensesValue() -
                                                 projCashFlowCalcEngine.getBudgetCashPaidExpensesValue();
            tmpCashFlow.CashPaidItemValue = projCashFlowCalcEngine.getActualCashPaidItemValue() -
                                            projCashFlowCalcEngine.getBudgetCashPaidItemValue();

            tmpCashFlow.InvoicedOnaccountValue = projCashFlowCalcEngine.getActualInvoicedOnaccountValue() -
                                                 projCashFlowCalcEngine.getBudgetInvoicedOnaccountValue();
            tmpCashFlow.InvoicedRevenueValue = projCashFlowCalcEngine.getActualInvoicedRevenueValue() -
                                               projCashFlowCalcEngine.getBudgetInvoicedRevenueValue();
            break;
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>