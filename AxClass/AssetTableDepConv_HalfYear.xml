<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_HalfYear</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The primary functionality of this class type is to calculate the
//  asset depreciation amounts for fixed assets employing a depreciation
//  convention of 'Half-Year'. For this purpose this class type must always
//  be used in conjuction with the AssetTableMethod_SL and
//   AssetTableMethod_RB asset depreciation amount calculation classes.
//
//  This secondary functionality of this class type is to calculate the
//  asset depreciation start date for fixed assets employing a depreciation
//  convention.
//
[AssetTableDepConvAttribute(AssetDepreciationConvention::HalfYear)]
public class AssetTableDepConv_HalfYear extends AssetTableDepConv
{
    #DEFINE.HalfYearFactor(0.5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_RB</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Reducing Balance" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_RB(AssetAmount _basisForDepreciation,
                               AssetAmount _prevDepAmountThisYear,
                               TransDate _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 retValue;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //
        //  Reducing Balance cannot have a last year because it is percentage not period based.
        //  Depreciations using Reducing Balance usually switch to a "Straight Line" method of
        //  depreciation in order to fully depreciate the asset within its lifetime.
        //
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);

            if (isFirstYear)
            {
                numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                numberOfPeriodsInInterval = this.setNumberOfPeriodsInInterval(_depreciationDate);
                estimatedYearlyDepreciation = _basisForDepreciation;
                estimatedYearlyDepreciation = estimatedYearlyDepreciation * #halfYearFactor;
                netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;

                retValue = this.getPeriodAmount(
                    netAmountToDepreciate,
                    numberOfPeriodsInInterval,
                    numberOfPeriodsLeftInYear);
            }
            else
            {
                retValue = this.calc_ReducingBalance(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process, throw an error.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_ReducingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the reducing balance depreciation amount.
    /// </summary>
    /// <param name="_basisForDepreciation">
    /// The base for the depreciation calculation.
    /// </param>
    /// <param name="_depreciationDate">
    /// The date from which the number of accrual periods in the year is determined.
    /// </param>
    /// <returns>
    /// The depreciation amount.
    /// </returns>
    /// <remarks>
    /// This method is the base calculation for the Reducing Balance depreciation methods.
    /// </remarks>
    protected AssetAmount calc_ReducingBalance(AssetAmount _basisForDepreciation,
                                               TransDate   _depreciationDate)
    {
        AssetAmount           retValue;
        AssetDepreciationTime numberOfPeriods;

        //
        //  _basisForDepreciation  =
        //      amount to depreciate - total depreciations for all prior years - any extraordinary depreciations.
        //
        //  This amount is then divided by the number of accrual periods in the year based on the depreciation date.
        //
        if (islastYear)
        {
            switch (depreciationProfile.Accrual)
            {
                case AssetAccrual::Monthly :
                    numberOfPeriods = mthOfYr(assetBook.UsedFromDate) - 1 ?  mthOfYr(assetBook.UsedFromDate) - 1 : 1;
                    if (numberOfPeriods > 6)
                        numberOfPeriods = 6;
                    retValue = (_basisForDepreciation * 0.5) / numberOfPeriods;
                    break;

                case AssetAccrual::Quarterly :
                    if (mthOfYr(assetBook.UsedFromDate) <= 4)
                    {
                        retValue = _basisForDepreciation * 0.5;
                    }
                    else
                    {
                        retValue = _basisForDepreciation / depreciationInterval.assetDepreciationTime(_depreciationDate);
                    }
                    break;

                case AssetAccrual::FiscalPeriod:
                    int numberOfPeriodsInYear = LedgerFiscalCalendar::numberOfPeriodsInYear(AssetBookTable::find(assetBook.BookId).getFiscalCalendar(), lastDepreciationDate);
                    retValue = numberOfPeriodsInYear ? (_basisForDepreciation * 0.5) / numberOfPeriodsInYear : 0;
                    break;

                default :
                    retValue = (_basisForDepreciation * 0.5);
                    break;
            }
        }
        else
        {
            retValue = _basisForDepreciation / depreciationInterval.assetDepreciationTime(_depreciationDate);
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Straight Line" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_SL(AssetAmount    _basisForDepreciation,
                               AssetAmount    _prevDepAmountThisYear,
                               AssetAmount    _prevDepAmountExternal,
                               AssetAmount    _prevDepAmountPriorYears,
                               TransDate      _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 retValue;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods);

            if (isFirstYear || islastYear)
            {
                numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                numberOfPeriodsInInterval = this.setNumberOfPeriodsInInterval(_depreciationDate);
                //
                //  This makes sure to account for any depreciation rounding errors that
                //  that could create a difference between the estimated final year's amount and
                //  the actual final year's amount.
                //  This only affects "Straight Line Service Life" because "Straight Line Life Remaining"
                //  always uses the Net Book value but "Service Life" does not.
                //
                if (islastYear &&
                    depreciationProfile.Method == AssetDepreciationMethod::StraightLine)
                {
                    estimatedYearlyDepreciation  = _basisForDepreciation - _prevDepAmountPriorYears;
                }
                else
                {
                    estimatedYearlyDepreciation = _basisForDepreciation * this.depreciationPercentage_SL();
                    estimatedYearlyDepreciation = estimatedYearlyDepreciation * #HalfYearFactor;
                }

                // The primary profile additional depreciation could be higher then the estimated depreciation
                // for Straight Line method when used as an alternative depreciation method.
                // To avoid incorrect results, the depreciation for the alt. depreciation will be calculated
                // based on the estimated yearly depreciation.
                if (_prevDepAmountThisYear > estimatedYearlyDepreciation
                    && depreciationProfile.Profile == assetBook.DepreciationAltProfile)
                {
                    numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(assetBook.UsedFromDate);
                    if (numberOfPeriodsLeftInYear)
                    {
                        return assetBook.roundDepreciationAmount(
                            estimatedYearlyDepreciation / numberOfPeriodsLeftInYear,
                            this.parmIsReportingCurrencyDepreciation());
                    }
                }
                else
                {
                    netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;
                }

                // Straight line Service life might have additional acquisitions that would increase the original life of the asset.
                // Depreciate the total of acquisitions over the number of periods until the asset is fully depreciated.
                if (islastYear && depreciationProfile.Method == AssetDepreciationMethod::StraightLine)
                {
                    AmountMST straightLineRegularDepreciationAmount =
                        this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
                    if (straightLineRegularDepreciationAmount <= netAmountToDepreciate)
                    {
                        retValue = straightLineRegularDepreciationAmount;
                    }
                }

                if (!retValue && numberOfPeriodsLeftInYear)
                {
                    retValue = this.getPeriodAmount(
                        netAmountToDepreciate,
                        numberOfPeriodsInInterval,
                        numberOfPeriodsLeftInYear);
                }
            }
            else
            {
                retValue = this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process, throw an error.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SLP_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the "Straight Line Percentage" type period depreciation amount
    ///  for the asset's current transaction.
    /// </summary>
    /// <param name="_basisForDepreciation">
    /// Amount to be taken as the base amount to calculate depreciation.
    /// </param>
    /// <param name="_prevDepAmountThisYear">
    /// Depreciation amount for previous year.
    /// </param>
    /// <param name="_depreciationDate">
    /// The depreciation start date.
    /// </param>
    /// <param name="_periods">
    /// The period for which to calculate depreciation amount.
    /// </param>
    /// <returns>
    /// Returns the amount calculated as SLP type period depreciation.
    /// </returns>
    public AssetAmount calc_SLP_IN(AssetAmount              _basisForDepreciation,
                                   AssetAmount              _prevDepAmountThisYear,
                                   TransDate                _depreciationDate,
                                   AssetDepreciationTime    _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 retValue;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //  Straight Line Percentage cannot have a last year because it is percentage not period based.
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);

            if (isFirstYear)
            {
                numberOfPeriodsLeftInYear   = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                numberOfPeriodsInInterval   = this.setNumberOfPeriodsInInterval(_depreciationDate);
                estimatedYearlyDepreciation = _basisForDepreciation;
                estimatedYearlyDepreciation = estimatedYearlyDepreciation * #halfYearFactor;
                netAmountToDepreciate       = estimatedYearlyDepreciation - _prevDepAmountThisYear;

                retValue = this.getPeriodAmount(
                    netAmountToDepreciate,
                    numberOfPeriodsInInterval,
                    numberOfPeriodsLeftInYear);
            }
            else
            {
                retValue = this.calc_StraightLinePercentage_IN(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //  An error has occurred within this calculation process, throw an error.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's period depreciation amount into the correct currency.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetAmount calcCurrencyAmount(AssetAmount _amount, AssetDepreciationTime _periods)
    {
        AssetAmount amount;

        if (assetBook.RecId)
        {
            amount = assetBook.roundDepreciationAmount(
                _amount,
                isReportingCurrencyDepreciation);
        }
        else
        {
            amount = CurrencyExchangeHelper::amount(_amount, this.getCurrencyCode());
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDisposalNumberDepreciationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of depreciation periods used in the final year of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The disposal transaction date.
    /// </param>
    /// <param name="_projectedLastDayOfDepreciation">
    /// The expected last date of depreciation.
    /// </param>
    /// <param name="_isDisposalSameYear">
    /// Indicates whether asset acquisition and disposal are in same year.
    /// </param>
    /// <returns>
    /// The number of periods that is based on mid-quarter convention rule.
    /// </returns>
    /// <remarks>
    /// If the disposal occurs in the same fiscal year as the placed in service, no depreciation is allowed.
    /// A half year of depreciation is deducted in the first fiscal year and the last fiscal year of the assetâ€™s service life.
    /// </remarks>
    public AssetDepreciationTime calcDisposalNumberDepreciationPeriods(
        TransDate       _disposalTransDate,
        AssetTransDate  _projectedLastDayOfDepreciation,
        boolean         _isDisposalSameYear)
    {
        AssetDepreciationTime numberOfPeriods;

        if (!_isDisposalSameYear
            && depreciationInterval.findLastDayOfYear(_disposalTransDate) != depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate))
        {
            numberOfPeriods = decRound(depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfYear(_disposalTransDate)) / 2, 0);
        }

        return numberOfPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment to asset's remaining life.
    /// </summary>
    /// <param name="_restPeriod">
    /// Number of remaining periods.
    /// </param>
    /// <param name="_periodstart">
    /// Starting date of the period.
    /// </param>
    /// <param name="_periods">
    /// Number of periods.
    /// </param>
    /// <returns>
    /// Adjusted asset's remaining life.
    /// </returns>
    /// <remarks>
    /// This method assumes that an instance of this class type exists
    /// and that calc_RB() or calc_SL() methods have already been run.
    /// </remarks>
    public AssetDepreciationTime calcRestPeriod(
        AssetDepreciationTime _restPeriod,
        AssetTransDate _periodstart,
        AssetDepreciationTime _periods)
    {
        AssetDepreciationTime   restPeriod;
        AssetDepreciationTime   totalnumberofPeriod;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        boolean                 isShortFiscalPeriod;
        RefRecId                fiscalCalendarRecId;

        // modified the  method to set period value for half year convention as per convention rule.
        if (depreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            fiscalCalendarRecId = AssetBookTable::find(assetBook.BookId).getFiscalCalendar();

            //This query is incorrect and should be rewritten. It is trying to identify short fiscal years
            //as periods with less than 12 periods, which is not a correct assumption. It does not query the fiscal periods
            //by year, and groups them by end date (except for opening/closing periods, they each have unique end dates.
            //Because of this, it will always set isShortFiscalPeriod to true.
            while select count(RecId), EndDate from fiscalCalendarPeriod
                group by EndDate
                where fiscalCalendarPeriod.FiscalCalendar == fiscalCalendarRecId
            {
                if (fiscalCalendarPeriod.RecId < 12 && !isShortFiscalPeriod)
                {
                    isShortFiscalPeriod = true;
                    break;
                }
            }
        }

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
                restPeriod = this.getRemainingAssetPeriod(_periodstart, isShortFiscalPeriod);
                boolean isKnownAccrual = this.checkKnownAssetAccrual();

                if (!isKnownAccrual)
                {
                    throw error(strFmt("@SYS99071", depreciationProfile.Profile));
                }
                break;

            case AssetDepreciationYear::Calendar:
                if (isFirstYear)
                {
                    switch (depreciationProfile.Accrual)
                    {
                        case AssetAccrual::Monthly:
                        case AssetAccrual::Quarterly:
                        case AssetAccrual::HalfYearly:
                            if (isFirstYear)
                            {
                                totalnumberofPeriod = (depreciationInterval.assetDepreciationTime(_periodstart) - depreciationInterval.indexofPeriod(assetBook.DepreciationStartDate) + 1);
                                restPeriod = decRound(depreciationInterval.assetDepreciationTime(_periodstart) / 2, 0) / totalnumberofPeriod;
                            }

                            break;

                        default:
                            if (_periodstart == assetBook.DepreciationStartDate)
                            {
                                restPeriod = mthOfYr(depreciationInterval.endPeriod(assetBook.DepreciationStartDate));
                                restPeriod = restPeriod * (depreciationInterval.numOfPeriodsPerYear() / #monthsInYear) * #halfYearFactor;
                            }
                            else
                            {
                                restPeriod = #halfYearFactor;
                            }
                    }
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            default:
                // The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingAssetPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the asset remaining period.
    /// </summary>
    /// <param name = "_periodStart">
    /// Starting date of the period.
    /// </param>
    /// <param name = "_isShortFiscalPeriod">
    /// A boolean variable indicating whether the fiscal period has less than 12 periods.
    /// </param>
    /// <returns>
    /// The remaining asset periods.
    /// </returns>
    protected AssetDepreciationTime getRemainingAssetPeriod(AssetTransDate _periodStart, boolean _isShortFiscalPeriod)
    {
        AssetDepreciationTime restPeriod;
        date fromDate, toDate;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
                if (isFirstYear)
                {
                    if (_isShortFiscalPeriod)
                    {
                        if (_periodStart == assetBook.DepreciationStartDate)
                        {
                            fromDate = depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate);
                            toDate = depreciationInterval.endPeriod(assetBook.DepreciationStartDate);
                            restPeriod = depreciationInterval.numOfPeriods(fromDate, toDate);
                            restPeriod = restPeriod * #halfYearFactor;
                        }
                        else
                        {
                            restPeriod = #halfYearFactor;
                        }
                    }
                    else
                    {
                        if (isFirstYear && assetBook.DepreciationStartDate <= depreciationInterval.findMiddleOfYear(assetBook.UsedFromDate))
                        {
                            fromDate = depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate);
                            toDate = depreciationInterval.endPeriod(assetBook.DepreciationStartDate);
                            restPeriod = depreciationInterval.numOfPeriods(fromDate, toDate);
                            AssetDepreciationTime totalnumberofPeriod = (#monthsInYear - restPeriod + 1);

                            restPeriod = 6 / totalnumberofPeriod;
                        }
                        else if (isFirstYear)
                        {
                            if (_periodStart == assetBook.DepreciationStartDate)
                            {
                                fromDate = depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate);
                                toDate = depreciationInterval.endPeriod(assetBook.DepreciationStartDate);
                                restPeriod = depreciationInterval.numOfPeriods(fromDate, toDate);
                                restPeriod = restPeriod * #halfYearFactor;
                            }
                            else
                            {
                                restPeriod = #halfYearFactor;
                            }
                        }
                        else
                        {
                            restPeriod = 1;
                        }
                    }
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            case AssetAccrual::Yearly:
                if (isFirstYear || islastYear)
                {
                    restPeriod = #halfYearFactor;
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            default:
                break;
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKnownAssetAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given asset accrual is a known accrual.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetAccrual</c> enumeration value is of known type; otherwise, false.
    /// </returns>
    protected boolean checkKnownAssetAccrual()
    {
        boolean isKnownAccrual = true;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
            case AssetAccrual::Yearly:
                break;
            default:
                isKnownAccrual = false;
        }

        return isKnownAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the asset's starting depreciation date.
    /// </summary>
    /// <param name="_usedFromDate">
    /// The placed in service date.
    /// </param>
    /// <returns>
    /// Updated the Placed in service date.
    /// </returns>
    /// <remarks>
    ///  The "Half Year" depreciation convention will always calculate the "Last depreciation run date"
    ///  to the 1st of the month the asset was placed in service.
    ///
    ///  The AssetBook.usedFromDate is considered to be the "placed in service date".
    /// </remarks>
    protected AssetDepreciationStartDate calcStartDate(AssetUsedFromDate _usedFromDate)
    {
        AssetDepreciationStartDate startDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
                startDate = depreciationInterval.startingPeriodDate(_usedFromDate);
                break;

            case AssetDepreciationYear::Calendar:
                startDate = mkDate(1, mthOfYr(_usedFromDate), year(_usedFromDate));
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetPeriodDate</Name>
				<Source><![CDATA[
    //
    //  This method sets the various date properties required for this class.
    //
    protected void setAssetPeriodDate(TransDate _depreciationDate,
                                      AssetDepreciationTime _periods,
                                      boolean   _isRB_Calc = false)
    {
        this.checkIsFirstYear(_depreciationDate);

        if (isFirstYear)
        {
            assetPeriodDate = assetBook.DepreciationStartDate;
            startingServiceLife = assetBook.ServiceLife;
        }
        else
        {
            //Modifed code to avoid, applying convention rule in case of of other adjustment.
            if (assetBook.DepreciationAltProfile && isOtherAdjustment)
            {
                _isRB_Calc = false;
            }

            this.checkIsLastYear(_depreciationDate, _periods, _isRB_Calc);

            if (islastYear)
            {
                assetPeriodDate = lastDepreciationDate;
                startingServiceLife = #HalfYearFactor;
            }
            else
            {
                assetPeriodDate = _depreciationDate;
                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(depreciationInterval.openingPeriodDate(_depreciationDate)) -
                             year(depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate))) +
                            #HalfYearFactor;
                        break;

                    case AssetDepreciationYear::Calendar:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(_depreciationDate) - year(assetBook.DepreciationStartDate)) +
                            #HalfYearFactor;
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfPeriodsInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines how many periods are in a given interval.
    /// </summary>
    /// <param name="_depreciationDate">
    /// The asset transaction date.
    /// </param>
    /// <returns>
    /// Number of periods for a given block of time.
    /// </returns>
    /// <remarks>
    /// In the last year with Half-year and Quarterly frequency, there is always 1 period instead of
    /// the number of fical periods or calendar months in the interval. calc_RB and calc_SL method
    /// base the calculations based on the number of periods based on the frequency and not on the
    /// number of fiscal periods or calendar months in the interval.
    /// </remarks>
    protected AssetDepreciationTime setNumberOfPeriodsInInterval(TransDate _depreciationDate)
    {
        AssetDepreciationTime returnValue;

        if (islastYear)
        {
            switch (depreciationProfile.DepreciationYear)
            {
                case AssetDepreciationYear::Calendar:
                    switch (depreciationProfile.Accrual)
                    {
                        case AssetAccrual::HalfYearly:
                        case AssetAccrual::Quarterly:
                            returnValue = 1;
                            break;
                        default:
                            returnValue = super(_depreciationDate);
                    }
                    break;
                default:
                    returnValue = super(_depreciationDate);
            }
        }
        else
        {
            returnValue = super(_depreciationDate);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of periods left in a given year.
    /// </summary>
    /// <param name="_depreciationDate">
    /// Asset transaction date
    /// </param>
    /// <returns>
    /// Number of periods in a year.
    /// </returns>
    /// <remarks>
    /// In the last year of depreciation, the number of periods left in the year is always the half of periods for a given frequency.
    /// Ex. Monthly -- 6, Half-Year 1
    /// </remarks>
    protected AssetDepreciationTime setNumberOfPeriodsLeftInYear(TransDate _depreciationDate)
    {
        AssetDepreciationTime returnValue;
        AssetDepreciationTime assetDepreciationTime;

        if (islastYear)
        {
            assetDepreciationTime = depreciationInterval.assetDepreciationTime(_depreciationDate) / 2;

            // There is a difference in how the decRound() method executes when running interpreted (X++) versus
            //  how it executes running under CIL.  When running under CIL, 0.5 will round down, when we need it
            //  to round up in the case of Yearly depreciation
            if (assetDepreciationTime == 0.5)
            {
                assetDepreciationTime = 1;
            }

            returnValue = decRound(assetDepreciationTime, 0) - depreciationInterval.indexofPeriod(_depreciationDate) + 1;
        }
        else
        {
            returnValue = super(_depreciationDate);
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>