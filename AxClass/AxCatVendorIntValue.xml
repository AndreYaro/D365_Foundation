<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxCatVendorIntValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxCatVendorIntValue extends AxCatVendProdCandidateAttributeValue
{
    CatVendorIntValue catVendorIntValue;
    UnitOfMeasureSymbol unitOfMeasureSymbol;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>catVendorIntValue</Name>
				<Source><![CDATA[
    public CatVendorIntValue catVendorIntValue(CatVendorIntValue _catVendorIntValue = catVendorIntValue)
    {
        if (!prmisdefault(_catVendorIntValue))
        {
            this.setCurrentRecordFromExternal(_catVendorIntValue);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current record in the <c>AxCatVendorIntValue</c> table.
    /// </summary>
    /// <param name="_catVendorIntValue">
    /// The <c>AxCatVendorIntValue</c> record to set; optional.
    /// </param>
    /// <returns>
    /// A <c>AxCatVendorIntValue</c> record.
    /// </returns>
    public Common currentRecord(Common _catVendorIntValue = catVendorIntValue)
    {
        if (!prmisdefault(_catVendorIntValue))
        {
            super(_catVendorIntValue);
            catVendorIntValue = _catVendorIntValue;
        }
        else
        {
            super();
        }

        return catVendorIntValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty record for the <c>CatVendorIntValue</c> table.
    /// </summary>
    /// <returns>
    ///    An empty record from the <c>CatVendorIntValue</c> table.
    /// </returns>
    protected Common emptyRecord()
    {
        CatVendorIntValue localCatVendorIntValue;
        return localCatVendorIntValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntUnitOfMeasure</Name>
				<Source><![CDATA[
    public SysInt64 parmIntUnitOfMeasure(SysInt64 _intUnitOfMeasure = 0)
    {
        if (!prmisdefault(_intUnitOfMeasure))
        {
            this.setField(fieldnum(CatVendorIntValue, IntUnitOfMeasure), _intUnitOfMeasure);
        }

        return catVendorIntValue.IntUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmIntUnitOfMeasureSymbol(UnitOfMeasureSymbol _unitOfMeasureSymbol = unitOfMeasureSymbol)
    {
        UnitOfMeasure                   unitOfMeasure;
        if (!prmisdefault(_unitOfMeasureSymbol))
        {
            unitOfMeasureSymbol = _unitOfMeasureSymbol;
            unitOfMeasure = UnitOfMeasure::findBySymbol(unitOfMeasureSymbol);
            if (unitOfMeasure)
            {
                this.parmIntUnitOfMeasure(unitOfMeasure.RecId);
            }
        }

        return unitOfMeasureSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntValue</Name>
				<Source><![CDATA[
    public AttributeValueInt parmIntValue(AttributeValueInt _intValue = 0)
    {
        if (!prmisdefault(_intValue))
        {
            this.setField(fieldnum(CatVendorIntValue, IntValue), _intValue);
        }

        return catVendorIntValue.IntValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntUnitOfMeasure</Name>
				<Source><![CDATA[
    protected void setIntUnitOfMeasure()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(CatVendorIntValue, IntUnitOfMeasure)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntValue</Name>
				<Source><![CDATA[
    protected void setIntValue()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(CatVendorIntValue, IntValue)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls all of the default methods that must be called before a record is inserted or updated.
    /// </summary>
    protected void setTableFields()
    {
        super();

        useMapPolicy = false;

        this.setIntValue();
        this.setIntUnitOfMeasure();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxCatVendorIntValue construct()
    {
        return new AxCatVendorIntValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCatVendorIntValue</Name>
				<Source><![CDATA[
    public static AxCatVendorIntValue newCatVendorIntValue(CatVendorIntValue _catVendorIntValue)
    {
        AxCatVendorIntValue axCatVendorIntValue = AxCatVendorIntValue::construct();
        axCatVendorIntValue.catVendorIntValue(_catVendorIntValue);

        return axCatVendorIntValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>