<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcessService_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service of asset depreciation pre-tax deduction process.
/// </summary>
class AssetDepPreTaxDedProcessService_JP extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runFullProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs full process.
    /// </summary>
    /// <param name="_contract">
    /// The contract instance
    /// </param>
    public void runFullProcess(AssetDepPreTaxDedProcessContract_JP _contract)
    {
        AssetDepPreTaxDedProcessor_JP   assetDepPreTaxDedProcessor;

        QueryRun                                qr;
        AssetBook                               assetBook;
        AssetDepPreTaxDedProcess_JP             assetDepPreTaxDedProcess;
        AssetDepPreTaxDedProcessTask_JP         assetDepPreTaxDedProcessTask;
        AssetDepPreTaxDedProcTaskAgent_JP       assetDepPreTaxDedProcTaskAgent;
        boolean                                 hasNewIgnoredTask;

        assetDepPreTaxDedProcess    = AssetDepPreTaxDedProcess_JP::find(_contract.parmProcessRecId());
        assetDepPreTaxDedProcessor  = AssetDepPreTaxDedProcessor_JP::construct(assetDepPreTaxDedProcess);

        // Init new process
        assetDepPreTaxDedProcessor.initProcess();

        // Create tasks
        qr = new QueryRun(_contract.getQuery());
        while (qr.next())
        {
            assetBook = qr.get(tableNum(assetBook));

            // The validation of processing period will be done at both here and the posting time.
            if (assetDepPreTaxDedProcessor.validateTask(assetBook))
            {
                assetDepPreTaxDedProcessTask.clear();
                assetDepPreTaxDedProcessTask.AssetDepPreTaxDedProcess_JP    = assetDepPreTaxDedProcess.RecId;
                assetDepPreTaxDedProcessTask.AssetId                        = assetBook.AssetId;
                assetDepPreTaxDedProcessTask.BookId                         = assetBook.BookId;
                assetDepPreTaxDedProcessTask.Status                         = AssetDepPreTaxDedProcessTaskstatus_JP::Active;
                assetDepPreTaxDedProcessTask.insert();
            }
            else
            {
                hasNewIgnoredTask = true;
            }
        }

        if (hasNewIgnoredTask)
        {
            // The fixed assets that are not eligible for settlement are included in the ignored fixed asset list
            info("@SYP4881528");
        }

        // Run taks
        assetDepPreTaxDedProcTaskAgent = AssetDepPreTaxDedProcTaskAgent_JP::construct(assetDepPreTaxDedProcess);
        assetDepPreTaxDedProcTaskAgent.run();

        // Finalize process
        assetDepPreTaxDedProcessor.finalizeProcess();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>