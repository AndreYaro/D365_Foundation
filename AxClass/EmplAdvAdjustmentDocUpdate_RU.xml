<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplAdvAdjustmentDocUpdate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplAdvAdjustmentDocUpdate_RU
{
    TransDate       transDate;
    EmplTrans_RU    emplTrans;
    LedgerVoucher   ledgerVoucher;
    boolean         skipAdvanceTableUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFactureJour</Name>
				<Source><![CDATA[
    private boolean checkFactureJour(FactureTrans_RU _factureTrans)
    {
        FactureJour_RU  factureJour;
        TransDate       bookPeriodStart, bookPeriodStartFacture;
        ;

        factureJour = FactureJour_RU::find(_factureTrans.FactureId, _factureTrans.Module);

        if (! factureJour)
        {
            return true;
        }

        [bookPeriodStartFacture] = TaxReportPeriod::datePeriodPurchSalesBook_RU(factureJour.FactureDate);
        [bookPeriodStart]        = TaxReportPeriod::datePeriodPurchSalesBook_RU(transDate);

        return bookPeriodStartFacture != bookPeriodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplTrans</Name>
				<Source><![CDATA[
    public EmplTrans_RU parmEmplTrans(EmplTrans_RU _emplTrans = emplTrans)
    {
        ;

        emplTrans = _emplTrans;
        return emplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ;

        ledgerVoucher = _ledgerVoucher;
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAdvanceTableUpdate</Name>
				<Source><![CDATA[
    public boolean parmSkipAdvanceTableUpdate(boolean _value = skipAdvanceTableUpdate)
    {
        skipAdvanceTableUpdate = _value;
        return skipAdvanceTableUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        ;

        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendInvoiceJour</Name>
				<Source><![CDATA[
    public void updateCustVendInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour,
                                          ExchRate            _exchRate)
    {
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findRecId(_custVendInvoiceJour.RecId, true);
        ;

        vendInvoiceJour.ExchRate = _exchRate;
        vendInvoiceJour.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendInvoiceJourReverse</Name>
				<Source><![CDATA[
    public void updateCustVendInvoiceJourReverse(
        VendTrans    _vendTrans,
        EmplTrans_RU _exchAdjTrans,
        RefRecId     _emplTransRecId)
    {
        EmplAdvLine_RU                      emplAdvLine;
        TaxTrans                            taxTrans;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        DimensionAttributeValueCombination  dimAttrValueCombination;

        FactureTrans_RU     factureTrans;

        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;

        if (_vendTrans)
        {
            vendInvoiceJour = CustVendTransData::construct(_vendTrans).custVendInvoiceJour_RU();
            vendInvoiceJour.selectForUpdate(true);
            vendInvoiceJour.ExchRate = vendInvoiceJour.InvoiceAmount ? vendInvoiceJour.InvoiceAmountMST / vendInvoiceJour.InvoiceAmount * 100 : 0;
            vendInvoiceJour.doUpdate();

            while select forupdate vendInvoiceTrans
                where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId             &&
                      vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId           &&
                      vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate         &&
                      vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                      vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId
            {
                vendInvoiceTrans.LineAmountMST_W    = vendInvoiceTrans.LineAmount * vendInvoiceJour.ExchRate / 100;
                vendInvoiceTrans.TaxAmountMST_W     = vendInvoiceTrans.TaxAmount * vendInvoiceJour.ExchRate / 100;
                vendInvoiceTrans.vatAmountMST_RU    = vendInvoiceTrans.vatAmount_RU * vendInvoiceJour.ExchRate / 100;
                vendInvoiceTrans.ExciseAmountMST_RU = CurrencyExchangeHelper::amountCur2MST(vendInvoiceTrans.ExciseAmount_RU, vendInvoiceTrans.CurrencyCode, vendInvoiceJour.ExchRate);
                vendInvoiceTrans.doUpdate();

                select firstonly factureTrans
                    where factureTrans.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                          factureTrans.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                          factureTrans.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                          factureTrans.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                          factureTrans.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                          factureTrans.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                          factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;

                if (! this.checkFactureJour(factureTrans))
                {
                    throw error("@GLS112749");
                }
            }
        }

        if (_exchAdjTrans)
        {
            emplAdvLine = EmplAdvLine_RU::findTransEmplRecId(_emplTransRecId, true);

        select firstonly LedgerDimension from generalJournalAccountEntry
            where generalJournalAccountEntry.PostingType == LedgerPostingType::AdvanceAdjustmentGain_RU  ||
                  generalJournalAccountEntry.PostingType == LedgerPostingType::AdvanceAdjustmentLoss_RU
            exists join generalJournalEntry
                where generalJournalEntry.RecId          == generalJournalAccountEntry.GeneralJournalEntry
                   && generalJournalEntry.AccountingDate == _exchAdjTrans.TransDate
                   && generalJournalEntry.Ledger         == Ledger::current()
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                   && subledgerVoucherGeneralJournalEntry.Voucher             == _exchAdjTrans.Voucher
            exists join  dimAttrValueCombination
                where dimAttrValueCombination.RecId       == generalJournalAccountEntry.LedgerDimension
                   && dimAttrValueCombination.MainAccount != LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_exchAdjTrans.LedgerDimension);

    /*        select firstonly ledgerTrans
                where ledgerTrans.Voucher       == _exchAdjTrans.Voucher                        &&
                      ledgerTrans.TransDate     == _exchAdjTrans.TransDate                      &&
                      (ledgerTrans.Posting      == LedgerPostingType::AdvanceAdjustmentGain_RU  ||
                      ledgerTrans.Posting       == LedgerPostingType::AdvanceAdjustmentLoss_RU) &&
                      ledgerTrans.AccountNum    != _exchAdjTrans.LedgerAccount;

            if (emplAdvLine && ledgerTrans.AccountNum == emplAdvLine.LedgerAccount)
    */
            if (emplAdvLine && LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension) == LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(emplAdvLine.LedgerDimension))
            {
                taxTrans = TaxTrans::find(_exchAdjTrans.Voucher, _exchAdjTrans.TransDate);

                emplAdvLine.ExchRate            = (emplAdvLine.AmountMst + _exchAdjTrans.AmountMST) / emplAdvLine.AmountCur * 100;
                emplAdvLine.TaxAmountMST        -= taxTrans.TaxAmount;
                emplAdvLine.AmountMst           += _exchAdjTrans.AmountMST;
                emplAdvLine.AmountMstExclTax    = emplAdvLine.AmountMst - emplAdvLine.TaxAmountMST;
                emplAdvLine.update();
            }

            select firstonly factureTrans
                where factureTrans.InvoiceLineNum   == emplAdvLine.LineNum   &&
                      factureTrans.InvoiceId        == emplAdvLine.AdvanceId &&
                      factureTrans.FactureLineType  == FactureLineType_RU::AdvanceReport;

            if (! this.checkFactureJour(factureTrans))
            {
                throw error("@GLS114572");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendInvoiceTrans</Name>
				<Source><![CDATA[
    public void updateCustVendInvoiceTrans(CustVendInvoiceTrans _custVendInvoiceTrans,
                                           ExchRate             _exchRate,
                                           AmountMST            _lineAmountMST = 0,
                                           AmountMST            _taxAmountMST  = 0)
    {
        VendInvoiceTrans    vendInvoiceTrans;
        FactureTrans_RU     factureTrans;
        ;

        vendInvoiceTrans = _custVendInvoiceTrans;

        vendInvoiceTrans.LineAmountMST_W    += _lineAmountMST;
        vendInvoiceTrans.TaxAmountMST_W     += _taxAmountMST;
        vendInvoiceTrans.vatAmountMST_RU    += _taxAmountMST;
        vendInvoiceTrans.ExciseAmountMST_RU = CurrencyExchangeHelper::amountCur2MST(vendInvoiceTrans.ExciseAmount_RU, vendInvoiceTrans.CurrencyCode, _exchRate);
        vendInvoiceTrans.doUpdate();

        select firstonly factureTrans
            where factureTrans.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                  factureTrans.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                  factureTrans.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                  factureTrans.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                  factureTrans.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                  factureTrans.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                  factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;

        if (! this.checkFactureJour(factureTrans))
        {
            throw error("@GLS112749");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplAdvLine</Name>
				<Source><![CDATA[
    public void updateEmplAdvLine(EmplTrans_RU      _emplTrans,
                                  EmplAdvLine_RU    _emplAdvLine,
                                  ExchRate          _exchRate,
                                  AmountMST         _lineAmountMST = 0,
                                  AmountMST         _taxAmountMST  = 0
                                  )
    {
        FactureTrans_RU factureTrans;

        if (!_emplAdvLine)
        {
            throw error(strFmt("@SYS4000745", _emplTrans.Voucher, _emplTrans.TransDate));
        }

        _emplAdvLine.AmountMst          += _lineAmountMST;
        _emplAdvLine.TaxAmountMST       += _taxAmountMST;
        _emplAdvLine.AmountMstExclTax   = _emplAdvLine.AmountMst - _emplAdvLine.TaxAmountMST;
        _emplAdvLine.ExchRate           = _exchRate;
        _emplAdvLine.update(! this.parmSkipAdvanceTableUpdate());

        select firstonly factureTrans
            where factureTrans.InvoiceLineNum   == _emplAdvLine.LineNum             &&
                  factureTrans.InvoiceId        == _emplAdvLine.AdvanceId           &&
                  factureTrans.FactureLineType  == FactureLineType_RU::AdvanceReport;

        if (!this.checkFactureJour(factureTrans))
        {
            throw error("@GLS114572");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EmplAdvAdjustmentDocUpdate_RU construct()
    {
        return new EmplAdvAdjustmentDocUpdate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReverseSettlement</Name>
				<Source><![CDATA[
    public static EmplAdvAdjustmentDocUpdate_RU newFromReverseSettlement(LedgerVoucher _ledgerVoucher)
    {
        EmplAdvAdjustmentDocUpdate_RU emplAdvAdjustmentDocUpdate = EmplAdvAdjustmentDocUpdate_RU::construct();

        emplAdvAdjustmentDocUpdate.parmLedgerVoucher(_ledgerVoucher);

        return emplAdvAdjustmentDocUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSettlement</Name>
				<Source><![CDATA[
    public static EmplAdvAdjustmentDocUpdate_RU newFromSettlement(TransDate _transDate)
    {
        EmplAdvAdjustmentDocUpdate_RU emplAdvAdjustmentDocUpdate = EmplAdvAdjustmentDocUpdate_RU::construct();

        emplAdvAdjustmentDocUpdate.parmTransDate(_transDate);

        return emplAdvAdjustmentDocUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
