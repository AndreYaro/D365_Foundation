<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaymDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Defines settings of Payments Import for Customers.
/// </summary>
public final class CustInPaymDialog
{
    private DialogField dialogPaymMode;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustInPaymDialog construct()
    {
        return new CustInPaymDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows dialog to specify settings of Payments Import for Customers.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object from the calling form.
    /// </param>
    public void openDialog(Args _args)
    {
        LedgerJournalTable ledgerJournalTable;

        switch (_args.dataset())
        {
            case tablenum(LedgerJournalTable):
                ledgerJournalTable = _args.record();
                break;

            case tableNum(CustEinvoiceIntegrationTrans):
                break;

            default:
                throw error(strfmt("@SYS22828", "@SYS24287"));
        }

        boolean isNorway = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]);
        CustInPaym custInPaymLastValue;

        if (isNorway)
        {
            custInPaymLastValue = new CustInPaym();
            custInPaymLastValue.getLast();
        }

        Dialog dialog = this.createDialog(isNorway ? custInPaymLastValue.paymMode() : "");

        if (dialog.run())
        {
            CustPaymMode paymMode = dialogPaymMode.value();
            CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(paymMode);

            if (custPaymModeTable.UseGERImport)
            {
                if (!custPaymModeTable.ERModelMappingTable)
                {
                    throw error(strfmt("@SYS63358", "@SYS66244", new DictType(extendedtypenum(PaymMode)).label(), paymMode));
                }

                Map parametersValuesMap = new Map(Types::String, Types::AnyType);
                parametersValuesMap.insert('$PaymMode', paymMode);
                parametersValuesMap.insert('$JournalNum', LedgerJournalTable.JournalNum);

                DimensionAttributeValueCombination dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(custPaymModeTable.PaymentLedgerDimension);

                BankAccountTable bankAccount = BankAccountTable::find(dimensionAttributeValueCombination.DisplayValue);

                using (CustVendPaymAdditionalParamsHelperRunReportContext context = new CustVendPaymAdditionalParamsHelperRunReportContext())
                {
                    Map visibleParamsMap = new Map(Types::String, Types::String);
                    visibleParamsMap.insert('$BankAccount', bankAccount.AccountID);

                    context.visibleParametersValuesMap = visibleParamsMap;

                    CustVendPaymAdditionalParamsHelper::runReport(custPaymModeTable.ERModelMappingTable, CustVendOutPaymConstants::IntegrationPoint, parametersValuesMap);
                }
            }
            else
            {
                if (isNorway)
                {
                    custInPaymLastValue.setPaymMode(paymMode);
                    custInPaymLastValue.saveLast();
                }

                CustInPaym custInPaym = CustInPaym::construct(paymMode);
                custInPaym.getLast();

                if (this.shouldSetJournalNum())
                {
                    custInPaym.setJournalNum(ledgerJournalTable.JournalNum);
                }
                custInPaym.setPaymMode(paymMode);
                custInPaym.saveLast();

                if (custInPaym.prompt())
                {
                    custInPaym.runOperation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether to set the journal number.
    /// </summary>
    /// <returns>
    ///     true if the journal number should set; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean shouldSetJournalNum()
    {
        return !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDialog</Name>
				<Source><![CDATA[
    private Dialog createDialog(CustPaymMode paymMode)
    {
        Dialog dialog = new Dialog("@SYS26610");

        dialogPaymMode = dialog.addField(extendedtypestr(CustPaymMode));
        dialogPaymMode.label("@SYS21698");

        dialogPaymMode.value(paymMode);

        return dialog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>