<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportApplicationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCImportApplicationDP</c> is the Report Data Provider class for the
///    <c>BankLCImportApplication</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(BankLCImportApplicationContract))
]
class BankLCImportApplicationDP extends SRSReportDataProviderBase
{
    BankLCImportApplicationShipmentTmp  bankLCImportApplicationShipmentTmp;
    BankLCImportApplicationPurchLineTmp bankLCImportApplicationPurchLineTmp;
    BankLCImportApplicationTmp          bankLCImportApplicationTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPurchLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the query to fetch the <c>PurchLine</c> records related to the <c>BankLCImport</c> table.
    /// </summary>
    /// <param name="_purchId">
    ///    The <c>PurchId</c> parameter that is given to find the <c>PurchLine</c> records.
    /// </param>
    /// <returns>
    ///    The created query.
    /// </returns>
    private Query createPurchLineQuery(PurchId _purchId)
    {
        Query                   purchLineQuery;
        QueryBuildDataSource    purchLineDS;

        purchLineQuery  = new Query();
        purchLineDS     = purchLineQuery.addDataSource(tablenum(PurchLine));
        purchLineDS.addRange(fieldnum(PurchLine, PurchId)).value(SysQuery::value(_purchId));
        purchLineDS.addRange(fieldnum(PurchLine, ISDeleted)).value(SysQuery::value(NoYes::No));
        purchLineDS.addRange(fieldnum(PurchLine, LineDeliveryType)).value(SysQuery::value(LineDeliveryType::DeliveryLine));
        purchLineDS.addRange(fieldnum(PurchLine, LineDeliveryType)).value(SysQuery::value(LineDeliveryType::OrderLine));
        purchLineDS.addGroupByField(fieldnum(purchLine, PurchId));
        purchLineDS.addGroupByField(fieldnum(purchLine, ItemId));
        purchLineDS.addGroupByField(fieldnum(purchLine, PurchUnit));
        purchLineDS.addSelectionField(fieldnum(PurchLine, PurchQty), SelectionField::Sum);

        return purchLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the query to fetch the <c>BankLCImportLine</c> records that are related to the
    ///    <c>BankLCImport</c> table.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    ///    The <c>BankLCRefRecId</c> parameter that is given to find the <c>BankLCImportLine</c> records.
    /// </param>
    /// <returns>
    ///    The created query.
    /// </returns>
    private Query createShipmentQuery(BankLCRefRecId _bankLCImportRefRecId)
    {
        Query                   shipmentQuery;
        QueryBuildDataSource    shipmentDS;

        shipmentQuery  = new Query();
        shipmentDS     = shipmentQuery.addDataSource(tablenum(BankLCImportLine));
        shipmentDS.addRange(fieldnum(BankLCImportLine, BankLC)).value(SysQuery::value(_bankLCImportRefRecId));

        return shipmentQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCImportApplicationPOLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes a temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>BankLCImportApplicationShipmentTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankLCImportApplicationPurchLineTmp))
    ]
    public  BankLCImportApplicationPurchLineTmp  getBankLCImportApplicationPOLineTmp()
    {
        select bankLCImportApplicationPurchLineTmp;
        return bankLCImportApplicationPurchLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCImportApplicationShipmentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes a temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>BankLCImportApplicationShipmentTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankLCImportApplicationShipmentTmp))
    ]
    public  BankLCImportApplicationShipmentTmp  getBankLCImportApplicationShipmentTmp()
    {
        select bankLCImportApplicationShipmentTmp;
        return bankLCImportApplicationShipmentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCImportApplicationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes a temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>BankLCImportApplicationTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankLCImportApplicationTmp))
    ]
    public  BankLCImportApplicationTmp  getBankLCImportApplicationTmp()
    {
        select bankLCImportApplicationTmp;
        return bankLCImportApplicationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankLCImportApplicationPOLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>BankLCImportApplicationPurchLineTmp</c> temporary table.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <paramref name="_purchLine" /> parameter to use to initialize the
    ///    <c>BankLCImportApplicationPurchLineTmp</c> temporary table.
    /// </param>
    public void insertBankLCImportApplicationPOLineTmp(PurchLine _purchLine)
    {
        bankLCImportApplicationPurchLineTmp.initFromPurchLine(_purchLine);
        bankLCImportApplicationPurchLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankLCImportApplicationShipmentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>BankLCImportApplicationShipmentTmp</c> temporary table.
    /// </summary>
    /// <param name="_bankLCImportLine">
    ///    The <paramref name="_bankLCImportLine" /> parameter to use to initialize the
    ///    <c>BankLCImportApplicationShipmentTmp</c> temporary table.
    /// </param>
    public void insertBankLCImportApplicationShipmentTmp(BankLCImportLine    _bankLCImportLine)
    {
        bankLCImportApplicationShipmentTmp.initFromBankLCImportLine(_bankLCImportLine);
        bankLCImportApplicationShipmentTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankLCImportApplicationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>BankLCImportApplicationTmp</c> temporary table.
    /// </summary>
    /// <param name="_bankLCImport">
    ///    The <paramref name="_bankLCImport" /> parameter to use to initialize the
    ///    <c>BankLCImportApplicationTmp</c> temporary table.
    /// </param>
    public void insertBankLCImportApplicationTmp(BankLCImport _bankLCImport)
    {
        bankLCImportApplicationTmp.initFromBankLCImport(_bankLCImport);
        bankLCImportApplicationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the
    ///    <c>BankLCImportApplication</c> report.
    /// </remarks>
    public void processReport()
    {
        PurchId                         purchId;
        BankLCImport                    bankLCImport;
        PurchLine                       purchLine;
        BankLCImportLine                bankLCImportLine;
        QueryRun                        purchLineQueryRun;
        QueryRun                        shipmentQueryRun;
        BankLCImportApplicationContract dataContract = this.parmDataContract();

        purchId         = dataContract.parmPurchId();
        bankLCImport    = BankLCImport::findByPurchTable(purchId);

        if (bankLCImport && bankLCImport.RecId)
        {
            this.insertBankLCImportApplicationTmp(bankLCImport);

            purchLineQueryRun = new QueryRun(this.createPurchLineQuery(purchId));
            while (purchLineQueryRun.next())
            {
                if (purchLineQueryRun.changed(tablenum(PurchLine)))
                {
                    purchLine = purchLineQueryRun.get(tablenum(PurchLine));
                    this.insertBankLCImportApplicationPOLineTmp(purchLine);
                }
            }

            shipmentQueryRun = new QueryRun(this.createShipmentQuery(bankLCImport.RecId));
            while (shipmentQueryRun.next())
            {
                if (shipmentQueryRun.changed(tablenum(BankLCImportLine)))
                {
                    bankLCImportLine = shipmentQueryRun.get(tablenum(BankLCImportLine));
                    this.insertBankLCImportApplicationShipmentTmp(bankLCImportLine);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
