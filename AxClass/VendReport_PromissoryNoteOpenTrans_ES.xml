<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendReport_PromissoryNoteOpenTrans_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The VendReport_PromissoryNoteOpenTrans_ES is used in VendPromissoryNoteOpenTransDP_ES to format invoice text, select correct dueDate, VendTrans and VendTransOpen.
/// </summary>
public class VendReport_PromissoryNoteOpenTrans_ES
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns corresponding due date depending on status from promissory note.
    /// </summary>
    /// <param name="_vendPromissoryNoteJour">
    /// The table record that holds the vendor promissory note details.
    /// </param>
    /// <returns>
    /// The due date of promissory note.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DueDate dueDate(VendPromissoryNoteJour   _vendPromissoryNoteJour)
    {
        VendTrans               vendTrans;
        VendSettlement          vendSettlement;
        VendTransOpen           vendTransOpen;

        switch (_vendPromissoryNoteJour.Status)
        {
            case CustVendNegInstStatus::Honored:
                select firstonly TransDate, RecId, PromissoryNoteSeqNum, PromissoryNoteID from vendTrans
                    order by PromissoryNoteSeqNum desc
                    where vendTrans.PromissoryNoteID == _vendPromissoryNoteJour.PromissoryNoteId
                    join DueDate, TransRecId from vendSettlement
                    order by DueDate desc
                    where vendSettlement.TransRecId  == vendTrans.RecId;
                vendTrans.TransDate = vendSettlement.DueDate;
                break;
            default:
                select firstonly DueDate, RefRecId from vendTransOpen
                    order by DueDate desc
                    join RecId, TransDate, PromissoryNoteID from vendTrans
                    where vendTrans.RecId            ==  vendTransOpen.RefRecId
                       && vendTrans.PromissoryNoteID == _vendPromissoryNoteJour.PromissoryNoteId;
                vendTrans.TransDate = vendTransOpen.DueDate;
        }
        return vendTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats invoice text according promissory note lines.
    /// </summary>
    /// <param name="_vendPromissoryNoteTrans">
    /// The table record that holds the promissory note transactions details.
    /// </param>
    /// <returns>
    /// The invoice of promissory note.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendInvoiceId invoiceTxt(VendPromissoryNoteTrans      _vendPromissoryNoteTrans)
    {
        VendPromissoryNoteInvoice       vendPromissoryNoteInvoice;
        VendSettlement                  vendSettlement;
        VendInvoiceId                   invoiceId;
        AmountMST                       seattleAmount;
        ExchRate                        exchRate;
        dataAreaId                      invoiceCompanyId;

        // Retrieve the company currency code.  This code together with vendSettlement.SettleAmountMST will be used to
        // to convert to a new amount based on currency setting in the invoice company.
        CurrencyCode currencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        while select crosscompany PromissoryNoteId, InvoiceVoucher, InvoiceAmountMST, InvoiceId, InvoiceCompany, TransDate
            from vendPromissoryNoteInvoice
            join SettleAmountMST, OffsetTransVoucher, OffsetCompany from vendSettlement
            where vendPromissoryNoteInvoice.PromissoryNoteId    == _vendPromissoryNoteTrans.PromissoryNoteId
               && vendPromissoryNoteInvoice.InvoiceVoucher      == vendSettlement.OffsetTransVoucher
               && vendPromissoryNoteInvoice.InvoiceCompany      == vendSettlement.OffsetCompany
        {
            if (vendPromissoryNoteInvoice.InvoiceCompany != vendSettlement.company())
            {
                // Invoice and seattlement transactions can be in different companies and can have different transactions
                // amounts due to different currencies per transaction.  Thus, the settlement transaction amount need to be
                // converted using the same currency as the invoice before the two amounts are compared.

                invoiceCompanyId = vendPromissoryNoteInvoice.InvoiceCompany;
                if (!xDataArea::exist(invoiceCompanyId))
                {
                    invoiceCompanyId = curext();
                }

                changecompany(invoiceCompanyId)
                {
                    exchRate = ExchangeRateHelper::exchRate(currencyCode, vendPromissoryNoteInvoice.TransDate, Currency::noYes2UnknownNoYes(NoYes::Yes));
                    seattleAmount = CurrencyExchangeHelper::amountCur2MST(vendSettlement.SettleAmountMST, currencyCode, exchRate, vendPromissoryNoteInvoice.TransDate);
                }
            }
            else
            {
                seattleAmount = vendSettlement.SettleAmountMST;
            }

            if (abs(seattleAmount) - abs(vendPromissoryNoteInvoice.InvoiceAmountMST) < 0)
            {
                if (!invoiceId)
                {
                    invoiceId = strfmt('%1 %2', "@SYS1863", vendPromissoryNoteInvoice.InvoiceId);
                }
                else
                {
                    invoiceId += strfmt(', %1 %2',"@SYS1863", vendPromissoryNoteInvoice.InvoiceId);
                }
            }

            if (abs(seattleAmount) - abs(vendPromissoryNoteInvoice.InvoiceAmountMST) == 0)
            {
                if (!invoiceId)
                {
                    invoiceId = vendPromissoryNoteInvoice.InvoiceId;
                }
                else
                {
                    invoiceId += strfmt(', %1', vendPromissoryNoteInvoice.InvoiceId);
                }
            }
        }
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remittedToBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns bank account corresponding to promissory note transaction when transaction status is remitted or protested.
    /// </summary>
    /// <param name="_promissoryNoteId">
    /// The promissory note ID.
    /// </param>
    /// <returns>
    /// The company bank account ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CompanyBankAccountId remittedToBankAccount(VendPromissoryNoteID     _promissoryNoteId)
    {
        VendPromissoryNoteTrans              vendPromissoryNoteTrans;

        select firstonly RemittedtoBankAccountId from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId  == _promissoryNoteId
               && vendPromissoryNoteTrans.Status            == CustVendNegInstStatus::Remitted;

        if (!vendPromissoryNoteTrans.RecId)
        {
            select firstonly RemittedtoBankAccountId from vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId  == _promissoryNoteId
                   && vendPromissoryNoteTrans.Status            == CustVendNegInstStatus::Protested;
        }

        return vendPromissoryNoteTrans.RemittedtoBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns vendor transactions corresponding to promissory note transaction.
    /// </summary>
    /// <param name="_vendPromissoryNoteTrans">
    /// The table record that holds the promissory note transactions details.
    /// </param>
    /// <returns>
    /// The vendor transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTrans vendTrans(VendPromissoryNoteTrans     _vendPromissoryNoteTrans)
    {
        VendTrans           vendTrans;

        select firstonly vendTrans
            where vendTrans.PromissoryNoteID == _vendPromissoryNoteTrans.PromissoryNoteId
               && vendTrans.AccountNum       == _vendPromissoryNoteTrans.VendAccount
               && vendTrans.Voucher          == _vendPromissoryNoteTrans.Voucher
               && vendTrans.TransDate        == _vendPromissoryNoteTrans.TransDate;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns open vendor transaction corresponding to vendor transaction.
    /// </summary>
    /// <param name="_vendTrans">
    /// The table record that holds the vendor transactions details.
    /// </param>
    /// <returns>
    /// The vendor transactions open.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTransOpen vendTransOpen(VendTrans   _vendTrans)
    {
        VendTransOpen       vendTransOpen;

        select firstonly vendTransOpen
            where vendTransOpen.RefRecId    == _vendTrans.RecId
               && vendTransOpen.AccountNum  == _vendTrans.AccountNum;

        return vendTransOpen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>