<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceWishList</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceWishList</c> class implements the wish list related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public class RetailTransactionServiceWishList
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #define.WishLists('WishLists')
    #define.WishListLines('WishListLines')
    #define.WishListContributors('WishListContributors')
    #define.WishListInvitations('WishListInvitations')
    #define.CustomerName('CustomerName')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWishList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a wish list.
    /// </summary>
    /// <param name="wishListXml">
    /// The input xml string containing the wish list field information.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the creation of record is successful and false otherwise.
    /// </returns>
    public static container createWishList(str wishListXml)
    {
        container wishListContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(wishListXml);
            XmlElement wishlistElement = xmlInputDoc.getNamedElement(tableStr(RetailWishListTable));

            ttsbegin;

            // Create wish list
            RetailWishListTable table;
            table.initValue();
            table.CustomerId = wishlistElement.getAttribute(fieldStr(RetailWishListTable, CustomerId));
            table.Name = wishlistElement.getAttribute(fieldStr(RetailWishListTable, Name));
            table.IsFavorite = strlwr(wishlistElement.getAttribute(fieldStr(RetailWishListTable, IsFavorite))) == 'true' ? 1 : 0;
            table.IsRecurring = strlwr(wishlistElement.getAttribute(fieldStr(RetailWishListTable, IsRecurring))) == 'true' ? 1 : 0;
            table.IsPrivate = strlwr(wishlistElement.getAttribute(fieldStr(RetailWishListTable, IsPrivate))) == 'true' ? 1 : 0;
            table.DeletedDateTime = DateTimeUtil::minValue();
            table.IsCollaborative = strlwr(wishlistElement.getAttribute(fieldStr(RetailWishListTable, IsCollaborative))) == 'true' ? 1 : 0;
            table.DueDateTime = DateTimeUtil::parse(wishlistElement.getAttribute(fieldStr(RetailWishListTable, DueDateTime)));
            table.insert();

            // Create wish list lines
            XmlElement linesElement = xmlInputDoc.getNamedElement(#WishListLines);
            if (linesElement != null)
            {
                XmlNodeList linesNodeList = linesElement.childNodes();
                for (int i = 0; i < linesNodeList.length(); i++)
                {
                    XmlElement lineElement = linesNodeList.item(i) as XmlElement;
                    lineElement.setAttribute(fieldStr(RetailWishListLineTable, WishListId), int642str(table.RecId));
                    lineElement.setAttribute(fieldStr(RetailWishListLineTable, CustomerId), table.CustomerId);
                    lineElement.setAttribute(fieldStr(RetailWishListLineTable, IsFavorite), enum2Symbol(enumNum(FalseTrue), table.IsFavorite));
                    lineElement.setAttribute(fieldStr(RetailWishListLineTable, IsRecurring), enum2Symbol(enumNum(FalseTrue), table.IsRecurring));
                    lineElement.setAttribute(fieldStr(RetailWishListLineTable, IsPrivate), enum2Symbol(enumNum(FalseTrue), table.IsPrivate));

                    RetailTransactionServiceWishList::InsertWishListLineFromXml(lineElement);
                }
            }

            str xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(table.RecId, table.CustomerId);
            wishListContainer = [true, "", xmlResult];
            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingCreateWishListFailure();
            wishListContainer = [false, error];
        }

        return wishListContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWishListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a wish list line.
    /// </summary>
    /// <param name="wishListLineXml">
    /// The input xml string containing the wish list line field information.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the creation of record is successful and false otherwise.
    /// </returns>
    public static container createWishListLine(str wishListLineXml, AccountNum filterAccountNumber)
    {
        container wishListLineContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(wishListLineXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(tableStr(RetailWishListLineTable));

            ttsbegin;

            RetailWishListLineTable line = RetailTransactionServiceWishList::InsertWishListLineFromXml(xmlInputRoot);
            str xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(line.WishListId, filterAccountNumber);
            wishListLineContainer = [true, "", xmlResult];

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingCreateWishListLineFailure();
            wishListLineContainer = [false, error];
        }

        return wishListLineContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWishList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a wish list.
    /// </summary>
    /// <param name="wishListId">
    /// The id of the wish list to be deleted.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the delete of record is successful and false otherwise.
    /// </returns>
    public static container deleteWishList(RecId wishListId, AccountNum filterAccountNumber)
    {
        container resultContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

        try
        {
            RetailWishListTable wishList = RetailWishListTable::find(wishListId, true);
            if (!wishList)
            {
                resultContainer = [false, "@RET2382"];
            }
            else if (filterAccountNumber && !wishList.isOwner(filterAccountNumber))
            {
                resultContainer = [false, "@RET2382"];
            }
            else
            {
                ttsbegin;

                RetailWishListInvitation invitation;
                delete_from invitation where invitation.WishListId == wishList.RecId;

                RetailWishListContributor contributor;
                delete_from contributor where contributor.WishListId == wishList.RecId;

                RetailWishListLineTable line;
                update_recordset line
                    setting
                        DeletedDateTime = DateTimeUtil::utcNow()
                    where line.WishListId == wishListId
                       && line.DeletedDateTime == DateTimeUtil::minValue();

                wishList.DeletedDateTime = DateTimeUtil::utcNow();
                wishList.update();

                ttscommit;

                resultContainer = [true, ""];
            }
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingDeleteWishListFailure();
            resultContainer = [false, error];
        }

        return resultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWishListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a wish list line.
    /// </summary>
    /// <param name="lineId">
    /// The id of the line to be deleted.
    /// </param>
    /// <param name="wishListId">
    /// The id of the list to be deleted.  This is only used if line id is 0.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the delete of record is successful and false otherwise.
    /// </returns>
    public static container deleteWishListLine(RecId lineId, RefRecId wishListId, AccountNum filterAccountNumber)
    {
        container resultContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

        ttsbegin;
        try
        {
            // If the line id is specified a specific line is deleted
            if (lineId)
            {
                RetailWishListLineTable wishListLine = RetailWishListLineTable::find(lineId, true);
                RetailWishListTable wishList = RetailWishListTable::find(wishListLine.WishListId);
                if (!wishListLine)
                {
                    resultContainer = [false, "@RET2382"];
                }
                else if (filterAccountNumber
                    && !wishList.isOwner(filterAccountNumber)
                    && !wishList.isContributor(filterAccountNumber))
                {
                    resultContainer = [false, "@RET2382"];
                }
                else
                {
                    wishListLine.DeletedDateTime = DateTimeUtil::utcNow();
                    wishListLine.update();

                    str xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(wishList.RecId, filterAccountNumber);
                    resultContainer = [true, "", xmlResult];
                }
            }
            // Otherwise all of the lines of the specified wish list are deleted
            else
            {
                RetailWishListTable wishList = RetailWishListTable::find(wishListId);

                if (!wishList)
                {
                    resultContainer = [false, "@RET2382"];
                }
                else if (filterAccountNumber
                    && !wishList.isOwner(filterAccountNumber)
                    && !wishList.isContributor(filterAccountNumber))
                {
                    resultContainer = [false, "@RET2382"];
                }
                else
                {
                    RetailWishListLineTable line;
                    update_recordset line
                    setting
                        DeletedDateTime = DateTimeUtil::utcNow()
                    where line.WishListId == wishList.RecId
                       && line.DeletedDateTime == DateTimeUtil::minValue();

                    str xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(wishList.RecId, filterAccountNumber);
                    resultContainer = [true, "", xmlResult];
                }
            }

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingDeleteWishListLineFailure();
            resultContainer = [false, error];
        }

        return resultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWishLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of wish lists
    /// </summary>
    /// <param name="wishListId">
    /// A wish list id.
    /// </param>
    /// <param name="customerId">
    /// A customer id.
    /// </param>
    /// <param name="favoriteFilter">
    /// Indicates whether or not to filter by favorite.
    /// </param>
    /// <param name="publicFilter">
    /// Indicates whether or not to filter by public.
    /// </param>
    /// <returns>
    /// A list of wish lists matching the parameters
    /// </returns>
    [SysObsolete('Use method getWishListsV3() instead', true, 30\06\2020)]
    public static container getWishLists(RecId wishListId,
                                            AccountNum customerId,
                                            boolean favoriteFilter,
                                            boolean publicFilter)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWishListsV3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of wish lists
    /// </summary>
    /// <param name="wishListId">
    /// A wish list id.
    /// </param>
    /// <param name="customerId">
    /// A customer id.
    /// </param>
    /// <param name="favoriteFilter">
    /// Indicates whether or not to filter by favorite.
    /// </param>
    /// <param name="publicFilter">
    /// Indicates whether or not to filter by public.
    /// </param>
    /// <param name="querySettingsJson">
    /// The query settings.
    /// </param>
    /// <returns>
    /// A list of wish lists matching the parameters
    /// </returns>
    public static container getWishListsV3(RecId wishListId,
                                            AccountNum customerId,
                                            boolean favoriteFilter,
                                            boolean publicFilter,
                                            str querySettingsJson)
    {
        container openWishLists = [false, '', '']; // Status, ErrorMsg, XmlResultSet

        ttsbegin;
        try
        {
            XmlDocument xmlDoc = XmlDocument::newBlank();
            XmlElement xmlRoot = xmlDoc.createElement(#WishLists);

            // Find wishlist RecIds
            Set wishListRecIdSet = new Set(Types::Int64);
            RetailWishListTable table;
            
            const int DefaultPageSize = 250;
            int skip = 0;
            int top = DefaultPageSize;

            if (querySettingsJson != '')
            {
                Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings = RetailTransactionServiceJsonHelper::DeserializeQueryResultSettingsFromJSON(querySettingsJson, top);
                skip = settings.Paging.Skip;
                top = settings.Paging.Top;
            }

            int resultsCount = 0;
            int resultsMaxCount = skip + top;

            if (wishListId)
            {
                // Look for a specific wish list.
                wishListRecIdSet.add(wishListId);
            }
            else if (favoriteFilter || publicFilter)
            {
                // Look for the wish lists of owned by the customer
                while select RecId from table
                order by table.IsFavorite desc, table.createdDateTime desc
                where table.CustomerId == customerId &&
                      (table.IsFavorite == FalseTrue::True || !favoriteFilter) &&
                      (table.IsPrivate == FalseTrue::False || !publicFilter) &&
                      table.DeletedDateTime == DateTimeUtil::minValue()
                {
                    // Stop if we have already reached max count
                    if (resultsCount >= resultsMaxCount) break;

                    if (resultsCount >= skip)
                    {
                        wishListRecIdSet.add(table.RecId);
                    }
                    resultsCount++;
                }
            }
            else
            {
                // Look for the wish lists that are either owned by the customer or shared to the customer.
                while select RecId from table
                order by table.IsFavorite desc, table.createdDateTime desc
                where table.CustomerId == customerId &&
                      table.DeletedDateTime == DateTimeUtil::minValue()
                {
                    // Stop if we have already reached max count
                    if (resultsCount >= resultsMaxCount) break;

                    if (resultsCount >= skip)
                    {
                        wishListRecIdSet.add(table.RecId);
                    }
                    resultsCount++;
                }

                // Check if we have already reached the max result count.
                if (resultsCount < resultsMaxCount)
                {
                    RetailWishListContributor contributor;
                    while select RecId from table
                    order by table.createdDateTime desc
                    where table.CustomerId != customerId &&
                          table.DeletedDateTime == DateTimeUtil::minValue()
                    exists join contributor
                        where contributor.WishListId == table.RecId &&
                              contributor.CustomerId == customerId
                    {
                        // Stop if we have already reached max count
                        if (resultsCount >= resultsMaxCount) break;

                        if (resultsCount >= skip)
                        {
                            wishListRecIdSet.add(table.RecId);
                        }
                        resultsCount++;
                    }
                }
            }

            // Prepare output XML
            SetEnumerator se = wishListRecIdSet.getEnumerator();
            while (se.moveNext())
            {
                Recid recid = se.current();
                table = RetailWishListTable::find(recid, false);

                if (!table)
                {
                    continue;
                }

                str listXml = RetailTransactionServiceWishList::GetWishListXmlV2(recid, customerId);
                if (listXml)
                {
                    XmlDocument listDoc = XmlDocument::newBlank();
                    listDoc.loadXml(listXml);
                    XmlElement listElement = listDoc.getNamedElement(tableStr(RetailWishListTable));
                    XmlElement importedLineElement = xmlDoc.importNode(listElement, true);
                    xmlRoot.appendChild(importedLineElement);
                }
            }

            xmlDoc.appendChild(xmlRoot);
            openWishLists = [true, '', xmlDoc.toString()];

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingGetWishListsFailure();
            openWishLists = [false, error];
        }

        return openWishLists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWishList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a wish list.
    /// </summary>
    /// <param name="wishListXml">
    /// The input xml string containing updated field information.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    public static container updateWishList(str wishListXml, AccountNum filterAccountNumber)
    {
        container resultContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

        ttsbegin;
        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(wishListXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(tableStr(RetailWishListTable));

            RecId wishListId = str2int64(xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, RecId)));
            RetailWishListTable wishList = RetailWishListTable::find(wishListId, true);
            if (!wishList)
            {
                resultContainer = [false, "@RET2382"];
            }
            else if (filterAccountNumber && !wishList.isOwner(filterAccountNumber))
            {
                resultContainer = [false, "@RET2382"];
            }
            else
            {
                FalseTrue favorite = wishList.IsFavorite;
                FalseTrue recurring = wishList.IsRecurring;
                FalseTrue privateItem = wishList.IsPrivate;
                FalseTrue collaborative = wishList.IsCollaborative;
                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListTable, IsFavorite)))
                {
                    favorite = strlwr(xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, IsFavorite))) == 'true' ? 1 : 0;
                }

                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListTable, IsRecurring)))
                {
                    recurring = strlwr(xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, IsRecurring))) == 'true' ? 1 : 0;
                }

                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListTable, IsPrivate)))
                {
                    privateItem = strlwr(xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, IsPrivate))) == 'true' ? 1 : 0;
                }

                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListTable, IsCollaborative)))
                {
                    collaborative = strlwr(xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, IsCollaborative))) == 'true' ? 1 : 0;
                }

                // When privacy is changed, remove all contributors and invitations.
                if ((wishList.IsPrivate != privateItem || wishList.IsCollaborative != collaborative)
                && privateItem)
                {
                    RetailWishListInvitation invitation;
                    delete_from invitation where invitation.WishListId == wishList.RecId;
                    RetailWishListContributor contributor;
                    delete_from contributor where invitation.WishListId == wishList.RecId;
                }

                // Update wishlist (wishlist.CustomerId cannot be changed)
                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListTable, Name)))
                {
                    wishList.Name = xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, Name));
                }

                wishList.IsRecurring = recurring;
                wishList.IsPrivate = privateItem;
                wishList.IsCollaborative = collaborative;

                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListTable, DueDateTime)))
                {
                    wishList.DueDateTime = DateTimeUtil::parse(xmlInputRoot.getAttribute(fieldStr(RetailWishListTable, DueDateTime)));
                }

                wishList.update();

                // Update wishlist lines (keep the flags consistent with the header)
                RetailWishListLineTable wishListLine;
                update_recordset wishListLine
                    setting
                        IsRecurring = recurring,
                        IsPrivate = privateItem
                    where
                        wishListLine.wishListId == wishListId
                     && wishListLine.DeletedDateTime == DateTimeUtil::minValue();

                // Update favorite
                if (wishList.IsFavorite == FalseTrue::False && favorite == FalseTrue::True)
                {
                    RetailWishListTable::SetFavorite(wishList.RecId);
                }

                str xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(wishListId, filterAccountNumber);
                resultContainer = [true, "", xmlResult];
            }

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingUpdateWishListFailure();
            resultContainer = [false, error];
        }

        return resultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWishListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a wish list line.
    /// </summary>
    /// <param name="wishListLineXml">
    /// The input xml string containing updated field information.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    public static container updateWishListLine(str wishListLineXml, AccountNum filterAccountNumber)
    {
        container resultContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

        ttsbegin;
        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(wishListLineXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(tableStr(RetailWishListLineTable));

            RecId lineId = str2int64(xmlInputRoot.getAttribute(fieldStr(RetailWishListLineTable, RecId)));
            RetailWishListLineTable wishListLine = RetailWishListLineTable::find(lineId, true);
            RecId wishListId = wishListLine.WishListId;
            RetailWishListTable wishList = RetailWishListTable::find(wishListId);

            if (!wishListLine)
            {
                resultContainer = [false, "@RET2382"];
            }
            else if (filterAccountNumber
                && !wishList.isOwner(filterAccountNumber)
                && !wishList.isContributor(filterAccountNumber))
            {
                resultContainer = [false, "@RET2382"];
            }
            else
            {
                // Ignore changes in IsFavorite, IsPrivate, IsRecurring, CustomerId
                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListLineTable, ProductId)))
                {
                    wishListLine.ProductId = str2int64(xmlInputRoot.getAttribute(fieldStr(RetailWishListLineTable, ProductId)));
                }

                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListLineTable, Quantity)))
                {
                    wishListLine.Quantity = str2num(xmlInputRoot.getAttribute(fieldStr(RetailWishListLineTable, Quantity)));
                }

                if (xmlInputRoot.hasAttribute(fieldStr(RetailWishListLineTable, UnitOfMeasure)))
                {
                    wishListLine.UnitOfMeasure = xmlInputRoot.getAttribute(fieldStr(RetailWishListLineTable, UnitOfMeasure));
                }

                wishListLine.update();

                str xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(wishListId, filterAccountNumber);
                resultContainer = [true, "", xmlResult];
            }

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            str error = "@RET2382";
            eventSource.EventWriteMerchandisingUpdateWishListLineFailure();
            resultContainer = [false, error];
        }

        return resultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AcceptWishListInvitation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts an wish list invitation.
    /// </summary>
    /// <param name="token">
    /// The invitation token.
    /// </param>
    /// <param name="customerAccount">
    /// The customer account who accepts the invitation.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    public static container AcceptWishListInvitation(str token, CustAccount customerAccount)
    {
        boolean result = true;
        str message = "";

        try
        {
            ttsBegin;
            RetailWishListInvitation::AcceptInvitation(str2guid(token), customerAccount);
            ttsCommit;
        }
        catch
        {
            result = false;
            ttsAbort;
        }

        if (!result)
        {
            message = "@RET2382";
            eventSource.EventWriteMerchandisingAcceptWishListInvitationFailure();
        }

        return [result, message];
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyWishListLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies wish list lines to another list.
    /// </summary>
    /// <param name="wishListLinesXml">
    /// The input xml containing the lines to copy.
    /// </param>
    /// <param name="destinationWishList">
    /// The id of the destination wish list.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    /// <remarks>
    /// The lines can come from different lists.
    /// </remarks>
    public static container CopyWishListLines(str wishListLinesXml, recid destinationWishList, AccountNum filterAccountNumber)
    {
        boolean result = true;
        str xmlResult = "";

        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(wishListLinesXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(#WishListLines);
            XmlNodeList wishListLines = xmlInputRoot.childNodes();

            ttsBegin;

            // Check destination list
            RetailWishListTable targetList = RetailWishListTable::find(destinationWishList);
            if (targetList && (!filterAccountNumber || targetList.isOwner(filterAccountNumber) || targetList.isContributor(filterAccountNumber)))
            {
                // Check and copy each line
                RecId firstSourceListRecId;
                for (int i = 0; i < wishListLines.length(); i++)
                {
                    XmlElement line = wishListLines.item(i) as XmlElement;
                    RecId lineId = str2int64(line.getAttribute(fieldStr(RetailWishListLineTable, RecId)));
                    RetailWishListLineTable sourceLine = RetailWishListLineTable::find(lineId, true);
                    RetailWishListTable sourceList = RetailWishListTable::find(sourceLine.WishListId);
                    if (sourceLine
                        && sourceList
                        && (sourceList.IsPrivate == FalseTrue::False
                            || !filterAccountNumber
                            || sourceList.isOwner(filterAccountNumber)
                            || sourceList.isContributor(filterAccountNumber)))
                    {
                        if (firstSourceListRecId == 0)
                        {
                            firstSourceListRecId = sourceList.RecId;
                        }

                        RetailWishListLineTable targetLine;
                        targetLine.initValue();
                        if (filterAccountNumber)
                        {
                            targetLine.CustomerId = filterAccountNumber;
                        }
                        else
                        {
                            targetLine.CustomerId = targetList.CustomerId;
                        }

                        targetLine.IsFavorite = targetList.IsFavorite;
                        targetLine.IsPrivate = targetList.IsPrivate;
                        targetLine.IsRecurring = targetList.IsRecurring;
                        targetLine.ProductId = sourceLine.ProductId;
                        targetLine.Quantity = sourceLine.Quantity;
                        targetLine.UnitOfMeasure = sourceLine.UnitOfMeasure;
                        targetLine.WishListId = targetList.RecId;
                        targetLine.insert();
                    }
                    else
                    {
                        result = false;
                        break;
                    }
                }

                if (result && firstSourceListRecId)
                {
                    xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(firstSourceListRecId, filterAccountNumber);
                }
            }
            else
            {
                result = false;
            }

            if (result)
            {
                ttsCommit;
            }
            else
            {
                ttsAbort;
            }
        }
        catch
        {
            result = false;
            ttsAbort;
        }

        if (result)
        {
            return [result, '', xmlResult];
        }
        else
        {
            str message = "@RET2382";
            eventSource.EventWriteMerchandisingCopyWishListLinesFailure();

            return [result, message];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MoveWishListLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves wish list lines to another list.
    /// </summary>
    /// <param name="wishListLinesXml">
    /// The input xml containing the lines to move.
    /// </param>
    /// <param name="destinationWishList">
    /// The id of the destination wish list.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    /// <remarks>
    /// The lines can come from different lists.
    /// </remarks>
    public static container MoveWishListLines(str wishListLinesXml, recid destinationWishList, AccountNum filterAccountNumber)
    {
        boolean result = true;
        str xmlResult = "";

        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(wishListLinesXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(#WishListLines);
            XmlNodeList wishListLines = xmlInputRoot.childNodes();

            ttsBegin;

            // Check destination list
            RetailWishListTable targetList = RetailWishListTable::find(destinationWishList);
            if (targetList && (!filterAccountNumber || targetList.isOwner(filterAccountNumber) || targetList.isContributor(filterAccountNumber)))
            {
                // Check and update each line
                RecId firstSourceListRecId;
                for (int i = 0; i < wishListLines.length(); i++)
                {
                    XmlElement line = wishListLines.item(i) as XmlElement;
                    RecId lineId = str2int64(line.getAttribute(fieldStr(RetailWishListLineTable, RecId)));
                    RetailWishListLineTable sourceLine = RetailWishListLineTable::find(lineId, true);
                    RetailWishListTable sourceList = RetailWishListTable::find(sourceLine.WishListId);
                    if (sourceLine
                        && sourceList
                        && (!filterAccountNumber
                            || sourceList.isOwner(filterAccountNumber)
                            || sourceList.isContributor(filterAccountNumber)))
                    {
                        if (firstSourceListRecId == 0)
                        {
                            firstSourceListRecId = sourceList.RecId;
                        }

                        RetailWishListLineTable targetLine;
                        targetLine.initValue();
                        if (filterAccountNumber)
                        {
                            targetLine.CustomerId = filterAccountNumber;
                        }
                        else
                        {
                            targetLine.CustomerId = targetList.CustomerId;
                        }

                        targetLine.IsFavorite = targetList.IsFavorite;
                        targetLine.IsPrivate = targetList.IsPrivate;
                        targetLine.IsRecurring = targetList.IsRecurring;
                        targetLine.ProductId = sourceLine.ProductId;
                        targetLine.Quantity = sourceLine.Quantity;
                        targetLine.UnitOfMeasure = sourceLine.UnitOfMeasure;
                        targetLine.WishListId = targetList.RecId;
                        targetLine.insert();

                        sourceLine.DeletedDateTime = DateTimeUtil::utcNow();
                        sourceLine.update();
                    }
                    else
                    {
                        result = false;
                        break;
                    }
                }

                if (result && firstSourceListRecId)
                {
                    xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(firstSourceListRecId, filterAccountNumber);
                }
            }
            else
            {
                result = false;
            }

            if (result)
            {
                ttsCommit;
            }
            else
            {
                ttsAbort;
            }
        }
        catch
        {
            result = false;
            ttsAbort;
        }

        if (result)
        {
            return [result, '', xmlResult];
        }
        else
        {
            str message = "@RET2382";
            eventSource.EventWriteMerchandisingMoveWishListLinesFailure();

            return [result, message];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateWishListContributors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates contributors to wish list.
    /// </summary>
    /// <param name="contributorsXml">
    /// The contributors in XML format.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    public static container CreateWishListContributors(str contributorsXml, AccountNum filterAccountNumber)
    {
        boolean result = true;
        str xmlResult = "";

        ttsBegin;
        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(contributorsXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(#WishListContributors);
            XmlNodeList contributorNodeList = xmlInputRoot.childNodes();

            // Create contributors one by one
            RecId firstListRecId;
            for (int i = 0; i < contributorNodeList.length(); i++)
            {
                // Check wishlist and owner
                XmlElement contributorInputElement = contributorNodeList.item(i) as XmlElement;
                RecId wishlistId = str2int64(contributorInputElement.getAttribute(fieldStr(RetailWishListContributor, WishListId)));
                RetailWishListTable wishlist = RetailWishListTable::find(wishlistId);
                if (!wishlist)
                {
                    result = false;
                    break;
                }

                if (filterAccountNumber && !wishlist.isOwner(filterAccountNumber))
                {
                    result = false;
                    break;
                }

                if (firstListRecId == 0)
                {
                    firstListRecId = wishlistId;
                }

                // Create contributor
                RetailWishListContributor contributorTable;
                contributorTable.initValue();
                contributorTable.CustomerId = contributorInputElement.getAttribute(fieldStr(RetailWishListContributor, CustomerId));
                contributorTable.Invitation = str2int64(contributorInputElement.getAttribute(fieldStr(RetailWishListContributor, Invitation)));
                contributorTable.WishListId = wishlistId;
                contributorTable.insert();
            }

            if (result && firstListRecId)
            {
                xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(firstListRecId, filterAccountNumber);
            }

            if (result)
            {
                ttsCommit;
            }
            else
            {
                ttsAbort;
            }
        }
        catch
        {
            result = false;
            ttsAbort;
        }

        if (result)
        {
            return [result, '', xmlResult];
        }
        else
        {
            str message = "@RET2382";
            eventSource.EventWriteMerchandisingCreateWishListContributorsFailure();

            return [result, message];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateWishListInvitations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates invitations for wish lists.
    /// </summary>
    /// <param name="invitationsXml">
    /// The invitations to create in XML format.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    public static container CreateWishListInvitations(str invitationsXml, AccountNum filterAccountNumber)
    {
        boolean result = true;
        str xmlResult = "";

        ttsBegin;
        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(invitationsXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(#WishListInvitations);
            XmlNodeList invitationNodeList = xmlInputRoot.childNodes();

            // Create invitation one by one
            RecId firstListRecId;
            for (int i = 0; i < invitationNodeList.length(); i++)
            {
                // Check wishlist and its owner
                XmlElement invitationInputElement = invitationNodeList.item(i) as XmlElement;
                RefRecId wishListId = str2int64(invitationInputElement.getAttribute(fieldStr(RetailWishListInvitation, WishListId)));
                RetailWishListTable wishlist = RetailWishListTable::find(wishlistId);
                if (!wishlist)
                {
                    result = false;
                    break;
                }

                if (filterAccountNumber && !wishlist.isOwner(filterAccountNumber))
                {
                    result = false;
                    break;
                }

                if (firstListRecId == 0)
                {
                    firstListRecId = wishlistId;
                }

                // Create invitation
                RetailWishListInvitationType invitationType = str2int(invitationInputElement.getAttribute(fieldStr(RetailWishListInvitation, Type)));
                RetailWishListInvitee invitee = invitationInputElement.getAttribute(fieldStr(RetailWishListInvitation, Invitee));
                RetailWishListInvitation invitationTable = RetailWishListInvitation::CreateOrRecreateInvitation(wishListId, invitationType, invitee);

                // Send invitation
                invitationTable.SendInvitation();
            }

            if (result && firstListRecId)
            {
                xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(firstListRecId, filterAccountNumber);
            }

            if (result)
            {
                ttsCommit;
            }
            else
            {
                ttsAbort;
            }
        }
        catch
        {
            result = false;
            ttsAbort;
        }

        if (result)
        {
            return [result, '', xmlResult];
        }
        else
        {
            str message = "@RET2382";
            eventSource.EventWriteMerchandisingCreateWishListInvitationsFailure();

            return [result, message];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteWishListContributors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes contributors from wish list.
    /// </summary>
    /// <param name="contributorsXml">
    /// The contributors in XML format.
    /// </param>
    /// <param name="filterAccountNumber">
    /// The filter account number. It is used to check the operation privilege and filter the result content.
    /// Set the value to null to skip filtering.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the update of record is successful and false otherwise.
    /// </returns>
    public static container DeleteWishListContributors(str contributorsXml, AccountNum filterAccountNumber)
    {
        boolean result = true;
        str xmlResult = "";

        try
        {
            XmlDocument xmlInputDoc = new XmlDocument();
            xmlInputDoc.loadXml(contributorsXml);
            XmlElement xmlInputRoot = xmlInputDoc.getNamedElement(#WishListContributors);
            XmlNodeList contributorNodeList = xmlInputRoot.childNodes();

            ttsBegin;

            // Delete contributors one by one
            RecId firstListRecId;
            for (int i = 0; i < contributorNodeList.length(); i++)
            {
                // Check wishlist
                XmlElement contributorInputElement = contributorNodeList.item(i) as XmlElement;
                RecId contributorRecId = str2int64(contributorInputElement.getAttribute(fieldStr(RetailWishListContributor, RecId)));
                RetailWishListContributor contributor = RetailWishListContributor::find(contributorRecId, true);
                RetailWishListTable wishlist = RetailWishListTable::find(contributor.WishListId);
                if (!wishlist)
                {
                    result = false;
                    break;
                }

                if (filterAccountNumber && !wishlist.isOwner(filterAccountNumber) && contributor.CustomerId != filterAccountNumber)
                {
                    result = false;
                    break;
                }

                if (firstListRecId == 0)
                {
                    firstListRecId = contributor.WishListId;
                }

                // Delete the contributor
                contributor.delete();
            }

            if (result && firstListRecId)
            {
                xmlResult = RetailTransactionServiceWishList::GetWishListXmlV2(firstListRecId, filterAccountNumber);
            }

            if (result)
            {
                ttsCommit;
            }
            else
            {
                ttsAbort;
            }
        }
        catch
        {
            result = false;
            ttsAbort;
        }

        if (result)
        {
            return [result, '', xmlResult];
        }
        else
        {
            str message = "@RET2382";
            eventSource.EventWriteMerchandisingDeleteWishListContributorsFailure();

            return [result, message];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertWishListLineFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert line item into wish list.
    /// </summary>
    /// <param name="wishListLineElement">
    /// The wishListLineElement in XML format.
    /// </param>
    /// <returns>
    /// <c>RetailWishListLineTable</c> return wish list line item.
    /// </returns>
    public static RetailWishListLineTable InsertWishListLineFromXml(XmlElement wishListLineElement)
    {
        RecId wishlistId = str2int64(wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, WishListId)));
        RetailWishListTable wishlist = RetailWishListTable::find(wishlistId);

        if (!wishlist.RecId)
        {
            // Parent list does not exist
            throw error("@RET2382");
        }

        RetailWishListLineTable line;
        line.initValue();
        line.WishListId = wishlistId;
        line.CustomerId = wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, CustomerId));
        line.ProductId = str2int64(wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, ProductId)));
        line.Quantity = str2num(wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, Quantity)));
        line.UnitOfMeasure = wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, UnitOfMeasure));
        line.IsFavorite = strlwr(wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, IsFavorite))) == 'true' ? 1 : 0;
        line.IsPrivate = strlwr(wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, IsPrivate))) == 'true' ? 1 : 0;
        line.IsRecurring = strlwr(wishListLineElement.getAttribute(fieldStr(RetailWishListLineTable, IsRecurring))) == 'true' ? 1 : 0;
        line.DeletedDateTime = DateTimeUtil::minValue();
        line.insert();

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetWishListXmlV2</Name>
				<Source><![CDATA[
    private static str GetWishListXmlV2(RecId wishListId, AccountNum filterAccountNumber = '')
    {
        str xml;

        RetailWishListTable wishlist = RetailWishListTable::find(wishListId);
        boolean isOwner = false;
        boolean isContributor = false;
        if (filterAccountNumber)
        {
            isOwner = wishlist.isOwner(filterAccountNumber);
            if (!isOwner)
            {
                isContributor = wishlist.isContributor(filterAccountNumber);
            }
        }
        else
        {
            // When filter account number is empty, we assume the caller has the same access as the owner.
            isOwner = true;
        }

        // The wishlist can be read only if the caller is owner or contributor, or the list is public.
        if (wishlist
            && (isOwner || isContributor || !wishlist.IsPrivate))
        {
            XmlDocument xmlDoc = XmlDocument::newBlank();
            XmlElement listElement = xmlDoc.createElement(tableStr(RetailWishListTable));

            // Get wish list details
            listElement.setAttribute(fieldStr(RetailWishListTable, RecId), int642str(wishlist.RecId));
            listElement.setAttribute(fieldStr(RetailWishListTable, CustomerId), wishlist.CustomerId);
            listElement.setAttribute(#CustomerName, CustTable::find(wishlist.CustomerId).name());
            listElement.setAttribute(fieldStr(RetailWishListTable, Name), wishlist.Name);
            listElement.setAttribute(fieldStr(RetailWishListTable, IsFavorite), enum2Symbol(enumNum(FalseTrue), wishlist.IsFavorite));
            listElement.setAttribute(fieldStr(RetailWishListTable, IsRecurring), enum2Symbol(enumNum(FalseTrue), wishlist.IsRecurring));
            listElement.setAttribute(fieldStr(RetailWishListTable, IsPrivate), enum2Symbol(enumNum(FalseTrue), wishlist.IsPrivate));
            listElement.setAttribute(fieldStr(RetailWishListTable, IsCollaborative), enum2Symbol(enumNum(FalseTrue), wishlist.IsCollaborative));
            listElement.setAttribute(fieldStr(RetailWishListTable, CreatedDateTime), DateTimeUtil::toStr(wishlist.createdDateTime));
            listElement.setAttribute(fieldStr(RetailWishListTable, DueDateTime), DateTimeUtil::toStr(wishlist.DueDateTime));

            // Get wish list lines
            XmlElement linesElement = xmlDoc.createElement(#WishListLines);
            RetailWishListLineTable line;
            while select line
                order by line.CreatedDateTime desc
                where line.WishListId == wishlist.RecId
                   && line.DeletedDateTime == DateTimeUtil::minValue()
            {
                XmlElement lineElement = xmlDoc.createElement(tableStr(RetailWishListLineTable));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, RecId), int642str(line.RecId));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, WishListId), int642str(line.WishListId));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, CustomerId), line.CustomerId);
                lineElement.setAttribute(#CustomerName, CustTable::find(line.CustomerId).name());
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, ProductId), int642str(line.ProductId));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, Quantity), strFmt("%1", line.Quantity));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, UnitOfMeasure), line.UnitOfMeasure);
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, IsFavorite), enum2Symbol(enumNum(FalseTrue), line.IsFavorite));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, IsPrivate), enum2Symbol(enumNum(FalseTrue), line.IsPrivate));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, IsRecurring), enum2Symbol(enumNum(FalseTrue), line.IsRecurring));
                lineElement.setAttribute(fieldStr(RetailWishListLineTable, CreatedDateTime), datetime2str(line.createdDateTime, 0));

                linesElement.appendChild(lineElement);
            }

            listElement.appendChild(linesElement);

            // Get contributors (collaborative list only, owner or contributors only)
            if (wishlist.IsCollaborative == FalseTrue::True && (isOwner || isContributor))
            {
                XmlElement contributorsElement = xmlDoc.createElement(#WishListContributors);
                RetailWishListContributor contributor;
                while select contributor
                    where contributor.WishListId == wishlist.RecId
                {
                    XmlElement contributorElement = RetailTransactionServiceWishList::PrepareWishListContributorElement(xmlDoc, contributor);
                    contributorsElement.appendChild(contributorElement);
                }

                listElement.appendChild(contributorsElement);
            }

            // Get invitations (public list or collaborative list only, owner only)
            if ((wishlist.IsPrivate == FalseTrue::False || wishlist.IsCollaborative == FalseTrue::True) && isOwner)
            {
                XmlElement invitationsElement = xmlDoc.createElement(#WishListInvitations);
                RetailWishListInvitation invitation;
                while select invitation
                    where invitation.WishListId == wishlist.RecId
                {
                    XmlElement invitationElement = RetailTransactionServiceWishList::PrepareWishListInvitationElement(xmlDoc, invitation);
                    invitationsElement.appendChild(invitationElement);
                }

                listElement.appendChild(invitationsElement);
            }

            xmlDoc.appendChild(listElement);
            xml = xmlDoc.toString();
        }

        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrepareWishListContributorElement</Name>
				<Source><![CDATA[
    private static XmlElement PrepareWishListContributorElement(XmlDocument xmlDocument, RetailWishListContributor contributor)
    {
        XmlElement element;

        element = xmlDocument.createElement(tableStr(RetailWishListContributor));
        element.setAttribute(fieldStr(RetailWishListContributor, RecId), int642str(contributor.RecId));
        element.setAttribute(fieldStr(RetailWishListContributor, CustomerId), contributor.CustomerId);
        element.setAttribute(#CustomerName, CustTable::find(contributor.CustomerId).name());
        element.setAttribute(fieldStr(RetailWishListContributor, Invitation), int642str(contributor.Invitation));
        element.setAttribute(fieldStr(RetailWishListContributor, WishListId), int642str(contributor.WishListId));

        return element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrepareWishListInvitationElement</Name>
				<Source><![CDATA[
    private static XmlElement PrepareWishListInvitationElement(XmlDocument xmlDocument, RetailWishListInvitation invitation)
    {
        XmlElement element;

        element = xmlDocument.createElement(tableStr(RetailWishListInvitation));
        element.setAttribute(fieldStr(RetailWishListInvitation, RecId), int642str(invitation.RecId));
        element.setAttribute(fieldStr(RetailWishListInvitation, Invitee), invitation.Invitee);
        element.setAttribute(fieldStr(RetailWishListInvitation, IsSent), enum2Symbol(enumNum(FalseTrue), invitation.IsSent));
        element.setAttribute(fieldStr(RetailWishListInvitation, LastRequestDateTime), DateTimeUtil::toStr(invitation.LastRequestDateTime));
        element.setAttribute(fieldStr(RetailWishListInvitation, LastSentDateTime), DateTimeUtil::toStr(invitation.LastSentDateTime));
        element.setAttribute(fieldStr(RetailWishListInvitation, Status), int2str(invitation.Status));
        element.setAttribute(fieldStr(RetailWishListInvitation, Token), guid2str(invitation.Token));
        element.setAttribute(fieldStr(RetailWishListInvitation, Type), int2str(invitation.Type));
        element.setAttribute(fieldStr(RetailWishListInvitation, WishListId), int642str(invitation.WishListId));

        return element;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>