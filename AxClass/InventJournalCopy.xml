<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalCopy extends RunBaseBatch implements BatchRetryable
{
    // <GEERU>
    DialogRunbase        dialog;

    InventJournalTable   inventJournalTableTo;

    boolean              countryRegion_RU;
    // </GEERU>
    InventJournalId journalIdFrom;

    // <GEERU>
    JournalDescription   description;
    TransDate            transDate;
    NoYes                reverseSign;
    Storno_RU            storno;
    InventDetailLevel_RU detailLevel;
    NoYes                autoMarking;
    // </GEERU>

    DialogField     journalIdFromField;

    // <GEERU>
    DialogField          descriptionField;
    DialogField          transDateField;
    DialogField          reverseSignField;
    DialogField          stornoField;
    DialogField          detailLevelField;
    DialogField          autoMarkingField;
    DialogGroup          reverseGroup;
    InventMovement       inventMovementTo;
    InventMovement       inventMovementFrom;
    InventMovement       inventMovementToReceipt;
    InventMovement       inventMovementFromReceipt;
    // </GEERU>

    // <GEERU>
    #Define.CurrentVersion(2)
    // </GEERU>
    #LocalMacro.CurrentListSysLastValue
        // <GEERU>
        journalIdFrom,
        reverseSign,
        storno,
        detailLevel,
        autoMarking,
        description,
        transDate
        // </GEERU>
    #EndMacro

    #LocalMacro.CurrentListNewSession
        #CurrentLIstSysLastValue,
        inventJournalTableTo,
        countryRegion_RU
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        // <GEERU>
        dialog = super();
        // </GEERU>
        journalIdFromField = dialog.addField(extendedTypeStr(InventJournalId));
        journalIdFromField.value(journalIdFrom);

        // <GEERU>
        if (countryRegion_RU)
        {
             reverseGroup = dialog.addGroup();
             reverseGroup.frameType(FormFrameType::None);
             reverseGroup.visible(false);

             descriptionField = dialog.addFieldValue(extendedTypeStr(JournalDescription), '');
             transDateField   = dialog.addFieldValue(extendedTypeStr(TransDate), dateNull(), "@SYS67", "@GLS112475");
             detailLevelField = dialog.addFieldValue(enumStr(InventDetailLevel_RU), detailLevel);
             reverseSignField = dialog.addFieldValue(extendedTypeStr(NoYesId), reverseSign, "@SYS9896", "@SYS70986");
             stornoField      = dialog.addFieldValue(extendedTypeStr(Storno_RU), storno);
             autoMarkingField = dialog.addFieldValue(extendedTypeStr(NoYesId), autoMarking, "@GLS112476", "@GLS112477");

             this.enableFields_RU();
             this.showFields_RU();
        }
        // </GEERU>
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        if (reverseSignField)
        {
            dialog.formRun().controlMethodOverload(true);
            dialog.formRun().controlMethodOverloadObject(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFields_RU</Name>
				<Source><![CDATA[
    private void enableFields_RU()
    {
        void allowEdit(DialogField _field, boolean _allowEdit)
        {
            if (_field)
            {
                _field.allowEdit(_allowEdit);
            }
        }

        boolean value(DialogField _field, boolean _value = false)
        {
            boolean ret = _value;

            if (_field)
            {
                if (! prmisDefault(_value))
                {
                    _field.value(ret);
                }

                ret = _field.value();
            }

            return ret;
        }

        allowEdit(stornoField, value(reverseSignField));
        if (! value(reverseSignField))
        {
            value(stornoField, false);
        }

        if (!reverseSign)
        {
            storno = false;
        }

        allowEdit(autoMarkingField, value(reverseSignField) && !value(stornoField));

        value(autoMarkingField, value(reverseSignField));
        autoMarking = reverseSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_modified</Name>
				<Source><![CDATA[
    public boolean fld1_1_modified()
    {
        Object  control = dialog.formRun().controlCallingMethod();
        boolean ret     = control.modified();

        if (ret)
        {
            this.initJournalDescription_RU();
            this.showFields_RU();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld5_1_modified</Name>
				<Source><![CDATA[
    public boolean fld5_1_modified()
    {
        Object  control = dialog.formRun().controlCallingMethod();
        boolean ret     = control.modified();

        if (ret)
        {
            this.enableFields_RU();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld6_1_modified</Name>
				<Source><![CDATA[
    public boolean fld6_1_modified()
    {
        Object  control = dialog.formRun().controlCallingMethod();
        boolean ret     = control.modified();

        if (ret)
        {
            this.enableFields_RU();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        // <GEERU>
        // </GEERU>
        boolean     ret = super();

        journalIdFrom = journalIdFromField.value();

        // <GEERU>
        InventJournalType inventJournalType = InventJournalTable::find(journalIdFrom).JournalType;
        if (inventJournalType == InventJournalType::Movement    ||
            inventJournalType == InventJournalType::BOM         ||
            inventJournalType == InventJournalType::project     ||
            inventJournalType == InventJournalType::LossProfit  ||
            inventJournalType == InventJournalType::Transfer)
        {
            // if descriptionField != null but descriptionField.value() is ""
            // then user intentionally made it (description field) blank
            // space looks exactly the same for this purpose
            description = "";
            if (descriptionField)
            {
                if (descriptionField.value())
                    description = descriptionField.value();
                else
                    description = ' ';
            }

            if (transDateField)
            {
                transDate = transDateField.value();
            }
            else
            {
                transDate = dateNull();
            }

            if (detailLevelField)
            {
                detailLevel = detailLevelField.value();
            }
            else
            {
                detailLevel = InventDetailLevel_RU::JournalLines;
            }

            if (reverseSignField)
            {
                reverseSign = reverseSignField.value();
            }
            else
            {
                reverseSign = NoYes::No;
            }

            if (reverseSign && stornoField)
            {
                storno = stornoField.value();
            }
            else
            {
                storno = NoYes::No;
            }

            if (reverseSign && autoMarkingField)
            {
                autoMarking = autoMarkingField.value();
            }
            else
            {
                autoMarking = NoYes::No;
            }
        }
        else
        {
            description = "";
            transDate   = dateNull();
            detailLevel = InventDetailLevel_RU::JournalLines;
            reverseSign = NoYes::No;
            storno      = NoYes::No;
            autoMarking = NoYes::No;
        }
        // </GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventMovements_RU</Name>
				<Source><![CDATA[
    private void initInventMovements_RU(InventJournalTrans _from, InventJournalTrans _to)
    {
        inventMovementTo    = _to.inventMovement();
        inventMovementFrom  = _from.inventMovement();

        if (inventMovementTo.isTransfer())
        {
            inventMovementToReceipt     = InventMov_Jour_TransferReceipt::newFromInventJournalTrans(_to);
            inventMovementFromReceipt   = InventMov_Jour_TransferReceipt::newFromInventJournalTrans(_from);
        }
        else
        {
            inventMovementToReceipt     = null;
            inventMovementFromReceipt   = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalDescription_RU</Name>
				<Source><![CDATA[
    private void initJournalDescription_RU(InventJournalTable _inventJournalTable = InventJournalTable::find(journalIdFromField.value()))
    {
        if (descriptionField)
        {
            descriptionField.value(_inventJournalTable.Description);
        }

        description = _inventJournalTable.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTableTo_RU</Name>
				<Source><![CDATA[
    private InventJournalTable inventJournalTableTo_RU()
    {
        return inventJournalTableTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkReturnTrans_RU</Name>
				<Source><![CDATA[
    private void linkReturnTrans_RU(InventJournalTrans _from,
                                    InventJournalTrans _to)
    {
        boolean             doAutoMarking = autoMarking && inventMovementTo.transQty() < 0;
        InventTrans         inventTransFrom, inventTransTo, inventTransTmp;
        TmpInventTransMark  tmpMark;
        TransLink_RU        link;
        InventTransOriginId inventTransOriginIdFrom = inventMovementFrom.inventTransOriginId();
        InventTransOriginId inventTransOriginIdTo   = inventMovementTo.inventTransOriginId();
        TmpInventTransMark  tmpRec;

        void makeLink(InventTransOriginId _inventTransOriginIdFrom, InventTransOriginId _inventTransOriginIdTo, boolean _isTransferReceipt = false)
        {
            while select RecId, Storno_RU, InventDimId from inventTransFrom
                where inventTransFrom.InventTransOrigin == _inventTransOriginIdFrom
            {
                select firstonly RecId from link
                    where link.RefTableId                   == tableNum(InventTrans)
                      &&  link.RefPri                       == inventTransFrom.RecId
                exists join TableId from inventTransTmp
                    where inventTransTmp.InventTransOrigin  != _inventTransOriginIdTo
                      &&  inventTransTmp.Storno_RU          != inventTransFrom.Storno_RU
                      &&  inventTransTmp.RecId              == link.RefSec
                      && (inventTransTmp.StatusIssue        == StatusIssue::Sold
                      ||  inventTransTmp.StatusReceipt      == StatusReceipt::Purchased);

                if (link)
                {
                    continue;
                }

                if ((doAutoMarking && !_isTransferReceipt) || detailLevel == InventDetailLevel_RU::Transactions)
                {
                    select inventTransTo
                        where inventTransTo.InventTransOrigin   == _inventTransOriginIdTo
                           && inventTransTo.InventDimId         == inventTransFrom.InventDimId;
                }
                else
                {
                    select inventTransTo
                        where inventTransTo.InventTransOrigin == _inventTransOriginIdTo;
                }

                while (inventTransTo)
                {
                    TransLink_RU::create(tableNum(InventTrans), inventTransFrom.RecId, inventTransTo.RecId);
                    next inventTransTo;
                }
            }
        }

        if (_from.JournalType == InventJournalType::Transfer)
        {
            inventTransOriginIdFrom = inventMovementFromReceipt.inventTransOriginId();
        }

        if (doAutoMarking)
        {
            setPrefix(fieldLabelValue(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, ItemId), _from.ItemId));

            if (detailLevel == InventDetailLevel_RU::JournalLines &&
                PdsGlobal::pdsIsCWItem(inventMovementTo.itemId()))
            {
                info(strFmt("@SYS4083195", inventMovementTo.itemId()));
                doAutoMarking = false;
            }

            select firstonly RecId from inventTransFrom
                where inventTransFrom.InventTransOrigin == inventTransOriginIdFrom
                   && inventTransFrom.MarkingRefInventTransOrigin;

            if (inventTransFrom)
            {
                info(strFmt("@GLS112478", _from.InventTransId));
                doAutoMarking = false;
            }
        }

        if (doAutoMarking)
        {
            InventTable inventTable = _to.inventTable();

            while select inventTransFrom
                where inventTransFrom.InventTransOrigin == inventTransOriginIdFrom
            {
                if (detailLevel == InventDetailLevel_RU::JournalLines)
                {
                    select inventTransTo
                        where inventTransTo.InventTransOrigin == inventTransOriginIdTo
                          && !inventTransTo.MarkingRefInventTransOrigin;
                }
                else
                {
                    select firstonly inventTransTo
                        where inventTransTo.InventTransOrigin   == inventTransOriginIdTo
                          &&  inventTransTo.InventDimId         == inventTransFrom.InventDimId
                          && !inventTransTo.MarkingRefInventTransOrigin;
                }

                Map mapMarkNow = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

                delete_from tmpMark;
                delete_from tmpRec;

                InventTransMarkCollection collection = TmpInventTransMark::markingCollection(InventTransOrigin::find(inventTransFrom.InventTransOrigin), inventTransFrom.inventDim(), inventTransFrom.Qty);
                collection.insertCollectionToTmpTable(tmpRec);
           
                while (inventTransTo)
                {
                    select firstonly forupdate tmpMark
                        where tmpMark.InventTransOrigin == inventTransTo.InventTransOrigin
                           && tmpMark.InventDimId       == inventTransTo.InventDimId;

                    tmpMark.initFromInventTrans(inventTransTo);
                    tmpMark.Qty           += inventTransTo.Qty;
                    tmpMark.QtyRemain     += inventTransTo.financialOpenQty();
                    tmpMark.DateFinancial =  inventTransTo.DateFinancial;
                    tmpMark.InvoiceId     =  inventTransTo.InvoiceId;
                    tmpMark.DatePhysical  =  inventTransTo.DatePhysical;
                    tmpMark.PackingSlipId =  inventTransTo.PackingSlipId;
                    tmpMark.DateExpected  =  inventTransTo.DateExpected;

                    if (inventTransTo.DateFinancial)
                    {
                        tmpMark.CostValue += inventTransTo.costValue();
                    }
                    else if (inventTransTo.DatePhysical)
                    {
                        tmpMark.CostValue += inventTransTo.CostAmountPhysical;
                    }
                    else
                    {
                        tmpMark.CostValue += inventTransTo.Qty * inventTable.costPcsPrice(inventTransTo.InventDimId);
                    }

                    tmpMark.QtyMarkNow  += min(abs(inventTransFrom.Qty), abs(inventTransTo.Qty)) * sign(inventTransTo.Qty);
                    tmpMark.QtyRemain   -= tmpMark.QtyMarkNow;

                    select firstonly tmpRec
                        where tmpRec.InventTransOrigin == tmpMark.InventTransOrigin
                           && tmpRec.InventDimId       == tmpMark.InventDimId;

                    tmpMark.QtyMarked = tmpRec.QtyMarked;
                    tmpMark.write();

                    mapMarkNow.insert(tmpMark.RecId, tmpMark);

                    next inventTransTo;
                }

                TmpInventTransMark::updateTmpMark(inventTransFrom.InventTransOrigin, inventTransFrom.inventDim(), inventTransFrom.Qty, mapMarkNow.pack());
            }
        }

        if (inventMovementTo.isTransfer())
        {
            if (reverseSign)
            {
                makeLink(inventMovementFrom.inventTransOriginId(),          inventMovementToReceipt.inventTransOriginId(), true);
                makeLink(inventMovementFromReceipt.inventTransOriginId(),   inventMovementTo.inventTransOriginId());
            }
            else
            {
                makeLink(inventMovementFrom.inventTransOriginId(),          inventMovementTo.inventTransOriginId());
                makeLink(inventMovementFromReceipt.inventTransOriginId(),   inventMovementToReceipt.inventTransOriginId(), true);
            }
        }
        else if (reverseSign)
        {
            makeLink(inventTransOriginIdFrom, inventTransOriginIdTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        //<GEERU>
        #ISOCountryRegionCodes
        //</GEERU>

        super();

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (this.inGetSaveLast())
        {
            return [#CurrentVersion, #CurrentListSysLastValue];
        }

        return [#CurrentVersion, #CurrentListNewSession];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoMarking_RU</Name>
				<Source><![CDATA[
    public NoYes parmAutoMarking_RU(NoYes _autoMarking = autoMarking)
    {
        autoMarking = _autoMarking;
        return autoMarking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription_RU</Name>
				<Source><![CDATA[
    public JournalDescription parmDescription_RU(JournalDescription _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailLevel_RU</Name>
				<Source><![CDATA[
    public InventDetailLevel_RU parmDetailLevel_RU(InventDetailLevel_RU _detailLevel = detailLevel)
    {
        detailLevel = _detailLevel;

        return detailLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalIdFrom</Name>
				<Source><![CDATA[
    public InventJournalId_Tag parmJournalIdFrom(InventJournalId_Tag _journalIdFrom = journalIdFrom)
    {
        journalIdFrom = _journalIdFrom;
        // <GEERU>
        if (!prmisDefault(_journalIdFrom))
        {
            this.showFields_RU();
        }
        // </GEERU>
        return journalIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseSign_RU</Name>
				<Source><![CDATA[
    public NoYes parmReverseSign_RU(NoYes _reverseSign = reverseSign)
    {
        if (!prmisDefault(_reverseSign))
        {
            reverseSign = _reverseSign;
            this.enableFields_RU();
        }

        return reverseSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno_RU</Name>
				<Source><![CDATA[
    public Storno_RU parmStorno_RU(Storno_RU _storno = storno)
    {
        if (!prmisDefault(_storno))
        {
            storno = _storno;
            this.enableFields_RU();
        }

        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate_RU</Name>
				<Source><![CDATA[
    public TransDate parmTransDate_RU(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        InventJournalTrans      inventJournalTransFrom;
        InventJournalTrans      inventJournalTransFatherFrom;
        InventJournalTrans      inventJournalTransTo;
        InventJournalTrans_Tag  inventJournalTrans_TagFrom;
        InventJournalTrans_Tag  inventJournalTrans_TagTo;
        InventJournalTransData  inventJournalTransData;
        Voucher                 voucher_last;
        // <GIN>
        InventJournalTrans_IN               inventJournalTransTo_IN;
        InventJournalTable_IN               inventJournalTableTo_IN;
        InventJournalTransTaxExtensionIN    inventJournalTransTaxExtensionIN;
        // </GIN>
        #ISOCountryRegionCodes

        InventTransId copyInventJournalTrans(InventJournalTrans _inventJournalTransFrom, InventTransId _inventTransIdFather = "")
        {
            // <GEERU>
            boolean noTransLink = false;
            // </GEERU>

            inventJournalTransTo.clear();
            inventJournalTransTo.initFromInventJournalTable(inventJournalTableTo);
            // <GEERU>
            inventJournalTransTo.initFromInventJournalTrans(_inventJournalTransFrom, reverseSign);
            // </GEERU>
            inventJournalTransTo.InventTransIdFather = _inventTransIdFather;
            inventJournalTransTo.JournalId           = inventJournalTableTo.JournalId;
            inventJournalTransTo.Voucher             = '';

            // <GEERU>
            if (countryRegion_RU)
            {
                inventJournalTransTo.Storno_RU           = storno ? ! _inventJournalTransFrom.Storno_RU : _inventJournalTransFrom.Storno_RU;

                if (autoMarking && inventJournalTransTo.inventMovement().transQty() >= 0)
                {
                    if (inventJournalTransTo.bomLine == NoYes::No && inventJournalTableTo.JournalType == InventJournalType::BOM)
                    {
                        warning("@GLS100145");
                        noTransLink = true;
                    }
                    else
                    {
                        inventJournalTransTo.InventTransIdReturn = _inventJournalTransFrom.InventTransId;
                        inventJournalTransTo.setCostPrice();
                    }
                }

                if (transDate)
                {
                    inventJournalTransTo.TransDate = transDate;
                }
            }
            // </GEERU>

            if (inventJournalTableTo.VoucherDraw == JournalVoucherDraw::Entering)
            {
                inventJournalTransData.initVoucher(voucher_last,false);               // Voucher is assigned
            }

            inventJournalTransData.addJournalTransVoucher();
            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                inventJournalTransTaxExtensionIN        = inventJournalTransTo.inventJournalTransTaxExtensionIN();

                if (TaxCopyAssessableValueForItemJournal_INFlight::instance().isEnabled())
                {
                    inventJournalTransTaxExtensionIN.copyFrom(inventJournalTransFrom.inventJournalTransTaxExtensionIN());
                }

                inventJournalTransTo.packInventJournalTrans_IN(inventJournalTransTaxExtensionIN);
            }
            // </GIN>

            if (inventJournalTransTo.JournalType == InventJournalType::Count)
            {
                inventJournalTransTo.Qty = 0;
                inventJournalTransTo.PdsCWQty = 0;
                inventJournalTransTo.Counted = 0;
                inventJournalTransTo.PdsCWInventQtyCounted = 0;
                inventJournalTransTo.CostAmount = 0;
                inventJournalTransTo.CostMarkup = 0;
                inventJournalTransTo.inventMovement().setInventDimId(inventJournalTransTo.InventDimId);
            }

            inventJournalTransTo.insert();
            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                inventJournalTransTo_IN.InventJournalTrans  =   inventJournalTransTo.RecId;
                inventJournalTransTo_IN.DisposalType        =   InventJournalTrans_IN::findByInventJournalTrans(_inventJournalTransFrom.RecId).DisposalType;
                inventJournalTransTo_IN.insert();
            }
            // </GIN>
            // <GEERU>
            if (countryRegion_RU)
            {
                this.initInventMovements_RU(_inventJournalTransFrom, inventJournalTransTo);
                this.updateInventTrans_RU  (_inventJournalTransFrom, inventJournalTransTo);
                if (!noTransLink)
                {
                    this.linkReturnTrans_RU(_inventJournalTransFrom, inventJournalTransTo);
                }
            }
            // </GEERU>
            voucher_last = inventJournalTransTo.Voucher;

            return inventJournalTransTo.InventTransId;
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            setPrefix(strFmt("@SYS4083194", journalIdFrom));
        }
        // </GEERU>

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            InventJournalTable inventJournalTableFrom = InventJournalTable::find(journalIdFrom);

            inventJournalTableTo.data(inventJournalTableFrom.data());
            inventJournalTableTo.JournalId          = JournalTableData::newTable(inventJournalTableTo).nextJournalId();
            inventJournalTableTo.Posted             = NoYes::No;
            inventJournalTableTo.PostedDateTime     = utcDateTimeNull();
            inventJournalTableTo.PostedUserId       = '';
            inventJournalTableTo.JournalIdOrignal   = inventJournalTableFrom.JournalId;
            inventJournalTableTo.SystemBlocked      = NoYes::No;
            inventJournalTableTo.BlockUserId        = '';
            inventJournalTableTo.SessionId          = 0;

            inventJournalTableTo.WorkflowApprovalStatus = InventJournalWorkflowApprovalStatus::None;
            inventJournalTableTo.initWFApprovalStatus(inventJournalTableTo.inventJournalName());

            // <GEERU>
            // can rely on description != "" see getFromDialog()
            if (description)
            {
                inventJournalTableTo.Description = description;
            }

            //do not make auto reservation if copy not in "JournalLines" mode
            if (inventJournalTableTo.Reservation == ItemReservation::Automatic &&
                detailLevel                      != InventDetailLevel_RU::JournalLines)
            {
                inventJournalTableTo.Reservation = ItemReservation::None;
            }
            // </GEERU>
            inventJournalTableTo.insert();

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                InventJournalTable_IN inventJournalTableFrom_IN = inventJournalTableFrom.InventJournalTable_IN();
                inventJournalTableTo_IN.InventJournalTable      = inventJournalTableTo.RecId;
                inventJournalTableTo_IN.DisposalType            = inventJournalTableFrom_IN.DisposalType;
                inventJournalTableTo_IN.doInsert();
            }
            // </GIN>

            switch (inventJournalTableFrom.JournalType)
            {
                case InventJournalType::TagCounting:
                    while select inventJournalTrans_TagFrom
                        where inventJournalTrans_TagFrom.JournalId == inventJournalTableFrom.JournalId
                    {
                        inventJournalTrans_TagTo.clear();
                        inventJournalTrans_TagTo.initFromInventJournalTable(inventJournalTableTo);
                        inventJournalTrans_TagTo.data(inventJournalTrans_TagFrom.data());
                        inventJournalTrans_TagTo.JournalId      = inventJournalTableTo.JournalId;
                        inventJournalTrans_TagTo.insert();
                    }
                    break;
                case InventJournalType::BOM:
                    JournalTableData journalTableData = JournalTableData::newTable(inventJournalTableTo);
                    inventJournalTransData  = journalTableData.journalStatic().newJournalTransData(inventJournalTransTo,journalTableData);
                    while select inventJournalTransFatherFrom
                        where inventJournalTransFatherFrom.JournalId == inventJournalTableFrom.JournalId &&
                              inventJournalTransFatherFrom.InventTransIdFather == ''
                    {
                        InventTransId inventTransIdFather = copyInventJournalTrans(inventJournalTransFatherFrom);

                        while select inventJournalTransFrom
                          where inventJournalTransFrom.JournalId == inventJournalTableFrom.JournalId &&
                                inventJournalTransFrom.InventTransIdFather == inventJournalTransFatherFrom.InventTransId
                        {
                            copyInventJournalTrans(inventJournalTransFrom, inventTransIdFather);
                        }
                    }
                    break;
                default:
                    journalTableData        = JournalTableData::newTable(inventJournalTableTo);
                    inventJournalTransData  = journalTableData.journalStatic().newJournalTransData(inventJournalTransTo,journalTableData);
                    while select inventJournalTransFrom
                        where inventJournalTransFrom.JournalId == inventJournalTableFrom.JournalId
                    {
                        copyInventJournalTrans(inventJournalTransFrom);
                    }
                    break;
            }

            // <GEERU>
            if (inventJournalTableTo.Reservation != inventJournalTableFrom.Reservation)
            {
                inventJournalTableTo.Reservation = inventJournalTableFrom.Reservation;
                inventJournalTableTo.update();
            }
            // </GEERU>

            info(strFmt("@SYS62960", inventJournalTableTo.JournalId, inventJournalTableTo.JournalType));
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Communicates to the batch framework that this class can impersonate the user who requested the task.
    /// </summary>
    /// <returns>
    ///    true because this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFields_RU</Name>
				<Source><![CDATA[
    private void showFields_RU()
    {
        InventJournalId    journalId;
        if (journalIdFromField)
        {
            journalId = journalIdFromField.value();
        }
        else
        {
            journalId = journalIdFrom;
        }

        if (countryRegion_RU && journalId)
        {
            InventJournalTable journalTable = InventJournalTable::find(journalId);

            if (journalTable.JournalType == InventJournalType::Movement   ||
                journalTable.JournalType == InventJournalType::BOM        ||
                journalTable.JournalType == InventJournalType::project    ||
                journalTable.JournalType == InventJournalType::LossProfit ||
                journalTable.JournalType == InventJournalType::Transfer)
            {
                this.initJournalDescription_RU(journalTable);

                if (reverseSignField && reverseGroup)
                {
                    reverseSignField.fieldControl().label   (journalTable.JournalType == InventJournalType::Transfer ? "@SYS85946" : "@SYS9896");
                    reverseSignField.fieldControl().helpText(journalTable.JournalType == InventJournalType::Transfer ? "@GLS113819" : "@SYS70986");
                    reverseGroup.visible(true);
                }
            }
            else if (reverseGroup)
            {
                reverseGroup.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        boolean ret = false;

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    [version, #CurrentListSysLastValue] = _packedClass;
                }
                else
                {
                    [version, #CurrentListNewSession] = _packedClass;
                }
                ret = true;
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTrans_RU</Name>
				<Source><![CDATA[
    private void updateInventTrans_RU(InventJournalTrans _from,
                                      InventJournalTrans _to)
    {
        InventTrans             inventTransFrom, inventTransTo;
        InventDimParm           inventDimParm;
        InventTransOriginId     inventTransOriginIdFrom;
        InventTransOriginId     inventTransOriginIdTo;
        TmpInventTransWMS       tmpInventTransWMS;
        LineNum                 lineNum;

        if (detailLevel == InventDetailLevel_RU::JournalLines)
        {
            return;
        }

        //transfer
        if (inventMovementTo.isTransfer())
        {
            inventTransOriginIdTo   = inventMovementToReceipt.inventTransOriginId();
            inventTransOriginIdFrom = reverseSign ? inventMovementFrom.inventTransOriginId() : inventMovementFromReceipt.inventTransOriginId();
        }
        else
        {
            inventTransOriginIdTo   = inventMovementTo.inventTransOriginId();
            inventTransOriginIdFrom = inventMovementFrom.inventTransOriginId();
        }

        if (inventMovementTo.transQty() >= 0 || inventMovementTo.isTransfer())
        {
            // registration
            InventTransWMS_Register inventTransWMS_Register = InventTransWMS_Register::newStandard(tmpInventTransWMS);

            select firstonly RecId, InventTransOrigin from inventTransTo
                where inventTransTo.InventTransOrigin == inventTransOriginIdTo;

            while select sum(Qty)
                , sum(PdsCWQty)
                from inventTransFrom group by InventDimId
                where inventTransFrom.InventTransOrigin == inventTransOriginIdFrom
            {
                lineNum++;
                tmpInventTransWMS.clear();
                tmpInventTransWMS.InventQty         = (reverseSign ? -1 : 1) * inventTransFrom.Qty;
                tmpInventTransWMS.PdsCWQty          = (reverseSign ? -1 : 1) * inventTransFrom.PdsCWQty;
                tmpInventTransWMS.InventDimId       = inventTransFrom.InventDimId;
                tmpInventTransWMS.ItemId            = _from.ItemId;
                tmpInventTransWMS.LineNum           = lineNum;
                tmpInventTransWMS.InventTrans       = inventTransTo.RecId;
                tmpInventTransWMS.InventTransOrigin = inventTransTo.InventTransOrigin;

                inventTransWMS_Register.writeTmpInventTransWMS(tmpInventTransWMS, inventTransTo, inventTransFrom.inventDim());
            }

            inventTransWMS_Register.updateInventFromMovement(inventMovementTo.isTransfer() ? inventMovementToReceipt : inventMovementTo);
        }

        if (inventMovementTo.transQty() < 0)
        {
            setPrefix(strFmt("@GLS112479", _to.ItemId, _to.LineNum));

            //transfer
            if (inventMovementTo.isTransfer())
            {
                inventTransOriginIdFrom = reverseSign ? inventMovementFromReceipt.inventTransOriginId(): inventMovementFrom.inventTransOriginId();
            }

            inventMovementTo.inventDimGroupSetup().inventDimParmActive(inventDimParm);

            inventDimParm.ItemIdFlag    = false;
            inventDimParm.ClosedQtyFlag = false;

            // reservation
            while select sum(Qty)
                , sum(PdsCWQty)
                from inventTransFrom group by InventDimId
                where inventTransFrom.InventTransOrigin == inventTransOriginIdFrom
            {
                InventDim inventDimFrom = InventDim::find(inventTransFrom.InventDimId);
                InventUpd_Reservation::updateReserveFromForm(
                    _to,
                    inventDimFrom,
                    inventDimParm,
                    (reverseSign ? 1 : -1) * inventTransFrom.Qty
                    , InventMovSubType::None
                    , (reverseSign ? 1 : -1) * inventTransFrom.PdsCWQty
                    , true // Reserved invent qty should be just the same as in the source line, not be calculated from CW by minimum value.
                );
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean             ret                 = super();
        InventJournalTable  inventJournalTable  = InventJournalTable::find(journalIdFrom);

        if (!inventJournalTable)
        {
            ret = checkFailed(strFmt("@SYS17145", journalIdFrom));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalCopy construct()
    {
        InventJournalCopy   inventJournalCopy = new InventJournalCopy();
        return inventJournalCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS65049";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventJournalTable  inventJournalTable;
        InventJournalTable  inventJournalTableFind;
        InventJournalCopy   inventJournalCopy;

        if (_args && _args.dataset() == tableNum(InventJournalTable))
        {
            inventJournalTable  = _args.record() as InventJournalTable;
            inventJournalCopy   = InventJournalCopy::newStandard(_args,inventJournalTable.JournalId);
        }
        else
        {
            inventJournalCopy = InventJournalCopy::newStandard(_args);
        }

        if (inventJournalCopy.prompt())
        {
            inventJournalCopy.runOperation();

            inventJournalTable.reread();

            // <GEERU>
            if (inventJournalTable && FormDataUtil::isFormDataSource(inventJournalTable))
            // </GEERU>
            {
                // <GEERU>
                if (inventJournalCopy.inventJournalTableTo_RU().RecId)
                {
                    inventJournalTableFind = InventJournalTable::find(inventJournalCopy.inventJournalTableTo_RU().JournalId);
                }
                else
                {
                    inventJournalTableFind.data(inventJournalTable);
                }

                FormDataSource formDataSource = FormDataUtil::getFormDataSource(inventJournalTable);
                formDataSource.executeQuery();
                // </GEERU>
                formDataSource.findRecord(inventJournalTableFind);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventJournalCopy</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments that will be used to initialize the default values.
    /// </param>
    /// <param name="_journalId">
    ///    The journal ID that is used to set the <c>JournalIdFrom</c> property; optional.
    /// </param>
    /// <returns>
    ///    Returns the new server bound instance of the <c>InventJournalCopy</c> class
    /// </returns>
    public static InventJournalCopy newStandard(
        Args            _args,
        InventJournalId _journalId  = '')
    {
        InventJournalCopy   inventJournalCopy = InventJournalCopy::construct();

        inventJournalCopy.getLast();
        inventJournalCopy.parmJournalIdFrom(_journalId);

        return inventJournalCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>