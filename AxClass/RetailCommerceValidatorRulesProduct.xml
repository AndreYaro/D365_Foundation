<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRulesProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCommerceValidatorRulesProduct</c> class validates all product rules.
/// </summary>
public class RetailCommerceValidatorRulesProduct
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate entity type list.
    /// </summary>
    /// <returns>The map containing all entity types and their descriptions.</returns>
    public static Map getEntityType()
    {
        Map entityList = new Map(Types::String,Types::Container);

        entityList.insert("@Retail:RetailCommerceValidatorProductEntityId", [RetailCommerceValidatorEntityFunction::Functional, tableNum(EcoResProduct), classStr(RetailCommerceValidatorRulesProduct)]);

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate rule list.
    /// </summary>
    /// <returns>The map containing all rules and rule related properties.</returns>
    public static Map getRulesList()
    {
        Map rulesList = new Map(Types::String,Types::Container);

        // Validates Master product Color translation.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule001", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule001Description",
            'validateMasterProductColorTranslation',
            formStr(EcoResProductMasterDimension),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates Master product Style translation.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule002", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule002Description",
            'validateMasterProductStyleTranslation',
            formStr(EcoResProductMasterDimension),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates Master product Size translation.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule003", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule003Description",
            'validateMasterProductSizeTranslation',
            formStr(EcoResProductMasterDimension),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates Master product Configuration translation.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule004", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule004Description",
            'validateMasterProductConfigTranslation',
            formStr(EcoResProductMasterDimension),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if product is not active.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule005", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule005Description",
            'validateActiveAssortedProduct',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates if product is excluded.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule006", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorProdRule006Description",
            'validateIsProductExcluded',
            formStr(RetailAssortmentDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates Product name translation.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule007", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule007Description",
            'validateProductNameTranslation',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if product is categorized or not.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule008", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule008Description",
            'validateProductCategory',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates inventory unit of measure.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule009", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorProdRule009Description",
            'validateInventUOM',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates sales unit of measure.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule010", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule010Description",
            'validateSalesUOM',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates invent base price.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule011", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorProdRule011Description",
            'validateInventBasePrice',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates sales price.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule012", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule012Description",
            'validateSalesPrice',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // validates if product stopped for sale.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule013", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorProdRule013Description",
            'validateStoppedForSale',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if the catalog product is assorted and not released to a company.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule014", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorProdRule014Description",
            'validateIfAssortedProductNotReleased',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates product is categorized to an inactive category or not.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule015", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorProdRule015Description",
            'validateCategorizedProductInactiveCategory',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if product master or distinct product attribute translation is missing or not.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule016", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule016Description",
            'validateReleasedProductAttributeTranslation',
            formStr(EcoResAttributeValue),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates Product description translation.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule017", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule017Description",
            'validateProductDescriptionTranslation',
            formStr(EcoResProductDetailsExtended),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates navigation category product is part of any assortment.
        rulesList.insert("@Retail:RetailCommerceValidatorProdRule018", [
            "@Retail:RetailCommerceValidatorProductEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorProdRule018Description",
            'validateNavigationCategoryProductNotInAnyAssortment',
            formStr(EcoResCategoryhierarchylistpage),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        return rulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of entities of the Entity type for a given validation
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The number of entities in scope for the validation.</returns>
    public static int64 getEntityCount(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorWorkChannelProducts products;
        select count(RecId) from products where products.ValidationId == _validationId && products.ChannelExcluded == NoYes::No;

        return products.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMasterProductColorTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-001': Master product Color translation is missing
    /// Validates if master product's color translation is missing, logs an error if missing.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateMasterProductColorTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        int resultsCounter = 0;
        EcoResProduct ecoResProduct;
        EcoResProductMasterColor productMasterColor;
        EcoResProductMasterDimValueTranslation masterColorTransLation;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        LanguageId defaultLanguageId = SystemParameters::getSystemLanguageId();

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
                && channelLanguages.LanguageId != defaultLanguageId
        {
            while select Color, ColorProductMaster from productMasterColor
                exists join channelProducts
                    order by channelProducts.ProductRefRecId asc
                    where channelProducts.ProductRefRecId == productMasterColor.ColorProductMaster
                        && channelProducts.ValidationId == _validatorTest.ValidationId
                        && channelProducts.ChannelExcluded == NoYes::No
                        && channelProducts.ProductRefRecId >= _validatorTest.RangeStartRecId
                        && channelProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
                notexists join masterColorTransLation
                    where masterColorTransLation.ProductMasterDimensionValue == productMasterColor.RecId
                        && masterColorTransLation.Name != ''
                        && masterColorTransLation.Description != ''
                        && masterColorTransLation.LanguageId == channelLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorColorTranslationMissing",EcoResColor::find(productMasterColor.Color).Name,channelLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductColor(
                    _validatorTest.ValidationId,
                    productMasterColor.ColorProductMaster,
                    productMasterColor.Color);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule001"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMasterProductStyleTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-002': Master product style translation is missing
    /// Validates if master product's style translation is missing, logs an error if missing.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateMasterProductStyleTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        int resultsCounter = 0;
        EcoResProduct ecoResProduct;
        EcoResProductMasterStyle productMasterStyle;
        EcoResProductMasterDimValueTranslation masterStyleTransLation;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        LanguageId defaultLanguageId = SystemParameters::getSystemLanguageId();

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
                && channelLanguages.LanguageId != defaultLanguageId
        {
            while select Style, StyleProductMaster from productMasterStyle
                exists join channelProducts
                    order by channelProducts.ProductRefRecId asc
                    where channelProducts.ProductRefRecId == productMasterStyle.StyleProductMaster
                        && channelProducts.ValidationId == _validatorTest.ValidationId
                        && channelProducts.ChannelExcluded == NoYes::No
                        && channelProducts.ProductRefRecId >= _validatorTest.RangeStartRecId
                        && channelProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
                notexists join masterStyleTransLation
                    where masterStyleTransLation.ProductMasterDimensionValue == productMasterStyle.RecId
                        && masterStyleTransLation.Name != '' 
                        && masterStyleTransLation.Description != ''
                        && masterStyleTransLation.LanguageId == channelLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorStyleTranslationMissing",EcoResStyle::find(productMasterStyle.Style).Name,channelLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductStyle(
                    _validatorTest.ValidationId,
                    productMasterStyle.StyleProductMaster,
                    productMasterStyle.Style);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule002"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMasterProductSizeTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-003': Master product size translation is missing
    /// Validates if master product's size translation is missing, logs an error if missing.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateMasterProductSizeTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        int resultsCounter = 0;
        EcoResProduct ecoResProduct;
        EcoResProductMasterSize productMasterSize;
        EcoResProductMasterDimValueTranslation masterSizeTransLation;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        LanguageId defaultLanguageId = SystemParameters::getSystemLanguageId();

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
                && channelLanguages.LanguageId != defaultLanguageId
        {
            while select Size, SizeProductMaster from productMasterSize
                exists join channelProducts
                    order by channelProducts.ProductRefRecId asc
                    where channelProducts.ProductRefRecId == productMasterSize.SizeProductMaster
                        && channelProducts.ValidationId == _validatorTest.ValidationId
                        && channelProducts.ChannelExcluded == NoYes::No
                        && channelProducts.ProductRefRecId >= _validatorTest.RangeStartRecId
                        && channelProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
                notexists join masterSizeTransLation
                    where masterSizeTransLation.ProductMasterDimensionValue == productMasterSize.RecId
                        && masterSizeTransLation.Name != '' 
                        && masterSizeTransLation.Description != ''
                        && masterSizeTransLation.LanguageId == channelLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorSizeTranslationMissing",EcoResSize::find(productMasterSize.Size).Name,channelLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductSize(
                    _validatorTest.ValidationId,
                    productMasterSize.SizeProductMaster,
                    productMasterSize.Size);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule003"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMasterProductConfigTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-004': Master product configuration translation is missing
    /// Validates if master product's configuration translation is missing, logs an error if missing.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateMasterProductConfigTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        int resultsCounter = 0;
        EcoResProduct ecoResProduct;
        EcoResProductMasterConfiguration productMasterConfig;
        EcoResProductMasterDimValueTranslation masterConfigTransLation;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        LanguageId defaultLanguageId = SystemParameters::getSystemLanguageId();

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
                && channelLanguages.LanguageId != defaultLanguageId
        {
            while select Configuration, ConfigProductMaster from productMasterConfig
                exists join channelProducts
                    order by channelProducts.ProductRefRecId asc
                    where channelProducts.ProductRefRecId == productMasterConfig.ConfigProductMaster
                        && channelProducts.ValidationId == _validatorTest.ValidationId
                        && channelProducts.ChannelExcluded == NoYes::No
                        && channelProducts.ProductRefRecId >= _validatorTest.RangeStartRecId
                        && channelProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
                notexists join masterConfigTransLation
                    where masterConfigTransLation.ProductMasterDimensionValue == productMasterConfig.RecId
                        && masterConfigTransLation.Name != '' 
                        && masterConfigTransLation.Description != ''
                        && masterConfigTransLation.LanguageId == channelLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorConfigurationTranslationMissing",EcoResConfiguration::find(productMasterConfig.Configuration).Name,channelLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductConfig(
                    _validatorTest.ValidationId,
                    productMasterConfig.ConfigProductMaster,
                    productMasterConfig.Configuration);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule004"
                    );

                // Increase the counter of issues
                resultsCounter++;

            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveAssortedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-005': The product is not active in any assortments, and it won’t be shown on channel.
    /// Validates assorted product is active or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateActiveAssortedProduct(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts  assortedProducts;
        date dateToday = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        int resultsCounter = 0;
        
        while select ProductRefRecId from retailCommerceValidatorAllProducts
            order by ProductRefRecId
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId &&
                retailCommerceValidatorAllProducts.ChannelExcluded == NoYes::No
         exists join assortedProducts
            where assortedProducts.ProductRefRecId == retailCommerceValidatorAllProducts.ProductRefRecId &&
                assortedProducts.ValidationId == _validatorTest.ValidationId &&
                assortedProducts.ValidFrom <= dateToday &&
                assortedProducts.validTo <= dateToday
        {
            RetailCommerceValidatorWorkChannelAssortedProducts  assortedActiveProducts;

            select firstonly RecId from assortedActiveProducts
                where assortedActiveProducts.ProductRefRecId == retailCommerceValidatorAllProducts.ProductRefRecId &&
                    assortedActiveProducts.ValidationId == _validatorTest.ValidationId &&
                    assortedActiveProducts.ValidFrom <= dateToday &&
                    assortedActiveProducts.validTo >= dateToday;

            if(!assortedActiveProducts.RecId)
            {
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(
                    _validatorTest.ValidationId,
                    retailCommerceValidatorAllProducts.ProductRefRecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule005Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule005"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsProductExcluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-006': The product is excluded. If any product has at least one exclusion , then it is not going to show up on the channel.
    /// Validates product is excluded or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateIsProductExcluded(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts channelAssortedProducts;
        int resultsCounter = 0;

        while select ProductRefRecId,AssortmentId from channelAssortedProducts
            group by ProductRefRecId, AssortmentId
            order by ProductRefRecId
            where channelAssortedProducts.ProductRefRecId >= _validatorTest.RangeStartRecId
                && channelAssortedProducts.ProductRefRecId <= _validatorTest.RangeEndRecId
                && channelAssortedProducts.ValidationId == _validatorTest.ValidationId
                && channelAssortedProducts.Included == RetailAssortmentExcludeIncludeType::Exclude
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductAssortment(_validatorTest.ValidationId, channelAssortedProducts.ProductRefRecId, channelAssortedProducts.AssortmentId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule006Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule006"
                    );

            // Increase the counter of issues
            resultsCounter++;

        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductNameTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-007': Product translation for name is missing.
    /// Validates product name translation is available for the given language or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateProductNameTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        EcoResProductTranslation  productTranslation;
        RetailCommerceValidatorWorkChannelLanguages  retailCommerceValidatorLanguages;
        int resultsCounter = 0;

        while select LanguageId from retailCommerceValidatorLanguages
            where retailCommerceValidatorLanguages.ValidationId == _validatorTest.ValidationId
        {
            while select ProductRefRecId from retailCommerceValidatorAllProducts
                order by ProductRefRecId
                where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                    retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                    retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
             notexists join productTranslation
                where productTranslation.Product == retailCommerceValidatorAllProducts.ProductRefRecId
                    && productTranslation.Name != ''
                    && productTranslation.LanguageId == retailCommerceValidatorLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorProdRule007DynamicDescription", retailCommerceValidatorLanguages.LanguageId);
            
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule007"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-008': Product is not categorized.
    /// Validates product is categorized or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateProductCategory(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts  retailCommerceValidatorWorkChannelAssortedProducts;
        EcoResProductCategory  ecoResProductCategory;
        int resultsCounter = 0;
        
        while select ProductRefRecId from retailCommerceValidatorAllProducts
            order by ProductRefRecId
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                  retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
         exists join retailCommerceValidatorWorkChannelAssortedProducts
             where retailCommerceValidatorWorkChannelAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                   retailCommerceValidatorWorkChannelAssortedProducts.ProductRefRecId == retailCommerceValidatorAllProducts.ProductRefRecId &&
                   retailCommerceValidatorWorkChannelAssortedProducts.VariantRefRecId == 0
         notexists join ecoResProductCategory
            where ecoResProductCategory.Product == retailCommerceValidatorAllProducts.ProductRefRecId
        {
            
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule008Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule008"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-009': Inventory unit is missing.
    /// Validates invent unit of measure for the given product.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateInventUOM(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable  inventTable;
        InventTableModule  inventTableModule;
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        int resultsCounter = 0;

        while select ProductRefRecId from retailCommerceValidatorAllProducts
            order by ProductRefRecId
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
            exists join inventTable
                where inventTable.Product == retailCommerceValidatorAllProducts.ProductRefRecId
            notexists join inventTableModule
                where inventTableModule.ItemId == inventTable.ItemId &&
                    inventTableModule.ModuleType == ModuleInventPurchSales::Invent &&
                    inventTableModule.UnitId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule009Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule009"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-010': Sales unit is missing.
    /// Validates sales unit of measure for the given product.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateSalesUOM(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable  inventTable;
        InventTableModule  inventTableModule;
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        int resultsCounter = 0;

        while select ProductRefRecId from retailCommerceValidatorAllProducts
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
            exists join inventTable
                where inventTable.Product == retailCommerceValidatorAllProducts.ProductRefRecId
            notexists join inventTableModule
                where inventTableModule.ItemId == inventTable.ItemId &&
                    inventTableModule.ModuleType == ModuleInventPurchSales::Sales &&
                    inventTableModule.UnitId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule010Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule010"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventBasePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-011': Invent base price is missing.
    /// Validates Invent base price for the given product.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateInventBasePrice(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable  inventTable;
        InventTableModule  inventTableModule;
        RetailCommerceValidatorWorkchannelProducts  retailCommerceValidatorAllProducts;
        int resultsCounter = 0;
        RetailParameters  retailParameters = RetailParameters::find();

        while select ProductRefRecId from retailCommerceValidatorAllProducts
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
               retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
            join ItemId from inventTable
                where inventTable.Product == retailCommerceValidatorAllProducts.ProductRefRecId
            notexists join inventTableModule
                where inventTableModule.ItemId == inventTable.ItemId &&
                    inventTableModule.ModuleType == ModuleInventPurchSales::Invent &&
                    inventTableModule.Price
        {
            if(inventTable.ItemId != retailParameters.GiftcardItem)
            {
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorProdRule011Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorProdRule011"
                        );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-012': Sales price is missing.
    /// Validates Sales price for the given product.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateSalesPrice(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable  inventTable;
        InventTableModule  inventTableModule;
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        int resultsCounter = 0;
        RetailParameters  retailParameters = RetailParameters::find();

        while select ProductRefRecId from retailCommerceValidatorAllProducts
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
            join ItemId from inventTable
                where inventTable.Product == retailCommerceValidatorAllProducts.ProductRefRecId
            notexists join inventTableModule
                where inventTableModule.ItemId == inventTable.ItemId &&
                    inventTableModule.ModuleType == ModuleInventPurchSales::Sales &&
                    inventTableModule.Price
        {
            if(inventTable.ItemId != retailParameters.GiftcardItem && !RetailKit::existByProductMaster(retailCommerceValidatorAllProducts.ProductRefRecId))
            {
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorProdRule012Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorProdRule012"
                        );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStoppedForSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-013': Product is stopped for sales.
    /// Validates stopped sales flag for the given product.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateStoppedForSale(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable  inventTable;
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        RetailCommerceValidator  retailCommerceValidator = RetailCommerceValidator::find(_validatorTest.ValidationId);
        RetailOnlineChannelTable  retailOnlineChannelTable;
        InventItemSalesSetup  inventItemSalesSetup;
        InventDim  inventDim;
        InventLocation  inventLocation;
        RetailStoreTable retailStoreTable;
        RetailOnlineChannelTable onlineChannelTable;
        InventLocationId  warehouse;
        int resultsCounter = 0;

        select firstonly inventLocation,RecId from retailStoreTable
            where retailStoreTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId &&
                retailStoreTable.ChannelType == RetailChannelType::RetailStore;

        // Find the inventLocation on a store for retail channel
        if (retailStoreTable.RecId)
        {
            warehouse = retailStoreTable.inventLocation;
        }
        // Find the inventLocation on online store.
        else
        {
            select firstonly inventLocation,RecId from onlineChannelTable
                where onlineChannelTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId;

            if(onlineChannelTable.RecId)
            {
                warehouse = retailStoreTable.inventLocation;
            }
        }

        while select ProductRefRecId from retailCommerceValidatorAllProducts
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
            exists join inventTable
                where inventTable.Product == retailCommerceValidatorAllProducts.ProductRefRecId
            exists join inventItemSalesSetup
                where inventItemSalesSetup.ItemId == inventTable.ItemId &&
                      inventItemSalesSetup.Stopped
            exists join inventDim
                where inventDim.InventDimId == inventItemSalesSetup.InventDimId
            exists join inventLocation
                where inventLocation.InventLocationId == warehouse &&
                      inventLocation.InventSiteId == inventDim.InventSiteId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule013Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule013"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfAssortedProductNotReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-014': Product is not released but assorted.
    /// Validates if the catalog product is assorted and not released to a company.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateIfAssortedProductNotReleased(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable inventTable;
        InventDimCombination inventDimCombination;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts channelAssortedProducts;
        int resultsCounter = 0;
        DataAreaId channelLegalEntity = RetailCommerceValidator::getChannelLegalEntity(_validatorTest.ValidationId);

        if (channelLegalEntity)
        {
            changeCompany(channelLegalEntity)
            {
                while select ProductRefRecId from channelProducts
                        where channelProducts.ValidationId == _validatorTest.ValidationId &&
                            channelProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                            channelProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                            channelProducts.ChannelExcluded == NoYes::No
                 exists join channelAssortedProducts
                        where channelAssortedProducts.ProductRefRecId == channelProducts.ProductRefRecId
                            && channelAssortedProducts.ValidationId == _validatorTest.ValidationId
                            && channelAssortedProducts.VariantRefRecId == 0
                    notexists join inventTable
                        where inventTable.Product == channelProducts.ProductRefRecId
                {
                    // Find or create context of records
                    RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(
                        _validatorTest.ValidationId,
                        channelProducts.ProductRefRecId);

                    // Log the issue
                    RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorProdRule014Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorProdRule014"
                        );

                    // Increase the counter of issues
                    resultsCounter++;
                }

                // Validate variants
                while select ProductRefRecId from channelProducts
                        where channelProducts.ValidationId == _validatorTest.ValidationId &&
                            channelProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                            channelProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                            channelProducts.ChannelExcluded == NoYes::No
                 exists join channelAssortedProducts
                        where channelAssortedProducts.ProductRefRecId == channelProducts.ProductRefRecId &&
                            channelAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                            channelAssortedProducts.VariantRefRecId != 0
                    notexists join inventDimCombination
                        where inventDimCombination.DistinctProductVariant == channelProducts.ProductRefRecId
                {
                    // Find or create context of records
                    RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(
                        _validatorTest.ValidationId,
                        channelProducts.ProductRefRecId);

                    // Log the issue
                    RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorProdRule014Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorProdRule014"
                        );

                    // Increase the counter of issues
                    resultsCounter++;

                }
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelLegalEntity</Name>
				<Source><![CDATA[
    private static DataAreaId getChannelLegalEntity(RetailCommerceValidatorId _validationId)
    {
        RetailStoreTable retailStoreTable;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        DataAreaId legalEntity;

        select firstonly InventLocationDataAreaId from retailStoreTable
            where retailStoreTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
                && retailStoreTable.ChannelType == RetailChannelType::RetailStore;

        legalEntity = retailStoreTable.inventLocationDataAreaId;

        if (!legalEntity)
        {
            RetailOnlineChannelTable onlineChannelTable;

            select firstonly InventLocationDataAreaId from onlineChannelTable
                where onlineChannelTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
                    && onlineChannelTable.ChannelType == RetailChannelType::OnlineStore;

            legalEntity = onlineChannelTable.inventLocationDataAreaId;
        }

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategorizedProductInactiveCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-015': Product is categorized to an inactive category.
    /// Validates product is categorized to an inactive category or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateCategorizedProductInactiveCategory(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        EcoResProductCategory  ecoResProductCategory;
        EcoResCategory  ecoResCategory;
        int resultsCounter = 0;
        
        while select ProductRefRecId from retailCommerceValidatorAllProducts
            order by ProductRefRecId
            where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                  retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                  retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
         exists join ecoResProductCategory
            where ecoResProductCategory.Product == retailCommerceValidatorAllProducts.ProductRefRecId
         exists join ecoResCategory
            where ecoResCategory.RecId == ecoResProductCategory.Category &&
                  ecoResCategory.IsActive == NoYes::No
        {
            
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule015Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule015"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleasedProductAttributeTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-0016': Product master or distinct product translation is missing
    /// Validates if product master or distinct product translation is missing or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateReleasedProductAttributeTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        EcoResProduct ecoResProduct;
        EcoResAttribute ecoResAttribute;
        EcoResAttributetype  ecoResAttributetype;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        EcoResProductAttributeValue ecoResProductAttributeValue;
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        EcoResTextValueTranslation ecoResTextValueTranslation;
        TmpEcoResCategoryHierarchyAttributes tmpEcoResCategoryHierarchyAttributes;
        LanguageId defaultLanguageId = SystemParameters::getSystemLanguageId();
        int resultsCounter = 0;

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
                && channelLanguages.LanguageId != defaultLanguageId
        {
            while select ProductRefRecId from retailCommerceValidatorAllProducts
                order by ProductRefRecId
                where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                    retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                    retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
            {
                tmpEcoResCategoryHierarchyAttributes.linkPhysicalTableInstance(TmpEcoResCategoryHierarchyAttributes::populateRetailCategoryHierarchyAttributes(retailCommerceValidatorAllProducts.ProductRefRecId));
                
                while select Attribute from tmpEcoResCategoryHierarchyAttributes
                exists join ecoResAttribute
                    where ecoResAttribute.RecId == tmpEcoResCategoryHierarchyAttributes.Attribute
                exists join ecoResAttributetype
                    where ecoResAttributetype.RecId == ecoResAttribute.AttributeType &&
                        ecoResAttributetype.DataType == AttributeDataType::Text &&
                        !ecoResAttributetype.IsEnumeration
                exists join ecoResProductAttributeValue
                    where ecoResProductAttributeValue.Attribute == ecoResAttribute.RecId &&
                        ecoResProductAttributeValue.Product == retailCommerceValidatorAllProducts.ProductRefRecId
                notexists join ecoResTextValueTranslation
                    where ecoResTextValueTranslation.TextValueTable == ecoResProductAttributeValue.Value &&
                        ecoResTextValueTranslation.TextValue != '' &&
                        ecoResTextValueTranslation.Language == channelLanguages.LanguageId
                {
                    str description = strFmt("@Retail:RetailCommerceValidatorAttributeTranslationMissing", channelLanguages.LanguageId);
            
                    // Find or create context of records
                    RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductAttribute(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId, tmpEcoResCategoryHierarchyAttributes.Attribute);

                    // Log the issue
                    RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        description,
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorProdRule016"
                        );

                    // Increase the counter of issues
                    resultsCounter++;
                }
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDescriptionTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-017': Product translation for description is missing.
    /// Validates product description translation is available for the given language or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateProductDescriptionTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts  retailCommerceValidatorAllProducts;
        EcoResProductTranslation  productTranslation;
        RetailCommerceValidatorWorkChannelLanguages  retailCommerceValidatorLanguages;
        RetailCommerceValidatorWorkChannelAssortedProducts  retailAssortedProducts;
        int resultsCounter = 0;

        while select LanguageId from retailCommerceValidatorLanguages
            where retailCommerceValidatorLanguages.ValidationId == _validatorTest.ValidationId
        {
            while select ProductRefRecId from retailCommerceValidatorAllProducts
                order by retailCommerceValidatorAllProducts.ProductRefRecId
                group by retailCommerceValidatorAllProducts.ProductRefRecId
                where retailCommerceValidatorAllProducts.ProductRefRecId >= _validatorTest.RangeStartRecId &&
                    retailCommerceValidatorAllProducts.ProductRefRecId <= _validatorTest.RangeEndRecId &&
                    retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
                exists join retailAssortedProducts
                    where retailAssortedProducts.ProductRefRecId == retailCommerceValidatorAllProducts.ProductRefRecId &&
                        retailAssortedProducts.ValidationId == _validatorTest.ValidationId &&
                        retailAssortedProducts.VariantRefRecId == 0
                notexists join productTranslation
                    where productTranslation.Product == retailCommerceValidatorAllProducts.ProductRefRecId &&
                        productTranslation.Description != '' &&
                        productTranslation.LanguageId == retailCommerceValidatorLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorProdRule017DynamicDescription", retailCommerceValidatorLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProduct(_validatorTest.ValidationId, retailCommerceValidatorAllProducts.ProductRefRecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule017"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNavigationCategoryProductNotInAnyAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Prod-Ru-018': Product is not categorized.
    /// Validates a navigation category product whether the product is not active in any assortments.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateNavigationCategoryProductNotInAnyAssortment(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelProducts retailCommerceValidatorAllProducts;
        EcoResProductCategory ecoResProductCategory;
        RetailCommerceValidator retailCommerceValidator;
        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrganization::findByOMInternalOrganization(retailCommerceValidator.OMOperatingUnitId);
        int resultsCounter = 0;

        while select Product, CategoryHierarchy from  ecoResProductCategory
            exists join retailInternalOrganization
                where retailInternalOrganization.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
            exists join retailCommerceValidator
                where retailCommerceValidator.OMOperatingUnitId == retailInternalOrganization.InternalOrganization
                    && retailCommerceValidator.ValidationId == _validatorTest.ValidationId
            notexists join  retailCommerceValidatorAllProducts
                where retailCommerceValidatorAllProducts.ProductRefRecId == ecoResProductCategory.Product
                    && retailCommerceValidatorAllProducts.ValidationId == _validatorTest.ValidationId
        {

            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextProductCategoryHierarchy(
                                                               _validatorTest.ValidationId,
                                                               ecoResProductCategory.Product,
                                                               ecoResProductCategory.CategoryHierarchy);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorProdRule018Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorProdRule018"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>