<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormulaCoByCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for calculating the Co- or By-products from a BOM
/// calculation.
/// </summary>
abstract class PmfFormulaCoByCalc
{
    Common parentRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomCalcTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BOMCalcTable</c> record for the current buffer.
    /// </summary>
    /// <returns>
    /// The <c>BOMCalcTable</c> record for the current buffer.
    /// </returns>
    public abstract BOMCalcTable bomCalcTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formulaCoByDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Co- or By-products involved in a complete BOM
    /// calculation.
    /// </summary>
    /// <param name="_priceCalcId">
    /// ID of a BOM calculation.
    /// </param>
    /// <returns>
    /// A temporary table buffer containing the Co- or By-products involved in
    /// a complete BOM calculation. The first record in the temporary table
    /// buffer is the formula or planning item that the BOM calculation is
    /// based on. Subsequent records are the actual Co- or By-product records
    /// associated with the formula or planning item.
    /// </returns>
    public PmfFormulaCoBy formulaCoByDataSet(PriceCalcId _priceCalcId)
    {
        BOMCalcTable    bomCalcTable = BOMCalcTable::find(_priceCalcId);
        BOMVersion      bomVersion;
        PmfFormulaCoBy  formulaCoBy;
        PmfFormulaCoBy  tmpFormulaCoBy;

        tmpFormulaCoBy.setTmp();

        if (bomCalcTable)
        {
            // Get the BOMVersion that was originally used for the calculation
            bomVersion = BOMVersion::findRecId(bomCalcTable.PmfBomVersion);
            if (bomVersion)
            {
                tmpFormulaCoBy.initValue();
                tmpFormulaCoBy.ItemId               = this.parentItemId();
                tmpFormulaCoBy.ProductType          = InventTable::find(tmpFormulaCoBy.ItemId).PmfProductType;
                tmpFormulaCoBy.InventDimId          = this.parentInventDimId();
                tmpFormulaCoBy.CoByQty              = this.parentPriceQty();
                tmpFormulaCoBy.CoByQtySerie         = 1;

                if (tmpFormulaCoBy.ProductType == PmfProductType::Co_Product)
                {
                    // Only show the calculation for the current co-product
                    // This will only happen when no main item calculation could be found

                    select formulaCoBy
                        where formulaCoBy.BOMVersionRefRecId    == bomVersion.RecId
                           && formulaCoBy.ItemId                == tmpFormulaCoBy.ItemId;

                    tmpFormulaCoBy.CostAllocation       = formulaCoBy.CostAllocation;
                    tmpFormulaCoBy.CostAllocationPct    = formulaCoBy.CostAllocationPct;
                    tmpFormulaCoBy.doInsert();
                }
                else
                {
                    if (bomVersion.PmfTotalCostAllocation)
                    {
                        tmpFormulaCoBy.CostAllocation       = PmfCostAllocationMethod::TCA;
                    }
                    else
                    {
                        tmpFormulaCoBy.CostAllocation       = PmfCostAllocationMethod::None;
                    }

                    select sum(CostAllocationPct)
                        from formulaCoBy
                        where formulaCoBy.BOMVersionRefRecId == BOMVersion.RecId;

                    tmpFormulaCoBy.CostAllocationPct    = 100 - formulaCoBy.CostAllocationPct;
                    tmpFormulaCoBy.doInsert();

                    while select formulaCoBy
                            where formulaCoBy.BOMVersionRefRecId == bomVersion.RecId
                    {
                        tmpFormulaCoBy.data(formulaCoBy);

                        // Adjust the quantity to scale by the calculation size
                        tmpFormulaCoBy.CoByQty = tmpFormulaCoBy.CoByQty * this.parentPriceQty();

                        tmpFormulaCoBy.doInsert();
                    }
                }
            }
        }

        return tmpFormulaCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an object derived from this class.
    /// </summary>
    /// <param name="_parentRecord">
    /// The record that the complete BOM calculation is based on.
    /// </param>
    protected void new(Common _parentRecord)
    {
        parentRecord = _parentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtain the ID of the inventory dimensions from the parent record that
    /// the complete BOM calculation is based on.
    /// </summary>
    /// <returns>
    /// The ID of the inventory dimensions from the parent record that the
    /// complete BOM calculation is based on.
    /// </returns>
    protected abstract InventDimId parentInventDimId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtain the ID of the item from the parent record that the complete BOM
    /// calculation is based on.
    /// </summary>
    /// <returns>
    /// The ID of the item from the parent record that the complete BOM
    /// calculation is based on.
    /// </returns>
    protected abstract ItemId parentItemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentPriceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtain the quantity from the parent record that the complete BOM
    /// calculation is based on.
    /// </summary>
    /// <returns>
    /// The quantity from the parent record that the complete BOM calculation
    /// is based on.
    /// </returns>
    protected abstract PriceQty parentPriceQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an object derived from this class based on a record that
    /// was used to perform a complete BOM calculation.
    /// </summary>
    /// <param name="_parentRecord">
    /// The record that was used to perform a complete BOM calculation on.
    /// </param>
    /// <returns>
    /// An object derived from this class based on the supplied record that
    /// was used to perform a complete BOM calculation on. If the supplied
    /// record is an unsupported record, then null is returned.
    /// </returns>
    public static PmfFormulaCoByCalc construct(Common _parentRecord)
    {
        PmfFormulaCoByCalc  formulaCoByCalc;
        BOMCalcTable        bomCalcTable;
        BOMCalcTable        bomCalcTableMain;

        switch (_parentRecord.TableId)
        {
            case tableNum(BOMCalcTable):
                formulaCoByCalc = PmfFormulaCoByCalc_BOMCalcTable::construct(_parentRecord);
                break;
            case tableNum(InventItemPrice):
                formulaCoByCalc = PmfFormulaCoByCalc_InventItemPrice::construct(_parentRecord);
                break;
            case tableNum(InventItemPriceSim):
                formulaCoByCalc = PmfFormulaCoByCalc_InventItemPriceSim::construct(_parentRecord);
                break;
        }

        if (formulaCoByCalc)
        {
            bomCalcTable = formulaCoByCalc.bomCalcTable();
            if (bomCalcTable.PmfParentCalcId)
            {
                // Get the calculation for the main item instead
                bomCalcTableMain = BOMCalcTable::find(bomCalcTable.PmfParentCalcId);
                if (bomCalcTableMain)
                {
                    formulaCoByCalc = PmfFormulaCoByCalc::construct(bomCalcTableMain);
                }
            }
        }

        return formulaCoByCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>