<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC1a_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC1a_Table extends RAssetReport_OC1_Base
{
    protected DialogField assetStandardField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionPrice</Name>
				<Source><![CDATA[
    protected Amount acquisitionPrice()
    {
        return  this.acquisition(acquisitionFirstTrans.RecId ? acquisitionFirstTrans.TransDate : this.transDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateRecord</Name>
				<Source><![CDATA[
    public boolean canCreateRecord()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return enum2str(this.reportType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns main account and analysis dimension value for asset
    /// </summary>
    /// <returns>
    /// Main account num and analysis dimension for asset
    /// </returns>
    protected MainAccountNum controlMainAccountNum()
    {
        DimensionDisplayValue ret;

        if (this.isAcquisition())
        {
            ret = this.mainAccountNum(documentDate, RAssetTransType::Acquisition);
        }
        else if (this.isDepreciation())
        {
            RassetDisposalValue rassetDisposalValue = new RassetDisposalValue(rAssetStandards.postingProfile(documentDate),
                RAssetDisposalType::Sold,
                RAssetPostValue::BalanceAcq,
                rAssetStandards.AssetId,
                RAssetPostType::All);

            rassetDisposalValue.postThis(0, rAssetStandards.AssetStandardId);
            ret = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(rassetDisposalValue.offsetLedgerDimension());
        }

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            ret = strFmt("@SYS26868", ret, this.getAnalysisCodeFromDefaultDimension(rAssetStandards.DefaultDimension));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFromBusinessAccounting</Name>
				<Source><![CDATA[
    protected TransDate dateFromBusinessAccounting()
    {
        return rAssetStandards.DisposalDate ? rAssetStandards.DisposalDate : this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToBusinessAccounting</Name>
				<Source><![CDATA[
    public TransDate dateToBusinessAccounting()
    {
        return acquisitionFirstTrans.RecId ? acquisitionFirstTrans.TransDate : this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();

        if (isProforma)
        {
            assetStandardField = dlg.addField(extendedTypeStr(RAssetStandardId));
            assetStandardField.value(RAssetParameters::find().StandardIdDefault);
        }

        this.documentDate(rAssetTable.AcquisitionDate);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrintIfSingle</Name>
				<Source><![CDATA[
    public boolean doPrintIfSingle()
    {
        return !this.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        if (isProforma)
        {
            rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, assetStandardField.value());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcquisition</Name>
				<Source><![CDATA[
    protected boolean isAcquisition()
    {
        return rAssetTable.Status == RAssetStatus::NoAcquisition || rAssetTable.Status == RAssetStatus::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciation</Name>
				<Source><![CDATA[
    protected boolean isDepreciation()
    {
        return rAssetTable.Status != RAssetStatus::NoAcquisition && rAssetTable.Status != RAssetStatus::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    public boolean isProforma()
    {
        boolean isAcquisitionOnly =  this.reportType() == RAssetReportType::OC1_Trans
            || this.reportType() == RAssetReportType::OC1a_Trans;

        boolean isDepreciationOnly = this.reportType() == RAssetReportType::OC1_DeedOfConveyance
            || this.reportType() == RAssetReportType::OC1a_DeedOfConveyance;

        // documents can exist in cancelled transacions
        if (RAssetDocument::existByAssetAndType(rAssetTable.AccountNum, this.reportType()))
            return false;

        if (isAcquisitionOnly)
        {
            return conFind([RAssetStatus::NoAcquisition, RAssetStatus::PurchInvoice], rAssetTable.Status) ? true : false;
        }

        if (isDepreciationOnly)
        {
            return !(select firstonly RecId from rAssetTrans
                where rAssetTrans.AccountNum == rAssetTable.AccountNum
                    && (rAssetTrans.AssetTransType  == RAssetTransType::DisposalSale
                        || rAssetTrans.AssetTransType  == RAssetTransType::CompanyIssue)
                    && rAssetTrans.StornoRecId == 0).RecId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args  _args)
    {
        if (! _args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        if ((_args.dataset() != tableNum(RAssetTable)))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetTable = _args.record();

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLocationName</Name>
				<Source><![CDATA[
    protected RAssetLocationName newLocationName()
    {
        return  RAssetLocation::find(this.location(this.transDate())).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oldLocationName</Name>
				<Source><![CDATA[
    protected RAssetLocationName oldLocationName()
    {
        return  RAssetLocation::find(this.location(this.transDate())).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateDocuments</Name>
				<Source><![CDATA[
    public boolean skipUpdateDocuments(boolean _value = skipUpdateDocuments)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return documentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>