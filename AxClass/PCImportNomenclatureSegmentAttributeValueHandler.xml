<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportNomenclatureSegmentAttributeValueHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for importing attribute value nomenclature segment definitions.
/// </summary>
class PCImportNomenclatureSegmentAttributeValueHandler extends PCImportModelNodeHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    protected void importData()
    {
        PCImportConfigurationNomenclatureHandler parent = this.parent();

        EcoResNomenclatureSegmentAttributeValue nomenclatureSegmentAttributeValue;

        PCName attributeName = this.getFieldByName(fieldStr(EcoResNomenclatureSegmentAttributeValue, Attribute));

        if (PCImportExportNomenclatureSegmentAttributeNameFlight::instance().isEnabled())
        {
            nomenclatureSegmentAttributeValue.AttributeSegmentType = any2Enum(this.getIntFieldByName(fieldStr(EcoResNomenclatureSegmentAttributeValue, AttributeSegmentType)));
        }

        nomenclatureSegmentAttributeValue.Nomenclature  = parent.getNomenclatureId();
        nomenclatureSegmentAttributeValue.Attribute     = this.getAttributeId(attributeName, parent.parmComponentId());
        nomenclatureSegmentAttributeValue.SegmentNumber = this.getIntFieldByName(fieldStr(EcoResNomenclatureSegmentAttributeValue, SegmentNumber));
        nomenclatureSegmentAttributeValue.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a component attribute by its name and component ID.
    /// </summary>
    /// <param name = "_attributeName">An attribute name.</param>
    /// <param name = "_componentId">A component ID.</param>
    /// <returns></returns>
    protected RefRecId getAttributeId(Name _attributeName, PCClassRecId _componentId)
    {
        EcoResAttribute         attribute;
        EcoResCategoryAttribute categoryAttribute;

        select firstonly RecId from attribute
            where attribute.Name == _attributeName
            exists join categoryAttribute
            where categoryAttribute.Attribute == attribute.RecId
            &&    categoryAttribute.Category  == _componentId;

        PCContractNotNull::assertRecord(attribute, funcName());

        return attribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeType</Name>
				<Source><![CDATA[
    public str nodeType()
    {
        return tableStr(EcoResNomenclatureSegmentAttributeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportNomenclatureSegmentAttributeValueHandler construct()
    {
        return new PCImportNomenclatureSegmentAttributeValueHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>