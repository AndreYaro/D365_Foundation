<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettleSummaryAccountRelief</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendSettleSummaryAccountRelief</c> class exposes functionality to enable summary account relief when
/// more than one customer or vendor transaction exists in the same voucher.
/// </summary>
/// <remarks>
/// It is not possible for settlement to find the specific accounting for a customer or vendor transaction when that entry was created
/// without source documents and the voucher contains more than one customer or vendor in the voucher.
///
/// Refactor:
/// This class will eventually be removed from the product.  We will add features to the product until we can remove one voucher
/// from the product.  Then, settlement will then always be able to find the correct accounting and this class will be removed.
///
/// </remarks>
public class CustVendSettleSummaryAccountRelief
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>voucherContainsMultipleSummaryEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transactions voucher has multiple summary account postings.
    /// </summary>
    /// <param name = "_custVendTrans">The <c>CustVendTrans</c> to check.</param>
    /// <param name = "_ledgerPostingTypeBalance">The summary account ledger posting type.</param>
    /// <returns>
    /// true if the voucher contains multiple summary account postings; otherwise, false.
    /// </returns>
    public static boolean voucherContainsMultipleSummaryEntries(CustVendTrans _custVendTrans, LedgerPostingType _ledgerPostingTypeBalance)
    {
        boolean hasSourceDocumentData;
        boolean hasMultipleSummaryEntries;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        hasSourceDocumentData = CustVendTransDistributionController::custVendTransHasSourceDocumentData(_custVendTrans);

        if (hasSourceDocumentData)
        {
            return false;
        }

        select count(RecId) from generalJournalAccountEntry
            where generalJournalAccountEntry.PostingType == _ledgerPostingTypeBalance
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == _custVendTrans.TransDate
                    && subledgerVoucherGeneralJournalEntry.Voucher == _custVendTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == _custVendTrans.dataAreaId
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.PostingLayer == 0;

        hasMultipleSummaryEntries = (generalJournalAccountEntry.RecId > 1);

        return hasMultipleSummaryEntries;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>