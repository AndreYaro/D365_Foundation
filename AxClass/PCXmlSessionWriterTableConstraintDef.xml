<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterTableConstraintDef</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterTableConstraintDef</c> class writes session XML for the table constraint
/// definition records.
/// </summary>
public class PcXmlSessionWriterTableConstraintDef
{
    private PCInstrumentationLogger logger;

    #PC
    #PCTableConstraint

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = PCInstrumentationLogger::createLogger(classStr(PCXmlSessionWriterTableConstraintDef));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDatabaseRelationConstraintDef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the session XML for a system table constraint definition.
    /// </summary>
    /// <param name="_dbTableConstraintDef">
    ///    The system table constraint definition record for which to generate the XML.
    /// </param>
    /// <param name="_xmlWriter">
    /// The XML writer to use to store the XML representation of this record.
    /// </param>
    /// <param name="_tableConstraint">
    /// The record ID of a table constraint record.
    /// </param>
    public void writeDatabaseRelationConstraintDef(
                PCDatabaseRelationConstraintDefinition      _dbTableConstraintDef,
                PCXmlWriter                                 _xmlWriter,
                PCTableConstraint                           _tableConstraint)
    {
        PCXmlSessionWriterDatabaseRelation xmlSessionWriterDatabaseRelation = PCXmlSessionWriterDatabaseRelation::construct();

        xmlSessionWriterDatabaseRelation.write(_xmlWriter, _tableConstraint, _dbTableConstraintDef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeGlobalTableConstraintDef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the session XML for a global table constraint definition.
    /// </summary>
    /// <param name="_globalTableConstraintDef">
    ///    The global table constraint definition record for which to generate the XML.
    /// </param>
    /// <param name="_xmlWriter">
    /// The XML writer to use to store the XML representation of this record.
    /// </param>
    /// <param name="_tableConstraint">
    /// The record ID of a table constraint record.
    /// </param>
    public void writeGlobalTableConstraintDef(PCGlobalTableConstraintDefinition    _globalTableConstraintDef,
                                              PCXmlWriter                          _xmlWriter,
                                              PCTableConstraint                    _tableConstraint)
    {
        PCTableConstraintGlobalColumnDef            column;
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        PCTableConstraintRow                        row;

        PCXmlSessionWriterTableConstraintRow xmlSessionWriterTableConstraintRow = PCXmlSessionWriterTableConstraintRow::construct();

        using (var activityContext = logger.preRuntime().generateUserDefinedTableConstraintXml())
        {
            // write columns
            // the order by is used to ensure that the same order is used for the cell values and the column definitions
            while select constraintRelation
            where constraintRelation.TableConstraint == _tableConstraint.RecId
            join RecId from column order by RecId asc
            where   column.RecId                        == constraintRelation.TableConstraintColumnDefinition &&
                    column.TableConstraintDefinition    == _globalTableConstraintDef.RecId
            {
                _xmlWriter.writeStartElement(#Column);
                PCAttributePathFacade::toXML(_xmlWriter, constraintRelation);
                _xmlWriter.writeEndElement();
            }

            while select row
            where row.TableConstraintDefinition == _globalTableConstraintDef.RecId
            {
                xmlSessionWriterTableConstraintRow.write(row, _xmlWriter);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the session XML for a table constraint definition.
    /// </summary>
    /// <param name="_tableConstraintDef">
    /// The table constraint definition record for which to generate the XML.
    /// </param>
    /// <param name="_xmlWriter">
    /// The XML writer to use to store the XML representation of this record.
    /// </param>
    /// <param name="_tableConstraint">
    /// The record ID of a table constraint record.
    /// </param>
    public void write(PCTableConstraintDefinition    _tableConstraintDef,
                      PCXmlWriter                      _xmlWriter,
                      PCTableConstraint                _tableConstraint)
    {
        this.validateTableConstraintDefinitionColumnMapping(_tableConstraintDef, _tableConstraint);

        if (_tableConstraintDef is PCGlobalTableConstraintDefinition)
        {
            this.writeGlobalTableConstraintDef(_tableConstraintDef as PCGlobalTableConstraintDefinition, _xmlWriter, _tableConstraint);
        }
        else if (_tableConstraintDef is PCDatabaseRelationConstraintDefinition)
        {
            this.writeDatabaseRelationConstraintDef(_tableConstraintDef as PCDatabaseRelationConstraintDefinition, _xmlWriter, _tableConstraint);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTableConstraintDefinitionColumnMapping</Name>
				<Source><![CDATA[
    private void validateTableConstraintDefinitionColumnMapping(PCTableConstraintDefinition _tableConstraintDef, PCTableConstraint _tableConstraint)
    {
        PCTableConstraintColumnDefinition columnDefinition;
        select count(RecId) from columnDefinition
            where columnDefinition.TableConstraintDefinition == _tableConstraintDef.RecId;

        PCTableConstraintColumnCategoryAttribute columnAttributeRelation;
        select count(RecId) from columnAttributeRelation
            where columnAttributeRelation.TableConstraint == _tableConstraint.RecId;

        if (columnDefinition.RecId != columnAttributeRelation.RecId)
        {
            throw error(strFmt("@SCM:PC_TableConstraintDefColumnsNotMapped_Message", _tableConstraintDef.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterTableConstraintDef construct()
    {
        return new PCXmlSessionWriterTableConstraintDef();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>