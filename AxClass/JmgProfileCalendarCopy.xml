<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileCalendarCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProfileCalendarCopy</c> class is used to copy profile calendar entries.
/// </summary>
public class JmgProfileCalendarCopy extends RunBase
{
    NoYesId                 doOverwrite;
    FormDataSource          formDataSource;
    Object                  workPlannerForm;

    DialogField             df_RelationType;
    DialogField             df_RelationNumber;
    DialogField             df_DateFrom;
    DialogField             df_DateTo;
    DialogField             df_ProfileId;
    DialogField             dialogOverwrite;

    JmgProfileCalendarType  copyRelationType;
    HcmPersonnelNumberId    copyRelationNumber;
    JmgDate                 copyDateFrom;
    JmgDate                 copyDateTo;
    JmgProfileId            copyProfileId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class can be run as a batch job.
    /// </summary>
    /// <returns>
    ///    true if the class can be run as a batch job; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that specifies whether the dialog must be created on the client; optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        JmgProfileCalendar         jmgProfileCalendar;
        FormBuildStringControl     formControl;
        FormBuildDateControl       dateControlFrom;
        FormBuildDateControl       dateControlTo;
        Dialog ret;

        ret = this.dialogInternal(dialog, forceOnClient);

        df_RelationType     = ret.addField(enumstr(JmgProfileCalendarType));
        df_RelationNumber   = ret.addField(extendedtypestr(JmgRelationNumber));
        df_DateFrom         = ret.addField(extendedtypestr(JmgDate),"@SYS5209");
        df_DateTo           = ret.addField(extendedtypestr(JmgDate),"@SYS14656");
        df_ProfileId        = ret.addField(extendedtypestr(JmgProfileId));

        formControl = df_ProfileId.control();
        formControl.mandatory(true);

        dateControlFrom = df_DateFrom.control();
        dateControlFrom.mandatory(true);
        dateControlTo = df_DateTo.control();
        dateControlTo.mandatory(true);

        dialogOverwrite = ret.addField(extendedtypestr(NoYesId),"@SYS3074");

        if (formDataSource)
        {
            jmgProfileCalendar = formDataSource.cursor();
            df_RelationType.value(jmgProfileCalendar.ProfileCalendarType);
            df_RelationNumber.value(jmgProfileCalendar.RelationNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the values that are entered in the dialog by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise; false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;
        FormStringControl   formControl;
        ret = super();

        doOverwrite         = dialogOverwrite.value();
        copyRelationType    = df_RelationType.value();
        copyRelationNumber  = df_RelationNumber.value();
        copyDateFrom        = df_DateFrom.value();
        copyDateTo          = df_DateTo.value();
        copyProfileId       = df_ProfileId.value();

        if (ret)
        {
            switch (copyRelationType)
            {
                case JmgProfileCalendarType::ProfileGroup :
                    if (copyRelationNumber && (!(select jmgProfileGroup where jmgProfileGroup.ProfileGroupId == copyRelationNumber).RecId))
                        ret = checkFailed(strfmt("@SYS14690",copyRelationNumber));
                    break;
                case JmgProfileCalendarType::Employee :
                    if (copyRelationNumber && (!(JmgEmployee::find(HcmWorker::findByPersonnelNumber(copyRelationNumber).RecId).RecId)))
                        ret = checkFailed(strfmt("@SYS8607",copyRelationNumber));
                    break;
                case JmgProfileCalendarType::All :
                    copyRelationNumber = '';
                    break;
            }
        }

        // Validate from and to dates.
        if (ret && !copyDateFrom)
        {
            ret = checkFailed("@SYS39559");
        }
        if (ret && !copyDateTo)
        {
            ret = checkFailed("@SYS71278");
        }

        if (ret && copyDateFrom > copyDateTo)
        {
            ret = checkFailed("@SYS16982");
        }
        // Validate profile id:
        if (ret && !JmgProfileTable::find(copyProfileId))
        {
            formControl = df_ProfileId.control();
            ret = checkFailed(strfmt("@SYS97692", copyProfileId, formControl.labelText(), SysDictTable::newTableId(tablenum(JmgProfileTable)).label()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        JmgProfileCalendar  jmgProfileCalendar;
        JmgWorkPlannerForm  jmgWorkPlannerForm;

        if ((! doOverwrite) &&
            ((select firstonly jmgProfileCalendar
                     where  jmgProfileCalendar.RelationNumber       == copyRelationNumber   &&
                            jmgProfileCalendar.ProfileCalendarType  == copyRelationType     &&
                            jmgProfileCalendar.Date                 >= copyDateFrom         &&
                            jmgProfileCalendar.Date                 <= copyDateTo).RecId))
        {
            throw error("@SYS38961");
        }

        if (workPlannerForm)
        {
            jmgWorkPlannerForm  = workPlannerForm.getWorkPlannerForm(copyRelationType);
        }
        JmgProfileCalendarCopy::copyProfileCalender(copyRelationType, copyRelationNumber, copyDateFrom, copyDateTo, copyProfileId, jmgWorkPlannerForm);

        if (formDataSource)
        {
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the arguments to use when running the class.
    /// </summary>
    /// <param name="args">
    /// The arguments to use when running the class.
    /// </param>
    void setParameters(Args args)
    {
        FormRun caller;
        formDataSource  = args.caller().datasource(tablestr(JmgProfileCalendar));

        caller          = args.caller();
        if (caller && caller.name() == formstr(JmgWorkPlanner))
        {
            workPlannerForm = caller;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProfileCalender</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates profile calendar entries based on the specified values.
    /// </summary>
    /// <param name="_copyRelationType">
    ///    The relation type to create profile calendar entries.
    /// </param>
    /// <param name="_copyRelationNumber">
    ///    The relation number to use for creating profile calendar entries.
    /// </param>
    /// <param name="_copyDateFrom">
    ///    The date for which to start creating profile calendar entries.
    /// </param>
    /// <param name="_copyDateTo">
    ///    The date for which to stop creating profile calendar entries.
    /// </param>
    /// <param name="_copyProfileId">
    ///    The profile ID to set on the profile calendar entries.
    /// </param>
    /// <param name="_workPlannerForm">
    ///    A reference to the <c>JmgWorkPlannerForm</c> class, from where the copy function is called.
    /// </param>
    static void copyProfileCalender( JmgProfileCalendarType _copyRelationType,
                                            JmgRelationNumber      _copyRelationNumber,
                                            JmgDate                _copyDateFrom,
                                            JmgDate                _copyDateTo,
                                            JmgProfileId           _copyProfileId,
                                            JmgWorkPlannerForm     _workPlannerForm)
    {
        JmgProfileCalendar  jmgProfileCalendar;
        JmgDate             wrkDate;

        ttsbegin;
        if (!_workPlannerForm)
        {
            delete_from jmgProfileCalendar
                where   jmgProfileCalendar.RelationNumber       == _copyRelationNumber   &&
                        jmgProfileCalendar.ProfileCalendarType  == _copyRelationType     &&
                        jmgProfileCalendar.Date                 >= _copyDateFrom         &&
                        jmgProfileCalendar.Date                 <= _copyDateTo;
        }

        for (wrkDate = _copyDateFrom; wrkDate <= _copyDateTo; wrkDate++)
        {
            if (_workPlannerForm)
            {
                // Only copy if showing on work planner form:
                if (_workPlannerForm.isLabelShowing(_copyRelationNumber))
                {
                    _workPlannerForm.setProfileAt(_workPlannerForm.dateToColumn(wrkDate), _workPlannerForm.labelToRow(_copyRelationNumber), _copyProfileId);
                }
            }
            else
            {
                jmgProfileCalendar.ProfileId            = _copyProfileId;
                jmgProfileCalendar.RelationNumber       = _copyRelationNumber;
                jmgProfileCalendar.ProfileCalendarType  = _copyRelationType;
                jmgProfileCalendar.Date                 = wrkDate;
                jmgProfileCalendar.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS38960";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        Object                  obj;
        JmgProfileCalendarCopy  jmgProfileCalendarCopy;
        FormRun                 formRun;

        obj = args.caller();
        if (obj &&
            SysDictClass::isEqualOrSuperclass(obj.handle(),classnum(FormRun)))
        {
            formRun = obj;
            if (formRun.name() == formstr(JmgProfileCalendar) ||
                formRun.name() == formstr(JmgWorkPlanner))
            {
                jmgProfileCalendarCopy = new JmgProfileCalendarCopy();
                jmgProfileCalendarCopy.setParameters(args);

                if (jmgProfileCalendarCopy.prompt())
                {
                    jmgProfileCalendarCopy.runOperation();
                }
                else
                {
                    if (formRun.name() == formstr(JmgWorkPlanner))
                    {
                        obj.resetUnsavedChanges();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>