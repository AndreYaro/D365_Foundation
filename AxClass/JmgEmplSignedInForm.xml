<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgEmplSignedInForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgEmplSignedInForm</c> class is the supportive class for the shop floor control attendance.
/// </summary>
/// <remarks>
///    This class is only used with the attendance form in the shop floor control. The main use is to
///    fetch attendance information in a <c>JmgTmpEmplSignedIn</c> temporary table.
/// </remarks>
class JmgEmplSignedInForm
{
    #DEFINE.ClockedOut(0)
    #DEFINE.ClockedIn(1)
    #DEFINE.AbsenceRegistered(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>absenceRegisteredValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the integer value, which corresponds to registered absence.
    /// </summary>
    /// <returns>
    ///    An integer value that corresponds with the registered absence value.
    /// </returns>
    /// <remarks>
    ///    If planned absence was detected on the specified day, the value returned by this method will be
    ///    used in the <c>SignedIn</c> field in the <c>JmgTmpEmplSignedIn</c> table.
    /// </remarks>
    public JmgLabelSignedIn absenceRegisteredValue()
    {
        return #AbsenceRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockedInValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the integer value that corresponds with the clocked in value.
    /// </summary>
    /// <returns>
    ///    An integer value that corresponds with the clocked in value.
    /// </returns>
    /// <remarks>
    ///    If the employee is clocked in on the specified day, the value returned by this method will be used
    ///    in the <c>SignedIn</c> field in the <c>JmgTmpEmplSignedIn</c> table.
    /// </remarks>
    public JmgLabelSignedIn clockedInValue()
    {
        return #ClockedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockedOutValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the integer value that corresponds to the clocked out value.
    /// </summary>
    /// <returns>
    ///    An integer value that corresponds with the clocked out value.
    /// </returns>
    /// <remarks>
    ///    If the employee is clocked out on the specified day, the value returned by this method will be used
    ///    in the <c>SignedIn</c> field in the <c>JmgTmpEmplSignedIn</c> table.
    /// </remarks>
    public JmgLabelSignedIn clockedOutValue()
    {
        return #ClockedOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsenceSums</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of absent workers at the specified date and calculation group.
    /// </summary>
    /// <param name="_date">
    ///    The date to calculate absence numbers for.
    /// </param>
    /// <param name="_calculateGroupId">
    ///    The calculation group to calculate absence numbers for.
    /// </param>
    /// <returns>
    ///    A map that has three numbers: the number of present workers, the number of absent workers, and the
    ///    number of workers that are not accounted for.
    /// </returns>
    public Map getAbsenceSums(JmgDate _date, JmgGroupCalcId _calculateGroupId = '')
    {
        JmgTmpEmplSignedIn  jmgTmpEmplSignedIn;
        int64               clockedIn;
        int64               notAccountedFor;
        int64               plannedAbsence;
        Map                 ret;
        jmgTmpEmplSignedIn = JmgEmplSignedInForm::getData(_calculateGroupId, _date);
        while select count(RecId), SignedIn
            from jmgTmpEmplSignedIn
            group by SignedIn
        {
            switch (jmgTmpEmplSignedIn.SignedIn)
            {
                case #ClockedOut:
                    notAccountedFor = jmgTmpEmplSignedIn.RecId;
                    break;
                case #ClockedIn:
                    clockedIn = jmgTmpEmplSignedIn.RecId;
                    break;
                case #AbsenceRegistered:
                    plannedAbsence = jmgTmpEmplSignedIn.RecId;
                    break;
            }
        }
        ret = new Map(Types::String, Types::Int64);
        ret.insert("@SYS39749", clockedIn);
        ret.insert("@SYS39748", plannedAbsence);
        ret.insert("@SYS118018", notAccountedFor);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve information about clocked in workers and their current activity.
    /// </summary>
    /// <param name="_date">
    /// The date to get data for.
    /// </param>
    /// <param name="_calculateGroupId">
    /// The calculation group to get data for.
    /// </param>
    /// <returns>
    /// A set of <c>JmgTmpEmplSignedIn</c> records, which contains information
    /// about clocked in workers and their current activity.
    /// </returns>
    public Set getRecordSet(JmgDate _date, JmgGroupCalcId _calculateGroupId = '')
    {
        Set ret;
        JmgTmpEmplSignedIn tmpEmplSignedIn;
        tmpEmplSignedIn = JmgEmplSignedInForm::getData(_calculateGroupId, _date, true);
        ret = new Set(Types::Record);
        while select tmpEmplSignedIn
            where tmpEmplSignedIn.SignedIn == #ClockedIn
        {
            ret.add(tmpEmplSignedIn);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a record that contains the worker attendance information to the <c>JmgTmpEmplSignedIn</c>
    ///    temporary buffer that is specified.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    The worker to collect attendance information about.
    /// </param>
    /// <param name="_date">
    ///    The date for which attendance information is collected.
    /// </param>
    /// <param name="_jmgTmpEmplSignedIn">
    ///    The temporary buffer to add attendance information to.
    /// </param>
    /// <param name="_includeJobs">
    ///    A Boolean value that specifies whether information about jobs is to be added to the
    ///    <c>JmgTmpEmplSignedIn</c> temporary buffer.
    /// </param>
    static void addWorker(JmgEmployee _jmgEmployee, JmgDate _date, JmgTmpEmplSignedIn _jmgTmpEmplSignedIn, boolean _includeJobs = false)
    {
        JmgTermReg              clockIn;
        JmgTermReg              clockOut;
        JmgAbsenceCalendar      jmgAbsenceCalendar;
        JmgJobBundle            jmgJobBundle;
        JmgTermJob              job;
        MapIterator             activeJobs;

        JmgProfileSeconds       formatter;

        JmgDateTime             dateStartTime;
        JmgDateTime             dateEndTime;
        JmgTime                 tmpTime;
        JmgDate                 tmpDate;
        formatter = new JmgProfileSeconds();

        select firstonly clockIn
            order by RegDateTime desc
            where clockIn.Worker    == _jmgEmployee.Worker   &&
                  clockIn.RegType   == JmgTermRegType::ClockIn;

        select firstonly clockOut
            order by RegDateTime desc
            where clockOut.Worker   == _jmgEmployee.Worker   &&
                  clockOut.RegType  == JmgTermRegType::ClockOut;

        _jmgTmpEmplSignedIn.Worker                  = _jmgEmployee.Worker;
        _jmgTmpEmplSignedIn.PersonnelNumber         = HcmWorker::find(_jmgEmployee.Worker).PersonnelNumber;
        _jmgTmpEmplSignedIn.EmplName                = _jmgEmployee.name();
        _jmgTmpEmplSignedIn.GroupCalcId             = _jmgEmployee.calcGroup(_date);
        _jmgTmpEmplSignedIn.AbsenceDescription      = '';
        if (clockIn && (!clockOut || clockOut.RegDateTime <= clockIn.RegDateTime))
        {
            _jmgTmpEmplSignedIn.SignInDate          = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(clockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            _jmgTmpEmplSignedIn.SignInTime          = JmgProfileSeconds::formattedSeconds(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(clockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone())),JmgSecondPresentationEnum::Clocktime);
            _jmgTmpEmplSignedIn.SignOutDate         = dateNull();
            _jmgTmpEmplSignedIn.SignOutTime         = '';
            _jmgTmpEmplSignedIn.SignedIn            = #ClockedIn;
            if (_includeJobs)
            {
                jmgJobBundle    = new JmgJobBundle(_jmgEmployee.Worker);
                activeJobs      = jmgJobBundle.getActiveJobsIterator();
                while (activeJobs.more())
                {
                    job = activeJobs.value();
                    _jmgTmpEmplSignedIn.AbsenceDescription += job.jobDescription() + '; ';
                    activeJobs.next();
                }
            }
            tmpDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(clockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            tmpTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(clockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            _jmgTmpEmplSignedIn.ProfileId           = _jmgEmployee.profileId(tmpDate,tmpTime);//_jmgEmployee.profileId(DateTimeUtil::date(clockIn.RegDateTime), DateTimeUtil::time(clockIn.RegDateTime));
        }
        else
        {
            if (clockIn && clockOut)
            {
                _jmgTmpEmplSignedIn.SignInDate          = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(clockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone()));
                _jmgTmpEmplSignedIn.SignInTime          = JmgProfileSeconds::formattedSeconds(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(clockIn.RegDateTime,DateTimeUtil::getUserPreferredTimeZone())),JmgSecondPresentationEnum::Clocktime);
                _jmgTmpEmplSignedIn.SignOutDate         = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(clockOut.RegDateTime,DateTimeUtil::getUserPreferredTimeZone()));
                _jmgTmpEmplSignedIn.SignOutTime         = JmgProfileSeconds::formattedSeconds(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(clockOut.RegDateTime,DateTimeUtil::getUserPreferredTimeZone())),JmgSecondPresentationEnum::Clocktime);
            }
            else
            {
                _jmgTmpEmplSignedIn.SignInDate          = dateNull();
                _jmgTmpEmplSignedIn.SignInTime          = '';
                _jmgTmpEmplSignedIn.SignOutDate         = dateNull();
                _jmgTmpEmplSignedIn.SignOutTime         = '';
            }

            if (clockOut && clockOut.JobIdAbs)
            {
                _jmgTmpEmplSignedIn.AbsenceDescription  = JmgTermJob::construct(clockOut.JobIdAbs).jobDescription();
                _jmgTmpEmplSignedIn.SignedIn        = #AbsenceRegistered;
            }
            else
            {
                dateStartTime   = DateTimeUtil::newDateTime(_date, 0, DateTimeUtil::getUserPreferredTimeZone());
                dateEndTime     = DateTimeUtil::newDateTime(_date, 24 * 60 * 60 -1, DateTimeUtil::getUserPreferredTimeZone());

                select firstonly jmgAbsenceCalendar
                    where jmgAbsenceCalendar.Worker         == _jmgEmployee.Worker  &&
                          ((jmgAbsenceCalendar.FromDateTime >= dateStartTime        &&
                            jmgAbsenceCalendar.FromDateTime <= dateEndTime)         ||
                           (jmgAbsenceCalendar.ToDateTime   >= dateStartTime        &&
                            jmgAbsenceCalendar.ToDateTime   <= dateEndTime)         ||
                           (jmgAbsenceCalendar.FromDateTime <  dateStartTime        &&
                            jmgAbsenceCalendar.ToDateTime   >  dateEndTime))        &&
                          jmgAbsenceCalendar.Disabled   == NoYes::No;
                if (jmgAbsenceCalendar)
                {
                    _jmgTmpEmplSignedIn.AbsenceDescription = strfmt("@SYS39864", date2StrUsr(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgAbsenceCalendar.FromDateTime, DateTimeUtil::getUserPreferredTimeZone())), DateFlags::FormatAll),
                                                                    time2str(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(jmgAbsenceCalendar.FromDateTime,DateTimeUtil::getUserPreferredTimeZone())), 1, 1),
                                                                    JmgTermJob::construct(jmgAbsenceCalendar.JobId).jobDescription());
                    _jmgTmpEmplSignedIn.SignedIn    = #AbsenceRegistered;
                }
                else
                {
                    _jmgTmpEmplSignedIn.SignedIn    = #ClockedOut;
                }
            }
            _jmgTmpEmplSignedIn.ProfileId           = _jmgEmployee.profileId(_date);
        }
        _jmgTmpEmplSignedIn.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves attendance data for a calculation group and date.
    /// </summary>
    /// <param name="_calcGroupId">
    ///    The calculation group to calculate attendance information for.
    /// </param>
    /// <param name="_date">
    ///    The date to calculate information for.
    /// </param>
    /// <param name="_includeJobs">
    ///    A Boolean value that specifies whether information about current jobs must be added.
    /// </param>
    /// <param name="_filterWorker">
    ///    A Boolean value that specifies whether data should be filtered to only one employee.
    /// </param>
    /// <returns>
    ///    A <c>JmgTmpEmplSignedIn</c> temporary buffer with information about workers and their current
    ///    activities.
    /// </returns>
    public static JmgTmpEmplSignedIn getData(JmgGroupCalcId _calcGroupId, JmgDate _date, boolean _includeJobs = false, JmgWorkerRecID _filterWorker = 0)
    {
        JmgTmpEmplSignedIn      ret;
        JmgEmployee             jmgEmployee;

        while select jmgEmployee
            where jmgEmployee.Active        == NoYes::Yes           &&
                  (!jmgEmployee.ActiveFrom                          ||
                   jmgEmployee.ActiveFrom   <= _date)
        {
            if (!_calcGroupId                                       ||
                jmgEmployee.calcGroup(_date)== _calcGroupId)
            {
                if (_filterWorker == 0 || _filterWorker == jmgEmployee.Worker)
                {
                    JmgEmplSignedInForm::addWorker(jmgEmployee, _date, ret, _includeJobs);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves attendance data from a specified query.
    /// </summary>
    /// <param name="_q">
    ///    The query to retrieve attendance information from.
    /// </param>
    /// <param name="_date">
    ///    The date to calculate information for.
    /// </param>
    /// <param name="_includeJobs">
    ///    A Boolean value that specifies whether information about current jobs must be added.
    /// </param>
    /// <returns>
    ///    A <c>JmgTmpEmplSignedIn</c> temporary buffer with information about workers and their current
    ///    activities.
    /// </returns>
    public static JmgTmpEmplSignedIn getDataFromQuery(Query _q, JmgDate _date, boolean _includeJobs = false)
    {
        JmgTmpEmplSignedIn  ret;
        JmgEmployee         jmgEmployee;
        QueryRun            qr;
        qr = new QueryRun(_q);
        while (qr.next())
        {
            jmgEmployee = qr.get(tablenum(JmgEmployee));

            JmgEmplSignedInForm::addWorker(jmgEmployee, _date, ret, _includeJobs);
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>