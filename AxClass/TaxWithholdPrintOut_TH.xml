<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPrintOut_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the report data for tax withiholding report.
/// </summary>
public class TaxWithholdPrintOut_TH
{
    TaxWithholdReportLayout_TH  taxWithholdReportLayout_TH;
    TransDate                   transDate;
    TmpTaxWithholdReportData_TH tmpTaxWithholdReportData_TH;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of withholding tax report data for given parameter.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// A <c>TaxWithholdTrans</c> table buffer.
    /// </param>
    private void createNewLine(TaxWithholdTrans _taxWithholdTrans)
    {
        VendTable                   vendTable;
        ContactPerson               contactPerson;
        TaxWithholdRevenueTable_TH  taxWithholdRevenueTable_TH;

        if (_taxWithholdTrans.VendAccount)
        {
            vendTable                   = VendTable::find(_taxWithholdTrans.VendAccount);
            contactPerson               = ContactPerson::find(vendTable.ContactPersonId);
            taxWithholdRevenueTable_TH  = TaxWithholdRevenueTable_TH::find(
                TaxWithholdItemGroupHeading_TH::find(_taxWithholdTrans.TaxWithholdItemGroupHeading_TH).TaxWithholdRevenueTable_TH);

            tmpTaxWithholdReportData_TH.clear();
            tmpTaxWithholdReportData_TH.LineNum         = 0;
            tmpTaxWithholdReportData_TH.vatNum          = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _taxWithholdTrans.TransDate);
            tmpTaxWithholdReportData_TH.Name            = vendTable.name();
            tmpTaxWithholdReportData_TH.ContactPerson   = strfmt("@SYS76498", DirPerson::find(contactPerson.Party).PersonalTitle,
                                                                        contactPerson.personName());
            tmpTaxWithholdReportData_TH.PaymDate        = _taxWithholdTrans.TransDate;
            tmpTaxWithholdReportData_TH.TotalBaseAmount = _taxWithholdTrans.TaxWithholdBaseAmount;
            tmpTaxWithholdReportData_TH.whtAmount       = _taxWithholdTrans.TaxWithholdAmount;
            tmpTaxWithholdReportData_TH.whtPercentage   = TaxWithholdData::find(_taxWithholdTrans.TaxWithholdCode, _taxWithholdTrans.TransDate, _taxWithholdTrans.TaxWithholdBaseAmount).TaxWithholdValue;
            tmpTaxWithholdReportData_TH.Address         = vendTable.postalAddress().Address;
            tmpTaxWithholdReportData_TH.RevenueType     = taxWithholdRevenueTable_TH.Description;
            tmpTaxWithholdReportData_TH.nricNumber      = "";   // Manually filled in by the user
            tmpTaxWithholdReportData_TH.Conditions      = "";   // Manually filled in by the user
            tmpTaxWithholdReportData_TH.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>TaxWithholdPrintOut_TH</c>
    /// </summary>
    /// <param name="_taxWithholdReportLayout_TH">
    /// The withholding tax report layout.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    void new(TaxWithholdReportLayout_TH _taxWithholdReportLayout_TH,
             TransDate                  _transDate)
    {
        taxWithholdReportLayout_TH = _taxWithholdReportLayout_TH;
        transDate                  = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new report data for given parameter.
    /// </summary>
    /// <returns>
    /// Instance of <c>TmpTaxWithholdReportData_TH</c>
    /// </returns>
    private TmpTaxWithholdReportData_TH reportData()
    {
        TaxWithholdReportSetup_TH   taxWithholdReportSetup_TH;
        TaxWithholdTrans            taxWithholdTrans;

        while select TaxWithholdVendorType_TH from taxWithholdReportSetup_TH
            where taxWithholdReportSetup_TH.TaxWithholdReportLayout_TH == taxWithholdReportLayout_TH
            join taxWithholdTrans
                where taxWithholdReportSetup_TH.TaxWithholdVendorType_TH        == taxWithholdTrans.VendorType_TH
                    && taxWithholdReportSetup_TH.TaxWithholdItemGroupHeading_TH == taxWithholdTrans.TaxWithholdItemGroupHeading_TH
        {
            this.createNewLine(taxWithholdTrans);
        }

        this.updateLineNum();

        return tmpTaxWithholdReportData_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line number for the selected record.
    /// </summary>
    private void updateLineNum()
    {
        Line lineNum;

        while select forupdate LineNum from tmpTaxWithholdReportData_TH order by Name, PaymDate
        {
            lineNum ++;
            tmpTaxWithholdReportData_TH.LineNum = lineNum;
            tmpTaxWithholdReportData_TH.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new report data for given parameter.
    /// </summary>
    /// <param name="_taxWithholdReportLayout_TH">
    /// The withholding tax report layout.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// Instance of <c>TmpTaxWithholdReportData_TH</c>
    /// </returns>
    public static TmpTaxWithholdReportData_TH createReportData(TaxWithholdReportLayout_TH _taxWithholdReportLayout_TH,
                                                                      TransDate                  _transDate)
    {
        TaxWithholdPrintOut_TH  taxWithholdPrintOut_TH;

        taxWithholdPrintOut_TH = new TaxWithholdPrintOut_TH(_taxWithholdReportLayout_TH, _transDate);
        return taxWithholdPrintOut_TH.reportData();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>