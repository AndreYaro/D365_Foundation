<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaStageEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmaStageEngine extends RunBase
{
    SMAServiceOrderId       serviceOrderId;
    SMAStageId              newStageId;
    SMAReasonId             reasonCodeId;
    SMAReasonName           reasonName;
    SMAStageChange          stageChange;
    boolean                 enterReason;
    SMAStageTable           stageTable;
    SMAServiceOrderTable    serviceOrderTable;
    smmActivityPhaseId      phaseId;
    DialogRunbase           dialog;
    DialogField             dialogReasonCodeId;
    DialogField             dialogDescription;
    DialogField             dialogDateTimeText;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
            reasonCodeId,
            reasonName
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeTimeLog</Name>
				<Source><![CDATA[
    protected boolean closeTimeLog()
    {
        Args                args;
        MenuFunction        menuFunction;
        boolean             ret = true;

        if (SMAStageTable::find(newStageId).StageCloseTimeLog)
        {
            if (serviceOrderTable.ServiceLevelAgreementStatus == SMALogStatus::Open)
            {
                menuFunction = new MenuFunction(menuitemactionstr(SMAServiceLevelAgreementLog_Close), MenuItemType::Action);
                args = new Args();
                args.record(serviceOrderTable);

                menuFunction.run(args);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = this.dialogInternal(dialog);

        if (enterReason)
        {
            // Enter stage reason code
            dialog.caption("@SYS96639");

            // Identification of stage reason code.
            dialogReasonCodeId  = dialog.addFieldValue(extendedtypestr(SMAReasonId), '', "@SYS90714", "@SYS82585");
            dialogDescription   = dialog.addFieldValue(extendedtypestr(SMAReasonName), '');
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (enterReason)
        {
            reasonCodeId    = dialogReasonCodeId.value();
            reasonName      = dialogDescription.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giveStageReason</Name>
				<Source><![CDATA[
    protected boolean giveStageReason()
    {
        SMAServiceOrderReason   serviceOrderReason;
        boolean                 ret = true;

        if (SMAStageTable::find(newStageId).StageGiveReason)
        {
            enterReason = true;

            ret = this.prompt();

            if (ret)
            {
                // Insert new reason for service order
                ttsbegin;

                serviceOrderReason.clear();

                serviceOrderReason.ReasonType       = SMAReasonType::StageChange;
                serviceOrderReason.ReasonId         = reasonCodeId;
                serviceOrderReason.ServiceOrderId   = serviceOrderTable.ServiceOrderId;
                serviceOrderReason.Description      = reasonName;
                serviceOrderReason.StageId          = newStageId;

                serviceOrderReason.insert();

                ttscommit;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNextStage</Name>
				<Source><![CDATA[
    public SMAStageId moveToNextStage()
    {
        int         countNext;
        SMAStageId  stageId;

        countNext = SMAStageTable::nextStageCount(serviceOrderTable.StageId);

        if (countNext == 0)
        {
            // Next stage does not exist.
            throw error("@SYS90066");
        }

        if (countNext > 1)
        {
            // User selects one
            stageId = this.selectNextStage();
        }
        else
        {
            stageId = SMAStageTable::nextStage(serviceOrderTable.StageId);
        }

        return stageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToPrevStage</Name>
				<Source><![CDATA[
    public SMAStageId moveToPrevStage()
    {
        SMAStageId  stageId;

        stageId = SMAStageTable::previousStage(serviceOrderTable.StageId);

        if (!stageId)
        {
            // Previous stage does not exist.
            throw error("@SYS90067");
        }

        return stageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SMAStageChange _stageChange, SMAServiceOrderTable _buffer = null)
    {
        super();

        stageChange         = _stageChange;
        serviceOrderTable   = _buffer;
        enterReason         = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = connull();

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!newStageId)
        {
            switch (stageChange)
            {
                case SMAStageChange::NextStage:
                    newStageId = this.moveToNextStage();
                    break;

                case SMAStageChange::PrevStage:
                    newStageId = this.moveToPrevStage();
                    break;

                default:
                    break;
            }
        }

        if (newStageId)
        {
            // Give reason if required
            this.giveStageReason();

            // Close time log if required for the new stage
            this.closeTimeLog();

            phaseId = SMAStageTable::find(newStageId).StageActivityPhaseId;

            if (stageChange == SMAStageChange::NextStage)
            {
                // Check if service order has InProcess progress status
                if (serviceOrderTable.Progress == SMAServiceOrderProgress::InProcess)
                {
                    // Check if activities should be created for this stage
                    if (SMAParameters::find().ServiceLineActivityStage == newStageId)
                    {
                        // Create the activities
                        SMAServiceOrderTable::createActivitiesForServiceOrderLines(serviceOrderTable.ServiceOrderId, phaseId);
                    }
                }
            }

             // Update phase for activites in the new stage
            this.updateActivitiesWithStagePhase();

            // Update stage Id
            this.updateServiceOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectNextStage</Name>
				<Source><![CDATA[
    protected SMAStageId selectNextStage()
    {
        Args        args;
        FormRun     formRun;
        SMAStageId  stageId;

        args = new Args(formstr(SMAStageSelect));
        args.caller(this);
        args.parm(serviceOrderTable.StageId);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOK())
        {
            // Get selected stage from form
            stageId = formRun.stageId();
        }

        return stageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewStageId</Name>
				<Source><![CDATA[
    public void setNewStageId(SMAStageId _newStageId)
    {
        newStageId = _newStageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        int         version     = RunBase::getVersion(_packedClass);
        container   packedQuery = connull();

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivitiesWithStagePhase</Name>
				<Source><![CDATA[
    private void updateActivitiesWithStagePhase()
    {
        smmActivities           activities;
        SMAServiceOrderTable    serviceOrder;
        SMAServiceOrderLine     serviceLines;

        if (phaseId && (phaseId != SMAStageTable::find(serviceOrderTable.StageId).StageActivityPhaseId))
        {
            ttsbegin;

            // Change phase on activities related on the service order header
            update_recordset activities setting PhaseId = phaseId
                exists join serviceOrder
                where activities.ActivityNumber == serviceOrder.ActivityNumber && serviceOrder.ServiceOrderId == serviceOrderTable.ServiceOrderId;

            // Change phase on activities related on the service order lines
            update_recordset activities setting PhaseId = phaseId
                exists join serviceLines
                where activities.ActivityNumber == serviceLines.ActivityId && serviceLines.ServiceOrderId == serviceOrderTable.ServiceOrderId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceOrder</Name>
				<Source><![CDATA[
    protected void updateServiceOrder()
    {
        SMAServiceOrderTable    serviceOrder;

        ttsbegin;

        serviceOrder = SMAServiceOrderTable::find(serviceOrderTable.ServiceOrderId, true);

        serviceOrder.StageId = newStageId;

        serviceOrder.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMAStageEngine construct(SMAStageChange _stageChange, Common _buffer = null)
    {
        SMAStageEngine          stageEngine = null;
        SMAServiceOrderTable    serviceOrderTable;

        switch (_buffer.TableId)
        {
            case tablenum(SMAServiceOrderLine):
                break;

            case tablenum(SMAServiceOrderTable):
                serviceOrderTable = _buffer;
                stageEngine       = new SMAStageEngine(_stageChange, serviceOrderTable);
                break;

            default:
                // Class %1 must be called with caller.
                throw error(strfmt("@SYS53926", classStr(SMAStageEngine)));
        }

        return stageEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SMAStageEngine      stageEngine;
        SMAStageChange      stageChange;

        if (args)
        {
            if (args.parmEnumType() == enumnum(SMAStageChange))
            {
                stageChange =  args.parmEnum();
            }

            if (args.record() && stageChange)
            {
                stageEngine = SMAStageEngine::construct(stageChange, args.record());
            }

            if (stageEngine)
            {
                stageEngine.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>