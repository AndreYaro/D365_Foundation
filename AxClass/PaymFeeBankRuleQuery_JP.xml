<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymFeeBankRuleQuery_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles creation of query based on given set of payment fee bank rule.
/// </summary>
class PaymFeeBankRuleQuery_JP
{
    Map queryRangeMap;
    RefTableId queryTableId;
    // buffer containing the record in queryTableId whose value will be used in the criteria
    Common companyBankValues;

    #BankReconciliationMatchRuleOperator
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a new query based on rule and company group and third party group.
    /// </summary>
    /// <param name="_paymFeeBankRuleRecId">
    /// Rec Id of the payment fee bank rule.
    /// </param>
    /// <returns>
    /// Query built
    /// </returns>
    public Query buildQuery(RefRecId _paymFeeBankRuleRecId)
    {
        PaymFeeBankRuleLine_JP paymFeeBankRuleLine_JP;

        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        Set                                 ruleLineSet;
        Set                                 remainingRuleLineSet;
        SetEnumerator                       ruleLineSetEnumerator;

        queryRangeMap = new Map(Types::Int64, Types::Class);

        ruleLineSet = new Set(Types::Record);
        query = new Query();

        // Fill the set with all match rule lines
        while select paymFeeBankRuleLine_JP
            where paymFeeBankRuleLine_JP.PaymFeeBankRule_JP == _paymFeeBankRuleRecId
        {
            ruleLineSet.add(paymFeeBankRuleLine_JP);
        }

        qbds = query.addDataSource(queryTableId);

        while (ruleLineSet.elements() > 0)
        {
            remainingRuleLineSet = new Set(Types::Record);

            ruleLineSetEnumerator = ruleLineSet.getEnumerator();
            while (ruleLineSetEnumerator.moveNext())
            {
                paymFeeBankRuleLine_JP = ruleLineSetEnumerator.current();

                qbr = qbds.findRange(paymFeeBankRuleLine_JP.CustVendFieldId);
                if (!qbr)
                {
                    //Add range
                    qbr = qbds.addRange(paymFeeBankRuleLine_JP.CustVendFieldId);

                    //Save into Map
                    queryRangeMap.insert(paymFeeBankRuleLine_JP.RecId, qbr);
                }
                else
                {
                    remainingRuleLineSet.add(paymFeeBankRuleLine_JP);
                }
            }

            ruleLineSet = remainingRuleLineSet;
            if (ruleLineSet.elements() > 0)
            {
                qbds = qbds.addDataSource(queryTableId);
                qbds.relations(false);
                qbds.joinMode(JoinMode::ExistsJoin);

                qbds.addLink(
                    fieldName2id(queryTableId, identifierStr(RecId)),
                    fieldName2id(queryTableId, identifierStr(RecId)));
            }
        }

        this.setQueryRanges(_paymFeeBankRuleRecId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompareValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comparing value.
    /// </summary>
    /// <param name="_paymFeeBankRuleLine_JP">
    /// Given <c>PaymFeeBankRuleLine_JP</c> buffer.
    /// </param>
    /// <returns>
    /// The comparing value.
    /// </returns>
    protected anytype getCompareValue(PaymFeeBankRuleLine_JP _paymFeeBankRuleLine_JP)
    {
        anytype compareValue;

        if (_paymFeeBankRuleLine_JP.CompanyFieldId != 0)
        {
            compareValue = companyBankValues.(_paymFeeBankRuleLine_JP.CompanyFieldId);
        }
        else
        {
            compareValue = _paymFeeBankRuleLine_JP.Value;
        }

        return compareValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValueString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the range value based on operator and compared value
    /// </summary>
    /// <param name="_operator">
    /// The operator.
    /// </param>
    /// <param name="_compareValue">
    /// The compared value.
    /// </param>
    /// <returns>
    /// The range value.
    /// </returns>
    protected PaymFeeBankRuleValue_JP getRangeValueString(
        PaymFeeBankRuleOperatorType_JP _operator,
        anyType _compareValue)
    {
        PaymFeeBankRuleValue_JP value;

        switch (_operator)
        {
            case BankReconciliationMatchOperatorType::Equals:
                value = SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::NotEqual:
                value = SysQuery::valueNot(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::GreaterThan:
                value = #GreaterThan + SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::GreaterThanOrEquals:
                value = SysQuery::value(_compareValue) + #Range;
                break;

            case BankReconciliationMatchOperatorType::LessThan:
                value = #LessThan + SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::LessThanOrEquals:
                value = #Range + SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::Contains:
                value = SysQuery::valueLike(SysQuery::value(_compareValue));
                break;

            case BankReconciliationMatchOperatorType::BeginWith:
                value = SysQuery::valueLikeAfter(SysQuery::value(_compareValue));
                break;

            case BankReconciliationMatchOperatorType::EndWith:
                value = #Asterisk + SysQuery::value(_compareValue);
                break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyBankValues</Name>
				<Source><![CDATA[
        protected Common parmCompanyBankValues(Common _companyBankValues = companyBankValues)
    {
        companyBankValues = _companyBankValues;
        return companyBankValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryTableId</Name>
				<Source><![CDATA[
        protected RefTableId parmQueryTableId(RefTableId _queryTableId = queryTableId)
    {
        queryTableId = _queryTableId;
        return queryTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the query ranges value according to current comparing statement
    /// </summary>
    /// <param name="_paymFeeBankRuleRecId">
    /// Rec Id of the payment fee bank rule.
    /// </param>
    protected void setQueryRanges(RefRecId _paymFeeBankRuleRecId)
    {
        PaymFeeBankRuleLine_JP    paymFeeBankRuleLine_JP;
        QueryBuildRange       range;
        PaymFeeBankRuleValue_JP   rangeValueString;

        while select paymFeeBankRuleLine_JP
            where paymFeeBankRuleLine_JP.PaymFeeBankRule_JP == _paymFeeBankRuleRecId
        {
            if (queryRangeMap.exists(paymFeeBankRuleLine_JP.RecId))
            {
                range = queryRangeMap.lookup(paymFeeBankRuleLine_JP.RecId);
                rangeValueString = this.getRangeValueString(
                    paymFeeBankRuleLine_JP.Relation,
                    this.getCompareValue(paymFeeBankRuleLine_JP));
                range.value(rangeValueString);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance in valid state.
    /// </summary>
    /// <param name="_queryTableId">
    /// the table which the bank rule is based on.
    /// </param>
    /// <param name="_companyBankValues">
    /// buffer containing the record in queryTableId whose value will be used in the criteria
    /// </param>
    /// <returns>
    /// A new instance in valid state
    /// </returns>
    public static PaymFeeBankRuleQuery_JP construct(RefTableId _queryTableId, Common _companyBankValues)
    {
        PaymFeeBankRuleQuery_JP paymFeeBankRuleQuery_JP;

        paymFeeBankRuleQuery_JP = new PaymFeeBankRuleQuery_JP();
        paymFeeBankRuleQuery_JP.parmQueryTableId(_queryTableId);
        paymFeeBankRuleQuery_JP.parmCompanyBankValues(_companyBankValues);
        return paymFeeBankRuleQuery_JP;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>