<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_CivilContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalculate_CivilContract extends RPayCalculate
{
    RPayCivilContractAct    rPayCivilContractAct;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_ActAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_ActAmount()
    {
        return rPayCivilContractAct.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    public void calcCommon(RPaySequence _paySequence  = 0,
                           NoYes        _errorMessage = NoYes::No)
    {
        RPayCivilContract       rPayCivilContractLocal;
        RPayCivilContractType   rPayCvivlContractTypeLocal;
        ;

        rPayCivilContractAct       = sourceTable;
        rPayCivilContractLocal     = rPayCivilContractAct.civilContract();
        rPayCvivlContractTypeLocal = rPayCivilContractLocal.rPayCivilContractType();

        if (needCheckModuleCalculate)
        {
            if (! this.canModuleCalculate())
                throw info("@RUP387");
        }

        this.checkPostingProfiles(true);

        if (emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage, true))
        {
            this.initTransDate(emplTable.EmployeeId);

            if (rPayCvivlContractTypeLocal.rPaySequence)
            {
                paySeqTable = RPaySeqTable::find(rPayCvivlContractTypeLocal.rPaySequence);
                this.calcSequence();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId   _emplId,
                         RPaySequence _paySequence = 0)
    {
        QueryBuildDataSource    qbds;
        int                     dsIdx;
        int                     dsCount = queryRun.query().dataSourceCount();
        RPayCivilContractAct    rPayCivilContractActLocal;
        RPayCivilContract       rPayCivilContractLocal;
        ;

        setPrefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        this.payPeriod(RPayParameters::payPeriod(_emplId));
        payPeriodVirtual = this.payPeriod();

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod
                   && payTrans.PayModuleCode == payModuleTable.PayModuleCode
                   && payTrans.Emplid        == _emplId
                   && payTrans.SourceTableId
                   && payTrans.SourceRecId
                   && payTrans.PayPeriod     == payTrans.CorrectedPeriod;
            ttscommit;
        }

        for (dsIdx = 1; dsIdx <= dsCount; dsIdx ++)
        {
           queryRun.query().dataSourceNo(dsIdx).clearRanges();
        }

        qbds = queryRun.query().dataSourceTable(tableNum(RPayCivilContractAct));
        qbds.addRange(fieldNum(RPayCivilContractAct, PayPeriod)).value(queryValue(payPeriod));
        qbds.addRange(fieldNum(RPayCivilContractAct, CorrectedPeriod)).value(queryValue(payPeriod));
        qbds.addRange(fieldNum(RPayCivilContractAct, Include)).value(queryValue(NoYes::Yes));

        qbds = queryRun.query().dataSourceTable(tableNum(RPayCivilContract));
        qbds.addRange(fieldNum(RPayCivilContract, EmplId)).value(queryValue(_emplId));

        while (queryRun.next())
        {
            rPayCivilContractActLocal = queryRun.get(tableNum(RPayCivilContractAct));
            rPayCivilContractLocal    = queryRun.get(tableNum(RPayCivilContract));

            this.setSourceTable(rPayCivilContractActLocal);
            this.calcCommon(_paySequence, NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence = 0)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbrPeriod,
                             qbrInclude,
                             qbrContract;

        int                  dsIdx;
        int                  dsCount = queryRun.query().dataSourceCount();

        qbds = queryRun.query().dataSourceTable(tableNum(RPayCivilContractAct));

        if (queryRun.interactive())
        {
             qbrPeriod = qbds.rangeField(fieldNum(RPayCivilContractAct, PayPeriod));
             qbrPeriod.status(RangeStatus::Locked);

             qbrInclude = qbds.rangeField(fieldNum(RPayCivilContractAct, Include));
             qbrInclude.status(RangeStatus::Locked);

             qbrContract = queryRun.query().dataSourceTable(tableNum(RPayCivilContract)).addRange(fieldNum(RPayCivilContract, ContractId));
        }
        else
        {
            for (dsIdx = 1; dsIdx <= dsCount ; dsIdx ++)
            {
                queryRun.query().dataSourceNo(dsIdx).clearRanges();
            }

            qbrPeriod = qbds.addRange(fieldNum(RPayCivilContractAct, PayPeriod));
            qbrInclude = qbds.addRange(fieldNum(RPayCivilContractAct, Include));
        }

        qbrPeriod.value(queryValue(payPeriod));
        qbrInclude.value(queryValue(NoYes::Yes));

        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    protected void initPayTransValue()
    {
        RPayCounterCalcTable payCounterCalcTbl = payModuleControl.payCounterCalcTable();
        RPayCounterTable     payCounterTbl     = payCounterCalcTbl.payCounterTable();

        super();

        if (RPayTable::find(payCounterTbl.Output).PayChargeType == RPayChargeType::AddSum)
        {
            if (rPayCivilContractAct.LedgerDimension)
            {
                payTrans.LedgerDimension = rPayCivilContractAct.LedgerDimension;
                payTrans.AccountType     = rPayCivilContractAct.AccountType;
                if (payTrans.AccountType == LedgerJournalACType::Ledger)
                {
                    payTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(payTrans.LedgerDimension);
                }
            }
            payTrans.setLedgerDimension(payTrans.AccountType,
                                        payTrans.LedgerDimension,
                                        LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(rPayCivilContractAct.DefaultDimension, payTrans.DefaultDimension),
                                        rPayCivilContractAct.civilContract().EmplId);

            if (rPayCivilContractAct.DefaultDimension)
            {
                if (payTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    payTrans.setOffsetLedgerDimension(payTrans.OffsetAccountType,
                                                      LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(payTrans.OffsetLedgerDimension),
                                                      LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(rPayCivilContractAct.DefaultDimension, LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(payTrans.OffsetLedgerDimension)),
                                                      rPayCivilContractAct.civilContract().EmplId);
                }
                else
                {
                    LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(rPayCivilContractAct.DefaultDimension, payTrans.DefaultDimension);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        RPayCivilContract rPayCivilContractLocal;
        ;

        rPayCivilContractLocal = RPayCivilContract::find(_common.(fieldNum(RPayCivilContractAct, ContractId)));
        emplTable = RHRMEmplTable::find(rPayCivilContractLocal.EmplId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>