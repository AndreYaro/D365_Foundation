<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmDataPackingslip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PackingSlip)]
[DocumentStatusFactoryAttribute(DocumentStatus::DeliverySlip_BR)]
class SalesFormletterParmDataPackingslip
extends SalesFormletterParmData
implements FormLetterParmDataCorrectable, FormLetterParmDataPostable
{
    boolean setProforma;
    boolean proformaIsSet;

    ReturnPackingSlipId returnPackingSlipId;
    SalesType           salesType;
    IntercompanySalesAtCostPriceFormLetterHandler intercompanySalesAtCostPriceHandler;

    // <GEERU>
    OfficialsServ_RU        offSrv;
    // </GEERU>

    RecordSortedList        mcrRecordSortedParmLine;
    RecordInsertList        recordInsertParmSubLine;
    Set                     excludeContainerFilters;

    private container       selectedLoadsCon;
    private Set             processedSalesLine;

    int taxAdjustmentDocumentCount;

    //<GIN>
    RecordInsertList        salesParmLineINRecordList;
    //</GIN>

    WHSLoadLine                     previousLoadLineForProcessLoad;
    SalesLine                       previousSalesLineForProcessLoad;
    TradeLineRefId                  tableRefIdForProcessLoad;
    InventQty                       inventQtyLineForProcessLoad;
    PdsCWInventQty                  cwQtyLineForProcessLoad;
    InventTransId                   previousInventTransIdForProcessLoad;
    private WHSShipmentId           previousLoadLineShipmentId;
    private readonly boolean        populatePackingSlipIdFromShipmentFlight = WHSPopulatePackingSlipIdFromShipmentFlight::instance().isEnabled();
    private WHSLoadTable            currentLoadTable;
    private boolean                 updateTableRefId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowCreateParmLineIfFromLoad_BR</Name>
				<Source><![CDATA[
    protected boolean allowCreateParmLineIfFromLoad_BR(SalesLine _salesLine)
    {
        if (this.isPostFromLoad_BR())
        {
            if (_salesLine.SalesStatus == SalesStatus::Delivered)
            {
                return false;
            }

            return _salesLine.whsIsInLoadAndNotInvoiced_BR(this.parmWHSLoadId(), tableNum(CustPackingSlipJour));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLoadTable</Name>
				<Source><![CDATA[
    private WHSLoadTable parmCurrentLoadTable(WHSLoadTable _loadTable = currentLoadTable)
    {
        currentLoadTable = _loadTable;
        return currentLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreallocatedPackingSlipIdOnParmTable</Name>
				<Source><![CDATA[
    internal void initPreallocatedPackingSlipIdOnParmTable(SalesParmTable _salesParmTable)
    {
        if (populatePackingSlipIdFromShipmentFlight
            && WHSPackingSlipCreatePerShipmentContext::current() != null)
        {
            var shipmentId = WHSPackingSlipCreatePerShipmentContext::current().shipmentId;
            
            if (shipmentId)
            {
                WHSShipmentTable shipment = WHSShipmentTable::find(shipmentId);

                _salesParmTable.PreallocatedPackingSlipId = shipment.PreallocatedPackingSlipId;

                if (_salesParmTable.PreallocatedPackingSlipId)
                {
                    _salesParmTable.Transdate = shipment.PreallocatedPackingSlipDocumentDate;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromLineEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs when the records that are based on a list of order lines in the posting parameter tables are
    /// created.
    /// </summary>
    protected void chooseLinesFromLineEnd()
    {
        super();
        salesParmUpdate.SpecQty = SalesUpdate::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromLineGetSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current source line from the <c>ChooseLinesFromLine</c> query.
    /// </summary>
    /// <param name="_sourceLine">
    /// The source line record to base the get upon.
    /// </param>
    /// <returns>
    /// The source line record.
    /// </returns>
    protected Common chooseLinesFromLineGetSourceLine(Common _sourceLine)
    {
        SalesLine                   localSalesLine;
        VendPackingSlipTrans        vendPackingSlipTrans;
        PurchQty                    purchQty;
        PurchUnit                   purchUnit;
        InventQty                   inventQty;
        PdsCWInventQty              cwQty;

        void setQty()
        {
            localSalesLine.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(localSalesLine.ItemId,
																										   		   localSalesLine.InventDimId,
																												   purchQty,
																												   purchUnit,
																												   localSalesLine.SalesUnit,
																												   NoYes::Yes);

            localSalesLine.InventDeliverNow = inventQty;
            localSalesLine.PdsCWInventDeliverNow = cwQty;
        }

        switch (_sourceLine.TableId)
        {
            case tableNum(VendInvoiceTrans):
                VendInvoiceTrans vendInvoiceTrans = _sourceLine as VendInvoiceTrans;
                localSalesLine = vendInvoiceTrans.purchLine().salesLine();
                if (localSalesLine.SalesType == SalesType::ItemReq)
                {
                    PurchLine purchLine = vendInvoiceTrans.purchLine();

                    if (ProjSetPurchQtyWhenInvoiceIfPackingSlipPostedFlight::instance().isEnabled() && this.isPackingSlipPostedThroughItemRequirement(purchLine))
                    {
                        // If packing slip is already posted with partial quantity and when invoicing PO with partial quantity <c>InventQty</c> will not be zero.
                        if (vendInvoiceTrans.InventQty != purchLine.PurchQty)
                        {
                            CustPackingSlipTrans custPackingSlipTransLocal;

                            select sum(InventQty) from custPackingSlipTransLocal
                                where custPackingSlipTransLocal.InventRefTransId == purchLine.InventTransId;

                            VendInvoiceTrans localVendInvoiceTrans;

                            select sum(InventQty) from localVendInvoiceTrans
                                where localVendInvoiceTrans.InventTransId == purchLine.InventTransId;

                            if ((localVendInvoiceTrans.InventQty - custPackingSlipTransLocal.inventQty) >= 0)
                            {
                                purchQty = localVendInvoiceTrans.InventQty - custPackingSlipTransLocal.inventQty;
                            }
                            else
                            {
                                purchQty = 0;
                            }
                        }
                        else
                        {
                            // If packing slip is already posted with partial quantity and when invoicing PO with full quantity, need to consider <c>RemainInventPhysical</c> as quantity as <c>InventQty</c> will be zero.
                            purchQty = localSalesLine.RemainInventPhysical;
                        }
                    }
                    else
                    {
                        InventTrans inventTrans;
                        InventTransOrigin inventTransOrigin;
                        select firstonly vendInvoiceTrans
                        order by RecId desc
                            where vendInvoiceTrans.InventTransId == purchLine.InventTransId
                        exists join inventTransOrigin
                            where inventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId
                        exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                            && inventTrans.PackingSlipId == vendPackingSlipTrans.PackingSlipId
                            && inventTrans.InvoiceId == vendInvoiceTrans.InvoiceId;

                        purchQty = vendInvoiceTrans.QtyPhysical;
                    }
                }
                else
                {
                    purchQty = vendInvoiceTrans.QtyPhysical;
                }
                purchUnit = vendInvoiceTrans.PurchUnit;
                inventQty = vendInvoiceTrans.inventQtyPhysical();

                if (PdsGlobal::pdsIsCWItem(vendInvoiceTrans.ItemId))
                {
                    cwQty = vendInvoiceTrans.pdsCWInventQtyPhysical();
                }

                setQty();
                if (localSalesLine.SalesType == SalesType::ItemReq)
                {
                    localSalesLine.setInventDeliverNow();
                }
                break;

            case tableNum(VendPackingSlipTrans):
                vendPackingSlipTrans = _sourceLine as VendPackingSlipTrans;
                localSalesLine = vendPackingSlipTrans.purchLine().salesLine();

                if (localSalesLine.SalesType == SalesType::ItemReq)
                {
                    cwQty = vendPackingSlipTrans.pdsCWQty();
                    List lineList = List::create(this.parmLineList());
                    ListEnumerator listEnumerator = lineList.getEnumerator();

                    while (listEnumerator.moveNext())
                    {
                        Common line = listEnumerator.current();
                        if (line.TableId == tableNum(VendPackingSlipTrans))
                        {
                            VendPackingSlipTrans detailVendPackingSlipTrans = line as VendPackingSlipTrans;
                            SalesLine detailSalesLine = detailVendPackingSlipTrans.purchLine().salesLine();
                            if (detailSalesLine.InventTransId == localSalesLine.InventTransId)
                            {
                                purchQty += detailVendPackingSlipTrans.Qty;
                                purchUnit = detailVendPackingSlipTrans.PurchUnit;
                                inventQty += detailVendPackingSlipTrans.inventQty();
                                if (PdsGlobal::pdsIsCWItem(detailVendPackingSlipTrans.ItemId))
                                {
                                    cwQty += detailVendPackingSlipTrans.pdsCWQty();
                                }
                            }
                        }
                    }
                }
                else
                {
                    purchQty = vendPackingSlipTrans.Qty;
                    purchUnit = vendPackingSlipTrans.PurchUnit;
                    inventQty = vendPackingSlipTrans.inventQty();

                    if (PdsGlobal::pdsIsCWItem(vendPackingSlipTrans.ItemId))
                    {
                        cwQty = vendPackingSlipTrans.pdsCWQty();
                    }
                }
                setQty();
                if (localSalesLine.SalesType == SalesType::ItemReq)
                {
                    localSalesLine.setInventDeliverNow();
                }
                break;

            default :
                localSalesLine = super(_sourceLine);
                break;
        }

        return localSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineForWHSLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates packing slip update line based on entries in the load line.
    /// </summary>
    protected void createParmLineForWHSLoadLine()
    {
        using (WHSPackingSlipCreatePerShipmentContext context = new WHSPackingSlipCreatePerShipmentContext())
        {
            //if the current load is not packing slip updating per shipment, we just let the shipment id be blank will not be added to the parm table keys and will therefore have no effect
            context.shipmentId = previousLoadLineShipmentId;
       
            // A new tableRefId should be generated for each new parmTable to be created.
            tableRefIdForProcessLoad = this.createTradeLineRef(previousSalesLineForProcessLoad, tableRefIdForProcessLoad);

            updateTableRefId = false;

            if (this.createParmLineFromLoadLine(previousSalesLineForProcessLoad,
                                                inventQtyLineForProcessLoad,
                                                cwQtyLineForProcessLoad,
                                                tableRefIdForProcessLoad,
                                                previousLoadLineForProcessLoad))
            {
                // Create new ParmTable per parmTable Key.
                // The key is should be unique based on splitting rules.
                if (!parmTableMap.exists(this.parmTableMapKey(previousSalesLineForProcessLoad)))
                {
                    this.createParmTable(SalesTable::find(previousSalesLineForProcessLoad.SalesId), previousSalesLineForProcessLoad, tableRefIdForProcessLoad);
                }
            }
            inventQtyLineForProcessLoad   = 0;
            cwQtyLineForProcessLoad       = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// process the load line.
    /// </summary>
    /// <param name = "_loadLine">The load Line which need be processed.</param>
    protected void processLoadLine(WHSLoadLine _loadLine)
    {
        SalesLine localSalesLine = _loadLine.salesLine();
        WHSLoadLine localLoadLine = _loadLine;

        if (!localSalesLine.Blocked)
        {
            if (this.checkInvetTransId(_loadLine, previousInventTransIdForProcessLoad)
                || this.checkShipmentIdChanged(_loadLine, previousLoadLineShipmentId))
            {
                this.createParmLineForWHSLoadLine();
            }

            if (WHSPackingSlipSalesParmLineLoadUnionFlight::instance().isEnabled() &&
                localSalesLine.salesTable().isInterCompanyOrder())
            {

                if (processedSalesLine && processedSalesLine.in(localSalesLine.RecId))
                {
                    previousInventTransIdForProcessLoad = '';
                    previousLoadLineShipmentId = '';
                    return;
                }

                if (WHSPackingSlipSalesParmLineUseLoadLineFromSearchFlight::instance().isEnabled())
                {
                    WHSLoadLine localLoadLineFromSearch;
                    SysDaSearchObject searchObject = new SysDaSearchObject(this.buildLoadUnionQuery(localSalesLine.SalesId, localSalesLine.InventTransId, localLoadLineFromSearch));
                    SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                    searchStatement.findNext(searchObject);
                    int countOfRelatedLoadLines = localLoadLineFromSearch.RecId;

                    if (countOfRelatedLoadLines > 1)
                    {
                        if (!processedSalesLine)
                        {
                            processedSalesLine = new Set(Types::Int64);
                        }

                        processedSalesLine.add(localSalesLine.RecId);
                        localLoadLine = localLoadLineFromSearch;
                    }
                }
                else
                {
                    SysDaSearchObject searchObject = new SysDaSearchObject(this.buildLoadUnionQuery(localSalesLine.SalesId, localSalesLine.InventTransId, localLoadLine));
                    SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                    searchStatement.findNext(searchObject);
                    int countOfRelatedLoadLines = localLoadLine.RecId;

                    if (countOfRelatedLoadLines > 1)
                    {
                        if (!processedSalesLine)
                        {
                            processedSalesLine = new Set(Types::Int64);
                        }

                        processedSalesLine.add(localSalesLine.RecId);
                    }
                    else
                    {
                        localLoadLine = _loadLine;
                    }
                }
            }

            if (!PdsGlobal::pdsIsCWItem(localLoadLine.ItemId))
            {
                inventQtyLineForProcessLoad   += localLoadLine.InventQty;
            }
            else
            {
                inventQtyLineForProcessLoad  += localLoadLine.PickedWeight;
                cwQtyLineForProcessLoad      += localLoadLine.InventQty;
            }

            updateTableRefId = previousSalesLineForProcessLoad.SalesId != localSalesLine.SalesId;

            previousInventTransIdForProcessLoad  = localLoadLine.InventTransId;
            previousSalesLineForProcessLoad      = localSalesLine;

            if (this.parmCurrentLoadTable().PackingSlipCreationPolicy == WHSLoadPackingSlipCreationPolicy::Shipment)
            {
                previousLoadLineShipmentId  = localLoadLine.ShipmentId;
            }
        }
        previousLoadLineForProcessLoad.data(localLoadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadUnionQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildLoadUnionQuery(SalesId _salesId, InventTransId _inventTransId, WHSLoadLine _loadLine, boolean _groupByInventTrans = true, WHSLoadId _singleLoadId = '')
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_loadLine);

        if (_groupByInventTrans)
        {

            queryObject.firstOnlyHint = SysDaFirstOnlyHint::FirstOnly1;

            queryObject.projection()
                .addCount(literalStr(RecId))
                .addSum(fieldStr(WHSLoadLine, InventQty))
                .addSum(fieldStr(WHSLoadLine, PickedWeight))
                .add(fieldStr(WHSLoadLine, InventTransId))
                .add(fieldStr(WHSLoadLine, ItemId));


            queryObject.groupByClause(new SysDaGroupBys().add(fieldStr(WHSLoadLine, ItemId))
                                                        .add(fieldStr(WHSLoadLine, InventTransId)));
        }

        SysDaQueryExpression whsLoadLineQueryExpression = 
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransType)), new SysDaValueExpression(InventTransType::Sales))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, TransportRequest)), new SysDaValueExpression(NoYes::No)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, OrderNum)), new SysDaValueExpression(_salesId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransId)), new SysDaValueExpression(_inventTransId))));

        if (!_groupByInventTrans && _singleLoadId)
        {
            whsLoadLineQueryExpression = whsLoadLineQueryExpression.and(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                        new SysDaValueExpression(_singleLoadId)));
        }
        else
        {
            if (conLen(selectedLoadsCon) == 1)
            {
                whsLoadLineQueryExpression = whsLoadLineQueryExpression.and(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                        new SysDaValueExpression(conPeek(selectedLoadsCon, 1))));
            }
            else
            {
                const int SecondContainerValuePosition = 2;

                SysDaOrExpression orClause;

                for (int i = SecondContainerValuePosition; i <= conLen(selectedLoadsCon); i++)
                {
                    if (!orClause)
                    {
                        orClause = new SysDaOrExpression(
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                                new SysDaValueExpression(conPeek(selectedLoadsCon, 1))),
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                                new SysDaValueExpression(conPeek(selectedLoadsCon, i))));
                    }
                    else
                    {
                        orClause = orClause.or(
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                                new SysDaValueExpression(conPeek(selectedLoadsCon, i))));
                    }
                }

                whsLoadLineQueryExpression = whsLoadLineQueryExpression.and(orClause);
            }
        }

        queryObject.whereClause(whsLoadLineQueryExpression);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromWHSLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records for update based on a warehouse load.
    /// </summary>
    private void chooseLinesFromWHSLoadId()
    {
        WHSLoadLine loadLine;

        ttsbegin;
        this.updateSalesParmUpdateSpecQtyToDeliverNow();

        // Create a set of load Ids to run.
        Set loadIdsChecked = this.whsFindValidLoadIds();
        var se = loadIdsChecked.getEnumerator();

        if (WHSPackingSlipSalesParmLineLoadUnionFlight::instance().isEnabled())
        {
            while (se.moveNext())
            {
                WHSLoadId loadId = se.current();
                selectedLoadsCon += loadId;
            }
            se.reset();
        }

        TransDate inventoryClosingDate;

        WHSOutboundPackingslipTransDateCalculator transDateCalculator = WHSOutboundPackingslipTransDateCalculator::newCalculator();
        boolean foundLoadPackingSlipCreationPolicyShipment;
        boolean foundLoadPackingSlipCreationPolicyDefault;

        while (se.moveNext())
        {
            WHSLoadId loadId = se.current();     
      
            WHSLoadTable loadTable = WHSLoadTable::find(loadId);
            
            if (loadTable.PackingSlipCreationPolicy == WHSLoadPackingSlipCreationPolicy::Shipment)
            {
                foundLoadPackingSlipCreationPolicyShipment = true;
            }
            else if (loadTable.PackingSlipCreationPolicy == WHSLoadPackingSlipCreationPolicy::Default)
            {
                foundLoadPackingSlipCreationPolicyDefault = true;
            }
            
            if (foundLoadPackingSlipCreationPolicyShipment && foundLoadPackingSlipCreationPolicyDefault)
            {
                throw error(strFmt("@WAX:WHSLoadMixedPackingSlipCreationPoliciesBeingPackingSlipUpdated", loadTable.LoadId, loadTable.PackingSlipCreationPolicy));
            }

            this.parmCurrentLoadTable(loadTable);

            if (transDateCalculator)
            {
                this.parmTransDate(transDateCalculator.calculateOutboundSalesTransDateForLoad(loadId, this.salesParameters));
            }
            else
            {
                this.parmTransDate(this.calculateTransDate(loadId, inventoryClosingDate));
            }
            previousInventTransIdForProcessLoad = '';
            previousLoadLineShipmentId = '';

            SysDaSearchObject searchObject = new SysDaSearchObject(this.buildLoadLineQuery(loadId, loadLine));
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            while (searchStatement.nextRecord(searchObject))
            {
                this.processLoadLine(loadLine);
            }

            if (previousInventTransIdForProcessLoad)
            {
                this.createParmLineForWHSLoadLine();
            }
        }
        this.parmCurrentLoadTable(null);
        this.insertRecordLists();

        //if we post per shipment there is no need to re-arrange
        if (!foundLoadPackingSlipCreationPolicyShipment)
        {
            this.reArrange();
        }
        
        this.updateAllSalesShippingStat();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransDate</Name>
				<Source><![CDATA[
    private TransDate calculateTransDate(WHSLoadId _loadId, TransDate _inventoryClosingDate)
    {        
        utcdatetime loadTransDate = WHSLoadTable::find(_loadId).LoadShipConfirmUTCDateTime;

        // Packing slip can be printed during container close action, before load is ship confirmed
        if (!loadTransDate)
        {
            loadTransDate = DateTimeUtil::getSystemDateTime();
        }

        TransDate result;
       
        SalesDocumentTimezonePreference userTimezoneConvertion = salesParameters.InvoiceTimezonePreference;
        Timezone tz = userTimezoneConvertion == SalesDocumentTimezonePreference::User ? DateTimeUtil::getUserPreferredTimeZone() : DateTimeUtil::getCompanyTimeZone();
        result = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(loadTransDate, tz));

        if (_inventoryClosingDate
            && result <= _inventoryClosingDate)
        {          
            result = _inventoryClosingDate + 1;
        }
                
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvetTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if it has the previous inventTransId.
    /// </summary>
    /// <param name = "_loadLine">The load line.</param>
    /// <param name = "_previousInventTransId">The previous inventTransId.</param>
    /// <returns>True if it has previous inventTransId, otherwise not.</returns>
    protected boolean checkInvetTransId(WHSLoadLine _loadLine, InventTransId _previousInventTransId)
    {
        return (_previousInventTransId &&  _previousInventTransId != _loadLine.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipmentIdChanged</Name>
				<Source><![CDATA[
    private boolean checkShipmentIdChanged(WHSLoadLine _loadLine, WHSShipmentId _previousLoadLineShipmentId)
    {
        return (populatePackingSlipIdFromShipmentFlight
                    && _previousLoadLineShipmentId
                    && _previousLoadLineShipmentId != _loadLine.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to select load line records.
    /// </summary>
    /// <param name = "_whsLoadId">
    /// A <c>WHSLoadId</c> record.
    /// </param>
    /// <param name = "_loadLine">
    /// The <c>WHSLoadLine</c> table.
    /// </param>
    /// <returns>
    /// The query with the selected load line records.
    /// </returns>
    protected SysDaQueryObject buildLoadLineQuery(WHSLoadId _whsLoadId, WHSLoadLine _loadLine)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_loadLine);

        queryObject.OrderByClause().add(fieldStr(WHSLoadLine, OrderNum));
        queryObject.OrderByClause().add(fieldStr(WHSLoadLine, InventTransId));

        SysDaQueryExpression whsLoadLineQueryExpression =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)), new SysDaValueExpression(_whsLoadId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransType)), new SysDaValueExpression(InventTransType::Sales))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, TransportRequest)), new SysDaValueExpression(NoYes::No))));

        queryObject.whereClause(whsLoadLineQueryExpression);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromWMSArrival</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records for update based on entries in the arrival journal.
    /// </summary>
    private void  chooseLinesFromWMSArrival()
    {
        WMSJournalTrans         wmsJournalTrans;
        SalesLine               localSalesLine;
        SalesTable              localSalesTable;
        InventQuarantineOrder   quarantineOrder;

        ttsbegin;
        this.initRecordLists();
        List list = List::create(this.parmLineList());
        ListEnumerator listEnumerator = list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            SalesId previousSalesId = '';
            WMSJournalTable wmsJournal = listEnumerator.current();

            while select InventTransId, InventTransType, InventTransRefId, sum(Qty)
                , sum(PdsCWQty)
                from wmsJournalTrans
                    group by InventTransRefId, InventTransId, InventTransType    // ensure order by InventTransRefId and group by inventTransId
                    where wmsJournalTrans.JournalId          == wmsJournal.JournalId && wmsJournalTrans.ReturnItemNum
            {
                localSalesLine.clear();
                switch (wmsJournalTrans.InventTransType)
                {
                    case InventTransType::Sales :
                        select firstonly localSalesLine where localSalesLine.InventTransId == wmsJournalTrans.InventTransId
                        join localSalesTable where localSalesTable.SalesId      == localSalesLine.SalesId;
                        break;

                    case InventTransType::QuarantineOrder :
                        select firstonly RecId from quarantineOrder where quarantineOrder.QuarantineId  == wmsJournalTrans.InventTransRefId &&
                                                               quarantineOrder.InventTransId == wmsJournalTrans.InventTransId
                        join localSalesLine  where localSalesLine.InventTransId    == quarantineOrder.InventTransIdRef
                        join RecId from localSalesTable where localSalesTable.SalesId         == localSalesLine.SalesId;
                        break;
                }

                if (localSalesLine && !parmLineMap.exists(this.parmLineMapKey(localSalesLine)))
                {
                    TradeLineRefId tableRefId = this.getTableRefId(localSalesLine);
                    if (this.createParmLineFromWMSArrivalTrans(localSalesLine, wmsJournalTrans.Qty
                        , wmsJournalTrans.PdsCWQty
                        , tableRefId))

                    {
                        previousSalesId = localSalesLine.SalesId;
                        if (!parmTableMap.exists(this.parmTableMapKey(localSalesLine)))
                        {
                            this.createParmTable(SalesTable::find(localSalesLine.SalesId), localSalesLine, tableRefId);
                        }
                    }
                }
            }
        }
        this.insertRecordLists();
        this.reArrange();
        this.updateAllSalesShippingStat();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromWMSShipmentSet</Name>
				<Source><![CDATA[
    private void  chooseLinesFromWMSShipmentSet()
    {
        SalesId             previousSalesId;
        TradeLineRefId      tableRefId;

        InventQty           inventQtyLine;
        Set                 wmsOrderTransSet;
        SalesLine           previousSalesLine;
        PdsInventQty        pdsCWQty;

        void createParmLine()
        {
            if (previousSalesId != previousSalesLine.SalesId)
            {
                tableRefId = this.getTableRefId(previousSalesLine, false);
            }

            if (this.createParmLineFromWMSOrderTrans(previousSalesLine
                                                    , inventQtyLine
                                                    , pdsCWQty
                                                    , tableRefId
                                                    , wmsOrderTransSet))
            {
                if (previousSalesId != previousSalesLine.SalesId)
                {
                    previousSalesId = previousSalesLine.SalesId;
                    this.createParmTable(SalesTable::find(previousSalesLine.SalesId), previousSalesLine, tableRefId);
                }
            }
            inventQtyLine = 0;
            pdsCWQty = 0;
            wmsOrderTransSet = new Set(Types::Record);
        }

        if (!this.parmLineIdSet() || Set::create(this.parmLineIdSet()).elements() == 0)
        {
            return;
        }

        ttsbegin;
        this.initRecordLists();
        salesParmUpdate = SalesParmUpdate::find(salesParmUpdate.ParmId, true);
        salesParmUpdate.SpecQty = SalesUpdate::DeliverNow;
        salesParmUpdate.SumBy   = AccountOrder::Account;
        salesParmUpdate.update();
        SetEnumerator se = Set::create(this.parmLineIdSet()).getEnumerator();
        while (se.moveNext())
        {
            WMSShipment wmsShipment = WMSShipment::find(se.current());
            if (wmsShipment.PackingType == WMSPackingType::Order)
            {
                salesParmUpdate.SumBy   = AccountOrder::None;
                salesParmUpdate.update();
                break;
            }
        }

        se.reset();
        while (se.moveNext())
        {
            WHSShipmentId shipmentId = se.current();
            [previousSalesLine, inventQtyLine, pdsCWQty] = this.createSysDaExtensibleWMSOrderTransQuery(previousSalesLine,
                                                                                                            inventQtyLine,
                                                                                                            pdsCWQty,
                                                                                                            shipmentId);
        }
        this.insertRecordLists();
        this.reArrange();
        this.updateAllSalesShippingStat();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSShipmentParmLine</Name>
				<Source><![CDATA[
    private void createWMSShipmentParmLine(SalesId _previousSalesId,
                                            InventQty _inventQtyLine,
                                            Set _wmsOrderTransSet,
                                            SalesLine _previousSalesLine,
                                            PdsInventQty _pdsCWQty)
    {
        TradeLineRefId      tableRefId;
        if (_previousSalesId != _previousSalesLine.SalesId)
        {
            tableRefId = this.getTableRefId(_previousSalesLine, false);
        }

        if (this.createParmLineFromWMSOrderTrans(_previousSalesLine, 
                                                    _inventQtyLine, 
                                                    _pdsCWQty, 
                                                    tableRefId, 
                                                    _wmsOrderTransSet))
        {
            if (_previousSalesId != _previousSalesLine.SalesId)
            {
                _previousSalesId = _previousSalesLine.SalesId;
                this.createParmTable(SalesTable::find(_previousSalesLine.SalesId), _previousSalesLine, tableRefId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysDaExtensibleWMSOrderTransQuery</Name>
				<Source><![CDATA[
    private container createSysDaExtensibleWMSOrderTransQuery(SalesLine _previousSalesLine,
                                                                InventQty _inventQtyLine,
                                                                PdsInventQty _pdsCWQty,
                                                                WHSShipmentId _shipmentId)
    {
        SalesId             previousSalesId = '';
        Set                 wmsOrderTransSet = new Set(Types::Record);
        InventTransId       previousInventTransId = '';
        WMSOrderTrans       wmsOrderTrans;
        
        SalesLine           previousSalesLine = _previousSalesLine;
        InventQty           inventQtyLine = _inventQtyLine;
        PdsInventQty        pdsCWQty = _pdsCWQty;

        SysDaQueryObject qeWMSOrderTrans = this.buildWMSOrderTransQuery(wmsOrderTrans, _shipmentId);

        SysDaSearchObject	 soWMSOrderTrans = new SysDaSearchObject(qeWMSOrderTrans);
        SysDaSearchStatement ssWMSOrderTrans = new SysDaSearchStatement();

        while (ssWMSOrderTrans.findNext(soWMSOrderTrans))
        {
            SalesLine localSalesLine = SalesLine::findInventTransId(wmsOrderTrans.InventTransId);
            if (!localSalesLine.Blocked)
            {
                if (previousInventTransId && previousInventTransId != wmsOrderTrans.InventTransId)
                {
                    this.createWMSShipmentParmLine(previousSalesId, inventQtyLine, wmsOrderTransSet, previousSalesLine, pdsCWQty);
                    inventQtyLine = 0;
                    pdsCWQty = 0;
                    wmsOrderTransSet = new Set(Types::Record);
                }
                inventQtyLine += wmsOrderTrans.Qty;
                pdsCWQty += wmsOrderTrans.PdsCWQty;

                // Because this is a grouped buffer some fields will be unretrieved and trying to access them can throw a run-time error.
                // Initializing non-relevant fields in here to prevent this error down the line.
                wmsOrderTrans.RecId = 0;
                wmsOrderTrans.ShipmentId = '';

                wmsOrderTransSet.add(wmsOrderTrans);

                previousInventTransId = wmsOrderTrans.InventTransId;
                previousSalesLine = localSalesLine;
            }
        }

        if (previousInventTransId)
        {
            this.createWMSShipmentParmLine(previousSalesId, inventQtyLine, wmsOrderTransSet, previousSalesLine, pdsCWQty);
            inventQtyLine = 0;
            pdsCWQty = 0;
        }

        return [previousSalesLine, inventQtyLine, pdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWMSOrderTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Build query for <c>WMSOrderTrans</c> records for the shipment.
    /// </summary>
    /// <param name = "_wmsOrderTrans"> 
    ///     A <c>WMSOrderTrans</c> record.
    /// </param>
    /// <param name = "_shipmentId">
    ///     Shipment ID.
    /// </param>
    /// <returns>
    ///     Inventory order transactions query.
    /// </returns>
    protected SysDaQueryObject buildWMSOrderTransQuery(WMSOrderTrans _wmsOrderTrans, WHSShipmentId _shipmentId)
    {
        SysDaQueryObject qeWMSOrderTrans = new SysDaQueryObject(_wmsOrderTrans);

        qeWMSOrderTrans.projection()
            .add(fieldStr(WMSOrderTrans, InventTransId))
            .addSum(fieldStr(WMSOrderTrans, Qty))
            .addSum(fieldStr(WMSOrderTrans, PdsCWQty))
            .add(fieldStr(WMSOrderTrans, RouteId));

        qeWMSOrderTrans.groupByClause()
            .add(fieldStr(WMSOrderTrans, InventTransRefId))
            .add(fieldStr(WMSOrderTrans, InventTransId))
            .add(fieldStr(WMSOrderTrans, RouteId));

        SysDaQueryExpression wmsOrderTransWhereClause = this.buildWhereClauseForWMSOrderTransQuery(_wmsOrderTrans, _shipmentId);
        qeWMSOrderTrans.whereClause(wmsOrderTransWhereClause);
        
        InventTransOrigin    inventTransOrigin;
        SysDaQueryObject     qeInventTransOrigin = new SysDaQueryObject(inventTransOrigin);
        SysDaQueryExpression inventTransOriginWhereClause = this.buildWhereClauseForInventOriginTransQuery(inventTransOrigin, _wmsOrderTrans);
        qeInventTransOrigin.whereClause(inventTransOriginWhereClause);
        
        qeWMSOrderTrans.joinClause(SysDaJoinKind::ExistsJoin, qeInventTransOrigin);
        
        InventTrans          inventTrans;
        SysDaQueryObject     qeInventTrans = new SysDaQueryObject(inventTrans);
        SysDaQueryExpression inventTransWhereClause = this.buildWhereClauseForInventTransQuery(inventTrans, inventTransOrigin, _wmsOrderTrans);
        qeInventTrans.whereClause(inventTransWhereClause);
        
        qeInventTransOrigin.joinClause(SysDaJoinKind::ExistsJoin, qeInventTrans);

        return qeWMSOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForWMSOrderTransQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseForWMSOrderTransQuery(WMSOrderTrans _wmsOrderTrans, WHSShipmentId _shipmentId)
    {
        SysDaQueryExpression wmsOrderTransWhereClause =
                        (new SysDaEqualsExpression(new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, ShipmentId)),  new SysDaValueExpression(_ShipmentId)))
                        .and(new SysDaEqualsExpression(new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, InventTransType)), new SysDaValueExpression(InventTransType::Sales)))
                        .and((new SysDaEqualsExpression(new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, ExpeditionStatus)), new SysDaValueExpression(WMSExpeditionStatus::Picked)))
                            .or(new SysDaEqualsExpression(new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, ExpeditionStatus)), new SysDaValueExpression(WMSExpeditionStatus::Staged)))
                            .or(new SysDaEqualsExpression(new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, ExpeditionStatus)), new SysDaValueExpression(WMSExpeditionStatus::Loaded)))
                            .or(new SysDaEqualsExpression(new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, ExpeditionStatus)), new SysDaValueExpression(WMSExpeditionStatus::Complete))));
        
        return wmsOrderTransWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForInventOriginTransQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseForInventOriginTransQuery(InventTransOrigin _inventTransOrigin, WMSOrderTrans _wmsOrderTrans)
    {
        SysDaQueryExpression inventOriginalTransWhereClause =
                        new SysDaEqualsExpression(new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, InventTransId)), new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, InventTransId)));
        
        return inventOriginalTransWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForInventTransQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseForInventTransQuery(InventTrans _inventTrans, InventTransOrigin _inventTransOrigin, WMSOrderTrans _wmsOrderTrans)
    {
        SysDaQueryExpression inventTransWhereClause =
                        (new SysDaEqualsExpression(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin)), new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, RecId)))
                        .and(new SysDaGreaterThanExpression(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)), new SysDaValueExpression(StatusIssue::Deducted)))
                        .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusReceipt)), new SysDaValueExpression(StatusReceipt::None)))
                        .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, PickingRouteID)), new SysDaFieldExpression(_wmsOrderTrans, fieldStr(WMSOrderTrans, RouteId)))));
        
        return inventTransWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new journal must be created.
    /// </summary>
    /// <param name="_salesParmSubTable">
    /// Updates the table from a sales order.
    /// </param>
    /// <returns>
    /// true if a new journal must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <c>returnPackingSlipId</c> method is changed, a new journal must be created. If the sales
    /// type is either changed from or changed to the <c>ReturnOrder</c> value, a new journal must be
    /// created.
    /// </remarks>
    protected boolean createNewJournal(SalesParmSubTable _salesParmSubTable)
    {
        boolean             ret;

        if (salesTable)
        {
            ReturnPackingSlipId localReturnPackingSlipId = _salesParmSubTable.salesParmTable().ReturnPackingSlipId;
            SalesType localSalesType = salesTable.SalesType;

            if (returnPackingSlipId != localReturnPackingSlipId)
            {
                returnPackingSlipId = localReturnPackingSlipId;
                salesType = localSalesType;
                ret = true;
            }

            if (!ret)
            {
                if (localSalesType == SalesType::ReturnItem)
                {
                    if (salesType != localSalesType)
                    {
                        salesType = localSalesType;
                        ret = true;
                    }
                }
                else
                {
                    if (salesType == SalesType::ReturnItem)
                    {
                        salesType = localSalesType;
                        ret = true;
                    }
                }
            }
        }

        if (versioningStrategy
            && versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
        {
            salesSummary.parmIsPackingSlipCancel(true);
        }

        if (!ret)
        {
            ret = super(_salesParmSubTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common _salesLineOrig,
                                    TradeLineRefId _tableRefId,
                                    InventOwnerId_RU _inventOwnerId = '',
                                    boolean _mcrShipAlone = false)
    {
        boolean        lineCreated = false;
        SalesParmLine  newSalesParmLine;
        SalesQty       shippingQty = -1;
        InventQty      inventShippingQty = -1;

        if (_mcrShipAlone)
        {
            if (_salesLineOrig.RecId)
            {
                newSalesParmLine.clear();

                [newSalesParmLine.DeliverNow, newSalesParmLine.RemainBefore      , newSalesParmLine.RemainAfter      ]   = this.qtySales  (_salesLineOrig, naReal());
                [newSalesParmLine.InventNow , newSalesParmLine.RemainBeforeInvent, newSalesParmLine.RemainAfterInvent]   = this.qtyInvent (_salesLineOrig, naReal());

                if (newSalesParmLine.DeliverNow)
                {
                    newSalesParmLine.ParmId     = salesParmUpdate.ParmId;
                    newSalesParmLine.initFromSalesLine(_salesLineOrig);

                    newSalesParmLine.setLineAmount();

                    newSalesParmLine.calcPackingUnitQty();

                    newSalesParmLine.TableRefId = _tableRefId;

                    //Set ship alone fields and insert immediately
                    this.mcrSetShipAloneQuantities(newSalesParmLine, _salesLineOrig);
                    newSalesParmLine.setLineAmount();
                    this.insertParmLine(newSalesParmLine);

                    lineCreated = true;

                    this.allowCreateParmTable(true);
                }
            }
        }
        else
        {
            lineCreated = super(_salesLineOrig, _tableRefId, _inventOwnerId, _mcrShipAlone);
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromWHSLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records for update based on entries in the load.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_qtyDeliver">
    /// An <c>InventQty</c> extended data type.
    /// </param>
    /// <param name="_tableRef">
    /// A <c>TradeLineRefId</c> extended data type.
    /// </param>
    /// <param name="_whsLoadLine">
    /// A <c>WHSLoadLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if lines are successfully inserted into the <c>SalesParmLine</c> table; otherwise, false .
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the createParmLineFromLoadLine method. Extenders should move their logic to wrap or override the createPackingSlipParmLineFromLoadLine method.', false, 30\9\2019)]
    protected boolean  createParmLineFromWHSLoadLine(SalesLine         _salesLine,
                                                     InventQty         _qtyDeliver,
                                                     TradeLineRefId    _tableRef,
                                                     WHSLoadLine       _whsLoadLine)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _salesLine.ItemId);

        return this.createPackingSlipParmLineFromLoadLine(_salesLine, _qtyDeliver, 0, _tableRef, _whsLoadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates packing slip update line based on entries in the load.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_deliverInventoryQuantity">
    /// An inventory quantity to deliver.
    /// </param>
    /// <param name="_deliverCatchWeightQuantity">
    /// A catch weight quantity to delivery
    /// </param>
    /// <param name="_tableRef">
    /// A <c>TradeLineRefId</c> extended data type.
    /// </param>
    /// <param name="_loadLine">
    /// A <c>WHSLoadLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if lines are successfully inserted into the <c>SalesParmLine</c> table; otherwise, false .
    /// </returns>
    final protected boolean createParmLineFromLoadLine(
        SalesLine       _salesLine,
        InventQty       _deliverInventoryQuantity,
        PdsCWInventQty  _deliverCatchWeightQuantity,
        TradeLineRefId  _tableRef,
        WHSLoadLine     _loadLine)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), _salesLine.ItemId, _deliverCatchWeightQuantity))
        {
            return this.createParmLineFromWHSLoadLine(_salesLine, _deliverInventoryQuantity, _tableRef, _loadLine);
        }

        return this.createPackingSlipParmLineFromLoadLine(_salesLine, _deliverInventoryQuantity, _deliverCatchWeightQuantity, _tableRef, _loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackingSlipParmLineFromLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates packing slip update line based on entries in the load.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_deliverInventoryQuantity">
    /// An inventory quantity to deliver.
    /// </param>
    /// <param name="_deliverCatchWeightQuantity">
    /// A catch weight quantity to delivery
    /// </param>
    /// <param name="_tableRef">
    /// A <c>TradeLineRefId</c> extended data type.
    /// </param>
    /// <param name="_loadLine">
    /// A <c>WHSLoadLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if lines are successfully inserted into the <c>SalesParmLine</c> table; otherwise, false .
    /// </returns>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the createParmLineFromLoadLine method.
    /// </remarks>
    [Wrappable(true)]
    protected boolean createPackingSlipParmLineFromLoadLine(
        SalesLine       _salesLine,
        InventQty       _deliverInventoryQuantity,
        PdsCWInventQty  _deliverCatchWeightQuantity,
        TradeLineRefId  _tableRef,
        WHSLoadLine     _loadLine)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _salesLine.ItemId, _deliverCatchWeightQuantity, _deliverInventoryQuantity);

        if ((_salesLine.SalesType       != SalesType::ItemReq && documentStatus == DocumentStatus::ProjectPackingSlip)
            || (_salesLine.SalesType    == SalesType::ItemReq && documentStatus == documentStatus::PackingSlip))
        {
            return false;
        }

        boolean         ret = false;
        SalesParmLine   localSalesParmLine;

        InventQty       deliverInventoryQuantity    = _deliverInventoryQuantity;
        PdsCWInventQty  deliverCatchWeightQuantity  = _deliverCatchWeightQuantity;

        InventQty       qtyPicked       = _salesLine.pickedInTotalInventUnit();
        PdsCWInventQty  cwQtyPicked     = _salesLine.pdsCWPickedInTotal();
        InventQty       qtyPacked;
        PdsCWInventQty  cwQtyPacked;

        if (_loadLine.LoadId || !WHSPackingSlipSalesParmLineLoadUnionFlight::instance().isEnabled())
        {
            [qtyPacked, cwQtyPacked] = _loadLine.packingSlipUpdatedQuantities();
        }
        else
        {
            InventQty       qtyPackedLocal;
            PdsCWInventQty  cwQtyPackedLocal;
            WHSLoadLine     loadLineLocal;

            for (int i=1; i <= conLen(selectedLoadsCon); i++)
            {
                while select loadLineLocal
                    where loadLineLocal.LoadId == conPeek(selectedLoadsCon, i)
                       && loadLineLocal.InventTransId == _loadLine.InventTransId
                       && loadLineLocal.OrderNum == _loadLine.OrderNum
                       && loadLineLocal.InventTransType == InventTransType::Sales
                       && loadLineLocal.TransportRequest == NoYes::No
                {
                    [qtyPackedLocal, cwQtyPackedLocal] = loadLineLocal.packingSlipUpdatedQuantities();

                    qtyPacked += qtyPackedLocal;
                    cwQtyPacked += cwQtyPackedLocal;
                }
            }
        }

        deliverInventoryQuantity    -= qtyPacked;
        deliverCatchWeightQuantity  -= cwQtyPacked;

        if (qtyPicked > deliverInventoryQuantity)
        {
            qtyPicked = deliverInventoryQuantity;
        }

        if (cwQtyPicked > deliverCatchWeightQuantity)
        {
            cwQtyPicked = deliverCatchWeightQuantity;
        }

        if (qtyPicked == 0)
        {
            return false;
        }

        _salesLine.InventDeliverNow         = qtyPicked;
        _salesLine.PdsCWInventDeliverNow    = cwQtyPicked;

        UnitOfMeasureSymbol inventUnit = _salesLine.inventTable().inventUnitId();

        _salesLine.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                           _salesLine.InventDimId,
                                                                                                           qtyPicked,
                                                                                                           inventUnit,
                                                                                                           _salesLine.SalesUnit,
                                                                                                           NoYes::Yes);

        EcoResProductUnitConverter salesToInvenUnitConverter;

        if (_salesLine.RecId)
        {
            this.interCompanyUpdateSalesPrice(_salesLine);

            localSalesParmLine.clear();
            localSalesParmLine.TableRefId = _tableRef;

            [localSalesParmLine.DeliverNow,  localSalesParmLine.RemainBefore      , localSalesParmLine.RemainAfter      ] = this.qtySales (_salesLine, naReal());
            [localSalesParmLine.InventNow,   localSalesParmLine.RemainBeforeInvent, localSalesParmLine.RemainAfterInvent] = this.qtyInvent(_salesLine, naReal());

            [localSalesParmLine.PdsCWDeliverNow,  localSalesParmLine.PdsCWRemainBefore, localSalesParmLine.PdsCWRemainAfterInvent] = this.pdsCWQty(_salesLine, naReal());

            if (localSalesParmLine.DeliverNow || (localSalesParmLine.RemainBefore))
            {
                localSalesParmLine.ParmId = salesParmUpdate.ParmId;
                localSalesParmLine.initFromSalesLine(_salesLine);

                InventQty inventNowOrig = localSalesParmLine.InventNow;

                localSalesParmLine.setQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.pdsCWSetQty(DocumentStatus::PackingSlip, SalesParmUpdate.CreditRemaining);

                localSalesParmLine.setInventDeliverNow();
                localSalesParmLine.setLineAmount(_salesLine);
                localSalesParmLine.calcPackingUnitQty();

                if (WHSSalesParmLineFromLoadSkipDoubleConversionV2Flight::instance().isEnabled() && 
                    this.shouldKeepOriginalInventDeliverNow(localSalesParmLine, inventNowOrig, _salesLine.SalesUnit, inventUnit))
                {
                    localSalesParmLine.InventNow = inventNowOrig;
                }

                this.insertParmLine(localSalesParmLine);

                this.buildParmSubLineForWHSLoadLine(localSalesParmLine, _loadLine);

                this.allowCreateParmTable(true);
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldKeepOriginalInventDeliverNow</Name>
				<Source><![CDATA[
    private boolean shouldKeepOriginalInventDeliverNow(SalesParmLine _salesParmLine, InventQty _inventNowOrig, UnitOfMeasureSymbol _salesUnit, UnitOfMeasureSymbol _inventUnit)
    {
        if (PdsGlobal::pdsIsCWItem(_salesParmLine.ItemId))
        {
            return false;
        }

        Qty originalInventNowInSalesUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesParmLine.ItemId,
                                                                                                                _salesParmLine.InventDimId,
                                                                                                                _inventNowOrig,
                                                                                                                _inventUnit,
                                                                                                                _salesUnit,
                                                                                                                NoYes::Yes);

        return _salesParmLine.DeliverNow == originalInventNowInSalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParmSubLineForWHSLoadLine</Name>
				<Source><![CDATA[
    protected void buildParmSubLineForWHSLoadLine(
        SalesParmLine   _parmLine,
        WHSLoadLine     _loadLine)
    {
        WHSLoadLine     localLoadLine;
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;
        WHSWorkTable    putWorkTable;
        InventDim       loadLineInventDim;
        WMSLocationId   locationId;
        boolean         putIsPackingStation;
        boolean         trackUnitedLoads = WHSPackingSlipSalesParmLineLoadUnionFlight::instance().isEnabled();

        if (!trackUnitedLoads)
        {
            while select localLoadLine
            where localLoadLine.LoadId          == _loadLine.LoadId
            &&    localLoadLine.InventTransId   == _loadLine.InventTransId
            join loadLineInventDim
                where loadLineInventDim.inventDimId == localLoadLine.InventDimId
            {
                //go through the initial picks
                while select workLine
                order by workLine.WorkId
                where workLine.LoadLineRefRecId  == localLoadLine.RecId
                &&    workLine.WorkStatus        == WHSWorkStatus::Closed
                &&    workLine.QtyWork           != 0
                join WorkId, TargetLicensePlateId, InventLocationId from workTable
                    where workTable.WorkId       == workLine.WorkId
                    &&    workTable.WorkStatus   == WHSWorkStatus::Closed
                {
                    this.buildParmSubLine(workTable, workLine, _parmLine, loadLineInventDim, localLoadLine.RecId);
                }
            }
        }
        else
        {
            if (populatePackingSlipIdFromShipmentFlight 
                && this.parmCurrentLoadTable().PackingSlipCreationPolicy == WHSLoadPackingSlipCreationPolicy::Shipment)
            {
                if (WhsLoadLineInventoryPick::existsAnyPickForLoadLineRecId(_loadLine.RecId))
                {
                    this.createParmSubLinesUsingPickingRoute(_loadLine, _parmLine);
                }
                else
                {
                    this.createParmSubLinesUsingWorkLines(_loadLine, _parmLine);
                }
            }
            else
            {
                boolean groupQueryByInventTrans = false;
                SysDaSearchObject searchObject = new SysDaSearchObject(this.buildLoadUnionQuery(_loadLine.OrderNum, _loadLine.InventTransId, localLoadLine, groupQueryByInventTrans, _loadLine.LoadId));
                SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                while (searchStatement.nextRecord(searchObject))
                {
                    this.createParmSubLinesUsingWorkLines(localLoadLine, _parmLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubLinesUsingPickingRoute</Name>
				<Source><![CDATA[
    private void createParmSubLinesUsingPickingRoute(WHSLoadLine _loadLine, SalesParmLine _parmLine)
    {
        InventTrans inventTrans;
        WhsLoadLineInventoryPick loadLineInventoryPick;
                    
        while select inventTrans
            exists join loadLineInventoryPick
                where loadLineInventoryPick.PickId == inventTrans.PickingRouteID
                    && loadLineInventoryPick.LoadLine == _loadLine.RecId
        {
            this.createParmSubLineInventRecord(_parmLine, -1 * inventTrans.Qty, -1 * inventTrans.PdsCWQty, inventTrans.inventdimid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubLinesUsingWorkLines</Name>
				<Source><![CDATA[
    private void createParmSubLinesUsingWorkLines(WHSLoadLine _loadLine, SalesParmLine _parmLine)
    {
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;
        
        while select workLine
            order by workLine.WorkId
            where workLine.LoadLineRefRecId  == _loadLine.RecId
                &&    workLine.WorkStatus        == WHSWorkStatus::Closed
                &&    workLine.QtyWork           != 0
            join WorkId, TargetLicensePlateId, InventLocationId from workTable
                where workTable.WorkId      == workLine.WorkId
                    && workTable.WorkStatus == WHSWorkStatus::Closed
        {
            this.buildParmSubLine(workTable, workLine, _parmLine, _loadLine.inventDim(), _loadLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSublineFromWHSParameters</Name>
				<Source><![CDATA[
    private void createParmSublineFromWHSParameters(
        SalesParmLine     _parmLine,
        InventDim         _inventDim,
        WMSLocationId     _locationId,
        InventQty         _inventQty,
        PdsCWInventQty    _cwQty,
        WHSLicensePlateId _targetLicensePlateId,
        RefRecId          _loadLineRecId,
        boolean           _putIsPackingStation)
    {
        InventDim   inventDim;
        inventDim.initFromInventDim(_inventDim);
        inventDim.wMSLocationId  = _locationId;
        inventDim.LicensePlateId = _targetLicensePlateId;
        inventDim.clearLicensePlateIfInvalid();

        inventDim = InventDim::findOrCreate(inventDim);

        if (_putIsPackingStation)
        {
            if (!excludeContainerFilters)
            {
                excludeContainerFilters = new Set(Types::Container);
            }

            if (!excludeContainerFilters.in([_loadLineRecId, inventDim.inventDimId]))
            {
                this.createParmSubLineClosedContainer(_loadLineRecId, _parmLine, inventDim);
                excludeContainerFilters.add([_loadLineRecId, inventDim.inventDimId]);
            }
        }
        else
        {
            this.createParmSubLineInventRecord(_parmLine, _inventQty, _cwQty, inventDim.inventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinalPutLocationPackingOrSortingLocation</Name>
				<Source><![CDATA[
    private container isFinalPutLocationPackingOrSortingLocation(
        WHSWorkId        _workId,
        InventLocationId _inventLocationId)
    {
        WHSWorkLine finalPutLine;
        WMSLocation location;

        select firstonly wmsLocationId from finalPutLine
            order by finalPutLine.LineNum desc
            where finalPutLine.WorkId     == _workId
            &&    finalPutLine.WorkStatus == WHSWorkStatus::Closed
            &&    finalPutLine.WorkType   == WHSWorkType::Put
            join location
                where location.wMSLocationId    == finalPutLine.wmsLocationId
                &&    location.InventLocationId == _inventLocationId;

        boolean packingOrSortingLocation = location.isPackingLocation() || location.isSortingLocation();

        return [packingOrSortingLocation, finalPutLine.WMSLocationId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubLineInventRecord</Name>
				<Source><![CDATA[
    private void createParmSubLineInventRecord(
        SalesParmLine               _salesParmLine,
        InventQty                   _qty,
        PDSCWInventQTy              _cwQty,
        InventDimId                 _inventDimId)
    {
        SalesParmSubLine parmSubLine;
        EcoResReleasedProductUnitConverter ecoResProductConverter = EcoResReleasedProductUnitConverter::construct();

        parmSubLine.initFromSalesParmLine(_salesParmLine);
        parmSubLine.DeliverNow = ecoResProductConverter.convert(_qty,
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_salesParmLine.inventTable().inventUnitId()),
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(SalesLine::findRecId(_salesParmLine.SalesLineRecId).SalesUnit),
                                                                NoYes::Yes,
                                                                _salesParmLine.ItemId,
                                                                _inventDimId);
        parmSubLine.InventNow       = _qty;
        parmSubLine.PdsCWDeliverNow = _cwQty;

        parmSubLine.InventDimId = _inventDimId;

        this.insertParmSubLine(parmSubLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubLineClosedContainer</Name>
				<Source><![CDATA[
    private void createParmSubLineClosedContainer(
        RefRecId        _loadLineRecId,
        SalesParmLine   _salesParmLine,
        InventDim       _inventDimCriteria)
    {
        InventDim                           joinInventDim;
        WHSContainerLine                    containerLine;
        WHSContainerTable                   containerTable;
        UnitOfMeasureRecId                  salesUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(SalesLine::findRecId(_salesParmLine.SalesLineRecId).SalesUnit);
        UnitOfMeasureRecId                  inventUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(_salesParmLine.ItemId, ModuleInventPurchSales::Invent).UnitId);
        EcoResReleasedProductUnitConverter  ecoResProductConverter = EcoResReleasedProductUnitConverter::construct();

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_salesParmLine.ItemId);

        InventDimParm       inventDimParm;
        inventDimParm.initFromInventDim(_inventDimCriteria);

        // Loop over container lines for closed containers
        while select containerLine
            where containerLine.LoadLine    == _loadLineRecId
        exists join containerTable
            where containerTable.ContainerId        == containerLine.ContainerId
            &&    containerTable.ContainerStatus    == WHSContainerStatus::Closed
        #InventDimExistsJoin(containerLine.inventDimId, joinInventDim, _inventDimCriteria, inventDimParm)
        {
            SalesParmSubLine parmSubLine;
            parmSubLine.initFromSalesParmLine(_salesParmLine);

            InventDim inventDim = containerLine.mergedClosedInventDim();

            UnitOfMeasureRecId  fromUnit;
            ProductQuantity     fromQuantity;

            if (isCWItem)
            {
                fromUnit = inventUnitRecId;
                fromQuantity = containerLine.CapturedWeight;
            }
            else
            {
                fromUnit = UnitOfMeasure::unitOfMeasureIdBySymbol(containerLine.UnitId);
                fromQuantity = containerLine.Qty;
            }

            parmSubLine.DeliverNow = ecoResProductConverter.convert(fromQuantity,
                                                                    fromUnit,
                                                                    salesUnitRecId,
                                                                    NoYes::Yes,
                                                                    _salesParmLine.ItemId,
                                                                    inventDim.inventDimId);

            parmSubLine.InventNow = ecoResProductConverter.convert(fromQuantity,
                                                                    fromUnit,
                                                                    inventUnitRecId,
                                                                    NoYes::Yes,
                                                                    _salesParmLine.ItemId,
                                                                    inventDim.inventDimId);

            parmSubLine.PdsCWDeliverNow = isCWItem ? containerLine.Qty : 0;

            parmSubLine.InventDimId = inventDim.inventDimId;
            this.insertParmSubLine(parmSubLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromWMSArrivalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records for update based on entries in the arrival journal.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_qtyDeliver">
    /// An <c>InventQty</c> extended data type.
    /// </param>
    /// <param name="_cwQtyDeliver">
    /// A quantity to deliver in catch weight unit.
    /// </param>
    /// <param name="_tableRef">
    /// A <c>TradeLineRefId</c> extended data type.
    /// </param>
    /// <returns>
    /// true if lines are successfully inserted into the <c>SalesParmLine</c> table; otherwise, false .
    /// </returns>
    protected boolean  createParmLineFromWMSArrivalTrans(
        SalesLine         _salesLine,
        InventQty         _qtyDeliver
        , PdsCWInventQty  _cwQtyDeliver
        , TradeLineRefId  _tableRef)
    {
        boolean         ret = false;
        SalesParmLine   localSalesParmLine;

        _salesLine.InventDeliverNow = -_qtyDeliver;
        _salesLine.PdsCWInventDeliverNow = - _cwQtyDeliver;
        _salesLine.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
																									       _salesLine.InventDimId,
																										   -_qtyDeliver,
																									       _salesLine.inventTable().inventUnitId(),
																									       _salesLine.SalesUnit,
																									       NoYes::Yes);

        if (_salesLine.RecId && this.mayJournalTransBePosted(_salesLine))
        {
            localSalesParmLine.clear();
            localSalesParmLine.TableRefId = _tableRef;

            [localSalesParmLine.DeliverNow,  localSalesParmLine.RemainBefore      , localSalesParmLine.RemainAfter      ] = this.qtySales (_salesLine, naReal());
            [localSalesParmLine.InventNow,   localSalesParmLine.RemainBeforeInvent, localSalesParmLine.RemainAfterInvent] = this.qtyInvent(_salesLine, naReal());

            if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
            {
                [localSalesParmLine.PdsCWDeliverNow, localSalesParmLine.PdsCWRemainBefore, localSalesParmLine.PdsCWRemainAfterInvent] = this.pdsCWQty(_salesLine, naReal());
            }

            if (localSalesParmLine.DeliverNow || localSalesParmLine.RemainBefore)
            {
                localSalesParmLine.ParmId = salesParmUpdate.ParmId;
                localSalesParmLine.initFromSalesLine(_salesLine);
                localSalesParmLine.setQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.pdsCWSetQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.setInventDeliverNow();
                localSalesParmLine.setLineAmount(_salesLine);
                localSalesParmLine.calcPackingUnitQty();
                this.insertParmLine(localSalesParmLine);

                this.allowCreateParmTable(true);
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromWMSOrderTrans</Name>
				<Source><![CDATA[
    protected boolean  createParmLineFromWMSOrderTrans(SalesLine         _salesLine,
                                          InventQty         _qtyDeliver
                                          , PdsCWInventQty  _cwQtyDeliver
                                          , TradeLineRefId  _tableRef
                                          , Set             _wmsOrderTransSet = null)
    {
        boolean         ret = false;
        SalesParmLine   localSalesParmLine;
        InventQty       qtyPicked       = _salesLine.pickedInTotalInventUnit();
        PdsCWInventQty  cwQtyPicked     = _salesLine.pdsCWPickedInTotal();

        if (qtyPicked > _qtyDeliver)
            qtyPicked = _qtyDeliver;

        if (cwQtyPicked > _cwQtyDeliver)
        {
            cwQtyPicked = _cwQtyDeliver;
        }

        if (qtyPicked == 0
            || (PdsGlobal::pdsIsCWItem(_salesLine.ItemId) && cwQtyPicked == 0)
            )
            return false;

        _salesLine.InventDeliverNow = qtyPicked;
        _salesLine.PdsCWInventDeliverNow = cwQtyPicked;
        _salesLine.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
																										   _salesLine.InventDimId,
																										   qtyPicked,
																										   _salesLine.inventTable().inventUnitId(),
																										   _salesLine.SalesUnit,
																										   NoYes::Yes);

        if (_salesLine.RecId)
        {
            localSalesParmLine.clear();
            localSalesParmLine.TableRefId = _tableRef;

            [localSalesParmLine.DeliverNow,  localSalesParmLine.RemainBefore      , localSalesParmLine.RemainAfter      ] = this.qtySales (_salesLine, naReal());
            [localSalesParmLine.InventNow,   localSalesParmLine.RemainBeforeInvent, localSalesParmLine.RemainAfterInvent] = this.qtyInvent(_salesLine, naReal());

            if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
            {
                [localSalesParmLine.PdsCWDeliverNow, localSalesParmLine.PdsCWRemainBefore, localSalesParmLine.PdsCWRemainAfterInvent] = this.pdsCWQty(_salesLine, naReal());
            }

            if (localSalesParmLine.DeliverNow || (localSalesParmLine.RemainBefore))
            {
                localSalesParmLine.ParmId = salesParmUpdate.ParmId;
                localSalesParmLine.initFromSalesLine(_salesLine);

                localSalesParmLine.setQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.pdsCWSetQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.setInventDeliverNow();
                localSalesParmLine.setLineAmount(_salesLine);
                localSalesParmLine.calcPackingUnitQty();
                this.insertParmLine(localSalesParmLine);

                if (_wmsOrderTransSet)
                {
                    SetEnumerator se = _wmsOrderTransSet.getEnumerator();
                    while (se.moveNext())
                    {
                        WMSOrderTrans wmsOrderTrans = se.current();
                        this.createParmSubLine(localSalesParmLine, wmsOrderTrans);
                    }
                }

                this.allowCreateParmTable(true);
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesParmSubLine</c> record.
    /// </summary>
    /// <param name="_salesParmLine">
    /// A <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_wmsOrderTrans">
    /// A <c>WMSOrderTrans</c> record.
    /// </param>
    protected void createParmSubLine(SalesParmLine          _salesParmLine,
                                        WMSOrderTrans          _wmsOrderTrans)
    {
        SalesParmSubLine localSalesParmSubLine;

        localSalesParmSubLine.clear();
        localSalesParmSubLine.initFromSalesParmLine(_salesParmLine);
        localSalesParmSubLine.initFromWMSOrderTrans(_wmsOrderTrans, _salesParmLine.salesLine());
        this.insertParmSubLine(localSalesParmSubLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The record that was inserted.
    /// </returns>
    protected Common createParmUpdate()
    {
        SalesParmUpdate parmUpdate = super();
        if (proformaIsSet)
            parmUpdate.Proforma = setProforma;

        // <GBR>
        if (this.isPostFromLoad_BR())
        {
            parmUpdate.setFieldsFromWHSLoad(this.parmWHSLoadId());
        }
        // </GBR>
        if (versioningStrategy != null
            && (versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Cancel
                || versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Correction))
        {
            parmUpdate.SplitDeliveryInformation = NoYes::No;
            parmUpdate.SplitSite = NoYes::No;
            parmUpdate.SplitTaxId = NoYes::No;
        }
        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStorno</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default value for the <c>Storno</c> parameter.
    /// </summary>
    /// <returns>
    /// The default value that is retrieved from the configuration.
    /// </returns>
    protected NoYes defaultStorno()
    {
        if (this.parmCallerTable().TableId == tableNum(CustPackingSlipJour))
        {
            return super();
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectionLineQuantities</Name>
				<Source><![CDATA[
    public container getCorrectionLineQuantities(Common _salesLine)
    {
        CustPackingSlipTrans custPackingSlipTrans = chooseLines.get(tableNum(CustPackingSlipTrans));

        return [custPackingSlipTrans.Qty, custPackingSlipTrans.InventQty, custPackingSlipTrans.Qty, custPackingSlipTrans.InventQty, 0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingLineQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container getPostingLineQuantities(Common _salesLine)
    {
        CustPackingSlipTrans custPackingSlipTrans = chooseLines.get(tableNum(CustPackingSlipTrans));

        return [custPackingSlipTrans.Qty, custPackingSlipTrans.InventQty, custPackingSlipTrans.Qty, custPackingSlipTrans.InventQty, 0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a packing slip should be separated for each kind of activity.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if a packing slip should be separated for each kind of activity; otherwise, <c>NoYes::No</c>.
    /// </returns>
    protected NoYes getSplitInventProfileType_RU()
    {
        return countryRegion_RU &&
               SalesParameters::find().SplitInventProfileTypePackingSlip_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a packing slip should be separated for each posting profile.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if a packing slip should be separated for each posting profile; otherwise, <c>NoYes::No</c>.
    /// </returns>
    protected NoYes getSplitPostingProfile_RU()
    {
        return countryRegion_RU &&
               SalesParameters::find().SplitPostingProfilePackingSlip_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChooseLines</Name>
				<Source><![CDATA[
    protected void initChooseLines()
    {
        super();

        // <GBR>
        if (this.isPostFromLoad_BR())
        {
            this.parmAllowEmptyParmTable(false);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials_RU</Name>
				<Source><![CDATA[
    public void initOfficials_RU(Common _salesParmTable = null)
    {
        SalesParmTable localSalesParmTable = _salesParmTable as SalesParmTable;

        if (! OfficialsServ_RU::isFeatureEnabled())
            return;

        if (! offSrv)
        {
            offSrv = new OfficialsServ_RU();
        }

        if (_salesParmTable) // Editing parmTable
        {
            this.initOffSalesParmTable_RU(localSalesParmTable, this.initOfficialsFacture_RU());
        }
        else                 // Creating parmTables
        {
            ttsbegin;
            while select forupdate localSalesParmTable
                where localSalesParmTable.ParmId   == salesParmUpdate.ParmId &&
                        localSalesParmTable.Ordering == this.parmDocumentStatus()  &&
                    ! localSalesParmTable.OffSessionId_RU
            {
                this.initOffSalesParmTable_RU(localSalesParmTable, this.initOfficialsFacture_RU());
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficialsFacture_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether initialize Officials session for facture or not.
    /// </summary>
    /// <returns>
    /// This methid always returns False.
    /// </returns>

    protected boolean initOfficialsFacture_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOffSalesParmTable_RU</Name>
				<Source><![CDATA[
    private void initOffSalesParmTable_RU(
        SalesParmTable _localSalesParmTable,
        boolean        _includeFacture)
    {
        boolean newId = true;

        if (_localSalesParmTable.OffSessionId_RU)
        {
            newId = false;
            offSrv.newId(_localSalesParmTable.OffSessionId_RU);
            _localSalesParmTable.OffSessionId_RU = "";
        }
        _localSalesParmTable.OffReportType_RU =
            offSrv.initTableSales(_localSalesParmTable,
                                    salesParmUpdate,
                                    newId,
                                    _includeFacture,
                                    invoicePrintoutType);
        if (! _localSalesParmTable.OffSessionId_RU)
        {
            _localSalesParmTable.OffSessionId_RU = offSrv.newId();
        }
        if (_localSalesParmTable.RecId && _localSalesParmTable.selectForUpdate())
        {
            _localSalesParmTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnCorrection</Name>
				<Source><![CDATA[
    public void initOnCorrection()
    {
        this.parmCreditRemaining(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultCreditRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a default value for the <c>CreditRemaining</c> field.
    /// </summary>
    protected void initParmDefaultCreditRemaining()
    {
        this.parmCreditRemaining(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordLists</Name>
				<Source><![CDATA[
    protected void initRecordLists()
    {
        super();

        mcrRecordSortedParmLine     = new RecordSortedList(this.parmLineTableId());
        mcrRecordSortedParmLine.sortOrder(fieldNum(SalesParmLine, RecId));

        recordInsertParmSubLine = new RecordInsertList(tableNum(SalesParmSubLine), true, true, true);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            salesParmLineINRecordList = new RecordInsertList(tableNum(SalesParmLine_IN),  true, true, true);
        }
        // <GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceLineOnConnection</Name>
				<Source><![CDATA[
    public void initSourceLineOnConnection(Common _salesLine)
    {
        SalesLine salesLine = _salesLine as SalesLine;
        CustPackingSlipTrans custPackingSlipTrans = chooseLines.get(tableNum(CustPackingSlipTrans));

        salesLine.RemainSalesPhysical += custPackingSlipTrans.Qty;
        salesLine.RemainInventPhysical += custPackingSlipTrans.InventQty;
        salesLine.PdsCWRemainInventPhysical += custPackingSlipTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    protected void insertParmLine(Common _parmLine)
    {
        // <GIN>
        // </GIN>

        super(_parmLine);

        mcrRecordSortedParmLine.ins(_parmLine);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])  && _parmLine.TableId == tableNum(SalesParmLine))
        {
            SalesParmLine salesParmLineBase = _parmLine;
            SalesParmLine_IN salesParmLine = salesParmLineBase.salesParmLine_IN();

            if (!salesParmLine.RecId && salesParmLine.SalesParmLine)
            {
                salesParmLineINRecordList.add(salesParmLine);
            }

            salesParmLineBase.packSalesParmLine_IN(salesParmLine);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmSubLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// INserts a <c>SalesParmSubLine</c> buffer into a <c>RecordInsertList</c>.
    /// </summary>
    /// <param name="_salesParmSubLine">
    /// A <c>SalesParmSubLine</c> buffer.
    /// </param>
    protected void insertParmSubLine(SalesParmSubLine _salesParmSubLine)
    {
        recordInsertParmSubLine.add(_salesParmSubLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordLists</Name>
				<Source><![CDATA[
    protected void insertRecordLists()
    {
        super();
        recordInsertParmSubLine.insertDatabase();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            salesParmLineINRecordList.insertDatabase();
        }
        // <GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the posting parameter line for an intercompany line.
    /// </summary>
    /// <param name="_common">
    /// A record.
    /// </param>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common interCompanyParmLine(Common _common)
    {
        SalesLine   localSalesLine  = _common;
        SalesTable  localSalesTable = localSalesLine.salesTable();

        if (interCompanyCompanyId)
        {
            changecompany(interCompanyCompanyId)
            {
                // Select based on intercompany references
                return this.selectPurchParmLine(localSalesTable.InterCompanyPurchId, localSalesLine.InterCompanyInventTransId);
            }
        }
        else
        {
            // Select based on sales line invent references
            return this.selectPurchParmLine(localSalesLine.InventRefId, localSalesLine.InventRefTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPurchParmLine</Name>
				<Source><![CDATA[
    private PurchParmLine selectPurchParmLine(PurchId _purchId, InventTransId _inventTransId)
    {
        PurchParmLine        purchParmLine;
        VendPackingSlipTrans vendPackingSlipTrans;

        select firstonly purchParmLine
                       where purchParmLine.ParmId        == interCompanyParmId
                       &&    purchParmLine.OrigPurchId   == _purchId
                       &&    purchParmLine.InventTransId == _inventTransId
                    exists join vendPackingSlipTrans
                       where vendPackingSlipTrans.VendPackingSlipJour == this.parmRelatedJournal().RecId
                       &&    vendPackingSlipTrans.InventTransId       == purchParmLine.InventTransId
                       &&    purchParmLine.ReceiveNow                 == vendPackingSlipTrans.Qty;

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyParmLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the quantity for an intercompany line.
    /// </summary>
    /// <param name="_common">
    /// A record.
    /// </param>
    /// <param name="_isInventQty">
    /// A Boolean value that indicates whether the quantity is an inventory quantity.
    /// </param>
    /// <returns>
    /// A quantity.
    /// </returns>
    protected Qty interCompanyParmLineQty(Common _common, boolean _isInventQty = false)
    {
        SalesLine                   salesLine  = _common as SalesLine;
        VendPackingSlipTrans        vendPackingSlipTrans;
        VendPackingSlipJour         vendPackingSlipJour;
        VendPackingSlipVersion      vendPackingSlipVersion;
        Qty                         inventQty;
        UnitOfMeasureRecId          toUnitOfMeasureRecId;

        if (interCompanyCompanyId)
        {
            if (_isInventQty)
            {
                toUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.inventTable().inventUnitId());
            }

            changecompany(interCompanyCompanyId)
            {
                select firstonly forceplaceholders InventQty, Qty, ItemId, InventDimId, PurchUnit from vendPackingSlipTrans
                       where vendPackingSlipTrans.InventTransId              == salesLine.InterCompanyInventTransId
                        &&   vendPackingSlipTrans.VendPackingSlipJour        == this.parmRelatedJournal().RecId
                exists join vendPackingSlipJour
                    where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
                       exists join vendPackingSlipVersion
                            where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                               && vendPackingSlipVersion.ParmId              == interCompanyParmId;

                inventQty = vendPackingSlipTrans.InventQty;

                if (_isInventQty)
                {
                    UnitOfMeasureRecId fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(vendPackingSlipTrans.ItemId).inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = EcoResProductUnitConverter::convertForReleasedProduct(vendPackingSlipTrans.ItemId,
																						  vendPackingSlipTrans.InventDimId,
																						  inventQty,
                                                                                          fromUnitOfMeasureRecId,
																						  toUnitOfMeasureRecId,
																						  NoYes::Yes);
                    }
                }
            }
        }
        else
        {
            select firstonly forceplaceholders InventQty, Qty, ItemId, InventDimId, PurchUnit from vendPackingSlipTrans
                   where vendPackingSlipTrans.InventTransId              == salesLine.InventRefTransId
                    &&   vendPackingSlipTrans.VendPackingSlipJour        == this.parmRelatedJournal().RecId
            exists join vendPackingSlipJour
               where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
                   exists join vendPackingSlipVersion
                        where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                           && vendPackingSlipVersion.ParmId              == interCompanyParmId;

            inventQty = vendPackingSlipTrans.InventQty;
        }

        if (_isInventQty)
        {
            return inventQty;
        }
        else if (vendPackingSlipTrans.PurchUnit != salesLine.SalesUnit)
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(vendPackingSlipTrans.ItemId,
																						 vendPackingSlipTrans.InventDimId,
																						 vendPackingSlipTrans.Qty,
																						 vendPackingSlipTrans.PurchUnit,
																						 salesLine.SalesUnit,
																						 NoYes::Yes);
        }
        else
        {
            return vendPackingSlipTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateSalesPrice</Name>
				<Source><![CDATA[
    protected void interCompanyUpdateSalesPrice(SalesLine _salesLine)
    {
        this.intercompanySalesAtCostPriceHandler().onSalesLineSelected(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrigPackingSlipCoveringMultipleOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether packing slip covers multiple sales orders.
    /// </summary>
    /// <returns>
    /// true if packing slip covers multiple sales orders; otherwise, false.
    /// </returns>
    protected boolean isOrigPackingSlipCoveringMultipleOrders()
    {
        CustPackingSlipSalesLink  custPackingSlipSalesLinkLocal;

        if (callerTable && callerTable.TableId == tableNum(CustPackingSlipJour))
        {
            CustPackingSlipJour custPackingSlipJourLocal = callerTable;

            select firstonly RecId from custPackingSlipSalesLinkLocal
                where custPackingSlipSalesLinkLocal.SalesId       == custPackingSlipJourLocal.SalesId
                   && custPackingSlipSalesLinkLocal.PackingSlipId == custPackingSlipJourLocal.PackingSlipId
                   && custPackingSlipSalesLinkLocal.DeliveryDate  == custPackingSlipJourLocal.DeliveryDate
                   && custPackingSlipSalesLinkLocal.OrigSalesId   != custPackingSlipJourLocal.SalesId;

            return custPackingSlipSalesLinkLocal.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a parameter table record should be created for the specified source table.
    /// </summary>
    /// <param name="_salesTable">
    /// The source table that is in question.
    /// </param>
    /// <returns>
    /// true if the record should be created for the specified source table; otherwise, false.
    /// </returns>
    protected boolean mayJournalBePosted(Common _salesTable)
    {
        SalesTable localSalesTable = _salesTable as SalesTable;
        boolean ok = super(_salesTable);

        return ok && localSalesTable.mayPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        SalesLine salesLine = _salesLine as SalesLine;
        boolean ok = super(_salesLine);

        if (salesLine.isInterCompanyOrder() && salesLine.isCategoryBased())
        {
            return false;
        }

        ok  = ok && salesLine.mayPackingSlipBeUpdated(salesTableOrig);

        if (ok && salesParmUpdate.SpecQty == SalesUpdate::DeliverNow && !this.parmDirectDeliveryUpdate()
            //is an unpack
            && ! this.parmMCRInventTransRecid())

        {
            ok = (salesLine.SalesQty * salesLine.SalesDeliverNow >= 0
                && salesLine.QtyOrdered * salesLine.InventDeliverNow >= 0);
        }

        if (ok)
        {
            ok = (salesLine.ReturnStatus == ReturnStatusLine::None && salesLine.Scrap == NoYes::No
               || (salesLine.ReturnStatus == ReturnStatusLine::Registered && salesLine.Scrap == NoYes::No && !salesLine.isReturnReservationLine())
               || (salesLine.ReturnStatus == ReturnStatusLine::Awaiting   && salesLine.Scrap == NoYes::No && !salesLine.isReturnReservationLine() && interCompanyParmId)
               || (salesLine.ReturnStatus == ReturnStatusLine::Received   && this.parmCallerTable().TableId == tableNum(CustPackingSlipJour)));
        }

        // <GBR>
        if (countryRegion_BR)
        {
            return this.postMayJournalTransBePostedBR(_salesLine, ok);
        }
        // </GBR>

        // <GEEPL>
        if (countryRegion_PL)
        {
            if (SalesParameters::find().PackingSlipByInvent_PL)
            {
                if (this.parmVersioningStrategy().parmVersioningUpdateType() == VersioningUpdateType::Initial &&
                    this.parmInventLocationId_PL() != InventDim::find(salesLine.InventDimId).InventLocationId)
                {
                    ok = false;
                }
            }
        }
        // </GEEPL>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified sales line should be allowed to be
    ///     included on packing slips.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> record for which this method allows to be on
    ///     the packing slips.
    /// </param>
    /// <param name="_salesTable">
    ///     The Sales order header record pertaining to the passed sales order line.
    /// </param>
    /// <returns>
    ///     true if the sales order line should be included on the packing slip;
    ///     otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Do not process continuity item lines.
    ///     Do not process continuity child orders that are not in the delivery window.
    ///     Do not process continuity childorders that have payment issues.
    ///     do not allow SRM header line to be included on packing slips.
    /// </remarks>
    protected boolean mcrAllowCreateParmLine(SalesLine _salesLine, SalesTable _salesTable)
    {
        boolean                  allowCreateParmLine = true;

        allowCreateParmLine = super(_salesLine, _salesTable);

        if (MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            if (allowCreateParmLine
                && !this.mcrAllowCreateCheck(_salesLine, _salesTable))
            {
                allowCreateParmLine = false;
            }

            // Do not allow the continuity order lines with payment issues to be processed.
            if (allowCreateParmLine
                && !_salesLine.mcrCanContinuityLinePick())
            {
                allowCreateParmLine = false;
            }

            // If a transaction is being paid for by a credit card, check to see
            // if the credit card authorization for that card is not stale. If
            // the authorization is stale, then the sales order should be moved
            // to pending the authorization status set back to reauthorize

            // Drop ship flag check required or direct delivery will ail because PO qty has not
            // posted at this point.
            if (allowCreateParmLine
                && !_salesLine.mcrSalesLineDropShipment()
                && !SalesLineType::construct(_salesLine, _salesTable).creditNoteLine())
            {
                boolean inventoryAvailable = this.mcrCheckInventAvailability(_salesLine, _salesTable);

                // If no inventory, but physcial reserved or picked, then allow parm line
                if (!inventoryAvailable
                    && (_salesLine.pickedInTotalInventUnit() >= 0
                        || _salesLine.reservedPhysical()     >= 0))
                {
                    inventoryAvailable = true;
                }

                // Check for stale authorization if it will be picked. Inventory check helps avoid credit card processor calls.
                if (inventoryAvailable)
                {
                    if (this.isAuthorizationRequired())
                    {
                        allowCreateParmLine = MCRCustPaymTable::processIfAuthStale(_salesTable.RecId);
                    }
                }
                else
                {
                    allowCreateParmLine = false;
                }
            }
        }

        return allowCreateParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAuthorizationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an authorization is needed to process the packing slip.
    /// </summary>
    /// <returns>True if an authorization is needed. Otherwise, false.</returns>
    /// <remarks>An authorization is not required when canceling a packing slip.</remarks>
    private boolean isAuthorizationRequired()
    {
        return this.versioningStrategy != null
            && this.versioningStrategy.parmVersioningUpdateType() != VersioningUpdateType::Cancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainBeforeQtyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating the delivery remainder for the specified sales line.
    /// </summary>
    /// <param name = "_module"><c>ModuleInventPurchSales</c> determines which unit and field should be used.</param>
    /// <param name = "_salesParmLine">Sales posting line.</param>
    /// <param name = "_salesLineOrig">Original sales line.</param>
    /// <param name = "_this">The current sales packing slip posting engine instance.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> subscribers should use to return the calculated quantity.</param>
    delegate void getRemainBeforeQtyDelegate(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig, SalesFormletterParmDataPackingslip _this, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainBeforeQty</Name>
				<Source><![CDATA[
    private Qty getRemainBeforeQty(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        SalesParmLine   salesParmLine;
        Qty             qty;
        int             counter;

        if (_module == ModuleInventPurchSales::Invent)
        {
            qty = conPeek(this.qtyInvent(_salesLineOrig),
                    SalesQuantity::mcrPositionRemainBefore());

            select sum(InventNow) from salesParmLine
                    where salesParmLine.ParmId == _salesParmLine.ParmId
                        && salesParmLine.OrigSalesId == _salesLineOrig.SalesId
                        && salesParmLine.InventTransId == _salesLineOrig.InventTransId
                        // exclude current parm line
            && salesParmLine.RecId != _salesParmLine.RecId;

            qty -= salesParmLine.InventNow;

            mcrRecordSortedParmLine.first(salesParmLine);
            for (counter = 1;  counter <= mcrRecordSortedParmLine.len();  counter++)
            {
                qty -= salesParmLine.InventNow;
                mcrRecordSortedParmLine.next(salesParmLine);
            }

            return qty;
        }
        else if (_module == ModuleInventPurchSales::Sales)
        {
            qty = conPeek(this.qtySales(_salesLineOrig),
                    SalesQuantity::mcrPositionRemainBefore());

            select sum(DeliverNow) from salesParmLine
                    where salesParmLine.ParmId == _salesParmLine.ParmId
                        && salesParmLine.SalesLineRecId == _salesLineOrig.RecId
                        // exclude current parm line
            && salesParmLine.RecId != _salesParmLine.RecId;

            qty -= salesParmLine.DeliverNow;

            mcrRecordSortedParmLine.first(salesParmLine);
            for (counter = 1;  counter <= mcrRecordSortedParmLine.len();  counter++)
            {
                qty -= salesParmLine.DeliverNow;
                mcrRecordSortedParmLine.next(salesParmLine);
            }

            return qty;
        }
        else
        {
            EventHandlerResult result = new EventHandlerResult();
            this.getRemainBeforeQtyDelegate(_module, _salesParmLine, _salesLineOrig, this, result);

            if (!result.hasResult())
            {
                throw error(strFmt("@SYS19306", funcName()));
            }

            return result.result();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetShipAloneQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets parm line quantities appropriately for ship alone items.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The <c>SalesParmLine</c> record for which this method appropriately sets
    ///     quantities.
    /// </param>
    /// <param name="_salesLineOrig">
    ///     The <c>SalesLine</c> record used to set quantities on the <c>SalesParmLine</c>.
    /// </param>
    /// <remarks>
    ///     Do not do this for negative quantity lines.
    ///     Be sure this is called AFTER the salesParmLine has been initialized from
    ///     the sales line.
    /// </remarks>
    protected void mcrSetShipAloneQuantities(SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        Decimals inventQtyBySalesUnit;
        InventTable inventTable = _salesLineOrig.inventTable();

        _salesParmLine.DeliverNow         =
            min(this.getRemainBeforeQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig),
                inventTable.inventItemSalesSetup().mcrQuantityEffectiveMultiple());

        _salesParmLine.RemainBefore       = this.getRemainBeforeQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig);

        _salesParmLine.RemainAfter        = _salesParmLine.RemainBefore - _salesParmLine.DeliverNow;

        // Fix to the multiple quantities call
        inventQtyBySalesUnit = min(this.getRemainBeforeQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig),
                                      inventTable.inventItemInventSetup().mcrQuantityEffectiveMultiple());

        if (inventTable.BOMUnitId && _salesParmLine.PackingUnit != inventTable.BOMUnitId)
        {
            _salesParmLine.InventNow = InventTableModule::unitConvert(_salesParmLine.ItemId,
                                                                      ModuleInventPurchSales::Invent,
                                                                      _salesParmLine.PackingUnit,
                                                                      inventQtyBySalesUnit,
                                                                      _salesParmLine.InventDimId);
        }
        else
        {
            _salesParmLine.InventNow = inventQtyBySalesUnit;
        }

        _salesParmLine.RemainBeforeInvent = this.getRemainBeforeQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig);

        _salesParmLine.RemainAfterInvent  = _salesParmLine.RemainBeforeInvent - _salesParmLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmLines</Name>
				<Source><![CDATA[
    protected boolean mcrSplitParmLines()
    {
        boolean ok = this.mcrSplitParmLinesShipAlone();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    protected str parmTableMapKey(Common _source
                                  , InventOwnerId_RU _inventOwnerId = ''
    )
    {
        str key = super(_source, _inventOwnerId);

        if (populatePackingSlipIdFromShipmentFlight)
        {
            switch (_source.TableId)
            {
                //Add the shipment id to the key since we must be creating the parmtables per shipment
                case tableNum(SalesLine):
                    WHSPackingSlipCreatePerShipmentContext context = WHSPackingSlipCreatePerShipmentContext::current();
                    if (context != null)
                    {
                        key = this.addToKey(key, context.shipmentId);
                    }
                    break;
                case tableNum(SalesParmTable):
                    WHSPackingSlipCreatePerShipmentContext contextForParmTable = WHSPackingSlipCreatePerShipmentContext::current();
                    if (contextForParmTable != null)
                    {
                        key = this.addToKey(key, contextForParmTable.shipmentId);
                    }
                    break;
                case tableNum(SalesParmSubTable):
                    WHSPackingSlipCreatePerShipmentContext contextForSubParmTable = WHSPackingSlipCreatePerShipmentContext::current();
                    if (contextForSubParmTable != null)
                    {
                        key = this.addToKey(key, contextForSubParmTable.shipmentId);
                    }
                    break;
                case tableNum(SalesParmLine):
                    WHSPackingSlipCreatePerShipmentContext contextForSubParmLine = WHSPackingSlipCreatePerShipmentContext::current();
                    if (contextForSubParmLine != null)
                    {
                        key = this.addToKey(key, contextForSubParmLine.shipmentId);
                    }
                    break;

            }
        }

        // <GBR>
        if (countryRegion_BR)
        {
            return this.postParmTableMapKey_BR(_source, key);
        }
        // </GBR>

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWGetCorrectionLineQuantities</Name>
				<Source><![CDATA[
    public container pdsCWGetCorrectionLineQuantities(Common _salesLine)
    {
        CustPackingSlipTrans custPackingSlipTrans = chooseLines.get(tableNum(CustPackingSlipTrans));

        return [custPackingSlipTrans.PdsCWQty, custPackingSlipTrans.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInterCompanyParmLineQty</Name>
				<Source><![CDATA[
    protected PdsCWInventQty pdsCWInterCompanyParmLineQty(Common _common)
    {
        SalesLine                   salesLine  = _common as SalesLine;
        VendPackingSlipTrans        vendPackingSlipTrans;
        VendPackingSlipJour         vendPackingSlipJour;
        VendPackingSlipVersion      vendPackingSlipVersion;

        if (interCompanyCompanyId)
        {
            changecompany(interCompanyCompanyId)
            {
                select firstonly forceplaceholders PdsCWQty from vendPackingSlipTrans
                    where vendPackingSlipTrans.InventTransId            == salesLine.InterCompanyInventTransId
                exists join vendPackingSlipJour
                    where  vendPackingSlipJour.RecId                    == vendPackingSlipTrans.VendPackingSlipJour
                exists join vendPackingSlipVersion
                    where  vendPackingSlipVersion.VendPackingSlipJour   == vendPackingSlipJour.RecId
                        && vendPackingSlipVersion.ParmId                == interCompanyParmId;
            }
        }
        else
        {
            select firstonly forceplaceholders PdsCWQty from vendPackingSlipTrans
                where  vendPackingSlipTrans.InventTransId           == salesLine.InventRefTransId
            exists join vendPackingSlipJour
                where  vendPackingSlipJour.RecId                    == vendPackingSlipTrans.VendPackingSlipJour
            exists join vendPackingSlipVersion
                where  vendPackingSlipVersion.VendPackingSlipJour   == vendPackingSlipJour.RecId
                    && vendPackingSlipVersion.ParmId                == interCompanyParmId;
        }

        return vendPackingSlipTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMayJournalTransBePostedBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the journal transaction may be posted for passed sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table record.
    /// </param>
    /// <param name="_returnValue">
    /// A Boolean value, for default return value; optional.
    /// </param>
    /// <returns>
    /// true if journal trans may be posted; otherwise, false.
    /// </returns>
    protected boolean postMayJournalTransBePostedBR(Common _salesLine,
                                                    boolean _returnValue = false)
    {
        SalesLine salesLine = _salesLine as SalesLine;

        if (_returnValue)
        {
            if (salesParmUpdate.DocumentStatus == DocumentStatus::DeliverySlip_BR)
            {
                _returnValue = salesLine.salesLine_BR().DeliveryCFOPTable_BR != 0;
            }
            else if (salesParmUpdate.DocumentStatus == DocumentStatus::PackingSlip)
            {
                _returnValue = salesLine.salesLine_BR().DeliveryCFOPTable_BR == 0;
            }
        }

        return _returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecIdSuspension</Name>
				<Source><![CDATA[
    protected void removeRecIdSuspension()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records specific to packing slip update when conditions are met.
    /// </summary>
    /// <returns>true if records were selected for the update; otherwise, false.</returns>
    protected boolean chooseLines()
    {
        if (this.mustChooseLinesFromWMSShipmentSet())
        {
            this.chooseLinesFromWMSShipmentSet();
            return true;
        }
        else if (this.mustChooseLinesFromWMSArrival())
        {
            this.chooseLinesFromWMSArrival();
            return true;
       }
        else if (this.mustChooseLinesFromWHSLoadId())
        {
            this.chooseLinesFromWHSLoadId();
            return true;
       }
        else if (this.mustChooseLinesFromTransportLoad())
        {
            this.chooseLinesFromTransportLoad();
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustChooseLinesFromWMSShipmentSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to select lines from <c>WMSShipment</c>.
    /// </summary>
    /// <returns>true if lines from <c>WMSShipment</c> must be selected; otherwise, false.</returns>
    protected boolean mustChooseLinesFromWMSShipmentSet()
    {
        return this.parmLineIdSet() != conNull() && this.parmWHSLoadId() == '' && !this.parmIsPostingTransportLoads();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustChooseLinesFromWMSArrival</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to select lines from <c>WMSJournalTable</c>.
    /// </summary>
    /// <returns>true if lines from <c>WMSJournalTable</c> must be selected; otherwise, false.</returns>
    protected boolean mustChooseLinesFromWMSArrival()
    {
        return this.lineListTableId() == tableNum(WMSJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustChooseLinesFromWHSLoadId</Name>
				<Source><![CDATA[
    private boolean mustChooseLinesFromWHSLoadId()
    {
        return this.parmWHSLoadId() && !this.isPostFromLoad_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustChooseLinesFromTransportLoad</Name>
				<Source><![CDATA[
    private boolean mustChooseLinesFromTransportLoad()
    {
        return this.parmIsPostingTransportLoads();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects which <c>ChooseLines</c> method to execute.
    /// </summary>
    /// <param name="_append">
    /// A Boolean value that indicates whether to append or delete the existing data first.
    /// </param>
    protected void selectChooseLines(boolean _append = false)
    {
        this.intercompanySalesAtCostPriceHandler().onSalesLinesSelectionStarted();

        if (!this.chooseLines())
        {
            super(_append);
        }

        if (versioningStrategy &&
           (versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Cancel ||
            versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Correction) &&
            this.isOrigPackingSlipCoveringMultipleOrders())
        {
            salesParmUpdate.SumBy = AccountOrder::Account;
            this.reArrange();
        }

        this.intercompanySalesAtCostPriceHandler().onSalesLinesSelectionFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectLines</Name>
				<Source><![CDATA[
    protected void reSelectLines(SalesId _origOrderId)
    {
        this.intercompanySalesAtCostPriceHandler().onSalesLinesSelectionStarted();
        super(_origOrderId);
        this.intercompanySalesAtCostPriceHandler().onSalesLinesSelectionFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReSelectLinesQuery</Name>
				<Source><![CDATA[
    protected Query buildReSelectLinesQuery(SalesId _origOrderId)
    {
        Query query = super(_origOrderId);
        
        if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled())
        {
            InventInventoryDataServiceSoftReservationHelper::addSoftReserveFilter(query);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostFromLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tells if this posting is posting sales from Load (WMS)
    /// </summary>
    /// <returns>
    /// True if post will occur from WHSLoadTable; otherwise; false
    /// </returns>
    /// <remarks>
    /// Post from Load only happens when using Delivery Slip, otherwise we're dealing with a Packing Slip.
    /// </remarks>
    protected boolean isPostFromLoad_BR()
    {
        return super() && documentStatus == DocumentStatus::DeliverySlip_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByDlvTerm</Name>
				<Source><![CDATA[
    protected boolean splitByDlvTerm()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildOnCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that is used to populate the parameter tables.
    /// </summary>
    /// <remarks>
    /// Additional <c>CustPackingSlipTrans</c> records are added to the query.
    /// </remarks>
    public void updateQueryBuildOnCorrection()
    {
        #Query
        CustPackingSlipJour  custPackingSlipJour = this.parmCallerTable() as CustPackingSlipJour;

        this.initQueryBuild();

        Query query = chooseLines.query();
        query.interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(SalesLine)).addDataSource(tableNum(CustPackingSlipTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(SalesLine,InventTransId), fieldNum(CustPackingSlipTrans, InventTransId));
        qbds.addRange(fieldNum(CustPackingSlipTrans, SalesId)).value(queryValue(custPackingSlipJour.SalesId));
        qbds.addRange(fieldNum(CustPackingSlipTrans, PackingSlipId)).value(queryValue(custPackingSlipJour.PackingSlipId));
        qbds.addRange(fieldNum(CustPackingSlipTrans, DeliveryDate)).value(queryValue(custPackingSlipJour.DeliveryDate));
        qbds.addRange(fieldNum(CustPackingSlipTrans, Qty)).value(SysQuery::valueNot('0'));

        if (versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Correction
            && SalesFormletterParmDataPackingSlipQueryCorrectFlight::instance().isEnabled())
        {
            PurchLine purchLine;
            SalesLine salesLine;
            CustPackingSlipTrans custPackingSlipTrans;

            select firstonly RecId, DeliveryType from salesLine
                where salesLine.SalesId == custPackingSlipJour.SalesId
                    && salesLine.DeliveryType == TradeLineDlvType::DropShip
                exists join purchLine
                    where purchLine.InventRefTransId == salesLine.InventTransId
                exists join custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId == salesLine.InventTransId
                        && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                        && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate;

            if (salesLine)
            {
                QueryBuildDataSource qbdsVendTrans = qbds.addDataSource(tableNum(VendPackingSlipTrans));
                qbdsVendTrans.joinMode(JoinMode::ExistsJoin);
                qbdsVendTrans.addLink(FieldNum(CustPackingSlipTrans, InventRefTransId), fieldNum(VendPackingSlipTrans, InventTransId));

                str queryValueQtyNotEqual = strFmt('(%1 != %2)',
                      strFmt('%1.%2', qbds.name(), fieldStr(CustPackingSlipTrans, Qty)),
                      strFmt('%1.%2', qbdsVendTrans.name(), fieldStr(VendPackingSlipTrans, Qty)));

                qbdsVendTrans.addRange(fieldNum(VendPackingSlipTrans, Qty)).value(queryValueQtyNotEqual);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryDocumentRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges on order ID to the query that is used when data is created.
    /// </summary>
    /// <param name="_datasourceRecordsPackedMap">
    /// A container with a packed version of a map with order IDs.
    /// </param>
    /// <param name="_abortOnError">
    /// A Boolean value that indicates whether to stop the update of the query if an error occurs.
    /// </param>
    /// <returns>
    /// The number of order ID ranges that are added to the query.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error occurred during the update.
    /// </exception>
    protected int updateQueryDocumentRanges(container _datasourceRecordsPackedMap, boolean _abortOnError = false)
    {
        // <GBR>
        if (this.isPostFromLoad_BR())
        {
            return this.updateQueryFromLoad_BR(_abortOnError);
        }
        // </GBR>

        return super(_datasourceRecordsPackedMap, _abortOnError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsFindValidLoadIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all loads that should run the packing slip process.
    /// </summary>
    /// <returns>
    /// A set of valid load Ids.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If a load is not ship confirmed, don't allow packing slip processing.
    /// </exception>
    private Set whsFindValidLoadIds()
    {
        Set loadIds;
        if (this.parmLineIdSet() == conNull())
        {
            loadIds = new Set(Types::String);
            loadIds.add(this.parmWHSLoadId());
        }
        else
        {
            loadIds = Set::create(this.parmLineIdSet());
        }
        var finalLoadIds = new Set(Types::String);
        var se = loadIds.getEnumerator();

        while (se.moveNext())
        {
            WHSLoadId loadId = se.current();

            // Add current load Id to final load Id set.
            if (!finalLoadIds.in(loadId))
            {
                finalLoadIds.add(loadId);
            }

            WHSLoadTable loadTable;
            select firstOnly RouteCode from loadTable
            where loadTable.LoadId == loadId;

            // Check for additional loads on the same route.
            if (loadTable.RouteCode != '')
            {
                TMSRouteSegmentLoad routeSegmentLoad;
                WHSLoadTable routeLoadTable;
                while select Id from routeSegmentLoad
                    group by routeSegmentLoad.Id, routeLoadTable.LoadStatus
                    where routeSegmentLoad.RouteCode == loadTable.RouteCode
                        && routeSegmentLoad.Id       != loadId
                    join LoadStatus from routeLoadTable
                        where routeLoadTable.LoadId == routeSegmentLoad.Id
                {
                    // Don't run loads that aren't ship confirmed or in packing.
                    if (routeLoadTable.LoadStatus != WHSLoadStatus::Shipped && validateLoadStatus)
                    {
                        throw error(strFmt("@WAX5703", routeSegmentLoad.Id));
                    }

                    if (!finalLoadIds.in(routeSegmentLoad.Id))
                    {
                        finalLoadIds.add(routeSegmentLoad.Id);
                    }
                }
            }
        }

        return finalLoadIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesFormletterParmData::construct() instead.', false, 31\05\2017)]
    static SalesFormletterParmDataPackingslip construct()
    {
        return SalesFormletterParmData::construct(DocumentStatus::PackingSlip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySalesAtCostPriceHandler</Name>
				<Source><![CDATA[
    private IntercompanySalesAtCostPriceFormLetterHandler intercompanySalesAtCostPriceHandler()
    {
        intercompanySalesAtCostPriceHandler = intercompanySalesAtCostPriceHandler ? intercompanySalesAtCostPriceHandler : IntercompanySalesAtCostPriceFormLetterHandler::construct();
        return intercompanySalesAtCostPriceHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeCreateParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new document header during the re-arrange process.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object.
    /// </param>
    /// <param name="_oldSalesParmTable">
    /// The original document header.
    /// </param>
    /// <param name="_newTableRefId">
    /// The <c>TradeLineRefId</c> for the new document.
    /// </param>
    /// <param name="_skipParmSubTable">
    /// Indicates if creation of the ParmSubTable record should be skipped.
    /// </param>
    protected void reArrangeCreateParmTable(QueryRun _queryRun, SalesParmTable _oldSalesParmTable, TradeLineRefId _newTableRefId, boolean _skipParmSubTable)
    {
        super(_queryRun, _oldSalesParmTable, _newTableRefId, _skipParmSubTable);

        if (_oldSalesParmTable.RecId)
        {
            // Move tax adjustments from current packing slip to the new packing slip.
            TaxWorkRegulation::move(_oldSalesParmTable, salesParmTableReArrange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxWorkRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Make sure if there are existing tax adjustment documents summarized.
    /// </summary>
    protected boolean checkTaxWorkRegulation()
    {
        if (taxAdjustmentDocumentCount == salesParmUpdate.numberOfTables())
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the re-arrange process.
    /// </summary>
    protected void reArrangeInit()
    {
        taxAdjustmentDocumentCount = salesParmUpdate.numberOfTables();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromTransportLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records for update based on a transport load.
    /// </summary>
    private void chooseLinesFromTransportLoad()
    {
        ttsbegin;

        this.updateSalesParmUpdateSpecQtyToDeliverNow();

        // Create a set of transport load IDs to run.
        Set transportLoadIdsChecked = this.getTransportLoadIds();
        var se = transportLoadIdsChecked.getEnumerator();

        while (se.moveNext())
        {
            WHSTransportLoad transportLoad          = WHSTransportLoad::findByRecId(se.current());
            utcdatetime      transportLoadTransDate = transportLoad.TransportLoadShipConfirmUTCDateTime;

            if (!transportLoadTransDate)
            {
                transportLoadTransDate = DateTimeUtil::getSystemDateTime();
            }

            // Sets the TransDate of salesParmTable to transportLoadTransDate, if value is empty defaulted to systemDateTime.
            this.parmTransDate(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(transportLoadTransDate, DateTimeUtil::getCompanyTimeZone())));

            WHSTransportLoadPickWorkLinesCollection transportLoadPickWorkLinesCollection = WHSTransportLoadPickWorkLinesCollection::newFromTransportLoadWithTransTypeFilter(transportLoad, InventTransType::Sales);
            MapEnumerator transportLoadSalesParmLineEnumerator = transportLoadPickWorkLinesCollection.getCollectionEnumerator();

            while (transportLoadSalesParmLineEnumerator.moveNext())
            {
                SalesLine localSalesLine = SalesLine::findInventTransId(transportLoadSalesParmLineEnumerator.currentKey());
                var currentTransportLoadWorkLineList = transportLoadSalesParmLineEnumerator.currentValue();

                if (!localSalesLine.Blocked)
                {
                    this.createParmLineForTransportLoad(currentTransportLoadWorkLineList, localSalesLine);
                }
            }
        }

        this.insertRecordLists();
        this.reArrange();
        this.updateAllSalesShippingStat();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParmSubLineForTransportLoadSalesParmLine</Name>
				<Source><![CDATA[
    protected void buildParmSubLineForTransportLoadSalesParmLine(
        SalesParmLine     _parmLine,
        WHSWorkLineList   _transportLoadWorkLineList)
    {
        ListEnumerator  workLineEnumerator = _transportLoadWorkLineList.getWorkLineListEnumerator();
        InventDim       loadLineInventDim;
        RecID           prevLoadLineRecId;

        while (workLineEnumerator.moveNext())
        {
            WHSWorkLine currentWorkLine     = workLineEnumerator.current();
            WHSWorkTable currentWorkTable   = currentWorkLine.whsWorkTable();

            if (!prevLoadLineRecId || prevLoadLineRecId != currentWorkLine.LoadLineRefRecId)
            {
                WHSLoadLine loadLine;

                select firstOnly loadLineInventDim
                    exists join loadLine
                        where loadLine.InventDimId == loadLineInventDim.inventDimId
                            && currentWorkLine.LoadLineRefRecId == loadLine.RecId;

                prevLoadLineRecId = currentWorkLine.LoadLineRefRecId;
            }

            this.buildParmSubLine(
                currentWorkTable,
                currentWorkLine,
                _parmLine,
                loadLineInventDim,
                prevLoadLineRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransportLoadIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all transport load IDs that should run the packing slip process.
    /// </summary>
    /// <returns>
    /// A set of valid transport load IDs.
    /// </returns>
    private Set getTransportLoadIds()
    {
        return Set::create(this.parmLineIdSet());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromTransportLoadSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>SalesLine</c> records for update based on entries in the
    /// <c>WHSWorkLineList</c> from transport load.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    /// <param name="_transportLoadWorkLineList">
    /// Contains details required for a sales parm line to be created
    /// for a transport load.
    /// </param>
    /// <param name="_tableRef">
    /// A table reference ID.
    /// </param>
    /// <returns>
    /// true if lines are successfully inserted into the <c>SalesParmLine</c> table; otherwise, false
    /// </returns>
    protected boolean createParmLineFromTransportLoadSalesParmLine(
        SalesLine         _salesLine,
        WHSWorkLineList   _transportLoadWorkLineList,
        TradeLineRefId    _tableRef)
    {
        boolean ret;

        if ((_salesLine.SalesType  != SalesType::ItemReq
             && documentStatus     == DocumentStatus::ProjectPackingSlip)
         || (_salesLine.SalesType  == SalesType::ItemReq
             && documentStatus     == documentStatus::PackingSlip)
         || _salesLine.Blocked)
        {
            return false;
        }

        InventQty qtyPicked = _salesLine.pickedInTotalInventUnit();

        if (qtyPicked == 0)
        {
            return false;
        }

        if (_salesLine.RecId)
        {
            InventQty qtyDeliverNow;

            PdsCWInventQty cwQty;
            boolean isCWItem = PdsGlobal::pdsIsCWItem(_salesLine.ItemId);

            if (isCWItem)
            {
                cwQty = min(_salesLine.pdsCWPickedInTotal(), _transportLoadWorkLineList.parmInventHandlingQty());
                qtyDeliverNow = min(qtyPicked, _transportLoadWorkLineList.parmCapturedWeight());
            }
            else
            {
                qtyDeliverNow = min(qtyPicked, _transportLoadWorkLineList.parmInventHandlingQty());
                cwQty = 0;
            }
            _salesLine.InventDeliverNow  = qtyDeliverNow;

            EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
            UnitOfMeasureRecId inventUnit = UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.inventTable().inventUnitId());
            UnitOfMeasureRecId salesUnit  = UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.SalesUnit);

            _salesLine.SalesDeliverNow = releasedProductUnitConverter.convert(qtyDeliverNow,
                                                                          inventUnit,
                                                                          salesUnit,
                                                                          NoYes::Yes,
                                                                          _salesLine.ItemId,
                                                                          _salesLine.InventDimId);
            SalesParmLine localSalesParmLine;
            localSalesParmLine.TableRefId = _tableRef;

            [localSalesParmLine.DeliverNow, localSalesParmLine.RemainBefore, localSalesParmLine.RemainAfter] = this.qtySales (_salesLine, naReal());
            [localSalesParmLine.InventNow, localSalesParmLine.RemainBeforeInvent, localSalesParmLine.RemainAfterInvent] = this.qtyInvent(_salesLine, naReal());

            if (isCWItem)
            {
                [localSalesParmLine.PdsCWDeliverNow,  localSalesParmLine.PdsCWRemainBefore, localSalesParmLine.PdsCWRemainAfterInvent] = this.pdsCWQty(_salesLine, cwQty);
            }

            if (localSalesParmLine.DeliverNow || localSalesParmLine.RemainBefore)
            {
                localSalesParmLine.ParmId = salesParmUpdate.ParmId;
                localSalesParmLine.initFromSalesLine(_salesLine);
                localSalesParmLine.setQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.setInventDeliverNow();
                localSalesParmLine.setLineAmount(_salesLine);
                localSalesParmLine.calcPackingUnitQty();

                this.insertParmLine(localSalesParmLine);
                this.buildParmSubLineForTransportLoadSalesParmLine(localSalesParmLine, _transportLoadWorkLineList);
                this.allowCreateParmTable(true);

                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesParmUpdateSpecQtyToDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>SalesParmUpdate</c> record's specQty to be deliveryNow.
    /// </summary>
    protected void updateSalesParmUpdateSpecQtyToDeliverNow()
    {
        this.initRecordLists();

        salesParmUpdate = SalesParmUpdate::find(salesParmUpdate.ParmId, true);
        salesParmUpdate.SpecQty = SalesUpdate::DeliverNow;
        salesParmUpdate.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTradeLineRef</Name>
				<Source><![CDATA[
    private TradeLineRefId createTradeLineRef(SalesLine      _previousSalesLine,
                                              TradeLineRefId _tableRefId = '')
    {
        if (updateTableRefId || !_tableRefId
            || !parmTableMap.exists(this.parmTableMapKey(_previousSalesLine)))
        {
            _tableRefId = this.getTableRefId(_previousSalesLine);
        }

        return _tableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineForTransportLoad</Name>
				<Source><![CDATA[
    private void createParmLineForTransportLoad(
        WHSWorkLineList   _transportLoadWorkLineList,
        SalesLine         _prevSalesLine)
    {
        // A new tableRefId should be generated for each new parmTable to be created.
        TradeLineRefId tableRefId = this.createTradeLineRef(_prevSalesLine);

        if (this.createParmLineFromTransportLoadSalesParmLine(_prevSalesLine,
                                                              _transportLoadWorkLineList,
                                                              tableRefId))
        {
            // Create new parmTable per parmTable key.
            if (!parmTableMap.exists(this.parmTableMapKey(_prevSalesLine)))
            {
                this.createParmTable(SalesTable::find(_prevSalesLine.SalesId), _prevSalesLine, tableRefId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParmSubLine</Name>
				<Source><![CDATA[
    private void buildParmSubLine(
        WHSWorkTable  _workTable,
        WHSWorkLine   _workLine,
        SalesParmLine _parmLine,
        InventDim     _inventDim,
        RefRecId      _loadLineRecId)
    {
        WMSLocationId locationId;
        boolean       putIsPackingStation;
        WHSWorkTable  putWorkTable;

        putWorkTable = WHSWorkTable::find(WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                                            WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(_workLine)).workId);
        putWorkTable = putWorkTable ? putWorkTable : _workTable;

        [putIsPackingStation, locationId] = this.isFinalPutLocationPackingOrSortingLocation(putWorkTable.WorkId, putWorkTable.InventLocationId);

        boolean        hasDimTracking;
        WHSDimTracking dimTracking;
        InventDim      inventDim;

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_workLine.ItemId);

        WHSLicensePlateId targetLicensePlateId = putWorkTable.TargetLicensePlateId;
        
        if (_workLine.OrigPackingWorkTargetLicensePlateId 
            && putIsPackingStation)
        {
            // A container will been looking for by target license plate of pack work.
            targetLicensePlateId = _workLine.OrigPackingWorkTargetLicensePlateId;
        }

        // If the work Line uses dim tracking we must use those values.
        while select dimTracking
            where dimTracking.WorkId  == _workLine.WorkId
               && dimTracking.LineNum == _workLine.LineNum
            join inventDim
                where inventDim.inventDimId == dimTracking.InventDimId
        {
            hasDimTracking = true;

            this.createParmSublineFromWHSParameters(_parmLine,
                                                    inventDim,
                                                    locationId,
                                                    isCWItem ? dimTracking.CapturedWeight : dimTracking.Qty,
                                                    isCWItem ? dimTracking.Qty : 0,
                                                    targetLicensePlateId,
                                                    _loadLineRecId,
                                                    putIsPackingStation);
        }

        if (!hasDimTracking)
        {
            this.createParmSublineFromWHSParameters(_parmLine,
                                                    _inventDim,
                                                    locationId,
                                                    isCWItem ? _workLine.CapturedWeight : _workLine.InventQtyWork,
                                                    isCWItem ? _workLine.InventQtyWork : 0,
                                                    targetLicensePlateId,
                                                    _loadLineRecId,
                                                    putIsPackingStation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptChooseLines</Name>
				<Source><![CDATA[
    protected boolean promptChooseLines()
    {
        boolean ret;

        ret = super();

        chooseLines.query().dataSourceTable(tableNum(SalesLine)).clearRange(fieldNum(SalesLine, StockedProduct));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromCustPackingSlipJour</Name>
				<Source><![CDATA[
    private void chooseLinesFromCustPackingSlipJour()
    {
        CustPackingslipTrans custPackingslipTrans;
        SalesLine localSalesLine;
        List list = List::create(this.parmLineList());
        ListEnumerator listEnumerator = list.getEnumerator();
        TradeLineRefId tableRefId = this.getTableRefId(null, false);
        boolean createParmTable;

        while (listEnumerator.moveNext())
        {
            CustPackingSlipJour custPackingSlipJour = listEnumerator.current();
            while select custPackingslipTrans
                where custPackingslipTrans.PackingSlipId == custPackingSlipJour.packingSlipId
            {
                localSalesLine = SalesLine::findInventTransId(custPackingslipTrans.InventTransId);
                if (this.createParmLineFromCustPackingslipTrans(localSalesLine, custPackingslipTrans, tableRefId))
                {
                    createParmTable = true;
                }
            }

            if (createParmTable)
            {
                SalesParmTable localSalesParmTable = this.createParmTable(SalesTable::find(localSalesLine.SalesId), localSalesLine, tableRefId);
                recordInsertParmTable.insertDatabase();
                localSalesParmTable = SalesParmTable::find(localSalesParmTable.ParmId, localSalesParmTable.TableRefId, true);
                localSalesParmTable.CustPackingSlipJour = custPackingSlipJour.RecId;
                localSalesParmTable.doUpdate();
                tableRefId = this.getTableRefId(null, false);
                createParmTable = false;
            }
        }

        this.insertRecordLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromCustPackingslipTrans</Name>
				<Source><![CDATA[
    private boolean  createParmLineFromCustPackingslipTrans(
        SalesLine         _salesLine,
        CustPackingslipTrans _custPackingslipTrans,
        TradeLineRefId  _tableRef)
    {
        boolean         ret = false;
        SalesParmLine   localSalesParmLine;

        _salesLine.InventDeliverNow = _custPackingslipTrans.inventQty;
        _salesLine.PdsCWInventDeliverNow =  _custPackingslipTrans.PdsCWQty;
        _salesLine.SalesDeliverNow = _custPackingslipTrans.Qty;

        EcoResProductUnitConverter salesToInvenUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                                                 _salesLine.InventDimId,
                                                                                                                                 _salesLine.SalesUnit,
                                                                                                                                 _salesLine.inventTable().inventUnitId(),
                                                                                                                                 NoYes::Yes);
        
        if (_salesLine.RecId && this.mayJournalTransBePosted(_salesLine))
        {
            localSalesParmLine.clear();
            localSalesParmLine.TableRefId = _tableRef;
            localSalesParmLine.DeliverNow = _salesLine.InventDeliverNow;

            if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
            {
                [localSalesParmLine.PdsCWDeliverNow, localSalesParmLine.PdsCWRemainBefore, localSalesParmLine.PdsCWRemainAfterInvent] = this.pdsCWQty(_salesLine, naReal());
            }

            if (localSalesParmLine.DeliverNow || localSalesParmLine.RemainBefore)
            {
                localSalesParmLine.ParmId = salesParmUpdate.ParmId;
                localSalesParmLine.initFromSalesLine(_salesLine);
                localSalesParmLine.setQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.pdsCWSetQty(DocumentStatus::PackingSlip, salesParmUpdate.CreditRemaining);
                localSalesParmLine.setLineAmount(_salesLine);
                localSalesParmLine.calcPackingUnitQty();
                this.insertParmLine(localSalesParmLine);

                this.allowCreateParmTable(true);
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        super();

        if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled())
        {
            InventInventoryDataServiceSoftReservationHelper::addSoftReserveFilter(chooseLines.query());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildOnPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query for posting of deferred packing slip journals.
    /// </summary>
    [Hookable(false)]
    public void updateQueryBuildOnPost()
    {
        #Query
        CustPackingSlipJour  custPackingSlipJour = this.parmCallerTable() as CustPackingSlipJour;

        this.initQueryBuild();

        Query query = chooseLines.query();
        query.interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);

        if (InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled())
        {
            InventInventoryDataServiceSoftReservationHelper::addSoftReserveFilter(chooseLines.query());
        }

        if (custPackingSlipJour)
        {
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(SalesLine)).addDataSource(tableNum(CustPackingSlipTrans));
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.addLink(fieldNum(SalesLine,InventTransId), fieldNum(CustPackingSlipTrans, InventTransId));
            SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(query,tableNum(CustPackingSlipTrans)),fieldNum(CustPackingSlipTrans, SalesId)).value(queryValue(custPackingSlipJour.SalesId));
            SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(query,tableNum(CustPackingSlipTrans)),fieldNum(CustPackingSlipTrans, PackingSlipId)).value(queryValue(custPackingSlipJour.PackingSlipId));
            SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(query,tableNum(CustPackingSlipTrans)),fieldNum(CustPackingSlipTrans, DeliveryDate)).value(queryValue(custPackingSlipJour.DeliveryDate));
            SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(query,tableNum(CustPackingSlipTrans)),fieldNum(CustPackingSlipTrans, Qty)).value(SysQuery::valueNot('0'));
            QueryBuildDataSource qbdsCustPackingSlipJour = qbds.addDataSource(tableNum(CustPackingSlipJour));
            qbdsCustPackingSlipJour.addLink(fieldNum(CustPackingSlipTrans,SalesId),fieldNum(CustPackingSlipJour, SalesId));
            qbdsCustPackingSlipJour.addLink(fieldNum(CustPackingSlipTrans,PackingSlipId),fieldNum(CustPackingSlipJour, PackingSlipId));
            qbdsCustPackingSlipJour.addLink(fieldNum(CustPackingSlipTrans,DeliveryDate),fieldNum(CustPackingSlipJour, DeliveryDate));
        }
        else
        {
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(SalesTable)).addDataSource(tableNum(CustPackingSlipJour));
            qbds.addLink(fieldNum(SalesTable,SalesId), fieldNum(CustPackingSlipJour, SalesId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLinesAndTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void createParmLinesAndTable()
    {
        if (this.versioningStrategyIsPost())
        {
            Common                  sourceTable;
            List                    custPackingSlipJourList;
            Set                     loadIdSet;
            boolean                 mayJournalBePosted;
            CustPackingSlipJour     custPackingSlipJour;

            chooseLines.reset();

            while (this.chooseLinesNext())
            {
                progressTotal++;

                if (this.chooseLinesChangedSourceTable())
                {
                    sourceTable = this.chooseLinesGetSourceTable();
                    this.sourceTableChanged(sourceTable);
                    if (this.skipMayJournalBePosted())
                    {
                        mayJournalBePosted = true;
                    }
                    else
                    {
                        mayJournalBePosted = this.doMayJournalBePosted(sourceTable);
                    }
                }

                this.updateTaxIdDuringCreatingParmLinesAndTable();

                if (!mayJournalBePosted)
                {
                    continue;
                }

                if (chooseLines.changed(tableNum(CustPackingSlipJour)))
                {
                    custPackingSlipJour = chooseLines.get(tableNum(CustPackingSlipJour));

                    WHSLoadTableCustPackingSlipJour WHSLoadTableCustPackingSlipJour;

                    boolean  loadFound = false;

                    while select WHSLoadTableLoadId from WHSLoadTableCustPackingSlipJour
                        where WHSLoadTableCustPackingSlipJour.CustPackingSlipJourRecId == custPackingSlipJour.RecId
                           && WHSLoadTableCustPackingSlipJour.WHSLoadTableDataAreaId == custPackingSlipJour.DataAreaId
                    {
                        if (!loadIdSet)
                        {
                            loadFound = true;
                            this.parmWHSLoadId(WHSLoadTableCustPackingSlipJour.WHSLoadTableLoadId);
                            loadIdSet = new Set(Types::String);
                        }

                        loadIdSet.add(WHSLoadTableCustPackingSlipJour.WHSLoadTableLoadId);
                    }

                    if (!loadFound)
                    {
                        if (!custPackingSlipJourList)
                        {
                            custPackingSlipJourList = new List(Types::Record);
                        }

                        custPackingSlipJourList.addEnd(custPackingSlipJour);
                    }
                }
            }

            if (loadIdSet)
            {
                this.parmLineIdSet(loadIdSet.pack());
                this.chooseLinesFromWHSLoadId();
            }

            if (custPackingSlipJourList)
            {
                this.parmLineList(custPackingSlipJourList.pack());
                this.chooseLinesFromCustPackingSlipJour();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>versioningStrategyIsPost</Name>
				<Source><![CDATA[
    private boolean versioningStrategyIsPost()
    {
        return versioningStrategy is FormLetterParmDataPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipPostedThroughItemRequirement</Name>
				<Source><![CDATA[
    private boolean isPackingSlipPostedThroughItemRequirement(PurchLine _purchline)
    {
        boolean ret;

        if (_purchline)
        {
            CustPackingSlipTrans custPackingSlipTransLocal;
            VendPackingSlipTrans vendPackingSlipTransLocal;

            // Packing slip posted through item requirement will have record in <c>CustPackingSlipTrans</c> and
            // will not have record in <c>VendPackingSlipTrans</c>.
            select firstonly RecId from custPackingSlipTransLocal
                where custPackingSlipTransLocal.SalesId == _purchline.InventRefId
            notexists join vendPackingSlipTransLocal
                where vendPackingSlipTransLocal.InventTransId == _purchline.InventTransId;
            if (custPackingSlipTransLocal.RecId)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>