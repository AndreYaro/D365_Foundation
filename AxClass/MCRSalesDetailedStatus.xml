<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesDetailedStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRSalesDetailedStatus</c> class runs calculations to determine 'detailed' status for sales orders and
///     lines.
/// </summary>
class MCRSalesDetailedStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caseSalesStatusBackorder</Name>
				<Source><![CDATA[
    private static MCRSalesLineDetailStatus caseSalesStatusBackorder(SalesLine _salesLine)
    {
        SalesLine           salesLineReturn;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        boolean             hasPickedQty, hasOpenOrderQty;

        // If there is a return line, then a return (and possibly an
        // exchange) exists.
        if (_salesLine.mcrHasReturn())
        {
            // Line's SalesStatus of open order means we know that
            // it can't be fully returned, so check for partial.
            // Note that, for return lines, we must check the
            // StatusReceipt instead of StatusIssue.
            select firstOnly RecId from inventTrans
                where inventTrans.StatusReceipt == StatusReceipt::Purchased
                    && inventTrans.PackingSlipReturned == NoYes::No
                exists join salesLineReturn
                    where salesLineReturn.InventTransIdReturn == _salesLine.InventTransId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == salesLineReturn.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

            if (inventTrans)
            {
                return MCRSalesLineDetailStatus::PartiallyReturned;
            }
            else
            {
                return MCRSalesLineDetailStatus::AuthorizedForReturn;
            }
        }
        else
        {
            // Regardless of whether the sales line's quantity is positive
            // or negative, the detailed status should be the same.
            // Therefore, status issues and status receipts are both
            // checked (with the exception of the 'Picked' case: a negative
            // quantity sales line cannot be picked).

            select firstOnly StatusIssue, StatusReceipt from inventTrans
                group by StatusIssue asc, StatusReceipt asc
                    where inventTrans.PackingSlipReturned == NoYes::No
                        && ((inventTrans.StatusIssue == StatusIssue::Sold
                                || inventTrans.StatusReceipt == StatusReceipt::Purchased)
                            ||((inventTrans.StatusIssue == StatusIssue::Deducted
                                || inventTrans.StatusReceipt == StatusReceipt::Received)))
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == _salesLine.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

            // If any quantity has been sold, we know this line is
            // partially invoiced, and we can exit immediately.
            if (  inventTrans.StatusIssue == StatusIssue::Sold
                || inventTrans.StatusReceipt == StatusReceipt::Purchased)
            {
                return MCRSalesLineDetailStatus::PartiallyInvoiced;
            }

            // Because the select statement above has an order by
            // (implicit through the group by), by this point, we know that
            // if any quantity has been delivered, we know this line is
            // partially delivered, and we can exit immediately.
            if (  inventTrans.StatusIssue == StatusIssue::Deducted
                || inventTrans.StatusReceipt == StatusReceipt::Received)
            {
                return MCRSalesLineDetailStatus::PartiallyDelivered;
            }

            // The group by clause is to speed performance.  The performance
            // should not be degraded by the fact that the group by has two
            // fields, because no InventTrans record will ever have both a
            // a statusIssue and a statusReceipt.
            select firstOnly RecId from inventTrans
                    group by StatusIssue asc, StatusReceipt asc
                    where inventTrans.PackingSlipReturned == NoYes::No
                    && inventTrans.StatusIssue == StatusIssue::Picked
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == _salesLine.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;
            if (inventTrans)
            {
                hasPickedQty = true;
            }

            select firstOnly RecId from inventTrans
                group by StatusIssue asc, StatusReceipt asc
                where inventTrans.PackingSlipReturned == NoYes::No
                    && (inventTrans.StatusIssue == StatusIssue::OnOrder
                        || inventTrans.StatusIssue == StatusIssue::ReservOrdered
                        || inventTrans.StatusIssue == StatusIssue::ReservPhysical)
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == _salesLine.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;
            if (inventTrans)
            {
                hasOpenOrderQty = true;
            }

            if (hasPickedQty)
            {
                if (hasOpenOrderQty)
                {
                    return MCRSalesLineDetailStatus::PartiallyPicked;
                }
                else
                {
                    return MCRSalesLineDetailStatus::Picked;
                }
            }
            else
            {
                if (_salesLine.salesTable().MCROrderStopped == NoYes::No)
                {
                    // Only run back-order check for positive quantity
                    // lines.
                    if (  _salesLine.SalesQty > 0
                        && _salesLine.SalesStatus == SalesStatus::Backorder
                        && _salesLine.ConfirmedDlv + MCROrderParameters::find().BackorderDays < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        return MCRSalesLineDetailStatus::Backordered;
                    }
                    else
                    {
                        return MCRSalesLineDetailStatus::InProcessing;
                    }
                }
                else
                {
                    return MCRSalesLineDetailStatus::OpenLine;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>caseSalesStatusDelivered</Name>
				<Source><![CDATA[
    private static MCRSalesLineDetailStatus caseSalesStatusDelivered(SalesLine _salesLine)
    {
        SalesLine           salesLineReturn;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        // If there is a return line, then a return (and possibly an
        // exchange) exists.
        if (_salesLine.mcrHasReturn())
        {
            // Line's SalesStatus of delivered means we know that
            // it can't be fully returned, so check for partial.
            select firstOnly RecId from inventTrans
                where inventTrans.StatusReceipt == StatusReceipt::Purchased
                    && inventTrans.PackingSlipReturned == NoYes::No
                exists join salesLineReturn
                    where salesLineReturn.InventTransIdReturn == _salesLine.InventTransId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == salesLineReturn.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

            if (inventTrans)
            {
                return MCRSalesLineDetailStatus::PartiallyReturned;
            }
            else
            {
                return MCRSalesLineDetailStatus::AuthorizedForReturn;
            }
        }
        else
        {
            // If one or more sold (or 'purchased' when considering
            // negative quantity lines) quantity exists, it is partially
            // invoiced, otherwise, it's delivered.
            select firstOnly RecId from inventTrans
                where (inventTrans.StatusIssue == StatusIssue::Sold
                    || inventTrans.StatusReceipt == StatusReceipt::Purchased)
                    && inventTrans.PackingSlipReturned == NoYes::No
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == _salesLine.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

            if (inventTrans)
            {
                return MCRSalesLineDetailStatus::PartiallyInvoiced;
            }
            else
            {
                return MCRSalesLineDetailStatus::Delivered;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>caseSalesStatusInvoiced</Name>
				<Source><![CDATA[
    private static MCRSalesLineDetailStatus caseSalesStatusInvoiced(SalesLine _salesLine)
    {
        SalesLine           salesLineReturn;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        // If there is a return line, then a return (and possibly an
        // exchange) exists.
        if (_salesLine.mcrHasReturn())
        {
            select sum(Qty) from inventTrans
                group by StatusReceipt
                where inventTrans.StatusReceipt == StatusReceipt::Purchased
                exists join salesLineReturn
                    where salesLineReturn.InventTransIdReturn == _salesLine.InventTransId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == salesLineReturn.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

            if (inventTrans.Qty)
            {
                return MCRSalesLineDetailStatus::Returned;
            }
            else
            {
                return MCRSalesLineDetailStatus::AuthorizedForReturn;
            }
        }
        else
        {
            return MCRSalesLineDetailStatus::Invoiced;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineDetailedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the order lines's detailed sales status.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line table whose detailed status is to be returned.
    /// </param>
    /// <returns>
    ///     The sales order line's detailed status.
    /// </returns>
    public static MCRSalesLineDetailedStatus salesLineDetailedStatus(SalesLine _salesLine)
    {
        MCRSalesLine    mcrSalesLine = MCRSalesLine::findSalesLine(_salesLine.RecId);
        MCRSalesLineDropShipment mcrSalesLineDropShipment;

        // All parent line types should return a status of 'None'.
        if (  mcrSalesLine.LineType == MCRLineType::ContinuityParent
            || _salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            return MCRSalesLineDetailStatus::None;
        }

        mcrSalesLineDropShipment = MCRSalesLineDropShipment::findSalesLine(_salesLine.RecId);
        if (  mcrSalesLineDropShipment.DropShipStatus > MCRDropShipStatus::None
            && mcrSalesLineDropShipment.DropShipStatus != MCRDropShipStatus::POShipped)
        {
            switch (mcrSalesLineDropShipment.DropShipStatus)
            {
                case MCRDropShipStatus::ToBeDropShipped:
                case MCRDropShipStatus::POCreated:
                    // if the overall line status is canceled the
                    // detailed status should be canceled.
                    if (_salesLine.SalesStatus == SalesStatus::Canceled)
                    {
                        return MCRSalesLineDetailStatus::CustomerCanceled;
                    }
                    else
                    {
                        return MCRSalesLineDetailStatus::ToBeDirectDelivered;
                    }

                case MCRDropShipStatus::POReleased:
                    // If there is a return line, then a return (and possibly an
                    // exchange) exists.
                    if (_salesLine.mcrHasReturn())
                    {
                        // A return exists against this line.  Therefore, break
                        // here so that the detailed status will be calculated the
                        // same as if this were not a direct delivery line.
                        break;
                    }
                    return MCRSalesLineDetailStatus::AtDirectShipper;

                default:
                    // If code reaches here, it indicates that the MCRDropShipStatus
                    // enum has been changed, and the code above needs to be
                    // updated to handle it properly.
                    throw error(strFmt("@MCR10769", funcName()));
            }
        }

        switch (_salesLine.SalesStatus)
        {
            // Still need to properly handle different kinds of cancel statuses.
            case SalesStatus::Canceled:
                return MCRSalesLineDetailStatus::CustomerCanceled;

            case SalesStatus::Invoiced:
                return MCRSalesDetailedStatus::caseSalesStatusInvoiced(_salesLine);

            case SalesStatus::Delivered:
                return MCRSalesDetailedStatus::caseSalesStatusDelivered(_salesLine);

            case SalesStatus::Backorder:
                return MCRSalesDetailedStatus::caseSalesStatusBackorder(_salesLine);

            default:
                return MCRSalesLineDetailStatus::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderDetailedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the order's detailed sales status.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales table whose detailed status is to be returned.
    /// </param>
    /// <returns>
    ///     The sales order's detailed status.
    /// </returns>
    public static MCRSalesOrderDetailedStatus salesOrderDetailedStatus(SalesTable _salesTable)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        SalesLine salesLine, salesLineReturn;
        boolean hasPickedQty, hasOnOrderOrReservedQty, orderIsFullyBackordered;
        boolean hasChildLine = false;
        InventQty invoicedQty, purchasedQty;
        MCRCustPaymTotals    mcrCustPaymTotals;
        #MACROLIB.MCRSalesLineSelect

        switch (_salesTable.SalesStatus)
        {
            case SalesStatus::Backorder:

                if (_salesTable.MCROrderStopped == NoYes::Yes)
                {
                    // Either pending payments or future order date.
                    mcrCustPaymTotals = MCRCustPaymTotals::construct(tableNum(SalesTable), _salesTable.RecId);
                    if (!mcrCustPaymTotals.allPaymentsApproved())
                    {
                        if (_salesTable.mcrIsOrderInFuture())
                        {
                            return MCRSalesOrderDetailStatus::FutureOrderDate;
                        }
                        else
                        {
                            return MCRSalesOrderDetailStatus::Pending;
                        }
                    }
                    if (MCRHoldCodeTrans::findActiveOrderHolds(_salesTable.SalesId))
                    {
                        // Either fraud hold, or 'other' hold.
                        if (_salesTable.mcrFraudHold(false, true)) // if on fraud hold now(meaning hasn't been cleared yet.)
                        {
                            return MCRSalesOrderDetailStatus::FraudHold;
                        }
                        else
                        {
                            return MCRSalesOrderDetailStatus::OnHold;
                        }
                    }
                    return MCRSalesOrderDetailStatus::OpenOrder;
                }

                while select StatusIssue from inventTrans
                    group by StatusIssue asc
                    where inventTrans.PackingSlipReturned == NoYes::No
                       && inventTrans.StatusReceipt == StatusReceipt::None
                       && (inventTrans.StatusIssue != StatusIssue::None 
                          && inventTrans.StatusIssue != StatusIssue::QuotationIssue)
                    exists join inventTransOrigin
                        where inventTransOrigin.ReferenceId == _salesTable.SalesId
                           && inventTransOrigin.ReferenceCategory == InventTransType::Sales
                           && inventTransOrigin.RecId == inventTrans.InventTransOrigin
                {
                    // If any quantity has been sold, we know this order is
                    // partially invoiced, and we can exit immediately.
                    if (inventTrans.StatusIssue == StatusIssue::Sold)
                    {
                        return MCRSalesOrderDetailStatus::PartiallyInvoiced;
                    }
                    else if (inventTrans.StatusIssue == StatusIssue::Deducted)
                    {
                        return MCRSalesOrderDetailStatus::PartiallyDelivered;
                    } 
                    else if (inventTrans.StatusIssue == StatusIssue::Picked)
                    {
                        hasPickedQty = true;
                    }
                    else if (inventTrans.StatusIssue == StatusIssue::OnOrder
                             || InventTrans.StatusIssue == StatusIssue::ReservOrdered
                             || InventTrans.StatusIssue == StatusIssue::ReservPhysical)
                    {
                        hasOnOrderOrReservedQty = true;
                        // Since results are ordrred by StatusIssue, break the loop to improve performance.
                        break;
                    }
                }

                if (hasPickedQty)
                {
                    if (hasOnOrderOrReservedQty)
                    {
                        return MCRSalesOrderDetailStatus::PartiallyPicked;
                    }
                    else
                    {
                        return MCRSalesOrderDetailStatus::Picked;
                    }
                }
                else
                {
                    // Set orderIsFullyBackordered to true.  In the "while select"
                    // below, as soon as a non-backordered line is found, the order
                    // is not considered backordered.
                    orderIsFullyBackordered = true;
                    hasChildLine = false;

                    if (RetailMcrSalesOrderDetailedStatusRetrieveConfirmDlvFlight::instance().isEnabled())
                    {
                        while select RecId, ConfirmedDlv from salesLine
                        where salesLine.SalesId == _salesTable.SalesId
                           && salesLine.SalesStatus == SalesStatus::Backorder
                        {
                            // Backorder is now determined by date and parameter
                            // If even one line is not on backorder, then the order
                            // is not backordered.
                            hasChildLine = true;
                            if (salesLine.ConfirmedDlv + MCROrderParameters::find().BackorderDays >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                            {
                                orderIsFullyBackordered = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        while select RecId from salesLine
                        where salesLine.SalesId == _salesTable.SalesId
                           && salesLine.SalesStatus == SalesStatus::Backorder
                        {
                            // Backorder is now determined by date and parameter
                            // If even one line is not on backorder, then the order
                            // is not backordered.
                            hasChildLine = true;
                            if (salesLine.ConfirmedDlv + MCROrderParameters::find().BackorderDays >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                            {
                                orderIsFullyBackordered = false;
                                break;
                            }
                        }
                    }

                    if (orderIsFullyBackordered && hasChildLine)
                    {
                        return MCRSalesOrderDetailStatus::Backordered;
                    }
                    else
                    {
                        return MCRSalesOrderDetailStatus::InProcessing;
                    }
                }
                // short-circut returns prevent code from reaching this point.  No break required.

            case SalesStatus::Canceled:
                return MCRSalesOrderDetailStatus::Canceled;
                // short-circut returns prevent code from reaching this point.  No break required.

            case SalesStatus::Invoiced:
                // Either Invoiced or Returned.
                if (_salesTable.SalesType == SalesType::ReturnItem)
                {
                    return MCRSalesOrderDetailStatus::Returned;
                }
                else
                {
                    // First determine if this order has any return lines.
                    // The typical scenario will not have return lines,
                    // therefore, for performance reasons, it makes sense to check
                    // this first.
                    select firstonly RecId, InventTransId from salesLine
                        where salesLine.SalesId == _salesTable.SalesId
                        exists join salesLineReturn
                        where salesLineReturn.InventTransIdReturn == salesLine.InventTransId;

                    if (salesLine)
                    {
                        // At this point, we know there are return lines.  Determine
                        // if sold quantity on this order equals the purchased
                        // quantity across all return orders.
                        select sum(Qty) from inventTrans
                            where inventTrans.StatusIssue == StatusIssue::Sold
                                && inventTrans.PackingSlipReturned == NoYes::No
                            exists join inventTransOrigin
                                where inventTransOrigin.InventTransId == salesLine.InventTransId
                                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

                        invoicedQty = inventTrans.Qty;

                        select sum(Qty) from inventTrans
                            where inventTrans.StatusReceipt == StatusReceipt::Purchased
                                && inventTrans.PackingSlipReturned == NoYes::No
                            exists join salesLineReturn
                                where salesLineReturn.InventTransIdReturn == salesLine.InventTransId
                            exists join inventTransOrigin
                                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                                    && inventTransOrigin.InventTransId == salesLineReturn.InventTransId;

                        purchasedQty = inventTrans.Qty;

                        if (invoicedQty == -purchasedQty)
                        {
                            return MCRSalesOrderDetailStatus::Returned;
                        }
                    }

                    return MCRSalesOrderDetailStatus::Invoiced;
                }
                // short-circut returns prevent code from reaching this point.  No break required.

            case SalesStatus::Delivered:
                // Either Delivered or Partially Invoiced.
                select firstonly RecId from salesLine
                    where salesLine.SalesId == _salesTable.SalesId
                        exists join inventTrans
                        where inventTrans.StatusIssue == StatusIssue::Sold
                            && inventTrans.PackingSlipReturned == NoYes::No
                                exists join inventTransOrigin
                                where inventTransOrigin.InventTransId == salesLine.InventTransId
                                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

                if (salesLine)
                {
                    return MCRSalesOrderDetailStatus::PartiallyInvoiced;
                }
                else
                {
                    return MCRSalesOrderDetailStatus::Delivered;
                }
                // short-circut returns prevent code from reaching this point.  No break required.

            default:
                return MCRSalesOrderDetailStatus::None;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>