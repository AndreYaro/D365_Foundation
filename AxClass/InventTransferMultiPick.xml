<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferMultiPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferMultiPick</c> class is the base class for handling the picking of related
///    updates of transfer orders.
/// </summary>
public class InventTransferMultiPick extends InventTransferMulti implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public FormName formName()
    {
        return formStr(InventTransferParmPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
void initParmBuffer(ParmBuffer _inventTransferParmTable)
    {
        InventTransferParmTable     inventTransferParmTable = _inventTransferParmTable;

        super(inventTransferParmTable);
        inventTransferParmTable.UpdateType      = InventTransferUpdateType::PickingList;

        if (this.parmCalledFromReleaseOrder())
        {
            inventTransferParmTable.PickUpdateQty = InventTransferPickUpdateQty::ShipNow;
        }

        inventTransferParmTable.SetupPrintPickList = printSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        IdentifierName ret;

        if (this.parmCalledFromReleaseOrder())
        {
            ret = identifierStr(inventTransferMultiShipReleaseOrder);
        }
        else
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        Query query = super();

        return (query ? query : new QueryRun(queryStr(InventTransferMultiPick)).query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    Always returns true as this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    public InventTransferPrintDataProvider runUpdate(InventTransferParmTable   _inventTransferParmTable)
    {
        InventTransferUpdPick inventTransferUpdPick = InventTransferUpdPick::newParmBuffer(_inventTransferParmTable);
        inventTransferUpdPick.run();

        InventTransferPrintDataProviderPick dataProvider;

        if (!isSkipCreatePrintDataProviderFlightEnabled   ||
            (inventTransferUpdPick.parmIsSomeThingPosted() &&
            _inventTransferParmTable.PrintTransferPickingList))
        {
            dataProvider = InventTransferPrintDataProviderPick::construct();
            dataProvider.parmIsSomeThingPosted(inventTransferUpdPick.parmIsSomeThingPosted());
            dataProvider.parmWmsPickingRoute(inventTransferUpdPick.parmWmsPickingRoute());
        }

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransferMultiPick construct()
    {
        InventTransferMultiPick inventTransferMultiPick = new InventTransferMultiPick();

        return inventTransferMultiPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS78234" + ' - ' + "@SYS77792";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(formStr(InventTransferParmPick), _args.menuItemName()))
        {
            if (_args.parmEnum() == RunChoose::Run)
            {
                boolean calledFromReleaseOrder;

                if (_args.caller() && _args.caller().name() == formStr(InventTransferReleaseOrderPicking))
                {
                    calledFromReleaseOrder = true;
                }

                InventTransferMultiPick inventTransferMultiPick = InventTransferMultiPick::newCalledFromReleaseOrder(calledFromReleaseOrder);
                RunBaseMultiParm::initFromForm(inventTransferMultiPick, _args);

                if (! inventTransferMultiPick.prompt())
                {
                    return;
                }

                inventTransferMultiPick.runOperation();
                inventTransferMultiPick.runReports();

                if (_args && _args.caller())
                {
                    Object formRun = _args.caller();
                    formRun.doFormCache(inventTransferMultiPick.packRecs());
                }
            }
            else
            {
                RunBaseMultiParm::runSpecial(_args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalledFromReleaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>InventTransferMultiPick</c> class.
    /// </summary>
    /// <param name="calledFromReleaseOrder">
    ///    A Boolean value that determines whether the instance should be called from a release order.
    /// </param>
    /// <returns>
    ///    The new server bound instance of the <c>InventTransferMultiPick</c> class.
    /// </returns>
    public static InventTransferMultiPick newCalledFromReleaseOrder(boolean calledFromReleaseOrder)
    {
        InventTransferMultiPick inventTransferMultiPick = InventTransferMultiPick::construct();
        inventTransferMultiPick.parmCalledFromReleaseOrder(calledFromReleaseOrder);

        return inventTransferMultiPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>