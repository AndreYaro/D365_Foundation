<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjQuotationSubmitSend</Name>
	<SourceCode>
		<Declaration><![CDATA[
class psaProjQuotationSubmitSend
{
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    public boolean dialogOk(boolean ok = false)
    {
        boolean ret = ok;

        if (!ret && workflowVersionTable != null)
        {
            WorkflowSubmitDialog workflowSubmitDialog = WorkflowSubmitDialog::construct(workflowVersionTable);
            workflowSubmitDialog.run();

            if (workflowSubmitDialog.parmIsClosedOK())
            {
                ret = true;
                workflowComment =  workflowSubmitDialog.parmWorkflowComment();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
public static void main(Args args)
    {
        PSAProjQuotationSubmitSend         submitToWorkflow = new PSAProjQuotationSubmitSend();
        FormRun callerForm;
        FormDataSource formDs;

        submitToWorkflow.parmWorkflowVersionTable(args.caller().getActiveWorkflowConfiguration());

        if (submitToWorkflow.parmWorkflowVersionTable().RecId)
        {
            if (PSAProjQuotationSubmitSend::validateProjectDates(args.record().RecId) && submitToWorkflow.dialogOk())
            {
                if (PSAProjQuotationSubmitSend::validateQuotationStatus(args.record().RecId))
                {
                    PSAProjQuotationSubmitSend::submitToWorkflow(submitToWorkflow.parmWorkflowVersionTable().ConfigurationId, args.record().RecId, submitToWorkflow.parmWorkflowComment());
                }

                if (SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()),classNum(FormRun)))
                {
                    callerForm = args.caller();
                    formDs = callerForm.dataSource(tableStr(SalesQuotationTable));
                    if (formDs != null)
                    {
                        formDs.research(true);
                        formDs.refresh();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    // Description    : Submits the workflow and executed the report with quotation information
    public static void submitToWorkflow(WorkflowConfigurationId workflowConfigurationId, RecId recId, WorkflowComment comment = '')
    {
        Workflow::activateFromWorkflowConfigurationId(workflowConfigurationId, recId, comment, NoYes::No);
        PSAProjQuotationStateChangeManager::updateStatus(recId,SalesQuotationStatus::Submitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates project dates for all lines of a project sales quotation.
    /// </summary>
    /// <param name = "_recId">The record ID of the sales quotation to validate.</param>
    /// <returns>true if all sales quotation lines have valid project dates; otherwise, false.</returns>
    protected static boolean validateProjectDates(RecId _recId)
    {
        boolean ok = true;

        SalesQuotationTable salesQuotationTable = SalesQuotationTable::findRec(_recId);
        if (salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::Project)
        {
            SalesQuotationLine salesQuotationLine;
            while select salesQuotationLine
                where salesQuotationTable.QuotationId == salesQuotationLine.QuotationId
            {
                ok = salesQuotationLine.validateProjectDate(salesQuotationLine);
                if (!ok)
                {
                    break;
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuotationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates status for a sales quotation.
    /// </summary>
    /// <param name = "_recId">The record ID of the sales quotation to validate.</param>
    /// <returns>true if the sales quotation has a valid status for submitting to workflow; otherwise, false.</returns>
    protected static boolean validateQuotationStatus(RecId _recId)
    {
        SalesQuotationTable salesQuotationTable = SalesQuotationTable::findRec(_recId);

        return (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
            || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>