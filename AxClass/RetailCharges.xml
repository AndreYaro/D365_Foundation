<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCharges</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailCharges</c> class contains retail specifc utility methods for charges.
/// </summary>
public class RetailCharges
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetailOrderWithAdvancedAutoCharges</Name>
				<Source><![CDATA[
    internal static boolean isRetailOrderWithAdvancedAutoCharges(SalesTable salesTable)
    {
        RetailSalesTable retailSalesTable;

        select firstonly retailSalesTable where retailSalesTable.SalesTable == salesTable.RecId;

        return retailSalesTable.RecId != 0 && retailSalesTable.RetailOrder == NoYes::Yes && RetailParameters::isRetailAutoChargesEnabledAndInUse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCharge</Name>
				<Source><![CDATA[
    internal static boolean isRetailCharge(MarkupTrans markupTrans)
    {
        SalesTable salesTable;
        
        salesTable = RetailCharges::getSalesTableForMarkupTrans(markupTrans);

        return (salesTable.RecId != 0 && salesTable.isRetailSale());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAutoLineAlreadyExists</Name>
				<Source><![CDATA[
    internal static boolean markupAutoLineAlreadyExists(MarkupTransInsertParameters markupTransInsertParameters, MarkupAutoLine markupAutoLine)
    {
        MarkupTrans markupTrans;

        if (!markupTransInsertParameters.IsForRetailOrderWithAdvancedAutoCharges)
        {
            return false;
        }

        // See if a charge for this markup auto line is already on the source
        select firstonly markupTrans
            where markupTrans.TransTableId == markupTransInsertParameters.Source.TableId
            && markupTrans.TransRecId == markupTransInsertParameters.Source.RecId
            && markupTrans.MarkupAutoLineRecId == markupAutoLine.RecId;

        // Skip if the charge is already there
        return markupTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTieredCharges</Name>
				<Source><![CDATA[
    internal static void deleteTieredCharges(SalesTable salesTable)
    {
        RetailCharges::deleteNotOverriddenTieredCharges(salesTable);
        RetailProrateChargesToMatchingSalesLines::deleteAdvancedProratedCharges(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTableForMarkupTrans</Name>
				<Source><![CDATA[
    internal static SalesTable getSalesTableForMarkupTrans(MarkupTrans markupTrans)
    {
        SalesTable salesTable;
        SalesLine salesLine;

        if (markupTrans.TransTableId == tableNum(SalesTable))
        {
            select firstonly salesTable
                where salesTable.RecId == markupTrans.TransRecId;
        }
        else if (markupTrans.TransTableId == tableNum(SalesLine))
        {
            select firstonly salesLine
                where salesLine.RecId == markupTrans.TransRecId;

            select firstonly salesTable
                where salesLine.SalesId == salesTable.SalesId;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNotOverriddenTieredCharges</Name>
				<Source><![CDATA[
    private static void deleteNotOverriddenTieredCharges(SalesTable salesTable)
    {
        MarkupTrans markupTrans;

        delete_from markupTrans
        where markupTrans.TransRecId     == salesTable.RecId
           && markupTrans.TransTableId   == salesTable.TableId
           && markupTrans.IsAdvancedLineProrated == NoYes::No
           && markupTrans.IsTieredCharge == NoYes::Yes
           && markupTrans.IsOverriddenLine == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChargesToNotBeOverridden</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the passed in sales table is a retail order, and advanced auto charges is on. This will set all of the header and line charges on it to be not overridden.
    /// This means they will be deleted and recalculate when tiered charges are calculated.
    /// </summary>
    /// <param name = "salesTable">The sales order that has the header and line charges to set as not overridden.</param>
    [Hookable(false)]
    public static void setChargesToNotBeOverridden(SalesTable salesTable)
    {
        MarkupTrans markupTrans;
        SalesLine salesLine;

        if (RetailCharges::isRetailOrderWithAdvancedAutoCharges(salesTable))
        {

            ttsbegin;

            // iterate over all header charges
            while select forupdate markupTrans
            where markupTrans.TransTableId == salesTable.TableId
            && markupTrans.TransRecId == salesTable.RecId
            {
                RetailCharges::setChargeAsNotOverridden(markupTrans);
            }

            var salesLinesQuery = salesTable.linesQuery();
            var qr = new QueryRun(salesLinesQuery);

            // iterate over all line charges
            while (qr.next())
            {
                salesLine = qr.get(tableNum(SalesLine));
            
                while select forupdate markupTrans
                where markupTrans.TransTableId == salesLine.TableId
                && markupTrans.TransRecId == salesLine.RecId
                {
                    RetailCharges::setChargeAsNotOverridden(markupTrans);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChargeAsNotOverridden</Name>
				<Source><![CDATA[
    private static void setChargeAsNotOverridden(MarkupTrans markupTrans)
    {
        markupTrans.IsOverriddenLine = false;
        markupTrans.IsOverriddenProratedLine = false;

        markupTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupMatchesChannelFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds whether markup matches the channel filter or not.
    /// </summary>
    /// <param name = "_markupAutoTable"> MarkupAutoTable buffer.</param>
    /// <param name = "_source"> Source table buffer to find the OMInternalOrganization record.</param>
    /// <param name = "_moduleType">Module type to check.</param>
    /// <returns>True if module type not equal to vend, advanced auto charges and filtering auto charges by channel are enabled or if auto charge satisfies the filter based on retail channel code, otherwise false. </returns>
    internal static boolean markupMatchesChannelFilter(MarkupAutoTable _markupAutoTable, Common _source, MarkupModuleType _moduleType)
    {
        // If module type not equal to vend, advanced auto charges and filtering auto charges by channel are not enabled then the auto charge should apply to all stores.
        if (!(_moduleType != MarkupModuletype::Vend && RetailParameters::find().UseAdvancedAutoCharges && FeatureStateProvider::isFeatureEnabled(RetailFilterAutoChargesByChannelEnableFeature::instance())))
        {
            return true;
        }

        eventSource.EventWriteFilterAutoChargeByChannel(funcName(), _markupAutoTable.RecId);

        RefRecId omInternalOrganization = RetailCharges::getOMInternalOrganizationFromSource(_source);

        utcdatetime dateToday = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::utcNow()), 0);

        // Determine if the charge satisfies the filter based on Table/Group/All
        boolean isFilterSatisfied = false;

        switch (_markupAutoTable.RetailChannelCode)
        {
            case TableGroupAll::All:
                isFilterSatisfied = true;
                break;

            case TableGroupAll::Table:
                RetailChannelTable retailChannelTable = RetailChannelTable::findByRetailChannelId(_markupAutoTable.RetailChannelRelation);

                isFilterSatisfied = (omInternalOrganization == retailChannelTable.OMOperatingUnitId);
                break;

            case TableGroupAll::GroupId:
                // Find all ancestors in the hierarchy of the current channel.
                // Check if one of them is included in the charge's configuration for filtering by channel.
                // Verify that the hierarchy purpose is still set as the default.
                RetailInternalOrgInheritanceExploded retailInternalOrgInheritanceExploded;
                RetailMarkupAutoChannelLine retailMarkupAutoChannelLine;
                OMHierarchyPurpose omHierarchyPurpose;

                select firstonly validTimeState(dateToday) retailInternalOrgInheritanceExploded
                    where retailInternalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::RetailAutoCharge
                       && retailInternalOrgInheritanceExploded.InternalOrganization == omInternalOrganization
                join retailMarkupAutoChannelLine
                    where retailMarkupAutoChannelLine.RetailChannelRelation == _markupAutoTable.RetailChannelRelation
                       && retailMarkupAutoChannelLine.OMInternalOrganizationId == retailInternalOrgInheritanceExploded.AncestorInternalOrg
                join omHierarchyPurpose
                    where omHierarchyPurpose.HierarchyType == retailMarkupAutoChannelLine.OMHierarchyTypeId
                       && omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::RetailAutoCharge
                       && omHierarchyPurpose.IsDefault == NoYes::Yes;

                // If the current channel or one of its ancestors was found, then the charge should apply
                isFilterSatisfied = (retailMarkupAutoChannelLine.RecId != 0);
                break;
        }

        return isFilterSatisfied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOMInternalOrganizationFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the OMInternalOrganization of the given record by going to the Retail* record.
    /// </summary>
    /// <param name = "_source">The record whose OMInternalOrganization should be found. Only SalesTable, SalesLine, SalesQuotationTable, and SalesQuotationLine are supported.</param>
    internal static RefRecId getOMInternalOrganizationFromSource(Common _source)
    {
        RefRecId omInternalOrganization;

        if (_source.TableId == tableNum(SalesTable))
        {
            SalesTable salesTable = _source;
            RetailSalesTable retailSalesTable = RetailSalesTable::findSalesTable(salesTable);
            omInternalOrganization = retailSalesTable.OMInternalOrganization;
        }
        else if (_source.TableId == tableNum(SalesLine))
        {
            SalesLine salesLine = _source;
            SalesTable salesTable = salesLine.salesTable();
            RetailSalesTable retailSalesTable = RetailSalesTable::findSalesTable(salesTable);
            omInternalOrganization = retailSalesTable.OMInternalOrganization;
        }
        else if (_source.TableId == tableNum(SalesQuotationTable))
        {
            SalesQuotationTable salesQuotationTable = _source;
            RetailSalesQuotationTable retailSalesQuotationTable = RetailSalesQuotationTable::findSalesQuotationTable(salesQuotationTable);
            omInternalOrganization = retailSalesQuotationTable.OMInternalOrganization;
        }
        else if (_source.TableId == tableNum(SalesQuotationLine))
        {
            SalesQuotationLine salesQuotationLine = _source;
            SalesQuotationTable salesQuotationTable = salesQuotationLine.salesQuotationTable();
            RetailSalesQuotationTable retailSalesQuotationTable = RetailSalesQuotationTable::findSalesQuotationTable(salesQuotationTable);
            omInternalOrganization = retailSalesQuotationTable.OMInternalOrganization;
        }
        else
        {
            omInternalOrganization = 0;
        }

        return omInternalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesExchangeParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the parameter for MiscChargesExchange.
    /// </summary>
    internal static str getMiscChargesExchangeParm()
    {
        return 'Recap';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesReturnParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the parameter for MiscChargesReturn.
    /// </summary>
    internal static str getMiscChargesReturnParm()
    {
        return 'ReturnRecap';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>