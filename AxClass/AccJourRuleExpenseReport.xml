<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleExpenseReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::Tax)
]
class AccJourRuleExpenseReport extends AccountingJournalizingRule
{
    TrvExpTrans                     trvExpTrans;
    TrvCostType                     trvCostType;
    TrvPayMethod                    trvPayMethod;
    SourceDocumentLineItemITax      iTax;
    TaxDirection                    taxDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        RefRecId                        sourceDocumentLineExpense;

        super();

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxDirection = iTax.parmTaxDirection();
            sourceDocumentLineExpense = sourceDocumentLineItem.parmParentSourceDocumentLine().RecId;
        }
        else
        {
            sourceDocumentLineExpense = sourceDocumentLineItem.parmSourceDocumentLine().RecId;
        }

        trvExpTrans = TrvExpTrans::findBySourceDocumentLine(sourceDocumentLineExpense);

        changecompany(CompanyInfo::findRecId(trvExpTrans.LegalEntity).DataArea)
        {
            trvCostType = TrvCostType::find(trvExpTrans.CostType);
        }

        trvPayMethod = TrvPayMethod::find(trvExpTrans.PayMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType               ledgerPostingType = LedgerPostingType::LedgerJournal;
        TrvPartyEmployeeRelationship    trvEmpSetup;
        LedgerDimensionAccount          ledgerDimension;

        if (!trvPayMethod)
        {
            this.initialize();
        }

        if (iTax && taxDirection == TaxDirection::UseTax)
        {
            return LedgerPostingType::Tax;
        }

        if (trvPayMethod)
        {
            switch (trvPayMethod.PostMethod)
            {
                case TrvPostMethod::Vendor :
                    ledgerPostingType = LedgerPostingType::VendBalance;

                    ledgerDimension = VendLedgerAccounts::summaryLedgerDimension(
                        LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvPayMethod.parmOffsetLedgerDimension()),
                                            '', false);
                    break;
                case TrvPostMethod::Bank:
                    ledgerPostingType = LedgerPostingType::Bank;
                    ledgerDimension = BankAccountTable::findByLedgerDimension(trvPayMethod.parmOffsetLedgerDimension()).LedgerDimension;
                    break;
                case TrvPostMethod::Employee:
                    trvEmpSetup = TrvPartyEmployeeRelationship::find(trvExpTrans.CreatingWorker);
                    if (trvEmpSetup)
                    {
                        if (!trvEmpSetup.parmLedgerDimension())
                        {
                            warning(strFmt("@SYS305453",HcmWorker::find(trvExpTrans.CreatingWorker).PersonnelNumber));
                        }
                        switch (trvEmpSetup.AccountType)
                        {
                            case LedgerJournalACType::Bank :
                                ledgerPostingType = LedgerPostingType::Bank;
                                ledgerDimension = BankAccountTable::findByLedgerDimension(trvEmpSetup.parmLedgerDimension()).LedgerDimension;
                                break;

                            case LedgerJournalACType::Cust :
                                ledgerPostingType = LedgerPostingType::CustBalance;
                                ledgerDimension = CustLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvEmpSetup.parmLedgerDimension()), '', false);
                                break;

                            case LedgerJournalACType::Ledger :
                                ledgerPostingType = LedgerPostingType::LedgerJournal;
                                ledgerDimension = trvEmpSetup.LedgerDimension;
                                break;

                            case LedgerJournalACType::Vend:
                                ledgerPostingType = LedgerPostingType::VendBalance;
                                ledgerDimension = VendLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvEmpSetup.parmLedgerDimension()), '', false);
                                break;

                            case LedgerJournalACType::FixedAssets:
                            case LedgerJournalACType::Project:
                            default:
                                throw error(strFmt("@SYS305184",HcmWorker::find(trvEmpSetup.Worker).PersonnelNumber));
                        }
                    }
                    else
                    {
                        throw error("@Expense:WorkerMissingVendorMapping");
                    }
                    break;

                default:
                    ledgerPostingType = LedgerPostingType::LedgerJournal;
                    ledgerDimension = trvPayMethod.OffsetLedgerDimension;
                    break;
            }
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimension);
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Debit;

        if (!trvExpTrans)
        {
            this.initialize();
        }

        if (iTax)
        {
            switch (taxDirection)
            {
                case TaxDirection::IncomingTax:
                case TaxDirection::UseTax:
                    if (this.parmAmount() >= 0.0)
                    {
                        side = DebitCredit::Credit;
                    }
                    break;

                case TaxDirection::OutgoingTax:
                    if (this.parmAccountingdistribution().TransactionCurrencyAmount >= 0.0)
                    {
                        side = DebitCredit::Credit;
                    }
                    break;
            }
        }
        else
        {
            // This is for offset/balance SLJAE, this' the opposite of main expense line
            if (trvExpTrans.ExpType == TrvExpType::Advance)
            {
                side = trvExpTrans.AmountCurr > 0.0 ? DebitCredit::Debit : DebitCredit::Credit;
            }
            else
            {
                side = trvExpTrans.AmountCurr > 0.0 ? DebitCredit::Credit : DebitCredit::Debit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummarize</Name>
				<Source><![CDATA[
    public boolean parmSummarize()
    {
        if (TrvParameters::find().AllowGroupingForPostTransactions == NoYes::Yes)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>