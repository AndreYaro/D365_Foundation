<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_PostCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to update original expense transaction and post accounting adjustments.
/// </summary>
public class ProjAdjustAccounting_PostCost extends ProjAdjustAccounting_Post
{
    private ProjCostTrans projCostTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOrigVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the voucher passed is associated with the original <c>ProjCostTrans</c> posted transaction.
    /// </summary>
    /// <param name = "_voucher">A voucher.</param>
    /// <returns>
    ///  true if <c>ProjCostTrans</c> has the voucher; otherwise, false.
    /// </returns>
    public boolean checkOrigVoucher(Voucher _voucher)
    {
        return projCostTrans.VoucherJournal == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCostTrans</Name>
				<Source><![CDATA[
    public ProjCostTrans parmProjCostTrans(ProjCostTrans _projCostTrans = projCostTrans)
    {
        projCostTrans = _projCostTrans;
        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _origTrans)
    {
        super();
        projCostTrans = _origTrans as ProjCostTrans;
		
		if (!projCostTrans)
        {
            throw error(Error::missingRecord(tableStr(ProjCostTrans)));
        }
        this.parmOrigTransId(projCostTrans.TransId);
        this.parmNewVoucher(projCostTrans.VoucherJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjInvoiceCost</Name>
				<Source><![CDATA[
	private void updateProjInvoiceCost(ProjCostTrans _projCostTrans, ProjTransIdBase _projTransId, voucher _voucher)
    {
        ProjProposalJour projProposalJour;
        ProjInvoiceJour projInvoiceJour;
        ProjProposalCost projProposalCost;
        ProjInvoiceCost projInvoiceCost;
        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();

        while select forupdate projProposalJour
            join forupdate projProposalCost
            where projProposalJour.ProposalId == projProposalCost.ProposalId
            && projProposalCost.TransId == _projCostTrans.TransId
            outer join forupdate projInvoiceJour
            join forupdate projInvoiceCost
            where projInvoiceJour.ProposalId == projProposalJour.ProposalId
            && projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
            && projInvoiceCost.InvoiceDate == projInvoiceJour.InvoiceDate
            && projInvoiceCost.TransId == projProposalCost.TransId
        {
            projProposalCost.TransId = _projTransId;
            projProposalCost.update();
   
            // ProjProposalJour.LedgerVoucher only needs to be updated if any
            // voucher entry for an invoice was adjusted.
            if(projProposalJour.LedgerVoucher
                && unAdjustedSet
                && !unAdjustedSet.in(projProposalJour.LedgerVoucher))
            {
                projProposalJour.LedgerVoucher = _voucher;
                projProposalJour.update();
            }

            if (projInvoiceJour)
            {
                if (!unAdjustedSet.in(projInvoiceJour.LedgerVoucher))
                {
                    projInvoiceJour.LedgerVoucher = _voucher;
                    projInvoiceJour.update();
                }
                
                projInvoiceCost.TransId = _projTransId;
                projInvoiceCost.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjCostTrans</Name>
				<Source><![CDATA[
	private void updateProjCostTrans(ProjCostTrans _projCostTrans, ProjTransIdBase _projTransID, voucher _subledgerVoucher)
    {
        this.updateRelatedTablesWithNewDimension(_projCostTrans, _projTransID, _subledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTables</Name>
				<Source><![CDATA[
    private void updateRelatedTables(ProjCostTrans _projCostTrans, ProjTransIdBase _projTransID, voucher _subledgerVoucher)
    {
        // Cost
        ProjCostTransCost projCostTransCost;
        update_recordset projCostTransCost
        setting
            TransId = _projTransID
        where projCostTransCost.TransId == _projCostTrans.TransId;

        // Sale
        ProjCostTransSale projCostTransSale;
        update_recordset projCostTransSale
        setting
            TransId = _projTransID
        where projCostTransSale.TransId == _projCostTrans.TransId;

        this.updateProjInvoiceCost(_projCostTrans, _projTransID, _subledgerVoucher);

        ProjPostedTransTable projPostedTransTable;
        select firstonly forupdate projPostedTransTable
            where projPostedTransTable.TransId == _projCostTrans.TransId;

        projPostedTransTable.TransId = _projTransID;
        projPostedTransTable.update();

        ProjCostTrans projCostTransBuff;
        select firstonly forupdate projCostTransBuff
            where projCostTransBuff.TransId == _projCostTrans.TransId;
        
        projCostTransBuff.TransId = _projTransID;

        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
        // Only update voucher if there was any adjustments made on the original voucher.
        if (!unAdjustedSet.in(projCostTransBuff.VoucherJournal) && _subledgerVoucher)
        {
            projCostTransBuff.VoucherJournal = _subledgerVoucher;
        }

        projCostTransBuff.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTablesWithNewDimension</Name>
				<Source><![CDATA[
    private void updateRelatedTablesWithNewDimension(ProjCostTrans _projCostTrans, ProjTransIdBase _projTransID, voucher _subledgerVoucher)
    {
        DimensionDefault mergedDimension;
        if (dataContract)
        {
            mergedDimension = dataContract.parmMergedDimension();
        }

        if (!mergedDimension)
        {
            this.updateRelatedTables(_projCostTrans, _projTransID, _subledgerVoucher);
        }
        else
        {
            // Cost
            ProjCostTransCost projCostTransCost;
            update_recordset projCostTransCost
            setting
                TransId = _projTransID, DefaultDimension = mergedDimension
            where projCostTransCost.TransId == _projCostTrans.TransId;

            // Sale
            ProjCostTransSale projCostTransSale;
            update_recordset projCostTransSale
            setting
                TransId = _projTransID, DefaultDimension = mergedDimension
            where projCostTransSale.TransId == _projCostTrans.TransId;

            this.updateProjInvoiceCost(_projCostTrans, _projTransID, _subledgerVoucher);

            // Posted Trans
            ProjPostedTransTable projPostedTransTable = projPostedTransTable::findByTransId(_projCostTrans.TransId, true);
            projPostedTransTable.TransId = _projTransID;
            projPostedTransTable.DefaultDimension = mergedDimension;
            projPostedTransTable.update();

            // Parent trans record
            ProjCostTrans projCostTransBuff = ProjCostTrans::find(_projCostTrans.TransId, true);
            projCostTransBuff.TransId = _projTransID;
            projCostTransBuff.DefaultDimension = mergedDimension;

            Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
            // Only update voucher if there was any adjustments made on the original voucher.
            if (!unAdjustedSet.in(projCostTransBuff.VoucherJournal) && _subledgerVoucher)
            {
                projCostTransBuff.VoucherJournal = _subledgerVoucher;
            }

            projCostTransBuff.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method for updating original posted expense transaction.
    /// </summary>
    /// <param name = "_postedTrans">
    /// Original posted project expense transaction that needs to be updated.
    /// </param>
    /// <param name = "_newAdjTransId">
    /// Newly generated transaction ID.
    /// </param>
    /// <param name = "_newAdjVoucher">
    /// Newly generated Adjustment voucher.
    /// </param>
    public void updateProjTrans()
    {
        ProjTransIdBase transId = this.parmNewTransId();
        Voucher voucher = this.parmNewVoucher();
  
        if (transId && voucher)
        {
            this.updateProjCostTrans(projCostTrans, transId, voucher);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>