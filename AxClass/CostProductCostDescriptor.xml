<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostProductCostDescriptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostProductCostDescriptor</c> class describes product cost entries.
/// </summary>
public class CostProductCostDescriptor extends CostProductCostQuantityDescriptor
{
    CostGroupId         costGroupId;
    CostEntrySource     source;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    public str key()
    {
        str key = CostProductCostDescriptor::createKey(costObject, costGroupId, source, reconciledEvent);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostGroupId</Name>
				<Source><![CDATA[
    public CostGroupId parmCostGroupId(CostGroupId _costGroupId = costGroupId)
    {
        costGroupId = _costGroupId;

        return costGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource</Name>
				<Source><![CDATA[
    public CostEntrySource parmSource(CostEntrySource _source = source)
    {
        source = _source;

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconciledDescriptor</Name>
				<Source><![CDATA[
    public CostEntryDescriptorBase reconciledDescriptor()
    {
        return CostProductCostDescriptor::newDescriptor(costObject, costGroupId, source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostProductCostDescriptor construct()
    {
        return new CostProductCostDescriptor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a unique key for the descriptor.
    /// </summary>
    /// <param name="_costObject">
    /// The desciptors <c>CostObject</c>.
    /// </param>
    /// <param name="_costGroupId">
    /// The desciptors <c>CostGroupId</c>.
    /// </param>
    /// <param name="_source">
    /// The desciptors <c>CostEntrySource</c>; optinal.
    /// </param>
    /// <param name="_recociledEvent">
    /// The descriptors <c>CostEntryBase</c>; optinal.
    /// </param>
    /// <returns>
    /// A unique key for the descriptor.
    /// </returns>
    private static str createKey(
        CostObject      _costObject,
        CostGroupId     _costGroupId,
        CostEntrySource _source = null,
        CostEvent       _recociledEvent = null)
    {
        str key = _costObject.key() + '#' + _costGroupId;
        if (_source)
        {
            key += '#' + _source.key();
        }
        key += '#';
        if (_recociledEvent)
        {
            key += '#' + int642str(_recociledEvent.parmId());
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCostEntryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a descritor for a <c>CostEntryTable</c> buffer.
    /// </summary>
    /// <param name="_entry">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <returns>
    /// A descritor for a <c>CostEntryTable</c> buffer.
    /// </returns>
    public static CostProductCostDescriptor newFromCostEntryTable(CostEntryTable _entry)
    {
        CostEvent                   recociledEvent;

        if (_entry.ReconciledEvent)
        {
            recociledEvent = CostEvent::newCostEventTable(CostEventTable::findRecId(_entry.ReconciledEvent));
        }

        return CostProductCostDescriptor::newDescriptor(CostInventoryCostObject::newCostObject(_entry.DataAreaId, _entry.ItemId, _entry.InventDimId),
                                                        _entry.CostGroupId,
                                                        CostEntrySource::newCostEntryTable(_entry),
                                                        recociledEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostProductCostDescriptor</c> class from the desciptor <c>CostObject</c>, <c>CostGroupId</c> and <c>CostEntrySource</c>.
    /// </summary>
    /// <param name="_costObject">
    /// The desciptors <c>CostObject</c>.
    /// </param>
    /// <param name="_costGroupId">
    /// The desciptors <c>CostGroupId</c>.
    /// </param>
    /// <param name="_source">
    /// The desciptors <c>CostEntrySource</c>; optinal.
    /// </param>
    /// <param name="_recociledEvent">
    /// The descriptors <c>CostEntryBase</c>; optinal.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductCostDescriptor</c> class.
    /// </returns>
    public static CostProductCostDescriptor newDescriptor(
    CostObject      _costObject,
    CostGroupId     _costGroupId,
    CostEntrySource _source = null,
    CostEvent       _recociledEvent = null)
    {
        CostProductCostDescriptor   descriptor;

        str key = CostProductCostDescriptor::createKey(_costObject, _costGroupId, _source, _recociledEvent);

        descriptor = SysTransactionScopeCache::get(classStr(CostProductCostDescriptor), key, descriptor);

        if (!descriptor)
        {
            descriptor = CostProductCostDescriptor::construct();
            descriptor.parmMeasure(CostMeasure::ProductCost);
            descriptor.parmCostObject(_costObject);
            descriptor.parmCostGroupId(_costGroupId);
            descriptor.parmSource(_source);
            descriptor.parmReconciledEvent(_recociledEvent);

            SysTransactionScopeCache::set(classStr(CostProductCostDescriptor), key, descriptor);
        }

        return descriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostProductCostDescriptor</c> class from another descriptor and a source of cost.
    /// </summary>
    /// <param name="_descriptor">
    /// The descriptor to create the descriptor from.
    /// </param>
    /// <param name="_source">
    /// An instance of the <c>CostEntrySource</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductCostDescriptor</c> descritor class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The descriptor cannot be created from the specified descriptor.
    /// </exception>
    public static CostProductCostDescriptor newFromDescriptor(
    CostEntryDescriptorBase    _descriptor,
    CostEntrySource            _source)
    {
        CostProductCostDescriptor           descriptor;

        switch (classIdGet(_descriptor))
        {
            case classNum(CostRegisteredQuantityDescriptor):
                descriptor = CostProductCostDescriptor::newFromDescriptor(CostProductCostQuantityDescriptor::newFromDescriptor(_descriptor), _source);
                break;
            case classNum(CostProductCostQuantityDescriptor):
                CostProductCostQuantityDescriptor productCostQuantityDescriptor = _descriptor;
                CostInventoryCostObject inventoryCostObject = productCostQuantityDescriptor.parmCostObject();
                CostGroupId costGroupId = InventTable::find(inventoryCostObject.parmItemId()).costGroup();
                descriptor = CostProductCostDescriptor::newDescriptor(productCostQuantityDescriptor.parmCostObject(), costGroupId, _source);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return descriptor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
