<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyVendTableCumulateDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableCumulateDialog</c> class serves to cumulate selected rebates.
/// </summary>
class MCRRoyaltyVendTableCumulateDialog extends RunBaseBatch implements BatchRetryable
{
    VendAccount                         vendAccount;
    StartDate                           startDate;
    EndDate                             endDate;
    DialogField                         diagVendAccount;
    DialogField                         diagStartDate;
    DialogField                         diagEndDate;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        vendAccount,
        startDate,
        endDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the vendor and date range fields to the dialog box.
    /// </summary>
    /// <returns>
    /// The dialog box object.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialogRunbase = super();

        diagVendAccount = dialogRunbase.addFieldValue(
                                extendedtypestr(VendAccount),
                                vendAccount,
                                "@SYS80105",
                                "@SYS14048");
        diagStartDate = dialogRunbase.addFieldValue(
                                extendedtypestr(StartDate),
                                startDate,
                                "@SYS6255",
                                "@SYS6255");
        diagEndDate = dialogRunbase.addFieldValue(
                                extendedtypestr(EndDate),
                                endDate,
                                "@SYS22882",
                                "@SYS22882");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dialog vendor and date range values.
    /// </summary>
    /// <returns>
    /// true if the values were retrieved successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        vendAccount     = diagVendAccount.value();
        startDate       = diagStartDate.value();
        endDate         = diagEndDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the application module value.
    /// </summary>
    /// <returns>
    /// The vendor application module value.
    /// </returns>
    public SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substantiates the <c>MCRRoyaltyVendTableCumulateDialog</c> object.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the dialog object parameters.
    /// </summary>
    /// <returns>
    /// The list of stored parameters.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the cumulate royalty functionality.
    /// </summary>
    public void run()
    {
        MCRRoyaltyVendTable::cumulateRoyalties(vendAccount, startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the last parameters saved.
    /// </summary>
    /// <param name="_packedClass">
    /// The list of stored parameters.
    /// </param>
    /// <returns>
    /// true if the restore succeded; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates dialog box values.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object that called the cumulate.
    /// </param>
    /// <returns>
    /// true if the vendor exists; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        if (vendAccount)
        {
            ret = VendTable::checkExist(vendAccount);
        }
        else
        {
            ret = checkFailed("@SYS328158");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>MCRRoyaltyVendTableCumulateDialog</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MCRRoyaltyVendTableCumulateDialog</c> class.
    /// </returns>
    public static MCRRoyaltyVendTableCumulateDialog construct()
    {
        return new MCRRoyaltyVendTableCumulateDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the class description.
    /// </summary>
    /// <returns>
    /// The class description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@MCR4410060";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the <c>MCRRoyaltyVendTableCumulateDialog</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed to the class.
    /// </param>
    public static void main(Args _args)
    {
        MCRRoyaltyVendTableCumulateDialog mcrRoyaltyVendTableCumulateDialog = MCRRoyaltyVendTableCumulateDialog::construct();

        try
        {
            if (mcrRoyaltyVendTableCumulateDialog.prompt())
            {
                mcrRoyaltyVendTableCumulateDialog.runOperation();

                Common record = _args.record();
                if (record && FormDataUtil::getFormDataSource(record))
                {
                    FormDataSource mcrRoyaltyVendTable_ds = FormDataUtil::getFormDataSource(record);
                    mcrRoyaltyVendTable_ds.research();
                }
            }
        }
        catch (Exception::Error)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>