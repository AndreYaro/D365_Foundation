<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BusinessDocumentSubmissionController</c> class acts as a controller for the
///    <c>BusinessDocumentSubmissionService</c> service.
/// </summary>
public class BusinessDocumentSubmissionController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BusinessDocumentSubmissionController</c> class.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>Args</c> class.
    /// </param>
    /// <returns>
    /// A new instance of <c>BusinessDocumentSubmissionController</c> class.
    /// </returns>
    public static SysOperationController construct(Args _args)
    {
        SysOperationController controller = new BusinessDocumentSubmissionController(
            classStr(BusinessDocumentSubmissionService),
            methodStr(BusinessDocumentSubmissionService, submit),
            SysOperationExecutionMode::Synchronous);

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BusinessDocumentSubmissionController::newFromArgs(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BusinessDocumentSubmissionController</c> class based on an instance of the <c>Args</c> class.
    /// </summary>
    /// <param name = "_args">An instance of the <c>Args</c> class.</param>
    /// <returns>A new instance of the <c>BusinessDocumentSubmissionController</c> class.</returns>
    internal static BusinessDocumentSubmissionController newFromArgs(Args _args)
    {
        BusinessDocumentSubmissionController businessDocumentSubmissionController;
        BusinessDocumentSubmissionContract businessDocumentSubmissionContract;

        businessDocumentSubmissionController = BusinessDocumentSubmissionController::construct(_args);

        // get data contract
        // the string should be the same as the parameter name!
        businessDocumentSubmissionContract =
            businessDocumentSubmissionController.getDataContractObject(businessDocumentSubmissionController.getContractParameterName()) as BusinessDocumentSubmissionContract;

        if (BusinessDocumentSubmissionController::isQueryUpdateRequired(businessDocumentSubmissionContract))
        {
            businessDocumentSubmissionContract.initQuery();

            businessDocumentSubmissionController.queryChanged(
                strFmt('%1.parmQuery', businessDocumentSubmissionController.getContractParameterName()),
                businessDocumentSubmissionContract.getQuery());
        }

        return businessDocumentSubmissionController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryUpdateRequired</Name>
				<Source><![CDATA[
    private static boolean isQueryUpdateRequired(BusinessDocumentSubmissionContract _contract)
    {
        Counter documentTypesRecordCount = BusinessDocumentSubmissionController::getBusinessDocumentTypesRecordCount();

        return _contract && _contract.getQuery().dataSourceCount() != documentTypesRecordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessDocumentTypesRecordCount</Name>
				<Source><![CDATA[
    private static Counter getBusinessDocumentTypesRecordCount()
    {
        Counter ret = 0;
        BusinessDocumentTypes businessDocumentTypes;

        while select businessDocumentTypes
            group by businessDocumentTypes.TableName
            where (businessDocumentTypes.LegalEntityId == curExt() || !businessDocumentTypes.LegalEntityId)
        {
            ++ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractParameterName</Name>
				<Source><![CDATA[
    private str getContractParameterName()
    {
        SysDictMethod dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, className2Id(this.parmClassName()), this.parmMethodName());
        return dictMethod.parameterName(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>