<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceAttributeCustomerProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PriceAttributeProvider]
internal final class PriceAttributeCustomerProvider implements IPriceAttributeProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    public Common lookupReference(PriceAttributeDefinition attribute, FormReferenceControl formControl)
    {
        return formControl.lookupReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAllowedValues</Name>
				<Source><![CDATA[
    public void lookupAllowedValues(PriceAttributeDefinition attribute, FormStringControl formControl)
    {
        if (attribute.PredefinedField == PricePredefinedField::CustAccountNum)
        {
            CustTable::lookupCustomer(formControl);
            return ;
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(this.tableId(attribute), formControl);
        sysTableLookup.addLookupfield(this.fieldId(attribute));
   
        Query query = new Query();
        query.addDataSource(this.tableId(attribute));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    internal TableId tableId(PriceAttributeDefinition attribute)
    {
        switch (attribute.PredefinedField)
        {
            case PricePredefinedField::CustAccountNum:
                return tableNum(CustTable);
            case PricePredefinedField::CustGroup:
                return tableNum(CustGroup);
            case PricePredefinedField::CustSegment:
                return tableNum(smmBusRelSegmentGroup);

            case PricePredefinedField::CustType:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        throw error(strFmt('@UnifiedPricing:PriceAttributeProviderNotSupported', classStr(PriceAttributeCustomerProvider), attribute.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId</Name>
				<Source><![CDATA[
    internal FieldId fieldId(PriceAttributeDefinition attribute)
    {
        switch (attribute.PredefinedField)
        {
            case PricePredefinedField::CustAccountNum:
                return fieldNum(CustTable, AccountNum);
            case PricePredefinedField::CustGroup:
                return fieldNum(CustGroup, CustGroup);
            case PricePredefinedField::CustSegment:
                return fieldNum(smmBusRelSegmentGroup, SegmentId);

            case PricePredefinedField::CustType:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        throw error(strFmt('@UnifiedPricing:PriceAttributeProviderNotSupported', classStr(PriceAttributeCustomerProvider), attribute.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    public void jumpRef(PriceAttributeDefinition attribute, FormControl formControl)
    {
        FormStringControl stringControl = formControl;
        Args args = new Args();
        MenuFunction menuFunction;
        switch (attribute.PredefinedField)
        {
            case PricePredefinedField::CustAccountNum:
                CustTable custTable = CustTable::find(stringControl.text());
                args.record(custTable);
                menuFunction = new MenuFunction(menuitemDisplayStr(CustTable), MenuItemType::Display);
                break;

            case PricePredefinedField::CustGroup:
                CustGroup custGroup = CustGroup::find(stringControl.text());
                args.record(custGroup);
                menuFunction = new MenuFunction(menuitemDisplayStr(CustGroup), MenuItemType::Display);
                break;

            case PricePredefinedField::CustSegment:
                smmBusRelSegmentGroup segment = smmBusRelSegmentGroup::find(stringControl.text());
                args.record(segment);
                menuFunction = new MenuFunction(menuitemDisplayStr(smmBusRelSegmentGroup), MenuItemType::Display);
                break;

            case PricePredefinedField::CustType:
            default:
                return ;
        }
    
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataType</Name>
				<Source><![CDATA[
    public PriceAttributeDataType dataType(PriceAttributeDefinition attribute)
    {
        switch (attribute.PredefinedField)
        {
            case PricePredefinedField::CustAccountNum:
            case PricePredefinedField::CustGroup:
            case PricePredefinedField::CustSegment:
                return PriceAttributeDataType::Text;
            case PricePredefinedField::CustType:
                return PriceAttributeDataType::Enum;
        }

        throw error(strFmt('@UnifiedPricing:PriceAttributeProviderNotSupported', classStr(PriceAttributeCustomerProvider), attribute.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceFieldNum</Name>
				<Source><![CDATA[
    public FieldId referenceFieldNum(PriceAttributeDefinition attribute)
    {
        switch (attribute.PredefinedField)
        {
            case PricePredefinedField::CustType:
                return fieldNum(PricingruleApplicability, DirPartyType);
            case PricePredefinedField::CustAccountNum:
            case PricePredefinedField::CustGroup:
            case PricePredefinedField::CustSegment:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        throw error(strFmt('@UnifiedPricing:PriceAttributeProviderNotSupported', classStr(PriceAttributeCustomerProvider), attribute.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupported</Name>
				<Source><![CDATA[
    boolean isSupported(PriceAttributeDefinition attribute)
    {
        return attribute.AttributeType == PriceAttributeType::Predefined
        && 
        (
            attribute.PredefinedField == PricePredefinedField::CustAccountNum
            || attribute.PredefinedField == PricePredefinedField::CustGroup
            || attribute.PredefinedField == PricePredefinedField::CustType
            || attribute.PredefinedField == PricePredefinedField::CustSegment
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>source</Name>
				<Source><![CDATA[
    PriceAttributeSource source(PriceAttributeDefinition attribute)
    {
        return PriceAttributeSource::Customer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>