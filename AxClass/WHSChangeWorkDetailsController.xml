<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSChangeWorkDetailsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SysOperation framework controller implementation for modifying various work details.
/// </summary>
public class WHSChangeWorkDetailsController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the execution in batch should be possible.
    /// </summary>
    /// <returns>
    /// false
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main method of the business operation.
    /// </summary>
    /// <param name="_args">
    /// An instance of <c>Args</c> containing arguments for the business operation.
    /// </param>
    public static void main(Args _args)
    {
        var controller = new WHSChangeWorkDetailsController();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            controller.initializeFromArgs(_args);
            controller.initDataContractWorkIdList();
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataContractWorkIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the corresponding data contract with the list of WorkId values selected in the calling element.
    /// </summary>
    protected void initDataContractWorkIdList()
    {
        var workIdList = new List(Types::String);

        var multiSelect = MultiSelectionHelper::createFromCaller(args.caller());
        var work = multiSelect.getFirst();
        while (work)
        {
            workIdList.addEnd(work.getFieldValue(fieldStr(WHSWorkTable, WorkId)));
            work = multiSelect.getNext();
        }

        var contract = this.getDataContractObject() as WHSChangeWorkDetailsDataContract;
        contract.parmWorkIdList(workIdList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>