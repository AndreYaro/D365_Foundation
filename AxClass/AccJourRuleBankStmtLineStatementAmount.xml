<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleBankStmtLineStatementAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccJourRuleBankStmtLineStatementAmount</c> class is the accounting journalizing rule for the
/// bank statement.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation, MonetaryAmount::StatementAmount),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation, MonetaryAmount::TaxNonRecoverable)
]
class AccJourRuleBankStmtLineStatementAmount extends AccountingJournalizingRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseTaxMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a tax amount specific main account dimension list provider can be used to derive
    /// main account dimension values required for classifying the financial consequences of a tax.
    /// </summary>
    /// <returns>
    /// true if the main account list provider can be used; otherwise, false .
    /// </returns>
    public boolean canUseTaxMainAccDimensionListProvider()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return LedgerPostingType::Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        BankStmtISOReportEntry  statementLine;
        DebitCredit             side;
        AccountingDistribution  localAccountingDistribution;

        localAccountingDistribution = this.parmAccountingdistribution();

        if (localAccountingDistribution.MonetaryAmount == MonetaryAmount::StatementAmount)
        {
            statementLine = BankStmtISOReportEntry::findBySourceDocumentLine(this.parmSourceDocumentLineItem().parmSourceDocumentLine().RecId);

            if (statementLine.AmountCreditDebitIndicator == DebitCredit::Debit)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }
        else if (localAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax)
        {
            if (this.parmAmount() < 0)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>