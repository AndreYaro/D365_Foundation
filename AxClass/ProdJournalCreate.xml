<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalCreate extends RunBase
{
    ProdJournalTable            prodJournalTable;
    ProdJournalTableData        prodJournalTableData;

    ProdJournalTransData        prodJournalTransData;

    ProdId                      prodId;
    NoYes                       endUpdate;
    TransDate                   transDate;
    ProdJournalId               journalId;
    ProdJournalNameId           journalNameId;

    #ISOCountryRegionCodes
    NoYes                       stornoPhysical;
    boolean                     countryRegion_RU;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        prodId,
        transDate,
        endUpdate,
        journalId,
        journalNameId,
        stornoPhysical
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    protected void createLines()
    {
        if (prodJournalTableData.journalTable().JournalId)
        {
            prodJournalTableData.journalTable().write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26120";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalTableData</Name>
				<Source><![CDATA[
    void initProdJournalTableData(ProdJournalType _journalType)
    {
        if (journalId)
        {
            prodJournalTable = ProdJournalTable::find(journalId,true);
            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
        }
        else
        {
            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            prodJournalTableData.initBuffer(journalNameId,prodId,_journalType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndUpdate</Name>
				<Source><![CDATA[
    public NoYes parmEndUpdate(NoYes _endUpdate = endUpdate)
    {
        endUpdate = _endUpdate;
        return endUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public ProdJournalId parmJournalId(ProdJournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNameId</Name>
				<Source><![CDATA[
    public ProdJournalNameId parmJournalNameId(ProdJournalNameId _journalNameId = journalNameId)
    {
        journalNameId = _journalNameId;
        return journalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;
        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStornoPhysical_RU</Name>
				<Source><![CDATA[
    public NoYes parmStornoPhysical_RU(NoYes _stornoPhysical = stornoPhysical)
    {
        stornoPhysical = _stornoPhysical;
        return stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.createLines();

            if (prodJournalTable.RecId)
            {
                journalNameId = prodJournalTable.JournalNameId;
                journalId     = prodJournalTable.JournalId;
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedProdJournalTable</Name>
				<Source><![CDATA[
    ProdJournalTable usedProdJournalTable()
    {
        ProdJournalTable tmp;

        if (prodJournalTableData)
        {
            return prodJournalTableData.journalTable();
        }
        else
        {
            return tmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (!prodId)
        {
            ok = checkFailed("@SYS26122");
        }

        if (!ProdTable::checkExist(prodId))
        {
            ok = false;
        }

        if (! ProdTable::find(prodId).status().isBefore(ProdStatus::Completed))
        {
            ok = checkFailed(strfmt("@SYS22041",ProdTable::find(prodId).ProdStatus));
        }

        if (journalId)
        {
            ok = ProdJournalTable::checkExist(journalId);
        }
        else
        {
            if (!journalNameId)
            {
                ok = checkFailed("@SYS26138");
            }

            if (!ProdJournalName::checkExist(journalNameId))
            {
                ok = false;
            }
        }

        return ok && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>