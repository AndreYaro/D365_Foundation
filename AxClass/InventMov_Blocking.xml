<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Blocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_Blocking</c> class is a specialized <c>InventMovement</c> class version that is
/// responsible for handling inventory blockings.
/// </summary>
abstract class InventMov_Blocking extends InventMovement
{
    InventBlocking  inventBlocking;

    InventTransId   cachedInventRefTransId;
    boolean         isCachedInventRefTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the automatic report as finished is allowed.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the movement is allowed to be on all locations.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventSites</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the movement is allowed to be on all sites.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean  canBeOnAllInventSites()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeEdited</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the reservation can be edited through the form.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean canReservationFormBeEdited()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the movement can update inventory status blocking transactions
    /// </summary>
    /// <returns>
    ///     true for quality order blocking; otherwise, false
    /// </returns>
    public boolean canUpdateInventStatusBlocking()
    {
        return inventBlocking.BlockingType == InventBlockingType::QualityOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowManualMarking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the marking can be edited manually.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean checkAllowManualMarking()
    {
        return checkFailed("@SYS138726");
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory dimensions ID value from the inventory blocking table.
    /// </summary>
    /// <returns>
    ///    The inventory dimensions ID value.
    /// </returns>
    public InventDimId inventDimId()
    {
        return inventBlocking.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the corresponding inventory transaction ID of the inventory blocking transaction from the
    ///    <c>InventBlocking</c> table.
    /// </summary>
    /// <returns>
    ///    The corresponding inventory transaction ID.
    /// </returns>
    abstract protected InventTransId inventTransIdTransfer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies that inventory blocking transactions are transfers if there are issue and receipt
    ///    transactions.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value that defines whether inventory blocking transaction are transfers.
    /// </returns>
    public NoYes isTransfer()
    {
        return inventBlocking.ExpectReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item ID value from the inventory blocking table.
    /// </summary>
    /// <returns>
    ///    An item ID.
    /// </returns>
    public ItemId  itemId()
    {
        return inventBlocking.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retueve the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction origin marked with; otherwise, 0.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(this.transRefId()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the quarantine control is required.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates additional condition that the <c>InventTransIdTransfer</c> field was changed.
    /// </summary>
    /// <param name="_movement_orig">
    ///    An <c>InventoryMovement</c> class instance based on the original inventory blocking record.
    /// </param>
    /// <returns>
    ///    A Boolean value that represents the result of the validation.
    /// </returns>
    public boolean mustUpdateInventTransFields(InventMovement _movement_orig)
    {
        InventMov_Blocking  inventMov_Blocking_Orig = _movement_orig;

        boolean ret = super(_movement_orig);

        // Additional condition to update invent trans: corresponding transfer transaction ID was changed.
        // This can happen when ExpectReceipt field value was changed on the inventory blocking.
        ret = ret || (this.inventTransIdTransfer() != inventMov_Blocking_Orig.inventTransIdTransfer());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(
        InventBlocking       _inventBlocking,
        InventType           _inventType = InventType::construct(_inventBlocking))
    {
        inventBlocking  = _inventBlocking;
        super(inventBlocking, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the inventory quantity in the <c>InventBlocking</c> record.
    /// </summary>
    /// <param name="_inventQty">
    /// The quantity in inventory units.
    /// </param>
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        inventBlocking.Qty += -_inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining physical quantity in catch weight units.
    /// </summary>
    /// <returns>
    /// The remaining physical quantity in catch weight units.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return this.pdsCWTransQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction catch weight quantity.
    /// </summary>
    /// <returns>
    /// The inventory transaction catch weight quantity in the child classes.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether batch attributes should be considered for reservation.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateBufferWithAdjustedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Update the <c>InventBlocking</c> record if a quantity has been added from reservation.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The preferred inventory dimension to adjust quantities for; optional.
    /// </param>
    public void pdsUpdateBufferWithAdjustedQuantity(InventDimId _inventDimId = this.inventDimId())
    {
        inventBlocking.pdsAdjustInventoryQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the remaining physical quantity.
    /// </summary>
    /// <returns>
    ///    The remaining physical quantity.
    /// </returns>
    public InventQty   remainPhysical()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </summary>
    /// <param name="_inventDimReservationCriteria">
    /// An <c>InventDim</c> buffer with the values that are required to be reserved.
    /// </param>
    /// <returns>
    /// A list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </returns>
    public List reservationHierarchyLevelStrategyList(InventDim _inventDimReservationCriteria)
    {
        List reservationStrategyList = new List(Types::Class);

        reservationStrategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(WHSReservationHierarchyLevelStrategyType::None, this.inventTable(), _inventDimReservationCriteria));

        reservationStrategyList.appendList(super(_inventDimReservationCriteria));

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the inventory blocking counterpart inventory transaction originator
    ///    corresponding to the movement.
    /// </summary>
    /// <returns>
    ///    The ID of the item blocking counterpart inventory transaction originator corresponding to the
    ///    movement.
    /// </returns>
    public InventTransOriginId transferInventTransOriginId()
    {
        return InventTransOrigin::findByInventTransId(this.inventTransIdTransfer()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the referred inventory transaction ID.
    /// </summary>
    /// <returns>
    ///    The referred inventory transaction ID.
    /// </returns>
    public InventTransRefId transRefId()
    {
        // Cache referred lot transaction ID.
        if (!isCachedInventRefTransId)
        {
            isCachedInventRefTransId    = true;
            cachedInventRefTransId      = inventBlocking.inventTransRefId();
        }

        // Return cached value
        return cachedInventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies the inventory blocking transaction type.
    /// </summary>
    /// <returns>
    ///    The inventory blocking transaction type.
    /// </returns>
    public InventTransType transType()
    {
        return InventTransType::Blocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUpdateAutoDimStatusId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do not update invent status for blocking movements.
    /// </summary>
    /// <returns>
    /// false
    /// </returns>
    /// <remarks>
    /// This is an override of a base method.
    /// </remarks>
    public boolean whsUpdateAutoDimStatusId()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>