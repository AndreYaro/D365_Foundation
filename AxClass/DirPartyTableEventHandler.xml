<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyTableEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>DirPartyTableEventHandler</c> class is the event handler class
///     for managing the events of DirPartyTable and its successors.
/// </summary>
public static class DirPartyTableEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DirOrgnization_Deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for deletion of the <c>LvOtherClients</c> records when referenced <c>DirOrgnization</c> a record is deleted.
    /// </summary>
    /// <param name = "organization">The <c>DirOrganization</c> record that was deleted.</param>
    /// <param name = "args">The data event arguments.</param>
    [DataEventHandler(tablestr(DirOrganization), DataEventType::Deleted)]
    public static void DirOrgnization_Deleted(Common organization, DataEventArgs args)
    {
        #ISOCountryRegionCodes
        LvOtherClients lvOtherClients;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            delete_from lvOtherClients where lvOtherClients.Organization == organization.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_getEmplTitle_RUDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for getting the title of employee.
    /// </summary>
    /// <param name="dirPartyTable">The <c>DirPartyTable</c> record to get title.</param>
    /// <param name="evtResult">The data event arguments.</param>
    [SubscribesTo(tableStr(DirPartyTable), delegateStr(DirPartyTable, getEmplTitle_RUDelegate))]
    public static void DirPartyTable_getEmplTitle_RUDelegate(DirPartyTable _dirPartyTable, EventHandlerResult _evtResult)
    {
        _evtResult.result(HcmTitle::find(HcmWorkerTitle::findByWorker(HcmWorker::findByPerson(_dirPartyTable.RecId).RecId).Title).TitleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_partyINNasOfDate_RUDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for getting INN by DirPartyTable.
    /// </summary>
    /// <param name="dirPartyTable">The <c>DirPartyTable</c> record to get INN.</param>
    /// <param name="evtResult">The data event arguments.</param>
    [SubscribesTo(tableStr(DirPartyTable), delegateStr(DirPartyTable, partyINNasOfDate_RUDelegate))]
    public static void DirPartyTable_partyINNasOfDate_RUDelegate(DirPartyTable _dirPartyTable, TransDate _date, EventHandlerResult _evtResult)
    {
        _evtResult.result(TaxRegistration::legislationRegistrationValue(_dirPartyTable.RecId, TaxRegistrationTypesList::INN, _date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_partyKPPasOfDate_RUDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for getting KPP by DirPartyTable.
    /// </summary>
    /// <param name="dirPartyTable">The <c>DirPartyTable</c> record to get KPP.</param>
    /// <param name="evtResult">The data event arguments.</param>
    [SubscribesTo(tableStr(DirPartyTable), delegateStr(DirPartyTable, partyKPPasOfDate_RUDelegate))]
    public static void DirPartyTable_partyKPPasOfDate_RUDelegate(DirPartyTable _dirPartyTable, TransDate _date, EventHandlerResult _evtResult)
    {
        _evtResult.result(TaxRegistration::legislationRegistrationValue(_dirPartyTable.RecId, TaxRegistrationTypesList::KPP, _date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>delete</c> method.
    /// </summary>
    /// <param name="_sender">The <c>DirPartyTable</c> record that is being deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(DirPartyTable), DataEventType::Deleted)]
    public static void DirPartyTable_onDeleted(Common _sender, DataEventArgs _e)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            CFMDirPartyTable  cfmDirPartyTable;

            delete_from cfmDirPartyTable 
                where cfmDirPartyTable.DirPartyTable == _sender.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>