<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustNsf</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustNsf</c> class controls the customer non-sufficient funds (NSF) payment cancellation
///    process.
/// </summary>
class CustNsf
{
    CustTrans custTrans;
    BankAccountTable bankAccountTable;
    BankPaymCancel bankPaymCancel;
    LedgerJournalTable ledgerJournalTable;
    LedgerJournalTrans ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates activities for the canceled payment and NSF fees.
    /// </summary>
    /// <param name="_hasFees">
    ///    true if fees were charged; otherwise, false.
    /// </param>
    protected void addActivities(boolean _hasFees)
    {
        CustTable custTable = CustTable::find(custTrans.AccountNum);

        if (_hasFees)
        {
            this.addFeeEvent(custTable);
        }
        else
        {
            this.addCancelEvent(custTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCancelEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an event for a canceled customer payment.
    /// </summary>
    /// <param name="_custTable">
    ///    A <c>CustTable</c> record.
    /// </param>
    protected void addCancelEvent(CustTable _custTable)
    {
        smmActivities event;

        event.initValue(smmActivityCategory::Event);
        event.setActivityNum();
        event.Closed = NoYes::Yes;
        event.modifiedField(fieldnum(smmActivities, Closed));
        event.Purpose = "@SYS136644";
        event.UserMemo = strfmt("@SYS132632", custTrans.Voucher, custTrans.AccountNum, _custTable.name());
        event.insertParentLink(smmActivityParentType::Customer, _custTable.RecId, true);
        event.insertParentLink(smmActivityParentType::Collections, _custTable.RecId);
        event.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFeeEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create an event for fees on a canceled customer payment.
    /// </summary>
    /// <param name="_custTable">
    ///    A <c>CustTable</c> record.
    /// </param>
    protected void addFeeEvent(CustTable _custTable)
    {
        smmActivities event;

        event.initValue(smmActivityCategory::Event);
        event.setActivityNum();
        event.Closed = NoYes::Yes;
        event.modifiedField(fieldnum(smmActivities, Closed));
        event.Purpose = "@SYS136644";
        event.UserMemo = strfmt("@SYS132492", ledgerJournalTable.JournalNum, custTrans.Voucher, custTrans.AccountNum, _custTable.name());
        event.insertParentLink(smmActivityParentType::Customer, _custTable.RecId, true);
        event.insertParentLink(smmActivityParentType::Collections, _custTable.RecId);
        event.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFee</Name>
				<Source><![CDATA[
    protected Amount calcFee(MarkupAutoLine _markupAutoLine)
    {
        Amount fee = 0;

        switch (_markupAutoLine.MarkupCategory)
        {
            case MarkupCategory::Fixed:
                fee = _markupAutoLine.Value;
                break;
            case MarkupCategory::Percent:
                fee = -custTrans.AmountCur * _markupAutoLine.Value / 100;
                break;
        }
        return CurrencyExchange::round(fee, custTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMarkupAutoTableSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>MarkupAutoTrans</c> table.
    /// </summary>
    /// <returns>The search parameters.</returns>
    protected MarkupAutoTable initializeMarkupAutoTableSearchParameters()
    {
        MarkupAutoTable searchParameters;
        searchParameters.initValue();

        searchParameters.ModuleCategory    = HeadingLine::Heading;
        searchParameters.ModuleType        = MarkupModuleType::Cust;
        searchParameters.AccountCode       = TableGroupAll::GroupId;
        searchParameters.AccountRelation   = bankAccountTable.NsfFeeMarkupGroupId;
        searchParameters.ItemCode          = TableGroupAll::All;
        searchParameters.ItemRelation      = '';

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFees</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates fees for a customer NSF payment and creates a journal for the fees.
    /// </summary>
    /// <param name="_createJournal">
    ///    true if the journal should be created; otherwise, false.
    /// </param>
    /// <returns>
    ///    The total amount of the fees due in the currency of the original payment.
    /// </returns>
    protected Amount calcFees(boolean _createJournal)
    {
        LedgerJournalEngine_CustPayment ledgerJournalEngine;  // Helps create the payment journal
        MarkupAutoTable markupAutoTable;
        MarkupAutoLine markupAutoLine;
        MarkupTable markupTable;
        Amount fee;
        Amount totalFees = 0;

        if (!bankAccountTable.NsfFeeMarkupGroupId)
        {
            return totalFees; // no fees have been setup
        }

        //
        // Calculate/create the NSF payment journal
        //

        markupAutoTable = this.findMarkupAutoTable();

        if (!markupAutoTable)
        {
            return totalFees;
        }

        if (_createJournal)
        {
            ledgerJournalEngine = new LedgerJournalEngine_CustPayment();
            this.createFeeJournal(ledgerJournalEngine);
        }

        //
        // Calculate/create the NSF payment transactions
        //
        while select markupAutoLine
            where
                markupAutoLine.TableTableId == markupAutoTable.TableId &&
                markupAutoLine.TableRecId == markupAutoTable.RecId &&
                markupAutoLine.ModuleCategory == markupAutoTable.ModuleCategory &&
                markupAutoLine.ModuleType == markupAutoTable.ModuleType &&
                (markupAutoLine.MarkupCategory == MarkupCategory::Fixed ||
                markupAutoLine.MarkupCategory == MarkupCategory::Percent) &&
                markupAutoLine.CurrencyCode == custTrans.CurrencyCode
            join markupTable
                where
                    markupTable.ModuleType == markupAutoLine.ModuleType &&
                    markupTable.MarkupCode == markupAutoLine.MarkupCode &&
                    (markupTable.VendType == MarkupType::CustVend || markupTable.VendType == MarkupType::LedgerAccount)
        {
            // ToAmount == 0 means infinity.
            if ((markupAutoLine.ToAmount != 0
               && (markupAutoLine.FromAmount <= -custTrans.AmountCur && markupAutoLine.ToAmount >= -custTrans.AmountCur))
               || (markupAutoLine.ToAmount == 0 && markupAutoLine.FromAmount <= -custTrans.AmountCur)
               || (markupAutoLine.FromAmount == 0 && markupAutoLine.ToAmount == 0))
            {
                fee = this.calcFee(markupAutoLine);
                totalFees += fee;
                if (_createJournal)
                {
                    this.createFeeJournalTrans(ledgerJournalEngine, markupTable, markupAutoLine, fee);
                }
            }
        }

        return totalFees;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the bank account status field of the records in the <c>CustVendOutPaymRecord</c> table for
    ///    insufficient fund payments.
    /// </summary>
    /// <returns>
    ///    true if the bank account status is active; otherwise, false.
    /// </returns>
    protected boolean checkBankAccountIsActive()
    {
        return BankAccountTable::checkIsActive(bankAccountTable.AccountID, bankPaymCancel.parmTransDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNsfLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the ledger journal has been configured.
    /// </summary>
    protected void checkNsfLedgerJournal()
    {
        if (!bankAccountTable.NsfLedgerJournalName || !LedgerJournalName::exist(bankAccountTable.NsfLedgerJournalName))
        {
            Box::stop(strfmt("@SYS132490", custTrans.CompanyBankAccountId));
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmFeeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Asks the user to confirm the Non-Sufficient Funds (NSF) payment fees.
    /// </summary>
    protected void confirmFeeAmount()
    {
        Amount fee = this.calcFees(false);
        str msg = fee == 0 ? "@SYS132488"  : strfmt("@SYS132489", fee, custTrans.CurrencyCode);

        if (Box::okCancel(msg, DialogButton::Ok) == DialogButton::Cancel)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmNsfFeeMarkupGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the miscellaneous charges group has been configured.
    /// </summary>
    protected void confirmNsfFeeMarkupGroup()
    {
        if (!bankAccountTable.NsfFeeMarkupGroupId || !MarkupAutoTable::exist(HeadingLine::Heading,
                                                                            MarkupModuleType::Cust,
                                                                            TableGroupAll::GroupId, bankAccountTable.NsfFeeMarkupGroupId, TableGroupAll::All, ''))
        {
            if (Box::okCancel(strfmt("@SYS132755", custTrans.CompanyBankAccountId), DialogButton::Ok) == DialogButton::Cancel)
            {
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the journal for NSF payment fees.
    /// </summary>
    /// <param name="_ledgerJournalEngine">
    ///    A <c>LedgerJournalEngine_CustPayment</c> object.
    /// </param>
    protected void createFeeJournal(LedgerJournalEngine_CustPayment _ledgerJournalEngine)
    {
        ledgerJournalTable.clear();
        ledgerJournalTable.initValue();
        ledgerJournalTable.JournalName = bankAccountTable.NsfLedgerJournalName;
        ledgerJournalTable.initFromLedgerJournalName();
        ledgerJournalTable.insert(); // Insert sets the Description (Name field)
        ledgerJournalTable.Name = strfmt("@SYS132491", custTrans.AccountNum, CustTable::find(custTrans.AccountNum).name());
        ledgerJournalTable.write();
        _ledgerJournalEngine.newJournalActive(ledgerJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a journal transaction for a NSF payment fee.
    /// </summary>
    /// <param name="_ledgerJournalEngine">
    ///    A <c>LedgerJournalEngine_CustPayment</c> object.
    /// </param>
    /// <param name="_markupTable">
    ///    A <c>MarkupTable</c> record.
    /// </param>
    /// <param name="_markupAutoLine">
    ///    A <c>MarkupAutoLine</c> record.
    /// </param>
    /// <param name="_fee">
    ///    The amount of the fee in the currency of the payment.
    /// </param>
    protected void createFeeJournalTrans(
            LedgerJournalEngine_CustPayment _ledgerJournalEngine,
            MarkupTable _markupTable,
            MarkupAutoLine _markupAutoLine,
            Amount _fee)
    {        
        this.initFeeJournalTrans(_ledgerJournalEngine);

        this.populateFeeJournalTrans(_ledgerJournalEngine, _markupTable, _markupAutoLine, _fee);

        _ledgerJournalEngine.preWrite(ledgerJournalTrans);
        _ledgerJournalEngine.preWriteUpdateDefaultDimension(ledgerJournalTrans, null);
        ledgerJournalTrans.insert();
        _ledgerJournalEngine.write(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFeeJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a journal transaction for a NSF payment fee.
    /// </summary>
    /// <param name = "_ledgerJournalEngine">
    ///    A <c>LedgerJournalEngine_CustPayment</c> object.
    /// </param>
    protected void initFeeJournalTrans(LedgerJournalEngine_CustPayment _ledgerJournalEngine)
    {
        _ledgerJournalEngine.preCreate(ledgerJournalTrans);

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();

        _ledgerJournalEngine.initValue(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFeeJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates a journal transaction for a NSF payment fee.
    /// </summary>
    /// <param name="_ledgerJournalEngine">
    ///    A <c>LedgerJournalEngine_CustPayment</c> object.
    /// </param>
    /// <param name="_markupTable">
    ///    A <c>MarkupTable</c> record.
    /// </param>
    /// <param name="_markupAutoLine">
    ///    A <c>MarkupAutoLine</c> record.
    /// </param>
    /// <param name="_fee">
    ///    The amount of the fee in the currency of the payment.
    /// </param>
    protected void populateFeeJournalTrans(
        LedgerJournalEngine_CustPayment _ledgerJournalEngine,
        MarkupTable _markupTable,
        MarkupAutoLine _markupAutoLine,
        Amount _fee)
    {
        ledgerJournalTrans.TransDate = bankPaymCancel.parmTransDate();
        _ledgerJournalEngine.transDateModified(ledgerJournalTrans);

        ledgerJournalTrans.parmAccount(custTrans.AccountNum);
        _ledgerJournalEngine.accountModified(ledgerJournalTrans);

        ledgerJournalTrans.Txt = _markupTable.Txt;

        ledgerJournalTrans.AmountCurDebit = _fee;
        _ledgerJournalEngine.amountCurDebitModified(ledgerJournalTrans);

        ledgerJournalTrans.CurrencyCode = custTrans.CurrencyCode;
        _ledgerJournalEngine.currencyModified(ledgerJournalTrans);

        if (!ledgerJournalTable.FixedOffsetAccount)
        {
            switch (_markupTable.VendType)
            {
                case MarkupType::CustVend:
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Cust;
                    _ledgerJournalEngine.offsetAccountTypeModified(ledgerJournalTrans);

                    ledgerJournalTrans.parmOffsetAccount(custTrans.AccountNum);
                    _ledgerJournalEngine.offsetAccountModified(ledgerJournalTrans);
                    break;
                case MarkupType::LedgerAccount:
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                    _ledgerJournalEngine.offsetAccountTypeModified(ledgerJournalTrans);

                    LedgerDimensionDefaultAccount defaultAccount = _markupTable.parmVendorLedgerDimension();

                    ledgerJournalTrans.parmOffsetLedgerDimension(
                    ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(defaultAccount, ledgerJournalTrans.getOffsetCompany()));
                    _ledgerJournalEngine.offsetAccountModified(ledgerJournalTrans);
                    break;
            }
        }

        ledgerJournalTrans.TaxGroup = _markupAutoLine.TaxGroup;
        ledgerJournalTrans.TaxItemGroup = _markupTable.TaxItemGroup;
        ledgerJournalTrans.ReasonRefRecID = ReasonTableRef::createReasonTableRef(bankPaymCancel.parmReason(), bankPaymCancel.parmReasonComment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels a NSF payment, creates a journal for any fees due, and creates activities for the fees.
    /// </summary>
    /// <returns>
    ///    An amount representing the total fees charged.
    /// </returns>
    protected Amount executeProcess()
    {
        Amount totalFees = this.calcFees(false);
        Debug::assert(custTrans.RecId);
        Debug::assert(bankAccountTable.RecId);
        Debug::assert(bankAccountTable.NsfLedgerJournalName != '');

        ttsbegin;
        this.runBankPaymCancel();
        if (totalFees != 0)
        {
            totalFees = this.calcFees(true);
        }
        this.addActivities(totalFees != 0);
        ttscommit;

        return totalFees;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(CustTrans _custTrans)
    {
        custTrans = _custTrans;
        bankAccountTable = BankAccountTable::find(custTrans.CompanyBankAccountId);
        bankPaymCancel = BankPaymCancel::newBankPaymCancel(custTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankPaymCancel</Name>
				<Source><![CDATA[
    public BankPaymCancel parmBankPaymCancel(BankPaymCancel _bankPaymCancel = bankPaymCancel)
    {
        bankPaymCancel = _bankPaymCancel;
        return bankPaymCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    public LedgerJournalId parmJournalNum()
    {
        return ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays messages and dialog boxes before the NSF payment process.
    /// </summary>
    protected void prompt()
    {
        this.checkBankAccountIsActive();
        this.checkNsfLedgerJournal();
        this.confirmNsfFeeMarkupGroup();
        this.confirmFeeAmount();
        this.showBankPaymCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a message that summarizes the NSF payment process.
    /// </summary>
    /// <param name="_totalFees">
    ///    An amount.
    /// </param>
    /// <remarks>
    ///    This method is only called after successfully running the <c>executeProcess</c> method.
    /// </remarks>
    protected void reportResults(Amount _totalFees)
    {
        info(strfmt("@SYS132571",
            custTrans.AmountCur,
            custTrans.CurrencyCode,
            custTrans.AccountNum,
            CustTable::find(custTrans.AccountNum).name(),
            ledgerJournalTable.JournalNum,
            _totalFees));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the NSF payment process and reports the result.
    /// </summary>
    /// <param name="_showResults">
    ///    true if the results should be displayed; otherwise, false.
    /// </param>
    public void run(boolean _showResults = true)
    {
        Amount totalFees = this.executeProcess();

        if (totalFees != 0 && _showResults)
        {
            this.reportResults(totalFees);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBankPaymCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the payment cancellation process.
    /// </summary>
    protected void runBankPaymCancel()
    {
        Args args = new Args();

        args.caller(bankPaymCancel);
        args.record(custTrans);
        BankPaymCancel::serverRun(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBankPaymCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the cancel payment dialog box.
    /// </summary>
    protected void showBankPaymCancel()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formstr(BankPaymCancel), bankPaymCancel);

        dialog.run();
        dialog.formRun().wait();

        if (!dialog.closedOk())
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkupAutoTable</Name>
				<Source><![CDATA[
    private MarkupAutoTable findMarkupAutoTable()
    {
        MarkupAutoTable markupAutoTable, searchParameters;

        searchParameters = this.initializeMarkupAutoTableSearchParameters();

        if (FeatureStateProvider::isFeatureEnabled(RetailFilterAutoChargesByChannelEnableFeature::instance()))
        {
            searchParameters.RetailChannelCode = TableGroupAll::All;
            searchParameters.RetailChannelRelation = '';
            markupAutoTable = MarkupAutoTable::findByNaturalKey(searchParameters);
        }

        if (markupAutoTable.RecId == 0)
        {
            // These search parameters are set to the default upgrade values to support backwards compatibility
            searchParameters.RetailChannelCode = TableGroupAll::Table;
            searchParameters.RetailChannelRelation = '';
            markupAutoTable = MarkupAutoTable::findByNaturalKey(searchParameters);
        }

        return markupAutoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an new instance of the <c>CustNsf</c> class.
    /// </summary>
    /// <param name="_custTrans">
    ///    A <c>CustTrans</c> record.
    /// </param>
    /// <returns>
    ///    A instance of the <c>CustNsf</c> class.
    /// </returns>
    public static CustNsf construct(CustTrans _custTrans)
    {
        if (!_custTrans || _custTrans.TableId != tablenum(CustTrans))
        {
            throw error(Error::wrongUseOfFunction(funcname())); // Must pass a CustTrans record
        }

        return new CustNsf(_custTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustNsf custNsf;

        if (!_args || !_args.record())
        {
            throw error(Error::wrongUseOfFunction(funcname())); // Must pass a record (CustTrans)
        }

        custNsf = CustNsf::construct(_args.record());
        custNsf.prompt();
        custNsf.run();
        if (_args.caller() && formHasMethod(_args.caller(), identifierstr(setTouched)))
        {
            _args.caller().setTouched();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>