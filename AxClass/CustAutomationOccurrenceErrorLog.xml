<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationOccurrenceErrorLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAutomationOccurrenceErrorLog</c> logs errors from customer process automations.
/// </summary>
internal static class CustAutomationOccurrenceErrorLog
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logErrorForOccurrence</Name>
				<Source><![CDATA[
    internal static void logErrorForOccurrence(
        CustAutomationContract _contract,
        ProcessExecutionSourceLinkMessage _sourceLinkMessage,
        ProcessExecutionMessage _messageLogMessage,
        RefTableId _sourceLinkTableId = 0,
        RefRecId _sourceLinkRecId = 0)
    {

        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_contract.parmExecutionId());
        sourceLinkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmMessage(_sourceLinkMessage);
        sourceLinkItem.parmSourceTableId(_sourceLinkTableId);
        sourceLinkItem.parmSourceRecId(_sourceLinkRecId);
        sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Error);

        CustAutomationInvoice invoice = _contract.parmCustAutomationInvoice();
        sourceLinkItem.parmHeader(strFmt("@CustAutomation:ProcessErrorHeader", invoice.StrategyName, invoice.When, invoice.Days));

        ProcessExecutionSourceLink sourceLink;
        
        try
        {
            sourceLink = ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
        }
        catch (Exception::DuplicateKeyException)
        {
            //This is possible when multiple steps on the same day are executed and both error.
            sourceLink = CustAutomationOccurrenceErrorLog::findUniqueExecutionSourceLinkRecId(_contract, _sourceLinkTableId, _sourceLinkRecId);
        }

        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(sourceLink.RecId);
        messageLogItem.parmException(Exception::Error);
        messageLogItem.parmMessage(_messageLogMessage);
        
        ProcessExecutionMessageLog::insertMessage(messageLogItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUniqueExecutionSourceLinkRecId</Name>
				<Source><![CDATA[
    private static ProcessExecutionSourceLink findUniqueExecutionSourceLinkRecId(
        CustAutomationContract _contract,
        RefTableId _sourceLinkTableId,
        RefRecId _sourceLinkRecId)
    {
        ProcessExecutionSourceLink sourceLink;

        select firstonly RecId from sourceLink
            where sourceLink.ExecutionId == _contract.parmExecutionId()
                && sourceLink.ProcessScheduleOccurrence == _contract.parmProcessScheduleOccurrenceRecId()
                && sourceLink.ProcessScheduleSeriesPattern == _contract.parmProcessScheduleSeriesPatternRecId()
                && sourceLink.RefTableId == _sourceLinkTableId
                && sourceLink.RefRecId == _sourceLinkRecId;

        return sourceLink;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>