<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayJournalCheckPost extends JournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;

        ret = super();

        if (journalCheckPostType == JournalCheckPostType::Post)
        {
            ret = strFmt("@RUP6375", this.parmJournalId());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        RHRMOrderTable   orderTable;
        RPayJournalTable payJournal;
        boolean ret;

        ret = super(_journalTransList);

        if (ret)
        {
            payJournal = RPayJournalTable::find(journalTableData.journalTable().JournalId);

            if (payJournal.rhrmOrderTable)
            {
                orderTable = RHRMOrderTable::find(payJournal.rhrmOrderTable);

                if (orderTable.RecId == 0)
                {
                    ret = checkFailed("@RUP6146");
                }

                if (orderTable.PayJournalNum)
                {
                    ret = checkFailed(strFmt("@RUP6147", orderTable.JournalId));
                }

                if (orderTable.Posted == NoYes::No)
                {
                    ret = checkFailed("@RUP6148");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean             ret;
        RHRMEmplTable       emplTable;
        RPayJournalTrans    journalTrans = _journalTransData.journalTrans();
        RPayGroupMember     payGroupMember;

        ret = super(_journalTransData);

        if (ret)
        {
            setPrefix(strFmt("@GLS106005", journalTrans.TransType, journalTrans.Number));

            if (! journalTrans.Amount)
            {
                ret = checkFailed("@GLS105770");
            }

            if (endmth(journalTrans.TransDate) < RPayParameters::payPeriod())
            {
                ret = checkFailed("@RUP389");
            }

            if (! journalTrans.PayCtype)
            {
                ret = checkFailed("@RUP293");
            }
            else
            {
                if (! RPayTable::exist(journalTrans.PayCtype))
                {
                    ret = checkFailed(strFmt("@RUP294", journalTrans.PayCtype));
                }
            }

            if (journalTrans.TransType == RPayTypeString::Employee)
            {
                if (! journalTrans.Number)
                {
                    ret = checkFailed("@RUP297");
                }
                else
                {
                    emplTable = RHRMEmplTable::find(journalTrans.Number);

                    if (! emplTable)
                    {
                        ret = checkFailed(strFmt("@RUP298", journalTrans.Number));
                    }
                    else
                    {
                        emplTable.checkEmplBeforeCalc(endmth(journalTrans.TransDate), NoYes::Yes);
                    }
                }

                if (ret)
                {
                    ret = RPayPostingProfileCheck::checkCurrentProfiles(journalTrans.PayCtype, '', journalTrans.Number, '');
                }
            }

            if (journalTrans.TransType == RPayTypeString::GroupEmpl)
            {
                if (! journalTrans.Number)
                {
                    ret = checkFailed("@RUP300");
                }
                else
                {
                    if (! RPayGroupTable::exist(journalTrans.Number))
                    {
                        ret = checkFailed(strFmt("@RUP302", journalTrans.Number));
                    }
                    else
                    {
                        if (RPayGroupTable::find(journalTrans.Number).Blocked == NoYes::Yes)
                        {
                            ret = checkFailed(strFmt("@RUP303", journalTrans.Number));
                        }

                        while select PersonEmplId from payGroupMember
                            where payGroupMember.PayGroup == journalTrans.Number
                        {
                            emplTable = RHRMEmplTable::find(payGroupMember.PersonEmplId);
                            emplTable.checkEmplBeforeCalc(endmth(journalTrans.TransDate), NoYes::Yes);
                        }
                    }
                }

                if (ret)
                {
                    ret = RPayPostingProfileCheck::checkCurrentProfiles(journalTrans.PayCtype, '', '', journalTrans.Number);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initPayTransValue(RHRMEmplTable _emplTable, RPayJournalTrans _payJournalTrans)
    {
        RPayTrans               payTrans;
        payTrans.initFromPayJournalTrans(_emplTable, _payJournalTrans);
        payTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTransFromJournalTrans(RPayJournalTrans _payJournalTrans)
    {
        RPayGroupMember     payGroupMember;
        RHRMEmplTable       emplTable;

        if (_payJournalTrans.TransType == RPayTypeString::Employee)
        {
             emplTable = RHRMEmplTable::find(_payJournalTrans.Number);
             this.initPayTransValue(emplTable, _payJournalTrans);
        }
        else
        {
            while select PersonEmplId from payGroupMember
                where payGroupMember.PayGroup == _payJournalTrans.Number
            {
                emplTable = RHRMEmplTable::find(payGroupMember.PersonEmplId);
                if (emplTable.checkEmplBeforeCalc(_payJournalTrans.TransDate))
                {
                    this.initPayTransValue(emplTable, _payJournalTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        RPayJournalTrans    journalTrans = _journalTransData.journalTrans();

        super(_journalTransData);

        this.initTransFromJournalTrans(journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs post-end operations.
    /// </summary>
    /// <returns>
    /// The status, #runEnd for post-end.
    /// </returns>
    protected Integer runPostEnd()
    {
        RHRMOrderTable   orderTable;
        RPayJournalTable payJournal = RPayJournalTable::find(journalTableData.journalTable().JournalId);
        Integer ret;

        ret = super();

        if (payJournal.rhrmOrderTable)
        {
            orderTable = RHRMOrderTable::find(payJournal.rhrmOrderTable, true);
            orderTable.PayJournalNum = payJournal.JournalId;
            orderTable.update();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayJournalCheckPost        journalCheckPost;
        JournalForm                 journalForm;

        journalForm      = JournalForm::fromArgs(args);
        journalCheckPost = RPayJournalCheckPost::newFromForm(args,journalForm);

        journalForm.runbaseMainStart();

        if (!journalCheckPost.prompt())
        {
            if (! journalCheckPost.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            }

            return;
        }

        try
        {
            journalCheckPost.runOperation();
            journalForm.runbaseMainEnd(journalCheckPost,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    private static RPayJournalCheckPost newFromForm(Args _args,JournalForm _journalForm)
    {
        RPayJournalCheckPost        journalCheckPost;
        JournalTableMap             journalTable = _journalForm.journalTableData().journalTable();

        journalCheckPost = new RPayJournalCheckPost();
        journalCheckPost.getLast();

        journalCheckPost.parmAutoBlock(false);
        journalCheckPost.parmShowInfoResult(true);
        journalCheckPost.parmJournalCheckPostType(_args.parmEnum());
        journalCheckPost.parmJournalTableId(journalTable.TableId);
        journalCheckPost.parmJournalId(journalTable.JournalId);
        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>