<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates tax reports for Australia.
/// </summary>
class TaxReport_AU extends TaxReportAdjustTrans implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if this class can be executed in batch.
    /// </summary>
    /// <returns>
    ///    True if can run this class in batch; otherwise false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(this.dialogHeader(), this);

        updateNow  = false;

        dialogTaxPeriod = dialog.addFieldValue(extendedTypeStr(TaxPeriod), taxPeriod);

        dialogFromDate  = dialog.addField(extendedTypeStr(TaxPeriodDate), "@SYS5209", "@SYS12292");

        dialogTransDate =  dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@SYS60729");

        dialogVersion   = dialog.addField(enumStr(TaxRepVersion), "" ,"@SYS25691");

        dialogUpdate    = dialog.addField(enumStr(NoYes), "@SYS63142", "@SYS63143");

        dialog.addText("@TaxReport:EnableBatchModeMessage", 175);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header of this dialog.
    /// </summary>
    /// <returns>
    /// Returns the header of this dialog.
    /// </returns>
    protected Caption dialogHeader()
    {
        return "@SYS63092";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        updateNow       = dialogUpdate.value();
        taxPeriod       = dialogTaxPeriod.value();
        fromDate        = dialogFromDate.value();
        taxRepVersion   = dialogVersion.value();
        transactionDate = dialogTransDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report.
    /// </summary>
    public void printout()
    {
        Args            args;

        args = new Args();
        args.parmObject(this);
        args.caller(this);
        args.record(taxReportPeriod);

        new MenuFunction(menuitemOutputStr(TaxReport_AU), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOtherAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method detects all amounts to report in the BAS. The extra fields are posted on the BAS settlement account.
    /// The amount posted as tax is used to determine the amount to adjust.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The default dimension.
    /// </param>
    /// <returns>
    /// Returns the net amount to adjust on the Tax Settlement account/ Vendor account.
    /// </returns>
    public TaxAmount settleOtherAmounts(DimensionDefault _defaultDimension)
    {
        TaxAmount                   taxAmount;
        AmountCur                   amountCur;
        LedgerDimensionAccount      basSettlementDimAccount;
        TaxReportExtraFields        taxReportExtraFields;
        TaxCalcBASFields            taxCalcBASFields;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyCode                accountingCurrency;
        CurrencyExchangeHelper      currencyExchangeHelper;

        if (taxRepVersion != TaxRepVersion::Original)
        {
            return 0;
        }

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

        taxReportExtraFields = TaxReportExtraFields::find(taxPeriod, fromDate, toDate, true);
        basSettlementDimAccount = TaxReportLedgerAccounts::ledgerDimension();

        if (!basSettlementDimAccount)
        {
            throw error("@SYS65014");
        }

        basSettlementDimAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(basSettlementDimAccount, _defaultDimension);

        accountingCurrency = Ledger::accountingCurrency();
        taxCalcBASFields = TaxCalcBASFields::newTaxReport_AU(this);
        taxCalcBASFields.calc();

        amountCur = -taxCalcBASFields.field1G();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS63100");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur = taxCalcBASFields.field4();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS66087");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur = taxCalcBASFields.field5A();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS66028");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  -taxCalcBASFields.field5B();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS63125");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  taxCalcBASFields.field6A();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS63131");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  -taxCalcBASFields.field6B();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS63122");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  taxCalcBASFields.field7();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS63120");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  taxCalcBASFields.field7A();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS68237");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  taxCalcBASFields.field7C();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS4083163");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        taxAmount += amountCur;

        amountCur =  -taxCalcBASFields.field7D();
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt("@SYS4083164");
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::TaxReport,
                                        basSettlementDimAccount,
                                        accountingCurrency,
                                        amountCur,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt('');
        taxAmount += amountCur;

        if (taxReportExtraFields)
        {
            taxReportExtraFields.Voucher = voucher;
            taxReportExtraFields.TransDate = transactionDate;
            taxReportExtraFields.update();
        }
        else
        {
            taxReportExtraFields.TaxPeriod = taxPeriod;
            taxReportExtraFields.FromDate  = fromDate;
            taxReportExtraFields.ToDate    = toDate;
            taxReportExtraFields.Voucher   = voucher;
            taxReportExtraFields.TransDate = transactionDate;
            taxReportExtraFields.insert();
        }

        if (taxAmount)
        {
            transactions++;
        }

        if (!transactions)
        {
            transactions = 1;
        }

        if (!taxTransactions)
        {
            taxTransactions = 1;
        }

        if (vendAccount && accountingCurrency == VendTable::find(vendAccount).Currency)
        {
            totalClearingAmountTaxAuthorityCur -= taxAmount;
        }

        return -taxAmount + super(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  _args)
    {
        TaxReport    taxReport  = new TaxReport_AU();

        if (taxReport.runDialogParametersAndParseArgs(_args))
        {
            if (taxReport.canRunBatch())
            {
                taxReport.runBatch();
            }
            else
            {
                taxReport.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (this.canDisplayReport())
        {
            this.printout();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisplayReport</Name>
				<Source><![CDATA[
    public boolean canDisplayReport()
    {
        return printout
            && (!this.isInBatch()
                || (this.isInBatch() && !updateNow))
            && !isMultipleTaxIdEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>