<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogValidationSchedulerJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCatalogValidationSchedulerJob</c> class is a dialog class
/// used to schedule retail catalog validation job.
/// </summary>
class RetailCatalogValidationSchedulerJob extends RunBaseBatch implements BatchRetryable
{
    int64        catalogId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        catalogId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        // override so we preserve theinput parameters and not retrieve the last ones.
        // super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailCatalogValidationSchedulerJob</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailCatalogValidationSchedulerJob</c>.</returns>
    public container pack()
    {
        container ret;

        ret = [#CurrentVersion,#CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatalogId</Name>
				<Source><![CDATA[
    public CatalogRefRecId parmCatalogId(CatalogRefRecId _catalogId = catalogId)
    {
        catalogId = _catalogId;

        return catalogId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the implementation of the class.
    /// </summary>
    public void run()
    {
        CatalogManager catalogManager = CatalogManager::construct(catalogId);
        catalogManager.validateCatalog(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of <c>RetailCatalogValidationSchedulerJob</c>.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RetailCatalogValidationSchedulerJob construct()
    {
        return new RetailCatalogValidationSchedulerJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides class description.
    /// </summary>
    /// <returns>The <c>ClassDescription</c>.</returns>
    public static ClassDescription description()
    {
        return "@RET15087";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method which initializes the call for the other methods.
    /// </summary>
    /// <param name="_args">
    /// Retail catalog scheduler job record.
    /// </param>
    /// <param name="_supress_dialog">
    /// Boolean value, which shows suppress dialog state.
    /// </param>
    public static void main(Args _args, boolean _supress_dialog = false)
    {
        RetailCatalogValidationSchedulerJob scheduler = RetailCatalogValidationSchedulerJob::construct();
        Catalog inputCatalog = _args.record();

        scheduler.parmCatalogId(inputCatalog.RecId);

        if (!_supress_dialog)
        {
            if (!scheduler.prompt())
            {
                return;
            }
        }

        if (scheduler.tryEnterCatalogValidatingState())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailCatalogValidationSchedulerJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailCatalogValidationSchedulerJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Try to enter catalog validating state before running as a batch job.
    /// </summary>
    protected void doBatch()
    {
        if (this.tryEnterCatalogValidatingState())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryEnterCatalogValidatingState</Name>
				<Source><![CDATA[
    private boolean tryEnterCatalogValidatingState()
    {
        // Only one thread can enter validating state.
        Catalog catalog = Catalog::find(catalogId, true);
        if (catalog.State == CatalogState::Validating)
        {
            error("@Retail:CatalogValidationAlreadyValidating");
            return false;
        }

        // Update will throw update conflict exception if another thread managed to change catalog state to validating after the above check.
        ttsBegin;
        catalog.State = CatalogState::Validating;
        catalog.update();
        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>