<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenStmtDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendTransOpenStmtDP</c> class declares the variables required for the
///    customer and vendor open transactions report. This class is a common class for all the countries
///    and there is a specific subclass for each country.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustVendTransOpenStatementQuery)),
    SRSReportParameterAttribute(classstr(CustVendTransOpenStmtContract))
]
public class CustVendTransOpenStmtDP extends SrsReportDataProviderPreProcessTempDB
{
    TransDate       transDate;
    Query           query;
    CustVendACType  custVendActType;
    CompanyInfo     companyInfo;
    Phone           companyPhoneNumber;
    Phone           custVendPhoneNumber;
    Name            custVendName;
    TeleFax         senderTeleFax;
    Email           senderEmail;
    private TransDate excludeFutureSettlementDate;

    LogisticsAddressing             companyPostalAddress;
    LogisticsAddressing             custVendPostalAddress;
    CustVendTransOpenStmtTmp        custVendTransOpenStmtTmp;
    CustVendTransDetails            custVendTransDetails;
    CustVendTransOpenStmtContract   custVendTransOpenStmtContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the settled <c>AmountCur</c> and settled <c>AmountMST</c> amounts based on a
    /// <c>CustVendTrans</c> record.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record that is used for the calculation.
    /// </param>
    /// <returns>
    /// A <c>Container</c> that contains settled <c>AmountCur</c> and settled <c>AmountMST</c> .
    /// </returns>
    protected Container calculateAmounts(CustVendTrans _custVendTrans)
    {
        AmountCur settledAmountCur;
        AmountMST settledAmountMST;

        this.initializeCustVendTransDetails(_custVendTrans);

        [settledAmountCur, settledAmountMST] = custVendTransDetails.amountCurMSTSettled();

        return [settledAmountCur, settledAmountMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTableRecordChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies that a <c>CustTable</c> or <c>VendTable</c> record is modified when you execute the
    /// query.
    /// </summary>
    /// <param name="_custVendTable">
    /// The <c>CustVendTable</c> record that is used to obtain customer or vendor information.
    /// </param>
    /// <remarks>
    /// The subclasses can override this method to perform any custom logic.
    /// </remarks>
    protected void custVendTableRecordChanged(CustVendTable _custVendTable)
    {
        custVendName = _custVendTable.name();
        custVendPostalAddress   = DirParty::getAddress(_custVendTable.Party);
        custVendPhoneNumber     = _custVendTable.phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any open transactions based on the passed in buffer.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record which is used to determine whether there are any open transactions.
    /// </param>
    /// <returns>
    /// true if there is any open transaction; otherwise, false.
    /// </returns>
    protected boolean existsOpenTransactions(CustVendTrans _custVendTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the appropriate table id based on the type of the report.
    /// </summary>
    /// <returns>
    ///    The appropriate table id.
    /// </returns>
    private tableid getCustVendTableID()
    {
        Tableid tableId;

        if (custVendActType == CustVendAcType::Cust)
        {
            tableId = tableNum(CustTable);
        }
        else
        {
            tableId = tableNum(VendTable);
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>CustVendTransOpenStmtTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data for the report in the <c>CustVendTransOpenStmtTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustVendTransOpenStmtTmp))
    ]
    public CustVendTransOpenStmtTmp getCustVendTransOpenStmtTmp()
    {
        select  custVendTransOpenStmtTmp;
        return  custVendTransOpenStmtTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransTableID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the appropriate transaction table id based on the type of the report.
    /// </summary>
    /// <returns>
    ///    The appropriate transaction table id.
    /// </returns>
    private tableid getCustVendTransTableID()
    {
        Tableid tableId;

        if (custVendActType == CustVendAcType::Cust)
        {
            tableId = tableNum(CustTrans);
        }
        else
        {
            tableId = tableNum(VendTrans);
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TransDate</c> value from the contract class.
    /// </summary>
    /// <returns>
    /// The <c>TransDate</c> value from the contract.
    /// </returns>
    protected TransDate getPerDate()
    {
        TransDate perDate;
        custVendTransOpenStmtContract = this.parmDataContract() as CustVendTransOpenStmtContract;
        perDate = custVendTransOpenStmtContract.parmPerDate();

        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludeFutureSettlements</Name>
				<Source><![CDATA[
    [SysObsolete('This method has been deprecated', false, 18\04\2023)]
    protected NoYes getExcludeFutureSettlements()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report parameter values from the contract class.
    /// </summary>
    protected void getReportParameters()
    {
        query       = this.parmQuery();
        transDate   = this.getPerDate();
        excludeFutureSettlementDate = this.settlementSumDate();

        this.getExcludeFutureSettlements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustVendTransDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines which helper class to instantiate based on the report type.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The customer or vendor transaction record which is used to instantiate
    ///    the class.
    /// </param>
    private void initializeCustVendTransDetails(CustVendTrans _custVendTrans)
    {
        if (custVendActType == CustVendAcType::Cust)
        {
            custVendTransDetails = new CustTransDetails(_custVendTrans, excludeFutureSettlementDate);
        }
        else
        {
            custVendTransDetails = new CustVendTransDetails(_custVendTrans, excludeFutureSettlementDate);
        }

        custVendTransDetails.setCustVendTrans(_custVendTrans);
        custVendTransDetails.setTransDate(excludeFutureSettlementDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>CustVendTransOpenStmtTmp</c> record.
    /// </summary>
    protected void insertCustVendTransOpenStmtTmp()
    {
        ttsBegin;
        custVendTransOpenStmtTmp.insert();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query before it executes it.
    /// </summary>
    /// <remarks>
    /// The subclasses can override this method to perform any custom logic.
    /// </remarks>
    protected void modifyQuery()
    {
        boolean isCustType;

        if (custVendActType == CustVendACType::Cust)
        {
            isCustType = true;
            query.dataSourceTable(tableNum(VendTable)).enabled(false);
        }
        else
        {
            query.dataSourceTable(tableNum(CustTable)).enabled(false);
        }

        CustVendTransOpenStmtController::addQueryRanges(query, isCustType, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the <c>Query</c> and makes necessary method calls to set the
    ///    <c>CustVendTransOpenStmtTmp</c> table fields and insert it.
    /// </summary>
    protected void processData()
    {
        QueryRun        qr = new QueryRun(query);
        CustVendTable   custVendTable;
        CustVendTrans   custVendTrans;

        while (qr.next())
        {
            if (qr.changed(this.getCustVendTableID()))
            {
                custVendTable = qr.get(this.getCustVendTableID());
                this.custVendTableRecordChanged(custVendTable);
            }

            custVendTrans = qr.get(this.getCustVendTransTableID());

            this.setCustVendTransOpenStmtTmp(custVendTable, custVendTrans);

            if (this.existsOpenTransactions(custVendTrans))
            {
                this.insertCustVendTransOpenStmtTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic of the report.
    /// </summary>
    public void processReport()
    {
        // Improve performance by getting company address and name
        // outside the loop.
        companyInfo = CompanyInfo::find();
        companyPostalAddress    = companyInfo.postalAddress().Address;
        companyPhoneNumber      = companyInfo.phone();
        senderTeleFax           = companyInfo.teleFax();
        senderEmail             = companyInfo.email();

        this.setUpReport();
        this.processData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustVendTransOpenStmtTmp</c> fields for the statement reports.
    /// </summary>
    /// <param name="_custVendTable">
    /// The <c>CustVendTable</c> record from which the details about the customer or vendor are obtained.
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record from which the details about the customer or vendor transactions
    /// are obtained.
    /// </param>
    protected void setCustVendTransOpenStmtTmp(CustVendTable _custVendTable, CustVendTrans _custVendTrans)
    {
        AmountCur   settledAmountCur;
        AmountMST   settledAmountMST;

        custVendTransOpenStmtTmp.clear();

        custVendTransOpenStmtTmp.SenderCompanyName              = companyInfo.Name();
        custVendTransOpenStmtTmp.SenderCompanyAddress           = companyPostalAddress;
        custVendTransOpenStmtTmp.SenderPhoneNumber              = companyPhoneNumber;
        custVendTransOpenStmtTmp.SenderVATNum                   = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custVendTransOpenStmtContract.parmPerDate());
        custVendTransOpenStmtTmp.SenderTaxRegistrationNumber    = companyInfo.CoRegNum;
        custVendTransOpenStmtTmp.SenderRegNum                   = companyInfo.RegNum;
        custVendTransOpenStmtTmp.SenderTeleFax                  = senderTeleFax;
        custVendTransOpenStmtTmp.SenderEmail                    = senderEmail;

        custVendTransOpenStmtTmp.RecipientCompanyName           = custVendName;
        custVendTransOpenStmtTmp.RecipientCompanyAddress        = custVendPostalAddress;
        custVendTransOpenStmtTmp.RecipientPhoneNumber           = custVendPhoneNumber;
        custVendTransOpenStmtTmp.RecipientVATNum                = _custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custVendTransOpenStmtContract.parmPerDate());

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            custVendTransOpenStmtTmp.RecipientEnterpriseCode        = _custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, custVendTransOpenStmtContract.parmPerDate());
        }

        custVendTransOpenStmtTmp.AccountNum = _custVendTable.AccountNum;
        custVendTransOpenStmtTmp.TransDate  = _custVendTrans.TransDate;
        custVendTransOpenStmtTmp.Voucher    = _custVendTrans.Voucher;
        custVendTransOpenStmtTmp.Invoice    = _custVendTrans.Invoice;

        custVendTransOpenStmtTmp.Currency   = _custVendTrans.CurrencyCode;
        custVendTransOpenStmtTmp.AmountMST  = _custVendTrans.AmountMST;
        custVendTransOpenStmtTmp.AmountCur  = _custVendTrans.AmountCur;

        [settledAmountCur, settledAmountMST] = this.calculateAmounts(_custVendTrans);

        custVendTransOpenStmtTmp.SettledAmountCur   = settledAmountCur;
        custVendTransOpenStmtTmp.SettledAmountMST   = settledAmountMST;
        custVendTransOpenStmtTmp.CustVendActType    = custVendActType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the report type based on the datasource present in the query.
    /// </summary>
    private void setReportType()
    {
        ModuleCustVend moduleCustVend;
        custVendTransOpenStmtContract = this.parmDataContract() as CustVendTransOpenStmtContract;
        moduleCustVend = custVendTransOpenStmtContract.parmModuleCustVend();
    
        if (moduleCustVend == moduleCustVend::Cust)
        {
            custVendActType = CustVendAcType::Cust;
        }
        else
        {
            custVendActType = CustVendAcType::Vend;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the report parameters, query and report type.
    /// </summary>
    private void setupReport()
    {
        this.getReportParameters();

        this.setReportType();

        this.modifyQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementSumDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines a date used to set how far forward we look for settlements.
    /// </summary>
    /// <returns>
    /// A date used to set how far forward we look for settlements.
    /// </returns>
    protected date settlementSumDate()
    {
        CustVendTransOpenStmtContract contract = this.parmDataContract() as CustVendTransOpenStmtContract;

        return contract && contract.parmExcludeFutureSettlements() ? contract.parmPerDate() : dateMax();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>