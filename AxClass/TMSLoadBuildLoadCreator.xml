<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildLoadCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for creating loads and load lines based on a structure in <c>TMSProposedLoad</c> tables.
/// </summary>
class TMSLoadBuildLoadCreator implements TMSILoadBuildLoadCreator
{
    TMSLoadBuildSessionId        loadBuildsessionId;
    TMSloadPaysFreight           loadPaysFreight;
    TMSProposedTotalVolume       totalVolume;
    TMSProposedTotalWeight       totalWeight;
    TMSProposedLoad              proposedLoad;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates over records in the table <c>TMSProposedLoadContent</c> to create load line records in the <c>WHSLoadLine</c> table and records in the <c>WHSLoadTable</c> table.
    /// </summary>
    /// <returns>
    /// Boolean indicating if one or more loads were created.
    /// </returns>
    public boolean buildLoads()
    {
        TMSProposedTotalVolume       aggregatedVolume = 0;
        TMSProposedTotalWeight       aggregatedWeight = 0;
        TMSLoadBuildLoadLineCreator  loadBuildLoadLineCreator;
        TMSProposedLoadContent       proposedLoadContent;
        WHSLoadTable                 loadTable;
        boolean                      isFirstLine = true;
        TMSLoadTableInitiator        loadTableInitiator;
        boolean                      paysFreightError;
        boolean                      hasInvoicedLines;

        ttsBegin;

        while select proposedLoadContent
            where proposedLoadContent.ProposedLoad == proposedLoad.RecId
        {
            if (isFirstLine)
            {
                isFirstLine  = false;

                loadTableInitiator        = TMSLoadTableInitiatorFactory::createLoadTableInitiator(proposedLoadContent.getSupplyDemandLine());
                loadTable                 = loadTableInitiator.init(proposedLoad.LoadTemplateId);
                loadTable.LoadPaysFreight = this.parmLoadPaysFreight();
                loadTable.LoadId          = proposedLoad.LoadId;
                loadTable.insert();
            }

            loadBuildLoadLineCreator = TMSLoadBuildLoadLineCreatorFactory::createLoadLineCreator(proposedLoad.LoadId, proposedLoadContent);

            if (loadBuildLoadLineCreator.buildLoadLines())
            {
                aggregatedVolume += proposedLoadContent.TotalVolume;
                aggregatedWeight += proposedLoadContent.TotalWeight;
            }
            else
            {
                throw error(strFmt("@SYP4861200", proposedLoadContent.supplyDemandOrderNum()));
            }
        }

        if (loadTable)
        {
            //for performance reasons we do some of the updates on the load table to avoid doing them for each line that is added
            loadTable = WHSLoadTable::find(loadTable.LoadId, true);
            loadTable.LoadWeight =  aggregatedWeight;
            loadTable.assignOriginInfo(AddRemove::Add);
            loadTable.assignTransTemplate();
            loadTable.update();

            // Will evaluate if the Pays Freight on the associated orders are in sync
            [hasInvoicedLines, paysFreightError] = WHSLoadTable::evaluateLoadPaysFreight(loadTable.LoadId);

            if (paysFreightError)
            {
                throw error(strFmt("@SYP4861418", loadTable.loadId));
            }

            if (loadTable.LoadWeight > loadTable.LoadTipWeight)
            {
                warning(strFmt("@SYP4861093", loadTable.LoadWeight, loadTable.LoadId, loadTable.LoadTipWeight));
            }

            if (aggregatedVolume > loadTable.LoadTipVolume)
            {
                warning(strFmt("@SYP4861092", aggregatedVolume, loadTable.LoadId, loadTable.LoadTipVolume));
            }
        }

        ttsCommit;

        return (loadTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadPaysFreight</Name>
				<Source><![CDATA[
    public TMSLoadPaysFreight parmLoadPaysFreight(TMSLoadPaysFreight _loadPaysFreight = loadPaysFreight)
    {
        loadPaysFreight = _loadPaysFreight;

        return loadPaysFreight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProposedLoad</Name>
				<Source><![CDATA[
    public TMSProposedLoad parmProposedLoad(TMSProposedLoad _proposedLoad = proposedLoad)
    {
        proposedLoad = _proposedLoad;

        return proposedLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    public TMSLoadBuildSessionId parmSessionId(TMSLoadBuildSessionId _loadBuildsessionId = loadBuildsessionId)
    {
        loadBuildsessionId = _loadBuildsessionId;

        return loadBuildsessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildLoadCreator construct()
    {
        return new TMSLoadBuildLoadCreator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>