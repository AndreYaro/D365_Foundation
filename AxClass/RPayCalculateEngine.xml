<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCalculateEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class handles the module payroll caluclation.
/// </summary>
class RPayCalculateEngine extends RunBase
{
    RPayCalculate     payCalculate;
    Args              args;
    /// <summary>
    /// Validates timesheet journal.
    /// </summary>
    /// <returns>
    /// True if no errors found.
    /// </returns>
    #RpayModuleName
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndUpdate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkAndUpdate()
    {
        boolean         ret = true;
        RPayTblJournal  payTblJournal;
        str             moduleName = this.parmArgs().parm();

        switch (moduleName)
        {
            case #ModuleNameTbl:
                payTblJournal = this.parmArgs().record();
                if (! payTblJournal.PayFormType && ! payTblJournal.HrmOrganizationId)
                {
                    return checkFailed("@GLS105785");
                }
                payCalculate.payPeriod(payTblJournal.TblDate);
                break;

            case '':
                payCalculate.payPeriod(RPayParameters::payPeriod());
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the module for calculation.
    /// </summary>
    /// <returns>
    /// True if initialization is ok.
    /// </returns>
    public boolean init()
    {
        boolean ret = super();
        RPayModuleTable     payModuleTable;
        str                 moduleName;

        if (ret)
        {
            moduleName = this.parmArgs().parm();
            if (moduleName)
            {
                payModuleTable = RPayModuleTable::find(moduleName);
            }
            else
            {
                if (this.parmArgs().record().TableId == tableNum(RPayModuleTable))
                {
                    payModuleTable = this.parmArgs().record();
                }
                else
                {
                    return false;
                }
            }
            payCalculate = payModuleTable.payCalculate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        payCalculate.queryRun().interactive(NoYes::Yes);
        payCalculate.calcQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayCalculateEngine engine = new RPayCalculateEngine();

        engine.parmArgs(_args);
        if (engine.init() && engine.checkAndUpdate())
        {
            engine.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>