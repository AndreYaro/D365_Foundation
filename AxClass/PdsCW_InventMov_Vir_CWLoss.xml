<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCW_InventMov_Vir_CWLoss</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This inventory movement class allow for the use of form virtual tables.
/// </summary>
/// <remarks>
/// This class allow for the use of catch weight items in during the profit
/// and loss process.
/// </remarks>
class PdsCW_InventMov_Vir_CWLoss extends InventMov_Virtuel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method provides the balance sheet account number for the type transaction.
    /// </summary>
    /// <returns>
    /// Returns the inventory reciept or issue account number for the transaction type
    /// </returns>
    /// <remarks>
    /// The method both returns the accounts and sets the class variable
    /// <c>cacheAccountBalanceSheet</c>
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method provides the operations account number for the type transaction.
    /// </summary>
    /// <returns>
    /// Returns the inventory reciept or issue account number for the transaction type
    /// </returns>
    /// <remarks>
    /// The method both returns the accounts and sets the class variable
    /// <c>cacheAccountOperations</c>
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.projId())
            {
                cacheAccountOperations = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount, this.projId(), this.projCategoryId(), 0);
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::PdsCWProfit));
                }
                else
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::PdsCWLoss));
                }
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the transaction may be on any location
    /// </summary>
    /// <returns>
    /// Always returns true
    /// </returns>
    /// <remarks>
    /// Transaction may be completed in any location.
    /// </remarks>
    public boolean canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the Item Dim group allows for blank posting.
    /// </summary>
    /// <param name="_inventDimGroupFieldSetup">
    /// InventDimGroupFieldSetup for which to determine blank posting
    /// </param>
    /// <returns>
    /// True, if the transaction may be posted without inventory dim information; otherwise false
    /// </returns>
    /// <remarks>
    /// If blank issue or receipt is false, the method will return false.
    /// </remarks>
    protected boolean dimAllowBlankIssue(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of class <c>PdsCW_InventMov_Vir_CWLoss</c>
    /// </summary>
    /// <param name="_common">
    /// Record to use to create instance
    /// </param>
    /// <remarks>
    /// Method creates a new instance of the class.
    /// </remarks>
    protected void new(Common _common)
    {
        super(_common);

        transType = InventTransType::InventTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provide an empty inventory movement
    /// </summary>
    /// <returns>
    /// Always returns null
    /// </returns>
    /// <remarks>
    /// Original Movement replaced with null object
    /// </remarks>
    public InventMovement newMovement_Orig()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provide remaining physical CW quantity
    /// </summary>
    /// <returns>
    /// Always returns zero(0)
    /// </returns>
    /// <remarks>
    /// The CW remainder will always be zero(0)
    /// </remarks>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIgnoreSerNumCtrlValidation</Name>
				<Source><![CDATA[
        protected boolean pdsIgnoreSerNumCtrlValidation()
    {
        // skipping serial number control as the posting may fail
        // on the estimation check of the split transactions for CW
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the operations ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the catch weight profit/loss type for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::PdsCWProfit;
        }
        else
        {
            return LedgerPostingType::PdsCWLoss;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the PdsCW_InventMov_Vir_CWLoss class.
    /// </summary>
    /// <param name="_common">
    /// Tab record used to initialize the class.
    /// </param>
    /// <returns>
    /// New instance of the PdsCW_InventMov_Vir_CWLoss class.
    /// </returns>
    public static PdsCW_InventMov_Vir_CWLoss construct(Common _common)
    {
        return new PdsCW_InventMov_Vir_CWLoss(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
/// <summary>
    /// Create a new Inventory movement and populate parameters
    /// </summary>
    /// <param name="_itemId">
    /// Itemid for movement class
    /// </param>
    /// <param name="_inventDimId">
    /// InventDimId for movement class
    /// </param>
    /// <param name="_transDate">
    /// Transaction date for movement
    /// </param>
    /// <param name="_qty">
    /// Quantity for movement
    /// </param>
    /// <param name="_cwQty">
    /// Catch Weight quantity for movement
    /// </param>
    /// <param name="_dimension">
    /// Default dimension of original source line
    /// </param>
    /// <returns>
    /// return new InventMovement instance with parameteres set
    /// </returns>
    /// <remarks>
    /// The method reuires that all parameters be populated.
    /// </remarks>
    public static InventMovement newParameters(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        TransDate       _transDate,
        InventQty       _qty,
        PdsCWInventQty   _cwQty,
        DimensionDefault _dimension = 0)
    {
        PdsCW_InventMov_Vir_CWLoss  movement_Virtuel =
            PdsCW_InventMov_Vir_CWLoss::construct(null);

        movement_Virtuel.parmTransQty(_qty);

        movement_Virtuel.pdsCWParmTransQty(_cwQty);
        movement_Virtuel.parmTransDate(_transDate);

        movement_Virtuel.parmInventTransId(NumberSeq::newGetNum(
                            InventParameters::numRefInventTransId()).num());
        movement_Virtuel.parmTransRefId(movement_Virtuel.parmInventTransId());
        movement_Virtuel.parmItemId(_itemId);
        movement_Virtuel.parmInventDimId(_inventDimId);
        movement_Virtuel.parmTransType(InventTransType::InventTransaction);

        movement_Virtuel.parmMustBeQuarantineControlled(false);
        movement_Virtuel.parmDefaultDimension(_dimension);
        return movement_Virtuel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>