<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTableFieldIdHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RetailTableFieldIdHelper
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadTableFieldMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load definition of Table and Field Ids needed by Channel DB.
    /// </summary>
    public static void loadTableFieldMetadata()
    {
        RetailTableFieldId fields;

        boolean skipInsertMethod = true;  // By design this table does not allow CUD operation using insert() update() delete() methods.
        boolean skipDeleteMethod = true;  // Bypass the insert() and delete() method to clear and reload the enum metadata.

        fields.skipDeleteMethod(skipDeleteMethod);
        delete_from fields;

        RecordInsertList fieldIdList = new RecordInsertList(tableNum(RetailTableFieldId), skipInsertMethod, true);

        //Each table.field

        //Field: InventDim.InventSerialId
        fields = RetailTableFieldIdHelper::getRetailTableFieldId(tableNum(InventDim), fieldNum(InventDim, inventSerialId));
        fieldIdList.add(fields);

        //Field: InventDim.WMSLocationId
        fields = RetailTableFieldIdHelper::getRetailTableFieldId(tableNum(InventDim), fieldNum(InventDim, wMSLocationId));
        fieldIdList.add(fields);

        // Bulk insert all the fields
        fieldIdList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailTableFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a RetailTableFieldId for the given Table and Field.
    /// </summary>
    /// <param name = "_tableId">The Table.</param>
    /// <param name = "_fieldId">The Field.</param>
    /// <returns>The RetailTableFieldId.</returns>
    private static RetailTableFieldId getRetailTableFieldId(TableId _tableId, FieldId _fieldId)
    {
        RetailTableFieldId field;
        field.id = _fieldId;
        field.FieldName = fieldId2Name(_tableId, _fieldId);
        field.TableName = tableId2Name(_tableId);
        return field;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>