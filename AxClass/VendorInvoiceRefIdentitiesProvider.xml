<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorInvoiceRefIdentitiesProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendorInvoiceRefIdentitiesProvider</c> class loads vendor invoice reference identities
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice)]
class VendorInvoiceRefIdentitiesProvider extends SourceDocReferenceIdentitiesProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        typeEnumName = enumStr(SourceDocument_VendorInvoice);
        typeEnumValue = SourceDocument_VendorInvoice::VendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChargeSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertChargeSourceDocLineRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        AccountingEvent accountingEvent;
        SourceDocumentHeader sourceDocumentHeader;
        SourceDocumentLine sourceDocumentLine;
        MarkupTrans markupTrans;
        VendInvoiceTrans vendInvoiceTrans;
        SubledgerJournalTransferId refIdentityTransferId = this.parmReferenceIdentityTransferId();
        TableId vendInvoiceTransTableId = tableNum(VendInvoiceTrans);

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            SourceDocumentLine,
            ProductNumber,
            LineNumber,
            LineText,
            LineDocumentReference,
            SourceDocumentAcctEventReferenceIdentity)
        select
            SourceDocumentLine,
            MarkupCode,
            LineNum,
            Txt
        from markupTrans
            group by
                sourceDocumentLine.RecId,
                accountingEvent.RecId,
                markupTrans.SourceDocumentLine,
                markupTrans.MarkupCode,
                markupTrans.LineNum,
                markupTrans.Txt,
                vendInvoiceTrans.OrigPurchId,
                sourceDocumentAcctEventReferenceIdentity.RecId
            where markupTrans.TransTableId == vendInvoiceTransTableId
        join OrigPurchId from vendInvoiceTrans
            where vendInvoiceTrans.RecId == markupTrans.TransRecId
        join sourceDocumentLine
            where sourceDocumentLine.RecId == markupTrans.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == markupTrans.SourceDocumentLine
               && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocAccEventRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocAccEventRefIdentities()
    {
        this.insertSourceDocAccEventRefIdentitiesUpdatedQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocAccEventRefIdentitiesUpdatedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query was restructured to improve performance by reducing the number of rows returned from the query.
    /// This is accomplished by selecting from SubledgerJournalEntryIdentityInProcess first to narrow the selection to only contain the records we want to process.
    /// </summary>
    private void insertSourceDocAccEventRefIdentitiesUpdatedQuery()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity, sourceDocumentAcctEventReferenceIdentityNotExists;
        VendTable vendTable;
        DirPartyTable dirPartyTable;
        VendInvoiceJour vendInvoiceJour;
        AccountingEvent accountingEvent;
        VendTrans vendTrans;
        SubledgerJournalTransferId refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentAcctEventReferenceIdentity.skipDataMethods(true);
            sourceDocumentAcctEventReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentAcctEventReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentAcctEventReferenceIdentity(
            AccountingEvent,
            DocumentNumber,
            DocumentDate,
            PartyNumber,
            DocumentDescription,
            SourceDocumentHeader,
            PartyName)
        select AccountingEvent
        from subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent != 0 &&
                subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == referenceIdentityTransferId
        join vendTrans
            where vendTrans.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
        join
            InvoiceId,
            DocumentDate,
            InvoiceAccount,
            Description,
            SourceDocumentHeader
        from vendInvoiceJour
            where vendInvoiceJour.InvoiceId == vendTrans.Invoice &&
                vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum &&
                vendInvoiceJour.InvoiceDate == vendTrans.TransDate &&
                vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
        join vendTable
            where vendTable.AccountNum == vendInvoiceJour.InvoiceAccount
        join Name from dirPartyTable
            where dirPartyTable.RecId == vendTable.Party
        exists join accountingEvent
            where accountingEvent.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
                && accountingEvent.RecId == subledgerJournalEntryIdentityInProcess.AccountingEvent
        notExists join sourceDocumentAcctEventReferenceIdentityNotExists
            where sourceDocumentAcctEventReferenceIdentityNotExists.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
                && sourceDocumentAcctEventReferenceIdentityNotExists.AccountingEvent == accountingEvent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocLineRefIdentities()
    {
        if(VendorInvoiceLineRefIdentitiesProviderUpdatedQueryFlight::instance().isEnabled())
        {
            this.insertSourceDocLineRefIdentitiesUpdatedQuery();
        }
        else
        {
            SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
            SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
            SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
            AccountingEvent accountingEvent;
            SourceDocumentHeader sourceDocumentHeader;
            SourceDocumentLine sourceDocumentLine;
            VendInvoiceTrans vendInvoiceTrans;
            EcoResCategory ecoResCategory;
            SubledgerJournalTransferId refIdentityTransferId = this.parmReferenceIdentityTransferId();
            InventDim inventDim;

            if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
            {
                sourceDocumentLineReferenceIdentity.skipDataMethods(true);
                sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
                sourceDocumentLineReferenceIdentity.skipEvents(true);
            }

            insert_recordset sourceDocumentLineReferenceIdentity(
                SourceDocumentLine,
                ProductNumber,
                Quantity,
                Unit,
                LineDocumentReference,
                LineNumber,
                LineText,
                LineDescription,
                SourceDocumentAcctEventReferenceIdentity)
            select
                SourceDocumentLine,
                ItemId,
                Qty,
                PurchUnit,
                OrigPurchId,
                LineNum,
                Name,
                Description from vendInvoiceTrans
                group by
                    sourceDocumentLine.RecId,
                    accountingEvent.RecId,
                    vendInvoiceTrans.SourceDocumentLine,
                    vendInvoiceTrans.ItemId,
                    vendInvoiceTrans.Qty,
                    vendInvoiceTrans.PurchUnit,
                    vendInvoiceTrans.OrigPurchId,
                    vendInvoiceTrans.LineNum,
                    vendInvoiceTrans.Name,
                    vendInvoiceTrans.Description,
                    sourceDocumentAcctEventReferenceIdentity.RecId
            join sourceDocumentLine
                where sourceDocumentLine.RecId == vendInvoiceTrans.SourceDocumentLine
            join sourceDocumentHeader
                where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
            join accountingEvent
                where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                   && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
                   && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            notExists join sourceDocumentLineReferenceIdentityNotExists
                where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == vendInvoiceTrans.SourceDocumentLine
                   && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;

            update_recordset sourceDocumentLineReferenceIdentity setting
                Location = inventDim.InventSiteId
                where sourceDocumentLineReferenceIdentity.Location == ''
            join vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join InventSiteId from inventDim
                where inventDim.inventDimId == vendInvoiceTrans.InventDimId
            join sourceDocumentLine
                where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join sourceDocumentHeader
                where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
            join accountingEvent
                where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                   && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
                   && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId;

            update_recordSet sourceDocumentLineReferenceIdentity setting
                ProductNumber = ecoResCategory.Name
                where sourceDocumentLineReferenceIdentity.ProductNumber == ''
            join vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join Name from ecoResCategory
                where ecoResCategory.RecId == vendInvoiceTrans.ProcurementCategory
            join sourceDocumentLine
                where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join sourceDocumentHeader
                where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
            join accountingEvent
                where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                   && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
                   && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocLineRefIdentitiesUpdatedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries were restructured to improve performance by reducing the number of rows returned from the query and eliminating joins that were not needed.
    /// This is accomplished by selecting from SubledgerJournalEntryIdentityInProcess first to narrow the selection to only contain the records we want to process.
    /// Joins on AccountingEvent and SourceDocumentHeader were not needed as the data was available in other tables.
    /// Grouping order was changed to match the new field order.
    /// </summary>
    private void insertSourceDocLineRefIdentitiesUpdatedQuery()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        SourceDocumentLine sourceDocumentLine;
        VendInvoiceTrans vendInvoiceTrans;
        EcoResCategory ecoResCategory;
        InventDim inventDim;
        SubledgerJournalTransferId refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
                SourceDocumentAcctEventReferenceIdentity,
                SourceDocumentLine,
                ProductNumber,
                Quantity,
                Unit,
                LineDocumentReference,
                LineNumber,
                LineText,
                LineDescription)
        select subledgerJournalEntryIdentityInProcess 
            where subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == referenceIdentityTransferId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
        join sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader
        join SourceDocumentLine,
             ItemId,
             Qty,
             PurchUnit,
             OrigPurchId,
             LineNum,
             Name,
             Description
            from vendInvoiceTrans
                group by
                    sourceDocumentAcctEventReferenceIdentity.RecId,
                    vendInvoiceTrans.SourceDocumentLine,
                    vendInvoiceTrans.ItemId,
                    vendInvoiceTrans.Qty,
                    vendInvoiceTrans.PurchUnit,
                    vendInvoiceTrans.OrigPurchId,
                    vendInvoiceTrans.LineNum,
                    vendInvoiceTrans.Name,
                    vendInvoiceTrans.Description
            where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLine.RecId
        notexists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == vendInvoiceTrans.SourceDocumentLine
                && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;

        update_recordset sourceDocumentLineReferenceIdentity setting
                Location = inventDim.InventSiteId
                where sourceDocumentLineReferenceIdentity.Location == ''
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentAcctEventReferenceIdentity
                && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
            join sourceDocumentLine
                where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join inventDim
                where inventDim.inventDimId == vendInvoiceTrans.InventDimId;

        update_recordSet sourceDocumentLineReferenceIdentity setting
                ProductNumber = ecoResCategory.Name
                where sourceDocumentLineReferenceIdentity.ProductNumber == ''
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentAcctEventReferenceIdentity
                && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
            join sourceDocumentLine
                where sourceDocumentLine.RecId == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLineReferenceIdentity.SourceDocumentLine
            join Name from ecoResCategory
                where ecoResCategory.RecId == vendInvoiceTrans.ProcurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertTaxSourceDocLineRefIdentities()
    {
        if (VendorInvoiceTaxRefIdentitiesProviderUpdatedQueryFlight::instance().isEnabled())
        {
            this.insertTaxSourceDocLineRefIdentitiesUpdatedQuery();
        }
        else
        {
            SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
            SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
            SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
            AccountingEvent accountingEvent;
            SourceDocumentHeader sourceDocumentHeader;
            SourceDocumentLine sourceDocumentLine;
            TaxTrans taxTrans;
            MarkupTrans markupTrans;
            VendInvoiceTrans vendInvoiceTrans;
            SubledgerJournalTransferId refIdentityTransferId = this.parmReferenceIdentityTransferId();
            TableId vendInvoiceTransTableId = tableNum(VendInvoiceTrans);
            TableId markupTransTableId = tableNum(MarkupTrans);

            if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
            {
                sourceDocumentLineReferenceIdentity.skipDataMethods(true);
                sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
                sourceDocumentLineReferenceIdentity.skipEvents(true);
            }

            insert_recordset sourceDocumentLineReferenceIdentity(
                SourceDocumentLine,
                ProductNumber,
                Quantity,
                LineText,
                LineDescription,
                LineDocumentReference,
                SourceDocumentAcctEventReferenceIdentity)
            select
                SourceDocumentLine,
                TaxCode,
                TaxValue,
                TaxItemGroup,
                TaxGroup from taxTrans
                    group by
                    sourceDocumentLine.RecId,
                    accountingEvent.RecId,
                    taxTrans.SourceDocumentLine,
                    taxTrans.TaxCode,
                    taxTrans.TaxValue,
                    taxTrans.TaxItemGroup,
                    taxTrans.TaxGroup,
                    sourceDocumentAcctEventReferenceIdentity.RecId,
                    vendInvoiceTrans.OrigPurchId
                where taxTrans.SourceTableId == vendInvoiceTransTableId
            join OrigPurchId from vendInvoiceTrans
                where vendInvoiceTrans.RecId == taxTrans.SourceRecId
            join sourceDocumentLine
                where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
            join sourceDocumentHeader
                where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
            join accountingEvent
                where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                   && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
                   && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            notExists join sourceDocumentLineReferenceIdentityNotExists
                where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == taxTrans.SourceDocumentLine
                   && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;

            insert_recordset sourceDocumentLineReferenceIdentity(
                SourceDocumentLine,
                ProductNumber,
                Quantity,
                LineText,
                LineDescription,
                LineDocumentReference,
                SourceDocumentAcctEventReferenceIdentity)
            select
                SourceDocumentLine,
                TaxCode,
                TaxValue,
                TaxItemGroup,
                TaxGroup from taxTrans
                    group by
                    sourceDocumentLine.RecId,
                    accountingEvent.RecId,
                    taxTrans.SourceDocumentLine,
                    taxTrans.TaxCode,
                    taxTrans.TaxValue,
                    taxTrans.TaxItemGroup,
                    taxTrans.TaxGroup,
                    sourceDocumentAcctEventReferenceIdentity.RecId,
                    vendInvoiceTrans.OrigPurchId
                where taxTrans.SourceTableId == markupTransTableId
            join markupTrans
                where markupTrans.RecId == taxTrans.SourceRecId
            join OrigPurchId from vendInvoiceTrans
                where vendInvoiceTrans.RecId == markupTrans.TransRecId
            join sourceDocumentLine
                where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
            join sourceDocumentHeader
                where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
            join accountingEvent
                where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                   && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
            join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
                   && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            notExists join sourceDocumentLineReferenceIdentityNotExists
                where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == taxTrans.SourceDocumentLine
                   && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxSourceDocLineRefIdentitiesUpdatedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries were restructured to improve performance by reducing the number of rows returned from the query and eliminating joins that were not needed.
    /// This is accomplished by selecting from SubledgerJournalEntryIdentityInProcess first to narrow the selection to only contain the records we want to process.
    /// Joins on AccountingEvent and SourceDocumentHeader were not needed as the data was available in other tables.
    /// Grouping order was changed to match the new field order.
    /// </summary>
    private void insertTaxSourceDocLineRefIdentitiesUpdatedQuery()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        SourceDocumentLine sourceDocumentLine;
        TaxTrans taxTrans;
        MarkupTrans markupTrans;
        VendInvoiceTrans vendInvoiceTrans;
        SubledgerJournalTransferId refIdentityTransferId = this.parmReferenceIdentityTransferId();
        TableId vendInvoiceTransTableId = tableNum(VendInvoiceTrans);
        TableId markupTransTableId = tableNum(MarkupTrans);

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
                SourceDocumentAcctEventReferenceIdentity,
                LineDocumentReference,
                SourceDocumentLine,
                ProductNumber,
                Quantity,
                LineText,
                LineDescription)
            select subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
            join sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader
            join OrigPurchId from vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLine.RecId
            join SourceDocumentLine,
                TaxCode,
                TaxValue,
                TaxItemGroup,
                TaxGroup from taxTrans
                   group by
                       sourceDocumentAcctEventReferenceIdentity.RecId,
                       vendInvoiceTrans.OrigPurchId,
                       taxTrans.SourceDocumentLine,
                       taxTrans.TaxCode,
                       taxTrans.TaxValue,
                       taxTrans.TaxItemGroup,
                       taxTrans.TaxGroup
                where taxTrans.SourceTableId == vendInvoiceTransTableId
                && taxTrans.SourceRecId == vendInvoiceTrans.RecId
            notexists join sourceDocumentLineReferenceIdentityNotExists
                where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == taxTrans.SourceDocumentLine
                    && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;

        insert_recordset sourceDocumentLineReferenceIdentity(
                SourceDocumentAcctEventReferenceIdentity,
                LineDocumentReference,
                SourceDocumentLine,
                ProductNumber,
                Quantity,
                LineText,
                LineDescription)
            select subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            join RecId from sourceDocumentAcctEventReferenceIdentity
                where sourceDocumentAcctEventReferenceIdentity.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
            join sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader
            join OrigPurchId from vendInvoiceTrans
                where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLine.RecId
            join markupTrans
                where markupTrans.TransRecId == vendInvoiceTrans.RecId
            join SourceDocumentLine,
                TaxCode,
                TaxValue,
                TaxItemGroup,
                TaxGroup from taxTrans
                   group by
                       sourceDocumentAcctEventReferenceIdentity.RecId,
                       vendInvoiceTrans.OrigPurchId,
                       taxTrans.SourceDocumentLine,
                       taxTrans.TaxCode,
                       taxTrans.TaxValue,
                       taxTrans.TaxItemGroup,
                       taxTrans.TaxGroup
                where taxTrans.SourceTableId == markupTransTableId
                    && taxTrans.SourceRecId == markupTrans.RecId
            notExists join sourceDocumentLineReferenceIdentityNotExists
                where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == taxTrans.SourceDocumentLine
                   && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReferenceIdentities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c>SourceDocumentAcctEventReferenceIdentity</c> and <c>SourceDocumentLineReferenceIdentity</c> tables with vendor invoice reference identities.
    /// </summary>
    protected void populateReferenceIdentities()
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::SourceDocReferenceIdentitiesProvider,
            classStr(VendorInvoiceRefIdentitiesProvider),
            SourceDocumentInstrumentationConstants::VendorInvoiceRefIdentitiesProvider))
        {
            int64 startTime, curTime = 0;

            startTime = activityContext.getElapsedMilliseconds();
            // Process the main source document reference identities for the header and lines
            this.insertSourceDocAccEventRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertAcctEventRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related line reference identities
            this.insertSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertLineRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related misc charge reference identities
            this.insertChargeSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertChargeRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related tax reference identities
            this.insertTaxSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertTaxRefIdentities,
                int642Str(curTime - startTime));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>