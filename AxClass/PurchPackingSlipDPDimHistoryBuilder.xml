<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPackingSlipDPDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPackingSlipDPDimHistoryBuilder</c> class builds the storage dimension and the data to be entered to temporary table for the <c>PurchPackingSlipDP</c> class.
/// </summary>
class PurchPackingSlipDPDimHistoryBuilder extends SalesPurchDimHistoryBuilder
{
    private VendPackingSlipJour     vendPackingSlipJour;
    private VendPackingSlipTrans    vendPackingSlipTrans;
    private VendPackingSlipVersion  vendPackingSlipVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return vendPackingSlipTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipTrans</Name>
				<Source><![CDATA[
    public VendPackingSlipTrans parmVendPackingSlipTrans(VendPackingSlipTrans _vendPackingSlipTrans = vendPackingSlipTrans)
    {
        vendPackingSlipTrans = _vendPackingSlipTrans;
        return vendPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipJour</Name>
				<Source><![CDATA[
    public VendPackingSlipJour parmVendPackingSlipJour(VendPackingSlipJour _vendPackingSlipJour = vendPackingSlipJour)
    {
        vendPackingSlipJour = _vendPackingSlipJour;
        return vendPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipVersion</Name>
				<Source><![CDATA[
    public VendPackingSlipVersion parmVendPackingSlipVersion(VendPackingSlipVersion _vendPackingSlipVersion = vendPackingSlipVersion)
    {
        vendPackingSlipVersion = _vendPackingSlipVersion;
        return vendPackingSlipVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitOfMeasure</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol lineUnitOfMeasure()
    {
        return vendPackingSlipTrans.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantity</Name>
				<Source><![CDATA[
    protected Qty lineQuantity()
    {
        return vendPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProformaDimensionStringForStockedProduct</Name>
				<Source><![CDATA[
    protected void buildProformaDimensionStringForStockedProduct()
    {
        InventQty qtyRemain = vendPackingSlipTrans.InventQty;

        if (qtyRemain)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            while select inventTrans
                order by StatusReceipt, InventDimId
                    where (inventTrans.StatusReceipt    == StatusReceipt::Ordered
                        ||  inventTrans.StatusReceipt   == StatusReceipt::Arrived
                        ||  inventTrans.StatusReceipt   == StatusReceipt::Registered)
                        && inventTrans.StatusIssue      == StatusIssue::None
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                join inventTransOrigin
                    where inventTransOrigin.InventTransId == vendPackingSlipTrans.InventTransId
                    &&  inventTrans.InventTransOrigin == inventTransOrigin.RecId
            {
                if (this.mustPrintTransactionQuantity(inventTransOrigin, inventTrans, inventDim))
                {
                    qtyRemain = this.inventDimPrintForTransaction(qtyRemain, inventTrans.Qty, InventDim);

                    if (!qtyRemain)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForVersion()
    {
        InventReportDimHistory inventReportDimHistory;
        InventDim inventDim;
        boolean inventDimPrintedPerQty;

        while select Qty from inventReportDimHistory
            where inventReportDimHistory.InventTransId        == vendPackingSlipTrans.InventTransId            &&
                    inventReportDimHistory.TransRefId         == vendPackingSlipVersion.InternalPackingSlipId  &&
                    inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchPackingSlip &&
                    inventReportDimHistory.Qty                == vendPackingSlipTrans.Qty &&
                    inventReportDimHistory.InventDimId        == vendPackingSlipTrans.InventDimId
            join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId
        {
            this.inventDimPrint(inventReportDimHistory.qty, inventDim);
            inventDimPrintedPerQty = true;
        }

        if (!inventDimPrintedPerQty)
        {
            while select Qty from inventReportDimHistory
            where inventReportDimHistory.InventTransId        == vendPackingSlipTrans.InventTransId            &&
                    inventReportDimHistory.TransRefId         == vendPackingSlipVersion.InternalPackingSlipId  &&
                    inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchPackingSlip
            join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId
            {
                this.inventDimPrint(inventReportDimHistory.qty, inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return vendPackingSlipJour.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    protected boolean isProforma()
    {
        return vendPackingSlipJour.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProduct</Name>
				<Source><![CDATA[
    protected boolean isStockedProduct()
    {
        return vendPackingSlipTrans.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchPackingSlipDPDimHistoryBuilder construct()
    {
        return new PurchPackingSlipDPDimHistoryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForMostRecentVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForMostRecentVersion()
    {
        if (PurchPackingSlipDPDimHistoryBuilderDimensionsFlight::instance().isEnabled())
        {
            InventReportDimHistory inventReportDimHistory;
            VendPackingSlipVersion localVendPackingSlipVersion;
            InventDim inventDim;

            select firstOnly RecId, InternalPackingSlipId from localVendPackingSlipVersion
                order by localVendPackingSlipVersion.VersionDateTime desc
                where localVendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                    && localVendPackingSlipVersion.VersionDateTime    <  vendPackingSlipVersion.VersionDateTime
                exists join inventReportDimHistory
                    where inventReportDimHistory.TransRefId          == localVendPackingSlipVersion.InternalPackingSlipId
                        && inventReportDimHistory.InventTransId      == vendPackingSlipTrans.InventTransId
                        && inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchPackingSlip
                exists join inventDim
                    where inventDim.InventDimId == inventReportDimHistory.InventDimId;

            if (localVendPackingSlipVersion.RecId)
            {
                this.printInventDimForVendPackingSlipVersion(localVendPackingSlipVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventDimForVendPackingSlipVersion</Name>
				<Source><![CDATA[
    private void printInventDimForVendPackingSlipVersion(VendPackingSlipVersion _vendPackingSlipVersion)
    {
        InventReportDimHistory inventReportDimHistory;
        InventDim inventDim;

        while select Qty from inventReportDimHistory
            where inventReportDimHistory.TransRefId         == _vendPackingSlipVersion.InternalPackingSlipId
                && inventReportDimHistory.InventTransId      == vendPackingSlipTrans.InventTransId
            && inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchPackingSlip
            join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId
        {
            this.inventDimPrint(inventReportDimHistory.Qty, inventDim);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>