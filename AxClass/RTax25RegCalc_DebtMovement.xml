<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_DebtMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_DebtMovement extends RTax25RegCalc implements BatchRetryable
{
    BatchHeader                         batchHeader;
    RTax25RegCalc_DebtMovementMultiply  calc, calcFinal;
    int                                 maxThreads;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        super();

        calcFinal = RTax25RegCalc_DebtMovementMultiply::construct(registerType, 0, registerJournalTrans.RecId, this.isInBatch());

        if (maxThreads > 1)
        {
            // Get the header for this batch.
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            calcFinal.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            calcFinal.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + "@SYP4860778");
            batchHeader.addRuntimeTask(calcFinal, this.parmCurrentBatch().RecId);

            this.distributeTrans();

            batchHeader.save();
        }
        else
        {
            calc = RTax25RegCalc_DebtMovementMultiply::construct(registerType, 1, registerJournalTrans.RecId, this.isInBatch());
            calc.runOperation();
            calcFinal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTasks(CustVend_RU _custVend, NoYes _settleSelect, RecId _recIdFrom, RecId _recIdTo)
    {
        calc = RTax25RegCalc_DebtMovementMultiply::construct(registerType, 1, registerJournalTrans.RecId, this.isInBatch());
        calc.parmRecIdRange(_custVend, _settleSelect, _recIdFrom, _recIdTo);
        calc.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        calc.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + strfmt("%1 %2..%3", _custVend, _recIdFrom, _recIdTo));
        batchHeader.addRuntimeTask(calc, this.parmCurrentBatch().RecId);
        batchHeader.addDependency(calcFinal, calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void distributeTrans()
    {
        RecId                               custSettleCount, vendSettleCount, custOpenCount, vendOpenCount,
                                            maxCustSettle, maxVendSettle, maxCustOpen, maxVendOpen, allCount;
        real                                ctSettleFactor, vtSettleFactor, ctOpenFactor, vtOpenFactor;
        Set                                 setThread = new Set(Types::Container);
        SetEnumerator                       se;
        int                                 curThread, restThread;
        RTax25DebtModel                     rTax25DebtModel;
        TransDate                           modelDateFrom, modelDateTo;

        int splitThreads(real _factor)
        {
            int thread;
            ;

            thread = real2int(decRound(maxThreads * _factor, 0));
            thread = thread > restThread ? restThread : thread;
            return (thread > 0 || !_factor) ? thread : 1;
        }

        void createRangedTasks(CustVend_RU _custVend, NoYes _settleSelect, int _threads, int64 _restTrans, RecId _maxRecId)
        {
            int   i;
            int64 recIdFrom, recIdTo,
                  numForThread = _restTrans / _threads;

            for (i = 1; numForThread && i <= _threads - 1; i++)
            {
                recIdTo = this.getNextRecId(_custVend, _settleSelect, numForThread, recIdFrom);
                this.createTasks(_custVend, _settleSelect, recIdFrom + 1, recIdTo);
                restThread--;
                recIdFrom = recIdTo;
            }
            this.createTasks(_custVend, _settleSelect, recIdFrom + 1, _maxRecId);
            restThread--;
        }
        ;

        if (regType.badDebtModel())
        {
            rTax25DebtModel = RTax25DebtModel::findRecId(regType.badDebtModel());
            if (rTax25DebtModel)
            {
                [modelDateFrom, modelDateTo] = RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, dateTo);
            }
        }
  
        if (modelDateTo == dateTo)
        {
            dateFrom = modelDateFrom;
        }

        if (! modelDateTo || modelDateTo == dateTo)
        {
            [custSettleCount, custOpenCount, maxCustSettle, maxCustOpen] = this.fetchCustVendDebtsMovement(CustVend_RU::Cust);
            [vendSettleCount, vendOpenCount, maxVendSettle, maxVendOpen] = this.fetchCustVendDebtsMovement(CustVend_RU::Vend);
        }

        allCount = custSettleCount + custOpenCount + vendSettleCount + vendOpenCount;

        if (allCount)
        {
            maxThreads = maxThreads > 4 ? maxThreads : 4;
            restThread = maxThreads;

            ctSettleFactor = custSettleCount / allCount;
            ctOpenFactor   = custOpenCount / allCount;
            vtSettleFactor = vendSettleCount / allCount;
            vtOpenFactor   = vendOpenCount / allCount;

            setThread.add([ctSettleFactor, CustVend_RU::Cust, NoYes::Yes, custSettleCount, maxCustSettle]);
            setThread.add([ctOpenFactor,   CustVend_RU::Cust, NoYes::No,  custOpenCount,   maxCustOpen]);
            setThread.add([vtSettleFactor, CustVend_RU::Vend, NoYes::Yes, vendSettleCount, maxVendSettle]);
            setThread.add([vtOpenFactor,   CustVend_RU::Vend, NoYes::No,  vendOpenCount,   maxVendOpen]);

            se = setThread.getEnumerator();
            while (se.moveNext())
            {
                curThread = splitThreads(conpeek(se.current(), 1));
                if (curThread)
                {
                    createRangedTasks(conpeek(se.current(), 2),
                                      conpeek(se.current(), 3),
                                      curThread,
                                      conpeek(se.current(), 4),
                                      conpeek(se.current(), 5));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCustVendDebtsMovement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container fetchCustVendDebtsMovement(CustVend_RU   _custVend)
    {
        RTax25DebtType      debtType;
        boolean             prepayment;
        CustVendTrans       custVendTrans;
        CustVendTransOpen   custVendTransOpen;
        CustVendSettlement  custVendSettlement;
        RecId               settleCount, openCount, maxSettle, maxOpen;

        if (_custVend == CustVend_RU::Cust)
        {
            custVendTrans      = new DictTable(tablenum(CustTrans)).makeRecord();
            custVendTransOpen  = new DictTable(tablenum(CustTransOpen)).makeRecord();
            custVendSettlement = new DictTable(tablenum(CustSettlement)).makeRecord();
        }
        else
        {
            custVendTrans      = new DictTable(tablenum(VendTrans)).makeRecord();
            custVendTransOpen  = new DictTable(tablenum(VendTransOpen)).makeRecord();
            custVendSettlement = new DictTable(tablenum(VendSettlement)).makeRecord();
        }

        if (registerType  == RTax25RegisterType::DebtDebitMovement ||
            registerType  == RTax25RegisterType::DebtDebitMovementRAP)
        {
            debtType   = RTax25DebtType::Debit;
            prepayment = (_custVend == CustVend_RU::Vend);
        }
        else
        {
            debtType = RTax25DebtType::Credit;
            prepayment = (_custVend == CustVend_RU::Cust);
        }

        select maxof(RecId), count(OffsetRecId) from custVendTrans
            where ((debtType == RTax25DebtType::Debit  && custVendTrans.AmountMST > 0)         ||
                   (debtType == RTax25DebtType::Credit && custVendTrans.AmountMST < 0))        &&
                  custVendTrans.TransDate       <= dateTo                                      &&
                  custVendTrans.SettleAmountCur != 0.0                                         &&
                  ((prepayment  && custVendTrans.Prepayment) || ! prepayment)                  &&
                  custVendTrans.TransType != LedgerTransType::ExchAdjustment                   &&
                  custVendTrans.TransType != LedgerTransType::AdvanceAdjustment_RU             &&
                  custVendTrans.TransType != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                  custVendTrans.TransType != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                  custVendTrans.TransType != LedgerTransType::Tax
        exists join custVendSettlement
            where custVendSettlement.TransRecId  == custVendTrans.RecId &&
                  ((custVendSettlement.DueDate   >= dateFrom            &&
                    custVendSettlement.DueDate   <= dateTo)             ||
                   (custVendSettlement.TransDate >= dateFrom            &&
                    custVendSettlement.TransDate <= dateTo));

        settleCount = custVendTrans.OffsetRecId;
        maxSettle   = custVendTrans.RecId;

        select maxof(RecId), count(OffsetRecId) from custVendTrans
            where ((debtType == RTax25DebtType::Debit  && custVendTrans.AmountMST > 0)         ||
                   (debtType == RTax25DebtType::Credit && custVendTrans.AmountMST < 0))        &&
                  custVendTrans.TransDate       <= dateTo                                      &&
                  custVendTrans.SettleAmountCur == 0.0                                         &&
                  ((prepayment  && custVendTrans.Prepayment) || ! prepayment)                  &&
                  custVendTrans.TransType != LedgerTransType::ExchAdjustment                   &&
                  custVendTrans.TransType != LedgerTransType::AdvanceAdjustment_RU             &&
                  custVendTrans.TransType != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                  custVendTrans.TransType != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                  custVendTrans.TransType != LedgerTransType::Tax
        exists join DueDate from custVendTransOpen
            where custVendTransOpen.RefRecId  == custVendTrans.RecId &&
                  ((custVendTransOpen.DueDate >= dateFrom            &&
                    custVendTransOpen.DueDate <= dateTo));

        openCount = custVendTrans.OffsetRecId;
        maxOpen   = custVendTrans.RecId;

        return [settleCount, openCount, maxSettle, maxOpen];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRecId</Name>
				<Source><![CDATA[
    private RecId getNextRecId(CustVend_RU _custVend, NoYes _settleSelect, RecId _top, RecId _from)
    {
        Statement                     statement;
        str                           sqlStr;
        SqlStatementExecutePermission permission;
        ResultSet                     resultSet;
        SqlSystem                     sqlSystem = new sqlSystem();
        Connection                    connecton = new Connection();
        DictTable                     custVendTrans, custVendSettle, custVendTransOpen;
        ;

        if (_custVend == CustVend_RU::Cust)
        {
            custVendTrans     = new DictTable(tablenum(CustTrans));
            custVendSettle    = new DictTable(tablenum(CustSettlement));
            custVendTransOpen = new DictTable(tablenum(CustTransOpen));
        }
        else
        {
            custVendTrans     = new DictTable(tablenum(VendTrans));
            custVendSettle    = new DictTable(tablenum(VendSettlement));
            custVendTransOpen = new DictTable(tablenum(VendTransOpen));
        }

        sqlStr  = 'SELECT MAX(RECID) FROM ';
        sqlStr += '(SELECT TOP ' + int642str(_top) + ' RECID FROM ' + custVendTrans.name(DbBackend::Sql) + ' AS B';
        sqlStr += ' WHERE DataAreaId = ' + sqlSystem.sqlLiteral(registerJournalTrans.dataAreaId);
        sqlStr += ' AND RECID > ' + sqlSystem.sqlLiteral(_from);
        sqlStr += ' AND TransDate <= ' + sqlSystem.sqlLiteral(dateTo);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::ExchAdjustment);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::AdvanceAdjustment_RU);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::RTax25_BadDebtCreditAmortisation);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::RTax25_BadDebtDebitAmortisation);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::Tax);

        if (registerType == RTax25RegisterType::DebtDebitMovement ||
            registerType == RTax25RegisterType::DebtDebitMovementRAP)
        {
            sqlStr += ' AND AmountCur > 0';
            if (_custVend == CustVend_RU::Vend)
            {
                sqlStr += ' AND Prepayment = ' + sqlSystem.sqlLiteral(NoYes::Yes);
            }
        }
        else
        {
            sqlStr += ' AND AmountCur < 0';
            if (_custVend == CustVend_RU::Cust)
            {
                sqlStr += ' AND Prepayment = ' + sqlSystem.sqlLiteral(NoYes::Yes);
            }
        }

        if (_settleSelect)
        {   // select settlements
            sqlStr += ' AND SettleAmountCur != 0';
            sqlStr += ' AND EXISTS (SELECT * FROM ' + custVendSettle.name(DbBackend::Sql) + ' AS C';
            sqlStr += ' WHERE C.DataAreaId = ' + sqlSystem.sqlLiteral(curext());
            sqlStr += ' AND C.TransRecId = B.RECID';
            sqlStr += ' AND ((C.DueDate >= ' + sqlSystem.sqlLiteral(dateFrom);
            sqlStr += ' AND C.DueDate <= ' + sqlSystem.sqlLiteral(dateTo) + ')';
            sqlStr += ' OR (C.TransDate >= ' + sqlSystem.sqlLiteral(dateFrom);
            sqlStr += ' AND C.TransDate <= ' + sqlSystem.sqlLiteral(dateTo) + ')))';
        }
        else
        {   // select custVendTransOpen
            sqlStr += ' AND SettleAmountCur = 0';
            sqlStr += ' AND EXISTS (SELECT * FROM ' + custVendTransOpen.name(DbBackend::Sql) + ' AS C';
            sqlStr += ' WHERE C.DataAreaId = ' + sqlSystem.sqlLiteral(curext());
            sqlStr += ' AND C.RefRecId = B.RECID';
            sqlStr += ' AND C.DueDate >= ' + sqlSystem.sqlLiteral(dateFrom);
            sqlStr += ' AND C.DueDate <= ' + sqlSystem.sqlLiteral(dateTo) + ')';
        }

        sqlStr += ' ORDER BY B.RECID ASC';
        sqlStr += ') as A';

        statement = connecton.createStatement();
        permission = new SqlStatementExecutePermission(sqlStr);
        permission.assert();
        resultSet = statement.executeQuery(sqlStr);
        CodeAccessPermission::revertAssert();

        resultSet.next();
        return resultSet.getInt64(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        super(_registerJournalTrans, _batch);

        if (this.isInBatch())
        {
            maxThreads = RTax25RegisterParameters::find(registerId, 1).Parameter ?
                         str2int(RTax25RegisterParameters::find(registerId, 1).Parameter) :
                         0;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalc</Name>
				<Source><![CDATA[
    public void postCalc()
    {
    //   super(); do not change the register status
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>