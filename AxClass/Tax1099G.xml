<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099G</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Tax1099G extends Tax1099Base implements Tax1099IForm
{
    const Tax1099Box G1 = 'G-1';
    const Tax1099Box G2 = 'G-2';
    const Tax1099Box G4 = 'G-4';
    const Tax1099Box G5 = 'G-5';
    const Tax1099Box G6 = 'G-6';
    const Tax1099Box G7 = 'G-7';
    const Tax1099Box G9 = 'G-9';
    const str ReturnType = 'F';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        select sum(Amount1), sum(Amount2), sum(Amount4), sum(Amount5), sum(Amount6), sum(Amount7), sum(Amount9)
        from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099G;

        if (_localIRSPayerRec.Amount1 > 0)
        {
            tmpAmountCodes += One; // G-1
        }

        if (_localIRSPayerRec.Amount2 > 0)
        {
            tmpAmountCodes += Two; // G-2
        }

        if (_localIRSPayerRec.Amount4 > 0)
        {
            tmpAmountCodes += Four; // G-4
        }

        if (_localIRSPayerRec.Amount5 > 0)
        {
            tmpAmountCodes += Five; // G-5
        }

        if (_localIRSPayerRec.Amount6 > 0)
        {
            tmpAmountCodes += Six; // G-6
        }

        if (_localIRSPayerRec.Amount7 > 0)
        {
            tmpAmountCodes += Seven; // G-7
        }

        if (_localIRSPayerRec.Amount9 > 0)
        {
            tmpAmountCodes += Nine; // G-9
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099G;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        outputRecord = _outputRecord;

        str tempNoYesTradeOrBusiness;

        // Blank. Field Position: 544-546

        //Trade or Business Indicator. Field Position: 547
        if (_localIRSPayerRec.Tax1099TradeOrBusiness == NoYes::Yes)
        {
            tempNoYesTradeOrBusiness = '1';
        }

        this.strInsert(tempNoYesTradeOrBusiness, 547);

        //Tax Year of Refund. Field Position: 548-551
        //make sure an empty tax year is not set.
        if (_localIRSPayerRec.Tax1099TaxYear > 0)
        {
            this.strInsert(int2str(_localIRSPayerRec.Tax1099TaxYear), 548);
        }

        // Blank. Field Position: 552-662

        // Special Data Entries (Blank). Field Position: 663-722

        // State Income Tax Withheld. Field Position: 723-734
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.StateTaxWitheld, 12), 723);

        // Local Income Tax Withheld. Field Position: 735-746
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.LocalTaxWithheld, 12), 735);

        // Combined Federal / State Code. Field Position: 747-748
        this.strInsert(_localIRSPayerRec.CombinedFedStateCode, 747);

        // Blank. Field Position: 749-750
        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        while select _tax1099IRSPayerRec
        {
            if (_tax1099IRSPayerRec.Amount1 + _tax1099IRSPayerRec.Amount2 + _tax1099IRSPayerRec.Amount4 +
                _tax1099IRSPayerRec.Amount5 + _tax1099IRSPayerRec.Amount6 + _tax1099IRSPayerRec.Amount7 + _tax1099IRSPayerRec.Amount9 > 0)
            {
                _tax1099IRSPayerRecTmp.CompanyName = companyInfo.name();
                _tax1099IRSPayerRecTmp.CompanyAddress = companyInfo.postalAddress().Address;
                _tax1099IRSPayerRecTmp.CompanyPhone = companyInfo.phone();
                _tax1099IRSPayerRecTmp.CompanyTax1099RegNum = companyInfo.Tax1099RegNum;
                _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
                _tax1099IRSPayerRecTmp.Amount1 = _tax1099IRSPayerRec.Amount1;
                _tax1099IRSPayerRecTmp.Amount2 = _tax1099IRSPayerRec.Amount2;
                _tax1099IRSPayerRecTmp.Amount3 = _tax1099IRSPayerRec.Amount3 + _tax1099IRSPayerRec.Amount6 +
                    _tax1099IRSPayerRec.Amount7 + _tax1099IRSPayerRec.Amount8;
                _tax1099IRSPayerRecTmp.Amount4 = _tax1099IRSPayerRec.Amount4;
                _tax1099IRSPayerRecTmp.Amount5 = _tax1099IRSPayerRec.Amount5;
                _tax1099IRSPayerRecTmp.Amount6 = _tax1099IRSPayerRec.Amount6;
                _tax1099IRSPayerRecTmp.Amount7 = _tax1099IRSPayerRec.Amount7;
                _tax1099IRSPayerRecTmp.Amount9 = _tax1099IRSPayerRec.Amount9;
                _tax1099IRSPayerRecTmp.Amount8 = _tax1099IRSPayerRec.Amount8;
                _tax1099IRSPayerRecTmp.PayeeNameLine = _tax1099IRSPayerRec.PayeeNameLine;
                _tax1099IRSPayerRecTmp.Addressing = _tax1099IRSPayerRec.address_on_one_Line();
                _tax1099IRSPayerRecTmp.CityStateZip = _tax1099IRSPayerRec.city_State_Zip();
                _tax1099IRSPayerRecTmp.AcctNumForPayee = _tax1099IRSPayerRec.AcctNumForPayee;
                _tax1099IRSPayerRecTmp.SecondTIN = _tax1099IRSPayerRec.SecondTIN;
                _tax1099IRSPayerRecTmp.ForeignCountryRegionName = _tax1099IRSPayerRec.ForeignCountryRegionName;
                _tax1099IRSPayerRecTmp.PayersRTN = _payersRTN;
                _tax1099IRSPayerRecTmp.Tax1099PropertyOrServicesStr = _tax1099IRSPayerRec.Tax1099PropertyOrServicesStr;
                _tax1099IRSPayerRecTmp.Tax1099AddressOrLegalDesc = _tax1099IRSPayerRec.Tax1099AddressOrLegalDesc;
                _tax1099IRSPayerRecTmp.Tax1099DateOfClosing = _tax1099IRSPayerRec.Tax1099DateOfClosing;
                _tax1099IRSPayerRecTmp.Tax1099TradeOrBusiness = _tax1099IRSPayerRec.Tax1099TradeOrBusiness;
                _tax1099IRSPayerRecTmp.Tax1099TradeOrBusinessStr = _tax1099IRSPayerRec.Tax1099TradeOrBusinessStr;
                _tax1099IRSPayerRecTmp.StateId = _tax1099IRSPayerRec.StateId;
                _tax1099IRSPayerRecTmp.StateId2 = _tax1099IRSPayerRec.StateId2;
                _tax1099IRSPayerRecTmp.Tax1099StateTaxID = _tax1099IRSPayerRec.Tax1099StateTaxID;
                _tax1099IRSPayerRecTmp.StateTaxId2 = _tax1099IRSPayerRec.StateTaxId2;
                _tax1099IRSPayerRecTmp.Tax1099StateTaxWithheld = _tax1099IRSPayerRec.Tax1099StateTaxWithheld;
                _tax1099IRSPayerRecTmp.StateTaxWitheld = _tax1099IRSPayerRec.StateTaxWitheld;
                _tax1099IRSPayerRecTmp.Tax1099TaxYear = _tax1099IRSPayerRec.Tax1099TaxYear;

                _tax1099IRSPayerRecTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec, Yr _year1099 = DateTimeUtil::year(DateTimeUtil::minValue()), TransDate _fromDate = utcDateTime2SystemDateTime(DateTimeUtil::minValue()), TransDate _toDate = utcDateTime2SystemDateTime(DateTimeUtil::minValue()))
    {
        Tax1099Fields tax1099Field;
        VendSettlementTax1099 vendSettlementTax1099G1;
        VendSettlementTax1099 vendSettlementTax1099G2;

        // report requires tax year (only) if it is different than payment year
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && _localTax1099Summary.Tax1099TaxYear != _year1099)
        {
            _tax1099IRSPayerRec.Tax1099TaxYear = _localTax1099Summary.Tax1099TaxYear;
        }

        switch (Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box)
        {
            case G1:
                _tax1099IRSPayerRec.Amount1 = _localTax1099Summary.SettleTax1099Amount;
                _tax1099IRSPayerRec.StateId = _localTax1099Summary.Tax1099State;
                _tax1099IRSPayerRec.Tax1099StateTaxID = _localTax1099Summary.Tax1099StateTaxID;

                select Tax1099StateTaxWithheld, RecId
                    from vendSettlementTax1099G1
                    join tax1099Field
                    where vendSettlementTax1099G1.Tax1099StateTaxID == _localTax1099Summary.Tax1099StateTaxID
                        && vendSettlementTax1099G1.VendAccount == _localTax1099Summary.VendAccount
                        && vendSettlementTax1099G1.Tax1099TaxYear == _year1099
                        && vendSettlementTax1099G1.TransDate >= _fromDate
                        && vendSettlementTax1099G1.TransDate <= _toDate
                        && tax1099Field.Tax1099Box == G1;

                _tax1099IRSPayerRec.Tax1099StateTaxWithheld = vendSettlementTax1099G1.Tax1099StateTaxWithheld;

                select Tax1099StateTaxWithheld, Tax1099State, Tax1099StateTaxID
                    from vendSettlementTax1099G2
                    join tax1099Field
                    where vendSettlementTax1099G2.RecId != vendSettlementTax1099G1.RecId
                          && vendSettlementTax1099G2.Tax1099StateTaxID == _localTax1099Summary.Tax1099StateTaxID
                          && vendSettlementTax1099G2.VendAccount == _localTax1099Summary.VendAccount
                          && vendSettlementTax1099G2.Tax1099TaxYear == _year1099
                          && vendSettlementTax1099G2.TransDate >= _fromDate
                          && vendSettlementTax1099G2.TransDate <= _toDate
                          && tax1099Field.Tax1099Box == G1;

                _tax1099IRSPayerRec.StateId2 = vendSettlementTax1099G2.Tax1099State;
                _tax1099IRSPayerRec.StateTaxId2 = vendSettlementTax1099G2.Tax1099StateTaxID;
                _tax1099IRSPayerRec.StateTaxWitheld = vendSettlementTax1099G2.Tax1099StateTaxWithheld;
                break;

            case G2:
                _tax1099IRSPayerRec.Amount2 = _localTax1099Summary.SettleTax1099Amount;
                _tax1099IRSPayerRec.Tax1099TradeOrBusiness = _localTax1099Summary.Tax1099TradeOrBusiness;
                break;

            case G4:
                _tax1099IRSPayerRec.Amount4 = _localTax1099Summary.SettleTax1099Amount;
                break;

            case G5:
                _tax1099IRSPayerRec.Amount5 = _localTax1099Summary.SettleTax1099Amount;
                break;

            case G6:
                _tax1099IRSPayerRec.Amount6 = _localTax1099Summary.SettleTax1099Amount;
                break;

            case G7:
                _tax1099IRSPayerRec.Amount7 = _localTax1099Summary.SettleTax1099Amount;
                break;

            case G9:
                _tax1099IRSPayerRec.Amount9 = _localTax1099Summary.SettleTax1099Amount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G1, "@SPS1108", 10, Tax1099Type::F1099G, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G2, "@SPS1107", 10, Tax1099Type::F1099G, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G4, "@SPS1106", 0.01, Tax1099Type::F1099G, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G5, "@SPS1105", 600, Tax1099Type::F1099G, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G6, "@SPS1104", 0.01, Tax1099Type::F1099G, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G7, "@SPS1103", 0.01, Tax1099Type::F1099G, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, G9, "@SPS1944", 0.01, Tax1099Type::F1099G, _forceUpdate);

        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        switch (_tax1099Fields.Tax1099Box)
        {
            case G1:
                _localIRSPayerRec.Amount1 += _tax1099Summary.SettleTax1099Amount;
                break;

            case G2:
                _localIRSPayerRec.Amount2 += _tax1099Summary.SettleTax1099Amount;
                break;

            case G4:
                _localIRSPayerRec.Amount4 += _tax1099Summary.SettleTax1099Amount;
                break;

            case G5:
                _localIRSPayerRec.Amount5 += _tax1099Summary.SettleTax1099Amount;
                break;

            case G6:
                _localIRSPayerRec.Amount6 += _tax1099Summary.SettleTax1099Amount;
                break;

            case G7:
                _localIRSPayerRec.Amount7 += _tax1099Summary.SettleTax1099Amount;
                break;

            case G9:
                _localIRSPayerRec.Amount9 += _tax1099Summary.SettleTax1099Amount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unemploymentCompensation</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier unemploymentCompensation()
    {
        return Tax1099FieldIdentifier::construct(G1, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
			<Method>
				<Name>incomeTaxRefundsCreditsOffsets</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier incomeTaxRefundsCreditsOffsets()
    {
        return Tax1099FieldIdentifier::construct(G2, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
			<Method>
				<Name>federalIncomeTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier federalIncomeTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(G4, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtaaPayments</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier rtaaPayments()
    {
        return Tax1099FieldIdentifier::construct(G5, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableGrants</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier taxableGrants()
    {
        return Tax1099FieldIdentifier::construct(G6, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
			<Method>
				<Name>agriculturePayments</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier agriculturePayments()
    {
        return Tax1099FieldIdentifier::construct(G7, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marketGain</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier marketGain()
    {
        return Tax1099FieldIdentifier::construct(G9, Tax1099Type::F1099G);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>