<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLabelHistoryCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveLabelHistoryCleanupService</c> class is used to clean up the Wave label history table.
/// </summary>
using Microsoft.Dynamics.Ax.Xpp.PlatformExtensions;

internal final class WHSWaveLabelHistoryCleanupService extends SysOperationServiceBase
{
    private WHSInstrumentationLogger instrumentationLogger;
    private utcDateTime              lastAvailableTimestamp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the <c>WHSWaveLabelHistory</c> table according to the specified data contract.
    /// </summary>
    /// <param name="_dataContract">
    /// An instance of the <c>WHSWaveLabelHistoryCleanupDataContract</c> class.
    /// </param>
    [Hookable(false)]
    public void execute(WHSWaveLabelHistoryCleanupDataContract _dataContract)
    {
        NumberOfDays        numberOfDaysToKeep = _dataContract.parmNumberOfDaysToKeep();
        WHSWaveLabelHistory waveLabelHistory, waveLabelHistoryWave;
        int                 totalDeletedRecords;

        using (var totalActivityContext = this.instrumentationLogger().waveLabelHistoryCleanupActivities().identifyTotalCleanup())
        {
            lastAvailableTimestamp = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -numberOfDaysToKeep);

            // If a wave has records in the Wave label history table newer than lastAvailableTimestamp value, all wave records remain in the history.
            // This rule doesn't work for the records with empty WaweId
            while select waveLabelHistory
                group by WaveId
                where waveLabelHistory.CreatedDateTime
                &&    waveLabelHistory.CreatedDateTime <= lastAvailableTimestamp
            notexists join waveLabelHistoryWave
                where waveLabelHistory.WaveId              != ''
                &&    waveLabelHistoryWave.WaveId          == waveLabelHistory.WaveId
                &&    waveLabelHistoryWave.CreatedDateTime >  lastAvailableTimestamp
            {
                totalDeletedRecords += this.deleteWaveHistory(waveLabelHistory.WaveId);
            }

            this.instrumentationLogger().waveLabelHistoryCleanupActivities().identifiedTotalCleanup(totalActivityContext, totalDeletedRecords);
        }

        info(strFmt("@WAX:NRecordsHaveBeenDeletedFromTheTable", totalDeletedRecords, tablePName(WHSWaveLabelHistory)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWaveHistory</Name>
				<Source><![CDATA[
    private int deleteWaveHistory(WHSWaveId _waveId)
    {
        WHSWaveLabelHistory waveLabelHistoryForUpdate;
        int                 waveDeletedRecords;

        using (var waveActivityContext = this.instrumentationLogger().waveLabelHistoryCleanupActivities().identifyWaveCleanup(_waveId ? WHSWaveTable::find(_waveId).RecId : 0))
        {
            if (_waveId == '')
            {
                using (var committer = WHSRecordDeletionCommitter::construct())
                {
                    while select forupdate waveLabelHistoryForUpdate
                        where waveLabelHistoryForUpdate.WaveId == ''
                        &&    waveLabelHistoryForUpdate.CreatedDateTime
                        &&    waveLabelHistoryForUpdate.CreatedDateTime <= lastAvailableTimestamp
                    {
                        committer.deleteRecord(waveLabelHistoryForUpdate);

                        waveDeletedRecords++;
                    }
                }
            }
            else
            {
                ttsbegin;

                CommonExtensions::SetSqlDeleteIndexHint(waveLabelHistoryForUpdate, indexStr(WHSWaveLabelHistory, WaveIdWaveLabelTemplateRecIdx));

                delete_from waveLabelHistoryForUpdate
                    where waveLabelHistoryForUpdate.WaveId == _waveId;

                ttscommit;

                waveDeletedRecords = waveLabelHistoryForUpdate.RowCount();
            }

            this.instrumentationLogger().waveLabelHistoryCleanupActivities().identifiedWaveCleanup(waveActivityContext, waveDeletedRecords);
        }

        return waveDeletedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>