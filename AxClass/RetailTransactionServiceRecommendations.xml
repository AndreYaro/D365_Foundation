<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceRecommendations</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceRecommendations</c> implements methods used to interact with recommendation services.
/// </summary>
class RetailTransactionServiceRecommendations
{
    /// <summary>
    /// The Cortana Analytics application name.
    /// </summary>
    public const str CortanaAnalyticsApplicationName = 'RetailRecommender';

    /// <summary>
    /// The Cortana Analytics assembly name.
    /// </summary>
    private const str CortanaAnalyticsAssemblyName = 'Microsoft.Dynamics.AX.Analytics.CortanaAnalytics';

    /// <summary>
    /// The Cortana Analytics configuration manager.
    /// </summary>
    private const str CortanaAnalyticsConfigurationManager = 'Microsoft.Dynamics.AX.Analytics.CortanaAnalytics.CortanaAnalyticsConfigurationManager';

    /// <summary>
    /// The Cortana Analytics app configuration.
    /// </summary>
    private const str CortanaAnalyticsAppConfiguration = 'Microsoft.Dynamics.AX.Analytics.CortanaAnalytics.CortanaAnalyticsAppConfiguration';

    /// <summary>
    /// The method name to retrieve the Cortana Analytics app configuration.
    /// </summary>
    private const str GetCortanaAnalyticsAppConfigurationMethodName = 'GetCortanaAnalyticsAppConfiguration';

    /// <summary>
    /// The account name property.
    /// </summary>
    private const str AccountNameProperty = 'AccountName';

    /// <summary>
    /// The account key property.
    /// </summary>
    private const str AccountKeyProperty = 'AccountKey';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetRecommendationServiceCredentials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container containing the credentials required to access the Cortana Analytics recommendation service.
    /// </summary>
    /// <returns>A container containing the credentials required to access the Cortana Analytics recommendation service.</returns>
    public static container GetRecommendationServiceCredentials()
    {
        container appConfiguration = RetailTransactionServiceRecommendations::GetCortanaAnalyticsAppConfiguration(CortanaAnalyticsApplicationName);
        var result = conPeek(appConfiguration, 1);
        var error = conPeek(appConfiguration, 2);
        var accountEmail = conPeek(appConfiguration, 3);
        var accountKey = conPeek(appConfiguration, 4);

        var authToken = [result, error, accountEmail + ',' + accountKey + ',' + RetailParameters::find().RecommendationsModelId + ',' + RetailParameters::find().RecommendationsModelName + ',' + RetailParameters::find().FbtModelId + ',' + RetailParameters::find().FbtModelName + ',' + enum2Str(RetailParameters::find().EnableProductRecommendations)];

        return authToken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCortanaAnalyticsAppConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container containing the account email and account key required to access the Cortana Analytics recommendation service.
    /// </summary>
    /// <param name = "applicationName">The application name.</param>
    /// <returns>A container containing the account email and account key required to access the Cortana Analytics recommendation service.</returns>
    public static container GetCortanaAnalyticsAppConfiguration(str applicationName)
    {
        boolean result = false;
        str error = '';
        str accountName = '';
        str accountKey = '';

        try
        {
            System.Reflection.Assembly assembly = System.Reflection.Assembly::Load(CortanaAnalyticsAssemblyName);
            System.Type cortanaAnalyticsConfigurationManagerType = assembly.GetType(CortanaAnalyticsConfigurationManager);
            System.Type cortanaAnalyticsAppConfigurationType = assembly.GetType(CortanaAnalyticsAppConfiguration);
            System.Reflection.MethodInfo methodInfo = cortanaAnalyticsConfigurationManagerType.GetMethod(GetCortanaAnalyticsAppConfigurationMethodName);

            if (methodInfo != null)
            {
                System.Object[] parameters = new System.Object[1]();
                parameters.SetValue(applicationName, 0);

                var configurationManager = System.Activator::CreateInstance(cortanaAnalyticsConfigurationManagerType);
                var configuration = methodInfo.Invoke(configurationManager, parameters);
                if (configuration)
                {
                    accountKey = configuration.GetType().GetProperty(AccountKeyProperty).GetValue(configuration);
                    accountName = configuration.GetType().GetProperty(AccountNameProperty).GetValue(configuration);
                    result = true;
                }
            }
        }
        catch (Exception::CLRError)
        {
            System.Exception ex;
            ex = CLRInterop::getLastException();
            if (ex && ex.InnerException)
            {
                if (ex.InnerException.InnerException)
                {
                    // Use inner exception if it is available as it is often more descriptive.
                    error = ex.InnerException.InnerException.Message;
                }
                else
                {
                    error = ex.InnerException.Message;
                }
            }
        }

        return [result, error, accountName, accountKey];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>