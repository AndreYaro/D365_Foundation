<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFinalizeConsTaxReport_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Updates the current record to version latest in the <c>ledgerConsumptionTaxReportTrans_JP</c> table.
/// </summary>
public class LedgerFinalizeConsTaxReport_JP
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerFinalizeConsTaxReport_JP construct()
    {
        return new LedgerFinalizeConsTaxReport_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxReportIParameters_JP parameters = TaxReportIParameters_JP::getParametersFromArgs(_args);

        if (parameters)
        {
            LedgerFinalizeConsTaxReport_JP::finalizeByParameters(parameters);
        }
        else
        {
            LedgerFinalizeConsTaxReport_JP::runOnServer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update the current record to version latest in the <c>ledgerConsumptionTaxReportTrans_JP</c> table.
    /// </summary>
    static public void runOnServer()
    {
        TaxReportByCode_JP                  taxReportByCode_JP;
        LedgerConsumptionTaxReportTrans_JP  ledgerConsumptionTaxReportTrans_JP;

        ttsbegin;
        while select forupdate InterimFrom, PeriodOfTaxationFrom, InterimTo, PeriodOfTaxationTo, CalcMethod, TypeOfDeclaration, TaxValue from ledgerConsumptionTaxReportTrans_JP
            exists join PeriodOfTaxationFrom, PeriodOfTaxationTo, CalcMethod, TypeOfDeclaration from taxReportByCode_JP
                where ((ledgerConsumptionTaxReportTrans_JP.InterimFrom == taxReportByCode_JP.PeriodOfTaxationFrom
                    && ledgerConsumptionTaxReportTrans_JP.InterimTo == taxReportByCode_JP.PeriodOfTaxationTo)
                    || (ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationFrom == taxReportByCode_JP.PeriodOfTaxationFrom
                    && ledgerConsumptionTaxReportTrans_JP.PeriodOfTaxationTo == taxReportByCode_JP.PeriodOfTaxationTo))
                    && ledgerConsumptionTaxReportTrans_JP.TypeOfDeclaration == taxReportByCode_JP.TypeOfDeclaration
                    && ledgerConsumptionTaxReportTrans_JP.TaxValue == taxReportByCode_JP.TaxValue
        {
            if (ledgerConsumptionTaxReportTrans_JP.Version < TaxRepVersion::Latest)
            {
                ledgerConsumptionTaxReportTrans_JP.Version = TaxRepVersion::Latest;
                ledgerConsumptionTaxReportTrans_JP.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeByParameters</Name>
				<Source><![CDATA[
    internal static void finalizeByParameters(TaxReportIParameters_JP _parameters)
    {
        LedgerConsumptionTaxReportTrans_JP ledgerConsumptionTaxReportTrans;

        update_recordset ledgerConsumptionTaxReportTrans
            setting Version = TaxRepVersion::Latest
            where ledgerConsumptionTaxReportTrans.Version != TaxRepVersion::Latest
                && ((ledgerConsumptionTaxReportTrans.InterimFrom == _parameters.parmFromDate()
                && ledgerConsumptionTaxReportTrans.InterimTo == _parameters.parmToDate())
                || (ledgerConsumptionTaxReportTrans.PeriodOfTaxationFrom == _parameters.parmFromDate()
                && ledgerConsumptionTaxReportTrans.PeriodOfTaxationTo == _parameters.parmToDate()))
                && ledgerConsumptionTaxReportTrans.TypeOfDeclaration == _parameters.parmTypeOfDeclaration();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>