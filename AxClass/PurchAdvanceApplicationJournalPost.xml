<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAdvanceApplicationJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchAdvanceApplicationJournalPost extends PurchApproveJournalPost
{
    Voucher invoiceVoucher;
    TransDate invoiceDate;
    VendInvoiceTrans advanceApplicationLine;
    RecId advanceApplicationId;
    boolean isReverseAdvanceApplication;
    TransactionTxt transactionTxtAdvanceApplication;
    LedgerVoucher ledgerVoucherAdvanceApplication;
    boolean isAdvanceApplicationPosting;
    boolean isInvoicePosted;
    boolean isInvoiceSpecTransCreated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>InventReportDimHistory</c> records to a sorted list.
    /// </summary>
    /// <param name="_journalLine">
    /// The vendor invoice transaction for which to create the <c>InventReportDimHistory</c> records.
    /// </param>
    protected void addToInventReportDimHistory(Common _journalLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>approval</Name>
				<Source><![CDATA[
    protected NoYes approval()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveVendTrans</Name>
				<Source><![CDATA[
    protected void approveVendTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        //If there aren't any records in the TaxUncommitted table for this invoice at this point, we don't want to post taxes.
        boolean ret = TaxUncommitted::existByDocumentId(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base method because an advance application line should not create the payment schedule lines.
    /// </summary>
    protected void createPaymentSched()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    protected NoYes creditNote()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base class by using blank implementation as an advance application line does not
    /// require deletion of <c>TableRefId</c> field value of an existing invoice.
    /// </summary>
    protected void endLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    protected void endPostLine()
    {
        if (!isReverseAdvanceApplication)
        {
            this.insertSpecTransForSettlement();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base class by using blank implementation as an advance application line does not
    /// require any update to be saved.
    /// </summary>
    protected void endUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base class because an advance application line uses a different voucher number.
    /// </summary>
    /// <returns>
    /// The voucher number for an advance application line.
    /// </returns>
    /// <remarks>
    /// The voucher for an advance application line is populated in the <c>createJournalLine</c> method.
    /// </remarks>
    protected Num getVoucher()
    {
        return advanceApplicationLine.InternalInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        this.initRecordLists();

        if (!voucher)
        {
            voucher = this.getVoucher();
        }
        transactionTxt = this.initTransactionTxt(this.defaultLedgerTransactionText());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base class because an advance application line uses an existing
    /// <c>VendInvoiceInfoTable</c> table record.
    /// </summary>
    protected void initFormletterProvider()
    {
        formletterProvider = FormletterProvider::newFormletterType(FormletterType::Purchase, purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerVoucherObject</c> object.
    /// </summary>
    protected void initLedgerVoucher()
    {
        LedgerVoucherObject ledgerVoucherObject;

        if (!ledgerVoucherIsSet)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(formletterProvider.detailSummary(),
                                                            formletterProvider.postingModule(),
                                                            numberSeq ? numberSeq.parmVoucherSequenceCode() : '');
        }

        ledgerVoucherObject = this.findOrCreateLedgerVoucherObject(voucher, this.updateDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base method because an advance application line does not have markups.
    /// </summary>
    public void initMarkup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base class because initialization of related records for links between invoice and
    /// its purchase order are not needed.
    /// </summary>
    protected void initRelatedLineTables()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransactionTxt</c> object.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// A ledger transaction text.
    /// </param>
    /// <returns>
    /// An instance of the <c>TransactionTxt</c> object.
    /// </returns>
    protected TransactionTxt initTransactionTxt(LedgerTransTxt _ledgerTransTxt)
    {
        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(_ledgerTransTxt);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setFormLetter(vendInvoiceTrans.InvoiceId);
        transactionTxt.setKey1(vendInvoiceTrans.PurchID);

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the record lists into the database.
    /// </summary>
    protected void insertRecordList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSpecTrans</Name>
				<Source><![CDATA[
    private void insertSpecTrans(VendTransOpen _vendTransOpen, VendTrans _vendTrans)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_vendTrans);

        specTransManager.insert(_vendTransOpen.company(), _vendTransOpen.TableId, _vendTransOpen.RecId,
                _vendTransOpen.AmountCur, _vendTrans.CurrencyCode, NoYes::No, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSpecTransForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts standard invoice record in <c>SpecTrans</c> table.
    /// </summary>
    /// <remarks>
    /// An advance application voucher must be settled against a <c>SpecTrans</c> table record for standard
    /// invoice.
    /// </remarks>
    protected void insertSpecTransForSettlement()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        
        if (isInvoiceSpecTransCreated)
        {
            return;
        }
        
        while select vendTransOpen
            join vendTrans
            where vendTransOpen.AccountNum == vendTrans.AccountNum
                && vendTransOpen.RefRecId == vendTrans.RecId
                && vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                && vendTrans.TransDate == vendInvoiceJour.InvoiceDate
            notexists join ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToDate == vendInvoiceJour.InvoiceDate
                    && ledgerJournalVoucherChanged.ToVoucher == vendInvoiceJour.LedgerVoucher
        {
            this.insertSpecTrans(vendTransOpen, vendTrans);
        }
        
        while select vendTransOpen
            join RecId from ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToDate == vendInvoiceJour.InvoiceDate
                && ledgerJournalVoucherChanged.ToVoucher == vendInvoiceJour.LedgerVoucher
            join vendTrans
            where vendTransOpen.AccountNum == vendTrans.AccountNum
                && vendTransOpen.RefRecId == vendTrans.RecId
                && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                && vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher
                && vendTrans.TransDate == ledgerJournalVoucherChanged.FromDate
        {
            this.insertSpecTrans(vendTransOpen, vendTrans);
        }
        
        isInvoiceSpecTransCreated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepaymentJournal</Name>
				<Source><![CDATA[
    protected boolean isPrepaymentJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransPool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record in the <c>LedgerJournalTrans</c> table that represents an AP invoice pool.
    /// </summary>
    /// <returns>
    /// A record in the <c>LedgerJournalTrans</c> table that represents an AP invoice pool.
    /// </returns>
    protected LedgerJournalTrans ledgerJournalTransPool()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectDocument</Name>
				<Source><![CDATA[
    protected container ledgerVoucherObjectDocument(LedgerVoucherObject _ledgerVoucherObject)
    {
        return vendInvoiceJour.DocumentDate ? [vendInvoiceJour.DocumentDate] : [vendInvoiceJour.InvoiceDate, vendInvoiceJour.InvoiceId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherObjectSetParms</Name>
				<Source><![CDATA[
    protected void ledgerVoucherObjectSetParms(LedgerVoucherObject _ledgerVoucherObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceApplicationLine</Name>
				<Source><![CDATA[
    public VendInvoiceTrans parmAdvanceApplicationLine(VendInvoiceTrans _vendInvoiceTrans = advanceApplicationLine)
    {
        advanceApplicationLine = _vendInvoiceTrans;
        return advanceApplicationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoicePosted</Name>
				<Source><![CDATA[
    public boolean parmIsInvoicePosted(boolean _isInvoicePosted = isInvoicePosted)
    {
        isInvoicePosted = _isInvoicePosted;

        return isInvoicePosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReverseAdvanceApplication</Name>
				<Source><![CDATA[
    public boolean parmIsReverseAdvanceApplication(boolean _isReverseAdvanceApplication = isReverseAdvanceApplication)
    {
        isReverseAdvanceApplication = _isReverseAdvanceApplication;

        return isReverseAdvanceApplication;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs customer and vendor related postings.
    /// </summary>
    protected void postCustVend()
    {
        VendTrans                vendTransApplication;
        VendTransOpen            vendTransOpenApplication;
        VendInvoiceJour          vendInvoiceJourAdvance;
        VendInvoiceTrans         vendInvoiceTransApplication;
    
        // If a VendTransOpen already exists for the prepay application, then use it for settlement instead of creating a new one in VendVoucher posting
        select firstonly RecId from vendInvoiceJourAdvance
            where vendInvoiceJourAdvance.RecId == advanceApplicationLine.AdvanceApplicationId
        join RecId from vendInvoiceTransApplication
            where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication
                && vendInvoiceTransApplication.AdvanceApplicationId == vendInvoiceJourAdvance.RecId
        join vendTransApplication
            where vendTransApplication.Voucher == vendInvoiceTransApplication.InternalInvoiceId
                && vendTransApplication.TransDate == vendInvoiceTransApplication.InvoiceDate
                && vendTransApplication.AccountNum == vendInvoiceJourAdvance.InvoiceAccount
        join vendTransOpenApplication
            where vendTransOpenApplication.RefRecId == vendTransApplication.RecId;
    
        if (!isReverseAdvanceApplication && vendTransOpenApplication)
        {
            // The specTrans for the invoice is created in PurchAdvanceApplicationJournalPost.insertSpecTransForSettlement()
    
            VendTrans vendTransInvoice = VendTrans::findAccountVoucherDate(vendInvoiceJour.InvoiceAccount, vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate);
    
            SpecTransManager specTransManager = SpecTransManager::newFromSpec(vendTransInvoice);
    
            specTransManager.insert(vendTransOpenApplication.DataAreaId,
                                    vendTransOpenApplication.TableId,
                                    vendTransOpenApplication.RecId,
                                    vendTransOpenApplication.AmountCur,
                                    vendTransApplication.CurrencyCode);
    
            CustVendTransData custVendTransData = CustVendTransData::construct(vendTransApplication);
    
            custVendTransData.updateOffsetVoucher(this.getSettlementType(),
                                                    ledgerVoucher,
                                                    vendTransInvoice);
        }
        else
        {
            VendTrans vendTrans;
            LedgerTransTxt ledgerTransTxt = LedgerTransTxt::PurchInvoiceVend;
    
            VendVoucher vendVoucher = VendVoucher::newVendVoucherAdvanceApplication(ledgerTransTxt,
                                                                        vendInvoiceJour,
                                                                        advanceApplicationLine,
                                                                        isReverseAdvanceApplication);
            vendVoucher.parmIsInvoicePosted(isInvoicePosted);

            // When cash discounts are set to Always, settlement may attempt to post cash discount accounting. Since we do not want to generate
            // cash discounts at the posting of an invoice, override the Always to Normal for the duration of posting the invoice.
            VendTrans vendTransForPurchInvoice = this.findVendTransForPurchInvoice();
            TmpRecIdFilter openTransactionsWithCashDiscountAlways = this.findOpenTransactionsWithCashDiscount(vendTransForPurchInvoice, UseCashDisc::Always);
            this.overrideVendTransOpenCashDiscSettings(openTransactionsWithCashDiscountAlways, UseCashDisc::Always, UseCashDisc::Normal);

            vendVoucher.post(ledgerVoucher,
                            vendTrans,
                            this.approval(),
                            Currency::noYes2UnknownNoYes(vendInvoiceJour.Triangulation),
                            false,
                            true);

            this.overrideVendTransOpenCashDiscSettings(openTransactionsWithCashDiscountAlways, UseCashDisc::Normal, UseCashDisc::Always);
        }
    
        if (isReverseAdvanceApplication)
        {
            VendInvoiceTrans vendInvoiceTransAdvance = VendInvoiceTrans::findRecId(advanceApplicationLine.AdvanceApplicationId);
            VendTransOpen vendTransOpenLocal = VendTransOpen::findRefId(VendTrans::findAccountVoucherDate(vendInvoiceJour.InvoiceAccount, vendInvoiceTransAdvance.InternalInvoiceId, vendInvoiceTransAdvance.InvoiceDate).RecId);

            CustVendOpenTransManager manager = CustVendOpenTransManager::construct(VendTable::find(vendTransOpenLocal.AccountNum));
            int markedTransactionCount = manager.getSpecTransCount();

            if (markedTransactionCount == 0)
            {
                manager.updateTransMarked(vendTransOpenLocal, NoYes::Yes);
                manager.updateTransMarked(VendTransOpen::findRefId(VendTrans::findAccountVoucherDate(vendInvoiceJour.InvoiceAccount, advanceApplicationLine.InternalInvoiceId, this.updateDate()).RecId), NoYes::Yes);

                manager.updateSpecTransWithSelectedDate();

                manager.settleMarkedTrans();
            }
            else
            {
                warning(strFmt("@SYS19048", markedTransactionCount));
                throw error("@SYS4082892");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransForPurchInvoice</Name>
				<Source><![CDATA[
    private VendTrans findVendTransForPurchInvoice()
    {
        VendInvoiceJour vendInvoiceJourLocal;
        VendInvoiceTrans vendInvoiceTransLocal;

        select firstonly vendInvoiceJourLocal
                where vendInvoiceJourLocal.InvoiceType == PurchInvoiceType::Standard
            exists join vendInvoiceTransLocal
                where vendInvoiceJourLocal.PurchId == vendInvoiceTransLocal.PurchId
                    && vendInvoiceJourLocal.InvoiceId == vendInvoiceTransLocal.InvoiceId
                    && vendInvoiceJourLocal.InvoiceDate == vendInvoiceTransLocal.InvoiceDate
                    && vendInvoiceJourLocal.numberSequenceGroup == vendInvoiceTransLocal.numberSequenceGroup
                    && vendInvoiceJourLocal.InternalInvoiceId == vendInvoiceTransLocal.InternalInvoiceId
                    && vendInvoiceTransLocal.PurchId == advanceApplicationLine.PurchId
                    && vendInvoiceTransLocal.InvoiceId == advanceApplicationLine.InvoiceId
                    && vendInvoiceTransLocal.LineType == PurchInvoiceLineType::Standard;

        return VendTrans::findAccountVoucherDate(vendInvoiceJourLocal.InvoiceAccount, vendInvoiceJourLocal.LedgerVoucher, vendInvoiceJourLocal.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenTransactionsWithCashDiscount</Name>
				<Source><![CDATA[
    private TmpRecIdFilter findOpenTransactionsWithCashDiscount(VendTrans _vendTrans, UseCashDisc _targetUseCashDisc)
    {
        VendTransOpen vendTransOpenLocal;
        TmpRecIdFilter openTransactionsWithCashDiscount;

        insert_recordset openTransactionsWithCashDiscount
            (RefRecId)
            select RecId from vendTransOpenLocal
                where vendTransOpenLocal.RefRecId == _vendTrans.RecId
                    && vendTransOpenLocal.UseCashDisc == _targetUseCashDisc;

        return openTransactionsWithCashDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideVendTransOpenCashDiscSettings</Name>
				<Source><![CDATA[
    private void overrideVendTransOpenCashDiscSettings(TmpRecIdFilter _recordsToUpdate, UseCashDisc _targetUseCashDisc, UseCashDisc _newUseCashDisc)
    {
        VendTransOpen vendTransOpenLocal;

        select count(RecId) from _recordsToUpdate;

        if (_recordsToUpdate)
        {
            update_recordset vendTransOpenLocal
                setting UseCashDisc = _newUseCashDisc
                join _recordsToUpdate
                where vendTransOpenLocal.RecId == _recordsToUpdate.RefRecId
                    && vendTransOpenLocal.UseCashDisc == _targetUseCashDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType getSettlementType()
    {
        return SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    protected void postMarkupLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the <c>MarkupTrans</c> records that are associated with the records in the
    /// <c>VendInvoiceInfoTable</c> and <c>VendInvoiceInfoSubTable</c> tables.
    /// </summary>
    protected void postMarkupTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPurgeLedgerAccount</Name>
				<Source><![CDATA[
    protected void postPurgeLedgerAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the taxes that are being reversed from the advance invoice
    /// </summary>
    /// <param name="_post">
    /// A Boolean value that indicates whether posting should occur.
    /// </param>
    protected void postTax(boolean _post)
    {
        // Generate a TaxCalculation class for the base class to use during tax posting
        // At this point, the only TaxUncommitted records should be those created for the advance application being posted.
        purchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.PurchId, this.documentStatus());
        purchTotals.calc();

        this.tax(purchTotals.tax());

        super(_post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPosted</Name>
				<Source><![CDATA[
    protected void printPosted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocumentPost</Name>
				<Source><![CDATA[
    protected void processSourceDocumentPost()
    {
        UserId processUserId;

        if (this.parmChainFormletterContract())
        {
            processUserId = this.parmChainFormletterContract().parmBatchCreatedBy();
        }

        if (!processUserId)
        {
            processUserId = curUserId();
        }

        SourceDocumentLineProcessor::submitSourceDocumentLine(
                    SourceDocumentLine::find(this.parmAdvanceApplicationLine().SourceDocumentLine),
                    true,
                    SourceDocumentLineAccountingStatus::None,
                    null,
                    processUserId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostedTax</Name>
				<Source><![CDATA[
    protected void reversePostedTax()
    {
        // Advance application line has nothing to reverse from invoice register
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax1099</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax 1099 postings.
    /// </summary>
    protected void tax1099()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return advanceApplicationLine.InvoiceDate ? advanceApplicationLine.InvoiceDate : vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    protected void updateJournalLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal header.
    /// </summary>
    protected void updateJournalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrepayTable</Name>
				<Source><![CDATA[
    protected void updatePrepayTable()
    {
        PurchId purchId;
        VendInvoiceJour advanceVendInvoice;

        if (advanceApplicationLine.isAdvanceApplication())
        {
            //selects the posted prepayment invoice header for PurchId of prepayment definition
            advanceVendInvoice = VendInvoiceJour::findRecId(advanceApplicationLine.AdvanceApplicationId);
            purchId = advanceVendInvoice.PurchId;
        }
        else
        {
            //selects the posted prepayment invoice header for PurchId of prepayment definition
            advanceVendInvoice = VendInvoiceJour::findRecId(VendInvoiceTrans::findRecId(advanceApplicationLine.AdvanceApplicationId).AdvanceApplicationId);
            purchId = advanceVendInvoice.PurchId;
        }

        PurchPrepayTable::updateAmounts(purchId, true, advanceVendInvoice.InvoiceId, advanceApplicationLine.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source line for the current journal line.
    /// </summary>
    protected void updateSourceLine()
    {
        this.updatePrepayTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLineBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source line is not required for advance application.
    /// </summary>
    protected void updateSourceLineBeforePosting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        this.updatePrepayTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchAdvanceApplicationJournalPost construct(VendInvoiceTrans _vendInvoiceTrans)
    {
        PurchAdvanceApplicationJournalPost purchAdvanceApplicationJournalPost;

        purchAdvanceApplicationJournalPost = new PurchAdvanceApplicationJournalPost();
        purchAdvanceApplicationJournalPost.parmAdvanceApplicationLine(_vendInvoiceTrans);
        return purchAdvanceApplicationJournalPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>