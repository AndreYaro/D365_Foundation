<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportUIBuilder_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportUIBuilder_IT</c> class is the UI Builder class for <c>TaxReport_IT</c> SSRS Report.
/// </summary>
public class TaxReportUIBuilder_IT extends SrsReportDataContractUIBuilder
{
    private DialogField taxPeriod;
    private DialogField fromDate;
    private DialogField fieldIncludeZeroLines;
    private DialogField fieldIncludeReverseTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        super();
        DialogField printPlafondField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmPrintPlafond_IT));
        printPlafondField.visible(FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()));

        DialogField updateNowField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmUpdateNow));
        updateNowField.visible(false);

        DialogField taxBookRecIdSummaryField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmTaxBookRecIdSummary));
        taxBookRecIdSummaryField.visible(false);

        DialogField taxReportField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmTaxReport_IT));
        taxReportField.visible(false);

        taxPeriod = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmTaxPeriod));
        fromDate = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmFromDate));
        fieldIncludeZeroLines = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmIncludeZeroLines));
        fieldIncludeReverseTrans = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmIncludeReverseTrans));

        DialogField fieldPrintReport = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmPrintReport));
        fieldPrintReport.visible(false);

        Args args = this.controller().parmArgs();

        if ((args && args.dataset() == tableNum(TaxReportVoucher)) ||
                (args && classIdGet(args.caller()) == classNum(TaxReport_IT)))
        {
            if (args.dataset() == tableNum(TaxReportVoucher))
            {
                fieldIncludeZeroLines.allowEdit(false);
                fieldIncludeReverseTrans.allowEdit(false);
            }
            else if (classIdGet(args.caller()) == classNum(TaxReport_IT))
            {
                TaxReport_IT taxReport_IT = args.caller();

                TaxReportVoucher taxReportVoucher;
                select firstonly RecId from taxReportVoucher
                    where taxReportVoucher.TaxPeriod == taxReport_IT.taxPeriod()
                        && taxReportVoucher.FromDate == taxReport_IT.fromDate()
                        && taxReportVoucher.ToDate == taxReport_IT.toDate();

                if (taxReportVoucher)
                {
                    fieldIncludeZeroLines.allowEdit(false);
                    fieldIncludeReverseTrans.allowEdit(false);
                }
            }

            taxPeriod.visible(false);
            fromDate.visible(false);

            DialogField fromTaxBook = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmFromTaxBookRecId));
            fromTaxBook.visible(false);

            DialogField printVATBook = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmPrintVATBooks));
            printVATBook.visible(false);

            DialogField printVATPayment = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmPrintVATPayment));
            printVATPayment.visible(false);

            DialogField printVATSummary = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmPrintVATSummary));
            printVATSummary.visible(false);

            DialogField taxBookType = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmTaxBookTypeJournal));
            taxBookType.visible(false);

            DialogField toTaxBook = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportContract_IT, parmToTaxBookRecId));
            toTaxBook.visible(false);

            printPlafondField.visible(false);
        }
        else
        {
            taxPeriod.registerOverrideMethod(
                methodStr(FormStringControl, modified),
                methodStr(TaxReportUIBuilder_IT, taxPeriodModified),
                this);

            fromDate.registerOverrideMethod(
                methodStr(FormStringControl, modified),
                methodStr(TaxReportUIBuilder_IT, fromDateModified),
                this);

            this.initDefaultValues();
        }

        if (TaxIntegrationUtils::isMultipleTaxIdEnabled())
        {
            taxPeriod.registerOverrideMethod(
                methodStr(FormStringControl, lookup),
                methodStr(TaxReportUIBuilder_IT, taxPeriodLookup),
                this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodModified</Name>
				<Source><![CDATA[
    private boolean taxPeriodModified(FormStringControl _taxPeriodControl)
    {
        boolean ret = _taxPeriodControl.modified();

        if (ret)
        {
            this.initDefaultValues();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodLookup</Name>
				<Source><![CDATA[
    private void taxPeriodLookup(FormStringControl _taxPeriodControl)
    {
        #ISOCountryRegionCodes

        Query query = new Query();
        QueryBuildDataSource qbdsTaxPeriodHead = query.addDataSource(tableNum(TaxPeriodHead));

        QueryBuildDataSource qbdsTaxRegistration = qbdsTaxPeriodHead.addDataSource(tableNum(TaxRegistration));
        qbdsTaxRegistration.relations(true);
        qbdsTaxRegistration.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsTaxRegistrationTypeApplicabilityRule = qbdsTaxRegistration.addDataSource(tableNum(TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationTypeApplicabilityRule.relations(true);
        qbdsTaxRegistrationTypeApplicabilityRule.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsLogisticsAddressCountryRegion = qbdsTaxRegistrationTypeApplicabilityRule.addDataSource(tableNum(LogisticsAddressCountryRegion));
        qbdsLogisticsAddressCountryRegion.relations(true);
        qbdsLogisticsAddressCountryRegion.joinMode(JoinMode::ExistsJoin);
        qbdsLogisticsAddressCountryRegion.addRange(fieldNum(LogisticsAddressCountryRegion, ISOCode)).value(queryValue(#isoIT));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxPeriodHead), _taxPeriodControl);
        sysTableLookup.addLookupfield(fieldNum(TaxPeriodHead, TaxPeriod), true);
        sysTableLookup.addLookupfield(fieldNum(TaxPeriodHead, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateModified</Name>
				<Source><![CDATA[
    private boolean fromDateModified(FormDateControl _fromDateControl)
    {
        boolean ret = _fromDateControl.modified();

        if (ret)
        {
            this.initDefaultValues();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultValues</Name>
				<Source><![CDATA[
    private void initDefaultValues()
    {
        TaxReportPeriod taxReportPeriod = TaxReportPeriod::find(taxPeriod.value(), fromDate.value());

        TaxReportVoucher taxReportVoucher;
        select firstonly taxReportVoucher
            where taxReportVoucher.TaxPeriod == taxReportPeriod.TaxPeriod
                && taxReportVoucher.FromDate == taxReportPeriod.FromDate
                && taxReportVoucher.ToDate == taxReportPeriod.ToDate;

        if (taxReportVoucher)
        {
            fieldIncludeZeroLines.value(taxReportVoucher.IncludeZeroLines_IT);
            fieldIncludeZeroLines.allowEdit(false);

            fieldIncludeReverseTrans.value(taxReportVoucher.IncludeReverseTrans_IT);
            fieldIncludeReverseTrans.allowEdit(false);
        }
        else
        {
            TaxPeriodHead taxPeriodHead = TaxPeriodHead::find(taxPeriod.value());

            fieldIncludeZeroLines.value(taxPeriodHead.IncludeZeroLines_IT);
            fieldIncludeZeroLines.allowEdit(true);

            fieldIncludeReverseTrans.value(taxPeriodHead.IncludeReverseTrans_IT);
            fieldIncludeReverseTrans.allowEdit(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>