<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdReport_JournalTransProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdReport_JournalTransProd extends ProdReport_JournalTrans
{
    boolean             showTransactions;
    DialogField         dialogShowTransactions;

    InventDimParm       inventDimParm;
    DialogGroup         dialogDimGroup;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        showTransactions,
        inventDimParm
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunBase  _dialog = dialog)
    {
        dialog = super(_dialog);

        dialog.addGroup("@SYS7764");
        dialogShowTransactions = dialog.addField(enumStr(boolean),"@SYS89637","@SYS24798");
        dialogShowTransactions.value(showTransactions);

        dialogDimGroup = inventDimParm.addFieldsToDialog(dialog,"@SYS53627",true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        this.parmShowTransactions(dialogShowTransactions.value());

        inventDimParm.getFromDialog(dialog,dialogDimGroup);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public Query initQuery(Query _query)
    {
        QueryBuildDataSource    qbds = _query.dataSourceNo(1);

        QueryBuildRange r = SysQuery::findOrCreateRange(qbds, fieldnum(ProdJournalProd, JournalId));
        r.value(journalId);

        if (voucher)
        {
            r = SysQuery::findOrCreateRange(qbds, fieldnum(ProdJournalProd, Voucher));
            r.value(voucher);
        }
        else
        {
            r = qbds.findRange(fieldnum(ProdJournalProd, Voucher));
            if (r)
                r.value('');
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    InventDimParm   parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTransactions</Name>
				<Source><![CDATA[
    boolean parmShowTransactions(boolean _showTransactions = showTransactions)
    {
        showTransactions = _showTransactions;

        return showTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
