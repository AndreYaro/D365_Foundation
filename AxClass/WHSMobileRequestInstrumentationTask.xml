<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileRequestInstrumentationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ApplicationEventSource = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;
using Stopwatch = System.Diagnostics.Stopwatch;

/// <summary>
/// Sends events at the beginning and at the end of a WHS mobile request
/// Create an instance in a 'using' block that wraps the operation that you want to instrument.
/// </summary>
internal final class WHSMobileRequestInstrumentationTask implements System.IDisposable
{
    private Stopwatch                           stopwatch;
    private WHSMobileDeviceClientType           clientType;
    private SysInstrumentationActivityContext   activityContext;
    private WHSInstrumentationLogger            logger;

    #WHSRF

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    { 
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(WHSMobileDeviceClientType _clientType, str _mobileDeviceRequestActivityId)
    {
        clientType = _clientType;
        stopwatch  = Stopwatch::StartNew();
        
        ApplicationEventSource::EventWriteWhsMobileRequestStart(
            enum2Symbol(enumNum(WHSMobileDeviceClientType), enum2int(clientType)),
            0);

        activityContext = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)))
               .mobileDeviceRequest().mobileDeviceRequest(enum2Symbol(enumNum(WHSMobileDeviceClientType), enum2int(clientType)), _mobileDeviceRequestActivityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForAuthentication</Name>
				<Source><![CDATA[
    private void initForAuthentication(WHSWorkExecuteMode _mode)
    {
        logger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        activityContext = logger.mobileDeviceRequest()
            .mobileDeviceAuthenticateSession(enum2Symbol(enumNum(WHSWorkExecuteMode), enum2int(_mode)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForLicenseRegistration</Name>
				<Source><![CDATA[
    private void initForLicenseRegistration(WHSMobileDevice _device)
    {
        logger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        activityContext = logger.mobileDeviceRequest().mobileDeviceLicenseRegistration(_device);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAuthenticationIssue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logAuthenticationIssue(str _authenticationIssue)
    {
        logger.logWarning(_authenticationIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMobileDeviceClientType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>WHSMobileRequestInstrumentationTask</c> created from a <c>WHSMobileDeviceClientType</c>
    /// </summary>
    /// <param name = "_clientType">
    /// Type of client used to send the WHS mobile request
    /// </param>
    /// <returns>
    /// An instance of <c>WHSMobileRequestInstrumentationTask</c>
    /// </returns>
    [Hookable(false)]
    internal static WHSMobileRequestInstrumentationTask newFromMobileDeviceClientType(WHSMobileDeviceClientType _clientType)
    {
        WHSMobileRequestInstrumentationTask instrumentationTask = new WHSMobileRequestInstrumentationTask();
        instrumentationTask.init(_clientType, '');
        return instrumentationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>WHSMobileRequestInstrumentationTask</c> created from a <c>WHSMobileDeviceClientType</c> and mobile device request xml
    /// </summary>
    /// <param name = "_clientType">
    /// Type of client used to send the WHS mobile request
    /// </param>
    /// <param name = "_xml">
    /// Mobile device request xml
    /// </param>
    /// <returns>
    /// An instance of <c>WHSMobileRequestInstrumentationTask</c>
    /// </returns>
    [Hookable(false)]
    internal static WHSMobileRequestInstrumentationTask newFromParams(WHSMobileDeviceClientType _clientType, XML _xml)
    {
        WHSMobileRequestInstrumentationTask instrumentationTask = new WHSMobileRequestInstrumentationTask();
        instrumentationTask.init(_clientType, WHSMobileRequestInstrumentationTask::getDeviceRequestActivityId(_xml));
        return instrumentationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAuthenticateSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>WHSMobileRequestInstrumentationTask</c> created from a <c>WHSMobileDeviceClientType</c> and mobile device request xml
    /// </summary>
    /// <param name = "_con">
    /// Container for the WHS mobile request
    /// </param>
    /// <returns>
    /// An instance of <c>WHSMobileRequestInstrumentationTask</c>
    /// </returns>
    [Hookable(false)]
    internal static WHSMobileRequestInstrumentationTask newFromAuthenticateSession(container _con)
    {
        container stateInfo = conPeek(_con, #StateInfo);
        WHSWorkExecuteMode mode = conPeek(stateInfo, #StateInfoMode);

        WHSMobileRequestInstrumentationTask instrumentationTask = new WHSMobileRequestInstrumentationTask();
        instrumentationTask.initForAuthentication(mode);
        
        return instrumentationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDeviceLicenseRegistration</Name>
				<Source><![CDATA[
    internal static WHSMobileRequestInstrumentationTask newFromDeviceLicenseRegistration(WHSMobileDevice _device)
    {
        WHSMobileRequestInstrumentationTask instrumentationTask = new WHSMobileRequestInstrumentationTask();
        instrumentationTask.initForLicenseRegistration(_device);
        
        return instrumentationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeviceRequestActivityId</Name>
				<Source><![CDATA[
    internal static str getDeviceRequestActivityId(XML _xml)
    {
        str deviceRequestActivityId;
        str keyword = "DeviceRequestActivityId=\"";
        int len = strLen(_xml);
        int startPos = strScan(_xml, keyword, len, -len);
        if (startPos)
        {
            startPos += strLen(keyword);
            int endPos = strFind(_xml, "\"", startPos, len);
            deviceRequestActivityId = subStr(_xml, startPos, endPos - startPos);
        }
                
        return deviceRequestActivityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        activityContext.Dispose();

        if (stopWatch)
        {
            stopwatch.Stop();

            ApplicationEventSource::EventWriteWhsMobileRequestStop(
                enum2Symbol(enumNum(WHSMobileDeviceClientType), enum2int(clientType)),
                stopwatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>