<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixPurchLine</Name>
				<Source><![CDATA[
    private void checkFixPurchLine()
    {
        DictTable       dictTable;
        PurchLine       purchLine;
        ProjItemTrans   projItemTrans;        

        dictTable = new DictTable(tablenum(PurchLine));

        if (consistencyCheckJob.parmFromDate() && TradeConsistencyCheckFlight::instance().isEnabled())
        {
            utcdatetime fromDateTime = DateTimeUtil::newDateTime(consistencyCheckJob.parmFromDate(), 0);

            while select purchLine
                where !purchLine.IsDeleted &&
                       purchLine.ModifiedDateTime >= fromDateTime
                exists join projItemTrans
                    where projItemTrans.ProjTransId == purchLine.ProjTransId
            {
                this.kernelCheckRecord(purchLine, dictTable);
            }

            while select purchLine
                where !purchLine.IsDeleted
                   &&  purchLine.PurchStatus != PurchStatus::Canceled
                   && !purchLine.ProjTransId &&
                       purchLine.ModifiedDateTime >= fromDateTime
            {
                // Only do consistency check on record when status is not canceled
                this.kernelCheckRecord(purchLine, dictTable);
            }
        }
        else
        {
            while select purchLine
                where !purchLine.IsDeleted
                exists join projItemTrans
                    where projItemTrans.ProjTransId == purchLine.ProjTransId
            {
                this.kernelCheckRecord(purchLine, dictTable);
            }

            while select purchLine
                where !purchLine.IsDeleted
                   &&  purchLine.PurchStatus != PurchStatus::Canceled
                   && !purchLine.ProjTransId
            {
                // Only do consistency check on record when status is not canceled
                this.kernelCheckRecord(purchLine, dictTable);
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 45;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        // PurchTable
        this.kernelCheckTable(tablenum(PurchTable));

        // PurchLine
        this.checkFixPurchLine();

        // PurchParameters
        this.kernelCheckTable(tablenum(PurchParameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    protected void validateField(Common common, DictField dictField)
    {
        switch (common.TableId)
        {
            case (tablenum(PurchLine)):
                PurchLine purchLine = common;
                switch (dictField.id())
                {
                    case fieldnum(PurchLine, ProjTransId):
                        if (!purchLine.isInvoiced())
                            return;
                        break;
                }
                break;

            case (tablenum(PurchTable)):
                PurchTable purchTable = common;
                switch (dictField.id())
                {
                    case fieldnum(PurchTable, OrderAccount):
                        return;
                       
                    case fieldnum(PurchTable, CurrencyCode):
                        if (purchTable.isInvoiced() || purchTable.existInvoice() || purchTable.isInvoiceMatched())
                        {
                            return;
                        }
                        break;
                }
                break;
        }

        super(common, dictField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ProcurementAndSourcing:PurchDataConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@ProcurementAndSourcing:PurchDataConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(PurchRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SysConsistencyCheckJob consistencyCheckJob = new SysConsistencyCheckJob(classnum(PurchConsistencyCheck));

        if (!consistencyCheckJob.prompt())
        {
            return;
        }

        consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>