<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionInquiryUIHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI helper of the form <c>TaxTransactionInquiry_IN</c>. This is an abstract class and should be extended by children UI helper.
/// The common variables and methods are defined in the class <c>TaxTransactionInquiryUIHelper_IN</c>. All types of tax inquiry
/// can extend this class and get a specific UI helper.
/// </summary>
public abstract class TaxTransactionInquiryUIHelper_IN
{
    FormRun                                 formRun;
    FormDataSource                          formDataSource;
    TaxTransactionInquiry_IN                taxTransactionInquiry;

    TaxInquiryArguments_IN                  taxInquiryArguments;
    QueryBuildDataSource                    queryBuildDataSource;

    DictTable                               taxTransactionTable;

    FormControl                             totalButtonCtrl;
    FormDateControl                         fromDateCtrl;
    FormDateControl                         toDateCtrl;
    FormStringControl                       registrationNumberCtrl;
    FormStringControl                       settlementPeriodCtrl;
    FormStringControl                       headerNoteCtrl;
    FormStringControl                       footerNoteCtrl;
    FormComboBoxControl                     taxTypeCtrl;

    [FormObservable]
    TaxTransactionInquiryFieldPrioritizer_IN    prioritizer;
    TaxTransactionInquiryFieldPrioritizer_IN    originalPrioritizer;

    List                                    defaultSelectedFieldList;
    Set                                     availableFieldIdSet;
    boolean                                 isWriting;
    boolean                                 activeSkippedDuringWrite;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxTransactionInquiryUIHelper_IN construct(
        FormRun                              _formRun,
        TaxTransactionInquiry_IN             _taxTransactionInquiry)
    {
        TaxTransactionInquiryUIHelper_IN taxTransactionInquiryUIHelper;

        switch (_taxTransactionInquiry.TaxTransactionInquiryType)
        {
            case TaxTransactionInquiryType_IN::TCSInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperTCS_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::TDSInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperTDS_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::CustomsInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperCustoms_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::ExciseInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperExcise_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::ServiceTaxInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperServiceTax_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::SalesTaxInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperSalesTax_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::VATInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperVAT_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::VATDefermentInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperVATDeferment_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::ExciseRegisterInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperExciseRegister_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::ExciseRegisterBalanceInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperExciseRegisterBalance_IN(_formRun, _taxTransactionInquiry);
                break;

            case TaxTransactionInquiryType_IN::IndirectTaxInquiry:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperIndirectTax_IN(_formRun, _taxTransactionInquiry);
                break;

            default:
                taxTransactionInquiryUIHelper = new TaxTransactionInquiryUIHelperExcise_IN(_formRun, _taxTransactionInquiry);
                break;
        }

        taxTransactionInquiryUIHelper.init();

        return taxTransactionInquiryUIHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The construction function. This function do the assignments.
    /// </summary>
    /// <param name = "_formRun">formRun of the form</param>
    /// <param name = "_taxTransactionInquiry">table data source</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(FormRun                  _formRun,
                       TaxTransactionInquiry_IN _taxTransactionInquiry)
    {
        formRun                 = _formRun;
        formDataSource          = _formRun.dataSource();
        taxTransactionInquiry   = _taxTransactionInquiry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// The initial handles of the UI helper. Include the definitions and the UI updates.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        if (taxTransactionInquiry.TaxTransactionInquiryType == TaxTransactionInquiryType_IN::TCSInquiry
        || taxTransactionInquiry.TaxTransactionInquiryType == TaxTransactionInquiryType_IN::TDSInquiry)
        {
            taxTransactionTable = new DictTable(tablenum(TaxWithholdTrans_IN));
        }
        else
        {
            taxTransactionTable = new DictTable(tablenum(TaxTrans_IN));
        }

        taxInquiryArguments     = new TaxInquiryArguments_IN();

        this.constructPrioritizer();
        this.initAllControls();
        this.updateUIDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransactionInquiryFieldPrioritizer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxTransactionInquiryFieldPrioritizer_IN getTaxTransactionInquiryFieldPrioritizer()
    {
        return prioritizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableFieldIdSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set getAvailableFieldIdSet()
    {
        if (!availableFieldIdSet)
        {
            this.initAvailableFieldIdSet();
        }
        return availableFieldIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransactionTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TableId getTaxTransactionTableId()
    {
        if (taxTransactionTable)
        {
            return taxTransactionTable.id();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWritingDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the database is writting.
    /// </summary>
    /// <returns>
    /// True if the database is writting. False otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isWritingDatabase()
    {
        if (isWriting)
        {
            activeSkippedDuringWrite = true;
        }
        return isWriting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateSelectedFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all selected fields of current inquiry and check whether it should update selected field list.
    /// </summary>
    /// <returns>
    /// True if it should update selected field list next. False otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldUpdateSelectedFieldList()
    {
        ListEnumerator                              listEnum;
        ListEnumerator                              origListEnum;
        TaxTransactionInquiryFieldObject_IN         fieldObject;
        TaxTransactionInquiryFieldObject_IN         origFieldObject;
        TaxTransactionInquirySelectedFields_IN      inquirySelectedFields;
        boolean                                     changesMade, isNew, isOrderChanged;

        isWriting = true;

        // Pull data from the current prioritizer
        listEnum = prioritizer.getFieldObjectsEnumerator();
        origListEnum = originalPrioritizer.getFieldObjectsEnumerator();

        changesMade = prioritizer.elements() != originalPrioritizer.elements();
        isOrderChanged = false;

        if (!changesMade)
        {
            // See if all current field objects exist in the inquiry
            while (listEnum.moveNext() && origListEnum.moveNext())
            {
                fieldObject = listEnum.current();
                origFieldObject = origListEnum.current();

                if (fieldObject.parmFieldId() != origFieldObject.parmFieldId())
                {
                    isOrderChanged = true;
                }

                select firstonly RecId from inquirySelectedFields where
                        inquirySelectedFields.TaxTransactionInquiry == taxTransactionInquiry.RecId
                    &&  inquirySelectedFields.TaxTransactionTableId == fieldObject.parmTableId()
                    &&  inquirySelectedFields.SelectedFieldId == fieldObject.parmFieldId();

                if (!inquirySelectedFields)
                {
                    // changesMade is a superset of isOrderChanged so we can stop
                    changesMade = true;
                    break;
                }
            }
        }

        isNew = (taxTransactionInquiry.RecId == 0);

        activeSkippedDuringWrite = false;

        // If changes have been made, verify the user intended to make changes
        if (isNew || changesMade || isOrderChanged)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectedFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the selected field list. Update the database.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateSelectedFieldList()
    {
        ListEnumerator                              listEnum;
        TaxTransactionInquirySelectedFields_IN      inquirySelectedFields;
        TaxTransactionInquiryFieldObject_IN         fieldObject;
        RecordInsertList                            insertList;
        int                                         position;

        listEnum = prioritizer.getFieldObjectsEnumerator();

        if (listEnum != null)
        {
            listEnum.reset();

            // End the writing phase once any potential dialog has been surface and before any thrown exceptions.
            isWriting = false;

            ttsbegin;

            // Clear out existing inquiry selected fields
            delete_from inquirySelectedFields
                    where inquirySelectedFields.TaxTransactionInquiry == taxTransactionInquiry.RecId;

            // Populate the updated selected fields
            position = 0;
            insertList = new RecordInsertList(tableNum(TaxTransactionInquirySelectedFields_IN));
            while (listEnum.moveNext())
            {
                position++;
                fieldObject = listEnum.current();

                inquirySelectedFields.clear();
                inquirySelectedFields.TaxTransactionInquiry = taxTransactionInquiry.RecId;
                inquirySelectedFields.TaxTransactionTableId = fieldObject.parmTableId();
                inquirySelectedFields.SelectedFieldId = fieldObject.parmFieldId();
                inquirySelectedFields.Position = position;
                insertList.add(inquirySelectedFields);
            }
            insertList.insertDatabase();

            ttscommit;
        }

        if (activeSkippedDuringWrite)
        {
            // Manually call active() after write() completes since it was skipped earlier
            activeSkippedDuringWrite = false;
            formDataSource.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquiryButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method of the event that the inquiry button is clicked. Check if there is any error and
    /// popup another form to show the inquiry result.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void inquiryButtonClicked()
    {
        this.checkErrors();
        this.popupInquiryResultForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method of the event that the filter button is clicked.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void filterButtonClicked()
    {
        QueryRun queryRun = new QueryRun(this.getFilterQuery());
        queryRun.prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceForTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method of the event that the control is looking up reference. Popup a list of registration numbers
    /// that users can choose.
    /// </summary>
    /// <param name = "_formControl">the look up control</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupReferenceForTaxRegistrationNumber(FormControl _formControl)
    {
        TaxRegistrationNumberView_IN::lookupRegistrationNumber(_formControl, this.getTaxType(), TaxRegistrationType_IN::Company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceForTaxSettlementPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method of the event that the control is looking up reference. Popup a list of registration numbers
    /// that users can choose.
    /// </summary>
    /// <param name = "_formControl">the look up control</param>
    public void lookupReferenceForTaxSettlementPeriod(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(TaxPeriodHead), _formControl);

        sysTableLookup.addSelectionField(fieldNum(TaxPeriodHead, TaxPeriod));
        sysTableLookup.addLookupfield(fieldnum(TaxPeriodHead, TaxPeriod));
        sysTableLookup.addLookupfield(fieldnum(TaxPeriodHead, Name));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUIDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the design of the UI of different tax types.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateUIDesign()
    {
        totalButtonCtrl.visible(false);
        registrationNumberCtrl.visible(false);
        settlementPeriodCtrl.visible(false);
        taxTypeCtrl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and throw error if there are some errors.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkErrors()
    {
        if ((!fromDateCtrl.dateValue() && toDateCtrl.dateValue()) ||
           (fromDateCtrl.dateValue() && !toDateCtrl.dateValue()))
        {
            throw error("@SYS22087");
        }
        if (fromDateCtrl.dateValue() > toDateCtrl.dateValue())
        {
            throw error("@SYS120590");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DisplayQueryString getFilterQuery()
    {
        return queryStr(IndirectTaxInquiry_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableFieldGroupName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FieldGroupName getAvailableFieldGroupName()
    {
        return "@TaxTransactionInquiry:IndirectTaxAvailableFields";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSelectedFieldGroupName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FieldGroupName getDefaultSelectedFieldGroupName()
    {
        return "@TaxTransactionInquiry:IndirectTaxSelectedFields";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxType_IN getTaxType()
    {
        return TaxType_IN::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>popupInquiryResultForm</Name>
				<Source><![CDATA[
    private void popupInquiryResultForm()
    {
        List                    selectedFieldObjects;
        FormRun                 formRunResult;
        Args                    args                        = new Args();
        MenuItemNameDisplay     inquiryMenuItemDisplayStr   = this.getInquiryMenuItemDisplayStr();

        FromDate                fromDate;
        ToDate                  toDate;

        fromDate = fromDateCtrl.dateValue();
        toDate   = toDateCtrl.dateValue();

        selectedFieldObjects = prioritizer.sortedSelectedFieldObjects();

        taxInquiryArguments.setInquiryName(taxTransactionInquiry.Name);
        taxInquiryArguments.setFromDate(fromDate);
        taxInquiryArguments.setToDate(toDate);
        taxInquiryArguments.setTaxRegistrationNumber(registrationNumberCtrl.text());
        taxInquiryArguments.setSettlementPeriod_IN(settlementPeriodCtrl.text());
        taxInquiryArguments.setSelectedFieldObjectList(selectedFieldObjects);
        taxInquiryArguments.setIsHeaderNoteVisible(headerNoteCtrl.text() ? true : false);
        taxInquiryArguments.setIsFooterNoteVisible(footerNoteCtrl.text() ? true : false);
        taxInquiryArguments.setHeaderNote(headerNoteCtrl.text() ? headerNoteCtrl.text() : '');
        taxInquiryArguments.setFooterNote(footerNoteCtrl.text() ? footerNoteCtrl.text() : '');

        this.setInquiryArgumentQueryRun();

        if (taxTransactionInquiry.TaxTransactionInquiryType == TaxTransactionInquiryType_IN::TCSInquiry)
        {
            taxInquiryArguments.parmTaxWithholdType(TaxWithholdType_IN::TCS);
        }
        else if (taxTransactionInquiry.TaxTransactionInquiryType == TaxTransactionInquiryType_IN::TDSInquiry)
        {
            taxInquiryArguments.parmTaxWithholdType(TaxWithholdType_IN::TDS);
        }

        args.parmObject(taxInquiryArguments);
        formRunResult = new MenuFunction(inquiryMenuItemDisplayStr, MenuItemType::Display).create(args);
        formRunResult.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInquiryArgumentQueryRun</Name>
				<Source><![CDATA[
    private void setInquiryArgumentQueryRun()
    {
        Query query = new Query();

        queryBuildDataSource = query.addDataSource(this.getTaxInquiryViewTableId());

        this.addRangesToView();

        taxInquiryArguments.setQueryRun(new QueryRun(query));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInquiryMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract MenuItemNameDisplay getInquiryMenuItemDisplayStr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInquiryViewTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract TableId getTaxInquiryViewTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwrite this method if the child class needs to be implemented
    /// </summary>
    /// <param name = "_queryBuildDataSource">the look up query</param>
    protected void addRanges(QueryBuildDataSource _queryBuildDataSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesToView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add ranges to the query of the tax transaction.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addRangesToView()
    {
        this.addRangeTransDate();
        this.addRanges(queryBuildDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeTransDate</Name>
				<Source><![CDATA[
    private void addRangeTransDate()
    {
        FromDate    fromDate    = taxInquiryArguments.getFromDate();
        ToDate      toDate      = taxInquiryArguments.getToDate();
         
        if (fromDate && toDate)
        {
            queryBuildDataSource.addRange(fieldName2Id(this.getTaxInquiryViewTableId(), "@TaxTransactionInquiry:TransDate")).value(strFmt('"%1".."%2"', fromDate, toDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrioritizer</Name>
				<Source><![CDATA[
    private void constructPrioritizer()
    {
        this.initDefaultSelectedFieldList();

        // Create a prioritizer which tracks current selections for this inquiry
        prioritizer = TaxTransactionInquiryFieldPrioritizer_IN::construct(taxTransactionInquiry);
        prioritizer.initTaxTransactionInquirySelectedFields(defaultSelectedFieldList);

        originalPrioritizer = TaxTransactionInquiryFieldPrioritizer_IN::construct(taxTransactionInquiry);
        originalPrioritizer.initTaxTransactionInquirySelectedFields(defaultSelectedFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllControls</Name>
				<Source><![CDATA[
    private void initAllControls()
    {
        totalButtonCtrl         = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TotalFieldsMenuFunctionButtonControl)));
        fromDateCtrl            = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_FromDate)));
        toDateCtrl              = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_ToDate)));
        registrationNumberCtrl  = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_TaxRegistrationNumber)));
        settlementPeriodCtrl    = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_TaxSettlementPeriod)));
        headerNoteCtrl          = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_HeaderNote)));
        footerNoteCtrl          = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_footerNote)));
        taxTypeCtrl             = formRun.control(formRun.controlId(formControlStr(TaxTransactionInquiry_IN, TaxTransactionInquiry_IN_TaxType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAvailableFieldIdSet</Name>
				<Source><![CDATA[
    private void initAvailableFieldIdSet()
    {
        Counter                                 fieldCount;
        DictFieldGroup                          dictFieldGroup;
        SysDictField                            sysDictField;
        TaxTransactionInquirySelectedFields_IN  taxTransactionInquirySelectedFields;
        FieldGroupName                          availableFieldGroupName;

        availableFieldGroupName = this.getAvailableFieldGroupName();

        if (availableFieldGroupName)
        {
            availableFieldIdSet = new Set(Types::Integer);
            dictFieldGroup = new DictFieldGroup(taxTransactionTable.id(), availableFieldGroupName);
            if (dictFieldGroup)
            {
                for (fieldCount=1; fieldCount <= dictFieldGroup.numberOfFields(); fieldCount++)
                {
                    sysDictField = new SysDictField(taxTransactionTable.id(), dictFieldGroup.field(fieldCount));
                    if (sysDictField)
                    {
                        select firstonly taxTransactionInquirySelectedFields
                            where taxTransactionInquirySelectedFields.TaxTransactionInquiry == taxTransactionInquiry.RecId
                            &&  taxTransactionInquirySelectedFields.TaxTransactionTableId == sysDictField.tableid()
                            &&  taxTransactionInquirySelectedFields.SelectedFieldId == sysDictField.id();

                        if (!taxTransactionInquirySelectedFields)
                        {
                            availableFieldIdSet.add(sysDictField.id());
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultSelectedFieldList</Name>
				<Source><![CDATA[
    private void initDefaultSelectedFieldList()
    {
        Counter         fieldCount;
        DictFieldGroup  dictFieldGroup;
        SysDictField    sysDictField;
        FieldGroupName  defaultSelectedFieldGroupName;

        defaultSelectedFieldList        = new List(Types::Container);
        defaultSelectedFieldGroupName   = this.getDefaultSelectedFieldGroupName();

        if (defaultSelectedFieldGroupName)
        {
            dictFieldGroup = new DictFieldGroup(taxTransactionTable.id(), defaultSelectedFieldGroupName);
            if (dictFieldGroup)
            {
                for (fieldCount=1; fieldCount <= dictFieldGroup.numberOfFields(); fieldCount++)
                {
                    sysDictField = new SysDictField(taxTransactionTable.id(), dictFieldGroup.field(fieldCount));
                    if (sysDictField)
                    {
                        defaultSelectedFieldList.addEnd([sysDictField.tableid(), sysDictField.id()]);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>