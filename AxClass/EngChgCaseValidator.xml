<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EngChgCaseValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to validate state for a given product change case.
/// </summary>
public class EngChgCaseValidator
{
    Map                             enabledValidationRules;
    RefRecId                        caseDetailBaseRecId;
    CaseDetail                      caseDetail;
    CaseCategoryHierarchyDetail     caseCategoryHierarchyDetail;
    EngChgCaseValidatorMessage      engChgCaseValidatorMessage;
    boolean                         isCalledFromWorkFlow;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBOMFormulaApprovedCloseCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check bill of materials and formulas are approved when closing the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkBOMFormulaApprovedCloseCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationBOM;
        BOMTable            bomTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006362";

        while select CaseRecId, EntityType, RefRecId from caseAssociationBOM
            where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                  && caseAssociationBOM.EntityType == CaseEntityType::BOM
            join BOMId, RecId from bomTable
                group by BOMId
                where caseAssociationBOM.RefRecId == bomTable.RecId
                      && (!bomTable.Approved || !bomTable.Approver)
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006381", bomTable.BOMId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMFormulaApprovedValidateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check bill of materials and formulas associated with case are marked for approval
    /// when validating changes from the approve and activate form.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    public void checkBOMFormulaApprovedValidateChange(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation             caseAssociationBOM;
        BOMTable                    bomTable;
        EngChgCaseBOMRouteApproval  engChgCaseBOMRouteApproval;
        boolean                     noViolation = true;
        str                         ruleName = "@SYS4006362";

        while select BOMId, RecId from bomTable
            group by BOMId
            where !bomTable.Approved || !bomTable.Approver
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationBOM.EntityType == CaseEntityType::BOM
                      && caseAssociationBOM.RefRecId == bomTable.RecId
            notexists join engChgCaseBOMRouteApproval
                where engChgCaseBOMRouteApproval.CaseAssociation == caseAssociationBOM.RecId
                      && engChgCaseBOMRouteApproval.ApproveAction == EngChgCaseBOMRouteApprovalAction::Approve
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006429", bomTable.BOMId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMFormulaHasVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check bill of materials and formulas associated with case are assigned to a released product.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkBOMFormulaHasVersion(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationBOM;
        CaseAssociation     caseAssociationItem;
        BOMTable            bomTable;
        BOMVersion          bomVersion;
        InventTable         inventTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006365";

        // If no BOM versions exists for the BOM or none of the BOM versions item is associated to the case
        while select BOMId, RecId from bomTable
            group by BOMId
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationBOM.EntityType == CaseEntityType::BOM
                      && caseAssociationBOM.RefRecId == bomTable.RecId
        {
            select firstOnly BOMId, ItemId, RecId from bomVersion
                where bomTable.BOMId == bomVersion.BOMId
                exists join inventTable
                    where inventTable.ItemId == bomVersion.ItemId
                exists join caseAssociationItem
                    where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                          && caseAssociationItem.EntityType == CaseEntityType::Item
                          && caseAssociationItem.RefRecId == inventTable.RecId;

            if (!bomVersion)
            {
                engChgCaseValidatorMessage.RuleName = ruleName;
                engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006379", bomTable.BOMId);
                engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
                engChgCaseValidatorMessage.insert();
                noViolation = false;
            }
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersionApprovedCloseCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check bill of materials and formulas versions are approved when closing the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkBOMVersionApprovedCloseCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationBOM;
        CaseAssociation     caseAssociationItem;
        BOMTable            bomTable;
        BOMVersion          bomVersion;
        InventTable         inventTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006345";

        while select BOMId from bomTable
            join Approved, Approver, BOMId, ItemId from bomVersion
                where bomVersion.BOMId == bomTable.BOMId
                      && (!bomVersion.Approved || !bomVersion.Approver)
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationBOM.EntityType == CaseEntityType::BOM
                      && caseAssociationBOM.RefRecId == bomTable.RecId
            exists join inventTable
                where inventTable.ItemId == bomVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006391", bomVersion.ItemId, bomVersion.BOMId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersionIsActiveCloseCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check released products associated with case has any active bill of materials or formulas version when closing the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkBOMVersionIsActiveCloseCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        Map                             bomVersionActiveMap = new Map(Types::String, Types::Enum);
        CaseAssociation                 caseAssociationBOM;
        CaseAssociation                 caseAssociationItem;
        BOMTable                        bomTable;
        BOMVersion                      bomVersion;
        InventTable                     inventTable;
        EngChgCasePlannedEffectiveDate  casePlannedEffectiveDate;
        boolean                         validVersion;
        boolean                         noViolation = true;
        str                             ruleName = "@SYS4006347";

        while select Active, BOMId, FromDate, ToDate, ItemId, RecId from bomVersion
            exists join bomTable
                where bomVersion.BOMId == bomTable.BOMId
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationBOM.EntityType == CaseEntityType::BOM
                      && caseAssociationBOM.RefRecId == bomTable.RecId
            exists join inventTable
                where inventTable.ItemId == bomVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            casePlannedEffectiveDate = this.parmCaseDetail().PlannedEffectiveDate;
            validVersion = bomVersion.Active
                           && (casePlannedEffectiveDate == dateNull()
                               || ((casePlannedEffectiveDate >= bomVersion.FromDate || bomVersion.FromDate == dateNull())
                                    && (casePlannedEffectiveDate <= bomVersion.ToDate || bomVersion.ToDate == dateNull())));

            if (!bomVersionActiveMap.exists(bomVersion.ItemId))
            {
                if (validVersion)
                {
                    bomVersionActiveMap.insert(bomVersion.ItemId, NoYes::Yes);
                }
                else
                {
                    bomVersionActiveMap.insert(bomVersion.ItemId, NoYes::No);
                }
            }
            else
            {
                if (validVersion)
                {
                    bomVersionActiveMap.insert(bomVersion.ItemId, NoYes::Yes);
                }
            }
        }

        // for all items found without any active version add message to infolog.
        noViolation = this.infologAddVersionMessage(ruleName, bomVersionActiveMap, "@SYS4006406", _errorLevel);

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersionIsActiveValidateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check released products associated with case have any active bill of material or formula versions;
    /// or is marked for activation when validating changes in the approve and activate form.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    public void checkBOMVersionIsActiveValidateChange(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        Map                                 bomVersionActiveMap = new Map(Types::String, Types::Enum);
        CaseAssociation                     caseAssociationBOM;
        CaseAssociation                     caseAssociationItem;
        BOMTable                            bomTable;
        BOMVersion                          bomVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   engChgCaseBOMRouteVersionApproval;
        boolean                             noViolation = true;
        str                                 ruleName = "@SYS4006347";

        while select Active, BOMId, ItemId, RecId from bomVersion
            join ApprovalVersionAction, EntityType, EntityVersion from engChgCaseBOMRouteVersionApproval
                where engChgCaseBOMRouteVersionApproval.EntityType == CaseEntityType::BOM
                      && engChgCaseBOMRouteVersionApproval.EntityVersion == bomVersion.RecId
            exists join bomTable
                where bomVersion.BOMId == bomTable.BOMId
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationBOM.EntityType == CaseEntityType::BOM
                      && caseAssociationBOM.RefRecId == bomTable.RecId
                      && caseAssociationBOM.RecId == engChgCaseBOMRouteVersionApproval.EntityCaseAssociation
            exists join inventTable
                where inventTable.ItemId == bomVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
                      && caseAssociationItem.RecId == engChgCaseBOMRouteVersionApproval.ItemCaseAssociation
        {
            if (!bomVersionActiveMap.exists(bomVersion.ItemId))
            {
                if ((bomVersion.Active &&
                     engChgCaseBOMRouteVersionApproval.ApprovalVersionAction != EngChgCaseBOMRouteVersionApprovalAction::Expire)
                    || (!bomVersion.Active &&
                        (engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Activate
                         || engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate)))
                {
                    bomVersionActiveMap.insert(bomVersion.ItemId, NoYes::Yes);
                }
                else
                {
                    bomVersionActiveMap.insert(bomVersion.ItemId, NoYes::No);
                }
            }
            else
            {
                if ((bomVersion.Active &&
                     engChgCaseBOMRouteVersionApproval.ApprovalVersionAction != EngChgCaseBOMRouteVersionApprovalAction::Expire)
                    || (!bomVersion.Active &&
                        (engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Activate
                         || engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate)))
                {
                    bomVersionActiveMap.insert(bomVersion.ItemId, NoYes::Yes);
                }
            }
        }

        // for all items found without any active version add message to infolog.
        noViolation = this.infologAddVersionMessage(ruleName, bomVersionActiveMap, "@SYS4006406", _errorLevel);

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersionIsApprovedValidateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check bill of material and formula versions are approved or is marked for approval
    /// when validating changes from the approve and activate form.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    public void checkBOMVersionIsApprovedValidateChange(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation                     caseAssociationBOM;
        CaseAssociation                     caseAssociationItem;
        BOMTable                            bomTable;
        BOMVersion                          bomVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   engChgCaseBOMRouteVersionApproval;
        boolean                             noViolation = true;
        str                                 ruleName = "@SYS4006345";

        while select Approved, Approver, BOMId, ItemId, RecId from bomVersion
            join ApprovalVersionAction, EntityType, EntityVersion from engChgCaseBOMRouteVersionApproval
                where engChgCaseBOMRouteVersionApproval.EntityType == CaseEntityType::BOM
                      && engChgCaseBOMRouteVersionApproval.EntityVersion == bomVersion.RecId
            exists join bomTable
                where bomVersion.BOMId == bomTable.BOMId
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationBOM.EntityType == CaseEntityType::BOM
                      && caseAssociationBOM.RefRecId == bomTable.RecId
                      && caseAssociationBOM.RecId == engChgCaseBOMRouteVersionApproval.EntityCaseAssociation
            exists join inventTable
                where inventTable.ItemId == bomVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
                      && caseAssociationItem.RecId == engChgCaseBOMRouteVersionApproval.ItemCaseAssociation

        {
            if (!(bomVersion.Approved && bomVersion.Approver)
                && !(engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Approve
                     || engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate))
            {
                engChgCaseValidatorMessage.RuleName = ruleName;
                engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006431", bomVersion.ItemId, bomVersion.BOMId);
                engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
                engChgCaseValidatorMessage.insert();
                noViolation = false;
            }
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDependentCasesClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that dependent (child) cases are closed.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the info log.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkDependentCasesClosed(EngChgCaseCategoryValidationRuleLevel _errorLevel = EngChgCaseCategoryValidationRuleLevel::Error)
    {
        CaseDetailBase      caseDetailBase;
        CaseDependency      caseDependency;
        boolean             noViolation = true;
        str                 ruleName =  "@SYS4006348";

        while select ParentCaseRecId from caseDependency
            join CaseId from caseDetailBase
                where caseDependency.ParentCaseRecId == this.parmCaseDetail().RecId
                      && caseDependency.CaseRecId == caseDetailBase.RecId
                      && caseDetailBase.Status != CaseStatus::Closed
                      && caseDetailBase.Status != CaseStatus::Cancelled
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006407", caseDetailBase.CaseId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkImpactedItemExistsInCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check impacted released products are associated with the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkImpactedItemExistsInCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationBOM;
        CaseAssociation     caseAssociationRoute;
        CaseAssociation     caseAssociationItem;
        InventTable         inventTable;
        BOMTable            bomTable;
        BOMVersion          bomVersion;
        RouteTable          routeTable;
        RouteVersion        routeVersion;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006344";

        // Check BOM or formula versions exists for released products that are not associated with the case.
        while select BOMId, ItemId from bomVersion
            exists join inventTable
                where inventTable.ItemId == bomVersion.ItemId
            exists join bomTable
                where bomTable.BOMId == bomVersion.BOMId
            exists join caseAssociationBOM
                where caseAssociationBOM.CaseRecId == this.parmCaseDetail().RecId
                  && caseAssociationBOM.EntityType == CaseEntityType::BOM
                  && caseAssociationBOM.RefRecId == bomTable.RecId
            notexists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006377", bomVersion.ItemId, bomVersion.BOMId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
        }

        // Check route versions exists for released products that are not associated with the case.
        while select RouteId, ItemId from routeVersion
            exists join inventTable
                where inventTable.ItemId == routeVersion.ItemId
            exists join routeTable
                where routeTable.RouteId == routeVersion.RouteId
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                  && caseAssociationRoute.EntityType == CaseEntityType::Route
                  && caseAssociationRoute.RefRecId == routeTable.RecId
            notexists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006378", routeVersion.ItemId, routeVersion.RouteId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemIsOrphan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check released product is assigned to a bill of material or formula versions; or is used as a component in one or more bill of materials or formulas.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <remarks>
    ///  A special case exists if no bill of materials or formulas are associated with the case.
    /// </remarks>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkItemIsOrphan(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociation;
        CaseAssociation     caseAssociationItem;
        InventTable         inventTable;
        InventTable         inventTableNotExists;
        BOM                 bomLine;
        BOMVersion          bomVersion;
        RouteVersion        routeVersion;
        PmfFormulaCoBy      pmfFormulaCoBy;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006364";

        // check if case contains any BOM/Formula or route, if not no issues found
        select firstonly CaseRecId, EntityType, RecId from caseAssociation
            where caseAssociation.CaseRecId == this.parmCaseDetail().RecId
                  && (caseAssociation.EntityType == CaseEntityType::BOM
                  || caseAssociation.EntityType == CaseEntityType::Route);

        if (caseAssociation)
        {
            // check if item exists in any BOM/Formula or route version or component
            while select ItemId, RecId from inventTable
                group by ItemId
                outer join ItemId from bomLine
                    where bomLine.ItemId == inventTable.ItemId
                outer join ItemId from bomVersion
                    where bomVersion.ItemId == inventTable.ItemId
                outer join ItemId from routeVersion
                    where routeVersion.ItemId == inventTable.ItemId
                outer join ItemId from pmfFormulaCoBy
                    where pmfFormulaCoBy.ItemId == inventTable.ItemId
                exists join caseAssociationItem
                    where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                          && caseAssociationItem.EntityType == CaseEntityType::Item
                          && caseAssociationItem.RefRecId == inventTable.RecId
                notexists join inventTableNotExists
                    where inventTableNotExists.ItemId == bomLine.ItemId
                          || inventTableNotExists.ItemId == bomVersion.ItemId
                          || inventTableNotExists.ItemId == routeVersion.ItemId
                          || inventTableNotExists.ItemId == pmfFormulaCoBy.ItemId
            {
                engChgCaseValidatorMessage.RuleName = ruleName;
                engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006376", inventTable.ItemId);
                engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
                engChgCaseValidatorMessage.insert();
                noViolation = false;
            }
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProcessActivityCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that process activities are completed.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the info log.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkProcessActivityCompleted(EngChgCaseCategoryValidationRuleLevel _errorLevel = EngChgCaseCategoryValidationRuleLevel::Error)
    {
        CaseDetailBase                  caseDetailBase;
        smmActivities                   activities;
        smmActivityParentLinkTable      activityParentLinkTable;
        boolean                         noViolation = true;
        str                             ruleName =  "@SYS4006349";

        while select RefRecId from activityParentLinkTable
            join ActivityNumber from activities
                where activityParentLinkTable.RefRecId == this.parmCaseDetail().RecId
                      && activityParentLinkTable.ActivityNumber == activities.ActivityNumber
                      && activityParentLinkTable.RefTableId == caseDetailBase.TableId
                      && activities.Closed == false
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006408", activities.ActivityNumber);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductReleasedToCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check associated products are released into current company.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkProductReleasedToCurrentCompany(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociation;
        EcoResProduct       ecoResProduct;
        InventTable         inventTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006360";

        // check if case contains any BOM, fomula or route, if not no issues found and return
        select firstonly caseAssociation
            where caseAssociation.CaseRecId == this.parmCaseDetail().RecId
                  && (caseAssociation.EntityType == CaseEntityType::BOM
                  || caseAssociation.EntityType == CaseEntityType::Route
                  || caseAssociation.EntityType == CaseEntityType::Item);
        if (!caseAssociation)
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = "@SYS4006369";
            engChgCaseValidatorMessage.ValidationRuleLevel = EngChgCaseCategoryValidationRuleLevel::Information;
            engChgCaseValidatorMessage.insert();

            return true;
        }

        // check product are released into current company.
        while select DisplayProductNumber, RecId from ecoResProduct
            exists join caseAssociation
                where caseAssociation.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociation.EntityType == CaseEntityType::Product
                      && caseAssociation.RefRecId == ecoResProduct.RecId
            notexists join inventTable
                where inventTable.Product == ecoResProduct.RecId
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006383", ecoResProduct.DisplayProductNumber, curext());
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReleasedProductExistsInCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check both products and released products are associated to the case of the current company.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkReleasedProductExistsInCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociation;
        CaseAssociation     caseAssociationItem;
        CaseAssociation     caseAssociationProduct;
        EcoResProduct       ecoResProduct;
        InventTable         inventTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006361";

        // check if case contains any BOM, fomula or route, if not no issues found and return
        select firstonly caseAssociation
            where caseAssociation.CaseRecId == this.parmCaseDetail().RecId
                  && (caseAssociation.EntityType == CaseEntityType::BOM
                  || caseAssociation.EntityType == CaseEntityType::Route
                  || caseAssociation.EntityType == CaseEntityType::Item);
        if (!caseAssociation)
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = "@SYS4006369";
            engChgCaseValidatorMessage.ValidationRuleLevel = EngChgCaseCategoryValidationRuleLevel::Information;
            engChgCaseValidatorMessage.insert();

            return true;
        }

        while select ItemId, Product, RecId from inventTable
            group by ItemId, Product
            join DisplayProductNumber, RecId from ecoResProduct
                group by DisplayProductNumber
                where ecoResProduct.RecId == inventTable.Product
            exists join caseAssociationProduct
                where caseAssociationProduct.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationProduct.EntityType == CaseEntityType::Product
                      && caseAssociationProduct.RefRecId == ecoResProduct.RecId
            notexists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006375", inventTable.ItemId, ecoResProduct.DisplayProductNumber);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteApprovedCloseCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check routes are approved when closing the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkRouteApprovedCloseCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationRoute;
        RouteTable          routeTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006363";

        while select CaseRecId, EntityType, RefRecId from caseAssociationRoute
            where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                  && caseAssociationRoute.EntityType == CaseEntityType::Route
            join RouteId, RecId from routeTable
                group by RouteId
                where caseAssociationRoute.RefRecId == routeTable.RecId
                      && (!routeTable.Approved || !routeTable.Approver)
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006382", routeTable.RouteId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteApprovedValidateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check routes are approved or marked for approval when validating changes from the approve and active form.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    public void checkRouteApprovedValidateChange(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation             caseAssociationRoute;
        RouteTable                  routeTable;
        EngChgCaseBOMRouteApproval  engChgCaseBOMRouteApproval;
        boolean                     noViolation = true;
        str                         ruleName = "@SYS4006363";

        while select RouteId, RecId from routeTable
            group by RouteId
            where !routeTable.Approved || !routeTable.Approver
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationRoute.EntityType == CaseEntityType::Route
                      && caseAssociationRoute.RefRecId == routeTable.RecId
            notexists join engChgCaseBOMRouteApproval
                where engChgCaseBOMRouteApproval.CaseAssociation == caseAssociationRoute.RecId
                      && engChgCaseBOMRouteApproval.ApproveAction == EngChgCaseBOMRouteApprovalAction::Approve
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006430", routeTable.RouteId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteHasVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check routes are assigned to a released product.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkRouteHasVersion(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationRoute;
        CaseAssociation     caseAssociationItem;
        RouteTable          routeTable;
        RouteVersion        routeVersion;
        InventTable         inventTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006343";

        // If no route versions exists for the route or none of the route versions item is associated to the case
        while select RouteId, RecId from routeTable
            group by RouteId
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationRoute.EntityType == CaseEntityType::Route
                      && caseAssociationRoute.RefRecId == routeTable.RecId
        {
            select firstOnly RouteId, ItemId, RecId from routeVersion
                where routeTable.RouteId == routeVersion.RouteId
                exists join inventTable
                    where inventTable.ItemId == routeVersion.ItemId
                exists join caseAssociationItem
                    where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                          && caseAssociationItem.EntityType == CaseEntityType::Item
                          && caseAssociationItem.RefRecId == inventTable.RecId;

            if (!routeVersion)
            {
                engChgCaseValidatorMessage.RuleName = ruleName;
                engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006380", routeTable.RouteId);
                engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
                engChgCaseValidatorMessage.insert();
                noViolation = false;
            }
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteVersionApprovedCloseCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check route versions are approved when closing the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkRouteVersionApprovedCloseCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation     caseAssociationRoute;
        CaseAssociation     caseAssociationItem;
        RouteTable          routeTable;
        RouteVersion        routeVersion;
        InventTable         inventTable;
        boolean             noViolation = true;
        str                 ruleName = "@SYS4006346";

        while select RouteId from routeTable
            join Approved, Approver, RouteId, ItemId from routeVersion
                where routeVersion.RouteId == routeTable.RouteId
                      && (!routeVersion.Approved || !routeVersion.Approver)
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationRoute.EntityType == CaseEntityType::Route
                      && caseAssociationRoute.RefRecId == routeTable.RecId
            exists join inventTable
                where inventTable.ItemId == routeVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            engChgCaseValidatorMessage.RuleName = ruleName;
            engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006392", routeVersion.ItemId, routeVersion.RouteId);
            engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
            engChgCaseValidatorMessage.insert();
            noViolation = false;
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteVersionIsActiveCloseCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check released products associated with case have any active routes version when closing the case.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    /// <returns>
    /// True if the rule is not violated, otherwise false.
    /// </returns>
    public boolean checkRouteVersionIsActiveCloseCase(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        Map                             routeVersionActiveMap = new Map(Types::String, Types::Enum);
        CaseAssociation                 caseAssociationRoute;
        CaseAssociation                 caseAssociationItem;
        RouteTable                      routeTable;
        RouteVersion                    routeVersion;
        InventTable                     inventTable;
        EngChgCasePlannedEffectiveDate  casePlannedEffectiveDate;
        boolean                         validVersion;
        boolean                         noViolation = true;
        str                             ruleName = "@SYS4006350";

        while select Active, RouteId, FromDate, ToDate, ItemId, RecId from routeVersion
            exists join routeTable
                where routeVersion.RouteId == routeTable.RouteId
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationRoute.EntityType == CaseEntityType::Route
                      && caseAssociationRoute.RefRecId == routeTable.RecId
            exists join inventTable
                where inventTable.ItemId == routeVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
        {
            casePlannedEffectiveDate = this.parmCaseDetail().PlannedEffectiveDate;
            validVersion = routeVersion.Active
                           && (casePlannedEffectiveDate == dateNull()
                               || ((casePlannedEffectiveDate >= routeVersion.FromDate || routeVersion.FromDate == dateNull())
                                    && (casePlannedEffectiveDate <= routeVersion.ToDate || routeVersion.ToDate == dateNull())));

            if (!routeVersionActiveMap.exists(routeVersion.ItemId))
            {
                if (validVersion)
                {
                    routeVersionActiveMap.insert(routeVersion.ItemId, NoYes::Yes);
                }
                else
                {
                    routeVersionActiveMap.insert(routeVersion.ItemId, NoYes::No);
                }
            }
            else
            {
                if (validVersion)
                {
                    routeVersionActiveMap.insert(routeVersion.ItemId, NoYes::Yes);
                }
            }
        }

        // for all items found without any active version add message to infolog.
        noViolation = this.infologAddVersionMessage(ruleName, routeVersionActiveMap, "@SYS4006405", _errorLevel);

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteVersionIsActiveValidateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check released products associated with case have any active route versions
    /// or is marked for activation when validating changes from the approve and activate form.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    public void checkRouteVersionIsActiveValidateChange(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        Map                                 routeVersionActiveMap = new Map(Types::String, Types::Enum);
        CaseAssociation                     caseAssociationRoute;
        CaseAssociation                     caseAssociationItem;
        RouteTable                          routeTable;
        RouteVersion                        routeVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   engChgCaseBOMRouteVersionApproval;
        boolean                             noViolation = true;
        str                                 ruleName = "@SYS4006350";

        while select Active, RouteId, ItemId, RecId from routeVersion
            join ApprovalVersionAction, EntityType, EntityVersion from engChgCaseBOMRouteVersionApproval
                where engChgCaseBOMRouteVersionApproval.EntityType == CaseEntityType::Route
                      && engChgCaseBOMRouteVersionApproval.EntityVersion == routeVersion.RecId
            exists join routeTable
                where routeVersion.RouteId == routeTable.RouteId
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationRoute.EntityType == CaseEntityType::Route
                      && caseAssociationRoute.RefRecId == routeTable.RecId
                      && caseAssociationRoute.RecId == engChgCaseBOMRouteVersionApproval.EntityCaseAssociation
            exists join inventTable
                where inventTable.ItemId == routeVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
                      && caseAssociationItem.RecId == engChgCaseBOMRouteVersionApproval.ItemCaseAssociation
        {
            if (!routeVersionActiveMap.exists(routeVersion.ItemId))
            {
                if ((routeVersion.Active &&
                     engChgCaseBOMRouteVersionApproval.ApprovalVersionAction != EngChgCaseBOMRouteVersionApprovalAction::Expire)
                    || (!routeVersion.Active &&
                        (engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Activate
                         || engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate)))
                {
                    routeVersionActiveMap.insert(routeVersion.ItemId, NoYes::Yes);
                }
                else
                {
                    routeVersionActiveMap.insert(routeVersion.ItemId, NoYes::No);
                }
            }
            else
            {
                if ((routeVersion.Active &&
                     engChgCaseBOMRouteVersionApproval.ApprovalVersionAction != EngChgCaseBOMRouteVersionApprovalAction::Expire)
                    || (!routeVersion.Active &&
                        (engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Activate
                         || engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate)))
                {
                    routeVersionActiveMap.insert(routeVersion.ItemId, NoYes::Yes);
                }
            }
        }

        // for all items found without any active version add message to infolog.
        noViolation = this.infologAddVersionMessage(ruleName, routeVersionActiveMap, "@SYS4006405", _errorLevel);

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteVersionIsApproveValidateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check released products associated with case have any approved route versions or is marked for approval
    /// when validating changes from the approve and activate form.
    /// </summary>
    /// <param name="_errorLevel">
    /// The error level for message added to the infolog.
    /// </param>
    public void checkRouteVersionIsApproveValidateChange(EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        CaseAssociation                     caseAssociationRoute;
        CaseAssociation                     caseAssociationItem;
        RouteTable                          routeTable;
        RouteVersion                        routeVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   engChgCaseBOMRouteVersionApproval;
        boolean                             noViolation = true;
        str                                 ruleName = "@SYS4006346";

        while select Approved, Approver, RouteId, ItemId, RecId from routeVersion
            join ApprovalVersionAction, EntityType, EntityVersion from engChgCaseBOMRouteVersionApproval
                where engChgCaseBOMRouteVersionApproval.EntityType == CaseEntityType::Route
                      && engChgCaseBOMRouteVersionApproval.EntityVersion == routeVersion.RecId
            exists join routeTable
                where routeVersion.RouteId == routeTable.RouteId
            exists join caseAssociationRoute
                where caseAssociationRoute.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationRoute.EntityType == CaseEntityType::Route
                      && caseAssociationRoute.RefRecId == routeTable.RecId
                      && caseAssociationRoute.RecId == engChgCaseBOMRouteVersionApproval.EntityCaseAssociation
            exists join inventTable
                where inventTable.ItemId == routeVersion.ItemId
            exists join caseAssociationItem
                where caseAssociationItem.CaseRecId == this.parmCaseDetail().RecId
                      && caseAssociationItem.EntityType == CaseEntityType::Item
                      && caseAssociationItem.RefRecId == inventTable.RecId
                      && caseAssociationItem.RecId == engChgCaseBOMRouteVersionApproval.ItemCaseAssociation

        {
            if (!(routeVersion.Approved && routeVersion.Approver)
                && !(engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Approve
                     || engChgCaseBOMRouteVersionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate))
            {
                engChgCaseValidatorMessage.RuleName = ruleName;
                engChgCaseValidatorMessage.InfoMessage = strFmt("@SYS4006432", routeVersion.ItemId, routeVersion.RouteId);
                engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
                engChgCaseValidatorMessage.insert();
                noViolation = false;
            }
        }

        if (noViolation)
        {
            this.addNoIssuesFoundMessage(ruleName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoIssuesFoundMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add No Issues found message to the <c>EngChgCaseValidatorMessage</c> table, if <c>_currentInfoLogLines</c> parameter is large that current infologLine.
    /// </summary>
    /// <param name="_ruleName>
    /// The name of the rule.
    ///</param>
    /// <returns>
    /// True if no issues are added to the infolog, otherwise false.
    /// </returns>
    private void addNoIssuesFoundMessage(str _ruleName)
    {
        engChgCaseValidatorMessage.RuleName = _ruleName;
        engChgCaseValidatorMessage.InfoMessage = "@SYS4006369";
        engChgCaseValidatorMessage.ValidationRuleLevel = EngChgCaseCategoryValidationRuleLevel::Information;
        engChgCaseValidatorMessage.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologAddVersionMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add message to the infolog if <c>_versionMap</c> parameter contains any elements.
    /// </summary>
    /// <param name="_ruleName>
    /// The name of the rule.
    ///</param>
    /// <param name="_versionMap">
    /// The list of released products used for the infolog messages.
    /// </param>
    /// <param name="_message">
    /// The message for the infolog.
    /// </param>
    /// <param name="_errorLevel">
    /// The error level for the infolog.
    /// </param>
    /// <returns>True if no message added, otherwise false.</returns>
    private boolean infologAddVersionMessage(str _ruleName, Map _versionMap, str _message, EngChgCaseCategoryValidationRuleLevel _errorLevel)
    {
        MapEnumerator   versionMapEnumerator;
        boolean         noViolation = true;
        if (_versionMap.elements() > 0)
        {
            versionMapEnumerator = _versionMap.getEnumerator();
            while (versionMapEnumerator.moveNext())
            {
                if (versionMapEnumerator.currentValue() == NoYes::No)
                {
                    engChgCaseValidatorMessage.RuleName = _ruleName;
                    engChgCaseValidatorMessage.InfoMessage = strFmt(_message, versionMapEnumerator.currentKey());
                    engChgCaseValidatorMessage.ValidationRuleLevel = _errorLevel;
                    engChgCaseValidatorMessage.insert();
                    noViolation = false;
                }
            }
        }

        return noViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadValidationRules</Name>
				<Source><![CDATA[
    private void loadValidationRules()
    {
        EngChgCaseCategoryValidationRules   engChgCaseCategoryValidationRules;

        if (this.parmCaseCategoryHierarchyDetail()
            && this.parmCaseCategoryHierarchyDetail().CategoryType == CaseCategoryType::EngineeringChange)
        {
            enabledValidationRules = new Map(Types::Enum, Types::Enum);

            while select CaseCategory, ErrorLevel, ValidationRule
                from engChgCaseCategoryValidationRules
                where engChgCaseCategoryValidationRules.CaseCategory == this.parmCaseCategoryHierarchyDetail().RecId
                      && engChgCaseCategoryValidationRules.Enabled
            {
                enabledValidationRules.insert(engChgCaseCategoryValidationRules.ValidationRule, engChgCaseCategoryValidationRules.ErrorLevel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showValidationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show the result of the validation in a new form.
    /// </summary>
    private void showValidationResult()
    {
        Args args = new Args();
        args.name(formstr(EngChgCaseValidatorMessage));
        args.record(engChgCaseValidatorMessage);

        FormRun formRun = ClassFactory.formRunClass(args);
        formRun.run();
        if (!formRun.closed())
        {
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseCategoryHierarchyDetail</Name>
				<Source><![CDATA[
    public CaseCategoryHierarchyDetail parmCaseCategoryHierarchyDetail(CaseCategoryHierarchyDetail _caseCategoryHierarchyDetail = caseCategoryHierarchyDetail)
    {
        if (!prmisDefault(_caseCategoryHierarchyDetail))
        {
            caseCategoryHierarchyDetail = _caseCategoryHierarchyDetail;
        }
        return caseCategoryHierarchyDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseDetail</Name>
				<Source><![CDATA[
    public CaseDetail parmCaseDetail(CaseDetail _caseDetail = caseDetail)
    {
        if (!prmisDefault(_caseDetail))
        {
            caseDetail = _caseDetail;
        }
        return caseDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnabledValidationRules</Name>
				<Source><![CDATA[
    public Map parmEnabledValidationRules(Map _enabledValidationRules = enabledValidationRules)
    {
        if (!prmisDefault(_enabledValidationRules))
        {
            enabledValidationRules = _enabledValidationRules;
        }
        return enabledValidationRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEngChgCaseValidatorMessage</Name>
				<Source><![CDATA[
    public EngChgCaseValidatorMessage parmEngChgCaseValidatorMessage(EngChgCaseValidatorMessage _engChgCaseValidatorMessage = engChgCaseValidatorMessage)
    {
        if (!prmisDefault(_engChgCaseValidatorMessage))
        {
            engChgCaseValidatorMessage = _engChgCaseValidatorMessage;
        }
        return engChgCaseValidatorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApprovalActivateRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the product change case, executing the rules that apply to approve and activate form validation.
    /// </summary>
    public void runApprovalActivateRules()
    {
        MapEnumerator   rulesEnumerator = new MapEnumerator(this.parmEnabledValidationRules());

        while (rulesEnumerator.moveNext())
        {
            switch (rulesEnumerator.currentKey())
            {
                case EngChgCaseCategoryRule::ProductIsReleased:
                    this.checkProductReleasedToCurrentCompany(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ProductReleasedAssociatedWithCase:
                    this.checkReleasedProductExistsInCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaApproved:
                    this.checkBOMFormulaApprovedValidateChange(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteApproved:
                    this.checkRouteApprovedValidateChange(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductAssignedToBOMFormulaRoute:
                    this.checkItemIsOrphan(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaAssignedToReleasedProduct:
                    this.checkBOMFormulaHasVersion(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteAssignedToReleasedProduct:
                    this.checkRouteHasVersion(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ImpactedReleasedProductAssociatedToCase:
                    this.checkImpactedItemExistsInCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaVersionApproved:
                    this.checkBOMVersionIsApprovedValidateChange(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteVersionApproved:
                    this.checkRouteVersionIsApproveValidateChange(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductHaveActiveBOMFormulaVers:
                    this.checkBOMVersionIsActiveValidateChange(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductHaveActiveRouteVersion:
                    this.checkRouteVersionIsActiveValidateChange(rulesEnumerator.currentValue());
                    break;
            }
        }

        this.showValidationResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCaseCheckCompletenessRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the product change case, executing the rules that apply to check case completeness.
    /// </summary>
    public void runCaseCheckCompletenessRules()
    {
        MapEnumerator   rulesEnumerator = new MapEnumerator(this.parmEnabledValidationRules());

        while (rulesEnumerator.moveNext())
        {
            switch (rulesEnumerator.currentKey())
            {
                case EngChgCaseCategoryRule::ProductIsReleased:
                    this.checkProductReleasedToCurrentCompany(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ProductReleasedAssociatedWithCase:
                    this.checkReleasedProductExistsInCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductAssignedToBOMFormulaRoute:
                    this.checkItemIsOrphan(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaAssignedToReleasedProduct:
                    this.checkBOMFormulaHasVersion(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteAssignedToReleasedProduct:
                    this.checkRouteHasVersion(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ImpactedReleasedProductAssociatedToCase:
                    this.checkImpactedItemExistsInCase(rulesEnumerator.currentValue());
                    break;
            }
        }

        this.showValidationResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCaseCloseRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the completeness of the product change case, executing the rules that apply to close case.
    /// </summary>
    /// <returns>
    /// The highest error level of validation rule violations if any.
    /// </returns>
    public EngChgCaseValidatorRuleLevelResult runCaseCloseRules()
    {
        EngChgCaseValidatorRuleLevelResult      ret = EngChgCaseValidatorRuleLevelResult::None;
        boolean                                 noRuleViolation;
        MapEnumerator                           rulesEnumerator = new MapEnumerator(this.parmEnabledValidationRules());

        while (rulesEnumerator.moveNext())
        {
            switch (rulesEnumerator.currentKey())
            {
                case EngChgCaseCategoryRule::ProductIsReleased:
                    noRuleViolation = this.checkProductReleasedToCurrentCompany(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ProductReleasedAssociatedWithCase:
                    noRuleViolation = this.checkReleasedProductExistsInCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaApproved:
                    noRuleViolation = this.checkBOMFormulaApprovedCloseCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteApproved:
                    noRuleViolation = this.checkRouteApprovedCloseCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductAssignedToBOMFormulaRoute:
                    noRuleViolation = this.checkItemIsOrphan(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaAssignedToReleasedProduct:
                    noRuleViolation = this.checkBOMFormulaHasVersion(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteAssignedToReleasedProduct:
                    noRuleViolation = this.checkRouteHasVersion(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ImpactedReleasedProductAssociatedToCase:
                    noRuleViolation = this.checkImpactedItemExistsInCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::BOMFormulaVersionApproved:
                    noRuleViolation = this.checkBOMVersionApprovedCloseCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RouteVersionApproved:
                    noRuleViolation = this.checkRouteVersionApprovedCloseCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductHaveActiveBOMFormulaVers:
                    noRuleViolation = this.checkBOMVersionIsActiveCloseCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ReleasedProductHaveActiveRouteVersion:
                    noRuleViolation = this.checkRouteVersionIsActiveCloseCase(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::RelatedCaseAreClosed:
                    noRuleViolation = this.checkDependentCasesClosed(rulesEnumerator.currentValue());
                    break;
                case EngChgCaseCategoryRule::ProcessActivityCompleted:
                    noRuleViolation = this.checkProcessActivityCompleted(rulesEnumerator.currentValue());
                    break;
            }

            if (!noRuleViolation)
            {
                if (rulesEnumerator.currentValue() > ret
                    || ret == EngChgCaseValidatorRuleLevelResult::None)
                {
                    ret = rulesEnumerator.currentValue();
                }
            }
        }

        if (!this.parmIsCalledFromWorkFlow())
        {
            this.showValidationResult();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static EngChgCaseValidator construct()
    {
        return new EngChgCaseValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>EngChgCaseValidator</c> class
    /// </summary>
    /// <param name="_caseDetailBaseRecId">
    /// The RecId of a <c>CaseDetailBase</c> instance.
    /// </param>
    /// <returns>
    /// The <c>EngChgCaseValidator</c> class.
    /// </returns>
    public static EngChgCaseValidator newValidator(RefRecId _caseDetailBaseRecId)
    {
        EngChgCaseValidator validator = EngChgCaseValidator::construct();

        if (_caseDetailBaseRecId)
        {
            validator.parmCaseDetail(CaseDetailBase::findRec(_caseDetailBaseRecId));
            validator.parmCaseCategoryHierarchyDetail(validator.parmCaseDetail().caseCategory());
        }

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newValidatorAndLoadValidationRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>EngChgCaseValidator</c> class and load the validation rules.
    /// </summary>
    /// <param name="_caseDetailBaseRecId">
    /// The RecId of a <c>CaseDetailBase</c> instance.
    /// </param>
    /// <returns>
    /// The <c>EngChgCaseValidator</c> class.
    /// </returns>
    public static EngChgCaseValidator newValidatorAndLoadValidationRules(RefRecId _caseDetailBaseRecId)
    {
        EngChgCaseValidator validator = EngChgCaseValidator::construct();

        if (_caseDetailBaseRecId)
        {
            validator.parmCaseDetail(CaseDetailBase::findRec(_caseDetailBaseRecId));
            validator.parmCaseCategoryHierarchyDetail(validator.parmCaseDetail().caseCategory());
            validator.loadValidationRules();
        }

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromWorkFlow</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromWorkFlow(boolean _isCalledFromWorkFlow = isCalledFromWorkFlow)
    {
        isCalledFromWorkFlow = _isCalledFromWorkFlow;
        return isCalledFromWorkFlow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>