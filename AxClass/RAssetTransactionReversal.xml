<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTransactionReversal extends RunBase
{
    TransDate           reversalDate;
    DialogField         dialogReversalDate;
    NoYes               reverseForAllModels;
    DialogField         dialogReverseForAll;
    RAssetTrans         rAssetTrans, rAssetTransSource;
    RAssetTable         rAssetTable;
    RAssetParameters    rAssetParameters;
    RAssetStandards     rAssetStandards;
    LedgerVoucher       ledgerVoucher;
    LedgerVoucherObject ledgerVoucherObject;

    TransLinkReversal_RU transLinkReversal;
    private Set rAssetTransReversedSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        RAssetTrans         rAssetTransLinked;
        boolean             ret = true;

        select firstonly RecId from rAssetTransLinked
            where rAssetTransLinked.LinkedTransRecId == rAssetTrans.RecId &&
                  rAssetTransLinked.AssetTransType   == RAssetTransType::Revaluation;

        if (rAssetTrans.StornoRecId                                     ||
            rAssetTrans.AssetTransType == RAssetTransType::Depreciation &&
            !(rAssetTrans.DeprBonusId  && rAssetTransLinked.RecId)      ||
            rAssetTrans.AssetTransType == RAssetTransType::CompanyIssue ||
            rAssetTrans.AssetTransType == RAssetTransType::CompanyReceipt)
        {
            ret = false;
        }

        ret = ret && this.checkLastOperationDate();

        ret = ret && this.checkNetBookValue();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTransReversedSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get collection of asset transfer vouchers.
    /// </summary>
    /// <param name = "_rAssetTransReversedSet">
    /// Collection of asset transfer vouchers.
    /// </param>
    /// <returns>
    /// Collection of asset transfer vouchers.
    /// </returns>
    public Set parmAssetTransReversedSet(Set _rAssetTransReversedSet = rAssetTransReversedSet)
    {
        rAssetTransReversedSet = _rAssetTransReversedSet;

        return rAssetTransReversedSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastOperationDate</Name>
				<Source><![CDATA[
    #define.numOfPriorities(6)
    protected boolean checkLastOperationDate()
    {
        container               priority = [
                                             [ RAssetTransType::Acquisition ],                                  // first priority
                                             [ RAssetTransType::Depreciation ],                                 // second priority
                                             [ RAssetTransType::AcquisitionAdj,  RAssetTransType::WriteUpAdj ,  // third priority
                                               RAssetTransType::DepreciationAdj, RAssetTransType::Lending,
                                               RAssetTransType::Revaluation, RAssetTransType::WriteDownAdj ],
                                             [ RAssetTransType::LendingRet ],                                   // fourth priority
                                             [ RAssetTransType::Other ],                                        // fiveth priority
                                             [ RAssetTransType::Disposal, RAssetTransType::DisposalSale,        // sixth priority
                                               RAssetTransType::DisposalScrap ]
                                           ];

        int                     i, j;
        Query                   query;
        QueryBuildDataSource    qbds;
        str                     priorityTransType;
        QueryRun                queryRun;
        ;

        if (RAssetTrans::transLastDate(rAssetTrans.AccountNum, rAssetStandards.AssetStandardId, false) > rAssetTrans.TransDate)
            return checkFailed("@GLS116988");

        if (rAssetTrans.LinkedTransRecId &&
            ! RAssetTrans::find(rAssetTrans.LinkedTransRecId).StornoRecId)
            return checkFailed("@GLS116991");

        if (rAssetTrans.PostingType == RAssetPostingType::CompanyIssue ||
            rAssetTrans.PostingType == RAssetPostingType::CompanyReceipt)
            return true;

        for (i = #numOfPriorities; i > 0; i--)
        {
            if (conFind(conPeek(priority, i), rAssetTrans.AssetTransType))
            {
                break;
            }
            for (j = conLen(conPeek(priority, i)); j > 0; j--)
            {
                priorityTransType = queryRangeConcat(priorityTransType, enum2str(conPeek(conPeek(priority, i), j)));
            }
        }

        if (priorityTransType)
        {
            query = new Query();
            qbds = query.addDataSource(tableNum(RAssetTrans));
            qbds.orderMode(OrderMode::GroupBy);
            qbds.addSortField(fieldNum(RAssetTrans, AssetTransType));
            qbds.addRange(fieldNum(RAssetTrans, AccountNum)).value(queryValue(rAssetTrans.AccountNum));
            qbds.addRange(fieldNum(RAssetTrans, AssetStandardId)).value(queryValue(rAssetStandards.AssetStandardId));
            qbds.addRange(fieldNum(RAssetTrans, TransDate)).value(queryValue(rAssetTrans.TransDate));
            qbds.addRange(fieldNum(RAssetTrans, StornoRecId)).value(queryValue(0));
            qbds.addRange(fieldNum(RAssetTrans, RecId)).value(SysQuery::valueNot(rAssetTrans.RecId));
            qbds.addRange(fieldNum(RAssetTrans, AssetTransType)).value(priorityTransType);
            queryRun = new QueryRun(query);

            if (queryRun.next())
                return checkFailed("@GLS116989");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNetBookValue</Name>
				<Source><![CDATA[
    protected boolean checkNetBookValue()
    {
        RAssetSumCalc_Trans rAssetSumCalc;
        ;

        rAssetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(rAssetTrans.AccountNum,
                                                            rAssetStandards.AssetStandardId,
                                                            reversalDate);

        if ((rAssetSumCalc.netBookValue() - rAssetTrans.AmountCur) < 0 )
        {
            return checkFailed(strFmt("@GLS116209", rAssetTrans.AccountNum, rAssetStandards.AssetStandardId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@SYS78541");
        dialogReversalDate  = dialog.addFieldValue(extendedTypeStr(TransDate), rAssetTransSource.TransDate, "@GLS116514", "@GLS116987");
        if (rAssetTransSource.AssetTransType == RAssetTransType::Disposal     ||
            rAssetTransSource.AssetTransType == RAssetTransType::DisposalSale ||
            rAssetTransSource.AssetTransType == RAssetTransType::DisposalScrap)
        {
            dialogReverseForAll = dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::Yes, "@GLS116995", "@GLS116996");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reversalDate        = dialogReversalDate.value();
        this.initTransLinkReversal();
    
        if (dialogReverseForAll)
        {
            reverseForAllModels = dialogReverseForAll.value();
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    protected LedgerVoucher initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::FixedAssets_RU,
                                                     '');
        ledgerVoucher.parmReversal(true);
        ledgerVoucher.lastTransDate(transLinkReversal.getAccountingDate());
        ledgerVoucherObject = LedgerVoucherObject::newVoucher(rAssetTrans.Voucher, transLinkReversal.getAccountingDate());
        ledgerVoucherObject.parmVoucherCheck(false);
        ledgerVoucher.addVoucher(ledgerVoucherObject);
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetTrans _rAssetTrans)
    {
        ;
        rAssetTransSource = _rAssetTrans;
        rAssetTable       = RAssetTable::find(rAssetTransSource.AccountNum, true);
        rAssetParameters  = RAssetParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReversal</Name>
				<Source><![CDATA[
    protected void inventReversal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalDate</Name>
				<Source><![CDATA[
    public TransDate parmReversalDate(TransDate _reversalDate = reversalDate)
    {
        reversalDate = _reversalDate;
        return reversalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseAllModels</Name>
				<Source><![CDATA[
    public NoYes parmReverseAllModels(NoYes _reverseForAllModels = reverseForAllModels)
    {
        reverseForAllModels = _reverseForAllModels;
        return reverseForAllModels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversalProcess</Name>
				<Source><![CDATA[
    protected void reversalProcess()
    {
        if (! this.check())
                throw error("@SYS25608");
    
        this.initLedgerVoucher();
        this.inventReversal();
        this.reverseLedgerVoucher();
        this.reverseRAssetTrans();
        this.updateStatus();
        this.updateLedgerJournalTrans();
        transLinkReversal.createSourceLedgerTransLink();
        ledgerVoucher.end();
        transLinkReversal.createStornoLedgerTransLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLedgerVoucher</Name>
				<Source><![CDATA[
    protected void reverseLedgerVoucher()
    {
        LedgerUtils_RU::createLedgerTransStorno_RU(ledgerVoucherObject, rAssetTrans.getAccountingDate(), rAssetTrans.Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRAssetTrans</Name>
				<Source><![CDATA[
    protected void reverseRAssetTrans()
    {
        RAssetTrans     stornoTrans;
        ;
    
        stornoTrans.data(rAssetTrans);
        stornoTrans.TransDate            = reversalDate;
        stornoTrans.AmountCur            = -rAssetTrans.AmountCur;
        stornoTrans.AmountMST            = -rAssetTrans.AmountMST;
        stornoTrans.DepreciationBonusCost = -rAssetTrans.DepreciationBonusCost;
        stornoTrans.AttachDocumentDate   = dateNull();
        stornoTrans.AttachDocumentNumber = "";
        stornoTrans.Txt                  = "@GLS105217" + "@SYS35675" + rAssetTrans.Txt;
        stornoTrans.StornoRecId          = rAssetTrans.RecId;
        stornoTrans.insert();
        rAssetTrans.StornoRecId          = stornoTrans.RecId;
        rAssetTrans.doUpdate();
    
        transLinkReversal.createTransLink(stornoTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseScraps</Name>
				<Source><![CDATA[
    protected void reverseScraps()
    {
        InventUpd_Financial financial;
        InventUpd_Estimated estimated;
        InventMov_Scrap_RU  movement;
        RAssetScrap         rAssetScrap, rAssetScrapStorno;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        CostAmountPosted    costAmountPosted;
        ;

        if (rAssetStandards.AssetStandardId != rAssetParameters.StandardIdDefault)
            return;

        ttsbegin;
        while select forupdate rAssetScrap
            where rAssetScrap.AssetId     == rAssetTrans.AccountNum &&
                  rAssetScrap.Assembling  == NoYes::No              &&
                  rAssetScrap.Voucher     == rAssetTrans.Voucher    &&
                  rAssetScrap.TransDate   == rAssetTrans.TransDate
        join inventTransOrigin
            where inventTransOrigin.InventTransId == rAssetScrap.InventTransId
        join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                  inventTrans.StatusReceipt == StatusReceipt::Purchased &&
                  inventTrans.StatusIssue == StatusIssue::None
        {
            rAssetScrapStorno.clear();
            rAssetScrapStorno.data(rAssetScrap);
            rAssetScrapStorno.TransDate     = reversalDate;
            rAssetScrapStorno.StornoRecId   = rAssetScrap.RecId;

            rAssetScrapStorno.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

            rAssetScrapStorno.Qty           = -inventTrans.Qty;
            rAssetScrapStorno.CostAmount    = -inventTrans.costValue();
            rAssetScrapStorno.doInsert();

            movement  = InventMovement::construct(rAssetScrapStorno);
            estimated = InventUpd_Estimated::newInventMovement(movement);
            estimated.updateNow();

            InventTransOrigin::updateMarking(inventTransOrigin.RecId,
                                             InventTransOriginRAssetScrap_RU::findInventTransOriginId(rAssetScrapStorno.RecId),
                                             inventTrans.Qty,
                                             inventTrans.Voucher);
            InventTransOrigin::updateMarking(InventTransOriginRAssetScrap_RU::findInventTransOriginId(rAssetScrapStorno.RecId),
                                             inventTransOrigin.RecId,
                                             -inventTrans.Qty);

            financial = InventUpd_Financial::newPostAsset_RU(movement, ledgerVoucher);

            financial.updateNow();
            costAmountPosted = InventTrans::findTransId(rAssetScrapStorno.InventTransId).costValue();
            this.updateInventLedgerAdjust(movement, costAmountPosted - rAssetScrapStorno.CostAmount);

            movement  = null;
            financial = null;

            rAssetScrap.StornoRecId = rAssetScrapStorno.RecId;
            rAssetScrap.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
    
        try
        {
            ttsbegin;
    
            this.initTransLinkReversal();
    
            rAssetTrans     = RAssetTrans::find(rAssetTransSource.RecId, true);
            rAssetStandards = RAssetStandards::find(rAssetTrans.AccountNum, rAssetTrans.AssetStandardId, true);
            this.reversalProcess();
    
            if (reverseForAllModels)
            {
                while select forupdate rAssetStandards
                    where rAssetStandards.AssetId         == rAssetTransSource.AccountNum      &&
                          rAssetStandards.AssetStandardId != rAssetTransSource.AssetStandardId
                join forupdate rAssetTrans
                    where rAssetTrans.AccountNum      == rAssetStandards.AssetId          &&
                          rAssetTrans.AssetStandardId == rAssetStandards.AssetStandardId  &&
                          rAssetTrans.TransDate       == rAssetTransSource.TransDate      &&
                          rAssetTrans.AssetTransType  == rAssetTransSource.AssetTransType &&
                          ! rAssetTrans.StornoRecId
                {
                    this.initTransLinkReversal(rAssetTrans);
                    this.reversalProcess();
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventLedgerAdjust</Name>
				<Source><![CDATA[
    protected void updateInventLedgerAdjust(InventMovement _inventMovement,
                                            CostAmount     _costAmount)
    {
        CurrencyExchangeHelper  currencyExchHelper;
        LedgerBondClient_RU     ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

        if (_costAmount)
        {
            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }
            currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                         reversalDate);
            if (_inventMovement.mustBeBookedBalanceSheet())
            {
                ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucher.findLedgerVoucherObject(),
                        _inventMovement.postingBalanceSheet(),
                         LedgerDimensionFacade::serviceCreateLedgerDimension(_inventMovement.accountOperations(), _inventMovement.defaultDimension()),
                        CompanyInfoHelper::standardCurrency(),
                        _costAmount,
                        currencyExchHelper));
            }
            if (_inventMovement.mustBeBookedOperations())
            {
                ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucher.findLedgerVoucherObject(),
                        _inventMovement.postingOperations(),
                         LedgerDimensionFacade::serviceCreateLedgerDimension(_inventMovement.accountOperations(), _inventMovement.defaultDimension()),
                        CompanyInfoHelper::standardCurrency(),
                        -_costAmount,
                        currencyExchHelper));
            }
            if (ledgerBondClient)
            {
                if (ledgerBondClient.currentLogLength() == 2)
                {
                    ledgerBondClient.bondLastVRef2CurrentLog();
                }
                ledgerBondClient.removeCurrentLogObject();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void updateLedgerJournalTrans()
    {
        LedgerJournalTrans         ledgerJournalTrans;
        LedgerJournalTrans_RAsset  ledgerJournalTrans_RAsset;
        ;
    
        ledgerJournalTrans_RAsset.skipDatabaseLog(true);
        ledgerJournalTrans_RAsset.skipDataMethods(true);
    
        update_recordset ledgerJournalTrans_RAsset
            setting StornoRecId = rAssetTrans.StornoRecId
        join ledgerJournalTrans
            where ledgerJournalTrans.RecId     == ledgerJournalTrans_RAsset.RefRecId    &&
                  ledgerJournalTrans.Voucher   == rAssetTrans.Voucher                   &&
                  ledgerJournalTrans.TransDate == rAssetTrans.getAccountingDate()       &&
                  ledgerJournalTrans.Invisible == NoYes::No                             ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        RAssetTrans      rassetTransLend,
                         rassetTransLendRet;
        RAssetStandards  rassetStandardsLocal;
        RAssetSumCalc    assetSumTrans;
        ;

        assetSumTrans   = RAssetSumCalc_Trans::newAssetPeriod(rAssetTrans.AccountNum,
                                                              rAssetStandards.AssetStandardId);
        while select rassetStandardsLocal
            where rassetStandardsLocal.AssetId == rAssetTable.AccountNum
        {
            assetSumTrans.parmRangeAssetStandard(rassetStandardsLocal.AssetStandardId);

            if (assetSumTrans.netBookValue() > rassetStandardsLocal.ScrapValue)
                break;
        }

        if (rassetStandardsLocal)
        {
            select firstonly TransDate from rassetTransLend
                order by TransDate desc
                where rassetTransLend.AccountNum     == rAssetTable.AccountNum   &&
                      rassetTransLend.AssetTransType == RAssetTransType::Lending &&
                      ! rassetTransLend.StornoRecId;

            select firstonly TransDate from rassetTransLendRet
                order by TransDate desc
                where rassetTransLendRet.AccountNum     == rAssetTable.AccountNum      &&
                      rassetTransLendRet.AssetTransType == RAssetTransType::LendingRet &&
                      ! rassetTransLendRet.StornoRecId;

            if (rassetTransLendRet.TransDate >= rassetTransLend.TransDate)
            {
                rAssetTable.Status = RAssetSuspend::findSuspend(rAssetTrans.AccountNum).RecId ?
                                     RAssetStatus::Suspended :
                                     RAssetStatus::Open;
            }
            else
            {
                rAssetTable.Status = RAssetStatus::Lended;
            }
        }
        else
        {
            rAssetTable.Status = RAssetStatus::Closed;
        }
        rAssetTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (dialogReversalDate.value() < rAssetTransSource.TransDate)
            return checkFailed("@GLS116986");
    
        if (!transLinkReversal.validate())
            return false;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetTransactionReversal construct(RAssetTrans _rAssetTrans)
    {
        ;

        switch (_rAssetTrans.PostingType)
        {
            case RAssetPostingType::PartialTakeDown:
                return new RAssetTransactionReversal_PartTakeDown();

            case RAssetPostingType::CompanyIssue:
                return new RAssetTransactionReversal_CompanyIssue();

            case RAssetPostingType::CompanyReceipt:
                return new RAssetTransactionReversal_CompanyReceipt();
        }

        switch (_rAssetTrans.AssetTransType)
        {
            case RAssetTransType::Acquisition:
                return new RAssetTransactionReversal_Acquisition();

            case RAssetTransType::Lending:
                return new RAssetTransactionReversal_Lending();

            case RAssetTransType::LendingRet:
                return new RAssetTransactionReversal_LendingRet();

            case RAssetTransType::Disposal:
                return new RAssetTransactionReversal_Disposal();

            case RAssetTransType::DisposalSale:
                return new RAssetTransactionReversal_DisposalSale();

            case RAssetTransType::DisposalScrap:
                return new RAssetTransactionReversal_DisposalScrap();

            case RAssetTransType::Revaluation:
                return new RAssetTransactionReversal_Revaluation();
        }

        return new RAssetTransactionReversal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetTrans               rAssetTrans         = _args.record();
        RAssetTransactionReversal transactionReversal = RAssetTransactionReversal::construct(rAssetTrans);
        ;

        transactionReversal.initValue(rAssetTrans);
        if (transactionReversal.prompt())
        {
            transactionReversal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransLinkReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of the <c>TransLinkReversal_RU</c> class.
    /// </summary>
    /// <param name="_rAssetTrans">
    /// The <c>RAssetTrans</c> table record; optional.
    /// </param>
    protected void initTransLinkReversal(RAssetTrans _rAssetTrans = rAssetTransSource)
    {
        if (!transLinkReversal || transLinkReversal.parmSourceTrans() != _rAssetTrans)
        {
            transLinkReversal = TransLinkReversal_RU::construct(_rAssetTrans);
            transLinkReversal.setReversalDates(reversalDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting types.
    /// </summary>
    /// <returns>
    /// The container with ledger posting types.
    /// </returns>
    protected container ledgerPostingTypes()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>