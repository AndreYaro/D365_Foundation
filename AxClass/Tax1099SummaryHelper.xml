<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099SummaryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099SummaryHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustTax1099Summary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the <c>Tax1099Summary</c> table record.
    /// </summary>
    /// <param name = "_tax1099Summary">
    ///     A <c>Tax1099Summary</c> table buffer.
    /// </param>
    /// <param name = "_vendSettlementTax1099">
    ///     A <c>VendSettlementTax1099</c> table buffer.
    /// </param>
    /// <param name = "_tax1099Fields">
    ///     A <c>Tax1099Fields</c> table buffer.
    /// </param>
    protected static void adjustTax1099Summary(Tax1099Summary _tax1099Summary, VendSettlementTax1099 _vendSettlementTax1099, Tax1099Fields _tax1099Fields)
    {
        _tax1099Summary.SettleTax1099Amount += _vendSettlementTax1099.SettleTax1099Amount;
        _tax1099Summary.irsReportable = _tax1099Summary.SettleTax1099Amount >= _tax1099Fields.Tax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTax1099Summary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>Tax1099Summary</c> table record.
    /// </summary>
    /// <param name = "_tax1099Summary">
    ///     A <c>Tax1099Summary</c> table buffer.
    /// </param>
    /// <param name = "_vendSettlementTax1099">
    ///     A <c>VendSettlementTax1099</c> table buffer.
    /// </param>
    /// <param name = "_tax1099Fields">
    ///     A <c>Tax1099Fields</c> table buffer.
    /// </param>
    protected static void initializeTax1099Summary(Tax1099Summary _tax1099Summary, VendSettlementTax1099 _vendSettlementTax1099, Tax1099Fields _tax1099Fields)
    {
        _tax1099Summary.VendAccount = _vendSettlementTax1099.VendAccount;
        _tax1099Summary.TransDate = _vendSettlementTax1099.TransDate;
        _tax1099Summary.VendInvoiceId = _vendSettlementTax1099.VendInvoiceId;
        _tax1099Summary.InventTransId = _vendSettlementTax1099.InventTransId;
        _tax1099Summary.SettleTax1099Amount = _vendSettlementTax1099.SettleTax1099Amount;
        _tax1099Summary.Tax1099Fields = _vendSettlementTax1099.Tax1099Fields;
        _tax1099Summary.Tax1099State = _vendSettlementTax1099.Tax1099State;
        _tax1099Summary.irsReportable = _tax1099Summary.SettleTax1099Amount >= _tax1099Fields.Tax1099Amount;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            _tax1099Summary.Tax1099StateTaxID = _vendSettlementTax1099.Tax1099StateTaxID;
            _tax1099Summary.Tax1099StateTaxWithheld = _vendSettlementTax1099.Tax1099StateTaxWithheld;
            _tax1099Summary.Tax1099PropertyOrServices = _vendSettlementTax1099.Tax1099PropertyOrServices;
            _tax1099Summary.Tax1099BuyersTax = _vendSettlementTax1099.Tax1099BuyersTax;
            _tax1099Summary.Tax1099AddressOrLegalDesc = _vendSettlementTax1099.Tax1099AddressOrLegalDesc;
            _tax1099Summary.Tax1099DateOfClosing = _vendSettlementTax1099.Tax1099DateOfClosing;
            _tax1099Summary.Tax1099TradeOrBusiness = _vendSettlementTax1099.Tax1099TradeOrBusiness;
            _tax1099Summary.Tax1099TaxYear = _vendSettlementTax1099.Tax1099TaxYear;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxSummaryFromVendSettlementTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>Tax1099Summary</c> table with summary data.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date for the data selection that was provided by the user.
    /// </param>
    /// <param name="_toDate">
    /// The end date for the data selection that was provided by the user.
    /// </param>
    /// <remarks>
    /// All data except for 1099-S records are summarized by vendor and 1099 box.The <c>Tax1099Summary</c> table
    /// is loaded with summary data from the <c>VendSettlementTax1099</c> table. 1099-G data is additionally
    /// summarized based on the tax year. 1099-S data is not summarized, which essentially means a summary record per invoice line.
    /// </remarks>
    public static void populateTaxSummaryFromVendSettlementTax(TransDate _fromDate, TransDate _toDate)
    {
        VendSettlementTax1099 vendSettlementTax1099;
        Tax1099Summary localTax1099Summary;
        VendInvoiceAccount lastAcct;
        RefRecId last1099BoxRecId;
        Tax1099TaxYear lastTax1099Year;
        Tax1099Type lasttax1099Type;
        Tax1099Fields tax1099Fields;
        VendTable vendTable;
        Tax1099StateCode lastStateCode;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && Tax1099SummarySetBasedFlight::instance().isEnabled())
        {
            Tax1099SummaryHelper::populateTaxSummaryFromVendSettlementTaxV2(_fromDate, _toDate);
            return;
        }

        delete_from localTax1099Summary;

        ttsbegin;

        select forupdate VendAccount, TransDate, VendInvoiceId, InventTransId, SettleTax1099Amount,
            Tax1099Fields, Tax1099State, irsReportable
            from localTax1099Summary;

        while select * from vendSettlementTax1099
            order by VendAccount, Tax1099Fields, Tax1099TaxYear, Tax1099State
            where vendSettlementTax1099.Tax1099Fields != 0
                && (vendSettlementTax1099.TransDate >= _fromDate
                && vendSettlementTax1099.TransDate <= _toDate)
            join Tax1099Reports, AccountNum
                from vendTable
                where vendTable.Tax1099Reports == NoYes::Yes
                    && vendTable.AccountNum == vendSettlementTax1099.VendAccount
            join Tax1099Amount, Tax1099Box, Tax1099Type
                from tax1099Fields
                where tax1099Fields.RecId == vendSettlementTax1099.Tax1099Fields
        {
            if (vendSettlementTax1099.VendAccount == lastAcct
                && (vendSettlementTax1099.Tax1099State == lastStateCode)
                && tax1099Fields.RecId == last1099BoxRecId
                && (tax1099Fields.Tax1099Type != Tax1099Type::F1099G
                    || (lastTax1099Type == Tax1099Type::F1099G
                        && vendSettlementTax1099.Tax1099TaxYear == lastTax1099Year))
                        && tax1099Fields.Tax1099Type != Tax1099Type::F1099S)
            {
                Tax1099SummaryHelper::adjustTax1099Summary(localTax1099Summary, vendSettlementTax1099, tax1099Fields);
                localTax1099Summary.update();
            }
            else
            {
                Tax1099SummaryHelper::initializeTax1099Summary(localTax1099Summary, vendSettlementTax1099, tax1099Fields);
                localTax1099Summary.insert();
            }

            lastAcct = vendSettlementTax1099.VendAccount;
            lastStateCode = vendSettlementTax1099.Tax1099State;
            last1099BoxRecId = vendSettlementTax1099.Tax1099Fields;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                && tax1099Fields.Tax1099Type == Tax1099Type::F1099G)
            {
                lastTax1099Year = vendSettlementTax1099.Tax1099TaxYear;
                lastTax1099Type = tax1099Fields.Tax1099Type;
            }
        }

        update_recordset localTax1099Summary
            setting SettleTax1099Amount = 0
                where localTax1099Summary.SettleTax1099Amount < 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxSummaryFromVendSettlementTaxV2</Name>
				<Source><![CDATA[
    private static void populateTaxSummaryFromVendSettlementTaxV2(TransDate _fromDate, TransDate _toDate)
    {
        VendSettlementTax1099 vendSettlementTax1099;
        Tax1099Summary localTax1099Summary;
        Tax1099Fields tax1099Fields;
        VendTable vendTable;

        delete_from localTax1099Summary;
        localTax1099Summary.skipDataMethods(true);

        insert_recordset localTax1099Summary (VendAccount, Tax1099Fields, Tax1099State, SettleTax1099Amount)
            select VendAccount, Tax1099Fields, Tax1099State, sum(SettleTax1099Amount) from vendSettlementTax1099
                order by VendAccount, Tax1099Fields, Tax1099State group by VendAccount, Tax1099Fields, Tax1099State
                where vendSettlementTax1099.TransDate >= _fromDate
                    && vendSettlementTax1099.TransDate <= _toDate
            join vendTable
                where vendTable.Tax1099Reports == NoYes::Yes
                    && vendTable.AccountNum == vendSettlementTax1099.VendAccount
            join tax1099Fields
                where tax1099Fields.RecId == vendSettlementTax1099.Tax1099Fields;

        update_recordset localTax1099Summary
            setting
                TransDate = vendSettlementTax1099.TransDate,
                VendInvoiceId = vendSettlementTax1099.VendInvoiceId,
                InventTransId = vendSettlementTax1099.InventTransId
            join firstonly TransDate, VendInvoiceId, InventTransId from vendSettlementTax1099
                where localTax1099Summary.VendAccount == vendSettlementTax1099.VendAccount
                    && localTax1099Summary.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                    && localTax1099Summary.Tax1099State == vendSettlementTax1099.Tax1099State;

        update_recordset localTax1099Summary
            setting IRSReportable = localTax1099Summary.SettleTax1099Amount >= tax1099Fields.Tax1099Amount
                join tax1099Fields
                    where tax1099Fields.RecId == localTax1099Summary.Tax1099Fields;

        update_recordset localTax1099Summary
            setting SettleTax1099Amount = 0
                where localTax1099Summary.SettleTax1099Amount < 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>