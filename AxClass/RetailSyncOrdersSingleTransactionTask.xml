<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSyncOrdersSingleTransactionTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSyncOrdersSingleTransactionTask</c> class schedules the execution of the "Synchronize orders" job for a single transaction.
/// </summary>
internal class RetailSyncOrdersSingleTransactionTask
{
    private RetailTransactionTable transactionTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules a "Synchronize orders" task to synchronize the record set in <c>_args</c> variable.
    /// </summary>
    /// <param name = "_args">The argument for the execution.</param>
    public static void main(Args _args)
    {
        RetailTransactionTable transactionTable = _args.record();

        RetailSyncOrdersSingleTransactionTask task = new RetailSyncOrdersSingleTransactionTask();
        task.transactionTable = _args.record();

        task.validate();

        task.scheduleTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the transaction can be synchronized.
    /// </summary>
    private void validate()
    {
        if (!RetailTransactionAsyncOrdersHelper::isAsyncTransactionType(transactionTable.type))
        {
            throw error("@Retail:SynchronizeOrdersJobTransactionTypeError");
        }
        
        RetailTransactionOrderStatus orderStatus = RetailTransactionOrderStatus::find(transactionTable.Channel, transactionTable.store, transactionTable.terminal, transactionTable.transactionId, true);

        // If the transaction is already synchronized successfully, we can't synchronize it again.
        if (orderStatus.Status == RetailTransactionOrderStatusType::Succeeded)
        {
            throw error("@Retail:SynchronizeOrdersJobTransactionAlreadySynchronized");
        }
        // If the transaction is being edited, we should ask for confirmation before synchronizing.
        else if (orderStatus.Status == RetailTransactionOrderStatusType::Editing)
        {
            DialogButton yesNoConfirm = Box::yesNo("@RetailAudit:TransactionCurrentlyBeingEditConfirmToContinue", DialogButton::No);

            if (yesNoConfirm == DialogButton::Yes)
            {
                ttsbegin;
                orderStatus.Status = RetailTransactionOrderStatusType::None;
                orderStatus.update();
                ttscommit;
            }
            else
            {
                throw warning("@SYS319214"); // Operation has been cancelled.
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules an execution of <c>RetailSyncOrdersSchedulerTask</c> passing just the current transaction as argument.
    /// </summary>
    private void scheduleTask()
    {
        RetailSyncOrdersSchedulerTask schedulerTask = new RetailSyncOrdersSchedulerTask();

        Array listOfTransactionRecIds = new Array(Types::Int64);
        listOfTransactionRecIds.value(1, transactionTable.RecId);

        schedulerTask.parmPackedTransactionRecIdList(listOfTransactionRecIds.pack());
        schedulerTask.batchInfo().parmBatchExecute(true);
        schedulerTask.batchInfo().doBatch();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>