<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantsFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class EcoResProductVariantsFormHelper
{
    FormRun                             formRun;
    EcoResProductMaster                 ecoResProductMaster;
    RefRecId                            productDimensionGroup;
    EcoResDistinctProductVariantRecId   defaultConfigurationVariantRecId;
    IdentifierName                      productImageControlName;
    boolean                             isRetailKit;
    boolean                             isOpenedForSingleProduct;

    private Map                         inventDimFieldIdProductVariantDimensionFieldId = new Map(Types::Integer, Types::Integer);

    #define.productVariantFormDataSourceName('EcoResDistinctProductVariant')
    #define.InitialDisplayProductNumber('1')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventDimensionMetadata</Name>
				<Source><![CDATA[
    public void addInventDimensionMetadata(FieldId _inventDimFieldId, FieldId _productVariantDimensionFieldId)
    {
        inventDimFieldIdProductVariantDimensionFieldId.insert(_inventDimFieldId, _productVariantDimensionFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the internal cache.
    /// </summary>
    public void clearCache()
    {
        productDimensionGroup = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active product variant dimension values for the current product variant.
    /// </summary>
    /// <returns>
    /// A container that contains the active product variant dimension values for the current product
    /// variant.
    /// </returns>
    public container getProductDimensionValues()
    {
        container           dimensions;
        int                 dsIndex;
        int                 productDimensionAttributeFieldId = fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute);

        int dsCount = formRun.dataSourceCount();

        for (dsIndex = 1; dsIndex <= dsCount; ++dsIndex)
        {
            FormDataSource productVariantDimTableDS = formRun.dataSource(dsIndex);

            if (this.isVariantDimensionValueDatasource(productVariantDimTableDS))
            {
                TableId dimensionTableId = EcoResProductDimensionAttribute::variantDimensionTableId2DimensionTableId(productVariantDimTableDS.table());
                FieldId dimFieldId = EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(dimensionTableId);

                if (this.productDimensionActive(dimFieldId))
                {
                    RefRecId productDimensionAttributeRecId = productVariantDimTableDS.cursor().(productDimensionAttributeFieldId);
                    RefRecId dimensionTableRecId = productVariantDimTableDS.cursor().(EcoResProductVariantDimensionValue::dimensionForeignKeyFieldId(productVariantDimTableDS.table()));
                    dimensions += [[productDimensionAttributeRecId, dimensionTableRecId]];
                }
            }
        }

        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariantRecIdForDefaultConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the product variant that contains the default configuration for current product master
    /// </summary>
    private void getVariantRecIdForDefaultConfiguration()
    {
        defaultConfigurationVariantRecId = EcoResProductVariantExistMgr::newFromProductMaster(ecoResProductMaster.RecId).findVariantWithDefaultConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleFormStateForVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the form control states that are based on the specified distinct product variant.
    /// </summary>
    /// <param name="_distinctProductVariantRecId">
    ///    The <c>EcoResDistinctProductVariantRecId</c> value.
    /// </param>
    public void handleFormStateForVariant(EcoResDistinctProductVariantRecId _distinctProductVariantRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleProductDimensionJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the functionality for the product dimensions.
    /// </summary>
    /// <param name="_productDimensionAttributeRecId">
    ///    The ID of an <c>EcoResProductDimensionAttribute</c> record which specifies the attribute of a
    ///    product variant dimension for which the functionality will execute.
    /// </param>
    public void handleProductDimensionJumpRef(RefRecId _productDimensionAttributeRecId)
    {
        EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttributeRecId);
        FieldId dimFieldId = ecoResProductDimensionAttribute.getInventDimFieldId();
        TableId dimTableId = ecoResProductDimensionAttribute.getDimensionTableId();

        if (dimFieldId && this.productDimensionActive(dimFieldId))
        {
            Args args = new Args();
            args.caller(formRun);
            args.record(ecoResProductMaster);
            args.lookupTable(dimTableId);

            MenuFunction::runClient(menuitemDisplayStr(EcoResProductMasterDimensionAction), MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product variant buffer from the current product master.
    /// </summary>
    /// <param name="_ecoResDistinctProductVariant">
    /// A <c>EcoResDistinctProductVariant</c> buffer.
    /// </param>
    public void initFromProductMaster(EcoResDistinctProductVariant _ecoResDistinctProductVariant)
    {
        _ecoResDistinctProductVariant.ProductType           = ecoResProductMaster.ProductType;
        _ecoResDistinctProductVariant.ProductMaster         = ecoResProductMaster.RecId;
        _ecoResDistinctProductVariant.DisplayProductNumber  = #InitialDisplayProductNumber;
        _ecoResDistinctProductVariant.PdsCWProduct          = ecoResProductMaster.PdsCWProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionsDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product dimensions data sources.
    /// </summary>
    /// <remarks>
    /// This method initializes product dimensions data sources, such as the
    /// <c>EcoResProductVariantConfiguration</c>, <c>EcoResProductVariantSize</c>, and
    /// <c>EcoResProductVariantColor</c> tables.This method adds a link to the
    /// <c>EcoResDistinctProductVariant</c> table and a range for the <c>ProductDimensionAttribute</c>
    /// field.
    /// </remarks>
    public void initProductDimensionsDatasources()
    {
        int                     dsIndex;
        int                     productDimensionAttributeFieldId = fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute);

        this.updateEcoResProductVariantDimensions();

        int dsCount = formRun.dataSourceCount();
        for (dsIndex = 1; dsIndex <= dsCount; ++dsIndex)
        {
            FormDataSource productVariantDimTableDS = formRun.dataSource(dsIndex);
            if (this.isVariantDimensionValueDatasource(productVariantDimTableDS))
            {
                TableId dimensionTableId = EcoResProductDimensionAttribute::variantDimensionTableId2DimensionTableId(productVariantDimTableDS.table());
                FieldId dimFieldId = EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(dimensionTableId);
                QueryBuildDataSource qbds = productVariantDimTableDS.queryBuildDataSource();
                str rangeValue = queryValue(EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(dimFieldId));
                QueryBuildRange qbr = qbds.addRange(productDimensionAttributeFieldId);
                qbr.status(RangeStatus::Hidden);
                qbr.value(rangeValue);

                if (!isOpenedForSingleProduct)
                {
                    productVariantDimTableDS.linkType(FormLinkType::OuterJoin);
                    productVariantDimTableDS.allowCreate(false);
                    productVariantDimTableDS.allowEdit(false);
                }
                else if (this.productDimensionActive(dimFieldId))
                {
                    productVariantDimTableDS.linkType(FormLinkType::InnerJoin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEcoResProductVariantDimensions</Name>
				<Source><![CDATA[
    private void updateEcoResProductVariantDimensions()
    {
        if (RetailUpdateEcoResProductVariantDisplayOrder::needUpdate())
        {
            RetailUpdateEcoResProductVariantDisplayOrder::scheduleRun();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductVariantDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current product variant data source.
    /// </summary>
    /// <param name="_qbdsEcoResDistinctProductVariant">
    /// The <c>QueryBuildDataSource</c> instance for the current product variant.
    /// </param>
    public void initProductVariantDataSource(QueryBuildDataSource _qbdsEcoResDistinctProductVariant)
    {
        if (isOpenedForSingleProduct)
        {
            _qbdsEcoResDistinctProductVariant.clearDynalinks();

            QueryBuildRange qbr = _qbdsEcoResDistinctProductVariant.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster));
            qbr.value(queryValue(ecoResProductMaster.RecId));
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productVariantDataSourceActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles active method on the product variant data source.
    /// </summary>
    /// <param name="_qbdsEcoResDistinctProductVariant">
    /// The <c>QueryBuildDataSource</c> instance for the current product variant.
    /// </param>
    public void productVariantDataSourceActive(EcoResDistinctProductVariant _productVariant)
    {
        this.parmEcoResProductMaster(EcoResProductMaster::find(_productVariant.ProductMaster));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultConfigurationVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the specified <c>EcoResDistinctProductVariantRecId</c> value is equal to the
    ///    distinct product variant that contains the default configuration for current product master record.
    /// </summary>
    /// <param name="_distinctProductVariantRecId">
    ///    The <c>EcoResDistinctProductVariantRecId</c> value.
    /// </param>
    /// <returns>
    ///    true if the specified <c>EcoResDistinctProductVariantRecId</c> value is equal to the distinct
    ///    product variant that contains the default configuration for current product master record;
    ///    otherwise, false.
    /// </returns>
    public boolean isDefaultConfigurationVariant(EcoResDistinctProductVariantRecId _distinctProductVariantRecId)
    {
        boolean ret = false;

        if (defaultConfigurationVariantRecId != 0 && _distinctProductVariantRecId == defaultConfigurationVariantRecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionDatasourceActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the current form data source represents an active product dimension
    /// </summary>
    /// <param name="_formDataSource">
    /// The <c>FormDataSource</c> instance.
    /// </param>
    /// <returns>
    /// true if the current form data source represents an active product dimension; otherwise, false.
    /// </returns>
    public boolean isDimensionDatasourceActive(FormDataSource _formDataSource)
    {
        return this.isDimensionAttributeTableActive(_formDataSource.table());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionAttributeTableActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the provided dimension attribute table represents an active product dimension
    /// </summary>
    /// <param name="_variantDimensionTableId">
    /// The ID of the dimension attribute value table.
    /// </param>
    /// <returns>
    /// true if the current form data source represents an active product dimension; otherwise, false.
    /// </returns>
    public boolean isDimensionAttributeTableActive(TableId _variantDimensionTableId)
    {
        FieldId dimFieldId = EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(
            EcoResProductDimensionAttribute::variantDimensionTableId2DimensionTableId(_variantDimensionTableId));

        return this.productDimensionActive(dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the new product variant is to be created.
    /// </summary>
    /// <returns>
    /// true if the new product variant is to be created; otherwise, false.
    /// </returns>
    public boolean isNewProductVariant()
    {
        FormDataSource fds = formRun.dataSource(#productVariantFormDataSourceName);

        return fds.cursor().RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVariantDimensionValueDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the specified <c>FormDataSource</c> value belongs to distinct product variant
    ///    dimension value tables.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The specified <c>FormDataSource</c> value.
    /// </param>
    /// <returns>
    ///    true if the specified <c>FormDataSource</c> value belongs to distinct product variant dimension
    ///    value tables; otherwise, false.
    /// </returns>
    public boolean isVariantDimensionValueDatasource(FormDataSource _formDataSource)
    {
        return  _formDataSource.cursor() is EcoResProductVariantDimensionValue
                && !_formDataSource.isBaseDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a title for a product master for which a variants form is opened.
    /// </summary>
    /// <returns>
    /// The title of a parent product master record.
    /// </returns>
    public EcoResProductTitle parentTitle()
    {
        return this.parmEcoResProductMaster().title();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResProductMaster</Name>
				<Source><![CDATA[
    public EcoResProductMaster parmEcoResProductMaster(EcoResProductMaster _ecoResProductMaster = ecoResProductMaster)
    {
        if (!prmisDefault(_ecoResProductMaster) && _ecoResProductMaster.RecId != ecoResProductMaster.RecId)
        {
            ecoResProductMaster = _ecoResProductMaster;
            this.clearCache();
            this.getVariantRecIdForDefaultConfiguration();
        }

        return ecoResProductMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        if (!prmisDefault(_formRun))
        {
            formRun = _formRun;
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRetailKit</Name>
				<Source><![CDATA[
    public boolean parmIsRetailKit(boolean _isRetailKit = isRetailKit)
    {
        isRetailKit = _isRetailKit;

        return isRetailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOpenedForSingleProduct</Name>
				<Source><![CDATA[
    public boolean parmIsOpenedForSingleProduct(boolean _isOpenedForSingleProduct = isOpenedForSingleProduct)
    {
        isOpenedForSingleProduct = _isOpenedForSingleProduct;
        return isOpenedForSingleProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a product dimension is active.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The ID of a product dimension.
    /// </param>
    /// <returns>
    ///    true if a dimension is active; otherwise, false
    /// </returns>
    public boolean productDimensionActive(FieldId _dimFieldId)
    {
        return EcoResProductDimGroupSetup::newDimensionGroup(this.productDimensionGroup()).getFieldSetup(_dimFieldId).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DisplayOrder value of the dimension specified by _dimFieldId in the product dimension group.
    /// </summary>
    /// <param name="_dimFieldId">Field id of the dimension.</param>
    /// <returns>The DisplayOrder value of the dimension in the product dimension group.</returns>
    public real productDimensionDisplayOrder(FieldId _dimFieldId)
    {
        EcoResProductDimensionGroupFldSetup ecoResProductDimensionGroupFldSetup = EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(this.productDimensionGroup(), _dimFieldId);

        return ecoResProductDimensionGroupFldSetup.DisplayOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimFromDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventDim</c> from dimensions data sources.
    /// </summary>
    /// <param name="_form">A product variant related form.</param>
    /// <returns>An inventory dimensions instance.</returns>
    public InventDim createInventDimFromDataSources(FormRun _form)
    {
        InventDim inventDim;

        EcoResProductDimensionDataModel ecoResProductDimensionDataModel = EcoResProductDimensionDataModel::getInstance();

        var productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension productDimension = productDims.current();
            
            FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
            FormDataSource productVariantDimension_ds = _form.findFirstFormDataSource(ecoResProductDimensionDataModel.inventDimFieldId2VariantDimensionTableId(inventDimFieldId));

            if (!inventDimFieldIdProductVariantDimensionFieldId.exists(inventDimFieldId)
                || !productVariantDimension_ds)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            FieldId productVariantInventDimFieldId = inventDimFieldIdProductVariantDimensionFieldId.lookup(inventDimFieldId);

            Common productVariantTable = productVariantDimension_ds.cursor();

            RefRecId dimRecordId = productVariantTable.(productVariantInventDimFieldId);
            
            inventDim.(inventDimFieldId) = productDimension.retrieveDimensionNaturalKey(dimRecordId);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionVariantTableIdIsActiveForRetailMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a map with product dimensions and their calculated status for retail (whether supported by retail and active).
    /// </summary>
    /// <returns>A map with product dimensions and their retail activeness status.</returns>
    public Map dimensionVariantTableIdIsActiveForRetailMap()
    {
        EcoResProductDimensionDataModel ecoResProductDimensionDataModel = EcoResProductDimensionDataModel::getInstance();
        Map dimensionVariantTableIdIsActiveForRetailMap = new Map(Types::Integer, Types::Enum);
        
        var productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while(productDims.moveNext())
        {
            InventProductDimension productDimension = productDims.current();

            dimensionVariantTableIdIsActiveForRetailMap.insert(
                ecoResProductDimensionDataModel.inventDimFieldId2VariantDimensionTableId(productDimension.parmInventDimFieldId()),
                productDimension.isRetailSupported() && productDimension.isActiveForProductMaster(this.parmEcoResProductMaster().RecId));
        }

        return dimensionVariantTableIdIsActiveForRetailMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSupportedVariantDimentsionBoundControlsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates child controls visibility based on their bound dimension variant data source table id and status for retail, calculated as supported by retail and active.
    /// </summary>
    /// <param name = "_controlsTab">A parent form tab control.</param>
    /// <param name = "_dimensionVariantTableIdIsActiveForRetailMap">A map with product dimensions and their retail activeness status.</param>
    public void updateRetailSupportedVariantDimentsionBoundControlsVisibility(FormTabPageControl _controlsTab, Map _dimensionVariantTableIdIsActiveForRetailMap)
    {
        for(int controlIndex = 1; controlIndex <= _controlsTab.controlCount(); controlIndex++)
        {
            FormControl dimensionRetailWeightControl = _controlsTab.controlNum(controlIndex);

            if (!dimensionRetailWeightControl.dataSourceObject())
            {
                continue;
            }

            TableId controlDataSourceVariantTableId = dimensionRetailWeightControl.dataSourceObject().table();

            if (_dimensionVariantTableIdIsActiveForRetailMap.exists(controlDataSourceVariantTableId))
            {
                boolean dimensionIsActive = _dimensionVariantTableIdIsActiveForRetailMap.lookup(controlDataSourceVariantTableId);
                dimensionRetailWeightControl.visible(dimensionIsActive);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionGroup</Name>
				<Source><![CDATA[
    private RefRecId productDimensionGroup()
    {
        if (!productDimensionGroup)
        {
            productDimensionGroup = EcoResProductDimensionGroupProduct::findByProduct(ecoResProductMaster.RecId).ProductDimensionGroup;
        }
        return productDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductDimensionsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets visibility of controls for product dimension values, depending on the active state of a
    ///    product dimension.
    /// </summary>
    public void setProductDimensionsVisible()
    {
        int                     dsIndex;

        if (isOpenedForSingleProduct)
        {
            //update dimension datasources visibility
            int dsCount = formRun.dataSourceCount();
            for (dsIndex = 1; dsIndex <= dsCount; ++dsIndex)
            {
                FormDataSource productVariantDimTableDS = formRun.dataSource(dsIndex);
                if (this.isVariantDimensionValueDatasource(productVariantDimTableDS))
                {
                    TableId dimensionTableId = EcoResProductDimensionAttribute::variantDimensionTableId2DimensionTableId(productVariantDimTableDS.table());
                    FieldId dimFieldId = EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(dimensionTableId);
                    boolean dimensionActive = this.productDimensionActive(dimFieldId);
                    productVariantDimTableDS.object(
                    EcoResProductVariantDimensionValue::dimensionForeignKeyFieldId(productVariantDimTableDS.table())).visible(dimensionActive);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the new product variant can be created.
    /// </summary>
    /// <returns>
    /// true if the new product variant can be created; otherwise, false.
    /// </returns>
    public boolean validateWriteProductVariant()
    {
        boolean     ret = true;

        if (this.isNewProductVariant())
        {
            //loop all data sources and validate dimensions DS
            container dimensions = this.getProductDimensionValues();

            //check for variant existence only if previous validation succeeded
            ret = EcoResProductVariantManager::checkNotExistDistinctProductVariant(ecoResProductMaster.RecId, dimensions);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance and initializes it with a <c>FormRun</c> object.
    /// </summary>
    /// <param name="_formRun">
    ///    A value that specifies a <c>FormRun</c> object for which to create the instance.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>EcoResProductVariantsFormHelper</c> class.
    /// </returns>
    public static EcoResProductVariantsFormHelper newFromFormRun(FormRun _formRun)
    {
        EcoResProductVariantsFormHelper productVariantsFormHelper;

        switch (_formRun.name())
        {
            case formStr(EcoResProductVariants):
                productVariantsFormHelper = EcoResProductVariantsSystemHelper::newFromFormRun(_formRun);
            break;

            case formStr(EcoResProductVariantsPerCompany):
                productVariantsFormHelper = EcoResProductVariantsCompanyHelper::newFromFormRun(_formRun);
            break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return productVariantsFormHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>