<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanJobPickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanKanbanJobPickList</c> class processes kanban picking list events.
/// </summary>
public class ReqEventProcessKanbanJobPickList extends ReqEventProcessKanban implements BatchRetryable
{
    KanbanJobPickingList   kanbanJobPickingList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowReserveAvailableOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines if this class should try to physically reserve on hand quantity on behalf of the event movement.
    /// </summary>
    /// <returns>
    ///    true if the reservation is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Unlike sales or production BOM lines, kanban picking list lines do not have a 'reservation' setting.
    ///    Instead the use of existing on hand inventory is controlled by the kanban rule.
    /// </remarks>
    protected boolean allowReserveAvailableOnHand()
    {
        return this.canReduceInventQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table buffer on which the class operates.
    /// </summary>
    /// <returns>
    ///    A <c>Common</c> table buffer.
    /// </returns>
    protected Common buffer()
    {
        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description for the class.
    /// </summary>
    /// <returns>
    ///    A description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS4000037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the due date and the time of the event
    /// </summary>
    /// <returns>
    ///    A <c>TransDateTime</c> temporary value.
    /// </returns>
    protected TransDateTime dueDateTime()
    {
        return kanbanJobPickingList.MaterialDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the event origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    protected boolean eventExists()
    {
        return    kanbanJobPickingList
               && KanbanJobPickingList::exist(kanbanJobPickingList.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNotProcessedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs any action required for events that are handled, but not processed now.
    /// </summary>
    protected void handleNotProcessedEvent()
    {
        this.updateKanbanJobPickingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string identification for the buffer.
    /// </summary>
    /// <returns>
    ///    A string value that identifies the buffer.
    /// </returns>
    protected str id()
    {
        return strFmt("@SYS319616",kanbanJobPickingList.ItemId,kanbanJobPickingList.kanban().KanbanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the event quantity to process.
    /// </summary>
    protected void initInventQty()
    {
        if (this.inventMovement())
        {
            super();
        }
        else
        {
            if (!initInventQty)
            {
                inventQty     = max(0,kanbanJobPickingList.Quantity);
                inventQty     = inventQty < kanbanRuleEvent.MinimumEventQuantity ? 0 : inventQty;
                initInventQty = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQtyKanbanRuleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the quantity that is used to look up a kanban rule.
    /// </summary>
    protected void initInventQtyKanbanRuleLookup()
    {
        if (this.inventMovement())
        {
            super();
        }
        else
        {
            if (!initInventQtyKanbanRuleLookup)
            {
                inventQtyKanbanRuleLookup     = max(0,kanbanJobPickingList.Quantity);
                initInventQtyKanbanRuleLookup = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceRequirementParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    ///
    protected boolean initSourceRequirementParm()
    {
        Kanban                      kanban;
        KanbanSourceRequirement     kanbanSourceRequirement;
        RefTableId                  rootTableId;
        RefRecId                    rootRecId;

        if (!kanbanSourceRequirementParm)
        {
            kanban = kanbanJobPickingList.kanban();
            if (kanban)
            {
                kanbanSourceRequirement = KanbanSourceRequirement::findKanban(kanban.RecId);
                rootTableId             = kanbanSourceRequirement ? kanbanSourceRequirement.RootSourceRequirementTableId : tableNum(Kanban);
                rootRecId               = kanbanSourceRequirement ? kanbanSourceRequirement.RootSourceRequirementRecId : kanban.RecId;

                kanbanSourceRequirementParm = KanbanSourceRequirementParm::newStandard(
                                                                            kanbanJobPickingList,
                                                                            tableNum(Kanban),
                                                                            kanban.RecId,
                                                                            rootTableId,
                                                                            rootRecId);
            }
        }

        return    kanbanSourceRequirementParm
               && kanbanSourceRequirementParm.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    ///    A <c>InventDimId</c> string value.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return kanbanJobPickingList.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the picking list.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    protected InventTransOriginId inventTransOriginId()
    {
        return kanbanJobPickingList.inventTransOriginId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the item for which an event is processed.
    /// </summary>
    /// <returns>
    ///    An <c>ItemId</c> string value.
    /// </returns>
    protected ItemId itemId()
    {
        return kanbanJobPickingList.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the kanban event type that is processed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanEventType</c> enumeration value.
    /// </returns>
    protected KanbanEventType kanbanEventType()
    {
        return KanbanEventType::KanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessSynchronously</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the event must be processed synchronously.
    /// </summary>
    /// <returns>
    ///    true if the event must be processed synchronously; otherwise, false.
    /// </returns>
    protected boolean mustProcessSynchronously()
    {
        return    super()
               || !kanbanRuleEvent
               || kanbanRuleEvent.KanbanLineEvent  == KanbanLineEventType::Automatic
               || (kanbanRuleEvent.KanbanLineEvent == KanbanLineEventType::Manual
                   && this.mustIncludeManualEvents());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobPickingList</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJobPickingList parmKanbanJobPickingList(KanbanJobPickingList _kanbanJobPickingList = kanbanJobPickingList)
    {
        kanbanJobPickingList = _kanbanJobPickingList;
        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the event.
    /// </summary>
    protected void processEvent()
    {
        super();
        this.updateKanbanJobPickingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the source document line that is causing the event.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    protected SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
        return kanbanJobPickingList.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>KanbanJobPickingList</c> record, if required.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateKanbanJobPickingList()
    {
        if (kanbanRule.RecId != kanbanJobPickingList.ReplenishmentRule)
        {
            ttsbegin;
            kanbanJobPickingList = KanbanJobPickingList::find(kanbanJobPickingList.RecId,true);

            if (kanbanJobPickingList)
            {
                kanbanJobPickingList.initFromKanbanRule(kanbanRule);

                // skip update method, not need to invoke event processing again after these changes
                kanbanJobPickingList.doUpdate();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqEventProcessKanbanJobPickList construct()
    {
        return new ReqEventProcessKanbanJobPickList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqEventProcessKanbanJobPickList</c> class.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    ///    A <c>KanbanJobPickingList</c> table buffer to use when the object is created.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that specifies whether the processing is performed interactively.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanJobPickList</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanJobPickList newStandard(
        KanbanJobPickingList _kanbanJobPickingList,
        boolean              _interactive = false)
    {
        ReqEventProcessKanbanJobPickList    reqEventProcess = ReqEventProcessKanbanJobPickList::construct();
        LeanProductionFlowActivity          leanProductionFlowActivity = _kanbanJobPickingList.kanbanJob().leanProductionFlowActivity();

        reqEventProcess.parmKanbanJobPickingList(_kanbanJobPickingList);
        reqEventProcess.parmInteractive(_interactive);
        reqEventProcess.parmMustBeAutoReserved(true);
        reqEventProcess.parmAcceptReceiveSemiFinishedKanbanRule(false);
        reqEventProcess.parmAcceptReceiveFinishedKanbanRule(true);
        reqEventProcess.parmLimitToPlanActivityDownStreamRecId(leanProductionFlowActivity.PlanActivity);

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>