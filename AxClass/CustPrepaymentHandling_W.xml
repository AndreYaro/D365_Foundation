<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentHandling_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustPrepaymentHandling_W extends CustVendPrepaymentHandling_W
{
    TransDate activeBookDateFrom;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    final public boolean check()
    {
        FactureJour_RU  factureJour;
        CustVendTrans_W custVendTrans_W;
        boolean        ret = super();
        CustTransOpen  custTransOpen = CustTransOpen::findRefId(custVendTrans.RecId);

        if (SpecTrans::existByRef(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId))
        {
            ret = checkFailed("@GLS109869");
        }

        custVendTrans_W = custVendTrans.CustVendTrans::getCustVendTrans_W();
        if (conversion               &&
            custVendTrans.Prepayment &&
            custVendTrans_W.PrepaymentFactureId_W)
        {
            factureJour = FactureJour_RU::find(custVendTrans_W.PrepaymentFactureId_W,
                                               FactureModule_RU::Cust,
                                               false);

            if ((factureJour.FactureAmount + factureJour.FactureTax) != -prepaymentAmount)
            {
                ret = checkFailed("@GLS103092");
            }

            if (! this.checkLogTransOper(factureJour.FactureId))
            {
                ret = checkFailed("@GLS101112");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLogTransOper</Name>
				<Source><![CDATA[
    private boolean checkLogTransOper(FactureId_RU _factureId)
    {
        CustSettlement                        custSettlement;
        PurchBookVATProcessLogTransOper_RU    processLogTransOper;
        PurchBookVATProcessLogTrans_RU        processLogTrans;

        select firstonly RecId from processLogTransOper
            exists join processLogTrans
                where processLogTransOper.RefRecId          == processLogTrans.RecId &&
                      processLogTrans.FactureId             == _factureId            &&
                      processLogTransOper.CanceledRefRecId  == 0
            exists join custSettlement
                where custSettlement.TransDate == processLogTrans.SettlementDate  &&
                      custSettlement.RecId     == processLogTrans.SettlementRecId;

        return ! processLogTransOper.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransDate</Name>
				<Source><![CDATA[
    public boolean checkTransDate(TransDate _transDate)
    {
        boolean ret = super(_transDate);

        if (ret && activeBookDateFrom)
        {
            if (_transDate < activeBookDateFrom)
            {
                ret = checkFailed("@GLS104874");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFacture</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    protected void createFacture()
    {
        FactureJour_RU   factureJour;
        FactureDelete_RU factureDelete;
        CustVendTrans_W  custVendTrans_W;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            return;
        }

        // delete old facture
        custVendTrans_W = custVendTrans.CustVendTrans::getCustVendTrans_W();
        factureJour = FactureJour_RU::find(custVendTrans_W.PrepaymentFactureId_W,
                                           FactureModule_RU::Cust,
                                           true);
        if (factureJour)
        {
            factureDelete = FactureDelete_RU::construct(factureJour);
            factureDelete.runOperation();
        }

        custVendTrans_W.PrepaymentFactureId_W = '';
        custVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);

        // create new facture
        if (newCustVendTrans.RecId != custVendTrans.RecId)
        {
            if (! newCustVendTrans.Prepayment)
            {
                return;
            }
        }
        else
        {
            if (! custVendTrans.Prepayment)
            {
                return;
            }
        }

        if (this.parmFactureAutocreate() == NoYes::Yes)
        {
            factureJour = FactureJourCreate_RU::newPrepaymentFactureCustTrans(newCustVendTrans,
                                                                              exchRate,
                                                                              newCustVendTrans.TransDate,
                                                                              newCustVendTrans.remainAmountCur(),
                                                                              useOriginalDocumentAsFacture_RU);

        }
        else
        {
            factureJour = null;
        }

        if (factureJour)
        {
            factureJour.PostingLogRecId = postingLog.RecId;
            factureJour.OperationTypeCodes = FactureJour_RU::getInitialTypeCodes(factureJour);
            factureJour.doUpdate();
        }

        if (newCustVendTrans.RecId != custVendTrans.RecId)
        {
            custVendTrans_W = newCustVendTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.PrepaymentFactureId_W = factureJour.FactureId;
            newCustVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }
        else
        {
            custVendTrans_W = custVendTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.PrepaymentFactureId_W = factureJour.FactureId;
            custVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    final public void init()
    {
        super();

        this.parmFactureAutocreate(CustParameters::find().PrepaymentFactureAutoCreate_RU);

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            this.parmCreateTaxCreditMemo(CzTaxDocumentTable::exist(custVendTrans.Voucher, custVendTrans.TransDate));
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPaymentValue</Name>
				<Source><![CDATA[
    protected void initDefaultPaymentValue()
    {
        this.parmPostingProfile(CustParameters::find().PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPrepaymentValue</Name>
				<Source><![CDATA[
    protected void initDefaultPrepaymentValue()
    {
        CustParameters custParameters = CustParameters::find();

        ledgerJournalTrans.TaxGroup        = custParameters.TaxGroup_RU;
        ledgerJournalTrans.TaxItemGroup    = custParameters.TaxItemGroup_RU;
        this.parmPostingProfile(custParameters.PrepaymentPostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    final protected void initLedgerVoucher()
    {
        NumberSeq numberSeq = NumberSeq::newGetVoucher(CustParameters::numRefCustPaymVoucher());

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     this.sysModule(),
                                                     numberSeq.parmVoucherSequenceCode());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransDate</Name>
				<Source><![CDATA[
    protected void initTransDate()
    {
        activeBookDateFrom = PurchBookTable_RU::getLastClosedBook().ClosingDate;
        transDate          = activeBookDateFrom;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeBalance</Name>
				<Source><![CDATA[
    final protected LedgerPostingType ledgerPostingTypeBalance()
    {
        return LedgerPostingType::CustBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypePayment</Name>
				<Source><![CDATA[
    final protected LedgerPostingType ledgerPostingTypePayment()
    {
        return LedgerPostingType::CustPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxt</Name>
				<Source><![CDATA[
    final protected LedgerTransTxt ledgerTransTxt()
    {
        return LedgerTransTxt::CustPaymentCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtReverse</Name>
				<Source><![CDATA[
    final protected LedgerTransTxt ledgerTransTxtReverse()
    {
        return LedgerTransTxt::CustCreditNoteCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaymentExists</Name>
				<Source><![CDATA[
    final protected boolean prepaymentExists(CustVendTrans _custVendTrans)
    {
        CustTrans      custTransPaym, custTransInvoice;
        CustSettlement custSettlement;

        // partial settlements combined with prepayment handling can create
        // situation when part of voucher is prepayment and part is not

        // if prepayment is open
        select firstonly RecId from custTransPaym
            where custTransPaym.Voucher   == _custVendTrans.Voucher   &&
                  custTransPaym.TransDate == _custVendTrans.TransDate &&
                  custTransPaym.Prepayment                            &&
                ! custTransPaym.Closed;

        if (custTransPaym.RecId)
        {
            return true;
        }

        // if prepayment is settled with invoice
        select firstonly RecId from custTransPaym
            where custTransPaym.Voucher   == _custVendTrans.Voucher   &&
                  custTransPaym.TransDate == _custVendTrans.TransDate &&
                  custTransPaym.Prepayment
        exists join custSettlement
            where (custSettlement.TransRecId  == custTransPaym.RecId ||
                   custSettlement.OffsetRecid == custTransPaym.RecId) &&
                  custSettlement.CanBeReversed
        exists join custTransInvoice
            where (custTransInvoice.RecId == custSettlement.TransRecId ||
                   custTransInvoice.RecId == custSettlement.OffsetRecid) &&
                  custTransInvoice.Invoice;

        if (custTransPaym.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseVATonDate</Name>
				<Source><![CDATA[
    final protected boolean reverseVATonDate()
    {
        return CustParameters::find().ReversePrepayment_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournaValue</Name>
				<Source><![CDATA[
    final protected void setLedgerJournaValue(AmountCur _amountCur)
    {
        ledgerJournalTrans.AccountType     = LedgerJournalACType::Cust;
        ledgerJournalTrans.AmountCurCredit = - _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransRefId</Name>
				<Source><![CDATA[
    protected void setTransRefId(CustVendVoucher _custVendVoucher, CustVendTrans _custVendTrans)
    {
        CustVoucher localCustVoucher = _custVendVoucher as CustVoucher;

        super(localCustVoucher, _custVendTrans);

        localCustVoucher.setTransRef(CustTransRefType::Payment, _custVendTrans.Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxDocumentNum</Name>
				<Source><![CDATA[
    public boolean showTaxDocumentNum()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    protected SysModule sysModule()
    {
        return SysModule::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatPrepaymentsLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up default ledger dimension account for customer transaction.
    /// </summary>
    /// <param name="_custVendTrans">
    /// Customer transaction <c>CustVendTrans</c>.
    /// </param>
    /// <returns>
    /// Default ledger dimension account <c>LedgerDimensionAccount</c>.
    /// </returns>

    protected LedgerDimensionDefaultAccount vatPrepaymentsLedgerDimension(CustVendTrans _custVendTrans)
    {
        return CustLedgerAccounts::vatPrepaymentsLedgerDimension(_custVendTrans.AccountNum, _custVendTrans.PostingProfile);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>