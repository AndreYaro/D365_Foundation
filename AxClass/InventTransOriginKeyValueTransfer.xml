<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginKeyValueTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransOriginKeyValueTransfer</c> class is used to change the key value of the field
/// that references the <c>InventTransOrigin</c> records for <c>InventTrans</c> records.
/// </summary>
public class InventTransOriginKeyValueTransfer
{
    InventTransTMPOriginKeyValueTransfer    inventTransTMPOriginKeyValueTransfer;
    InventTransTMPOriginTransferReturn      inventTransTMPOriginTransferReturn;
    Map                                     referenceTypeToReferenceTableIdMap;//key: InventTransType, value tableId of relation table
    InventTransOriginKeyValueTransferPolicy inventTransOriginKeyValueTransferPolicy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areStorageDimensionsKeptConsistent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that storage dimensions are consistent for the <c>InventTransOrigin</c> records to which
    /// the transaction was transferred.
    /// </summary>
    /// <returns>
    /// true if the validation succeeded; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean areStorageDimensionsKeptConsistent()
    {
        Query query = this.buildConsistentDimCheckQuery();

        QueryRun queryRun = new QueryRun(query);
        queryRun.setCursor(inventTransTMPOriginKeyValueTransfer);

        boolean inConsistentRecordsFound = queryRun.next();

        return !inConsistentRecordsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildConsistentDimCheckQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that returns the first transaction with inconsistency in the storage dimensions.
    /// </summary>
    /// <returns>
    /// A query that returns the first transaction with inconsistency in the storage dimensions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildConsistentDimCheckQuery()
    {
        #DEFINE.TRANSNAME_1('transOne')
        #DEFINE.TRANSNAME_2('transTwo')
        #DEFINE.DIMNAME_1('dimOne')
        #DEFINE.DIMNAME_2('dimTwo')

        QueryBuildDataSource    qbdsInventTrans_1, qbdsInventTrans_2;
        QueryBuildDataSource    qbdsInventDim_1,qbdsInventDim_2;
        InventDimParm           inventDimParmConsistentDim;
        QueryBuildRange         qbrInventTransInventDimId, qbrInventTransRecId;
        str                     inventDimRange;

        str  extendedQuerySyntaxRangeNotEqual(
            str _dataSourceName,
            str _fieldName)
        {
            return strFmt('(%1.%2 != %2)', _dataSourceName, _fieldName);
        }

        void buildInventDimStrRange(FieldId _inventDimFieldId)
        {
            if (inventDimRange)
            {
                inventDimRange += ' || ';
            }

            inventDimRange += extendedQuerySyntaxRangeNotEqual(qbdsInventDim_1.name(),fieldId2name(tableNum(InventDim),_inventDimFieldId));
        }

        Query query = new Query();

        QueryBuildDataSource qbdsOriginReferenceTransferTmp = query.addDataSource(tableNum(InventTransTMPOriginKeyValueTransfer));
        qbdsOriginReferenceTransferTmp.firstOnly(true);
        qbdsOriginReferenceTransferTmp.addSelectionField(fieldNum(InventTransTMPOriginKeyValueTransfer, TableId));

        qbdsInventTrans_1 = qbdsOriginReferenceTransferTmp.addDataSource(tableNum(InventTrans),#TRANSNAME_1,true);
        qbdsInventTrans_1.addSelectionField(fieldNum(InventTrans, TableId));
        qbdsInventTrans_1.addLink(fieldNum(InventTransTMPOriginKeyValueTransfer,ToInventTransOrigin),fieldNum(InventTrans,InventTransOrigin));
        qbdsInventTrans_1.joinMode(JoinMode::InnerJoin);//we need to use inner for the nesting to be correct

        qbdsInventDim_1 = qbdsInventTrans_1.addDataSource(tableNum(InventDim),#DIMNAME_1);
        qbdsInventDim_1.addSelectionField(fieldNum(InventDim, TableId));
        qbdsInventDim_1.relations(true);
        qbdsInventDim_1.joinMode(JoinMode::InnerJoin);//we need to use inner for the nesting to be correct
        qbdsInventDim_1.fetchMode(QueryFetchMode::One2One);

        qbdsInventTrans_2 = qbdsInventTrans_1.addDataSource(tableNum(InventTrans),#TRANSNAME_2);
        qbdsInventTrans_2.addLink(fieldNum(InventTrans,InventTransOrigin),fieldNum(InventTrans,InventTransOrigin),qbdsInventTrans_1.name());
        qbdsInventTrans_2.joinMode(JoinMode::ExistsJoin);

        qbrInventTransInventDimId = qbdsInventTrans_2.addRange(fieldNum(InventTrans,DataAreaId));
        qbrInventTransInventDimId.value('('+ extendedQuerySyntaxRangeNotEqual(qbdsInventTrans_1.name(),fieldStr(InventTrans, InventDimId)) +')');

        qbrInventTransRecId = qbdsInventTrans_2.addRange(fieldNum(InventTrans,RecId));
        qbrInventTransRecId.value('('+extendedQuerySyntaxRangeNotEqual(qbdsInventTrans_1.name(),fieldStr(InventTrans, RecId)) +')');

        qbdsInventDim_2 = qbdsInventTrans_2.addDataSource(tableNum(InventDim),#DIMNAME_2);
        qbdsInventDim_2.relations(true);
        qbdsInventDim_2.joinMode(JoinMode::ExistsJoin);

        //we need to compare dimensions on consistent storage dimensions
        this.inventDimParmInitConsistentStorageDim(inventDimParmConsistentDim);

        //add ranges on all consistent storage dimensions. Tracking dimensions cannot be consistent and product dimensions are handled.
        ListEnumerator enumerator = InventDim::dimFieldListEnumerator();

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (inventDimParmConsistentDim.(inventDimParmFieldId))
            {
                buildInventDimStrRange(inventDimFieldId);
            }
        }

        if (inventDimRange)
        {
            QueryBuildRange qbrInventDimConsistentField = qbdsInventDim_2.addRange(fieldNum(InventDim,DataAreaId));
            qbrInventDimConsistentField.value('('+inventDimRange+')');
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the reference can be transferred for all the records that are in the
    /// <c>InventTransTMPOriginKeyValueTransfer</c> table.
    /// </summary>
    /// <returns>
    /// true if the reference can be transferred; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canTransfer()
    {
        InventTransOrigin       inventTransOriginFrom, inventTransOriginTo;

        while select inventTransTMPOriginKeyValueTransfer
        join inventTransOriginFrom
            where inventTransOriginFrom.RecId == inventTransTMPOriginKeyValueTransfer.FromInventTransOrigin
        join inventTransOriginTo
            where inventTransOriginTo.RecId == inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin
        {
            if (!this.checkCanTransfer(inventTransOriginFrom,inventTransOriginTo))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAreOriginsOfTransferType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventTransOrigin</c> records are transfer orders.
    /// </summary>
    /// <param name="_inventTransOriginFrom">
    /// The origin of the transfer order.
    /// </param>
    /// <param name="_inventTransOriginTo">
    /// The destination of the transfer order.
    /// </param>
    /// <returns>
    /// true if one of the origin is a transfer; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkAreOriginsOfTransferType(
        InventTransOrigin _inventTransOriginFrom,
        InventTransOrigin _inventTransOriginTo)
    {
        if (_inventTransOriginFrom.isTransfer()
        ||  _inventTransOriginTo.isTransfer())
        {
            error(strFmt("@FPK270041",
                        _inventTransOriginFrom.InventTransId,
                        _inventTransOriginTo.InventTransId));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the references can be transferred.
    /// </summary>
    /// <param name="_inventTransOriginFrom">
    /// The origin of the order.
    /// </param>
    /// <param name="_inventTransOriginTo">
    /// The destination of the order.
    /// </param>
    /// <returns>
    /// true if the reference can be transferred; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkCanTransfer(
        InventTransOrigin _inventTransOriginFrom,
        InventTransOrigin _inventTransOriginTo)
    {
        boolean canMove = true;

        if (!this.checkAreOriginsOfTransferType(_inventTransOriginFrom,_inventTransOriginTo))
        {
            canMove = false;
        }

        if (!this.checkCanTransferItem(_inventTransOriginFrom,_inventTransOriginTo))
        {
            canMove = false;
        }

        if (!this.checkDoesPolicyAllowTransfer(_inventTransOriginFrom,_inventTransOriginTo))
        {
            canMove = false;
        }

        return canMove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanTransferItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the items on the transaction allows for the reference to be transferred.
    /// </summary>
    /// <param name="_inventTransOriginFrom">
    /// The origin of the order.
    /// </param>
    /// <param name="_inventTransOriginTo">
    /// The destination of the order.
    /// </param>
    /// <returns>
    /// true if the reference can be transferred; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkCanTransferItem(
        InventTransOrigin _inventTransOriginFrom,
        InventTransOrigin _inventTransOriginTo)
    {
        boolean canTransfer = true;

        if (_inventTransOriginFrom.ItemId != _inventTransOriginTo.ItemId)
        {
            error(strFmt("@FPK270042",
                        _inventTransOriginFrom.InventTransId,
                        _inventTransOriginTo.InventTransId,
                        fieldStr(InventTransOrigin, ItemId)));

            canTransfer = false;
        }

        if (_inventTransOriginFrom.ItemInventDimId != _inventTransOriginTo.ItemInventDimId)
        {
            error(strFmt("@FPK270042",
                    _inventTransOriginFrom.InventTransId,
                    _inventTransOriginTo.InventTransId,
                    fieldStr(InventTransOrigin, ItemInventDimId)));

            canTransfer = false;
        }

        return canTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDoesPolicyAllowTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>InventTransOriginRefTransferPolicy</c> class allows for the reference can be
    /// transferred.
    /// </summary>
    /// <param name="_inventTransOriginFrom">
    /// The origin of the order.
    /// </param>
    /// <param name="_inventTransOriginTo">
    /// The destination of the order.
    /// </param>
    /// <returns>
    /// true if the reference can be transferred; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkDoesPolicyAllowTransfer(
        InventTransOrigin _inventTransOriginFrom,
        InventTransOrigin _inventTransOriginTo)
    {
        boolean allowTransfer = true;

        if (!inventTransOriginKeyValueTransferPolicy.allowTransfer(_inventTransOriginFrom,_inventTransOriginTo))
        {
            error(strFmt("@FPK270043",
                _inventTransOriginFrom.InventTransId,
                _inventTransOriginTo.InventTransId));

            allowTransfer = false;
        }

        return allowTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMarkings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes markings for an <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The record for which to delete markings.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteMarkings(InventTrans _inventTrans)
    {
        InventQty       qtyUnMarked;

        if (_inventTrans.isIssue())
        {
            qtyUnMarked = InventTransOrigin::deleteMarking(_inventTrans.MarkingRefInventTransOrigin,_inventTrans.InventTransOrigin, -_inventTrans.Qty,true);
        }
        else
        {
            qtyUnMarked = InventTransOrigin::deleteMarking(_inventTrans.MarkingRefInventTransOrigin, _inventTrans.InventTransOrigin, -_inventTrans.Qty, true, null, null, true);
        }

        //try to remove marking on movement level if needed
        InventMovement movement = _inventTrans.inventMovement(true);

        if (movement
        &&  qtyUnMarked
        &&  movement.markingRefInventTransOrigin() == _inventTrans.MarkingRefInventTransOrigin
        &&  TradeInterCompany::markingAllowed(_inventTrans))
        {
            movement.clearInventRefFields();
        }

        _inventTrans.clearMarking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginAndOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>InventTransOrigin</c> records and the relation to its originator.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteOriginAndOwnerRelationship()
    {
        InventTransOrigin                       inventTransOrigin;

        InventTransTMPOriginKeyValueTransfer deleteableTmpInventTransOrigin = this.populateDeleteableInventTableOrigin();

        //if callers provided map the use that for a setbased delete
        if (referenceTypeToReferenceTableIdMap)
        {
            MapEnumerator me = referenceTypeToReferenceTableIdMap.getEnumerator();

            while (me.moveNext())
            {
                InventTransType inventTransType = me.currentKey();
                TableId referenceTableTableId = me.currentValue();

                this.deleteOriginAndOwnerRelationshipFromType(deleteableTmpInventTransOrigin, inventTransType,referenceTableTableId);
            }
        }
        else
        {
            //delete relations based on movement if the map provided did not cover it
            this.deleteOriginOwnerRelationshipMovement(deleteableTmpInventTransOrigin);

            //delete origins setbased
            if (this.parmInventTransOriginKeyValueTransferPol())
            {
                inventTransOrigin.skipDeleteActions(this.parmInventTransOriginKeyValueTransferPol().skipTransOriginDeleteMethodAndActions());
                inventTransOrigin.skipDeleteMethod(this.parmInventTransOriginKeyValueTransferPol().skipTransOriginDeleteMethodAndActions());
            }

            delete_from inventTransOrigin
            exists join deleteableTmpInventTransOrigin
                where deleteableTmpInventTransOrigin.FromInventTransOrigin == inventTransOrigin.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginAndOwnerRelationshipFromType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>InventTransOrigin</c> records and the relation to the originator for records that does
    /// not have transactions that are based on values that are provided by the internal map.
    /// </summary>
    /// <param name="_deleteableTmpInventTransOrigin">
    /// The <c>InventTransTMPOriginKeyValueTransfer</c> temporarary table instance containing references to the origin which should be deleted.
    /// </param>
    /// <param name="_inventTransType">
    /// The <c>InventTransType</c> reference category of the origin.
    /// </param>
    /// <param name="_originOwnerRelationShipTableId">
    /// The <c>TableId</c> ID of the table that has the relation between the origin and the originator.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteOriginAndOwnerRelationshipFromType(
        InventTransTMPOriginKeyValueTransfer    _deleteableTmpInventTransOrigin,
        InventTransType                         _inventTransType,
        TableId                                 _originOwnerRelationShipTableId)
    {
        InventTransOrigin   inventTransOrigin;

        SysDictTable sysDictTable = SysDictTable::newTableId(_originOwnerRelationShipTableId);

        FieldId referenceTableOriginFieldId = this.findInventTransOriginRelationFieldId(sysDictTable);
        Common originOwnerRelationShip = sysDictTable.makeRecord();

        delete_from originOwnerRelationShip
        exists join _deleteableTmpInventTransOrigin
            where _deleteableTmpInventTransOrigin.FromInventTransOrigin == originOwnerRelationShip.(referenceTableOriginFieldId)
        exists join inventTransOrigin
            where inventTransOrigin.RecId == originOwnerRelationShip.(referenceTableOriginFieldId);

        //delete origins based on type here so the loop later does not return anything
        if (this.parmInventTransOriginKeyValueTransferPol())
        {
            inventTransOrigin.skipDeleteActions(this.parmInventTransOriginKeyValueTransferPol().skipTransOriginDeleteMethodAndActions());
            inventTransOrigin.skipDeleteMethod(this.parmInventTransOriginKeyValueTransferPol().skipTransOriginDeleteMethodAndActions());
        }
        delete_from inventTransOrigin
            where inventTransOrigin.ReferenceCategory ==  _inventTransType
            exists join _deleteableTmpInventTransOrigin
                where _deleteableTmpInventTransOrigin.FromInventTransOrigin == inventTransOrigin.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationshipMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relation from <c>InventTransOrigin</c> records to the originator for records that do
    /// not have transactions.
    /// </summary>
    /// <param name="_deleteableTmpInventTransOrigin">
    /// The <c>InventTransTMPOriginKeyValueTransfer</c> temporarary table instance containing references to the origin which should be deleted.
    /// </param>
    private void deleteOriginOwnerRelationshipMovement(InventTransTMPOriginKeyValueTransfer    _deleteableTmpInventTransOrigin)
    {
        InventTransOrigin   inventTransOrigin;

        while select inventTransOrigin
        exists join _deleteableTmpInventTransOrigin
            where _deleteableTmpInventTransOrigin.FromInventTransOrigin == inventTransOrigin.RecId
        {
            InventMovement inventMovement = inventTransOrigin.inventMovement();
            inventMovement.deleteOriginOwnerRelationship();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesStatusIssueReceiptAllowTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventTrans</c> record has a <c>StatusIssue</c> and <c>StatusReceipt</c>
    /// value that allows for the reference can be transferred.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    /// true if the reference can be transferred; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean doesStatusIssueReceiptAllowTransfer(InventTrans _inventTrans)
    {
        if (_inventTrans.StatusReceipt == StatusReceipt::Arrived
        ||  !_inventTrans.isUpdatedEstimated())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesTransChildTypeAllowTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventTrans</c> record has a child type that allows for the reference to
    /// be transferred.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    /// true if the reference can be transferred; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean doesTransChildTypeAllowTransfer(InventTrans _inventTrans)
    {
        if (_inventTrans.TransChildType !=  InventTransChildType::None)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransOriginRelationFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>fieldId</c> of the field that has the reference to the <c>InventTransOrigin</c> table.
    /// </summary>
    /// <param name="_sysDictTable">
    /// The table that has the relationship to the <c>InventTransOrigin</c> table.
    /// </param>
    /// <returns>
    /// The <c>fieldId</c> of the field that has the reference to the <c>InventTransOrigin</c> table;
    /// otherwise, <c>0</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FieldId findInventTransOriginRelationFieldId(SysDictTable _sysDictTable)
    {
        SetEnumerator relationsEnumerator = _sysDictTable.relations().getEnumerator();

        while (relationsEnumerator.moveNext())
        {
            SysDictRelation sysDictRelation = relationsEnumerator.current();

            if (sysDictRelation.externTable() == tableNum(InventTransOrigin))
            {
                return sysDictRelation.lineTableValue(1);
            }
        }

        return 0;//error
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmInitConsistentStorageDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information about the dimensions that are consistent.
    /// </summary>
    /// <param name="_inventDimParmConsistentDim">
    /// An <c>InventDimParm</c> record that contains fields that are set to a <c>NoYes::Yes</c> enumeration
    /// value.
    /// </param>
    /// <remarks>
    /// Information is gathered from all storage dimensions in the system. It is enough that a dimension is
    /// active and consistent in just one storage dimension group to be returned as consistent.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void inventDimParmInitConsistentStorageDim(InventDimParm _inventDimParmConsistentDim)
    {
        EcoResStorageDimGroupSetupCache::inventDimParmInitAllConsistentDim(_inventDimParmConsistentDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrackingRegistrationConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries whether tracking registration is configured.
    /// </summary>
    /// <returns>
    ///    true if tracking registration is configured; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Is used to prevent operations against the <c>InventTrackingRegisterTrans</c> table.
    ///    If tracking registration is not configured, then no records can exist in the <c>InventTrackingRegisterTrans</c> table.
    /// </remarks>
    private boolean isTrackingRegistrationConfigured()
    {
        return InventTrackingRegisterTrans::isTrackingRegistrationConfigured();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginKeyValueTransferPol</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventTransOriginKeyValueTransferPolicy parmInventTransOriginKeyValueTransferPol(InventTransOriginKeyValueTransferPolicy _inventTransOriginKeyValueTransferPolicy = inventTransOriginKeyValueTransferPolicy)
    {
        inventTransOriginKeyValueTransferPolicy = _inventTransOriginKeyValueTransferPolicy;

        return inventTransOriginKeyValueTransferPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransTMPOriginKeyValueTransfer</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventTransTMPOriginKeyValueTransfer parmInventTransTMPOriginKeyValueTransfer(InventTransTMPOriginKeyValueTransfer _inventTransTMPOriginKeyValueTransfer = inventTransTMPOriginKeyValueTransfer)
    {
        inventTransTMPOriginKeyValueTransfer = _inventTransTMPOriginKeyValueTransfer;

        return inventTransTMPOriginKeyValueTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransTMPOriginTransferReturn</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventTransTMPOriginTransferReturn parmInventTransTMPOriginTransferReturn(InventTransTMPOriginTransferReturn _inventTransTMPOriginTransferReturn = inventTransTMPOriginTransferReturn)
    {
        inventTransTMPOriginTransferReturn = _inventTransTMPOriginTransferReturn;

        return inventTransTMPOriginTransferReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceTypeToReferenceTableIdMap</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Map parmReferenceTypeToReferenceTableIdMap(Map _referenceTypeToReferenceTableIdMap = referenceTypeToReferenceTableIdMap)
    {
        referenceTypeToReferenceTableIdMap = _referenceTypeToReferenceTableIdMap;

        return referenceTypeToReferenceTableIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeleteableInventTableOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an <c>InventTransTMPOriginKeyValueTransfer</c> temporary table instance with references
    /// to <c>InventTransOrigin</c> records which should be deleted.
    /// </summary>
    /// <returns>
    /// An <c>InventTransTMPOriginKeyValueTransfer</c> temporary table instance containing references
    /// to the <c>InventTransOrigin</c> records which should be deleted.
    /// </returns>
    private InventTransTMPOriginKeyValueTransfer populateDeleteableInventTableOrigin()
    {
        InventTransTMPOriginKeyValueTransfer    deleteableTmpInventTransOrigin;
        InventTrans                             inventTrans;
        InventTrackingRegisterTrans             inventTrackingRegisterTrans;

        insert_recordset deleteableTmpInventTransOrigin
            (fromInventTransOrigin, ToInventTransOrigin)
            select FromInventTransOrigin, ToInventTransOrigin
            from inventTransTMPOriginKeyValueTransfer
            notexists join inventTrans
            where inventTrans.InventTransOrigin == inventTransTMPOriginKeyValueTransfer.FromInventTransOrigin;

        if (this.isTrackingRegistrationConfigured())
        {
            delete_from deleteableTmpInventTransOrigin
                exists join  inventTrackingRegisterTrans
                where inventTrackingRegisterTrans.InventTransOrigin == deleteableTmpInventTransOrigin.FromInventTransOrigin;
        }

        return deleteableTmpInventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTransPostUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes <c>InventTrans</c> records that are not yet transferred.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processInventTransPostUpdate()
    {
        InventTrans inventTrans;

        while select forupdate inventTrans
        join inventTransTMPOriginKeyValueTransfer
            where inventTransTMPOriginKeyValueTransfer.FromInventTransOrigin == inventTrans.InventTransOrigin
        {
            if (!this.doesStatusIssueReceiptAllowTransfer(inventTrans))
            {
                throw error(strFmt("@FPK270044",
                            InventTransOrigin::find(inventTrans.InventTransOrigin).InventTransId,
                            InventTransOrigin::find(inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin).InventTransId,

                            inventTrans.StatusIssue,
                            inventTrans.StatusReceipt));
            }

            if (!this.doesTransChildTypeAllowTransfer(inventTrans))
            {
                throw error(strFmt("@FPK270045",
                            InventTransOrigin::find(inventTrans.InventTransOrigin).InventTransId,
                            InventTransOrigin::find(inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin).InventTransId,
                            inventTrans.TransChildType));
            }

            //handle marking
            if (inventTrans.MarkingRefInventTransOrigin)
            {
                this.deleteMarkings(inventTrans);

                inventTrans.InventTransOrigin = inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin;
                inventTrans.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the inventory transactions for each to origin.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void sumUpTransactions()
    {
        InventTrans inventTrans;

        while select forupdate inventTrans
        exists join inventTransTMPOriginKeyValueTransfer
            where inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin == inventTrans.InventTransOrigin
        {
            // Check if the record is not deleted already,
            // because it might have been deleted by previous updateSumUp call in the same loop.
            if (InventTrans::existRecId(inventTrans.RecId))
            {
                inventTrans.updateSumUp(NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the relationship on all estimated transactions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void transferEstimated()
    {
        if (!this.canTransfer())
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        //update transactions
        this.updateEstimatedTransactions();

        this.updateTransactionsReturnOrigin();

        // update tracking register transactions
        this.updateTrackingRegisterTransactions();

        //if there are any that was not updated by the above call then we handle them afterwards.
        this.processInventTransPostUpdate();

        //delete old relations
        this.deleteOriginAndOwnerRelationship();

        //sum up the transactions if possible
        this.sumUpTransactions();

        //check consistent dimensions - we don't expect that there normally will be failures so we choose an optimistic approach and detect errors after the change and summation (for perf reasons)
        if (!this.areStorageDimensionsKeptConsistent())
        {
            throw error("@FPK270046");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>InventTransOrigin</c> reference on the inventory transactions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateEstimatedTransactions()
    {
        InventTrans inventTrans;

        inventTrans.skipEvents(true);
        inventTrans.skipDataMethods(true);

        update_recordset inventTrans
            setting InventTransOrigin               = inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin
            where   inventTrans.TransChildType          ==  InventTransChildType::None
            &&  inventTrans.MarkingRefInventTransOrigin == 0
            && (inventTrans.StatusReceipt               ==  StatusReceipt::Ordered
            ||  inventTrans.StatusReceipt               ==  StatusReceipt::QuotationReceipt
            ||  inventTrans.StatusIssue                 ==  StatusIssue::QuotationIssue
            ||  inventTrans.StatusIssue                 ==  StatusIssue::OnOrder
            ||  inventTrans.StatusIssue                 ==  StatusIssue::ReservOrdered
            ||  inventTrans.StatusIssue                 ==  StatusIssue::ReservPhysical)
         join ToInventTransOrigin from inventTransTMPOriginKeyValueTransfer
            where inventTransTMPOriginKeyValueTransfer.FromInventTransOrigin == inventTrans.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrackingRegisterTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>InventTransOrigin</c> reference on the tracking register transactions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateTrackingRegisterTransactions()
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;

        if (!this.isTrackingRegistrationConfigured())
        {
            return;
        }

        inventTrackingRegisterTrans.skipDataMethods(true);

        update_recordset inventTrackingRegisterTrans
            setting InventTransOrigin               = inventTransTMPOriginKeyValueTransfer.ToInventTransOrigin
            where inventTrackingRegisterTrans.PhysicalRefRecId      == 0
               && inventTrackingRegisterTrans.PhysicalRefTableId    == 0
               && inventTrackingRegisterTrans.FinancialRefRecId     == 0
               && inventTrackingRegisterTrans.FinancialRefTableId   == 0
         join ToInventTransOrigin from inventTransTMPOriginKeyValueTransfer
            where inventTransTMPOriginKeyValueTransfer.FromInventTransOrigin == inventTrackingRegisterTrans.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionsReturnOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReturnInventTransOrigin</c> reference on the inventory transactions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateTransactionsReturnOrigin()
    {
        InventTrans                         inventTrans;

        inventTrans.skipEvents(true);
        inventTrans.skipDataMethods(true);

        update_recordset inventTrans
            setting ReturnInventTransOrigin =  inventTransTMPOriginTransferReturn.ReturnInventTransOrigin
        join inventTransTMPOriginTransferReturn
            where inventTrans.InventTransOrigin     == inventTransTMPOriginTransferReturn.InventTransOrigin
                && ((inventTransTMPOriginTransferReturn.FromReturnInventTransOrigin && inventTrans.ReturnInventTransOrigin == inventTransTMPOriginTransferReturn.FromReturnInventTransOrigin)
                        || (!inventTransTMPOriginTransferReturn.FromReturnInventTransOrigin && inventTrans.ReturnInventTransOrigin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static InventTransOriginKeyValueTransfer construct()
    {
        return new InventTransOriginKeyValueTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventTransOriginKeyValueTransfer</c> class.
    /// </summary>
    /// <param name="_inventTransTMPOriginKeyValueTransfer">
    /// An <c>InventTransTMPOriginKeyValueTransfer</c> record that identifies the origins that should be
    /// transferred.
    /// </param>
    /// <param name="_inventTransOriginKeyValueTransferPolicy">
    /// An <c>InventTransOriginKeyValueTransferPolicy</c> class used to determine whether the transfer is
    /// enabled.
    /// </param>
    /// <param name="_referenceTypeToReferenceTableIdMap">
    /// A map that contains the <c>InventTransType</c> value as a key and the <c>TableId</c> value as a
    /// value.
    /// </param>
    /// <param name="_inventTransTMPOriginTransferReturn">
    /// An <c>InventTransTMPOriginTransferReturn</c> class used to identify the return InventTransOrigin that
    /// should be updated.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransOriginKeyValueTransfer</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventTransOriginKeyValueTransfer newFromParameters(
        InventTransTMPOriginKeyValueTransfer        _inventTransTMPOriginKeyValueTransfer,
        InventTransOriginKeyValueTransferPolicy     _inventTransOriginKeyValueTransferPolicy,
        Map                                         _referenceTypeToReferenceTableIdMap = null,
        InventTransTMPOriginTransferReturn          _inventTransTMPOriginTransferReturn = null)
    {
        InventTransOriginKeyValueTransfer inventTransOriginKeyValueTransfer = InventTransOriginKeyValueTransfer::construct();

        inventTransOriginKeyValueTransfer.parmInventTransTMPOriginKeyValueTransfer(_inventTransTMPOriginKeyValueTransfer);
        inventTransOriginKeyValueTransfer.parmInventTransOriginKeyValueTransferPol(_inventTransOriginKeyValueTransferPolicy);
        inventTransOriginKeyValueTransfer.parmReferenceTypeToReferenceTableIdMap(_referenceTypeToReferenceTableIdMap);
        inventTransOriginKeyValueTransfer.parmInventTransTMPOriginTransferReturn(_inventTransTMPOriginTransferReturn);

        return inventTransOriginKeyValueTransfer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>