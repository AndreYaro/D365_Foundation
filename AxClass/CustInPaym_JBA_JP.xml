<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaym_JBA_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInPaym_JBA_JP</c> class is used to cust the paym and it extends the <c>CustInPaym</c> class.
/// </summary>
public class CustInPaym_JBA_JP extends CustInPaym
{
    protected const int Pos1 = 1;
    protected const int Pos2 = 2;

    protected const int Pos8 = 8;
    protected const int Pos10 = 10;
    protected const int Pos14 = 14;
    protected const int Pos20 = 20;
    protected const int Pos23 = 23;
    protected const int Pos42 = 42;
    protected const int Pos48 = 48;
    protected const int Pos50 = 50;
    protected const int Pos61 = 61;
    protected const int Pos98 = 98;
    protected const int Pos113 = 113;
    protected const int Pos123 = 123;
    protected const int Pos999 = 999;

    protected const int Length3 = 3;
    protected const int Length4 = 4;
    protected const int Length6 = 6;
    protected const int Length7 = 7;

    protected const str HeaderRecordFlag = "1";
    protected const str DataRecordFlag = "2";
    protected const str TrailerRecordFlag = "8";
    protected const str EndRecordFlag = "9";

    protected const str NumericalCharacters = "0123456789";
    protected const str EmptyString = "";
    protected const str ZeroString = "0";

    CompanyBankAccountId bankAccount;
    Counter importedPayments;
    Counter totalPayments;
    ErrorTxt errorTxt;
    BankAccount bankAccountNum;
    BankCode_JP bankCode_JP;
    BranchCode_JP branchCode;
    str custBankName;
    str custBranchName;
    container recordContainer[];
    boolean fillInControlReport;
    boolean runTest;

    boolean isOpened = false;

    TextStreamIo textFile;

    DialogRunbase dialog;
    FileUploadBuild dialogFileUpload;
    FileUpload fileUpload;
    DialogField dialogDisplayErrors;
    NoYes displayErrors;

    #localCodePage

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustZeroAmountCurCredit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts credit amount if it is 0.
    /// </summary>
    /// <param name="_amountCurCredit">
    ///     Credit amount.
    /// </param>
    /// <param name="_inRecord">
    ///     Record string which is used to get the credit amount.
    /// </param>
    /// <returns>
    ///     Adjusted credit amount.
    /// </returns>
    /// <remarks>
    ///     This method will be overwrited by the child class.
    /// </remarks>
    protected AmountCur adjustZeroAmountCurCredit(
        AmountCurCredit _amountCurCredit,
        str _inRecord)
    {
        return _amountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets customer bank name from container.
    /// </summary>
    /// <param name="_counter">
    ///     Counter for container.
    /// </param>
    /// <returns>
    ///     Customer bank name.
    /// </returns>
    public Name custBankName(Counter _counter)
    {
        return conpeek(recordContainer[_counter], Pos2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBranchName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets customer branch name from container.
    /// </summary>
    /// <param name="_counter">
    ///     Counter for container.
    /// </param>
    /// <returns>
    ///     Customer branch name.
    /// </returns>
    public BranchName_JP custBranchName(Counter _counter)
    {
        return conpeek(recordContainer[_counter], Length3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custNameKana</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets customer kana name from container.
    /// </summary>
    /// <param name="_counter">
    ///     Counter for container.
    /// </param>
    /// <returns>
    ///     Customer kana name.
    /// </returns>
    public DirPartyName custNameKana(Counter _counter)
    {
        return conpeek(recordContainer[_counter], Length4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Dialog which is used to choose payment file and payment account.
    /// </summary>
    /// <returns>
    ///     Dialog object.
    /// </returns>
    public Object dialog()
    {
        FormBuildControl formBuildControl;
        DialogGroup dialogGroup;

        // Load diskette with payments
        dialog = new DialogRunbase(this.groupName(), this);

        dialogGroup = dialog.addGroup(this.groupName());
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());
        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), 'FileUpload');
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.fileTypesAccepted('text/plain');
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(PaymentFileTemporaryStorageStrategy));
        dialogFileUpload.fileNameLabel("@SYS308842");

        dialogDisplayErrors = dialog.addFieldValue(extendedTypeStr(NoYesId), displayErrors, "@SYS38981");

        dialogOffsetAccount = dialog.addFieldValue(extendedtypestr(CompanyBankAccountId), CustPaymModeTable::find(paymMode).parmPaymAccount());
        dialogOffsetAccount.active(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the dialog Ok button until the file upload is complete.
    /// </summary>
    /// <param name="_dialog">The <c>Runbase</c> dialog object.</param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        fileUpload = _dialog.formRun().control(_dialog.formRun().controlId('FileUpload'));

        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);

        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    public void uploadCompleted()
    {
        this.setDialogOkButtonEnabled(dialog, true);

        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillControlReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills container with ledger journal transaction for control report.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     Ledger journal transaction.
    /// </param>
    /// <param name="_custBankName">
    ///     Customer bank name.
    /// </param>
    /// <param name="_custBranchName">
    ///     Customer branch name.
    /// </param>
    /// <param name="_custNameKana">
    ///     Customer kana name.
    /// </param>
    protected void fillControlReport(
        LedgerJournalTrans _ledgerJournalTrans,
        Name _custBankName,
        BranchName_JP _custBranchName,
        DirPartyName _custNameKana)
    {
        if (fillInControlReport)
        {
            recordContainer[importedPayments] = [_ledgerJournalTrans, _custBankName, _custBranchName, _custNameKana];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates ledger journal transaction from disk file.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Empty ledger journal id.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Disk file IO status error.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Empty bank account.
    /// </exception>
    public void fromDisk2Journal()
    {
        container fileContent;
        List lineContents = new List(Types::String);

        if (ledgerJournalId == EmptyString)
        {
            // Import failed. Create a new payment line before attempting to import.
            throw error("@SYS98218");
        }

        ttsbegin;

        if (isOpened)
        {
            totalPayments = 0;
            importedPayments = 0;
            bankAccountNum = "";

            while (textFile.status() == IO_Status::Ok)
            {
                fileContent = textFile.read();

                if (fileContent)
                {
                    lineContents.addEnd(conpeek(fileContent, 1));
                }
            }

            this.importDataToJournal(lineContents);

            // %1 out of %2 records have been imported
            info(strfmt("@SYS100102", importedPayments, totalPayments));

            ttscommit;
        }

        this.printControlReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDataToJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import data to journal.
    /// </summary>
    /// <param name = "_lineContents">content of the line in the file.</param>
    public void importDataToJournal(List _lineContents)
    {
        UnknownNoYes insertRecord;

        CustAccount custAccountNum;
        BankAccountTable bankAcctTable;
        DirPartyName custNameKana;
        CurrencyCode currencyCode;
        AmountCurCredit amountCurCredit;
        TransDate transDate;

        TransTxt txt;
        DocumentDate documentDate;
        DocumentNum documentNum;
        BankGroup bankGroup;
        str 1 dataClassification;
        RecId ledgerJournalTransRecId;

        str lineContent;

        ListEnumerator listEnumerator;
        listEnumerator = _lineContents.getEnumerator();

        while (listEnumerator.moveNext())
        {
            lineContent = listEnumerator.current();
            custAccountNum = "";
            errorTxt = "";
            dataClassification = substr(lineContent, Pos1, Pos1);

            if (insertIncorrectRecords == NoYes::Yes)
            {
                insertRecord = UnknownNoYes::Yes;
            }
            else
            {
                insertRecord = UnknownNoYes::Unknown;
            }

            switch (dataClassification)
            {
                case HeaderRecordFlag:
                    currencyCode = enum2str(ISOCurrencyCodes::JPY);
                    bankAcctTable = BankAccountTable::find(offsetAccount);
                    bankGroup = BankGroup::find(bankAcctTable.BankGroupId);
                    bankCode_JP = substr(lineContent, Pos23, Length4);
                    branchCode = substr(lineContent, Pos42, Length3);
                    bankAccountNum = substr(lineContent, Pos61, Length7);

                    if ((bankCode_JP == strrep(ZeroString, 4-strlen(bankGroup.Code_JP)) + bankGroup.Code_JP
                                && branchCode == strrep(ZeroString, 3-strlen(bankGroup.BranchCode_JP)) + bankGroup.BranchCode_JP
                                && bankAccountNum == bankAcctTable.AccountNum))
                    {
                        bankAccount = bankAcctTable.AccountID;
                    }
                    else
                    {
                        bankAccount = "";
                        // Bank details do not match
                        throw error("@GLS60230");
                    }
                    break;

                case DataRecordFlag:
                    totalPayments++;
                    txt = substr(lineContent, Pos2, Length6);
                    transDate = JapaneseDateTimeHelper::str2dateForPeriod(substr(lineContent, Pos8, Length6));

                    if (substr(lineContent, Pos8, Length6) && !transDate)
                    {
                        // Error
                        errorTxt = "@SYS36230";
                    }

                    documentDate = JapaneseDateTimeHelper::str2dateForPeriod(substr(lineContent, Pos14, Length6));
                    if (substr(lineContent, Pos14, Length6) && !documentDate)
                    {
                        // Error
                        errorTxt = "@SYS36230";
                    }

                    amountCurCredit = str2num(substr(lineContent,Pos20, Pos10));
                    if (substr(lineContent, Pos20, Pos10) != strkeep(substr(lineContent,Pos20, Pos10), NumericalCharacters))
                    {
                        // Error
                        errorTxt = "@SYS36230";
                    }

                    amountCurCredit = this.adjustZeroAmountCurCredit(amountCurCredit, lineContent);

                    custNameKana = substr(lineContent, Pos50, Pos48);
                    documentNum = "";
                    custBankName = substr(lineContent, Pos98,15);
                    custBranchName = substr(lineContent, Pos113,15);

                    fillInControlReport = false;

                    if (!errorTxt || (errorTxt && insertRecord == UnknownNoYes::Yes))
                    {
                        ledgerJournalTransRecId = CustInPaym_JBA_JP::createLedgerJournalTransForJBA(
                            ledgerJournalId,
                            custNameKana,
                            bankAccount,
                            amountCurCredit,
                            currencyCode,
                            transDate,
                            documentDate,
                            txt,
                            documentNum,
                            paymMode);

                        if (ledgerJournalTransRecId)
                        {
                            fillInControlReport = true;
                            importedPayments++;

                            ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTransRecId, false);
                        }
                    }

                    this.fillControlReport(ledgerJournalTrans, custBankName, custBranchName, custNameKana);
                    break;

                case TrailerRecordFlag:
                    break;

                case EndRecordFlag:
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets offset account and file name from dialog input.
    /// </summary>
    /// <returns>
    ///     Boolean flag indicates operation result.
    /// </returns>
    public boolean getFromDialog()
    {
        offsetAccount = dialogOffsetAccount.value();
        displayErrors = dialogDisplayErrors.value();
        fileName = dialogFileUpload.fileNameLabel();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets group name which is used in the dialog to show JBA payment format.
    /// </summary>
    /// <returns>
    ///     Group name.
    /// </returns>
    /// <remarks>
    ///     It should be overwritten in the child class.
    /// </remarks>
    protected Name groupName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>importedPayments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets counter for the payments records.
    /// </summary>
    /// <returns>
    ///     Counter for the payments.
    /// </returns>
    public Counter importedPayments()
    {
        return importedPayments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets interface name.
    /// </summary>
    /// <returns>
    /// The instance of the <c>ClassName</c> class.
    /// </returns>
    public ClassName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets ledger journal transaction from container.
    /// </summary>
    /// <param name="_counter">
    ///     Counter for container.
    /// </param>
    /// <returns>
    ///     Ledger journal transaction.
    /// </returns>
    public LedgerJournalTrans ledgerJournalTrans(Counter _counter)
    {
        return conpeek(recordContainer[_counter], 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets code page used in JBA import.
    /// </summary>
    /// <returns>code page used in JBA import.</returns>
    public int getCodePage()
    {
        return #cp_932;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens the disk file.
    /// </summary>
    /// <returns>
    ///     Boolean flag indicates operation result.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Can't open disk file.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Disk file does not exist.
    /// </exception>
    public boolean openFile()
    {
        if (dialog != null && dialog.formRun() != null)
        {
            fileUpload = dialog.formRun().control(dialog.formRun().controlId('FileUpload'));

            if (fileUpload != null)
            {
                stream = fileUpload.getUploadedFile(true);
            }
        }

        if (stream != null)
        {
            textFile = TextStreamIo::constructForRead(stream, this.getCodePage());
        }

        if (textFile != null)
        {
            if (textFile.status() != IO_Status::Ok)
            {
                throw error("@SYS52680");
            }
            textFile.inFieldDelimiter('|');
            textFile.inRecordDelimiter('\r\n');
            isOpened = true;
        }
        else
        {
            throw error("@SYS129183");
        }

        return isOpened;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccount</Name>
				<Source><![CDATA[
    public BankAccount parmBankAccount(BankAccount _bankAccountNum = bankAccountNum)
    {
        bankAccountNum = _bankAccountNum;

        return bankAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCode</Name>
				<Source><![CDATA[
    public BankCode_JP parmBankCode(BankCode_JP _bankCode = bankCode_JP)
    {
        bankCode_JP = _bankCode;

        return bankCode_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankName</Name>
				<Source><![CDATA[
    public Name parmBankName(Name _custBankName = custBankName)
    {
        custBankName = _custBankName;

        return custBankName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBranchCode</Name>
				<Source><![CDATA[
    public BranchCode_JP parmBranchCode(BranchCode_JP _branchCode = branchCode)
    {
        branchCode = _branchCode;

        return branchCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBranchName</Name>
				<Source><![CDATA[
    public BranchName_JP parmBranchName(Name _custBranchName = custBranchName)
    {
        custBranchName = _custBranchName;

        return custBranchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccount</Name>
				<Source><![CDATA[
    public LedgerAccount parmOffsetAccount(LedgerAccount _offsetAccount = offsetAccount)
    {
        offsetAccount = _offsetAccount;

        return offsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printControlReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints control report for custInPaym_JBA_JP.
    /// </summary>
    /// <remarks>
    /// M2.
    /// </remarks>
    protected void printControlReport()
    {
        Args args = new Args();

        if (!runTest)
        {
            args.caller(this);
            new MenuFunction(menuitemOutputStr(CustInPaym_JP), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates file name and bank account.
    /// </summary>
    /// <param name="_calledFrom">
    ///     CalledFrom object.
    /// </param>
    /// <returns>
    ///     Boolean flag indicates operation result.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        bankAccountTable = BankAccountTable::find(offsetAccount);

        if (!bankAccountTable)
        {
            // Bank account %1 does not exist.
            ok = checkFailed(strfmt("@SYS26720", offsetAccount));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransForJBA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates ledger journal transaction on aos server.
    /// </summary>
    /// <param name="_ledgerJournalId">
    ///     Ledger journal id.
    /// </param>
    /// <param name="_custNameKana">
    ///     Customer kana name.
    /// </param>
    /// <param name="_bankAccount">
    ///     Bank account number.
    /// </param>
    /// <param name="_amountCurCredit">
    ///     Credit amount.
    /// </param>
    /// <param name="_currencyCode">
    ///     Currency code.
    /// </param>
    /// <param name="_transDate">
    ///     Transaction date.
    /// </param>
    /// <param name="_documentDate">
    ///     Document date.
    /// </param>
    /// <param name="_txt">
    ///     Transaction text.
    /// </param>
    /// <param name="_documentNum">
    ///     Document number.
    /// </param>
    /// <param name="_paymMode">
    ///     Payment mode.
    /// </param>
    /// <returns>
    ///     Ledger journal transaction record id.
    /// </returns>
    protected static RecId createLedgerJournalTransForJBA(
        LedgerJournalId _ledgerJournalId,
        DirPartyName _custNameKana,
        CompanyBankAccountId _bankAccount,
        AmountCurCredit _amountCurCredit,
        CurrencyCode _currencyCode,
        TransDate _transDate,
        DocumentDate _documentDate,
        TransTxt _txt,
        DocumentNum _documentNum,
        PaymMode _paymMode)
    {
        CustTable custTable;
        LedgerJournalTrans ledgerJournalTrans;
        CustAccount custAccountNum;
        Voucher voucher;
        LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();
        UnknownNoYes triangulationResult;
        ExchRateSecondTxt exchRateSecondTxt;

        custAccountNum = CustTable::findByKanaName_JP(_custNameKana, false).AccountNum;

        ledgerJournalTrans.clear();
        ledgerJournalTrans.JournalNum = _ledgerJournalId;
        ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;
        ledgerJournalTrans.TransactionType = LedgerTransType::Payment;

        ledgerJournalTrans.parmAccount(custAccountNum, LedgerJournalACType::Cust);

        ledgerJournalTrans.AmountCurCredit = _amountCurCredit;
        ledgerJournalTrans.TransDate = _transDate;
        ledgerJournalTrans.Due = _transDate;
        ledgerJournalTrans.DocumentDate = _documentDate;
        ledgerJournalTrans.DocumentNum = _documentNum;
        ledgerJournalTrans.Txt = _txt;
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
        ledgerJournalTrans.OffsetDefaultDimension = BankAccountTable::find(_bankAccount).DefaultDimension;

        ledgerJournalTrans.parmOffsetAccount(_bankAccount, LedgerJournalACType::Bank);

        ledgerJournalTrans.CurrencyCode = Currency::findCurrencyCodeISO(ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::JPY)).CurrencyCode;
        ledgerJournalTrans.PaymMode = _paymMode;

        ttsbegin;
        voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(_ledgerJournalId))).getNew(false);
        ttscommit;
        ledgerJournalTrans.Voucher = voucher;
        ledgerJournalTrans.Approved = NoYes::Yes;

        custTable = CustTable::find(ledgerJournalTrans.parmAccount());

        if (custTable)
        {
            ledgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
            ledgerJournalTrans.Payment = custTable.PaymTermId;
        }

        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);

        [triangulationResult,
        ledgerJournalTrans.ExchRate,
        ledgerJournalTrans.ExchRateSecond,
        exchRateSecondTxt] = ledgerJournalEngine_Server::currencyModified(ledgerJournalTrans);

        ledgerJournalTrans.Triangulation = Currency::unknownNoYes2Noyes(triangulationResult);

        ledgerJournalTrans.insert();

        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>