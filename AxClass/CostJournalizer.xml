<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostJournalizer</c> class journalizes events in general ledger.
/// </summary>
public class CostJournalizer
{
    Map             companyMap;
    boolean         subscribing;
    LedgerVoucher   ledgerVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the events in the current transaction scope for the current company.
    /// </summary>
    /// <returns>
    /// The events in the current transaction scope for the current company.
    /// </returns>
    private Set getEvents()
    {
        Set             events;
        DataAreaId      dataAreaId = curext();

        if (!companyMap)
        {
            companyMap = new Map(Types::String, Types::Class);
        }

        if (companyMap.exists(dataAreaId))
        {
            events = companyMap.lookup(dataAreaId);
        }
        else
        {
            events = new Set(Types::Class);
            companyMap.insert(dataAreaId, events);
        }

        return events;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    private LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an entry.
    /// </summary>
    /// <param name="_entry">
    /// The entry to process.
    /// </param>
    protected void processEntry(CostEntry _entry)
    {
        CostJournalizingRule journalizingRule = CostJournalizingRule::newRule(_entry);
        if (journalizingRule.mustJournalize())
        {
            CostInventoryEvent parentEvent = _entry.parmEvent().parmParentEvent();
            LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(parentEvent.parmVoucher(), parentEvent.parmTransDate());

            CurrencyExchangeHelper currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

            CostProductCostDescriptor         productCostDescriptor               = _entry.parmDescriptor();
            CostEvent                         reconciledEvent                     = productCostDescriptor.parmReconciledEvent();
            boolean                           skipDimensionValidation             = reconciledEvent != null;
            CostLedgerDimensionDerivationRule ledgerDimensionDerivationRule       = CostBalanceLedgerDimensionDerivationRule::newRule(_entry);
            CostLedgerDimensionDerivationRule offsetLedgerDimensionDerivationRule = CostOffsetLedgerDimensionDerivationRule::newRule(_entry);
            CurrencyCode                      standardCurrencyCode                = CompanyInfoHelper::standardCurrency();

            LedgerVoucherTransObject ledgerVoucherTransObject;

            ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                        ledgerVoucherObject,
                                        ledgerDimensionDerivationRule.parmPostingType(),
                                        ledgerDimensionDerivationRule.parmLedgerDimensionAccount(),
                                        standardCurrencyCode,
                                        _entry.parmMagnitude(),
                                        currencyExchHelper,
                                        reconciledEvent);

            ledgerVoucherTransObject.parmSkipDimensionValidation(skipDimensionValidation);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                        ledgerVoucherObject,
                                        offsetLedgerDimensionDerivationRule.parmPostingType(),
                                        offsetLedgerDimensionDerivationRule.parmLedgerDimensionAccount(),
                                        standardCurrencyCode,
                                        -_entry.parmMagnitude(),
                                        currencyExchHelper,
                                        reconciledEvent);

            ledgerVoucherTransObject.parmSkipDimensionValidation(skipDimensionValidation);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            _entry.parmPostingType(ledgerDimensionDerivationRule.parmPostingType());
            _entry.parmLedgerDimension(ledgerDimensionDerivationRule.parmLedgerDimensionAccount());
            _entry.parmOffsetPostingType(offsetLedgerDimensionDerivationRule.parmPostingType());
            _entry.parmOffsetLedgerDimension(offsetLedgerDimensionDerivationRule.parmLedgerDimensionAccount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an event.
    /// </summary>
    /// <param name="_event">
    /// The event to process.
    /// </param>
    protected void processEvent(CostEvent _event)
    {
        CostEntryEnumerator enumerator = _event.getEntries();
        while (enumerator.moveNext())
        {
            this.processEntry(enumerator.current());
        }
        _event.parmIsPosted(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the events in the current transaction scope for the current company.
    /// </summary>
    private void processEvents()
    {
        DataAreaId                  dataAreaId = curext();

        if (companyMap && companyMap.exists(dataAreaId))
        {
            Set events = companyMap.lookup(dataAreaId);
            if (events)
            {
                CostEventBaseEnumerator enumerator = CostEventBaseEnumerator::construct(events.getEnumerator());

                while (enumerator.moveNext())
                {
                    CostEventBase event = enumerator.current();
                    this.processEvent(event);
                }
                companyMap.remove(dataAreaId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an event to the journalizer.
    /// </summary>
    /// <param name="_event">
    /// The event to add.
    /// </param>
    public static void add(CostEvent _event)
    {
        CostJournalizer     journalizer = CostJournalizer::newFromCache();

        journalizer.getEvents().add(_event);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostJournalizer construct()
    {
        return new CostJournalizer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Journalizes events in the current transaction scope for the current company in general ledger with the specified ledger voucher.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    public static void journalize(LedgerVoucher _ledgerVoucher)
    {
        CostJournalizer  journalizer = CostJournalizer::newFromCache();

        journalizer.parmLedgerVoucher(_ledgerVoucher);
        journalizer.processEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostJournalizer</c> class for the transaction scope.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CostJournalizer</c> class for the transaction scope.
    /// </returns>
    private static CostJournalizer newFromCache()
    {
        CostJournalizer    journalizer;

        journalizer = SysTransactionScopeCache::get(classStr(CostJournalizer), '', journalizer);

        if (!journalizer)
        {
            journalizer = CostJournalizer::construct();

            SysTransactionScopeCache::set(classStr(CostJournalizer), '', journalizer);
        }

        return journalizer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>