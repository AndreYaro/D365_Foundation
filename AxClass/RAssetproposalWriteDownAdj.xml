<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalWriteDownAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalWriteDownAdj extends RAssetProposal implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::WriteDownAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        RAssetSumCalc   rassetSumTrans;
        RAssetAmount    amountCur;

        if (rAssetStandards.Depreciation                                    &&
            rAssetStandards.CurrencyCode != CompanyInfoHelper::standardCurrency() &&
            rAssetStandards.postingProfile(runDate))
        {
            rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                 _assetStandardId,
                                                                 runDate);

            amountCur = rassetSumTrans.depreciationTotal();

            amountCur = CurrencyExchangeHelper::amountCur2MST(amountCur, rAssetStandards.CurrencyCode, 0, runDate) -
                rassetSumTrans.depreciationTotalMST();

            amountCur = RAssetProposal::roundAmount(_assetStandardId,
                                                    rAssetTable,
                                                    runDate,
                                                    amountCur,
                                                    CompanyInfoHelper::standardCurrency());

            if (amountCur != 0)
            {
                rAssetJournal.createVoucher();
                rAssetJournal.createTrans(amountCur, rAssetTable, runDate, rAssetStandards);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116212");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
