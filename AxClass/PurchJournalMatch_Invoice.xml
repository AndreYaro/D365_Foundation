<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchJournalMatch_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchJournalMatch_Invoice</c> class contains business logic that corresponds to the
///    <c>PurchJournalMatch_PackingSlip</c> form.
/// </summary>
public class PurchJournalMatch_Invoice extends SalesPurchJournalSelect
{
    QueryBuildRange inventTransIdRange;
    QueryBuildRange tableRefIdRange;
    VendInvoiceInfoLine vendInvoiceInfoLine;
    SalesPurchParmSubLineLinkTmp packingSlipLink;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPackingSlipLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a set of links between records in the <c>VendInvoiceInfoSubLine</c> table and the
    ///    corresponding records in the <c>VendPackingSlipTrans</c> table.
    /// </summary>
    public void buildPackingSlipLink()
    {
        this.buildPackingSlipLinkV2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPackingSlipLinkV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// A newer version of the corresponding V1 logic, made to optimize performance. This version excludes from temp table inserts
    /// a number of records that V1 inserts, but which are not then interacted with because the UI query on the form would filter them out,
    /// or they otherwise do not make sense to process.
    /// Filtered out records include:
    /// VendInvoiceInfoLine: 
    /// -	Now excluding lines with empty InventTransId
    /// -	Now excluding lines which are non-PO invoices
    /// VendPackingSlipTrans: 
    /// -	Now excluding trans with FullyMatched = Yes
    /// -	Now excluding trans, which relate to a PurchLine AND at the same time have the quantity sign opposite of PurchLine.PurchQty (i.e. vendPackingSlipTrans.Qty * PurchLine.PurchQty <= 0)
    /// -	Now excluding trans with nothing to match (i.e. packingSlipLink.OriginalInventQty = 0, packingSlipLink.OriginalPurchQty = 0, packingSlipLink.PdsCWOriginalQty = 0)
    /// </summary>
    private void buildPackingSlipLinkV2()
    {
        QueryRun qr = new QueryRun(this.journalHeader_ds().query());
        boolean isCustomsEnableIN = TaxParameters::isCustomsEnable_IN();

        while (qr.next())
        {
            this.vendInvoiceInfoLine(qr.get(this.journalHeader_ds().table()));
            RecId grandParentRecId = this.vendInvoiceInfoLine().RecId;

            if (vendInvoiceInfoLine.InventTransId == strMin() || vendInvoiceInfoLine.isNonPO())
            {
                continue;
            }

            VendPackingSlipTrans vendPackingSlipTrans;
            PurchLine purchLine;

            while select vendPackingSlipTrans
                where vendPackingSlipTrans.InventTransId == vendInvoiceInfoLine.InventTransId
                && vendPackingSlipTrans.FullyMatched == NoYes::No
                    join purchLine
                    where purchLine.InventTransId == vendPackingSlipTrans.InventTransId
                        && (vendPackingSlipTrans.Qty * purchLine.PurchQty) > 0
                {
                    VendInvoiceInfoSubLine subLine;

                    select sum(RecId), sum(InventNow), sum(ReceiveNow), sum(PdsCWInventNow) from subLine
                        where subLine.JournalRefRecId == vendPackingSlipTrans.RecId
                            && subLine.JournalRefTableId == tableNum(VendPackingSlipTrans)
                            && subLine.LineRefRecId == vendInvoiceInfoLine.RecId;

                    NoYes matched = subLine.RecId != 0 ? NoYes::Yes : NoYes::No;

                    packingSlipLink.clear();
                    packingSlipLink.ChildRecId = vendPackingSlipTrans.RecId;
                    packingSlipLink.ParentRecId = subLine.RecId;
                    packingSlipLink.GrandParentRecId = grandParentRecId;
                    packingSlipLink.Matched = matched;
                    packingSlipLink.OriginalMatched = matched;

                    
                    PurchQty remainPurchQty;
                    InventQty remainInventQty;
                    PdsCWInventQty remainPdsCWQty;

                    [remainPurchQty, remainInventQty, remainPdsCWQty] = vendPackingSlipTrans.calculateRemainingFinancialQuantities();

                    packingSlipLink.OriginalInventQty = remainInventQty + subLine.InventNow;
                    packingSlipLink.OriginalPurchQty = remainPurchQty + subLine.ReceiveNow;
                    packingSlipLink.PdsCWOriginalQty = remainPdsCWQty + subLine.PdsCWInventNow;
                    

                    if (packingSlipLink.Matched)
                    {
                        packingSlipLink.InventQty = subLine.InventNow;
                        packingSlipLink.PurchQty = subLine.ReceiveNow;
                        packingSlipLink.PdsCWQty = subLine.PdsCWInventNow;
                    }
                    else
                    {
                        // If packing slip isn't matched, show zero qty until user includes this record
                        packingSlipLink.InventQty = 0;
                        packingSlipLink.PurchQty = 0;
                        packingSlipLink.PdsCWQty = 0;
                    }

                    // this field is used to determine if the user has edited the PurchQty
                    packingSlipLink.PurchQtyBeforeEdits = packingSlipLink.PurchQty;
                    packingSlipLink.PdsCWQtyBeforeEdits = packingSlipLink.PdsCWQty;

                    // Exclude lines with nothing to match, as they would be excluded from the form as well and not be selectable
                    if (this.isValidPotentialMatch(packingSlipLink))
                    {
                        packingSlipLink.write();
                    }
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidPotentialMatch</Name>
				<Source><![CDATA[
    private boolean isValidPotentialMatch(SalesPurchParmSubLineLinkTmp _packingSlipLink)
    {
        return _packingSlipLink.OriginalInventQty != 0 || _packingSlipLink.OriginalPurchQty != 0 || _packingSlipLink.PdsCWOriginalQty != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the queries that are responsible for displaying data on the
    ///    <c>PurchJournalMatch_PackingSlip</c> form.
    /// </summary>
    protected void buildQuery()
    {
        inventTransIdRange = VendInvoiceMatch::extendQuery(this.journalLines_ds().query(), false);

        tableRefIdRange = VendInvoiceMatch::extendQueryExcludeMatchedPackingSlips(this.journalLines_ds().query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOriginalInventNow</Name>
				<Source><![CDATA[
    private void saveOriginalInventNow()
    {
        VendInvoiceLineMatchingTmp vendInvoiceInfoLineMatchingTmp;
        VendInvoiceInfoLine vendInvoiceInfoLineLocal;

        //query below contains sum of InventNow however it's only due to group by clause. 
        //In truth we'll always find 1 VendInvoiceInfoLine per GrandParentRecId so sum would equal InventNow. 
        insert_recordset vendInvoiceInfoLineMatchingTmp (RefRecId,InventNow)
            select GrandParentRecId from packingSlipLink
                group by GrandParentRecId
            join sum(InventNow) from vendInvoiceInfoLineLocal
                where vendInvoiceInfoLineLocal.RecId == packingSlipLink.GrandParentRecId
                    && packingSlipLink.Matched == NoYes::Yes;

        VendInvoiceMatch::saveInventQuantity(vendInvoiceInfoLineMatchingTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOK</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends selections that are made in the <c>PurchJournalMatch_PackingSlip</c> form back to the caller
    ///    form.
    /// </summary>
    public void closeOK()
    {
        List selectedList = new List(Types::Record);
        boolean updateLine;

        while select packingSlipLink
        {
            if (VendorInvoiceQuantityAutoRoundingFeatureV3::instance().isEnabled())
            {
                packingSlipLink.PurchQty = VendInvoiceUnitOfMeasureRounding::roundedQuantityBasedOnUnitOfMeasure(packingSlipLink.PurchQty,
                    VendPackingSlipTrans::findRecId(packingSlipLink.ChildRecId).PurchUnit);
            }

            selectedList.addEnd(packingSlipLink);

            updateLine = updateLine ||
                (packingSlipLink.Matched != packingSlipLink.OriginalMatched ||
                packingSlipLink.PurchQty != packingSlipLink.OriginalPurchQty ||
                packingSlipLink.PdsCWQty != packingSlipLink.PdsCWOriginalQty ||
                (packingSlipLink.PurchQty != packingSlipLink.PurchQtyBeforeEdits));
        }

        if (updateLine)
        {
            if (VendAutomateVendorInvoicesFeature::isEnabled())
            {
                this.saveOriginalInventNow();
            }

            formLetter.selectFromJournalLines(selectedList.pack());

            if (SalesPurchJournalSelect::checkCaller(formRun, formStr(VendEditInvoice)))
            {
                formRun.args().caller().focusBackFromMatchPackingSlips();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceNameAll</Name>
				<Source><![CDATA[
    protected str dataSourceNameAll()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks or clears all links between the records in the <c>VendInvoiceInfoLine</c> table and the
    ///    corresponding record in the <c>VendPackingSLipTrans</c> table.
    /// </summary>
    /// <param name="_markAll">
    ///    A Boolean value that indicates whether all links will be marked.
    /// </param>
    public void includeAll(boolean _markAll = false)
    {
        this.includeAllV2(_markAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAllV1</Name>
				<Source><![CDATA[
    private void includeAllV1(boolean _mark)
    {
        QueryRun qrHdr = new QueryRun(this.journalHeader_ds().query());
        qrHdr.reset();

        while (qrHdr.next())
        {
            VendInvoiceInfoLine invoiceLine = qrHdr.get(this.journalHeader_ds().table());

            // When selecting all packing slips from vendor invoice lines,
            // skip non PO invoice lines or lines that don't have an inventory transaction ID.
            if (invoiceLine.InventTransId == strMin() || invoiceLine.isNonPO())
            {
                continue;
            }

            this.vendInvoiceInfoLine(invoiceLine);

            this.toggleIncludeAllPackingSlipLines(_mark);
        }

        this.journalHeader_ds().active(); // force active
        formRun.arrange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAllV2</Name>
				<Source><![CDATA[
    private void includeAllV2(boolean _mark)
    {
        NoYes mark = _mark ? NoYes::Yes : NoYes::No;

        update_recordset packingSlipLink setting Matched = mark;

        if (mark)
        {
            update_recordset packingSlipLink
                setting
                PurchQty = packingSlipLink.OriginalPurchQty,
                InventQty = packingSlipLink.OriginalInventQty,
                PdsCWQty = packingSlipLink.PdsCWOriginalQty;
        }
        else
        {
            update_recordset packingSlipLink
                setting
                PurchQty = 0.0,
                InventQty = 0.0,
                PdsCWQty = 0;
        }
        
        this.journalHeader_ds().active(); // force active
        formRun.arrange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>included</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks or unmarks a single link between a record in the <c>VendPackingSlipTrans</c> table and a
    ///    record in the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <param name="_set">
    ///    true if the value is set; otherwise, false.
    /// </param>
    /// <param name="_vendPackingSlipTrans">
    ///    The <c>VendPackingSlipTrans</c> record that represents the link.
    /// </param>
    /// <param name="_mark">
    ///    A Boolean value that indicates whether the link record will be marked.
    /// </param>
    /// <returns>
    ///    true if the link is marked; otherwise, false.
    /// </returns>
    public NoYes included(boolean _set, Common _vendPackingSlipTrans, NoYes _mark)
    {
        NoYes matched;
       
        ttsbegin;

        while select forupdate firstonly packingSlipLink // 0 or 1 iteration
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId
        {
            if (_set)
            {
                packingSlipLink.Matched = _mark;

                packingSlipLink.PurchQty = packingSlipLink.Matched ? packingSlipLink.OriginalPurchQty : 0.0;
                packingSlipLink.InventQty = packingSlipLink.Matched ? packingSlipLink.OriginalInventQty : 0.0;
                packingSlipLink.PdsCWQty = packingSlipLink.Matched ? packingSlipLink.PdsCWOriginalQty : 0;
                packingSlipLink.update();

                matched = _mark;
            }
            else
            {
                matched = packingSlipLink.Matched;
            }
        }

        ttscommit;

        return matched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks or unmarks all links between the selected record in the <c>VendInvoiceInfoLine</c> table and
    ///    the corresponding record in the <c>VendPackingSLipTrans</c> table.
    /// </summary>
    /// <param name="_markAll">
    ///    A Boolean value that indicates whether all links will be marked.
    /// </param>
    public void includeLines(boolean _markAll)
    {
        this.toggleIncludeAllPackingSlipLines(_markAll);

        formRun.arrange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleIncludeAllPackingSlipLines</Name>
				<Source><![CDATA[
    private void toggleIncludeAllPackingSlipLines(boolean _markAll)
    {
        NoYes markAll = _markAll ? NoYes::Yes : NoYes::No;
        QueryRun qrTrans = new QueryRun(this.journalLines_ds().query());

        // mark or unmark all lines
        while (qrTrans.next())
        {
            this.included(true, qrTrans.get(this.journalLines_ds().table()), markAll);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        PurchFormLetter purchFormLetter = formLetter as PurchFormLetter;

        // synchronize the parmTable in the formletter contract
        purchFormLetter.currentPurchParmTable();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total quantity for all the marked <c>VendPackingSlipTrans</c> records that are
    ///    linked to the specified <c>VendInvoiceInfoLine</c> record in the inventory U of M.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    The <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    ///    The calculated total quantity in the inventory U of M.
    /// </returns>
    public InventQty inventQtyMatched(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        select sum(InventQty) from packingSlipLink
            where
                packingSlipLink.GrandParentRecId == _vendInvoiceInfoLine.RecId &&
                packingSlipLink.Matched == NoYes::Yes;

        return packingSlipLink.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyToInvoice</Name>
				<Source><![CDATA[
    public InventQty inventQtyToInvoice(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        select packingSlipLink
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

        if (packingSlipLink.RecId != 0)
        {
            return packingSlipLink.InventQty;
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines_ds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data source that is used by the bottom grid of the <c>PurchJournalMatch_PackingSlip</c> form.
    /// </summary>
    /// <returns>
    /// The data source that is used by the bottom grid of the <c>PurchJournalMatch_PackingSlip</c> form.
    /// </returns>
    protected FormDataSource journalLines_ds()
    {
        return formRun.dataSource(2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInventQtyRemainingToInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and sends the remaining quantity to invoice for a specified <c>VendPackingSlipTrans</c>
    ///    table.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    ///    The <c>VendPackingSlipTrans</c> record that represents the link.
    /// </param>
    /// <returns>
    ///    The remaining quantity to invoice for a specified <c>VendPackingSlipTrans</c> table.
    /// </returns>
    public InventQty originalInventQtyRemainingToInvoice(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        select packingSlipLink
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

        if (packingSlipLink.RecId != 0)
        {
            return packingSlipLink.OriginalInventQty;
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalPurchQtyRemainingToInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and sends the remaining quantity to invoice for a specified <c>VendPackingSlipTrans</c>
    ///    table.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    ///    The <c>VendPackingSlipTrans</c> record that represents the link.
    /// </param>
    /// <returns>
    ///    The remaining quantity to invoice for a specified <c>VendPackingSlipTrans</c> table.
    /// </returns>
    public PurchQty originalPurchQtyRemainingToInvoice(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        select packingSlipLink
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

        if (packingSlipLink.RecId != 0)
        {
            return packingSlipLink.OriginalPurchQty;
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOriginalQtyRemainingToInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and sends the remaining quantity to invoice in catch weight unit for a specified <c>VendPackingSlipTrans</c>
    ///    table.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    ///    The <c>VendPackingSlipTrans</c> record that represents the link.
    /// </param>
    /// <returns>
    ///    The remaining quantity to invoice in catch weight unit for a specified <c>VendPackingSlipTrans</c> table.
    /// </returns>
    public PdsCWInventQty pdsCWOriginalQtyRemainingToInvoice(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        select firstonly packingSlipLink
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

        if (packingSlipLink.RecId != 0)
        {
            return packingSlipLink.PdsCWOriginalQty;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total quantity for all the marked <c>VendPackingSlipTrans</c> records that are
    ///    linked to the specified <c>VendInvoiceInfoLine</c> record in the catch weight unit of measure.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    The <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    ///    The calculated total quantity in the catch weight unit of measure.
    /// </returns>
    public PdsCWInventQty pdsCWQtyMatched(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        select sum(PdsCWQty) from packingSlipLink
            where
                packingSlipLink.GrandParentRecId == _vendInvoiceInfoLine.RecId &&
                packingSlipLink.Matched == NoYes::Yes;

        return packingSlipLink.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyToInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the quantity to invoice in catch weight unit.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies if the quantity to invoice should be set.
    /// </param>
    /// <param name="_vendPackingSlipTrans">
    /// A <c>VendPackingSlipTrans</c> table buffer.
    /// </param>
    /// <param name="_cwQtyToInvoice">
    /// A quantity to invoice in catch weight units.
    /// </param>
    /// <returns>
    /// The quantity to invoice in catch weight unit.
    /// </returns>
    public PdsCWInventQty pdsCWQtyToInvoice(boolean _set, VendPackingSlipTrans _vendPackingSlipTrans, PdsCWInventQty _cwQtyToInvoice)
    {
        select firstonly packingSlipLink
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

        if (_set)
        {
            if (_cwQtyToInvoice < 0 && packingSlipLink.PdsCWOriginalQty > 0)
            {
                checkFailed("@SYS53673");
                return packingSlipLink.PdsCWQty;
            }

            if (_cwQtyToInvoice > 0 && packingSlipLink.PdsCWOriginalQty < 0)
            {
                checkFailed("@SYS308405");
                return packingSlipLink.PdsCWQty;
            }

            if (abs(_cwQtyToInvoice) > abs(packingSlipLink.PdsCWOriginalQty))
            {
                checkFailed(strFmt("@SYS71085",_cwQtyToInvoice, packingSlipLink.PdsCWOriginalQty));
                return packingSlipLink.PdsCWQty;
            }
        }

        PdsCWInventQty pdsCWQty = 0;

        if (_set)
        {
            ttsbegin;

            select forupdate firstonly packingSlipLink
                where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

            packingSlipLink.PdsCWQty = _cwQtyToInvoice;
            this.updateQuantitiesForCWQty(packingSlipLink, _vendPackingSlipTrans);
            packingSlipLink.OriginalMatched = false;

            packingSlipLink.Matched = packingSlipLink.PdsCWQty == 0 || packingSlipLink.PurchQty == 0.0 ? NoYes::No : NoYes::Yes;
            packingSlipLink.update();

            ttscommit;

            pdsCWQty = packingSlipLink.PdsCWQty;
        }

        if (packingSlipLink.RecId != 0)
        {
            pdsCWQty = packingSlipLink.PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total quantity for all the marked <c>VendPackingSlipTrans</c> records that are
    ///    linked to a specified <c>VendInvoiceInfoLine</c> record in the purchasing U of M.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    The <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <returns>
    ///    The calculated total quantity in the purchasing U of M.
    /// </returns>
    public PurchQty purchQtyMatched(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        select sum(PurchQty) from packingSlipLink
            where
                packingSlipLink.GrandParentRecId == _vendInvoiceInfoLine.RecId &&
                packingSlipLink.Matched == NoYes::Yes;

        return packingSlipLink.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyToInvoice</Name>
				<Source><![CDATA[
    public PurchQty purchQtyToInvoice(boolean _set,VendPackingSlipTrans _vendPackingSlipTrans, PurchQty _purchQtyToInvoice)
    {
        PurchLine purchLine;
        InventQty localInventQty;

        select firstonly packingSlipLink
            where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

        if (_set)
        {
            if (_purchQtyToInvoice < 0.0 && packingSlipLink.OriginalPurchQty > 0.0)
            {
                checkFailed("@SYS53673");
                return packingSlipLink.PurchQty;
            }

            if (_purchQtyToInvoice > 0.0 && packingSlipLink.OriginalPurchQty < 0.0)
            {
                checkFailed("@SYS308405");
                return packingSlipLink.PurchQty;
            }

            if (abs(_purchQtyToInvoice) > abs(packingSlipLink.OriginalPurchQty))
            {
                checkFailed(strFmt("@SYS71085",_purchQtyToInvoice,packingSlipLink.OriginalPurchQty));
                return packingSlipLink.PurchQty;
            }
        }

        InventQty purchQty = 0.0;

        if (_set)
        {
            ttsbegin;
          
            select forupdate firstonly packingSlipLink
                where packingSlipLink.ChildRecId == _vendPackingSlipTrans.RecId;

            packingSlipLink.PurchQty = _purchQtyToInvoice;
            packingSlipLink.OriginalMatched = false;
            purchLine = _vendPackingSlipTrans.purchLine();

            if (purchLine.isStocked())
            {
                // Get the anticipated inventory qty
                EcoResProductUnitConverter unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                                             purchLine.InventDimId,
                                                                                                                             purchLine.PurchUnit,
                                                                                                                             purchLine.inventTable().inventUnitId(),
                                                                                                                             NoYes::No);
                
                localInventQty = unitConverter.convertValue(packingSlipLink.OriginalPurchQty);

                packingSlipLink.InventQty = unitConverter.convertValue(packingSlipLink.PurchQty);

                packingSlipLink.InventQty += (packingSlipLink.OriginalInventQty - localInventQty);
            }

            packingSlipLink.Matched = packingSlipLink.PurchQty == 0.0 ? NoYes::No : NoYes::Yes;
            packingSlipLink.update();

            ttscommit;

            purchQty = packingSlipLink.PurchQty;
        }

        if (packingSlipLink.RecId != 0)
        {
            purchQty = packingSlipLink.PurchQty;
        }

        return purchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalHeader_allowEdit</Name>
				<Source><![CDATA[
    protected void setJournalHeader_allowEdit()
    {
        SysDictTable dictTable = new SysDictTable(this.journalHeader_ds().table());
        Counter i;
        FieldId fieldId;
        FormDataObject formDataObject;

        for (i = 1; i <= dictTable.fieldCntWithoutSys(); i++)
        {
            fieldId = dictTable.fieldCnt2Id(i);
            formDataObject = this.journalHeader_ds().object(fieldId);
            if (formDataObject)
            {
                formDataObject.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantitiesForCWQty</Name>
				<Source><![CDATA[
    private void updateQuantitiesForCWQty(SalesPurchParmSubLineLinkTmp _packingSlipLink, VendPackingSlipTrans _vendPackingSlipTrans)
    {
        InventUnitId inventUnitId;
        PurchLine purchLine;
        InventMovement inventMovement;
        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment;

        purchLine = _vendPackingSlipTrans.purchLine();
        inventMovement = InventMovement::construct(purchLine);

        pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newPurchInvoice(inventMovement, VendInvoiceInfoLine::findRecId(_packingSlipLink.ParentRecId));

        _packingSlipLink.InventQty = pdsCatchWeightMovementQtyAdjustment.purchReceiptQty(DocumentStatus::Invoice, _packingSlipLink.PdsCWQty, _vendPackingSlipTrans.PackingSlipId);

        inventUnitId = InventTableModule::find(_vendPackingSlipTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;

        _packingSlipLink.PurchQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(vendInvoiceInfoLine.ItemId,
                                                                                                          vendInvoiceInfoLine.InventDimId,
                                                                                                          _packingSlipLink.InventQty,
                                                                                                          inventUnitId,
                                                                                                          _vendPackingSlipTrans.PurchUnit,
                                                                                                          NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the current record in the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///    The current <c>VendInvoiceInfoLine</c> record to set; optional.
    /// </param>
    /// <returns>
    ///    The current record in the <c>VendInvoiceInfoLine</c> table.
    /// </returns>
    public VendDocumentLineMap vendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine = vendInvoiceInfoLine)
    {
        vendInvoiceInfoLine = _vendInvoiceInfoLine;

        if (inventTransIdRange && vendInvoiceInfoLine.InventTransId != strMin())
        {
            inventTransIdRange.value(vendInvoiceInfoLine.InventTransId);
        }

        if (tableRefIdRange)
        {
            tableRefIdRange.value(SysQuery::valueNot(vendInvoiceInfoLine.TableRefId));
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchJournalMatch_Invoice construct()
    {
        return new PurchJournalMatch_Invoice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>