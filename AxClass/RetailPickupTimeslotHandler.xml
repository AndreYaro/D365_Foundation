<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPickupTimeslotHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal static class RetailPickupTimeslotHandler
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>removeOverlappedOrgUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validating the orgunits selected from the OrgUnitsPicker with the existing orgunits in the table <c>retailpickuptimeslotsetting</c>.
    /// If there the org unit existed in the setting, then remove the org unit from the Set.
    /// Finally return the result which has no overlapping with the existing orgunits in the table <c>retailpickuptimeslotsetting</c>.
    /// </summary>
    /// <param name = "_insertedOrgUnits">
    /// The orgUnits selected from the RetailPickupTimeslotChannelPicker.
    /// </param>
    /// <returns>
    /// true: Remove happened when checking with the existing orgUnits.
    /// false: Remove not happeded when checking with the existing orgUnits.
    /// </returns>
    public static boolean removeOverlappedOrgUnits(Set _insertedOrgUnits)
    {
        boolean removed = false;
        RetailPickupTimeslotChannel retailPickupTimeslotChannel;
        while select OMInternalOrganizationId from retailPickupTimeslotChannel
        {
            if (_insertedOrgUnits.in(retailPickupTimeslotChannel.OMINternalOrganizationId))
            {
                removed = true;
                _insertedOrgUnits.remove(retailPickupTimeslotChannel.OMINternalOrganizationId);
            }
        }
        return removed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flattenSelectedOrgUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flatten the orgunits selected to leaf node.
    /// List all the leaf nodes from organizationGraph according to the hierarchy type given.
    /// Loop the leaf nodes and add the nodes whose ancestoreOrganization in the selected orgUnits.
    /// The leaf node is the node that is not existed in the parentOrganization in the <c>OMHierarchyRelationship</c>.
    /// </summary>
    /// <param name = "_operatingUnitPickerData">
    /// The operatingUnitPickerData which transfered from RetailPickupTimeslotChannelPicker.
    /// </param>
    /// <returns>
    /// Set of all the leaf nodes inherited from the operatingUnitPickerData selected.
    /// </returns>
    public static Set flattenSelectedOrgUnits(RetailOperatingUnitPickerData _operatingUnitPickerData)
    {
        Set flattenedOrgUnits = new Set(Types::Int64);
        OMExplodedOrganizationSecurityGraph organizationGraph;
        OMHierarchyRelationship omHierarchyRelationship;
        while select Organization,AncestorOrganization from organizationGraph
            where organizationGraph.OMHierarchyType == _operatingUnitPickerData.omHierarchyTypeRecId
            notexists join omHierarchyRelationship
                where omHierarchyRelationship.ParentOrganization == organizationGraph.Organization
                && omHierarchyRelationship.HierarchyType == organizationGraph.OMHierarchyType
        {
            if (_operatingUnitPickerData.omInternalOrganizationRecIds.in(organizationGraph.AncestorOrganization))
            {
                flattenedOrgUnits.add(organizationGraph.Organization);
            }
        }
        
        return flattenedOrgUnits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation for the active date of the setting
    /// </summary>
    /// <param name = "_setting">
    /// RetailPickupTimeslotSetting
    /// </param>
    /// <returns>
    /// false: There is no active date is enabled in the seeting.
    /// true: At least one of the active date is enabled.
    /// </returns>
    public static boolean validateActiveDays(RetailPickupTimeslotSetting _setting)
    {
        if (_setting.ActiveOnMonday == 0
            && _setting.ActiveOnTuesday == 0
            && _setting.ActiveOnWednesday == 0
            && _setting.ActiveOnThursday == 0
            && _setting.ActiveOnFriday == 0
            && _setting.ActiveOnSaturday == 0
            && _setting.ActiveOnSunday == 0)
        {
            warning("@Retail:RetailPickupTimeslotActiveDaysRequiredWarning");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeslotInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the interval should be less and equal to the duration between the start time and the end time.
    /// </summary>
    /// <param name = "_interval">Interval in the setting.</param>
    /// <param name = "_startTime">StartTime in the setting.</param>
    /// <param name = "_endTime">EndTime in the setting.</param>
    /// <returns>
    /// true: interval is less and equal to the duration between the start time and end time.
    /// false: interval is larger than the duration.
    /// </returns>
    public static boolean validateTimeslotInterval(int _interval, RetailPickupTimeslotStartTime _startTime, RetailPickupTimeslotEndTime _endTime)
    {
        if (_interval < 0)
        {
            warning("@Retail:RetailPickupTimeslotIntervalNegativeError");
            return false;
        }

        if ((_endTime - _startTime) < _interval * RetailPickupTimeslotDefaultValues::getSecondsPerMinute())
        {
            warning("@Retail:RetailPickupTimeslotIntervalError");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeslotCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify the slot per interval should not be negative.
    /// </summary>
    /// <param name = "_capacity">Slot per interval</param>
    /// <returns>
    /// true: the slot per interval is positive.
    /// false: the slot per interval is negative.
    /// </returns>
    public static boolean validateTimeslotCapacity(int _capacity)
    {
        if (_capacity < 0)
        {
            warning("@Retail:RetailPickupTimeslotCapacityNegativeError");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeslotDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify the start date should be less and equal to the end date.
    /// </summary>
    /// <param name = "_startDate">Start Date in the setting.</param>
    /// <param name = "_endDate">End Date in the setting.</param>
    /// <returns>
    /// true: _startDate is less and equal to the _endDate
    /// false: _startDate is larger than the _endDate
    /// </returns>
    public static boolean validateTimeslotDateRange(RetailPickupTimeslotStartDate _startDate, RetailPickupTimeslotEndDate _endDate)
    {
        if (_startDate > _endDate)
        {
            warning("@Retail:RetailPickupTimeslotDataRangeError");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeslotTimeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify the start time is less and equal to the end time.
    /// </summary>
    /// <param name = "_startTime">Start time in the setting.</param>
    /// <param name = "_endTime">End time in the setting.</param>
    /// <returns>
    /// true: _startTime is less and equal to the _endTime.
    /// false: _startTime is larger than _endTime.
    /// </returns>
    public static boolean validateTimeslotTimeRange(RetailPickupTimeslotStartTime _startTime, RetailPickupTimeslotEndTime _endTime)
    {
        if (_startTime >= _endTime)
        {
            warning("@Retail:RetailPickupTimeslotTimeRangeError");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLinesWithTimeslots</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the timeslot is available according to the parameters given.
    /// If there is no definition based on the parameters, then pass the validation unless the timeslot has been selected.
    /// If there is existing definition, and both start time and end time are equal to the parameters given, then pass the validation.
    /// If there is existing defintion, and either start time or end time is not equal to the parameters given, then failed the validation.
    /// e.g. User change the request shipping date from 10/08/2020 to 10/12/2020, and the exsiting timeslot is from 8:00 AM - 12:00 PM, 
    /// If there is no definition for the shpping date, so the existing timeslot is not valid, then failed the validation.
    /// If there is a exactly same timeslot "8:00 AM - 12:00 PM", and the validation will pass.
    /// If there is a definition for the timeslot "8:00 AM - 1:00 PM" which is not equal to the existing timeslot, then failed the validation.
    /// </summary>
    /// <param name = "_dlvModeId">Delivery mode</param>
    /// <param name = "_pickupDate">Pickup Date</param>
    /// <param name = "_pickupStoreId">StoreId for the pickup </param>
    /// <param name = "_startTime">Start Time for the pickup</param>
    /// <param name = "_endTime">End Time for the pickup</param>
    /// <returns>
    ///  true: delivery mode && pickup date && storeId are extacly matched with the timeslot defined with Start Time and End Time.
    ///  false: not matched
    /// </returns>
    public static boolean validateSalesLinesWithTimeslots(DlvModeId _dlvModeId, RetailPickupDate _pickupDate, RetailStoreId _pickupStoreId, RetailPickupTimeslotStartTime _startTime, RetailPickupTimeslotEndTime _endTime)
    {
        RetailPickupTimeslotAvailabilityTmp availability = RetailPickupTimeslotHandler::getAvailableTimeslotSettings(_dlvModeId, _pickupDate, _pickupStoreId);

        if (availability.RecId)
        {
            select firstonly1 availability where availability.StartTime == _startTime && availability.EndTime == _endTime;
            if (!availability.RecId)
            {
                warning("@Retail:RetailSalesLineSaveWithoutTimeslotWarning");
                eventSource.EventWriteRetailSalesLineSaveWithValidTimeslotFailed(_pickupStoreId, _startTime, _endTime, _dlvModeId, DateTimeUtil::toStr(_pickupDate));
                return false;
            }
            return true;
        }

        // If there is no defintion and the time range has value then fail the validataion
        if (_startTime != 0 && _endTime != 0)
        {
            warning("@Retail:RetailSalesLineSaveConflictTimeslotWarning");
            eventSource.EventWriteRetailSalesLineSaveWithValidTimeslotFailed(_pickupStoreId, _startTime, _endTime, _dlvModeId, DateTimeUtil::toStr(_pickupDate));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeslotDateRangeOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation for the timerange of the timeslot settings.
    /// The timerange should not be overlapping with other settings which has the same pickup date, same delivery mode and the same channel.
    /// </summary>
    /// <param name = "_selectedSettingRecId">The recId of the setting selected.</param>
    /// <param name = "_pickupTimeslotSettingTmp">The temp table with settings will be saved</param>
    /// <returns>
    /// false: The setting will be saved is overlapped with the existing settings of the template in the database.
    /// true: There is no overlapping for the setting will be saved.
    /// </returns>
    public static boolean validateTimeslotDateRangeOverlap(Recid _selectedSettingRecId, RetailPickupTimeslotSettingTmp _pickupTimeslotSettingTmp)
    {
        RetailPickupTimeslotSetting pickupTimeslotSetting;
        select firstonly _pickupTimeslotSettingTmp
            join pickupTimeslotSetting
            where pickupTimeslotSetting.RecId != _selectedSettingRecId
            && pickupTimeslotSetting.DlvMode == _pickupTimeslotSettingTmp.DlvMode
            && _pickupTimeslotSettingTmp.TimeslotTemplateId == pickupTimeslotSetting.TimeslotTemplateId
            && pickupTimeslotSetting.StartDate <= _pickupTimeslotSettingTmp.EndDate && pickupTimeslotSetting.EndDate >= _pickupTimeslotSettingTmp.StartDate
            && pickupTimeslotSetting.StartTime < _pickupTimeslotSettingTmp.EndTime && pickupTimeslotSetting.EndTime > _pickupTimeslotSettingTmp.StartTime
            &&
            (
                (_pickupTimeslotSettingTmp.ActiveOnMonday == NoYes::Yes && pickupTimeslotSetting.ActiveOnMonday == NoYes::Yes)
                || (_pickupTimeslotSettingTmp.ActiveOnTuesday == NoYes::Yes && pickupTimeslotSetting.ActiveOnTuesday == NoYes::Yes)
                || (_pickupTimeslotSettingTmp.ActiveOnWednesday == NoYes::Yes && pickupTimeslotSetting.ActiveOnWednesday == NoYes::Yes)
                || (_pickupTimeslotSettingTmp.ActiveOnThursday == NoYes::Yes && pickupTimeslotSetting.ActiveOnThursday == NoYes::Yes)
                || (_pickupTimeslotSettingTmp.ActiveOnFriday == NoYes::Yes && pickupTimeslotSetting.ActiveOnFriday == NoYes::Yes)
                || (_pickupTimeslotSettingTmp.ActiveOnSaturday == NoYes::Yes && pickupTimeslotSetting.ActiveOnSaturday == NoYes::Yes)
                || (_pickupTimeslotSettingTmp.ActiveOnSunday == NoYes::Yes && pickupTimeslotSetting.ActiveOnSunday == NoYes::Yes)
            );    
        if (pickupTimeslotSetting)
        {
            warning(strFmt("@Retail:RetailPickupTimeslotDataRangeOverlapError", time2Str(pickupTimeslotSetting.StartTime, TimeSeparator::Colon, TimeFormat::Hour24), time2Str(pickupTimeslotSetting.EndTime, TimeSeparator::Colon, TimeFormat::Hour24), pickupTimeslotSetting.StartDate, pickupTimeslotSetting.EndDate));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableTimeslotSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the available time range with available capacity from the defintion of timeslot.
    /// 1. Get the available timeslot settings
    ///
    /// <c>Get the available timeslot</c>
    /// 1. Reset the pickupDate with the timezone of the Channel
    /// 2. Calculate the minimumDateTime according to the minimumLimit defined in the template of the timeslot
    ///     if the minimumLimit defined as days. the minimumDateTime is the current date with timezone plus minimumLimit.
    ///     e.g.
    ///     minimumLimit = 2, current date = 08/22/2020, then minimumDateTime is 08/24/2020
    ///
    ///     if the minimumLimit defined as hours. First, convert the minimumLimit to hours, then the minimumDateTime is the current date with timezone plus the hours
    ///     e.g.
    ///     minimumLimit = 0.2, current date = 08/22/2020 09:00:00 PM. hours = 0.2 * 24 = 4.8 hours = 5 hours, the minimumDateTime = 08/23/2020 02:00:00 AM
    /// 3. If the pickupdate is less then the minimumDateTime then return empty table.
    /// 4. Get the available template according to the pickupdate, dlvMode, ChannelRecId within the condition the result should be one or zero.
    /// 5. Flatten the timeslot according the defnition of the timeslot including the starttime, endtime, intervals and insert the result into RetailPickupTimeslotAvailabilityTmp.
    ///    If the starttime is less then the pickuptime which from the pickupdate, it should start with the pickuptime
    /// </summary>
    /// <param name = "_dlvModeId">Delivery Mode</param>
    /// <param name = "_pickupDate">Pickup Date</param>
    /// <param name = "_pickupStoreId">Pickup StoreId</param>
    /// <returns>
    /// Return the <c>RetailPickupTimeslotAvailabilityTmp</c> with all timeslots.
    /// </returns>
    public static RetailPickupTimeslotAvailabilityTmp getAvailableTimeslotSettings(DlvModeId _dlvModeId, RetailPickupDate _pickupDate, RetailStoreId _pickupStoreId)
    {
        RetailPickupTimeslotAvailabilityTmp retailPickupTimeslotAvailabilityTmp;
        RetailPickupTimeslotTemplate retailPickupTimeslotTemplate = RetailPickupTimeslotTemplate::findByRetailStore(_pickupStoreId);
        if (!retailPickupTimeslotTemplate.RecId)
        {
            return retailPickupTimeslotAvailabilityTmp;
        }

        // Get the time zone for the pickup store
        RetailStoreTable pickupStore = RetailStoreTable::find(_pickupStoreId);
        Timezone pickupStoreTimezone = RetailChannelTable::getChannelTimezone(pickupStore.RecId);
        utcdatetime currentDateTimeOfPickupStore = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), pickupStoreTimezone);

        int maximumDays = retailPickupTimeslotTemplate.MaximumLimit / RetailPickupTimeslotDefaultValues::getMinutesPerDay();
        date farthestDate = DateTimeUtil::date(DateTimeUtil::addDays(currentDateTimeOfPickupStore, maximumDays));

        if (_pickupDate > farthestDate)
        {
            return retailPickupTimeslotAvailabilityTmp;
        }

        date nearestDate;
        TimeOfDay nearestTimeOfDay;
        // If minimum limit setting is less than 1 day it means hours, otherwise it means days.
        if (retailPickupTimeslotTemplate.MinimumLimit < RetailPickupTimeslotDefaultValues::getMinutesPerDay())
        {
            // We use decRound for the nearest hour.
            int minimumHours = real2int(decRound(retailPickupTimeslotTemplate.MinimumLimit / RetailPickupTimeslotDefaultValues::getMinutesPerHour(), 0));
            utcdatetime nearestDateTime = DateTimeUtil::addHours(currentDateTimeOfPickupStore, minimumHours);
            nearestDate = DateTimeUtil::date(nearestDateTime);
            nearestTimeOfDay = DateTimeUtil::time(nearestDateTime);
        }
        else
        {
            int minimumDays = retailPickupTimeslotTemplate.MinimumLimit / RetailPickupTimeslotDefaultValues::getMinutesPerDay();
            nearestDate = DateTimeUtil::date(DateTimeUtil::addDays(currentDateTimeOfPickupStore, minimumDays));
            nearestTimeOfDay = 0;
        }

        if (_pickupDate < nearestDate)
        {
            return retailPickupTimeslotAvailabilityTmp;
        }

        WeekDays weekDay = dayOfWk(_pickupDate);
        FieldId correspondingActiveDateFieldId = fieldName2Id(tableNum(RetailPickupTimeslotSetting), strFmt('ActiveOn%1', enum2Str(weekDay)));
        RetailPickupTimeslotSetting retailPickupTimeslotSetting;
        while select retailPickupTimeslotSetting
            where retailPickupTimeslotSetting.TimeslotTemplateId == retailPickupTimeslotTemplate.RecId
               && retailPickupTimeslotSetting.DlvMode == _dlvModeId
               && _pickupDate >= retailPickupTimeslotSetting.StartDate
               && _pickupDate <= retailPickupTimeslotSetting.EndDate
               && retailPickupTimeslotSetting.(correspondingActiveDateFieldId) == NoYes::Yes
        {
            RetailFromTime timeslotStartTime = retailPickupTimeslotSetting.StartTime;
            while (timeslotStartTime < retailPickupTimeslotSetting.EndTime)
            {
                RetailToTime timeslotEndTime;
                if (retailPickupTimeslotSetting.Interval == 0)
                {
                    // By design, interval of 0 means the whole day is one single timeslot
                    timeslotEndTime = retailPickupTimeslotSetting.EndTime;
                }
                else
                {
                    timeslotEndTime = any2Int(min(timeslotStartTime + retailPickupTimeslotSetting.Interval * RetailPickupTimeslotDefaultValues::getSecondsPerMinute(), retailPickupTimeslotSetting.EndTime));
                }

                // Honor nearest time settings.
                // Pickup timeslot start datetime (_pickupDate, timeslotStartTime) must be later than neareast datetime (nearestDate, nearestTimeOfDay).
                if (_pickupDate > nearestDate || timeslotStartTime >= nearestTimeOfDay)
                {
                    retailPickupTimeslotAvailabilityTmp.clear();
                    retailPickupTimeslotAvailabilityTmp.StartTime = timeslotStartTime;
                    retailPickupTimeslotAvailabilityTmp.EndTime = timeslotEndTime;
                    retailPickupTimeslotAvailabilityTmp.AvailableQuantity = retailPickupTimeslotSetting.CapacityPerInterval;
                    retailPickupTimeslotAvailabilityTmp.insert();
                }
                
                timeslotStartTime = timeslotEndTime;
            }
        }

        return retailPickupTimeslotAvailabilityTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeslotAvailabilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Join the occupations with the RetailPickupTimeslotAvailabilityTmp and calculate the available capacity by (CapacityPerInterval - Occupation).
    /// </summary>
    /// <param name = "_dlvModeId">Delivery Mode</param>
    /// <param name = "_pickupDate">Date for picking up</param>
    /// <param name = "_pickupStoreId">Pickup Store</param>
    /// <returns>
    /// Return <c>RetailPickupTimeslotAvailabilityTmp</c> with data of all the timeslot based on the parameters given and the availability of each timeslot.
    /// </returns>
    public static RetailPickupTimeslotAvailabilityTmp getTimeslotAvailabilities(DlvModeId _dlvModeId, RetailPickupDate _pickupDate, RetailStoreId _pickupStoreId)
    {
        RetailPickupTimeslotAvailabilityTmp retailPickupTimeslotAvailabilityTmp = RetailPickupTimeslotHandler::getAvailableTimeslotSettings(_dlvModeId,_pickupDate,_pickupStoreId);
        
        RetailPickupTimeslotSalesOrderAllocationView retailPickupTimeslotSalesOrderAllocationView;
        RetailPickupTimeslotRetailTransactionAllocationView retailPickupTimeslotRetailTransactionAllocationView;        

        // Deduct allocation by sales order lines
        update_recordset retailPickupTimeslotAvailabilityTmp
            setting AvailableQuantity = retailPickupTimeslotAvailabilityTmp.AvailableQuantity - retailPickupTimeslotSalesOrderAllocationView.AllocatedQuantity
            join retailPickupTimeslotSalesOrderAllocationView
            where retailPickupTimeslotSalesOrderAllocationView.DlvMode == _dlvModeId
               && retailPickupTimeslotSalesOrderAllocationView.PickupDate == _pickupDate
               && retailPickupTimeslotSalesOrderAllocationView.FulfillmentStoreId == _pickupStoreId
               && retailPickupTimeslotSalesOrderAllocationView.PickupStartTime == retailPickupTimeslotAvailabilityTmp.StartTime
               && retailPickupTimeslotSalesOrderAllocationView.PickupEndTime == retailPickupTimeslotAvailabilityTmp.EndTime;

 
        // Deduct allocation by retail transactions
        update_recordset retailPickupTimeslotAvailabilityTmp
            setting AvailableQuantity = retailPickupTimeslotAvailabilityTmp.AvailableQuantity - retailPickupTimeslotRetailTransactionAllocationView.AllocatedQuantity
            join retailPickupTimeslotRetailTransactionAllocationView
            where retailPickupTimeslotRetailTransactionAllocationView.DlvMode == _dlvModeId
               && retailPickupTimeslotRetailTransactionAllocationView.PickupDate == _pickupDate
               && retailPickupTimeslotRetailTransactionAllocationView.FulfillmentStoreId == _pickupStoreId
               && retailPickupTimeslotRetailTransactionAllocationView.PickupStartTime == retailPickupTimeslotAvailabilityTmp.StartTime
               && retailPickupTimeslotRetailTransactionAllocationView.PickupEndTime == retailPickupTimeslotAvailabilityTmp.EndTime;

        return retailPickupTimeslotAvailabilityTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeToStrHourMinute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer the time into the format "08:00PM".
    /// </summary>
    /// <param name = "time">Time</param>
    /// <returns>
    /// Formatted str of time
    /// </returns>
    public static str timeToStrHourMinute(TimeOfDay _time)
    {
        str timeStr = strUpr(time2Str(_time, TimeSeparator::Colon, TimeFormat::Hour24));
        str timeStrHM = subStr(timeStr, 0, 5) + subStr(timeStr, 9, strLen(timeStr) - 8);

        return timeStrHM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>