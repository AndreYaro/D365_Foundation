<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrSalesPurgeBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRSalesPurgeBatch</c> copies sales orders
/// into history tables and deletes the originals.
/// </summary>
class McrSalesPurgeBatch extends RunBaseBatch implements BatchRetryable
{
    // Packed variables
    CustAccount             cleanUpCustAccount;
    TransDate               cleanUpDate;
    Integer                 cleanUpAged;
    // Dialog fields
    DialogField             dialogCleanUpCust;
    DialogField             dialogCleanUpAged;
    DialogField             dialogCleanUpDate;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        cleanUpCustAccount,
        cleanUpAged,
        cleanupDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmPurge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to confirm they want to perform the purging of <c>SalesTable</c> records.
    /// </summary>
    /// <param name="_salesTable">
    /// A <c>SalesTable</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>DialogButton</c> enum indicating the button the user selected.
    /// </returns>
    public DialogButton confirmPurge(SalesTable _salesTable)
    {
        return Box::yesNo(strFmt("@MCR34252", int642str(_salesTable.RecId)), DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        #resAppl;

        dialogCleanUpCust = dialog.addFieldValue(extendedTypeStr(CustAccount), cleanUpCustAccount);
        dialogCleanUpAged = dialog.addFieldValue(extendedTypeStr(Integer), cleanUpAged, "@MCR34250", "@MCR34251");
        dialogCleanUpDate = dialog.addFieldValue(extendedTypeStr(TransDate), cleanUpDate, "@MCR33874", "@MCR33612");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the dialog posting logic.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>DialogRunbase</c> object to be run.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        cleanUpCustAccount     = dialogCleanUpCust.value();
        cleanUpAged     = dialogCleanUpAged.value();
        cleanUpDate     = dialogCleanUpDate.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variable for the <c>MCRSalesPurgeBatch</c> class.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the sales line.
    /// </summary>
    /// <param name="_salesId">
    /// The ID of the sales line record for which this method processes.
    /// </param>
    /// <returns>
    /// true if processing should continue; otherwise, false.
    /// </returns>
    public boolean processSalesLine(SalesIdBase   _salesId)
    {
        SalesLine                   salesLine, salesLineOld;
        MCRHistSalesLine            mcrHistSalesLine;
        boolean                     okToContinue;
        LineNum                     saveLineNum;
        okToContinue    = true;
        while select forupdate salesLine
            where salesLine.SalesId == _salesId
        {
            if (!okToContinue)
            {
                return okToContinue;
            }
            saveLineNum = salesLine.LineNum;
            // copy the salesLine data
            mcrHistSalesLine.createFromSalesLine(salesLine);

            // now that archive of salesLine and child tables is complete, delete the salesLine
            salesLine.doDelete();

            // check and see if delete was succesful, if not reverse by deleting the salesLine copy
            // (delete actions will take care of the rest)
            select firstonly RecId, SalesId, LineNum from  salesLineOld
                where salesLineOld.SalesId == _salesId
                    && salesLineOld.LineNum == saveLineNum;
            if (salesLineOld)
            {
                okToContinue = false;
                delete_from mcrHistSalesLine
                    where mcrHistSalesLine.SalesId  == salesLineOld.SalesId
                        &&    mcrHistSalesLine.LineNum  == salesLineOld.LineNum;
            }
        }

        return okToContinue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the sales table.
    /// </summary>
    /// <param name="_salesTable">
    /// The ID of the sales table record for which this method processes.
    /// </param>
    /// <returns>
    /// true if processing should continue; otherwise, false.
    /// </returns>
    public boolean processSalesTable(SalesTable   _salesTable)
    {
        MCRHistSalesTable        mcrHistSalesTable;
        boolean                  okToContinue = true;
        // copy the salesTable data
        mcrHistSalesTable.createFromSalesTable(_salesTable);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            okToContinue = MCRSalesPurgeBatch_BR::ProcessSalesTable_BR(_salesTable);
        }
        // </GBR>

        // copy the salesLine data
        if (okToContinue)
        {
        okToContinue    = this.processSalesLine(_salesTable.SalesId);
        }

        if (!okToContinue)
        {
            delete_from mcrHistSalesTable
                where mcrHistSalesTable.SalesId == _salesTable.SalesId;
        }
        return okToContinue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        if (!super())
        {
            if (dialogCanceled
            && this.batchInfo())
            {
                this.batchInfo().parmBatchExecute(false);
            }
            return false;
        }
        if (this.batchInfo()
        && (this.batchInfo().parmBatchExecute()
        ||  this.mustGoBatch()))
        {
            this.batchInfo().doBatch();
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeRecord</Name>
				<Source><![CDATA[
    private int purgeRecord(SalesTable _salesTable)
    {
        int                     purgeCount = 0;
        SalesTable              salesTable = _salesTable;
        SalesTable              salesTableExch;
        boolean                 okSalesDelete;
        int                     recordCount = 0;

        // if return and apply credit, copy the exchange data
        if (salesTable.ReturnReplacementId
            && salesTable.mcrReturnSalesTable().ApplyCreditToExchange  == NoYes::Yes)
        {
            salesTableExch = SalesTable::find(salesTable.ReturnReplacementId, true);
            if (salesTableExch)
            {
                ttsbegin;
                okSalesDelete = this.processSalesTable(salesTableExch);
                if (okSalesDelete)
                {
                    // display sales order purged
                    info(strFmt("@MCR33832", salesTableExch.SalesId, salesTableExch.CustAccount));
                    // now that archive of salesTable and child tables is complete, delete the salesTable
                    if (salesTableExch.validateDelete())
                    {
                        salesTableExch.delete();
                    }
                    else
                    {
                        ttsabort;
                        throw error("@SYS104318");
                    }

                    purgeCount++;
                }
                ttscommit;
            }
        }

        ttsbegin;
        // copy the salesTable data
        okSalesDelete   = this.processSalesTable(salesTable);
        if (okSalesDelete)
        {
            // display sales order purged
            info(strFmt("@MCR33832", salesTable.SalesId, salesTable.CustAccount));
            // now that archive of salesTable and child tables is complete, delete the salesTable
            if (salesTable.validateDelete())
            {
                salesTable.delete();
            }
            else
            {
                ttsabort;
                throw error("@SYS104318");
            }

            purgeCount++;
        }
        ttscommit;
        return purgeCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        int                     purgeCount = 0;
        SalesTable              salesTable;
        MCRHistSalesTable       mcrHistSalesTable;
        DialogButton            dialogButton;
        int                     recordCount = 0;
        CustInvoiceJour         custInvoiceJour;
        utcdatetime             cleanUpDateTime;
        #OCCRetryCount

        if (cleanUpAged)
        {
            cleanUpDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - cleanUpAged;
            cleanUpDateTime = DateTimeUtil::newDateTime(cleanUpDate, 0);
        }

        select count(RecId) from salesTable
            where (salesTable.SalesStatus == SalesStatus::Invoiced
                    || salesTable.SalesStatus == SalesStatus::Canceled)
                && (salesTable.CustAccount == cleanUpCustAccount
                    || !cleanUpCustAccount)
                && salesTable.CreatedDateTime <= cleanUpDateTime;

        recordCount = int642int(salesTable.RecId);

        select count(RecId) from salesTable
            where (salesTable.SalesStatus == SalesStatus::Invoiced
                || salesTable.SalesStatus == SalesStatus::Canceled)
                && (salesTable.CustAccount == cleanUpCustAccount
                || !cleanUpCustAccount)
            exists join custInvoiceJour
            where custInvoiceJour.SalesId == salesTable.SalesId
                && (custInvoiceJour.InvoiceDate
                && custInvoiceJour.InvoiceDate <= cleanUpDate);

        recordCount += int642int(salesTable.RecId);

        if (salesTable.RecId)
        {
            if (RetailSalesOrderPurgeFlight::instance().isEnabled())
            {
                // Check if running under batch
                if (!BatchHeader::isExecutingInBatch())
                {
                    if (this.confirmPurge(salesTable) != DialogButton::Yes)
                    {
                        // Exit if user did not confirm
                        return;
                    }
                }
                try
                {
                    // Purge Canceled orders
                    while select forupdate salesTable
                        where (salesTable.SalesStatus == SalesStatus::Canceled)
                            && (salesTable.CustAccount == cleanUpCustAccount
                                || !cleanUpCustAccount)
                            && salesTable.CreatedDateTime <= cleanUpDateTime
                        notexists join mcrHistSalesTable
                        where mcrHistSalesTable.SalesId  == salesTable.SalesId
                    {
                        purgeCount += this.purgeRecord(salesTable);
                    }

                    // Purge Invoiced orders
                    while select forupdate salesTable
                        where (salesTable.SalesStatus == SalesStatus::Invoiced)
                            && (salesTable.CustAccount == cleanUpCustAccount
                                || !cleanUpCustAccount)
                        exists join custInvoiceJour
                        where custInvoiceJour.SalesId == salesTable.SalesId
                            && (custInvoiceJour.InvoiceDate
                                && custInvoiceJour.InvoiceDate <= cleanUpDate)
                        notexists join mcrHistSalesTable
                        where mcrHistSalesTable.SalesId  == salesTable.SalesId
                    {
                        purgeCount += this.purgeRecord(salesTable);
                    }

                    // notify the user on how many sales orders were purged
                    if (purgeCount > 0)
                    {
                        info(strFmt("@MCR33611", int2str(purgeCount)));
                    }
                    // notify user that there was nothing to purge
                    else
                    {
                        info("@MCR33610");
                    }
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
            else
            {
                dialogButton = this.confirmPurge(salesTable);
                if (dialogButton == DialogButton::Yes)
                {
                    try
                    {
                        // Purge Canceled orders
                        while select forupdate salesTable
                            where (salesTable.SalesStatus == SalesStatus::Canceled)
                                && (salesTable.CustAccount == cleanUpCustAccount
                                    || !cleanUpCustAccount)
                                && salesTable.CreatedDateTime <= cleanUpDateTime
                            notexists join mcrHistSalesTable
                            where mcrHistSalesTable.SalesId  == salesTable.SalesId
                        {
                            purgeCount += this.purgeRecord(salesTable);
                        }

                        // Purge Invoiced orders
                        while select forupdate salesTable
                            where (salesTable.SalesStatus == SalesStatus::Invoiced)
                                && (salesTable.CustAccount == cleanUpCustAccount
                                    || !cleanUpCustAccount)
                            exists join custInvoiceJour
                            where custInvoiceJour.SalesId == salesTable.SalesId
                                && (custInvoiceJour.InvoiceDate
                                    && custInvoiceJour.InvoiceDate <= cleanUpDate)
                            notexists join mcrHistSalesTable
                            where mcrHistSalesTable.SalesId  == salesTable.SalesId
                        {
                            purgeCount += this.purgeRecord(salesTable);
                        }

                        // notify the user on how many sales orders were purged
                        if (purgeCount > 0)
                        {
                            info(strFmt("@MCR33611", int2str(purgeCount)));
                        }
                        // notify user that there was nothing to purge
                        else
                        {
                            info("@MCR33610");
                        }
                    }
                    catch (Exception::Deadlock)
                    {
                        retry;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }
                }
            }
        }
        // notify user that there was nothing to purge
        else
        {
            info("@MCR33610");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR33609";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRSalesPurgeBatch   mcrSalesPurgeBatch = new MCRSalesPurgeBatch();
        mcrSalesPurgeBatch.getLast();
        if (mcrSalesPurgeBatch.prompt())
        {
            mcrSalesPurgeBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This batch job is not retryable because run() is not wrapped with a transaction.
    /// </summary>
    /// <returns>An instance of BatchInfo with the configuration for retryable and retries.</returns>
    public BatchInfo batchInfo()
    {
        BatchInfo info = super();

        info.parmRetryable(false);
        info.parmRetriesOnFailure(0);

        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>