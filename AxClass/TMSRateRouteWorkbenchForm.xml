<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRateRouteWorkbenchForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSRateRouteWorkbenchForm</c> class is used to process all the business logic in <c>TMSRateRouteWorkbench</c> form.
/// </summary>
class TMSRateRouteWorkbenchForm
{
    InventLocationId inventLocationId;
    InventSiteId     inventSiteId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign route to record supplied.
    /// </summary>
    /// <param name="_routeTable">
    ///     Route selected for assignment.
    /// </param>
    /// <param name="_recordType">
    ///     Type of record selected for route assignment.
    /// </param>
    /// <param name="_common">
    ///     Record selected for route assignment.
    /// </param>
    public void assignRoute(
        TMSRouteTable _routeTable,
        TMSRecordType _recordType,
        Common        _common)
    {
        TMSRouteCode            routeCode;
        Args                    args;
        MenuFunction            menuFunction;
        TMSRouteAssignment      routeAssignment;
        TMSRouteAssignment_Load routeAssignmentLoad;
        WHSLoadTable            loadTable;

        if (_recordType == TMSRecordType::Load)
        {
            loadTable = _common;

            if (loadTable.isLoadShipped())
            {
                throw error(strFmt("@TRX2494", loadTable.LoadId));
            }
        }

        if (_routeTable.IsScheduledRoute)
        {
            routeAssignmentLoad = TMSRouteAssignment_Load::newStandard(
                                    _routeTable,
                                    this,
                                    _common);

            routeCode = routeAssignmentLoad.findValidScheduledRoute(_routeTable);

            if (routeCode)
            {
                routeAssignmentLoad.updateScheduledRouteDates(_routeTable, routeCode, true);

                routeAssignmentLoad.assignToExistingRoute(routeCode);
            }
            else
            {
                throw error("@TRX:ErrorScheduledRouteMissingForAssignment");
            }
        }
        else
        {
            routeAssignment = TMSRouteAssignment::construct(_recordType);
            routeAssignment.parmRouteTable(_routeTable);
            routeAssignment.parmCTRL(this);
            routeAssignment.parmCommon(_common);

            routeAssignment.assignRoute();
            routeCode = routeAssignment.parmRouteCode();
        }

        if (routeCode)
        {
            args = new Args();
            args.record(TMSRoute::find(routeCode));
            menuFunction = new MenuFunction(menuitemDisplayStr(TMSRouteWorkbench), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInvalidInventLocationIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the warehouse filter if the site is changed.
    /// </summary>
    /// <returns>
    ///     The updated warehouse value.
    /// </returns>
    public InventLocationId clearInvalidInventLocationIdFilter()
    {
        InventLocation  inventLocation;

        inventLocation = InventLocation::find(inventLocationId);

        if (inventSiteId
        &&  inventLocation.InventSiteId != inventSiteId)
        {
            inventLocationId = '';
        }

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordCountValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record count for referenced record for which the rate route workbench was opened.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference table ID.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID.
    /// </param>
    /// <returns>
    /// A value based on the record count of the referenced record.
    /// </returns>
    public TMSName getRecordCountValue(RefTableId _refTableId, RefRecId _refRecId)
    {
        int64           total;
        int64           exceptions;
        tmsRouteTable   routeTable;

        if (_refTableId && _refRecId)
        {
            while select count(RecId), HasErrors from routeTable
                        group by HasErrors
                        where routeTable.createdBy  == curUserId()
                           && routeTable.RefTableId == _refTableId
                           && routeTable.RefRecId   == _refRecId
            {
                if (routeTable.HasErrors)
                {
                    exceptions = routeTable.RecId;
                }
                total += routeTable.RecId;
            }
        }

        return strFmt("@TRX1717", total, exceptions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRouteToLoadOutbound</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Open the <c>TMSAddRouteToLoadOutbound</c> form to add
    ///     the load to an existing route for the route selected.
    /// </summary>
    /// <param name="_loadTable">
    ///     <c>WHSLoadTable</c> buffer for the corresponding load.
    /// </param>
    /// <param name="_route">
    ///     RecId for the route selected for assignment.
    /// </param>
    public void openRouteToLoadOutbound(WHSLoadTable _loadTable, RecId _route)
    {
        Args    args;

        if (!_loadTable.isLoadShipped())
        {
            args = new Args();
            args.record(_loadTable);
            args.parm(strFmt('%1', _route));

            new MenuFunction(menuitemDisplayStr(TMSAddRouteToLoadOutbound), MenuItemType::Display).run(args);
        }
        else
        {
            throw error(strFmt("@TRX2494", _loadTable.LoadId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledRouteTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies routeTables tied the refence load and updates shipping and delivery dates based on the scheduled route dates.
    /// </summary>
    /// <param name = "_refRecId">RecId of the reference record tied to the routeTable</param>
    /// <param name = "_refTableId">TableId of the reference record tied to the routeTable</param>
    public void updateScheduledRouteTable(
        RefRecId    _refRecId,
        RefTableId  _refTableId)
    {
        TMSRouteAssignment_Load routeAssignment_Load = TMSRouteAssignment_Load::construct();
        TMSRouteTable           routeTable;

        while select routeTable
            where routeTable.RefRecId      == _refRecId
            &&    routeTable.RefTableId    == _refTableId

        {
            routeAssignment_Load.updateScheduledRouteDates(routeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Warns the user if a warehouse is set that is not connected to the site set.
    /// </summary>
    /// <returns>
    ///     True if the warehouse is valid; otherwise false.
    /// </returns>
    public boolean validateInventLocationId()
    {
        InventLocation  inventLocation;
        boolean         ret = true;

        if (inventLocationId)
        {
            inventLocation = InventLocation::find(inventLocationId);

            if (inventSiteId
            && inventLocation.InventSiteId != inventSiteId)
            {
                ret = checkFailed(strFmt("@WAX4606", inventSiteId, inventLocationId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSRateRouteWorkbenchForm construct()
    {
        return new TMSRateRouteWorkbenchForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>