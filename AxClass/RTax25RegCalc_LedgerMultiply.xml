<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_LedgerMultiply</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_LedgerMultiply extends RunBaseBatch implements BatchRetryable
{
    Set                         linesSet;
    RTax25LedgerRun             ledgerRun;
    RTax25StdDocuments          stdDocuments;
    Counter                     startCount;
    TransDate                   dateFrom, dateTo;
    RefRecId                    journalTransRecId;
    RTax25RegisterJournalTrans  registerJournalTrans;
    RTax25RegisterId            registerId;
    RTax25RegisterType          registerType;
    RTax25Query                 regQuery;
    boolean                     isInBatch;
    RTax25RegisterTransMap      regTrans;
    RTax25PeriodIterator        rTax25PeriodIterator;

    AmountMST                   totalAmount, profitAmount;
    Qty                         totalQty, profitQty;
    RefRecId                    lastProfitTableRecId;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        startCount,
        journalTransRecId,
        isInBatch,
        dateFrom,
        dateTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createBody()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFooter(Counter _i)
    {
        regQuery.addFooterRecord(lastProfitTableRecId,
                                 this.footerContainer(),
                                 0,
                                 lastProfitTableRecId ? strfmt("@GLS103999", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@SYS37297",
                                 _i);
        if (lastProfitTableRecId)
        {
            profitAmount    = 0;
            profitQty       = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createHeader(Counter _i)
    {
        regQuery.addHeaderRecord(lastProfitTableRecId,
                                 conNull(),
                                 0,
                                 lastProfitTableRecId ? strfmt("@GLS104111", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@SYS28004",
                                 _i);
    }

]]></Source>
			</Method>
			<Method>
				<Name>footerContainer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container footerContainer()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceAdjAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getAdvanceAdjAmount()
    {
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;
        CustInvoiceLine             custInvoiceLine;
        VendInvoiceTrans            vendInvoiceTrans;
        AmountMST                   advanceAdjAmount;
        AmountMST                   markupAmount;
        AmountMST                   taxAmount;
        AmountMST                   taxAmountMarkup;
        container                   ret;
        CustVendTransPostingLog_RU  postingLog;
        TaxTrans_RU                 taxTrans_RU;

        AmountMST getPostingLogTax(RefTableId _tableId, RefRecId _recId)
        {
            TaxTrans                    taxTrans;
            CustVendTransPostingLog_RU  postingLogTax;

            select sum(TaxAmount) from taxTrans
                exists join postingLogTax
                where taxTrans.TransDate                    == postingLogTax.TransDate  &&
                      taxTrans.Voucher                      == postingLogTax.Voucher    &&
                      taxTrans.SourceTableId            != tablenum(TaxTrans)           &&
                      postingLogTax.InvoiceTransTableId == _tableId                     &&
                      postingLogTax.InvoiceTransRecId   == _recId                       &&
                      postingLogTax.TransDate           == postingLog.TransDate         &&
                      postingLogTax.Voucher             == postingLog.Voucher           &&
                      postingLogTax.PostingLogType      == CustVendTransPostingLogType_RU::AdvanceAdjustment &&
                     !postingLogTax.Reversed                                            &&
                      postingLogTax.IsTaxed
                exists join taxTrans_RU
                where taxTrans_RU.TaxTrans == taxTrans.RecId
                && taxTrans_RU.CustVendTransPostingLog_RU   == postingLogTax.RecId;

            return taxTrans.TaxAmount;
        }

        container getPostingLogAmountMST(CustVendInvoiceTrans _custVendInvoiceTrans)
        {
            CustVendTransPostingLog_RU  postingLogLocal;
            CustVendTrans               custVendTrans;
            CustVendTrans               custVendTransOffset;
            MarkupTrans                 markupTrans;
            CurrencyCode                companyCurrency = CompanyInfoHelper::standardCurrency();
            boolean                     taxSpecPosting  = TaxParameters::find().TaxSpecPosting_RU &&
                                                         _custVendInvoiceTrans.TableId == tablenum(CustInvoiceTrans);

            while select postingLog
                where postingLog.InvoiceTransTableId    == _custVendInvoiceTrans.TableId &&
                      postingLog.InvoiceTransRecId      == _custVendInvoiceTrans.RecId   &&
                      postingLog.PostingLogType         == CustVendTransPostingLogType_RU::AdvanceAdjustment &&
                     !postingLog.Reversed                                                &&
                     !postingLog.IsTaxed
            {
                if (taxSpecPosting)
                {
                    taxAmount = getPostingLogTax(_custVendInvoiceTrans.TableId, _custVendInvoiceTrans.RecId);
                }

                custVendTrans       = new DictTable(postingLog.RefTableId).makeRecord();
                custVendTransOffset = new DictTable(postingLog.RefTableId).makeRecord();

                select firstonly custVendTrans
                    where custVendTrans.RecId == postingLog.TransRecId;

                select firstonly custVendTransOffset
                    where custVendTransOffset.RecId == postingLog.OffSetRecId;

                if (custVendTrans.CurrencyCode != companyCurrency && custVendTransOffset.CurrencyCode != companyCurrency)
                {
                    advanceAdjAmount += postingLog.AmountMST - taxAmount;

                    while select markupTrans
                        index hint TableRecIdIdx
                        where markupTrans.TransTableId  == _custVendInvoiceTrans.TableId &&
                              markupTrans.TransRecId    == _custVendInvoiceTrans.RecId   &&
                              markupTrans.CustVendPosted_RU
                    {
                        select firstonly postingLogLocal
                            where postingLogLocal.InvoiceTransTableId    == markupTrans.TableId &&
                                  postingLogLocal.InvoiceTransRecId      == markupTrans.RecId   &&
                                  postingLogLocal.PostingLogType         == CustVendTransPostingLogType_RU::AdvanceAdjustment &&
                                 !postingLogLocal.Reversed                                      &&
                                 !postingLogLocal.IsTaxed;

                        if (taxSpecPosting)
                        {
                            taxAmountMarkup = getPostingLogTax(markupTrans.TableId, markupTrans.RecId);
                        }

                        markupAmount += postingLogLocal.AmountMST - taxAmountMarkup;
                    }
                }
            }

            if (_custVendInvoiceTrans.TableId == tablenum(VendInvoiceTrans))
            {
                advanceAdjAmount    = -advanceAdjAmount;
                markupAmount        = -markupAmount;
            }

            return [advanceAdjAmount, markupAmount];
        }

        switch (stdDocuments.tableId())
        {
            case tablenum(CustInvoiceLine):
                custInvoiceLine = CustInvoiceLine::find(stdDocuments.recId());
                custInvoiceJour = custInvoiceLine.custInvoiceTable().custInvoiceJour();
                while select custInvoiceTrans
                    where custInvoiceTrans.LedgerDimension     == custInvoiceLine.LedgerDimension  &&
                          custInvoiceTrans.DefaultDimension    == custInvoiceLine.DefaultDimension &&
                          custInvoiceTrans.SalesId             == custInvoiceJour.SalesId          &&
                          custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId        &&
                          custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate      &&
                          custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
                {
                    if (linesSet.in([tablenum(CustInvoiceTrans), custInvoiceTrans.RecId]))
                        continue;

                    linesSet.add([tablenum(CustInvoiceTrans), custInvoiceTrans.RecId]);

                    ret = getPostingLogAmountMST(custInvoiceTrans);
                    break;
                }
                break;
            case tablenum(CustInvoiceTrans):
                custInvoiceTrans = CustInvoiceTrans::findRecId(stdDocuments.recId());
                ret = getPostingLogAmountMST(custInvoiceTrans);
                break;
            case tablenum(VendInvoiceTrans):
                vendInvoiceTrans = VendInvoiceTrans::findRecId(stdDocuments.recId());
                ret = getPostingLogAmountMST(vendInvoiceTrans);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunFinal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initRunFinal()
    {
        dateTo = registerJournalTrans.toDate();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initRunItem()
    {
        stdDocuments = RTax25StdDocuments::construct();
        ledgerRun    = RTax25LedgerRun::newRegisterId(stdDocuments,
                                                      methodstr(RTax25StdDocuments, loadDocument),
                                                      registerJournalTrans.RegisterId);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, rTax25PeriodIterator.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmDateRange(TransDate           _dateFrom,
                              TransDate           _dateTo)
    {
        ;
        dateFrom = _dateFrom;
        dateTo   = _dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInBatch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIsInBatch(RefRecId _isInBatch = isInBatch)
    {
        ;
        isInBatch = _isInBatch;
        return isInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTransRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmJournalTransRecId(RefRecId _journalTransRecId = journalTransRecId)
    {
        ;
        journalTransRecId = _journalTransRecId;
        return journalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRTax25PeriodIterator</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25PeriodIterator parmRTax25PeriodIterator(RTax25PeriodIterator _rTax25PeriodIterator = rTax25PeriodIterator)
    {
        ;
        rTax25PeriodIterator = _rTax25PeriodIterator;
        return rTax25PeriodIterator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmStartCount(int _startCount = startCount)
    {
        ;
        startCount = _startCount;
        return startCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processLedgerTrans()
    {
        if (! isInBatch)
        {
            progress.setText(strfmt(stdDocuments.docName()));
            progress.incCount();
        }
        this.createBody();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInit</Name>
				<Source><![CDATA[
    public void progressInit(str              _caption,
                             int64            _total,
                             Filename         _animation = #AviUpdate,
                             int              _numOfBars = 1,
                             FormBuildControl embedded = null)
    {
        str localCaption;
        ;
        localCaption = _caption ? _caption : this.caption();
        super(localCaption,_total,_animation,_numOfBars,embedded);
        progress.setCount(0, _numOfBars);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        select firstonly registerJournalTrans
            where registerJournalTrans.RecId == journalTransRecId;

        registerId   = registerJournalTrans.RegisterId;
        registerType = RTax25RegisterTable::registerId2Type(registerId);
        regQuery     = RTax25Query::newParameters(registerType, registerJournalTrans, true);

        regTrans     = new SysDictTable(regQuery.getRegType().detachedTableId()).makeRecord();
        if (startCount)
        {
            this.initRunItem();
            this.runItem();
        }
        else
        {
            this.initRunFinal();
            this.runFinal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runFinal()
    {
        ttsbegin;

        select firstonly RecId from regTrans
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId;

        if (regTrans.RecId)
        {
            this.sortRegisterTrans();
        }
        regQuery.insertDatabase();

        registerJournalTrans.selectForUpdate(true);
        registerJournalTrans.Status = RTax25RegisterStatus::Calculated;
        registerJournalTrans.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runItem()
    {
        #OCCRetryCount

        ledgerRun.run(dateFrom, dateTo, rTax25PeriodIterator);

        if (! isInBatch)
            this.progressInit("", stdDocuments.mapElements());

        try
        {
            ttsbegin;

            while (stdDocuments.more())
            {
                this.processLedgerTrans();
                stdDocuments.next();
            }
            regQuery.insertDatabase();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void sortRegisterTrans()
    {
        RTax25RegisterTransMap  trans;
        int                     i = 1;
        boolean                 headerCreatedProfit = false, headerCreatedMain = false;
        ;

        trans = new SysDictTable(regQuery.getRegType().detachedTableId()).makeRecord();

        select count(RecId) from regTrans
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId;

        if (! isInBatch)
            this.progressInit("@SYS4138", regTrans.RecId);

        trans.skipDataMethods(true);
        trans.skipDatabaseLog(true);
        trans.skipEvents(true);

        while select RTax25ProfitTable from regTrans
            group RTax25ProfitTable
        {
            headerCreatedProfit = false;
            while select forupdate trans
                order by LineNumber desc
                where trans.JournalTransRefRecId == registerJournalTrans.RecId &&
                      trans.RTax25ProfitTable    == regTrans.RTax25ProfitTable
            {
                if (! headerCreatedMain)
                {
                   lastProfitTableRecId = 0;
                   this.createHeader(i);
                   i++;
                   headerCreatedMain = true;
                }
                if (! headerCreatedProfit)
                {
                    lastProfitTableRecId = regTrans.RTax25ProfitTable;
                    this.createHeader(i);
                    i++;
                }
                this.totals(trans);
                trans.LineNumber = i;
                trans.doUpdate();
                i++;
                headerCreatedProfit = true;
                if (! isInBatch)
                    progress.incCount();
            }
            if (headerCreatedProfit)
            {
                this.createFooter(i);
                i++;
            }
        }
        if (headerCreatedMain)
        {
            lastProfitTableRecId = 0;
            this.createFooter(i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void totals(RTax25RegisterTransMap _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   packedPeriod;
        boolean     ret = true;
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedPeriod] = packedClass;
                if (packedPeriod)
                {
                    ret = rTax25PeriodIterator.unpack(packedPeriod);
                }
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc_LedgerMultiply construct(RTax25RegisterType _registerType)
    {
        RTax25RegCalc_LedgerMultiply ret;
        ;

        switch (_registerType)
        {
            case RTax25RegisterType::PaymentConsumption:
            case RTax25RegisterType::PaymentReceipt:
                ret = new RTax25RegCalc_LedgerPaymentMult();
                break;
            case RTax25RegisterType::Income:
                ret = new RTax25RegCalc_IncomeMult();
                break;
            case RTax25RegisterType::NonInventIssue:
                ret = new RTax25RegCalc_NonInvIssueMult();
                break;
            case RTax25RegisterType::NonInventReceipt:
                ret = new RTax25RegCalc_NonInvReceiptMult();
                break;
            case RTax25RegisterType::NotInfluenceIncome:
                ret = new RTax25RegCalc_NotInfluenceIncomeMult();
                break;
            case RTax25RegisterType::OutlayUnrealOther:
                ret = new RTax25RegCalc_OutlayUnrealOtherMult();
                break;

            default :
                ret = RTax25RegCalc_LedgerMultiply::constructDefault(_registerType);
                if (!ret)
                {
                    throw error(error::wrongUseOfFunction(funcname()));
                }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_registerType">A main register type.</param>
    /// <returns>An instance of a class <c>RTax25RegCalc_LedgerMultiply</c>, if extended.</returns>
    protected static RTax25RegCalc_LedgerMultiply constructDefault(RTax25RegisterType _registerType)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>