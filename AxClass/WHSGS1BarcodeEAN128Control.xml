<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSGS1BarcodeEAN128Control</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSGS1BarcodeEAN128Control extends WHSGS1BarcodeEAN128Base
{
    private WhsControl          control;
    private WHSRFPassthrough    fieldValues;
    private WhsrfControlData    controlData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSGS1BarcodeEAN128Control construct(WhsControl _control, 
                                                            WHSMenuItemName _menuItemName, 
                                                            WHSRFPassthrough _pass, 
                                                            WHSRFPassthrough _fieldValues, 
                                                            WhsrfControlData    _controlData)
    {
        WHSGS1BarcodeEAN128Control barcodeEAN128 = new WHSGS1BarcodeEAN128Control();

        barcodeEAN128.control = _control;
        barcodeEAN128.decodeStr = _control.parmData();
        barcodeEAN128.pass = _pass;
        barcodeEAN128.fieldValues = _fieldValues;
        barcodeEAN128.controlData = _controlData;
        WHSGS1PolicyTable policy = WHSGS1BarcodeEAN128Base::findPolicyTable(_pass.lookupStr(#MenuItem));
        barcodeEAN128.policyName = policy.PolicyName;
        barcodeEAN128.policyAction = policy.Action;
        barcodeEAN128.controlName = _control.parmName();

        return barcodeEAN128;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithControlAndParser</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSGS1BarcodeEAN128Control newWithControlAndParser(WhsControl _control,
                                                                       WHSIBarcodeDataParser _parser,
                                                                       WHSMenuItemName _menuItemName,
                                                                       WHSRFPassthrough _pass,
                                                                       WHSRFPassthrough _fieldValues,
                                                                       WhsrfControlData    _controlData)
    {
        WHSGS1BarcodeEAN128Control barcodeEAN128 = new WHSGS1BarcodeEAN128Control();

        barcodeEAN128.control = _control;        
        barcodeEAN128.pass = _pass;
        barcodeEAN128.fieldValues = _fieldValues;
        barcodeEAN128.controlData = _controlData;
        WHSGS1PolicyTable policy = WHSGS1BarcodeEAN128Base::findPolicyTable(_menuItemName);
        barcodeEAN128.policyName = policy.PolicyName;
        barcodeEAN128.policyAction = policy.Action;
        barcodeEAN128.controlName = _control.parmName();
        
        if (_parser is WHSGS1Parser)
        {
            barcodeEAN128.valueParser = _parser;
        }

        barcodeEAN128.barcodeDataParser = _parser;

        return barcodeEAN128;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMDIdentifierAlreadyPopulated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isMDIdentifierAlreadyPopulated(WHSGS1MDIdentifier _mdIdentifier)
    {
       return fieldValues.hasValue(_mdIdentifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected internal void setValue(WHSGS1MDIdentifier _mdIdentifier, str _value)
    {
        if (this.isProcessImmediatelyPolicy())
        {
            switch (_mdIdentifier)
            {
                case #Qty:
                    controlData.qtyDefaultedFromScan = true;
                    break;

                case #ItemId:
                    InventInventItemSearch localInventItemSearch = InventInventItemSearch::construct();
                    InventInventItemSearchResult localInventItemSearchResult = localInventItemSearch.search(_value);
                        
                    if (localInventItemSearchResult)
                    {
                        _value = localInventItemSearchResult.parmItemId();

                        UnitOfMeasureSymbol uom;

                        uom = localInventItemSearchResult.parmUnitOfMeasureSymbol();

                        // If a unit of measure was found default the selected unit of measure to it.
                        if (uom)
                        {
                            if (!WHSUOMSeqGroupLine::existByItemId(_value, uom))
                            {
                                control.fail(strFmt("@WAX:InvalidUnitOfMeasureForItem", uom));
                            }
                            else
                            {
                                this.addUOMValue(uom);
                            }
                        }

                    
                        InventDimId itemInventDimId = localInventItemSearchResult.parmInventDimId();

                        if (itemInventDimId)
                        {
                            fieldValues.addProductDimensions(
                            _value,
                            InventDim::find(localInventItemSearchResult.parmInventDimId()));
                        }
                    
                    }
                    break;
            }
        }           

        if (this.isSaveForDefaultPolicy())
        {
            if (!this.isMDIdentifierAlreadyPopulated(_mdIdentifier))
            {
                if (_mdIdentifier != controlName)
                {
                    this.populateGS1ScannedValues(_mdIdentifier, _value);
                }
                else
                {
                    // value will be already populated as part of processing the control
                    this.populateGS1UsedScannedValues(_mdIdentifier, _value);
                }
            }
        }
        else
        {
            fieldValues.insert(_mdIdentifier, _value);
        }

        if (_mdIdentifier == control.parmName())
        {
            control.parmData(_value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessImmediatelyPolicy</Name>
				<Source><![CDATA[
    private boolean isProcessImmediatelyPolicy()
    {
        WHSGS1PolicyTable policy = WHSGS1BarcodeEAN128Base::findPolicyTable(pass.lookupStr(#MenuItem));

        return policy.RecId != 0 && policy.Action == WhsGS1PolicyAction::InsertIntoPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUOMValue</Name>
				<Source><![CDATA[
    private void addUOMValue(str _uom)
    {
        if (policyAction == WhsGS1PolicyAction::SaveForDefault)
        {
            this.populateGS1ScannedValues(#SelectedValueUOM, _uom);
        }
        else
        {
            fieldValues.insert(#SelectedValueUOM, _uom);
            pass.insert(#SelectedValueUOM, _uom);
        }
        
        controlData.parmSaveUOMValue(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>