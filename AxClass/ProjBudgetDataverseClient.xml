<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetDataverseClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Dynamics.HttpCommunication;
using Microsoft.Dynamics.HttpCommunication.S2SAuthentication;
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm;
using System.IO;

internal class ProjBudgetDataverseClient
{
    private SysInstrumentationLogger logger= SysInstrumentationLoggerFactory::CreateLogger('ProjBudgetDataverseClient');


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataverseClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates and returns a new instance of the ProjBudgetDataverseClient class.
    /// This method can be used when a new connection to the Dataverse is needed.
    /// </summary>
    /// <returns>A new instance of the ProjBudgetDataverseClient class.</returns>
    public ProjBudgetDataverseClient getDataverseClient()
    {
        return new ProjBudgetDataverseClient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBuilder</Name>
				<Source><![CDATA[
    private ProjBudgetQueryExpressionInterface getQueryBuilder(DataverseEntity _dataverseEntity)
    {
        using (var context = logger.activityContext('getQueryBuilder', 'getQueryBuilderMetricNamespace'))
        {
            ProjBudgetQueryExpressionInterface queryBuilder = null;

            ProjBudgetDataverseQueryFactory builderFactory = new ProjBudgetDataverseQueryFactory();

            queryBuilder = builderFactory.getBuilder(_dataverseEntity);

            if(!queryBuilder)
            {
                logger.logError(strFmt("Unable to create query builder as Dataverse Entity: %1", _dataverseEntity));

                throw Error("@proj:ProjBudgetEnumNull");
            }
            logger.logInformation(strFmt("Successfully created query builder for Dataverse Entity: %1", _dataverseEntity));

            return queryBuilder;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    private ICollection executeQuery(QueryExpression _query)
    {
        using (var context = logger.activityContext('executeQuery', 'executeQueryMetricNamespace'))
        {
            logger.logError(strFmt("Executing Query with Entity : %1", _query.EntityName));

            ICollection entityCollection = null;

            ProjBudgetIorgClient iorgClient = new ProjBudgetIorgClient();

            entityCollection = iorgClient.getSubmissionResult(_query);

            logger.logError(strFmt("Execution of query with entity name %1 is complete: %1", _query.EntityName));

            return entityCollection;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataverseEntityData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data for a specific Dataverse entity based on the provided conditions.
    /// It first generates a query using a query builder specific to the given Dataverse entity.
    /// The query is then executed, and the resulting entity collection is returned.
    /// </summary>
    /// <param name="_dataverseEntity">The DataverseEntity for which data should be retrieved.</param>
    /// <param name="_conditions">A map of conditions to use when building the query.</param>
    /// <returns>A collection of entities that match the given Dataverse entity and conditions.</returns>
    public ICollection getDataverseEntityData(DataverseEntity _dataverseEntity, Map _conditions)
    {
        using (var context = logger.activityContext('getDataverseEntityData', 'getDataverseEntityDataMetricNamespace'))
        {
            logger.logInformation(strFmt("Fetching data for Dataverse Entity: %1", _dataverseEntity));

            ProjBudgetQueryExpressionInterface queryBuilder = this.getQueryBuilder(_dataverseEntity);

            QueryExpression query = queryBuilder.build(_conditions);

            ICollection entityCollection = this.executeQuery(query);
            
            logger.logInformation(strFmt("Successfully fetched data for Dataverse Entity: %1", _dataverseEntity));

            return entityCollection;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>