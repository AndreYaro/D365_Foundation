<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetLVPTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetLVPTransfer</c> class provides functionality for transferring a single asset to a low
///    value pool.
/// </summary>
/// <remarks>
///    This class provides a dialog so that specific information for the transfer of an asset to a low
///    value pool can be specified. This class will then create the necessary <c>LedgerJournalTrans</c>
///    and <c>LedgerJournalTrans_Asset</c> records for the transaction. This class will not post the
///    transaction but will provide the information on the journal name and journal number created.
/// </remarks>

class AssetLVPTransfer extends RunBase
{
    AssetId                     assetId;
    AssetBookId                 bookId;
    AssetTransDate              transDate;
    LedgerJournalNameId         journalName;
    AssetBook                   assetBook;
    Voucher                     voucher;
    LedgerJournalId             journalNum;
    AssetLowValuePoolType_AU    lvpType;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        assetBook,
        assetId,
        bookId,
        transDate,
        journalName,
        lvpType
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>AssetBook</c> table for the class.
    /// </summary>
    /// <returns>
    ///    The <c>AssetDepBook</c> table for the class.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetBook assetBook()
    {
        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>LedgerJournalTrans</c> and <c>LedgerJournalTrans_Asset</c> transactions for the given
    ///    parameters.
    /// </summary>
    /// <param name="_paymentAmount">
    ///    The amount of the transaction.
    /// </param>
    /// <param name="_assetBook">
    ///    The  asset book of the transaction.
    /// </param>
    /// <param name="_assetTransType">
    ///    The type of the asset transaction journal.
    /// </param>
    /// <param name="_lvpTransferId">
    ///    The transfer to asset ID; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTrans(AmountCur                    _paymentAmount,
                            AssetBook                       _assetBook,
                            AssetTransTypeJournal           _assetTransType,
                            AssetLowValuePoolTransferId_AU  _lvpTransferId = '')

    {
        LedgerJournalTrans            ledgerJournalTrans;
        LedgerJournalTrans_Asset      ledgerJournalTrans_Asset;
        TransactionTxt                transactionTxt;
        LedgerDimensionDefaultAccount defaultAccount;

        transactionTxt    = TransactionTxt::construct(LedgerTransTxt::FixedAssetsPostingLedger);
        transactionTxt.setDate(transDate);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setKey1(_assetBook.AssetId);
        transactionTxt.setKey2(AssetTable::find(_assetBook.AssetId).AssetGroup);

        ledgerJournalTrans.clear();

        ledgerJournalTrans.JournalNum           = journalNum;
        ledgerJournalTrans.Voucher              = voucher;
        ledgerJournalTrans.parmAccount(_assetBook.AssetId, LedgerJournalACType::FixedAssets);
        ledgerJournalTrans.PostingProfile       = AssetTable::find(_assetBook.AssetId).postingProfile(_assetBook.BookId);
        ledgerJournalTrans.TransactionType      = LedgerTransType::FixedAssets;
        ledgerJournalTrans.TransDate            = transDate;
        ledgerJournalTrans.CurrencyCode         = Ledger::accountingCurrency();
        ledgerJournalTrans.ExchRate             = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.DefaultDimension     = AssetTable::find(_assetBook.AssetId).defaultDimension(_assetBook.BookId);
        ledgerJournalTrans.Txt                  = transactionTxt.txt();
        ledgerJournalTrans.Company              = curext();

        if (_paymentAmount > 0)
            ledgerJournalTrans.AmountCurDebit   = CurrencyExchangeHelper::amount(_paymentAmount, ledgerJournalTrans.CurrencyCode);
        else
            ledgerJournalTrans.AmountCurCredit  = CurrencyExchangeHelper::amount(-_paymentAmount, ledgerJournalTrans.CurrencyCode);

        ledgerJournalTrans.insert();

        // Setup LedgerJouranlTrans_Asset
        ledgerJournalTrans_Asset.RefRecId       = ledgerJournalTrans.RecId;
        ledgerJournalTrans_Asset.BookId         = _assetBook.BookId;
        ledgerJournalTrans_Asset.TransType      = _assetTransType;
        ledgerJournalTrans_Asset.AssetId        = ledgerJournalTrans.parmAccount();
        ledgerJournalTrans_Asset.Company        = ledgerJournalTrans.Company;

        if (_assetTransType == AssetTransTypeJournal::Acquisition)
        {
            ledgerJournalTrans_Asset.LowValuePoolType_AU = this.parmLowValuePoolType();
        }
        else
        {
            ledgerJournalTrans_Asset.lvpTransferId_AU = _lvpTransferId;
        }

        ledgerJournalTrans_Asset.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog form to gather information for the transfer.
    /// </summary>
    /// <returns>
    ///    An <c>AssetLVPTransfer</c> dialog form.
    /// </returns>

    public Object dialog()
    {
        FormRun     dialogForm;
        Args        args = new Args(formstr(AssetLVPTransfer));
        ;
        args.caller(this);

        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last value from the <c>SysLastValue</c> table.
    /// </summary>
    /// <remarks>
    ///    This method is overridden.
    /// </remarks>

    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
       //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>AssetLVPTransfer</c> class.
    /// </summary>
    /// <param name="_assetBook">
    ///    The value model being transferred.
    /// </param>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initInstance(AssetBook _assetBook)
    {
        ;
        assetBook   = _assetBook;
        transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBook</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetBook parmAssetBook(AssetBook _assetBook = assetBook)
    {
        ;
        assetBook = _assetBook;

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        ;
        assetId = _assetId;

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetBookId parmBookId(AssetBookId _bookId = bookId)
    {
        ;
        bookId = _bookId;

        return bookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalNameId parmJournalName(LedgerJournalNameId _journalName = journalName)
    {
        ;
        journalName = _journalName;

        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLowValuePoolType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetLowValuePoolType_AU parmLowValuePoolType(AssetLowValuePoolType_AU _lvpType = lvpType)
    {
        ;
        lvpType = _lvpType;

        return lvpType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetTransDate parmTransDate(AssetTransDate _transDate = transDate)
    {
        ;
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the necessary transaction records to transfer value model assets to a low value pool.
    /// </summary>
    public void run()
    {
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalName       ledgerJournalName;
        Amount                  amount;
        AssetSumCalc_Trans      assetSumCalc_Trans;
        JournalVoucherNum       journalVoucherNum;
        AssetBook               transferToBook;

        assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId,assetBook.BookId);
        ttsbegin;

        journalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();

        ledgerJournalTable.JournalNum = journalNum;
        ledgerJournalTable.initFromLedgerJournalName(journalName);
        
        ledgerJournalName = ledgerJournalTable.ledgerJournalName();
        ledgerJournalTable.Name                     = "@SYS114016";
        ledgerJournalTable.NumberSequenceTable      = ledgerJournalName.NumberSequenceTable;
        ledgerJournalTable.parmOffsetLedgerDimension(ledgerJournalName.parmOffsetLedgerDimension());
        ledgerJournalTable.JournalType              = ledgerJournalName.JournalType;
        ledgerJournalTable.DocumentNum              = ledgerJournalName.DocumentNum;
        ledgerJournalTable.FixedExchRate            = ledgerJournalName.FixedExchRate;
        ledgerJournalTable.DetailSummaryPosting     = ledgerJournalName.DetailSummary;
        ledgerJournalTable.FixedOffsetAccount       = ledgerJournalName.FixedOffsetAccount;
        ledgerJournalTable.CurrencyCode             = ledgerJournalName.CurrencyCode;
        ledgerJournalTable.CurrentOperationsTax     = AssetBookTable::find(assetBook.BookId).CurrentOperationsTax;
        ledgerJournalTable.setDefaultDimension(ledgerJournalName);
        ledgerJournalTable.insert();

        amount  = assetSumCalc_Trans.netBookValue();

        journalVoucherNum = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(journalNum)));
        voucher = journalVoucherNum.getNew(true);

        transferToBook =  AssetBook::find(assetId,bookId);
        this.createTrans(-amount,assetBook,AssetTransTypeJournal::AcquisitionAdj, transferToBook.AssetId);

        assetBook = AssetBook::find(assetId,bookId);
        this.createTrans(amount,assetBook,AssetTransTypeJournal::Acquisition);

        journalVoucherNum.used(voucher);

        ttscommit;
        info (strfmt("@SYS114598",journalName,journalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last value to the <c>SysLastValue</c> table.
    /// </summary>
    /// <remarks>
    ///    This method is overridden.
    /// </remarks>

    public void saveLast()
    {
        // We do not want to call super here as we do not want to save the record to SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the class state.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true if the class state is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///       The following conditions are validated:
    ///    <list type="numbered">
    ///       <item>
    ///          <description>The asset exists</description>
    ///       </item>
    ///       <item>
    ///          <description>The value model exists for the asset</description>
    ///       </item>
    ///       <item>
    ///          <description>The transaction date is valid</description>
    ///       </item>
    ///       <item>
    ///          <description>The journal name is not empty</description>
    ///       </item>
    ///       <item>
    ///          <description>The transfer to value model is a low value pool</description>
    ///       </item>
    ///       <item>
    ///          <description>The transfer to asset uses low value pool depreciation</description>
    ///       </item>
    ///       <item>
    ///          <description>The net book value is below the low value cost of the transfer to asset</description>
    ///       </item>
    ///    </list>
    /// </remarks>

    public boolean validate(Object _calledFrom = null)
    {
        boolean      ret = true;
        ;
        if (!AssetTable::exist(assetId))
        {
            ret = checkFailed(strfmt("@SYS67413",assetId));     // Asset does not exist
        }

        if (!AssetBook::exist(assetId, bookId))
        {
            ret = checkFailed(strfmt("@FixedAssets:FA_MessageError_BookDoesNotExistForFixedAsset",bookId, assetId));     // Value model for asset does not exist
        }

        if (!transDate)
        {
            ret = checkFailed(strfmt("@SYS18414",transDate));   // transdate not filled in
        }

        if (!journalName)
        {
            ret = checkFailed(strfmt("@SYS21496",journalName));
        }

        if (!lvpType)
        {
            ret = checkFailed("@SYS114015");                   //low value pool type not filled in
        }

        if (!AssetBook::isLowValuePoolBook(bookId))
        {
            ret = checkFailed("@SYS114138");                 // value model not set up for low value pool
        }

        if (!AssetTable::isLowValuePoolAsset(assetId))
        {
            ret = checkFailed("@SYS114139");                 // asset not set up for low value pool
        }

        if (AssetBook::getLowValueCost(bookId) <= assetBook.assetNetBookValue())
        {
            ret = checkFailed(strfmt("@SYS119097", AssetBook::getLowValueCost(bookId)));  // transfer from asset net book value too high
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS114016";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AssetLVPTransfer      assetLVPTransfer;

        if (args.dataset() != tablenum(AssetBook))
            throw error(strfmt("@SYS25516", AssetLVPTransfer::description()));

        assetLVPTransfer = new AssetLVPTransfer();
        assetLVPTransfer.initInstance(args.record());

        if (assetLVPTransfer.prompt())
        {
            assetLVPTransfer.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>