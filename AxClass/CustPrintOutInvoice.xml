<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrintOutInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPrintOutInvoice
{
    CustInvoiceTable custInvoiceTable;
    CustInvoiceJour custInvoiceJour;

    CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
    container printerSettingsFreeText;
    container printerSettingsFreeTextCopy;
    #ISOCountryRegionCodes

    boolean isBatched;
    FormletterProformaPrint formletterProformaPrint;
    private boolean showWarningMessageSendToXML = true;
    private boolean isItalianContext = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);

    // <GTH>
    TaxUnrealizedDocuId docuSetCode;
    // </GTH>

    PrintInMST_RU printInMST;
    NoYes printFormletter;
    NoYes printAcceptanceReport;
    NoYes printFacture;

    NoYes printCODCashReceipt_W;

    private CustPrintOutInvoiceInstrumentationLogger custPrintOutInvoiceLogger = CustPrintOutInvoiceInstrumentationLogger::createLogger();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpProforma</Name>
				<Source><![CDATA[
    void cleanUpProforma()
    {
        CustInvoiceTrans custInvoiceTrans;
        DocuRef docuRef;
        BaseDocument_IT baseDocument_IT;

        using (var cleanUpProformaActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoiceCleanUpProforma))
        {
            ttsbegin;

            while select custInvoiceTrans
                index hint InvoiceIdx
                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                    custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                    custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
            {
                delete_from docuRef
                    where docuRef.RefTableId == tableNum(CustInvoiceTrans) &&
                    docuRef.RefRecId == custInvoiceTrans.RecId;
            }

            delete_from custInvoiceTrans
                index hint InvoiceIdx
                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                      custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                      custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate;

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                OfficialsTrans_RU::deleteWithoutUpdate(custInvoiceJour.custInvoiceJour_Officials().OffSessionId);
            }
            // </GEERU>
        
            // <GSA>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA, #isoAE]))
            {
                custInvoiceJour.reread();
            }
            // </GSA>

            custInvoiceJour.delete();

            delete_from docuRef
                where docuRef.RefTableId == tableNum(CustInvoiceJour) &&
                      docuRef.RefRecId == custInvoiceJour.RecId;
        
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
            {
                delete_from baseDocument_IT
                    where baseDocument_IT.RefTableId == tableNum(CustInvoiceJour) &&
                          baseDocument_IT.RefRecId == custInvoiceJour.RecId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProforma</Name>
				<Source><![CDATA[
    void createProforma()
    {
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceLine custInvoiceLine;
        // <GEEPL>
        boolean countryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        // </GEEPL>
        // <GEERU>
        CustInvoiceJour_RU custInvoiceJour_RU;
        // </GEERU>

        using (var createProformaActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoiceCreateProforma))
        {
            ttsbegin;

            custInvoiceJour.clear();
            custInvoiceJour.initValue();

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                //Only active fields fetched from custfreeinvoiceListPage form, so record should be reread
                custInvoiceJour.initFromCustInvoiceTable(CustInvoiceTable::findRecId(custInvoiceTable.RecId));
            }
            else
            {
            // </GEERU>
                custInvoiceJour.initFromCustInvoiceTable(custInvoiceTable);
            // <GEERU>
            }
            // </GEERU>
            custInvoiceJour.initFromCustFreeInvoiceCalcTotals(custFreeInvoiceCalcTotals);

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                custInvoiceJour_RU = custInvoiceJour.custInvoiceJour_RU();
                custInvoiceJour_RU.PrintStandardCurrency_RU = this.parmPrintInMST_RU();
                custInvoiceJour.packCustInvoiceJour_RU(custInvoiceJour_RU);
            }
            // </GEERU>

            custInvoiceJour.Proforma = NoYes::Yes;
            custInvoiceJour.InvoiceId = strFmt('#%1',custInvoiceTable.RecId);

            if (custInvoiceJour.GiroType == PaymentStub::QRBill)
            {
                custInvoiceJour.setPaymId();
            }

            custInvoiceJour.insert();

            Docu::copy(custInvoiceTable, custInvoiceJour);

            while select custInvoiceLine
                  index hint ParentRecIdIdx
                  where custInvoiceLine.ParentRecId == custInvoiceTable.RecId
            {
                custInvoiceTrans.clear();
                custInvoiceTrans.initFromCustInvoiceJour(custInvoiceJour);
                // <GEERU>
                custInvoiceTrans.initFromCustInvoiceLine(custInvoiceLine, custFreeInvoiceCalcTotals.tax());
                custInvoiceTrans.initFromTaxWorkTrans_RU(this.tmpTaxWorkTrans_W(custFreeInvoiceCalcTotals.tax().tmpTaxWorkTrans(),
                                                                                custInvoiceJour,
                                                                                custInvoiceLine),
                                                         tableNum(CustInvoiceLine),
                                                         custInvoiceLine.RecId,
                                                         "");
                // </GEERU>

                if (custInvoiceTable.InclTax)
                {
                    custInvoiceTrans.LineAmountTax = custInvoiceLine.AmountCur - custInvoiceTrans.LineAmount;
                }

                custInvoiceTrans.TaxWriteCode = this.taxWriteCode(custInvoiceLine.RecId);

                custInvoiceTrans.insert();

                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
                    custInvoiceLine.existsCorrLink_RU())
                {
                    CustInvoiceTransCorrLink_RU::createLink(
                        custInvoiceTrans.RecId,
                        custInvoiceLine.custInvoiceLineCorrLink_RU().CorrTransRecId);
                }
                // </GEERU>

                // <GEEPL>
                if (countryRegion_PL)
                {
                    TaxServiceTariff::insertTaxServiceTariffForNewParent(custInvoiceLine.TableId, custInvoiceLine.RecId, custInvoiceTrans.TableId, custInvoiceTrans.RecId);
                    this.insertCustInvoiceTrasAsset(custInvoiceLine.RecId, custInvoiceTrans.RecId);
                }
                // </GEEPL>

                Docu::copy(custInvoiceLine, custInvoiceTrans);
            }

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.postProformaMarkup_W();
                AmountAdjustEngineCustInvoice_W::adjustInvoiceJour(custInvoiceJour);
            }
            // </GEERU>

            if (custInvoiceTable.PaymentSched)
            {
                if (!CustPaymSched::exist(custInvoiceTable.TableId, custInvoiceTable.RecId))
                {
                    custInvoiceTable.createPaymentSched();
                }

                custInvoiceTable.copyPaymentSched(custInvoiceJour);

                if (!custInvoiceJour.validatePaymentSched())
                    throw error("@SYS25904");
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetter</Name>
				<Source><![CDATA[
    protected SalesFormLetter_FreeText initFormLetter()
    {
        return SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceTrasAsset</Name>
				<Source><![CDATA[
    private void insertCustInvoiceTrasAsset(
        RefRecId _custInvoiceLineRecId,
        RefRecId _custInvoiceTransRecid)
    {
        CustInvoiceTransAsset custInvoiceTransAsset;
        CustInvoiceLineAsset custInvoiceLineAsset;

        custInvoiceLineAsset = CustInvoiceLineAsset::findByCustInvoiceLineId(_custInvoiceLineRecId);
        if (custInvoiceLineAsset)
        {
            custInvoiceTransAsset.clear();
            custInvoiceTransAsset.AssetSaleFactor = custInvoiceLineAsset.AssetSaleFactor;
            custInvoiceTransAsset.CustInvoiceTrans = _custInvoiceTransRecid;
            custInvoiceTransAsset.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuSetCode</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuId parmDocuSetCode(TaxUnrealizedDocuId _docuSetCode = docuSetCode)
    {
        docuSetCode = _docuSetCode;
        return docuSetCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBatched</Name>
				<Source><![CDATA[
    boolean parmIsBatched(boolean _isBatched = isBatched)
    {
        isBatched = _isBatched;
        return isBatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public NoYes parmPrintAcceptanceReport_RU(NoYes _printAcceptanceReport = printAcceptanceReport)
    {
        printAcceptanceReport = _printAcceptanceReport;
        return printAcceptanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCODCashReceipt</Name>
				<Source><![CDATA[
    public NoYes parmPrintCODCashReceipt(NoYes _printCODCashReceipt_W = printCODCashReceipt_W)
    {
        printCODCashReceipt_W = _printCODCashReceipt_W;
        return printCODCashReceipt_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsFreeText</Name>
				<Source><![CDATA[
    container parmPrinterSettingsFreeText(container _printerSettings = printerSettingsFreeText)
    {
        printerSettingsFreeText = _printerSettings;
        return printerSettingsFreeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsFreeTextCopy</Name>
				<Source><![CDATA[
    container parmPrinterSettingsFreeTextCopy(container _printerSettings = printerSettingsFreeTextCopy)
    {
        printerSettingsFreeTextCopy = _printerSettings;
        return printerSettingsFreeTextCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFacture_RU</Name>
				<Source><![CDATA[
    public NoYes parmPrintFacture_RU(NoYes _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFormLetter_RU</Name>
				<Source><![CDATA[
    public NoYes parmPrintFormLetter_RU(NoYes _printFormletter = printFormletter)
    {
        printFormletter = _printFormletter;
        return printFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintInMST_RU</Name>
				<Source><![CDATA[
    public PrintInMST_RU parmPrintInMST_RU(PrintInMST_RU _printInMST = printInMST)
    {
        printInMST = _printInMST;

        return printInMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowWarningMessageSendToXML</Name>
				<Source><![CDATA[
    public boolean parmShowWarningMessageSendToXML(boolean _showWarningMessageSendToXML = showWarningMessageSendToXML)
    {
        showWarningMessageSendToXML = _showWarningMessageSendToXML;

        return showWarningMessageSendToXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProformaMarkup_W</Name>
				<Source><![CDATA[
    private void postProformaMarkup_W()
    {
        using (var postProformaMarkup_WActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePostProformaMarkup_W))
        {
            Markup markup = new Markup(custInvoiceTable.CurrencyCode);
            CustInvoiceLine localCustInvoiceLine;
            CustInvoiceTrans localCustInvoiceTrans;

            markup.setTax(custFreeInvoiceCalcTotals.tax());
            markup.parmInitMarkupTrans_RU(true);
            markup.parmIsProforma_RU(true);

            markup.postJournal(1, custInvoiceJour.SalesBalance, custInvoiceTable, custInvoiceJour.DefaultDimension, custInvoiceJour);

            while select localCustInvoiceLine
                where localCustInvoiceLine.ParentRecId == custInvoiceTable.RecId
            {
                localCustInvoiceTrans = CustInvoiceTrans::findBySourceDocumentLine(localCustInvoiceLine.SourceDocumentLine);

                if (localCustInvoiceTrans)
                {
                    markup.postJournal(localCustInvoiceTrans.Qty,
                        localCustInvoiceTrans.LineAmount,
                        localCustInvoiceLine,
                        localCustInvoiceTrans.DefaultDimension,
                        localCustInvoiceTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints of Cash Receipts.
    /// </summary>
    /// <param name = "_invoiceJourList">
    /// List of documents for which receipts should be printed.
    /// </param>
    private void printCODCashReceipt_W(RecordSortedList _invoiceJourList)
    {
        using (var printCODCashReceipt_WActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintCODCashReceipt_W))
        {
            _invoiceJourList.first(custInvoiceJour);

            do
            {
                if (custInvoiceJour && PaymTerm::isCashAccount(custInvoiceJour.Payment))
                {
                    CustTrans custTrans = custInvoiceJour.custTrans(), custTransPayment;
                    CustSettlement  custSettlement;

                    select firstonly custTransPayment
                    exists join custSettlement
                        where custSettlement.OffsetRecid   == custTransPayment.RecId
                            && custSettlement.TransRecId   == custTrans.RecId
                            && custSettlement.TransCompany == custTrans.dataAreaId
                            && custSettlement.AccountNum   == custTrans.AccountNum;

                    if (CashRegisterFiscalTrans_W::findCustTrans(custTransPayment))
                    {
                        Args args = new Args();
                        args.record(custTransPayment);

                        CashRegisterReceiptPrint_W action = new CashRegisterReceiptPrint_W();
                        action.parmArgs(args);
                        action.runOperation();
                    }
                }
            }
            while (_invoiceJourList.next(custInvoiceJour));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFacture_RU</Name>
				<Source><![CDATA[
    private void printFacture_RU(RecordSortedList _invoiceJourList,
                                 SalesFormLetter _salesFormLetter = null)
    {
        RecordSortedList factureJourList;
        FactureJour_RU factureJour;

        using (var printFacture_RUActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintFacture_RU))
        {
            Args args = new Args();

            _invoiceJourList.first(custInvoiceJour);

            while (custInvoiceJour)
            {
                factureJourList = custInvoiceJour.factureJourSortedList_RU();

                factureJourList.first(factureJour);

                args.record(factureJour);
                args.object(factureJourList);
                args.caller(_salesFormLetter);

                new MenuFunction(menuitemOutputStr(Facture_RU), MenuItemType::Output).run(args);

                if (! _invoiceJourList.next(custInvoiceJour))
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFactureProforma_RU</Name>
				<Source><![CDATA[
    private void printFactureProforma_RU(RecordSortedList _journalList,
                                         SalesFormLetter _salesFormLetter = null)
    {
        CustInvoiceJour tmpCustInvoiceJour;
        CustInvoiceTable tmpCustInvoiceTable;
        CustInvoiceJour_RU tmpCustInvoiceJour_RU;

        FactureJourCreate_RU jourCreate;
        FactureEditLinesEngine_RU engine;

        OffSessionId_RU offSessionId;
        OfficialsServ_RU offServ;

        using (var printFactureProforma_RUActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintFactureProforma_RU))
        {
            _journalList.first(tmpCustInvoiceJour);

            while (tmpCustInvoiceJour)
            {
                ttsbegin;

                if (OfficialsServ_RU::isFeatureEnabled())
                {
                    offServ = new OfficialsServ_RU();
                    offServ.initTableFacture(FactureModule_RU::Cust,
                                             tmpCustInvoiceJour.InvoiceAccount,
                                             true,
                                             tmpCustInvoiceJour.creditNote());
                    offSessionId = offServ.newId();
                }

                jourCreate = new FactureJourCreateCust_RU();
                engine = FactureEditLinesEngine_RU::construct(jourCreate, FactureModule_RU::Cust);

                jourCreate.setUnpack(false);
                jourCreate.parmRecalcTaxes(NoYes::No);
                engine.insertJour(tmpCustInvoiceJour, true);

                tmpCustInvoiceTable = tmpCustInvoiceJour.custInvoiceTable();

                tmpCustInvoiceJour_RU = tmpCustInvoiceJour.custInvoiceJour_RU();

                jourCreate.initParameters(NoYes::No,
                                          NoYes::No,
                                          Printout::Current,
                                          tmpCustInvoiceJour_RU.PrintStandardCurrency_RU,
                                          "",
                                          tmpCustInvoiceJour.InvoiceDate,
                                          tmpCustInvoiceJour.InvoiceAccount,
                                          tmpCustInvoiceJour.CurrencyCode,
                                          FactureType_RU::Invoice,
                                          engine.consignee(),
                                          engine.consignor(),
                                          offSessionId,
                                          "",
                                          "",
                                          dateNull(),
                                          tmpCustInvoiceJour.DeliveryPostalAddress,
                                          tmpCustInvoiceJour.InvoiceDate,
                                          tmpCustInvoiceJour.NumberSequenceGroup,
                                          tmpCustInvoiceTable.CorrectedFactureExternalId_RU,
                                          tmpCustInvoiceTable.CorrectedFactureDate_RU,
                                          tmpCustInvoiceTable.CorrectedPeriod_RU,
                                          tmpCustInvoiceTable.CorrectionType_RU);

                jourCreate.parmCorrect(tmpCustInvoiceJour_RU.Correct_RU);
                jourCreate.parmVATOnPayment(tmpCustInvoiceJour_RU.vatOnPayment_RU);
                if (_salesFormLetter)
                {
                    jourCreate.parmPrinterSettings(_salesFormLetter.printerSettingsFormletter());
                }
                jourCreate.runOperation();
                if (! jourCreate.getFactureJour())
                {
                    info("@GLS101555");
                }

                if (offServ && offSessionId)
                {
                    OfficialsServ_RU::deleteRelationTrans(offSessionId, OffReportType_RU::CustFacture);
                }

                ttscommit;

                if (! _journalList.next(tmpCustInvoiceJour))
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintContextByCustInvoiceTable</Name>
				<Source><![CDATA[
    private PrintMgmtPrintContext createPrintContextByCustInvoiceTable(CustInvoiceTable _record)
    {
        PrintMgmtPrintContext printContext = new PrintMgmtPrintContext();
    
        printContext.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings());
        printContext.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings());

        CustInvoiceJour invoiceJour;
        invoiceJour.setTmp();
        invoiceJour.initValue();
        invoiceJour.initFromCustInvoiceTable(_record);
        invoiceJour.Proforma = NoYes::Yes;
        invoiceJour.doInsert();
        
        printContext.parmQueryTableBuffer(invoiceJour);
        printContext.setHierarchyContext(
            PrintMgmtHierarchyType::Sales,
            PrintMgmtNodeType::CustInvoiceTable,
            PrintMgmtDocumentType::SalesFreeTextInvoice,
            _record);
        return printContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintContextsByCustInvoiceTableList</Name>
				<Source><![CDATA[
    private List createPrintContextsByCustInvoiceTableList(RecordSortedList _records)
    {
        var ret = new List(Types::Class);
        CustInvoiceTable record;

        var recordFound = _records.first(record);
        while (recordFound)
        {
            ret.addEnd(this.createPrintContextByCustInvoiceTable(record));
            recordFound = _records.next(record);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOk</Name>
				<Source><![CDATA[
    boolean printOk(SalesFormLetter _salesFormLetter)
    {
        return SalesFormLetter::callPrinterSettingsFormletter(_salesFormLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPromptExtensionsParametersToSave</Name>
				<Source><![CDATA[
    private boolean hasPromptExtensionsParametersToSave(NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult _result)
    {
        return  _result &&
                _result.parmExtensionParameters() &&
                !_result.parmExtensionParameters().isEmpty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToPromptPrintDestinations</Name>
				<Source><![CDATA[
    protected boolean needToPromptPrintDestinations(NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult _result)
    {
        return !_result || _result.parmPromptingPrintDestinationRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOkByRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Shows a print dialog by <c>CustInvoiceTable</c> records.
    /// </summary>
    /// <param name = "_salesFormLetter">A <c>SalesFormLetter</c> class instance.</param>
    /// <param name = "_recordSortedList">A list of <c>CustInvoiceTable</c> records.</param>
    /// <returns>True, if user selected to print; otherwise -  false.</returns>
    /// <remarks>
    /// We assume that UsePrintManagement parameter here is set to FALSE.
    /// </remarks>
    protected boolean printOkByRecords(SalesFormLetter _salesFormLetter, RecordSortedList _recordSortedList)
    {
        boolean ret;
        NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult result;
        
        if (this.needToPromptERPrintDestinations(_recordSortedList))
        {
            result = NonSSRSPrintMgmtAdapter::promptAdditionalParameters(
                this.createPrintContextsByCustInvoiceTableList(_recordSortedList));
        }

        if (!result || result.parmPromptResult())
        {
            if (this.hasPromptExtensionsParametersToSave(result))
            {
                _salesFormLetter.updatePrintManagementExtensionsSettings(result.parmExtensionParameters().pack());
            }
            if (this.needToPromptPrintDestinations(result))
            {
                ret = this.printOk(_salesFormLetter);
            }
            else
            {
                ret = result.parmPromptResult();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOut</Name>
				<Source><![CDATA[
    void printOut(NoYes _proforma = NoYes::No,
                  RecordSortedList _recordSortedList = null,
                  NoYes _copy = NoYes::No,
                  Printout _printOutWhen = Printout::Current,
                  NoYes _usePrintManagement = NoYes::No,
                  PrintCopyOriginal _printCopyOriginal = PrintCopyOriginal::OriginalPrint,
                  boolean _sendInvoice = false,
                  boolean _useUserDefinePrinterDestinations = false,
                  NoYes _sendByMail = NoYes::No,
                  boolean _print = true
    )
    {
        using (var printOutActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintOut))
        {
            SalesFormLetter_FreeText salesFormLetter = this.initFormLetter();
            RecordSortedList journalList;
            RecordSortedList journalListProforma;

            //  This will force the report to use the default printer settings or the syslastvalues of the original and copy.
            if (this.useDefaultPrinterSettings())
            {
                this.setPrinterSettings(salesFormLetter);
            }

            if (this.isNoDefaultPrinterSettings() && !printCODCashReceipt_W && !this.parmIsBatched() && !_usePrintManagement)
            {
                // If running in a batch, no user will be available to handle the print dialog.
                if (!this.printOkByRecords(salesFormLetter, _recordSortedList))
                {
                    return;
                }
            }

            salesFormLetter.createParmUpdateFromParmUpdateRecord(SalesFormletterParmData::initSalesParmUpdateFormletter(salesFormLetter.documentStatus(),salesFormLetter.pack()));
            salesFormLetter.initParameters(salesFormLetter.salesParmUpdate(), _printOutWhen);
            salesFormLetter.defaultGiroType(NoYes::Yes);
            salesFormLetter.proforma(_proforma);
            salesFormLetter.usePrintManagement(_usePrintManagement);
            salesFormLetter.parmUseUserDefinedDestinations(_useUserDefinePrinterDestinations);

            //<GTH>
            if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
            {
                salesFormLetter.parmDocuSetCode(this.parmDocuSetCode());
            }
            //</GTH>

            journalList = new RecordSortedList(tableNum(CustInvoiceJour));

            // Get the sort order from the FormLetterSortingParameters table
            journalList.sortOrderFromContainer(salesFormLetter.formLetterSorting(tableNum(CustInvoiceJour),
                                                                                 fieldNum(CustInvoiceJour, RecId),
                                                                                 tableNum(CustInvoiceTable)));

            _recordSortedList.first(custInvoiceTable);

            boolean isCustInvoiceTableCalcTotalsFeatureInUse = CustInvoiceTableCalcTotalsFeature::isEnabled();

            while (custInvoiceTable)
            {
                if (isCustInvoiceTableCalcTotalsFeatureInUse
                    && !custInvoiceTable.Posted)
                {
                    //
                    // Reread to get the latest Posted status because
                    // a posted invoice should not be using Proforma to print out the invoice.
                    //
                    custInvoiceTable.reread();
                }

                if (!custInvoiceTable.Posted)
                {
                    ttsBegin;
                    custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
                    custFreeInvoiceCalcTotals.calc();
                    this.createProforma();
                    formletterProformaPrint = FormletterProformaPrint::construct();
                    formletterProformaPrint.parmTax(custFreeInvoiceCalcTotals.tax());
                    // <GEERU>
                    formletterProformaPrint.parmExchRate_W (custFreeInvoiceCalcTotals.tax().exchRate());
                    formletterProformaPrint.parmExchRateSec_W(custFreeInvoiceCalcTotals.tax().exchRateSecondary());
                    // </GEERU>
                    formletterProformaPrint.writeTmpTaxWorkTrans(custInvoiceJour.RecId);
                    formletterProformaPrint.parmJournalTmpTaxWorkTrans().copyFromTax(
                        custFreeInvoiceCalcTotals.tax(),
                        custInvoiceJour.RecId,
                        custInvoiceJour.TableId);
                    salesFormLetter.parmFormletterProformaPrintPacked(formletterProformaPrint.pack());

                    journalListProforma = new RecordSortedList(tableNum(CustInvoiceJour));
                    journalListProforma.ins(custInvoiceJour);
                    ttsCommit;

                    this.printOrEmailProformaInvoiceWithFinalCallForCleanup(_print, _sendInvoice, _printCopyOriginal, journalListProforma, salesFormLetter);

                }
                else
                {
                    custInvoiceJour = custInvoiceTable.custInvoiceJour();
                    // <GTH>
                    if (   TaxThaiGovCertificationFeatureChecker::isSubstitutionAdjustmentEnabled()
                        && _printCopyOriginal == PrintCopyOriginal::Original
                        && custInvoiceJour.custInvoiceJourExtensionTH().IsPrinted)
                    {
                        error(strFmt("@AccountsReceivable:SubstitutionInvoices_OriginalInvoiceHasBeenPrinted", custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate));
                    }
                    else
                    {
                        // </GTH>
                        journalList.ins(custInvoiceJour);
                        // <GTH>
                    }
                    // </GTH>
                }

                if (!_recordSortedList.next(custInvoiceTable))
                {
                    break;
                }
            }

            if (journalList.len())
            {
                if (_print)
                {
                    if (this.parmPrintFacture_RU())
                    {
                        this.printFacture_RU(journalList, salesFormLetter);
                    }

                    custInvoiceJour.printFreeTextJournal(
                        salesFormLetter,
                        journalList,
                        _printCopyOriginal,
                        printFormletter,
                        printAcceptanceReport);
                
                    if (this.parmPrintCODCashReceipt())
                    {
                        this.printCODCashReceipt_W(journalList);
                    }
                }
            
                if (_sendInvoice)
                {
                    this.sendAsXML(salesFormLetter,
                                   journalList,
                                   _printCopyOriginal,
                                   _sendInvoice);
                }
            }

            salesFormLetter.endUpdate();

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::IsBatch,
                custPrintOutInvoiceLogger.bool2str(this.parmIsBatched()));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::IsProforma,
                enum2Str(_proforma));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::IsCustInvoiceTableCalcTotalsFeatureInUse,
                custPrintOutInvoiceLogger.bool2str(isCustInvoiceTableCalcTotalsFeatureInUse));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::PrintOutWhen,
                enum2Str(_printOutWhen));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::IsUsePrintManagement,
                enum2Str(_usePrintManagement));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::IsUseUserDefinePrinterDestinations,
                custPrintOutInvoiceLogger.bool2str(_useUserDefinePrinterDestinations));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::IsPrint,
                custPrintOutInvoiceLogger.bool2str(_print));

            printOutActivityContext.addCustomProperty(
                CustPrintOutInvoiceInstrumentationConstants::RecordListCountMagnitude,
                ApplicationCommonInstrumentationMagnitude::log10magnitude(_recordSortedList.len()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends list of invoices to GER report. Every list item will be printed in a separate report.
    /// </summary>
    /// <param name = "_salesFormLetter">The current sales posting engine instance.</param>
    /// <param name = "_journalList">The list of <c>CustInvoiceJour</c> records to print.</param>
    /// <param name = "_printCopyOriginal">A <c>PrintCopyOriginal</c> enumeration value specifying the type of print.</param>
    /// <param name = "_shouldSkipDestinationValidation">true if the destination type validation should be skipped; otherwise, false.</param>
    public void sendAsXML(
        SalesFormLetter _salesFormLetter,
        RecordSortedList _journalList,
        PrintCopyOriginal _printCopyOriginal,
        boolean _shouldSkipDestinationValidation)
    {
        using (var sendAsXMLActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoiceSendAsXML))
        {
            if (_shouldSkipDestinationValidation || new SRSPrintDestinationSettings(_salesFormLetter.printerSettingsFormletter()).printMediumType() != SRSPrintMediumType::Screen)
            {
                boolean newLine = _journalList.first(custInvoiceJour);
                while (newLine)
                {
                    if (custInvoiceJour.isProforma())
                    {
                        warning ("@SYS309004");
                    }
                    else
                    {
                        if (isItalianContext)
                        {
                            using (EInvoiceContext_IT eInvoiceContext = EInvoiceContext_IT::instance())
                            {
                                eInvoiceContext.parmCheckERDestinationExists(true);
                                EInvoice_IT::exportXMLToSharePoint(custInvoiceJour.RecId, tableNum(CustInvoiceJour));
                            }
                        }
                        else if (!CustVendInvoiceJour::isInvoiceDocumentHasDestination(tableNum(CustInvoiceTable), custInvoiceJour.RecId))
                        {
                            custInvoiceJour.sendElectronically(_printCopyOriginal, showWarningMessageSendToXML);
                        }

                    }
                    newLine = _journalList.next(custInvoiceJour);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans_W</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans_W(TmpTaxWorkTrans _taxWorkTrans,
                                              CustInvoiceJour _custInvoiceJour,
                                              CustInvoiceLine _custInvoiceLine)
    {
        using (var tmpTaxWorkTrans_WActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicetTmpTaxWorkTrans_W))
        {
            CurrencyCode companyCurrency = Ledger::accountingCurrency();
            
            ttsbegin;

            while select forupdate _taxWorkTrans
                where ! _taxWorkTrans.TaxAutogenerated &&
                        _taxWorkTrans.SourceTableId == _custInvoiceLine.TableId &&
                        _taxWorkTrans.SourceRecId == _custInvoiceLine.RecId
            {
                if (_taxWorkTrans.CurrencyCode == companyCurrency)
                {
                    _taxWorkTrans.TaxAmount = _taxWorkTrans.transactionCurrencyTaxAmount();
                }
                else
                {
                    _taxWorkTrans.TaxAmount = CurrencyExchangeHelper::mstAmount(_taxWorkTrans.transactionCurrencyTaxAmount(), _taxWorkTrans.SourceCurrencyCode, _taxWorkTrans.TransDate, _taxWorkTrans.euroTriangulation ? UnknownNoYes::Unknown : UnknownNoYes::No, _custInvoiceJour.ExchRate, _custInvoiceJour.ExchRateSecondary);
                }

                _taxWorkTrans.doUpdate();
            }

            ttscommit;
        }

        return _taxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public CustPrintOutInvoice construct()
    {
        return new CustPrintOutInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustInvoiceTable custInvoiceTable;
        CustPrintOutInvoice custPrintOutInvoice;
        RecordSortedList recordSortedList = new RecordSortedList(custInvoiceTable.TableId);
        custInvoiceTable = args.record();
        recordSortedList.ins(custInvoiceTable);

        custPrintOutInvoice = CustPrintOutInvoice::construct();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custPrintOutInvoice.parmPrintFormLetter_RU(NoYes::Yes);
            custPrintOutInvoice.parmPrintAcceptanceReport_RU(NoYes::No);
        }
        // </GEERU>
        custPrintOutInvoice.printOut(args.parmEnum(),recordSortedList);
        if (FormDataUtil::isFormDataSource(custInvoiceTable))
        {
            FormDataUtil::getFormDataSource(custInvoiceTable).reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPrintOriginalCopy</Name>
				<Source><![CDATA[
    static public CustPrintOutInvoice newPrintOriginalCopy(container _printerSettingsFreeText,
                                                           container _printerSettingsFreeTextCopy,
                                                           boolean _isBatched)
    {
        CustPrintOutInvoice custPrintOutInvoice = CustPrintOutInvoice::construct();

        custPrintOutInvoice.parmPrinterSettingsFreeTextCopy(_printerSettingsFreeTextCopy);
        custPrintOutInvoice.parmPrinterSettingsFreeText(_printerSettingsFreeText);
        custPrintOutInvoice.parmIsBatched(_isBatched);
        return custPrintOutInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWriteCode</Name>
				<Source><![CDATA[
    private TaxWriteCode taxWriteCode(RefRecId _lineRecId)
    {
        TaxUncommitted taxUncommitted;
        TaxTable taxTable;
        List codesList = new List(Types::String);

        using (var tmpTaxWorkTrans_WActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicetTaxWriteCode))
        {
            while select TaxCode, SourceTableId, SourceRecId from taxUncommitted
                where taxUncommitted.SourceTableId == tableNum(CustInvoiceLine) &&
                    taxUncommitted.SourceRecId == _lineRecId &&
                    taxUncommitted.IsDeleted == NoYes::No
                join ExcludeFromInvoice from taxTable
                    where taxTable.TaxCode == taxUncommitted.TaxCode
            {
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]) && taxTable.ExcludeFromInvoice)
                {
                    continue;
                }

                TaxWriteCode taxWriteCode = TaxTable::printCode(taxUncommitted.TaxCode, taxUncommitted.TransDate, taxUncommitted.TaxBaseAmountCur);

                if (taxWriteCode)
                {
                    codesList.addEnd(taxWriteCode);
                }
            }
        }

        return strList2str(codesList, ', ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOrEmailProformaInvoice</Name>
				<Source><![CDATA[
    private void printOrEmailProformaInvoice(NoYes _print,
                                             NoYes _sendInvoice,
                                             PrintCopyOriginal _printCopyOriginal,
                                             RecordSortedList _journalListProforma,
                                             SalesFormLetter _salesFormLetter)
    {
        using (var printOrEmailProformaInvoiceActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintOrEmailProformaInvoice))
        {
            this.printOrEmail(_print, _sendInvoice, _printCopyOriginal, _journalListProforma, _salesFormLetter);
            this.cleanUpProforma();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOrEmailProformaInvoiceWithFinalCallForCleanup</Name>
				<Source><![CDATA[
    private void printOrEmailProformaInvoiceWithFinalCallForCleanup(NoYes _print,
                                                                    NoYes _sendInvoice,
                                                                    PrintCopyOriginal _printCopyOriginal,
                                                                    RecordSortedList _journalListProforma,
                                                                    SalesFormLetter _salesFormLetter)
    {
        using (var printOrEmailProformaInvoiceActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintOrEmailProformaInvoiceWithFinalCallForCleanup))
        {
            try
            {
                this.printOrEmail(_print, _sendInvoice, _printCopyOriginal, _journalListProforma, _salesFormLetter);
            }
            finally
            {
                this.cleanUpProforma();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOrEmail</Name>
				<Source><![CDATA[
    private void printOrEmail(NoYes _print,
                              NoYes _sendInvoice,
                              PrintCopyOriginal _printCopyOriginal,
                              RecordSortedList _journalListProforma,
                              SalesFormLetter _salesFormLetter)
    {
        using (var printOrEmailActivityContext = custPrintOutInvoiceLogger.activityContextWithCustomProperties(CustPrintOutInvoiceInstrumentationConstants::CustPrintOutInvoicePrintOrEmail))
        {
            if (_print)
            {
                if (this.parmPrintFacture_RU())
                {
                    this.printFactureProforma_RU(_journalListProforma, _salesFormLetter);
                }

                custInvoiceJour.printFreeTextJournal(_salesFormLetter, _journalListProforma, _printCopyOriginal, printFormletter, printAcceptanceReport);
            }

            if (_sendInvoice)
            {
                this.sendAsXML(_salesFormLetter, _journalListProforma, _printCopyOriginal, _sendInvoice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDefaultPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if default printer settings should be used to print report.
    /// </summary>
    /// <returns>true if default printer settings should be used to print report; otherwise, false.</returns>
    protected boolean useDefaultPrinterSettings()
    {
        return printerSettingsFreeText != conNull() || printerSettingsFreeTextCopy != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print settings.
    /// </summary>
    /// <param name = "_salesFormLetter">An instance of the class <c>SalesFormLetter_FreeText</c>.</param>
    protected void setPrinterSettings(SalesFormLetter_FreeText _salesFormLetter)
    {
        _salesFormLetter.updatePrinterSettingsFormLetter(printerSettingsFreeText, PrintSetupOriginalCopy::Original);
        _salesFormLetter.updatePrinterSettingsFormLetter(printerSettingsFreeTextCopy, PrintSetupOriginalCopy::Copy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNoDefaultPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if there are no default print settings.
    /// </summary>
    /// <returns>true if there are no default print settings; otherwise, false.</returns>
    protected boolean isNoDefaultPrinterSettings()
    {
        return printerSettingsFreeText == conNull() && printerSettingsFreeTextCopy == conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToPromptERPrintDestinations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if the ER print destination form should be prompted.
    /// </summary>
    /// <param name = "_recordSortedList"></param>
    /// <returns>true Identifies if the ER print destination form should be prompted; otherwise, false.</returns>
    protected boolean needToPromptERPrintDestinations(RecordSortedList _recordSortedList)
    {
        return _recordSortedList != null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>