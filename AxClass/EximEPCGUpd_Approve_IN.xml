<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGUpd_Approve_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim EPCG update approve class.
/// </summary>
class EximEPCGUpd_Approve_IN extends EximEPCGUpdate_IN implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertBankGuaranteeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the bank guarantee details information.
    /// </summary>
    /// <param name="_schemeApproveRecId">
    /// The scheme approve RecId.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertBankGuaranteeDetails(EximEPCGSchemeApproveRecId_IN _schemeApproveRecId)
    {
        EximEPCGBankGuaranteeDetails_IN epcgBankGuaranteeDetails;

        if (_schemeApproveRecId && tmpEximEPCGBankGuaranteeDetails)
        {
            while select tmpEximEPCGBankGuaranteeDetails
            {
                epcgBankGuaranteeDetails.clear();
                epcgBankGuaranteeDetails.BankAccountId       = tmpEximEPCGBankGuaranteeDetails.BankAccountId;
                epcgBankGuaranteeDetails.GuaranteeNum        = tmpEximEPCGBankGuaranteeDetails.GuaranteeNum;
                epcgBankGuaranteeDetails.IssueDateTime       = tmpEximEPCGBankGuaranteeDetails.IssueDateTime;
                epcgBankGuaranteeDetails.GuaranteeAmount     = tmpEximEPCGBankGuaranteeDetails.GuaranteeAmount;
                epcgBankGuaranteeDetails.ExpiryDateTime      = tmpEximEPCGBankGuaranteeDetails.ExpiryDateTime;
                epcgBankGuaranteeDetails.PlaceActivity       = tmpEximEPCGBankGuaranteeDetails.PlaceActivity;
                epcgBankGuaranteeDetails.Comment             = tmpEximEPCGBankGuaranteeDetails.Comment;
                epcgBankGuaranteeDetails.Text                = tmpEximEPCGBankGuaranteeDetails.Text;
                epcgBankGuaranteeDetails.SchemeApprovalRecId = _schemeApproveRecId;
                epcgBankGuaranteeDetails.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportableItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the exportable items.
    /// </summary>
    /// <param name="_schemeApproveRecId">
    /// The scheme approve rec id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertExportableItems(EximEPCGSchemeApproveRecId_IN _schemeApproveRecId)
    {
        EximEPCGExportableItems_IN      epcgExportableItems;

        if (_schemeApproveRecId && tmpEximEPCGExportableItems)
        {
            insert_recordset epcgExportableItems(ItemId, Unit, SchemeApprovalRecId)
            select ItemId, Unit, _schemeApproveRecId
                from tmpEximEPCGExportableItems;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportObligationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the export obligation details.
    /// </summary>
    /// <param name="_epcgExportObligationPeriod">
    /// The epcg export obligation period.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertExportObligationDetails(EximEPCGExportObligationPeriod_IN _epcgExportObligationPeriod)
    {
        EximEPCGExportObligationDetails_IN epcgExportObligationDetails;
        RecordInsertList                   recordInsertList = new RecordInsertList(tablenum(EximEPCGExportObligationDetails_IN));
        ToDateTime                         toDateTime;

        ttsbegin;

        epcgExportObligationDetails.FromDateTime = _epcgExportObligationPeriod.FromDateTime;
        while (epcgExportObligationDetails.FromDateTime <= _epcgExportObligationPeriod.ToDateTime)
        {
            if (epcgExportObligationDetails.FromDateTime != _epcgExportObligationPeriod.ToDateTime)
            {
                toDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(epcgExportObligationDetails.FromDateTime,
                                                                                                                                                     DateTimeUtil::getUserPreferredTimeZone()), 1, PaymentPer_IN::Years), -1))), 0);

                toDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(toDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());

                epcgExportObligationDetails.ToDateTime   = toDateTime;
            }
            else
            {
                epcgExportObligationDetails.ToDateTime = _epcgExportObligationPeriod.ToDateTime;
            }
            epcgExportObligationDetails.ExportObligationPeriodRecId = _epcgExportObligationPeriod.RecId;
            epcgExportObligationDetails.Block                       = _epcgExportObligationPeriod.Block;
            epcgExportObligationDetails.SchemeTableRecId            = schemeTableRecId;

            recordInsertList.add(epcgExportObligationDetails);
            epcgExportObligationDetails.FromDateTime = DateTimeUtil::addSeconds(epcgExportObligationDetails.ToDateTime, 1);
        }

        recordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportObligationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the export obligation period.
    /// </summary>
    /// <param name="_schemeApproveRecId">
    /// The scheme approve rec id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertExportObligationPeriod(EximEPCGSchemeApproveRecId_IN _schemeApproveRecId)
    {
        EximEPCGExportObligationPeriod_IN epcgExportObligationPeriod;

        if (_schemeApproveRecId && tmpEximEPCGExportObligationPeriod)
        {
            while select tmpEximEPCGExportObligationPeriod
            {
                epcgExportObligationPeriod.clear();
                epcgExportObligationPeriod.Block                  = tmpEximEPCGExportObligationPeriod.Block;
                epcgExportObligationPeriod.Description            = tmpEximEPCGExportObligationPeriod.Description;
                epcgExportObligationPeriod.PeriodInterval         = tmpEximEPCGExportObligationPeriod.PeriodInterval;
                epcgExportObligationPeriod.Units                  = tmpEximEPCGExportObligationPeriod.Units;
                epcgExportObligationPeriod.Percentage             = tmpEximEPCGExportObligationPeriod.Percentage;
                epcgExportObligationPeriod.FromDateTime           = tmpEximEPCGExportObligationPeriod.FromDateTime;
                epcgExportObligationPeriod.ToDateTime             = tmpEximEPCGExportObligationPeriod.ToDateTime;
                epcgExportObligationPeriod.ExportObligationAmount = tmpEximEPCGExportObligationPeriod.ExportObligationAmount;
                epcgExportObligationPeriod.SchemeApproveRecId     = _schemeApproveRecId;
                epcgExportObligationPeriod.insert();

                this.insertExportObligationDetails(epcgExportObligationPeriod);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSchemeApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the scheme approve information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertSchemeApprove()
    {
        EximEPCGSchemeApprove_IN        epcgSchemeApproval;

        if (tmpEximEPCGSchemeApproval)
        {
            epcgSchemeApproval.data(tmpEximEPCGSchemeApproval);
            epcgSchemeApproval.SchemeTableRecId = schemeTableRecId;
            epcgSchemeApproval.insert();
        }

        this.insertExportableItems(epcgSchemeApproval.RecId);
        this.insertExportObligationPeriod(epcgSchemeApproval.RecId);
        this.insertVendorDetails(epcgSchemeApproval.RecId);
        this.insertBankGuaranteeDetails(epcgSchemeApproval.RecId);

        this.updateSchemeTable(epcgSchemeApproval.ImportValue,
                               epcgSchemeApproval.Currency);

        this.insertSchemeLine(epcgSchemeApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSchemeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the scheme line information.
    /// </summary>
    /// <param name="epcgSchemeApprove">
    /// The epcg scheme approve information.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertSchemeLine(EximEPCGSchemeApprove_IN epcgSchemeApprove)
    {
        EximEPCGSchemeLine_IN     eximEPCGSchemeLine;

        eximEPCGSchemeLine = EximEPCGSchemeLine_IN::findRefRecId(schemeTableRecId);

        if (!eximEPCGSchemeLine)
        {
            eximEPCGSchemeLine.SchemeTableRecId          = schemeTableRecId;
            eximEPCGSchemeLine.LicenseStatus             = EximEPCGLicenseStatus_IN::Original;
            eximEPCGSchemeLine.ExportObligationAmountMST = epcgSchemeApprove.expObligationAmtMST(basis,
                                                                                                 EximEPCGSchemeTable_IN::findRecId(schemeTableRecId).IssueDateTime);
            eximEPCGSchemeLine.VersionNum                = EximEPCGSchemeLine_IN::findVersionNum(schemeTableRecId) + 1;
            eximEPCGSchemeLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpExportObligationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tmp export obligation period information.
    /// </summary>
    /// <param name="_schemeApprovalRecId">
    /// The scheme approval rec id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTmpExportObligationPeriod(RefRecId _schemeApprovalRecId)
    {
        EximEPCGExportObligationPeriod_IN epcgExportObligationPeriod;
        QueryBuildDataSource              queryBuildDataSource;
        QueryBuildDataSource              dataSourceSchemeApproval;
        Query                             query = new Query();

        queryBuildDataSource = query.addDataSource(tablenum(EximEPCGExportObligationPeriod_IN));
        queryBuildDataSource.addSortField(fieldnum(EximEPCGExportObligationPeriod_IN, Block));
        dataSourceSchemeApproval = queryBuildDataSource.addDataSource(tablenum(EximEPCGSchemeApprove_IN));
        dataSourceSchemeApproval.addLink(fieldnum(EximEPCGExportObligationPeriod_IN, SchemeApproveRecId), fieldnum(EximEPCGSchemeApprove_IN, RecId));
        dataSourceSchemeApproval.joinMode(JoinMode::ExistsJoin);
        dataSourceSchemeApproval.addRange(fieldnum(EximEPCGSchemeApprove_IN, RecId)).value(queryValue(_schemeApprovalRecId));

        queryRun = new QueryRun(query);
        queryRun.recordLevelSecurity(true);

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(EximEPCGExportObligationPeriod_IN)))
            {
                epcgExportObligationPeriod = queryRun.get(tablenum(EximEPCGExportObligationPeriod_IN));

                tmpEximEPCGExportObligationPeriod.clear();
                tmpEximEPCGExportObligationPeriod.Block                  = epcgExportObligationPeriod.Block;
                tmpEximEPCGExportObligationPeriod.Description            = epcgExportObligationPeriod.Description;
                tmpEximEPCGExportObligationPeriod.Units                  = epcgExportObligationPeriod.Units;
                tmpEximEPCGExportObligationPeriod.PeriodInterval         = epcgExportObligationPeriod.PeriodInterval;
                tmpEximEPCGExportObligationPeriod.Percentage             = epcgExportObligationPeriod.Percentage;
                tmpEximEPCGExportObligationPeriod.FromDateTime           = epcgExportObligationPeriod.FromDateTime;
                tmpEximEPCGExportObligationPeriod.ToDateTime             = epcgExportObligationPeriod.ToDateTime;
                tmpEximEPCGExportObligationPeriod.ExportObligationAmount = epcgExportObligationPeriod.ExportObligationAmount;
                tmpEximEPCGExportObligationPeriod.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendorDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the vendor details information.
    /// </summary>
    /// <param name="_schemeApproveRecId">
    /// The scheme approved rec id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertVendorDetails(EximEPCGSchemeApproveRecId_IN _schemeApproveRecId)
    {
        EximEPCGVendorDetails_IN        epcgVendDetails;

        if (_schemeApproveRecId && tmpEximEPCGVendDetails)
        {
            insert_recordset epcgVendDetails(AccountNum, AccountType, SchemeApproveRecId)
            select AccountNum, AccountType, _schemeApproveRecId
                from tmpEximEPCGVendDetails;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instanse of <c>EximEPCGUpd_Approve_IN</c> class.
    /// </summary>
    public void new()
    {
        super();
        tmpEximEPCGSchemeApproval = null;
        tmpEximEPCGExportableItems = null;
        tmpEximEPCGBankGuaranteeDetails = null;
        tmpEximEPCGVendDetails = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpBankGuaranteeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm temp bank gurantee details.
    /// </summary>
    /// <param name = "_tmpEximEPCGBankGuaranteeDetails">Exim EPCG bank guarantee details.</param>
    /// <returns>Exim EPCG bank guarantee details.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGBankGuaranteeDetails_IN parmTmpBankGuaranteeDetails(EximEPCGBankGuaranteeDetails_IN _tmpEximEPCGBankGuaranteeDetails = tmpEximEPCGBankGuaranteeDetails)
    {
        tmpEximEPCGBankGuaranteeDetails = _tmpEximEPCGBankGuaranteeDetails;
        return tmpEximEPCGBankGuaranteeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximVendDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm temp exim vend details.
    /// </summary>
    /// <param name = "_tmpEximEPCGVendDetails">Temp exim vend details.</param>
    /// <returns>Temp exim vend details.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGVendorDetails_IN parmTmpEximVendDetails(EximEPCGVendorDetails_IN _tmpEximEPCGVendDetails = tmpEximEPCGVendDetails)
    {
        tmpEximEPCGVendDetails = _tmpEximEPCGVendDetails;
        return tmpEximEPCGVendDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run method of exim EPCG update approve class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            EximEPCGUpd_Approve_IN::runOnServer(tmpEximEPCGSchemeApproval,
                                                tmpEximEPCGExportableItems,
                                                tmpEximEPCGExportObligationPeriod,
                                                tmpEximEPCGVendDetails,
                                                tmpEximEPCGBankGuaranteeDetails,
                                                issueDateTime,
                                                licenseNum,
                                                basis,
                                                schemeTableRecId);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSchemeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the scheme table information.
    /// </summary>
    /// <param name="_importValue">
    /// The import value.
    /// </param>
    /// <param name="_currency">
    /// The currency code.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSchemeTable(
        AmountCur                   _importValue,
        CurrencyCode                _currency)
    {
        EximEPCGSchemeTable_IN    eximEPCGSchemeTable;

        eximEPCGSchemeTable = EximEPCGSchemeTable_IN::findRecId(schemeTableRecId, true);

        if (eximEPCGSchemeTable)
        {
            eximEPCGSchemeTable.Status                    = EximEPCGSchemeStatus_IN::Approved;
            eximEPCGSchemeTable.LicenseNum                = licenseNum;
            eximEPCGSchemeTable.IssueDateTime             = DateTimeUtil::removeTimeZoneOffset(issueDateTime, DateTimeUtil::getUserPreferredTimeZone());
            eximEPCGSchemeTable.ApprovalBasis             = basis;
            eximEPCGSchemeTable.ImportValueMST            = EximEPCGSchemeApprove_IN::importValueMST(_importValue,
                                                                                                     _currency,
                                                                                                     eximEPCGSchemeTable.IssueDateTime);
            eximEPCGSchemeTable.ImportExpiryDateTime      = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(eximEPCGSchemeTable.IssueDateTime,
                                                                                                                 DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                                 EximParameters_IN::find().epcgImportPeriod,
                                                                                                                 EximParameters_IN::find().epcgImportPeriodUnit), -1), DateTimeUtil::getUserPreferredTimeZone());
            eximEPCGSchemeTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_tmpEximEPCGSchemeApproval">
    /// The tmp exim epcg scheme approval information.
    /// </param>
    /// <param name="_tmpEximEPCGExportableItems">
    /// The tmp exim epcg exportable items.
    /// </param>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The tmp exim epcg export obligation period.
    /// </param>
    /// <param name="_tmpEximEPCGVendDetails">
    /// The tmp exim epcg vend details.
    /// </param>
    /// <param name="_tmpEximEPCGBankGuaranteeDetails">
    /// The temp exim epcg bank guarantee details.
    /// </param>
    /// <param name="_issueDateTime">
    /// The issue date time.
    /// </param>
    /// <param name="_licenseNum">
    /// The license number.
    /// </param>
    /// <param name="_basis">
    /// The exim epcg export obligation basis.
    /// </param>
    /// <param name="_schemeTableRecId">
    /// The exim epcg scheme table rec id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximEPCGSchemeApprove_IN              _tmpEximEPCGSchemeApproval,
        EximEPCGExportableItems_IN            _tmpEximEPCGExportableItems,
        TmpEximEPCGExportObligationPeriod_IN  _tmpEximEPCGExportObligationPeriod,
        EximEPCGVendorDetails_IN              _tmpEximEPCGVendDetails,
        EximEPCGBankGuaranteeDetails_IN       _tmpEximEPCGBankGuaranteeDetails,
        TransDateTime                         _issueDateTime,
        EximLicenseNum_IN                     _licenseNum,
        EximEPCGExportObligationBasis_IN      _basis,
        EximEPCGSchemeTableRecId_IN           _schemeTableRecId)
    {
        EximEPCGUpd_Approve_IN  epcgApprove;

        ttsbegin;

        epcgApprove = new EximEPCGUpd_Approve_IN();

        epcgApprove.parmTmpEximEPCGSchemeApproval(_tmpEximEPCGSchemeApproval);
        epcgApprove.parmTmpExportableItems(_tmpEximEPCGExportableItems);
        epcgApprove.parmTmpExpObligation(_tmpEximEPCGExportObligationPeriod);
        epcgApprove.parmTmpEximVendDetails(_tmpEximEPCGVendDetails);
        epcgApprove.parmTmpBankGuaranteeDetails(_tmpEximEPCGBankGuaranteeDetails);
        epcgApprove.parmIssueDateTime(_issueDateTime);
        epcgApprove.parmLicenseNum(_licenseNum);
        epcgApprove.parmApproveBasis(_basis);
        epcgApprove.parmSchemeTableRecId(_schemeTableRecId);

        epcgApprove.insertSchemeApprove();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates end date time of the transaction.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The obligation period of the exim EPCG export.
    /// </param>
    /// <param name="_units">
    /// The units of the transaction.
    /// </param>
    /// <returns>
    /// The end date time of the transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDateTime updateToDateTime(
        TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod,
        Integer                              _units)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;
        FromDateTime                         fromDateTime;
        ToDateTime                           toDateTime;
        EximBlockUnit_IN                     units;
        boolean                              recordExists = false;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        fromDateTime = _tmpEximEPCGExportObligationPeriod.FromDateTime;
        while select tmpEximEPCGExportObligationPeriodLoc
            order by Block asc
            where tmpEximEPCGExportObligationPeriodLoc.Block >= _tmpEximEPCGExportObligationPeriod.Block
        {
            recordExists = true;
            units = units ? tmpEximEPCGExportObligationPeriodLoc.Units : _units;
            tmpEximEPCGExportObligationPeriodLoc.FromDateTime = fromDateTime;

            toDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(
                                                                                                            DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExportObligationPeriodLoc.FromDateTime,
                                                                                                            DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                            units,
                                                                                                            PaymentPer_IN::Years), -1))), 0);
            toDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(toDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());

            tmpEximEPCGExportObligationPeriodLoc.ToDateTime   = toDateTime;

            tmpEximEPCGExportObligationPeriodLoc.update();
            fromDateTime = DateTimeUtil::addSeconds(tmpEximEPCGExportObligationPeriodLoc.ToDateTime,1);
            units    = tmpEximEPCGExportObligationPeriodLoc.Units;
        }

        if (!tmpEximEPCGExportObligationPeriodLoc && !recordExists)
        {
            toDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(
                                                                                                        DateTimeUtil::applyTimeZoneOffset(_tmpEximEPCGExportObligationPeriod.FromDateTime,
                                                                                                        DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                        _tmpEximEPCGExportObligationPeriod.Units,
                                                                                                        PaymentPer_IN::Years), -1))), 0);
            toDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(toDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());

            tmpEximEPCGExportObligationPeriodLoc.ToDateTime   = toDateTime;
        }
        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>