<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardCycleTimeMeter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardCycleTimeMeter</c> class determines the target takt, actual takt, minimum takt
///    and maximum takt values and draws them as a cycle time meter bar in a form control.
/// </summary>
public class KanbanBoardCycleTimeMeter
{
    #define.DISABLED_MIN_TAKT(5.00)
    #define.DISABLED_MAX_TAKT(15.00)
    #define.DISABLED_AVERAGE_TAKT(10.00)
    #define.DISABLED_ACTUAL_TAKT(10.00)

    boolean                 enabled;

    LeanAverageTakt         averageTakt;
    LeanProdFlowActualTakt  actualTakt;
    LeanMinimumTakt         minTakt;
    LeanMaximumTakt         maxTakt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>leanTaktStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the takt status from the takt information stored in the instance variables.
    /// </summary>
    /// <returns>
    ///    The current <c>LeanTaktStatus</c> enumeration value that is calculated from the instance takt
    ///    values.
    /// </returns>
    public LeanTaktStatus leanTaktStatus()
    {
        LeanTaktStatus  leanTaktStatus;

        if (actualTakt < minTakt)
        {
            leanTaktStatus = LeanTaktStatus::SlowDown;
        }
        else if (actualTakt > maxTakt)
        {
            leanTaktStatus = LeanTaktStatus::SpeedUp;
        }
        else
        {
            leanTaktStatus = LeanTaktStatus::OnTakt;
        }

        return leanTaktStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taktDataFromWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the takt information from a work center resource group and stores it in the instance
    ///    variables.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    A record identifier of a work center resource group from which to obtain the takt values.
    /// </param>
    /// <param name="_dateTime">
    ///    The validity date for the plan.
    /// </param>
    /// <remarks>
    ///    The takt data is retrieved only if there is only one lean production flow assigned to the specified
    ///    resource group of the work center; otherwise, the value in the <c>enabled</c> field is set to false.
    /// </remarks>
    public void taktDataFromWrkCtrResourceGroup(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        utcdatetime                 _dateTime = DateTimeUtil::getSystemDateTime())
    {
        container taktData = KanbanBoardCycleTimeMeter::taktDataFromWrkCtrResourceGroupServer(_wrkCtrResourceGroupRecId, _dateTime);

        enabled     = conPeek(taktData,1);
        averageTakt = conPeek(taktData,2);
        actualTakt  = conPeek(taktData,3);
        minTakt     = conPeek(taktData,4);
        maxTakt     = conPeek(taktData,5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLeanProductionFlowQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to obtain the lean production flows that are related to a work center resource group.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    The record ID of a work center resource group from which to obtain the takt values.
    /// </param>
    /// <param name="_activeDateTime">
    ///    The validity date for the plan.
    /// </param>
    /// <returns>
    ///    A query to obtain the production flows that are related to a work center resource group.
    /// </returns>
    public static Query buildLeanProductionFlowQuery(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        utcdatetime                 _activeDateTime = DateTimeUtil::getSystemDateTime())
    {
        Query                   query = new Query();

        QueryBuildDataSource qbdsLeanProductionFlow = query.addDataSource(tableNum(LeanProductionFlow));

        QueryBuildDataSource qbdsPlan = qbdsLeanProductionFlow.addDataSource(tableNum(Plan));
        qbdsPlan.joinMode(JoinMode::ExistsJoin);
        qbdsPlan.addLink(fieldNum(LeanProductionFlow, Plan), fieldNum(Plan, RecId));

        QueryBuildRange queryBuildRange = qbdsPlan.addRange(fieldNum(Plan, ValidFrom));
        queryBuildRange.value(strFmt('..%1', queryValue(_activeDateTime)));

        queryBuildRange = qbdsPlan.addRange(fieldNum(Plan, ValidTo));
        queryBuildRange.value(queryValue(DateTimeUtil::minValue()));

        queryBuildRange = qbdsPlan.addRange(fieldNum(Plan, ValidTo));
        queryBuildRange.value(strFmt('%1..', queryValue(_activeDateTime)));

        QueryBuildDataSource qbdsPlanReference = qbdsPlan.addDataSource(tableNum(PlanReference));
        qbdsPlanReference.joinMode(JoinMode::ExistsJoin);
        qbdsPlanReference.addLink(fieldNum(Plan, PlanReference), fieldNum(PlanReference, RecId));
        qbdsPlanReference.addRange(fieldNum(PlanReference,LegalEntity)).value(queryValue(CompanyInfo::current()));

        QueryBuildDataSource qbdsPlanPlanActivity = qbdsPlan.addDataSource(tableNum(PlanPlanActivity));
        qbdsPlanPlanActivity.joinMode(JoinMode::ExistsJoin);
        qbdsPlanPlanActivity.addLink(fieldNum(Plan, RecId), fieldNum(PlanPlanActivity, Plan));

        QueryBuildDataSource qbdsPlanActivityResourceRequirement = qbdsPlanPlanActivity.addDataSource(tableNum(PlanActivityResourceRequirement));
        qbdsPlanActivityResourceRequirement.joinMode(JoinMode::ExistsJoin);
        qbdsPlanActivityResourceRequirement.addLink(fieldNum(PlanPlanActivity, PlanActivity), fieldNum(PlanActivityResourceRequirement, PlanActivity));

        queryBuildRange = qbdsPlanActivityResourceRequirement.addRange(fieldNum(PlanActivityResourceRequirement, WrkCtrResourceGroup));
        queryBuildRange.value(queryValue(_wrkCtrResourceGroupRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardCycleTimeMeter construct()
    {
        return new KanbanBoardCycleTimeMeter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanBoardCycleTimeMeter</c> class from a work center
    ///    resource group.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    A record identifier of a work center resource group from which to obtain the takt values.
    /// </param>
    /// <param name="_dateTime">
    ///    The validity date for the plan.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanBoardCycleTimeMeter</c> class.
    /// </returns>
    public static KanbanBoardCycleTimeMeter newFromWrkCtrResourceGroup(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        utcdatetime                 _dateTime = DateTimeUtil::getSystemDateTime())
    {
        KanbanBoardCycleTimeMeter kanbanBoardCycleTimeMeter = KanbanBoardCycleTimeMeter::construct();

        kanbanBoardCycleTimeMeter.taktDataFromWrkCtrResourceGroup(_wrkCtrResourceGroupRecId, _dateTime);

        return kanbanBoardCycleTimeMeter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taktDataFromLeanProductionFlowServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the takt information from a lean production flow into a container.
    /// </summary>
    /// <param name="_leanProdFlowRecId">
    ///    The record identifier of the process element to obtain the takt values from.
    /// </param>
    /// <returns>
    ///    A container with the information fields of the takt data.
    /// </returns>
    public static container taktDataFromLeanProductionFlowServer(LeanProductionFlowRefRecId _leanProdFlowRecId)
    {
        LeanAverageTakt         averageTakt;
        LeanProdFlowActualTakt  actualTakt;
        LeanMinimumTakt         minTakt;
        LeanMaximumTakt         maxTakt;

        boolean enabled = false;

        LeanProductionFlow leanProductionFlow = LeanProductionFlow::find(_leanProdFlowRecId);
        if (leanProductionFlow)
        {
            // Takt data could be obtained, draw the indicator enabled
            averageTakt = leanProductionFlow.AverageTakt;
            actualTakt = leanProductionFlow.actualCycleTime();
            minTakt = leanProductionFlow.MinimumTakt;
            maxTakt = leanProductionFlow.MaximumTakt;

            if (averageTakt > 0 &&
               maxTakt > 0)
            {
                enabled = true;
            }
        }

        // A disabled indicator shows standard values
        if (!enabled)
        {
            averageTakt = #DISABLED_AVERAGE_TAKT;
            actualTakt  = #DISABLED_ACTUAL_TAKT;
            minTakt     = #DISABLED_MIN_TAKT;
            maxTakt     = #DISABLED_MAX_TAKT;
        }

        return [enabled,averageTakt,actualTakt,minTakt,maxTakt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>taktDataFromWrkCtrResourceGroupServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the takt information from a resource group of a work center into a container.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    The record identifier of a work center resource group to obtain the takt values from.
    /// </param>
    /// <param name="_dateTime">
    ///    The validity date for the plan.
    /// </param>
    /// <returns>
    ///    A container with the takt data information fields.
    /// </returns>
    /// <remarks>
    ///    The takt data is retrieved if there is only one lean production flow that is assigned to the
    ///    specified resource group of a work center; otherwise the value that is in the <c>enabled</c> field
    ///    is set to false.
    /// </remarks>
    public static container taktDataFromWrkCtrResourceGroupServer(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        utcdatetime                 _dateTime = DateTimeUtil::getSystemDateTime())
    {
        LeanProductionFlow          leanProductionFlow;
        recId                       leanProductionFlowRecId = 0;

        Query query = KanbanBoardCycleTimeMeter::buildLeanProductionFlowQuery(_wrkCtrResourceGroupRecId, _dateTime);
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(LeanProductionFlow));
        queryBuildDataSource.addSelectionField(fieldNum(LeanProductionFlow, RecId), SelectionField::Count);
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            leanProductionFlow = queryRun.get(tableNum(LeanProductionFlow));
        }

        // We only show the indicator enabled if there is only one lean production flow for the work center resource group
        if (leanProductionFlow.RecId == 1)
        {
            query = KanbanBoardCycleTimeMeter::buildLeanProductionFlowQuery(_wrkCtrResourceGroupRecId, _dateTime);
            queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                leanProductionFlow = queryRun.get(tableNum(LeanProductionFlow));
                leanProductionFlowRecId = leanProductionFlow.RecId;
            }
        }

        return KanbanBoardCycleTimeMeter::taktDataFromLeanProductionFlowServer(leanProductionFlowRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
