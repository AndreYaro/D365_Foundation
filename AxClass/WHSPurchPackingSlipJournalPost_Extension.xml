<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPurchPackingSlipJournalPost_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchPackingSlipJournalPost))]
final internal class WHSPurchPackingSlipJournalPost_Extension
{
    private WHSInstrumentationLogger whsInstrumentationLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// For a WHS or TMS item, if the option to close the PO line for delivery, after posting, update the load quantities not to have 
    /// load quantities larger than the inventory transactions indicate.
    /// </summary>
    protected void postInventory()
    {
        boolean deliveryClosedOfWhsOrTmsItem = purchParmLine.closed && (WHSInventEnabled::exist(purchLine.ItemId) || TMSInventEnabled::exist(purchLine.ItemId));
        InventQty origRemainQty;
        PdsCWQty origRemainCWQty;        

        if (deliveryClosedOfWhsOrTmsItem)
        {
            origRemainQty = purchLine.RemainInventPhysical + purchLine.RemainInventFinancial;
            origRemainCWQty = purchLine.PdsCWRemainInventPhysical + purchLine.PdsCWRemainInventFinancial;
        }

        next postInventory();
        
        if (deliveryClosedOfWhsOrTmsItem)
        {
            InventQty newRemainQty = purchLine.RemainInventPhysical + purchLine.RemainInventFinancial;
            PdsCWQty newRemainCWQty = purchLine.PdsCWRemainInventPhysical + purchLine.PdsCWRemainInventFinancial;
            
            if (origRemainQty != newRemainQty || 
                origRemainCWQty != newRemainCWQty)
            {
                var inventTransIdSumDelivery = InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(purchLine.InventTransId).RecId);
                InventHandlingQty origTotalQtyForLoad, newTotalQtyForLoad;
                UnitOfMeasureSymbol unitId;

                if (PdsGlobal::pdsIsCWItem(purchLine.ItemId))
                {
                    newTotalQtyForLoad = inventTransIdSumDelivery.pdsCWReceipt() + inventTransIdSumDelivery.pdsCWIssue();
                    origTotalQtyForLoad = newTotalQtyForLoad + (origRemainCWQty - newRemainCWQty);
                    unitId = purchLine.pdsCWUnitId();
                }
                else
                {
                    newTotalQtyForLoad = inventTransIdSumDelivery.receipt() + inventTransIdSumDelivery.issue();
                    origTotalQtyForLoad = newTotalQtyForLoad + (origRemainQty - newRemainQty);
                    unitId = purchLine.PurchUnit;
                }
                
                var srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParameters(
                                                            purchLine,
                                                            purchLine.InventTransId,
                                                            purchLine.InventDimId,
                                                            purchLine.InventDimId, // Only quantity changes as part of posting
                                                            newTotalQtyForLoad,
                                                            origTotalQtyForLoad,
                                                            unitId,
                                                            unitId, // Only quantity changes as part of posting
                                                            false); // Do not create new loads

                srcLineChangeLoadLineUpdater.updateLoadLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePhysicalInventoryUpdate</Name>
				<Source><![CDATA[
    protected void initializePhysicalInventoryUpdate(InventUpd_Physical _inventUpd_Physical)
    {
        next initializePhysicalInventoryUpdate(_inventUpd_Physical);

        if (WHSInventEnabled::exist(_inventUpd_Physical.movement().itemId()))
        {
            // Checking shouldDetermineRegisteredQuantitiesFromLoadId to mirror the way PurchParmLines are created
            // when using only Registered quantities in a WHS load context (such as in WhsPostPackingSlip).
            if (purchParmTable.LoadId &&
                WHSPurchLine::shouldDetermineRegisteredQuantitiesFromLoadId(_inventUpd_Physical.movement().inventTransOriginId()))
            {
                _inventUpd_Physical.parmLoadId(purchParmTable.LoadId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    protected void endPost()
    {
        next endPost();

        if (this.mustCreateWHSLoadTableVendPackingSlipRecords())
        {
            this.createWHSLoadTableVendPackingSlipRecords();
        }

        if (this.mustUpdateLoadTableStatus())
        {
            this.updateWHSLoadTableStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateWHSLoadTableVendPackingSlipRecords</Name>
				<Source><![CDATA[
    private boolean mustCreateWHSLoadTableVendPackingSlipRecords()
    {
        return versioningUpdateType == versioningUpdateType::Initial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLoadTableStatus</Name>
				<Source><![CDATA[
    private boolean mustUpdateLoadTableStatus()
    {
        boolean skipLoadStatusUpdateContextActive = WHSProductReceiptSkipLoadStatusUpdateContext::currentSkipLoadStatusUpdateParameter();
        boolean isInitialPosting = (versioningUpdateType == VersioningUpdateType::Initial);
        
        return !skipLoadStatusUpdateContextActive && isInitialPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHSLoadTableVendPackingSlipRecords</Name>
				<Source><![CDATA[
    private void createWHSLoadTableVendPackingSlipRecords()
    {
        using (var activityContext = this.whsInstrumentationLogger().packingSlipPostingExtensionActivities().createWHSLoadTableVendPackingSlipRecords(purchParmTable.LoadId))
        {
            if (PurchParmTable.LoadId)
            {
                this.createWHSLoadTableVendPackingSlipRecordFromParmTable();
            }
            else
            {
                this.createWHSLoadTableVendPackingSlipRecordsFromInventTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHSLoadTableVendPackingSlipRecordFromParmTable</Name>
				<Source><![CDATA[
    private void createWHSLoadTableVendPackingSlipRecordFromParmTable()
    {        
        WHSLoadTableVendPackingSlipJour::createRecord(PurchParmTable.LoadId, PurchParmTable.DataAreaId, vendPackingSlipJour.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHSLoadTableVendPackingSlipRecordsFromInventTrans</Name>
				<Source><![CDATA[
    private void createWHSLoadTableVendPackingSlipRecordsFromInventTrans()
    {
        VendPackingSlipTrans    postedPackingSlipLine;
        InventTrans             postedInventTrans;
        InventTransOrigin       postedInventTransOrigin;
        
        while select LoadId, DataAreaId from postedInventTrans
            group by postedInventTrans.LoadId
            where postedInventTrans.LoadId != ''
               && postedInventTrans.PackingSlipId == vendPackingSlipJour.PackingSlipId
               && postedInventTrans.DatePhysical == vendPackingSlipJour.DeliveryDate
            exists join postedInventTransOrigin
                where postedInventTrans.InventTransOrigin == postedInventTransOrigin.Recid
            exists join postedPackingSlipLine
                where postedPackingSlipLine.InventTransId == postedInventTransOrigin.InventTransId
                   && postedPackingSlipLine.DeliveryDate == vendPackingSlipJour.DeliveryDate
                   && postedPackingSlipLine.PackingSlipId == vendPackingSlipJour.PackingSlipId
        {
            WHSLoadTableVendPackingSlipJour::createRecord(postedInventTrans.LoadId, postedInventTrans.DataAreaId, vendPackingSlipJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSLoadTableStatus</Name>
				<Source><![CDATA[
    private void updateWHSLoadTableStatus()
    {
        using (var activityContext = this.whsInstrumentationLogger().packingSlipPostingExtensionActivities().updateWHSLoadTableStatus())
        {
            WHSLoadTableVendPackingSlipJour loadTableVendPackingSlipJour;

            while select loadTableVendPackingSlipJour
                where loadTableVendPackingSlipJour.VendPackingSlipJour == vendPackingSlipJour.RecId
            {
                changecompany (loadTableVendPackingSlipJour.LoadDataAreaId)
                {
                    WHSLoadTable loadTable = WHSLoadTable::find(loadTableVendPackingSlipJour.LoadId);
                    if (loadTable.LoadShipConfirmUTCDateTime == utcDateTimeNull())
                    {
                        WhsPostPackingSlip::construct().shipConfirm(loadTableVendPackingSlipJour.LoadId);
                    }
                    else
                    {
                        WHSLoadStatusUpdater::newFromLoadId(loadTableVendPackingSlipJour.LoadId).updateWhenVendPackingSlipPosted();
                        this.updateShipmentStatusByLoadId(loadTableVendPackingSlipJour.LoadId);
                    }    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentStatusByLoadId</Name>
				<Source><![CDATA[
    private void updateShipmentStatusByLoadId(WHSLoadId _loadId)
    {
        using (var activityContext = this.whsInstrumentationLogger().packingSlipPostingExtensionActivities().updateShipmentStatusByLoadId(_loadId))
        {
            WHSShipmentStatusUpdater::updateInboundShipmentsByLoad(_loadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInstrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger whsInstrumentationLogger()
    {
        if (!WHSInstrumentationLogger)
        {
            WHSInstrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSPurchPackingSlipJournalPost_Extension));
        }

        return WHSInstrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>