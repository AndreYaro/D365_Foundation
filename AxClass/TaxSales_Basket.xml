<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSales_Basket</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class TaxSales_Basket extends TaxSales
{
    SalesBasketLine     salesBasketLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction supports adjusting the calculated base amount when tax is
    ///    included in item price and the user adjusts the tax amount.
    /// </summary>
    /// <returns>
    ///    true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    TaxAmount  calc()
    {
        TaxAmount                taxAmount;
        boolean                  moreLines;
        TaxBaseCur               baseAmount;
        Percent                  cashDisc        = salesFormLetter.taxCashDiscPercent();
        TaxCalculationAdjustment taxCalculationAdjustment;
        Map                      amountInclTax   = new Map(Types::Container, Types::Real);
        Map                      amountExclTax   = new Map(Types::Container, Types::Real);
        RefRecId                 adjustRecId[];
        RefTableId               adjustedTableId[];
        AmountCur                pennyDiff[];
        Counter                  counter;
        Counter                  counterMax;
        AmountCur                lineAmount;
        DiscAmount               lineEndDisc;
        boolean                  success = true;

        if (this.skipTaxCalculations())
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();

            if (TaxCalculationInstrumentationToggle::instance().isEnabled())
            {
                taxEventSourceLog.CalculateTaxStart(identifier, TaxUncommitted::callStackInfo());
            }
            else
            {
                taxEventSourceLog.CalculateTaxStart(identifier);
            }

            stopWatch.Start();

            if (!skipTableMarkup)
            {
                salesFormLetter.initCursorMarkupHeader(salesFormLetter.tableId(),
                                                       salesFormLetter.recID());

                this.calcMarkup(amountInclTax, amountExclTax);
            }

            salesFormLetter.initCursor();
            moreLines = true;
            while (moreLines)
            {
                salesBasketLine = salesFormLetter.nextLine() as SalesBasketLine;
                if (salesBasketLine)
                {
                    lineAmount = -salesFormLetter.transLineAmount();

                    // get the line amount excluding tax (base amount)
                    if (salesFormLetter.isTaxIncluded())
                    {
                        baseAmount = this.amountExclTax(
                                            lineAmount,
                                            false,
                                            true,
                                            salesFormLetter.transQty(),
                                            salesBasketLine.SalesUnit,
                                            salesBasketLine.ItemId,
                                            salesBasketLine.RecId,
                                            salesBasketLine.TableId);
                    }
                    else
                    {
                        baseAmount = lineAmount;
                    }

                    // deduct total discount from the base amount
                    if (salesFormLetter.endDisc() && salesBasketLine.endDisc())
                    {
                        lineEndDisc = CurrencyExchangeHelper::amount(baseAmount, this.currencyCode()) * salesFormLetter.endDisc() / 100;
                    }
                    baseAmount = baseAmount - lineEndDisc;

                    // If this is a Tax included scenario then store the line amount and base amounts for later use.
                    if (salesFormLetter.isTaxIncluded())
                    {
                        amountInclTax.insert(this.taxTransOrigin(salesBasketLine), lineAmount);
                        amountExclTax.insert(this.taxTransOrigin(salesBasketLine), baseAmount);
                        taxIncludedInItemPrice = true;
                    }

                    // deduct non tax portion of the cash discount from the base amount
                    if (this.taxParameters().TaxLessCashDisc)
                    {
                        baseAmount -= baseAmount * cashDisc / 100;
                    }

                    this.insertLineInInternal(baseAmount,
                                              salesFormLetter.transQty() * -1,
                                              salesBasketLine.SalesUnit,
                                              salesBasketLine.ItemId,
                                              salesFormLetter.transPcsPrice(),
                                              salesBasketLine.defaultDimension(),
                                              LedgerDimensionFacade::serviceCreateLedgerDimension(salesFormLetter.operationAccount(), salesBasketLine.defaultDimension()),
                                              salesFormLetter.operationPosting());

                    if (taxCalculateLine)
                    {
                        taxAmount = this.calcTax();
                        this.saveInProcessTransaction();
                        if (salesFormLetter.exchRate(taxDate)      != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)      ||
                            salesFormLetter.exchRateSecondary(taxDate)  != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)    ||
                            salesFormLetter.triangulation(taxDate) != Currency::triangulation(sourceCurrencyCode, taxDate))
                            this.adjustAmount(salesFormLetter.exchRate(taxDate),salesFormLetter.exchRateSecondary(taxDate));
                    }

                    if (salesFormLetter.transTaxGroup() && SalesFormLetter.transTaxItemGroup())
                    {
                        taxableDocumentLines++;
                    }
                    if (!skipLineMarkup)
                    {
                        this.calcMarkup(amountInclTax, amountExclTax);
                    }
                }
                else
                    moreLines   = false;
            }

            if (! this.checkTaxCodesInTotal())
            {
                throw error("@SYS22772");
            }

            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(cashDisc);
                taxAmount = this.calcTax();
                this.saveTotalInProcessTransaction();
            }

            if (taxIncludedInItemPrice)
            {
                while select sum(SourceTaxAmountCur)
                from taxWorkTrans
                group by SourceTableId, SourceRecId, SourceCurrencyCode
                where (taxWorkTrans.SourceTableId   == salesBasketLine.TableId ||
                       taxWorkTrans.SourceTableId   == tableNum(MarkupTrans)) &&
                      taxWorkTrans.TaxDirection    != TaxDirection::UseTax   &&
                      taxWorkTrans.TaxOrigin       != TaxOrigin::TaxReversed
                {
                    if (amountInclTax.exists(this.taxWorkTransSource(taxWorkTrans)) &&
                        amountExclTax.exists(this.taxWorkTransSource(taxWorkTrans)))
                    {
                        amountInclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));
                        amountExclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));

                        if ((amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) + taxWorkTrans.SourceTaxAmountCur) != amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)))
                        {
                            counterMax++;
                            adjustRecId[counterMax] = taxWorkTrans.SourceRecId;
                            adjustedTableId[counterMax] = taxWorkTrans.SourceTableId;
                            pennyDiff[counterMax] = amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) +
                                                    taxWorkTrans.SourceTaxAmountCur -
                                                    amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans));
                        }
                    }
                }
                if (counterMax)
                {
                    for (counter = 1; counter <= counterMax; counter++)
                        this.adjustPennyDiff(pennyDiff[counter], adjustedTableId[counter], adjustRecId[counter]);
                }
            }

            if (taxCalculateTotal)
            {
                if (salesFormLetter.exchRate(taxDate)      != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)      ||
                    salesFormLetter.exchRateSecondary(taxDate)  != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)    ||
                    salesFormLetter.triangulation(taxDate) != Currency::triangulation(sourceCurrencyCode, taxDate))
                {
                    this.adjustAmount(salesFormLetter.exchRate(taxDate),salesFormLetter.exchRateSecondary(taxDate));
                }
            }

            this.roundTaxOnTaxGroup();

            taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
            if (taxCalculationAdjustment)
            {
                taxCalculationAdjustment.parmLineAmountIncludesTax(salesFormLetter.isTaxIncluded());
                taxCalculationAdjustment.parmAmountInclTaxMap(amountInclTax);
                taxCalculationAdjustment.loadTaxAdjustments();
            }

            taxAmount = this.totalTaxAmount();
        }
        catch (errorEx) // errorEx is the same as Exception::Error
        {
            success = false;
			taxEventSourceLog.TaxProcessError(guid2Str(newGuid()),
											  errorEx.Message,
											  errorEx.StackTrace,
											  methodStr(TaxSales_Basket, calc));
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            select count(RecId) from taxWorkTrans;
            taxEventSourceLog.CalculateTaxStop(identifier,
                                               SysCountryRegionCode::countryInfo(),
                                               tableId2Name(headingTableId),
                                               TaxTelemetryConstants::salesTax,
                                               stopWatch.ElapsedMilliseconds,
                                               taxableDocumentLines,
                                               markupTransTaxableDocumentLines,
                                               taxWorkTrans.RecId,
                                               salesFormLetter.isTaxIncluded(),
                                               headingTableId,
                                               tableId2Name(headingTableId),
                                               headingRecId,
                                               success);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the calculation of the tax markup by using the <c>salesFormLetter</c> variable.
    /// </summary>
    /// <param name="_amountInclTax">
    ///    The map which will be used to store the tax included line amounts for the tax included in item
    ///    price scenarios.
    /// </param>
    /// <param name="_amountExclTax">
    ///    The map which will be used to store the tax excluded line amounts for the tax included in item
    ///    price scenarios.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>calc</c> method.
    /// </remarks>
    protected void calcMarkup(Map _amountInclTax, Map _amountExclTax)
    {
        TaxAmount   taxAmount;
        NoYes       moreMarkup;
        TaxBaseCur  baseAmount;
        DiscPct     cashDisc        = salesFormLetter.taxCashDiscPercent();
        AmountCur   lineAmount;

        moreMarkup  = true;
        while (moreMarkup)
        {
            markupTrans= salesFormLetter.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister= NoYes::Yes;

                lineAmount = salesFormLetter.markupAmount() * -1;

                // get the line amount excluding tax (base amount)
                if (salesFormLetter.isTaxIncluded())
                {
                    baseAmount = this.amountExclTax(
                                        lineAmount,
                                        false,
                                        false,
                                        0,
                                        '',
                                        '',
                                        markupTrans.RecId,
                                        markupTrans.TableId);
                }
                else
                {
                    baseAmount = lineAmount;
                }

                // If this is a Tax included scenario then store the line amount and base amounts for later use.
                if (salesFormLetter.isTaxIncluded())
                {
                    _amountInclTax.insert(this.taxTransOrigin(markupTrans), lineAmount);
                    _amountExclTax.insert(this.taxTransOrigin(markupTrans), baseAmount);
                    taxIncludedInItemPrice = true;
                }

                // deduct non tax portion of the cash discount from the base amount
                if (this.taxParameters().TaxLessCashDisc)
                {
                    baseAmount -= baseAmount * cashDisc / 100;
                }

                this.insertLineInInternal(baseAmount,
                                          0,
                                          '',
                                          '',
                                          0,
                                          salesFormLetter.markupDefaultDimension(),
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(salesFormLetter.operationAccountMarkup(), salesFormLetter.markupDefaultDimension()),
                                          salesFormLetter.operationPostingMarkup());

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();
                    this.saveInProcessTransaction();
                }

                if (salesFormLetter.transTaxGroup() && SalesFormLetter.transTaxItemGroup())
                {
                    markupTransTaxableDocumentLines++;
                }
            }
            else
            {
                markupAdminister= NoYes::No;
                moreMarkup  = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(SalesCalcTax_Sales   _salesForm)
    {
        boolean                 moreLines;
        TransDate               taxCalculationDate;
        TaxCalculationDateType  taxCalculationDateType  = this.taxParameters().TaxCalculationDateType;

        salesFormLetter         = _salesForm;
        taxModuleType           = TaxModuleType::Sales;
        headingTableId          = salesFormLetter.tableId();
        headingRecId            = salesFormLetter.recID();

        this.setExchRates(salesFormLetter.currencyCode(), 0, 0, Currency::noYes2UnknownNoYes(salesFormLetter.triangulation(salesFormLetter.invoiceDate())));

        salesFormLetter.initCursorMarkupHeader(salesFormLetter.tableId(),
                                               salesFormLetter.recID());

        this.setCashDiscount(salesFormLetter.taxCashDiscPercent(), 0);

        taxIncludedInItemPrice = salesFormLetter.isTaxIncluded();

        this.markup('');
        salesFormLetter.initCursor();
        moreLines = true;
        while (moreLines)
        {
            salesBasketLine = salesFormLetter.nextLine() as SalesBasketLine;

            if (salesBasketLine)
            {
                taxDate = salesFormLetter.invoiceDate();

                switch (taxCalculationDateType)
                {
                    case TaxCalculationDateType::DeliveryDate:
                        taxCalculationDate = salesFormLetter.deliveryDate();
                        break;

                    case TaxCalculationDateType::DocumentDate:
                        taxCalculationDate = salesFormLetter.documentDate();
                        break;

                    case TaxCalculationDateType::InvoiceDate:
                        taxCalculationDate = salesFormLetter.invoiceDate();
                        break;
                }

                this.insertIntersection(salesBasketLine.TaxGroup,
                                        salesBasketLine.TaxItemGroup,
                                        '', //salesBasketLine.TransId(),
                                        salesBasketLine.ItemId,
                                        taxCalculationDate);

                if (! this.checkTaxCodesByLine())
                    throw error("@SYS22772");

                this.markup(''); // salesFormLetter.transTransId());
            }
            else
                moreLines = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    protected void  markup(InventTransId  _inventTransId)
    {
        NoYes                   moreMarkup;
        TransDate               taxCalculationDate;
        TaxCalculationDateType  taxCalculationDateType = this.taxParameters().TaxCalculationDateType;

        taxDate = salesFormLetter.invoiceDate();

        moreMarkup = true;
        while (moreMarkup)
        {
            markupTrans = salesFormLetter.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister = NoYes::Yes;

                switch (taxCalculationDateType)
                {
                    case TaxCalculationDateType::DeliveryDate:
                        taxCalculationDate = salesFormLetter.deliveryDateMarkup();
                        break;

                    case TaxCalculationDateType::DocumentDate:
                        taxCalculationDate = salesFormLetter.documentDate();
                        break;

                    case TaxCalculationDateType::InvoiceDate:
                        taxCalculationDate = salesFormLetter.invoiceDate();
                        break;
                }

                this.insertIntersection(salesFormLetter.markupTaxGroup(),
                                        salesFormLetter.markupTaxItemGroup(),
                                        _inventTransId,
                                        markupTrans.Txt,
                                        taxCalculationDate);

                if (! this.checkTaxCodesByLine())
                    throw error("@SYS22772");
            }
            else
            {
                markupAdminister    = NoYes::No;
                moreMarkup          = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>RecId</c> value of the transaction to be taxed.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    For example, if the tax is called from a <c>SalesLine</c> record, this method will return the
    ///    <c>RecId</c> value of that <c>SalesLine</c> record.
    /// </remarks>
    public RecId sourceRecId()
    {
        if (markupAdminister)
            return markupTrans.RecId;
        else
            return salesBasketLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TableId</c> value of the transaction to be taxed.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    For example, if the tax is called from a <c>SalesLine</c> record, this method will return the
    ///    <c>TableId </c> value of the <c>SalesLine</c> field.
    /// </remarks>
    public TableId sourceTableId()
    {
        if (markupAdminister)
            return markupTrans.TableId;
        else
            return salesBasketLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxSales_Basket construct(SalesCalcTax_Sales   _salesForm)
    {
        TaxSales_Basket taxSales_Basket;

        taxSales_Basket = new TaxSales_Basket();

        taxSales_Basket.init(_salesForm);

        return taxSales_Basket;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>