<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates cash account balance for a day given.
/// </summary>
public class rCashBalance
{
    protected const int sumBreak = 0;
    protected const int sumBalances = 1;
    protected const int sumTransact = 2;

    protected const int intervalCount = 2;

    TransDate toDate;

    TransDate sumToDate[intervalCount];
    Integer sumSource[intervalCount];

    QueryRun qrCashBalances;
    QueryRun qrCashTrans;

    AmountMST amountMST;
    KeySum ledgerKeySum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    public AmountMST amountMST()
    {
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        Query query;
        QueryBuildDataSource qbds;

        if (sumSource[1] == sumBalances ||
            sumSource[2] == sumBalances)
        {
            query = new Query();

            qbds = query.addDataSource(tableNum(RCashBalances));
            qbds.orderMode(OrderMode::GroupBy);

            qbds.addSelectionField(fieldNum(RCashBalances, AmountMST), SelectionField::Sum);
            qbds.addSelectionField(fieldNum(RCashBalances, ExchAdjustment), SelectionField::Sum);
            qbds.addSortField(fieldNum(RCashBalances, MainAccountId));

            qbds.addRange(fieldNum(RCashBalances, AccountNum));
            qbds.addRange(fieldNum(RCashBalances, PeriodStart)).value(this.dateRangeValue(sumBalances));

            qrCashBalances = new QueryRun(query);
        }

        if (sumSource[1] == sumTransact ||
            sumSource[2] == sumTransact)
        {
            query = new Query();

            qbds = query.addDataSource(tableNum(RCashTrans));
            qbds.orderMode(OrderMode::GroupBy);

            qbds.addSelectionField(fieldNum(RCashTrans, AmountMST), SelectionField::Sum);
            qbds.addSortField(fieldNum(RCashTrans, TransStatus));

            qbds.addRange(fieldNum(RCashTrans, AccountNum));
            qbds.addRange(fieldNum(RCashTrans, TransDate)).value(this.dateRangeValue(sumTransact));
            qbds.addRange(fieldNum(RCashTrans, TransStatus)).value(enum2Symbol(enumNum(RCashTransStatus), RCashTransStatus::Approved));

            DimensionProvider dimensionProvider = new DimensionProvider();

            DimensionAttribute dimAttribute = DimensionAttribute::find(
                DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

            qbds = dimensionProvider.addDataSourceToQuery(
                query,
                qbds.name(),
                fieldStr(RCashTrans, LedgerDimension),
                DimensionComponent::DimensionAttribute,
                dimAttribute.Name);

            qbds.joinMode(JoinMode::OuterJoin);
            qbds.orderMode(OrderMode::GroupBy);
            qbds.addSortField(fieldName2Id(tableNum(DimensionAttributeValueCombination), dimAttribute.DimensionKeyColumnName));

            qrCashTrans = new QueryRun(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(RCashAccount _accountNum)
    {
        this.clear();

        if (qrCashBalances)
        {
            qrCashBalances.query().dataSourceNo(1).findRange(fieldNum(RCashBalances, AccountNum)).value(_accountNum);

            RCashBalances cashBalances;

            while (qrCashBalances.next())
            {
                cashBalances = qrCashBalances.getNo(1);
                amountMST += cashBalances.AmountMST + cashBalances.ExchAdjustment;
                ledgerKeySum.updateNow(cashBalances.MainAccountId, [cashBalances.AmountMST + cashBalances.ExchAdjustment]);
            }
        }

        if (qrCashTrans)
        {
            DimensionAttribute dimAttribute = DimensionAttribute::find(
                DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

            qrCashTrans.query().dataSourceNo(1).findRange(fieldNum(RCashTrans, AccountNum)).value(_accountNum);

            DimensionProvider dimensionProvider = new DimensionProvider();
            RCashTrans cashTrans;

            while (qrCashTrans.next())
            {
                RecId entityInstance = dimensionProvider.getDimensionEntityInstanceFromQueryRun(
                    qrCashTrans,
                    qrCashTrans.query().dataSourceNo(1).name(),
                    fieldStr(RCashTrans, LedgerDimension),
                    dimAttribute.Name);

                cashTrans = qrCashTrans.get(tableNum(RCashTrans));
                amountMST += cashTrans.AmountMST;

                ledgerKeySum.updateNow(entityInstance, [cashTrans.AmountMST]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    protected void clear()
    {
        amountMST = 0;

        if (qrCashBalances)
        {
            qrCashBalances.reset();
        }

        if (qrCashTrans)
        {
            qrCashTrans.reset();
        }

        ledgerKeySum.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRangeValue</Name>
				<Source><![CDATA[
    private str dateRangeValue(int _sourceType)
    {
        str ret;
        int idx = 1;
        TransDate sumFromDate = dateNull();

        while (idx <= intervalCount)
        {
            if (sumSource[idx] == _sourceType)
            {
                if (ret)
                {
                    ret += ',';
                }
                ret += queryRange(sumFromDate, sumToDate[idx]);
            }
            sumFromDate = sumToDate[idx] + 1;
            idx++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriod</Name>
				<Source><![CDATA[
    protected void initPeriod()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear fiscalCalendarYear;

        select firstonly RecId, EndDate from fiscalCalendarPeriod
            order by StartDate desc
            where fiscalCalendarPeriod.EndDate <= toDate
               && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
        exists join fiscalCalendarYear
            where fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear
               && fiscalCalendarYear.FiscalCalendar == CompanyInfoHelper::fiscalCalendarRecId();

        int idx = 1;

        if (fiscalCalendarPeriod)
        {
            // Calculate first interval on the basis of balances
            sumSource[idx] = sumBalances;
            sumToDate[idx] = fiscalCalendarPeriod.EndDate;
            idx++;

            if (fiscalCalendarPeriod.EndDate == toDate)
            {
                sumSource[idx] = sumBreak;
                sumToDate[idx] = toDate;
            }
        }

        if (idx <= intervalCount)
        {
            // Calculate last piece using transactions
            sumSource[idx] = sumTransact;
            sumToDate[idx] = toDate;
            idx++;
        }

        if (idx <= intervalCount)
        {
            sumSource[idx] = sumBreak;
            sumToDate[idx] = toDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAmountMST</Name>
				<Source><![CDATA[
    public AmountMST ledgerAmountMST(int _idx)
    {
        return conPeek(ledgerKeySum.index2Data(_idx), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerCount</Name>
				<Source><![CDATA[
    public Counter ledgerCount()
    {
        return ledgerKeySum.numOfTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger dimension for specified index value.
    /// </summary>
    /// <param name="_idx">
    /// An instance of int data type.
    /// </param>
    /// <returns>
    /// An <c>LedgerDimensionDefaultAccount</c> value.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimension(int _idx)
    {
        return ledgerKeySum.index2Key(_idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TransDate _toDate)
    {
        #ISOCountryRegionCodes

        str featureReference = GlobalizationInstrumentationHelper::getFeatureRefByLegalEntityCountryRegion([
            [#isoPL, GlobalizationConstants::FeatureReferencePL00021],
            [#isoCZ, GlobalizationConstants::FeatureReferenceCZ00016],
            [#isoHU, GlobalizationConstants::FeatureReferenceHU00016],
            [#isoLT, GlobalizationConstants::FeatureReferenceLT00017],
            [#isoLV, GlobalizationConstants::FeatureReferenceLV00012],
            [#isoEE, GlobalizationConstants::FeatureReferenceEE00013]]);

        if (featureReference)
        {
            GlobalizationInstrumentationHelper::featureRun(featureReference, funcName());
        }

        toDate = _toDate;
        ledgerKeySum = KeySum::construct(1, 1);

        this.initPeriod();
        this.buildQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>