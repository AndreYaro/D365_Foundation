<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTableInventoryDimensionGroups</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTableInventoryDimensionGroups
{
    //The item and product for which dimension groups are assigned.
    DataAreaId                          itemDataAreaId;
    ItemId                              itemId;
    EcoResProductRecId                  product;

    //The storage and tracking dimension groups that are assigned to the item.
    EcoResStorageDimensionGroupRecId    ecoResStorageDimensionGroupRecIdNew;
    EcoResTrackingDimensionGroupRecId   ecoResTrackingDimensionGroupRecIdNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActiveDimWithNoBlankIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the active dimension can be set not to allow for blank dimension values on issue
    /// transactions.
    /// </summary>
    /// <param name="_dimFieldId">
    /// The specified <c>fieldId</c> value of the <c>InventDim</c> field.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// true if the active dimension can be set not to allow blank dimension values on issue transactions;
    /// otherwise, false.
    /// </returns>
    protected boolean checkActiveDimWithNoBlankIssue(FieldId  _dimFieldId, ItemId _itemId)
    {
        boolean                         ret = true;

        Query query = this.queryInventTransWithoutDimensionValue(_dimFieldId, _itemId);

        QueryBuildDataSource qbdsInventTrans = query.dataSourceTable(tableNum(InventTrans));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::None));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(strFmt('%1,%2,%3', queryValue(StatusIssue::ReservPhysical), queryValue(StatusIssue::Picked), queryValue(StatusIssue::Deducted)));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            SysDictField field = new SysDictField(tableNum(InventDim), _dimFieldId);
            SysDictField allowBlankIssueField = new SysDictField(tableNum(EcoResStorageDimensionGroupFldSetup), fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankIssueEnabled));

            ret = checkFailed(strFmt("@SYS339259", allowBlankIssueField.label(), field.label()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActiveDimWithNoBlankReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the active dimension can be set not to allow for blank dimension values on receipt
    /// transactions.
    /// </summary>
    /// <param name="_dimFieldId">
    /// The specified <c>fieldId</c> value of the <c>InventDim</c> field.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// true if the active dimension can be set not to allow for blank dimension values on receipt
    /// transactions; otherwise, false.
    /// </returns>
    protected boolean checkActiveDimWithNoBlankReceipt(FieldId  _dimFieldId, ItemId _itemId)
    {
        boolean                             ret = true;

        Query query = this.queryInventTransWithoutDimensionValue(_dimFieldId, _itemId);

        QueryBuildDataSource qbdsInventTrans = query.dataSourceTable(tableNum(InventTrans));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(strFmt('%1,%2,%3', queryValue(StatusReceipt::Arrived), queryValue(StatusReceipt::Registered), queryValue(StatusReceipt::Received)));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            SysDictField field = new SysDictField(tableNum(InventDim), _dimFieldId);
            SysDictField allowBlankReceiptField = new SysDictField(tableNum(EcoResStorageDimensionGroupFldSetup), fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankReceiptEnabled));

            ret     = checkFailed(strFmt("@SYS339259", allowBlankReceiptField.label(), field.label()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionDeactivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the active dimension can be deactivated.
    /// </summary>
    /// <param name="_dimFieldId">
    /// A specified <c>fieldId</c> value of <c>InventDim</c> field.
    /// </param>
    /// <param name="_itemId">
    /// A specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// true if the active dimension can be deactivated; otherwise, false.
    /// </returns>
    protected boolean checkDimensionDeactivation(FieldId  _dimFieldId, ItemId _itemId)
    {
        boolean                             ret = true;

        Query query = this.queryInventTransWithDimensionValue(_dimFieldId, _itemId);

        QueryBuildDataSource qbdsInventTrans = query.dataSourceTable(tableNum(InventTrans));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(SysQuery::valueNot(StatusReceipt::Purchased));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(SysQuery::valueNot(StatusIssue::Sold));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            SysDictField field = new SysDictField(tableNum(InventDim), _dimFieldId);
            SysDictField allowBlankIssueField = new SysDictField(tableNum(EcoResStorageDimensionGroupFldSetup), fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankIssueEnabled));
            SysDictField allowBlankReceiptField = new SysDictField(tableNum(EcoResStorageDimensionGroupFldSetup), fieldNum(EcoResStorageDimensionGroupFldSetup, IsAllowBlankReceiptEnabled));

            ret = checkFailed(strFmt("@SYS339258",
                field.label(), allowBlankIssueField.label(), allowBlankReceiptField.label()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionGroupsSetupChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the specified dimension groups can be assigned to the specified item based on the
    /// dimension values setup.
    /// </summary>
    /// <param name="_inventDimGroupSetupOrig">
    /// The specified original <c>InventDimGroupSetup</c> setup.
    /// </param>
    /// <param name="_inventDimGroupSetupNew">
    /// The specified new <c>InventDimGroupSetup</c> setup.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// true if the specified dimension groups can be assigned to the specified item based on the dimension
    /// values setup; otherwise, false.
    /// </returns>
    protected boolean checkDimensionGroupsSetupChange(
        InventDimGroupSetup         _inventDimGroupSetupOrig,
        InventDimGroupSetup         _inventDimGroupSetupNew,
        ItemId                      _itemId)
    {
        boolean         ret = true;

        InventDimParm   inventDimParmActiveFrom;
        InventDimParm   inventDimParmActiveTo;

        InventDimParm   inventDimParmActiveAndNotBlankReceiptFrom;
        InventDimParm   inventDimParmActiveAndNotBlankReceiptTo;

        InventDimParm   inventDimParmActiveAndNotBlankIssueFrom;
        InventDimParm   inventDimParmActiveAndNotBlankIssueTo;

        _inventDimGroupSetupOrig.inventDimParmActive(inventDimParmActiveFrom);
        _inventDimGroupSetupNew.inventDimParmActive(inventDimParmActiveTo);

        _inventDimGroupSetupOrig.inventDimParmActiveReceiptNotBlank(inventDimParmActiveAndNotBlankReceiptFrom);
        _inventDimGroupSetupNew.inventDimParmActiveReceiptNotBlank(inventDimParmActiveAndNotBlankReceiptTo);

        _inventDimGroupSetupOrig.inventDimParmActiveIssueNotBlank(inventDimParmActiveAndNotBlankIssueFrom);
        _inventDimGroupSetupNew.inventDimParmActiveIssueNotBlank(inventDimParmActiveAndNotBlankIssueTo);

        ListEnumerator enumerator = InventDim::dimFieldsList().getEnumerator();

        // iterate throught all dimensions
        while (ret && enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            // check if dimension is set to inactive
            if (!inventDimParmActiveTo.(dimParmFieldId))
            {
                // check if dimension was active before
                if (inventDimParmActiveFrom.(dimParmFieldId))
                {
                    // validate if dimension can be deactivated
                    ret = this.checkDimensionDeactivation(dimFieldId, _itemId);
                }
            }
            // process active dimensions
            else
            {
                // check if the original dimension was active
                if (inventDimParmActiveFrom.(dimParmFieldId))
                {
                    // check if the "Allow Blank Receipt" value has changed to not allow bank values anymore.
                    if (inventDimParmActiveAndNotBlankReceiptTo.(dimParmFieldId) && !inventDimParmActiveAndNotBlankReceiptFrom.(dimParmFieldId))
                    {
                        // validate that the "Allow Blank Receipt" policy can be changed
                        ret = this.checkActiveDimWithNoBlankReceipt(dimFieldId, _itemId);
                    }
                    // check if the "Allow Blank Issue" value has changed to not allow bank values anymore.
                    if (ret & inventDimParmActiveAndNotBlankIssueTo.(dimParmFieldId) && !inventDimParmActiveAndNotBlankIssueFrom.(dimParmFieldId))
                    {
                        // validate that the "Allow Blank Issue" policy can be changed
                        ret = this.checkActiveDimWithNoBlankIssue(dimFieldId, _itemId);
                    }
                }
                else
                // process the cases when the original dimension was inactive, another words, the new dimension is enabled
                {
                    // check if the "Allow Blank Receipt" value has changed to not allow bank values anymore.
                    if (inventDimParmActiveAndNotBlankReceiptTo.(dimParmFieldId))
                    {
                        // validate that the "Allow Blank Receipt" policy can be changed
                        ret = this.checkActiveDimWithNoBlankReceipt(dimFieldId, _itemId);
                    }
                    // check if the "Allow Blank Issue" value has changed to not allow bank values anymore.
                    if (ret & inventDimParmActiveAndNotBlankIssueTo.(dimParmFieldId))
                    {
                        // validate that the "Allow Blank Issue" policy can be changed
                        ret = this.checkActiveDimWithNoBlankIssue(dimFieldId, _itemId);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionModelGroupValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the specified dimension groups can be assigned to the specified item based on
    /// item's model group setup.
    /// </summary>
    /// <param name="_inventDimGroupSetupOrig">
    /// The specified original <c>InventDimGroupSetup</c> object.
    /// </param>
    /// <param name="_inventDimGroupSetupNew">
    /// The specified new <c>InventDimGroupSetup</c> object.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <param name="_dataAreaId">
    /// A specified <c>DataAreaId</c> value.
    /// </param>
    /// <returns>
    /// true if the specified dimension groups can be assigned to the specified item based on item's model
    /// group setup; otherwise - false.
    /// </returns>
    protected boolean checkDimensionModelGroupValidation(
        InventDimGroupSetup         _inventDimGroupSetupOrig,
        InventDimGroupSetup         _inventDimGroupSetupNew,
        ItemId                      _itemId,
        DataAreaId                  _dataAreaId)
    {
        boolean             ret                 = true;
        InventTable         inventTable         = InventTable::findInLegalEntity(_itemId, _dataAreaId);
        InventModelGroup    inventModelGroup    = InventModelGroup::find(InventModelGroupItem::findByItemIdLegalEntity(_itemId, _dataAreaId).ModelGroupId);

        if (inventModelGroup)
        {
            ret = this.validateForModelGroup(inventModelGroup, _inventDimGroupSetupOrig, _inventDimGroupSetupNew, _itemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResStorageDimensionGroupRecIdNew</Name>
				<Source><![CDATA[
    public EcoResStorageDimensionGroupRecId parmEcoResStorageDimensionGroupRecIdNew(EcoResStorageDimensionGroupRecId _ecoResStorageDimensionGroupRecIdNew = ecoResStorageDimensionGroupRecIdNew)
    {
        ecoResStorageDimensionGroupRecIdNew = _ecoResStorageDimensionGroupRecIdNew;

        return ecoResStorageDimensionGroupRecIdNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResTrackingDimensionGroupRecIdNew</Name>
				<Source><![CDATA[
    public EcoResTrackingDimensionGroupRecId parmEcoResTrackingDimensionGroupRecIdNew(EcoResTrackingDimensionGroupRecId _ecoResTrackingDimensionGroupRecIdNew = ecoResTrackingDimensionGroupRecIdNew)
    {
        ecoResTrackingDimensionGroupRecIdNew = _ecoResTrackingDimensionGroupRecIdNew;

        return ecoResTrackingDimensionGroupRecIdNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId(DataAreaId _itemDataAreaId = itemDataAreaId)
    {
        itemDataAreaId = _itemDataAreaId;

        return itemDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduct</Name>
				<Source><![CDATA[
    public EcoResProductRecId parmProduct(EcoResProductRecId _product = product)
    {
        product = _product;

        return product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTransWithDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query to find <c>InventTrans</c> record where the <c>InventDim</c> and <c>fieldId</c>
    /// does not have a value.
    /// </summary>
    /// <param name="_dimFieldId">
    /// The specified <c>fieldId</c> value of the <c>InventDim</c> field.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query queryInventTransWithDimensionValue(FieldId  _dimFieldId, ItemId _itemId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventTrans = query.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.firstOnly(true);
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, RecId));
        qbdsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(_itemId));

        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.relations(true);
        qbdsInventDim.addRange(_dimFieldId).value(SysQuery::valueNot(InventDim::emptyDimField(_dimFieldId)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTransWithoutDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query to find <c>InventTrans</c> record where the <c>InventDim</c> and <c>fieldId</c>
    /// does not have a value.
    /// </summary>
    /// <param name="_dimFieldId">
    /// The specified <c>fieldId</c> value of the <c>InventDim</c> field.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query queryInventTransWithoutDimensionValue(FieldId  _dimFieldId, ItemId _itemId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventTrans = query.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.firstOnly(true);
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, RecId));
        qbdsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(_itemId));

        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.relations(true);
        qbdsInventDim.addRange(_dimFieldId).value(queryValue(InventDim::emptyDimField(_dimFieldId)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewDimensionGroupsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the product, storage, and tracking dimension groups to an item.
    /// </summary>
    protected void setNewDimensionGroupsForItem()
    {
        ttsbegin;
        // <GEERU>
        if ( ecoResTrackingDimensionGroupRecIdNew != EcoResTrackingDimensionGroupItem::findByItem(itemDataAreaId, itemId).TrackingDimensionGroup &&
             ecoResTrackingDimensionGroupRecIdNew                                                                                              &&
             ! EcoResTrackingDimGroupSetup::checkInventRUDimForNotRuContextCompany(ecoResTrackingDimensionGroupRecIdNew))
        {
            throw error("@GLS222391");
        }
        // </GEERU>

        EcoResStorageDimensionGroupItem ecoResStorageDimensionGroupItem = EcoResStorageDimensionGroupItem::findByItem(itemDataAreaId, itemId, true);

        if (ecoResStorageDimensionGroupRecIdNew != ecoResStorageDimensionGroupItem.StorageDimensionGroup)
        {
            if (ecoResStorageDimensionGroupRecIdNew != 0)
            {
                if (!ecoResStorageDimensionGroupItem)
                {
                    ecoResStorageDimensionGroupItem.ItemDataAreaId = itemDataAreaId;
                    ecoResStorageDimensionGroupItem.ItemId = itemId;
                }

                ecoResStorageDimensionGroupItem.StorageDimensionGroup = ecoResStorageDimensionGroupRecIdNew;
                ecoResStorageDimensionGroupItem.write();
            }
            else
            {
                ecoResStorageDimensionGroupItem.delete();
            }
        }

        EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(itemDataAreaId, itemId, true);

        if (ecoResTrackingDimensionGroupRecIdNew != ecoResTrackingDimensionGroupItem.TrackingDimensionGroup)
        {
            if (ecoResTrackingDimensionGroupRecIdNew != 0)
            {
                if (!ecoResTrackingDimensionGroupItem)
                {
                    ecoResTrackingDimensionGroupItem.ItemDataAreaId = itemDataAreaId;
                    ecoResTrackingDimensionGroupItem.ItemId = itemId;
                }

                ecoResTrackingDimensionGroupItem.TrackingDimensionGroup = ecoResTrackingDimensionGroupRecIdNew;
                ecoResTrackingDimensionGroupItem.write();
            }
            else
            {
                ecoResTrackingDimensionGroupItem.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>inventModelType.checkNewDimensionGroupsForItem</c> method for the specified
    /// <c>InventModelGroup</c> record.
    /// </summary>
    /// <param name="_inventModelGroup">
    /// The specified <c>InventModelGroup</c> value.
    /// </param>
    /// <param name="_inventDimGroupSetupOrig">
    /// The specified original <c>InventDimGroupSetup</c> setup.
    /// </param>
    /// <param name="_inventDimGroupSetupNew">
    /// The specified new <c>InventDimGroupSetup</c> setup.
    /// </param>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> value.
    /// </param>
    /// <returns>
    /// The result of the <c>inventModelType.checkNewDimensionGroupsForItem</c> method.
    /// </returns>
    protected boolean validateForModelGroup(
        InventModelGroup    _inventModelGroup,
        InventDimGroupSetup _inventDimGroupSetupOrig,
        InventDimGroupSetup _inventDimGroupSetupNew,
        ItemId              _itemId)
    {
        return _inventModelGroup.inventModelType().checkNewDimensionGroupsForItem(
                                    _inventDimGroupSetupOrig,
                                    _inventDimGroupSetupNew,
                                    _itemId,
                                    _inventModelGroup.ModelGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewDimensionGroupsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the product, storage, and tracking dimension groups can be assigned to an item.
    /// </summary>
    /// <returns>
    /// true if the product, storage, and tracking dimension groups can be assigned to an item; otherwise,
    /// false.
    /// </returns>
    public boolean validateNewDimensionGroupsForItem()
    {
        boolean                                 result = true;
        EcoResStorageDimensionGroupProduct      ecoResStorageDimensionGroupProduct;
        EcoResTrackingDimensionGroupProduct     ecoResTrackingDimensionGroupProduct;
        EcoResStorageDimensionGroupItem         ecoResStorageDimensionGroupItem;
        EcoResTrackingDimensionGroupItem        ecoResTrackingDimensionGroupItem;

        EcoResStorageDimensionGroupRecId        ecoResStorageDimensionGroupRecIdOld;
        EcoResTrackingDimensionGroupRecId       ecoResTrackingDimensionGroupRecIdOld;

        if (!product)
        {
            product = InventTable::findInLegalEntity(itemId, itemDataAreaId).Product;
        }

        if (!itemDataAreaId || !itemId  || !product)
        {
            return checkFailed(strFmt("@SYS50104", fieldPName(EcoResStorageDimensionGroupItem, ItemId)));
        }

        if (ecoResStorageDimensionGroupRecIdNew)
        {
            ecoResStorageDimensionGroupProduct = EcoResStorageDimensionGroupProduct::findByProduct(product);

            if (ecoResStorageDimensionGroupProduct)
            {
                if (ecoResStorageDimensionGroupRecIdNew != ecoResStorageDimensionGroupProduct.StorageDimensionGroup)
                {
                    // The storage dimension group cannot be changed for the item. Remove the existing storage dimension group on the corresponding product before changing the item's storage dimension group.
                    result = checkFailed("@SYS312261");
                }
                ecoResStorageDimensionGroupRecIdOld = ecoResStorageDimensionGroupProduct.StorageDimensionGroup;
            }
            else
            {
                ecoResStorageDimensionGroupItem = EcoResStorageDimensionGroupItem::findByItem(itemDataAreaId, itemId);

                if (!ecoResStorageDimensionGroupItem)
                {
                    ecoResStorageDimensionGroupItem.ItemDataAreaId = itemDataAreaId;
                    ecoResStorageDimensionGroupItem.ItemId = itemId;
                }
                else
                {
                    ecoResStorageDimensionGroupRecIdOld = ecoResStorageDimensionGroupItem.StorageDimensionGroup;
                }

                ecoResStorageDimensionGroupItem.StorageDimensionGroup = ecoResStorageDimensionGroupRecIdNew;
                result = ecoResStorageDimensionGroupItem.validateWrite() && result;
            }
        }
        else
        {
            ecoResStorageDimensionGroupItem = EcoResStorageDimensionGroupItem::findByItem(itemDataAreaId, itemId);

            if (ecoResStorageDimensionGroupItem.StorageDimensionGroup )
            {
                ecoResStorageDimensionGroupProduct = EcoResStorageDimensionGroupProduct::findByProduct(product);

                if (ecoResStorageDimensionGroupProduct)
                {
                    result = checkFailed(strFmt("@SYS50104", fieldPName(EcoResStorageDimensionGroupItem, StorageDimensionGroup)));
                }
                else
                {
                    result = result && ecoResStorageDimensionGroupItem.validateDelete();
                    ecoResStorageDimensionGroupRecIdOld = ecoResStorageDimensionGroupItem.StorageDimensionGroup;
                }
            }
        }

        if (ecoResTrackingDimensionGroupRecIdNew)
        {
            ecoResTrackingDimensionGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(product);

            if (ecoResTrackingDimensionGroupProduct)
            {
                if (ecoResTrackingDimensionGroupRecIdNew != ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup)
                {
                    // The tracking dimension group cannot be changed for the item. Remove the existing tracking dimension group on the corresponding product before changing the item's tracking dimension group.
                    result = checkFailed("@SYS312260");
                }
                ecoResTrackingDimensionGroupRecIdOld = ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup;
            }
            else
            {
                ecoResTrackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(itemDataAreaId, itemId);

                if (!ecoResTrackingDimensionGroupItem)
                {
                    ecoResTrackingDimensionGroupItem.ItemDataAreaId = itemDataAreaId;
                    ecoResTrackingDimensionGroupItem.ItemId = itemId;
                }
                else
                {
                    ecoResTrackingDimensionGroupRecIdOld = ecoResTrackingDimensionGroupItem.TrackingDimensionGroup;
                }

                ecoResTrackingDimensionGroupItem.TrackingDimensionGroup = ecoResTrackingDimensionGroupRecIdNew;
                result = ecoResTrackingDimensionGroupItem.validateWrite() && result;

                // If WHS Enabled, validate InventBatch tracking dimension setup and physical inventory configs
                result = result && WHSInvent::checkBatchBlankIssueReceipt(ecoResStorageDimensionGroupItem.StorageDimensionGroup, ecoResTrackingDimensionGroupRecIdNew);
                result = result && WHSInvent::checkNonPhysicalDims(ecoResStorageDimensionGroupItem.StorageDimensionGroup, ecoResTrackingDimensionGroupRecIdNew);
            }
        }
        else
        {
            ecoResTrackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(itemDataAreaId, itemId);

            if (ecoResTrackingDimensionGroupItem.TrackingDimensionGroup)
            {
                ecoResTrackingDimensionGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(product);

                if (ecoResTrackingDimensionGroupProduct)
                {
                    result = checkFailed(strFmt("@SYS50104", fieldPName(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup)));
                }
                else
                {
                    result = result && ecoResTrackingDimensionGroupItem.validateDelete();
                    ecoResTrackingDimensionGroupRecIdOld = ecoResTrackingDimensionGroupItem.TrackingDimensionGroup;
                }
            }
        }

        if (result)
        {
            InventTable inventTable = InventTable::findInLegalEntity(itemId, itemDataAreaId);

            if (inventTable.hasInventTrans())
            {
                result = this.checkDimensionsGroupsAreNotCleared(ecoResStorageDimensionGroupRecIdOld, ecoResStorageDimensionGroupRecIdNew, ecoResTrackingDimensionGroupRecIdOld, ecoResTrackingDimensionGroupRecIdNew);
                
                result = result && this.checkStorageDimGroupWHSChange(ecoResStorageDimensionGroupRecIdNew, ecoResStorageDimensionGroupRecIdOld);

                if (result)
                {
                    EcoResProductDimensionGroupRecId ecoResProductDimensionGroupRecId = inventTable.productDimensionGroup();

                    InventDimGroupSetup inventDimGroupSetupOrig = InventDimGroupSetup::newDimensionGroups(ecoResProductDimensionGroupRecId, ecoResStorageDimensionGroupRecIdOld, ecoResTrackingDimensionGroupRecIdOld);
                    InventDimGroupSetup inventDimGroupSetupNew = InventDimGroupSetup::newDimensionGroups(ecoResProductDimensionGroupRecId, ecoResStorageDimensionGroupRecIdNew, ecoResTrackingDimensionGroupRecIdNew);

                    result = this.checkDimensionModelGroupValidation(inventDimGroupSetupOrig, inventDimGroupSetupNew, itemId, itemDataAreaId);
                    result = result && this.checkDimensionGroupsSetupChange(inventDimGroupSetupOrig, inventDimGroupSetupNew, itemId);
                    result = result && inventTable.checkDimGroupForBatch();
                }

            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStorageDimGroupWHSChange</Name>
				<Source><![CDATA[
    private boolean checkStorageDimGroupWHSChange(EcoResStorageDimensionGroupRecId _ecoResTrackingDimensionGroupRecIdNew, EcoResStorageDimensionGroupRecId _ecoResTrackingDimensionGroupRecIdOld)
    {
        EcoResStorageDimensionGroup ecoResStorageDimensionGroupNew = EcoResStorageDimensionGroup::find(_ecoResTrackingDimensionGroupRecIdNew);
        EcoResStorageDimensionGroup ecoResStorageDimensionGroupOld = EcoResStorageDimensionGroup::find(_ecoResTrackingDimensionGroupRecIdOld);
        
        boolean ret = true;
        
        if (ecoResStorageDimensionGroupNew.IsWarehouseWHSEnabled != ecoResStorageDimensionGroupOld.IsWarehouseWHSEnabled)
        {
            ret = checkFailed("@WAX:StorageDimGroupWHSChangeError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionsGroupsAreNotCleared</Name>
				<Source><![CDATA[
    private boolean checkDimensionsGroupsAreNotCleared(
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdOld,
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdNew, 
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdOld,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew)
    {
        boolean result = true;

        if ((_ecoResStorageDimensionGroupRecIdNew == 0
                && _ecoResStorageDimensionGroupRecIdOld != 0)
            || (_ecoResTrackingDimensionGroupRecIdNew == 0
                && _ecoResTrackingDimensionGroupRecIdOld != 0))
        {
            result = checkFailed("@SCM:Error_DimensionGroupCannotBeUnassigned_InventoryTransactionsExist");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTableInventoryDimensionGroups construct()
    {
        return new InventTableInventoryDimensionGroups();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemAndDimGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>InventTableInventoryDimensionGroups</c> class by using the item and
    /// dimension groups.
    /// </summary>
    /// <param name="_itemDataAreaId">
    /// The <c>dataAreaId</c> field for the item for which dimension groups are assigned.
    /// </param>
    /// <param name="_itemId">
    /// The item for which dimension groups are assigned.
    /// </param>
    /// <param name="_ecoResStorageDimensionGroupRecIdNew">
    /// The storage dimension group that is assigned to the item.
    /// </param>
    /// <param name="_ecoResTrackingDimensionGroupRecIdNew">
    /// The tracking dimension group that is assigned to the item.
    /// </param>
    /// <param name="_product">
    /// The product for which dimension groups are assigned; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventTableInventoryDimensionGroups</c> class.
    /// </returns>
    public static InventTableInventoryDimensionGroups newFromItemAndDimGroups(
        DataAreaId                          _itemDataAreaId,
        ItemId                              _itemId,
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdNew,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew,
        EcoResProductRecId                  _product = 0)
    {
        InventTableInventoryDimensionGroups inventTableInventoryDimensionGroups = InventTableInventoryDimensionGroups::construct();

        inventTableInventoryDimensionGroups.parmItemDataAreaId(_itemDataAreaId);
        inventTableInventoryDimensionGroups.parmItemId(_itemId);
        inventTableInventoryDimensionGroups.parmEcoResStorageDimensionGroupRecIdNew(_ecoResStorageDimensionGroupRecIdNew);
        inventTableInventoryDimensionGroups.parmEcoResTrackingDimensionGroupRecIdNew(_ecoResTrackingDimensionGroupRecIdNew);
        inventTableInventoryDimensionGroups.parmProduct(_product);

        return inventTableInventoryDimensionGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionGroupsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns product, storage, and tracking dimension groups to an item.
    /// </summary>
    /// <param name="_itemDataAreaId">
    /// The <c>dataAreaId</c> field for the item for which dimension groups are assigned.
    /// </param>
    /// <param name="_itemId">
    /// The item for which dimension groups are assigned.
    /// </param>
    /// <param name="_ecoResStorageDimensionGroupRecIdNew">
    /// The storage dimension group that is assigned to the item.
    /// </param>
    /// <param name="_ecoResTrackingDimensionGroupRecIdNew">
    /// The tracking dimension group that is assigned to the item.
    /// </param>
    /// <param name="_product">
    /// The product for which dimension groups are assigned; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// A validation to see whether the groups cannot be assigned.
    /// </exception>
    public static void updateDimensionGroupsForItem(
        DataAreaId                          _itemDataAreaId,
        ItemId                              _itemId,
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdNew,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew,
        EcoResProductRecId                  _product = 0)
    {
        InventTableInventoryDimensionGroups inventTableInventoryDimensionGroups = InventTableInventoryDimensionGroups::newFromItemAndDimGroups(
                _itemDataAreaId,
                _itemId,
                _ecoResStorageDimensionGroupRecIdNew,
                _ecoResTrackingDimensionGroupRecIdNew,
                _product);

        if (!inventTableInventoryDimensionGroups.validateNewDimensionGroupsForItem())
        {
            throw error("@SYS18447");
        }

        inventTableInventoryDimensionGroups.setNewDimensionGroupsForItem();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>