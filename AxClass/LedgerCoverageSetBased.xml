<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCoverageSetBased</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCoverageSetBased</c> class performs calculations for cash flow forecasting.  The results are
/// inserted into the real cash flow tables as a single set. 
/// </summary>
public class LedgerCoverageSetBased extends LedgerCoverage
{
    private boolean isLedgerCovTempDBSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Common _common)
    {
        super(_common);

        if (!isLedgerCovTempDBSet)
        {
            ledgerCov.setTempDB();
            isLedgerCovTempDBSet = true;
        }

        this.trackUpdatedCashFlowDocumentRows(_common);

    }

]]></Source>
			</Method>
			<Method>
				<Name>trackUpdatedCashFlowDocumentRows</Name>
				<Source><![CDATA[
    private void trackUpdatedCashFlowDocumentRows(Common _common)
    {
        if (_common)
        {
            LedgerAccountCov ledgerAccountCov;

            if (_common.TableId == tableNum(GeneralJournalAccountEntry) && ledgerAccountCov::checkMultipleFromAccounts())
            {
                select firstonly Recid from updatedCashFlowDocumentRows
                    where  updatedCashFlowDocumentRows.RefDataAreaId == _common.DataAreaId
                        && updatedCashFlowDocumentRows.RefTableId == _common.TableId
                        && updatedCashFlowDocumentRows.RefRecId == _common.RecId
                        && updatedCashFlowDocumentRows.RefTableId == tablenum(GeneralJournalAccountEntry);

                if (!updatedCashFlowDocumentRows)
                {
                    updatedCashFlowDocumentRows.RefDataAreaId = _common.DataAreaId;
                    updatedCashFlowDocumentRows.RefTableId = _common.TableId;
                    updatedCashFlowDocumentRows.RefRecId = _common.RecId;
                    updatedCashFlowDocumentRows.doInsert();
                }
            }
            else if (_common.TableId == tableNum(CashFlowExternalSourceEntry) || _common.TableId == tableNum(BudgetTransactionLine))
            {
                updatedCashFlowDocumentRows.RefDataAreaId = curExt();
                updatedCashFlowDocumentRows.RefTableId = _common.TableId;
                updatedCashFlowDocumentRows.RefRecId = _common.RecId;
                updatedCashFlowDocumentRows.doInsert();
            }
            else
            {
                updatedCashFlowDocumentRows.RefDataAreaId = _common.DataAreaId;
                updatedCashFlowDocumentRows.RefTableId = _common.TableId;
                updatedCashFlowDocumentRows.RefRecId = _common.RecId;
                updatedCashFlowDocumentRows.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    public void insertDatabase()
    {
        Debug::assert(appl.ttsLevel() > 0);

        LedgerCov ledgerCovReal;
        ledgerCovReal.skipDatabaseLog(true);
        ledgerCovReal.skipDataMethods(true);
        ledgerCovReal.skipEvents(true);

        update_recordset ledgerCov
            setting Crediting = NoYes::Yes
            where ledgerCov.AmountMST < 0;

        insert_recordset ledgerCovReal
            (AmountCur,
            AmountMST,
            EnterpriseCurrencyAmount,
            BankAccountCurrencyAmount,
            Crediting,
            CurrencyCode,
            DefaultDimension,
            InventProfileType_RU,
            MainAccount,
            Posting,
            PostingProfile_RU,
            TransDate,
            TransRecId,
            TransTableId,
            BankAccount)
        select AmountCur,
            AmountMST,
            EnterpriseCurrencyAmount,
            BankAccountCurrencyAmount,
            Crediting,
            CurrencyCode,
            DefaultDimension,
            InventProfileType_RU,
            MainAccount,
            Posting,
            PostingProfile_RU,
            TransDate,
            TransRecId,
            TransTableId,
            BankAccount
        from ledgerCov;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransaction</Name>
				<Source><![CDATA[
    protected void deleteTransaction(tableId _extTableId, recId _extRecId)
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>