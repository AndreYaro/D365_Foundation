<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBookStatusChangePage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxBookStatusChangePage</c> class is responsible for changing page for tax book status.
/// </summary>
class TaxBookStatusChangePage extends RunBase
{
    TaxBookStatus   taxBookStatus;
    PageNo          newPageNo;
    PageNo          changedPageNo;
    PageNo          firstPageNo;
    DialogField     dialogFieldOldPageNo;
    DialogField     dialogFieldNewPageNo;
    #DEFINE.currentVersion(3)

    #LOCALMACRO.CurrentList
        newPageNo,
        changedPageNo,
        firstPageNo
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        PageNo          oldPageNo;

        newPageNo = 0;

        if (changedPageNo)
        {
            oldPageNo = changedPageNo;
        }
        else
        {
            oldPageNo = firstPageNo;
        }
        dialogFieldOldPageNo = dialog.addFieldValue(extendedtypestr(PageNo),oldPageNo,"@SYS79245","");
        dialogFieldOldPageNo.allowEdit(false);

        dialogFieldNewPageNo = dialog.addFieldValue(extendedtypestr(PageNo),newPageNo,"@SYS79247","@SYS79246");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        newPageNo = dialogFieldNewPageNo.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the data required for the <c>SysLastValues</c> table.
    /// </summary>
    /// <returns>
    ///    A container that stores the data to be persisted by the <c>SysLastValues</c> table.
    /// </returns>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions to support different serialization and the
    ///    <c>SysLastValues</c> table pack lists. This separate packing mechanism has been implemented for the
    ///    <c>SysLastValues</c> table and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///    be packed for the <c>SysLastValues</c> table.
    /// </remarks>
    public container packSysLastValues()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBookPageNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets first and changed page number for tax book.
    /// </summary>
    /// <param name = "_changedPageNo">The changed page number, optional.</param>
    /// <param name = "_firstPageNo">The first page number, optional.</param>
    void parmTaxBookPageNo(PageNo _changedPageNo = 0, PageNo _firstPageNo = 0)
    {
        changedPageNo   = _changedPageNo;
        firstPageNo     = _firstPageNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBookStatus</Name>
				<Source><![CDATA[
    TaxBookStatus parmTaxBookStatus(TaxBookStatus _taxBookStatus)
    {
        taxBookStatus = _taxBookStatus;

        return taxBookStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        TaxReportPeriod taxReportPeriod;

        taxReportPeriod = TaxReportPeriod::find(taxBookStatus.TaxPeriod, taxBookStatus.FromDate);

        if (taxReportPeriod && ! taxReportPeriod.Closed)
        {
            ttsbegin;
            taxBookStatus = TaxBookStatus::findByPeriodDateBookId(taxBookStatus.TaxPeriod,
                                                                  taxBookStatus.FromDate,
                                                                  taxBookStatus.ToDate,
                                                                  taxBookStatus.TaxBook,
                                                                  true);
            if (taxBookStatus)
            {
                taxBookStatus.ChangedPageNo = newPageNo;
                taxBookStatus.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                  break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the data required for the <c>SysLastValues</c> table.
    /// </summary>
    /// <param name="_packedValues">
    ///    The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions to support different serialization and the
    ///    <c>SysLastValues</c> table pack lists. This separate packing mechanism has been implemented for the
    ///    <c>SysLastValues</c> table and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///    be unpacked for the <c>SysLastValues</c> table.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS79492";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        const str FeatureReference = 'IT-00032';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        TaxBookStatusChangePage   taxBookStatusChangePage;
        TaxBookStatus             taxBookStatus;

        if (!_args ||
            !_args.record() ||
            _args.record().TableId != tablenum(TaxBookStatus))
        {
            return;
        }

        taxBookStatusChangePage = new TaxBookStatusChangePage();

        taxBookStatus = _args.record();
        taxBookStatusChangePage.parmTaxBookStatus(taxBookStatus);
        taxBookStatusChangePage.parmTaxBookPageNo(taxBookStatus.ChangedPageNo, taxBookStatus.FirstPageNo);

        if (taxBookStatusChangePage.prompt())
        {
            taxBookStatusChangePage.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>