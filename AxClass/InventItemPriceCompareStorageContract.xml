<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareStorageContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareStorageContract</c> class is the data contract for the item price compare storage.
/// </summary>
[
    DataContract,
    SysOperationGroup('ProcessIdentifierGroup', "@SYS88589", '1'),
    SysOperationGroup('Parameter', ' ', '2'),
    SysOperationGroup('Compare', "@SCM:InventItemPriceComparePendingCaption", '3'),
    SysOperationGroup('CompareTo', "@SYS4009681", '4'),
    SysOperationContractProcessing(classStr(InventItemPriceCompareStorageUIBuilder),
    SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public final class InventItemPriceCompareStorageContract implements SysOperationValidatable
{
    private Name                            executionName;
     
    private CostingVersionPriceType         comparePriceType;
    private CostingVersionId                compareVersionId, compareToVersionId;
    private TransDate                       compareDate, compareToDate;
    private CostingVersionCompareTo         compareTo;
    private InventItemPriceCompareLevel     compareLevel;
    private InventItemPriceCompareInventory calculateInventory;

    private str                             query;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmExecutionName</Name>
				<Source><![CDATA[
    [
        DataMember('ExecutionName'),
        SysOperationDisplayOrder('1'),
        SysOperationGroupMember('ProcessIdentifierGroup')
    ]
    public Name parmExecutionName(Name _executionName = executionName)
    {
        executionName = _executionName;

        return executionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateInventory</Name>
				<Source><![CDATA[
    [
        DataMember('CalculateInventory'),
        SysOperationLabel(literalStr("@SYS4009692")),
        SysOperationHelpText(literalStr("@SYS4009701")),
        SysOperationGroupMember('Parameter'),
        SysOperationDisplayOrder('1')
    ]
    public InventItemPriceCompareInventory parmCalculateInventory(InventItemPriceCompareInventory _calculateInventory = calculateInventory)
    {
        calculateInventory = _calculateInventory;

        return calculateInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareDate</Name>
				<Source><![CDATA[
    [
        DataMember('CompareDate'),
        SysOperationLabel(literalStr("@SYS7402")),
        SysOperationHelpText(literalStr("@SYS112140")),
        SysOperationGroupMember('Compare'),
        SysOperationDisplayOrder('3')
    ]
    public TransDate parmCompareDate(TransDate _compareDate = compareDate)
    {
        compareDate = _compareDate;

        return compareDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareLevel</Name>
				<Source><![CDATA[
    [
        DataMember('CompareLevel'),
        SysOperationLabel(literalStr("@SYS4009702")),
        SysOperationHelpText(literalStr("@SYS4009703")),
        SysOperationGroupMember('Compare'),
        SysOperationDisplayOrder('4')
    ]
    public InventItemPriceCompareLevel parmCompareLevel(InventItemPriceCompareLevel _compareLevel = compareLevel)
    {
        compareLevel = _compareLevel;

        return compareLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComparePriceType</Name>
				<Source><![CDATA[
    [
        DataMember('ComparePriceType'),
        SysOperationLabel(literalStr("@SYS103620")),
        SysOperationHelpText(literalStr("@SYS103621")),
        SysOperationGroupMember('Compare'),
        SysOperationDisplayOrder('1')
    ]
    public CostingVersionPriceType parmComparePriceType(CostingVersionPriceType _comparePriceType = comparePriceType)
    {
        comparePriceType = _comparePriceType;

        return comparePriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareTo</Name>
				<Source><![CDATA[
    [
        DataMember('CompareTo'),
        SysOperationLabel(literalStr("@SYS4009704")),
        SysOperationHelpText(literalStr("@SYS4009705")),
        SysOperationGroupMember('CompareTo'),
        SysOperationDisplayOrder('1')
    ]
    public CostingVersionCompareTo parmCompareTo(CostingVersionCompareTo _compareTo = compareTo)
    {
        compareTo = _compareTo;

        return compareTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareToDate</Name>
				<Source><![CDATA[
    [
        DataMember('CompareToDate'),
        SysOperationLabel(literalStr("@SYS7402")),
        SysOperationHelpText(literalStr("@SYS112140")),
        SysOperationGroupMember('CompareTo'),
        SysOperationDisplayOrder('3')
    ]
    public TransDate parmCompareToDate(TransDate _compareToDate = compareToDate)
    {
        compareToDate = _compareToDate;

        return compareToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareToVersionId</Name>
				<Source><![CDATA[
    [
        DataMember('CompareToVersionId'),
        SysOperationLabel(literalStr("@SYS41323")),
        SysOperationHelpText(literalStr("@SYS103416")),
        SysOperationGroupMember('CompareTo'),
        SysOperationDisplayOrder('2')
    ]
    public CostingVersionId parmCompareToVersionId(CostingVersionId _compareToVersionId = compareToVersionId)
    {
        compareToVersionId = _compareToVersionId;

        return compareToVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareVersionId</Name>
				<Source><![CDATA[
    [
        DataMember('CompareVersionId'),
        SysOperationLabel(literalStr("@SYS41323")),
        SysOperationHelpText(literalStr("@SYS103416")),
        SysOperationGroupMember('Compare'),
        SysOperationDisplayOrder('2')
    ]
    public CostingVersionId parmCompareVersionId(CostingVersionId _compareVersionId = compareVersionId)
    {
        compareVersionId = _compareVersionId;

        return compareVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [DataMemberAttribute, AifQueryType('_query', queryStr(InventItemPriceCompare))]
    public str parmQuery(str _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>true when the parameters are valid; otherwise, false.</returns>
    public boolean validate()
    {
        boolean valid = true;

        valid = this.validateCompareVersionId() &&
                this.validateCompareDate() &&
                this.validateCompareToVersionId() &&
                this.validateCompareToDate();

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare date is specified.
    /// </summary>
    /// <returns>true if compare date is specified; otherwise, false.</returns>
    protected boolean validateCompareDate()
    {
        boolean valid = true;

        if (!compareDate)
        {
            valid = checkFailed("@SYS4009706");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare to date is specified.
    /// </summary>
    /// <returns>true if compare to date is specified; otherwise, false.</returns>
    protected boolean validateCompareToDate()
    {
        boolean valid = true;

        if (!compareToDate)
        {
            valid = checkFailed("@SYS4009671");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareToVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare to version is specified.
    /// </summary>
    /// <returns>true if compare to version is specified; otherwise, false.</returns>
    protected boolean validateCompareToVersionId()
    {
        boolean valid = true;

        if (compareTo == CostingVersionCompareTo::Simulated &&
            !compareToVersionId)
        {
            valid = checkFailed("@SYS4009672");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare version is specified.
    /// </summary>
    /// <returns>true if compare version is specified; otherwise, false.</returns>
    protected boolean validateCompareVersionId()
    {
        boolean valid = true;

        if (!compareVersionId)
        {
            valid = checkFailed("@SYS4009673");
        }

        return valid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>