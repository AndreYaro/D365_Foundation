<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPrintOut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportPeriodLock</c> class is used to print out tax report.
/// </summary>
final class TaxReportPrintOut
{
    #ISOCountryRegionCodes
    Args                taxReport;
    TaxReportVoucher    taxReportVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        TaxReportPrintOut::printout(taxReportVoucher.TaxPeriod, taxReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters(Args _args)
    {
        taxReport           = _args;
        taxReportVoucher    = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        TaxReportPrintOut    taxReportPrintOut  = new TaxReportPrintOut();

        taxReportPrintOut.setParameters(_args);
        taxReportPrintOut.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    static void printout(TaxPeriod _taxPeriod,
                         Args      _args)
    {
        TaxPeriodHead       taxPeriodHead;
        TaxAuthorityAddress taxAuthorityAddress;

        taxPeriodHead = TaxPeriodHead::find(_taxPeriod);

        select firstonly TaxReportLayout, UseDefaultLayout from taxAuthorityAddress
            index hint TaxAuthorityIdx
            where taxAuthorityAddress.TaxAuthority == taxPeriodHead.TaxAuthority;

        switch (taxAuthorityAddress.TaxReportLayout)
        {
            case TaxReportLayout::Default :
                    if (TaxReportERHelper_IT::isERReportShouldBeUsed(taxAuthorityAddress.TaxAuthority))
                    {
                        new MenuFunction(menuitemOutputStr(TaxReportER_IT), MenuItemType::Output).run(_args);
                    }
                    else if (TaxReportPrintOut::isERReportShouldBeUsed(taxAuthorityAddress.UseDefaultLayout))
                    {
                        new MenuFunction(menuitemoutputstr(TaxReportExportER_W), MenuItemType::Output).run(_args);
                    }
                    else if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                    {
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    }
                    else if (_args
                        && _args.caller()
                        && _args.callerName() == formStr(TaxWithholdReportVoucher_TH)
                        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]))
                    {
                        new MenuFunction(menuitemoutputstr(TaxWithholdVendStmtCIS), MenuItemType::Output).run(_args);
                    }
                    else
                    {
                        new MenuFunction(menuitemoutputstr(TaxReporting), MenuItemType::Output).run(_args);
                    }
                    break;
            case TaxReportLayout::Estonia :
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReporting), MenuItemType::Output).run(_args);
                     break;
            case TaxReportLayout::Norway :
                    TaxReport report = _args.parmObject() as TaxReport;
                    if(report && report.fromDate() >= TaxReport::NorwegianNewTaxReportCheckpoint)
                        new MenuFunction(menuitemoutputstr(TaxReportExport_NO), MenuItemType::Output).run(_args);
                else if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReport_NO), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::UAE :
                    new MenuFunction(menuitemoutputstr(TaxReportExport_AE), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::UnitedKingdom :
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                    {
                        if (TaxParameters::find().TaxReportFormatMappingID_UK && !TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
                        {
                            new MenuFunction(menuitemoutputstr(TaxReportExport_UK), MenuItemType::Output).run(_args);
                        }
                    }
                    break;
            case TaxReportLayout::Sweden  :
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReport_SE), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::Germany :
                    new MenuFunction(menuitemoutputstr(TaxReport_DE), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::Austria :
                    new MenuFunction(menuitemoutputstr(TaxReport_AT), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::Netherlands :
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReport_NL), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::USA :
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReport_US), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::Italy:
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReport_IT), MenuItemType::Output).run(_args);
                    break;
            case TaxReportLayout::Singapore:
                    new MenuFunction(menuitemoutputstr(TaxReport_SG), MenuItemType::Output).run(_args);
                    break;

            case TaxReportLayout::Finland  :
                    if (TaxIntegrationUtils::isReportAdjustmentEnabled(taxPeriodHead))
                        new MenuFunction(menuitemoutputstr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
                    else
                        new MenuFunction(menuitemoutputstr(TaxReport_FI), MenuItemType::Output).run(_args);
                    break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isERReportShouldBeUsed</Name>
				<Source><![CDATA[
    internal static boolean isERReportShouldBeUsed(boolean _useDefaultLayout)
    {
        boolean isERReportShouldBeUsed = false;

        if (FeatureStateProvider::isFeatureEnabled(VATDeclarationGlobalERReportingFeature::instance()))
        {
            isERReportShouldBeUsed = !_useDefaultLayout
                && TaxParameters::find().TaxReportFormatMappingID_UK;
        }
        else
        {
            isERReportShouldBeUsed = !_useDefaultLayout
                && TaxParameters::find().TaxReportFormatMappingID_UK
                && !TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations();
        }

        return isERReportShouldBeUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and creates a new instance of <c>MenuFunction</c> for form <c>TaxReporting</c>.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The tax period.
    /// </param>
    /// <param name="_args">
    /// The instance of <c>Args</c>.
    /// </param>
    static void printout_IN(
        TaxPeriod _taxPeriod,
        Args      _args)
    {
        new MenuFunction(menuitemoutputstr(TaxReporting), MenuItemType::Output).run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCorrection</Name>
				<Source><![CDATA[
    internal static void printCorrection(TaxPeriod _taxPeriod, Args _args)
    {
        TaxPeriodHead taxPeriodHead;
        TaxAuthorityAddress taxAuthorityAddress;

        select firstonly UseDefaultLayout
            from taxAuthorityAddress
            exists join taxPeriodHead
            where taxAuthorityAddress.TaxAuthority == taxPeriodHead.TaxAuthority
                && taxPeriodHead.taxPeriod == _taxPeriod;

        if (TaxReportPrintOut::isERReportShouldBeUsed(taxAuthorityAddress.UseDefaultLayout))
        {
            new MenuFunction(menuitemoutputstr(TaxReportExportER_W), MenuItemType::Output).run(_args);
        }
        else
        {
            new MenuFunction(menuItemOutputStr(TaxReportInclAdjustment), MenuItemType::Output).run(_args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>