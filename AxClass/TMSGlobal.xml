<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSGlobal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>TMSGlobal</c> is a utility class.
/// </summary>
public class TMSGlobal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handle the currency conversions.
    /// </summary>
    /// <param name="_fromCurr">
    ///     Currency converting from
    /// </param>
    /// <param name="_toCurrency">
    ///     Currency coverting to
    /// </param>
    /// <param name="_value">
    ///     The value to convert from one currency to another
    /// </param>
    /// <returns>
    ///     Converted value
    /// </returns>
    public static TMSRate convertCurrency(
        CurrencyCode _fromCurr,
        CurrencyCode _toCurrency,
        TMSRate _value)
    {
        TMSProcessXML_Base tmsProcess;

        if (_fromCurr == _toCurrency)
        {
            return _value;
        }
        else
        {
            tmsProcess = TMSProcessXML_Base::construct(TMSRecordType::None);
            return tmsProcess.convertCurrency(_fromCurr, _toCurrency, _value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateWithTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date in current timezone.
    /// </summary>
    /// <param name="_dateTime">
    /// The <c>utcDateTime</c> object, which includes timezone offset.
    /// </param>
    /// <returns>
    /// The date with timezone offset applied.
    /// </returns>
    public static date getDateWithTimezone(utcDateTime _dateTime)
    {
        utcDateTime utcTimeStamp = DateTimeUtil::applyTimeZoneOffset(
            _dateTime,
            DateTimeUtil::getOriginatingTimeZone(_dateTime));

        return DateTimeUtil::date(utcTimeStamp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDirection2TransportDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value of <c>WHSLoadDirection</c> to a value of <c>TMSDirection</c>.
    /// </summary>
    /// <param name="_loadDirection">
    /// A value to convert.
    /// </param>
    /// <returns>
    /// A <c>TMSDirection</c> value.
    /// </returns>
    public static TMSDirection loadDirection2TransportDirection(WHSLoadDirection _loadDirection)
    {
        TMSDirection ret = TMSDirection::None;

        switch (_loadDirection)
        {
            case WHSLoadDirection::Inbound:
                ret = TMSDirection::Inbound;
                break;

            case WHSLoadDirection::Outbound:
                ret = TMSDirection::Outbound;
                break;

            case WHSLoadDirection::None:
                ret = TMSDirection::None;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTMS</Name>
				<Source><![CDATA[
    public static boolean skipTMS()
    {
        // Extension on this method to return true when customer doesn't use Transportation management module.'
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>