<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTInventoryDimIdAgingHelper_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
/// <summary>
/// The <c>SAFTInventoryDimIdAgingHelper_W</c> calculates inventory balances in the context of inventory dimension Ids on the particular dates.
/// </summary>
public class SAFTInventoryDimIdAgingHelper_W
{
    private InventPeriodAgingTmp_W inventPeriodAgingTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInventoryPeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>InventPeriodAgingTmp_W</c> of inventory balances in period or not zero as of end date.
    /// </summary>
    /// <param name = "_dateFrom">A start date of calculation period.</param>
    /// <param name = "_dateTo">An end date of calculation period.</param>
    /// <returns><c>InventPeriodAgingTmp_W</c> records.</returns>
    internal InventPeriodAgingTmp_W fillInventoryPeriodBalances(date _dateFrom, date _dateTo)
    {
        ttsbegin;
        InventPeriodAgingTmp_W inventPeriodAgingTmpClosing = this.getInventoryBalancesInPeriod(_dateTo + 1, dateMax());
        InventPeriodAgingTmp_W inventPeriodAgingTmpForPeriod = this.getInventoryBalancesInPeriod(_dateFrom, _dateTo);
        inventPeriodAgingTmp = this.getInventoryBalancesInPeriodOrNotZero(inventPeriodAgingTmpForPeriod, inventPeriodAgingTmpClosing);
        ttscommit;

        return inventPeriodAgingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryPeriodBalancesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>InventPeriodAgingTmp_W</c> and returns it as an ArrayList
    /// of inventory balances in the context of inventory dimensions in period or not zero as of end date.
    /// </summary>
    /// <param name = "_dateFrom">A start date of calculation period.</param>
    /// <param name = "_dateTo">An end date of calculation period.</param>
    /// <returns>An array list filled with <c>InventPeriodAgingTmp_W</c> records.</returns>
    [ERTableName(tableStr(InventPeriodAgingTmp_W))]
    public ArrayList getInventoryPeriodBalancesList(date _dateFrom, date _dateTo)
    {
        this.fillInventoryPeriodBalances(_dateFrom, _dateTo);

        ArrayList inventPeriodAgingTmps = new System.Collections.ArrayList();
        while select inventPeriodAgingTmp
        {
            inventPeriodAgingTmps.Add(inventPeriodAgingTmp.data());
        }

        return inventPeriodAgingTmps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalancesInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>InventPeriodAgingTmp_W</c> with inventory balances in period.
    /// </summary>
    /// <param name = "_dateFrom">A start date of calculation period.</param>
    /// <param name = "_dateTo">An end date of calculation period.</param>
    /// <returns><c>InventPeriodAgingTmp_W</c> records.</returns>
    private InventPeriodAgingTmp_W getInventoryBalancesInPeriod(date _dateFrom, date _dateTo)
    {
        InventPeriodAgingTmp_W inventPeriodAgingTmpInPeriod;
        InventValueReportView inventValueReportView;
        InventDim inventDim;
        InventTable inventTable;
        InventTableModule inventTableModule;
        WHSInventStatus inventStatus;

        insert_recordset inventPeriodAgingTmpInPeriod (
            InventTableRefRecId,
            ItemId,
            PeriodQty,
            PeriodAmount,
            InventLocationId,
            InventStatusId,
            InventDimId,
            UOM)
            select RecId, ItemId from inventTable
                group by RecId, ItemId
            join sum(Qty), sum(Amount) from inventValueReportView
                where inventValueReportView.TransDate >= _dateFrom
                    && inventValueReportView.TransDate <= _dateTo
                    && inventTable.ItemId == inventValueReportView.ItemId
            join InventLocationId, InventStatusId, InventDimId from inventDim
                group by InventLocationId, InventStatusId, InventDimId
                where inventDim.inventDimId == inventValueReportView.InventDimId
            join UnitId from inventTableModule
                group by UnitId
                where inventTableModule.ItemId == inventTable.ItemId
                    && inventTableModule.ModuleType == ModuleInventPurchSales::Invent;

        return inventPeriodAgingTmpInPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalancesInPeriodOrNotZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>InventPeriodAgingTmp_W</c> with inventory balances in period or not zero as of date.
    /// </summary>
    /// <param name = "_tmpInPeriod"><c>InventPeriodAgingTmp_W</c> records with inventory balances in period.</param>
    /// <param name = "_tmpClosing"><c>InventPeriodAgingTmp_W</c> records with inventory balances not zero as of date.</param>
    /// <returns><c>InventPeriodAgingTmp_W</c> records.</returns>
    private InventPeriodAgingTmp_W getInventoryBalancesInPeriodOrNotZero(InventPeriodAgingTmp_W _tmpInPeriod, InventPeriodAgingTmp_W _tmpClosing)
    {
        InventPeriodAgingTmp_W inventPeriodAgingTmpLocal;

        insert_recordset inventPeriodAgingTmpLocal(
            InventTableRefRecId,
            ItemId,
            InventDimId,
            PeriodQty,
            PeriodAmount,
            InventLocationId,
            InventStatusId,
            UOM,
            ClosingQty,
            ClosingAmount)
            select InventTableRefRecId, ItemId, InventDimId, PeriodQty, PeriodAmount, InventLocationId, InventStatusId, UOM from _tmpInPeriod
            join PeriodQty, PeriodAmount from _tmpClosing
                where _tmpClosing.InventTableRefRecId == _tmpInPeriod.InventTableRefRecId
                    && _tmpClosing.InventDimId == _tmpInPeriod.InventDimId
                    && _tmpClosing.InventLocationId == _tmpInPeriod.InventLocationId
                    && _tmpClosing.InventStatusId == _tmpInPeriod.InventStatusId
                    && _tmpClosing.UOM == _tmpInPeriod.UOM;

        insert_recordset inventPeriodAgingTmpLocal(
            InventTableRefRecId,
            ItemId,
            InventDimId,
            ClosingQty,
            ClosingAmount,
            InventLocationId,
            InventStatusId,
            UOM)
            select InventTableRefRecId, ItemId, InventDimId, PeriodQty, PeriodAmount, InventLocationId, InventStatusId, UOM from _tmpClosing
                where _tmpClosing.PeriodQty != 0
                    || _tmpClosing.PeriodAmount != 0
            notexists join inventPeriodAgingTmpLocal
                where _tmpClosing.InventTableRefRecId == inventPeriodAgingTmpLocal.InventTableRefRecId
                    && _tmpClosing.InventDimId == inventPeriodAgingTmpLocal.InventDimId
                    && _tmpClosing.InventLocationId == inventPeriodAgingTmpLocal.InventLocationId
                    && _tmpClosing.InventStatusId == inventPeriodAgingTmpLocal.InventStatusId
                    && _tmpClosing.UOM == inventPeriodAgingTmpLocal.UOM;

        insert_recordset inventPeriodAgingTmpLocal(
            InventTableRefRecId,
            ItemId,
            InventDimId,
            PeriodQty,
            PeriodAmount,
            InventLocationId,
            InventStatusId,
            UOM)
            select InventTableRefRecId, ItemId, InventDimId, PeriodQty, PeriodAmount, InventLocationId, InventStatusId, UOM from _tmpInPeriod
            notexists join inventPeriodAgingTmpLocal
                where _tmpInPeriod.InventTableRefRecId == inventPeriodAgingTmpLocal.InventTableRefRecId
                    && _tmpInPeriod.InventDimId == inventPeriodAgingTmpLocal.InventDimId
                    && _tmpInPeriod.InventLocationId == inventPeriodAgingTmpLocal.InventLocationId
                    && _tmpInPeriod.InventStatusId == inventPeriodAgingTmpLocal.InventStatusId
                    && _tmpInPeriod.UOM == inventPeriodAgingTmpLocal.UOM;

        return inventPeriodAgingTmpLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>