<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionActionManagerDelegate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HcmPositionActionManagerDelegate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultingActionFromPositionEventHandler</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(HcmPositionAction), staticdelegatestr(HcmPositionAction, defaultingActionFromPosition))]
    public static void defaultingActionFromPositionEventHandler(HcmPositionRecId _positionRecId,
        HcmActionStateRecId _actionStateRecId,
        HcmActionType _actionType,
        EffectiveDateTime _effectiveOn,
        ValidFromDate _validFrom
        )
    {
        // Default PayrollPositionActionDetails values
        PayrollPositionDetails payrollPositionDetails = PayrollPositionDetails::findByPosition(_positionRecId, _validFrom);

        if (payrollPositionDetails)
        {
            // Default PayrollPositionDetails values
            PayrollPositionActionDetails payrollPositionActionDetails = PayrollPositionActionDetails::findByActionState(_actionStateRecId, true);

            payrollPositionActionDetails.ActionState = _actionStateRecId;
            payrollPositionActionDetails.AutoGenerateSalary = payrollPositionDetails.AutoGenerateSalary;
            payrollPositionActionDetails.DefaultEarningCode = payrollPositionDetails.DefaultEarningCode;
            payrollPositionActionDetails.DefaultGLIBenefit = payrollPositionDetails.DefaultGLIBenefit;
            payrollPositionActionDetails.GenerateEarningsFromSchedule = payrollPositionDetails.GenerateEarningsFromSchedule;
            payrollPositionActionDetails.IsCompanyOfficer = payrollPositionDetails.IsCompanyOfficer;
            payrollPositionActionDetails.PaidByLegalEntity = payrollPositionDetails.PaidByLegalEntity;
            payrollPositionActionDetails.PayCycle = payrollPositionDetails.PayCycle;
            payrollPositionActionDetails.PayrollNormalHours = payrollPositionDetails.PayrollNormalHours;
            payrollPositionActionDetails.PayrollOvertimeHours = payrollPositionDetails.PayrollOvertimeHours;
            payrollPositionActionDetails.Schedule = payrollPositionDetails.Schedule;
            payrollPositionActionDetails.ScheduleDataAreaId = payrollPositionDetails.ScheduleDataAreaId;

            if (_actionType == HcmActionType::PositionEdit)
            {
                payrollPositionActionDetails.PayrollPositionDetailRecVersion = payrollPositionDetails.RecVersion;
                payrollPositionActionDetails.PayrollPositionDetailsRecId = payrollPositionDetails.RecId;
            }

            payrollPositionActionDetails.write();
        }

        // Default HcmPositionActionBudgetAccountLine values
        HcmPositionActionBudgetAccountLine hcmPositionActionBudgetAccountLine;

        delete_from hcmPositionActionBudgetAccountLine
            where hcmPositionActionBudgetAccountLine.ActionState == _actionStateRecId;

        hcmPositionActionBudgetAccountLine.clear();

        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;

        insert_recordset hcmPositionActionBudgetAccountLine (ActionState, BudgetPurposeType, LegalEntity, PositionBudgetAccountLineRecId, PositionBudgetAccountLineRecVersion)
            select ValidTimeState(_effectiveOn, _effectiveOn) _actionStateRecId, BudgetPurposeType, LegalEntity, RecId, RecVersion from hcmPositionBudgetAccountLine
                where hcmPositionBudgetAccountLine.Position == _positionRecId;

        if (_actionType == HcmActionType::PositionCreate)
        {
            // Create actions should not have a RecId and RecVersion corresponding to the source records since they are for a new position
            update_recordset hcmPositionActionBudgetAccountLine
                setting
                    PositionBudgetAccountLineRecId = 0,
                    PositionBudgetAccountLineRecVersion = 0
                where hcmPositionActionBudgetAccountLine.ActionState == _actionStateRecId;
        }

        // Default HcmPositionActionBudgetDefaultValue values
        HcmPositionActionBudgetDefaultValue hcmPositionActionBudgetDefaultValue;

        delete_from hcmPositionActionBudgetDefaultValue
            where hcmPositionActionBudgetDefaultValue.ActionState == _actionStateRecId;

        hcmPositionActionBudgetDefaultValue.clear();

        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;

        insert_recordset hcmPositionActionBudgetDefaultValue (ActionState, LegalEntity, PositionBudgetDefaultValueRecId, PositionBudgetDefaultValueRecVersion)
            select ValidTimeState(_effectiveOn, _effectiveOn) _actionStateRecId, LegalEntity, RecId, RecVersion from hcmPositionBudgetDefaultValue
                where hcmPositionBudgetDefaultValue.Position == _positionRecId;

        if (_actionType == HcmActionType::PositionCreate)
        {
            // Create actions should not have a RecId and RecVersion corresponding to the source records since they are for a new position
            update_recordset hcmPositionActionBudgetDefaultValue
                setting
                    PositionBudgetDefaultValueRecId = 0,
                    PositionBudgetDefaultValueRecVersion = 0
                where hcmPositionActionBudgetDefaultValue.ActionState == _actionStateRecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>