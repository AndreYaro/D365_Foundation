<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportByVATDueDateFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;

/// <summary>
/// The <c>TaxReportByVATDueDateFeature</c> class defines the sales tax settlement and reporting by date of VAT register feature.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
public final class TaxReportByVATDueDateFeature implements IFeatureMetadata, IFeatureDependencies, IFeatureMetadataEnablementNotifiable
{
    private static TaxReportByVATDueDateFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new TaxReportByVATDueDateFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>TaxReportByVATDueDateFeature</c> instance.</returns>
    [Hookable(false)]
    public static TaxReportByVATDueDateFeature instance()
    {
        return TaxReportByVATDueDateFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@VatDueDate:TaxReportByVATDueDateFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@VatDueDate:TaxReportByVATDueDateFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        boolean canDisable = true;
        CompanyInfo companyInfo;
        container dataAreaCon;

        while select DataArea from companyInfo
        {
            changecompany(companyInfo.DataArea)
            {
                if (TaxParameters::find().ReportUseVatDueDate_W)
                {
                    dataAreaCon += companyInfo.DataArea;
                }
            }
        }

        if (dataAreaCon != conNull())
        {
            // Message: You must switch off the parameter "Date of VAT register" in the General ledger parameters page of the legal entity(-ies) *** before disabling the feature.
            canDisable = checkFailed(strFmt("@VatDueDate:CannotDisableFeatureWarningMessage", fieldPName(TaxParameters, ReportUseVatDueDate_W), con2Str(dataAreaCon, ', ')));
        }

        if (!canDisable)
        {
            throw error(strFmt("@FeatureManagement:CannotDisableFeature", SysLabel::labelId2String2(this.label())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dependency on all the features in the list. Pre-requisites features cannot be disabled unless current feature is disabled.
    /// </summary>
    /// <returns>An array containing all the pre-requisite features.</returns>
    public IFeature[] dependsOnAllFeatures()
    {
        var featureDependency = new IFeature[1]();
        featureDependency.SetValue(VatDueDateFeature::instance(), 0);
        return featureDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an array of the features, if any one is enabled, feature can be enabled.
    /// </summary>
    /// <returns>empty array</returns>
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>