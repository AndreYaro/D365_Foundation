<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRegulated_Sales_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class controls the MRC Regulated for sales packingslip
/// </summary>
class PdsMRCRegulated_Sales_PackingSlip extends PdsMRCRegulated_Sales
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the MRCCustomerHistory table with the
    /// information from the current purchline
    /// </summary>
    /// <returns>Returns whether or not the history record was
    /// able to be inserted without error.</returns>
    protected boolean updateHistory()
    {
        PdsMRCCustomerHistory history;

        history = PdsMRCCustomerHistory::find(
            salesLine.CustAccount,
            salesLine.SalesId,
            salesLine.ItemId,
            activeDocument.DocumentId,
            true);

        history.Customer    = salesLine.CustAccount;
        history.ItemId      = salesLine.ItemId;
        history.LastSent    = any2date(activeDocument.CreatedDateTime);
        history.SalesId     = salesLine.SalesId;
        history.DocumentId  = activeDocument.DocumentId;
        history.bomId       = activeDocument.bomid;
        history.CountryId   = activeDocument.CountryId;
        history.LanguageId  = activeDocument.Language;

        try
        {
            if (history.RecId)
            {
                ttsbegin;
                history.update();
                ttscommit;
            }
            else
            {
                history.insert();
            }
        }
        catch (Exception::Error)
        {
            if (history.RecId)
            {
                ttsabort;
            }
            return checkFailed("@PDS909");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Issues a warning if Regulation warning on sales packing slip when is set on the MRC parameters.
    /// </summary>
    /// <param name="_ignoreParameters">Should the
    /// MRC parameters to issue warning be ignored?
    /// </param>
    protected void warningOnExpiry(boolean _ignoreParameters = false)
    {
        if (parameters.RegulationWarningOnPack || _ignoreParameters)
        {
            warning("@PDS911");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWarnBreakAndPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles various checks related to safety data sheets for a product, depending of settings
    /// </summary>
    /// <param name="_mrcPostingErr">
    /// If true an error will be thrown and posting will be interrupted if there are problems with the product
    /// safety data sheet, like the sheet is no longer active
    /// </param>
    /// <param name="_regulationWarning">
    /// If true a warning will be given stating that a product safety data sheet should be sent to the customer
    /// </param>
    /// <param name="_mrcPrintOnPack">
    /// If true the product safety data sheet is sent to the printer
    /// </param>
    /// <param name="_salesLine">
    /// SalesLine record to check if any regulated documents are associated with it.
    /// </param>
    /// <exception cref="Exception::Error" type="boolean ">
    /// Throwing the exception to break the posting of sales packingslip or sales order invoice
    /// </exception>
    /// <returns>
    /// The RecId list identifies in the table DocuRef the product safety data sheet in case the item is regulated, otherwise zero.
    /// </returns>
    [SysObsolete('Use method checkItemRegulatedExtended instead.', false, 30\06\2018)]
    public static RecId checkWarnBreakAndPrint(
        boolean     _mrcPostingErr,
        boolean     _regulationWarning,
        boolean     _mrcPrintOnPack,
        SalesLine   _salesLine)
    {
        RecId docuRefRecId;

        List psdsDocuRefRecIdList = PdsMRCRegulated_Sales_PackingSlip::checkRegulatedWarnBreakAndPrint(_mrcPostingErr, _regulationWarning, _mrcPrintOnPack, _salesLine);
        ListEnumerator listEnumerator = psdsDocuRefRecIdList.getEnumerator();
        if (listEnumerator.moveNext())
        {
            docuRefRecId = listEnumerator.current();
        }

        return docuRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegulatedWarnBreakAndPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles various checks related to safety data sheets for a product, depending of settings
    /// </summary>
    /// <param name="_mrcPostingErr">
    /// If true an error will be thrown and posting will be interrupted if there are problems with the product
    /// safety data sheet, like the sheet is no longer active
    /// </param>
    /// <param name="_regulationWarning">
    /// If true a warning will be given stating that a product safety data sheet should be sent to the customer
    /// </param>
    /// <param name="_mrcPrintOnPack">
    /// If true the product safety data sheet is sent to the printer
    /// </param>
    /// <param name="_salesLine">
    /// SalesLine record to check if any regulated documents are associated with it.
    /// </param>
    /// <exception cref="Exception::Error" type="boolean ">
    /// Throwing the exception to break the posting of sales packingslip or sales order invoice
    /// </exception>
    /// <returns>
    /// The RecId list identifies in the table DocuRef the product safety data sheet in case the item is regulated, otherwise zero.
    /// </returns>
    public static List checkRegulatedWarnBreakAndPrint(
        boolean     _mrcPostingErr,
        boolean     _regulationWarning,
        boolean     _mrcPrintOnPack,
        SalesLine   _salesLine)
    {
        if (_mrcPostingErr || _regulationWarning)
        {
            PdsMRCRegulated mrcRegulated = PdsMRCRegulated_Sales_PackingSlip::construct();
            mrcRegulated.setBuffer(_salesLine);
            mrcRegulated.parmPrintDoc(_mrcPrintOnPack);

            if (!mrcRegulated.checkItemRegulatedExtended() && _mrcPostingErr)
            {
                throw error("@PDS836");
            }

            return mrcRegulated.parmDocuRefRecIdList();
        }

        return new List(typeName2Type(extendedTypeStr(recId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PdsMRCRegulated_Sales_PackingSlip construct()
    {
        return new PdsMRCRegulated_Sales_PackingSlip();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>