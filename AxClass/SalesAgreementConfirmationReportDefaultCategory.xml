<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementConfirmationReportDefaultCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesAgreementConfirmationReportDefaultCategory</c> class represents the default sales confirmation report.
/// </summary>
[AgreementClassificationCategoryFactoryAttribute(ModuleSalesPurch::Sales, AgreementClassificationCategory::Default)]
class SalesAgreementConfirmationReportDefaultCategory extends AgreementConfirmationReportClassificationCategory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructPrintMgmtReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>PrintMgmtReportRun</c> for the <c>AgreementConfirmController</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PrintMgmtReportRun</c> class.</returns>
    public PrintMgmtReportRun constructPrintMgmtReportRun()
    {
        return PrintMgmtReportRun::construct(PrintMgmtHierarchyType::Sales,
                                             PrintMgmtNodeType::SalesAgreement,
                                             PrintMgmtDocumentType::SalesAgreementConfirmation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRunPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>PrintMgmtReportRun</c> instance for the <c>AgreementConfirmController</c> class.
    /// </summary>
    /// <param name = "_agreementConfirmController">An instance of the <c>AgreementConfirmController</c> class.</param>
    /// <param name = "_printMgmtReportRun">An instance of the <c>PrintMgmtReportRun</c> class.</param>
    /// <param name = "_agreementHeader">An instance of the <c>AgreementHeader</c> record.</param>
    /// <param name = "_agreementHeaderHistory">An instance of the <c>AgreementHeaderHistory</c> record.</param>
    public void initializeRunPrintMgmt(
        AgreementConfirmController  _agreementConfirmController,
        PrintMgmtReportRun          _printMgmtReportRun,
        AgreementHeader             _agreementHeader,
        AgreementHeaderHistory      _agreementHeaderHistory)
    {
        RecId                       dummyRecId = 1;
        SalesAgreementHeader        salesAgreementHeader;
        SalesAgreementHeaderHistory salesAgreementHeaderHistory;
        if (_agreementHeader.RecId)
        {
            salesAgreementHeader = _agreementHeader;
            salesAgreementHeaderHistory.initFromSalesAgreementHeader(salesAgreementHeader);
            salesAgreementHeaderHistory.RecId = dummyRecId;
        }
        else
        {
            salesAgreementHeaderHistory = _agreementHeaderHistory;
            salesAgreementHeader        = SalesAgreementHeader::find(salesAgreementHeaderHistory.AgreementHeader);
        }

        _printMgmtReportRun.load(salesAgreementHeaderHistory, salesAgreementHeader, salesAgreementHeaderHistory.Language);
                
        _agreementConfirmController.parmReportContract().parmRdlContract().parmLanguageId(salesAgreementHeaderHistory.Language);
        _agreementConfirmController.parmReportContract().parmRdlContract().parmLabelLanguageId(salesAgreementHeaderHistory.Language);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AgreementConfirmationRDPContract</c> class from <c>CustFormletterParameters</c> for the <c>AgreementConfirmController</c> class.
    /// </summary>
    /// <param name = "_contract">An instance of the <c>AgreementConfirmationRDPContract</c> class.</param>
    public void preRunModifyContract(AgreementConfirmationRDPContract _contract)
    {
        CustFormletterParameters custFormletterParameters = CustFormletterParameters::find();
        _contract.parmPrintLevel(custFormletterParameters.PrePrintLevelSalesAgreement);
        _contract.parmShowDeliveryTerm(custFormletterParameters.PrintDeliveryTerm);
        _contract.parmShowModeofDelivery(custFormletterParameters.PrintModeOfDelivery);
        _contract.parmShowPayment(custFormletterParameters.PrintPayment);
        _contract.parmShowCashDiscount(custFormletterParameters.PrintCashDiscount);
        _contract.parmShowContractReference(custFormletterParameters.PrintContractReference);
        _contract.parmShowAgreementClassification(custFormletterParameters.PrintAgreementClassification);
        _contract.parmShowMaxIsEnforced(custFormletterParameters.PrintMaxIsEnforced);
        _contract.parmInventoryDimensions(custFormletterParameters.InventDimSalesAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get sales agreement header and insert values in the <c>AgreementHeaderTmp</c> record for the <c>AgreementConfirmationDP</c> class.
    /// </summary>
    /// <param name = "_agreementConfirmationDP">An instance of the <c>AgreementConfirmationDP</c> class.</param>
    /// <param name = "_agreementHeaderTmpRecord">The <c>AgreementHeaderTmp</c> record for which to insert values.</param>
    /// <param name = "_proforma">A Boolean value that indicates whether the agreement is proforma.</param>
    public void getAgreementHeader(AgreementConfirmationDP _agreementConfirmationDP, AgreementHeaderTmp _agreementHeaderTmpRecord, NoYes _proforma)
    {
        if (_proforma)
        {
            _agreementConfirmationDP.getSalesAgreementHeader(_agreementHeaderTmpRecord);
        }
        else
        {
            _agreementConfirmationDP.getSalesAgreementHeaderHistory(_agreementHeaderTmpRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocuOnFormulaAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set <c>DocuOnFormular</c> and <c>DocuOnFormularTypeId</c> from <c>CustFormletterDocument</c> on the <c>AgreementConfirmationDP</c> class.
    /// </summary>
    /// <param name = "_agreementConfirmationDP">An instance of the <c>AgreementConfirmationDP</c> class.</param>
    public void setDocuOnFormulaAgreement(AgreementConfirmationDP _agreementConfirmationDP)
    {
        CustFormletterDocument custFormletterDocument = CustFormletterDocument::find();
        _agreementConfirmationDP.parmDocuOnFormularAgreement(custFormletterDocument.DocuOnAgreement);
        _agreementConfirmationDP.parmDocuOnFormulaTypeAgreement(custFormletterDocument.DocuTypeAgreement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>