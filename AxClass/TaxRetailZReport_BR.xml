<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRetailZReport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides the tax calculation methods to support posting a <c>RetailZReport_BR</c>.
/// </summary>
/// <remarks>
/// It extends that <c>Tax</c> class.
/// </remarks>
class TaxRetailZReport_BR extends Tax
{
    RetailStoreTable                    storeTable;
    RetailZReport_BR                    zReport;
    RetailZReportTotalizer_BR           zReportTotalizer;
    RetailZReportTotalizerTaxTrans_BR   currentTotalizerTaxTrans;
    TaxGroup                            retailStoreTaxGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through all tax lines and calculates the actual tax amounts.
    /// </summary>
    /// <returns>
    /// The total tax amount posted.
    /// </returns>
    /// <remarks>
    /// Record <c>RetailZReportTotalizerTaxTrans_BR</c> are the tax lines for a <c>RetailZReport_BR</c>
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if the tax codes fail to be validated per line.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if the tax codes fail to be validated in total.
    /// </exception>
    protected TaxAmount calc()
    {
        RetailZReportTotalizerTaxTrans_BR   totalizerTaxTransLocal;

        TaxAmount   taxAmount;
        AmountCur   lineAmount;

        Map         amountInclTax   = new Map(Types::Container, Types::Real);
        Map         amountExclTax   = new Map(Types::Container, Types::Real);

        sourceCurrencyCode = this.getLedgerCurrencyCode();

        if (this.skipTaxCalculations())
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        while select totalizerTaxTransLocal
            where   totalizerTaxTransLocal.ZReportNumber                  == zReport.ZReportNumber
                &&  totalizerTaxTransLocal.AdditionalFiscalMemoryIndex    == zReport.AdditionalFiscalMemoryIndex
                &&  totalizerTaxTransLocal.FiscalPrinterSerialNumber      == zReport.FiscalPrinterSerialNumber
        {
            lineAmount                  = -1 * totalizerTaxTransLocal.accountingAmount();
            currentTotalizerTaxTrans    = totalizerTaxTransLocal;

            this.insertTaxWorkTrans(totalizerTaxTransLocal,
                                    zReport.AccountingDate,
                                    zReport.ZReportNumber);

            if (!this.checkTaxCodesByLine())
            {
                throw error("@SYS22772");
            }

            this.insertLineInInternal(  lineAmount,
                                        0,
                                        '',
                                        '',
                                        0,
                                        storeTable.DefaultDimension,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                                    TaxLedgerAccountGroup::accountLedgerDimension(totalizerTaxTransLocal.TaxCode, TaxDirection::OutgoingTax),
                                                                    storeTable.DefaultDimension),
                                        LedgerPostingType::Tax);

            if (taxCalculateLine)
            {
                taxAmount = this.calcTax();

                this.saveInProcessTransaction();
            }
        }

        if (!this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(0);
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        this.roundTaxOnTaxGroup();

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all tax lines and post the amounts.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The <c>LedgerPostingController</c> to be used.
    /// </param>
    /// <returns>
    /// The total tax amount posted.
    /// </returns>
    /// <remarks>
    /// This is the main method to be called at this class.
    /// </remarks>
    public TaxAmount calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount taxAmount;

        this.calc();

        this.initLedgerPosting(_ledgerPostingController);

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);

            taxAmount = this.getTaxTotalByVoucherDate();
        }

        zReport.selectForUpdate(true);
        zReport.Voucher = voucher;
        zReport.update();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxationCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines taxation code given a tax code only.
    /// </summary>
    /// <param name="_taxCode">
    /// A <c>TaxCode</c> to find the <c>TaxationCodeTable_BR</c>.
    /// </param>
    /// <param name="_taxOnItem">
    /// Ignored but kept to keep the method signature.
    /// </param>
    /// <param name="_taxGroupData">
    /// Ignored but kept to keep the method signature.
    /// </param>
    /// <returns>
    /// The <c>TaxationCodeTable_BR</c> founs, otherwise an empty buffer.
    /// </returns>
    /// <remarks>
    /// Due to how the tax engine was implemented at the Retail POS, only the tax code is used here.
    /// </remarks>
    protected TaxationCodeTable_BR determineTaxationCode_BR(TaxCode _taxCode, TaxOnItem _taxOnItem, TaxGroupData _taxGroupData)
    {
        return TaxationCodeTable_BR::findRecId(TaxTable::find(_taxCode).TaxationCodeTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code to be used.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    protected CurrencyCode getLedgerCurrencyCode()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTotalByVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total tax amount for the internal voucher and date.
    /// </summary>
    /// <returns>
    /// The total tax amount.
    /// </returns>
    protected taxAmountCur getTaxTotalByVoucherDate()
    {
        return Tax::taxTotalVoucherDate(voucher, taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tax work trans for the given Z report tax trans.
    /// </summary>
    /// <param name="_zReportTotalizerTaxTrans">
    /// The <c>RetailZReportTotalizerTaxTrans_BR</c> record containing the tax trans to be posted.
    /// </param>
    /// <param name="_taxCalculationDate">
    /// The date to be used to calculated the tax.
    /// </param>
    /// <param name="_retailZReportNumber">
    /// The Z report number to be used as Invoice ID.
    /// </param>
    /// <remarks>
    /// Equivalent to configureIntersection in some Tax implementations.
    /// </remarks>
    protected void insertTaxWorkTrans(  RetailZReportTotalizerTaxTrans_BR   _zReportTotalizerTaxTrans,
                                        TransDate                           _taxCalculationDate,
                                        RetailDocumentNumber_BR             _retailZReportNumber)

    {
        Set taxCodeCombination = new Set(Types::String);

        taxCodeCombination.add(_zReportTotalizerTaxTrans.TaxCode);

        taxWorkTrans.HeadingRecId           = headingRecId;
        taxWorkTrans.HeadingTableId         = this.headingTableId();
        taxWorkTrans.ParentSourceTableId    = this.parmParentSourceTableId();
        taxWorkTrans.ParentSourceRecId      = this.parmParentSourceRecId();
        taxWorkTrans.SourceTableId          = this.sourceTableId();
        taxWorkTrans.SourceRecId            = this.sourceRecId();
        taxWorkTrans.Company                = curext();
        taxWorkTrans.Prepayment             = this.isPrePayment();
        taxWorkTrans.Txt                    = '';
        taxWorkTrans.Voucher                = voucher;
        taxWorkTrans.TransDate              = taxDate;
        taxWorkTrans.TaxCode                = _zReportTotalizerTaxTrans.TaxCode;
        taxWorkTrans.TaxGroup               = retailStoreTaxGroup;
        taxWorkTrans.TaxItemGroup           = '';
        taxWorkTrans.InventTransId          = '';
        taxWorkTrans.SourceCurrencyCode     = sourceCurrencyCode;
        taxWorkTrans.TaxDirection           = TaxDirection::OutgoingTax;
        taxWorkTrans.Source                 = taxModuleType;
        taxWorkTrans.TaxAutogenerated       = NoYes::Yes;
        taxWorkTrans.TaxReports             = NoYes::Yes;
        taxWorkTrans.ExemptTax              = (_zReportTotalizerTaxTrans.FiscalValue == TaxFiscalValue_BR::WithoutCreditDebitExempt);
        taxWorkTrans.CalculationDate        = _taxCalculationDate;
        taxWorkTrans.InvoiceId              = int2str(_retailZReportNumber);
        taxWorkTrans.Posted                 = false;
        taxWorkTrans.TaxType_BR             = _zReportTotalizerTaxTrans.TaxType;
        taxWorkTrans.TaxationCode_BR        = _zReportTotalizerTaxTrans.TaxationCode;
        taxWorkTrans.TaxationOrigin_BR      = _zReportTotalizerTaxTrans.TaxationOrigin;
        taxWorkTrans.TaxCodeCombinationId   = this.findTaxCodeCombinationId(taxCodeCombination);

        taxWorkTrans.insert(this.ignoreCalculatedSalesTax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this implementation of Tax using the given Z report
    /// </summary>
    /// <param name="_retailZReport">
    /// The <c>RetailZReport_BR</c> that contains the tax transactions to be posted
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if the <c>RetailZReport_BR</c> buffer is empty.
    /// </exception>
    public void new(RetailZReport_BR _retailZReport)
    {
        post                = NoYes::Yes;

        taxModuleType       = TaxModuleType::Retail;

        headingTableId      = _retailZReport.TableId;
        headingRecId        = _retailZReport.RecId;
        origHeadingTableId  = _retailZReport.TableId;
        origHeadingRecId    = _retailZReport.RecId;

        zReport             = _retailZReport;
        storeTable          = RetailStoreTable::find(_retailZReport.StoreId);
        retailStoreTaxGroup = storeTable.taxGroup;

        super();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            taxDate = zReport.AccountingDate;
        }

        triangulation = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmParentSourceRecId()
    {
        return zReport.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceTableId</Name>
				<Source><![CDATA[
    public RefTableId parmParentSourceTableId()
    {
        return zReport.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RecId sourceRecId()
    {
        return currentTotalizerTaxTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        return currentTotalizerTaxTrans.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>