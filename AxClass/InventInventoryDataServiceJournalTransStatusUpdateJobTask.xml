<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceJournalTransStatusUpdateJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceJournalTransStatusUpdateJobTask extends InventInventoryDataServiceBatchJobTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceJournalTransStatusUpdateJobTask),
                                                          staticMethodStr(InventInventoryDataServiceJournalTransStatusUpdateJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceJournalTransStatusUpdateJobTask dataCollectionTask = new InventInventoryDataServiceJournalTransStatusUpdateJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventInventoryDataServiceJournalTransStatusQueue queue;
        var inventoryServiceClient = new InventoryServiceClient();

        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceJournalTransStatusUpdateJobTask));
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();
        InventInventoryDataServiceBulkPostingResponse responses;

        List eventList = new List(Types::Class);
        TmpRecIdFilter queueRecId;

        ttsbegin;

        while select queue
            where queue.RecId >= minRecId
            && queue.RecId <= maxRecId
        {
            var event = InventOnHandJournalTransStatusEvent::buildFromQueue(queue);
            if (event.parmId())
            {
                eventList.addEnd(event);
                queueRecId.clear();
                queueRecId.RefRecId = queue.RecId;
                queueRecId.insert();
            }
        }

        ttscommit;

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostInventJournalTransStatus())
        {
            var correlationId = '';

            try
            {
                try
                {
                    responses = inventoryServiceClient.postJournalTransStatus(eventList);
                }
                catch
                {
                    if (InventInventoryDataServiceRetryHelper::retryTransientError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }

                correlationId = responses.parmCorrelationId();
                var successRes = responses.parmSuccess();
                var failedRes = responses.parmFailure();
                ListEnumerator failureResponseEnum = successRes.getEnumerator();
                str failedRecIdsAndErrorMessages = '';

                ttsbegin;
                while (failureResponseEnum.moveNext())
                {
                    InventInventoryDataServicePostingResponse failureResponse = failureResponseEnum.current() as InventInventoryDataServicePostingResponse;
                    failedRecIdsAndErrorMessages += failureResponse.parmId() + ': ';
                    failedRecIdsAndErrorMessages += failureResponse.parmMessage() + '; ';
                    delete_from queueRecId where queueRecId.RefRecId == any2Int64(failureResponse.parmId());
                }

                ttscommit;

                NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                inventInventoryDataServiceInstrumentationActivity.logPostEventsInfoV2(activityContext, minRecId, maxRecId, postSuccessed, correlationId, failedRecIdsAndErrorMessages, successRes.elements(), failedRes.elements());
            
                ttsbegin;
                delete_from queue
                    exists join queueRecId
                        where queue.RecId == queueRecId.RefRecId;
                ttscommit;
            }
            catch
            {
                inventInventoryDataServiceInstrumentationActivity.logPostEventsInfo(activityContext, minRecId, maxRecId, NoYes::No, correlationId, 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>