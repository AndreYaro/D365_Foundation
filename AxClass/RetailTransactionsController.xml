<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
/// <summary>
/// Initializes the query by adding datasource and ranges to run the <c>RetailTransactions</c> report.
/// </summary>
public class RetailTransactionsController extends SrsReportRunController implements BatchRetryable
{
    RetailTransactionTable      transactionTable;
    Args                        transactionArgs;
    CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the report query as per the <c>Args</c> passed.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to modify.
    /// </param>
    /// <remarks>
    /// This modified query will be used by the report to fetch the specific transcation.
    /// </remarks>
    public void modifyQuery(Query _query)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange_Store, queryBuildRange_Terminal, queryBuildRange;
        Query                   query = _query;

        this.parmShowDialog(false);
        queryBuildDataSource = query.dataSourceTable(tablenum(RetailTransactionTable));

        if (!queryBuildDataSource)
        {
            queryBuildDataSource = query.addDataSource(Tablenum(RetailTransactionTable));
        }

        queryBuildRange_Store = queryBuildDataSource.findRange(fieldnum(RetailTransactionTable, store));

        if (!queryBuildRange_Store)
        {
            queryBuildRange_Store = queryBuildDataSource.addRange(fieldnum(RetailTransactionTable, store));
        }

        queryBuildRange_Terminal = queryBuildDataSource.findRange(fieldnum(RetailTransactionTable, terminal));

        if (!queryBuildRange_Terminal)
        {
            queryBuildRange_Terminal = queryBuildDataSource.addRange(fieldnum(RetailTransactionTable, terminal));
        }

        queryBuildRange = queryBuildDataSource.findRange(fieldnum(RetailTransactionTable, transactionId));

        if (!queryBuildRange)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailTransactionTable, transactionId));
        }

        if (transactionTable)
        {
            queryBuildRange.value(transactionTable.transactionId);
            queryBuildRange_Store.value(transactionTable.store);
            queryBuildRange_Terminal.value(transactionTable.terminal);
            eventSource.EventWriteRetailTransactionsControllerReportPrintForTransaction('Transaction controller', funcName(), transactionTable.RecId);
        }
        else
        {
            queryBuildRange.value("");
            queryBuildRange_Store.value("");
            queryBuildRange_Terminal.value("");

            eventSource.EventWriteRetailTransactionsControllerReportPrintForAllTransaction('Transaction controller', funcName());
        }

        queryBuildRange = queryBuildDataSource.findRange(fieldnum(RetailTransactionTable, receiptId));

        if (!queryBuildRange)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailTransactionTable, receiptId));
        }

        if (transactionTable)
        {
            queryBuildRange.value(transactionTable.receiptId);
        }
        else
        {
            queryBuildRange.value("");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementArgs</Name>
				<Source><![CDATA[
        public Args parmStatementArgs(Args _transactionArgs = transactionArgs)
    {
        if (_transactionArgs && _transactionArgs.dataset())
        {
            transactionArgs = _transactionArgs;

            switch (transactionArgs.dataset())
            {
                case(tablenum(RetailTransactionTable))   :
                    transactionTable = transactionArgs.record();
                    break;
            }
        }

        return _transactionArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the report query as per the <c>Args</c> passed.
    /// </summary>
    protected void prePromptModifyContract()
    {
        super();
        this.modifyQuery(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
        public SysOperationStartResult startOperation()
    {
        this.parmReportName(ssrsReportStr(RetailTransactions, Report));
        this.parmDialogCaption("@RET3821");
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@RET3821";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        RetailTransactionsController retailTransactionsController = new RetailTransactionsController();

        retailTransactionsController.parmStatementArgs(_args);
        eventSource.EventWriteRetailTransactionsControllerReportPrinting('Transaction controller', funcName());
        retailTransactionsController.parmArgs(_args);
        retailTransactionsController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>