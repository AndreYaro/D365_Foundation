<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxServiceSettingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using GP = Microsoft.Dynamics365.Tax.Core.GTEPlus;
using TaxServiceAPIContracts = Microsoft.Dynamics.TaxCalculation.ApiContracts;
/// <summary>
/// The <c>TaxIntegrationTaxServiceSettingHelper</c> is helper class for integration setting with tax service.
/// </summary>
public final class TaxIntegrationTaxServiceSettingHelper
{
    private const int CustomizedErrorListLimit = 1000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTaxServiceSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax service setting.
    /// </summary>
    public static void initTaxServiceSetting()
    {
        TaxIntegrationTaxServiceParameters::init();
        TaxIntegrationTaxServiceSettingHelper::syncErrorCodeFromService(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncErrorCodeFromService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sync error code from service.
    /// </summary>
    /// <param name = "_showMessage">Show message after sync?</param>
    public static void syncErrorCodeFromService(boolean _showMessage = true)
    {
        TaxIntegrationErrorCodeTable errorCodes, errorCodesTmp;

        errorCodesTmp = TaxIntegrationTaxServiceSettingHelper::getAllErrorCodes();

        if (!errorCodesTmp.RecId)
        {
            return;
        }

        // Merge records from errorCodesTmp into errorCodes. Keep original ErrorValidation option of errorCodes.
        ttsbegin;
        update_recordset errorCodesTmp
            setting ErrorValidation = errorCodes.ErrorValidation
            join errorCodes
                where errorCodesTmp.ErrorCode == errorCodes.ErrorCode;

        delete_from errorCodes;

        insert_recordset errorCodes(ErrorCode, ErrorMessage, ErrorValidation, ErrorCodeType)
            select ErrorCode, ErrorMessage, ErrorValidation, ErrorCodeType
            from errorCodesTmp;
        ttscommit;

        if (_showMessage)
        {
            infolog.add(Exception::Info, "@TaxIntegration:SyncResultCodesFromTaxServiceSuccessfully");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomizedErrorCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is for getting customized error codes.
    /// The elements should be containers that contain two parts, error code and error message like [&lt;ErrorCode&gt;, &lt;ErrorMessage&gt;].
    /// For customized error codes, please add a specific prefix to distinguish them from standard error codes.
    /// </summary>
    /// <returns>A list of customized error codes.</returns>
    public static List getCustomizedErrorCodes()
    {
        return new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureSetupFromService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get feature setup from service.
    /// </summary>
    /// <returns>The <c>TaxIntegrationFeatureSetupTmp</c>.</returns>
    public static TaxIntegrationFeatureSetupTmp getFeatureSetupFromService()
    {
        TaxIntegrationFeatureSetupTmp featureSetupTmp;

        return TaxIntegrationTaxServiceSettingHelper::getFeatureSetupFromServiceV2(featureSetupTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureSetupFromServiceV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get feature setup from service.
    /// </summary>
    /// <param name = "_featureSetupTmp">The <c>TaxIntegrationFeatureSetupTmp</c>.</param>
    /// <returns>The <c>TaxIntegrationFeatureSetupTmp</c>.</returns>
    public static TaxIntegrationFeatureSetupTmp getFeatureSetupFromServiceV2(TaxIntegrationFeatureSetupTmp _featureSetupTmp)
    {
        try
        {
            TaxEngineServicePlusProxy proxy = new TaxEngineServicePlusProxy();
            Microsoft.Dynamics.TaxCalculation.ApiContracts.SolutionsAggregator result = proxy.listTaxFeatureSetup();
            System.Collections.IEnumerator enumerator = result.Value.GetEnumerator();

            while (enumerator.MoveNext())
            {
                Microsoft.Dynamics.TaxCalculation.ApiContracts.Solution solution = enumerator.Current;
                _featureSetupTmp.Name = solution.Name;
                _featureSetupTmp.Version = int2Str(solution.Version);
                _featureSetupTmp.Id = solution.Id;
                _featureSetupTmp.Description = solution.Description;
                _featureSetupTmp.Provider = solution.Provider;
                _featureSetupTmp.FeatureType = TaxServiceISVUtils::getTaxFeatureTypesFromSolution(solution.TaxFeatureType);
                _featureSetupTmp.insert();
            }
        }
        catch (Exception::CLRError)
        {
            error("@TaxIntegration:FailedToAccessTaxService");
        }

        return _featureSetupTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStandardErrorCodeList</Name>
				<Source><![CDATA[
    private static List initStandardErrorCodeList()
    {
        List standardErrorList = new List(Types::Container);

        standardErrorList.addEnd(['Auth10000', 'Platform token is invalid.']);

        standardErrorList.addEnd(['GlobalRepo70001', 'Tax configuration cannot be found in tax service.']);
        standardErrorList.addEnd(['GlobalRepo70002', 'Tax feature cannot be found in tax service.']);

        standardErrorList.addEnd(['InternalServerError00001', 'Tax service is temporarily unavailable.']);

        standardErrorList.addEnd(['TaxableDoc60000', 'Enum attribute in taxable document has invalid value.']);
        standardErrorList.addEnd(['TaxableDoc60001', 'Taxable document not found.']);

        standardErrorList.addEnd(['TaxConfig50003', 'Attribute or measure cannot be found in configuration.']);
        standardErrorList.addEnd(['TaxConfig50004', 'Tax configuration model header cannot be recognized.']);
        standardErrorList.addEnd(['TaxConfig50005', 'Tax configuration model lines cannot be recognized.']);

        standardErrorList.addEnd(['TaxEngineRuntime70000', 'Expression cannot be parsed.']);
        standardErrorList.addEnd(['TaxEngineRuntime70001', 'Formula cannot be solved.']);
        standardErrorList.addEnd(['TaxEngineRuntime70002', 'Tax service is temporarily unavailable.']);
        standardErrorList.addEnd(['TaxEngineRuntime70003', 'Unsupported formula category.']);

        standardErrorList.addEnd(['TaxSetup20000', 'Applicability matrix line not found.']);
        standardErrorList.addEnd(['TaxSetup20001', 'Tax code is not found for applicability matrix line.']);
        standardErrorList.addEnd(['TaxSetup20002', 'Measures are not found in applicability matrix line.']);
        standardErrorList.addEnd(['TaxSetup20003', 'Tax rate is not found for tax code.']);
        standardErrorList.addEnd(['TaxSetup20004', 'Tax codes applicability matrix is not found.']);
        standardErrorList.addEnd(['TaxSetup20005', 'Tax component defined in tax code is not found from tax configuration.']);
        standardErrorList.addEnd(['TaxSetup20006', 'Condition expression cannot be parsed.']);

        return standardErrorList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllErrorCodes</Name>
				<Source><![CDATA[
    private static TaxIntegrationErrorCodeTable getAllErrorCodes()
    {
        TaxIntegrationErrorCodeTable errorCodes;
        errorCodes.setTmp();

        List standardErrorList = TaxIntegrationTaxServiceSettingHelper::initStandardErrorCodeList();
        Set standardErrorSet = new Set(Types::String);

        ListEnumerator listEnumerator = standardErrorList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            container con = listEnumerator.current();
            errorCodes.ErrorCode = conPeek(con, 1);
            errorCodes.ErrorMessage = conPeek(con, 2);
            errorCodes.ErrorValidation = TaxIntegrationErrorValidationType::No;
            errorCodes.ErrorCodeType = TaxSolutionProviderType::Microsoft;
            errorCodes.insert();

            standardErrorSet.add(conPeek(con, 1));
        }

        List customizedErrorList = TaxIntegrationTaxServiceSettingHelper::getCustomizedErrorCodes();
        customizedErrorList.appendList(TaxIntegrationTaxServiceSettingHelper::getISVErrors());
        if (!customizedErrorList.empty())
        {
            if (customizedErrorList.elements() > CustomizedErrorListLimit)
            {
                throw error(strFmt("@TaxIntegration:TaxIntegrationCustomizedErrorCodeOverLimit", CustomizedErrorListLimit));
            }

            listEnumerator = customizedErrorList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                container con = listEnumerator.current();

                if (!standardErrorSet.in(conPeek(con, 1)))
                {
                    errorCodes.ErrorCode = conPeek(con, 1);
                    errorCodes.ErrorMessage = conPeek(con, 2);
                    errorCodes.ErrorValidation = TaxIntegrationErrorValidationType::No;
                    errorCodes.ErrorCodeType = TaxSolutionProviderType::ISV;
                    errorCodes.insert();
                }
            }
        }

        return errorCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getISVErrors</Name>
				<Source><![CDATA[
    private static List getISVErrors()
    {
        TaxIntegrationTaxServiceParameters taxIntegrationTaxServiceParameters = TaxIntegrationTaxServiceParameters::find();

        List errorList = new List(Types::Container);

        if (taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled
            && TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::GetISVErrors))
        {
            TaxServiceAPIContracts.TaxServiceISVGetErrorsInput input = new TaxServiceAPIContracts.TaxServiceISVGetErrorsInput();
            var taxEngineProxy = new TaxEngineServicePlusProxy();
            TaxServiceAPIContracts.TaxCalculationISVGetErrorsResultAggregator result = taxEngineProxy.getISVErrors(taxIntegrationTaxServiceParameters.ISVFeatureSetupId, input);
            
            if (result != null && result.Value != null)
            {
                TaxServiceAPIContracts.TaxServiceISVErrorsResult errorsResult = result.Value;
                System.Collections.IEnumerable errors = errorsResult.Errors;
                System.Collections.IEnumerator errorsEnumerator = errors.GetEnumerator();
                while (errorsEnumerator.MoveNext())
                {
                    TaxServiceAPIContracts.TaxServiceISVError error = errorsEnumerator.Current;
                    errorList.addEnd([error.Code, error.Message]);
                }
            }
        }
        return errorList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>