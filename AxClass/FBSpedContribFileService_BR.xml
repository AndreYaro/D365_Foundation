<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedContribFileService_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedContribFileService_BR</c> class is the service class for the sped contributions file generation operation.
/// </summary>
class FBSpedContribFileService_BR extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>export</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exports the sped contributions file.
    /// </summary>
    /// <param name="_contract">
    ///     An instance of the <c>FBSpedContribFileContract_BR</c> contract class.
    /// </param>
    public void export(FBSpedContribFileContract_BR _contract)
    {
        RunbaseProgress                 progress = this.getProgressController(_contract);
        FBSpedFileCreator_Contrib_BR    spedFileCreator;
        FBFile_BR                       fbFile;

        this.setFilename(_contract);

        fbFile = new FBFile_BR(_contract.parmFileName(), "@SYS4001597");

        spedFileCreator = FBSpedFileCreator_Contrib_BR::construct(_contract.parmBookingPeriod(), fbFile, _contract.parmSpedFileType(), _contract.parmContribVersion(), _contract.parmContribSituationType());
        spedFileCreator.parmFBReasonIdentification(_contract.parmReasonIdentification());
        spedFileCreator.parmRunBaseProgress(progress);
        spedFileCreator.parmFBSpedContribFileContract(_contract);
        
        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();

        try
        {
            spedFileCreator.exportFile();
        }
        finally
        {
            stopwatch.Stop();
            boolean result = spedFileCreator.getResult();
            int64 linesCount = spedFileCreator.getLinesCount();
            real timePerLine = linesCount ? stopwatch.ElapsedMilliseconds / linesCount : 0;

            GlobalizationInstrumentationHelper::featureRunWithPerformance(GlobalizationConstants::FeatureReferenceBR10011, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), 0, false, result, timePerLine);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilename</Name>
				<Source><![CDATA[
    private void setFilename(FBSpedContribFileContract_BR _contract)
    {
        str tempFile = System.IO.Path::Combine(System.IO.Path::GetTempPath(), strFmt('%1', newGuid()));

        _contract.parmFileName(tempFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the tax statement
    /// </summary>
    /// <param name="_contract">
    ///     An instance of <c>FBSpedContribFileContract_BR</c> representing the SysOperation contract for this service.
    /// </param>
    public void validate(FBSpedContribFileContract_BR _contract)
    {
        FBBookingPeriod_BR  fbBookingPeriod = _contract.parmBookingPeriod();
        boolean             isValid = true;

        if (!fbBookingPeriod.fiscalEstablishment().isRootFiscalEstablishment())
        {
            isValid = checkFailed("@SYS4001657") && isValid;
        }

        if (!FiscalOrganization_BR::findByFiscalEstablishmentId(fbBookingPeriod.FiscalEstablishmentId,
                                                                fbBookingPeriod.FiscalEstablishmentDataArea))
        {
            isValid = checkFailed(strFmt("@SYS4006714", fbBookingPeriod.FiscalEstablishmentId, fbBookingPeriod.FiscalEstablishmentDataArea))
                     && isValid;
        }

        if (!fbBookingPeriod.fiscalEstablishment().Accountant_BR)
        {
            isValid = checkFailed(strFmt("@SYS4082449", fbBookingPeriod.fiscalEstablishmentName()))
                      && isValid;
        }

        if (isValid)
        {
            info("@SYS315469");  // Validation succeeded!
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>