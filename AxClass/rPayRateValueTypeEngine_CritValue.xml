<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayRateValueTypeEngine_CritValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayRateValueTypeEngine_CritValue extends RpayRateValueTypeEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayValue</Name>
				<Source><![CDATA[
    Range displayValue(Common _common)
    {
        RPayRateCriterionType rPayRateCriterionType;
        ;
        rPayRateCriterionType = str2int(super(_common));
        return enum2str(rPayRateCriterionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedTypeId</Name>
				<Source><![CDATA[
    protected ExtendedTypeId extendedTypeId()
    {
        return extendedTypeNum(RpayRateCriterionType_Combo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCritValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the value from amount calculation based on threshold rate values table.
    /// </summary>
    /// <param name="_payCriterion">
    /// The criteria.
    /// </param>
    /// <param name="_rateCritTrans">
    /// The threshold rate values table to use if specified.
    /// </param>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount getCritValue(RPayRateCriterion _payCriterion, RPayRateCritTrans _rateCritTrans)
    {
        RecId             critRecId;
        RPayRateCritTrans payRateCritTrans;
        RPayAmount        currentAmount,totalValue;
        RPayRateCriterion prevCriterion = 0;
        ;
        critRecId     = _rateCritTrans.RateTransRecId;
        currentAmount = _payCriterion;

        while select Value, Criterion from payRateCritTrans
            order by Criterion
            where payRateCritTrans.RateTransRecId == critRecId
        {
            if (_payCriterion <= payRateCritTrans.Criterion)
            {
                totalValue += currentAmount * payRateCritTrans.Value / 100;
                break;
            }
            else
            {
                totalValue += (payRateCritTrans.Criterion - prevCriterion) * payRateCritTrans.Value / 100;
                currentAmount = _payCriterion - payRateCritTrans.Criterion;
                prevCriterion = payRateCritTrans.Criterion;
            }
        }

        return totalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayRateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rate value.
    /// </summary>
    /// <param name="_value">
    /// The value range to use.
    /// </param>
    /// <param name="_callContext">
    /// The context.
    /// </param>
    /// <returns>
    /// The rate value.
    /// </returns>
    public RPayRateValue getPayRateValue(Range _value, RPayRateCallContext _callContext)
    {
        RPayRateValue rateValue;

        if (rPayRateTrans)
        {
            if (rateTable.CritValueType)
            {
                rateValue = this.getCritValue(_callContext.parmCriterion(), RPayRateCritTrans::find(rPayRateTrans, _callContext.parmCriterion()));
            }
            else
            {
                rateValue = RPayRateCritTrans::find(rPayRateTrans, _callContext.parmCriterion()).Value;
            }
        }
        else
        {
            rateValue = 0;
        }

        return rateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        ;
        super();
        critValueTypeControl.allowEdit(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>