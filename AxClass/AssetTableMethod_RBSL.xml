<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_RBSL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetTableMethod_RBSL extends AssetTableMethod
{
    AssetDepreciationTime   periods;
    private AssetDepreciationTime periodInMonths;
    AssetAmount             periodAmount;
    AssetAmount             periodAmountSL;
    AssetAmount             periodAmountRB;
    int                     numberOfMTH;
    int                     lifeTimeInMonths;
    AssetAmount             totalDepreciationAmount;
    AssetAmount             startDepreciationAmount;
    AssetAmount             depreciationAmountThisYear;
    AssetAmount             depreciationAmountWhenAcquisitionChanged;

    AssetRevaluationAmount  revaluationAmount;

    boolean                 theEnd;

    AssetTransDate          previousDepreciationDate;
    boolean                 startOfDepreciationYear;
    // Use to short-circuit expensive CatchUp Depreciation logic if not needed
    private boolean isTrueUpDepreciationRequired;

    #COSNumbers
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation amount for the RBSL depreciation method.
    /// </summary>
    /// <returns>
    ///    The amount calculated for the RBSL method.
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount             extraordinaryDepAmount;
        AssetTransDate          startOfPeriod;
        int                     numberMonthsToUpdate;
        int                     indexOfPeriod;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        indexOfPeriod = deprInterval.indexofPeriod(startOfPeriod);

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();

            if (isReportingCurrencyDepreciation)
            {
                extraordinaryDepAmount  = - AssetTrans::amountReportingCurrencyPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            }
            else
            {
                extraordinaryDepAmount  = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            }

            boolean isAcquisitionChanged;
            if (assetBook.AcquisitionDate < startOfPeriod
                || assetBook.AcquisitionDate > periodEnd)
            {
                isAcquisitionChanged = !this.parmIsCatchUpDepreciation() && AssetTrans::amountMSTPerDate(assetBook.AssetId, assetBook.BookId, startOfPeriod, periodEnd) != 0;
            }

            if (startOfDepreciationYear || indexOfPeriod == 1 || isAcquisitionChanged)
            {
                numberOfMTH = deprInterval.numOfPeriodsPerYear() - indexOfPeriod + 1;
                depreciationAmountWhenAcquisitionChanged += (isAcquisitionChanged || depreciationAmountWhenAcquisitionChanged) ? depreciationAmountThisYear : 0;
                depreciationAmountThisYear = 0;

                if (startOfDepreciationYear || isAcquisitionChanged)
                {
                    if (isAcquisitionChanged
                        && !startOfDepreciationYear
                        && depreciationThisRun > numberOfMTH * periodAmount)
                    {
                        prevDepAmount -= numberOfMTH * periodAmount;
                    }

                    this.setAmountToDepreciate();
                    startDepreciationAmount = amountToDepreciate;
                    totalDepreciationAmount = prevDepAmount;

                    // If depreciation started in a month after January,
                    // TotalDepreciation amount needs to be updated to reflect the months depreciated for the given year.
                    // prevDepAmount stores depreciation amount for the pervious year only.
                    if (assetBook.LifeTimeRest < assetBook.LifeTime)
                    {
                        numberMonthsToUpdate = indexOfPeriod - 1;
                    }
                }

                startOfDepreciationYear = false;

                if (calculatePrevPeriods == false)
                {
                    prevPeriods = 0;
                }

                // If this is a new year, recalculate the depereciation amount that will be used to determine
                // amount to depreciate.
                if (previousDepreciationDate &&
                    deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
                {
                    depreciationThisRun = depreciationAmountWhenAcquisitionChanged ? depreciationAmountWhenAcquisitionChanged : depreciationThisRun;
                    prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                    depreciationAmountWhenAcquisitionChanged = 0;
                }
                else if (isAcquisitionChanged)
                {
                    prevDepAmount = this.prvDepreciationAmount(periodstart) + prevDepAmountExternal;

                    if (this.isAcquisitionChangedInPrevPeriod(periodstart-1))
                    {
                        periods++;
                    }
                }

                // Calculate depreciation amount using RB and SL methods.
                periodAmountRB = this.calcRB(startOfPeriod, extraordinaryDepAmount, numberOfMTH);
                periodAmountSL = this.calcSL(startOfPeriod, extraordinaryDepAmount, numberOfMTH);

                // Update the last depreciation date.
                previousDepreciationDate = depreciationDate;

                // Determine which method calculated higher depreciation amount.
                if (periodAmountRB > periodAmountSL)
                {
                    periodAmount = periodAmountRB;
                }
                else
                {
                    periodAmount = periodAmountSL;
                }

                depreciationThisRun  += periodAmount;
                prevDepAmount += periodAmount;

                // Do not divide the yearly amount for depreciation, if the amount
                // represents a single poriod.  There could be a case that the last period
                // may represent a partial amount of the period, for an example if the depreciation
                // did not start of the first day of the period.
                if (periods >= 0)
                {
                    periodAmount = periodAmount / numberOfMTH;
                }

                periodAmount = assetBook.roundDepreciationAmount(
                    periodAmount,
                    isReportingCurrencyDepreciation);
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);
        }
        else
        {
            periodAmount = 0;
        }

        if (indexOfPeriod == deprInterval.numOfPeriodsPerYear())
        {
            if (periodAmountRB > periodAmountSL)
            {
                periodAmount = periodAmountRB - depreciationAmountThisYear;
            }
            else
            {
                periodAmount = periodAmountSL - depreciationAmountThisYear;
            }
        }

        periodInMonths--;

        if (assetDepreciationProfile.AssetEndDependOnServiceLife == NoYes::Yes && periodInMonths < 0)
        {
            periodAmount -= totalDepreciationAmount + prevDepAmountExternal + extraordinaryDepAmount - startDepreciationAmount;
            theEnd = true;
        }

        // In case depreciation started in a month after January, update the totalDepreciationAmount
        // to include the depreciation for the given year.
        if (numberMonthsToUpdate > 0)
        {
            totalDepreciationAmount += isReportingCurrencyDepreciation ? this.currentYearDepreciationAmountInReportingCurrency(startOfPeriod - 1) : this.currentYearDepreciationAmount(startOfPeriod - 1);
        }

        depreciationAmountThisYear += periodAmount;

        totalDepreciationAmount += periodAmount;

        if (roundUp(startDepreciationAmount,1) <= roundUp(totalDepreciationAmount, 1))
        {
            theEnd = true;

            // Correct the period amount in case there is a small difference between the amount to depreciation
            // and the total depreciation amount.
            if ((startDepreciationAmount - totalDepreciationAmount) > 0
                || (startDepreciationAmount - totalDepreciationAmount) < 0)
            {
                periodAmount += (startDepreciationAmount - totalDepreciationAmount);
            }
        }

        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcquisitionChangedInPrevPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks that Acquisition was already changed in the past.
    /// </summary>
    /// <param name = "_periodEnd">End of period</param>
    /// <returns>
    /// True, if Acquisition was already changed in the past; otherwise false.
    /// </returns>
    private boolean isAcquisitionChangedInPrevPeriod(TransDate _periodEnd)
    {
        return AssetTrans::amountMSTPerDate(assetBook.AssetId, assetBook.BookId, dateNull(), _periodEnd) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRB</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation amount by using the reducing balance method.
    /// </summary>
    /// <param name="_startOfPeriod">
    ///    The start of the depreciation period.
    /// </param>
    /// <param name="_extraordinaryDepAmount">
    ///    The extraordinary depreciation amount for this period.
    /// </param>
    /// <param name="_numberOfMonths">
    ///    A number that indicates in which month the current period is.
    /// </param>
    /// <returns>
    ///    The depreciation amount calculated by using the reducing balance method.
    /// </returns>
    private AssetAmount calcRB(AssetTransDate _startOfPeriod,AssetAmount _extraordinaryDepAmount,int _numberOfMonths)
    {
        AssetAmount             assetAmount;
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;
        AssetAmountReportingCurrency minDepreciation;

        extraordinaryDepAmount = _extraordinaryDepAmount;
        startOfPeriod = _startOfPeriod;

        if (previousDepreciationDate &&
            deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
        {
            prevPeriods = 0;
        }

        restPeriod = 1;

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
           // lifetimes other than years  are taken into account
            assetAmount = ((amountToDepreciate - prevDepAmount-extraordinaryDepAmount) *
                           ((100 / (lifeTimeInMonths/deprInterval.numOfPeriodsPerYear()) *
                           assetBook.rbslFactor)/ 100) *
                           (_numberOfMonths / deprInterval.numOfPeriodsPerYear()));

            calculatePrevPeriods = false;
        }

        assetAmount = assetBook.roundDepreciationAmount(
            assetAmount * this.revaluationFactor(),
            isReportingCurrencyDepreciation);

        minDepreciation = this.getMinimumDepreciation();
        // Correction for minimal depreciation
        if (assetAmount < AssetParameters::find().DepreciationMin)
        {
            assetAmount = min(minDepreciation, amountToDepreciate-prevDepAmount-extraordinaryDepAmount);
        }

        if (! prevPeriods)
        {
            assetAmount = assetBook.roundDepreciationAmount(
                assetAmount,
                isReportingCurrencyDepreciation);
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation amount by using the straight line method.
    /// </summary>
    /// <param name="_startOfPeriod">
    ///    The start of the depreciation period.
    /// </param>
    /// <param name="_extraordinaryDepAmount">
    ///    The extraordinary depreciation amount for this period.
    /// </param>
    /// <param name="_numberOfMonths">
    ///    A number that indicates in which month the current period is.
    /// </param>
    /// <returns>
    ///    The depreciation amount calculated by using straight line method.
    /// </returns>
    private AssetAmount calcSL(AssetTransDate _startOfPeriod, AssetAmount _extraordinaryDepAmount, int _numberOfMonths)
    {
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;

        startOfPeriod = _startOfPeriod;
        extraordinaryDepAmount  = _extraordinaryDepAmount;

        if (previousDepreciationDate &&
            deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
        {
            periods = round(periods + prevPeriods, 0);
            prevPeriods = 0;
        }
            // The periodAmount must be recalculated each time because there could
            // have been posted e.g. an acquisition adjustment before earlier depreciations
            // have been posted.
        if (periods == 1)
        {
            periodAmount = (amountToDepreciate-prevDepAmount-prevDepAmountExternal-extraordinaryDepAmount) /
                                    round(periods + prevPeriods, 0);
            periodAmount = assetBook.roundDepreciationAmount(
                periodAmount * (_numberOfMonths / deprInterval.numOfPeriodsPerYear()),
                isReportingCurrencyDepreciation);
        }
        else if (periods > 0)
        {
            // If the number of the remaining period is representing a period smaller then 1, calculate the remaining amount
            // of the depreciation and end the depreciation.
            if (periods < 1)
            {
                periodAmount = amountToDepreciate-prevDepAmount-prevDepAmountExternal-extraordinaryDepAmount;
                theEnd = true;
            }
            else
            {
                periodAmount = assetBook.roundDepreciationAmount(
                    (amountToDepreciate-prevDepAmount-prevDepAmountExternal-extraordinaryDepAmount) / round(periods + prevPeriods, 0),
                    isReportingCurrencyDepreciation,
                    RoundOffType::RoundDown);

                periodAmount = periodAmount * (_numberOfMonths / deprInterval.numOfPeriodsPerYear());
            }
        }
        else
        {
            periodAmount = 0;
            if (! dualDepreciation)
            {
                theEnd = true;
            }
        }

        restPeriod = 1;

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            periodAmount = assetBook.roundDepreciationAmount(
                periodAmount * (restPeriod + prevPeriods),
                isReportingCurrencyDepreciation);

            calculatePrevPeriods = false;
        }

        periods -= restPeriod;

        revaluationAmount = assetBook.roundDepreciationAmount(
                periodAmount * this.revaluationFactor(),
                isReportingCurrencyDepreciation) - periodAmount;

        periodAmount += revaluationAmount;

        if (amountToDepreciate < prevDepAmount + prevDepAmountExternal + extraordinaryDepAmount + periodAmount)
        {
            periodAmount = assetBook.roundDepreciationAmount(
                amountToDepreciate - prevDepAmount - prevDepAmountExternal - extraordinaryDepAmount,
                isReportingCurrencyDepreciation);
        }

        if (periodAmount && !prevPeriods)
        {
            periodAmount = assetBook.roundDepreciationAmount(
                periodAmount,
                isReportingCurrencyDepreciation); 
        }

        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentYearDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation amount for the given asset and value model from the starting of the
    ///    year until the given date.
    /// </summary>
    /// <param name="_endTransDate">
    ///    The end date for which depreciation transactions will be summed.
    /// </param>
    /// <returns>
    ///    The depreciation amount for the asset's value model and time provided.
    /// </returns>
    AmountMST currentYearDepreciationAmount(TransDate _endTransDate)
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();       
        TransDate startTransDate = deprInterval.findFirstDayOfYear(_endTransDate);

        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(assetBook.AssetId, assetBook.BookId);
        select sum(AmountMST) from assetTransTmp
            where assetTransTmp.AssetId == assetBook.AssetId &&
                assetTransTmp.BookId == assetBook.BookId &&
                assetTransTmp.TransDate >= startTransDate &&
                assetTransTmp.TransDate <= _endTransDate &&
                (assetTransTmp.TransType == AssetTransType::DepreciationAdj ||
                 assetTransTmp.TransType == AssetTransType::Depreciation);

        return -assetTransTmp.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentYearDepreciationAmountInReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation amount in reporting currency for the given asset and value model from the starting of the
    ///    year until the given date.
    /// </summary>
    /// <param name="_endTransDate">
    ///    The end date for which depreciation transactions will be summed.
    /// </param>
    /// <returns>
    ///    The depreciation amount for the asset's value model and time provided.
    /// </returns>
    public AmountMSTSecondary currentYearDepreciationAmountInReportingCurrency(TransDate _endTransDate)
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();    
        TransDate startTransDate = deprInterval.findFirstDayOfYear(_endTransDate);

        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(assetBook.AssetId, assetBook.BookId);
        select sum(ReportingCurrencyAmount) from assetTransTmp
            where assetTransTmp.AssetId == assetBook.AssetId &&
                assetTransTmp.BookId == assetBook.BookId &&
                assetTransTmp.TransDate >= startTransDate &&
                assetTransTmp.TransDate <= _endTransDate &&
                (assetTransTmp.TransType == AssetTransType::DepreciationAdj ||
                 assetTransTmp.TransType == AssetTransType::Depreciation);

        return -assetTransTmp.ReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depPeriod</Name>
				<Source><![CDATA[
    public real depPeriod()
    {
        if (depreciationDate == endmth(assetBook.DepreciationStartDate))
        {
            return restPeriod + prevPeriods + deprInterval.indexofPeriod(depreciationDate) - 1;
        }
        else
        {
            return restPeriod + prevPeriods;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableeMethod</c> class.
    /// </summary>
    public void init()
    {
        startOfDepreciationYear = true;

        super();

        AssetBook assetBookBase = this.getBaseBook();
        periodInMonths = assetBook.LifeTime == assetBookBase.LifeTime ? assetBookBase.LifeTimeRest : assetBook.LifeTimeRest;

        // Sl
        // Roundup used to force years
        periods = roundUp((assetBook.LifeTimeRest > periodInMonths ? periodInMonths : assetBook.LifeTimeRest) / deprInterval.numOfPeriodsPerYear(), 1);

        lifeTimeInMonths = assetBook.LifeTime;

        // Rb
        prevDepAmount = this.prvDepreciationAmount(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);

        isTrueUpDepreciationRequired = assetBookBase.isTrueUpDepreciationRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseBook</Name>
				<Source><![CDATA[
    private AssetBook getBaseBook()
    {
        AssetBook assetBookBase;
        select firstonly assetBookBase
            where assetBookBase.AssetId == assetBook.AssetId
                && assetBookBase.AssetDerogatoryModel_FR == assetBook.BookId;

        if (!assetBookBase)
        {
            assetBookBase = assetBook;
        }

        return assetBookBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (theEnd)
        {
            return false;
        }

        if (parmRunDate <= baseDate)
        {
            return false;
        }

        this.setDepDate();

        if (depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        //calculate depreciation for adjument transaction forAcquisitionAdj, Acquisition, CapitalReserveTransfer.
        if (isTrueUpDepreciationRequired
            && this.parmIsCatchUpDepreciation()
            && periodEnd > assetBook.LastDepreciationDate)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    private AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate)
    {
        AssetAmount prvDepreciationAmount;

        if (!this.parmIsCatchUpDepreciation())
        {
            AssetTransDate depYearStart = deprInterval.openingPeriodDate(_assetTransDate);

            if (isReportingCurrencyDepreciation)
            {
                prvDepreciationAmount = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                        dateNull(),
                        depYearStart - 1));
            }
            else
            {
                prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTransTypes(
                    assetBook.AssetId,
                    assetBook.BookId,
                    [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                    dateNull(),
                    depYearStart - 1));
            }
        }

        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
    public AssetRevaluationAmount revaluationAmount()
    {
        return revaluationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountToDepreciate</Name>
				<Source><![CDATA[
    protected void setAmountToDepreciate(AssetTransDate _assetTransDate = periodEnd)
    {
        if ((this.parmIsCatchUpDepreciation()
            || !assetBook.LastDepreciationDate
            || deprInterval.hasYearChanged(assetBook.LastDepreciationDate, periodEnd))
            && this.getBaseBook().IsTrueUpDepreciation
            && !this.parmIsOriginalDepreciation()
            && AssetStatusType::construct(assetBook.Status).isAcquired())
        {
            if (isReportingCurrencyDepreciation)
            {
                assetAcquisitionValue =  this.amountToDepriciateAdjustedReportingCurrency(_assetTransDate);
                amountToDepreciate      = (assetAcquisitionValue - assetBook.ScrapValueReportingCurrency);
            }
            else
            {
                assetAcquisitionValue =  this.amountToDepriciateAdjusted(_assetTransDate);
                amountToDepreciate      = (assetAcquisitionValue - assetBook.ScrapValue);
            }
        }
        else
        {
            if (isReportingCurrencyDepreciation)
            {
                assetAcquisitionValue   = AssetTrans::amountToDepriciateInReportingCurrency(assetBook.AssetId, _assetTransDate, assetBook.BookId);
                amountToDepreciate      = (assetAcquisitionValue - assetBook.ScrapValueReportingCurrency);
            }
            else
            {
                assetAcquisitionValue   = AssetTrans::amountToDepriciate(assetBook.AssetId, _assetTransDate, assetBook.BookId);
                amountToDepreciate      = (assetAcquisitionValue - assetBook.ScrapValue);
            }
        }

        if (!assetAcquisitionValue &&
            (!AssetStatusType::construct(assetBook.Status).isAcquired() ||
                assetBook.AcquisitionDate > _assetTransDate))
        {
            if (isReportingCurrencyDepreciation)
            {
                assetAcquisitionValue   = assetBook.AcquisitionPriceReportingCurrency;
                amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValueReportingCurrency;
            }
            else
            {
                assetAcquisitionValue   = assetBook.AcquisitionPrice;
                amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
            }
        }

        if (assetBudgetModelId)
        {
            if (!assetAcquisitionValue)
            {
                assetAcquisitionValue   = AssetSumCalc_Budget::newAssetYear(assetBook.AssetId, assetBook.BookId, assetBudgetModelId, assetAcquisitionValueDate,AssetYear::All).acquisitionValue();
                
                if (isReportingCurrencyDepreciation)
                {
                    amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValueReportingCurrency;
                }
                else
                {
                    amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>