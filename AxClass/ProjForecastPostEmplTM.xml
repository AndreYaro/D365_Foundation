<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostEmplTM</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostEmplTM extends ProjForecastPostEmpl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCost</Name>
				<Source><![CDATA[
    protected boolean checkCost()
    {
        boolean ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Invoice:
                    if (! projTrans.forecastInvoiceDate())
                    {
                        ret = checkFailed("@SYS33044");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        boolean ret = true;

        ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                    if (this.ledgerStatusCost() == ProjLedgerStatus::Never ||
                        this.ledgerStatusCost() == ProjLedgerStatus::None)
                    {
                        ret = false;
                    }
                    break;

                case ProjForecastUpdateType::Invoice:
                    if (this.ledgerStatusCost() != ProjLedgerStatus::BalanceSheet)
                    {
                        ret = false;
                    }
                    break;

                case ProjForecastUpdateType::Estimate:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Elimination:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterNoneLedger</Name>
				<Source><![CDATA[
    boolean checkEnterNoneLedger()
    {
        boolean ret = true;

        if (ret)
        {
            if (this.ledgerStatusCost() != ProjLedgerStatus::None)
            {
                ret     = false;
            }
            else
            {
                switch (this.forecastUpdateType())
                {
                    case ProjForecastUpdateType::Journals:
                       ret = true;
                       break;

                    case ProjForecastUpdateType::Invoice:
                        if (! this.checkEnterTurnover())
                        {
                            ret = false;
                        }
                        break;

                    case ProjForecastUpdateType::Estimate:
                        ret = false;
                        break;

                    case ProjForecastUpdateType::Elimination:
                        ret = false;
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = true;

        ret =  projTrans.transTurnover() &&
               projTrans.canBeAccrued()  &&
               this.checkEnterWIP();

        if (ret)
        {
            boolean postWIPEmpl = isMultipleContractLineFeatureEnabled ? projRevProfile.PostWIPEmpl : projGroup.EmplTransTurnover;
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                case ProjForecastUpdateType::Invoice:
                    ret = postWIPEmpl;
                    break;

                case ProjForecastUpdateType::Estimate:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Elimination:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        boolean ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Invoice:
                    ret = true;
                    break;

                case ProjForecastUpdateType::Estimate:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Elimination:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoneLedger</Name>
				<Source><![CDATA[
    boolean checkNoneLedger()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice && this.checkEnterTurnover())
            {
                if (! ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                {
                    if (! projTrans.forecastInvoiceDate())
                    {
                        ret = checkFailed("@SYS33044");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCost</Name>
				<Source><![CDATA[
    protected void postCost()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;

        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals)
        {
            super();
        }
        boolean postWIPEmpl = isMultipleContractLineFeatureEnabled ? projRevProfile.PostWIPEmpl : projGroup.EmplTransTurnover;

        if (ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPTimeMaterial &&
            this.ledgerStatusCost() == ProjLedgerStatus::BalanceSheet &&
            postWIPEmpl == false &&
            projTrans.canBeCapitalize())
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:

                    this.postingType(LedgerPostingType::ProjCost);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(projTrans.transDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    if (projTrans.indirectCostAmount())
                    {
                        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                        while (fundingAllocationEnumerator.moveNext())
                        {
                            this.qty(0.0);
                            this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }

                    this.postingType(LedgerPostingType::ProjWIPCostvalue);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(projTrans.transDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    if (projTrans.indirectCostAmount())
                    {
                        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                        while (fundingAllocationEnumerator.moveNext())
                        {
                            this.qty(0.0);
                            this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }
                    break;

                case ProjForecastUpdateType::Invoice:
                    this.postingType(LedgerPostingType::ProjWIPCostvalue);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate ? projTrans.transDate() : projTrans.forecastInvoiceDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    if (projTrans.indirectCostAmount())
                    {
                        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                        while (fundingAllocationEnumerator.moveNext())
                        {
                            this.qty(0.0);
                            this.accountNum(projTrans.statusAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }

                    this.postingType(LedgerPostingType::ProjCost);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate ? projTrans.transDate() : projTrans.forecastInvoiceDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    if (projTrans.indirectCostAmount())
                    {
                        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                        while (fundingAllocationEnumerator.moveNext())
                        {
                            this.qty(0.0);
                            this.accountNum(projTrans.costAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNoneLedger</Name>
				<Source><![CDATA[
    void postNoneLedger()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;

        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals)
        {
            this.postingType(LedgerPostingType::ProjNoLedger);
            this.accountNum(0);
            this.costSales(ProjCostSales::Cost);
            this.ledgerTransDate(projTrans.transDate());

            if ( projTrans.transCostMST() != 0)
            {
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCostMST(), projTrans.currencyIdCost()).getEnumerator();
                splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }

                if (projTrans.indirectCostAmount())
                {
                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(0.0);
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                }
            }
            else
            {
                this.createForecastPosting(0);
            }
        }
        else if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice && this.checkEnterTurnover())
        {
            this.postingType(LedgerPostingType::ProjNoLedger);
            this.accountNum(0);
            this.costSales(ProjCostSales::Cost);
            if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
            {
                this.ledgerTransDate(projTrans.transDate());
            }
            else
            {
                this.ledgerTransDate(projTrans.forecastInvoiceDate());
            }

            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.transCostMST(), projTrans.currencyIdCost()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
            while (fundingAllocationEnumerator.moveNext())
            {
                this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                this.amountMST(fundingAllocationEnumerator.currentValue());
                this.createForecastPosting(fundingAllocationEnumerator.currentKey());
            }

            if (projTrans.indirectCostAmount())
            {
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }
            }

            this.postingType(LedgerPostingType::ProjPayrollAllocation);
            this.ledgerTransDate(ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate ? projTrans.transDate() : projTrans.forecastInvoiceDate());
            if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
            {
                this.ledgerTransDate(projTrans.transDate());
            }
            else
            {
                this.ledgerTransDate(projTrans.forecastInvoiceDate());
            }

            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.transCostMST(),projTrans.currencyIdCost()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
            while (fundingAllocationEnumerator.moveNext())
            {
                this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                this.amountMST(fundingAllocationEnumerator.currentValue());
                this.accountNum(this.debitAccountCost(fundingAllocationEnumerator.currentKey()));
                this.createForecastPosting(fundingAllocationEnumerator.currentKey());
            }

            if (projTrans.indirectCostAmount())
            {
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.indirectCostAmount(),projTrans.currencyIdCost()).getEnumerator();
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.accountNum(this.debitAccountCost(fundingAllocationEnumerator.currentKey()));
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }
            }

            this.postingType(LedgerPostingType::ProjCost);
            this.costSales(ProjCostSales::Cost);
            if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
            {
                this.ledgerTransDate(projTrans.transDate());
            }
            else
            {
                this.ledgerTransDate(projTrans.forecastInvoiceDate());
            }

            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCostMST(), projTrans.currencyIdCost()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
            while (fundingAllocationEnumerator.moveNext())
            {
                this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                this.amountMST(fundingAllocationEnumerator.currentValue());
                this.accountNum(this.creditAccountCost(fundingAllocationEnumerator.currentKey()));
                this.createForecastPosting(fundingAllocationEnumerator.currentKey());
            }

            if (projTrans.indirectCostAmount())
            {
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.accountNum(this.creditAccountCost(fundingAllocationEnumerator.currentKey()));
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>