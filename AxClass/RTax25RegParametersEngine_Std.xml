<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegParametersEngine_Std</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTax25RegParametersEngine_Std extends RTax25RegParametersEngine
{
    // %1 is a register Id
    #localMacro.ChannelTypeRange
        strFmt("((ChannelType != RTax25StdChannelType::Register)  || " +
                "((ChannelType == RTax25StdChannelType::Register) && " +
                 "(ChannelId == \"\%1\")))", %1)
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    public void lookup(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        str                     value;
        Query                   query = new Query();
        ;
        registerParameters = registerParametersDs.cursor();

        switch (registerParameters.ParameterCode)
        {
            case 1: // Sequences
                sysTableLookup = SysTableLookup::newParameters(tablenum(RTax25StdSeq), _lookupCtrl);

                value = #ChannelTypeRange(regType.registerId());

                query.addDataSource(tablenum(RTax25StdSeq)).addRange(fieldnum(RTax25StdSeq, ChannelType)).value(value);

                sysTableLookup.addLookupfield(fieldnum(RTax25StdSeq, SeqNum));
                sysTableLookup.addLookupfield(fieldnum(RTax25StdSeq, Description));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;

            default :
                throw error("@SYS3461");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEnabled</Name>
				<Source><![CDATA[
    public boolean lookupEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParm</Name>
				<Source><![CDATA[
    public boolean specificParm()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParmCall</Name>
				<Source><![CDATA[
    public void specificParmCall()
    {
        Args   args = new Args();
        ;
        args.caller(this);
        args.record(RTax25RegisterTable::findRegisterId(regType.registerId()));

        new MenuFunction(menuitemdisplaystr(RTax25StdSeq), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        registerParameters = registerParametersDs.cursor();

        if (! registerParameters.Parameter)
        {
            return true;
        }

        switch (registerParameters.ParameterCode)
        {
            case 1:
                if (! RTax25RegParametersEngine_Std::parameters2SeqList(registerParameters.Parameter))
                {
                    return false;
                }

                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters2SeqList</Name>
				<Source><![CDATA[
    #define.Numbers(" 1234567890")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RecordSortedList parameters2SeqList(Range _parameters)
    {
        RecordSortedList    recordList  = new RecordSortedList(tablenum(RTax25StdSeq));
        container           tmp         = RTax25RegParametersEngine::parameters2Con(_parameters);
        int                 i, seqNum;
        str                 seqNumStr;
        boolean             valid = true;

        recordList.sortOrder(fieldnum(RTax25StdSeq, SeqNum));

        for (i = 1; i <= conlen(tmp); i++)
        {
            seqNumStr = conpeek(tmp, i);

            if (strrem(seqNumStr, #Numbers))
            {
                valid = checkFailed("@SYS75090");
            }
            else
            {
                seqNum = str2int(seqNumStr);
                valid  = RTax25StdSeq::checkExist(seqNum) && valid;
            }

            if (valid)
            {
                recordList.ins(RTax25StdSeq::find(seqNum), true);
            }
        }

        if (! valid)
        {
            return null;
        }

        return recordList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>