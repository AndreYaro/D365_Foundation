<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEliminationTmpJournalLineTruncateSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysSetupTable(tableStr(LedgerEliminationTmpJournalLine))]
public final class LedgerEliminationTmpJournalLineTruncateSetup extends SysSetupAsync implements SysSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData()
    {
        if (LedgerEliminationTmpJournalLineTruncateFlight::instance().isEnabled())
        {
            LedgerEliminationTmpJournalLineTruncateSetup::truncateTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateTable</Name>
				<Source><![CDATA[
    private static int64 truncateTable()
    {
        ClassName className = classStr(LedgerEliminationTmpJournalLineTruncateSetup);
        System.Exception ex;

        int64 recordCount;
        str sqlStatement = strFmt(@"TRUNCATE TABLE DBO.%1", tableStr(LedgerEliminationTmpJournalLine));

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(className, className);

        using (SysInstrumentationActivityContext activityContext = SysInstrumentationLoggerFactory::CreateLogger(className)
            .activityContextWithCustomProperties(activity))
        {
            try
            {
                recordCount = LedgerEliminationTmpJournalLineTruncateSetup::executeNonQuery(sqlStatement, SqlParams::create());
            }
            catch (ex)
            {
                if (LedgerExceptionHandler::shouldExceptionBeRetried(ex))
                {
                    retry;
                }
                else
                {
                    SysInstrumentationLoggerFactory::CreateLogger(className).logError(ex.GetType().Name);

                    throw ex;
                }
            }
        }
        
        return recordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeNonQuery</Name>
				<Source><![CDATA[
    private static int64 executeNonQuery(str _sqlStatement, Map _sqlParameters = SqlParams::create())
    {
        int64 impactedRows;
        Statement statement;
        Connection connection = new Connection();

        try
        {
            statement = connection.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();
            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, _sqlParameters);
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        finally
        {
            if (statement != null)
            {
                statement.close();
            }

            connection.finalize();

            CodeAccessPermission::revertAssert();
        }
        
        return impactedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>