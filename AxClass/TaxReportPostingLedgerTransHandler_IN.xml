<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPostingLedgerTransHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and updates the tax payment doc and ledger transaction.
/// </summary>
public class TaxReportPostingLedgerTransHandler_IN extends TaxReportPostingHandler_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public TaxSalesTaxPaymentDoc_IN process(TaxSalesTaxPaymentDoc_IN _taxPaymentDoc, TaxSalesTaxPaymentHistoryDetails_IN _historyDetail = null)
    {
        LedgerPostingController     ledgerPostingController;
        LedgerVoucherTransObject    ledgerVoucherTransObject;

        super(_taxPaymentDoc, _historyDetail);

        //Add ledgerVoucherTransObject for System account
        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(this.parmTaxPaymentDoc().parmLedgerVoucher());
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerPostingController.getReference(),
                                        LedgerPostingType::Tax,
                                        this.parmTaxPostingLedgerDimension(),
                                        CompanyInfoHelper::standardCurrency(),
                                        this.parmBalance(),
                                        CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate()));
        ledgerVoucherTransObject.parmSkipDimensionValidation(true);
        ledgerPostingController.addTrans(ledgerVoucherTransObject);

        return this.parmTaxPaymentDoc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>