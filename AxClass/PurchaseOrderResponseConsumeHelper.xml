<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseConsumeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchaseOrderResponseConsumeHelper</c> class is the helper class to run <c>PurchaseOrderResponseConsume</c>.
/// </summary>
public static class PurchaseOrderResponseConsumeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args == null || _args.record() == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        PurchaseOrderResponseConsume purchaseOrderResponseConsume;
        PurchaseOrderResponseHeader purchaseOrderResponseHeader;
        PurchTable purchTable;

        switch (_args.record().TableId)
        {
            case tableNum(PurchaseOrderResponseHeaderAllVersions):
                purchaseOrderResponseHeader = PurchaseOrderResponseHeader::find(_args.record().RecId);
                purchTable = PurchTable::find(purchaseOrderResponseHeader.PurchId, true);
                purchaseOrderResponseConsume = PurchaseOrderResponseConsume::construct(purchTable);
                break;

            case tableNum(PurchaseOrderResponseLineAllVersions):
                PurchaseOrderResponseLineAllVersions purchaseOrderResponseLine = _args.record();
                purchaseOrderResponseHeader = PurchaseOrderResponseHeader::find(purchaseOrderResponseLine.PurchaseOrderResponseHeader);
                purchTable = PurchTable::find(PurchaseOrderResponseHeader::find(purchaseOrderResponseLine.PurchaseOrderResponseHeader).PurchId, true);
                purchaseOrderResponseConsume = PurchaseOrderResponseConsumeLine::construct(purchTable, purchaseOrderResponseLine.dataSource());
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        boolean skipPurchTableUpdate = !purchaseOrderResponseConsume.getIsPurchTableUpdateRequired();
        boolean skipPurchLineUpdate = !purchaseOrderResponseConsume.getIsPurchLineUpdateRequired();

        if (Box::okCancel(PurchaseOrderResponseConsumeHelper::consumePurhchaseOrderResponseUserMessage(purchTable, purchaseOrderResponseHeader, skipPurchTableUpdate, skipPurchLineUpdate), DialogButton::Cancel) == DialogButton::Ok)
        {
            purchaseOrderResponseConsume.consumePurchaseOrderResponseToPurchaseOrder();
            _args.record().dataSource().research(true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurhchaseOrderResponseUserMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the message that the user will see when clicking the consumption button
    /// </summary>
    /// <param name = "_purchTable"><c>PurchTable</c> record.</param>
    /// <param name = "_purchaseOrderResponseHeader"><c>PurchaseOrderResponseHeader</c> record.</param>
    /// <param name = "_skipPurchTableUpdate">A boolean that indicates whether to skip <c>PurchTable</c> update or not.</param>
    /// <param name = "_skipPurchLineUpdate">A boolean that indicates whether to skip <c>PurchLine</c> update or not.</param>
    /// <returns>A string containing the message to be shown to the user</returns>
    public static str consumePurhchaseOrderResponseUserMessage(PurchTable _purchTable, 
                                                                PurchaseOrderResponseHeader _purchaseOrderResponseHeader, 
                                                                boolean _skipPurchTableUpdate, 
                                                                boolean _skipPurchLineUpdate)
    {
        if (_skipPurchTableUpdate && _skipPurchLineUpdate)
        {
            return "@SCM:PurchaseOrderResponseConsume";
        }
        else if (_purchTable.ChangeRequestRequired)
        {
            return PurchaseOrderResponseConsumeHelper::consumePurhchaseOrderResponseWithChangeMgmt(_purchTable, _purchaseOrderResponseHeader);
        }
        else
        {
            return PurchaseOrderResponseConsumeHelper::consumePurhchaseOrderResponseWithoutChangeMgmt(_purchTable, _purchaseOrderResponseHeader, _skipPurchLineUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurhchaseOrderResponseWithChangeMgmt</Name>
				<Source><![CDATA[
    private static str consumePurhchaseOrderResponseWithChangeMgmt(PurchTable _purchTable, PurchaseOrderResponseHeader _purchaseOrderResponseHeader)
    {
        if (_purchTable.DocumentState != VersioningDocumentState::Draft)
        {
            return PurchaseOrderResponseConsumeHelper::getUserMessage_PurchaseOrderStateChange(_purchTable, VersioningDocumentState::Draft);
        }
        else
        {
            return PurchaseOrderResponseConsumeHelper::getUserMessage_NoChangeInPurchaseOrderState(_purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumePurhchaseOrderResponseWithoutChangeMgmt</Name>
				<Source><![CDATA[
    private static str consumePurhchaseOrderResponseWithoutChangeMgmt(PurchTable _purchTable, PurchaseOrderResponseHeader _purchaseOrderResponseHeader, boolean _skipPurchLineUpdate)
    {
        if (PurchaseOrderResponseConsumeHelper::checkIfPurchaseOrderStateWillChange_WithoutChangeMgmt(_purchTable, _purchaseOrderResponseHeader, _skipPurchLineUpdate))
        {
            return PurchaseOrderResponseConsumeHelper::getUserMessage_PurchaseOrderStateChange(_purchTable, VersioningDocumentState::Approved);
        }
        else
        {
            return PurchaseOrderResponseConsumeHelper::getUserMessage_NoChangeInPurchaseOrderState(_purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchaseOrderStateWillChange_WithoutChangeMgmt</Name>
				<Source><![CDATA[
    private static boolean checkIfPurchaseOrderStateWillChange_WithoutChangeMgmt(PurchTable _purchTable, PurchaseOrderResponseHeader _purchaseOrderResponseHeader, boolean _skipPurchLineUpdate)
    {
        if (_purchTable.DocumentState == VersioningDocumentState::Approved)
        {
            return false;
        }

        return PurchaseOrderResponseConsumeHelper::checkPurchaseOrderFieldsThatCanChangeDocumentState(_purchTable, _purchaseOrderResponseHeader) || !_skipPurchLineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchaseOrderFieldsThatCanChangeDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    /// modifying DlvMode or VendorRef fields on <c>PurchTable</c> will change the <c>PurchTable</c> state
    /// </summary>
    private static boolean checkPurchaseOrderFieldsThatCanChangeDocumentState(PurchTable _purchTable, PurchaseOrderResponseHeader _purchaseOrderResponseHeader)
    {
        if (_purchTable.DlvMode != _purchaseOrderResponseHeader.DlvMode || _purchTable.VendorRef != _purchaseOrderResponseHeader.VendorRef)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserMessage_PurchaseOrderStateChange</Name>
				<Source><![CDATA[
    private static str getUserMessage_PurchaseOrderStateChange(PurchTable _purchTable, VersioningDocumentState _documentState)
    {
        if (PurchaseOrderResponseConsumeHelper::isResponseVersionOutdated(_purchTable))
        {
            return strFmt("@SCM:PurchaseOrderResponseConsume_POStateChange_ResponseOutdated", _documentState);
        }
        else
        {
            return strFmt("@SCM:PurchaseOrderResponseConsume_POStateChange", _documentState);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserMessage_NoChangeInPurchaseOrderState</Name>
				<Source><![CDATA[
    private static str getUserMessage_NoChangeInPurchaseOrderState(PurchTable _purchTable)
    {
        if (PurchaseOrderResponseConsumeHelper::isResponseVersionOutdated(_purchTable))
        {
            return "@SCM:PurchaseOrderResponseConsume_ResponseOutdated";
        }
        else
        {
            return "@SCM:PurchaseOrderResponseConsume";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResponseVersionOutdated</Name>
				<Source><![CDATA[
    private static boolean isResponseVersionOutdated(PurchTable _purchTable)
    {
        return _purchTable.DocumentState != VersioningDocumentState::InExternalReview;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>