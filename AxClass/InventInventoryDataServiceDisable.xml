<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceDisable</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceDisable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main (Args _args)
    {
        if (Box::yesNo("@SCM:InventoryServiceDeleteDialog", DialogButton::No) == DialogButton::Yes)
        {
            InventInventoryDataServiceDisable inventoryDataServiceDisable = InventInventoryDataServiceDisable::construct();

            ttsbegin;
            InventoryServiceStatus serviceStatus = InventInventoryDataServiceParameters::findWithPessimisticLock().InventoryServiceStatus;

            if (serviceStatus == InventoryServiceStatus::Enabling)
            {
                InventInventoryDataServiceParameters::updateInventoryServiceStatus(InventoryServiceStatus::Disabling);
            }
            else if (serviceStatus == InventoryServiceStatus::Enabled ||
                     serviceStatus == InventoryServiceStatus::InitialSync )
            {
                inventoryDataServiceDisable.deleteBatchTaskAndQueue();
            }
            else if (serviceStatus == InventoryServiceStatus::Disabling)
            {
                error("@SCM:InventoryServiceDisablingErrorMessage");
            }
            ttscommit;

            InventInventoryDataServiceBatchJobHelper::researchDataSources(_args);
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceDisable construct()
    {
        InventInventoryDataServiceDisable inventoryDataServiceDisable = new InventInventoryDataServiceDisable();
        return inventoryDataServiceDisable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBatchTaskAndQueue</Name>
				<Source><![CDATA[
    internal void deleteBatchTaskAndQueue()
    {
        ttsbegin;
        InventInventoryDataServiceParameters::updateInventoryServiceStatus(InventoryServiceStatus::Disabled);
        ttscommit;

        ttsbegin;
        InventInventoryDataServiceParameters::updateIsProcessingQueueBackup(false);
        this.deleteInventSumAndWHSQueue();
        InventInventoryDataServiceBatchJobHelper::deleteBatchTask(classNum(InventInventoryDataServiceBatchJob));
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventSumAndWHSQueue</Name>
				<Source><![CDATA[
    internal void deleteInventSumAndWHSQueue()
    {
        InventInventoryDataServiceInventSumQueue::truncate();
        InventInventoryDataServiceInventSumQueueBackup::truncate();
        InventInventoryDataServiceInventSumQueueTemp::truncate();

        InventInventoryDataServiceWHSQueue::truncate();
        InventInventoryDataServiceWHSQueueBackup::truncate();
        InventInventoryDataServiceWHSQueueTemp::truncate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>