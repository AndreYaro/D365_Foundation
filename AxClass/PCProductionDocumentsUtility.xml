<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcProductionDocumentsUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PcProductionDocumentsUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>realignRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Realigns a generated route by using the operation sequence.
    /// </summary>
    /// <param name="_routeId">
    /// The ID of the route to realign.
    /// </param>
    public void realignRoute(RouteId _routeId)
    {
        Route               route;
        Route               nextRoute;
        RouteUpdate         routeUpdate = new RouteUpdate();
        int                 countRoute;

        select firstonly forupdate nextRoute
        index hint NumNextIdx
        where nextRoute.RouteId     == route.RouteId &&
              nextRoute.OprNumNext  == 0;

        if ( nextRoute )
        {
            countRoute = any2int(
                (select count(RecId) from route where route.RouteId == nextRoute.RouteId).RecId);

            this.routeReNumber(nextRoute, countRoute * 10);
        }

        if (_routeId)
        {
            routeUpdate = RouteUpdate::newRouteId(_routeId);
            if ( routeUpdate )
            {
                routeUpdate.parmInfo(false);
                routeUpdate.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeReNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns new operation numbers to the operations that are contained in a specified route.
    /// </summary>
    /// <param name="_route">
    /// The route that contains the operations to receive new operation numbers.
    /// </param>
    /// <param name="_newNum">
    /// The base for the new numbers specified to the operations.
    /// </param>
    /// <returns>
    /// The new number specified to the first operation of the route.
    /// </returns>
    protected OprNum routeReNumber(Route _route, OprNum _newNum)
    {
        Route       route;
        container   routeStack;
        OprNum      nextNum;
        container   oprList;

        routeStack      = [[_route.OprNum,_route.OprNumNext,_newNum]];
        oprList         = [_route.OprNum];
        if ( _route.OprNum < 0 )
        {
            _route.delete();
        }
        else
        {
            _route.OprNum   = _newNum;
            _route.update();
        }

        while ( conlen(routeStack) > 0 )
        {
            nextNum = conpeek(conpeek(routeStack,1),1);
            while select forupdate route
            index hint NumNextIdx
            where route.RouteId     == _route.RouteId &&
                  route.OprNumNext  == nextNum
            {
                if ( ! confind(oprList,route.OprNum) )
                {
                    break;
                }
            }
            if ( route )
            {
                oprList += [route.OprNum];
                if ( route.OprNum < 0 )
                {
                    routeStack = [[ route.OprNum, route.OprNumNext, _newNum ]]+routeStack;
                    route.delete();
                }
                else
                {
                    _newNum            -= 10;
                    routeStack = [[ route.OprNum, route.OprNumNext, _newNum ]]+routeStack;
                    route.OprNum        = _newNum;
                    route.OprNumNext    = conpeek(conpeek(routeStack,2),3);
                    route.update();
                }
            }
            else
            {
                routeStack = condel(routeStack,1,1);
            }
        }

        return _newNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSiteIdOnBOM</Name>
				<Source><![CDATA[
    protected void updateSiteIdOnBOM(
        BOMId           _bomId,
        InventSiteId    _siteId
        )
    {
        BOMTable bomTable;

        bomTable = BOMTable::find(_bomId, true);

        if (bomTable)
        {
            bomTable.SiteId = _siteId;
            bomTable.update();
            bomTable.updateSite();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSiteIdOnBOMandRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the site ID in a pair of generated bill of materials (BOM) and route.
    /// </summary>
    /// <param name="_bomId">
    /// The ID of the BOM to update.
    /// </param>
    /// <param name="_routeId">
    /// The ID of the route to update.
    /// </param>
    /// <param name="_siteId">
    /// The ID of the site from which to update the BOM and route.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The specified site ID does not exist.
    /// </exception>
    public void updateSiteIdOnBOMandRoute(
        BOMId           _bomId,
        RouteId         _routeId,
        InventSiteId    _siteId
        )
    {
        boolean         valid;

        if (strlen(_siteId) != 0)
        {
            valid = InventSite::exist(_siteId);
            if (valid)
            {
                ttsbegin;

                this.updateSiteIdOnBOM(_bomId, _siteId);

                this.updateSiteIdOnRoute(_routeId, _siteId);

                ttscommit;
            }
            else
            {
                throw error("@SYS109563");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSiteIdOnRoute</Name>
				<Source><![CDATA[
    protected void updateSiteIdOnRoute(
        RouteId         _routeId,
        InventSiteId    _siteId
    )
    {
        RouteVersion    routeVersion;

        InventDim       inventDim;
        RouteOpr        routeOpr;

        while select forupdate routeVersion
        where routeVersion.RouteId == _routeId
        {
            inventDim = routeVersion.inventDim().data();
            inventDim.InventSiteId = _siteId;
            inventDim = InventDim::findOrCreate(inventDim);

            routeVersion.InventDimId = inventDim.InventDimId;
            routeVersion.doUpdate();
        }

        //Also set the site on the route operation
        update_recordset routeOpr
        setting SiteId = _siteId
        where   routeOpr.RouteRelation  == _routeId
        &&      routeOpr.RouteCode      == RouteAll::Route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCProductionDocumentsUtility construct()
    {
        return new PCProductionDocumentsUtility();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>