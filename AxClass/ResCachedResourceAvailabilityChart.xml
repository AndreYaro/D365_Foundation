<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCachedResourceAvailabilityChart</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Cached resource availability chart controller extension.
/// </summary>
class ResCachedResourceAvailabilityChart extends ResResourceAvailabilityChart
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChartQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the chart query to be used to get resource availability chart data.
    /// </summary>
    /// <param name = "_timescale">Chart data aggregation level.</param>
    /// <param name = "_resources">Resource identifiers.</param>
    /// <param name = "_start">Starting time period.</param>
    /// <param name = "_end">Ending time period.</param>
    /// <returns>Assignment chart data query object.</returns>
    public Query getChartQuery(AVTimeframeType _timescale, str _resources, utcdatetime _start, utcdatetime _end)
    {
        Query query = new Query(querystr(ResCachedActivityResourceUtilizationQuery));
        QueryBuildDataSource dataSource = query.dataSourceTable(tableNum(ResRollUp));

        ResRollUpCoverage coverage;
        if (ResUtil::isPlannedResourceFromActivityResourceId(_resources))
        {
            coverage = ResRollUpCoverage::Activity;
        }
        else
        {
            coverage = ResRollUpCoverage::Availability;
        }

        this.setupRollUpCoverage(dataSource, coverage);
        this.setUpRollUpCollectionKey(dataSource, this.getLookupActivityResourceId(_resources, coverage));
        this.setUpRollUpTimescale(dataSource, _timescale);
        this.setUpRollUpTimeframe(dataSource, _start, _end);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLookupActivityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get activity resource ID as the collection key field to query record from <c>ResRollup</c> table.
    /// </summary>
    /// <param name = "_activityResourceId">Activity resource identifier.</param>
    /// <param name = "_coverage"><c>ResRollup</c> table records coverage type.</param>
    /// <returns>Remove activity and activity resource data if it is a named resource and coverage type is Availability.</returns>
    protected ActivityResourceId getLookupActivityResourceId(ActivityResourceId _activityResourceId, ResRollUpCoverage _coverage)
    {
        // For Availability coverage type which resource is not a planned resource, update collection key to look up
        // the resource record from ResRollup table.
        ActivityResourceId activityResourceId = _activityResourceId;
        if (_coverage == ResRollUpCoverage::Availability)
        {
            ResourceRecId resource = ResUtil::getResourceRecId(_activityResourceId);

            if (resource)
            {
                activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, '0', int642Str(resource), '0');
            }
        }

        return activityResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupRollUpCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup roll-up coverage.
    /// </summary>
    /// <param name = "_dataSource">Cache datasource.</param>
    /// <param name = "_coverage">Roll-up coverage.</param>
    protected void setupRollUpCoverage(QueryBuildDataSource _dataSource, ResRollUpCoverage _coverage)
    {
        _dataSource.rangeField(fieldNum(ResRollUp, Coverage)).value(queryValue(_coverage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpRollUpCollectionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup roll-up collection key.
    /// </summary>
    /// <param name = "_dataSource">Cache datasource.</param>
    /// <param name = "_collectionKey">Roll-up coverage.</param>
    protected void setUpRollUpCollectionKey(QueryBuildDataSource _dataSource, ActivityResourceId _collectionKey)
    {
        _dataSource.rangeField(fieldNum(ResRollUp, CollectionKey)).value(queryValue(_collectionKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpRollUpTimescale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup roll-up timescale.
    /// </summary>
    /// <param name = "_dataSource">Cache datasource.</param>
    /// <param name = "_timescale">Roll-up timescale.</param>
    protected void setUpRollUpTimescale(QueryBuildDataSource _dataSource, AVTimeframeType _timescale)
    {
        _dataSource.rangeField(fieldNum(ResRollUp, Timescale)).value(queryValue(_timescale));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpRollUpTimeframe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup roll-up timeframe.
    /// </summary>
    /// <param name = "_dataSource">Cache datasource.</param>
    /// <param name = "_start">Start date/time of roll-up.</param>
    /// <param name = "_end">End date/time of roll-up.</param>
    protected void setUpRollUpTimeframe(QueryBuildDataSource _dataSource, utcdatetime _start, utcdatetime _end)
    {
        _dataSource.rangeField(fieldNum(ResRollUp, Timeframe)).value(queryRange(_start, _end));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the cached resource chart item entity.
    /// </summary>
    /// <param name = "_record">Record identifier.</param>
    /// <param name = "_collectionKey">Activity resource identifier.</param>
    /// <returns>Chart item data object.</returns>
    public ChartItemDataContract resolveEntity(QueryRun _record, str _collectionKey = '')
    {
        List properties = new List(Types::Class);
        str timelineKey;

        EnumId enumId = enumNum(ProjScheduleStatus);
        DictEnum dictEnum = new DictEnum(enumId);

        if (_record)
        {
            ResRollUp rollUp = _record.get(tableNum(ResRollUp));
            EntityFieldDataContract keyValue;

            timelineKey = this.resolveTimelineKey(rollUp);

            real hardLocked = rollUp.HardLocked;
            keyValue = EntityFieldDataContract::construct('HardBooked', hardLocked);
            properties.addEnd(keyValue);

            real remaining = rollUp.Remaining;
            keyValue = EntityFieldDataContract::construct('CapacityContent', remaining);
            properties.addEnd(keyValue);

            str status = dictEnum.value2Symbol(rollUp.Status);
            keyValue = EntityFieldDataContract::construct('Status', status);
            properties.addEnd(keyValue);

            str statusLabel = dictEnum.value2Label(rollUp.Status);
            keyValue = EntityFieldDataContract::construct('StatusLabel', statusLabel);
            properties.addEnd(keyValue);

            boolean isTagged;

            if (rollUp.SoftLocked)
            {
                isTagged = true;
            }
            else if (rollUp.Resource != 0)
            {
                switch (rollUp.Timescale)
                {
                    case AVTimeframeType::Hour:
                        isTagged = ResRequestRollUpHourView::hasRequestByResourceRollUp(rollUp.RecId);
                        break;
                    case AVTimeframeType::Day:
                        isTagged = ResRequestRollUpDayView::hasRequestByResourceRollUp(rollUp.RecId);
                        break;
                    case AVTimeframeType::Week:
                        isTagged = ResRequestRollUpWeekView::hasRequestByResourceRollUp(rollUp.RecId);
                        break;
                    case AVTimeframeType::Month:
                        isTagged = ResRequestRollUpMonthView::hasRequestByResourceRollUp(rollUp.RecId);
                        break;
                    case AVTimeframeType::Quarter:
                        isTagged = ResRequestRollUpQuarterView::hasRequestByResourceRollUp(rollUp.RecId);
                        break;
                    case AVTimeframeType::HalfYear:
                        isTagged = ResRequestRollUpHalfYearView::hasRequestByResourceRollUp(rollUp.RecId);
                        break;
                }
            }

            int isTaggedValue = IsTagged ? 1 : 0;
            keyValue = EntityFieldDataContract::construct('SoftBooked', isTaggedValue);
            properties.addEnd(keyValue);

            this.extendRollupProperties(rollUp, properties);
        }

        ChartItemDataContract chartItem = ChartItemDataContract::construct();
        chartItem.collectionKey(_collectionKey);
        chartItem.timelineKey(timelineKey);
        chartItem.setKeyFactors();
        chartItem.properties(properties);
        return chartItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendRollupProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to add properties to Reservation card control.
    /// </summary>
    /// <param name = "_rollUp"><c>ResRollup</c> table buffer.</param>
    /// <param name = "_properties">The list of class <c>EntityFieldDataContract</c> for adding keyValue.</param>
    delegate void extendRollupProperties(ResRollUp _rollUp, List _properties)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of cached resource availability chart controller.
    /// </summary>
    /// <returns>Cached resource assignment chart controller.</returns>
    public static ResCachedResourceAvailabilityChart construct()
    {
        ResCachedResourceAvailabilityChart controller = new ResCachedResourceAvailabilityChart();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>