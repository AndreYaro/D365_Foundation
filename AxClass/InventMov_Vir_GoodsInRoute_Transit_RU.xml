<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Vir_GoodsInRoute_Transit_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_Vir_GoodsInRoute_Transit_RU extends InventMov_Vir_GoodsInRoute_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesGoodsInRoute_RU));
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesGoodsInRouteOffsetAccount_RU));
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimPhysical</Name>
				<Source><![CDATA[
    public boolean checkDimPhysical(
        InventQty   _qty,
        InventDim   _inventDim,
        boolean     _finalCheck,
        boolean     _showError = true)
    {
        boolean ret;

        if (_inventDim.InventLocationId)
        {
            ret = super(_qty, _inventDim, _finalCheck, _showError);
        }
        else
        {
            ret = checkFailed(strFmt("@SYS4081563", inventDim::find(inventDimIdSales).InventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    boolean  mustBeBookedFinancially()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::SalesGoodsInRoute_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    LedgerPostingType postingOperations()
    {
        return LedgerPostingType::SalesGoodsInRouteOffset_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    InventQty transQty()
    {
        return transqty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    UnitQty transQtyUnit()
    {
        return transqty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventMov_Vir_GoodsInRoute_Transit_RU newParameters(
        ItemId              _itemId,
        InventTransType     _transType,
        InventTransRefId    _transRefId,
        InventDimId         _inventDimId,
        CustVendAC          _custVendAC,
        DimensionDefault    _dimension,
        TransDate           _transDate,
        InventQty           _transQty,
        SalesCategory       _salesCategory,
        InventTransOriginId _inventTransOriginSales,
        InventTransId       _inventTransIdTransit)
    {
        InventTable                             inventTable = InventTable::find(_itemId);
        InventMov_Vir_GoodsInRoute_Transit_RU movement_Virtuel = new InventMov_Vir_GoodsInRoute_Transit_RU(null);

        movement_Virtuel.parmInventDimId(InventDim::find(_inventDimId).goodsInRouteDimId_RU(inventDimGroupSetup::newInventTable(inventTable)));
        movement_Virtuel.parmItemId(_itemId);

        movement_Virtuel.parmDefaultDimension(_dimension);
        movement_Virtuel.parmCustVendAC(_custVendAC);
        movement_Virtuel.parmTransType(_transType);
        movement_Virtuel.parmTransRefId(_transRefId);
        movement_Virtuel.parmInventDimIdSales(_inventDimId);
        movement_Virtuel.parmInventTransOriginSales(_inventTransOriginSales);

        movement_Virtuel.parmTransQty(_transQty);
        movement_Virtuel.parmTransDate(_transDate);

        movement_Virtuel.parmInventTransId(_inventTransIdTransit);
        movement_Virtuel.parmReturnInventTransOrigin(_inventTransOriginSales);
        movement_Virtuel.parmSalesCategory(_salesCategory);

        return movement_Virtuel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>