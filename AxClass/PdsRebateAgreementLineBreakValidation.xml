<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateAgreementLineBreakValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PdsRebateAgreementLineBreakValidation</c> class is responsible for rebate agreement line break validations.
/// </summary>
public class PdsRebateAgreementLineBreakValidation
{
    PdsRebateAgreement      pdsRebateAgreement;
    InventDimId             prevInventDimId;
    CurrencyCode            prevCurrency;
    UnitOfMeasureSymbol     prevUOM;
    PdsRebateToQty          prevToQty = 0;
    PDSRebateToAmount       prevToAmt = 0;
    PdsRebateAmtType        prevRebateAmtType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLineBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the agreement line breaks are valid.
    /// </summary>
    /// <returns>
    ///     true if all the line breaks is valid; otherwise, false.
    /// </returns>
    public boolean checkLineBreaks()
    {
        PdsRebateAgreementLine  pdsRebateAgreementLine;
        boolean                 ok        = true;
        boolean                 firstLine = true;

        SysDaQueryObject qePdsRebateAgreementLine = new SysDaQueryObject(pdsRebateAgreementLine);
        SysDaQueryObject qePdsRebateAgreement = new SysDaQueryObject(pdsRebateAgreement);
        
        qePdsRebateAgreementLine = this.orderByFields(qePdsRebateAgreementLine);

        qePdsRebateAgreementLine.whereClause(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(PdsRebateAgreementLine, fieldStr(PdsRebateAgreementLine, RebateAgreementRefRecId)),
                                                new SysDaFieldExpression(pdsRebateAgreement, fieldStr(PdsRebateAgreement, RecId))));

        SysDaSearchObject searchObject = new SysDaSearchObject(qePdsRebateAgreementLine);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while (searchStatement.nextRecord(searchObject))
        {
            if (firstLine)
            {
                firstLine = false;
            }
            else
            {
                if (this.mustValidatePreviousLine(pdsRebateAgreementLine))
                {
                    ok = this.validateLine(prevRebateAmtType, prevToQty, prevToAmt, pdsRebateAgreement);
                }
                else
                {
                    switch (pdsRebateAgreement.PdsRebateLineBreakType)
                    {
                        case PdsRebateLineBreakType::Quantity:
                            ok = !this.lineQuantityHasGapOrOverlap(pdsRebateAgreementLine.RebateFromQty, prevToQty);
                            break;
                        case PdsRebateLineBreakType::Amount:
                            ok = !this.lineAmountHasGapOrOverlap(pdsRebateAgreementLine.RebateFromAmount, prevToAmt);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ok)
            {
                return ok;
            }

            this.initializePreviousFields(pdsRebateAgreementLine);
        }

        // check for the last line if any lines exist
        if (!firstLine)
        {
            ok = this.validateLine(prevRebateAmtType, prevToQty, prevToAmt, pdsRebateAgreement);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    private boolean validateLine(PdsRebateAmtType    _prevRebateAmtType,
                                 PdsRebateToQty      _prevToQty,
                                 PdsRebateToAmount   _prevToAmt,
                                 PdsRebateAgreement  _pdsRebateAgreement)
    {
        switch (_pdsRebateAgreement.PdsRebateLineBreakType)
        {
            case PdsRebateLineBreakType::Quantity:
                return this.rebateAmtTypeForUpperThresQtyCheckValid(_prevRebateAmtType, _prevToQty);
                
            case PdsRebateLineBreakType::Amount:
                return this.rebateAmtTypeForUpperThresAmtCheckValid(_prevRebateAmtType, _prevToAmt);

            default:
                return true;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantityHasGapOrOverlap</Name>
				<Source><![CDATA[
    private boolean lineQuantityHasGapOrOverlap(PdsRebateFromQty _currentFromQty, PdsRebateToQty _previousToQty)
    {
        if (_currentFromQty == _previousToQty)
        {
            return false;
        }

        if (_currentFromQty < _previousToQty)
        {
            checkFailed("@PDS1425");
        }
        else
        {
            checkFailed("@PDS1424");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountHasGapOrOverlap</Name>
				<Source><![CDATA[
    private boolean lineAmountHasGapOrOverlap(PDSRebateFromAmount _currentFromAmt, PDSRebateToAmount _previousToAmt)
    {
        if (_currentFromAmt == _previousToAmt)
        {
            return false;
        }

        if (_currentFromAmt < _previousToAmt)
        {
            checkFailed("@MCR40111");
        }
        else
        {
            checkFailed("@MCR40112");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmtTypeForUpperThresQtyCheckValid</Name>
				<Source><![CDATA[
    private boolean rebateAmtTypeForUpperThresQtyCheckValid(PdsRebateAmtType _rebateAmountType,PdsRebateToQty _toQty)
    {
        boolean checkValid = true;

        if ((_rebateAmountType == PdsRebateAmtType::Percentage) && (_toQty != realMax()))
        {
            checkValid = checkFailed(strFmt("@SYS4010202", PdsRebateLineBreakType::Quantity,
                                                           PdsRebateAmtType::Percentage,
                                                           _toQty,
                                                            SysDictField::findFieldById(tableNum(PdsRebateAgreementLine),
                                                                                        fieldNum(PdsRebateAgreementLine,
                                                                                                 RebateToQty)).label()));
        }

        return checkValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderByFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Order by fields of <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <param name = "_sysDaOrderByFields">
    ///     An instance of <c>SysDaQueryObject</c>.
    /// </param>
    /// <returns>
    ///     An order by instance of <c>SysDaQueryObject</c>.
    /// </returns>
    protected SysDaQueryObject orderByFields(SysDaQueryObject _sysDaOrderByFields)
    {
        _sysDaOrderByFields.orderByClause().add(fieldStr(PdsRebateAgreementLine, InventDimId)).
                                                    add(fieldStr(PdsRebateAgreementLine, Currency)).
                                                    add(fieldStr(PdsRebateAgreementLine, RebateUnit)).
                                                    add(fieldStr(PdsRebateAgreementLine, RebateFromQty)).
                                                    add(fieldStr(PdsRebateAgreementLine, RebateFromAmount));

        return _sysDaOrderByFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmtTypeForUpperThresAmtCheckValid</Name>
				<Source><![CDATA[
    private boolean rebateAmtTypeForUpperThresAmtCheckValid(PdsRebateAmtType  _rebateAmountType,
                                                                   PdsRebateToAmount _toAmt)
    {
        boolean checkValid= true;

        if ((_rebateAmountType == PdsRebateAmtType::AmountPerUnit) && (_toAmt != realMax()))
        {
            checkValid = checkFailed(strFmt("@SYS4010202", PdsRebateLineBreakType::Amount,
                                                           PdsRebateAmtType::AmountPerUnit,
                                                           _toAmt,
                                                           SysDictField::findFieldById(tableNum(PdsRebateAgreementLine),
                                                                                       fieldNum(PdsRebateAgreementLine,
                                                                                                RebateToAmount)).label()));
        }

        return checkValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidatePreviousLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the previous <c>PdsRebateAgreementLine</c> must be validated.
    /// </summary>
    /// <param name = "_pdsRebateAgreementLine">
    ///     A <c>PdsRebateAgreementLine</c> table buffer to validate previous values.
    /// </param>
    /// <returns>
    ///     true if the previous agreement line must be validated; otherwise, false.
    /// </returns>
    protected boolean mustValidatePreviousLine(PdsRebateAgreementLine _pdsRebateAgreementLine)
    {
        return (_pdsRebateAgreementLine.InventdimId   != prevInventDimId
                || _pdsRebateAgreementLine.Currency   != prevCurrency
                || _pdsRebateAgreementLine.RebateUnit != prevUOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePreviousFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes previous field values of <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <param name = "_pdsRebateAgreementLine">
    ///     A <c>PdsRebateAgreementLine</c> table buffer to initialize previous values.
    /// </param>
    protected void initializePreviousFields(PdsRebateAgreementLine _pdsRebateAgreementLine)
    {
        prevInventDimId   = _pdsRebateAgreementLine.InventdimId;
        prevCurrency      = _pdsRebateAgreementLine.Currency;
        prevUOM           = _pdsRebateAgreementLine.RebateUnit;
        prevToQty         = _pdsRebateAgreementLine.toQty();
        prevToAmt         = _pdsRebateAgreementLine.toAmount();
        prevRebateAmtType = _pdsRebateAgreementLine.RebateAmtType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>PdsRebateAgreementLineBreakValidation</c> class
    /// </summary>
    /// <param name = "_pdsRebateAgreement">
    ///     A <c>PdsRebateAgreement</c> table buffer.
    /// </param>
    protected void new(PdsRebateAgreement _pdsRebateAgreement)
    {
        pdsRebateAgreement = _pdsRebateAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPdsRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of <c>PdsRebateAgreementLineBreakValidation</c> class.
    /// </summary>
    /// <param name = "_pdsRebateAgreement">
    ///     A <c>PdsRebateAgreement</c> table buffer.
    /// </param>
    /// <returns>
    ///     An instance of <c>PdsRebateAgreementLineBreakValidation</c> class.
    /// </returns>
    public static PdsRebateAgreementLineBreakValidation newFromPdsRebateAgreement(PdsRebateAgreement _pdsRebateAgreement)
    {
        return new PdsRebateAgreementLineBreakValidation(_pdsRebateAgreement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>