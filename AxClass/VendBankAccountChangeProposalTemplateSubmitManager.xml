<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendBankAccountChangeProposalTemplateSubmitManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendBankAccountChangeProposalTemplateSubmitManager</c> menu item action event handler.
/// </summary>
public class VendBankAccountChangeProposalTemplateSubmitManager 
{
    VendBankAccount vendBankAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static VendBankAccountChangeProposalTemplateSubmitManager construct()
    {
        return new VendBankAccountChangeProposalTemplateSubmitManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSubmitManager</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static VendBankAccountChangeProposalTemplateSubmitManager newSubmitManager(VendBankAccount _vendBankAccount)
    {
        VendBankAccountChangeProposalTemplateSubmitManager submitManager = VendBankAccountChangeProposalTemplateSubmitManager::construct();
        submitManager.parmVendBankAccount(_vendBankAccount);
        return submitManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendBankAccount</Name>
				<Source><![CDATA[
    public VendBankAccount  parmVendBankAccount(VendBankAccount  _vendBankAccount = vendBankAccount)
    {
        vendBankAccount = _vendBankAccount;
        return vendBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void  new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
	{
        if (!_args.record() || !_args.caller() || !(_args.record() is VendBankAccount))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        VendBankAccount vendBankAccount = _args.record() as VendBankAccount;
        
        WorkflowSubmitDialog workflowSubmitDialog = WorkflowSubmitDialog::construct(_args.caller().getActiveWorkflowConfiguration());
        workflowSubmitDialog.run();
        if (workflowSubmitDialog.parmIsClosedOK())
        {
            WorkflowComment initialNote = workflowSubmitDialog.parmWorkflowComment();
            
            VendBankAccountChangeProposalTemplateSubmitManager submitManager = VendBankAccountChangeProposalTemplateSubmitManager::newSubmitManager(vendBankAccount);
            submitManager.submit(initialNote);
            submitManager.updateWorkflowControls(_args);
        }
        
	}

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowControls</Name>
				<Source><![CDATA[
    public void updateWorkflowControls(Args _args)
    {
        // make sure changes in status are reflected on the caller
        if (FormDataUtil::isFormDataSource(vendBankAccount))
        {
            FormDataSource callerDS = FormDataUtil::getFormDatasource(vendBankAccount);
            if(vendBankAccount.IsDraft())
            {
                callerDS.allowEdit(false);
            }
            callerDS.reread();
            callerDS.refresh();
        }
        
        _args.caller().updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    public void submit(WorkflowComment initialNote)
    {
        try
        {
            ttsbegin;
            VendBankAccount::updateWorkflowState(vendBankAccount.RecId, VendBankAccountChangeProposalWorkflowState::Submitted);

            // Activate the workflow.
            Workflow::activateFromWorkflowType(workFlowTypeStr(VendBankAccountChangeProposalTemplate), vendBankAccount.RecId, initialNote, NoYes::No);

            info("@AccountsPayable:VendBankAccountChangeProposalWorkflow_Submited");
            ttscommit;
        }
        catch(exception::Error)
        {
            info("@AccountsPayable:VendBankAccountChangeProposalWorkflow_Error");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>