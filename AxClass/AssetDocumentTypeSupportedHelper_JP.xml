<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentTypeSupportedHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is the helper class for interface <C>AssetDocumentTypeSupportedInterface_JP</C>
/// </summary>
class AssetDocumentTypeSupportedHelper_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllSupportedAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of asset document type(s) that supported by specified class and its subclasses.
    /// or its sub classes.
    /// </summary>
    /// <param name="_baseClassId">
    /// The class ID of base class. This class should implement the interface <C>AssetDocumentTypeSupportedInterface_JP</C>
    /// </param>
    /// <returns>
    /// A container that holds all supported asset document type(s).
    /// </returns>
    public static container getAllSupportedAssetDocumentType(ClassId _baseClassId)
    {
        container                                   ret;
        List                                        classList;
        ListEnumerator                              listEnumerator;
        DictClass                                   dictClass;
        AssetDocumentTypeSupportedInterface_JP      assetDocumentTypeSupportedInterface;
        int                                         i;
        boolean                                     isInterfaceSupported = false;

        SysGlobalObjectCache        sgoc;
        str                         scope;
        container                   key;
        container                   value;

        sgoc    = classfactory.globalObjectCache();
        scope   = classStr(AssetDocumentTypeSupportedHelper_JP);
        key     = [_baseClassId];

        // Pull the result from SGOC since tree node operations are expensive. The
        // cached value will be flushed on recompile, so there is no need to seperately
        // flush these values as code changes are made.
        value = sgoc.find(scope, key);

        if (value == conNull())
        {
            // Check whether this class set implements the AssetDocumentTypeSupportedInterface_JP
            dictClass = new DictClass(_baseClassId);
            for (i = 1; i <= dictClass.implementsCnt(); i++)
            {
                if (dictClass.implements(i) == classNum(AssetDocumentTypeSupportedInterface_JP))
                {
                    isInterfaceSupported = true;
                    break;
                }
            }

            if (isInterfaceSupported)
            {
                // Go through all non-abstract sub classes, collect all their supported asset document types.
                classList = dictClass.extendedBy();
                // Add the base class itself
                classList.addStart(_baseClassId);
                listEnumerator = classList.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    dictClass = new DictClass(listEnumerator.current());
                    if (dictClass && !dictClass.isAbstract())
                    {
                        assetDocumentTypeSupportedInterface = dictClass.makeObject();
                        if (assetDocumentTypeSupportedInterface)
                        {
                            ret = conUnion(ret, assetDocumentTypeSupportedInterface.getSupportedAssetDocumentType());
                        }
                    }
                }
            }

            value = [ret];
            sgoc.insert(scope, key, value);
        }
        else
        {
            [ret] = value;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>