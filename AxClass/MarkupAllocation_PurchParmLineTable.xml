<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocation_PurchParmLineTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MarkupAllocation_PurchParmLineTable</c> class manages the allocation of the
///    <c>MarkupTrans</c> table records to the <c>VendInvoiceInfoLine</c> table records from those
///    associated with a <c>VendInvoiceInfoTable</c> table record.
/// </summary>
[MarkupAllocationTableNameFactoryAttribute(tableStr(VendInvoiceInfoTable))]
public class MarkupAllocation_PurchParmLineTable extends MarkupAllocation
{
    VendInvoiceInfoLine vendInvoiceInfoLine;
    ParmId              parmId;
    TradeLineRefId      tableRefId;
    boolean             isTmpTablePopulated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAllocate</Name>
				<Source><![CDATA[
    public boolean canAllocate()
    {
        boolean found;

        if (!purchId)
        {
            this.initValues();
        }

        switch (this.checkCostAdjustmentLock_RU())
        {
            case UnknownNoYes::Unknown:
                return false;
            case UnknownNoYes::Yes:
                found = true;
                break;
        }
        if (found)
        {
            return Box::okCancel("@SYS120663", DialogButton::Cancel) == DialogButton::Ok;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomJournalPosted_RU</Name>
				<Source><![CDATA[
    public boolean checkCustomJournalPosted_RU(boolean _showWarning = false)
    {
        CustomJournalTable_RU       customJournalTable;
        CustomJournalTrans_RU       customJournalTrans;

        select firstonly CustomJournalStatus, DlvTermId from customJournalTable
        exists join customJournalTrans
            where customJournalTrans.CustomJournalId            == customJournalTable.CustomJournalId   &&
                  customJournalTrans.SalesPurchInventTransId    == vendInvoiceInfoLine.InventTransId    &&
                  customJournalTrans.SalesPurchId               == vendInvoiceInfoLine.OrigPurchId;

        if (customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Posted && customJournalTable.DlvTermId)
        {
            if (MarkupDlvTermConnection_RU::exist(customJournalTable.DlvTermId, markupTransAllocate.MarkupCode))
            {
                if (_showWarning)
                    warning(strFmt("@GLS115428", markupTransAllocate.MarkupCode, vendInvoiceInfoLine.LineNum));

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustVendAllocNeed_RU</Name>
				<Source><![CDATA[
    protected boolean checkCustVendAllocNeed_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAdjustmentLocked_RU</Name>
				<Source><![CDATA[
    protected boolean costAdjustmentLocked_RU()
    {
        return vendInvoiceInfoLine.inventDim().inventProfile_RU().LockCostAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the currency code of the current <c>VendInvoiceInfoLine</c> record.
    /// </summary>
    /// <returns>
    ///    The <c>CurrencyCode</c> value.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return vendInvoiceInfoLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupTransFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>MarkupTrans</c> record from the line to which it is allocated.
    /// </summary>
    protected void initMarkupTransFromLine()
    {
        markupTrans.initFromVendInvoiceInfoLine(vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    protected void initValues()
    {
        // <GIN>
        #ISOcountryRegionCodes
        MarkupTrans markupTransLoc;
        boolean         countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // <GIN>
        switch (source.TableId)
        {
            case(tableNum(MarkupTrans))     :   if (countryRegion_IN && LedgerParameters::find().Miscellaneouscharges_IN)
                                                {
                                                    markupTransLoc       = source;
                                                    vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(markupTransLoc.TransRecId);
                                                    purchId              = vendInvoiceInfoTable.PurchId;
                                                    parmId               = vendInvoiceInfoTable.ParmId;
                                                    tableRefId           = vendInvoiceInfoTable.TableRefId;
                                                    invoiceId            = '';
                                                    this.parmInterCompanyDirectDelivery(false);
                                                }
                                                break;

            default                         :
        // </GIN>
                                                vendInvoiceInfoTable = source;
                                                purchId = vendInvoiceInfoTable.PurchId;
                                                parmId = vendInvoiceInfoTable.ParmId;
                                                tableRefId = vendInvoiceInfoTable.TableRefId;
                                                invoiceId = '';
                                                this.parmInterCompanyDirectDelivery(false);
        // <GIN>
                                                break;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCategoryWeight_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns unit weight of the category based item.
    /// </summary>
    /// <returns>
    /// The gross weight of the item.
    /// </returns>
    protected ItemGrossWeight inventCategoryWeight_RU()
    {
        if (vendInvoiceInfoLine.isNonPO())
            return VendInvoiceLineForeignTradeCategory::findVendInvoiceInfoLine(vendInvoiceInfoLine).UnitWeight;
        else if (vendInvoiceInfoLine.InventTransId)
            return PurchLineForeignTradeCategory::find(vendInvoiceInfoLine.InventTransId, vendInvoiceInfoLine.DataAreaId).UnitWeight;
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventPostingProfile_RU</Name>
				<Source><![CDATA[
    protected PostingProfile inventPostingProfile_RU(InventProfileId_RU _inventProfileId)
    {
        return InventProfileCustVendLedger_RU::vendPostingProfile(_inventProfileId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    protected Qty inventQty()
    {
        Qty                     ret         = this.qty();
        ItemId                  itemId;
        PurchUnit               purchUnit;
        VendInvoiceInfoLine     tmpVendInvoicveInfoLine;

        if ( vendInvoiceInfoLine.isNonPO() )
        {
            tmpVendInvoicveInfoLine = vendInvoiceInfoLine;

            itemId      = tmpVendInvoicveInfoLine.ItemId;
            purchUnit   = tmpVendInvoicveInfoLine.PurchUnit;

            if (itemId && purchUnit)
            {
                ret = InventTableModule::unitConvert(itemId,
                                                     ModuleInventPurchSales::Invent,
                                                     purchUnit,
                                                     ret,
                                                     tmpVendInvoicveInfoLine.InventDimId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable_RU</Name>
				<Source><![CDATA[
    protected InventTable inventTable_RU()
    {
        return vendInvoiceInfoLine.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the value of the current <c>VendInvoiceInfoLine</c> table record.
    /// </summary>
    /// <returns>
    ///    The total value of the line.
    /// </returns>
    public AmountCur lineAmount()
    {
        AmountCur           lineAmount;
        CustInvoiceTrans    custInvoiceTrans;

        lineAmount = vendInvoiceInfoLine.LineAmount;

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                select firstonly Qty from custInvoiceTrans
                       where custInvoiceTrans.InvoiceId                 == interCompanyInvoiceId
                       &&    custInvoiceTrans.InvoiceDate               == interCompanyInvoiceDate
                       &&    custInvoiceTrans.InterCompanyInventTransId == vendInvoiceInfoLine.InventTransId;
            }
            if (custInvoiceTrans.Qty)
            {
                lineAmount = vendInvoiceInfoLine.calcLineAmount(custInvoiceTrans.Qty);
            }
        }
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAllocateOnlyReceived</Name>
				<Source><![CDATA[
    protected boolean parmShowAllocateOnlyReceived()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the quantity for the current <c>VendInvoiceInfoLine</c> table record.
    /// </summary>
    /// <returns>
    ///    A quantity value.
    /// </returns>
    public Qty qty()
    {
        Qty qty;
        CustInvoiceTrans custInvoiceTrans;

        if (vendInvoiceInfoLine.isNonPO() || !vendInvoiceInfoLine.isStocked())
        {
            qty = vendInvoiceInfoLine.ReceiveNow;
        }
        else
        {
            qty = vendInvoiceInfoLine.InventNow;
        }

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                select firstonly Qty from custInvoiceTrans
                       where custInvoiceTrans.InvoiceId                 == interCompanyInvoiceId
                       &&    custInvoiceTrans.InvoiceDate               == interCompanyInvoiceDate
                       &&    custInvoiceTrans.InterCompanyInventTransId == vendInvoiceInfoLine.InventTransId;
                if (custInvoiceTrans.Qty)
                {
                    qty = custInvoiceTrans.Qty;
                }
            }
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>QueryRun</c> object to retrieve the matching <c>VendInvoiceInfoLine</c> records.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object.
    /// </returns>
    public QueryRun queryBuild()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    vendInvoiceInfoLineDS;
        QueryBuildDataSource    vendInvoiceInfoTableDS;
        QueryBuildDataSource    tmpMarkupAllocationRecIdDS;
        CustInvoiceTrans        custInvoiceTrans;

        query = new Query();
        vendInvoiceInfoLineDS = query.addDataSource(tableNum(VendInvoiceInfoLine));
        vendInvoiceInfoLineDS.addRange(fieldNum(VendInvoiceInfoLine, TableRefId)).value(queryValue(tableRefId));
        vendInvoiceInfoLineDS.addRange(fieldNum(VendInvoiceInfoLine, ParmId)).value(queryValue(parmId));
        vendInvoiceInfoTableDS = vendInvoiceInfoLineDS.addDataSource(tableNum(VendInvoiceInfoTable));
        vendInvoiceInfoTableDS.addLink(fieldNum(VendInvoiceInfoLine, ParmId), fieldNum(VendInvoiceInfoTable, ParmId));
        vendInvoiceInfoTableDS.addLink(fieldNum(VendInvoiceInfoLine, TableRefId), fieldNum(VendInvoiceInfoTable, TableRefId));
        vendInvoiceInfoTableDS.joinMode(JoinMode::ExistsJoin);
        vendInvoiceInfoTableDS.addRange(fieldNum(VendInvoiceInfoTable, ParmJobStatus)).value(enum2str(ParmJobStatus::Waiting));

        if (allocationRecIds != null && allocationRecIds.elements())
        {
            if (!isTmpTablePopulated)
            {
                this.populateMarkupTmpAllocation();
                isTmpTablePopulated = true;
            }
            tmpMarkupAllocationRecIdDS = vendInvoiceInfoLineDS.addDataSource(tableNum(MarkupTmpAllocation));
            tmpMarkupAllocationRecIdDS.addLink(fieldNum(VendInvoiceInfoLine, RecId), fieldNum(MarkupTmpAllocation, MarkupAllocationRecId));
            tmpMarkupAllocationRecIdDS.joinMode(JoinMode::ExistsJoin);
        }

        queryRun = new QueryRun(query);

        if (isTmpTablePopulated)
        {
            queryRun.setRecord(markupTmpAllocation);
        }

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                while select InterCompanyInventTransId from custInvoiceTrans
                      where custInvoiceTrans.InvoiceId   == interCompanyInvoiceId
                      &&    custInvoiceTrans.InvoiceDate == interCompanyInvoiceDate
                {
                    queryRun.query().dataSourceTable(tableNum(VendInvoiceInfoLine)).addRange(fieldNum(VendInvoiceInfoLine, InventTransId)).value(queryValue(custInvoiceTrans.InterCompanyInventTransId));
                }
            }
        }
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>VendInvoiceInfoLine</c> record for the specified <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_transact">
    ///    A <c>QueryRun</c> object.
    /// </param>
    /// <returns>
    ///    A <c>VendInvoiceInfoLine</c> record from the query.
    /// </returns>
    public Common queryGet(QueryRun _transact)
    {
        vendInvoiceInfoLine = _transact.get(tableNum(VendInvoiceInfoLine));

        if (allocateInventoried)
        {
            if (vendInvoiceInfoLine.isNonPO())
            {
                return null;
            }

            if (!vendInvoiceInfoLine.purchLine().isStocked())
            {
                return null;
            }
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values of a <c>MarkupTrans</c> table record.
    /// </summary>
    protected void setMarkupTransFields()
    {
        // <GIN>
        #ISOcountryRegionCodes
        boolean         countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        super();

        // Link the MarkupTrans to its origin for later removal if the origin is removed
        markupTrans.OrigTableId = source.TableId;
        markupTrans.OrigRecId = source.RecId;

        // <GIN>
        if (countryRegion_IN && LedgerParameters::find().Miscellaneouscharges_IN)
        {
            markupTrans.MarkUpAllocateAfter_IN     = markupTransAllocate.MarkUpAllocateAfter_IN;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocation_PurchParmLineTable construct()
    {
        return new MarkupAllocation_PurchParmLineTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>