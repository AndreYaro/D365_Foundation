<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDatesStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmDatesStrategy</c> class implements common logic to set the confirmed dates for a
/// <c>SalesDeliveryDateControlMap</c> map.
/// </summary>
abstract class SalesConfirmDatesStrategy
{
    SalesCalcAvailableDlvDates      salesCalcAvailableDlvDates;
    InventMovement                  inventMovement;
    TransDate                       earliestShippingDate;
    TransDate                       earliestReceiptDate;

    UnknownNoYes                    initializedOk;
    SalesDeliveryDateControlMap     salesDeliveryDateControlMapInitial;

    boolean                         forceReqCalcExplodeCoverageDeletion;

    boolean hasSchedulingError;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the earliest possible ship and receipt dates. 
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <param name="_fromDate">
    /// A date value that holds a starting date; optional.
    /// </param>
    protected void calculateConfirmedDates(
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller,
        TransDate                   _fromDate = dateNull())
    {
        if (   earliestShippingDate
            && earliestReceiptDate)
        {
            return;
        }

        this.runReqCalcExplode(_salesDeliveryDateControlMapCaller);

        [earliestShippingDate, earliestReceiptDate] = salesCalcAvailableDlvDates.calcEarliestShipReceiptDates(_fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlTypeForced</Name>
				<Source><![CDATA[
    protected SalesDeliveryDateControlType deliveryDateControlTypeForced()
    {
        return SalesDeliveryDateControlType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceReqCalcExplodeCoverageDeletion</Name>
				<Source><![CDATA[
    public boolean parmForceReqCalcExplodeCoverageDeletion(boolean _forceReqCalcExplodeCoverageDeletion = forceReqCalcExplodeCoverageDeletion)
    {
        forceReqCalcExplodeCoverageDeletion = _forceReqCalcExplodeCoverageDeletion;
        return forceReqCalcExplodeCoverageDeletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether confirmed dates can be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates might
    /// be set.
    /// </param>
    /// <returns>
    /// true if confirmed dates can be set; otherwise, false.
    /// </returns>
    abstract protected boolean canSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqCalcExplode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ReqCalcExplode</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>ReqCalcExplode</c> class.
    /// </returns>
    protected ReqCalcExplode createReqCalcExplode()
    {
        return ReqCalcExplode::newInventoryMovement(inventMovement,inventMovement.mustBeAutoReserved(), NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date delivery control type that applies.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// An enumeration value that represents the date delivery control type.
    /// </returns>
    protected SalesDeliveryDateControlType deliveryDateControlType(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        return _salesDeliveryDateControlMapCaller.DeliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic to handle a conflict regarding the confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    abstract protected void handleConflict(SalesDeliveryDateControlMap    _salesDeliveryDateControlMapCaller)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the confirmed dates and indicates whether a conflict exists.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCallerOrig">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record before confirmed dates are set.
    /// </param>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates might
    /// have been set.
    /// </param>
    /// <returns>
    /// true if the confirmed dates are valid; otherwise, false.
    /// </returns>
    protected boolean haveConflict(
        SalesDeliveryDateControlMap    _salesDeliveryDateControlMapCallerOrig,
        SalesDeliveryDateControlMap    _salesDeliveryDateControlMapCaller)
    {
        boolean     ret;

        if (   ! _salesDeliveryDateControlMapCaller.ShippingDateConfirmed
            || ! _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed)
        {
            ret = true;
        }

        if (   _salesDeliveryDateControlMapCaller.ShippingDateConfirmed
            && _salesDeliveryDateControlMapCaller.ShippingDateConfirmed < earliestShippingDate)
        {
            ret = true;
        }

        if (   _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed
            && _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed < earliestReceiptDate)
        {
            ret = true;
        }

        if ( ! _salesDeliveryDateControlMapCallerOrig.ShippingDateConfirmed
            && _salesDeliveryDateControlMapCaller.ShippingDateConfirmed > _salesDeliveryDateControlMapCaller.ShippingDateRequested)
        {
            ret = true;
        }

        if ( ! _salesDeliveryDateControlMapCallerOrig.ReceiptDateConfirmed
            && _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed > _salesDeliveryDateControlMapCaller.ReceiptDateRequested)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// true if internal variables could be initialized; otherwise, false.
    /// </returns>
    protected boolean init(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (     salesDeliveryDateControlMapInitial
            && ! salesDeliveryDateControlMapInitial.equal(_salesDeliveryDateControlMapCaller))
        {
            // the object has been called with another _salesDeliveryDateControlMapCaller
            this.resetCachedVariables();
        }

        if (initializedOk == UnknownNoYes::Unknown)
        {
            salesDeliveryDateControlMapInitial  = _salesDeliveryDateControlMapCaller.data();

            using (var context = SalesCalcDeliveryDateControlTypeForcedContext::construct(this.deliveryDateControlTypeForced()))
            {
                salesCalcAvailableDlvDates      = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_salesDeliveryDateControlMapCaller);
            }

            if (salesCalcAvailableDlvDates)
            {
                inventMovement = InventMovement::constructNoThrow(_salesDeliveryDateControlMapCaller);
                initializedOk = UnknownNoYes::Yes;
            }
            else
            {
                initializedOk = UnknownNoYes::No;
            }
        }

        return initializedOk == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed dates must be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// true if the confirmed dates must be set; otherwise, false.
    /// </returns>
    abstract public boolean mustSetConfirmedDates(SalesDeliveryDateControlMap  _salesDeliveryDateControlMapCaller)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCachedVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets cached variables.
    /// </summary>
    protected void resetCachedVariables()
    {
        initializedOk           = UnknownNoYes::Unknown;
        earliestShippingDate    = dateNull();
        earliestReceiptDate     = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements main logic for setting confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// true if confirmed dates are set; otherwise, false.
    /// </returns>
    public boolean run(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        void setConfirmedDates()
        {
            if (this.canSetConfirmedDates(_salesDeliveryDateControlMapCaller) && !hasSchedulingError)
            {
                this.setConfirmedDates(_salesDeliveryDateControlMapCaller);
            }
        }

        if (! this.init(_salesDeliveryDateControlMapCaller))
        {
            // it is not supported to set confirmed dates
            return false;
        }

        if (this.mustSetConfirmedDates(_salesDeliveryDateControlMapCaller))
        {
            this.calculateConfirmedDates(_salesDeliveryDateControlMapCaller, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            if (!hasSchedulingError)
            {
                setConfirmedDates();

                if (this.haveConflict(salesDeliveryDateControlMapInitial,_salesDeliveryDateControlMapCaller))
                {
                    this.handleConflict(_salesDeliveryDateControlMapCaller);

                    setConfirmedDates();
                }
            }
        }

        // return true if some of the dates have been set -> an update must be done
        return ! _salesDeliveryDateControlMapCaller.equal(salesDeliveryDateControlMapInitial);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReqCalcExplode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a master scheduling when it is required.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    protected void runReqCalcExplode(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(this.deliveryDateControlType(_salesDeliveryDateControlMapCaller))
            && inventMovement)
        {
            setPrefix(strFmt("@SYS321134",ReqPlanSched::defaultDynamicId()));

            ReqCalcExplode reqCalcExplode = this.createReqCalcExplode();

            if (forceReqCalcExplodeCoverageDeletion
                || reqCalcExplode.hasPreviousSchedulingError(inventMovement.inventTransOriginId(), InventMovement.transRefId(), ReqRefType::Sales)
                || reqCalcExplode.isQtyChangedAndCoveredByOnHand(inventMovement.inventTransOriginId(), InventMovement.transRefId(), ReqRefType::Sales, inventMovement.transQty()))
            {
                reqCalcExplode.parmDeleteCoverage(true);
            }
            if (reqCalcExplode)
            {
                int infologLines = infologLine();

                reqCalcExplode.parmMultiUserConcurrencyAllowed(true);
                reqCalcExplode.runOperation();
                hasSchedulingError = reqCalcExplode.hasErrors();
                if (reqCalcExplode.parmAutoReserveCoverage()
                    || _salesDeliveryDateControlMapCaller.RecVersion != SalesLine::findRecId(_salesDeliveryDateControlMapCaller.RecId).RecVersion)
                {
                    _salesDeliveryDateControlMapCaller.reread();
                }

                //explosion is silent during CTP, explosion form should be used to see error details
                infolog.clear(infologLines);

                if (hasSchedulingError)
                {
                    warning("@SCM:ReqCalcExplodeCtpConflict");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current <c>SalesDeliveryDateControlMap</c> map by using the new confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <param name="_shipDate">
    /// A date value that contains the new shipping date.
    /// </param>
    /// <param name="_receiptDate">
    /// A date value that holds the new receipt date.
    /// </param>
    protected void setConfirmedDates(
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller,
        TransDate   _shipDate       = _salesDeliveryDateControlMapCaller.ShippingDateRequested, 
        TransDate   _receiptDate    = _salesDeliveryDateControlMapCaller.ReceiptDateRequested)
    {
        if (this.shouldSetConfirmedDates(_salesDeliveryDateControlMapCaller))
        {
            _salesDeliveryDateControlMapCaller.ShippingDateConfirmed = _shipDate;
            _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed  = _receiptDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetConfirmedDates</Name>
				<Source><![CDATA[
    private boolean shouldSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (this.isDeliveryDateControlTypeMpsCTP(_salesDeliveryDateControlMapCaller))
        {
            SalesLine salesLine = _salesDeliveryDateControlMapCaller as SalesLine;
            
            if (salesLine 
                && salesLine.MPSFullRunCTPStatus == MPSFullRunCTPStatus::NotReady)
            {
                return false;
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryDateControlTypeMpsCTP</Name>
				<Source><![CDATA[
    internal boolean isDeliveryDateControlTypeMpsCTP(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        return MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeMpsCTP(this.deliveryDateControlType(_salesDeliveryDateControlMapCaller));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>