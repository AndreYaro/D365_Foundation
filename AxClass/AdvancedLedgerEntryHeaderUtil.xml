<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryHeaderUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AdvancedLedgerEntryHeaderUtil</c> class provides the <c>AdvancedLedgerEntryHeader</c> table strategies
///    base default values and validation.
/// </summary>
public class AdvancedLedgerEntryHeaderUtil
{
    boolean                     isCreate;
    boolean                     isInteractiveContext;
    AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
    AxAdvancedLedgerEntryHeader axAdvancedLedgerEntryHeader;

    #AdvancedLedgerEntryFaults

    #define.default('default')
    #define.validate('validate')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>AccountingDate</c> field of the <c>AdvancedLedgerEntryHeader</c> table.
    /// </summary>
    protected void defaultAccountingDate()
    {
        if (!advancedLedgerEntryHeader.AccountingDate)
        {
            axAdvancedLedgerEntryHeader.parmAccountingDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default values for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier of the field to set to the default values.
    /// </param>
    public void defaultField(fieldId _fieldId)
    {
        str              fieldName;
        str              methodName;
        SysDictClass     sysDictClass;
        InternalExternal internalStatusOriginal;

        internalStatusOriginal = axAdvancedLedgerEntryHeader.inputStatus();
        axAdvancedLedgerEntryHeader.inputStatus(InternalExternal::Internal);

        fieldName = fieldid2name(tablenum(AdvancedLedgerEntryHeader), _fieldId);
        methodName = #default + fieldName;
        sysDictClass = new SysDictClass(classidget(this));
        if (sysDictClass.hasObjectMethod(methodName))
        {
            sysDictClass.callObject(methodName, this);
        }

        axAdvancedLedgerEntryHeader.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReverseEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>ReverseEntry</c> field of the <c>AdvancedLedgerEntryHeader</c> table.
    /// </summary>
    protected void defaultReverseEntry()
    {
        if (AdvancedLedgerEntryHeader.ReverseDate != dateNull())
        {
            axAdvancedLedgerEntryHeader.parmReverseEntry(NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default field values for a <c>AdvancedLedgerEntryHeader</c> record.
    /// </summary>
    public void defaultRow()
    {
        InternalExternal internalStatusOriginal;

        internalStatusOriginal = axAdvancedLedgerEntryHeader.inputStatus();
        axAdvancedLedgerEntryHeader.inputStatus(InternalExternal::Internal);

        this.defaultTransactionNumber();
        this.defaultAccountingDate();
        this.defaultTransactionCurrency();
        this.defaultTransactionStatus();
        this.defaultWorkflowStatus();
        this.defaultReverseEntry();

        axAdvancedLedgerEntryHeader.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionCurrency</c> field of the <c>AdvancedLedgerEntryHeader</c> table.
    /// </summary>
    protected void defaultTransactionCurrency()
    {
        if (!axAdvancedLedgerEntryHeader.isFieldSet(fieldnum(AdvancedLedgerEntryHeader, TransactionCurrency)))
        {
            axAdvancedLedgerEntryHeader.parmTransactionCurrency(Ledger::accountingCurrency());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a default value for the <c>TransactionNumber</c> field of the <c>AdvancedLedgerEntryHeader</c> table.
    /// </summary>
    protected void defaultTransactionNumber()
    {
        Num num;
        NumberSeq numberSeq;
        NumberSequenceReference numberSequenceReference;

        if (isCreate)
        {
            // The transaction number is always determined once.  If the consumer provided a value, we need to ignore
            // it and determine the next transaction number.
            if (!advancedLedgerEntryHeader.TransactionNumber)
            {
                ttsbegin;

                // Validate the number sequence for Advanced ledger entry Number.
                if (AdvancedLedgerEntryManager::checkAdvancedLedgerEntryNumberSequence())
                {
                    numberSequenceReference = NumberSeqReference::findReference(extendedtypenum(AdvancedLedgerEntryId));
                    Debug::assert(numberSequenceReference != null);

                    numberSeq = NumberSeq::newGetNum(numberSequenceReference, true);
                    num = numberSeq.num();

                    // Set the transaction number to the next number in the number sequence.
                    axAdvancedLedgerEntryHeader.parmTransactionNumber(num);
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a default value for the <c>TransactionStatus</c> field of the <c>AdvancedLedgerEntryHeader</c> table.
    /// </summary>
    protected void defaultTransactionStatus()
    {
        if (advancedLedgerEntryHeader.TransactionStatus != AdvancedLedgerEntryTransactionStatus::Posted)
        {
            axAdvancedLedgerEntryHeader.parmTransactionStatus(AdvancedLedgerEntryTransactionStatus::Draft);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a default value for the <c>WorkflowStatus</c> field on the <c>AdvancedLedgerEntryHeader</c> table.
    /// </summary>
    protected void defaultWorkflowStatus()
    {
        if (!axAdvancedLedgerEntryHeader.isFieldSet(fieldnum(AdvancedLedgerEntryHeader, WorkFlowStatus)))
        {
            // Check, if active ALE workflow template exist and then update the workflow status and workflow state accordingly.
            if (WorkflowTable::findActiveTemplate(workFlowTypeStr(AdvancedLedgerEntryTemplate)))
            {
                axAdvancedLedgerEntryHeader.parmWorkFlowStatus(AdvancedLedgerEntryWFApprovalStatus::Draft);
                axAdvancedLedgerEntryHeader.parmWorkflowApprovalState(AdvancedLedgerEntryWFApprovalState::NotSubmitted);
            }
            else
            {
                axAdvancedLedgerEntryHeader.parmWorkFlowStatus(0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AdvancedLedgerEntryHeaderUtil</c> class.
    /// </summary>
    /// <param name="_axAdvancedLedgerEntryHeader">
    /// An instance of the <c>AxAdvancedLedgerEntryHeader</c> class that represents the data that is
    /// defaulted and validated.
    /// </param>
    /// <param name="_isInteractiveContext">
    /// A boolean value that indicates the caller context.
    /// </param>
    /// <param name="_isCreate">
    /// A boolean value that indicates if a transaction is being created or updated.
    /// </param>
    protected void new(
        AxAdvancedLedgerEntryHeader _axAdvancedLedgerEntryHeader,
        boolean                     _isInteractiveContext,
        boolean                     _isCreate)
    {
        axAdvancedLedgerEntryHeader = _axAdvancedLedgerEntryHeader;

        advancedLedgerEntryHeader = axAdvancedLedgerEntryHeader.advancedLedgerEntryHeader();

        isInteractiveContext = _isInteractiveContext;

        isCreate = _isCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier that corresponds with the field to be validated.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldId)
    {
        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        boolean isValid = true;
        ExecutePermission perm;

        perm = new ExecutePermission();

        // Grant permission to execute the DictClass.callObject method.
        perm.assert();

        fieldName = fieldid2name(tablenum(AdvancedLedgerEntryHeader), _fieldId);
        methodName = #validate + fieldName;

        sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            isValid = sysDictClass.callObject(methodName, this);
        }

        // Close the code access permission scope.
        CodeAccessPermission::revertAssert();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>FiscalCalendarPeriod</c> field in the <c>AdvancedLedgerEntryHeader</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>FiscalCalendarPeriod</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateFiscalCalendarPeriod()
    {
        boolean              isValid = false;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        fiscalCalendarPeriod = FiscalCalendarPeriod::find(advancedLedgerEntryHeader.FiscalCalendarPeriod);

        isValid = fiscalCalendarPeriod.StartDate <= advancedLedgerEntryHeader.AccountingDate &&
                    fiscalCalendarPeriod.EndDate >= advancedLedgerEntryHeader.AccountingDate;

        if (!isValid)
        {
            throw AifFault::faultList(strFmt("@SYS4000257", fiscalCalendarPeriod.Name), #ValidationFailed);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>JournalizingDefinition</c> field of the <c>AdvancedLedgerEntryHeader</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>JournalizingDefinition</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateJournalizingDefinition()
    {
        return AdvancedLedgerEntryManager::checkValidJournalizingDefinition(advancedLedgerEntryHeader.JournalizingDefinition, advancedLedgerEntryHeader.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReasonTableRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>ReasonTableRef</c> field in the <c>AdvancedLedgerEntryHeader</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>ReasonTableRef</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateReasonTableRef()
    {
        boolean isValid = true;
        ReasonTableRef reasonTableRef;

        if (advancedLedgerEntryHeader.ReasonTableRef != 0)
        {
            reasonTableRef = ReasonTableRef::find(advancedLedgerEntryHeader.ReasonTableRef);

            if (ReasonTable::find(reasonTableRef.Reason).Ledger == NoYes::No)
            {
                throw AifFault::faultList(strfmt("@SYS34253", ReasonCodeAccountTypeAll::Ledger), #AdvancedLedgerEntryReasonCodeLedger);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReverseEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ReverseEntry</c> field of the <c>AdvancedLedgerEntryHeader</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>ReverseEntry</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateReverseEntry()
    {
        boolean isValid = true;

        if (advancedLedgerEntryHeader.ReverseEntry == NoYes::Yes && advancedLedgerEntryHeader.ReverseDate == dateNull())
        {
            throw AifFault::faultList(strfmt("@SPS1378", fieldpname(AdvancedLedgerEntryHeader, ReverseDate)), #ValidationFailed);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>TransactionCurrency</c> field of the <c>AdvancedLedgerEntryHeader</c> table
    ///    is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>TransactionCurrency</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateTransactionCurrency()
    {
        boolean isValid = true;

        if (!advancedLedgerEntryHeader.TransactionCurrency)
        {
            isValid = AifFault::checkFailedLogFault(strfmt("@SPS1913", fieldPName(advancedLedgerEntryHeader, TransactionCurrency)));
        }
        else if (advancedLedgerEntryHeader.TransactionCurrency && !AdvancedLedgerEntryManager::validateCurrency(advancedLedgerEntryHeader.TransactionCurrency))
        {
             throw AifFault::faultList("@SPS2350", #ValidationFailed);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>AdvancedLedgerEntryHeaderUtil</c> class.
    /// </summary>
    /// <param name="_axAdvancedLedgerEntryHeader">
    /// An instance of the <c>AxAdvancedLedgerEntryHeader</c> class that represents the data that is
    /// defaulted and validated.
    /// </param>
    /// <returns>
    /// An instance of the <c>AdvancedLedgerEntryHeaderUtil</c> class.
    /// </returns>
    public static AdvancedLedgerEntryHeaderUtil construct(AxAdvancedLedgerEntryHeader _axAdvancedLedgerEntryHeader)
    {
        boolean                       isCreate;
        boolean                       isInteractiveContext;
        AdvancedLedgerEntryHeaderUtil advancedLedgerEntryHeaderUtil;

        isCreate = (_axAdvancedLedgerEntryHeader.advancedLedgerEntryHeader().RecId == 0);

        isInteractiveContext = FormDataUtil::isFormDataSource(_axAdvancedLedgerEntryHeader.advancedLedgerEntryHeader());

        advancedLedgerEntryHeaderUtil = new AdvancedLedgerEntryHeaderUtil(_axAdvancedLedgerEntryHeader, isInteractiveContext, isCreate);

        return advancedLedgerEntryHeaderUtil;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>