<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTransportTender</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsTransportTender</c> class is used to handle when a transportation tender is submitted/denied/confirmed/accepted to the system.
/// </summary>
class TmsTransportTender
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTransTenderNum</Name>
				<Source><![CDATA[
	    /// <summary>
	/// Updates transportation order number of each route segment.
	/// </summary>
	/// <param name="_source">
	/// Source containing route segments.
	/// </param>
	/// <param name="_orderNum">
	/// Order number to be set.
	/// </param>
	/// <param name="_refType">
	/// The transportation tender reference type.
	/// </param>
    void setTransTenderNum(Common                       _source,
                           TMSTransportationOrderNum    _orderNum,
                           TMSTenderRefType             _refType)
    {
        TMSRoute            route;
        TMSRouteSegment     routeSegment;
        TMSRouteSegmentLoad segmentLoad;
        TMSSequence         prevSequence;

        ttsbegin;

        switch (_refType)
        {
            case TMSTenderRefType::Route:
                route = _source;
                route.TransportationOrderNum = _orderNum;
                route.update();

                while select forupdate routeSegment
                    where routeSegment.RouteCode                == route.RouteCode &&
                          routeSegment.TransportationOrderNum   == ''
                    outer join forupdate segmentLoad
                        where segmentLoad.RouteCode                 == route.RouteCode          &&
                              segmentLoad.Sequence                  == routeSegment.Sequence    &&
                              segmentLoad.TransportationOrderNum    == ''
                {
                    if (!prevSequence || prevSequence != routeSegment.Sequence)
                    {
                        routeSegment.TransportationOrderNum = _orderNum;
                        routeSegment.doUpdate();
                        prevSequence = routeSegment.Sequence;
                    }
                    if (segmentLoad)
                    {
                        segmentLoad.TransportationOrderNum = _orderNum;
                        segmentLoad.doUpdate();
                    }
                }
                break;

            case TMSTenderRefType::RouteSegment:
                routeSegment = _source;
                routeSegment.TransportationOrderNum = _orderNum;
                routeSegment.update();

                while select forupdate segmentLoad
                    where segmentLoad.RouteCode                 == routeSegment.RouteCode   &&
                          segmentLoad.Sequence                  == routeSegment.Sequence    &&
                          segmentLoad.TransportationOrderNum    == ''
                {
                    segmentLoad.TransportationOrderNum = _orderNum;
                    segmentLoad.doUpdate();
                }

                select firstonly forupdate route
                    where route.RouteCode == routeSegment.RouteCode;

                route.TransportationOrderNum = _orderNum;
                route.doUpdate();
                break;

            case TMSTenderRefType::RouteSegLoad:
                segmentLoad = _source;
                segmentLoad.TransportationOrderNum = _orderNum;
                segmentLoad.update();
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOriginDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a origin / destination zip and country were set
    /// </summary>
    /// <param name="_transTender">
    /// Transportation tender record
    /// </param>
    /// <exception cref="Exception::Error">
    /// Route must have an origin and destination set to create transportation tender.
    /// </exception>
    public void validateOriginDestination(TMSTransportationTender _transTender)
    {
        LogisticsPostalAddress          originAddress;
        LogisticsPostalAddress          destinationAddress;

        originAddress       = _transTender.originPostalAddress();
        destinationAddress  = _transTender.destinationPostalAddress();

        if (!(destinationAddress.ZipCode || destinationAddress.CountryRegionId)
        ||  !(originAddress.ZipCode      || originAddress.CountryRegionId))
        {
            throw error(strfmt("@TRX:TMSReferenceError", _transTender.TenderRefType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptTender</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the status of the tender to accepted.
    /// </summary>
    /// <param name="_transportationTender">
    ///     The transportation tender object
    /// </param>
    public static void acceptTender(TMSTransportationTender _transportationTender)
    {
        TMSTransportationTender::updateTenderStatus(_transportationTender, TMSTenderStatus::Accepted);

        if (TMSApplyTransportationTenderRateToRouteSegmentFlight::instance().isEnabled())
        {
            TmsTransportTender::applyTransportationTenderRate(_transportationTender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTransportationTenderRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applys the rate of the tender with the accepted type.
    /// </summary>
    /// <param name="_transportationTender">
    ///     The transportation tender object
    /// </param>
    public static void applyTransportationTenderRate(TMSTransportationTender _transportationTender)
    {
        TMSTransportationTender transportationTender = TMSTransportationTender::find(_transportationTender.TransportationOrderNum);

        if (transportationTender.TenderRefType == TMSTenderRefType::RouteSegment
            && transportationTender.TenderStatus == TMSTenderStatus::Accepted
            && transportationTender.CurrencyCode)
        {
            ttsbegin;
            TMSRouteSegment routeSegment = TMSRouteSegment::find(
                transportationTender.RefId,
                transportationTender.Sequence,
                true);

            if (routeSegment.RecId)
            {
                routeSegment.ShipperRate = TMSGlobal::convertCurrency(transportationTender.CurrencyCode, routeSegment.CurrencyCode, transportationTender.ConfirmedRate);
                routeSegment.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transportation tender record for a local buffer.
    /// </summary>
    public static void createTransTender(Common _source)
    {
        TMSTransportationTender _transTender;
        TmsTransportTender::createTransTenderRecord(_source, _transTender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransTenderRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transportation tender record for an external buffer.
    /// </summary>
    /// <param name = "_source">A Source record for which to create a transportation tender.</param>
    /// <param name = "_transTender">A <c>TMSTransportationTender</c> buffer that represents a transportation tender</param>
    /// <returns>true if creation succeeded; otherwise false</returns>
    public static boolean createTransTenderRecord(Common _source, TMSTransportationTender _transTender)
    {
        TMSTransportTender      transportTender = new TMSTransportTender();
        try
        {
            ttsbegin;
            _transTender.setTransportationOrderNum();

            switch (_source.TableId)
            {
                case tableNum(WHSLoadTable):
                    _transTender.initFromLoadTable(_source);
                    break;

                case tableNum(TMSRoute):
                    transportTender.setTransTenderNum(_source, _transTender.TransportationOrderNum, TMSTenderRefType::Route);
                    _transTender.initFromRoute(_source);
                    break;

                case tableNum(TMSRouteSegment):
                    transportTender.setTransTenderNum(_source, _transTender.TransportationOrderNum, TMSTenderRefType::RouteSegment);
                    _transTender.initFromRouteSegment(_source);
                    break;

                case tableNum(TMSRouteSegmentLoad):
                    transportTender.setTransTenderNum(_source, _transTender.TransportationOrderNum, TMSTenderRefType::RouteSegLoad);
                    _transTender.initFromRouteSegmentLoad(_source);
                    break;
            }
            transportTender.validateOriginDestination(_transTender);
            _transTender.insert();
            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>denyTender</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the tender status to denied
    /// </summary>
    /// <param name="_transportationTender">
    ///     The transportation tender object
    /// </param>
    public static void denyTender(TMSTransportationTender _transportationTender)
    {
        TMSTransportationTender::updateTenderStatus(_transportationTender, TMSTenderStatus::Denied);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitTender</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Submits the tender to be saved
    /// </summary>
    /// <param name="_transportationTender">
    ///     The transportation tender object
    /// </param>
    /// <exception cref="Exception::Warning">
    ///     Requested rate or date is not specified
    /// </exception>
    public static void submitTender(TMSTransportationTender _transportationTender)
    {
        TMSTransportationTender transportationTender;
        TMSTransportTender      transportTender;

        try
        {
            ttsbegin;

            transportationTender = TMSTransportationTender::find(_transportationTender.TransportationOrderNum, true);

            if (!transportationTender.RequestedRate || !transportationTender.RequestedPickupDateTime)
            {
                throw warning("@TRX1433");
            }

            transportTender = new TMSTransportTender();
            transportTender.validateOriginDestination(transportationTender);

            TMSTransportationTender::updateTenderStatus(transportationTender, TMSTenderStatus::Submitted);

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tenderConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Confirms the tender
    /// </summary>
    /// <param name="_transportationTender">
    ///     The transportation tender object
    /// </param>
    /// <param name="_rate">
    ///     The tender rate
    /// </param>
    /// <param name="_dateTime">
    ///     The tender date and time
    /// </param>
    public static void tenderConfirmed(TMSTransportationTender    _transportationTender,
                                       TMSConfirmedRate           _rate,
                                       TMSConfirmedPickupDateTime _dateTime)
    {
        TMSTransportationTender transportationTender;

        ttsbegin;

        transportationTender = TMSTransportationTender::find(_transportationTender.TransportationOrderNum, true);

        transportationTender.ConfirmedPickupDateTime  = _dateTime;
        transportationTender.ConfirmedRate            = _rate;
        transportationTender.TenderStatus             = TMSTenderStatus::Confirmed;
        transportationTender.update();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>