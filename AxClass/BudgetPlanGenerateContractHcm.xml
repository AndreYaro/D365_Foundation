<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateContractHcm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateContractHcm</c> class will be used as the data contract class for the
/// <c>BudgetPlanGenerateServiceHcm</c> service.
/// </summary>
[DataContractAttribute, SysOperationAlwaysInitializeAttribute]
public class BudgetPlanGenerateContractHcm extends BudgetPlanGenerateContract
{
    container                       sourceHcmPositionForecastPackedQuery;
    LedgerDimensionBudgetPlanning   targetBudgetPlanScenarioMainAccount;
    NoYes                           targetBudgetPlanLineIncludePosition;
    BudgetPlanningProcessRecId      sourceBudgetPlanBudgetPlanProcess;
    BudgetPlanScenarioRecId         sourceBudgetPlanScenarioRecId;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        targetBudgetPlanScenarioMainAccount,
        targetBudgetPlanLineIncludePosition,
        sourceBudgetPlanScenarioRecId,
        sourceBudgetPlanBudgetPlanProcess
    #ENDMACRO

    #DEFINE.Version1(1)
    #LOCALMACRO.CurrentListV1
        targetBudgetPlanScenarioMainAccount,
        targetBudgetPlanLineIncludePosition
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super (this, null, null, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryBudgetPlanGenerateHcm</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute,
        AifQueryTypeAttribute('queryBudgetPlanGenerateHcm','')
    ]
    public str parmQueryBudgetPlanGenerateHcm(
        str queryBudgetPlanGenerateHcm = SysOperationHelper::base64Encode(sourceHcmPositionForecastPackedQuery))
    {
        sourceHcmPositionForecastPackedQuery = SysOperationHelper::base64Decode(queryBudgetPlanGenerateHcm);

        return queryBudgetPlanGenerateHcm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanProcess</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public BudgetPlanningProcessRecId parmSourceBudgetPlanProcess(BudgetPlanningProcessRecId _sourceBudgetPlanBudgetPlanProcess = sourceBudgetPlanBudgetPlanProcess)
    {
        sourceBudgetPlanBudgetPlanProcess = _sourceBudgetPlanBudgetPlanProcess;

        return sourceBudgetPlanBudgetPlanProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBudgetPlanScenarioRecId</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public BudgetPlanScenarioRecId parmSourceBudgetPlanScenarioRecId(BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId = sourceBudgetPlanScenarioRecId)
    {
        sourceBudgetPlanScenarioRecId = _sourceBudgetPlanScenarioRecId;

        return sourceBudgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetPlanLineIncludePosition</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmTargetBudgetPlanLineIncludePosition(NoYes _targetBudgetPlanLineIncludePosition = targetBudgetPlanLineIncludePosition)
    {
        targetBudgetPlanLineIncludePosition = _targetBudgetPlanLineIncludePosition;

        return targetBudgetPlanLineIncludePosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetPlanScenarioMainAccount</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public LedgerDimensionBudgetPlanning parmTargetBudgetPlanScenarioMainAccount(
        LedgerDimensionBudgetPlanning _targetBudgetPlanScenarioMainAccount = targetBudgetPlanScenarioMainAccount)
    {
        targetBudgetPlanScenarioMainAccount = _targetBudgetPlanScenarioMainAccount;

        return targetBudgetPlanScenarioMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            case #Version1:
                [version, #CurrentListV1] = _packedClass;
               break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanGenerateContractHcm</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateContractHcm</c> class.
    /// </returns>
    public static BudgetPlanGenerateContractHcm construct()
    {
        return new BudgetPlanGenerateContractHcm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method unpacks the query.
    /// </summary>
    /// <returns>
    /// Query object of BudgetPlanGenerateHcmV2 or BudgetPlanGenerateHcm.
    /// </returns>
    public Query getQuery()
    {
        return new Query(sourceHcmPositionForecastPackedQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method takes a query object, encodes it and stores the packed query.
    /// </summary>
    /// <param name="_query">
    /// BudgetPlanGenerateHcmV2 or BudgetPlanGenerateHcm query object.
    /// </param>
    public void setQuery(Query _query)
    {
        sourceHcmPositionForecastPackedQuery = _query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from controller to set the query on contract.
    /// </summary>
    public void initQuery()
    {
        Query newQuery;

        if (BudgetLinkPositionToMultipleForecastDetailsFlight::instance().isEnabled())
        {
            newQuery = new Query(queryStr(BudgetPlanGenerateHcmV2));
        }
        else
        {
            newQuery = new Query(queryStr(BudgetPlanGenerateHcm));
        }

        this.setQuery(newQuery);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>