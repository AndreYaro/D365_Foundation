<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobSchedulerMove</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobSchedulerMove</c> class moves the expected date and time of a kanban job.
/// </summary>
public class KanbanJobSchedulerMove extends KanbanJobScheduler
{
    KanbanJobSchedule   moveFromKanbanJobSchedule;  // the previous kanbanJobSchedule record
    List                listKanbanJobsToMove;
    TransDateTime       lastMoveExpectedDateTime;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMoveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range of kanban jobs to the list of kanban jobs that have to be moved.
    /// </summary>
    /// <param name="_plannedPeriod">
    /// The planned period.
    /// </param>
    /// <param name="_workCell">
    /// The work cell.
    /// </param>
    /// <param name="_lowerBoundSequence">
    /// A sequence number of the <c>KanbanJobSchedule</c> table that identifies the lower range boundary.
    /// </param>
    /// <param name="_upperBoundSequence">
    /// A sequence number of the <c>KanbanJobSchedule</c> table that identifies the upper range boundary.
    /// </param>
    /// <param name="_includeLowerBoundSequence">
    /// A Boolean value that indicates whether the lower boundary is included in the range.
    /// </param>
    /// <param name="_includeUpperBoundSequence">
    /// A Boolean value that indicates whether the upper boundary is included in the range.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addToMoveList(
        KanbanJobSchedulePlannedPeriod _plannedPeriod,
        WrkCtrResourceGroupRefRecId    _workCell,
        LineNum                        _lowerBoundSequence,
        LineNum                        _upperBoundSequence,
        boolean                        _includeLowerBoundSequence,
        boolean                        _includeUpperBoundSequence)
    {
        KanbanJobSchedule   kanbanJobSchedule;

        if (!listKanbanJobsToMove)
        {
            listKanbanJobsToMove = new List(Types::Int64);
        }

        while select Job from kanbanJobSchedule
            order by Sequence
            where kanbanJobSchedule.PlannedPeriod == _plannedPeriod
               && kanbanJobSchedule.WorkCell      == _workCell
               && (kanbanJobSchedule.Sequence     >  _lowerBoundSequence
               ||  (kanbanJobSchedule.Sequence    == _lowerBoundSequence
               &&   _includeLowerBoundSequence))
               && (kanbanJobSchedule.Sequence     <  _upperBoundSequence
               ||  (kanbanJobSchedule.Sequence    == _upperBoundSequence
               &&   _includeUpperBoundSequence))
        {
            listKanbanJobsToMove.addEnd(kanbanJobSchedule.Job);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMoveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a minimal list of kanban jobs that have to be moved.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Moved jobs must belong to the same work cell.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildMoveList()
    {
        lastMoveExpectedDateTime = DateTimeUtil::minValue();

        if (   kanbanJob.RecId
            && moveFromKanbanJobSchedule.RecId)
        {
            // find the original job in the schedule
            KanbanJobSchedule kanbanJobSchedule = KanbanJobSchedule::findJob(kanbanJob.RecId);

            if (kanbanJobSchedule.RecId)
            {
                if (moveFromKanbanJobSchedule.WorkCell != kanbanJobSchedule.WorkCell)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                if (moveFromKanbanJobSchedule.PlannedPeriod == kanbanJobSchedule.PlannedPeriod)
                {
                    if (moveFromKanbanJobSchedule.Sequence != kanbanJobSchedule.Sequence)
                    {
                        if (moveFromKanbanJobSchedule.Sequence < kanbanJobSchedule.Sequence)
                        {
                            // moving down in the same period
                            this.addToMoveList(moveFromKanbanJobSchedule.PlannedPeriod,
                                               moveFromKanbanJobSchedule.WorkCell,
                                               moveFromKanbanJobSchedule.Sequence,
                                               kanbanJobSchedule.Sequence,
                                               false,
                                               true);

                            lastMoveExpectedDateTime  = kanbanJobSchedule.previousKanbanJobSchedule().ExpectedDateTime;
                        }
                        else
                        {
                            // moving up in the same period
                            this.addToMoveList(moveFromKanbanJobSchedule.PlannedPeriod,
                                               moveFromKanbanJobSchedule.WorkCell,
                                               kanbanJobSchedule.Sequence,
                                               moveFromKanbanJobSchedule.Sequence,
                                               false,
                                               false);

                            lastMoveExpectedDateTime = moveFromKanbanJobSchedule.ExpectedDateTime;
                        }
                    }
                    else
                    {
                        // moving an existing schedule
                        this.addToMoveList(moveFromKanbanJobSchedule.PlannedPeriod,
                                           moveFromKanbanJobSchedule.WorkCell,
                                           kanbanJobSchedule.Sequence,
                                           realMax(),
                                           true,
                                           true);
                    }
                }
                else
                {
                    // moving to a different period
                    // in the previous period, close the gap
                    this.addToMoveList(moveFromKanbanJobSchedule.PlannedPeriod,
                                       moveFromKanbanJobSchedule.WorkCell,
                                       moveFromKanbanJobSchedule.Sequence,
                                       realMax(),
                                       false,
                                       false);

                    // in the new period, make room by pushing later jobs
                    this.addToMoveList(kanbanJobSchedule.PlannedPeriod,
                                       kanbanJobSchedule.WorkCell,
                                       kanbanJobSchedule.Sequence,
                                       realMax(),
                                       false,
                                       false);
                }
            }
            else
            {
                // the original jobs was removed from the schedule, close the gap
                this.addToMoveList(moveFromKanbanJobSchedule.PlannedPeriod,
                                   moveFromKanbanJobSchedule.WorkCell,
                                   moveFromKanbanJobSchedule.Sequence,
                                   realMax(),
                                   false,
                                   false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the expected date and time of a kanban job and updates the schedule.
    /// </summary>
    /// <param name="_previousKanbanJobSchedule">
    /// The previous <c>KanbanJobSchedule</c> record.
    /// </param>
    /// <param name="_kanbanJobRefRecId">
    /// The record ID of the <c>KanbanJob</c> record to move.
    /// </param>
    /// <returns>
    /// The moved <c>KanbanJobSchedule</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected KanbanJobSchedule moveKanbanJob(
        KanbanJobSchedule _previousKanbanJobSchedule,
        KanbanJobRefRecId _kanbanJobRefRecId)
    {
        KanbanJobSchedule               kanbanJobSchedule;
        KanbanJobSchedule               previousKanbanJobSchedule = _previousKanbanJobSchedule;

        ttsbegin;

        KanbanJob kanbanJobLocal = KanbanJob::find(_kanbanJobRefRecId,true);
        scheduleDateTime = kanbanJobLocal.ExpectedDateTime;

        if (this.canMove(kanbanJobLocal))
        {
            WrkCtrResourceGroup wrkCtrResourceGroupLocal = this.wrkCtrResourceGroup();

            if (kanbanJobLocal.WorkCell != wrkCtrResourceGroupLocal.RecId)
            {
                throw error(strFmt("@SYS340885",kanbanJobLocal.kanbanId(),kanbanJobLocal.PlanActivityName));
            }

            if (this.lockWorkCell(wrkCtrResourceGroupLocal.RecId))
            {
                LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity = this.leanWorkCellScheduleCapacity();

                // move & update schedule
                kanbanJobSchedule = KanbanJobSchedule::findJob(kanbanJobLocal.RecId,true);
                KanbanJobCapacitySum kanbanJobCapacitySum = KanbanJobCapacitySum::findJob(kanbanJobLocal.RecId);

                if (   !previousKanbanJobSchedule
                    || previousKanbanJobSchedule.PlannedPeriod != kanbanJobSchedule.PlannedPeriod)
                {
                    previousKanbanJobSchedule = kanbanJobSchedule.previousKanbanJobSchedule();
                }

                TransDateTime startDateTime = this.startDateTime(leanWorkCellScheduleCapacity,previousKanbanJobSchedule);

                this.setJobScheduleExpectedStartEndDateTime(kanbanJobSchedule,
                                                            kanbanJobLocal,
                                                            startDateTime,
                                                            kanbanJobCapacitySum.PlannedCapacitySumSeconds,
                                                            leanWorkCellScheduleCapacity.calendarId(),
                                                            leanWorkCellScheduleCapacity.capacityToDateTime());
                kanbanJobSchedule.update();

                // update job
                kanbanJobLocal.ExpectedDateTime = kanbanJobSchedule.ExpectedDateTime;
                kanbanJobLocal.update();

                // update due date for previous jobs of same kanban
                this.setPrevJobDueDateTime(kanbanJobSchedule);

                // set expected date on next transfer job(s)
                this.setNextJobExpectedDateTime(kanbanJobLocal);

                // release lock
                this.releaseLockWorkCell(wrkCtrResourceGroupLocal.RecId);
            }
        }
        ttscommit;

        return kanbanJobSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveKanbanJobSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves kanban jobs in the schedule.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void moveKanbanJobSchedule()
    {
        // create a minimal list of jobs to move
        this.buildMoveList();

        ttsbegin;

        // process the list
        while (   listKanbanJobsToMove
               && listKanbanJobsToMove.elements())
        {
            KanbanJobSchedule kanbanJobSchedule = null;
            ListEnumerator le = listKanbanJobsToMove.getEnumerator();
            while (le.moveNext())
            {
                KanbanJobRefRecId kanbanJobRefRecId = le.current();
                kanbanJobSchedule = this.moveKanbanJob(kanbanJobSchedule,kanbanJobRefRecId);
            }

            listKanbanJobsToMove = null;

            // if for some reason (for example changed calendar or capacity settings) the last job that was
            // moved did not get the expected date/time, the list of jobs to move is extended to the end of the
            // planned period
            if (   lastMoveExpectedDateTime != DateTimeUtil::minValue()
                && lastMoveExpectedDateTime != kanbanJobSchedule.ExpectedDateTime)
            {
                this.addToMoveList(kanbanJobSchedule.PlannedPeriod,
                                   kanbanJobSchedule.WorkCell,
                                   kanbanJobSchedule.Sequence,
                                   realMax(),
                                   false,
                                   false);

                lastMoveExpectedDateTime = DateTimeUtil::minValue();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMoveFromKanbanJobSchedule</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJobSchedule parmMoveFromKanbanJobSchedule(KanbanJobSchedule _moveFromKanbanJobSchedule = moveFromKanbanJobSchedule)
    {
        moveFromKanbanJobSchedule = _moveFromKanbanJobSchedule;
        return moveFromKanbanJobSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the scheduling actions.
    /// </summary>
    protected void runScheduler()
    {
        this.moveKanbanJobSchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the schedule date.
    /// </summary>
    /// <returns>
    /// The schedule date.
    /// </returns>
    protected TransDateTime scheduleDateTime()
    {
        return scheduleDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanJobScheduler construct()
    {
        return new KanbanJobSchedulerMove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobSchedulerMove</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The first <c>KanbanJob</c> record to be moved in the schedule.
    /// </param>
    /// <param name="_moveFromKanbanJobSchedule">
    /// The initial <c>KanbanJobSchedule</c> record to move.
    /// </param>
    /// <param name="_rootKanbanJobScheduler">
    /// An instance of the <c>KanbanJobScheduler</c> class that is used to initialize the instance;
    /// optional.
    /// </param>
    /// <param name="_lockOwnerKanbanJobScheduler">
    /// A related instance of the <c>KanbanJobScheduler</c> class that is used for locking work cells;
    /// optional.
    /// </param>
    /// <returns>
    /// The new instance of the <c>KanbanJobSchedulerMove</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobScheduler newStandard(
        KanbanJob                    _kanbanJob,
        KanbanJobSchedule            _moveFromKanbanJobSchedule,
        KanbanJobScheduler           _rootKanbanJobScheduler      = null,
        KanbanJobScheduler           _lockOwnerKanbanJobScheduler = _rootKanbanJobScheduler)
    {
        KanbanJobSchedulerMove  kanbanJobSchedulerMove = KanbanJobSchedulerMove::construct();

        kanbanJobSchedulerMove.parmKanbanJob(_kanbanJob);
        kanbanJobSchedulerMove.parmMoveFromKanbanJobSchedule(_moveFromKanbanJobSchedule);
        kanbanJobSchedulerMove.parmRootKanbanJobScheduler(_rootKanbanJobScheduler);
        kanbanJobSchedulerMove.parmLockOwnerKanbanJobScheduler(_lockOwnerKanbanJobScheduler);

        return kanbanJobSchedulerMove;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
