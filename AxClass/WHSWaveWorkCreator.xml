<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveWorkCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveWorkCreator</c> class is used to create work and block work during work creation.
/// </summary>
internal final class WHSWaveWorkCreator
{
    private WHSWaveTable waveTable;
    private WHSWaveTemplateTable waveTemplate;
    private WHSWorkBuildId workBuildId;
    private WHSWaveExecutionID waveExecutionId;
    private WHSWaveMethodStatusHandler waveMethodStatusHandler;
    private WHSWorkCreateWorkOrderType workCreateWorkOrderType;
    private WhsPostEngine postEngine;
    private boolean isWorkAlreadyBlockedForExecutingWave;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPostEngine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WhsPostEngine parmPostEngine(WhsPostEngine _postEngine = postEngine)
    {
        postEngine = _postEngine;
        return postEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsWorkAlreadyBlockedForExecutingWave</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsWorkAlreadyBlockedForExecutingWave(boolean _isWorkAlreadyBlockedForExecutingWave = isWorkAlreadyBlockedForExecutingWave)
    {
        isWorkAlreadyBlockedForExecutingWave = _isWorkAlreadyBlockedForExecutingWave;
        return isWorkAlreadyBlockedForExecutingWave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveTable parmWaveTable(WHSWaveTable _waveTable = waveTable)
    {
        if (_waveTable != waveTable)
        {
            waveTable = _waveTable;
            waveTemplate = WHSWaveTemplateTable::find(waveTable.WaveTemplateName);
        }
        return waveTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = workBuildId)
    {
        workBuildId = _workBuildId;
        return workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;
        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveMethodStatusHandler</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveMethodStatusHandler parmWaveMethodStatusHandler(WHSWaveMethodStatusHandler _waveMethodStatusHandler = waveMethodStatusHandler)
    {
        waveMethodStatusHandler = _waveMethodStatusHandler;
        return waveMethodStatusHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateWorkOrderType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkCreateWorkOrderType parmWorkCreateWorkOrderType(WHSWorkCreateWorkOrderType _workCreateWorkOrderType = workCreateWorkOrderType)
    {
        workCreateWorkOrderType = _workCreateWorkOrderType;
        return workCreateWorkOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWaveWorkCreator newFromWaveTable(WHSWaveTable _waveTable)
    {
        var waveWorkCreator = new WHSWaveWorkCreator();
        waveWorkCreator.parmWaveTable(_waveTable);
        return waveWorkCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPostEngine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWaveWorkCreator newFromPostEngine(WhsPostEngine _postEngine)
    {
        var waveWorkCreator = new WHSWaveWorkCreator();
        waveWorkCreator.parmPostEngine(_postEngine);
        waveWorkCreator.parmWaveTable(_postEngine.parmWaveTable());
        waveWorkCreator.parmWaveExecutionId(_postEngine.parmWaveExecutionId());

        return waveWorkCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCleanUpTempTable</Name>
				<Source><![CDATA[
    private boolean shouldCleanUpTempTable()
    {
        return workCreateWorkOrderType == WHSWorkCreateWorkOrderType::WorkOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkForWave</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkBuildId createWorkForWave()
    {
        WHSWorkCreateWave workCreate = WHSWorkCreateWave::construct(waveTable, waveTable.getWorkBuildId());
        workCreate.parmWorkCreateWorkOrderType(workCreateWorkOrderType);
        workCreate.parmOrginType(WHSOriginType::Wave);
        workCreate.parmWaveExecutionId(waveExecutionId);
        workCreate.parmCreatedBy(curUserId());
        workCreate.parmWorkTransType(WHSWaveTable::getWorkTransType(waveTable.WaveId));
        workCreate.parmParmWaveId(waveTable.WaveId);

        if (waveMethodStatusHandler)
        {
            workCreate.parmWaveMethodStatusHandler(waveMethodStatusHandler);
        }

        WHSWorkBuildId locWorkBuildId = workCreate.processTempTable();

        if (this.shouldCleanUpTempTable())
        {
            workCreate.cleanupTempTable();
        }

        this.parmWorkBuildId(locWorkBuildId);
        this.checkCreatedWorkOrders();

        return locWorkBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreatedWorkOrders</Name>
				<Source><![CDATA[
    private void checkCreatedWorkOrders()
    {
        WHSWorkOrderInterface workOrderInterface = WHSWorkCreateWorkOrderAbstractFactory::createInstanceFromWorkOrderType(workCreateWorkOrderType).createWorkOrderInterface();
      
        WHSWorkId invalidWorkId = workOrderInterface.findFirstWorkWithPickLineAfterLastPutLine(workBuildId, waveTable.WaveId);

        if (invalidWorkId)
        {
            throw error(strFmt("@WAX:Error_WorkWithPickLinesAfterPutLinesCreatedDuringWaveProcessing", invalidWorkId, waveTable.WaveId, workBuildId, waveExecutionId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockWorkDuringWorkCreation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal void blockWorkDuringWorkCreation()
    {
        if (waveTemplate.AutoReleaseReplenWork)
        {
            this.unfreezeImmediateReplenWork();
        }

        this.blockWorkByWorkBuildId(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unfreezeImmediateReplenWork</Name>
				<Source><![CDATA[
    private void unfreezeImmediateReplenWork()
    {
        this.unfreezeImmediateReplenWorkWorkBlocking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unfreezeImmediateReplenWorkWorkBlocking</Name>
				<Source><![CDATA[
    private void unfreezeImmediateReplenWorkWorkBlocking()
    {
        WHSWaveTable replenWave;
        WHSWorkTable replenWork;

        // Only look at replenishment waves that were started after current demand wave,
        // this avoids modifying past executions of the wave.
        while select WorkId from replenWork
            exists join replenWave
                where replenWave.DemandWaveId           == waveTable.WaveId
                   && replenWave.ExecutingUTCDateTime   >= waveTable.ExecutingUTCDateTime
                   && replenWave.WorkBuildId            == replenWork.WorkBuildId
        {
            WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineAndDemandWaveCheck(replenWork.WorkId)
                .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::HeldWave);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockWorkByWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void blockWorkByWorkBuildId(boolean _validate)
    {
        boolean blockedByReplen = false;

        if (!_validate && !waveTemplate.AutoReleaseWave)
        {
            WHSWorkTable::setFrozenForBlockingReasonTypeByWorkBuildId(workBuildId, WHSWorkBlockingReasonType::HeldWave);
        }
        else
        {
            WHSWorkTable::freezeWorkWithReplen(workBuildId);
            blockedByReplen = true;
        }
        
        if (!blockedByReplen)
        {
            WHSWorkTable::freezeWorkWithReplen(workBuildId);
        }

        if (!isWorkAlreadyBlockedForExecutingWave && this.shouldBlockWorkWithExecutingWaveReason())
        {
            WHSWorkTable::setFrozenForBlockingReasonTypeByWorkBuildId(workBuildId, WHSWorkBlockingReasonType::ExecutingWave);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBlockWorkWithExecutingWaveReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the created work should be blocked with a blocking reason for executing wave.
    /// </summary>
    /// <returns>true if the created work should be blocked with a blocking reason for executing wave; false otherwise.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean shouldBlockWorkWithExecutingWaveReason()
    {
        return waveTable.useTaskBasedWaveProcessing(methodStr(WhsPostEngineBase, waveLabelPrinting), postEngine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockImmediateReplenWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void unBlockImmediateReplenWork()
    {
        if (waveTemplate.AutoReleaseReplenWork)
        {
            this.unfreezeImmediateReplenWork();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>