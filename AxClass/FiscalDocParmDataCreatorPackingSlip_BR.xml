<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorPackingSlip_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for generating a <c>FiscalDocumentParmData_BR</c> object
/// model for a packing slip posting scenario.
/// </summary>
class FiscalDocParmDataCreatorPackingSlip_BR extends FiscalDocumentParmDataCreator_BR
{
    SalesParmTable      salesParmTable;
    CustPackingSlipJour custPackingSlipJour;
    DeliverySlipTotals_BR salesTotals;
    SalesTable          salesTable;
    SalesParmUpdate     salesParmUpdate;
    SalesCarrier        salesCarrier;
    CustTrans           custTrans;

    FiscalDocumentType_BR fiscalDocumentType;
    List                custPackingSlipTransList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur2MST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms an amount from a given currency to company's reporting currency.
    /// </summary>
    /// <param name="_amountCur">
    /// Amount to be converted.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency to be converted from.
    /// </param>
    /// <param name="_exchRate">
    /// Exchange rate to be used in the convertion.
    /// </param>
    /// <returns>
    /// The amount in company's reporting currency.
    /// </returns>
    protected AmountMST amountCur2MST(AmountCur _amountCur, CurrencyCode _currencyCode, ExchRate _exchRate)
    {
        return CurrencyExchangeHelper::amountCur2MST(_amountCur, _currencyCode, _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR fiscalEstablishment()
    {
        FiscalEstablishment_BR fiscalEstablishment = InventSite::find(salesParmTable.InventSiteId).fiscalEstablishment();

        return fiscalEstablishment.IsClosedWarehouse ? FiscalEstablishment_BR::find(fiscalEstablishment.FiscalEstablishmentSalesIssuer) : fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return salesParmTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected recId fiscalReferenceSourceRecId()
    {
        return custPackingSlipJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected tableId fiscalReferenceSourceTableId()
    {
        return custPackingSlipJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document number from a given <c>CustPackingSlipJour</c>.
    /// </summary>
    /// <param name="_cusPackingSlipJour">
    /// <c>CustPackingSlipJour</c> to retrieve the number from.
    /// </param>
    /// <returns>
    /// The fiscal document number.
    /// </returns>
    protected InvoiceId getFiscalDocumentNumber(CustPackingSlipJour _cusPackingSlipJour)
    {
        NumberSeq               tmpNumberSeq = new NumberSeq();
        NumberSequenceTable     numberSequenceTableNum;

        if (custPackingSlipJour.isProforma())
        {
            return '';
        }

        numberSequenceTableNum = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(fiscalDocumentType.RecId);

        tmpNumberSeq.parmNumberSequenceId(numberSequenceTableNum.RecId);
        tmpNumberSeq.parmNumberSequenceCode(numberSequenceTableNum.NumberSequence);
        tmpNumberSeq.parmNumTableNum(numberSequenceTableNum);

        return tmpNumberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line amount in company's reporting currency.
    /// </summary>
    /// <param name="_salesLine">
    /// <c>SalesLine</c> buffer to retrieve the amount form.
    /// </param>
    /// <returns>
    /// The line amount in company's reporting currency.
    /// </returns>
    protected AmountMst getItemAmountMst(SalesLine _salesLine)
    {
        return _salesLine.lineAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    protected boolean hasCustVendTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR   fiscalDocument = new FiscalDocumentParmData_BR();

        fiscalDocument.parmRefRecId                         (custPackingSlipJour.RecId);
        fiscalDocument.parmRefTableId                       (custPackingSlipJour.TableId);

        fiscalDocument.parmAccountingDate                   (custPackingSlipJour.DeliveryDate);
        fiscalDocument.parmFiscalDocumentAccountNum         (custPackingSlipJour.OrderAccount);
        fiscalDocument.parmFiscalDocumentAccountType        (CustVendType_BR::Customer);
        fiscalDocument.parmPresenceType                     (EFDocPresenceType_BR::DoesNotApply);
        fiscalDocument.parmPaymentMethod                    (EFDocPaymentMethod_BR::NoPayment);

        fiscalDocument.parmFiscalEstablishmentID            (this.fiscalEstablishment().FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentName          (this.fiscalEstablishment().Name);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (this.fiscalEstablishment().postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (this.fiscalEstablishment().CNPJCPFNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE            (this.fiscalEstablishment().IENum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (this.fiscalEstablishment().CCMNum_BR);

        fiscalDocument.parmThirdPartyName                   (salesTable.DeliveryName);
        fiscalDocument.parmThirdPartyCNPJCPF                (custPackingSlipJour.deliveryCNPJCPFNUM_BR());
        fiscalDocument.parmThirdPartyIE                     (custPackingSlipJour.deliveryIENum_BR());
        fiscalDocument.parmThirdPartyPostalAddress          (custPackingSlipJour.DeliveryPostalAddress);

        fiscalDocument.parmDeliveryMode                     (custPackingSlipJour.DlvMode);
        fiscalDocument.parmDeliveryTerm                     (custPackingSlipJour.DlvTerm);

        fiscalDocument.parmDirection                        (FiscalDocDirection_BR::Outgoing);
        fiscalDocument.parmFiscalDocumentIssuer             (FiscalDocumentIssuer_BR::OwnEstablishment);
        fiscalDocument.parmFiscalDocumentType               (fiscalDocumentType);
        fiscalDocument.parmModel                            (fiscalDocumentType.FiscalDocumentModel);
        fiscalDocument.parmFiscalDocumentSeries             (fiscalDocumentType.FiscalDocumentSeries);
        fiscalDocument.parmSpecie                           (fiscalDocumentType.FiscalDocumentSpecie);
        fiscalDocument.parmFiscalDocumentDate               (custPackingSlipJour.DeliveryDate);
        fiscalDocument.parmFiscalDocumentNumber             (this.getInvoiceIdWithoutSeriesPrefix(this.getFiscalDocumentNumber(custPackingSlipJour),
                                                                                                  FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId)));

        var freightTerms = FiscalDocumentParmDataCreator_BR::convertToFiscalDocumentFreightTerms(salesParmUpdate.BOLFreightChargeTerms);
        fiscalDocument.parmFreightChargeTerms               (freightTerms);

        fiscalDocument.parmSalesCarrier                     (salesCarrier.RecId);
        fiscalDocument.parmSalesCarrierPostalAddress        (LogisticsPostalAddress::findByLocation(salesCarrier.Location).RecId);
        fiscalDocument.parmVehicleLicensePlateNumber        (salesParmUpdate.VehicleLicensePlate_BR);
        fiscalDocument.parmVehicleLicensePlateState         (salesParmUpdate.VehicleLicensePlateState_BR);
        fiscalDocument.parmVoucher                          (custPackingSlipJour.LedgerVoucher);
        fiscalDocument.parmTotalAmount                      (this.amountCur2Mst(salesTotals.totalAmount(), salesTotals.currencyCode(), salesTotals.exchRate()));

        fiscalDocument.parmListOfTextsParmData(this.addTexts(salesTable));
        fiscalDocument.parmListOfTextsParmData().appendList(this.addTexts(custPackingSlipJour));
        this.initTagsReplacer(fiscalDocument.parmTextTagReplacer());

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        ListEnumerator                  listOfLinesEnumerator;
        CustPackingSlipTrans            custPackingSlipTrans;
        SalesLine                       salesLine;
        InventTable                     inventTable;
        FiscalDocumentLineParmData_BR   fiscalDocumentLineParmData;
        List                            ret = new List(Types::Class);
        CFOPTable_BR                    cfopTable;
        LogisticsPostalAddress          logisticsPostalAddress;
        TaxBenefitCodeSetupHeading_BR   taxBenefitCodeSetupHeading;
        
        logisticsPostalAddress = LogisticsPostalAddress::findRecId(custPackingSlipJour.DeliveryPostalAddress);
        taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);

        listOfLinesEnumerator = custPackingSlipTransList.getEnumerator();
        while (listOfLinesEnumerator.moveNext())
        {
            custPackingSlipTrans = listOfLinesEnumerator.current();
            salesLine            = custPackingSlipTrans.salesLine();
            inventTable          = salesLine.inventTable();

            cfopTable = CFOPTable_BR::find(salesLine.salesLine_BR().DeliveryCFOPTable_BR);

            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            fiscalDocumentLineParmData.parmItemType                 (FiscalDocumentLineItemType_BR::Product);
            fiscalDocumentLineParmData.parmFiscalClassification     (inventTable.TaxFiscalClassification_BR);
            fiscalDocumentLineParmData.parmItemId                   (custPackingSlipTrans.ItemId);
            fiscalDocumentLineParmData.parmDescription              (custPackingSlipTrans.itemName());
            fiscalDocumentLineParmData.parmCFOP                     (cfopTable.CFOPId);
            fiscalDocumentLineParmData.parmQuantity                 (custPackingSlipTrans.Qty);
            fiscalDocumentLineParmData.parmUnit                     (custPackingSlipTrans.SalesUnit);
            fiscalDocumentLineParmData.parmLineAmount               (custPackingSlipTrans.ValueMST);
            if (fiscalDocumentLineParmData.parmQuantity())
            {
                fiscalDocumentLineParmData.parmUnitPrice            (fiscalDocumentLineParmData.parmLineAmount() / fiscalDocumentLineParmData.parmQuantity());
            }

            fiscalDocumentLineParmData.parmFinancialLedgerDimension (FiscalDocParmDataCreatorPackingSlip_BR::getFinancialDimension(custPackingSlipTrans.salesLine()));
            fiscalDocumentLineParmData.parmOrigin                   (inventTable.TaxationOrigin_BR);
            fiscalDocumentLineParmData.parmExceptionCode            (inventTable.ExceptionCode_BR);
            fiscalDocumentLineParmData.parmScaleIndicator           (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                     (inventTable.CNPJ_BR);
            
            fiscalDocumentLineParmData.parmBenefitCode              (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        custPackingSlipTrans.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        custPackingSlipJour.OrderAccount,
                                                                        CFOPTable.CFOPId,
                                                                        SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmAdjustmentCode53         (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        custPackingSlipTrans.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        custPackingSlipJour.OrderAccount,
                                                                        CFOPTable.CFOPId,
                                                                        SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmObservationCode          (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        custPackingSlipTrans.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        custPackingSlipJour.OrderAccount,
                                                                        CFOPTable.CFOPId,
                                                                        SalesPurchTrntype_BR::Sales));

            fiscalDocumentLineParmData.parmInventTransId            (custPackingSlipTrans.InventTransId);

            fiscalDocumentLineParmData.parmRefTableId               (custPackingSlipTrans.TableId);
            fiscalDocumentLineParmData.parmRefRecId                 (custPackingSlipTrans.RecId);

            this.setTaxationOriginAndFciNumber(fiscalDocumentLineParmData);

            fiscalDocumentLineParmData.parmListOfTextsParmData(this.addTexts(salesLine));

            if (fiscalDocumentLineParmData.parmFciNumber() != '')
            {
                fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addFciTextLine(fiscalDocumentLineParmData, fiscalDocumentLineParmData.parmTextTagReplacer()));
            }

            this.initTagsReplacer(fiscalDocumentLineParmData.parmTextTagReplacer());

            ret.addEnd(fiscalDocumentLineParmData);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    protected List initListOfInstallments()
    {
        List ret = new List(Types::Class);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List                                    shipmentStatList = new List(Types::Class);
        SalesShippingStat                       salesShipmentStat;
        FiscalDocumentShipmentStatParmData_BR   shipmentStatParmData;

        while select sum(GrossWeight), sum(NetWeight), sum(VolumeQty_BR)
            from salesShipmentStat
            group by VolumeType_BR
            where salesShipmentStat.SalesId == custPackingSlipJour.SalesId
                && salesShipmentStat.TableRefId == salesParmTable.TableRefId
        {
            shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();
            shipmentStatParmData.parmVolumeType(salesShipmentStat.VolumeType_BR);
            shipmentStatParmData.parmVolumeQuantity(salesShipmentStat.VolumeQty_BR);
            shipmentStatParmData.parmGrossWeight(salesShipmentStat.GrossWeight);
            shipmentStatParmData.parmNetWeight(salesShipmentStat.NetWeight);

            shipmentStatList.addEnd(shipmentStatParmData);
        }

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagsReplacer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FiscalDocumentTextTagReplacer_BR</c> object to replace fiscal document text's placeholders
    /// for packing slips.
    /// </summary>
    /// <param name="_tagReplacer">
    /// <c>FiscalDocumentTextTagReplacer_BR</c> to be initialized.
    /// </param>
    protected void initTagsReplacer(FiscalDocumentTextTagReplacer_BR _tagReplacer)
    {
        FiscalDocumentTextTagReplacer_BR    fiscalDocumentTextTagReplacer   = _tagReplacer;
        CustTable                           custTable                       = custTable::find(custPackingSlipJour.OrderAccount);

        fiscalDocumentTextTagReplacer.parmCustomer_Address(DirParty::primaryPostalAddress(custTable.Party).Address);
        fiscalDocumentTextTagReplacer.parmCustomer_CnpjCpf(custTable.CNPJCPFNum_BR);
        fiscalDocumentTextTagReplacer.parmCustomer_IE(custTable.IENum_BR);
        fiscalDocumentTextTagReplacer.parmCustomer_Name(custTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>CustPackingSlipJour</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    ///     The <c>CustPackingSlipJour</c> table buffer to be set.
    /// </param>
    public void setCustPackingSlipJour(CustPackingSlipJour _custPackingSlipJour)
    {
        custPackingSlipJour = _custPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustPackingSlipTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the list of <c>CustPackingSlipTrans</c> table buffers that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_custPackingSlipTransList">
    ///     The <c>List</c> of <c>CustPackingSlipTrans</c> table buffers to be set.
    /// </param>
    public void setCustPackingSlipTransList(List _custPackingSlipTransList)
    {
        custPackingSlipTransList = _custPackingSlipTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesParmTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesParmTable">
    ///     The <c>SalesParmTable</c> table buffer to be set.
    /// </param>
    public void setSalesParmTable(SalesParmTable _salesParmTable)
    {
        salesParmTable = _salesParmTable;

        fiscalDocumentType = FiscalDocumentType_BR::findRecID(salesParmTable.FiscalDocumentType_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesParmUpdate</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesParmUpdate">
    ///     The <c>SalesParmUpdate</c> table buffer to be set.
    /// </param>
    public void setSalesParmUpdate(SalesParmUpdate _salesParmUpdate)
    {
        salesParmUpdate = _salesParmUpdate;

        salesCarrier = SalesCarrier::find(salesParmUpdate.BOLCarrierName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesTable">
    ///     The <c>SalesTable</c> table buffer to be set.
    /// </param>
    public void setSalesTable(SalesTable _salesTable)
    {
        salesTable = _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>SalesTotals</c> class that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_salesTotals">
    ///     The <c>SalesTotals</c> instance to be set.
    /// </param>
    public void setSalesTotals(DeliverySlipTotals_BR _salesTotals)
    {
        salesTotals = _salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxationOriginAndFciNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches and set for FCI information if required
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Line that may be updated
    /// </param>
    protected void setTaxationOriginAndFciNumber(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        ImportedContentPerItem_BR       importedContent;

        importedContent = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalDocumentType.fiscalEstablishment().FiscalEstablishmentId,
                                                                    fiscalDocumentType.FiscalDocumentModel,
                                                                    FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                    FiscalDocDirection_BR::Outgoing,
                                                                    custPackingSlipJour.DeliveryDate,
                                                                    _fiscalDocumentLineParmData.parmCFOP(),
                                                                    _fiscalDocumentLineParmData.parmItemId());
        if (importedContent)
        {
            _fiscalDocumentLineParmData.parmOrigin            (importedContent.TaxationOrigin);
            _fiscalDocumentLineParmData.parmFciNumber         (importedContent.FCINumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return FiscalDocumentPurpose_BR::Regular;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given salesLine.
    /// </summary>
    /// <param name="_salesLine">
    /// The SalesLine record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static RecId getFinancialDimension(SalesLine _salesLine)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(_salesLine.accountIssueLedgerDimension(), 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>