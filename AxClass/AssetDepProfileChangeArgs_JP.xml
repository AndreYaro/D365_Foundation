<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepProfileChangeArgs_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to save a set of parameters that used to do Japan fixed asset depreciation profile change.
/// </summary>
class AssetDepProfileChangeArgs_JP
{
    AssetBookType                       assetBookType;
    AssetDepreciationProfile            fromDepProfile;
    AssetDepreciationProfile            toDepProfile;
    AssetDepreciationProfileId          fromDepProfileId;
    AssetDepreciationProfileId          toDepProfileId;
    AssetBookId                         assetBookId;
    AssetGroupId                        assetGroupId;
    AssetLifeTime                       lifeTime;
    AssetServiceLife                    serviceLife;
    AssetTransDate                      startDate;
    AssetTransDate                      prevEndDate;
    AssetDepUseEquallyDividedFormula_JP isUseEquallyDividedFormula;
    boolean                             isUpdateServiceLife;
    RecId                               sourceRecId;
    TableId                             sourceTableId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        assetBookType,
        fromDepProfile,
        toDepProfile,
        fromDepProfileId,
        toDepProfileId,
        assetBookId,
        assetGroupId,
        lifeTime,
        serviceLife,
        startDate,
        prevEndDate,
        isUpdateServiceLife,
        isUseEquallyDividedFormula,
        sourceRecId,
        sourceTableId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromAssetDepBookMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial the class from <c>AssetDepBookMap_JP</c> record
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A <c>AssetDepBookMap_JP</c> record
    /// </param>
    public void initFromAssetDepBookMap(AssetDepBookMap_JP _assetDepBookMap)
    {
        assetBookId     = _assetDepBookMap.AssetBookId;
        assetGroupId    = _assetDepBookMap.AssetGroup;
        sourceRecId     = _assetDepBookMap.RecId;
        sourceTableId   = _assetDepBookMap.TableId;
        serviceLife     = _assetDepBookMap.ServiceLife;
        lifeTime        = _assetDepBookMap.LifeTime;
        assetBookType   = AssetDepCalculationHelper_JP::determineAssetBookType(sourceTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetGroupDepBookMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial the class from <c>AssetGroupDepBookMap_JP</c> record
    /// </summary>
    /// <param name="_assetGroupDepBookMap">
    /// A <c>AssetGroupDepBookMap_JP</c> record
    /// </param>
    public void initFromAssetGroupDepBookMap(AssetGroupDepBookMap_JP _assetGroupDepBookMap)
    {
        assetBookId     = _assetGroupDepBookMap.AssetBookId;
        assetGroupId    = _assetGroupDepBookMap.AssetGroup;
        sourceRecId     = _assetGroupDepBookMap.RecId;
        sourceTableId   = _assetGroupDepBookMap.TableId;
        serviceLife     = _assetGroupDepBookMap.ServiceLife;
        lifeTime        = _assetGroupDepBookMap.LifeTime;
        assetBookType   = AssetDepCalculationHelper_JP::determineAssetBookType(sourceTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Normalizes the depreciation profile change args by the settings
    /// </summary>
    /// <param name="_settings">
    /// Asset depreciation method change settings
    /// </param>
    public void normalize(AssetDepMethodChangeSettings_JP _settings)
    {
        container methodChange = [fromDepProfile.Method, toDepProfile.Method];

        isUpdateServiceLife         = isUpdateServiceLife && _settings.isUpdateServiceLifeEnabled(methodChange);
        isUseEquallyDividedFormula  = isUseEquallyDividedFormula && _settings.isUseEquallyDividedFormulaEnabled(methodChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        protected container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookId</Name>
				<Source><![CDATA[
        public AssetBookId parmAssetBookId(AssetBookId _assetBookId = assetBookId)
    {
        assetBookId = _assetBookId;
        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookType</Name>
				<Source><![CDATA[
        public AssetBookType parmAssetBookType()
    {
        return assetBookType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupId</Name>
				<Source><![CDATA[
        public AssetGroupId parmAssetGroupId(AssetGroupId _assetGroupId = assetGroupId)
    {
        assetGroupId = _assetGroupId;
        return assetGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetLifeTime</Name>
				<Source><![CDATA[
        public AssetLifeTime parmAssetLifeTime(AssetLifeTime _lifeTime = lifeTime)
    {
        lifeTime = _lifeTime;
        return lifeTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetServiceLife</Name>
				<Source><![CDATA[
        public AssetServiceLife parmAssetServiceLife(AssetServiceLife _serviceLife = serviceLife)
    {
        serviceLife = _serviceLife;
        return serviceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDepProfile</Name>
				<Source><![CDATA[
        public AssetDepreciationProfile parmFromDepProfile()
    {
        return fromDepProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDepProfileId</Name>
				<Source><![CDATA[
        public AssetDepreciationProfileId parmFromDepProfileId(AssetDepreciationProfileId _fromDepProfileId = fromDepProfileId)
    {
        fromDepProfileId = _fromDepProfileId;
        fromDepProfile = AssetDepreciationProfile::find(fromDepProfileId);
        return fromDepProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUpdateServiceLife</Name>
				<Source><![CDATA[
        public boolean parmIsUpdateServiceLife(boolean _isUpdateServiceLife = isUpdateServiceLife)
    {
        isUpdateServiceLife = _isUpdateServiceLife;
        return isUpdateServiceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUseEquallyDividedFormula</Name>
				<Source><![CDATA[
        public AssetDepUseEquallyDividedFormula_JP parmIsUseEquallyDividedFormula(AssetDepUseEquallyDividedFormula_JP _isUseEquallyDividedFormula = isUseEquallyDividedFormula)
    {
        isUseEquallyDividedFormula = _isUseEquallyDividedFormula;
        return isUseEquallyDividedFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevEndDate</Name>
				<Source><![CDATA[
        public AssetTransDate parmPrevEndDate(AssetTransDate _prevEndDate = prevEndDate)
    {
        prevEndDate = _prevEndDate;
        return prevEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
        public RecId parmSourceRecId(RecId _sourceRecId = sourceRecId)
    {
        sourceRecId = _sourceRecId;
        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
        public TableId parmSourceTableId(TableId _sourceTableId = sourceTableId)
    {
        sourceTableId = _sourceTableId;
        assetBookType = AssetDepCalculationHelper_JP::determineAssetBookType(sourceTableId);
        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
        public AssetTransDate parmStartDate(AssetTransDate _startDate = startDate)
    {
        startDate = _startDate;
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDepProfile</Name>
				<Source><![CDATA[
        public AssetDepreciationProfile parmToDepProfile()
    {
        return toDepProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDepProfileId</Name>
				<Source><![CDATA[
        public AssetDepreciationProfileId parmToDepProfileId(AssetDepreciationProfileId _toDepProfileId = toDepProfileId)
    {
        toDepProfileId = _toDepProfileId;
        toDepProfile = AssetDepreciationProfile::find(toDepProfileId);

        return toDepProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        protected boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an copy instance of <c>AssetDepProfileChangeArgs_JP</c> from another exising instance
    /// </summary>
    /// <param name="_origin">
    /// An existing instance of <c>AssetDepProfileChangeArgs_JP</c>
    /// </param>
    /// <returns>
    /// An instance of <c>AssetDepProfileChangeArgs_JP</c>
    /// </returns>
    public static AssetDepProfileChangeArgs_JP construct(AssetDepProfileChangeArgs_JP _origin)
    {
        AssetDepProfileChangeArgs_JP ret;

        ret = new AssetDepProfileChangeArgs_JP();
        ret.unpack(_origin.pack());

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>