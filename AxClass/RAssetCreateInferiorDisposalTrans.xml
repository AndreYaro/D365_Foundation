<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCreateInferiorDisposalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetCreateInferiorDisposalTrans extends RunBaseBatch implements BatchRetryable
{
    QueryRun                    queryRun;
    RAssetInferiorDisposalTable assetInferiorDisposalTable;
    Counter                     progressCounter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
    protected boolean checkCanCreate(RAssetId  _rAssetId)
    {
        RAssetStandards     assetStandards;
        RAssetFactor        factor;

        if (RAssetInferiorDisposalTrans::find(assetInferiorDisposalTable.RecId, _rAssetId).RecId)
            return false;

        while select assetStandards
            where assetStandards.AssetId == _rAssetId
        {
            if (! assetStandards.Depreciation)
                break;

            if (RAssetTrans::transLastDate(_rAssetId,
                                           assetStandards.AssetStandardId,
                                           false) > assetInferiorDisposalTable.TransDate)
                break;

            factor = assetStandards.factor(assetInferiorDisposalTable.TransDate) > 0 ? assetStandards.factor(assetInferiorDisposalTable.TransDate) : 1.0;

            if (!assetInferiorDisposalTable.TransDate || assetInferiorDisposalTable.TransDate <= dateMthFwd(assetStandards.startDepDate(), any2int(roundUp(assetStandards.lifetime(assetInferiorDisposalTable.TransDate) / factor, 0))) - 1)
                break;
        }

        if (assetStandards.RecId)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116748");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    protected void displayProgress(RAssetId   _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue(RAssetInferiorDisposalTable _assetInferiorDisposalTable)
    {
        QueryBuildRange qbr;
        ;

        assetInferiorDisposalTable = _assetInferiorDisposalTable;

        queryRun  = new QueryRun(queryStr(RAssetTable));
        qbr = queryRun.query().dataSourceNo(1).addRange(fieldNum(RAssetTable, Status));
        qbr.value(queryValue(RAssetStatus::Closed));
        qbr.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetTable     rAssetTable;
        Counter         progressTotal;

        #macrolib.AviFiles

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116748", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        this.getFromDialog();

        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            this.displayProgress(rAssetTable.AccountNum);

            if (this.checkCanCreate(rAssetTable.AccountNum))
            {
                RAssetInferiorDisposalTrans::createLine(assetInferiorDisposalTable.RecId, rAssetTable.AccountNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInferiorTrans</Name>
				<Source><![CDATA[
    public static void createInferiorTrans(RAssetInferiorDisposalTable _assetInferiorDisposalTable)
    {
        RAssetCreateInferiorDisposalTrans assetInferior;
        ;

        if (! _assetInferiorDisposalTable.RecId)
            return;

        if (_assetInferiorDisposalTable.DisposalCondition == RAssetDisposalCondition::DepreciationGroup)
        {
            assetInferior = new RAssetCreateDisposalTrans_DeprGroup();
        }
        else
        {
            assetInferior = new RAssetCreateInferiorDisposalTrans();
        }

        assetInferior.initValue(_assetInferiorDisposalTable);

        if (assetInferior.prompt())
        {
            assetInferior.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>