<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureTransCreateFacture_RU extends FactureTransCreate_RU
{
    FactureJour_RU  sourceFactureJour;
    FactureTrans_RU sourceFactureTrans;
    TaxCode         transTaxCode;
    ExchRate        exchRate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        int             sign =  sourceFactureTrans.TaxAmount                  ?
                               (sourceFactureTrans.TaxAmount  >= 0 ? 1 : -1)  :
                               (sourceFactureTrans.LineAmount >= 0 ? 1 : -1);
        VATType_RU      vatType;

        if (facture.parmHeaderRevision())
        {
            return true;
        }

        if (facture.parmProcessingType() == SalesBookFactureProcessingType_RU::VATStandardCancellation)
        {
            sign = -1;
        }

        this.calcTaxes("",
                       dateNull(),
                       sourceFactureTrans.TaxGroup,
                       sourceFactureTrans.TaxItemGroup,
                       sourceFactureTrans.InventTransId,
                       sourceFactureTrans.LineAmount);

        vatType = calcTaxes.taxBaseAmountCur_VAT()            ? VATType_RU::Full     :
                    (calcTaxes.taxBaseAmountCur_VATReduced()  ? VATType_RU::Reduced  :
                        (calcTaxes.taxBaseAmountCur_VATZero() ? VATType_RU::Zero     :
                                                                VATType_RU::NonLiable));

        factureTrans.ExchRate        = exchRate ? exchRate : factureTrans.ExchRate;
        factureTrans.Qty             = sourceFactureTrans.Qty * sign;
        factureTrans.LineAmount      = sourceFactureTrans.LineAmount * sign;
        factureTrans.ExciseValue     = sourceFactureTrans.ExciseValue;
        factureTrans.LineAmountMST   = CurrencyExchangeHelper::amountCur2MST(factureTrans.LineAmount, facture.getFactureJour().CurrencyCode, exchRate);
        factureTrans.TaxGroup        = sourceFactureTrans.TaxGroup;
        factureTrans.TaxItemGroup    = sourceFactureTrans.TaxItemGroup;
        factureTrans.TaxCode         = transTaxCode;
        factureTrans.Price           = sourceFactureTrans.Price;
        factureTrans.vatType         = vatType;

        factureTrans.Excise          = abs(calcTaxes.taxAmountCur_Excise())     * sign;
        factureTrans.TaxAmount       = abs(calcTaxes.totalTaxAmountCur())       * sign;
        factureTrans.vat             = abs(calcTaxes.taxAmountCur_VAT()         +
                                            calcTaxes.taxAmountCur_VATReduced()  +
                                            calcTaxes.taxAmountCur_VATZero())    * sign;
        factureTrans.ExciseAmountMST = abs(calcTaxes.taxAmount_Excise())        * sign;
        factureTrans.TaxAmountMST    = abs(calcTaxes.totalTaxAmount())          * sign;
        factureTrans.vatAmountMST    = abs(calcTaxes.taxAmount_VAT()            +
                                            calcTaxes.taxAmount_VATReduced()     +
                                            calcTaxes.taxAmount_VATZero())       * sign;
        factureTrans.vatValue        =   calcTaxes.taxValue_VAT();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxes</Name>
				<Source><![CDATA[
    protected void calcTaxes(Voucher _ledgerVoucher, TransDate _transDate, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup, InventTransId _inventTransId, Amount _amount)
    {
        SalesExportFactureCalcTax_RU    factureCalcTax;
        TmpTaxWorkTrans                 tmpTaxWorkTrans;

        factureCalcTax = SalesExportFactureCalcTax_RU::construct(sourceFactureJour);
        if (facture.parmProcessingType() == SalesBookFactureProcessingType_RU::VATStandard           ||
           facture.parmProcessingType() == SalesBookFactureProcessingType_RU::VATStandardCorrection ||
           facture.parmProcessingType() == SalesBookFactureProcessingType_RU::OverdueConfirmation   ||
           facture.parmProcessingType() == SalesBookFactureProcessingType_RU::VATStandardCancellation)
        {
            factureCalcTax.parmUseDomesticTaxCode(true);
        }
        factureCalcTax.parmSingleLine(sourceFactureTrans.RecId);
        factureCalcTax.calcTax();

        tmpTaxWorkTrans = factureCalcTax.parmTax().tmpTaxWorkTrans();
        select tmpTaxWorkTrans
            where tmpTaxWorkTrans.SourceRecId == sourceFactureTrans.RecId;

        transTaxCode = tmpTaxWorkTrans.TaxCode;

        calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
        calcTaxes.calc();

        taxBaseFactor = calcTaxes.totalTaxBaseAmountCur() ? abs(_amount / calcTaxes.totalTaxBaseAmountCur()) : 0;
        exchRate      = factureCalcTax.exchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        super();

        if (facture.parmHeaderRevision())
        {
            buf2Buf(sourceFactureTrans, factureTrans);
            factureTrans.FactureId  = factureJour.FactureId;
            factureTrans.Module     = factureJour.Module;
        }
        else
        {
            factureTrans.FactureLineType     = sourceFactureTrans.FactureLineType;
            factureTrans.InvoiceId           = sourceFactureTrans.InvoiceId;
            factureTrans.InvoiceDate         = sourceFactureTrans.InvoiceDate;
            factureTrans.SalesPurchId        = sourceFactureTrans.SalesPurchId;
            factureTrans.NumberSequenceGroup = sourceFactureTrans.NumberSequenceGroup;
            factureTrans.InvoiceLineNum      = sourceFactureTrans.InvoiceLineNum;
            factureTrans.Unit                = sourceFactureTrans.Unit;
            factureTrans.DefaultDimension    = sourceFactureTrans.DefaultDimension;
            factureTrans.InventTransId       = sourceFactureTrans.InventTransId;
            factureTrans.ItemId              = sourceFactureTrans.ItemId;
            factureTrans.Category            = sourceFactureTrans.Category;
            factureTrans.InventDimId         = sourceFactureTrans.InventDimId;
            factureTrans.InventGTDId         = sourceFactureTrans.InventGTDId;
            factureTrans.ItemName            = sourceFactureTrans.ItemName;
            factureTrans.MarkupRefRecId      = sourceFactureTrans.MarkupRefRecId;
            factureTrans.MarkupRefTableId    = sourceFactureTrans.MarkupRefTableId;
            factureTrans.ExchRate            = sourceFactureTrans.ExchRate;
            factureTrans.CountryRegionName   = sourceFactureTrans.CountryRegionName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record in <c>FactureTrans_RU</c> table.
    /// </summary>
    protected void insertTrans()
    {
        if (! facture.parmHeaderRevision() || factureTrans.isTmp())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);
        sourceFactureTrans = FactureTrans_RU::findRecId(_recId);
        sourceFactureJour  = FactureJour_RU::find(sourceFactureTrans.FactureId, sourceFactureTrans.Module);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);
        sourceFactureTrans = FactureTrans_RU::findRecId(_recId);
        sourceFactureJour  = FactureJour_RU::find(sourceFactureTrans.FactureId, sourceFactureTrans.Module);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
