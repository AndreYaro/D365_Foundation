<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimWithLicensePlateIdCleanupFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class InventDimWithLicensePlateIdCleanupFeature implements IFeatureMetadata, IFeatureLifecycle, IFeaturePrerequisites
{
    private static InventDimWithLicensePlateIdCleanupFeature instance;
    private str cannotEnableMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new InventDimWithLicensePlateIdCleanupFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemFlightingHandler</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemFlightingHandler(SysDictMenu _rootMenu, SysDictMenu _subMenu, SysBoxedBoolean _visible)
    {
        if (_subMenu.isMenuItem())
        {
            var metaElement = _subMenu.GetMenuItemMetaElement();
            if (metaElement != null && metaElement.Name == menuItemDisplayStr(InventDimLicensePlateIdCleanupForm))
            {
                _visible.value = InventDimWithLicensePlateIdCleanupFeature::isEnabled();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventDimWithLicensePlateIdCleanupFeature instance()
    {
        return InventDimWithLicensePlateIdCleanupFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str label()
    {
        return literalStr("@SCM:InventDimWithLicensePlateIdCleanupFeature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public int module()
    {
        return FeatureModuleV0::InventoryAndWarehouseManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str summary()
    {
        return literalStr("@SCM:InventDimWithLicensePlateIdCleanupFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    public WebSiteURL learnMoreUrl()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return cannotEnableMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        InventDim inventDim;
        WHSLicensePlateId dummyLP = InventDimLPCleanupService::getDummyLPForCleanup();
        select firstonly RecId from inventDim
            where inventDim.LicensePlateId == dummyLP;

        boolean isValid = (inventDim.RecId == 0);

        if (!isValid)
        {
            cannotEnableMessage = strFmt("@SCM:InventDimWithLicensePlateIdCleanupFeatureCannotEnableMessage", dummyLP);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isEnabled()
    {
        return Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider::isFeatureEnabled(InventDimWithLicensePlateIdCleanupFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PublicPreview;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>