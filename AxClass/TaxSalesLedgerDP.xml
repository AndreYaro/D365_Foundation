<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesLedgerDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxSalesLedgerDP</c> class is the Report Data Provider class for the <c>TaxSalesLedger</c>
///    report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(TaxSalesLedgerContract))
]
public class TaxSalesLedgerDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxSalesLedgerTmp   taxSalesLedgerTmp;
    TaxReportPeriod     taxReportPeriod;
    TaxPeriod           taxPeriod;
    FromDate            fromDate;
    ToDate              toDate;
    TaxRepVersion       taxRepVersion;
    recId               tmpTableDataRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00007, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount values.
    /// </summary>
    /// <param name="_taxSalesLedgerTmp">
    ///    An instance of the temporary table to use to insert values into the temporary table.
    /// </param>
    /// <param name="_taxReportField">
    ///    The <c>taxReportField</c> value to use for calculations.
    /// </param>
    /// <param name="_amountMST">
    ///    The amount value for calculations.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addAmount(TaxSalesLedgerTmp _taxSalesLedgerTmp,
        TaxReportField _taxReportField,
        AmountMST _amountMST)
    {
        const int Field_00 = 100;
        const int Field_01 = 1;
        const int Field_02 = 2;
        const int Field_03 = 3;
        const int Field_44 = 44;
        const int Field_45 = 45;
        const int Field_46 = 46;
        const int Field_47 = 47;
        const int Field_48 = 48;
        const int Field_49 = 49;
        const int Field_54 = 54;
        const int Field_64 = 64;

        if(_taxReportField > 100 && _taxReportField < 1000000)
        {
            this.splitAmount(_taxSalesLedgerTmp, _taxReportField, _amountMST);
        }
        else
        {
            switch (_taxReportField)
            {
                case Field_00 : _taxSalesLedgerTmp.TaxBaseAmountMSTBox00    -= _amountMST;  break;
                case Field_01 : _taxSalesLedgerTmp.TaxBaseAmountMSTBox01    -= _amountMST;  break;
                case Field_02 : _taxSalesLedgerTmp.TaxBaseAmountMSTBox02    -= _amountMST;  break;
                case Field_03 : _taxSalesLedgerTmp.TaxBaseAmountMSTBox03    -= _amountMST;  break;
                case Field_44 : _taxSalesLedgerTmp.TaxExemptAmountMSTBox44  -= _amountMST;  break;
                case Field_45 : _taxSalesLedgerTmp.TaxBaseAmountMSTBox45    -= _amountMST;  break;
                case Field_46 : _taxSalesLedgerTmp.TaxExemptAmountMSTBox46  -= _amountMST;  break;
                case Field_47 : _taxSalesLedgerTmp.TaxExemptAmountMSTBox47  -= _amountMST;  break;
                case Field_48 : _taxSalesLedgerTmp.CreditNoteAmountMSTBox48 += _amountMST;  break;
                case Field_49 : _taxSalesLedgerTmp.CreditNoteAmountMSTBox49 += _amountMST;  break;
                case Field_54 : _taxSalesLedgerTmp.TaxAmountMSTBox54        -= _amountMST;  break;
                case Field_64 : _taxSalesLedgerTmp.TaxAmountMSTBox64        += _amountMST;  break;
                default : break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxSalesLedgerTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates field values for the temporary table and sends the temporary table instance to the
    ///    <c>insert</c> method.
    /// </summary>
    /// <param name="_taxPeriod">
    ///    The <c>TaxReport</c> value.
    /// </param>
    /// <param name="_fromDate">
    ///    The <c>FromDate</c> value of the tax period.
    /// </param>
    /// <param name="_toDate">
    ///    The <c>ToDate</c> value of the tax period.
    /// </param>
    /// <returns>
    ///    An instance of the <c>taxSalesLedgerTmpLocal</c> temporary table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxSalesLedgerTmp createTaxSalesLedgerTmp(TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate)
    {
        TaxTrans            taxTrans;
        GeneralJournalEntry generalJournalEntry;
        CustTrans           custTrans;
        TaxTable            taxTable;
        Voucher             oldVoucher;
        TransDate           oldTransDate;
        boolean             isInvoice;
        TaxTrans            taxTransTotal;
        TaxSalesLedgerTmp   taxSalesLedgerTmpLocal;
        AmountMST           amountMST;
        TaxPeriodHead       taxPeriodHead   = TaxPeriodHead::find(_taxPeriod);
        TransDate           prevFromDate    = _toDate, prevToDate = _fromDate;

        if (taxPeriodHead)
        {
            if (taxPeriodHead.PeriodUnit == PeriodUnit::Month && taxPeriodHead.QtyUnit == 1)
            {
                if (TaxReportExtraFieldsBE::exist(_taxPeriod, prevmth(_fromDate), endmth(prevmth(_toDate))))
                {
                    prevFromDate = prevmth(_fromDate);
                    prevToDate   = endmth(prevmth(_toDate));
                }
            }
            if (taxPeriodHead.PeriodUnit == PeriodUnit::Month && taxPeriodHead.QtyUnit == 3)
            {
                if (TaxReportExtraFieldsBE::exist(_taxPeriod, prevqtr(_fromDate), endmth(prevqtr(_toDate))))
                {
                    prevFromDate = prevqtr(_fromDate);
                    prevToDate   = endmth(prevqtr(_toDate));
                }
            }
        }

        Addressing periodDate = strfmt("@SYS76785", date2StrUsr(fromDate, DateFlags::FormatAll), date2StrUsr(toDate, DateFlags::FormatAll));
        CompanyCoRegNum companyVATNum = CompanyInfo::find().CoRegNum;
        TaxEnterpriseNumber companyEnterpriseNumber = CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, toDate);

        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
            group by Voucher,TransDate,TaxDirection
            where taxTransTotal.TaxPeriod     == _taxPeriod
                && ((taxTransTotal.TransDate   >= _fromDate
                && taxTransTotal.TransDate     <= _toDate
                && taxTransTotal.TaxRepCounter == TaxRepVersion::Original)
                || (taxTransTotal.TransDate    >= prevFromDate
                && taxTransTotal.TransDate     <= prevToDate
                && taxTransTotal.TaxRepCounter != TaxRepVersion::Original))
                && taxTransTotal.TaxOrigin     != TaxOrigin::TaxReporting
                && (taxTransTotal.TaxDirection  == TaxDirection::OutgoingTax
                    || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
                    &&  taxTransTotal.TaxDirection == TaxDirection::OutgoingTax_W)
                    || taxTransTotal.TaxDirection    == TaxDirection::TaxExemptSales)
        {
            if ((taxTransTotal.TaxBaseAmount + taxTransTotal.TaxAmount) < 0)
            {
                isInvoice = true;
            }
            else
            {
                isInvoice = false;
            }

            while select sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
                group by Voucher, TransDate, TaxCode, TaxDirection
                where taxTrans.TaxPeriod == _taxPeriod
                    && taxTrans.Voucher    == taxTransTotal.Voucher
                    && taxTrans.TransDate    == taxTransTotal.TransDate
                    && taxTrans.TaxDirection == taxTransTotal.TaxDirection
            {

                amountMST = 0;
                taxSalesLedgerTmpLocal.clear();
                taxTable = TaxTable::find(taxTrans.TaxCode);

                if (taxTrans.Voucher != oldVoucher || taxTrans.TransDate != oldTransDate)
                {
                    SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

                    select firstonly LedgerPostingJournal from generalJournalEntry
                        where generalJournalEntry.Ledger == Ledger::current()
                    exists join subledgerVoucherGeneralJournalEntry
                        where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                            && subledgerVoucherGeneralJournalEntry.Voucher == taxTrans.Voucher
                            && subledgerVoucherGeneralJournalEntry.AccountingDate == taxTrans.TransDate
                            && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == taxTrans.dataAreaId;

                    custTrans = CustTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);

                    if (custTrans)
                    {
                        taxSalesLedgerTmpLocal.CustAccount      = custTrans.AccountNum;
                        taxSalesLedgerTmpLocal.AmountMSTInclTax = custTrans.AmountMST;
                    }

                    oldVoucher   = taxTrans.Voucher;
                    oldTransDate = taxTrans.TransDate;
                }

                taxSalesLedgerTmpLocal.LedgerPostingJournalId = generalJournalEntry.LedgerPostingJournal;
                taxSalesLedgerTmpLocal.Voucher                = taxTrans.Voucher;
                taxSalesLedgerTmpLocal.TransDate              = taxTrans.TransDate;

                if (taxTrans.TaxDirection == TaxDirection::OutgoingTax || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W) // Domestic sale
                {
                    if (isInvoice) // ordinary sale
                    {
                        this.addAmount(taxSalesLedgerTmpLocal,taxTable.RepFieldBaseOutgoing, taxTrans.TaxBaseAmount);
                        this.addAmount(taxSalesLedgerTmpLocal,taxTable.RepFieldTaxOutgoing, taxTrans.TaxAmount);
                    }
                    else // creditNote
                    {
                        this.addAmount(taxSalesLedgerTmpLocal,taxTable.RepFieldBaseOutgoingCreditNote, taxTrans.TaxBaseAmount);
                        this.addAmount(taxSalesLedgerTmpLocal,taxTable.RepFieldTaxOutgoingCreditNote, taxTrans.TaxAmount);
                    }
                    amountMST +=taxTrans.TaxBaseAmount+taxTrans.TaxAmount;
                }
                else  // Export
                {
                    if (isInvoice) // ordinary sale
                    {
                        this.addAmount(taxSalesLedgerTmpLocal,taxTable.RepFieldTaxFreeSales, taxTrans.TaxBaseAmount);
                    }
                    else // creditNote
                    {
                        this.addAmount(taxSalesLedgerTmpLocal,taxTable.RepFieldTaxFreeSalesCreditNote, taxTrans.TaxBaseAmount);
                    }
                    amountMST +=taxTrans.TaxBaseAmount;
                }

                taxSalesLedgerTmpLocal.AmountMSTInclTax = amountMST;
                taxSalesLedgerTmpLocal.InvoiceId        = custTrans.Invoice;

                taxSalesLedgerTmpLocal.CustAccountName          = CustTable::find(custTrans.AccountNum).name();
                taxSalesLedgerTmpLocal.PeriodDate               = periodDate;
                taxSalesLedgerTmpLocal.CompanyVATNum            = companyVATNum;
                taxSalesLedgerTmpLocal.CompanyEnterpriseNumber  = companyEnterpriseNumber;

                this.insertInTaxSalesLedgerTmp(taxSalesLedgerTmpLocal);
            }
        }

        if (!taxSalesLedgerTmpLocal.Voucher)
        {
            taxSalesLedgerTmpLocal.PeriodDate = periodDate;
            taxSalesLedgerTmpLocal.CompanyVATNum = companyVATNum;
            taxSalesLedgerTmpLocal.CompanyEnterpriseNumber = companyEnterpriseNumber;

            taxSalesLedgerTmp.PeriodDate = periodDate;
            taxSalesLedgerTmp.CompanyVATNum = companyVATNum;
            taxSalesLedgerTmp.CompanyEnterpriseNumber = companyEnterpriseNumber;
            taxSalesLedgerTmp.insert();
        }

        return taxSalesLedgerTmpLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSalesLedgerDP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the data table.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [SRSReportDataSet(tablestr(TaxSalesLedgerTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxSalesLedgerTmp getTaxSalesLedgerDP()
    {
        return taxSalesLedgerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTaxSalesLedgerTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert the data into the instance of the temporary table.
    /// </summary>
    /// <param name="_taxSalesLedgerTmp">
    ///    The instance of the temporary table to use to insert values into.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertInTaxSalesLedgerTmp(TaxSalesLedgerTmp _taxSalesLedgerTmp)
    {
        select forupdate taxSalesLedgerTmp
            where taxSalesLedgerTmp.LedgerPostingJournalId == _taxSalesLedgerTmp.LedgerPostingJournalId &&
                    taxSalesLedgerTmp.Voucher              == _taxSalesLedgerTmp.Voucher                &&
                    taxSalesLedgerTmp.TransDate            == _taxSalesLedgerTmp.TransDate;
        if (taxSalesLedgerTmp)
        {
            taxSalesLedgerTmp.TaxBaseAmountMSTBox00    += _taxSalesLedgerTmp.TaxBaseAmountMSTBox00;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox01    += _taxSalesLedgerTmp.TaxBaseAmountMSTBox01;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox02    += _taxSalesLedgerTmp.TaxBaseAmountMSTBox02;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox03    += _taxSalesLedgerTmp.TaxBaseAmountMSTBox03;
            taxSalesLedgerTmp.TaxExemptAmountMSTBox44  += _taxSalesLedgerTmp.TaxExemptAmountMSTBox44;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox45    += _taxSalesLedgerTmp.TaxBaseAmountMSTBox45;
            taxSalesLedgerTmp.TaxExemptAmountMSTBox46  += _taxSalesLedgerTmp.TaxExemptAmountMSTBox46;
            taxSalesLedgerTmp.TaxExemptAmountMSTBox47  += _taxSalesLedgerTmp.TaxExemptAmountMSTBox47;
            taxSalesLedgerTmp.CreditNoteAmountMSTBox48 += _taxSalesLedgerTmp.CreditNoteAmountMSTBox48;
            taxSalesLedgerTmp.CreditNoteAmountMSTBox49 += _taxSalesLedgerTmp.CreditNoteAmountMSTBox49;
            taxSalesLedgerTmp.TaxAmountMSTBox54        += _taxSalesLedgerTmp.TaxAmountMSTBox54;
            taxSalesLedgerTmp.TaxAmountMSTBox64        += _taxSalesLedgerTmp.TaxAmountMSTBox64;
            taxSalesLedgerTmp.AmountMSTInclTax         += _taxSalesLedgerTmp.AmountMSTInclTax;

            taxSalesLedgerTmp.update();
        }
        else
        {
            taxSalesLedgerTmp.LedgerPostingJournalId   = _taxSalesLedgerTmp.LedgerPostingJournalId;
            taxSalesLedgerTmp.Voucher                  = _taxSalesLedgerTmp.Voucher;
            taxSalesLedgerTmp.TransDate                = _taxSalesLedgerTmp.TransDate;
            taxSalesLedgerTmp.CustAccount              = _taxSalesLedgerTmp.CustAccount;
            taxSalesLedgerTmp.AmountMSTInclTax         = _taxSalesLedgerTmp.AmountMSTInclTax;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox00    = _taxSalesLedgerTmp.TaxBaseAmountMSTBox00;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox01    = _taxSalesLedgerTmp.TaxBaseAmountMSTBox01;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox02    = _taxSalesLedgerTmp.TaxBaseAmountMSTBox02;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox03    = _taxSalesLedgerTmp.TaxBaseAmountMSTBox03;
            taxSalesLedgerTmp.TaxExemptAmountMSTBox44  = _taxSalesLedgerTmp.TaxExemptAmountMSTBox44;
            taxSalesLedgerTmp.TaxBaseAmountMSTBox45    = _taxSalesLedgerTmp.TaxBaseAmountMSTBox45;
            taxSalesLedgerTmp.TaxExemptAmountMSTBox46  = _taxSalesLedgerTmp.TaxExemptAmountMSTBox46;
            taxSalesLedgerTmp.TaxExemptAmountMSTBox47  = _taxSalesLedgerTmp.TaxExemptAmountMSTBox47;
            taxSalesLedgerTmp.CreditNoteAmountMSTBox48 = _taxSalesLedgerTmp.CreditNoteAmountMSTBox48;
            taxSalesLedgerTmp.CreditNoteAmountMSTBox49 = _taxSalesLedgerTmp.CreditNoteAmountMSTBox49;
            taxSalesLedgerTmp.TaxAmountMSTBox54        = _taxSalesLedgerTmp.TaxAmountMSTBox54;
            taxSalesLedgerTmp.TaxAmountMSTBox64        = _taxSalesLedgerTmp.TaxAmountMSTBox64;
            taxSalesLedgerTmp.InvoiceId                = _taxSalesLedgerTmp.InvoiceId;

            //Fields from datamethods which are used for TaxSalesLedger Report
            taxSalesLedgerTmp.CustAccountName          = _taxSalesLedgerTmp.CustAccountName;
            taxSalesLedgerTmp.PeriodDate               = _taxSalesLedgerTmp.PeriodDate;
            taxSalesLedgerTmp.CompanyVATNum            = _taxSalesLedgerTmp.CompanyVATNum;
            taxSalesLedgerTmp.CompanyEnterpriseNumber  = _taxSalesLedgerTmp.CompanyEnterpriseNumber;

            taxSalesLedgerTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>TaxSalesLedgerTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        TaxSalesLedgerContract taxSalesLedgerContract = this.parmDataContract() as TaxSalesLedgerContract;

        taxPeriod       = taxSalesLedgerContract.parmTaxPeriod();
        fromDate        = taxSalesLedgerContract.parmTaxPeriodDate();
        taxReportPeriod = TaxReportPeriod::find(taxPeriod, fromDate);

        if (taxReportPeriod)
        {
            fromDate            = taxReportPeriod.FromDate;
            toDate              = taxReportPeriod.ToDate;
            taxRepVersion       = TaxRepVersion::Original;
            taxSalesLedgerTmp   = this.createTaxSalesLedgerTmp(taxPeriod, fromDate, toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits amount in double fields when special report fields are used.
    /// </summary>
    /// <param name="_taxSalesLedgerTmpLocal">
    /// An instance of the temporary table to use to insert values into the temporary table.
    /// </param>
    /// <param name="_taxReportField">
    /// The <c>taxReportField</c> value to use for spliting in case of special report fields.
    /// </param>
    /// <param name="_amount">
    /// Amounts present for the reporting field.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void splitAmount(TaxSalesLedgerTmp _taxSalesLedgerTmpLocal, TaxReportField _taxReportField, Amount _amount)
    {
        TaxReportField original = _taxReportField;
        if (original > 100 && original < 1000000)
        {
            TaxReportField fieldPart1 = original mod 100;
            original = original / 100;
            TaxReportField fieldPart2 = original mod 100;
            original = original / 100;
            TaxReportField fieldPart3;
            if (original > 0)
            {
                fieldPart3 = fieldPart2;
                fieldPart2 = original;
            }

            if (fieldPart1)
            {
                this.addAmount(_taxSalesLedgerTmpLocal, fieldPart1, abs(_amount));
            }
            if (fieldPart2)
            {
                this.addAmount(_taxSalesLedgerTmpLocal, fieldPart2, _amount);
            }
            if (fieldPart3)
            {
                this.addAmount(_taxSalesLedgerTmpLocal, fieldPart3, _amount);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>