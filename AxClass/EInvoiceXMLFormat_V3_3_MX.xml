<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceXMLFormat_V3_3_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceXMLFormat_V3_3_MX</c> class is used to format the electronic invoice in a XML document.
/// </summary>
/// <remarks>
/// Extends the <c>EInvoiceXMLFormat_MX</c> class to include aditional nodes to a CFDI V3.3 invoice.
/// </remarks>
class EInvoiceXMLFormat_V3_3_MX extends EInvoiceXMLFormat_MX
{
    #ISOCountryRegionCodes
    MarkupTrans markupTrans;
    RefTableId sourceTableId;
    RefRecId sourceRecId;
    EInvoiceExtCodeId_MX defProdCode;
    EInvoiceExtCodeId_MX defUnitCode;
    boolean   isTraslado;
    boolean   regularTaxExists;
    boolean isDisplayExento;
    boolean showTrasladoExemptTaxHeader;
    const str exemptRateType = 'Exento';
    private const str StandardRateType = 'Tasa';
    private const str CuotaRateType = 'Cuota';
    private const str MEX = 'MEX';
    private const str DriverCode = '01';
    private const container PalletsPack = ['31181701', '24112707'];

    private NoYes skipIEPSTaxes;
    private TaxAmount IEPSNegativeAdjustmentTotal;
    private TaxAmount IEPSPositiveAdjustmentTotal;

    private TaxAmount IEPSNegativeAdjustment;
    private TaxAmount IEPSPositiveAdjustment;
    private TaxAmount IEPSNegativeAdjustmentPerUnit;
    private TaxAmount IEPSPositiveAdjustmentPerUnit;
    private AmountMST totalDiscount;
    private AmountMST invoiceSubtotal;

    private str taxRateType;
    private container foreignTradeAmountsKey;
    private container foreignTradeAmountsValue;

    private boolean hasHazardousMaterial;

    private real headerDiscountPercent = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add_RetencionesElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Retencion node.
    /// </summary>
    /// <param name="_retencionesElement">
    /// The XML element to append the created node.
    /// </param>
    protected void add_RetencionesElement(XmlElement _retencionesElement)
    {
        TaxTrans taxTrans;

        Map mapTaxAmounts = new Map(Types::Container, Types::Container);
        boolean isLineSection = this.isLineSection();

        List taxTransList = this.createTaxTransList(eInvoiceJourMap.getPositiveTaxAmountMap(), eInvoiceJourMap.getPositveTaxAmountList());
        ListEnumerator taxTransEnumerator = taxTransList.getEnumerator();
        TaxAmount adjustment;

        while (taxTransEnumerator.moveNext())
        {
            taxTrans = taxTransEnumerator.current();

            if (this.skipTaxTrans(taxTrans))
            {
                continue;
            }
            if (this.skipIEPSTaxTrans(taxTrans))
            {
                adjustment = this.getIEPSAdjustment(taxTrans);

                if (TaxTable::find(taxTrans.TaxCode).TaxBase != TaxBaseType::AmountByUnit)
                {
                    IEPSPositiveAdjustment -= adjustment;
                }
                else
                {
                    IEPSPositiveAdjustmentPerUnit -= adjustment;
                }
                continue;
            }

            this.groupTaxAmounts(mapTaxAmounts, taxTrans);
        }

        MapEnumerator me = mapTaxAmounts.getEnumerator();
        while (me.moveNext())
        {
            taxTrans.clear();

            [taxTrans.TaxType_MX, taxTrans.TaxValue, taxRateType] = me.currentKey();
            [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur, taxTrans.TaxBaseQty] = me.currentValue();

            XmlElement retencionesElement = this.createElement('Retencion');
            this.fillTaxSection(retencionesElement, taxTrans, isLineSection, isLineSection, isLineSection);

            _retencionesElement.appendChild(retencionesElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_TrasladosElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Translados node.
    /// </summary>
    /// <param name="_trasladosElement">
    /// The XML element to append the created node.
    /// </param>
    protected void add_TrasladosElement(XmlElement _trasladosElement)
    {
        TaxTrans taxTrans;
        Map mapTaxAmounts = new Map(Types::Container, Types::Container);
        boolean isLineSection = this.isLineSection();
        boolean isCreateTraslado;

        List taxTransList = this.createTaxTransList(eInvoiceJourMap.getNegativeTaxAmountMap(), eInvoiceJourMap.getNegativeTaxAmountList());
        ListEnumerator taxTransEnumerator = taxTransList.getEnumerator();
        TaxAmount adjustment;

        while (taxTransEnumerator.moveNext())
        {
            taxTrans = taxTransEnumerator.current();

            if (this.skipTaxTrans(taxTrans))
            {
                continue;
            }

            if (this.skipIEPSTaxTrans(taxTrans))
            {
                adjustment = this.getIEPSAdjustment(taxTrans);

                if (TaxTable::find(taxTrans.TaxCode).TaxBase != TaxBaseType::AmountByUnit)
                {
                    IEPSNegativeAdjustment -= adjustment;
                }
                else
                {
                    IEPSNegativeAdjustmentPerUnit -= adjustment;
                }
                continue;
            }

            if (!taxTrans.ExemptTax)
            {
                regularTaxExists = true;
            }

            this.groupTaxAmounts(mapTaxAmounts, taxTrans);
        }

        isDisplayExento = this.isDisplayExento(regularTaxExists, isLineSection, !taxTransList.empty());

        MapEnumerator me = mapTaxAmounts.getEnumerator();
        while (me.moveNext())
        {
            taxTrans.clear();

            [taxTrans.TaxType_MX, taxTrans.TaxValue, taxRateType] = me.currentKey();
            [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur, taxTrans.TaxBaseQty] = me.currentValue();

            showTrasladoExemptTaxHeader = EInvoiceCFDIShowTrasladoExemptHeader_MXFlight::instance().isEnabled() 
                                            && !isLineSection && taxRateType == exemptRateType;
            isCreateTraslado = isLineSection || taxRateType != exemptRateType || isDisplayExento || showTrasladoExemptTaxHeader;

            if (isCreateTraslado)
            {
                XmlElement trasladoElement = this.createElement('Traslado');
                this.fillTaxSection(trasladoElement, taxTrans, this.shouldExportTaxBaseToTrasladoElement());

                _trasladosElement.appendChild(trasladoElement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_AduanaInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_AduanaInfoNode(
        str _nodeName,
        str _number,
        str _date,
        str _aduana)
    {
        XmlElement aduanaElement;

        aduanaElement = this.createElement(_nodeName);
        aduanaElement.setAttribute('NumeroPedimento', _number);

        return aduanaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ComprobanteElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Comprobante node.
    /// </summary>
    /// <returns>
    /// The created comprobante element.
    /// </returns>
    protected XmlElement create_ComprobanteElement()
    {
        XmlElement comprobanteElement = this.createElement('Comprobante');
        XmlAttribute schemaLocationAttribute = xmlDoc.createAttribute2('xsi:schemaLocation', xsi);

        if (eInvoiceJourMap.isCartaPorteUsed())
        {
            if (this.isCartaPorteVersion3_1())
            {
                comprobanteElement.setAttribute('xmlns:cartaporte31', cartaPorteNs);
                schemaLocation += ' http://www.sat.gob.mx/CartaPorte31 http://www.sat.gob.mx/sitio_internet/cfd/CartaPorte/CartaPorte31.xsd';
            }
            else
            {
                comprobanteElement.setAttribute('xmlns:cartaporte30', cartaPorteNs);
                schemaLocation += ' http://www.sat.gob.mx/CartaPorte30 http://www.sat.gob.mx/sitio_internet/cfd/CartaPorte/CartaPorte30.xsd';
            }

            comprobanteElement.setAttribute('Moneda', 'XXX');
        }
        else
        {
            comprobanteElement.setAttribute('Moneda', eInvoiceJourMap.currencyCode());
        }

        schemaLocationAttribute.value(schemaLocation);
        comprobanteElement.setAttribute('xmlns:cfdi', defaultNamespace);

        if (eInvoiceJourMap.isForeignTrade() && !eInvoiceJourMap.isCartaPorteUsed())
        {
            if (this.isForeignTradeVersion2())
            {
                comprobanteElement.setAttribute('xmlns:cce20', defaultForeignTradeNamespace);
            }
            else
            {
                comprobanteElement.setAttribute('xmlns:cce11', defaultForeignTradeNamespace);
            }
        }

        comprobanteElement.setAttributeNode(schemaLocationAttribute);

        comprobanteElement.setAttribute('Version', this.version());
        this.setAttributeIfNotNull(comprobanteElement, 'Serie', eInvoiceJourMap.eInvoiceJour().InvoiceSeries + eInvoiceJourMap.serieSuffix());

        this.setAttributeIfNotNull(comprobanteElement, 'Folio', eInvoiceJourMap.eInvoiceJour().InvoiceFolio);
        comprobanteElement.setAttribute('Fecha', DateTimeUtil::toStr(eInvoiceJourMap.documentDateTime()));

        comprobanteElement.setAttribute('NoCertificado', eInvoiceJourMap.certificateSerialNumber());
        comprobanteElement.setAttribute('Certificado', eInvoiceJourMap.certificateInBase64());
        this.setAttributeIfNotNull(comprobanteElement, 'CondicionesDePago', eInvoiceJourMap.termOfPaymDesc());

        if(eInvoiceJourMap.endDisc())
        {
            headerDiscountPercent = eInvoiceJourMap.endDisc() / eInvoiceJourMap.salesBalance();
        }

        if (!isTraslado && !this.isLocalCurrency(eInvoiceJourMap.currencyCode()))
        {
            comprobanteElement.setAttribute('TipoCambio', this.formatXmlAmount(eInvoiceJourMap.exchangeRate()/100, 6));
        }
        else if (eInvoiceJourMap is CustPackingSlipJourEInvoiceJourMap_MX && !this.isLocalCurrency(eInvoiceJourMap.currencyCode()) && !eInvoiceJourMap.isCartaPorteUsed())
        {
            ExchRate exchRate = ExchangeRateHelper::exchRate(eInvoiceJourMap.currencyCode(), eInvoiceJourMap.invoiceDate());
            comprobanteElement.setAttribute('TipoCambio', this.formatXmlAmount(exchRate/100, 6));
        }

        if (eInvoiceJourMap.isCartaPorteUsed())
        {
            comprobanteElement.setAttribute('Total', this.formatXmlAmount(eInvoiceJourMap.totalAmount(), 0));
        }
        else
        {
            comprobanteElement.setAttribute('Total', this.formatXmlAmount(eInvoiceJourMap.totalAmount()));
        }

        comprobanteElement.setAttribute('TipoDeComprobante', this.setInvoiceType());

        if (!isTraslado)
        {

            if (eInvoiceJourMap.invoiceAccount() != eInvoiceJourMap.orderAccount())
            {
                comprobanteElement.setAttribute('MetodoPago', eInvoiceJourMap.getCustTable().SATPaymMethod_MX);
            }
            else
            {
                comprobanteElement.setAttribute('MetodoPago', eInvoiceJourMap.orderOfPayment());
            }

            comprobanteElement.setAttribute('FormaPago', eInvoiceJourMap.methodOfPayment());
        }

        comprobanteElement.setAttribute('LugarExpedicion', this.getLugarExpedicion());
        this.setAttributeIfNotNull(comprobanteElement, 'Confirmacion', eInvoiceJourMap.CFDIConfirmNumber());

        Map relacionadosElementsMap = this.create_RelacionadosElementsMap(comprobanteElement);
        MapEnumerator me = relacionadosElementsMap.getEnumerator();
        while (me.moveNext())
        {
            XmlElement relacionadosElement = me.currentValue();
            this.appendChildIfNotNull(comprobanteElement, relacionadosElement);
        }

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ConceptoElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Concepto node.
    /// </summary>
    /// <returns>
    /// The created concepto element.
    /// </returns>
    protected XmlElement create_ConceptoElement()
    {
        real discountMultiplier = this.getLineDiscountMultiplier(eInvoiceTransMap.amount(), eInvoiceTransMap.discountAmount());

        this.initIEPSAdjustment();
        XmlElement conceptoElement = this.create_ItemInfoNode(
            'Concepto',
            this.formatXmlAmountCheckDecimal(eInvoiceTransMap.qty()),
            eInvoiceTransMap.unit(),
            eInvoiceTransMap.itemId(),
            eInvoiceTransMap.itemName() +
            (eInvoiceTransMap.customsDocDate() ?
            ' - ' + strFmt("@SYS313593", "@SYS341156", eInvoiceTransMap.customsDocDate()) : ''),
            '',
            '');

        this.createTaxesLines(conceptoElement);
        Amount taxAdjustmentPerUnit =  CurrencyExchangeHelper::price(IEPSNegativeAdjustmentPerUnit + IEPSPositiveAdjustmentPerUnit, eInvoiceJourMap.currencyCode());
        Amount taxAdjustment = CurrencyExchangeHelper::price((IEPSNegativeAdjustment + IEPSPositiveAdjustment) * discountMultiplier, eInvoiceJourMap.currencyCode()) + taxAdjustmentPerUnit;

        Amount totalAmount = eInvoiceTransMap.amount() + eInvoiceTransMap.discountAmount() + taxAdjustment;
        invoiceSubtotal += totalAmount;

        int decimals;
        AmountCur discount;

        if (!markupTrans && !isTraslado && (eInvoiceTransMap.discountAmount() != 0 || headerDiscountPercent != 0))
        {
            taxAdjustment = CurrencyExchangeHelper::price((IEPSNegativeAdjustment + IEPSPositiveAdjustment) * (discountMultiplier - 1), eInvoiceJourMap.currencyCode());
            discount = eInvoiceTransMap.discountAmount() + taxAdjustment + decRound((eInvoiceTransMap.amount() * headerDiscountPercent), 2);
            decimals = this.calcDecimalsForDiscountAndTotals(totalAmount, discount);
            conceptoElement.setAttribute('Descuento', this.formatString(this.formatXmlAmountCheckDecimal(discount)));
            totalDiscount += discount;
        }

        decimals = this.calcDecimalsForDiscountAndTotals(totalAmount, discount);
        conceptoElement.setAttribute('Importe', this.formatXmlAmount(totalAmount, decimals));
        conceptoElement.setAttribute('ValorUnitario', this.formatXmlAmount(this.unitPrice(eInvoiceTransMap), 6));

        this.updateIEPSAdjustmentTotal();

        if (eInvoiceTransMap.customsDocNumber() && (!eInvoiceJourMap.isForeignTrade() || eInvoiceJourMap.isCartaPorteUsed()))
        {
            XmlElement informacionAduaneraElement = this.create_AduanaInfoNode(
                'InformacionAduanera',
                eInvoiceTransMap.customsDocNumber(),
                '',
                '');
            conceptoElement.appendChild(informacionAduaneraElement);
        }

        if (eInvoiceTransMap.propertyNumber())
        {
            XmlElement cuentaPredial = this.createElement('CuentaPredial');
            cuentaPredial.setAttribute('Numero', eInvoiceTransMap.propertyNumber());
            conceptoElement.appendChild(cuentaPredial);
        }

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_CartaPorteElement</Name>
				<Source><![CDATA[
    protected XmlElement create_CartaPorteElement()
    {
        XmlElement cartaPorteElement = this.createCartaPorteElement('CartaPorte');

        if (this.isCartaPorteVersion3_1())
        {
            cartaPorteElement.setAttribute('Version', '3.1');
        }
        else
        {
            cartaPorteElement.setAttribute('Version', '3.0');
        }
        cartaPorteElement.setAttribute('IdCCP', eInvoiceJourMap.idCCPValue());

        if (eInvoiceJourMap.isForeignTrade())
        {
            if (this.isCartaPorteVersion3_1())
            {
                XmlElement regimenesAduaneros = this.create_RegimenesAduanerosElement();
                cartaPorteElement.appendChild(regimenesAduaneros);
            }
            else
            {
                cartaPorteElement.setAttribute('RegimenAduanero', eInvoiceJourMap.customsRegime());
            }
            cartaPorteElement.setAttribute('TranspInternac', 'Sí');
            cartaPorteElement.setAttribute('EntradaSalidaMerc', 'Salida');
            cartaPorteElement.setAttribute('ViaEntradaSalida', '01');
            cartaPorteElement.setAttribute('PaisOrigenDestino', eInvoiceJourMap.residenciaFiscal());
        }
        else
        {
            cartaPorteElement.setAttribute('TranspInternac', 'No');
        }

        cartaPorteElement.setAttribute('TotalDistRec', this.formatXmlAmount(eInvoiceJourMap.distanceTraveled(), 2));

        XmlElement ubicacionesElement = this.create_UbicacionesElement();
        cartaPorteElement.appendChild(ubicacionesElement);
        XmlElement mercanciasElement = this.create_MercanciasCartaPorteElement();
        cartaPorteElement.appendChild(mercanciasElement);
        XmlElement figuraTransporteElement = this.create_FiguraTransporteElement();
        cartaPorteElement.appendChild(figuraTransporteElement);

        return cartaPorteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_RegimenesAduanerosElement</Name>
				<Source><![CDATA[
    protected XmlElement create_RegimenesAduanerosElement()
    {
        XmlElement regimenesAduanerosElement = this.createCartaPorteElement('RegimenesAduaneros');
        XmlElement regimenAduaneroCCPElement = this.createCartaPorteElement('RegimenAduaneroCCP');

        regimenAduaneroCCPElement.setAttribute('RegimenAduanero', eInvoiceJourMap.customsRegime());
        regimenesAduanerosElement.appendChild(regimenAduaneroCCPElement);

        return regimenesAduanerosElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_UbicacionesElement</Name>
				<Source><![CDATA[
    protected XmlElement create_UbicacionesElement()
    {
        utcdatetime transportationDateTime = eInvoiceJourMap.transportationDateTime() ? eInvoiceJourMap.transportationDateTime() : eInvoiceJourMap.documentDateTime();

        XmlElement ubicacionesElement = this.createCartaPorteElement('Ubicaciones');
        XmlElement ubicacionElement = this.createCartaPorteElement('Ubicacion');
        ubicacionElement.setAttribute('TipoUbicacion', 'Origen');
        ubicacionElement.setAttribute('IDUbicacion', 'OR' + eInvoiceJourMap.pickUpSpot());
        ubicacionElement.setAttribute('RFCRemitenteDestinatario', eInvoiceJourMap.getCompanyInfo().Rfc_MX);
        ubicacionElement.setAttribute('FechaHoraSalidaLlegada', DateTimeUtil::toStr(transportationDateTime));

        XmlElement domicilio;

        if (TransportationDocument::find(eInvoiceJourMap.eInvoiceJour().TransportationDocument).LoadedPostalAddress)
        {
            domicilio = this.create_CartaPorteAddressInfoNode(
                'Domicilio',
                this.compressBlankSpace(eInvoiceJourMap.transportationStreet()),
                eInvoiceJourMap.transportationStreetNumber(),
                eInvoiceJourMap.transportationBuildingComplement(),
                eInvoiceJourMap.transportationCountyId(),
                eInvoiceJourMap.transportationCity(),
                eInvoiceJourMap.transportationStateId(),
                eInvoiceJourMap.transportationCountryRegionId(),
                eInvoiceJourMap.transportationZipCode());
        }
        else
        {
            domicilio = this.create_CartaPorteAddressInfoNode(
                'Domicilio',
                this.compressBlankSpace(eInvoiceJourMap.emitentStreet()),
                eInvoiceJourMap.emitentStreetNumber(),
                eInvoiceJourMap.emitentBuildingComplement(),
                eInvoiceJourMap.emitentCountyId(),
                eInvoiceJourMap.emitentCity(),
                eInvoiceJourMap.emitentStateId(),
                MEX,
                eInvoiceJourMap.emitentZipCode());
        }

        ubicacionElement.appendChild(domicilio);

        ubicacionesElement.appendChild(ubicacionElement);

        ubicacionElement = this.createCartaPorteElement('Ubicacion');
        ubicacionElement.setAttribute('TipoUbicacion', 'Destino');
        ubicacionElement.setAttribute('IDUbicacion', 'DE' + eInvoiceJourMap.dropOffSpot());
        ubicacionElement.setAttribute('RFCRemitenteDestinatario', eInvoiceJourMap.invoiceRFC());
        ubicacionElement.setAttribute('FechaHoraSalidaLlegada', DateTimeUtil::toStr(DateTimeUtil::addHours(
            transportationDateTime,
            eInvoiceJourMap.timeTraveled())));

        if (TransportationDocument::find(eInvoiceJourMap.eInvoiceJour().TransportationDocument).UnloadedPostalAddress)
        {
            domicilio = this.create_CartaPorteAddressInfoNode(
                'Domicilio',
                this.compressBlankSpace(eInvoiceJourMap.unloadedTransportationStreet()),
                eInvoiceJourMap.unloadedTransportationStreetNumber(),
                eInvoiceJourMap.unloadedTransportationBuildingComplement(),
                eInvoiceJourMap.unloadedTransportationCountyId(),
                eInvoiceJourMap.unloadedTransportationCity(),
                eInvoiceJourMap.unloadedTransportationStateId(),
                eInvoiceJourMap.unloadedTransportationCountryRegionId(),
                eInvoiceJourMap.unloadedTransportationZipCode());
        }
        else
        {
            domicilio = this.create_CartaPorteAddressInfoNode(
                'Domicilio',
                this.compressBlankSpace(eInvoiceJourMap.deliveryStreet()),
                eInvoiceJourMap.deliveryStreetNumber(),
                eInvoiceJourMap.deliveryBuildingComplement(),
                eInvoiceJourMap.deliveryCountyId(),
                eInvoiceJourMap.deliveryCity(),
                eInvoiceJourMap.deliveryStateId(),
                eInvoiceJourMap.deliveryCountryRegionId(),
                eInvoiceJourMap.deliveryZipCode());
        }

        ubicacionElement.appendChild(domicilio);
        ubicacionElement.setAttribute('DistanciaRecorrida', this.formatXmlAmount(eInvoiceJourMap.distanceTraveled(), 2));

        if (eInvoiceJourMap.isForeignTrade())
        {
            ubicacionElement.setAttribute('NumRegIdTrib', eInvoiceJourMap.numRegIdTrib());
            ubicacionElement.setAttribute('ResidenciaFiscal', eInvoiceJourMap.residenciaFiscal());
        }

        ubicacionesElement.appendChild(ubicacionElement);

        return ubicacionesElement;

    }

]]></Source>
			</Method>
			<Method>
				<Name>create_MercanciasCartaPorteElement</Name>
				<Source><![CDATA[
    protected XmlElement create_MercanciasCartaPorteElement()
    {
        XmlElement mercanciasElement = this.createCartaPorteElement('Mercancias');

        eInvoiceJourMap.resetLines();
        mercanciasElement.setAttribute('UnidadPeso', eInvoiceJourMap.weightUnit());
        mercanciasElement.setAttribute('NumTotalMercancias', int2Str(eInvoiceJourMap.getLinesCount()));

        GrossWeight weightTotal;

        while (eInvoiceJourMap.nextLine())
        {
            eInvoiceTransMap = eInvoiceJourMap.currentLine();

            XmlElement mercanciaElement = this.createCartaPorteElement('Mercancia');

            mercanciaElement.setAttribute('BienesTransp', eInvoiceTransMap.productCode());
            mercanciaElement.setAttribute('Descripcion', this.removeDuplicatedSpaces(this.formatString(eInvoiceTransMap.itemName())));
            mercanciaElement.setAttribute('Cantidad', int2Str(abs(eInvoiceTransMap.qty())));
            mercanciaElement.setAttribute('ClaveUnidad', eInvoiceTransMap.uomCode());
            mercanciaElement.setAttribute('PesoEnKg', this.formatXmlAmount(eInvoiceTransMap.totalWeight(), 3));
            mercanciaElement.setAttribute('ValorMercancia', '0');

            weightTotal += abs(eInvoiceTransMap.totalWeight());

            if (eInvoiceTransMap is InvTransferJourLineEInvoiceTransMap_MX)
            {
                mercanciaElement.setAttribute('Moneda', 'MXN');
            }
            else
            {
                mercanciaElement.setAttribute('Moneda', eInvoiceTransMap.currencyCode());
            }

            if (eInvoiceTransMap.isHazardous())
            {
                hasHazardousMaterial = true;
                mercanciaElement.setAttribute('MaterialPeligroso', 'Sí');
                mercanciaElement.setAttribute('CveMaterialPeligroso', eInvoiceTransMap.hazardousMaterialType());
                mercanciaElement.setAttribute('Embalaje', eInvoiceTransMap.containerType());
            }
            else if (eInvoiceTransMap.displayHazardous())
            {
                mercanciaElement.setAttribute('MaterialPeligroso', 'No');
            }

            if (eInvoiceJourMap.isForeignTrade())
            {
                mercanciaElement.setAttribute('UUIDComercioExt', '00000000-0000-0000-0000-000000000000');
                mercanciaElement.setAttribute('FraccionArancelaria', eInvoiceTransMap.tariffFraction());
                
                mercanciaElement.setAttribute('TipoMateria', eInvoiceTransMap.materialType());
                this.setAttributeIfNotEmpty(mercanciaElement, 'DescripcionMateria', eInvoiceTransMap.materialDescription());

                XmlElement documentacionAduaneraElement = this.create_DocumentacionAduaneraElement();
                mercanciaElement.appendChild(documentacionAduaneraElement);
            }

            mercanciasElement.setAttribute('PesoBrutoTotal', this.formatXmlAmount(weightTotal, 3));
            mercanciasElement.appendChild(mercanciaElement);
        }

        XmlElement autotransporteElement = this.create_AutotransporteElement();
        mercanciasElement.appendChild(autotransporteElement);

        return mercanciasElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_AutotransporteElement</Name>
				<Source><![CDATA[
    protected XmlElement create_AutotransporteElement()
    {
        XmlElement autotransporteElement = this.createCartaPorteElement('Autotransporte');
        autotransporteElement.setAttribute('PermSCT', eInvoiceJourMap.permissionType());
        autotransporteElement.setAttribute('NumPermisoSCT', eInvoiceJourMap.permissionID());

        XmlElement identificacionVehicular = this.createCartaPorteElement('IdentificacionVehicular');
        identificacionVehicular.setAttribute('ConfigVehicular', eInvoiceJourMap.truckConfig());
        
        identificacionVehicular.setAttribute('PesoBrutoVehicular', any2Str(eInvoiceJourMap.grossVehicleWeight()));

        identificacionVehicular.setAttribute('PlacaVM', eInvoiceJourMap.truckSerialNum());
        identificacionVehicular.setAttribute('AnioModeloVM', eInvoiceJourMap.truckModelYear());

        autotransporteElement.appendChild(identificacionVehicular);

        XmlElement segurosElement = this.createCartaPorteElement('Seguros');
        segurosElement.setAttribute('AseguraRespCivil', eInvoiceJourMap.insuranceVendor());
        segurosElement.setAttribute('PolizaRespCivil', eInvoiceJourMap.insurancePolicyNum());

        if (hasHazardousMaterial)
        {
            segurosElement.setAttribute('AseguraMedAmbiente', eInvoiceJourMap.environmentalDamageInsuranceVendor());
            segurosElement.setAttribute('PolizaMedAmbiente', eInvoiceJourMap.environmentalDamageInsurancePolicyNum());
        }

        autotransporteElement.appendChild(segurosElement);

        if (eInvoiceJourMap.trailer1Config())
        {
            XmlElement remolques = this.createCartaPorteElement('Remolques');
            XmlElement remolque = this.createCartaPorteElement('Remolque');
            remolque.setAttribute('SubTipoRem', eInvoiceJourMap.trailer1Config());
            remolque.setAttribute('Placa', eInvoiceJourMap.trailer1SerialNum());
            remolques.appendChild(remolque);

            if (eInvoiceJourMap.trailer2Config())
            {
                remolque = this.createCartaPorteElement('Remolque');
                remolque.setAttribute('SubTipoRem', eInvoiceJourMap.trailer2Config());
                remolque.setAttribute('Placa', eInvoiceJourMap.trailer2SerialNum());
                remolques.appendChild(remolque);
            }

            autotransporteElement.appendChild(remolques);
        }

        return autotransporteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_DocumentacionAduaneraElement</Name>
				<Source><![CDATA[
    protected XmlElement create_DocumentacionAduaneraElement()
    {
        XmlElement documentacionAduaneraElement = this.createCartaPorteElement('DocumentacionAduanera');
        documentacionAduaneraElement.setAttribute('TipoDocumento', eInvoiceTransMap.documentType());
        documentacionAduaneraElement.setAttribute('IdentDocAduanero', eInvoiceTransMap.identifierCustomsDocument());

        return documentacionAduaneraElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_AutotransporteFederalElement</Name>
				<Source><![CDATA[
    protected XmlElement create_AutotransporteFederalElement()
    {
        XmlElement autotransporteFederalElement = this.createCartaPorteElement('AutotransporteFederal');
        return autotransporteFederalElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_OperadoresElement</Name>
				<Source><![CDATA[
    protected XmlElement create_OperadoresElement()
    {
        XmlElement operadoresElement = this.createCartaPorteElement('Operadores');
        return operadoresElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_GuiasIdentificacionElement</Name>
				<Source><![CDATA[
    protected XmlElement create_GuiasIdentificacionElement()
    {
        XmlElement guiasIdentificacionElement = this.createCartaPorteElement('GuiasIdentificacion');

        return guiasIdentificacionElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_FiguraTransporteElement</Name>
				<Source><![CDATA[
    protected XmlElement create_FiguraTransporteElement()
    {
        XmlElement figuraTransporteElement = this.createCartaPorteElement('FiguraTransporte');
        TransportationDocument transDoc = TransportationDocument::find(eInvoiceJourMap.eInvoiceJour().TransportationDocument);
        EInvoiceTransportationActors_MX transActors;
        XmlElement tiposFiguraElement;

        if (eInvoiceJourMap.worker1DriverLicense())
        {
            tiposFiguraElement = this.create_driver1TiposFiguraElement();
            figuraTransporteElement.appendChild(tiposFiguraElement);

            if (eInvoiceJourMap.worker2DriverLicense())
            {
                tiposFiguraElement = this.create_driver2TiposFiguraElement();
                figuraTransporteElement.appendChild(tiposFiguraElement);
            }
        }
        else
        {
            while select RFC, Name, DriverLicense, ForeignId from transActors
                where transActors.TransportationDocument == transDoc.RecId
                    && transActors.Role == DriverCode
            {
                tiposFiguraElement = this.createCartaPorteElement('TiposFigura');
                tiposFiguraElement.setAttribute('TipoFigura', DriverCode);
                this.setAttributeIfNotEmpty(tiposFiguraElement, 'RFCFigura', transActors.RFC);
                this.setAttributeIfNotEmpty(tiposFiguraElement, 'NombreFigura', transActors.Name);
                this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumLicencia', transActors.DriverLicense);
                this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumRegIdTribFigura', transActors.ForeignId);
                figuraTransporteElement.appendChild(tiposFiguraElement);
            }
        }

        while select Role, RFC, Name, DriverLicense, ForeignId from transActors
            where transActors.TransportationDocument == transDoc.RecId
                && (transActors.Role == '02'
                || transActors.Role == '03'
                || transActors.Role == '04')
        {
            tiposFiguraElement = this.createCartaPorteElement('TiposFigura');
        tiposFiguraElement.setAttribute('TipoFigura', transActors.Role);
            this.setAttributeIfNotEmpty(tiposFiguraElement, 'RFCFigura', transActors.RFC);
            this.setAttributeIfNotEmpty(tiposFiguraElement, 'NombreFigura', transActors.Name);
            this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumLicencia', transActors.DriverLicense);
            this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumRegIdTribFigura', transActors.ForeignId);
            figuraTransporteElement.appendChild(tiposFiguraElement);
        }

        return figuraTransporteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_PropietarioCartaPorteElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Propietario element for a given vendor account.
    /// </summary>
    /// <param name = "_vendAccount">Vendor account.</param>
    /// <returns>XML element.</returns>
    protected XmlElement create_PropietarioCartaPorteElement(VendAccount _vendAccount)
    {
        XmlElement proprietarioElement = this.createCartaPorteElement('Propietario');

        VendTable vendTable = VendTable::find(_vendAccount);
        proprietarioElement.setAttribute('RFCPropietario', vendTable.Rfc_MX);
        proprietarioElement.setAttribute('ResidenciaFiscalPropietario', vendTable.countryRegionId());

        return proprietarioElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ArrendatarioCartaPorteElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Arrendatario element for a given vendor account.
    /// </summary>
    /// <param name = "_vendAccount">Vendor account.</param>
    /// <returns>XML element.</returns>
    protected XmlElement create_ArrendatarioCartaPorteElement(VendAccount _vendAccount)
    {
        XmlElement arrendatarioElement = this.createCartaPorteElement('Arrendatario');

        VendTable vendTable = VendTable::find(_vendAccount);
        arrendatarioElement.setAttribute('RFCArrendatario', vendTable.Rfc_MX);
        arrendatarioElement.setAttribute('ResidenciaFiscalArrendatario', vendTable.countryRegionId());

        if (vendTable.countryRegionId() != MEX)
        {
            arrendatarioElement.setAttribute('NumRegIdTribArrendatario', vendTable.ForeignTaxRegistration_MX);
        }

        return arrendatarioElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_driver1TiposFiguraElement</Name>
				<Source><![CDATA[
    protected XmlElement create_driver1TiposFiguraElement()
    {
        XmlElement tiposFiguraElement = this.createCartaPorteElement('TiposFigura');

        tiposFiguraElement.setAttribute('TipoFigura', DriverCode);

        this.setAttributeIfNotEmpty(tiposFiguraElement, 'RFCFigura', eInvoiceJourMap.worker1NationalId());
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'NombreFigura', eInvoiceJourMap.worker1Name());
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumLicencia', eInvoiceJourMap.worker1DriverLicense());
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumRegIdTribFigura', eInvoiceJourMap.worker1ForeignId());

        if (eInvoiceJourMap.worker1CountryRegion() != MEX)
        {
            this.setAttributeIfNotEmpty(tiposFiguraElement, 'ResidenciaFiscalFigura', eInvoiceJourMap.worker1CountryRegion());
        }

        return tiposFiguraElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_driver2TiposFiguraElement</Name>
				<Source><![CDATA[
    protected XmlElement create_driver2TiposFiguraElement()
    {
        XmlElement tiposFiguraElement = this.createCartaPorteElement('TiposFigura'); 

        tiposFiguraElement.setAttribute('TipoFigura', DriverCode);
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'RFCFigura', eInvoiceJourMap.worker2NationalId());
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'NombreFigura', eInvoiceJourMap.worker2Name());
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumLicencia', eInvoiceJourMap.worker2DriverLicense());
        this.setAttributeIfNotEmpty(tiposFiguraElement, 'NumRegIdTribtiposFigura', eInvoiceJourMap.worker2ForeignId());

        if (eInvoiceJourMap.worker2CountryRegion() != MEX)
        {
            this.setAttributeIfNotEmpty(tiposFiguraElement, 'ResidenciaFiscalFigura', eInvoiceJourMap.worker2CountryRegion());
        }

        return tiposFiguraElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ConceptoElementMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Concepto node for a given MarkupTrans record.
    /// </summary>
    /// <param name="_markupTrans">
    /// The MarkupTrans record to generate the concepto node.
    /// </param>
    /// <returns>
    /// The Concepto node.
    /// </returns>
    protected XmlElement create_ConceptoElementMarkupTrans(MarkupTrans _markupTrans)
    {
        markupTrans = _markupTrans;

        XmlElement conceptoElement = this.create_ItemInfoNode(
            'Concepto',
            '1',
            'un',
            _markupTrans.MarkupCode,
            _markupTrans.markupTable().Txt,
            this.formatXmlAmount(_markupTrans.CalculatedAmount, 6),
            this.formatXmlAmountCheckDecimal(_markupTrans.CalculatedAmount));
        this.createTaxesLines(conceptoElement);

        invoiceSubtotal += _markupTrans.CalculatedAmount;

        markupTrans = null;

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_DestinatarioForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Destinatario node for the foreign trade.
    /// </summary>
    /// <returns>
    /// The created Destinatario element.
    /// </returns>
    protected XmlElement create_DestinatarioForeignTradeElement()
    {
        XmlElement destinatario;
        XmlElement domicilio;

        destinatario = this.createForeignTradeElement('Destinatario');

        destinatario = this.setAttributeIfNotEmpty(destinatario, 'NumRegIdTrib', eInvoiceJourMap.numRegIdTrib());
        destinatario = this.setAttributeIfNotEmpty(destinatario, 'Nombre', eInvoiceJourMap.customsName());

        domicilio = this.create_AddressInfoNode(
            'Domicilio',
            this.compressBlankSpace(eInvoiceJourMap.deliveryStreet()),
            eInvoiceJourMap.deliveryStreetNumber(),
            eInvoiceJourMap.deliveryBuildingComplement(),
            eInvoiceJourMap.deliveryCountyId(),
            eInvoiceJourMap.deliveryCity(),
            eInvoiceJourMap.deliveryStateId(),
            eInvoiceJourMap.deliveryCountryRegionId(),
            eInvoiceJourMap.deliveryZipCode());

        this.addDistrictToAddressInfoNode(domicilio, eInvoiceJourMap.deliveryDistrictName());

        if(domicilio)
        {
            destinatario.appendChild(domicilio);
        }

        return destinatario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_EmisorElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Emissor node.
    /// </summary>
    /// <returns>
    /// The created Emissor element.
    /// </returns>
    protected XmlElement create_EmisorElement()
    {
        XmlElement emisorElement = this.createElement('Emisor');

        emisorElement.setAttribute('Rfc', eInvoiceJourMap.getCompanyInfo().Rfc_MX);
        if (this.shouldSetEmisorNombre())
        {
            emisorElement.setAttribute('Nombre', eInvoiceJourMap.getCompanyInfo().Name);
        }
        emisorElement.setAttribute('RegimenFiscal', eInvoiceJourMap.getCompanyInfo().TaxRegimeCode_MX);

        return emisorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_EmisorForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Emisor node for the foreign trade.
    /// </summary>
    /// <returns>
    /// The created Emisor element.
    /// </returns>
    protected XmlElement create_EmisorForeignTradeElement()
    {
        XmlElement emisor;
        XmlElement domicilio;

        emisor = this.createForeignTradeElement('Emisor');
        emisor = this.setAttributeIfNotEmpty(emisor, 'Curp', EInvoiceXMLFormat_V3_3_MX::curpNumber());

        domicilio = this.create_AddressInfoNode(
            'Domicilio',
            this.compressBlankSpace(eInvoiceJourMap.emitentStreet()),
            eInvoiceJourMap.emitentStreetNumber(),
            eInvoiceJourMap.emitentBuildingComplement(),
            eInvoiceJourMap.emitentCountyId(),
            eInvoiceJourMap.emitentCity(),
            eInvoiceJourMap.emitentStateId(),
            MEX,
            eInvoiceJourMap.emitentZipCode());

        this.addDistrictToAddressInfoNode(domicilio, eInvoiceJourMap.emitentDistrictName());

        if(domicilio)
        {
            emisor.appendChild(domicilio);
        }

        return emisor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Complemento node.
    /// </summary>
    /// <returns>
    /// The created complemento element.
    /// </returns>
    protected XmlElement create_ForeignTradeElement()
    {
        XmlElement complementoElement;
        XmlElement comercioExterior;
        XmlElement emisor;
        XmlElement receptor;
        XmlElement destinatario;
        XmlElement mercancias;
        XmlElement proprietario;

        if (this.shouldCreateForeignTradeElement())
        {
            complementoElement = this.createElement('Complemento');

            comercioExterior = this.createForeignTradeElement('ComercioExterior');

            comercioExterior.setAttribute('Version', EInvoiceXMLFormat_V3_3_MX::foreignTradeVersion());
            if (isTraslado)
            {
                comercioExterior.setAttribute('MotivoTraslado', eInvoiceJourMap.shippingReason());
            }

            if (!this.isForeignTradeVersion2())
            {
                comercioExterior.setAttribute('TipoOperacion', EInvoiceXMLFormat_V3_3_MX::operationType());
            }

            comercioExterior.setAttribute('ClaveDePedimento', 'A1');
            comercioExterior.setAttribute('CertificadoOrigen', eInvoiceJourMap.sourceCertificate());
            this.setAttributeIfNotEmpty(comercioExterior, 'NumCertificadoOrigen', eInvoiceJourMap.certificateNumber());
            comercioExterior.setAttribute('Incoterm', eInvoiceJourMap.incotermCode());

            if (!this.isForeignTradeVersion2())
            {
                comercioExterior.setAttribute('Subdivision', '0');
            }

            comercioExterior.setAttribute('TipoCambioUSD', this.formatXmlAmount(this.exchangeRateForeignTrade(eInvoiceJourMap.invoiceDate())/100, 6));

            const SysFlightName OverrideCFDIForeignTradeTotalAmountWithAmountMST = 'OverrideCFDIForeignTradeTotalAmountWithAmountMST';

            if (isFlightEnabled(OverrideCFDIForeignTradeTotalAmountWithAmountMST))
            {
                comercioExterior.setAttribute('TotalUSD', this.formatXmlAmount(EInvoiceXMLFormat_V3_3_MX::calcAmountInCFDIReportingCurrency(eInvoiceJourMap.totalAmountForeignTrade(), eInvoiceJourMap.currencyCode())));
            }
            else
            {
                comercioExterior.setAttribute('TotalUSD', this.formatXmlAmount(EInvoiceXMLFormat_V3_3_MX::calcAmountInCFDIReportingCurrency(eInvoiceJourMap.totalAmountForeignTrade(), Ledger::accountingCurrency())));
            }

            emisor = this.create_EmisorForeignTradeElement();
            if(emisor)
            {
                comercioExterior.appendChild(emisor);
            }

            if(isTraslado)
            {
                proprietario = this.create_PropietarioElement();
                if(proprietario)
                {
                    comercioExterior.appendChild(proprietario);
                }
            }

            receptor = this.create_ReceptorForeignTradeElement();
            if(receptor)
            {
                comercioExterior.appendChild(receptor);
            }

            destinatario = this.create_DestinatarioForeignTradeElement();
            if(destinatario)
            {
                comercioExterior.appendChild(destinatario);
            }

            mercancias = this.create_MercanciasElement();
            if(mercancias)
            {
                comercioExterior.appendChild(mercancias);
            }

            complementoElement.appendChild(comercioExterior);
        }

        return complementoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ItemInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_ItemInfoNode(
        str _nodeName,
        str _qty,
        str _unit,
        str _itemId,
        str _itemDesc,
        str _unitprice,
        str _lineAmount)
    {
        XmlElement itemElement = this.createElement(_nodeName);
        EInvoiceExtCodeId_MX extCode = markupTrans ? markupTrans.satProductCode_MX : eInvoiceTransMap.productCode();

        itemElement.setAttribute('ClaveProdServ', this.formatString(extCode ? extCode : defProdCode));
        if (eInvoiceTransMap.noIdentification())
        {
            itemElement.setAttribute('NoIdentificacion', this.formatString(eInvoiceTransMap.noIdentification()));
        }

        itemElement.setAttribute('Cantidad', this.formatString(_qty));

        extCode = markupTrans ? markupTrans.satUnitCode_MX : eInvoiceTransMap.uomCode();
        itemElement.setAttribute('ClaveUnidad', this.formatString(extCode ? extCode : defUnitCode));

        if (eInvoiceTransMap.productId())
        {
            itemElement.setAttribute('NoIdentificacion', this.formatString(eInvoiceTransMap.productId()));
        }

        if (eInvoiceTransMap.isUnitApplicable())
        {
            itemElement.setAttribute('Unidad', _unit ? _unit : #NotApplicable);
        }

        itemElement.setAttribute('Descripcion', this.removeDuplicatedSpaces(this.formatString(_itemDesc)));

        itemElement.setAttribute('ValorUnitario', this.formatString(_unitPrice));
        itemElement.setAttribute('Importe', this.formatString(_lineAmount));

        return itemElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_MercanciaElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Mercancia node for the foreign trade.
    /// </summary>
    /// <param name = "_roundingDifferenceInReportingCur">
    /// The rounding difference that should be included in the total amount.
    /// </param>
    /// <returns>
    /// The created Mercancia element.
    /// </returns>
    protected XmlElement create_MercanciaElement(Amount _roundingDifferenceInReportingCur = 0)
    {
        Qty customsQty;
        EInvoiceExtCodeId_MX uomCode;
        real totalAmountUSD;
        BrandCode_MX brandCode;
        InventSerialId serialNumber;
        EInvoiceExtCodeId_MX tariffFraction;
        str noIdentificacion;

        [noIdentificacion, tariffFraction] = foreignTradeAmountsKey;
        [customsQty, uomCode, totalAmountUSD, brandCode, serialNumber] = foreignTradeAmountsValue;
        totalAmountUSD += _roundingDifferenceInReportingCur;

        XmlElement mercancia = this.createForeignTradeElement('Mercancia');
        mercancia.setAttribute('NoIdentificacion', this.formatString(noIdentificacion));
        this.setAttributeIfNotEmpty(mercancia, 'FraccionArancelaria', tariffFraction);

        mercancia.setAttribute('CantidadAduana', this.formatXmlAmount(customsQty));
        mercancia.setAttribute('UnidadAduana', uomCode);

        if (customsQty)
        {
            mercancia.setAttribute('ValorUnitarioAduana', this.formatXmlAmount(totalAmountUSD/customsQty));
        }

        if (this.isForeignTradeVersion2())
        {
            mercancia.setAttribute('ValorDolares', this.formatXmlAmount(totalAmountUSD, 4));
        }
        else
        {
            mercancia.setAttribute('ValorDolares', this.formatXmlAmount(totalAmountUSD));
        }

        if (brandCode)
        {
            XmlElement descripcionesEspecificas = this.createForeignTradeElement('DescripcionesEspecificas');

            descripcionesEspecificas.setAttribute('Marca', brandCode);
            descripcionesEspecificas = this.setAttributeIfNotEmpty(descripcionesEspecificas, 'NumeroSerie', serialNumber);

            if(descripcionesEspecificas)
            {
                mercancia.appendChild(descripcionesEspecificas);
            }
        }

        return mercancia;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_MercanciasElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Mercancias node for the foreign trade.
    /// </summary>
    /// <returns>
    /// The created Mercancias element.
    /// </returns>
    protected XmlElement create_MercanciasElement()
    {
        XmlElement mercancias;
        XmlElement mercancia;
        Amount amountInReportingCur, roundingDifferenceInReportingCur;
        CurrencyCode currency;

        const SysFlightName OverrideCFDIForeignTradeTotalAmountWithAmountMST = 'OverrideCFDIForeignTradeTotalAmountWithAmountMST';

        if (isFlightEnabled(OverrideCFDIForeignTradeTotalAmountWithAmountMST))
        {
            currency = eInvoiceJourMap.currencyCode();
        }
        else
        {
            currency = Ledger::accountingCurrency();
        }

        mercancias = this.createForeignTradeElement('Mercancias');

        roundingDifferenceInReportingCur = decRound(EInvoiceXMLFormat_V3_3_MX::calcAmountInCFDIReportingCurrency(
            eInvoiceJourMap.totalAmountForeignTrade(),
            currency),
            2);

        Map foreignTradeAmountsMap;
        MapEnumerator foreignTradeAmountsEnumerator;
        Amount eInvoiceTransMaxAmount;

        foreignTradeAmountsMap = new Map(Types::Container, Types::Container);

        eInvoiceJourMap.resetLines();

        real totalAmountUSD;
        Qty customsQty;
        EInvoiceExtCodeId_MX uomCode;
        BrandCode_MX brandCode;
        InventSerialId serialNumber;
        EInvoiceExtCodeId_MX tariffFraction;
        container key;
        Amount amount;

        while (eInvoiceJourMap.nextLine())
        {
            eInvoiceTransMap = eInvoiceJourMap.currentLine();

            amount = eInvoiceTransMap.amount();

            if (CDFIForeignAmountsWithDiscountFlight::instance().isEnabled())
            {
                amount += eInvoiceTransMap.discountAmount();
            }

            if (isFlightEnabled(OverrideCFDIForeignTradeTotalAmountWithAmountMST))
            {
                amountInReportingCur = decRound(EInvoiceXMLFormat_V3_3_MX::calcAmountInCFDIReportingCurrency(amount, eInvoiceTransMap.currencyCode()), 2);
            }
            else
            {
                amount = CurrencyExchangeHelper::amountCur2MST(
                    amount,
                    eInvoiceTransMap.currencyCode(),
                    eInvoiceJourMap.exchangeRate());

                amountInReportingCur = decRound(EInvoiceXMLFormat_V3_3_MX::calcAmountInCFDIReportingCurrency(amount, Ledger::accountingCurrency()), 2);
            }

            roundingDifferenceInReportingCur -= amountInReportingCur;

            if (eInvoiceTransMap.customUomCode() != '99')
            {
                tariffFraction = eInvoiceTransMap.tariffFraction();
            }

            key = [eInvoiceTransMap.noIdentification(), tariffFraction];

            if (foreignTradeAmountsMap.exists(key))
            {
                [customsQty, uomCode, totalAmountUSD, brandCode, serialNumber] = foreignTradeAmountsMap.lookup(key);
                customsQty += eInvoiceTransMap.customsQty();
                totalAmountUSD += amountInReportingCur;
            }
            else
            {
                customsQty = eInvoiceTransMap.customsQty();
                uomCode = eInvoiceTransMap.customUomCode();
                totalAmountUSD = amountInReportingCur;
                brandCode = eInvoiceTransMap.brandCode();
                serialNumber = eInvoiceTransMap.serialNumber();
            }

            foreignTradeAmountsMap.insert(key, [customsQty, uomCode, totalAmountUSD, brandCode, serialNumber]);

            if (!eInvoiceTransMaxAmount || totalAmountUSD > eInvoiceTransMaxAmount)
            {
                eInvoiceTransMaxAmount = totalAmountUSD;
            }
        }

        foreignTradeAmountsEnumerator = foreignTradeAmountsMap.getEnumerator();

        while (foreignTradeAmountsEnumerator.moveNext())
        {
            foreignTradeAmountsKey = foreignTradeAmountsEnumerator.currentKey();
            foreignTradeAmountsValue = foreignTradeAmountsEnumerator.currentValue();
            totalAmountUSD = conPeek(foreignTradeAmountsValue, 3);

            if (totalAmountUSD == eInvoiceTransMaxAmount)
            {
                mercancia = this.create_MercanciaElement(roundingDifferenceInReportingCur);
            }
            else
            {
                mercancia = this.create_MercanciaElement();
            }

            if(mercancia)
            {
                mercancias.appendChild(mercancia);
            }
        }

        return mercancias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_PropietarioElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Propietario node for the foreign trade.
    /// </summary>
    /// <returns>
    /// The created Emisor element.
    /// </returns>
    protected XmlElement create_PropietarioElement()
    {
        XmlElement propietario;

        if(eInvoiceJourMap.shippingReason() == '05')
        {
            propietario = this.createForeignTradeElement('Propietario');

            propietario = this.setAttributeIfNotEmpty(propietario, 'NumRegIdTrib', eInvoiceJourMap.numRegIdTrib());
            propietario.setAttribute('ResidenciaFiscal', eInvoiceJourMap.residenciaFiscal());
        }

        return propietario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ReceptorElement</Name>
				<Source><![CDATA[
    protected XmlElement create_ReceptorElement()
    {
        XmlElement receptorElement = this.createElement('Receptor');

        receptorElement.setAttribute('Rfc', eInvoiceJourMap.recipientRFC());

        if (this.shouldSetReceptorNombre())
        {
            if (isTraslado)
            {
                receptorElement.setAttribute('Nombre' , this.removeDuplicatedSpaces(eInvoiceJourMap.getCompanyInfo().Name));
            }
            else if (eInvoiceJourMap.invoiceAccount() != eInvoiceJourMap.orderAccount())
            {
                receptorElement.setAttribute('Nombre', this.removeDuplicatedSpaces(DirPartyTable::findRec(eInvoiceJourMap.getCustTable().Party).Name));
            }
            else
            {
                receptorElement.setAttribute('Nombre', this.removeDuplicatedSpaces(eInvoiceJourMap.invoicingName()));
            }

        }

        if (this.shouldSetReceptorResidenciaFiscal())
        {
            CustTable custTable = eInvoiceJourMap.getCustTable();
            this.setAttributeIfNotEqual(receptorElement, 'ResidenciaFiscal', custTable.postalAddress().CountryRegionId, MEX);
            this.setAttributeIfNotNull(receptorElement, 'NumRegIdTrib', custTable.ForeignTaxRegistration_MX);
        }

        if (eInvoiceJourMap.invoiceAccount() != eInvoiceJourMap.orderAccount())
        {
            receptorElement.setAttribute('UsoCFDI', eInvoiceJourMap.getCustTable().SATPurpose_MX);
        }
        else
        {
            receptorElement.setAttribute('UsoCFDI', eInvoiceJourMap.eInvoicePurpose());
        }

        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ReceptorForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Receptor node for the foreign trade.
    /// </summary>
    /// <returns>
    /// The created Receptor element.
    /// </returns>
    protected XmlElement create_ReceptorForeignTradeElement()
    {
        XmlElement receptor;
        XmlElement domicilio;

        receptor = this.createForeignTradeElement('Receptor');

        domicilio = this.create_AddressInfoNode(
            'Domicilio',
            this.compressBlankSpace(eInvoiceJourMap.invoiceStreet()),
            eInvoiceJourMap.invoiceStreetNumber(),
            eInvoiceJourMap.invoiceBuildingComplement(),
            eInvoiceJourMap.invoiceCountyId(),
            eInvoiceJourMap.invoiceCity(),
            eInvoiceJourMap.invoiceStateId(),
            eInvoiceJourMap.invoiceCountryRegionId(),
            eInvoiceJourMap.invoiceZipCode());

        this.addDistrictToAddressInfoNode(domicilio, eInvoiceJourMap.invoiceDistrictName());

        if(domicilio)
        {
            receptor.appendChild(domicilio);
        }

        return receptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_RelacionadoElement</Name>
				<Source><![CDATA[
    protected XmlElement create_RelacionadoElement(EInvoiceCFDIReference_MX _reference)
    {
        XmlElement relacionadoElement = this.createElement('CfdiRelacionado');
        relacionadoElement.setAttribute('UUID', _reference.cfdiuuid);

        return relacionadoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_RelacionadosElement</Name>
				<Source><![CDATA[
    protected XmlElement create_RelacionadosElement()
    {
        XmlElement relacionadosElement;
        EInvoiceCFDIReference_MX reference;
        RefRecId eInvoiceRecId = eInvoiceJourMap.eInvoiceJour().RecId;

        select reference
        where reference.eInvoiceJour_MX == eInvoiceRecId;

        if (reference)
        {
            relacionadosElement = this.createElement('CfdiRelacionados');
            relacionadosElement.setAttribute('TipoRelacion', strFmt('0%1', enum2int(reference.ReferenceType)));

            while (reference)
            {
                XmlElement relacionadoElement = this.create_RelacionadoElement(reference);
                relacionadosElement.appendChild(relacionadoElement);

                next reference;
            }
        }

        return relacionadosElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxesLines</Name>
				<Source><![CDATA[
    protected void createTaxesLines(XmlElement _parentElement)
    {
        if (markupTrans)
        {
            sourceTableId = markupTrans.TableId;
            sourceRecId = markupTrans.RecId;
        }
        else if (eInvoiceTransMap)
        {
            sourceTableId = eInvoiceTransMap.sourceTableId();
            sourceRecId = eInvoiceTransMap.sourceRecId();
        }
        else
        {
            sourceTableId = 0;
            sourceRecId = 0;
        }

        XmlElement impuestosElement = this.createElement('Impuestos');

        if (!markupTrans && !eInvoiceTransMap)
        {
            //comprobante/impuestos section
            XmlElement retencionesElement = this.createElement('Retenciones');
            this.add_RetencionesElement(retencionesElement);
            this.appendChildIfHasChildNodes(impuestosElement, retencionesElement);

            XmlElement trasladosElement = this.createElement('Traslados');
            this.add_TrasladosElement(trasladosElement);

            if (regularTaxExists || isDisplayExento)
            {
                impuestosElement.appendChild(trasladosElement);
            }

            TaxAmount totalImpuestosRetenidos = eInvoiceJourMap.totalTaxAmountRetained();
            TaxAmount totalRetained = totalImpuestosRetenidos + IEPSPositiveAdjustmentTotal;

            if (totalRetained)
            {
                impuestosElement.setAttribute('TotalImpuestosRetenidos', this.formatXmlAmount(totalRetained));
            }

            if (regularTaxExists)
            {
                impuestosElement.setAttribute('TotalImpuestosTrasladados', this.formatXmlAmount(eInvoiceJourMap.totalTaxAmountRegular() + IEPSNegativeAdjustmentTotal));
            }

            _parentElement.setAttribute('SubTotal', this.formatXmlAmount(eInvoiceJourMap.subTotal()
                + this.IEPSAdjustmentTotal()));
        }
        else
        {
            //comprobante/conceptos section
            XmlElement trasladosElement = this.createElement('Traslados');
            this.add_TrasladosElement(trasladosElement);
            this.appendChildIfHasChildNodes(impuestosElement, trasladosElement);

            XmlElement retencionesElement = this.createElement('Retenciones');
            this.add_RetencionesElement(retencionesElement);
            this.appendChildIfHasChildNodes(impuestosElement, retencionesElement);
        }

        this.appendChildIfHasChildNodes(_parentElement, impuestosElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransKey</Name>
				<Source><![CDATA[
    private container createTaxTransKey(TaxTrans _taxTrans)
    {
        str rateType = this.formatRateType(_taxTrans);
        container key =
            [
                _taxTrans.TaxType_MX,
                TaxTable::find(_taxTrans.TaxCode).TaxOnTax ?
                    TaxData::find(_taxTrans.TaxCode, _taxTrans.TransDate, _taxTrans.TaxBaseAmount).TaxValue :
                    _taxTrans.TaxValue,
                rateType
            ];

        if (EInvoiceCFDIParameters_MX::find().SplitTaxAmountPerLines && this.isConceptoLevel())
        {
            key += [_taxTrans.RecId];
        }
        
        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlDocumentInvoiceJour</Name>
				<Source><![CDATA[
    protected XmlElement createXmlDocumentInvoiceJour()
    {
        XmlElement comprobanteElement = this.create_ComprobanteElement();
        XmlElement emissorElement = this.create_EmisorElement();
        XmlElement receptorElement = this.create_ReceptorElement();
        XmlElement complementoElement = this.create_ForeignTradeElement();

        comprobanteElement.appendChild(emissorElement);
        comprobanteElement.appendChild(receptorElement);

        this.createLines(comprobanteElement);

        eInvoiceTransMap = null;
        this.createTaxesLines(comprobanteElement);

        if (eInvoiceJourMap.totalDiscountAmount())
        {
            comprobanteElement.setAttribute('Descuento', this.formatXmlAmount(totalDiscount));
        }

        if (eInvoiceJourMap.isCartaPorteUsed())
        {
            if (!complementoElement)
            {
                complementoElement = this.createElement('Complemento');
            }

            XmlElement cartaPorteElement = this.create_CartaPorteElement();
            complementoElement.appendChild(cartaPorteElement);
            comprobanteElement.setAttribute('SubTotal', this.formatXmlAmount(invoiceSubtotal, 0));
        }
        else
        {
            comprobanteElement.setAttribute('SubTotal', this.formatXmlAmount(invoiceSubtotal));
        }

        if(complementoElement)
        {
            comprobanteElement.appendChild(complementoElement);
        }

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTaxSection</Name>
				<Source><![CDATA[
    protected void fillTaxSection(
        XmlElement _taxSection,
        TaxTrans _taxTrans,
        boolean _exportTaxBase = true,
        boolean _exportRateType = true,
        boolean _exportTaxRate = true)
    {
        AmountCur baseAmount = _taxTrans.SourceBaseAmountCur;
        AmountCur taxAmount = _taxTrans.SourceTaxAmountCur;
        Currency currency = Currency::find(eInvoiceJourMap.currencyCode() ? eInvoiceJourMap.currencyCode() : Ledger::accountingCurrency());

        if (_exportTaxBase)
        {
            _taxSection.setAttribute(
                'Base',
                this.formatXmlAmount(taxRateType == CuotaRateType ? abs(_taxTrans.TaxBaseQty) : baseAmount, currency.DecimalsCount_MX));
        }

        _taxSection.setAttribute('Impuesto', this.formatTaxType(_taxTrans.TaxType_MX));

        if (_exportRateType)
        {
            _taxSection.setAttribute('TipoFactor', taxRateType);
        }

        boolean isLineSection = this.isLineSection();
        boolean isCreateImporteTasaOCuota = (!isLineSection  ||  taxRateType != exemptRateType) 
                                            && !isDisplayExento && !showTrasladoExemptTaxHeader;

        if (isCreateImporteTasaOCuota && _exportTaxRate)
        {
            _taxSection.setAttribute(
                'TasaOCuota',
                 this.formatXmlAmount(
                    taxRateType == CuotaRateType ? _taxTrans.TaxValue : _taxTrans.TaxValue / 100,
                    6));
            
            _taxSection.setAttribute('Importe', this.formatXmlAmount(taxAmount, currency.DecimalsCount_MX));
        }
        else if (isCreateImporteTasaOCuota)
        {
            _taxSection.setAttribute('Importe', this.formatXmlAmount(taxAmount, currency.DecimalsCount_MX));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatRateType</Name>
				<Source><![CDATA[
    protected str formatRateType(TaxTrans _taxTrans)
    {
        str rateType = StandardRateType;
        TaxTable taxTable = TaxTable::find(_taxTrans.TaxCode);

        if (_taxTrans.ExemptTax)
        {
            rateType = exemptRateType;
        }
        else if (taxTable.TaxBase == TaxBaseType::AmountByUnit)
        {
            rateType = CuotaRatetype;
        }

        return rateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTaxType</Name>
				<Source><![CDATA[
    protected str formatTaxType(TaxType_MX _taxType)
    {
        str taxTypeStr;

        switch (_taxType)
        {
            case TaxType_MX::ISR:
                taxTypeStr = '001';
                break;

            case TaxType_MX::IVA:
                taxTypeStr = '002';
                break;

            case TaxType_MX::IEPS:
                taxTypeStr = '003';
                break;

            default:
                break;
        }

        return taxTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlOrigenSpot</Name>
				<Source><![CDATA[
    protected str formatXmlOrigenSpot(str _spotID)
    {
        return strFmt('%1%2', 'OR', _spotID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlDestinoSpot</Name>
				<Source><![CDATA[
    protected str formatXmlDestinoSpot(str _spotID)
    {
        return strFmt('%1%2', 'DE', _spotID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmount</Name>
				<Source><![CDATA[
    protected str formatXmlAmount(
        real _number,
        int _decimals = 6)
    {
        str valueStr;
        real precision;
        Currency currency;
        int decimals = _decimals;

        if (prmisDefault(_decimals))
        {
            currency = Currency::find(eInvoiceJourMap.currencyCode() ?
                                      eInvoiceJourMap.currencyCode() :
                                      Ledger::accountingCurrency());

            precision = currency.RoundingPrecision ? currency.RoundingPrecision : 0.01;
            valueStr = new SysAnyType(precision).value();
            decimals = strLen(valueStr) - strFind(valueStr, '.', 1, strLen(valueStr));
        }

        return super(_number, decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmountCheckDecimal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates formated string with amount. If the decimal part is 0, this part will be deleted.
    /// </summary>
    /// <param name="_number">
    /// The amount value.
    /// </param>
    /// <param name="_decimals">
    /// Count of decimals.
    /// </param>
    /// <returns>
    /// Formated string with amount.
    /// </returns>
    protected str formatXmlAmountCheckDecimal(
        real _number,
        int _decimals = 6)
    {
        boolean defaultDecimal = prmIsDefault(_decimals) == NoYes::Yes ? true : false;

        if (frac(_number) == 0)
        {
            _decimals = 0;
            defaultDecimal = false;
        }

        return defaultDecimal ? this.formatXmlAmount(_number) : this.formatXmlAmount(_number, _decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTaxAmounts</Name>
				<Source><![CDATA[
    private void groupTaxAmounts(Map _mapTransAmounts, TaxTrans _taxTrans)
    {
        AmountCur baseAmount;
        AmountCur taxAmount;
        Qty baseQty;
        container key = this.createTaxTransKey(_taxTrans);

        if (_mapTransAmounts.exists(key))
        {
            [baseAmount, taxAmount, baseQty] = _mapTransAmounts.lookup(key);
        }

        if (_taxTrans.SourceTableId == tableNum(CustInvoiceTrans)
            && TaxTable::find(_taxTrans.TaxCode).TaxBase == TaxBaseType::AmountByUnit)
        {
            CustInvoiceTrans custInvoiceTrans;
            select firstonly SalesPrice from custInvoiceTrans
                where CustInvoiceTrans.RecId == _taxTrans.SourceRecId;

            baseAmount += _taxTrans.TaxBaseQty * custInvoiceTrans.SalesPrice;
        }
        else
        {
            baseAmount += _taxTrans.SourceBaseAmountCurRegulated ?
                          _taxTrans.SourceBaseAmountCurRegulated :
                          _taxTrans.SourceBaseAmountCur;
        }

        taxAmount += _taxTrans.SourceRegulateAmountCur ?
                     _taxTrans.SourceRegulateAmountCur :
                     _taxTrans.SourceTaxAmountCur;

        baseQty += _taxTrans.TaxBaseQty;

        _mapTransAmounts.insert(key, [baseAmount, taxAmount, baseQty]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConceptoLevel</Name>
				<Source><![CDATA[
    private boolean isConceptoLevel()
    {
        return sourceTableId != 0 && sourceRecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocalCurrency</Name>
				<Source><![CDATA[
    private boolean isLocalCurrency(str _currencyCode)
    {
        const str MexicoCurrencyCode = 'MXN';
        const str AdditionalMexicoCurrencyCode = 'XXX';
        return _currencyCode == MexicoCurrencyCode || _currencyCode == AdditionalMexicoCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the format class for the version 3.3 of the electronic invoice.
    /// </summary>
    void init()
    {
        EInvoiceCFDIParameters_MX parameters = EInvoiceCFDIParameters_MX::find();

        defaultNameSpace = this.getDefaultNamespace();

        if (this.isCartaPorteVersion3_1())
        {
            cartaPorteNs = 'http://www.sat.gob.mx/CartaPorte31';
        }
        else
        {
            cartaPorteNs = 'http://www.sat.gob.mx/CartaPorte30';
        }

        if (this.isForeignTradeVersion2())
        {
            defaultForeignTradeNamespace = 'http://www.sat.gob.mx/ComercioExterior20';
        }
        else
        {
            defaultForeignTradeNamespace = 'http://www.sat.gob.mx/ComercioExterior11';
        }

        xsi = this.getXsi();
        schemaLocation = this.getSchemaLocation();
        if (this.shouldCreateForeignTradeElement())
        {
            if (this.isForeignTradeVersion2())
            {
                schemaLocation += ' http://www.sat.gob.mx/ComercioExterior20 http://www.sat.gob.mx/sitio_internet/cfd/ComercioExterior20/ComercioExterior20.xsd';
            }
            else
            {
                schemaLocation += ' http://www.sat.gob.mx/ComercioExterior11 http://www.sat.gob.mx/sitio_internet/cfd/ComercioExterior11/ComercioExterior11.xsd';
            }
        }

        nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace('cfdi', defaultNameSpace);

        defProdCode = parameters.satProductCode_MX;
        defUnitCode = parameters.satUnitCode_MX;
        isTraslado = this.setInvoiceType() == EInvoiceJourBaseMap_MX::trasladoSymbol();
        skipIEPSTaxes = eInvoiceJourMap.getCustTable().CFDISkipIEPSTaxes_MX;
        hasHazardousMaterial = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceType</Name>
				<Source><![CDATA[
    protected str setInvoiceType()
    {
        str retType;

        if (!FeatureStateProvider::isFeatureEnabled(EInvoiceZeroAmountAllowedFeature_MX::instance()))
        {
            Amount totalAmount = eInvoiceJourMap.totalAmount();
            if (totalAmount)
            {
                retType = EInvoiceJourBaseMap_MX::eInvoiceJournalType(totalAmount < 0);
            }
            else
            {
                retType = EInvoiceJourBaseMap_MX::trasladoSymbol();
            }
        }
        else
        {
            retType = eInvoiceJourMap.journalType();
        }

        return retType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocument</Name>
				<Source><![CDATA[
    protected void signDocument()
    {
        XmlElement comprobanteElementChanged = xmlDoc.selectSingleNode(@'/cfdi:Comprobante', nsmgr);

        CFDDigestAlgorithm_MX algorithm = EInvoiceCFDIParameters_MX::find().CFDIDigestAlgorithm;
        str sello = EInvoiceSignXmlDoc_MX::getSello(this.getOriginalChain(), algorithm);

        comprobanteElementChanged.setAttribute('Sello', sello); // CFDI 3.3 uses capitalized attributes only
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTaxTrans</Name>
				<Source><![CDATA[
    private boolean skipTaxTrans(TaxTrans _taxTrans)
    {
        return sourceTableId &&
               sourceRecId &&
               (_taxTrans.SourceTableId != sourceTableId ||
                _taxTrans.SourceRecId != sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the electronic invoice version.
    /// </summary>
    /// <returns>
    /// The electronic version.
    /// </returns>
    protected str version()
    {
        return '3.3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeIfNotEqual</Name>
				<Source><![CDATA[
    protected void setAttributeIfNotEqual(XmlElement element, str name, str value, str criteria = '')
    {
        if( element && name && (value != criteria) )
        {
            element.setAttribute(name, value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeIfNotNull</Name>
				<Source><![CDATA[
    protected void setAttributeIfNotNull(XmlElement element, str name, str value)
    {
        this.setAttributeIfNotEqual(element, Name, value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildIfNotNull</Name>
				<Source><![CDATA[
    protected XmlNode appendChildIfNotNull(XmlNode node, XmlNode appendNode)
    {
        if( node && appendNode )
        {
            node.appendChild(appendNode);
        }
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildIfHasChildNodes</Name>
				<Source><![CDATA[
    protected XmlNode appendChildIfHasChildNodes(XmlNode node, XmlNode appendNode)
    {
        if( node && appendNode && appendNode.hasChildNodes() )
        {
            node.appendChild(appendNode);
        }
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountInCFDIReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amount in a reporting currency.
    /// </summary>
    /// <param name="_amount">
    /// The amount to be calculated.
    /// </param>
    /// <param name="_fromCurrency">
    /// The currency to be used for the calculation.
    /// </param>
    /// <returns>
    /// Calculated amount in a reporting currency.
    /// </returns>
    public static Amount calcAmountInCFDIReportingCurrency(Amount _amount, CurrencyCode _fromCurrency)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(_fromCurrency,
        EInvoiceCFDIParameters_MX::find().ForeignTradeReportingCurrency);

        exchangeRateHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
        exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());

        return CurrencyExchange::calculateAmount(_amount, exchangeRateHelper.getExchangeRate1());
    }

]]></Source>
			</Method>
			<Method>
				<Name>curpNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CURP number.
    /// </summary>
    /// <returns>
    /// CURP number.
    /// </returns>
    public static Curp_MX curpNumber()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        if (companyInfo.CompanyType_MX == CompanyType_MX::LegalPerson)
        {
            return companyInfo.Curp_MX;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignTradeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CFDI foreign trade version.
    /// </summary>
    /// <returns>
    /// Returns the number of version.
    /// </returns>
    public static str foreignTradeVersion()
    {
        return enum2Value(EInvoiceCFDIParameters_MX::find().CFDIForeignTradeVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of operation.
    /// </summary>
    /// <returns>
    /// Returns the sting equivalent for operation type.
    /// </returns>
    public static str operationType()
    {
        const str Export = '2';
        const str Other = '';

        str res;

        switch (EInvoiceCFDIParameters_MX::find().OperationType)
        {
            case OperationType_MX::Export:
                res = Export;
                break;

            default:
                res = Other;
                break;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRateForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate for the document by the date.
    /// </summary>
    /// <param name = "_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Exchange rate.
    /// </returns>
    public ExchRate exchangeRateForeignTrade(TransDate _transDate)
    {
        EInvoiceCFDIParameters_MX cfdiParameters = EInvoiceCFDIParameters_MX::find();

        return ExchangeRateHelper::exchRate(cfdiParameters.ForeignTradeReportingCurrency, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_AddressInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_AddressInfoNode(
        str _nodeName,
        str _street,
        str _streetNumber,
        str _buildingComplement,
        str _county,
        str _city,
        str _state,
        str _countryRegionId,
        str _zipcode)
    {
        XmlElement addressElement;

        addressElement = this.createForeignTradeElement(_nodeName);

        addressElement.setAttribute('Calle', this.formatString(strrtrim(_street)));

        if (_streetNumber)
        {
            addressElement.setAttribute('NumeroExterior', this.formatString(_streetNumber));
        }

        if (_buildingComplement)
        {
            addressElement.setAttribute('NumeroInterior', this.formatString(_buildingComplement));
        }

        if (_city)
        {
            AddressElement.setAttribute('Localidad', this.formatString(_city));
        }

        if (_county)
        {
            addressElement.setAttribute('Municipio', this.formatString(_county));
        }

        if (_state)
        {
            addressElement.setAttribute('Estado', this.formatString(_state));
        }

        addressElement.setAttribute('Pais', this.formatString(_countryRegionId));
        addressElement.setAttribute('CodigoPostal', this.formatString(_zipCode));

        return addressElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_CartaPorteAddressInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_CartaPorteAddressInfoNode(
        str _nodeName,
        str _street,
        str _streetNumber,
        str _buildingComplement,
        str _county,
        str _city,
        str _state,
        str _countryRegionId,
        str _zipcode)
    {
        XmlElement addressElement = this.createCartaPorteElement(_nodeName);
        addressElement.setAttribute('Calle', this.formatString(strrtrim(_street)));

        if (_streetNumber)
        {
            addressElement.setAttribute('NumeroExterior', this.formatString(_streetNumber));
        }

        if (_buildingComplement)
        {
            addressElement.setAttribute('NumeroInterior', this.formatString(_buildingComplement));
        }

        if (_city)
        {
            AddressElement.setAttribute('Localidad', this.formatString(_city));
        }

        if (_county)
        {
            addressElement.setAttribute('Municipio', this.formatString(_county));
        }

        if (_state)
        {
            addressElement.setAttribute('Estado', this.formatString(_state));
        }

        addressElement.setAttribute('Pais', this.formatString(_countryRegionId));
        addressElement.setAttribute('CodigoPostal', this.formatString(_zipCode));

        return addressElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets unit price for a given invoice line.
    /// </summary>
    /// <param name = "_eInvoiceTransMap">An invoice line.</param>
    /// <returns>Unit price for a given invoice line.</returns>
    protected SalesPrice unitPrice(EInvoiceTransBaseMap_MX _eInvoiceTransMap)
    {
        SalesPrice unitPrice = _eInvoiceTransMap.unitPrice();
        Qty qty = eInvoiceTransMap.qty();

        if (qty == 0)
        {
            qty = 1;
        }

        if (!unitPrice)
        {
            unitPrice = CurrencyExchangeHelper::price(_eInvoiceTransMap.amount() / qty, eInvoiceTransMap.currencyCode());
        }

        Amount taxAdjustmentPerUnit = CurrencyExchangeHelper::price((IEPSNegativeAdjustmentPerUnit + IEPSPositiveAdjustmentPerUnit) / qty, eInvoiceJourMap.currencyCode());
        unitPrice += CurrencyExchangeHelper::price((IEPSNegativeAdjustment + IEPSPositiveAdjustment) * this.getLineDiscountMultiplier(_eInvoiceTransMap.amount(), _eInvoiceTransMap.discountAmount()) / qty, eInvoiceTransMap.currencyCode()) + taxAdjustmentPerUnit;

        return unitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDistrictToAddressInfoNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds district attribute to address info node of the document.
    /// </summary>
    /// <param name = "_element">The address element.</param>
    /// <param name = "_district">District name.</param>
    protected void addDistrictToAddressInfoNode(XmlElement _element, str _district)
    {
        if (_district)
        {
            _element.setAttribute('Colonia', this.formatString(_district));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransList</Name>
				<Source><![CDATA[
    private List createTaxTransList(Map _eInvoiceTaxMap, List _eInvoiceTaxList)
    {
        List taxTransList = new List(Types::Record);

        if (_eInvoiceTaxMap && sourceTableId && sourceRecId)
        {
            if (_eInvoiceTaxMap.exists([sourceTableId, sourceRecId]))
            {
                taxTransList = _eInvoiceTaxMap.lookup([sourceTableId, sourceRecId]);
            }
        }
        else
        {
            taxTransList = _eInvoiceTaxList;
        }

        return taxTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipIEPSTaxTrans</Name>
				<Source><![CDATA[
    private boolean skipIEPSTaxTrans(TaxTrans _taxTrans)
    {
        return skipIEPSTaxes == NoYes::Yes &&
            _taxTrans.TaxType_MX == TaxType_MX::IEPS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDecimalsForDiscountAndTotals</Name>
				<Source><![CDATA[
    private int calcDecimalsForDiscountAndTotals(Amount _totalAmount, Amount _discount = eInvoiceTransMap.discountAmount())
    {
        int decimals;

        if (eInvoiceTransMap && (frac(_totalAmount) || frac(_discount)))
        {
            Currency currency = Currency::find(eInvoiceJourMap.currencyCode() ?
                                          eInvoiceJourMap.currencyCode() :
                                          Ledger::accountingCurrency());

            real precision = currency.RoundingPrecision ? currency.RoundingPrecision : 0.01;
            str valueStr = new SysAnyType(precision).value();
            decimals = strLen(valueStr) - strFind(valueStr, '.', 1, strLen(valueStr));
        }

        return decimals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIEPSAdjustment</Name>
				<Source><![CDATA[
    private TaxAmount getIEPSAdjustment(TaxTrans _taxTrans)
    {
        TaxAmount adjustment;

        if (eInvoiceJourMap.parmIsPrint() && eInvoiceJourMap.eInvoiceJour().PrintInMST)
        {
            adjustment = _taxTrans.TaxAmount;
        }
        else
        {
            adjustment = _taxTrans.SourceTaxAmountCur;
        }

        return adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIEPSAdjustment</Name>
				<Source><![CDATA[
    private void initIEPSAdjustment()
    {
        IEPSNegativeAdjustment = 0;
        IEPSPositiveAdjustment = 0;
        IEPSNegativeAdjustmentPerUnit = 0;
        IEPSPositiveAdjustmentPerUnit = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIEPSAdjustmentTotal</Name>
				<Source><![CDATA[
    private void updateIEPSAdjustmentTotal()
    {
        IEPSNegativeAdjustmentTotal += IEPSNegativeAdjustment + IEPSNegativeAdjustmentPerUnit;
        IEPSPositiveAdjustmentTotal += IEPSPositiveAdjustment + IEPSPositiveAdjustmentPerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IEPSAdjustmentTotal</Name>
				<Source><![CDATA[
    private TaxAmount IEPSAdjustmentTotal()
    {
        return IEPSPositiveAdjustmentTotal + IEPSNegativeAdjustmentTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if markup transaction must be skipped.
    /// </summary>
    /// <param name = "_markupTrans">The markup transaction to check.</param>
    /// <returns>True if markup is of internal type, otherwise false.</returns>
    protected boolean skipMarkupLine(MarkupTrans _markupTrans)
    {
        boolean ret;
        MarkupTable markupTable = MarkupTable::find(_markupTrans.ModuleType, _markupTrans.MarkupCode);

        if (markupTable.CustType == MarkupType::LedgerAccount && markupTable.VendType == MarkupType::LedgerAccount)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineDiscountMultiplier</Name>
				<Source><![CDATA[
    private real getLineDiscountMultiplier(Amount _amount, Amount _discAmount)
    {
        real multiplier = 1;

        if (_discAmount != 0 && _amount != 0)
        {
            multiplier = (_amount + _discAmount) / _amount;
        }

        return multiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaLocation</Name>
				<Source><![CDATA[
    protected str getSchemaLocation()
    {
        return 'http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExportTaxBaseToTrasladoElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax base should be exported to Traslado element.
    /// </summary>
    /// <returns>true if tax base should be exported to Traslado element; otherwise, false.</returns>
    [Hookable(false)]
    protected boolean shouldExportTaxBaseToTrasladoElement()
    {
        return this.isLineSection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineSection</Name>
				<Source><![CDATA[
    private boolean isLineSection()
    {
        return markupTrans || eInvoiceTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetEmisorNombre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "Nombre" attribute should be added to the "Emisor" node.
    /// </summary>
    /// <returns>true if "Nombre" attribute should be added to the "Emisor" node; otherwise, false.</returns>
    protected boolean shouldSetEmisorNombre()
    {
        return eInvoiceJourMap.getCompanyInfo().Name != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetReceptorNombre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "Nombre" attribute should be added to the "Receptor" node.
    /// </summary>
    /// <returns>true if "Nombre" attribute should be added to the "Receptor" node; otherwise, false.</returns>
    protected boolean shouldSetReceptorNombre()
    {
        return this.shouldSetReceptorResidenciaFiscal()
            && DirPartyTable::findRec(eInvoiceJourMap.getCustTable().Party).Name != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetReceptorResidenciaFiscal</Name>
				<Source><![CDATA[
    private boolean shouldSetReceptorResidenciaFiscal()
    {
        return eInvoiceJourMap.getCustTable()
            && (!isTraslado || (eInvoiceJourMap.isForeignTrade() && !eInvoiceJourMap.isCartaPorteUsed()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultNameSpace</Name>
				<Source><![CDATA[
    protected str getDefaultNameSpace()
    {
        return 'http://www.sat.gob.mx/cfd/3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLugarExpedicion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the contents of "LugarExpedicion" attribute.
    /// </summary>
    /// <returns>Contents of "LugarExpedicion" attribute.</returns>
    protected str getLugarExpedicion()
    {
        return eInvoiceJourMap.emitentZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "ComercioExterior" element should be created.
    /// </summary>
    /// <returns>true if "ComercioExterior" element should be created; otherwise, false.</returns>
    protected boolean shouldCreateForeignTradeElement()
    {
        return eInvoiceJourMap.isForeignTrade() && !eInvoiceJourMap.isCartaPorteUsed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_RelacionadosElementsMap</Name>
				<Source><![CDATA[
    protected Map create_RelacionadosElementsMap(XmlElement _comprobanteElement)
    {
        XmlElement relacionadosElement;
        EInvoiceCFDIReference_MX reference;
        RefRecId eInvoiceRecId = eInvoiceJourMap.eInvoiceJour().RecId;

        Map relacionadosElementsMap = new Map(Types::Enum, Types::Class);

        while select reference
            where reference.eInvoiceJour_MX == eInvoiceRecId
        {
            if (!relacionadosElement)
            {
                relacionadosElement = this.createElement('CfdiRelacionados');
                relacionadosElement.setAttribute('TipoRelacion', strFmt('0%1', enum2int(reference.ReferenceType)));
                relacionadosElementsMap.add(reference.ReferenceType, relacionadosElement);
            }

            XmlElement relacionadoElement = this.create_RelacionadoElement(reference);
            relacionadosElement.appendChild(relacionadoElement);
        }

        return relacionadosElementsMap;

    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayExento</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "Impuestos" attribute should be added to the "Comprobante" node when rate type is "Exento".
    /// </summary>
    /// <param name = "_hasRegularTax">Has regular tax in tax transactions list</param>
    /// <param name = "_isLineSection">Is it a line section in an XML document</param>
    /// <param name = "_hasTaxTrans">Has any tax transactions</param>
    /// <returns>true if "Impuestos" attribute should be added to the "Comprobante" node; otherwise, false.</returns>
    protected boolean isDisplayExento(boolean _hasRegularTax, boolean _isLineSection, boolean _hasTaxTrans)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTradeVersion2</Name>
				<Source><![CDATA[
    private boolean isForeignTradeVersion2()
    {
        return EInvoiceCFDIForeignTradeVersion_2_MXFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForeignTradeElement</Name>
				<Source><![CDATA[
    protected XmlElement createForeignTradeElement(str _elementName)
    {
        if (this.isForeignTradeVersion2())
        {
            return xmlDoc.createElement3('cce20', _elementName, defaultForeignTradeNamespace);
        }
        else
        {
            return xmlDoc.createElement3('cce11', _elementName, defaultForeignTradeNamespace);
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCartaPorteVersion3_1</Name>
				<Source><![CDATA[
    private boolean isCartaPorteVersion3_1()
    {
        return EInvoiceCFDICartaPorteVersion_3_1MXFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>