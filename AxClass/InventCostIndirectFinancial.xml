<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostIndirectFinancial</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostIndirectFinancial</c> class keeps track of the indirect cost that is related to
///    the inventory transactions that are financially updated and updates the indirect cost transactions
///    accordingly.
/// </summary>
/// <remarks>
///    The indirect cost transactions must be updated when the inventory transaction is financially
///    updated.
/// </remarks>
class InventCostIndirectFinancial
{
    Map                             remainingQtyMap;        // The remaining qty on the physical transaction
    Map                             updateAmountMap;        // The indirect cost amount that needs to be updated
    Map                             indirectCostMap;        // The indirect cost per cost group related to the last processed inventory transaction
    LedgerPostingType               postingOperation;
    LedgerDimensionAccount          ledgerDimensionAccountOperations;
    boolean                         hasIndirectCost;
    boolean                         countryRegion_RU;
    boolean                         stornoPhysical;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the amount to the <c>indirectCostMap</c> object.
    /// </summary>
    /// <param name="_costGroupId">
    ///    The cost group to which the indirect cost is related.
    /// </param>
    /// <param name="_amount">
    ///    The amount to add.
    /// </param>
    protected void addToIndirectCost(CostGroupId _costGroupId, CostAmount _amount)
    {
        CostAmount      amount;

        if (!indirectCostMap)
        {
            indirectCostMap = new Map(Types::String, Types::Real);
        }
        else if (indirectCostMap.exists(_costGroupId))
        {
            amount = indirectCostMap.lookup(_costGroupId);
        }
        indirectCostMap.insert(_costGroupId, amount + _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToUpdateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an amount to the <c>updateAmountMap</c> object.
    /// </summary>
    /// <param name="_indirectTransRecId">
    ///    The record ID of the indirect transaction that should be updated.
    /// </param>
    /// <param name="_costAmount">
    ///    The amount of the indirect transaction that should be updated.
    /// </param>
    /// <returns>
    ///    The amount specified in the <c>_costAmount</c> parameter.
    /// </returns>
    protected CostAmount addToUpdateAmount(RecId _indirectTransRecId, CostAmount _costAmount)
    {
        CostAmount  amount;

        if (!updateAmountMap)
        {
            updateAmountMap = new Map(Types::Int64, Types::Real);
        }
        else if (updateAmountMap.exists(_indirectTransRecId))
        {
            amount = updateAmountMap.lookup(_indirectTransRecId);
        }
        updateAmountMap.insert(_indirectTransRecId, amount + _costAmount);

        return _costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the indirect cost that is related to the last updated inventory transaction.
    /// </summary>
    /// <returns>
    ///    An enumerator to a map with the indirect cost related to the last updated inventory transaction.
    /// </returns>
    /// <remarks>
    ///    The key in the map is the cost group and the value in the map is the indirect cost.
    /// </remarks>
    public MapEnumerator getIndirectCostEnumerator()
    {
        if (!indirectCostMap)
        {
            indirectCostMap = new Map(Types::String, Types::Real);
        }

        return indirectCostMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a key to the <c>remainingQty</c> map.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    The origin of the inventory transaction.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher from the physical update of the inventory transaction.
    /// </param>
    /// <param name="_transDate">
    ///    The transdate from the physical update of the inventory transaction.
    /// </param>
    /// <returns>
    ///    A key to the <c>remainingQty</c> map.
    /// </returns>
    protected str key(RecId _inventTransOrigin, Voucher _voucher, TransDate _transDate)
    {
        return int642str(_inventTransOrigin) + '#' +
               _voucher + '#' +
               queryValue(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountOperation</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount parmAccountOperation(LedgerDimensionAccount _ledgerDimensionAccountOperations = ledgerDimensionAccountOperations)
    {
        ledgerDimensionAccountOperations = _ledgerDimensionAccountOperations;

        return ledgerDimensionAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasIndirectCost</Name>
				<Source><![CDATA[
    public boolean parmHasIndirectCost(boolean _hasIndirectCost = hasIndirectCost)
    {
        hasIndirectCost = _hasIndirectCost;

        return hasIndirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingOperation</Name>
				<Source><![CDATA[
    protected LedgerPostingType parmPostingOperation(LedgerPostingType _postingOperation = postingOperation)
    {
        postingOperation = _postingOperation;

        return postingOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStornoPhysical</Name>
				<Source><![CDATA[
    protected boolean parmStornoPhysical(boolean _stornoPhysical = stornoPhysical)
    {
        stornoPhysical = _stornoPhysical;

        return stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates and posts the indirect transactions.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher object where the ledger transactions are added.
    /// </param>
    public void post(LedgerVoucher _ledgerVoucher)
    {
        ProdIndirectTrans   indirectTrans;

        if (!hasIndirectCost)
        {
            return;
        }

        if (updateAmountMap)
        {
            MapEnumerator enumerator = updateAmountMap.getEnumerator();
            while (enumerator.moveNext())
            {
                RecId recId = enumerator.currentKey();
                CostAmount amount = enumerator.currentValue();

                select forupdate indirectTrans
                where indirectTrans.RecId == recId;

                Debug::assert(indirectTrans.Amount == amount || (amount > 0 && indirectTrans.Amount > amount) || (amount < 0 && indirectTrans.Amount < amount));

                this.updateIndirectTransAmount(_ledgerVoucher, indirectTrans, amount);
            }
            updateAmountMap = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIndirectTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts an indirect transaction.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher object where the ledger transactions are added.
    /// </param>
    /// <param name="_indirectTrans">
    ///    The indirect transaction that should be posted.
    /// </param>
    protected void postIndirectTrans(LedgerVoucher _ledgerVoucher, ProdIndirectTrans _indirectTrans)
    {
        CurrencyCode                currencyCode = CompanyInfoHelper::standardCurrency();
        // <GEERU>
        boolean                     ledgerVoucherCorrectionChanged;
        // </GEERU>

        InventTransPosting inventTransPosting = InventTransPosting::findByNaturalKey(this.initializeInventTransPostingSearchParameters(_ledgerVoucher, _indirectTrans));

        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();

        // <GEERU>
        if (countryRegion_RU)
        {
            if (ledgerVoucherObject.parmCorrection())
            {
                ledgerVoucherObject.parmCorrection(false);
                ledgerVoucherCorrectionChanged = true;
            }

            if (_indirectTrans.Amount > 0 && this.parmStornoPhysical())
            {
                ledgerVoucherObject.parmCorrection(! ledgerVoucherObject.parmCorrection());
                ledgerVoucherCorrectionChanged = ! ledgerVoucherCorrectionChanged;
            }
        }
        // </GEERU>

        // Reverse the estimated/physical part
        boolean needRequireConvertAmountForTriangulation;
        boolean isInventoryReportingCurrencyTriangulationFeatureEnabled = InventoryReportingCurrencyTriangulationFeature::instance().isEnabled();
        CurrencyCode transactionCurrencyCode = ledgerVoucherObject.parmTransactionCurrencyCode();
        CurrencyExchangeHelper reverseCurrencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        if (isInventoryReportingCurrencyTriangulationFeatureEnabled && _indirectTrans.Posted)
        {
            reverseCurrencyExchHelper = InventoryReportingCurrencyTriangulationHelper::getReversalCurrencyExchangeHelperFromGL(
                reverseCurrencyExchHelper,
                LedgerPostingType::PurchPckSlp,
                _indirectTrans.VoucherEstimation,
                _indirectTrans.DataAreaId,
                _indirectTrans.DateEstimation,
                currencyCode);

            if ((!reverseCurrencyExchHelper.parmExchangeRate1() || !reverseCurrencyExchHelper.parmReportingExchangeRate1()))
            {
                if (transactionCurrencyCode && currencyCode != ledgerVoucherObject.parmTransactionCurrencyCode())
                {
                    needRequireConvertAmountForTriangulation = true;
                }
            }
        }

        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    _indirectTrans.PostingEstimatedIndirectAbsorption,
                    _indirectTrans.EstimatedIndirectAbsorpLedgerDimension,
                    currencyCode,
                    _indirectTrans.Amount,
                    reverseCurrencyExchHelper);

        if (isInventoryReportingCurrencyTriangulationFeatureEnabled && needRequireConvertAmountForTriangulation)
        {
            ledgerVoucherTransObject.parmReportingCurrencyAmount(
                InventoryReportingCurrencyTriangulationHelper::convertAccountingToTransactionToReportingAmount(
                    reverseCurrencyExchHelper,
                    transactionCurrencyCode,
                    _indirectTrans.Amount));
        }

        ledgerVoucherTransObject.parmSkipDimensionValidation(true);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    _indirectTrans.PostingEstimatedIndirectAbsorptionOffset,
                    _indirectTrans.EstimIndirectAbsorpOffsetLedgerDimension,
                    currencyCode,
                    -_indirectTrans.Amount,
                    reverseCurrencyExchHelper);

        if (isInventoryReportingCurrencyTriangulationFeatureEnabled && needRequireConvertAmountForTriangulation)
        {
            ledgerVoucherTransObject.parmReportingCurrencyAmount(
                InventoryReportingCurrencyTriangulationHelper::convertAccountingToTransactionToReportingAmount(
                    reverseCurrencyExchHelper,
                    transactionCurrencyCode,
                    -_indirectTrans.Amount));
        }

        ledgerVoucherTransObject.parmSkipDimensionValidation(true);

        // Post
        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.bondLast2_RU();

            if (ledgerVoucherCorrectionChanged)
            {
                ledgerVoucherObject.parmCorrection(! ledgerVoucherObject.parmCorrection());
            }
        }
        // </GEERU>

        AmountMSTSecondary physicalReportingCurrencyAmount = ledgerVoucherTransObject.parmReportingCurrencyAmount();

        CurrencyExchangeHelper defaultCurrencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        if (isInventoryReportingCurrencyTriangulationFeatureEnabled &&
            ledgerVoucherObject.parmFixedRateCurrencyExchangeHelper() != null)
        {
            defaultCurrencyExchangeHelper = ledgerVoucherObject.parmFixedRateCurrencyExchangeHelper();
        }

        ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                    _ledgerVoucher.findLedgerVoucherObject(),
                    _indirectTrans.PostingIndirectAbsorption,
                    _indirectTrans.IndirectAbsorptionLedgerDimension,
                    currencyCode,
                    -_indirectTrans.Amount,
                    defaultCurrencyExchangeHelper);

        AmountMSTSecondary reportingCurrencyAmountDiff;

        if (isInventoryReportingCurrencyTriangulationFeatureEnabled)
        {
            AmountCur temporaryReportingAmount = ledgerVoucherTransObject.parmReportingCurrencyAmount();
            if (abs(physicalReportingCurrencyAmount) != abs(temporaryReportingAmount))
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(sign(temporaryReportingAmount)*abs(physicalReportingCurrencyAmount));
                reportingCurrencyAmountDiff = temporaryReportingAmount - physicalReportingCurrencyAmount;
            }
            else
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(temporaryReportingAmount);
            }

        }

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                    _ledgerVoucher.findLedgerVoucherObject(),
                                    _indirectTrans.PostingIndirectAbsorptionOffset,
                                    _indirectTrans.IndirectAbsorptionOffsetLedgerDimension,
                                    currencyCode,
                                    _indirectTrans.Amount,
                                    defaultCurrencyExchangeHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        // Adjust reporting currency amount due to exchange rate adjustment
        if (isInventoryReportingCurrencyTriangulationFeatureEnabled &&
            physicalReportingCurrencyAmount != 0 &&
            reportingCurrencyAmountDiff != 0)
        {
            ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createMSTDiffLedgerVoucherTransObject(
                        ledgerVoucherObject,
                        defaultCurrencyExchangeHelper,
                        _indirectTrans.DefaultDimension,
                        currencyCode,
                        reportingCurrencyAmountDiff);

            _ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
       
        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.bondLast2_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransPostingSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>InventTransPosting</c> table.
    /// </summary>
    /// <param name = "_ledgerVoucher">The ledger voucher object where the ledger transactions are added.</param>
    /// <param name = "_indirectTrans">The indirect transaction that should be posted.</param>
    /// <returns>The search parameters.</returns>
    protected InventTransPosting initializeInventTransPostingSearchParameters(
        LedgerVoucher       _ledgerVoucher, 
        ProdIndirectTrans   _indirectTrans)
    {
        InventTransPosting inventTransPosting;

        inventTransPosting.TransDate = _ledgerVoucher.lastTransDate();
        inventTransPosting.Voucher = _ledgerVoucher.lastVoucher();
        inventTransPosting.InventTransOrigin = InventTransOrigin::findByInventTransId(_indirectTrans.TransRefId).RecId;
        inventTransPosting.InventTransPostingType = InventTransPostingType::Financial;

        return inventTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the remaining quantity that is related to the physical update of an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The remaining quantity that is related to the physical update of the inventory transaction.
    /// </returns>
    protected Qty remainingQty(InventTrans _inventTrans)
    {
        str key = this.key(_inventTrans.InventTransOrigin, _inventTrans.VoucherPhysical, _inventTrans.DatePhysical);

        if (!remainingQtyMap)
        {
            remainingQtyMap = new Map(Types::String, Types::Real);
        }
        else if (remainingQtyMap.exists(key))
        {
            return remainingQtyMap.lookup(key);
        }

        InventQty remainingInventTransQty = this.calculateSumOfRemainingQuantities(_inventTrans);
        remainingQtyMap.insert(key, remainingInventTransQty);

        return remainingInventTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSumOfRemainingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the remaining quantities that are related to the physical update of the inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">
    ///     The inventory transaction.
    /// </param>
    /// <returns>
    ///     The remaining quantities that are related to the physical update of the inventory transaction.
    /// </returns>
    protected InventQty calculateSumOfRemainingQuantities(InventTrans _inventTrans)
    {
        InventTrans inventTransLocal;

        select sum(Qty)
        from inventTransLocal
        where inventTransLocal.InventTransOrigin    == _inventTrans.InventTransOrigin
           && inventTransLocal.DatePhysical         == _inventTrans.DatePhysical
           && inventTransLocal.VoucherPhysical      == _inventTrans.VoucherPhysical
           && ((inventTransLocal.StatusReceipt       == StatusReceipt::None &&
                inventTransLocal.StatusIssue         == StatusIssue::Deducted) ||
               (inventTransLocal.StatusReceipt       == StatusReceipt::Received &&
                inventTransLocal.StatusIssue         == StatusIssue::None));

        return inventTransLocal.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the quantity returned.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    The origin of the inventory transaction.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher of the physical update.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of the physical update.
    /// </param>
    /// <param name="_qty">
    ///    The returned quantity.
    /// </param>
    /// <remarks>
    ///    When a inventory is physically returned, the returned quantity must be set manually because the
    ///    inventory transaction is physically and financially updated in the same transaction scope.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The quantity has already been set.
    /// </exception>
    public void setReturnQty(RecId _inventTransOrigin, Voucher _voucher, TransDate _transDate, Qty _qty)
    {
        str key = this.key(_inventTransOrigin, _voucher, _transDate);

        if (!hasIndirectCost)
        {
            return;
        }

        if (!remainingQtyMap)
        {
            remainingQtyMap = new Map(Types::String, Types::Real);
        }
        else if (remainingQtyMap.exists(key))
        {
            throw error("@SCM:QtyAlreadyBeenSet");
        }
        remainingQtyMap.insert(key, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractFromRemainingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subtracts the quantity of the inventory transaction from the <c>remainingQty</c> map.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    protected void subtractFromRemainingQty(InventTrans _inventTrans)
    {
        str     key = this.key(_inventTrans.InventTransOrigin, _inventTrans.VoucherPhysical, _inventTrans.DatePhysical);
        Qty     qty;

        if (remainingQtyMap.exists(key))
        {
            qty = remainingQtyMap.lookup(key);
        }
        remainingQtyMap.insert(key, qty - _inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the indirect cost related to an inventory transaction that is financially updated. The
    ///    indirect cost is added to the indirect cost that must be financially updated.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transactions that are financially updated.
    /// </param>
    /// <returns>
    ///    The indirect cost that is related to the inventory transaction.
    /// </returns>
    public CostAmount update(InventTrans _inventTrans)
    {
        ProdIndirectTrans   indirectTrans;
        InventTransOrigin   inventTransOrigin;
        CostAmount          costAmount;
        if (!hasIndirectCost)
        {
            return 0.0;
        }

        indirectCostMap = null;
        Qty qty = this.remainingQty(_inventTrans);

        Debug::assert(qty != 0);
        Debug::assert((_inventTrans.Qty < 0 || _inventTrans.Qty <= qty));
        Debug::assert((_inventTrans.Qty > 0 || _inventTrans.Qty >= qty));

        while select RecId, Amount, CostGroupId
        from indirectTrans
        where indirectTrans.VoucherEstimation      == _inventTrans.VoucherPhysical
           && indirectTrans.DateEstimation         == _inventTrans.DatePhysical
           && indirectTrans.Calculated      == NoYes::No
           && indirectTrans.TransRefType    == ProdTransRefType::InventTransId
        exists join inventTransOrigin
        where inventTransOrigin.RecId           == _inventTrans.InventTransOrigin
           && inventTransOrigin.InventTransId   == indirectTrans.TransRefId
        {
            CostAmount updateAmount = CurrencyExchangeHelper::amount((indirectTrans.Amount - this.updateAmount(indirectTrans.RecId)) / qty * _inventTrans.Qty);
            this.addToUpdateAmount(indirectTrans.RecId, updateAmount);
            this.addToIndirectCost(indirectTrans.CostGroupId, updateAmount);
            costAmount += updateAmount;
        }
        this.subtractFromRemainingQty(_inventTrans);

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the amount that should be updated on an indirect transaction.
    /// </summary>
    /// <param name="_indirectTransRecId">
    ///    The record ID that identifies the indirect transaction.
    /// </param>
    /// <returns>
    ///    The amount that should be updated on the indirect transaction.
    /// </returns>
    protected CostAmount updateAmount(RecId _indirectTransRecId)
    {
        if (!updateAmountMap)
        {
            return 0.0;
        }
        else if (updateAmountMap.exists(_indirectTransRecId))
        {
            return updateAmountMap.lookup(_indirectTransRecId);
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPostIndirectTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates and posts an indirect cost transaction.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher object where the ledger transactions are added.
    /// </param>
    /// <param name="_indirectTrans">
    ///    The indirect transaction to update and post.
    /// </param>
    protected void updateAndPostIndirectTrans(LedgerVoucher _ledgerVoucher, ProdIndirectTrans _indirectTrans)
    {
        _indirectTrans.VoucherCalc = _ledgerVoucher.lastVoucher();
        _indirectTrans.DateCalc    = _ledgerVoucher.lastTransDate();
        _indirectTrans.Calculated  = NoYes::Yes;

        // Setup the accounts
        _indirectTrans.PostingIndirectAbsorption            = LedgerPostingType::IndirectAbsorption;
        _indirectTrans.IndirectAbsorptionLedgerDimension    = LedgerDimensionFacade::serviceCreateLedgerDimension(CostSheetCalcNodePropertyLookup::newParameters(CostPriceType::Purchase, _indirectTrans.Code).getAcctIndirectAbsorption(), _indirectTrans.DefaultDimension);

        _indirectTrans.PostingIndirectAbsorptionOffset  = postingOperation;

        _indirectTrans.IndirectAbsorptionOffsetLedgerDimension = ledgerDimensionAccountOperations;
        // Post to ledger
        this.postIndirectTrans(_ledgerVoucher, _indirectTrans);
        _indirectTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIndirectTransAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates and posts the indirect transaction with the specified amount.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher object where the ledger transactions are added.
    /// </param>
    /// <param name="_indirectTrans">
    ///    The indirect transaction to update and post.
    /// </param>
    /// <param name="_costAmount">
    ///    The amount that should be updated and posted on the indirect transaction.
    /// </param>
    protected void updateIndirectTransAmount(LedgerVoucher _ledgerVoucher, ProdIndirectTrans _indirectTrans, CostAmount _costAmount)
    {
        ProdIndirectTrans           splitTrans;

        Debug::assert(_indirectTrans.Calculated == NoYes::No);
        if (_indirectTrans.Amount == _costAmount)
        {
            this.updateAndPostIndirectTrans(_ledgerVoucher, _indirectTrans);
        }
        else
        {
            splitTrans.data(_indirectTrans);
            splitTrans.RecId = 0;
            splitTrans.Amount = _costAmount;
            this.updateAndPostIndirectTrans(_ledgerVoucher, splitTrans);
            _indirectTrans.Amount -= _costAmount;
            _indirectTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostIndirectFinancial construct(
        boolean                         _hasIndirectCost,
        LedgerPostingType               _postingOperation = LedgerPostingType::None,
        LedgerDimensionAccount         _ledgerDimensionAccountOperations = 0
        , boolean                      _stornoPhysical = false
        )
    {
        InventCostIndirectFinancial inventCostIndirectFinancial = new InventCostIndirectFinancial();

        inventCostIndirectFinancial.parmHasIndirectCost(_hasIndirectCost);
        inventCostIndirectFinancial.parmPostingOperation(_postingOperation);
        inventCostIndirectFinancial.parmAccountOperation(_ledgerDimensionAccountOperations);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            inventCostIndirectFinancial.parmStornoPhysical(_stornoPhysical);
        }
        // </GEERU>

        return inventCostIndirectFinancial;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>