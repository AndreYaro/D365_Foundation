<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetDisposalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetDisposalDP</c> class for <c>RAssetDisposal</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAsset)),
    SRSReportParameterAttribute(classStr(RAssetDisposalContract))
]
class rAssetDisposalDP extends SRSReportDataProviderBase
{
    TransDate               rAssetTransDate;
    RAssetStandardId        rAssetStandardId;
    RAssetStandards         rAssetStandards;
    RAssetDisposalTmp       rAssetDisposalTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRAssetDisposalTMP</Name>
				<Source><![CDATA[
        /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the <c>RAssetDisposalTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RAssetDisposalTmp))
    ]
    public RAssetDisposalTmp getRAssetDisposalTMP()
    {
        return rAssetDisposalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRAssetDisposalTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>rAssetDisposalTmp</c> temporary table.
    /// </summary>
    /// <param name="_rAssetStandards">
    /// Passes <c>RAssetStandards</c> table object.    .
    /// </param>
    /// <param name="_rAssetSum">
    /// Holds <c>RAssetSumCalc</c> class to which value is set.
    /// </param>
    private void insertRAssetDisposalTmp(RAssetStandards _rAssetStandards, RAssetSumCalc _rAssetSum)
    {
        RAssetTable     rAssetTable = RAssetTable::find(_rAssetStandards.AssetId);

        rAssetDisposalTmp.clear();
        rAssetDisposalTmp.AssetMainGroupId  = rAssetTable.AssetGroup;
        rAssetDisposalTmp.AssetGroupId      = _rAssetStandards.AssetGroup;
        rAssetDisposalTmp.AssetSubGroupId   = _rAssetStandards.SubGroupId;
        rAssetDisposalTmp.AssetId           = _rAssetStandards.AssetId;
        rAssetDisposalTmp.AssetName         = rAssetTable.Name;
        rAssetDisposalTmp.AssetStatus       = rAssetTable.Status;
        rAssetDisposalTmp.CurrencyCode      = _rAssetStandards.CurrencyCode;
        rAssetDisposalTmp.AssetDisposalDate = _rAssetStandards.DisposalDate;

        if (_rAssetStandards.AssetStandardId == RAssetParameters::standardIdDefault())
        {
            rAssetDisposalTmp.AssetScrapValue = (select sum(CostAmount) from rAssetScrap
                        where rAssetScrap.AssetId    == _rAssetStandards.AssetId &&
                              rAssetScrap.Assembling == NoYes::No               &&
                              rAssetScrap.TransDate                             &&
                              rAssetScrap.TransDate  <= rAssetTransDate         &&
                              ! rAssetScrap.StornoRecId).CostAmount;
        }
        else
        {
            rAssetDisposalTmp.AssetScrapValue = _rAssetStandards.ScrapValue;
        }

        rAssetDisposalTmp.AcquisitionValue  = _rAssetSum.disposalDisposedValue() + _rAssetSum.disposalSaleValue() +
                                              _rAssetSum.disposalScrapValue() + _rAssetSum.takeDownAcqAdjValueMST() + _rAssetSum.takeDownDeprAdjValueMST();
        rAssetDisposalTmp.AssetCostValue    = _rAssetStandards.SaleValue;
        rAssetDisposalTmp.AssetGroupTypes   = RAssetMainGroup::find(rAssetTable.AssetGroup).GroupType;

        rAssetDisposalTmp.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    [SysEntryPointAttribute]
    public void processReport()
    {
        QueryRun                qr;
        QueryBuildDataSource    qbs;
        RAssetSumCalc           rAssetSum;
        RAssetDisposalContract  contract = this.parmDataContract() as RAssetDisposalContract;

        rAssetTransDate     = contract.parmRAssetTransDate();
        rAssetStandardId    = contract.parmRAssetStandardId();

        qr  = new QueryRun(this.parmQuery());
        qbs = qr.query().dataSourceTable(tableNum(RAssetStandards));
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetStandards, AssetStandardId)).value(rAssetStandardId);

        qbs = qbs.addDataSource(tableNum(RAssetTrans));
        qbs.fetchMode(JoinMode::ExistsJoin);
        qbs.relations(true);
        qbs.addRange(fieldNum(RAssetTrans, AssetTransType)).value('(('+fieldStr(RAssetTrans, AssetTransType)+' >= 5)'+' && '+ //RAssetTransType::DisposalSale
                                                                    '('+fieldStr(RAssetTrans, AssetTransType)+' <= 7)'+' || '+ //RAssetTransType::Disposal
                                                                    '('+fieldStr(RAssetTrans, PostingType)+' == 1)'+')');      //RAssetPostingType::PartialTakeDown
        qbs.addRange(fieldNum(RAssetTrans, TransDate)).value(queryRange(dateNull(), rAssetTransDate));
        qbs.addRange(fieldNum(RAssetTrans, StornoRecId)).value(queryValue(0));

        rAssetSum = RAssetSumCalc_Trans::newAssetPeriod((select firstonly rAssetTable).AccountNum,
                                                             rAssetStandardId,
                                                             rAssetTransDate);

        while(qr.next())
        {
            rAssetStandards = qr.get(tableNum(RAssetStandards));
            rAssetSum.parmRangeAssetId(rAssetStandards.AssetId);
            this.insertRAssetDisposalTmp(rAssetStandards, rAssetSum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>