<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckPost extends JournalCheckPost implements BatchRetryable
{
    boolean              journalUnPostType;
    RPayTblUpdateType    rPayTblUpdateType;
    Map                  orderTransMap;
    boolean              updateTbl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;

        ret = super();

        if (journalCheckPostType == JournalCheckPostType::Post)
        {
            ret = strFmt("@RUP6375", this.parmJournalId());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTblExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkTblExist(JournalTransList _journalTransList)
    {
        RHRMOrderTrans      orderTrans;

        RPayTblTrans        rPayTblTrans;
        boolean             ret = true, tblExist, emplNotWork;
        JournalTransData    journalTransData = _journalTransList.journalTransData();
        RHRMEmplTable       emplTable;

        _journalTransList.reset();

        while (_journalTransList.next())
        {
            orderTrans = journalTransData.journalTrans();
            emplTable  = RHRMEmplTable::find(orderTrans.EmplId);

            if (endmth(orderTrans.StartDate) < RPayParameters::payPeriod())
            {
                ret = checkFailed(strFmt("@RUP2040",
                                         orderTrans.EmplId,
                                         emplTable.name()));
            }

            if (ret && journalCheckPostType != JournalCheckPostType::Check &&
                isConfigurationkeyEnabled(configurationKeyNum(RPayTbl)))
            {
                select firstonly rPayTblTrans
                    where rPayTblTrans.EmplId     == orderTrans.EmplId                  &&
                          rPayTblTrans.SourceDate >= dateStartMth(orderTrans.StartDate);

                if (rPayTblTrans)
                {
                    tblExist = true;
                }
                else if (! emplTable.PayEmploymentDate || emplTable.PayResignedDate)
                {
                    emplNotWork = true;
                }
            }
        }

        if (ret)
        {
            if ( !emplTable.PayFormType || !emplTable.PayCalendarId)
            {
                updateTbl = false;
            }
            else if (tblExist)
            {
                updateTbl = (Box::yesNo(_journalTransList.count() == 1 ? "@RUP2047" : "@RUP2041",
                                        DialogButton::Yes,
                                        "@RUP6011",
                                        "@RUP971") == DialogButton::Yes);
            }
            else if (emplNotWork)
            {
                updateTbl = (Box::yesNo("@RUP2048",
                                        DialogButton::Yes,
                                        "@RUP2049",
                                        "@RUP971") == DialogButton::Yes);
            }
        }

        if (! ret && journalCheckPostType != JournalCheckPostType::Check)
        {
            throw error("@GLS101992");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRates</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteRates(RHRMOrderTrans _orderTrans)
    {
        RPayRateTrans           rPayRateTrans;
        RHRMEmplTable           emplTable = RHRMEmplTable::find(_orderTrans.EmplId);
        RHRMParameters              rhrmParameters = RHRMParameters::find();
        RHRMWorkCondClassUpdater    rhrmWorkCondClassUpdater;

        void deleteRatesOnDate(TransDate _transDate)
        {
            rPayRateTrans = RPayRateTrans::findRateTrans(emplTable.WageRate,
                                                         _transDate,
                                                         _orderTrans.EmplId,
                                                         true);
            if (rPayRateTrans)
                rPayRateTrans.doDelete();

            rPayRateTrans = RPayRateTrans::findRateTrans(emplTable.RiseInWages1Rate,
                                                         _transDate,
                                                         _orderTrans.EmplId,
                                                         true);
            if (rPayRateTrans)
                rPayRateTrans.doDelete();

            rPayRateTrans = RPayRateTrans::findRateTrans(emplTable.RiseInWages2Rate,
                                                         _transDate,
                                                         _orderTrans.EmplId,
                                                         true);
            if (rPayRateTrans)
                rPayRateTrans.doDelete();

            rPayRateTrans = RPayRateTrans::findRateTrans(emplTable.RiseInWages3Rate,
                                                         _transDate,
                                                         _orderTrans.EmplId,
                                                         true);
            if (rPayRateTrans)
                rPayRateTrans.doDelete();

            rPayRateTrans = RPayRateTrans::findRateTrans(emplTable.EmploymentFactorRate,
                                                         _transDate,
                                                         _orderTrans.EmplId,
                                                         true);
            if (rPayRateTrans)
                rPayRateTrans.doDelete();

            if (rhrmParameters.WorkCondClassRate)
            {
                rhrmWorkCondClassUpdater = RHRMWorkCondClassUpdater::newOrderTrans(_orderTrans);
                rhrmWorkCondClassUpdater.deleteWorkCondClassFromOrderTrans();
            }
        }

        deleteRatesOnDate(_orderTrans.StartDate);

        if (_orderTrans.EndDate)
        {
            deleteRatesOnDate(_orderTrans.dayAfterOrderFinished());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPayrollRates</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPayrollRates(RHRMOrderTrans _orderTrans)
    {
        RHRMEmplTable       emplTable       = RHRMEmplTable::find(_orderTrans.EmplId);
        RHRMOrderTable      rhrmOrderTable  = journalTableData.journalTable();
        RPayRateCallContext rateCallContext = new RPayRateCallContext();
        RPayRateObj         rateObj;
        RHRMParameters              rhrmParameters = RHRMParameters::find();
        RHRMWorkCondClassUpdater    rhrmWorkCondClassUpdater;

        rateCallContext.parmRateDate(_orderTrans.StartDate);
        rateCallContext.parmEmployeeId(emplTable.EmployeeId);

        if (emplTable.WageRate)
        {
            rateObj = RPayRateObj::constructFromRateCode(emplTable.WageRate, rateCallContext);
            rateObj.value(false, _orderTrans.ValueSum, strFmt("@RUP1865", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate));
        }

        if (emplTable.RiseInWages1Rate)
        {
            rateObj = RPayRateObj::constructFromRateCode(emplTable.RiseInWages1Rate, rateCallContext);
            rateObj.value(false, _orderTrans.RiseInWages, strFmt("@RUP1865", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate));
        }

        if (emplTable.RiseInWages2Rate)
        {
            rateObj = RPayRateObj::constructFromRateCode(emplTable.RiseInWages2Rate, rateCallContext);
            rateObj.value(false, _orderTrans.RiseInWages2, strFmt("@RUP1865", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate));
        }

        if (emplTable.RiseInWages3Rate)
        {
            rateObj = RPayRateObj::constructFromRateCode(emplTable.RiseInWages3Rate, rateCallContext);
            rateObj.value(false, _orderTrans.RiseInWages3, strFmt("@RUP1865", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate));
        }

        if (emplTable.EmploymentFactorRate)
        {
            rateObj = RPayRateObj::constructFromRateCode(emplTable.EmploymentFactorRate, rateCallContext);
            rateObj.value(false, _orderTrans.EmploymentFactor, strFmt("@RUP1865", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate));
        }

        if (rhrmParameters.WorkCondClassRate)
        {
            rhrmWorkCondClassUpdater = RHRMWorkCondClassUpdater::newOrderTrans(_orderTrans);
            rhrmWorkCondClassUpdater.fillWorkCondClass();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoResult</Name>
				<Source><![CDATA[
    public void infoResult()
    {
        if (! showInfoResult)
            return;

        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            if (! journalTableData.journalErrorTransList().count() && checkJournalResult)
                info("@SYS17146");
            else
            {
                info("@SYS62651");
                if (journalTableData.journalErrorTransList().count())
                    info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
            }
        }
        else
        {
            if (journalUnPostType)
            {
                if (journalTableData.journalTable().Posted)
                {
                    info("@RUP1960");
                    if (journalTableData.journalErrorTransList().count())
                        info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
                }
                else
                {
                    info("@RUP1961");
                }
            }
            else
            {
                if (journalTableData.journalTable().Posted)
                {
                    info("@SYS5815");
                }
                else
                {
                    info("@SYS23002");
                    if (journalTableData.journalErrorTransList().count())
                        info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        orderTransMap = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalUnPostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean parmJournalUnPostType(boolean _journalUnPostType = journalUnPostType)
    {
        journalUnPostType = _journalUnPostType;
        return journalUnPostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        super(_journalTransData);

        if (! this.checkTrans(_journalTransData))
            throw error("@SYS69030");
    }

]]></Source>
			</Method>
			<Method>
				<Name>putToDialog</Name>
				<Source><![CDATA[
    public void putToDialog()
    {
        super();
        if (dialogTransferErrors)
            dialogTransferErrors.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        if (journalUnPostType)
            _journalTable.Posted         = NoYes::No;
        else
            _journalTable.Posted         = NoYes::Yes;

        _journalTable.PostedDateTime     = DateTimeUtil::getSystemDateTime();
        _journalTable.PostedUserId       = curUserId();
        _journalTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates timesheet.
    /// </summary>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <param name="_tsAffectedStartDate">
    /// The start date.
    /// </param>
    /// <param name="_tsAffectedEndDte">
    /// The end date.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateTimesheet(RHRMEmplId _emplId, StartDate _tsAffectedStartDate, EndDate _tsAffectedEndDte)
    {
        RPayTblUpdater::updateTimesheetFromDocument(_tsAffectedStartDate, _tsAffectedEndDte, _emplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalTable</Name>
				<Source><![CDATA[
    public boolean validateJournalTable(JournalTableMap _journalTable)
    {
        if (! journalId)
            return checkFailed("@SYS19282");

        if (! _journalTable.RecId)
            return checkFailed(strFmt("@SYS62511",journalId));

        if (journalUnPostType)
        {
            if (! _journalTable.Posted)
                return checkFailed(strFmt("@RUP1959",journalId));
        }
        else
        {
            if (_journalTable.Posted)
                return checkFailed(strFmt("@SYS25365",journalId));

            if (! autoBlock && ! _journalTable.SystemBlocked)
                return checkFailed(strFmt("@SYS21619",journalId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDismissOperation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static boolean checkDismissOperation(RHRMOrderTrans _rhrmOrderTrans)
    {
        RPayAverageEarnEmplPeriodTable      rPayAverageEarnEmplPeriodTable;
        TransLink_RU                    transLink;

        select firstonly RecId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.EmplId               == _rhrmOrderTrans.EmplId            &&
                  rPayAverageEarnEmplPeriodTable.EndDate              >  _rhrmOrderTrans.StartDate         &&
                  (rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation ||
                   rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::SickList ||
                   rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip)
            #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodTable);

        if (rPayAverageEarnEmplPeriodTable.RecId)
            return checkFailed(strFmt("@RUP2625", _rhrmOrderTrans.EmplId, _rhrmOrderTrans.emplName()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMJournalCheckPost        journalCheckPost;
        JournalForm                 journalForm;
        Dictionary                  dictionary;

        journalForm      = JournalForm::fromArgs(_args);
        journalCheckPost = RHRMJournalCheckPost::newFromForm(_args, journalForm);

        journalForm.runbaseMainStart();

        if (!journalCheckPost.prompt())
        {
            if (! journalCheckPost.batchInfo().parmBatchExecute())
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());

            return;
        }

        try
        {
            journalCheckPost.runOperation();
            journalForm.runbaseMainEnd(journalCheckPost, false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost, true);
            dictionary = new Dictionary();
            dictionary.tableFlush();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RHRMJournalCheckPost newFromForm(Args _args, JournalForm _journalForm)
    {
        RHRMJournalCheckPost        journalCheckPost;
        RHRMOrderTable              journalTable = _journalForm.journalTableData().journalTable();
        ;

        switch (journalTable.JournalType)
        {
            case RHRMJournalType::Receive:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_Receive();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_Receive();
                    break;
                }

            case RHRMJournalType::Transfer:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_Transfer();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_Transfer();
                    break;
                }

            case RHRMJournalType::Dismiss:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_Dismiss();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_Dismiss();
                    break;
                }

            case RHRMJournalType::Bonus:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_Bonus();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_Bonus();
                    break;
                }

            case RHRMJournalType::Trip:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckPost();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_Trip();
                    break;
                }

            case RHRMJournalType::Vacation:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_Vacation();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_Vacation();
                    break;
                }

            case RHRMJournalType::StaffList:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_StaffListChange();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_StaffListChange();
                    break;
                }

            case RHRMJournalType::VacationChildCancel:
                if (journalTable.Posted)
                {
                    journalCheckPost = new RHRMJournalCheckUnPost_VacationCldCancel();
                    break;
                }
                else
                {
                    journalCheckPost = new RHRMJournalCheckPost_VacationChildCancel();
                    break;
                }
            default:
                throw error("@GLS106494");
        }

        if (journalTable.Posted)
            journalCheckPost.parmJournalUnPostType(true);

        journalCheckPost.getLast();

        journalCheckPost.parmAutoBlock(false);
        journalCheckPost.parmShowInfoResult(true);
        journalCheckPost.parmJournalCheckPostType(_args.parmEnum());
        journalCheckPost.parmJournalTableId(journalTable.TableId);
        journalCheckPost.parmJournalId(journalTable.JournalId);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>