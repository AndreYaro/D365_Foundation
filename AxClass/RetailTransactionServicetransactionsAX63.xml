<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceTransactionsAX63</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceTransactionsAX63</c> implements the transactions related methods of the service interface exposed by the <c>RetailTransactionServiceAX63</c> class to the retail channels.
/// </summary>
/// <remarks>This class contains real time service API implementation logic that is used by N-1 channels for supporting backward compatibility. The logic is almost identical to the code found in version 6.3.</remarks>
public final class RetailTransactionServiceTransactionsAX63
{
    #define.resultsCountOfTransaction(20)
    #EECountryRegionCodes
    #ISOCountryRegionCodes
    #define.ColumnAmount('Amount')
    #define.ColumnDealPrice('DealPrice')
    #define.ColumnLineDiscount('LineDiscount')
    #define.ColumnLineManualDiscountAmount('LineManualDiscountAmount')
    #define.ColumnLineManualDiscountPercentage('LineManualDiscountPercentage')
    #define.ColumnPercentage('Percentage')
    #define.ColumnPeriodicDiscount('PeriodicDiscount')
    #define.ColumnPeriodicPercentageDiscount('PeriodicPercentageDiscount')
    #define.ColumnTotalDiscount('TotalDiscount')
    #define.ColumnTotalPercentageDiscount('TotalPercentageDiscount')
    #define.ElementSalesOrder('SalesOrder')
    #define.ElementSalesTransaction('SalesTransaction')
    #define.ExistsSalesTransDatasource('ExistsRetailTransactionSalesTrans')
    #define.FalseStr('false')
    #define.OfferName('OfferName')
    #define.TrueStr('true')
    #define.childTypeUrl('Url')
    #define.dateTimeOffsetXmlNsKey('xmlns:a')
    #define.dateTimeOffsetXmlNsValue('http://schemas.datacontract.org/2004/07/System')
    #define.resultsCountOfTransaction(20)
    #define.resultsDefaultSkip(1)

    private const str discAmountColumn = 'DiscountAmount';
    private const str discAmountWithoutTaxColumn = 'DiscountAmountWithoutTax';

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSalesOrderToResultMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the XML document for a given SalesOrder entry, and add it to the result map collection.
    /// </summary>
    /// <param name="_transactionXmlList">
    /// The List the new Sales Order entry will be added to.
    /// </param>
    /// <param name="_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name="_salesTable">
    /// The SalesTable entry.
    /// </param>
    /// <param name="_partyTable">
    /// The optional associated DirPartyTable.
    /// </param>
    /// <param name="_includeDetails">
    /// Whether or not line-level details are to be included in the transaction xml.
    /// </param>
    /// <param name="_includeDiscountLines">
    /// Whether or not discount line details are to be included in the transaction xml.
    /// </param>
    /// <param name="_overrideElementName">
    /// Override the element name for elements in the result map.
    /// </param>
    private static void addSalesOrderToResultMap(
        List _transactionXmlList,
        XmlDocument _xmlDoc,
        SalesTable _salesTable,
        DirPartyTable _partyTable,
        boolean _includeDetails,
        boolean _includeDiscountLines = true,
        str _overrideElementName = #ElementSalesOrder)
    {
        RetailSalesTable rsTable;
        RetailTransactionTable rtTable;
        CustTable custTable;

        XmlElement  xmlTrans;

        // Get Transaction Key
        str getTransactionKey(SalesTable t)
        {
            return t.SalesId;
        }

        // Get additional summary values
        rsTable = RetailSalesTable::find(_salesTable.SalesId);
        custTable = custTable::findByPartyRecId(_partyTable.RecId);

        // Get the most recent Transaction associated with this order (if one exists)
        select firstOnly1 * from rtTable
            order by rtTable.transDate desc, rtTable.transTime desc
            where rtTable.salesOrderId == _salesTable.SalesId;

        // Generate xml for transaction header
        xmlTrans = RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(
        _salesTable,
        rsTable,
        custTable,
        rtTable,
        _includeDetails,
        _xmlDoc,
        _includeDiscountLines,
        _overrideElementName);

        // Add xml to results map
        _transactionXmlList.AddEnd(xmlTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesQuoteToResultMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the XML document for a given SalesQuotation entry, and add it to the result map collection.
    /// </summary>
    /// <param name="_transactionXmlList">
    /// The List the new Quote entry will be added to.
    /// </param>
    /// <param name="_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name="_quoteTable">
    /// The SalesQuotationTable entry.
    /// </param>
    /// <param name="_partyTable">
    /// The optional associated DirPartyTable.
    /// </param>
    /// <param name="_includeDetails">
    /// Whether or not line-level details are to be included in the transaction xml.
    /// </param>
    /// <param name="_includeDiscountLines">
    /// Whether or not discount line details are to be included in the transaction xml.
    /// </param>
    /// <param name="_overrideElementName">
    /// Override the element name for elements in the result map.
    /// </param>
    private static void addSalesQuoteToResultMap(
        LIst _transactionXmlList,
        XmlDocument _xmlDoc,
        SalesQuotationTable _quoteTable,
        DirPartyTable _partyTable,
        boolean _includeDetails,
        boolean _includeDiscountLines = true,
        str _overrideElementName = '')
    {
        RetailSalesQuotationTable rsqTable;
        CustTable custTable;

        XmlElement  xmlTrans;

        // Get Transaction Key
        str getTransactionKey(SalesQuotationTable t)
        {
            return t.QuotationId;
        }

        // Get additional summary values
        rsqTable = RetailSalesQuotationTable::find(_quoteTable.QuotationId);
        custTable = custTable::findByPartyRecId(_partyTable.RecId);

        // Generate xml for transaction header
        xmlTrans = RetailTransactionServiceTransactionsAX63::fillQuoteDetails(
        _quoteTable,
        rsqTable,
        custTable,
        _includeDetails,
        _xmlDoc,
        _overrideElementName);

        // Add xml to results
        _transactionXmlList.AddEnd(xmlTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransactionToResultMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the XML document for a given Transaction entry, and add it to the result map collection.
    /// </summary>
    /// <param name="_transactionXmlList">
    /// The List the new transaction entry will be added to.
    /// </param>
    /// <param name="_xmlDoc">
    /// The parent XML document to be used as a template for the new xml.
    /// </param>
    /// <param name="_transactionTable">
    /// The transaction table entry.
    /// </param>
    /// <param name="_partyTable">
    /// The optional associated DirPartyTable entry.
    /// </param>
    /// <param name="_includeDetails">
    /// Whether or not line-level details are to be included in the transaction xml.
    /// </param>
    /// <param name="_includeDiscountLines">
    /// Whether or not discount line details are to be included in the transaction xml.
    /// </param>
    /// <param name="_overrideElementName">
    /// Override the element name for elements in the result map.
    /// </param>
    private static void addTransactionToResultMap(
        List _transactionXmlList,
        XmlDocument _xmlDoc,
        RetailTransactionTable _transactionTable,
        DirPartyTable _partyTable,
        boolean _includeDetails,
        boolean _includeDiscountLines = true,
        str _overrideElementName = #ElementSalesTransaction)
    {
        RetailTransactionTaxTrans taxTable;
        RetailTransactionMarkupTrans chargeTable;
        RetailTransactionSalesTrans transactionSalesTable;
        XmlElement  xmlTrans, xmlItems;

        // Get Transaction Key
        str getTransactionKey(RetailTransactionTable t)
        {
            return t.transactionId + t.store + t.terminal + int642str(t.Channel);
        }

        // Get additional summary values
        select sum(Amount) from taxTable
        where _transactionTable.TransactionId == taxTable.TransactionId
            && _transactionTable.Channel == taxTable.Channel
            && _transactionTable.Store == taxTable.StoreId
            && _transactionTable.Terminal == taxTable.TerminalId
            && _transactionTable.DataAreaId == taxTable.DataAreaId;

        select sum(CalculatedAmount) from chargeTable
        where _transactionTable.TransactionId == chargeTable.TransactionId
            && _transactionTable.Channel == chargeTable.Channel
            && _transactionTable.Store == chargeTable.Store
            && _transactionTable.Terminal == chargeTable.TerminalId
            && _transactionTable.DataAreaId == chargeTable.DataAreaId;

        // Generate xml for transaction header
        xmlTrans = RetailTransactionServiceTransactionsAX63::fillRetailTransactionDetails(_transactionTable, taxTable, chargeTable, _partyTable, _xmlDoc, _includeDetails, _overrideElementName);

        // Fill in sales lines
        if (_includeDetails)
        {
            // Select the sales lines for the current transaction
            while select * from transactionSalesTable
                where _transactionTable.TransactionId == transactionSalesTable.TransactionId
                && _transactionTable.Channel == transactionSalesTable.Channel
                && _transactionTable.Store == transactionSalesTable.Store
                && _transactionTable.Terminal == transactionSalesTable.Terminalid
                && _transactionTable.DataAreaId == transactionSalesTable.DataAreaId
            {
                xmlItems = xmlTrans.getElementsByTagName('SalesLines').item(0);
                xmlItems.appendChild(RetailTransactionServiceTransactionsAX63::fillSalesTransDetails(transactionSalesTable, _xmlDoc, _includeDiscountLines));
            }
        }

        // Add xml to results map
        _transactionXmlList.AddEnd(xmlTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>backfillDiscountTrans</Name>
				<Source><![CDATA[
    private static RetailTransactionDiscountTrans backfillDiscountTrans(RetailTransactionSalesTrans _salesTrans, boolean _isPeriodic, boolean _isLine, boolean _isTotal)
    {
        RetailTransactionDiscountTrans discountTrans;
        discountTrans.TransactionId = _salesTrans.transactionId;
        discountTrans.Channel = _salesTrans.Channel;
        discountTrans.StoreId = _salesTrans.store;
        discountTrans.TerminalId= _salesTrans.terminalId;
        discountTrans.LineNum = _salesTrans.lineNum;

        if (_isPeriodic)
        {
            discountTrans.DiscountOriginType = RetailDiscountOriginType::Manual;
            discountTrans.ManualDiscountType = RetailManualDiscountType::LineDiscountAmount;
            discountTrans.Amount = _salesTrans.periodicDiscAmount;
        }
        else if (_isLine)
        {
            discountTrans.DiscountOriginType = RetailDiscountOriginType::Customer;
            discountTrans.CustomerDiscountType = RetailCustomerDiscountType::Line;
            discountTrans.Amount = _salesTrans.lineDscAmount;
        }
        else if (_isTotal)
        {
            discountTrans.DiscountOriginType = RetailDiscountOriginType::Customer;
            discountTrans.CustomerDiscountType = RetailCustomerDiscountType::TotalDiscount;
            discountTrans.Amount = _salesTrans.totalDiscAmount;
        }

        if (_salesTrans.qty)
        {
            discountTrans.DiscountAmount = discountTrans.Amount / _salesTrans.qty;
        }

        return discountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertDocumentStatusToRetailSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the document status to the RetailSalesStatus
    /// </summary>
    /// <param name="_documentStatus">
    /// The document status to be converted.
    /// </param>
    /// <returns>
    /// The converted retail sales status.
    /// </returns>
    private static RetailSalesStatus ConvertDocumentStatusToRetailSalesStatus(DocumentStatus _documentStatus)
    {
        RetailSalesStatus retailSalesStatus;

        switch (_documentStatus)
        {
            case DocumentStatus::None:
                retailSalesStatus = RetailSalesStatus::Created;
                break;
            case DocumentStatus::PickingList:
                retailSalesStatus = RetailSalesStatus::Processing;
                break;
            case DocumentStatus::PackingSlip:
                retailSalesStatus = RetailSalesStatus::Delivered;
                break;
            case DocumentStatus::Invoice:
                retailSalesStatus = RetailSalesStatus::Invoiced;
                break;
            case DocumentStatus::Cancelled:
                retailSalesStatus = RetailSalesStatus::Canceled;
                break;
            case DocumentStatus::Lost:
                retailSalesStatus = RetailSalesStatus::Lost;
                break;
            default:
                retailSalesStatus = RetailSalesStatus::Unknown;
                break;
        }

        return retailSalesStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertSalesStatusToRetailSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the sales status to the RetailSalesStatus
    /// </summary>
    /// <param name="_salesStatus">
    /// The sales status to be converted.
    /// </param>
    /// <returns>
    /// The converted retail sales status.
    /// </returns>
    private static RetailSalesStatus ConvertSalesStatusToRetailSalesStatus(SalesStatus _salesStatus)
    {
        RetailSalesStatus retailSalesStatus;

        switch (_salesStatus)
        {
            case SalesStatus::Backorder:
                retailSalesStatus = RetailSalesStatus::Created;
                break;
            case SalesStatus::Delivered:
                retailSalesStatus = RetailSalesStatus::Delivered;
                break;
            case SalesStatus::Invoiced:
                retailSalesStatus = RetailSalesStatus::Invoiced;
                break;
            case SalesStatus::Canceled:
                retailSalesStatus = RetailSalesStatus::Canceled;
                break;
            default:
                retailSalesStatus = RetailSalesStatus::Unknown;
                break;
        }

        return retailSalesStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>ChargeLine</c> having the data of the <c>MarkupTrans</c> table.
    /// </summary>
    /// <param name="_markupTrans">
    /// Table buffer of <c>MarkupTrans</c> table.
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>MarkupTrans</c> table.
    /// * Members must be in order of the ChargeLine DataContract
    /// Example:
    ///    <ChargeLine>
    ///      <ItemTaxGroupId />
    ///      <SalesTaxGroupId />
    ///      <TaxAmount />
    ///      <TaxLines />
    ///      <CalculatedAmount />
    ///      <ChargeCode />
    ///      <ChargeMethod />
    ///      <ChargeType />
    ///      <CurrencyCode />
    ///      <ModuleType />
    ///      <Value />
    ///    </ChargeLine>
    /// </returns>
    private static XmlElement fillMarkupTrans(MarkupTrans _markupTrans, XmlDocument xmlDoc)
    {
        XmlElement xmlRecord, xmlEntry, xmlTaxLine, xmlTax;
        xmlRecord = xmlDoc.createElement('ChargeLine');

        xmlEntry = xmlDoc.createElement('ItemTaxGroupId');
        xmlEntry.innerText(_markupTrans.TaxItemGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SalesTaxGroupId');
        xmlEntry.innerText(_markupTrans.TaxGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('TaxAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_markupTrans.TaxAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlTax = xmlDoc.createElement('TaxLines');
        xmlTaxLine = xmlDoc.createElement('TaxLine');
        xmlEntry = xmlDoc.createElement('Amount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_markupTrans.TaxAmount));
        xmlTaxLine.appendChild(xmlEntry);
        xmlTax.appendChild(xmlTaxLine);
        xmlRecord.appendChild(xmlTax);

        xmlEntry = xmlDoc.createElement('CalculatedAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_markupTrans.CalculatedAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ChargeCode');
        xmlEntry.innerText(_markupTrans.MarkupCode);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ChargeMethod');
        xmlEntry.innerText(enum2str(_markupTrans.MarkupCategory));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ChargeType');
        xmlEntry.innerText('Manual');
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('CurrencyCode');
        xmlEntry.innerText(_markupTrans.CurrencyCode);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ModuleType');
        xmlEntry.innerText(enum2str(_markupTrans.ModuleType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Value');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_markupTrans.Value));
        xmlRecord.appendChild(xmlEntry);

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentHistoryDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of Sales Order payment activity/history in the form of the <c>RetailTransactionPaymentTrans</c> table schema.
    /// </summary>
    /// <param name = "_salesId">The ID of the sales order.</param>
    /// <param name = "_root">The <c>XmlElement</c> that is the root for individual payment history records.</param>
    /// <param name = "_xmlDoc">The parent <c>XmlDocument</c>. </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionPaymentTrans</c> table as populated by <c>LedgerJournalTrans</c> and <c>CustTrans</c> records for the given Sales Order.
    /// * Members must be in order of the TenderLine DataContract
    /// Example:
    /// <![CDATA[
    ///   <_root>
    ///    <TenderLine>
    ///     <Amount/>
    ///     <AmountInCompanyCurrency/>
    ///     <AmountInTenderedCurrency/>
    ///     <CardTypeId/>
    ///     <CompanyCurrencyExchangeRate/>
    ///     <CreditMemoId/>
    ///     <Currency/>
    ///     <CustomerId/>
    ///     <ExchangeRate/>
    ///     <GiftCardId/>
    ///     <IsChangeLine/>
    ///     <IsHistorical/>
    ///     <IsVoidable/>
    ///     <LineNumber/>
    ///     <LoyaltyCardId/>
    ///     <TenderTypeId/>
    ///     <Authorization/>
    ///     <IsPreProcessed/>
    ///     <MaskedCardNumber/>
    ///     <TenderDate/>
    ///     <TransactionStatusValue/>
    ///    </TenderLine>
    ///  </_root>
    ///  ]]]]><![CDATA[>
    /// </returns>
    private static XmlElement fillPaymentHistoryDetails(
    SalesId _salesId,
    XmlElement _root,
    XmlDocument _xmlDoc)
    {
        RetailTransactionPaymentTrans tmpPaymentTrans;
        RetailChannelTable channelTable;

        // refactor from CustomerOrder code
        LedgerJournalTrans  ledgerJournalTrans;
        AmountCur amount, prepaymentAppliedOnInvoice;

        CustTrans ct, original_ct;
        CustSettlement cs;
        CustInvoiceJour cij;

        // <GEERU>
        boolean countryRegion_W = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);
        // </GEERU>

        // Add payment history entry to collection
        void AddHistoryEntry(str _paymentType, AmountCur _amount, CurrencyCode _currency, TransDate _date)
        {
            // Fill a temporary RetailTransactionPaymentTrans record to feed the filPaymentTransDetails(...) method.
            tmpPaymentTrans.clear();
            tmpPaymentTrans.amountTendered = _amount;
            tmpPaymentTrans.amountMST = _amount;
            tmpPaymentTrans.currency = _currency;
            tmpPaymentTrans.transDate = _date;

            _root.appendChild(RetailTransactionServiceTransactionsAX63::fillPaymentTransDetails(tmpPaymentTrans, channelTable, _xmlDoc));
        }

        //
        // This method is patterned after RetailTransactionServiceOrdersAX63::AddPaymentHistoryXml(...), which aggregates similar payment details for a given Sales Order.
        //

        //
        // 1. Get Pre-payments created from POS.
        //
        while select
       PaymReference,
       PaymMode,
       AmountCurCredit,
       AmountCurDebit,
       Prepayment,
       CreatedDateTime,
       CurrencyCode,
       TransDate
       // <GEERU>
       ,Accounttype
       // </GEERU>
       from ledgerJournalTrans
           where ledgerJournalTrans.PaymReference == _salesId 
           && ledgerJournalTrans.Prepayment == NoYes::Yes
        {
            // <GEERU>
            if (countryRegion_W && ledgerJournalTrans.AccountType != LedgerJournalAcType::Cust)
            {
                amount = (ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit);
            }
            else
            {
                // </GEERU>
                amount = (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                // <GEERU>
            }
            // </GEERU>

            AddHistoryEntry(
            ledgerJournalTrans.PaymMode,
            amount,
            ledgerJournalTrans.CurrencyCode,
            ledgerJournalTrans.TransDate);
        }

        //
        // 2. Factor-in settlement activity from invoices.
        //

        // For all payments (CustTrans) on all invoices (CustInvoiceJour) for this Sales Order...
        while select cij 
            where (cij.SalesId == _salesid)
            join ct 
            where ct.Invoice == cij.InvoiceId
        {
            // Add up the amount from each settled payment (CustSettlement) that originally came from a prepayment/deposit payment (CustTrans)...
            select sum(SettleAmountCur) from cs
                where cs.TransRecId == ct.RecId
                exists join original_ct
                where cs.OffsetRecid == original_ct.RecId
                && original_ct.Prepayment == NoYes::Yes;

            // This is the amount of any previously collected Prepayment/Deposit that has now been applied/settled against an invoice.
            prepaymentAppliedOnInvoice = cs.SettleAmountCur;

            // The aggregated invoice payment, less any deposit applied.
            amount = (ct.AmountCur - prepaymentAppliedOnInvoice);
            AddHistoryEntry(
            '',
            amount,
            ct.CurrencyCode,
            ct.TransDate);
        }

        // returning <_root> <TenderLine/> <TenderLine/> ... </_root>
        return _root;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentTransDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a list of <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="_paymentTrans">
    /// Table buffer of <c>RetailTransactionPaymentTrans</c> table.
    /// </param>
    /// <param name="_channel">
    /// Table buffer of <c>RetailChannelTable</c> table.
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionSalesTrans</c> table.
    /// * Members must be in order of the SalesLine DataContract
    /// Example:
    ///    <TenderLine>
    ///     <Amount/>
    ///     <AmountInCompanyCurrency/>
    ///     <AmountInTenderedCurrency/>
    ///     <CardTypeId/>
    ///     <CompanyCurrencyExchangeRate/>
    ///     <CreditMemoId/>
    ///     <Currency/>
    ///     <CustomerId/>
    ///     <ExchangeRate/>
    ///     <GiftCardId/>
    ///     <IsChangeLine/>
    ///     <IsHistorical/>
    ///     <IsVoidable/>
    ///     <LineNumber/>
    ///     <LoyaltyCardId/>
    ///     <TenderTypeId/>
    ///     <Authorization/>
    ///     <IsPreProcessed/>
    ///     <MaskedCardNumber/>
    ///     <TenderDate/>
    ///     <TransactionStatusValue/>
    ///    </TenderLine>
    /// </returns>
    private static XmlElement fillPaymentTransDetails(
    RetailTransactionPaymentTrans _paymentTrans,
    RetailChannelTable _channel,
    XmlDocument xmlDoc)
    {
        XmlElement xmlEntry,xmlRecord;

        void addElement( str name, str text)
        {
            xmlEntry = xmlDoc.createElement(name);
            xmlEntry.innerText(text);
            xmlRecord.appendChild(xmlEntry);
        }

        xmlRecord = xmlDoc.createElement('TenderLine');

        // DataContractSerializer requires fields to be ordered (base types first, alphabetic)

        // TaxableItem fields

        addElement('Amount', RetailTransactionServiceUtilities::realToString(_paymentTrans.amountTendered));   //decimal Amount
        addElement('AmountInCompanyCurrency', RetailTransactionServiceUtilities::realToString(_paymentTrans.amountMST));   //decimal AmountInCompanyCurrency
        addElement('AmountInTenderedCurrency', RetailTransactionServiceUtilities::realToString(_paymentTrans.amountTendered));   //decimal AmountInTenderedCurrency
        addElement('CardTypeId', _paymentTrans.cardTypeId);   //string CardTypeId
        addElement('CompanyCurrencyExchangeRate', RetailTransactionServiceUtilities::realToString(_paymentTrans.exchRateMST));   //decimal CompanyCurrencyExchangeRate
        addElement('CreditMemoId', _paymentTrans.creditVoucherId);   //string CreditMemoId
        addElement('Currency', _paymentTrans.currency);   //string Currency
        addElement('CustomerId', _paymentTrans.cardOrAccount);   //string CustomerId
        addElement('ExchangeRate', RetailTransactionServiceUtilities::realToString(_paymentTrans.exchRate));   //decimal ExchangeRate
        addElement('GiftCardId', _paymentTrans.giftCardId);   //string GiftCardId
        addElement('IsChangeLine', (_paymentTrans.changeLine ? #TrueStr : #FalseStr));   //bool IsChangeLine
        addElement('IsHistorical', #TrueStr);   //bool IsHistorical
        addElement('IsVoidable', #FalseStr);   //bool IsVoidable
        addElement('LineNumber', RetailTransactionServiceUtilities::lineNumToString(_paymentTrans.lineNum));   //decimal LineNumber
        addElement('LoyaltyCardId', _paymentTrans.loyaltyCardId);   //string LoyaltyCardId
        addElement('TenderTypeId', _paymentTrans.tenderType);   //string TenderTypeId

        // From TenderLine
        addElement('Authorization', _paymentTrans.paymentAuthorization);   //string Authorization (not sure if we need this)
        addElement('MaskedCardNumber', _paymentTrans.cardOrAccount);   //string MaskedCardNumber

        xmlEntry = xmlDoc.createElement('OrderPlacedDate');
        xmlEntry.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
        xmlEntry.innerXml(RetailTransactionServiceUtilities::utcDateTimeToDateTimeStringWithOffset(
            DateTimeUtil::newDateTime(_paymentTrans.transDate, _paymentTrans.transTime, _channel.ChannelTimeZone)));   //DateTimeOffset? TenderDate
        xmlRecord.appendChild(xmlEntry);

        addElement('TransactionStatusValue', int2str(_paymentTrans.transactionStatus));   //int TransactionStatusValue (int value from enum TransactionStatus)

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillQuoteDetails</Name>
				<Source><![CDATA[
    private static XmlElement fillQuoteDetails(
        SalesQuotationTable
        _salesQuotationTable,
        RetailSalesQuotationTable _rsqTable,
        CustTable _custTable,
        boolean _includeDetails,
        XmlDocument xmlDoc,
        str _elementName = #ElementSalesOrder)
    {
        XmlElement               xmlRoot, xmlRecord, xmlContainer;
        SalesQuotationTotals     salesTotals;
        AmountCur                totalAmount, totalTaxAmount, totalDiscountAmount, totalChargeAmount;
        LogisticsPostalAddress   deliveryAddress;
        SalesQuotationLine       salesQuotationLine;
        RetailSalesQuotationLine rsqLine;
        InventDim                inventDim;

        salesTotals     = SalesQuotationTotals::construct(_salesQuotationTable,SalesUpdate::All);
        salesTotals.calc();
        // totalAmount is the sales order balance due amount + previously invoiced amounts
        totalAmount     = salesTotals.totalAmount();
        totalTaxAmount  = salesTotals.totalTaxAmount();
        totalDiscountAmount = salesTotals.totalLineDisc();
        totalChargeAmount = salesTotals.totalMarkup();


        xmlRoot = xmlDoc.createElement(_elementName);

        xmlRecord = xmlDoc.createElement('ChargeAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalChargeAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CustomerId');
        xmlRecord.innerText(_salesQuotationTable.CustAccount);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CustomerOrderTypeValue');
        xmlRecord.innerText(int2str(RetailCustomerOrderType::Quotation));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('DeliveryMode');
        xmlRecord.innerText(_salesQuotationTable.DlvMode);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Id');
        xmlRecord.innerText(_salesQuotationTable.QuotationId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('InventoryLocationId');
        xmlRecord.innerText(_salesQuotationTable.InventLocationId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Name');
        if (_custTable.name() != '')
        {
            xmlRecord.innerText(_custTable.name());
        }
        else
        {
            xmlRecord.innerText(_salesQuotationTable.QuotationName);
        }
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ReceiptEmail');
        xmlRecord.innerText(_salesQuotationTable.Email);
        xmlRoot.appendChild(xmlRecord);

        if (_salesQuotationTable.ReceiptDateRequested)
        {
            xmlRecord = xmlDoc.createElement('RequestedDeliveryDate');
            xmlRecord.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
            xmlRecord.innerXml(RetailTransactionServiceUtilities::dateToDateTimeStringWithOffset(_salesQuotationTable.ReceiptDateRequested, _rsqTable.RetailChannel));
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('SalesId');
        xmlRecord.innerText(_salesQuotationTable.QuotationId);
        xmlRoot.appendChild(xmlRecord);

        xmlContainer = xmlDoc.createElement('SalesLines');

        if (_includeDetails)
        {
            while select * from salesQuotationLine
                join inventDim where salesQuotationLine.QuotationId == _salesQuotationTable.QuotationId
                && inventDim.InventDimId == salesQuotationLine.InventDimId
                outer join rsqLine 
                where rsqLine.InventTransId == salesQuotationLine.InventTransId
            {
                xmlRecord = RetailTransactionServiceTransactionsAX63::fillQuoteLineDetails(salesQuotationLine, rsqLine, inventDim, xmlDoc);
                xmlContainer.appendChild(xmlRecord);
            }
        }

        xmlRoot.appendChild(xmlContainer);

        if (_includeDetails)
        {
            deliveryAddress = LogisticsPostalAddress::findRecId(_salesQuotationTable.DeliveryPostalAddress);
            if (deliveryAddress)
            {
                xmlRecord = RetailTransactionServiceTransactionsAX63::fillSalesOrderAddress(deliveryAddress, _salesQuotationTable.DeliveryName, xmlDoc);
                xmlRoot.appendChild(xmlRecord);
            }
        }

        xmlRecord = xmlDoc.createElement('TaxAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalTaxAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TotalAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TotalDiscount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalDiscountAmount));
        xmlRoot.appendChild(xmlRecord);

        // Assume it is a customer order
        xmlRecord = xmlDoc.createElement('TransactionType');
        xmlRecord.innerText(enum2str(RetailTransactionType::CustomerOrder));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TransactionTypeValue');
        xmlRecord.innerText(int2str(enum2int(RetailTransactionType::CustomerOrder)));
        xmlRoot.appendChild(xmlRecord);

        if (_salesQuotationTable.createdDateTime)
        {
            xmlRecord = xmlDoc.createElement('OrderPlacedDate');
            xmlRecord.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
            xmlRecord.innerXml(RetailTransactionServiceUtilities::utcDateTimeToDateTimeStringWithOffset(_salesQuotationTable.CreatedDateTime));
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('RecordId');
        xmlRecord.innerText(int642str(_salesQuotationTable.RecId));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Status');
        xmlRecord.innerText('Created');
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('StatusValue');
        xmlRecord.innerText('1');
        xmlRoot.appendChild(xmlRecord);

        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillQuoteLineDetails</Name>
				<Source><![CDATA[
    private static XmlElement fillQuoteLineDetails(salesQuotationLine _qLine, RetailSalesQuotationLine _rsqLine, InventDim _inventDim, XmlDocument xmlDoc)
    {
        LogisticsPostalAddress  deliveryAddress;
        MarkupTrans             markupTrans;

        InventTable             inventTable;
        InventDimCombination    inventDimCombination;
        RecId                   productId;
        InventDimParm           inventDimParm;
        InventDimId             inventDimId;
        EcoResProduct           ecoResProduct;
        str                     listingId;

        XmlElement xmlRecord, xmlEntry, xmlAddress, xmlTax, xmlTaxLine;

        xmlRecord = xmlDoc.createElement('SalesLine');

        xmlEntry = xmlDoc.createElement('ItemId');
        xmlEntry.innerText(_qLine.ItemId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ItemTaxGroupId');
        xmlEntry.innerText(_qLine.TaxItemGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('NetAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_qLine.LineAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Price');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_qLine.SalesPrice));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Quantity');
        xmlEntry.innerText(num2str(_qLine.SalesQty, 0, 2, 1, 0));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SalesTaxGroupId');
        xmlEntry.innerText(_qLine.TaxGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlTax = xmlDoc.createElement('TaxLines');
        xmlTaxLine = xmlDoc.createElement('TaxLine');
        xmlEntry = xmlDoc.createElement('Amount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_qLine.LineAmount - _qLine.lineAmountExclTax()));
        xmlTaxLine.appendChild(xmlEntry);
        xmlTax.appendChild(xmlTaxLine);
        xmlRecord.appendChild(xmlTax);

        //Add line level charges
        while select * from markupTrans
            where markupTrans.TransTableId == _qLine.TableId
            && markupTrans.TransRecId == _qLine.RecId
        {
            xmlEntry = RetailTransactionServiceTransactionsAX63::fillMarkupTrans(markupTrans, xmlDoc);
            xmlRecord.appendChild(xmlEntry);
        }

        xmlEntry = xmlDoc.createElement('DeliveryMode');
        xmlEntry.innerText(_qLine.DlvMode);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('InventoryDimensionId');
        xmlEntry.innerText(_qLine.InventDimId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('InventoryLocationId');
        xmlEntry.innerText(_inventDim.InventLocationId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('LineDiscount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_qLine.LineDisc));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('LineNumber');
        xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(_qLine.LineNum));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ListingId');
        if (_rsqLine && _rsqLine.ListingId)
        {
            xmlEntry.innerText(_rsqLine.ListingId);
        }
        else
        {
            productId = (select firstOnly Product
                from inventTable
                where inventTable.ItemId == _qLine.ItemId).Product;

            ecoResProduct = EcoResProduct::find(productId);

            if (ecoResProduct != null &&
            !ecoResProduct.isDistinctProduct())
            {
                inventDimParm.setAllProductDimensions();
                _inventDim.clearNotSelectedDim(inventDimParm);
                inventDimId = InventDim::findOrCreate(_inventDim).inventDimId;

                productId = (select firstOnly DistinctProductVariant
                from inventDimCombination
                where inventDimCombination.ItemId == _qLine.ItemId
                    && inventDimCombination.InventDimId == inventDimId).DistinctProductVariant;
            }

            xmlEntry.innerText(int642str(productId));
        }
        listingId = xmlEntry.innerText();
        xmlRecord.appendChild(xmlEntry);

        //ProductId is a copy of ListingId
        xmlEntry = xmlDoc.createElement('ProductId');
        xmlEntry.innerText(listingId);
        xmlRecord.appendChild(xmlEntry);

        deliveryAddress = LogisticsPostalAddress::findRecId(_qLine.DeliveryPostalAddress);
        if (deliveryAddress)
        {
            xmlAddress = RetailTransactionServiceTransactionsAX63::fillSalesOrderAddress(deliveryAddress, _qLine.DeliveryName, xmlDoc);
            xmlRecord.appendChild(xmlAddress);
        }

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRetailTransactionDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>RetailTransaction</c> having the data of the <c>RetailTransactionTable</c> table.
    /// </summary>
    /// <param name="transactionTable">
    /// Table buffer of <c>RetailTransactionTable</c> table.
    /// </param>
    /// <param name="taxTable">
    /// Table buffer of <c>RetailTransactionTaxTrans</c> table.
    /// </param>
    /// <param name="chargeTable">
    /// Table buffer of <c>RetailTransactionMarkupTrans</c> table.
    /// </param>
    /// <param name="partyTable">
    /// Table buffer of <c>DirPartyTable</c> table.
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <param name="_includePaymentDetails">
    /// Whether or not to include payment line details.
    /// </param>
    /// <param name="_elementName">
    /// Name of the element to be created.
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionTable</c> table.
    /// * Members must be in order of the SalesOrder DataContract
    /// Example:
    ///    <SalesOrder>
    ///      <AmountPaid />
    ///      <ChannelId />
    ///      <ChannelReferenceId />
    ///      <ChargeAmount />
    ///      <CustomerId />
    ///      <DiscountAmount />
    ///      <EntryStatusValue />
    ///      <GrossAmount />
    ///      <HasLoyaltyPayment />
    ///      <Id />
    ///      <InvoiceComment />
    ///      <LoyaltyCardId />
    ///      <Name />
    ///      <NetAmountWithNoTax />
    ///      <PrepaymentAmountPaid />
    ///      <ReceiptEmail />
    ///      <ReceiptId />
    ///      <SalesId />
    ///      <SalesLines />
    ///      <ShiftId />
    ///      <StaffId />
    ///      <StoreId />
    ///      <SubtotalAmount />
    ///      <TaxAmount />
    ///      <TerminalId />
    ///      <TotalAmount />
    ///      <TotalDiscount />
    ///      <TransactionTypeValue />
    ///      <OrderPlacedDate />
    ///    </SalesOrder>
    /// </returns>
    private static XmlElement fillRetailTransactionDetails(
        RetailTransactionTable transactionTable,
        RetailTransactionTaxTrans taxTable,
        RetailTransactionMarkupTrans chargeTable,
        DirPartyTable partyTable,
        XmlDocument xmlDoc,
        boolean _includePaymentDetails,
        str _elementName = #ElementSalesTransaction)
    {
        RetailTransactionPaymentTrans paymentTable;
        RetailTransactionTaxTrans transTaxTrans;
        RetailChannelTable channelTable;

        XmlElement                  xmlRoot, xmlRecord;
        AmountCur                   prepaymentAmountPaid, subtotalAmount;
        boolean                     hasLoyaltyPayment;
        str                         utcTimeString;

        xmlRoot = xmlDoc.createElement(_elementName);

        // DataContractSerializer requires fields to be ordered (base types first, alphabetic)

        // SalesTransaction fields

        xmlRecord = xmlDoc.createElement('AmountPaid');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.PaymentAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ChannelId');
        xmlRecord.innerText(int642str(transactionTable.Channel));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ChannelReferenceId');
        xmlRecord.innerText(transactionTable.ChannelReferenceId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ChargeAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(chargeTable.CalculatedAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CreatedDateTime');
        xmlRecord.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
        utcTimeString = RetailTransactionServiceUtilities::utcDateTimeToDateTimeStringWithOffset(DateTimeUtil::newDateTime(transactionTable.transDate,transactionTable.transTime, RetailChannelTable::findByRecId(transactionTable.Channel).ChannelTimeZone));
        xmlRecord.innerXml(utcTimeString);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CustomerId');
        xmlRecord.innerText(transactionTable.CustAccount);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('DiscountAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.DiscAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('EntryStatusValue');
        xmlRecord.innerText(int2str(transactionTable.EntryStatus));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('GrossAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.GrossAmount * -1));
        xmlRoot.appendChild(xmlRecord);

        hasLoyaltyPayment = RetailLoyaltyCardRewardPointTrans::IsTransactionPaidByLoyalty(
        transactionTable.transactionId,
        transactionTable.store,
        transactionTable.terminal,
        transactionTable.Channel,
        transactionTable.dataAreaId);
        xmlRecord = xmlDoc.createElement('HasLoyaltyPayment');
        xmlRecord.innerText(hasLoyaltyPayment ? #TrueStr : #FalseStr);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Id');
        xmlRecord.innerText(transactionTable.TransactionId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('InvoiceComment');
        xmlRecord.innerText(transactionTable.InvoiceComment);
        xmlRoot.appendChild(xmlRecord);

        select IsIncludedInPrice from transTaxTrans
        where transactionTable.TransactionId   == transTaxTrans.TransactionId
        && transactionTable.terminal   == transTaxTrans.TerminalId
        && transactionTable.Channel   == transTaxTrans.Channel;

        xmlRecord = xmlDoc.createElement('IsTaxIncludedInPrice');
        if (transTaxTrans)
        {
            xmlRecord.innerText(int2str(enum2int(transTaxTrans.IsIncludedInPrice)));
        }
        else
        {
            //To keep the POS behavior consistent, set the price included tax as false
            xmlRecord.innerText('0');
        }
        xmlRoot.appendChild(xmlRecord);


        xmlRecord = xmlDoc.createElement('LoyaltyCardId');
        xmlRecord.innerText(transactionTable.loyaltyCardId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Name');
        xmlRecord.innerText(partyTable.Name);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('NetAmountWithNoTax');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.netAmount * -1));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('NetAmountWithTax');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.GrossAmount * -1));
        xmlRoot.appendChild(xmlRecord);

        // total invoice amounts paid
        prepaymentAmountPaid = RetailPrePaymentTrans::paymentsMade(transactionTable.salesOrderId);

        xmlRecord = xmlDoc.createElement('PrepaymentAmountPaid');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(prepaymentAmountPaid));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ReceiptEmail');
        xmlRecord.innerText(transactionTable.receiptEmail);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ReceiptId');
        xmlRecord.innerText(transactionTable.ReceiptId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('SalesId');
        xmlRecord.innerText(transactionTable.salesOrderId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('SalesLines');
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ShiftId');
        xmlRecord.innerText(transactionTable.Shift ? transactionTable.Shift : '0');
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('StaffId');
        xmlRecord.innerText(transactionTable.Staff);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('StoreId');
        xmlRecord.innerText(transactionTable.Store);
        xmlRoot.appendChild(xmlRecord);

        subtotalAmount = RetailTransactionServiceTransactionsAX63::getTransactionSubtotalAmount(
        transactionTable.TransactionId,
        transactionTable.DataAreaId,
        transactionTable.Channel,
        transactionTable.Terminal);

        xmlRecord = xmlDoc.createElement('SubtotalAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(subtotalAmount * -1));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TaxAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(taxTable.Amount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TenderLines');
        xmlRoot.appendChild(xmlRecord);

        if (_includePaymentDetails)
        {
            channelTable = RetailChannelTable::findByRecId(transactionTable.Channel);

            // Select the tender lines for the current transaction
            while select * from paymentTable
        where
            transactionTable.TransactionId == paymentTable.TransactionId
            && transactionTable.Channel == paymentTable.Channel
            && transactionTable.Store == paymentTable.Store
            && transactionTable.Terminal == paymentTable.Terminal
            && transactionTable.DataAreaId == paymentTable.DataAreaId
            {
                xmlRecord = xmlRoot.getElementsByTagName('TenderLines').item(0);
                xmlRecord.appendChild(RetailTransactionServiceTransactionsAX63::fillPaymentTransDetails(paymentTable, channelTable, xmlDoc));
            }
        }

        xmlRecord = xmlDoc.createElement('TerminalId');
        xmlRecord.innerText(transactionTable.Terminal);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TotalAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.GrossAmount * -1));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TotalDiscount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.TotalDiscAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TransactionTypeValue');
        xmlRecord.innerText(int2str(enum2int(transactionTable.type)));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CurrencyCode');
        xmlRecord.innerText(transactionTable.currency);
        xmlRoot.appendChild(xmlRecord);

        // SalesOrder fields
        // duplicate of 'CreatedDateTime' above
        xmlRecord = xmlDoc.createElement('OrderPlacedDate');
        xmlRecord.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
        xmlRecord.innerXml(utcTimeString);
        xmlRoot.appendChild(xmlRecord);

        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>SalesLiner</c> having the data of the <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_soLine">
    /// Table buffer of <c>SalesLine</c> table.
    /// </param>
    /// <param name="_rsoLine">
    /// Table buffer of <c>RetailSalesLine</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// Table buffer of <c>InventDim</c> table.
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <param name="includeDiscount">
    /// Whether to include the discount details, by default is false.
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>SalesLine</c> table.
    /// * Members must be in order of the SalesLine DataContract
    /// Example:
    ///    <SalesLine>
    ///      <ItemId />
    ///      <ItemTaxGroupId />
    ///      <NetAmount />
    ///      <Price />
    ///      <Quantity />
    ///      <SalesTaxGroupId />
    ///      <TaxAmount />
    ///      <TaxLines />
    ///      <ChargeLines />
    ///      <DeliveryMode />
    ///      <InventoryDimensionId />
    ///      <InventoryLocationId />
    ///      <LineDiscount />
    ///      <LineNumber />
    ///      <ListingId />
    ///      <ProductId />
    ///      <QuantityInvoiced />
    ///      <ShippingAddress />
    ///      <TotalDiscount />
    ///      <TotalPercentageDiscount />
    ///    </SalesLine>
    /// </returns>
    private static XmlElement fillSalesLineDetails(SalesLine _soLine, RetailSalesLine _rsoLine, InventDim _inventDim, XmlDocument xmlDoc, boolean includeDiscount = false)
    {
        LogisticsPostalAddress      deliveryAddress;
        MarkupTrans                 markupTrans;
        RetailSalesDiscountLine     salesLineDiscount;
        RetailPeriodicDiscount      retailDiscount;
        MCRSalesLine                mcrSalesLine;

        XmlElement xmlRecord, xmlEntry, xmlAddress, xmlTax, xmlTaxLine, xmlContainer;

        DiscAmount lineDiscount = 0, periodicDiscount = 0, totalDiscount = 0;
        boolean hasDiscountLines = false;
        boolean needBackfill = _soLine.LineDisc && !_rsoLine.LineDscAmount && !_rsoLine.PeriodicDiscount && !_rsoLine.TotalDiscount;

        InventTable                 inventTable;
        InventDimCombination        inventDimCombination;
        RecId                       productId;
        InventDimParm               inventDimParm;
        InventDimId                 inventDimId;
        EcoResProduct               ecoResProduct;
        str                         listingId;

        xmlRecord = xmlDoc.createElement('SalesLine');

        xmlEntry = xmlDoc.createElement('ItemId');
        xmlEntry.innerText(_soLine.ItemId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ItemTaxGroupId');
        xmlEntry.innerText(_soLine.TaxItemGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('NetAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_soLine.LineAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Price');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_soLine.SalesPrice));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Quantity');
        xmlEntry.innerText(num2str(_soLine.SalesQty, 0, 2, 1, 0));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SalesTaxGroupId');
        xmlEntry.innerText(_soLine.TaxGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlTax = xmlDoc.createElement('TaxLines');
        xmlTaxLine = xmlDoc.createElement('TaxLine');
        xmlEntry = xmlDoc.createElement('Amount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_soLine.LineAmount - _soLine.lineAmountExclTax()));
        xmlTaxLine.appendChild(xmlEntry);
        xmlTax.appendChild(xmlTaxLine);
        xmlRecord.appendChild(xmlTax);

        //Add line level charges
        while select * from markupTrans
        where markupTrans.TransTableId == _soLine.TableId
        && markupTrans.TransRecId == _soLine.RecId
        {
            xmlEntry = RetailTransactionServiceTransactionsAX63::fillMarkupTrans(markupTrans, xmlDoc);
            xmlRecord.appendChild(xmlEntry);
        }

        xmlEntry = xmlDoc.createElement('DeliveryMode');
        xmlEntry.innerText(_soLine.DlvMode);
        xmlRecord.appendChild(xmlEntry);

        if (includeDiscount)
        {
            xmlContainer = xmlDoc.createElement('DiscountLines');
            // add discount data
            while select salesLineDiscount
            where salesLineDiscount.InventTransId == _rsoLine.InventTransId
        outer join Name from retailDiscount
            where salesLineDiscount.PeriodicDiscountOfferId
                && retailDiscount.OfferId == salesLineDiscount.PeriodicDiscountOfferId
            {
                hasDiscountLines = true;
                if (needBackfill)
                {
                    if (salesLineDiscount.DiscountOriginType == RetailDiscountOriginType::Periodic)
                    {
                        periodicDiscount += salesLineDiscount.Amount;
                    }
                    else if (salesLineDiscount.DiscountOriginType == RetailDiscountOriginType::Customer)
                    {
                        if (salesLineDiscount.CustomerDiscountType != RetailCustomerDiscountType::TotalDiscount)
                        {
                            lineDiscount += salesLineDiscount.Amount;
                        }
                        else
                        {
                            totalDiscount += salesLineDiscount.Amount;
                        }
                    }
                    else if (salesLineDiscount.DiscountOriginType == RetailDiscountOriginType::Manual)
                    {
                        if (salesLineDiscount.ManualDiscountType == RetailManualDiscountType::LineDiscountAmount ||
                        salesLineDiscount.ManualDiscountType == RetailManualDiscountType::LineDiscountPercent)
                        {
                            lineDiscount += salesLineDiscount.Amount;
                        }
                        else
                        {
                            totalDiscount += salesLineDiscount.Amount;
                        }
                    }
                }
                // fill in discount data
                xmlEntry = RetailTransactionServiceTransactionsAX63::fillSalesLineDiscountDetails(salesLineDiscount, retailDiscount, _soLine.LineNum, _soLine.SalesQty, xmlDoc);
                xmlContainer.appendChild(xmlEntry);
            }

            if (needBackfill)
            {
                // make up a discount line if non exists.
                if (!hasDiscountLines)
                {
                    lineDiscount = _soLine.LineDisc * _soLine.SalesQty;

                    salesLineDiscount.initValue();
                    salesLineDiscount.InventTransId = _soLine.InventTransId;
                    salesLineDiscount.DiscountOriginType = RetailDiscountOriginType::Customer;
                    salesLineDiscount.CustomerDiscountType = RetailCustomerDiscountType::Line;
                    salesLineDiscount.Amount = _soLine.LineDisc;
                    if (_soLine.SalesQty)
                    {
                        salesLineDiscount.DiscountAmount = _soLine.LineDisc / _soLine.SalesQty;
                    }

                    retailDiscount.clear();

                    xmlEntry = RetailTransactionServiceTransactionsAX63::fillSalesLineDiscountDetails(salesLineDiscount, retailDiscount, _soLine.LineNum, _soLine.SalesQty, xmlDoc);
                    xmlContainer.appendChild(xmlEntry);
                }
            }
            else
            {
                lineDiscount = _rsoLine.LineDscAmount;
                periodicDiscount = _rsoLine.PeriodicDiscount;
                totalDiscount = _rsoLine.TotalDiscount;
            }

            xmlRecord.appendChild(xmlContainer);
        }
        else
        {
            if (needBackfill)
            {
                lineDiscount = _soLine.LineDisc * _soLine.SalesQty;
            }
            else
            {
                lineDiscount = _rsoLine.LineDscAmount;
                periodicDiscount = _rsoLine.PeriodicDiscount;
                totalDiscount = _rsoLine.TotalDiscount;
            }
        }

        xmlEntry = xmlDoc.createElement('ElectronicDeliveryEmailAddress');
        mcrSalesLine = _soLine.mcrSalesLine();
        xmlEntry.innerText(mcrSalesLine.GiftCardRecipientEmail);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('InventoryDimensionId');
        xmlEntry.innerText(_soLine.InventDimId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('InventoryLocationId');
        xmlEntry.innerText(_inventDim.InventLocationId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnLineDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(lineDiscount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('LineNumber');
        xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(_soLine.LineNum));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ListingId');
        if (_rsoLine && _rsoLine.ListingId)
        {
            xmlEntry.innerText(_rsoLine.ListingId);
        }
        else
        {
            productId = (select firstOnly Product
            from inventTable
            where inventTable.ItemId == _soLine.ItemId).Product;

            ecoResProduct = EcoResProduct::find(productId);

            if (ecoResProduct != null &&
            !ecoResProduct.isDistinctProduct())
            {
                inventDimParm.setAllProductDimensions();
                _inventDim.clearNotSelectedDim(inventDimParm);
                inventDimId = InventDim::findOrCreate(_inventDim).inventDimId;

                productId = (select firstOnly DistinctProductVariant
                from inventDimCombination
                where inventDimCombination.ItemId == _soLine.ItemId
                    && inventDimCombination.InventDimId == inventDimId).DistinctProductVariant;
            }

            xmlEntry.innerText(int642str(productId));
        }
        listingId = xmlEntry.innerText();
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnLineManualDiscountAmount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_rsoLine.LineManualDiscountAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnLineManualDiscountPercentage);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_rsoLine.LineManualDiscountPercentage));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnPeriodicDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(periodicDiscount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnPeriodicPercentageDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_rsoLine.PeriodicPercentageDiscount));
        xmlRecord.appendChild(xmlEntry);

        //ProductId is a copy of ListingId
        xmlEntry = xmlDoc.createElement('ProductId');
        xmlEntry.innerText(listingId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('QuantityInvoiced');
        xmlEntry.innerText(num2str(_soLine.invoicedInTotal(), 0, 2, 1, 0));
        xmlRecord.appendChild(xmlEntry);

        deliveryAddress = LogisticsPostalAddress::findRecId(_soLine.DeliveryPostalAddress);
        if (deliveryAddress)
        {
            xmlAddress = RetailTransactionServiceTransactionsAX63::fillSalesOrderAddress(deliveryAddress, _soLine.DeliveryName, xmlDoc);
            xmlRecord.appendChild(xmlAddress);
        }

        xmlEntry = xmlDoc.createElement(#ColumnTotalDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(totalDiscount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnTotalPercentageDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_rsoLine.TotalPctDiscount));
        xmlRecord.appendChild(xmlEntry);

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesLineDiscountDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>DiscountLine</c> having the data of the <c>RetailSalesDiscountLine</c> table.
    /// </summary>
    /// <param name="discountLine">
    /// Table buffer of <c>RetailSalesDiscountLine</c> table.
    /// </param>
    /// <param name="retailDiscount">
    /// Table buffer of <c>RetailPeriodicDiscount</c> table.
    /// </param>
    /// <param name="lineNum">
    /// The line number
    /// </param>
    /// <param name="salesQty">
    /// The sales quantity
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionDiscountTrans</c> table.
    /// * Members must be in order of the DiscountLine DataContract
    /// Example:
    ///    <DiscountLine>
    ///      <SaleLineNumber />
    ///      <OfferId />
    ///      <OfferName />
    ///      <DealPrice />
    ///      <Amount />
    ///      <Percentage />
    ///      <EffectiveAmount />
    ///      <Percentage />
    ///      <DiscountLineTypeValue />
    ///      <ManualDiscountTypeValue />
    ///      <CustomerDiscountTypeValue />
    ///      <PeriodicDiscountTypeValue />
    ///      <DiscountApplicationGroup />
    ///      <ConcurrencyModeValue />
    ///      <IsCompoundable />
    ///      <DiscountCode />
    ///      <DiscountCost />
    ///      <IsDiscountCodeRequired />
    ///      <ThresholdAmountRequired />
    ///    </DiscountLine>
    /// </returns>
    private static XmlElement fillSalesLineDiscountDetails(RetailSalesDiscountLine  discountLine,
                                                       RetailPeriodicDiscount   retailDiscount,
                                                       LineNum                  lineNum,
                                                       SalesOrderedQty          salesQty,
                                                       XmlDocument              xmlDoc)
    {
        DiscAmount discountAmount;

        XmlElement xmlRecord, xmlEntry;
        xmlRecord = xmlDoc.createElement('DiscountLine');

        // Backfill discount amount for R2 customer orders.
        discountAmount = discountLine.DiscountAmount;
        if (!discountAmount && !discountLine.Percentage)
        {
            discountAmount = salesQty ? discountLine.Amount / salesQty : 0;
        }

        xmlEntry = xmlDoc.createElement(#ColumnAmount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(discountAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('CustomerDiscountTypeValue');
        xmlEntry.innerText(int2str(discountLine.CustomerDiscountType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnDealPrice);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(discountLine.DealPrice));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('DiscountCode');
        xmlEntry.innerText(discountLine.DiscountCode);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('DiscountCost');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(discountAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('DiscountLineTypeValue');
        xmlEntry.innerText(int2str(discountLine.DiscountOriginType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('EffectiveAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(discountLine.Amount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ManualDiscountTypeValue');
        xmlEntry.innerText(int2str(discountLine.ManualDiscountType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('OfferId');
        xmlEntry.innerText(discountLine.PeriodicDiscountOfferId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('OfferName');
        xmlEntry.innerText(retailDiscount.Name);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnPercentage);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(discountLine.Percentage));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SaleLineNumber');
        xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(lineNum));
        xmlRecord.appendChild(xmlEntry);

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesLineDiscountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>DiscountLine</c> having the data of the <c>RetailTransactionDiscountTrans</c> table.
    /// </summary>
    /// <param name="_discountTrans">
    /// Table buffer of <c>RetailTransactionDiscountTrans</c> table.
    /// </param>
    /// <param name="_retailDiscount">
    /// Table buffer of <c>RetailPeriodicDiscount</c> table.
    /// </param>
    /// <param name="_salesQty">
    /// The sales quantity
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionDiscountTrans</c> table.
    /// * Members must be in order of the DiscountLine DataContract
    /// Example:
    ///    <DiscountLine>
    ///      <SaleLineNumber />
    ///      <OfferId />
    ///      <OfferName />
    ///      <DealPrice />
    ///      <Amount />
    ///      <Percentage />
    ///      <EffectiveAmount />
    ///      <Percentage />
    ///      <DiscountLineTypeValue />
    ///      <ManualDiscountTypeValue />
    ///      <CustomerDiscountTypeValue />
    ///      <PeriodicDiscountTypeValue />
    ///      <DiscountApplicationGroup />
    ///      <ConcurrencyModeValue />
    ///      <IsCompoundable />
    ///      <DiscountCode />
    ///      <DiscountCost />
    ///      <IsDiscountCodeRequired />
    ///      <ThresholdAmountRequired />
    ///    </DiscountLine>
    /// </returns>
    private static XmlElement fillSalesLineDiscountTrans(RetailTransactionDiscountTrans _discountTrans, RetailPeriodicDiscount _retailDiscount, SalesOrderedQty _salesQty, XmlDocument xmlDoc)
    {
        DiscAmount discountAmount;

        XmlElement xmlRecord, xmlEntry;
        xmlRecord = xmlDoc.createElement('DiscountLine');

        // Backfill discount amount for R2 customer orders.
        discountAmount = _discountTrans.DiscountAmount;
        if (!discountAmount && !_discountTrans.Percentage)
        {
            discountAmount = _salesQty ? _discountTrans.Amount / _salesQty : 0;
        }

        // Alphabetical order!!!

        xmlEntry = xmlDoc.createElement(#ColumnAmount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(discountAmount));
        xmlRecord.appendChild(xmlEntry);


        xmlEntry = xmlDoc.createElement('CustomerDiscountTypeValue');
        xmlEntry.innerText(int2Str(_discountTrans.CustomerDiscountType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnDealPrice);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_discountTrans.DealPrice));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('DiscountCode');
        xmlEntry.innerText(_discountTrans.DiscountCode);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('DiscountCost');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_discountTrans.DiscountCost));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('DiscountLineTypeValue');
        xmlEntry.innerText(int2Str(_discountTrans.DiscountOriginType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('EffectiveAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_discountTrans.Amount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ManualDiscountTypeValue');
        xmlEntry.innerText(int2Str(_discountTrans.ManualDiscountType));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('OfferId');
        xmlEntry.innerText(_discountTrans.PeriodicDiscountOfferId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#OfferName);
        xmlEntry.innerText(_retailDiscount.Name);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnPercentage);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(_discountTrans.Percentage));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SaleLineNumber');
        xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(_discountTrans.LineNum));
        xmlRecord.appendChild(xmlEntry);

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesOrderAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>CustomerAddress</c> having the data of the <c>LogisticsPostalAddress</c> table.
    /// </summary>
    /// <param name="_deliveryAddress">
    /// Table buffer of <c>LogisticsPostalAddress</c> table.
    /// </param>
    /// <param name="_deliveryName">
    /// Delivery Name
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>LogisticsPostalAddress</c> table.
    /// * Members must be in order of the CustomerAddress DataContract
    /// Example:
    ///    <ShippingAddress>
    ///      <City />
    ///      <County />
    ///      <Name />
    ///      <DistrictName />
    ///      <State />
    ///      <Street />
    ///      <StreetNumber />
    ///      <ThreeLetterISORegionName />
    ///      <ZipCode />
    ///      <BuildingCompliment />
    ///      <FullAddress />
    ///      <Postbox />
    ///      <RecordId />
    ///    </ShippingAddress>
    /// </returns>
    private static XmlElement fillSalesOrderAddress(LogisticsPostalAddress _deliveryAddress, str _deliveryName, XmlDocument xmlDoc)
    {
        XmlElement xmlAddress, xmlRecord;

        xmlAddress = xmlDoc.createElement('ShippingAddress');

        xmlRecord = xmlDoc.createElement('BuildingCompliment');
        xmlRecord.innerText(_deliveryAddress.BuildingCompliment);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('City');
        xmlRecord.innerText(_deliveryAddress.City);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('County');
        xmlRecord.innerText(_deliveryAddress.County);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('DistrictName');
        xmlRecord.innerText(_deliveryAddress.DistrictName);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('FullAddress');
        xmlRecord.innerText(_deliveryAddress.Address);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Name');
        xmlRecord.innerText(_deliveryName);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Postbox');
        xmlRecord.innerText(_deliveryAddress.PostBox);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('RecordId');
        xmlRecord.innerText(int642str(_deliveryAddress.RecId));
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('State');
        xmlRecord.innerText(_deliveryAddress.State);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Street');
        xmlRecord.innerText(_deliveryAddress.Street);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('StreetNumber');
        xmlRecord.innerText(_deliveryAddress.StreetNumber);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ThreeLetterISORegionName');
        xmlRecord.innerText(_deliveryAddress.CountryRegionId);
        xmlAddress.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ZipCode');
        xmlRecord.innerText(_deliveryAddress.ZipCode);
        xmlAddress.appendChild(xmlRecord);

        return xmlAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesOrderDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a <c>SalesOrder</c> having the data of the <c>SalesTable</c> table.
    /// </summary>
    /// <param name="_salesTable">
    /// Table buffer of <c>SalesTable</c> table.
    /// </param>
    /// <param name="_rsoTable">
    /// Table buffer of <c>RetailSalesTable</c> table.
    /// </param>
    /// <param name="_custTable">
    /// Table buffer of <c>CustTable</c> table.
    /// </param>
    /// <param name="_transactionTable">
    /// Table buffer of <c>RetailTransactionTable</c> table.
    /// </param>
    /// <param name="_includeDetails">
    /// Whether to include line details and order attributes.
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <param name="includeDiscount">
    /// Whether to include the discount details, by default is false
    /// </param>
    /// <param name="_elementName">
    /// Name of the element to be created.
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>SalesTable</c> table.
    /// * Members must be in order of the SalesOrder DataContract
    /// Example:
    ///    <SalesOrder>
    ///      <AttributeValues />
    ///      <ChannelId />
    ///      <ChannelReferenceId />
    ///      <ChargeAmount />
    ///      <ChargeLines />
    ///      <CreatedDateTime />
    ///      <CustomerId />
    ///      <CustomerOrderTypeValue />
    ///      <DeliveryMode />
    ///      <GrossAmount />
    ///      <Id />
    ///      <InventoryLocationId />
    ///      <Name />
    ///      <NetAmountWithNoTax />
    ///      <PrepaymentAmountPaid />
    ///      <ReceiptEmail />
    ///      <ReceiptId />
    ///      <RequestedDeliveryDate />
    ///      <SalesId />
    ///      <SalesLines />
    ///      <ShippingAddress />
    ///      <StaffId />
    ///      <StoreId />
    ///      <SubtotalAmount />
    ///      <TaxAmount />
    ///      <TerminalId />
    ///      <TotalAmount />
    ///      <TotalDiscount />
    ///      <TransactionType />
    ///      <TransactionTypeValue />
    ///      <DocumentStatusValue />
    ///      <OrderPlacedDate />
    ///      <RecordId />
    ///      <Status />
    ///      <StatusValue />
    ///    </SalesOrder>
    /// </returns>
    private static XmlElement fillSalesOrderDetails(SalesTable _salesTable,
                                                RetailSalesTable _rsoTable,
                                                CustTable _custTable,
                                                RetailTransactionTable _transactionTable,
                                                boolean _includeDetails,
                                                XmlDocument xmlDoc,
                                                boolean includeDiscount = false,
                                                str _elementName = #ElementSalesOrder)
    {
        XmlElement          xmlRoot, xmlRecord, xmlContainer;
        SalesTotals         salesTotals;
        AmountCur           totalAmount, totalTaxAmount, totalDiscountAmount, totalChargeAmount, subtotalAmount;
        AmountCur           prepaymentAmountPaid;
        LogisticsPostalAddress  deliveryAddress;
        SalesLine soLine;
        RetailSalesLine rsoLine;
        InventDim inventDim;
        MarkupTrans markupTrans;
        RetailSalesTableInstanceValue   retailSalesTableInstanceValue;
        EcoResAttribute                 ecoResAttribute;
        EcoResAttributeValue            ecoResAttributeValue;
        EcoResTextValue                 ecoResTextValue;
        RetailLoyaltyCard             retailLoyaltyCard;

        salesTotals     = SalesTotals::construct(_salesTable,SalesUpdate::All);
        salesTotals.calc();
        // totalAmount is the sales order balance due amount + previously invoiced amounts
        totalAmount     = salesTotals.totalAmount() + _salesTable.amountInvoiced();
        totalTaxAmount   = salesTotals.totalTaxAmount() + _salesTable.taxAmountInvoiced();
        totalDiscountAmount = salesTotals.totalLineDisc() + _salesTable.lineDiscInvoiced();
        totalChargeAmount = salesTotals.totalMarkup() + _salesTable.markupInvoiced();

        xmlRoot = xmlDoc.createElement(_elementName);

        if (_includeDetails)
        {
            xmlContainer = xmlDoc.createElement('AttributeValues');

            //Add attributes
            retailSalesTableInstanceValue = RetailSalesTableInstanceValue::findBySalesTable(_salesTable.SalesId, _salesTable.DataAreaId);
            // if this sales order has any attributes
            if ( retailSalesTableInstanceValue)
            {
                //Get all attributes (Name and Text value) for this sales order
                while select * from ecoResAttributeValue where ecoResAttributeValue.InstanceValue == retailSalesTableInstanceValue.RecId
                join Name from ecoResAttribute where ecoResAttribute.RecId == ecoResAttributeValue.Attribute
                    join TextValue from ecoResTextValue where ecoResTextValue.RecId == ecoResAttributeValue.Value
                {
                    xmlRecord = xmlDoc.createElement('AttributeTextValue');
                    xmlRecord.setAttribute('Name', ecoResAttribute.Name);
                    xmlRecord.setAttribute('TextValue', ecoResTextValue.TextValue);
                    xmlRoot.appendChild(xmlRecord);
                }
            }

            xmlRoot.appendChild(xmlContainer);
        }

        xmlRecord = xmlDoc.createElement('ChannelId');
        xmlRecord.innerText(int642str(_rsoTable.RetailChannel));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ChannelReferenceId');
        xmlRecord.innerText(_rsoTable.ChannelReferenceId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ChargeAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalChargeAmount));
        xmlRoot.appendChild(xmlRecord);

        if (_includeDetails)
        {
            xmlContainer = xmlDoc.createElement('ChargeLines');

            //Add header level charges
            while select * from markupTrans
            where markupTrans.TransTableId == _salesTable.TableId
            && markupTrans.TransRecId == _salesTable.RecId
            {
                xmlRecord = RetailTransactionServiceTransactionsAX63::fillMarkupTrans(markupTrans, xmlDoc);
                xmlRoot.appendChild(xmlRecord);
            }

            xmlRoot.appendChild(xmlContainer);
        }

        xmlRecord = xmlDoc.createElement('CustomerId');
        xmlRecord.innerText(_salesTable.CustAccount);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CustomerOrderTypeValue');
        xmlRecord.innerText(int2str(RetailCustomerOrderType::Salesorder));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('DeliveryMode');
        xmlRecord.innerText(_salesTable.DlvMode);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('GrossAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Id');
        if (_transactionTable)
        {
            xmlRecord.innerText(_transactionTable.TransactionId);
        }
        else
        {
            xmlRecord.innerText(' ');
        }
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('InventoryLocationId');
        xmlRecord.innerText(_salesTable.InventLocationId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('LoyaltyCardId');
        retailLoyaltyCard = RetailLoyaltyCard::find(_rsoTable.RetailLoyaltyCard);
        xmlRecord.innerText(retailLoyaltyCard.CardNumber);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Name');
        if (_custTable.name() != '')
        {
            xmlRecord.innerText(_custTable.name());
        }
        else
        {
            xmlRecord.innerText(_salesTable.SalesName);
        }
        xmlRoot.appendChild(xmlRecord);

        if (_transactionTable)
        {
            xmlRecord = xmlDoc.createElement('NetAmountWithNoTax');
            xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(_transactionTable.netAmount * -1));
            xmlRoot.appendChild(xmlRecord);

            xmlRecord = xmlDoc.createElement('NetAmountWithTax');
            xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalAmount));
            xmlRoot.appendChild(xmlRecord);
        }

        // total invoice amounts paid
        prepaymentAmountPaid = RetailPrePaymentTrans::paymentsMade(_salesTable.SalesId);

        xmlRecord = xmlDoc.createElement('PrepaymentAmountPaid');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(prepaymentAmountPaid));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ReceiptEmail');
        xmlRecord.innerText(_salesTable.Email);
        xmlRoot.appendChild(xmlRecord);

        if (_transactionTable)
        {
            xmlRecord = xmlDoc.createElement('ReceiptId');
            xmlRecord.innerText(_transactionTable.ReceiptId);
            xmlRoot.appendChild(xmlRecord);
        }

        if (_salesTable.ReceiptDateRequested)
        {
            xmlRecord = xmlDoc.createElement('RequestedDeliveryDate');
            xmlRecord.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
            xmlRecord.innerXml(RetailTransactionServiceUtilities::dateToDateTimeStringWithOffset(_salesTable.ReceiptDateRequested, _rsoTable.RetailChannel));
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('SalesId');
        xmlRecord.innerText(_salesTable.SalesId);
        xmlRoot.appendChild(xmlRecord);

        xmlContainer = xmlDoc.createElement('SalesLines');

        if (_includeDetails)
        {
            while select * from soLine
            join inventDim where soLine.SalesId == _salesTable.SalesId
                && inventDim.InventDimId == soLine.InventDimId
            outer join rsoLine where rsoLine.SalesLine == soLine.RecId
            {
                xmlRecord = RetailTransactionServiceTransactionsAX63::fillSalesLineDetails(soLine, rsoLine, inventDim, xmlDoc, includeDiscount);
                xmlContainer.appendChild(xmlRecord);
            }
        }

        xmlRoot.appendChild(xmlContainer);

        if (_includeDetails)
        {
            deliveryAddress = LogisticsPostalAddress::findRecId(_salesTable.DeliveryPostalAddress);
            if (deliveryAddress)
            {
                xmlRecord = RetailTransactionServiceTransactionsAX63::fillSalesOrderAddress(deliveryAddress, _salesTable.DeliveryName, xmlDoc);
                xmlRoot.appendChild(xmlRecord);
            }
        }

        if (_transactionTable)
        {
            xmlRecord = xmlDoc.createElement('StaffId');
            xmlRecord.innerText(_transactionTable.Staff);
            xmlRoot.appendChild(xmlRecord);

            xmlRecord = xmlDoc.createElement('StoreId');
            xmlRecord.innerText(_transactionTable.Store);
            xmlRoot.appendChild(xmlRecord);

            subtotalAmount = RetailTransactionServiceTransactionsAX63::getTransactionSubtotalAmount(
            _transactionTable.TransactionId,
            _transactionTable.DataAreaId,
            _transactionTable.Channel,
            _transactionTable.Terminal);

            xmlRecord = xmlDoc.createElement('SubtotalAmount');
            xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(subtotalAmount * -1));
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('TaxAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalTaxAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TenderLines');
        xmlRecord = RetailTransactionServiceTransactionsAX63::fillPaymentHistoryDetails(_salesTable.SalesId, xmlRecord, xmlDoc);
        xmlRoot.appendChild(xmlRecord);

        if (_transactionTable)
        {
            xmlRecord = xmlDoc.createElement('TerminalId');
            xmlRecord.innerText(_transactionTable.Terminal);
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('TotalAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TotalDiscount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(totalDiscountAmount));
        xmlRoot.appendChild(xmlRecord);


        if (_salesTable.SalesId != "")
        {
            // Assume it is a customer order
            xmlRecord = xmlDoc.createElement('TransactionType');
            xmlRecord.innerText(enum2str(RetailTransactionType::CustomerOrder));
            xmlRoot.appendChild(xmlRecord);

            xmlRecord = xmlDoc.createElement('TransactionTypeValue');
            xmlRecord.innerText(int2str(enum2int(RetailTransactionType::CustomerOrder)));
            xmlRoot.appendChild(xmlRecord);
        }
        else
        {
            xmlRecord = xmlDoc.createElement('TransactionType');
            xmlRecord.innerText(enum2str(RetailTransactionType::PendingSalesOrder));
            xmlRoot.appendChild(xmlRecord);

            xmlRecord = xmlDoc.createElement('TransactionTypeValue');
            xmlRecord.innerText(int2str(enum2int(RetailTransactionType::PendingSalesOrder)));
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('DocumentStatusValue');
        xmlRecord.innerText(int2str(enum2int(_salesTable.DocumentStatus)));
        xmlRoot.appendChild(xmlRecord);

        if (_salesTable.createdDateTime)
        {
            xmlRecord = xmlDoc.createElement('OrderPlacedDate');
            xmlRecord.setAttribute(#dateTimeOffsetXmlNsKey, #dateTimeOffsetXmlNsValue);
            xmlRecord.innerXml(RetailTransactionServiceUtilities::utcDateTimeToDateTimeStringWithOffset(_salesTable.CreatedDateTime));
            xmlRoot.appendChild(xmlRecord);
        }

        xmlRecord = xmlDoc.createElement('RecordId');
        xmlRecord.innerText(int642str(_salesTable.RecId));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Status');
        xmlRecord.innerText(enum2str(_salesTable.SalesStatus));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('StatusValue');
        xmlRecord.innerText(int2str(RetailTransactionServiceTransactionsAX63::ConvertSalesStatusToRetailSalesStatus(_salesTable.SalesStatus)));
        xmlRoot.appendChild(xmlRecord);

        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesTransDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a list of <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="transactionSalesTrans">
    /// Table buffer of <c>RetailTransactionSalesTrans</c> table.
    /// </param>
    /// <param name="xmlDoc">
    /// XmlDocument
    /// </param>
    /// <param name="includeDiscount">
    /// Whether to include the discount details, by default is false
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionSalesTrans</c> table.
    /// * Members must be in order of the SalesLine DataContract
    /// Example:
    ///    <SalesLine>
    ///      <ItemId />
    ///      <ItemTaxGroupId />
    ///      <NetAmount />
    ///      <Price />
    ///      <Quantity />
    ///      <SalesOrderUnitOfMeasure />
    ///      <SalesTaxGroupId />
    ///      <TaxAmount />
    ///      <DiscountAmount />
    ///      <LineDiscount />
    ///      <LineNumber />
    ///      <ListingId />
    ///      <PeridicDiscount />
    ///      <ReturnQuantity />
    ///      <Store />
    ///      <TerminalId />
    ///      <StatusValue />
    ///      <TotalDiscount />
    ///      <TotalPercentageDiscount />
    ///      <VariantInventoryDimensionId />
    ///    </SalesLine>
    /// </returns>
    private static XmlElement fillSalesTransDetails(RetailTransactionSalesTrans transactionSalesTrans, XmlDocument xmlDoc, Boolean includeDiscount = false)
    {
        XmlElement xmlEntry,xmlRecord,xmlContainer;
        RetailTransactionDiscountTrans  discountTrans;
        InventDimCombination inventDimComb;
        InventTable inventTable;
        str listingId;

        RetailPeriodicDiscount retailDiscount;

        boolean hasLineDiscountLines = false;
        boolean hasTotalDiscountLines = false;
        boolean hasPeriodicDiscountLines = false;

        xmlRecord = xmlDoc.createElement('SalesLine');

        // DataContractSerializer requires fields to be ordered (base types first, alphabetic)

        // TaxableItem fields

        xmlEntry = xmlDoc.createElement('ItemId');
        xmlEntry.innerText(transactionSalesTrans.itemId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ItemTaxGroupId');
        xmlEntry.innerText(transactionSalesTrans.TaxItemGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('NetAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.NetAmount * -1));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('NetAmountWithAllInclusiveTax');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.NetAmountInclTax * -1));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Price');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.Price));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Quantity');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.Qty * -1));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SalesOrderUnitOfMeasure');
        xmlEntry.innerText(transactionSalesTrans.Unit);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SalesTaxGroupId');
        xmlEntry.innerText(transactionSalesTrans.TaxGroup);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('TaxAmount');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.TaxAmount * -1));
        xmlRecord.appendChild(xmlEntry);

        // SalesLine fields
        xmlEntry = xmlDoc.createElement('Comment');
        xmlEntry.innerText(transactionSalesTrans.comment);
        xmlRecord.appendChild(xmlEntry);

        if (includeDiscount)
        {
            xmlContainer = xmlDoc.createElement('DiscountLines');
            // Add discount data
            while select discountTrans
            where discountTrans.SaleLineNum == transactionSalesTrans.lineNum
            && discountTrans.TransactionId == transactionSalesTrans.transactionId
            && discountTrans.TerminalId == transactionSalesTrans.terminalId
            && discountTrans.StoreId == transactionSalesTrans.store
        outer join Name from retailDiscount
            where discountTrans.PeriodicDiscountOfferId
                && retailDiscount.OfferId == discountTrans.PeriodicDiscountOfferId
            {
                // Fill in discount data
                xmlEntry = RetailTransactionServiceTransactionsAX63::fillSalesLineDiscountTrans(discountTrans, retailDiscount, transactionSalesTrans.qty, xmlDoc);
                xmlContainer.appendChild(xmlEntry);

                if (discountTrans.DiscountOriginType == RetailDiscountOriginType::Periodic)
                {
                    hasPeriodicDiscountLines = true;
                }
                else if (discountTrans.DiscountOriginType == RetailDiscountOriginType::Customer)
                {
                    if (discountTrans.CustomerDiscountType != RetailCustomerDiscountType::TotalDiscount)
                    {
                        hasLineDiscountLines = true;
                    }
                    else
                    {
                        hasTotalDiscountLines = true;
                    }
                }
                else if (discountTrans.DiscountOriginType == RetailDiscountOriginType::Manual)
                {
                    if (discountTrans.ManualDiscountType == RetailManualDiscountType::LineDiscountAmount ||
                    discountTrans.ManualDiscountType == RetailManualDiscountType::LineDiscountPercent)
                    {
                        hasLineDiscountLines = true;
                    }
                    else
                    {
                        hasTotalDiscountLines = true;
                    }
                }
            }

            // Backfill periodic discount transaction.
            retailDiscount.clear();
            if (transactionSalesTrans.periodicDiscAmount && !hasPeriodicDiscountLines)
            {
                discountTrans = RetailTransactionServiceTransactionsAX63::backfillDiscountTrans(transactionSalesTrans, true, false, false);
                xmlEntry = RetailTransactionServiceTransactionsAX63::fillSalesLineDiscountTrans(discountTrans, retailDiscount, transactionSalesTrans.qty, xmlDoc);
                xmlContainer.appendChild(xmlEntry);
            }

            // Backfill customer line discount transaction.
            if (transactionSalesTrans.lineDscAmount && !hasLineDiscountLines)
            {
                discountTrans = RetailTransactionServiceTransactionsAX63::backfillDiscountTrans(transactionSalesTrans, false, true, false);
                xmlEntry = RetailTransactionServiceTransactionsAX63::fillSalesLineDiscountTrans(discountTrans, retailDiscount, transactionSalesTrans.qty, xmlDoc);
                xmlContainer.appendChild(xmlEntry);
            }

            // Backfill customer total discount transaction.
            if (transactionSalesTrans.totalDiscAmount && !hasTotalDiscountLines)
            {
                discountTrans = RetailTransactionServiceTransactionsAX63::backfillDiscountTrans(transactionSalesTrans, false, false, true);
                xmlEntry = RetailTransactionServiceTransactionsAX63::fillSalesLineDiscountTrans(discountTrans, retailDiscount, transactionSalesTrans.qty, xmlDoc);
                xmlContainer.appendChild(xmlEntry);
            }

            xmlRecord.appendChild(xmlContainer);
        }

        xmlEntry = xmlDoc.createElement('IsGiftCardLine');
        xmlEntry.innerText(int2str(transactionSalesTrans.giftcard));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnLineDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.LineDscAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnLineManualDiscountAmount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.LineManualDiscountAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnLineManualDiscountPercentage);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.LineManualDiscountPercentage));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('LineNumber');
        xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(transactionSalesTrans.LineNum));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ListingId');
        if (transactionSalesTrans.ListingId != '')
        {
            xmlEntry.innerText(transactionSalesTrans.ListingId);
        }
        else if (transactionSalesTrans.VariantId)
        {
            select firstonly DistinctProductVariant from inventDimComb
            where inventDimComb.ItemId == transactionSalesTrans.ItemId
            && inventDimComb.RetailVariantId == transactionSalesTrans.VariantId
            && inventDimComb.DataAreaId == transactionSalesTrans.DataAreaId;
            xmlEntry.innerText(inventDimComb.DistinctProductVariant ? int642str(inventDimComb.DistinctProductVariant) : '0');
        }
        else
        {
            select firstonly Product from inventTable
            where inventTable.ItemId == transactionSalesTrans.ItemId
            && inventTable.DataAreaId == transactionSalesTrans.DataAreaId;
            xmlEntry.innerText(inventTable.Product ? int642str(inventTable.Product) : '0');
        }
        listingId = xmlEntry.innerText();
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnPeriodicDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.PeriodicDiscAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnPeriodicPercentageDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.PeriodicPercentageDiscount));
        xmlRecord.appendChild(xmlEntry);

        //ProductId is a copy of ListingId
        xmlEntry = xmlDoc.createElement('ProductId');
        xmlEntry.innerText(listingId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('ReturnQuantity');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.ReturnQty * -1));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('SerialNumber');
        xmlEntry.innerText(transactionSalesTrans.InventSerialId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('StaffId');
        xmlEntry.innerText(transactionSalesTrans.staffId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('StatusValue');
        xmlEntry.innerText(int2str(enum2int(RetailEntryStatus::None)));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('Store');
        xmlEntry.innerText(transactionSalesTrans.store);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('TerminalId');
        xmlEntry.innerText(transactionSalesTrans.terminalId);
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnTotalDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.TotalDiscAmount));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement(#ColumnTotalPercentageDiscount);
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.TotalDiscPct));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('UnitQuantity');
        xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.UnitQty * -1));
        xmlRecord.appendChild(xmlEntry);

        xmlEntry = xmlDoc.createElement('VariantInventoryDimensionId');
        xmlEntry.innerText(transactionSalesTrans.VariantId);
        xmlRecord.appendChild(xmlEntry);

        return xmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArrayOfSalesOrderXmlRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an ArrayOfSalesOrder root element for use in result collections from transaction service APIs.
    /// </summary>
    /// <param name = "_doc"><c>XmlDocument</c> that the root element is to be created for.</param>
    /// <returns><c>XmlElement</c> for an ArrayOfSalesOrder collection.</returns>
    private static XmlElement getArrayOfSalesOrderXmlRoot(XmlDocument _doc)
    {
        XmlElement xmlRoot = _doc.createElement('ArrayOfSalesOrder');
        xmlRoot.setAttribute('xmlns', 'http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Commerce.Runtime.DataModel');
        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewXmlDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a new XmlDocument instance.
    /// </summary>
    /// <returns><c>XmlDocument</c> compatible with transaction service API.</returns>
    private static XmlDocument getNewXmlDoc()
    {
        return XmlDocument::newBlank('utf-16LE');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderHistoryList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the history of all transactions and orders for a given customer.
    /// </summary>
    /// <param name="_xmlArgumentString">
    /// XML document containing the arguments for the method call.  See remarks for example.
    /// </param>
    /// <returns>
    /// Collection of orders.
    ///     <ArrayOfSalesOrder>
    ///         <SalesOrder />
    ///     </ArrayOfSalesOrder>
    /// </returns>
    /// <remarks>
    /// Argument xml example:
    ///     <Arguments>
    ///         <CustomerAccountNumber>"1234"</CustomerAccountNumber>
    ///         <IncludeDetails>"true"</IncludeDetails>
    ///         <PagingInfo>
    ///             <Skip>1</Skip>
    ///             <Top>100</Top>
    ///         </PagingInfo>
    ///     </Arguments>
    /// </remarks>
    public static container getOrderHistoryList(str _xmlArgumentString = '')
    {
        // arguments
        XmlDocument         argsXml;
        XmlElement          argsRoot;
        CustAccount         custAccount;
        boolean             includeDetails;
        int                 resultsStartingPosition = 1;
        int                 resultsMaxCount = 100;

        // query filtering
        utcDateTime                 startDateTime = DateTimeUtil::minValue();
        TransDate                   startDate = DateTimeUtil::date(startDateTime);
        utcDateTime                 endDateTime = DateTimeUtil::maxValue();
        TransDate                   endDate = DateTimeUtil::date(endDateTime);
        RetailTransactionTable      transactionTable;
        SalesTable                  salesTable;
        SalesQuotationTable         quoteTable;
        DirPartyTable               partyTable;
        boolean                     results = false;
        boolean                     includeDiscountLines = includeDetails;
        boolean                     includeCustomerOrder = false;
        List                transactionXmlList = new List(Types::Class);
        ListEnumerator      enumerator;

        // output
        container           output = [true,''];
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot, xmlTrans;

        //
        // Helper methods
        //

        // Get the string value of an XML element argument.
        str getArg(str argName)
        {
            xmlRoot = argsRoot.getNamedElement(argName);
            if (xmlRoot != null)
            {
                return xmlRoot.text();
            }
            return '';
        }

        //
        // Main body
        //

        // Parse the arguments
        argsXml   = new XmlDocument();
        argsXml.loadXml(_xmlArgumentString);
        argsRoot = argsXml.documentElement();

        custAccount = getArg('CustomerAccountNumber');
        includeDetails = ('true' == getArg('IncludeDetails'));

        // Get paging details
        [resultsStartingPosition, resultsMaxCount] = RetailTransactionServiceTransactionsAX63::parsePagingInfo(argsXml);

        // Prepare the result xml document
        xmlDoc = XmlDocument::newBlank('utf-16LE');
        xmlRoot = xmlDoc.createElement('ArrayOfSalesOrder');
        xmlRoot.setAttribute('xmlns', 'http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Commerce.Runtime.DataModel');

        // Basic union query structure...
        //RetailTransactionTable where
        // rtt.custAccount == custAccount && rtt.type != CustomerOrder
        //
        //SalesTable
        // inner join RetailSalesTable on st.SalesId == rst.SalesTable
        //
        //SalesQuotationTable
        // inner join RetailSalesQuotationTable on sqt.QuotationId == rsqt.SalesQuotationTable

        // get the query
        var q = new RetailOrderHistoryQuery(custAccount);
        q.addPageRange(resultsStartingPosition, resultsMaxCount);

        while (q.moveNext())
        {
            results = true;

            int historySource;
            int64 orderRecId;

            [historySource, orderRecId] = q.get();

            switch (historySource)
            {
                case tableNum(RetailTransactionTable):
                    //if Transaction
                    select * from transactionTable where transactionTable.recid == orderRecId;
                    RetailTransactionServiceTransactionsAX63::addTransactionToResultMap(
                    transactionXmlList, xmlDoc,
                    transactionTable,
                    partyTable,
                    includeDetails,
                    true,
                    #ElementSalesOrder);
                    break;

                case tableNum(SalesTable):
                    //if Sales Order
                    salesTable = salesTable::findRecId(orderRecId);
                    RetailTransactionServiceTransactionsAX63::addSalesOrderToResultMap(
                    transactionXmlList, xmlDoc,
                    salesTable,
                    partyTable,
                    includeDetails,
                    true,
                    #ElementSalesOrder);
                    break;

                case tableNum(SalesQuotationTable):
                    //if Sales Quote
                    quoteTable = SalesQuotationTable::findRec(orderRecId);
                    RetailTransactionServiceTransactionsAX63::addSalesQuoteToResultMap(
                    transactionXmlList, xmlDoc,
                    quoteTable,
                    partyTable,
                    includeDetails,
                    true,
                    #ElementSalesOrder);
                    break;
            }
        }

        enumerator = transactionXmlList.getEnumerator();
        while (enumerator.MoveNext())
        {
            xmlTrans = enumerator.current();
            xmlRoot.appendChild(xmlTrans);
        }

        xmlDoc.appendChild(xmlRoot);
        output = [true, '', xmlDoc.toString()];

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSubtotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subtotal amount for a sales transaction.
    /// </summary>
    /// <param name="_transactionId">
    /// The identifier of the transaction.
    /// </param>
    /// <param name="_dataAreaId">
    /// The identifier of the data area.
    /// </param>
    /// <param name="_channelId">
    /// The identifier of the channel.
    /// </param>
    /// <param name="_terminalId">
    /// The identifier of the terminal.
    /// </param>
    /// <returns>
    /// The subtotal amount for a sales transaction.
    /// </returns>
    private static AmountCur getTransactionSubtotalAmount(RetailTransactionId _transactionId,
                                                 DataAreaId          _dataAreaId,
                                                 RetailChannelRecId  _channelId,
                                                 RetailTerminalId    _terminalId)
    {
        RetailTransactionSalesTrans salesTrans;
        AmountCur                   subtotalAmount = 0.0;

        if (_transactionId && _dataAreaId && _channelId)
        {
            select sum(NetAmount)
            from salesTrans
            where salesTrans.TransactionId == _transactionId
                && salesTrans.DataAreaId == _dataAreaId
                && salesTrans.Channel == _channelId
                && (salesTrans.Terminalid == _terminalId || _terminalId == '')
                && salesTrans.TransactionStatus != RetailEntryStatus::Voided;    // Exclude the voided line

            subtotalAmount = salesTrans.netAmount;
        }

        return subtotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsePagingInfo</Name>
				<Source><![CDATA[
    private static container parsePagingInfo(XmlDocument _pagingElement)
    {
        XmlElement node, root;
        int64 recordSkip = #resultsDefaultSkip;
        int64 recordCount = #resultsCountOfTransaction;

        root = _pagingElement.documentElement().getNamedElement('PagingInfo');

        node = root.getNamedElement('Skip');
        if (node != null)
        {
            recordSkip = str2int(node.text());
            if (recordSkip <= 0)
            {
                recordSkip = #resultsDefaultSkip;
            }
            else
            {
                //Translate "skip" to AX 1-based starting position.
                recordSkip = recordSkip + 1;
            }
        }

        node = root.getNamedElement('Top');
        if (node != null)
        {
            recordCount = str2int(node.text());
        }

        return [recordSkip, recordCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchOrderList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns a list of retail transactions that match the passed in criteria.
    /// </summary>
    /// <param name="_transactionId">
    /// TransactionID to match against the RetailTransactionTable.TransactionId field.
    /// </param>
    /// <param name="_salesId">
    /// SalesID to match against the SalesTable.SalesId field.
    /// </param>
    /// <param name="_receiptId">
    /// ReceiptID to match against the RetailTransactionTable.ReceiptId field.
    /// </param>
    /// <param name="_channelRefId">
    /// Channel Reference ID to match against the SalesOrder.ChannelReferenceId field.
    /// </param>
    /// <param name="_custAccount">
    /// Customer Account Number to match against the RetailTransactionTable.CustAccount field.
    /// </param>
    /// <param name="_custFirstName">
    /// First name of customer who is linked to the RetailTransactionTable.
    /// </param>
    /// <param name="_custLastName">
    /// Last name of customer who is linked to the RetailTransactionTable.
    /// </param>
    /// <param name="_storeId">
    /// StoreId to match against the RetailTransactionTable.Store field.
    /// </param>
    /// <param name="_terminalId">
    /// TerminalId to match against the RetailTransactionTable.Terminal field.
    /// </param>
    /// <param name="_itemId">
    /// ItemId to match against the RetailTransactionSalesTrans.ItemId field.
    /// </param>
    /// <param name="_barcode">
    /// Barcode to match against the RetailTransactionSalesTrans.Barcode field.
    /// </param>
    /// <param name="_staffId">
    /// StaffId to match against the RetailTransactionTable.Staff field.
    /// </param>
    /// <param name="_startDate">
    /// RetailTransactionTable.TransDate field greater than or equal to startDate.
    /// </param>
    /// <param name="_endDate">
    /// RetailTransactionTable.TransDate field less than or equal to endDate.
    /// </param>
    /// <param name="_includeDetails">
    /// Whether to include all order information including order lines and attributes.
    /// </param>
    /// <param name="_receiptEmailAddress">
    /// ReceiptEmailAddress to match against the RetailTransactionTable.ReceiptEmail field.
    /// </param>
    /// <param name="_seachIdentifiers">
    /// SeachIdentifiers to math against the RetailTransactionTable with the following fields
    /// TransactionId
    /// ReceiptId
    /// SalesId
    /// CustomerAccount
    /// ChannelRefId
    /// </param>
    /// <param name="_resultsMaxCount">
    /// The maximum amount of rows to return (default is 20).
    /// </param>
    /// <param name="_retailTransactionTypes">
    /// Transaction types to be returned.
    /// </param>
    /// <param name="_serialNumber">
    /// SerialNumber to match against the RetailTransactionSalesTrans.InventSerialId field.
    /// </param>
    /// <param name="_transactionStatusTypes">
    /// Transaction's entry status to match against the RetailTransactionTable.EntryStatus field.
    /// </param>
    /// <param name="_includeNonTransactions">
    /// Whether or not to include non-transaction records (ie, records from SalesTable).  TRUE by default.
    /// </param>
    /// <returns>
    /// A list of orders that match all of the criteria parameters.
    /// </returns>
    /// <remarks>
    /// This method is deprecated for 7.0 and up, and it's being kept only to support 6.3.
    /// </remarks>
    public static container searchOrderList(RetailTransactionId _transactionId,
                                            SalesId _salesId,
                                            RetailReceiptId _receiptId,
                                            RetailOrderChannelReferenceId _channelRefId,
                                            CustAccount _custAccount,
                                            str _custFirstName,
                                            str _custLastName,
                                            RetailStoreId _storeId,
                                            RetailTerminalId _terminalId,
                                            RetailItemId _itemId,
                                            RetailBarcode _barcode,
                                            RetailStaffId _staffId,
                                            str _startDate,
                                            str _endDate,
                                            boolean _includeDetails,
                                            RetailReceiptEmail _receiptEmailAddress = '',
                                            String50 _seachIdentifiers = '',
                                            int _resultsMaxCount = #resultsCountOfTransaction,
                                            str _retailTransactionTypes = '',
                                            InventSerialId _serialNumber = '',
                                            str _transactionStatusTypes = '',
                                            boolean _includeNonTransactions = true)
    {
        RetailTransactionTable                 transactionTable;
        RetailTransactionTaxTrans              taxTable;
        RetailTransactionMarkupTrans           chargeTable;
        RetailTransactionSalesTrans            transactionSalesTable;
        RetailTransactionSalesTrans            salesLineExistsTable;
        CustTable                              customerTable;
        DirPartyTable                          partyTable;
        SalesTable              salesTable;
        SalesLine               salesLineTable;
        RetailSalesTable        rsoTable;
        RetailSalesQuotationTable rsqTable;
        int resultsCount;
        boolean foundByChannelReferenceId;

        container           output = [true,''];
        utcDateTime         startDateTime = DateTimeUtil::minValue();
        TransDate           startDate = DateTimeUtil::date(startDateTime);
        utcDateTime         endDateTime = DateTimeUtil::maxValue();
        TransDate           endDate = DateTimeUtil::date(endDateTime);
        CustName            custName = '';
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot, xmlTrans, xmlItems;
        Map                 transactionXmlMap = new Map(Types::String, Types::Class);
        Map                 salesOrderXmlMap = new Map(Types::String, Types::Class);
        MapEnumerator       enumerator;
        boolean             results = false;
        Set                 foundSalesOrders = new Set(Types::String);
        CustInvoiceJour     custInvoiceJour;
        TmpRecIdFilter      tmpRecIdFilter;
        TmpRecIdFilter      tmpRecIdFilterDuplicateCheck;
        SalesQuotationTable salesQuotationTable;
        Map                 quoteXmlMap = new Map(Types::String, Types::Class);
        Set                 transactionTypesSet = new Set(Types::Integer);
        ListEnumerator      transactionTypesListEnumerator;
        boolean             filterByTransactionType = true;
        boolean             includeDiscountLines = (_receiptId || _channelRefId || _salesId || _transactionId);
        container           transactionStatusTypes = str2con(_transactionStatusTypes, ',');
        boolean             filterByTransactionStatusType = (_transactionStatusTypes != '') && (conLen(transactionStatusTypes) > 0) ? true : false;
        boolean             includeCustomerOrder = false;

        //
        // Main method body
        //

        if (_custFirstName != '' || _custLastName != '')
        {
            custName = _custFirstName + '*' + _custLastName;
        }

        if (_startDate)
        {
            startDateTime =  DateTimeUtil::parse(_startDate);
            startDate = DateTimeUtil::date(startDateTime);
        }

        if (_endDate)
        {
            endDateTime = DateTimeUtil::parse(_endDate);
            endDate = DateTimeUtil::date(endDateTime);
        }

        transactionTypesListEnumerator = strSplit(_retailTransactionTypes, ',').getEnumerator();
        while (transactionTypesListEnumerator.moveNext())
        {
            transactionTypesSet.add(str2int(transactionTypesListEnumerator.current()));
        }

        if (_retailTransactionTypes == "" || transactionTypesSet.empty() || transactionTypesSet.in(-1)) // -1 means None filter is included
        {
            filterByTransactionType = false;
            includeCustomerOrder = true;
        }
        else if (transactionTypesSet.in(RetailTransactionType::CustomerOrder)
                || transactionTypesSet.in(RetailTransactionType::AsyncCustomerOrder)
                || transactionTypesSet.in(RetailTransactionType::AsyncCustomerQuote))
        {
            includeCustomerOrder = true;
        }

        xmlDoc = RetailTransactionServiceTransactionsAX63::getNewXmlDoc();
        xmlRoot = RetailTransactionServiceTransactionsAX63::getArrayOfSalesOrderXmlRoot(xmlDoc);

        //
        // Search without cusotmer
        //
        if (custName == '')
        {
            // Query for sales orders (if required)
            if (_includeNonTransactions)
            {
                
                while select Channel, TransactionId, ReceiptId, Store, Terminal, Staff, TransDate, TransTime, CustAccount, NetAmount, Shift, PaymentAmount,
                    SalesOrderId, ChannelReferenceId, GrossAmount, DiscAmount, TotalDiscAmount, EntryStatus, LoyaltyCardId, ReceiptEmail, Type, CreatedDateTime
                    from transactionTable
                    order by CreatedDateTime desc
                    where (_receiptId == '' || transactionTable.ReceiptId == _receiptId)
                    && (_transactionId == '' || transactionTable.transactionId == _transactionId)
                    && (_channelRefId == '' || transactionTable.ChannelReferenceId == _channelRefId)
                    && (_salesId == '' || transactionTable.SalesOrderId == _salesId)
                    && (_receiptEmailAddress == '' || transactionTable.receiptEmail == _receiptEmailAddress)
                    && (_seachIdentifiers == '' ||
                        transactionTable.transactionId == _seachIdentifiers ||
                        transactionTable.ReceiptId == _seachIdentifiers ||
                        transactionTable.SalesOrderId == _seachIdentifiers ||
                        transactionTable.custAccount == _seachIdentifiers ||
                        transactionTable.ChannelReferenceId == _seachIdentifiers)
                    && (_storeId == '' || transactionTable.Store == _storeId)
                    && (_terminalId == '' || transactionTable.Terminal == _terminalId)
                    && (_staffId == '' || transactionTable.Staff == _staffId)
                    && transactionTable.TransDate >= startDate
                    && transactionTable.TransDate <= endDate
                    && (_custAccount == '' || transactionTable.custAccount == _custAccount)
                    join salesTable
                    where transactionTable.salesOrderId == salesTable.SalesId
                       && (_salesId == '' || salesTable.SalesId == _salesId)
                       && (_custAccount == '' || transactionTable.CustAccount == salesTable.CustAccount)
                       && salesTable.SalesType == SalesType::Sales
                    outer join customerTable
                    where transactionTable.CustAccount == customerTable.AccountNum
                    outer join rsoTable
                    where salesTable.RecId == rsoTable.SalesTable
                       && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                    exists join salesLineExistsTable
                    where transactionTable.TransactionId == salesLineExistsTable.TransactionId
                        && transactionTable.Channel == salesLineExistsTable.Channel
                        && transactionTable.Store == salesLineExistsTable.Store
                        && transactionTable.Terminal == salesLineExistsTable.Terminalid
                        && transactionTable.DataAreaId == salesLineExistsTable.DataAreaId
                        && (_itemId == '' || salesLineExistsTable.ItemId == _itemId)
                        && (_barcode == '' || salesLineExistsTable.Barcode == _barcode)
                        && (_serialNumber == '' || salesLineExistsTable.InventSerialId == _serialNumber)
                {
                    if (resultsCount < _resultsMaxCount)
                    {
                        if (foundSalesOrders.in(salesTable.SalesId) == false
                        && (!filterByTransactionType || transactionTypesSet.in(transactionTable.Type))
                        && (!filterByTransactionStatusType || confind(TransactionStatusTypes, transactionTable.entryStatus) != 0))
                        {
                            salesOrderXmlMap.insert(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel), RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, transactionTable, _includeDetails, xmlDoc, includeDiscountLines));
                            foundSalesOrders.add(salesTable.SalesId);
                            resultsCount++;
                        }
                    }
                    else
                    {
                        break;
                    }
                }
            }
            //end if (_includeNonTransactions)

            // Query for transactions
            while select Channel, TransactionId, ReceiptId, Store, Terminal, Staff, TransDate, TransTime, CustAccount, NetAmount, Shift, PaymentAmount,
                SalesOrderId, ChannelReferenceId, GrossAmount, DiscAmount, TotalDiscAmount, EntryStatus, LoyaltyCardId, ReceiptEmail, Type, CreatedDateTime, InvoiceComment
                from transactionTable
                group by Channel, TransactionId, ReceiptId, Store, Terminal, Staff, TransDate, TransTime, CustAccount, NetAmount, Shift, PaymentAmount, SalesOrderId, 
                         ChannelReferenceId, GrossAmount, DiscAmount, TotalDiscAmount, EntryStatus, LoyaltyCardId, ReceiptEmail, Type, CreatedDateTime, InvoiceComment
                order by CreatedDateTime desc
                where (_receiptId == '' || transactionTable.ReceiptId == _receiptId)
                    && (_transactionId == '' || transactionTable.transactionId == _transactionId)
                    && (_channelRefId == '' || transactionTable.ChannelReferenceId == _channelRefId)
                    && (_salesId == '' || transactionTable.SalesOrderId == _salesId)
                    && (_receiptEmailAddress == '' || transactionTable.receiptEmail == _receiptEmailAddress)
                    && (_seachIdentifiers == '' ||
                        transactionTable.transactionId == _seachIdentifiers ||
                        transactionTable.ReceiptId == _seachIdentifiers ||
                        transactionTable.SalesOrderId == _seachIdentifiers ||
                        transactionTable.custAccount == _seachIdentifiers ||
                        transactionTable.ChannelReferenceId == _seachIdentifiers)
                    && (_storeId == '' || transactionTable.Store == _storeId)
                    && (_terminalId == '' || transactionTable.Terminal == _terminalId)
                    && (_staffId == '' || transactionTable.Staff == _staffId)
                    && transactionTable.TransDate >= startDate
                    && transactionTable.TransDate <= endDate
                    && (_custAccount == '' || transactionTable.custAccount == _custAccount)
                    && (transactionTable.Type == RetailTransactionType::Sales
                        || (includeCustomerOrder && (transactionTable.Type == RetailTransactionType::CustomerOrder
                                                    || transactionTable.type == RetailTransactionType::AsyncCustomerOrder
                                                    || transactionTable.type == RetailTransactionType::AsyncCustomerQuote))
                        || transactionTable.Type == RetailTransactionType::SalesOrder
                        || transactionTable.Type == RetailTransactionType::PendingSalesOrder)
                outer join sum(Amount)
                from taxTable
                where transactionTable.TransactionId == taxTable.TransactionId
                        && transactionTable.Channel == taxTable.Channel
                        && transactionTable.Store == taxTable.StoreId
                        && transactionTable.Terminal == taxTable.TerminalId
                        && transactionTable.DataAreaId == taxTable.DataAreaId
                outer join sum(CalculatedAmount)
                from chargeTable
                where transactionTable.TransactionId == chargeTable.TransactionId
                        && transactionTable.Channel == chargeTable.Channel
                        && transactionTable.Store == chargeTable.Store
                        && transactionTable.Terminal == chargeTable.TerminalId
                        && transactionTable.DataAreaId == chargeTable.DataAreaId
                exists join salesLineExistsTable
                where transactionTable.TransactionId == salesLineExistsTable.TransactionId
                        && transactionTable.Channel == salesLineExistsTable.Channel
                        && transactionTable.Store == salesLineExistsTable.Store
                        && transactionTable.Terminal == salesLineExistsTable.TerminalId
                        && transactionTable.DataAreaId == salesLineExistsTable.DataAreaId
                        && (_itemId == '' || salesLineExistsTable.ItemId == _itemId)
                        && (_barcode == '' || salesLineExistsTable.Barcode == _barcode)
                        && (_serialNumber == '' || salesLineExistsTable.InventSerialId == _serialNumber)
            {
                // Skip if we have already found the corresponding Sales Order or reached max count or doesn't match transaction types
                if (resultsCount < _resultsMaxCount)
                {
                    if (!salesOrderXmlMap.exists(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel))
                        && (!filterByTransactionType || transactionTypesSet.in(transactionTable.Type))
                        && (!filterByTransactionStatusType || confind(TransactionStatusTypes, transactionTable.entryStatus) != 0))
                    {
                        results = true;
                        transactionXmlMap.insert(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel),
                            RetailTransactionServiceTransactionsAX63::fillRetailTransactionDetails(transactionTable, taxTable, chargeTable, partyTable, xmlDoc, _includeDetails, #ElementSalesOrder));
                        if (foundSalesOrders.in(transactionTable.SalesOrderId) == false)
                        {
                            foundSalesOrders.add(transactionTable.SalesOrderId);
                        }
                        resultsCount++;
                    }
                }
                else
                {
                    break;
                }
            }

            // Catch new sales orders that haven't been processed by the p-job
            if (_includeNonTransactions && (_salesId != '' || _custAccount != '' || _channelRefId != '' || _storeId != '' || _terminalId != '' || _transactionId != '' || _seachIdentifiers != '' || _startDate!= ''))
            {
                if (_seachIdentifiers != '')
                {
                    insert_recordset tmpRecIdFilter ( RefRecId )
                    select RecId
                        from salesTable 
                        where salesTable.SalesId == _seachIdentifiers
                        notExists join tmpRecIdFilterDuplicateCheck
                        where tmpRecIdFilterDuplicateCheck.RefRecId == salesTable.RecId;

                    insert_recordset tmpRecIdFilter ( RefRecId )
                    select RecId
                        from salesTable 
                        where salesTable.custAccount == _seachIdentifiers
                        notExists join tmpRecIdFilterDuplicateCheck
                        where tmpRecIdFilterDuplicateCheck.RefRecId == salesTable.RecId;

                    insert_recordset tmpRecIdFilter ( RefRecId )
                    select SalesTable
                        from rsoTable where rsoTable.ChannelReferenceId == _seachIdentifiers
                        notExists join tmpRecIdFilterDuplicateCheck
                        where tmpRecIdFilterDuplicateCheck.RefRecId == rsoTable.SalesTable;
                }
                else
                {
                    tmpRecIdFilter.RefRecId = -1;
                    tmpRecIdFilter.insert();
                }

                // Return orders will set the transactionId = invoiceId
                if (_transactionId != '')
                {
                    if (_channelRefId != '' || _storeId != '' || _terminalId != '')
                    {
                        // Query for sales orders joining with custInvoiceJour to match the transactionId
                        // (INCLUDE ChannelRef, StoreId, TerminalId in the search criteria)
                        while select * from salesTable
                            order by salesTable.createdDateTime desc
                            where (_salesId == '' || salesTable.SalesId == _salesId)
                            && salesTable.createdDateTime >= startDateTime
                            && salesTable.createdDateTime <= endDateTime
                            && (_custAccount == '' || salesTable.custAccount == _custAccount)
                            && (_seachIdentifiers == '' ||
                                salesTable.SalesId == _seachIdentifiers ||
                                salesTable.custAccount == _seachIdentifiers)
                            && salesTable.SalesType == SalesType::Sales
                        join rsoTable
                            where salesTable.RecId == rsoTable.SalesTable
                            && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                            && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                            && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                        join InvoiceId 
                            from custInvoiceJour
                            where custInvoiceJour.SalesId == salesTable.SalesId
                            && (_transactionId == '' || custInvoiceJour.InvoiceId == _transactionId)
                        outer join customerTable
                            where salesTable.CustAccount == customerTable.AccountNum
                        outer join type 
                            from transactionTable
                            where salesTable.SalesId == transactionTable.salesOrderId
                        exists join tmpRecIdFilter
                            where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                        exists join salesLineTable
                            where salesTable.SalesId == salesLineTable.SalesId
                                && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                && (_barcode == '' || salesLineTable.Barcode == _barcode)
                        {
                            if (resultsCount < _resultsMaxCount)
                            {
                                if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                {
                                    salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                    foundSalesOrders.add(salesTable.SalesId);
                                    resultsCount++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        // Query for sales orders joining with custInvoiceJour to match the transactionId
                        // (EXCLUDE ChannelRef, StoreId, TerminalId from the search criteria)
                        while select * from salesTable
                        order by salesTable.createdDateTime desc
                        where (_salesId == '' || salesTable.SalesId == _salesId)
                            && salesTable.createdDateTime >= startDateTime
                            && salesTable.createdDateTime <= endDateTime
                            && (_custAccount == '' || salesTable.custAccount == _custAccount)
                            && (_seachIdentifiers == '' ||
                                salesTable.SalesId == _seachIdentifiers ||
                                salesTable.custAccount == _seachIdentifiers)
                            && salesTable.SalesType == SalesType::Sales
                        outer join rsoTable
                            where salesTable.RecId == rsoTable.SalesTable
                            && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                            && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                            && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                        join InvoiceId from custInvoiceJour
                            where custInvoiceJour.SalesId == salesTable.SalesId
                            && (_transactionId == '' || custInvoiceJour.InvoiceId == _transactionId)
                        outer join customerTable
                            where salesTable.CustAccount == customerTable.AccountNum
                        outer join type from transactionTable
                            where salesTable.SalesId == transactionTable.salesOrderId
                        exists join tmpRecIdFilter
                            where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                        exists join salesLineTable
                            where salesTable.SalesId == salesLineTable.SalesId
                                && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                && (_barcode == '' || salesLineTable.Barcode == _barcode)
                        {
                            if (resultsCount < _resultsMaxCount)
                            {
                                if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                {
                                    salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                    foundSalesOrders.add(salesTable.SalesId);
                                    resultsCount++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    if (includeCustomerOrder)
                    {
                        if (_channelRefId != '' || _receiptId != '' || _storeId != '' || _terminalId != '')
                        {
                            // Query for sales orders
                            while select * from salesTable
                            order by salesTable.createdDateTime desc
                            where (_salesId == '' || salesTable.SalesId == _salesId)
                                && salesTable.createdDateTime >= startDateTime
                                && salesTable.createdDateTime <= endDateTime
                                && (_custAccount == '' || salesTable.custAccount == _custAccount)
                                && (_seachIdentifiers == '' ||
                                    salesTable.SalesId == _seachIdentifiers ||
                                    salesTable.custAccount == _seachIdentifiers)
                            && salesTable.SalesType == SalesType::Sales
                            join rsoTable
                                where salesTable.RecId == rsoTable.SalesTable
                                && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                                && (_receiptId == '' || rsoTable.ChannelReferenceId == _receiptId)
                                && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                                && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                            outer join customerTable
                                where salesTable.CustAccount == customerTable.AccountNum
                            outer join type from transactionTable
                                where salesTable.SalesId == transactionTable.salesOrderId
                                && (transactionTable.CustAccount == '' || salesTable.CustAccount == transactionTable.CustAccount)
                            exists join tmpRecIdFilter
                                where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                            exists join salesLineTable
                                where salesTable.SalesId == salesLineTable.SalesId
                                && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                && (_barcode == '' || salesLineTable.Barcode == _barcode)
                            {
                                if (resultsCount < _resultsMaxCount)
                                {
                                    if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                    {
                                        salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                        foundSalesOrders.add(salesTable.SalesId);
                                        resultsCount++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            select count(RecId) from rsoTable where rsoTable.ChannelReferenceId == _seachIdentifiers;
                            foundByChannelReferenceId = 0 < int642int(rsoTable.RecId);

                            // Query for sales orders
                            while select * from salesTable
                            order by salesTable.createdDateTime desc
                            where (_salesId == '' || salesTable.SalesId == _salesId)
                                && salesTable.createdDateTime >= startDateTime
                                && salesTable.createdDateTime <= endDateTime
                                && (_custAccount == '' || salesTable.custAccount == _custAccount)
                                && (_seachIdentifiers == '' ||
                                    salesTable.SalesId == _seachIdentifiers ||
                                    salesTable.custAccount == _seachIdentifiers ||
                                    foundByChannelReferenceId)
                            && salesTable.SalesType == SalesType::Sales
                            outer join rsoTable
                                where salesTable.RecId == rsoTable.SalesTable
                                && (_seachIdentifiers == '' || rsoTable.ChannelReferenceId == _seachIdentifiers)
                                && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                                && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                            outer join customerTable
                                where salesTable.CustAccount == customerTable.AccountNum
                            outer join type from transactionTable
                                where salesTable.SalesId == transactionTable.salesOrderId
                                && (transactionTable.CustAccount == '' || salesTable.CustAccount == transactionTable.CustAccount)
                            exists join tmpRecIdFilter
                                where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                            exists join salesLineTable
                                where salesTable.SalesId == salesLineTable.SalesId
                                && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                && (_barcode == '' || salesLineTable.Barcode == _barcode)
                            {
                                if (resultsCount < _resultsMaxCount)
                                {
                                    if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                    {
                                        salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                        foundSalesOrders.add(salesTable.SalesId);
                                        resultsCount++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                    }
                }

                tmpRecIdFilter = null;
            }
            //end Catch new sales orders that haven't been processed by the p-job

            if (results && _includeDetails)
            {
                // Fill in sales lines
                while select TransactionId, Store, Terminal, Channel, TransDate from transactionTable
                    order by transactionTable.CreatedDateTime desc
                    where (_receiptId == '' || transactionTable.ReceiptId == _receiptId)
                        && (_transactionId == '' || transactionTable.transactionId == _transactionId)
                        && (_channelRefId == '' || transactionTable.ChannelReferenceId == _channelRefId)
                        && (_salesId == '' || transactionTable.SalesOrderId == _salesId)
                        && (_receiptEmailAddress == '' || transactionTable.receiptEmail == _receiptEmailAddress)
                        && (_storeId == '' || transactionTable.Store == _storeId)
                        && (_terminalId == '' || transactionTable.Terminal == _terminalId)
                        && (_staffId == '' || transactionTable.Staff == _staffId)
                        && transactionTable.TransDate >= startDate
                        && transactionTable.TransDate <= endDate
                        && (_custAccount == '' || transactionTable.custAccount == _custAccount)
                        && (transactionTable.Type == RetailTransactionType::Sales
                            || (includeCustomerOrder && (transactionTable.Type == RetailTransactionType::CustomerOrder
                                                        || transactionTable.type == RetailTransactionType::AsyncCustomerOrder
                                                        || transactionTable.type == RetailTransactionType::AsyncCustomerQuote))
                            || transactionTable.Type == RetailTransactionType::SalesOrder
                            || transactionTable.Type == RetailTransactionType::PendingSalesOrder)
                    join TransactionId, Store, TerminalId, ReceiptId, LineNum, transDate,
                        Barcode, ItemId, VariantId, ListingId, TransactionStatus, Comment, giftcard,
                        InventBatchId, ReturnQty, Price, NetAmount, NetPrice, NetAmountInclTax, Qty,
                        TaxGroup, TaxAmount, TotalDiscAmount, TotalDiscPct, LineDscAmount,
                        PeriodicDiscAmount, DiscAmount, DiscAmountWithoutTax, Unit, UnitQty, InventSerialId,
                        PeriodicPercentageDiscount, LineManualDiscountAmount, LineManualDiscountPercentage,
                        OriginalTaxGroup, TaxItemGroup, OriginalTaxItemGroup, PeriodicDiscType, staffId from transactionSalesTable
                        where transactionTable.TransactionId == transactionSalesTable.TransactionId
                        && transactionTable.Channel == transactionSalesTable.Channel
                        && transactionTable.Store == transactionSalesTable.Store
                        && transactionTable.Terminal == transactionSalesTable.Terminalid
                        && transactionTable.DataAreaId == transactionSalesTable.DataAreaId
                    exists join salesLineExistsTable
                        where transactionTable.TransactionId == salesLineExistsTable.TransactionId
                        && transactionTable.Channel == salesLineExistsTable.Channel
                        && transactionTable.Store == salesLineExistsTable.Store
                        && transactionTable.Terminal == salesLineExistsTable.Terminalid
                        && transactionTable.DataAreaId == salesLineExistsTable.DataAreaId
                        && (_itemId == '' || salesLineExistsTable.ItemId == _itemId)
                        && (_barcode == '' || salesLineExistsTable.Barcode == _barcode)
                        && (_serialNumber == '' || salesLineExistsTable.InventSerialId == _serialNumber)
                {
                    // If the transaction exists in the results map, then fill the lines - Ideally, we should restrict the query to ONLY those transactionIds that were already added to the results map.
                    if (transactionXmlMap.exists(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel)))
                    {
                        xmlTrans = transactionXmlMap.lookup(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel));
                        xmlItems = xmlTrans.getElementsByTagName('SalesLines').item(0);
                        xmlItems.appendChild(RetailTransactionServiceTransactionsAX63::fillSalesTransDetails(transactionSalesTable, xmlDoc, includeDiscountLines));
                    }
                    else
                    {
                        // TransactionId wasn't in the header result map.
                        eventSource.EventWriteOrdersSearchOrderListTransactionIdNotInXmlWithoutCustNameWarning(funcName(), transactionTable.RecId);
                    }
                }
            }
        }
        else
        {
            //
            // Search LIKE CustomerName
            //

            if (_includeNonTransactions)
            {
                // Query for sales orders
                while select Channel, TransactionId, ReceiptId, Store, Terminal, Staff, TransDate, TransTime, CustAccount, NetAmount, Shift, PaymentAmount, SalesOrderId, ChannelReferenceId,
                         GrossAmount, DiscAmount, TotalDiscAmount, EntryStatus, LoyaltyCardId, ReceiptEmail, Type, CreatedDateTime from transactionTable
                order by transactionTable.CreatedDateTime desc
                where (_receiptId == '' || transactionTable.ReceiptId == _receiptId)
                    && (_transactionId == '' || transactionTable.transactionId == _transactionId)
                    && (_channelRefId == '' || transactionTable.ChannelReferenceId == _channelRefId)
                    && (_salesId == '' || transactionTable.SalesOrderId == _salesId)
                    && (_receiptEmailAddress == '' || transactionTable.receiptEmail == _receiptEmailAddress)
                    && (_seachIdentifiers == '' ||
                        transactionTable.transactionId == _seachIdentifiers ||
                        transactionTable.ReceiptId == _seachIdentifiers ||
                        transactionTable.SalesOrderId == _seachIdentifiers ||
                        transactionTable.custAccount == _seachIdentifiers ||
                        transactionTable.ChannelReferenceId == _seachIdentifiers)
                    && (_storeId == '' || transactionTable.Store == _storeId)
                    && (_terminalId == '' || transactionTable.Terminal == _terminalId)
                    && (_staffId == '' || transactionTable.Staff == _staffId)
                    && transactionTable.TransDate >= startDate
                    && transactionTable.TransDate <= endDate
                    && (_custAccount == '' || transactionTable.custAccount == _custAccount)
                    && (transactionTable.Type == RetailTransactionType::PendingSalesOrder
                        || (includeCustomerOrder && (transactionTable.Type == RetailTransactionType::CustomerOrder
                                                    || transactionTable.type == RetailTransactionType::AsyncCustomerOrder
                                                    || transactionTable.type == RetailTransactionType::AsyncCustomerQuote)))
                join salesTable
                    where transactionTable.SalesOrderId == salesTable.SalesId
                       && (_salesId == '' || salesTable.SalesId == _salesId)
                       && (transactionTable.CustAccount == '' || transactionTable.CustAccount == salesTable.CustAccount)
                       && salesTable.SalesType == SalesType::Sales
                join AccountNum from customerTable
                    where transactionTable.CustAccount == customerTable.AccountNum
                join Name from partyTable
                    where partyTable.RecId == customerTable.Party
                        && partyTable.Name like custName
                outer join rsoTable
                    where salesTable.RecId == rsoTable.SalesTable
                       && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                exists join salesLineExistsTable
                    where transactionTable.TransactionId == salesLineExistsTable.TransactionId
                        && transactionTable.Channel == salesLineExistsTable.Channel
                        && transactionTable.Store == salesLineExistsTable.Store
                        && transactionTable.Terminal == salesLineExistsTable.Terminalid
                        && transactionTable.DataAreaId == salesLineExistsTable.DataAreaId
                        && (_itemId == '' || salesLineExistsTable.ItemId == _itemId)
                        && (_barcode == '' || salesLineExistsTable.Barcode == _barcode)
                        && (_serialNumber == '' || salesLineExistsTable.InventSerialId == _serialNumber)
                {
                    if (resultsCount < _resultsMaxCount)
                    {
                        if (foundSalesOrders.in(salesTable.SalesId) == false
                        && (!filterByTransactionType || transactionTypesSet.in(transactionTable.Type))
                        && (!filterByTransactionStatusType || confind(TransactionStatusTypes, transactionTable.entryStatus) != 0))
                        {
                            salesOrderXmlMap.insert(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel), RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, transactionTable, _includeDetails, xmlDoc, includeDiscountLines));
                            foundSalesOrders.add(salesTable.SalesId);
                            resultsCount++;
                        }
                    }
                    else
                    {
                        break;
                    }
                }
            }
            //end if (_includeNonTransactions)

            // Query for transactions
            while select Channel, TransactionId, ReceiptId, Store, Terminal, Staff, TransDate, TransTime, CustAccount, NetAmount, ChannelReferenceId,
                         GrossAmount, DiscAmount, TotalDiscAmount, EntryStatus, LoyaltyCardId, ReceiptEmail, Type, CreatedDateTime, SalesOrderId, InvoiceComment
                from transactionTable
                group by Channel, TransactionId, ReceiptId, Store, Terminal, Staff, TransDate, TransTime, CustAccount, NetAmount, ChannelReferenceId,
                         GrossAmount, DiscAmount, TotalDiscAmount, EntryStatus, LoyaltyCardId, ReceiptEmail, Type, CreatedDateTime, SalesOrderId, InvoiceComment
                where (_receiptId == '' || transactionTable.ReceiptId == _receiptId)
                    && (_transactionId == '' || transactionTable.transactionId == _transactionId)
                    && (_channelRefId == '' || transactionTable.ChannelReferenceId == _channelRefId)
                    && (_salesId == '' || transactionTable.SalesOrderId == _salesId)
                    && (_receiptEmailAddress == '' || transactionTable.receiptEmail == _receiptEmailAddress)
                    && (_seachIdentifiers == '' ||
                        transactionTable.transactionId == _seachIdentifiers ||
                        transactionTable.ReceiptId == _seachIdentifiers ||
                        transactionTable.SalesOrderId == _seachIdentifiers ||
                        transactionTable.custAccount == _seachIdentifiers ||
                        transactionTable.ChannelReferenceId == _seachIdentifiers)
                    && (_storeId == '' || transactionTable.Store == _storeId)
                    && (_terminalId == '' || transactionTable.Terminal == _terminalId)
                    && (_staffId == '' || transactionTable.Staff == _staffId)
                    && transactionTable.TransDate >= startDate
                    && transactionTable.TransDate <= endDate
                    && (_custAccount == '' || transactionTable.custAccount == _custAccount)
                    && (transactionTable.Type == RetailTransactionType::Sales
                        || (includeCustomerOrder && (transactionTable.Type == RetailTransactionType::CustomerOrder
                                                    || transactionTable.type == RetailTransactionType::AsyncCustomerOrder
                                                    || transactionTable.type == RetailTransactionType::AsyncCustomerQuote))
                        || transactionTable.Type == RetailTransactionType::SalesOrder
                        || transactionTable.Type == RetailTransactionType::PendingSalesOrder)
                outer join sum(Amount) from taxTable
                    where taxTable.TransactionId   == transactionTable.TransactionId
                        && transactionTable.Channel == taxTable.Channel
                        && transactionTable.Store == taxTable.StoreId
                        && transactionTable.Terminal == taxTable.TerminalId
                        && transactionTable.DataAreaId == taxTable.DataAreaId
                outer join sum(CalculatedAmount) from chargeTable
                    where transactionTable.TransactionId == chargeTable.TransactionId
                        && transactionTable.Channel == chargeTable.Channel
                        && transactionTable.Store == chargeTable.Store
                        && transactionTable.Terminal == chargeTable.TerminalId
                        && transactionTable.DataAreaId == chargeTable.DataAreaId
                exists join AccountNum from customerTable
                    where transactionTable.CustAccount == customerTable.AccountNum
                exists join Name from partyTable
                    where customerTable.Party == partyTable.RecId
                        && partyTable.Name like custName
                exists join salesLineExistsTable
                    where transactionTable.TransactionId == salesLineExistsTable.TransactionId
                        && transactionTable.Channel == salesLineExistsTable.Channel
                        && transactionTable.Store == salesLineExistsTable.Store
                        && transactionTable.Terminal == salesLineExistsTable.Terminalid
                        && transactionTable.DataAreaId == salesLineExistsTable.DataAreaId
                        && (_itemId == '' || salesLineExistsTable.ItemId == _itemId)
                        && (_barcode == '' || salesLineExistsTable.Barcode == _barcode)
                        && (_serialNumber == '' || salesLineExistsTable.InventSerialId == _serialNumber)
            {
                customerTable = CustTable::find(transactionTable.CustAccount);
                partyTable = DirPartyTable::findRec(customerTable.Party);
                if (resultsCount < _resultsMaxCount)
                {
                    // Skip if we have already found the corresponding Sales Order or transaction types do not match
                    if (!salesOrderXmlMap.exists(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel))
                        && (!filterByTransactionType || transactionTypesSet.in(transactionTable.Type))
                        && (!filterByTransactionStatusType || confind(TransactionStatusTypes, transactionTable.entryStatus) != 0))
                    {
                        results = true;
                        transactionXmlMap.insert(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel),
                            RetailTransactionServiceTransactionsAX63::fillRetailTransactionDetails(transactionTable, taxTable, chargeTable, partyTable, xmlDoc, _includeDetails, #ElementSalesOrder));
                        if (foundSalesOrders.in(transactionTable.SalesOrderId) == false)
                        {
                            foundSalesOrders.add(transactionTable.SalesOrderId);
                        }
                        resultsCount++;
                    }
                }
                else
                {
                    break;
                }
            }

            // Catch new sales orders that haven't been processed by the p-job
            if (_includeNonTransactions && (_salesId != '' || _custAccount != '' || _channelRefId != '' || _storeId != '' || _terminalId != '' || custName != '' || _transactionId != '' || _seachIdentifiers != '' || _startDate!= ''))
            {
                if (_seachIdentifiers != '')
                {
                    insert_recordset tmpRecIdFilter ( RefRecId )
                    select RecId
                    from salesTable where salesTable.SalesId == _seachIdentifiers
                    notExists join tmpRecIdFilterDuplicateCheck
                    where tmpRecIdFilterDuplicateCheck.RefRecId == salesTable.RecId;

                    insert_recordset tmpRecIdFilter ( RefRecId )
                    select RecId
                    from salesTable where salesTable.custAccount == _seachIdentifiers
                    notExists join tmpRecIdFilterDuplicateCheck
                    where tmpRecIdFilterDuplicateCheck.RefRecId == salesTable.RecId;

                    insert_recordset tmpRecIdFilter ( RefRecId )
                    select SalesTable
                    from rsoTable where rsoTable.ChannelReferenceId == _seachIdentifiers
                    notExists join tmpRecIdFilterDuplicateCheck
                    where tmpRecIdFilterDuplicateCheck.RefRecId == rsoTable.SalesTable;
                }
                else
                {
                    tmpRecIdFilter.RefRecId = -1;
                    tmpRecIdFilter.insert();
                }

                // Return orders will set the transactionId = invoiceId
                if (_transactionId != '')
                {
                    if (_channelRefId != '' || _storeId != '' || _terminalId != '')
                    {
                        // Query for sales orders joining with custInvoiceJour to match the transactionId
                        while select * from salesTable
                        order by salesTable.createdDateTime desc
                        where (_salesId == '' || salesTable.SalesId == _salesId)
                            && salesTable.createdDateTime >= startDateTime
                            && salesTable.createdDateTime <= endDateTime
                            && (_custAccount == '' || salesTable.custAccount == _custAccount)
                            && (_seachIdentifiers == '' ||
                                salesTable.SalesId == _seachIdentifiers ||
                                salesTable.custAccount == _seachIdentifiers)
                            && salesTable.SalesType == SalesType::Sales
                        join rsoTable
                            where salesTable.RecId == rsoTable.SalesTable
                            && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                            && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                            && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                        join InvoiceId from custInvoiceJour
                            where custInvoiceJour.SalesId == salesTable.SalesId
                            && (_transactionId == '' || custInvoiceJour.InvoiceId == _transactionId)
                        outer join customerTable
                            where salesTable.CustAccount == customerTable.AccountNum
                        join Name from partyTable
                            where partyTable.RecId == customerTable.Party
                                && partyTable.Name like custName
                        outer join type from transactionTable
                            where salesTable.SalesId == transactionTable.salesOrderId
                                && (transactionTable.CustAccount == '' || transactionTable.CustAccount == salesTable.CustAccount)
                        exists join tmpRecIdFilter
                            where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                        exists join salesLineTable
                            where salesTable.SalesId == salesLineTable.SalesId
                                && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                && (_barcode == '' || salesLineTable.Barcode == _barcode)
                        {
                            if (resultsCount < _resultsMaxCount)
                            {
                                if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                {
                                    salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                    foundSalesOrders.add(salesTable.SalesId);
                                    resultsCount++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (_channelRefId != '' || _storeId != '' || _terminalId != '')
                        {
                            // Query for sales orders joining with custInvoiceJour to match the transactionId
                            while select * from salesTable
                            order by salesTable.createdDateTime desc
                            where (_salesId == '' || salesTable.SalesId == _salesId)
                                && salesTable.createdDateTime >= startDateTime
                                && salesTable.createdDateTime <= endDateTime
                                && (_custAccount == '' || salesTable.custAccount == _custAccount)
                                && (_seachIdentifiers == '' ||
                                    salesTable.SalesId == _seachIdentifiers ||
                                    salesTable.custAccount == _seachIdentifiers)
                                && salesTable.SalesType == SalesType::Sales
                            join rsoTable
                                where salesTable.RecId == rsoTable.SalesTable
                                && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                                && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                                && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                            join InvoiceId from custInvoiceJour
                                where custInvoiceJour.SalesId == salesTable.SalesId
                                && (_transactionId == '' || custInvoiceJour.InvoiceId == _transactionId)
                            outer join customerTable
                                where salesTable.CustAccount == customerTable.AccountNum
                            join Name from partyTable
                                where partyTable.RecId == customerTable.Party
                                    && partyTable.Name like custName
                            outer join type from transactionTable
                                where salesTable.SalesId == transactionTable.salesOrderId
                                    && (transactionTable.CustAccount == '' || salesTable.CustAccount == transactionTable.CustAccount)
                            exists join tmpRecIdFilter
                                where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                            exists join salesLineTable
                                where salesTable.SalesId == salesLineTable.SalesId
                                    && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                    && (_barcode == '' || salesLineTable.Barcode == _barcode)
                            {
                                if (resultsCount < _resultsMaxCount)
                                {
                                    if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                    {
                                        salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                        foundSalesOrders.add(salesTable.SalesId);
                                        resultsCount++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            // Query for sales orders joining with custInvoiceJour to match the transactionId
                            while select * from salesTable
                            order by salesTable.createdDateTime desc
                            where (_salesId == '' || salesTable.SalesId == _salesId)
                                && salesTable.createdDateTime >= startDateTime
                                && salesTable.createdDateTime <= endDateTime
                                && (_custAccount == '' || salesTable.custAccount == _custAccount)
                                && (_seachIdentifiers == '' ||
                                    salesTable.SalesId == _seachIdentifiers ||
                                    salesTable.custAccount == _seachIdentifiers)
                                && salesTable.SalesType == SalesType::Sales
                            outer join rsoTable
                                where salesTable.RecId == rsoTable.SalesTable
                                && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                                && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                                && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                            join InvoiceId from custInvoiceJour
                                where custInvoiceJour.SalesId == salesTable.SalesId
                                && (_transactionId == '' || custInvoiceJour.InvoiceId == _transactionId)
                            outer join customerTable
                                where salesTable.CustAccount == customerTable.AccountNum
                            join Name from partyTable
                                where partyTable.RecId == customerTable.Party
                                    && partyTable.Name like custName
                            outer join type from transactionTable
                                where salesTable.SalesId == transactionTable.salesOrderId
                                    && (transactionTable.CustAccount == '' || salesTable.CustAccount == transactionTable.CustAccount)
                            exists join tmpRecIdFilter
                                where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                            exists join salesLineTable
                                where salesTable.SalesId == salesLineTable.SalesId
                                    && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                    && (_barcode == '' || salesLineTable.Barcode == _barcode)
                            {
                                if (resultsCount < _resultsMaxCount)
                                {
                                    if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                    {
                                        salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                        foundSalesOrders.add(salesTable.SalesId);
                                        resultsCount++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (includeCustomerOrder)
                    {
                        // Query for sales orders
                        while select * from salesTable
                        order by salesTable.createdDateTime desc
                        where (_salesId == '' || salesTable.SalesId == _salesId)
                            && salesTable.createdDateTime >= startDateTime
                            && salesTable.createdDateTime <= endDateTime
                            && (_custAccount == '' || salesTable.custAccount == _custAccount)
                            && (_seachIdentifiers == '' ||
                                salesTable.SalesId == _seachIdentifiers ||
                                salesTable.custAccount == _seachIdentifiers)
                        && salesTable.SalesType == SalesType::Sales
                        outer join rsoTable
                            where salesTable.RecId == rsoTable.SalesTable
                            && (_channelRefId == '' || rsoTable.ChannelReferenceId == _channelRefId)
                            && (_storeId == '' || rsoTable.RetailStoreId == _storeId)
                            && (_terminalId == '' || rsoTable.RetailTerminalId == _terminalId)
                        outer join customerTable
                            where salesTable.CustAccount == customerTable.AccountNum
                        join Name from partyTable
                            where partyTable.RecId == customerTable.Party
                                && partyTable.Name like custName
                        outer join type from transactionTable
                            where salesTable.SalesId == transactionTable.salesOrderId
                                && (transactionTable.CustAccount == '' || salesTable.CustAccount == transactionTable.CustAccount)
                        exists join tmpRecIdFilter
                            where tmpRecIdFilter.RefRecId == -1 || tmpRecIdFilter.RefRecId == salesTable.RecId
                        exists join salesLineTable
                            where salesTable.SalesId == salesLineTable.SalesId
                                && (_itemId == '' || salesLineTable.ItemId == _itemId)
                                && (_barcode == '' || salesLineTable.Barcode == _barcode)
                        {
                            if (resultsCount < _resultsMaxCount)
                            {
                                if (foundSalesOrders.in(salesTable.SalesId) == false
                                        && (!filterByTransactionType || !transactionTable || transactionTypesSet.in(transactionTable.Type)))
                                {
                                    salesOrderXmlMap.insert(salesTable.SalesId, RetailTransactionServiceTransactionsAX63::fillSalesOrderDetails(salesTable, rsoTable, customerTable, null, _includeDetails, xmlDoc, includeDiscountLines));
                                    foundSalesOrders.add(salesTable.SalesId);
                                    resultsCount++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                }

                tmpRecIdFilter = null;
            }

            if (results && _includeDetails)
            {
                // Fill in sales lines
                while select TransactionId, Store, Terminal, Channel from transactionTable
                    order by transactionTable.CreatedDateTime desc
                    where (_receiptId == '' || transactionTable.ReceiptId == _receiptId)
                        && (_transactionId == '' || transactionTable.transactionId == _transactionId)
                        && (_channelRefId == '' || transactionTable.ChannelReferenceId == _channelRefId)
                        && (_receiptEmailAddress == '' || transactionTable.receiptEmail == _receiptEmailAddress)
                        && (_storeId == '' || transactionTable.Store == _storeId)
                        && (_terminalId == '' || transactionTable.Terminal == _terminalId)
                        && (_staffId == '' || transactionTable.Staff == _staffId)
                        && transactionTable.TransDate >= startDate
                        && transactionTable.TransDate <= endDate
                        && (_custAccount == '' || transactionTable.custAccount == _custAccount)
                        && (transactionTable.Type == RetailTransactionType::Sales
                            || (includeCustomerOrder && (transactionTable.Type == RetailTransactionType::CustomerOrder
                                                        || transactionTable.type == RetailTransactionType::AsyncCustomerOrder
                                                        || transactionTable.type == RetailTransactionType::AsyncCustomerQuote))
                            || transactionTable.Type == RetailTransactionType::SalesOrder
                            || transactionTable.Type == RetailTransactionType::PendingSalesOrder)
                    join TransactionId, Store, TerminalId, ReceiptId, LineNum, transDate,
                            Barcode, ItemId, VariantId, ListingId, TransactionStatus, Comment,
                            InventBatchId, ReturnQty, Price, NetAmount, NetPrice, NetAmountInclTax, Qty,
                            TaxGroup, TaxAmount, TotalDiscAmount, TotalDiscPct, LineDscAmount,
                            PeriodicDiscAmount, DiscAmount, DiscAmountWithoutTax, Unit, UnitQty, InventSerialId,
                            PeriodicPercentageDiscount, LineManualDiscountAmount, LineManualDiscountPercentage,
                            OriginalTaxGroup, TaxItemGroup, OriginalTaxItemGroup, PeriodicDiscType, staffId from transactionSalesTable
                        where transactionTable.TransactionId == transactionSalesTable.TransactionId
                        && transactionTable.Channel == transactionSalesTable.Channel
                        && transactionTable.Store == transactionSalesTable.Store
                        && transactionTable.Terminal == transactionSalesTable.Terminalid
                        && transactionTable.DataAreaId == transactionSalesTable.DataAreaId
                    join AccountNum from customerTable
                        where transactionTable.CustAccount == customerTable.AccountNum
                    join Name from partyTable
                        where partyTable.RecId == customerTable.Party
                            && partyTable.Name like custName
                    exists join salesLineExistsTable
                        where transactionTable.TransactionId == salesLineExistsTable.TransactionId
                            && transactionTable.Channel == salesLineExistsTable.Channel
                            && transactionTable.Store == salesLineExistsTable.Store
                            && transactionTable.Terminal == salesLineExistsTable.Terminalid
                            && transactionTable.DataAreaId == salesLineExistsTable.DataAreaId
                            && (_itemId == '' || salesLineExistsTable.ItemId == _itemId)
                            && (_barcode == '' || salesLineExistsTable.Barcode == _barcode)
                            && (_serialNumber == '' || salesLineExistsTable.InventSerialId == _serialNumber)
                {
                    // If the transaction exists in the results map, then fill the lines - Ideally, we should restrict the query to ONLY those transactionIds that were already added to the results map.
                    if (transactionXmlMap.exists(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel)))
                    {
                        xmlTrans = transactionXmlMap.lookup(transactionTable.transactionId + transactionTable.store + transactionTable.terminal + int642str(transactionTable.Channel));
                        xmlItems = xmlTrans.getElementsByTagName('SalesLines').item(0);
                        xmlItems.appendChild(RetailTransactionServiceTransactionsAX63::fillSalesTransDetails(transactionSalesTable, xmlDoc, includeDiscountLines));
                    }
                    else
                    {
                        // TransactionId wasn't in the header result map.
                        eventSource.EventWriteOrdersSearchOrderListTransactionIdNotInXmlWithCustNameWarning(funcName(), transactionTable.RecId);
                    }
                }
            }
        }

        // Catch new quotes that haven't been processed by the p-job (if not include only transactions)
        if (_includeNonTransactions && (_salesId != '' || _custAccount != '' || custName != '' || _seachIdentifiers != '' || _receiptEmailAddress != ''))
        {
            while select * from salesQuotationTable
                order by salesQuotationTable.CreatedDateTime desc
                where (_salesId == '' || salesQuotationTable.QuotationId == _salesId)
                    && salesQuotationTable.QuotationType == QuotationType::Sales
                    && salesQuotationTable.createdDateTime >= startDateTime
                    && salesQuotationTable.createdDateTime <= endDateTime
                    && (_custAccount == '' || salesQuotationTable.CustAccount == _custAccount)
                    && (_receiptEmailAddress == '' || salesQuotationTable.Email == _receiptEmailAddress)
                    && (_seachIdentifiers == '' || salesQuotationTable.QuotationId == _seachIdentifiers || salesQuotationTable.CustAccount == _seachIdentifiers)
                    && (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
                    || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Approved
                    || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Submitted)
                join customerTable
                    where salesQuotationTable.CustAccount == customerTable.AccountNum
                join Name from partyTable
                    where partyTable.RecId == customerTable.Party
                    && (custName == '' || partyTable.Name like custName)
            {
                if (resultsCount < _resultsMaxCount)
                {
                    quoteXmlMap.insert(salesQuotationTable.QuotationId, RetailTransactionServiceTransactionsAX63::fillQuoteDetails(salesQuotationTable, rsqTable, customerTable, _includeDetails, xmlDoc));
                    resultsCount++;
                }
            }
        }

        enumerator = new MapEnumerator(salesOrderXmlMap);
        while (enumerator.MoveNext())
        {
            xmlTrans = enumerator.currentValue();
            xmlRoot.appendChild(xmlTrans);
        }

        enumerator = new MapEnumerator(transactionXmlMap);
        while (enumerator.MoveNext())
        {
            xmlTrans = enumerator.currentValue();
            xmlRoot.appendChild(xmlTrans);
        }

        enumerator = new MapEnumerator(quoteXmlMap);
        while (enumerator.MoveNext())
        {
            xmlTrans = enumerator.currentValue();
            xmlRoot.appendChild(xmlTrans);
        }

        xmlDoc.appendChild(xmlRoot);
        output = conIns(output,conLen(output)+1, xmlDoc.toString());

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionByReceiptId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for retrieving the sales transactions. Performs the following:
    /// 1.Adds transaction details.
    /// 2.Adds item details.
    /// 3.Adds loyalty.
    /// Performs the following validations:
    /// 1.No transactions for the receipt ID.
    /// 2.Too many transactions were found for receipt ID.
    /// </summary>
    /// <param name="receiptId">
    /// ID of the RetailTransactionTable.receiptId field.
    /// </param>
    /// <param name="storeId">
    /// ID of the RetailTransactionTable.store field.
    /// </param>
    /// <param name="terminalId">
    /// ID of the RetailTransactionTable.terminal field.
    /// </param>
    /// <returns>
    /// The status as a container.
    /// </returns>
    /// <remarks>
    /// Copied from RetailTransactionServiceTransactions.
    /// RetailTransactionService.fillTransactionTable method returns the container <c>transTable</c> having the data of the <c>RetailTransactionTable</c>.
    /// RetailTransactionService.fillSalesTrans method returns the container <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
    /// RetailTransactionService.fillLoyaltyTrans method returns <c>container</c> with the loyalty card number.
    /// RetailTransactionService.fillDiscountTrans method returns the container <c>discountTrans</c> having the data of the <c>RetailTransactionDiscountTrans</c> table.
    /// </remarks>
    public static container getTransactionByReceiptId(RetailReceiptId   receiptId,
                                                     RetailStoreId     storeId    = '',
                                                     RetailTerminalId  terminalId = '')
    {
        RetailTransactionService            transactionService = new RetailTransactionService();
        RetailTransactionTable              transactionTable;
        container                           output = [true,''];

        if (storeId && terminalId)
        {
            select count(RecId) from transactionTable
            where transactionTable.ReceiptId   == receiptId
               && transactionTable.Store       == storeId
               && transactionTable.Terminal    == terminalId
               && transactionTable.EntryStatus != RetailEntryStatus::Voided;
        }
        else
        {
            select count(RecId) from transactionTable
            where transactionTable.ReceiptId   == receiptId
               && transactionTable.EntryStatus != RetailEntryStatus::Voided;
        }

        if (transactionTable.RecId == 0)
        {
            // No transactions for receipt ID.
            output = [false,strFmt("@RET4544",receiptId),transactionTable.RecId];
        }
        else if (transactionTable.RecId > 1)
        {
            // Too many transactions were found for receipt ID.
            output = [false,strFmt("@RET4545",receiptId),transactionTable.RecId];
        }
        else if (transactionTable.RecId == 1)
        {
            // Add count of transactions to container, which is always 1.
            output = conIns(output,conLen(output)+1,transactionTable.RecId);

            if (storeId && terminalId)
            {
                // Add transaction detail as a container.
                select firstonly transactionTable
                where transactionTable.Store       == storeId
                   && transactionTable.Terminal    == terminalId
                   && transactionTable.ReceiptId   == receiptId
                   && transactionTable.EntryStatus != RetailEntryStatus::Voided;
            }
            else
            {
                select firstonly transactionTable
                where transactionTable.ReceiptId   == receiptId
                   && transactionTable.EntryStatus != RetailEntryStatus::Voided;
            }

            output = RetailTransactionServiceTransactionsAX63::getTransaction(transactionTable, output);
        }

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for retrieving the sales transactions. Performs the following:
    /// 1.Adds transaction details.
    /// 2.Adds item details.
    /// 3.Adds loyalty.
    /// Performs the following validations:
    /// 1.No transactions for the receipt ID.
    /// 2.Too many transactions were found for receipt ID.
    /// </summary>
    /// <param name="transactionTable">
    /// RetailTransactionTable.
    /// </param>
    /// <param name="output">
    /// The output container.
    /// </param>
    /// <returns>
    /// The status as a container.
    /// </returns>
    /// <remarks>
    /// Copied from RetailTransactionServiceTransactions in order to set the EntryStatus on the transactions to none.
    /// RetailTransactionService.fillTransactionTable method returns the container <c>transTable</c> having the data of the <c>RetailTransactionTable</c>.
    /// RetailTransactionService.fillSalesTrans method returns the container <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
    /// RetailTransactionService.fillLoyaltyTrans method returns <c>container</c> with the loyalty card number.
    /// RetailTransactionService.fillDiscountTrans method returns the container <c>discountTrans</c> having the data of the <c>RetailTransactionDiscountTrans</c> table.
    /// </remarks>
    private static container getTransaction(RetailTransactionTable transactionTable, container output)
    {
        RetailTransactionService             transactionService = new RetailTransactionService();

        output = conIns(output,conLen(output)+1, RetailTransactionServiceTransactionsAX63::fillTransactionTable(transactionTable));

        // Add item details as container of containers.
        output = conIns(output,conLen(output)+1, RetailTransactionServiceTransactionsAX63::fillSalesTrans(transactionTable));

        // Add loyalty as container.
        output = conIns(output,conLen(output)+1, RetailTransactionServiceTransactionsAX63::fillLoyaltyTrans(transactionTable));

        // Add discount transactions
        output = conIns(output,conLen(output)+1, RetailTransactionServiceTransactionsAX63::fillDiscountTrans(transactionTable));

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the container <c>transTable</c> having the data of the <c>RetailTransactionTable</c>.
    /// </summary>
    /// <param name="transactionTable">
    /// Table buffer of <c>RetailTransactionTable</c>.
    /// </param>
    /// <returns>
    /// The xml serialized string of the <c>RetailTransactionTable</c>.
    /// Example:
    /// <TransactionHeader>
    ///   <TransactionId>TransactionId</TransactionId>
    ///   <ReceiptId>ReceiptId</ReceiptId>
    ///   <Store>Store</Store>
    ///   <Terminal>Terminal</Terminal>
    ///   <Staff>Staff</Staff>
    ///   <TransactionDate>TransactionDate</TransactionDate>
    ///   <Shift>Shift</Shift>
    ///   <ShiftDate>ShiftDate</ShiftDate>
    ///   <CustomerAccount>CustomerAccount</CustomerAccount>
    ///   <EntryStatus>EntryStatus</EntryStatus> (This should always be none)
    ///   <Currency>Currency</Currency>
    ///   <PaymentAmount>PaymentAmount</PaymentAmount>
    ///   <BatchId>BatchId</BatchId>
    ///   <LoyaltyCardId>LoyaltyCardId</LoyaltyCardId>
    ///   <HasLoyaltyPayment>true</HasLoyaltyPayment>
    /// </TransactionHeader>
    /// </returns>
    /// <remarks>
    /// Copied from RetailTransactionServiceTransactions. 
    /// Entry status is always set to none. 
    ///</remarks>
    private static str fillTransactionTable(RetailTransactionTable transactionTable)
    {
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot,xmlRecord;
        boolean             hasLoyaltyPayment;

        xmlDoc = XmlDocument::newBlank('Unicode');
        xmlRoot = xmlDoc.createElement('TransactionHeader');

        xmlRecord = xmlDoc.createElement('TransactionId');
        xmlRecord.innerText(transactionTable.TransactionId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ReceiptId');
        xmlRecord.innerText(transactionTable.ReceiptId);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Store');
        xmlRecord.innerText(transactionTable.Store);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Terminal');
        xmlRecord.innerText(transactionTable.Terminal);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Staff');
        xmlRecord.innerText(transactionTable.Staff);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CommissionSalesGroup');
        xmlRecord.innerText(transactionTable.SalesGroup);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('TransactionDate');
        xmlRecord.innerText(date2str(transactionTable.TransDate,
                                    321,
                                    DateDay::Digits2,
                                    DateSeparator::Hyphen, // separator1
                                    DateMonth::Digits2,
                                    DateSeparator::Hyphen, // separator2
                                    DateYear::Digits4,
                                    DateFlags::None));

        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Shift');
        xmlRecord.innerText(transactionTable.Shift);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('ShiftDate');
        xmlRecord.innerText(date2str(transactionTable.ShiftDate,
                                    321,
                                    DateDay::Digits2,
                                    DateSeparator::Hyphen, // separator1
                                    DateMonth::Digits2,
                                    DateSeparator::Hyphen, // separator2
                                    DateYear::Digits4,
                                    DateFlags::None));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('CustomerAccount');
        xmlRecord.innerText(transactionTable.CustAccount);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('EntryStatus');
        xmlRecord.innerText(int2str(enum2int(RetailEntryStatus::None)));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('Currency');
        xmlRecord.innerText(transactionTable.Currency);
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('PaymentAmount');
        xmlRecord.innerText(RetailTransactionServiceUtilities::realToString(transactionTable.PaymentAmount));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('BatchId');
        xmlRecord.innerText(int642str(transactionTable.BatchID));
        xmlRoot.appendChild(xmlRecord);

        xmlRecord = xmlDoc.createElement('LoyaltyCardId');
        xmlRecord.innerText(transactionTable.loyaltyCardId);
        xmlRoot.appendChild(xmlRecord);

        hasLoyaltyPayment = RetailLoyaltyCardRewardPointTrans::IsTransactionPaidByLoyalty(
            transactionTable.transactionId,
            transactionTable.store,
            transactionTable.terminal,
            transactionTable.Channel,
            transactionTable.dataAreaId);
        xmlRecord = xmlDoc.createElement('HasLoyaltyPayment');
        xmlRecord.innerText(hasLoyaltyPayment ? #TrueStr : #FalseStr);
        xmlRoot.appendChild(xmlRecord);

        xmlDoc.appendChild(xmlRoot);

        return xmlDoc.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a list of <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="transactionTable">
    /// Table buffer of <c>RetailTransactionTable</c> table.
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionSalesTrans</c> table.
    /// Example:
    /// <ArrayOfTransactionItem>
    ///   <TransactionItem>
    ///    <TransactionId />
    ///    <Store></Store>
    ///    <TerminalId></TerminalId>
    ///    <ReceiptId></ReceiptId>
    ///    <LineNumber></LineNumber>
    ///    <ListingId></ListingId>
    ///    <Barcode></Barcode>
    ///    <ItemId></ItemId>
    ///    <VariantId />
    ///    <Status />
    ///    <Comment></Comment>
    ///    <InventBatchId></InventBatchId>
    ///    <ReturnQuantity />
    ///    <Price></Price>
    ///    <NetPrice></NetPrice>
    ///    <Quantity></Quantity>
    ///    <TaxGroup />
    ///    <TaxAmount />
    ///    <TotalDiscountAmount />
    ///    <TotalDiscountPercentage />
    ///    <LineDiscountAmount></LineDiscountAmount>
    ///    <Unit />
    ///    <UnitQuantity />
    ///    <InventSerialId></InventSerialId>
    ///    <RFIDTagId />
    ///    <OriginalTaxGroup></OriginalTaxGroup>
    ///    <TaxItemGroup />
    ///    <OriginalTaxItemGroup></OriginalTaxItemGroup>
    ///    <PeriodicDiscountType></PeriodicDiscountType>
    ///    <PeriodicDiscountAmount />
    ///    <DiscountAmount />
    ///  </TransactionItem>
    ///</ArrayOfTransactionItem>
    /// </returns>
    private static str fillSalesTrans(RetailTransactionTable transactionTable)
    {
        RetailTransactionSalesTrans     transactionSalesTrans;
        RetailTransactionTaxTransGTE    transTaxTransGTE;
        NoYes                           isTaxIncludedInPrice;
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot,xmlRecord,xmlEntry;

        xmlDoc = XmlDocument::newBlank('Unicode');
        xmlRoot = xmlDoc.createElement('ArrayOfTransactionItem');

        while select    TransactionId, Store, TerminalId, ReceiptId, LineNum, ListingId,
                        Barcode, ItemId, VariantId, TransactionStatus, Comment, SalesGroup,
                        InventBatchId, ReturnQty, Price, NetPrice, NetAmount, NetAmountInclTax, Qty,
                        TaxGroup, TaxAmount, TotalDiscAmount, TotalDiscPct, LineDscAmount,
                        PeriodicDiscAmount, DiscAmount, DiscAmountWithoutTax, Unit, UnitQty, InventSerialId,
                        PeriodicPercentageDiscount, LineManualDiscountAmount, LineManualDiscountPercentage,
                        rfidTagId, OriginalTaxGroup, TaxItemGroup, OriginalTaxItemGroup, PeriodicDiscType,
                        originalPrice, priceChange
                        // <GEERU>
                        , LoyaltyDiscPct_RU
                        // </GEERU>
                        from transactionSalesTrans
            where transactionSalesTrans.TransactionId      == transactionTable.TransactionId
                && transactionSalesTrans.Store             == transactionTable.Store
                && transactionSalesTrans.TerminalId        == transactionTable.Terminal
                && transactionSalesTrans.Channel           == transactionTable.Channel
                && transactionSalesTrans.transactionStatus != RetailEntryStatus::Voided
        {
            xmlRecord = xmlDoc.createElement('TransactionItem');

            xmlEntry = xmlDoc.createElement('TransactionId');
            xmlEntry.innerText(transactionSalesTrans.TransactionId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Store');
            xmlEntry.innerText(transactionSalesTrans.Store);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TerminalId');
            xmlEntry.innerText(transactionSalesTrans.TerminalId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('ReceiptId');
            xmlEntry.innerText(transactionSalesTrans.ReceiptId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('LineNumber');
            xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(transactionSalesTrans.LineNum));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('ListingId');
            xmlEntry.innerText(transactionSalesTrans.ListingId ? transactionSalesTrans.ListingId : '0');
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Barcode');
            xmlEntry.innerText(transactionSalesTrans.Barcode);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('ItemId');
            xmlEntry.innerText(transactionSalesTrans.ItemId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('VariantId');
            xmlEntry.innerText(transactionSalesTrans.VariantId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Status');
            xmlEntry.innerText(int2str(enum2int(RetailEntryStatus::None)));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Comment');
            xmlEntry.innerText(transactionSalesTrans.Comment);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('CommissionSalesGroup');
            xmlEntry.innerText(transactionSalesTrans.SalesGroup);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('InventBatchId');
            xmlEntry.innerText(transactionSalesTrans.InventBatchId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('ReturnQuantity');
            xmlEntry.innerText(num2str(transactionSalesTrans.ReturnQty,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Price');
            xmlEntry.innerText(num2str(transactionSalesTrans.Price,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('NetPrice');
            xmlEntry.innerText(num2str(transactionSalesTrans.NetPrice,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('NetAmount');
            xmlEntry.innerText(num2str(transactionSalesTrans.NetAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('NetAmountInclusiveTax');
            xmlEntry.innerText(num2str(transactionSalesTrans.NetAmountInclTax,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Quantity');
            xmlEntry.innerText(num2str(transactionSalesTrans.Qty,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TaxGroup');
            xmlEntry.innerText(transactionSalesTrans.TaxGroup);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TaxAmount');
            xmlEntry.innerText(num2str(transactionSalesTrans.TaxAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TotalDiscountAmount');
            xmlEntry.innerText(num2str(transactionSalesTrans.TotalDiscAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TotalDiscountPercentage');
            xmlEntry.innerText(num2str(transactionSalesTrans.TotalDiscPct,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('LineDiscountAmount');
            xmlEntry.innerText(num2str(transactionSalesTrans.LineDscAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('PeriodicDiscountAmount');
            xmlEntry.innerText(num2str(transactionSalesTrans.PeriodicDiscAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(#ColumnPeriodicPercentageDiscount);
            xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.PeriodicPercentageDiscount));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(#ColumnLineManualDiscountAmount);
            xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.LineManualDiscountAmount));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(#ColumnLineManualDiscountPercentage);
            xmlEntry.innerText(RetailTransactionServiceUtilities::realToString(transactionSalesTrans.LineManualDiscountPercentage));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(discAmountColumn);
            xmlEntry.innerText(num2str(transactionSalesTrans.DiscAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(discAmountWithoutTaxColumn);
            xmlEntry.innerText(num2str(transactionSalesTrans.discAmountWithoutTax,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Unit');
            xmlEntry.innerText(transactionSalesTrans.Unit);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('UnitQuantity');
            xmlEntry.innerText(num2str(transactionSalesTrans.UnitQty,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('InventSerialId');
            xmlEntry.innerText(transactionSalesTrans.InventSerialId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('RFIDTagId');
            xmlEntry.innerText(transactionSalesTrans.rfidTagId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('OriginalTaxGroup');
            xmlEntry.innerText(transactionSalesTrans.OriginalTaxGroup);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TaxItemGroup');
            xmlEntry.innerText(transactionSalesTrans.TaxItemGroup);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('OriginalTaxItemGroup');
            xmlEntry.innerText(transactionSalesTrans.OriginalTaxItemGroup);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('PeriodicDiscountType');
            xmlEntry.innerText(int2str(enum2int(transactionSalesTrans.PeriodicDiscType)));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('OriginalPrice');
            xmlEntry.innerText(num2str(transactionSalesTrans.originalPrice,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('PriceChange');
            xmlEntry.innerText(int2str(enum2int(transactionSalesTrans.priceChange)));
            xmlRecord.appendChild(xmlEntry);

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                xmlEntry = xmlDoc.createElement('LoyaltyDiscountPercentage');
                xmlEntry.innerText(num2str(transactionSalesTrans.LoyaltyDiscPct_RU,5,3,1,0));
                xmlRecord.appendChild(xmlEntry);
            }
            // </GEERU>

            xmlRoot.appendChild(xmlRecord);
        }

        xmlDoc.appendChild(xmlRoot);
        return xmlDoc.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLoyaltyTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the loyalty card of the transaction.
    /// </summary>
    /// <param name="transactionTable">
    /// Table buffer of <c>RetailTransactionTable</c> table.
    /// </param>
    /// <returns>
    /// The loyalty card of the transaction.
    /// </returns>
    private static str fillLoyaltyTrans(RetailTransactionTable transactionTable)
    {
        RetailTransactionLoyaltyRewardPointTrans transactionLoyaltyTrans;
        if (transactionTable.loyaltyCardId)
        {
            return transactionTable.loyaltyCardId;
        }
        else
        {
            select firstonly CardNumber from transactionLoyaltyTrans
                where transactionLoyaltyTrans.TransactionId == transactionTable.TransactionId
                   && transactionLoyaltyTrans.StoreId       == transactionTable.Store
                   && transactionLoyaltyTrans.TerminalId    == transactionTable.Terminal
                   && transactionLoyaltyTrans.EntryType != RetailLoyaltyRewardPointEntryType::Redeem
                   && transactionLoyaltyTrans.EntryType != RetailLoyaltyRewardPointEntryType::Refund;

            return transactionLoyaltyTrans.CardNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDiscountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the serialized xml string of a list of <c>discountTrans</c> having the data of the <c>RetailTransactionDiscountTrans</c> table.
    /// </summary>
    /// <param name="transactionTable">
    /// Table buffer of <c>RetailTransactionTable</c> table.
    /// </param>
    /// <returns>
    /// XML serialized string of the <c>RetailTransactionDiscountTrans</c> table.
    /// Example:
    /// <ArrayOfTransactionDiscount>
    ///   <TransactionDiscount>
    ///    <TransactionId />
    ///    <StoreId />
    ///    <TerminalId />
    ///    <Amount />
    ///    <Channel />
    ///    <CustomerDiscountType />
    ///    <DiscountCode />
    ///    <DiscountCost />
    ///    <DiscountOriginType />
    ///    <LineNum />
    ///    <ManualDiscountType />
    ///    <Origin />
    ///    <PeriodicDiscountOfferId />
    ///    <ReplicationCounterFromOrigin />
    ///    <SaleLineNum />
    ///  </TransactionDiscount>
    ///</ArrayOfTransactionDiscount>
    /// </returns>
    private static str fillDiscountTrans(RetailTransactionTable transactionTable)
    {
        RetailTransactionSalesTrans salesTrans;
        RetailTransactionDiscountTrans discountTrans;
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot;

        boolean hasLineDiscountLines = false;
        boolean hasTotalDiscountLines = false;
        boolean hasPeriodicDiscountLines = false;

        RetailPeriodicDiscount retailDiscount;
        DiscAmount discountAmount;

        void addDiscountTransToXml()
        {
            XmlElement xmlRecord, xmlEntry;
            xmlRecord = xmlDoc.createElement('TransactionItemDiscount');

            xmlEntry = xmlDoc.createElement('TransactionId');
            xmlEntry.innerText(discountTrans.TransactionId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('StoreId');
            xmlEntry.innerText(discountTrans.StoreId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('TerminalId');
            xmlEntry.innerText(discountTrans.TerminalId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(#ColumnDealPrice);
            xmlEntry.innerText(num2str(discountTrans.DealPrice,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('DiscountAmount');
            xmlEntry.innerText(num2str(discountAmount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Percentage');
            xmlEntry.innerText(num2str(discountTrans.Percentage,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Amount');
            xmlEntry.innerText(num2str(discountTrans.Amount,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Channel');
            xmlEntry.innerText(int642str(discountTrans.Channel));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('CustomerDiscountType');
            xmlEntry.innerText(int2str(enum2int(discountTrans.CustomerDiscountType)));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('DiscountCode');
            xmlEntry.innerText(discountTrans.DiscountCode);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('DiscountCost');
            xmlEntry.innerText(num2str(discountTrans.DiscountCost,5,3,1,0));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('DiscountOriginType');
            xmlEntry.innerText(int2str(enum2int(discountTrans.DiscountOriginType)));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('LineNum');
            xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(discountTrans.LineNum));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('ManualDiscountType');
            xmlEntry.innerText(int2str(enum2int(discountTrans.ManualDiscountType)));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('Origin');
            xmlEntry.innerText(discountTrans.Origin);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('PeriodicDiscountOfferId');
            xmlEntry.innerText(discountTrans.PeriodicDiscountOfferId);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement(#OfferName);
            xmlEntry.innerText(retailDiscount.Name);
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('ReplicationCounterFromOrigin');
            xmlEntry.innerText(int2str(discountTrans.ReplicationCounterFromOrigin));
            xmlRecord.appendChild(xmlEntry);

            xmlEntry = xmlDoc.createElement('SaleLineNum');
            xmlEntry.innerText(RetailTransactionServiceUtilities::lineNumToString(discountTrans.SaleLineNum));
            xmlRecord.appendChild(xmlEntry);

            xmlRoot.appendChild(xmlRecord);
        }

        xmlDoc = XmlDocument::newBlank('Unicode');
        xmlRoot = xmlDoc.createElement('ArrayOfTransactionItemDiscount');

        while select TransactionId, Store, TerminalId, ReceiptId, LineNum, Qty,
                     TotalDiscAmount, TotalDiscPct, LineDscAmount,
                     PeriodicDiscAmount, DiscAmount, PeriodicPercentageDiscount,
                     LineManualDiscountAmount, LineManualDiscountPercentage
            from salesTrans
                where salesTrans.TransactionId   == transactionTable.TransactionId
                    && salesTrans.store        == transactionTable.Store
                    && salesTrans.TerminalId     == transactionTable.Terminal
        {
            hasPeriodicDiscountLines = false;
            hasLineDiscountLines = false;
            hasTotalDiscountLines = false;

            while select discountTrans
                where discountTrans.TransactionId   == transactionTable.TransactionId
                    && discountTrans.StoreId        == transactionTable.Store
                    && discountTrans.TerminalId     == transactionTable.Terminal
                    && discountTrans.SaleLineNum    == salesTrans.LineNum
                outer join Name from retailDiscount
                    where discountTrans.PeriodicDiscountOfferId
                        && retailDiscount.OfferId == discountTrans.PeriodicDiscountOfferId
            {
                // Backfill discount amount for R2 customer orders.
                discountAmount = discountTrans.DiscountAmount;
                if (!discountAmount && !discountTrans.Percentage)
                {
                    discountAmount = salesTrans.qty ? discountTrans.Amount / salesTrans.qty : 0;
                }

                if (discountTrans.DiscountOriginType == RetailDiscountOriginType::Periodic)
                {
                    hasPeriodicDiscountLines = true;
                }
                else if (discountTrans.DiscountOriginType == RetailDiscountOriginType::Customer)
                {
                    if (discountTrans.CustomerDiscountType != RetailCustomerDiscountType::TotalDiscount)
                    {
                        hasLineDiscountLines = true;
                    }
                    else
                    {
                        hasTotalDiscountLines = true;
                    }
                }
                else if (discountTrans.DiscountOriginType == RetailDiscountOriginType::Manual)
                {
                    if (discountTrans.ManualDiscountType == RetailManualDiscountType::LineDiscountAmount ||
                        discountTrans.ManualDiscountType == RetailManualDiscountType::LineDiscountPercent)
                    {
                        hasLineDiscountLines = true;
                    }
                    else
                    {
                        hasTotalDiscountLines = true;
                    }
                }

                addDiscountTransToXml();
            }

            // Backfill periodic discount transaction.
            discountAmount = 0;
            retailDiscount.clear();

            if (salesTrans.periodicDiscAmount && !hasPeriodicDiscountLines)
            {
                discountTrans = RetailTransactionServiceTransactionsAX63::backfillDiscountTrans(salesTrans, true, false, false);
                addDiscountTransToXml();
            }

            // Backfill customer line discount transaction.
            if (salesTrans.lineDscAmount && !hasLineDiscountLines)
            {
                discountTrans = RetailTransactionServiceTransactionsAX63::backfillDiscountTrans(salesTrans, false, true, false);
                addDiscountTransToXml();
            }

            // Backfill customer total discount transaction.
            if (salesTrans.totalDiscAmount && !hasTotalDiscountLines)
            {
                discountTrans = RetailTransactionServiceTransactionsAX63::backfillDiscountTrans(salesTrans, false, false, true);
                addDiscountTransToXml();
            }
        }

        xmlDoc.appendChild(xmlRoot);
        return xmlDoc.toString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>