<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransEmplInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransEmplInvoice extends ProjTransEmpl
{
    ProjInvoiceEmpl projInvoiceEmpl;

    boolean             calcTransCost;
    Amount              transCost;
    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projInvoiceEmpl.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projInvoiceEmpl.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        CostPrice ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplInvoice)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projInvoiceEmpl.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projInvoiceEmpl.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return ProjProposalJour::find(projInvoiceEmpl.projInvoiceJour().ProposalId).FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST               ret;
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplInvoice)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projInvoiceEmplDetail
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                {
                    projTransSale = ProjTrans::newProjInvoiceEmplSale(projInvoiceEmpl, projInvoiceEmplDetail);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    ProjLinePropertyId linePropertyId()
    {
        return ProjEmplTrans::find(this.transId()).LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjInvoiceEmpl _projInvoiceEmpl)
    {
        projInvoiceEmpl  =  _projInvoiceEmpl;

        super(_projInvoiceEmpl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projInvoiceEmpl.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projInvoiceEmpl.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        return projInvoiceEmpl.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return projInvoiceEmpl.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projInvoiceEmpl.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projInvoiceEmpl.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplInvoice)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjInvoiceEmpl));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projInvoiceEmpl.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projInvoiceEmpl.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public Amount transCost()
    {
        Amount                  ret;
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;
        ProjEmplTransCost       projEmplTransCost;
        container               con;
        Query                   query;
        QueryRun                queryRun;
        ProjTrans               projTransCost;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplInvoice)))
        {
            if (!calcTransCost)
            {
                calcTransCost = true;
                while select projInvoiceEmplDetail
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                {
                    con = ProjEmplTransCost::findForSalesRefRecId(projInvoiceEmplDetail.SaleRefRecId);
                    query = new Query(con);
                    queryRun = new QueryRun(query);
                    while (queryRun.next())
                    {
                        projEmplTransCost = queryRun.get(tableNum(ProjEmplTransCost));

                        projTransCost = ProjTrans::newProjInvoiceEmplCost(projInvoiceEmpl, projInvoiceEmplDetail, projEmplTransCost);
                        transCost += projTransCost.transCost();
                    }
                }
            }

            ret = transCost;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return projInvoiceEmpl.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    public TransactionID transId()
    {
        return projInvoiceEmpl.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplInvoice)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projInvoiceEmplDetail
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                {
                    projTransSale = ProjTrans::newProjInvoiceEmplSale(projInvoiceEmpl, projInvoiceEmplDetail);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return projInvoiceEmpl.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
