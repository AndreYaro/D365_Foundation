<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_RCashCountStmt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class used for output to excel of cash count statement.
/// </summary>
public class XmlExcelReport_RCashCountStmt_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    TmpRCashCountStatementTable sourceTable;
    TransDate todate;
    int statementNum;
    AccountNum cashAccount;
    boolean printRCashName;

    RNumDateInWordConverter converter;
    OfficialsTable_RU officials;

    protected const str Page1 = 'PAGE1';
    protected const str Page2 = 'PAGE2';
    protected const str Member1 = 'MEMBER1';
    protected const str Member2 = 'MEMBER2';
    protected const str InCharge = 'INCHARGE';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        const int widthCols_RCashCountStmt_RU = 112;

        curWorksheetNum = 1;

        widthCols = widthCols_RCashCountStmt_RU;
        document.setWorksheetSpans(widthCols);

        this.initSectionMap();

        converter = RNumDateInWordConverter::construct();

        this.execute(Page1);

        select officials
            where officials.ReportType == OffReportType_RU::CashCountStatement &&
                officials.Position == OffPosition_RU::Member;

        Counter MemberCounter = 0;

        while (officials)
        {
            if (MemberCounter == 1)
            {
                this.execute(Member1);
            }
            else
            {
                this.execute(Member2);
            }

            MemberCounter++;

            next officials;
        }

        this.execute(InCharge);

        document.insertPageBreak(currentRow, curWorksheetNum);
        this.execute(Page2);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RCashCountStatement';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + int2str(statementNum) + '_'+ date2str(todate, 321, 2, 0, 2, 0, 2, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'CashCountStatement';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case Page1:
                this.fillPage1();
                break;
            case Page2:
                this.fillPage2();
                break;
            case Member1:
                this.fillMember1();
                break;
            case Member2:
                this.fillMember2();
                break;
            case InCharge:
                this.fillInCharge();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills InCharge section with data
    /// </summary>
    private void fillInCharge()
    {
        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::InCharge);

        this.insertValueToSection('InChargeTitle', officials.Title);
        this.insertValueToSection('InChargeName', officials.Name);
        this.insertValueToSection('TransDate3', todate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMember1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Member1 section with data
    /// </summary>
    private void fillMember1()
    {
        this.insertValueToSection('Member1Title', officials.Title);
        this.insertValueToSection('Member1Name', officials.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMember2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Member2 section with data
    /// </summary>
    private void fillMember2()
    {
        this.insertValueToSection('Member2Title', officials.Title);
        this.insertValueToSection('Member2Name', officials.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Page1 with data
    /// </summary>
    private void fillPage1()
    {
        const int lineLen = 51;

        

        select sum(CountedAmountMST), sum(PostedAmountMST), sum(ExchAdj) from sourceTable;

        AmountMST countedAmount = sourceTable.CountedAmountMST;
        AmountMST postedAmount = sourceTable.PostedAmountMST + sourceTable.ExchAdj;
        AmountMST delta = countedAmount - postedAmount;

        AmountMST countedAmounts[];

        while select sum(CountedAmountMST) from sourceTable group by CashCountStatementType
        {
            countedAmounts[any2int(sourceTable.CashCountStatementType)] = sourceTable.CountedAmountMST;
        }

        AmountMST countedAmountCash = countedAmounts[ any2int(RCashCountStatementType::Cash) ];
        AmountMST countedAmountStamps = countedAmounts[ any2int(RCashCountStatementType::Stamps) ];
        AmountMST countedAmountSecurities = countedAmounts[ any2int(RCashCountStatementType::Securities) ];
        AmountMST countedAmountOther = countedAmounts[ any2int(RCashCountStatementType::Other) ];

        CompanyInfo companyInfo = CompanyInfo::find();

        this.insertValueToSection('CompanyName', companyInfo.Name);
        this.insertValueToSection('OKPO', CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, todate));
        this.insertValueToSection('OKDP', CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, todate));
        this.insertValueToSection('StatementNum', statementNum);
        this.insertValueToSection('TransDate1', todate);
        this.insertValueToSection('TransDate2', todate);

        if (printRCashName)
        {
            this.insertValueToSection('DeptName', RCashTable::find(cashAccount).Name);
        }

        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::InCharge);

        this.insertValueToSection('OffTitle', officials.Title);
        this.insertValueToSection('OffName', officials.Name);

        // Amount counted
        this.insertAmount('AmountCash', 'AmountFracCash', countedAmountCash);
        this.insertAmount('AmountStamps', 'AmountFracStamps', countedAmountStamps);
        this.insertAmount('AmountSecurities', 'AmountFracSecurities', countedAmountSecurities);
        this.insertAmount('AmountOther', 'AmountFracOther', countedAmountOther);
        this.insertAmount('AmountCountedInt', 'AmountCountedFrac100', countedAmount);

        str counterAmountStr1;
        str countedAmountStr2;

        [counterAmountStr1, countedAmountStr2] = XMLExcelReport_RU::splitStrByLines(converter.numeralsToTxt(countedAmount), [lineLen]);

        this.insertValueToSection('AmountCountedIntWord1', counterAmountStr1);
        this.insertValueToSection('AmountCountedIntWord2', countedAmountStr2);
        this.insertValueToSection('AmountCountedIntCent', num2str(frac(countedAmount) * 100, 0, 0, 0, 0));

        // Amount posted
        this.insertAmount('AmountPosted', 'AmountPostedFrac', countedAmount - delta);

        str postedAmountStr1;
        str postedAmountStr2;

        [postedAmountStr1, postedAmountStr2] = XMLExcelReport_RU::splitStrByLines(converter.numeralsToTxt(countedAmount - delta), [lineLen]);

        this.insertValueToSection ('AmountPostedWord1', postedAmountStr1);
        this.insertValueToSection ('AmountPostedWord2', postedAmountStr2);
        this.insertValueToSection ('AmountPostedCent', num2str(frac(countedAmount - delta) * 100, 0, 0, 0, 0));

        // Difference
        if (delta > 0)
        {
            this.insertAmount('DiffPosInt', 'DiffPosFrac', delta);
        }
        else if (delta < 0)
        {
            this.insertAmount('DiffNegInt', 'DiffNegFrac', -delta);
        }

        // Last slip id's
        TransDate maxTransDate = (select firstonly maxof(TransDate) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate <= todate &&
                rCashTrans.DocType == RCashDocType::ReimbursementSlip).TransDate;

        this.insertValueToSection('ReimbDocId', (select firstonly maxof(DocId) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate == maxTransDate &&
                rCashTrans.DocType == RCashDocType::ReimbursementSlip).DocId);

        maxTransDate = (select firstonly maxof(TransDate) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate <= todate &&
                rCashTrans.DocType == RCashDocType::DisbursementSlip).TransDate;

        this.insertValueToSection('DisbDocId', (select firstonly maxof(DocId) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate == maxTransDate &&
                rCashTrans.DocType == RCashDocType::DisbursementSlip).DocId);

        // Signatures
        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::Chairman);

        this.insertValueToSection('ChairmanTitle', officials.Title);
        this.insertValueToSection('ChairmanName', officials.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Page2 with data
    /// </summary>
    private void fillPage2()
    {
        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::InCharge);

        this.insertValueToSection('InCharge2Title', officials.Title);
        this.insertValueToSection('InCharge2Name', officials.Name);

        officials = OfficialsTable_RU::findDirector();

        this.insertValueToSection('DirectorTitle', officials.Title);
        this.insertValueToSection('DirectorName', officials.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(Page1);
        this.addSection(Page2);
        this.addSection(Member1);
        this.addSection(Member2);
        this.addSection(InCharge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts amount to two fields, where first one is whole, and second one is penny
    /// </summary>
    /// <param name="_whole">
    /// Bookmark where whole number should be printed
    /// </param>
    /// <param name="_penny">
    /// Bookmark where penny value should be printed
    /// </param>
    /// <param name="_amount">
    /// Amount to be printed
    /// </param>
    private void insertAmount(Bookmark _whole, Bookmark _penny, Amount _amount)
    {
        real penny = frac(_amount);

        this.insertValueToSection(_whole, num2str(_amount - penny, 0, 0, 0, 0));
        this.insertValueToSection(_penny, num2str(penny * 100, 0, 0, 0, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>positive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nullifies entry if its less than zero
    /// </summary>
    /// <param name="_entry">
    /// Entry to be checked
    /// </param>
    /// <returns>
    /// Entry if it's greater than zero; otherwise 0
    /// </returns>
    private int positive(int _entry = 0)
    {
        return _entry > 0 ? _entry : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes object with data
    /// </summary>
    /// <param name="_sourceTable">
    /// A temporary table which holds data about cash count statement
    /// </param>
    /// <param name="_cashAccount">
    /// Cash account statement created for
    /// </param>
    /// <param name="_todate">
    /// Date to which statement build
    /// </param>
    /// <param name="_statementNum">
    /// Number of statement
    /// </param>
    /// <param name="_printRCashName">
    /// Determines whether cash account name should be printer at the field department name
    /// </param>
    public void setValue(
        TmpRCashCountStatementTable _sourceTable,
        AccountNum _cashAccount,
        TransDate _todate,
        int _statementNum,
        boolean _printRCashName)
    {
        sourceTable = _sourceTable;
        cashAccount = _cashAccount;
        todate = _todate;
        statementNum = _statementNum;
        printRCashName = _printRCashName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return 'RCashCountStatement_xlsx';
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int totalCells = 42;
        return totalCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static XMLExcelReport_RCashCountStmt_RU construct()
    {
        return new XMLExcelReport_RCashCountStmt_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>