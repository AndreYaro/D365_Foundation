<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRLedgerJournal_CustPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The class <c>MCRLedgerJournal_CustPayment</c> creates
/// accounts receiable payment journals.
/// </summary>
class MCRLedgerJournal_CustPayment extends MCRLedgerJournal
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans createLedgerJournalTrans(AmountCurCredit      _amtCurCredit,
                                                       AmountCurDebit       _amtCurDebit,
                                                       LedgerJournalACType  _ledgerJournalACType = LedgerJournalACType::Bank)
    {
        System.Exception exception;
        LedgerJournalTrans ledgerJournalTrans;

        // Validate the input to the ledger journal trans and ensure that a ledgerjournaltable
        // exists before creating the ledger journalTrans.

        if (this.validateInputLedgerJourTrans(_amtCurCredit, _amtCurDebit)
            && ledgerJournalTable.RecId != 0)
        {
            this.initLedgerJournalTrans(ledgerJournalTrans);

            ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
            ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;

            // If the ledger account has not been set by the parm method then set it here.
            if (!ledgerAccount)
            {
                ledgerAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(accountNum, LedgerJournalACType::Cust);
            }

            ledgerJournalTrans.LedgerDimension = ledgerAccount;

            MCRCustPaymTable mcrCustPaymTable = MCRCustPaymTable::findByRecID(mcrRefPaymID);
            SalesTable salesTable;

            if (mcrCustPaymTable.RefTableId == tablenum(SalesTable))
            {
                salesTable = SalesTable::findRecId(mcrCustPaymTable.RefRecId);
            }

            DimensionDefault customerDefault = 0;
            if (salesTable.RecId != 0)
            {
                CustTable custTable = CustTable::find(salesTable.CustAccount);

                if (custTable.RecId != 0)
                {
                    customerDefault = custTable.DefaultDimension;
                }
            }

            if (salesTable && RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(salesTable, funcName()))
            {
                RetailStoreTenderTypeTable storeTenderTable = RetailStoreTenderTypeTable::find(mcrCustPaymTable.Channel, mcrCustPaymTable.TenderTypeId);

                // For Commerce Payments order unify the financial dimensions.
                ledgerJournalTrans.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(storeTenderTable.DefaultDimension, RetailChannelTable::findByRecId(mcrCustPaymTable.Channel).DefaultDimension, customerDefault);
                eventSource.EventWritePaymentsCreatingLedgerJournalForCommerceOrders(salesTable.RecId, mcrCustPaymTable.RecId, mcrCustPaymTable.Channel, storeTenderTable.tenderTypeId);
            }
            else
            {
                ledgerJournalTrans.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.parmDefaultDimension(), customerDefault);
            }

            ledgerJournalTrans.OffsetAccountType = ledgerOffsetAccountType;
            ledgerJournalTrans.OffsetLedgerDimension = ledgerOffsetAccount;
            ledgerJournalTrans.OffsetDefaultDimension = this.parmDefaultDimension();
            ledgerJournalTrans.TransactionType = LedgerTransType::Payment;
            ledgerJournalTrans.BankTransType = bankTransType;
            ledgerJournalTrans.PaymReference = paymReference;
            ledgerJournalTrans.MCRPaymOrderId = mcrPaymOrderID;
            ledgerJournalTrans.MCRRefPaymID = mcrRefPaymID;
            ledgerJournalTrans.Txt = transTxt;
            ledgerJournalTrans.PaymMode = paymentMode;
            ledgerJournalTrans.CurrencyCode = curCode;
            ledgerJournalTrans.ExchRate = exchRate;
            ledgerJournalTrans.Prepayment = prePay;
            ledgerJournalTrans.TaxGroup = this.parmTaxGroup();
            ledgerJournalTrans.TaxItemGroup = this.parmTaxItemGroup();
            ledgerJournalTrans.PostingProfile = postingProfile;
            ledgerJournalTrans.Approver = approver;
            ledgerJournalTrans.Approved = approved;

            if (LedgerParameters::isChineseVoucher_CN() && !ledgerJournalTrans.LedgerVoucherType_CN)
            {
                ledgerJournalTrans.createVoucherType_CN();
            }

            // If the correct payment status is not being passed in  chances are that this is being created
            // by posting logic which would expect the payment status to be approved.
            if (paymentStatus == CustVendPaymStatus::None)
            {
                paymentStatus = CustVendPaymStatus::Confirmed;
            }

            ledgerJournalTrans.PaymentStatus = paymentStatus;

            if (_amtCurCredit != 0)
            {
                ledgerJournalTrans.AmountCurCredit = _amtCurCredit;
            }

            if (_amtCurDebit != 0)
            {
                ledgerJournalTrans.AmountCurDebit = _amtCurDebit;
            }

            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                ledgerJournalTrans.modifyVatDueDate_W();
            }

            ledgerJournalTrans.initValue();
            ledgerJournalTrans.defaultRow();

            try
            {
                ledgerJournalTrans.insert();
            }
            catch
            {
                eventSource.EventWriteMCrCustPaymRefundCreationOrPostFailed(funcName(),tableStr(MCRCustPaymTable), MCRCustPaymTable.RecId, exception.ToString());
                throw error("@MCR39759");
            }
        }
        else
        {
            eventSource.EventWriteMCrCustPaymRefundCreationOrPostFailed(funcName(),tableStr(LedgerJournalTable), ledgerJournalTable.RecId, "@MCR39760");
            throw error("@MCR39760");
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this class.
    /// </summary>
    /// <param name="_ledgerJournalType">
    /// The type of journal to be used in the instantiation of this class.
    /// </param>
    /// <param name="_journalName">
    /// The name of the journal to be used in the instantiation of this
    /// class; optional.
    /// </param>
    /// <param name="_detailSummaryPosting">
    /// An enumeration denoting what level of detail to include in the
    /// ledger journal; optional.
    /// </param>
    public void new(LedgerJournalType _ledgerJournalType,
                    LedgerJournalNameId _journalName="",
                    DetailSummary    _detailSummaryPosting = DetailSummary::Detail)
    {
        if (_ledgerJournalType != LedgerJournalType::CustPayment)
        {
            throw error (strFmt("@MCR35774", funcName(),
                enum2str(LedgerJournalType::CustPayment)));
        }
        super(_ledgerJournalType, _journalName, _detailSummaryPosting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInputLedgerJourTrans</Name>
				<Source><![CDATA[
    protected boolean validateInputLedgerJourTrans(AmountCur _amtCurCredit,
                                            AmountCur _amtCurDebit)
    {
        boolean ret;

        ret = super(_amtCurCredit, _amtCurDebit);

        if (ret)
        {
            if (accountNum == ""
                && ledgerAccount == 0)
            {
                throw error(strFmt("@MCR35842", LedgerJournalType::CustPayment));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>