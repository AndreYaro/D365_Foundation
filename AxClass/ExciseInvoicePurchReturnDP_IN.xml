<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseInvoicePurchReturnDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ExciseInvoicePurchReturnDP_IN</c> class provides implementation of a data provider class for
///  excise invoice purch return reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(ExciseInvoicePurchReturnContract_IN))
]
public class ExciseInvoicePurchReturnDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    ExciseInvoicePurchHeaderFooterTmp_IN    headerFooterTmp;
    ExciseInvoicePurchTmp_IN                exciseInvoicePurchTmp;
    ExciseTaxAggregrateTmp_IN               exciseTaxAggregrateTmp;
    TaxInvoiceTransporterDetailsTmp_IN      taxInvoiceTransporterDetailsTmp;
    VendInvoiceJour                         vendInvoiceJour;
    AmountCur                               totalTaxAmountCur;
    ExciseInvoicePurchReturnContract_IN     exciseInvoicePurchReturnContract;
    ExciseInvoiceTaxTransTmp_IN             exciseInvoiceTaxTransTmp;
    ExciseInvoiceChargesTmp_IN              exciseInvoiceChargesTmp;
    AmountCur                               totalLineAmountCur;
    AmountCur                               totalChargesAmtCur;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    public void createData()
    {
        this.getDataFromContract();
        this.insertTaxDetails();
        this.insertInvoiceDetails();
        this.insertChargesInformation();
        this.insertIntoPurchInvoiceHeaderFooterTmp();
        this.insertTaxAggregrateInformation();
        this.insertTransporterDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        exciseInvoicePurchReturnContract = this.parmDataContract() as ExciseInvoicePurchReturnContract_IN;
        vendInvoiceJour = VendInvoiceJour::findRecId(exciseInvoicePurchReturnContract.parmVendInvoiceJourRecdId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseInvoiceChargesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceChargesTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceChargesTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceChargesTmp_IN))]
    public ExciseInvoiceChargesTmp_IN getExciseInvoiceChargesTmp()
    {
        select exciseInvoiceChargesTmp;
        return exciseInvoiceChargesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseInvoiceTmpTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceTmpTaxTrans_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceTmpTaxTrans_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceTaxTransTmp_IN))]
    public ExciseInvoiceTaxTransTmp_IN getExciseInvoiceTmpTaxTrans()
    {
        select exciseInvoiceTaxTransTmp;
        return exciseInvoiceTaxTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAggregrateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseTaxAggregrateTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseTaxAggregrateTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseTaxAggregrateTmp_IN))]
    public ExciseTaxAggregrateTmp_IN getExciseTaxAggregrateTmp()
    {
        select exciseTaxAggregrateTmp;
        return exciseTaxAggregrateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoicePurchHeaderFooterTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoicePurchHeaderFooterTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoicePurchHeaderFooterTmp_IN))]
    public ExciseInvoicePurchHeaderFooterTmp_IN getPurchInvoiceHeaderFooterTmp()
    {
        select headerFooterTmp;
        return headerFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoicePurchTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoicePurchTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoicePurchTmp_IN))]
    public ExciseInvoicePurchTmp_IN getPurchInvoiceTmp()
    {
        select exciseInvoicePurchTmp;
        return exciseInvoicePurchTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInvoiceTransporterDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>TaxInvoiceTransporterDetailsTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxInvoiceTransporterDetailsTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxInvoiceTransporterDetailsTmp_IN))]
    public TaxInvoiceTransporterDetailsTmp_IN getTaxInvoiceTransporterDetailsTmp()
    {
        select taxInvoiceTransporterDetailsTmp;
        return taxInvoiceTransporterDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChargesInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the charges information.
    /// </summary>
    private void insertChargesInformation()
    {
        MarkupTrans markupTrans;

        insert_recordset exciseInvoiceChargesTmp(Charges, ChargesAmountCur)
        select Txt, sum(Posted) from markupTrans
        group by markupTrans.Txt
            where markupTrans.Voucher == vendInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoPurchInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// <remarks>
    /// This method will insert the invoice header information into the <c>ExciseInvoicePurchHeaderFooterTmp_IN</c>
    /// table which is only used for ExciseInvoicePurchReturn report.
    /// </remarks>
    private void insertIntoPurchInvoiceHeaderFooterTmp()
    {
        VendInvoiceTrans                vendInvoiceTrans;
        TaxInformation_IN               exciseInvoicetaxInformation, vendTaxInformation;
        CompanyInfo                     companyInfo;
        VendTable                       vendTable;
        LogisticsLocation               logisticsLocation;
        VendInvoiceTransTaxExtensionIN  vendInvoiceTransTaxExtension;
        VendInvoiceJour_IN              vendInvoiceJourLoc;
        TimeExpected                    createdTime;

        companyInfo = CompanyInfo::find();
        vendInvoiceJourLoc = vendInvoiceJour.vendInvoiceJour_IN();
        vendTable = VendTable::find(vendInvoiceJour.InvoiceAccount);
        vendTaxInformation = TaxInformation_IN::findDefaultbyLocation(LogisticsLocation::find(DirPartyTable::findRec(vendTable.Party).PrimaryAddressLocation).RecId);

        headerFooterTmp.Currency = vendInvoiceJour.CurrencyCode;
        headerFooterTmp.VendName = vendTable.name();
        headerFooterTmp.VendAddress = vendTable.postalAddress().Address;
        headerFooterTmp.VendEmail = vendTable.email();
        headerFooterTmp.VendPhone = vendTable.phone();
        headerFooterTmp.VendFax = vendTable.telefax();
        headerFooterTmp.VendTINNumber = TaxRegistrationNumbers_IN::find(vendTaxInformation.TIN).RegistrationNumber;
        headerFooterTmp.VendCSTNumber = TaxRegistrationNumbers_IN::find(vendTaxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
        headerFooterTmp.DlvTerm = DlvTerm::find(vendInvoiceJour.DlvTerm).Txt;
        headerFooterTmp.PaymTerm = PaymTerm::find(vendInvoiceJour.Payment).Description;
        headerFooterTmp.PaymId = vendInvoiceJour.PaymId;
        createdTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(vendInvoiceJour.createdDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        headerFooterTmp.DateTimeOfInvoice = DateTimeUtil::newDateTime(vendInvoiceJour.InvoiceDate, createdTime);
        headerFooterTmp.Port = vendInvoiceJour.purchTable().Port;
        headerFooterTmp.InvoiceDiscAmtCur = vendInvoiceJour.EndDisc;
        headerFooterTmp.VendRef = vendInvoiceJour.InvoiceId;

        if (vendInvoiceJourLoc.ExciseInvoiceId)
        {
            headerFooterTmp.InvoiceId = vendInvoiceJourLoc.ExciseInvoiceId;
        }
        else
        {
            headerFooterTmp.InvoiceId = vendInvoiceJour.InvoiceId;
        }
        if (vendInvoiceJourLoc.ExciseInvoiceAddress == ExciseInvoiceAddressType_IN::CompanyAddress)
        {
            exciseInvoicetaxInformation = TaxInformation_IN::findDefaultbyLocation(DirParty::primaryPostalAddressLocationRecId(CompanyInfo::current()));

            this.updateTaxInformationDetails(exciseInvoicetaxInformation, headerFooterTmp);
            headerFooterTmp.LocationName = companyInfo.Name();
            headerFooterTmp.LocationAddress = companyInfo.postalAddress().Address;
            headerFooterTmp.LocationFax = companyInfo.teleFax();
            headerFooterTmp.LocationPhone = companyInfo.phone();
        }

        else
        {
            select firstOnly CompanyLocation_IN from vendInvoiceTrans order by LineNum asc
                where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId;
            logisticsLocation = LogisticsLocation::find(vendInvoiceTrans.CompanyLocation_IN);
            vendInvoiceTransTaxExtension = VendInvoiceTransTaxExtensionIN::findByVendInvoiceTrans(vendInvoiceTrans.RecId);
            exciseInvoicetaxInformation = TaxInformation_IN::find(vendInvoiceTransTaxExtension.TaxInformation_IN);

            headerFooterTmp.LocationName = logisticsLocation.Description;
            headerFooterTmp.LocationAddress = logisticsLocation.postalAddress();
            headerFooterTmp.LocationPhone = LogisticsElectronicAddress::findByLocationAndType(logisticsLocation.RecId, LogisticsElectronicAddressMethodType::Phone).Locator;
            headerFooterTmp.LocationFax = LogisticsElectronicAddress::findByLocationAndType(logisticsLocation.RecId, LogisticsElectronicAddressMethodType::Fax).Locator;
            this.updateTaxInformationDetails(exciseInvoicetaxInformation, headerFooterTmp);
        }

        headerFooterTmp.insert();
        this.updateInvoiceAmountCurInWords(headerFooterTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice detail information.
    /// </summary>
    private void insertInvoiceDetails()
    {
        VendInvoiceTrans     vendInvoiceTrans;
        ExciseTariffCodes_IN exciseTariffCode;

        insert_recordset exciseInvoicePurchTmp(PurchPriceAmtCur, LineDiscAmtCur, LineAmountCur, ItemId, VendInvoiceTransRecid,
                                               Description, InvoiceQty, PurchUnit, AssessableValue, TariffCode)
        select PurchPrice, LineDisc, LineAmount, ItemId, RecId,
               Name, Qty, PurchUnit, AssessableValue_IN
        from vendInvoiceTrans
            where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
        join TariffCode from exciseTariffCode
            where exciseTariffCode.RecId == vendInvoiceTrans.ExciseTariffCodes_IN;

        this.updateInvoiceTaxDetails(exciseInvoicePurchTmp);

        update_recordSet exciseInvoicePurchTmp
        setting ExciseDutyRate = (exciseInvoicePurchTmp.CentralExciseDutyAmtCur/exciseInvoicePurchTmp.SourceBaseAmountCur) * 100
            where exciseInvoicePurchTmp.CentralExciseDutyAmtCur != 0  && exciseInvoicePurchTmp.SourceBaseAmountCur != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxAggregrateInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tax aggregrate information.
    /// </summary>
    private void insertTaxAggregrateInformation()
    {
        TaxTrans_IN                       taxtrans;
        TaxReportingCode_IN               taxReportingCode;
        TaxReportingAggregrateCategory_IN taxReportingAggregrateCategory;
        TaxReportingTaxComponent_IN       taxReportingTaxComponent;
        TaxComponentTable_IN              taxComponentTable;

        taxReportingCode = TaxReportingCode_IN::findByReportingCode(TaxReporting_IN::ExciseInvoice);

        while select TaxAggregrateReportingCategory from taxReportingAggregrateCategory
            group by TaxAggregrateReportingCategory
            where taxReportingAggregrateCategory.TaxReportingCode == taxReportingCode.RecId
        join TaxReportingAggregrateCategory_IN, TaxComponentTable_IN from taxReportingTaxComponent
            where taxReportingTaxComponent.TaxReportingAggregrateCategory_IN == taxReportingAggregrateCategory.RecId
        join RecId from taxComponentTable
            where taxComponentTable.RecId == taxReportingTaxComponent.TaxComponentTable_IN
        join sum(SourceTaxAmountCur) from taxtrans
            where taxtrans.TaxComponentTable == taxComponentTable.RecId &&
                taxtrans.Voucher == vendInvoiceJour.LedgerVoucher &&
                    taxtrans.TransDate == vendInvoiceJour.InvoiceDate &&
                        taxtrans.SourceTableId == tableNum(PurchLine)

        {
            exciseTaxAggregrateTmp.AmountCurInWords = Global::numeralsToTxt(abs(taxtrans.SourceTaxAmountCur));
            exciseTaxAggregrateTmp.TaxAggregrateReportingCategory = taxReportingAggregrateCategory.TaxAggregrateReportingCategory;
            exciseTaxAggregrateTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    private void insertTaxDetails()
    {
        TaxTrans_IN taxTrans;
        TaxWithholdTrans_IN taxWithholdTrans;
        FormulaDesigner_IN formulaDesigner;

        insert_recordset exciseInvoiceTaxTransTmp (SalesTaxCode, SalesTaxAmtCur)
        select TaxCode from formulaDesigner
            order by formulaDesigner.ID
            group by formulaDesigner.TaxCode, formulaDesigner.ID
            join sum(SourceTaxAmountCur) from taxtrans
                where taxtrans.Voucher == vendInvoiceJour.LedgerVoucher &&
                    taxtrans.TransDate == vendInvoiceJour.InvoiceDate &&
                        taxtrans.SourceTableId == tableNum(PurchLine) &&
                            taxtrans.TaxCode == formulaDesigner.TaxCode &&
                                taxtrans.TaxItemGroup == formulaDesigner.TaxItemGroup;

        insert_recordset exciseInvoiceTaxTransTmp (SalesTaxAmtCur, SalesTaxCode)
        select sum(TaxWithholdAmountCur), TaxWithholdCode from taxWithholdTrans
            group by TaxWithholdCode
            where taxWithholdTrans.Voucher == vendInvoiceJour.LedgerVoucher &&
                taxWithholdTrans.TransDate == vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransporterDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the transporter detail information.
    /// </summary>
    private void insertTransporterDetails()
    {
        InventSiteGateEntry_IN      inventSiteGateEntry;
        InventSiteGateEntryLine_IN  inventSiteGateEntryLine;
        VendPackingSlipTrans        vendPackingSlipTrans;
        VendPackingSlipTrans_IN     vendPackingSlipTransLoc;
        DlvMode                     dlvMode;
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;

        insert_recordset taxInvoiceTransporterDetailsTmp (PackingSlipId, InventSiteGateEntry, DateTimeOfRemoval,
                                                             TransportationReceiptDate, TransportationReceiptNumber,
                                                              VehicleNumber, TransporterName)
        select PackingSlipId from inventTrans
            where inventTrans.InvoiceId == vendInvoiceJour.InvoiceId
        join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        join vendPackingSlipTrans
            where vendPackingSlipTrans.InventTransId == inventTransOrigin.InventTransId &&
                vendPackingSlipTrans.PackingSlipId == inventTrans.PackingSlipId
        join vendPackingSlipTransLoc
            where vendPackingSlipTransLoc.VendPackingSlipTrans == vendPackingSlipTrans.RecId
        join InventSiteGateEntry from inventSiteGateEntryLine
            where inventSiteGateEntryLine.RecId == vendPackingSlipTransLoc.InventSiteGateEntryLine
        join ExitDateAndTime, TransportationReceiptDate, TransportationReceiptNumber, VehicleNumber, TransportationDriverName from inventSiteGateEntry
            group by inventTrans.PackingSlipId, inventSiteGateEntryLine.InventSiteGateEntry, inventSiteGateEntry.ExitDateAndTime,
                inventSiteGateEntry.TransportationReceiptDate, inventSiteGateEntry.TransportationReceiptNumber,
                inventSiteGateEntry.VehicleNumber, inventSiteGateEntry.TransportationDriverName
            where inventSiteGateEntry.RecId == inventSiteGateEntryLine.InventSiteGateEntry;

        update_recordSet taxInvoiceTransporterDetailsTmp
        setting ModeOfTransport = dlvMode.Txt
        join Txt from dlvMode
            where dlvMode.Code == vendInvoiceJour.DlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.createData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceAmountCurInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the header invoice amount value.
    /// </summary>
    /// <param name="_headerFooterTmp">
    /// A <c>ExciseInvoicePurchHeaderFooterTmp_IN</c> record that contains header data.
    /// </param>
    private void updateInvoiceAmountCurInWords(ExciseInvoicePurchHeaderFooterTmp_IN _headerFooterTmp)
    {
        select sum(LineAmountCur) from exciseInvoicePurchTmp;
        totalLineAmountCur = abs(exciseInvoicePurchTmp.LineAmountCur);

        select sum(SalesTaxAmtCur) from exciseInvoiceTaxTransTmp;
        totalTaxAmountCur = abs(exciseInvoiceTaxTransTmp.SalesTaxAmtCur);

        select sum(ChargesAmountCur) from exciseInvoiceChargesTmp;
        totalChargesAmtCur = abs(exciseInvoiceChargesTmp.ChargesAmountCur);

        ttsBegin;

        select forUpdate InvoiceAmtCurInWords from _headerFooterTmp;
        _headerFooterTmp.InvoiceAmtCurInWords = Global::numeralsToTxt(totalLineAmountCur + totalTaxAmountCur + totalChargesAmtCur + vendInvoiceJour.EndDisc);
        _headerFooterTmp.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the invoice taxes information.
    /// </summary>
    /// <param name="_exciseInvoicePurchTmp">
    /// A <c>ExciseInvoicePurchTmp_IN</c> record that contains invoice data.
    /// </param>
    private void updateInvoiceTaxDetails(ExciseInvoicePurchTmp_IN _exciseInvoicePurchTmp)
    {
        TaxAmountCurView_IN taxAmountCurView;
        ttsBegin;

        while select forupdate _exciseInvoicePurchTmp
        join SourceTaxAmountCur from taxAmountCurView
            where taxAmountCurView.TransRecId == _exciseInvoicePurchTmp.VendInvoiceTransRecId &&
                taxAmountCurView.TaxType == TaxType_IN::Excise
        {
            _exciseInvoicePurchTmp.CentralExciseDutyAmtCur = abs(taxAmountCurView.SourceTaxAmountCur);
            _exciseInvoicePurchTmp.SourceBaseAmountCur = abs(taxAmountCurView.getExciseSourceBaseAmountCur(_exciseInvoicePurchTmp.VendInvoiceTransRecId, tableNum(VendInvoiceTrans)));
            _exciseInvoicePurchTmp.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInformationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the header taxes information.
    /// </summary>
    /// <param name="_taxInformation">
    /// A <c>TaxInformation_IN</c> record that contains tax information data.
    /// </param>
    /// <param name="exciseInvoicePurchHeaderFooterTmp">
    /// A <c>ExciseInvoicePurchHeaderFooterTmp_IN</c> record that contains header data.
    /// </param>
    private void updateTaxInformationDetails(TaxInformation_IN _taxInformation, ExciseInvoicePurchHeaderFooterTmp_IN exciseInvoicePurchHeaderFooterTmp)
    {
        exciseInvoicePurchHeaderFooterTmp.ECCNumber = TaxRegistrationNumbers_IN::find(_taxInformation.ManECCRegistrationNumberTable).RegistrationNumber;
        exciseInvoicePurchHeaderFooterTmp.Division  = _taxInformation.Division;
        exciseInvoicePurchHeaderFooterTmp.Range     = _taxInformation.Range;
        exciseInvoicePurchHeaderFooterTmp.Commissionarate = _taxInformation.Commissionarate;
        exciseInvoicePurchHeaderFooterTmp.TINNumber = TaxRegistrationNumbers_IN::find(_taxInformation.TIN).RegistrationNumber;
        exciseInvoicePurchHeaderFooterTmp.CSTNumber = TaxRegistrationNumbers_IN::find(_taxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
