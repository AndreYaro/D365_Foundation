<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ASOHFeatureVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A visibility manager for automatically enabling and disabling advanced order hold status feature.
/// </summary>
public static class ASOHFeatureVisibilityManager
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>menuItemVisibilityHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the menu item visibility based on feature management.
    /// </summary>
    /// <param name = "_rootMenu">Root menu.</param>
    /// <param name = "_subMenu">Sub menu.</param>
    /// <param name = "_subMenuVisibility">Whether or not the submenu should be visible.</param>
    /// <remarks>This will only hide the individual menu items if they are contained in a group that we will also be hiding.</remarks>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemVisibilityHandler(SysDictMenu _rootMenu, SysDictMenu _subMenu, SysBoxedBoolean _subMenuVisibility)
    {
        if (_subMenu.isMenuItem())
        {
            var metaElement = _subMenu.GetMenuItemMetaElement();
            if (metaElement != null)
            {
                ASOHFeatureVisibilityManager::setVisibilityForASOHMenuItems(metaElement.Name, _subMenuVisibility);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForASOHMenuItems</Name>
				<Source><![CDATA[
    private static void setVisibilityForASOHMenuItems(str _menuItemName, SysBoxedBoolean _subMenuVisibility)
    {
        const str ASOHManagementMenuItemsPrefix = "ASOH";

        if (strScan(_menuItemName, ASOHManagementMenuItemsPrefix, 0, strLen(_menuItemName)))
        {
            _subMenuVisibility.value = ASOHFeatureVisibilityManager::isEnabled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether advanced order hold status feature is enabled.
    /// </summary>
    /// <returns>True if advanced order hold status feature related forms need to be seen; otherwise, false.</returns>
    public static boolean isEnabled()
    {
        return isConfigurationkeyEnabled(configurationkeynum(ASOHOrderHold)) && 
                FeatureStateProvider::isFeatureEnabled(AdvancedOrderHoldStatusFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return to default dashboard when feature is not enabled
    /// </summary>
    /// <param name = "_sender">The form.</param>
    private static void checkFeatureEnabled(xFormRun _sender)
    {
        if (!ASOHFeatureVisibilityManager::isEnabled())
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(DefaultDashboard), MenuItemType::Display);
            menuFunction.run();

            info("@SCM:ASOHFeatureErrorMessage");

            _sender.close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingFollowingHoldsFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents opening of following holds form based on feature exposure.
    /// </summary>
    /// <param name="_sender">A form.</param>
    /// <param name="_eventArgs">Form event arguments.</param>
    [FormEventHandler(formStr(ASOHFollowingHolds), FormEventType::Initializing)]
    public static void initializingFollowingHoldsFormHandler(xFormRun _sender, FormEventArgs _eventArgs)
    {
        if (!ASOHFeatureVisibilityManager::isEnabled())
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(DefaultDashboard), MenuItemType::Display);
            menuFunction.run();

            info("@SCM:ASOHFeatureErrorMessage");

            _sender.close();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingOrderClassFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents opening of order classes form based on feature exposure.
    /// </summary>
    /// <param name="_sender">A form.</param>
    /// <param name="_eventArgs">Form event arguments.</param>
    [FormEventHandler(formStr(ASOHOrderClassesForm), FormEventType::Initializing)]
    public static void initializingOrderClassFormHandler(xFormRun _sender, FormEventArgs _eventArgs)
    {
        if (!ASOHFeatureVisibilityManager::isEnabled())
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(DefaultDashboard), MenuItemType::Display);
            menuFunction.run();

            info("@SCM:ASOHFeatureErrorMessage");

            _sender.close();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CustParameters_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in WHSReleaseToWarehouse form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(CustParameters), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void CustParameters_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(CustParameters, ASOHOrdersManagement)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTableListPageInteraction_Post_setButtonVisibility</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(SalesTableListPageInteraction), methodStr(SalesTableListPageInteraction, setButtonVisibility))]
    public static void SalesTableListPageInteraction_Post_setButtonVisibility(XppPrePostArgs args)
    {
        SalesTableListPageInteraction salesTableListPageInteraction = args.getThis();
        salesTableListPageInteraction.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, ASOHHoldMandatoryCheckAction), ASOHFeatureVisibilityManager::isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTable_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in sales order form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(SalesTable), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void SalesTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(SalesTable, ASOHHoldMandatoryCheckAction)).visible(isVisible);
        _sender.design().controlName(formControlStr(SalesTable, ASOHHoldDefaultCheckAction)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesCreateOrder_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in sales create form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(SalesCreateOrder), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void SalesCreateOrder_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(SalesCreateOrder, ASOHOrderClass)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRHoldCodeTable_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in MCRHoldCodeTable form is visible or not.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(MCRHoldCodeTable), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void MCRHoldCodeTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(MCRHoldCodeTable, ASOHTriggerEvent)).visible(isVisible);
        _sender.design().controlName(formControlStr(MCRHoldCodeTable, ASOHFollowing)).visible(isVisible);
        _sender.design().controlName(formControlStr(MCRHoldCodeTable, ASOHAutoRemove)).visible(isVisible);
        _sender.design().controlName(formControlStr(MCRHoldCodeTable, ASOHRelatedDocument)).visible(isVisible);
        _sender.design().controlName(formControlStr(MCRHoldCodeTable, ASOHHoldApplicationAction)).visible(isVisible);
        _sender.design().controlName(formControlStr(MCRHoldCodeTable, ASOHHoldRemovalAction)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRHoldCodeTrans_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in MCRHoldCodeTrans form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(MCRHoldCodeTrans), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void MCRHoldCodeTrans_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(MCRHoldCodeTrans, ASOHShipments)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSReleaseToWarehouse_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in WHSReleaseToWarehouse form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSReleaseToWarehouse), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void WHSReleaseToWarehouse_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(WHSReleaseToWarehouse, ASOHOrderHoldRTW)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSReleaseToWarehouseSalesOrder_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in WHSReleaseToWarehouseSalesOrder form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSReleaseToWarehouseSalesOrder), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void WHSReleaseToWarehouseSalesOrder_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(WHSReleaseToWarehouseSalesOrder, ASOHOrderHoldRTW)).visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSShipmentDetails_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines the controls in WHSReleaseToWarehouse form is visible or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSShipmentDetails), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void WHSShipmentDetails_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isVisible = ASOHFeatureVisibilityManager::isEnabled();

        _sender.design().controlName(formControlStr(WHSShipmentDetails, ASOH_WHSLoadLine_OrderNum)).visible(isVisible);
        _sender.design().controlName(formControlStr(WHSShipmentDetails, ASOHDoNoProcess)).visible(isVisible);
        _sender.design().controlName(formControlStr(WHSShipmentDetails, ASOHOrderHolds)).visible(isVisible);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>