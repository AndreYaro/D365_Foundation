<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteOpenTransDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPromissoryNoteOpenTransDP_ES</c> class is the report data provider class for the <c>VendPromissoryNoteOpenTrans_ES</c> report.
/// </summary>
[
    SRSReportQuery(querystr(VendPromissoryNoteOpenTrans_ES)),
    SRSReportParameterAttribute(classstr(VendPromissoryNoteOpenTraDPCntrct_ES))
]
public class VendPromissoryNoteOpenTransDP_ES extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'ES-00020';

    VendPromissoryNoteOpenTransTmp_ES     vendPromissoryNoteOpenTransTmp_ES;
    VendPromissoryNoteID                  promissoryNoteId;
    VendReport_PromissoryNoteOpenTrans_ES vendReport_PromissoryNoteOpenTrans_ES;
    VendPromissoryNoteOpenTrans_ES        vendPromissoryNoteOpenTrans_ES;
    VendPromissoryNoteJour                vendPromissoryNoteJour;
    VendPromissoryNoteTrans               vendPromissoryNoteTrans;
    VendTrans                             vendTrans;
    VendTransOpen                         vendTransOpen;
    VendAccount                           fromVendAccount;
    VendAccount                           toVendAccount;
    VendPostingProfile                    postingProfile;
    DueDate                               fromDueDate;
    DueDate                               toDueDate;
    VendPromissoryNoteID                  fromVendPromissoryNoteId;
    VendPromissoryNoteID                  toVendPromissoryNoteId;
    VendPromissoryNoteStatus              vendPromissoryNoteStatus;
    Voucher                               voucher;
    TransDate                             fromTransDate;
    TransDate                             toTransDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTmpTableWhenGroupByDueDateIsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the data in temp table for group by Duedate option.
    /// </summary>
    private void generateTmpTableWhenGroupByDueDateIsSelected()
    {
        Query q = new Query();
        q  = this.initQuery(q);
        q  = this.queryRanges(q);
        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            vendTrans       = qr.get(tablenum(VendTrans));
            vendTransOpen   = qr.get(tablenum(VendTransOpen));

            if (((vendTrans.AmountMST - vendTrans.SettleAmountMST) < 0 && vendTrans.PromissoryNoteID) ||
                ((vendTrans.AmountMST - vendTrans.SettleAmountMST) < 0 && vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted))
            {
                this.insertVendPromissoryNoteOpenTransTmp_ES();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTmpTableWhenGroupByPromissoryNoteIsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the data into temp table for group by PromissoryNote option.
    /// </summary>
    private void generateTmpTableWhenGroupByPromissoryNoteIsSelected()
    {
        Query q = new Query();
        q = this.initQuery(q);
        q = this.queryRanges(q);
        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            vendPromissoryNoteJour      = qr.get(tablenum(VendPromissoryNoteJour));
            vendPromissoryNoteTrans     = qr.get(tablenum(VendPromissoryNoteTrans));

            if (vendPromissoryNoteJour.Status != CustVendNegInstStatus::None)
            {
                vendTrans       = vendReport_PromissoryNoteOpenTrans_ES.vendTrans(vendPromissoryNoteTrans);
                vendTransOpen   = vendReport_PromissoryNoteOpenTrans_ES.vendTransOpen(vendTrans);

                this.insertVendPromissoryNoteOpenTransTmp_ES();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTmpTableWhenGroupByVendIsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the data into temp table for group by Vendor option.
    /// </summary>
    private void generateTmpTableWhenGroupByVendIsSelected()
    {
        Query            q = new Query();
        str              updated;
        str              last;
        date             previousDate;

        q  = this.initQuery(q);
        q  = this.queryRanges(q);
        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            vendTrans       = qr.get(tablenum(VendTrans));
            vendTransOpen   = qr.get(tablenum(VendTransOpen));

            if (((vendTrans.AmountMST - vendTrans.SettleAmountMST) < 0 && vendTrans.PromissoryNoteID) ||
            ((vendTrans.AmountMST - vendTrans.SettleAmountMST) < 0 && vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted))
            {
                promissoryNoteId     = vendTrans.PromissoryNoteID;
                updated              = vendTrans.AccountNum;
                if (updated == last && previousDate == vendTrans.TransDate)
                {
                    last = updated;
                    previousDate = vendTrans.TransDate;
                    this.insertVendPromissoryNoteOpenTransTmp_ES();
                }
                else
                {
                    this.insertVendPromissoryNoteOpenTransTmp_ES();
                    last         = updated;
                    previousDate = vendTrans.TransDate;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendPromissoryNoteOpenTransTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>vendPromissoryNoteOpenTrans_ESTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>vendPromissoryNoteOpenTrans_ESTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(VendPromissoryNoteOpenTransTmp_ES))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendPromissoryNoteOpenTransTmp_ES getVendPromissoryNoteOpenTransTmp_ES()
    {
        select vendPromissoryNoteOpenTransTmp_ES;
        return vendPromissoryNoteOpenTransTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class object.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        vendReport_PromissoryNoteOpenTrans_ES = new VendReport_PromissoryNoteOpenTrans_ES();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the query that depend on UI parameter selection.
    /// </summary>
    /// <param name="_query">
    /// The main data source of the report.
    /// </param>
    /// <returns>
    /// The query with ranges.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query initQuery(Query _query)
    {
        QueryBuildDataSource     vendTransDS;
        QueryBuildDataSource     vendTransOpenDS;

        _query = new Query();

        switch (vendPromissoryNoteOpenTrans_ES)
        {
            case VendPromissoryNoteOpenTrans_ES::Vend:
                vendTransDS     = _query.addDataSource(tablenum(VendTrans));
                vendTransOpenDS = vendTransDS.addDataSource(tablenum(VendTransOpen));
                vendTransOpenDS.addLink(fieldnum(VendTrans,RecId),fieldnum(VendTransOpen,RefRecId));
                vendTransOpenDS.addLink(fieldnum(VendTrans,AccountNum),fieldnum(VendTransOpen,AccountNum));
                vendTransDS.addSortField(fieldnum(VendTrans, AccountNum));
                vendTransDS.addSortField(fieldnum(VendTrans, TransDate));
                break;

            case VendPromissoryNoteOpenTrans_ES::DueDate:
                vendTransDS     = _query.addDataSource(tablenum(VendTrans));
                vendTransOpenDS = vendTransDS.addDataSource(tablenum(VendTransOpen));
                vendTransOpenDS.addLink(fieldnum(VendTrans,RecId),fieldnum(VendTransOpen,RefRecId));
                vendTransOpenDS.addLink(fieldnum(VendTrans,AccountNum),fieldnum(VendTransOpen,AccountNum));
                vendTransOpenDS.addSortField(fieldnum(VendTransOpen, DueDate));
                break;

            case VendPromissoryNoteOpenTrans_ES::PromissoryNote:
                QueryBuildDataSource vendPromissoryNoteJourDS  = _query.addDataSource(tablenum(VendPromissoryNoteJour));
                QueryBuildDataSource vendPromissoryNoteTransDS = vendPromissoryNoteJourDS.addDataSource(tablenum(VendPromissoryNoteTrans));
                vendPromissoryNoteTransDS.addLink(fieldnum(VendPromissoryNoteJour, PromissoryNoteId), fieldnum(VendPromissoryNoteTrans, PromissoryNoteId));
                vendPromissoryNoteJourDS.addSortField(fieldnum(VendPromissoryNoteJour, PromissoryNoteId));
                break;
        }
        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendPromissoryNoteOpenTransTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data in the <c>VendPromissoryNoteOpenTransTmp_ES</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertVendPromissoryNoteOpenTransTmp_ES( )
    {
        vendPromissoryNoteOpenTransTmp_ES.AmountMST             =   vendTrans.AmountMST;
        vendPromissoryNoteOpenTransTmp_ES.AccountNum            =   vendTrans.AccountNum;
        vendPromissoryNoteOpenTransTmp_ES.DueDate               =   vendTransOpen.DueDate;
        vendPromissoryNoteOpenTransTmp_ES.HeaderDueDate         =   vendReport_PromissoryNoteOpenTrans_ES.dueDate(vendPromissoryNoteJour);
        vendPromissoryNoteOpenTransTmp_ES.PromissoryNoteID      =   vendTrans.PromissoryNoteId;
        vendPromissoryNoteOpenTransTmp_ES.PromissoryNoteSeqNum  =   vendTrans.PromissoryNoteSeqNum;
        vendPromissoryNoteOpenTransTmp_ES.Invoice               =   vendReport_PromissoryNoteOpenTrans_ES.invoiceTxt(vendPromissoryNoteTrans);
        vendPromissoryNoteOpenTransTmp_ES.PostingProfile        =   vendTrans.PostingProfile;
        vendPromissoryNoteOpenTransTmp_ES.PaymMode              =   vendTrans.PaymMode;
        vendPromissoryNoteOpenTransTmp_ES.SettleAmountMST       =   vendTrans.SettleAmountMST;
        vendPromissoryNoteOpenTransTmp_ES.RemainingAmountMST    =   vendTrans.remainAmountMST();
        vendPromissoryNoteOpenTransTmp_ES.TransDate             =   vendTrans.TransDate;
        vendPromissoryNoteOpenTransTmp_ES.Txt                   =   vendTrans.Txt;
        vendPromissoryNoteOpenTransTmp_ES.Voucher               =   vendTrans.Voucher;
        vendPromissoryNoteOpenTransTmp_ES.Bank                  =   vendReport_PromissoryNoteOpenTrans_ES.remittedToBankAccount(promissoryNoteId);
        vendPromissoryNoteOpenTransTmp_ES.Status                =   vendPromissoryNoteTrans.Status;
        vendPromissoryNoteOpenTransTmp_ES.JourStatus            =   vendPromissoryNoteJour.Status;
        vendPromissoryNoteOpenTransTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method will compute data and populate the data tables
    /// that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        VendPromissoryNoteOpenTraDPCntrct_ES vendPromissoryNoteOpenTraDPCntrct_ES = this.parmDataContract();

        fromVendAccount                 = vendPromissoryNoteOpenTraDPCntrct_ES.parmFromVendor();
        toVendAccount                   = vendPromissoryNoteOpenTraDPCntrct_ES.parmToVendor();
        postingProfile                  = vendPromissoryNoteOpenTraDPCntrct_ES.parmPostingProfile();
        fromDueDate                     = vendPromissoryNoteOpenTraDPCntrct_ES.parmFromDueDate();
        toDueDate                       = vendPromissoryNoteOpenTraDPCntrct_ES.parmToDueDate();
        fromVendPromissoryNoteId        = vendPromissoryNoteOpenTraDPCntrct_ES.parmFromPromissoryNoteID();
        toVendPromissoryNoteId          = vendPromissoryNoteOpenTraDPCntrct_ES.parmToPromissoryNoteID();
        vendPromissoryNoteStatus        = vendPromissoryNoteOpenTraDPCntrct_ES.parmStatus();
        voucher                         = vendPromissoryNoteOpenTraDPCntrct_ES.parmVoucher();
        fromTransDate                   = vendPromissoryNoteOpenTraDPCntrct_ES.parmFromTransDate();
        toTransDate                     = vendPromissoryNoteOpenTraDPCntrct_ES.parmToTransDate();
        vendPromissoryNoteOpenTrans_ES  = vendPromissoryNoteOpenTraDPCntrct_ES.parmVendPromissoryNoteOpenTrans_ES();

        this.init();

        switch (vendPromissoryNoteOpenTrans_ES)
        {
            case VendPromissoryNoteOpenTrans_ES::Vend:
                this.generateTmpTableWhenGroupByVendIsSelected();
                break;

            case VendPromissoryNoteOpenTrans_ES::DueDate:
                this.generateTmpTableWhenGroupByDueDateIsSelected();
                break;

            case VendPromissoryNoteOpenTrans_ES::PromissoryNote:
                this.generateTmpTableWhenGroupByPromissoryNoteIsSelected();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the query depends on UI parameter selection.
    /// </summary>
    /// <param name="_newQuery">
    /// The main datasource of the report.
    /// </param>
    /// <returns>
    /// Returns Query with ranges.
    /// </returns>
    ///
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query queryRanges(Query _newQuery)
    {
        switch (vendPromissoryNoteOpenTrans_ES)
        {
            case VendPromissoryNoteOpenTrans_ES::Vend:
                this.queryRangesGroupByVendor(_newQuery);
                break;

            case VendPromissoryNoteOpenTrans_ES::DueDate:
                this.queryRangesGroupByDueDate(_newQuery);
                break;

            case VendPromissoryNoteOpenTrans_ES::PromissoryNote:
                this.queryRangesGroupByPromissoryNote(_newQuery);
                break;
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRangesGroupByVendor</Name>
				<Source><![CDATA[
    private Query queryRangesGroupByVendor(Query _newQuery)
    {
        if (fromVendAccount || toVendAccount)
        {
            _newQuery.dataSourceTable(tableNum(VendTrans)).addRange(fieldnum(VendTrans, AccountNum)).value(queryRange(fromVendAccount, toVendAccount));
        }

        if (fromDueDate || toDueDate)
        {
            _newQuery.dataSourceTable(tableNum(VendTrans)).addRange(fieldnum(VendTrans, DueDate)).value(queryRange(fromDueDate, toDueDate));
        }

        if (postingProfile)
        {
            _newQuery.dataSourceTable(tableNum(VendTrans)).addRange(fieldnum(VendTrans, PostingProfile)).value(postingProfile);
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRangesGroupByPromissoryNote</Name>
				<Source><![CDATA[
    private Query queryRangesGroupByPromissoryNote(Query _newQuery)
    {
        if (fromVendAccount || toVendAccount)
        {
            _newQuery.dataSourceTable(tableNum(VendPromissoryNoteJour)).addRange(fieldnum(VendPromissoryNoteJour, VendAccount)).value(queryRange(fromVendAccount, toVendAccount));
        }

        if (fromVendPromissoryNoteId || toVendPromissoryNoteId)
        {
            _newQuery.dataSourceTable(tableNum(VendPromissoryNoteJour)).addRange(fieldnum(VendPromissoryNoteJour, PromissoryNoteId)).value(queryRange(fromVendPromissoryNoteId, toVendPromissoryNoteId));
        }

        if (vendPromissoryNoteStatus)
        {
            _newQuery.dataSourceTable(tableNum(VendPromissoryNoteJour)).addRange(fieldnum(VendPromissoryNoteJour, Status)).value(enum2str(vendPromissoryNoteStatus));
        }

        if (voucher)
        {
            _newQuery.dataSourceTable(tableNum(VendPromissoryNoteTrans)).addRange(fieldnum(VendPromissoryNoteTrans, Voucher)).value(voucher);
        }

        if (fromDueDate || toDueDate)
        {
            _newQuery.dataSourceTable(tableNum(VendPromissoryNoteTrans)).addRange(fieldnum(VendPromissoryNoteTrans, DueDate)).value(queryRange(fromDueDate, toDueDate));
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRangesGroupByDueDate</Name>
				<Source><![CDATA[
    private Query queryRangesGroupByDueDate(Query _newQuery)
    {
        if (fromVendAccount || toVendAccount)
        {
            _newQuery.dataSourceTable(tableNum(VendTrans)).addRange(fieldnum(VendTrans, AccountNum)).value(queryRange(fromVendAccount, toVendAccount));
        }

        if (fromDueDate || toDueDate)
        {
            _newQuery.dataSourceTable(tableNum(VendTransOpen)).addRange(fieldnum(VendTransOpen, DueDate)).value(queryRange(fromDueDate, toDueDate));
        }

        if (postingProfile)
        {
            _newQuery.dataSourceTable(tableNum(VendTrans)).addRange(fieldnum(VendTrans, PostingProfile)).value(postingProfile);
        }

        return _newQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>