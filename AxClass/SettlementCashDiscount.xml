<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementCashDiscount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementCashDiscount</c> class represents cash discount related calculations during settlement.
/// </summary>
public abstract class SettlementCashDiscount
{
    // Calculated values
    private DiscAmount actualCashDiscAmountDebit;
    private AmountMST actualCashDiscAmountMstDebit;
    private AmountMSTSecondary actualCashDiscAmountReportingDebit;
    private CashDiscCode cashDiscTransCodeDebit;
    private LedgerDimensionDefaultAccount cashDiscLedgerDimensionDebit;

    private DiscAmount actualCashDiscAmountCredit;
    private AmountMST actualCashDiscAmountMstCredit;
    private AmountMSTSecondary actualCashDiscAmountReportingCredit;
    private LedgerDimensionDefaultAccount cashDiscLedgerDimensionCredit;

    // Needed for calculation
    // Refactor: Replace SettlementPair with table buffers from settlement pair, then begin removing
    // table buffer dependencies from this class
    protected SettlementPair settlementPair;
    protected SettlementPreviousTotals settlementPreviousTotals;
    protected SettlementCalculator settlementCalculator;
    protected SettlementExchRate settlementExchRate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>SettlementCashDiscount</c> class.
    /// </summary>
    /// <param name = "_module">The module for the current settlement.</param>
    /// <param name = "_settlementExchRate">The <c>SettlementExchRate</c> instance for the current settlement.</param>
    /// <param name = "_settlementPreviousTotal">The <c>SettlementPreviousTotals</c> instance for the current settlement.</param>
    /// <param name = "_settlementCalculator">The <c>SettlementCalculator</c> instance for the current settlement.</param>
    /// <returns>An instance of <c>SettlementCashDiscount</c> for the current settlement.</returns>
    public static SettlementCashDiscount construct(
        SysModule _module,
        SettlementExchRate _settlementExchRate,
        SettlementPreviousTotals _settlementPreviousTotal,
        SettlementCalculator _settlementCalculator)
    {
        SettlementCashDiscount instance;

        switch (_module)
        {
            case SysModule::Cust:
                instance = new SettlementCashDiscount_Cust();
                break;

            case SysModule::Vend:
                instance = new SettlementCashDiscount_Vend();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance.init(
            _settlementExchRate,
            _settlementPreviousTotal,
            _settlementCalculator);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(
        SettlementExchRate _settlementExchRate,
        SettlementPreviousTotals _settlementPreviousTotal,
        SettlementCalculator _settlementCalculator)
    {
        settlementExchRate = _settlementExchRate;
        settlementPreviousTotals = _settlementPreviousTotal;
        settlementCalculator = _settlementCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementPair</Name>
				<Source><![CDATA[
    public void setSettlementPair(SettlementPair _settlementPair)
    {
        settlementPair = _settlementPair;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected abstract SysModule getModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>discGraceDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of days that define a grace period after a cash discount date where the cash discount can still be taken.
    /// </summary>
    /// <param name = "_paymMode">The method of payment that defines the number of grace days.</param>
    /// <returns>The number of grace days defined for a method of payment.</returns>
    protected abstract DiscGraceDays discGraceDays(PaymMode _paymMode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a cash discount can be taken with a credit note for the given company.
    /// </summary>
    /// <param name = "_company">The company in which to find the parameter value.</param>
    /// <returns>true if cash discount is allowed for credit notes; otherwise, false.</returns>
    protected abstract boolean cashDiscForCreditNote(CompanyId _company)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettlementOutsideCashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums the invoice amount total for invoices that are outside of a given cash
    /// discount date for a given payment.
    /// </summary>
    /// <param name = "_recId">The <c>RecId</c> of the payment <c>VendTrans</c> record.</param>
    /// <param name = "_cashDiscDate">The date of the cash discount.</param>
    /// <param name = "_company">The company of the payment.</param>
    /// <returns>The sum of invoice amounts that are outside the given cash discount date for a given payment.</returns>
    protected abstract AmountCur calcSettlementOutsideCashDiscDate(
        RecId _recId,
        TransDate _cashDiscDate,
        CompanyId _company = curext())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscForPartialPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a cash discount can be taken with a partial payment for the given company.
    /// </summary>
    /// <param name = "_company">The company in which to find the parameter value.</param>
    /// <returns>true if cash discount is allowed for partial payments; otherwise, false.</returns>
    protected abstract boolean cashDiscForPartialPaym(CompanyId _company)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransOpenAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses amounts on <c>CustVendTransOpen</c> map record.
    /// </summary>
    /// <param name = "_vendTransOpen">
    /// The <c>CustVendTransOpen</c> map record that contains amounts to reverse.
    /// </param>
    protected abstract void reverseTransOpenAmounts(CustVendTransOpen _custVendTransOpen)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the sign of an amount.
    /// </summary>
    /// <param name = "_amount">The amount to adjust.</param>
    /// <returns>A sign adjusted amount.</returns>
    private AmountMST amount(AmountMST _amount)
    {
        return SettlementUtility::adjustAmountSign(_amount, this.getModule());
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxInaccurateAmountMST</Name>
				<Source><![CDATA[
    private AmountMST maxInaccurateAmountMST(CompanyId _company = curext())
    {
        AmountMST maxInaccurateAmount;

        changecompany(_company)
        {
            maxInaccurateAmount = SettlementUtility::maxInaccurateAmountMST(this.getModule());
        }

        return maxInaccurateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleAmountCurDebitBasedOnPossibleCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the settled amount in the debit transaction currency assuming the possible cash discount
    /// is taken.
    /// </summary>
    /// <param name="_possibleCashDiscDebit">
    /// The amount of the possible cash discount for the debit transaction in the debit transaction
    /// currency.
    /// </param>
    /// <param name="_possibleCashDiscCredit">
    /// The amount of the possible cash discount for the credit transaction in the credit transaction
    /// currency.
    /// </param>
    /// <param name="_remainingSpecTransRecords">
    /// The number of <c>SpecTrans</c> table records not yet processed.
    /// </param>
    /// <returns>
    /// The settled amount in the debit transaction currency.
    /// </returns>
    protected AmountCur calcSettleAmountCurDebitBasedOnPossibleCashDisc(
        AmountCur _possibleCashDiscDebit,
        AmountCur _possibleCashDiscCredit,
        NumberOfRecords _remainingSpecTransRecords)
    {
        // Save the original values
        AmountCur origSettleAmountCurDebit = settlementPair.getCustVendTransDebit().SettleAmountCur;
        AmountCur origBalance01Debit = settlementPair.getSpecTransDebit().Balance01;
        AmountCur origSettleAmountCurCredit = settlementPair.getCustVendTransCredit().SettleAmountCur;
        AmountCur origBalance01Credit = settlementPair.getSpecTransCredit().Balance01;

        // Update table buffer assuming cash discount will be taken
        settlementPair.getCustVendTransDebit().SettleAmountCur += _possibleCashDiscDebit;
        settlementPair.getCustVendTransCredit().SettleAmountCur += _possibleCashDiscCredit;

        if (abs(settlementPair.getSpecTransDebit().Balance01) > abs(settlementPair.getCustVendTransDebit().AmountCur - settlementPair.getCustVendTransDebit().SettleAmountCur))
        {
            settlementPair.getSpecTransDebit().Balance01 = settlementPair.getCustVendTransDebit().AmountCur - settlementPair.getCustVendTransDebit().SettleAmountCur;
        }

        if (abs(settlementPair.getSpecTransCredit().Balance01) > abs(settlementPair.getCustVendTransCredit().AmountCur - settlementPair.getCustVendTransCredit().SettleAmountCur))
        {
            settlementPair.getSpecTransCredit().Balance01 = settlementPair.getCustVendTransCredit().AmountCur - settlementPair.getCustVendTransCredit().SettleAmountCur;
        }

        // Calculate the settle amount assuming cash discount will be taken
        AmountCur settledAmountCur = settlementCalculator.calcSettleAmountCurForDebit(_remainingSpecTransRecords);

        // Restore the original amounts on table buffers
        settlementPair.getCustVendTransDebit().SettleAmountCur = origSettleAmountCurDebit;
        settlementPair.getSpecTransDebit().Balance01 = origBalance01Debit;
        settlementPair.getCustVendTransCredit().SettleAmountCur = origSettleAmountCurCredit;
        settlementPair.getSpecTransCredit().Balance01 = origBalance01Credit;

        return settledAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualCashDiscAmountCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuates the amount of cash discount for the amount being settled.
    /// </summary>
    /// <param name="_amountToSettleAssumingCashDisc">
    /// The amount to settle in transaction currency.
    /// </param>
    /// <param name="_possibleDiscAmountToTake">
    /// The possible discount amount in transaction currency.
    /// </param>
    /// <param name="_currencyHelper">
    /// The currency exchange helper class.
    /// </param>
    /// <param name="_cashDiscountHelper">
    /// The cash discount helper class.
    /// </param>
    /// <returns>
    /// The actual discount amount for the credit open transaction.
    /// </returns>
    protected DiscAmount calcActualCashDiscAmountCredit(
        AmountCur _amountToSettleAssumingCashDisc,
        DiscAmount _possibleDiscAmountToTake,
        CurrencyExchangeHelper _currencyHelper,
        CustVendCashDiscountHelper _cashDiscountHelper)
    {
        return this.calcActualCashDiscAmount(
            settlementPair.getCustVendTransOpenCredit(),
            settlementPair.getCustVendTransCredit(),
            settlementPair.getSpecTransCredit(),
            _amountToSettleAssumingCashDisc,
            _possibleDiscAmountToTake,
            _currencyHelper,
            _cashDiscountHelper);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualCashDiscAmountDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuates the amount of cash discount for the debit amount being settled.
    /// </summary>
    /// <param name="_amountToSettleAssumingCashDisc">
    /// The amount to settle in transaction currency.
    /// </param>
    /// <param name="_possibleDiscAmountToTake">
    /// The possible discount amount in transaction currency.
    /// </param>
    /// <param name="_currencyHelper">
    /// The currency exchange helper class.
    /// </param>
    /// <param name="_cashDiscountHelper">
    /// The cash discount helper class.
    /// </param>
    /// <returns>
    /// The actual discount amount for the debit open transaction.
    /// </returns>
    protected DiscAmount calcActualCashDiscAmountDebit(
        AmountCur _amountToSettleAssumingCashDisc,
        DiscAmount _possibleDiscAmountToTake,
        CurrencyExchangeHelper _currencyHelper,
        CustVendCashDiscountHelper _cashDiscountHelper)
    {
        return this.calcActualCashDiscAmount(
            settlementPair.getCustVendTransOpenDebit(),
            settlementPair.getCustVendTransDebit(),
            settlementPair.getspecTransDebit(),
            _amountToSettleAssumingCashDisc,
            _possibleDiscAmountToTake,
            _currencyHelper,
            _cashDiscountHelper);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualCashDiscAmount</Name>
				<Source><![CDATA[
    private DiscAmount calcActualCashDiscAmount(
        CustVendTransOpen _custVendTransOpen,
        CustVendTrans _custVendTrans,
        SpecTrans _specTrans,
        AmountCur _amountToSettleAssumingCashDisc,
        DiscAmount _possibleDiscAmountToTake,
        CurrencyExchangeHelper _currencyHelper,
        CustVendCashDiscountHelper _cashDiscountHelper)
    {
        AmountCur maxInaccurateAmountCur;
        DiscAmount actualCashDiscAmount;

        if (_possibleDiscAmountToTake == 0.0 || _custVendTransOpen.UseCashDisc == UseCashDisc::Never)
        {
            // when cash discount is never the discount is zero
            actualCashDiscAmount = 0.0;
        }
        else    // Use cash discount is normal
        {
            // find the max over/under for the debit company and convert to the debit transaction currency
            _currencyHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(settlementPair.getDebitCompany()).RecId));
            _currencyHelper.parmExchangeRate1(_custVendTrans.ExchRate);
            _currencyHelper.parmExchangeRate2(_custVendTrans.ExchRateSecond);
            maxInaccurateAmountCur = _currencyHelper.calculateAccountingToTransaction(_custVendTrans.CurrencyCode, this.maxInaccurateAmountMST(_custVendTrans.company()), true);

            if (_specTrans.SelectedDateUsedToCalcCashDisc == dateNull())    // using transaction date
            {
                // Determine if the transaction is partially settled
                if ((abs(_custVendTransOpen.AmountCur - _possibleDiscAmountToTake) > abs(_amountToSettleAssumingCashDisc) + maxInaccurateAmountCur))
                {
                    _cashDiscountHelper.parmPreviousSettledAmount(settlementPreviousTotals.getPrevSettledAmount(
                        _custVendTransOpen.getPrevSettledAmount(),
                        _custVendTransOpen.company(),
                        _custVendTransOpen.RecId));

                    this.reverseTransOpenAmounts(_custVendTransOpen);
                    actualCashDiscAmount = this.amount(_cashDiscountHelper.determineCashDiscForPartialSettlement(this.amount(_amountToSettleAssumingCashDisc)));
                    this.reverseTransOpenAmounts(_custVendTransOpen);
                }
                else if (_custVendTransOpen.UseCashDisc == UseCashDisc::Always) // settling the remaining transaction balance
                {
                    actualCashDiscAmount = _possibleDiscAmountToTake;
                }
                else if (this.calcSettlementOutsideCashDiscDate(_custVendTrans.RecId,
                    _custVendTransOpen.CashDiscDate,
                    _custVendTrans.company()) == 0.0)
                {
                    actualCashDiscAmount = _possibleDiscAmountToTake;
                }
            }

            // Refactor: This logic is duplicated above. Move to a method.
            // Determine if transaction being paid in full
            // If performing multiple settlement, assume transaction is being paid in full.
            else if ((abs(_custVendTransOpen.AmountCur - _possibleDiscAmountToTake) > abs(_amountToSettleAssumingCashDisc) + maxInaccurateAmountCur)
                && !SpecTrans::checkExistRefForMultipleSpec(_custVendTransOpen.company(), _custVendTransOpen.TableId, _custVendTransOpen.RecId))
            {
                if (_custVendTransOpen.UseCashDisc == UseCashDisc::Normal
                    && !this.cashDiscForPartialPaym(_custVendTransOpen.company()))
                {
                    // partial discount not allowed
                    actualCashDiscAmount = 0.0;
                }
                // check when the user changed the amount to settle and compare max can settle
                else if (abs(_specTrans.Balance01) >  abs(_amountToSettleAssumingCashDisc) + maxInaccurateAmountCur)
                {
                    // partial discount allowed, and amount to settle from form is
                    // not being fully paid, so figure the actual discount based on the ratio
                    if (_specTrans.Balance01 == 0.0)
                    {
                        // check for divide by zero
                        actualCashDiscAmount = 0.0;
                    }
                    else
                    {
                        actualCashDiscAmount = (_amountToSettleAssumingCashDisc / _specTrans.Balance01) * _possibleDiscAmountToTake;
                    }
                }
                else
                {
                    // the amount to settle from form is being fully paid so use
                    // discount to take value from the form
                    actualCashDiscAmount = _possibleDiscAmountToTake;
                }
            }
            else
            {
                // transaction paid in full, so use full discount to take from form
                actualCashDiscAmount = _possibleDiscAmountToTake;
            }
        }

        return actualCashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscountLedgerDimensionCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cash discount ledger dimension for the credit transaction.
    /// </summary>
    /// <param name="_cashDiscountCode">
    /// The cash discount code.
    /// </param>
    /// <param name="_considerTaxLedgerDimension">
    /// true if the tax ledger dimension should be considered; otherwise, false.
    /// </param>
    /// <returns>
    /// The cash discount ledger dimension.
    /// </returns>
    protected LedgerDimensionDefaultAccount determineCashDiscountLedgerDimensionCredit(
        CashDiscCode _cashDiscountCode,
        boolean _considerTaxLedgerDimension = true)
    {
        return SettlementUtility::determineCashDiscountLedgerDimension(
            this.getModule(),
            settlementPair.getCustVendTransCredit(),
            settlementPair.getCustVendTransOpenCredit(),
            _cashDiscountCode,
            _considerTaxLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscountLedgerDimensionDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cash discount ledger dimension for the debit transaction.
    /// </summary>
    /// <param name="_cashDiscountCode">
    /// The cash discount code.
    /// </param>
    /// <param name="_considerTaxLedgerDimension">
    /// true if the tax ledger dimension should be considered; otherwise, false.
    /// </param>
    /// <returns>
    /// The cash discount ledger dimension.
    /// </returns>
    protected LedgerDimensionDefaultAccount determineCashDiscountLedgerDimensionDebit(
        CashDiscCode _cashDiscountCode,
        boolean _considerTaxLedgerDimension = true)
    {
        return SettlementUtility::determineCashDiscountLedgerDimension(
            this.getModule(),
            settlementPair.getCustVendTransDebit(),
            settlementPair.getCustVendTransOpenDebit(),
            _cashDiscountCode,
            _considerTaxLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscAmountOnDebitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cash discount amount on the debit transaction.
    /// </summary>
    /// <param name="_actualCashDiscAmountCur">
    /// The cash discount amount in the transaction currency.
    /// </param>
    /// <param name="_actualCashDiscAmountMst">
    /// The cash discount amount in the monetary standard (MST) currency.
    /// </param>
    /// <param name="_actualCashDiscAmountReporting">
    /// The cash discount amount in the reporting currency.
    /// </param>
    /// <param name="_possibleCashDiscAmount">
    /// The possible cash discount amount.
    /// </param>
    /// <param name="_cashDiscountDate">
    /// The date of the cash discount.
    /// </param>
    /// <param name="_cashDiscountHelper">
    /// An instance of cash discount helper class.
    /// </param>
    protected void updateCashDiscAmountOnDebitTrans(
        DiscAmount _actualCashDiscAmountCur,
        AmountMST _actualCashDiscAmountMst,
        AmountMSTSecondary _actualCashDiscAmountReporting,
        AmountCur _possibleCashDiscAmount,
        TransDate _cashDiscountDate,
        CustVendCashDiscountHelper _cashDiscountHelper)
    {
        this.updateCashDiscAmountOnTrans(
            settlementPair.getCustVendTransDebit(),
            settlementPair.getCustVendTransOpenDebit(),
            settlementPair.getSpecTransDebit(),
            _actualCashDiscAmountCur,
            _actualCashDiscAmountMst,
            _actualCashDiscAmountReporting,
            _possibleCashDiscAmount,
            _cashDiscountDate,
            _cashDiscountHelper);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscAmountOnCreditTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cash discount amount on the credit transaction.
    /// </summary>
    /// <param name="_actualCashDiscAmountCur">
    /// The cash discount amount in the transaction currency.
    /// </param>
    /// <param name="_actualCashDiscAmountMst">
    /// The cash discount amount in the monetary standard (MST) currency.
    /// </param>
    /// <param name="_actualCashDiscAmountReporting">
    /// The cash discount amount in the reporting currency.
    /// </param>
    /// <param name="_possibleCashDiscAmount">
    /// The possible cash discount amount.
    /// </param>
    /// <param name="_cashDiscountDate">
    /// The date of the cash discount.
    /// </param>
    /// <param name="_cashDiscountHelper">
    /// An instance of cash discount helper class.
    /// </param>
    protected void updateCashDiscAmountOnCreditTrans(
        DiscAmount _actualCashDiscAmountCur,
        AmountMST _actualCashDiscAmountMst,
        AmountMSTSecondary _actualCashDiscAmountReporting,
        AmountCur _possibleCashDiscAmount,
        TransDate _cashDiscountDate,
        CustVendCashDiscountHelper _cashDiscountHelper)
    {
        this.updateCashDiscAmountOnTrans(
            settlementPair.getCustVendTransCredit(),
            settlementPair.getCustVendTransOpenCredit(),
            settlementPair.getSpecTransCredit(),
            _actualCashDiscAmountCur,
            _actualCashDiscAmountMst,
            _actualCashDiscAmountReporting,
            _possibleCashDiscAmount,
            _cashDiscountDate,
            _cashDiscountHelper);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscAmountOnTrans</Name>
				<Source><![CDATA[
    private void updateCashDiscAmountOnTrans(
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        SpecTrans _specTrans,
        DiscAmount _actualCashDiscAmountCur,
        AmountMST _actualCashDiscAmountMst,
        AmountMSTSecondary _actualCashDiscAmountReporting,
        AmountCur _possibleCashDiscAmount,
        TransDate _cashDiscountDate,
        CustVendCashDiscountHelper _cashDiscountHelper)
    {
        _custVendTransOpen.CashDiscDate = _cashDiscountDate;

        if (abs(_possibleCashDiscAmount) > abs(_actualCashDiscAmountCur))
        {
            // possible cash discount is set to the remaining discount amount available
            _custVendTransOpen.PossibleCashDisc = _possibleCashDiscAmount - _actualCashDiscAmountCur;
        }
        else
        {
            // because the discount taken is greater than the available discount the remaining discount will be zero
            _custVendTransOpen.PossibleCashDisc = 0.0;
            if (abs(_cashDiscountHelper.parmLargestCashDiscount()) <= abs(_actualCashDiscAmountCur + _cashDiscountHelper.parmCashDiscountTaken()))
            {
                _custVendTransOpen.UseCashDisc = UseCashDisc::Never;
            }
        }

        _custVendTransOpen.AmountCur -= _actualCashDiscAmountCur;
        _custVendTrans.SettleAmountCur += _actualCashDiscAmountCur;

        _custVendTransOpen.AmountMST -= _actualCashDiscAmountMst;
        _custVendTrans.SettleAmountMST += _actualCashDiscAmountMst;

        _custVendTransOpen.ReportingCurrencyAmount -= _actualCashDiscAmountReporting;
        _custVendTrans.SettleAmountReporting += _actualCashDiscAmountReporting;

        if (abs(_specTrans.Balance01) > abs(_custVendTrans.AmountCur - _custVendTrans.SettleAmountCur))
        {
            _specTrans.Balance01 = _custVendTrans.AmountCur - _custVendTrans.SettleAmountCur;
        }

        // Adjust the cash discount value on the SpecTrans record
        if (abs(_specTrans.CashDiscToTake) > abs(_actualCashDiscAmountCur))
        {
            _specTrans.CashDiscToTake -= _actualCashDiscAmountCur;
        }
        else
        {
            _specTrans.CashDiscToTake = 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCashDiscount</Name>
				<Source><![CDATA[
    public void calculateCashDiscount(
        boolean _isFullSettlement,
        AmountCur _fullSettlementDiffAmountCur,
        NumberOfRecords _remainingSpecTransRecords)
    {
        DiscGraceDays discGraceDays;
        DiscAmount possibleCashDiscountAmountDebit;
        DiscAmount possibleCashDiscountAmountCredit;
        CustVendTransCashDisc transCashDiscCredit;
        CustVendTransCashDisc transCashDiscDebit;
        TransDate possibleCashDiscountDateDebit;
        TransDate possibleCashDiscountDateCredit;
        AmountCur settleAmountAssumingCashDiscTakenDebit;
        AmountCur settleAmountAssumingCashDiscTakenCredit;
        DiscAmount fullCashDiscAmountDebit;
        DiscAmount fullCashDiscAmountCredit;
        DiscAmount cashDiscAlreadyTakenDebit;
        DiscAmount cashDiscAlreadyTakenCredit;
        DiscAmount potentialDiscToTake;
        CustVendCashDiscountHelper cashDiscountHelperDebit;
        CustVendCashDiscountHelper cashDiscountHelperCredit;

        CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::construct();

        ModuleCustVend moduleCustVend;

        switch (this.getModule())
        {
            case SysModule::Cust:
                moduleCustVend = ModuleCustVend::Cust;
                break;

            case SysModule::Vend:
                moduleCustVend = ModuleCustVend::Vend;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany(settlementPair.getCreditCompany())
        {
            // will find grace days in the credit company for the paymemt mode on the credit transaction
            discGraceDays = this.discGraceDays(settlementPair.getCustVendTransCredit().PaymMode);

            if (settlementPair.getSpecTransCredit().SelectedDateUsedToCalcCashDisc != dateNull())
            {
                // use selected date to determine cash discount
                transCashDiscCredit = CustVendTransCashDisc::findByUseCashDisc(
                    moduleCustVend,
                    settlementPair.getCustVendTransOpenCredit().TableId,
                    settlementPair.getCustVendTransOpenCredit().RecId,
                    settlementPair.getCustVendTransOpenCredit().UseCashDisc,
                    settlementPair.getSpecTransCredit().SelectedDateUsedToCalcCashDisc,
                    discGraceDays);
            }
            else if (settlementPair.getCustVendTransOpenCredit().UseCashDisc == UseCashDisc::Always
                || !settlementPair.getCustVendTransCredit().isCreditNote()
                || (this.cashDiscForCreditNote(settlementPair.getCreditCompany()) && settlementPair.getCustVendTransOpenCredit().UseCashDisc == UseCashDisc::Normal))
            {
                // Find the cash discount record for credit based on debit transaction date
                transCashDiscCredit = CustVendTransCashDisc::findByUseCashDisc(
                    moduleCustVend,
                    settlementPair.getCustVendTransOpenCredit().TableId,
                    settlementPair.getCustVendTransOpenCredit().RecId,
                    settlementPair.getCustVendTransOpenCredit().UseCashDisc,
                    settlementPair.getCustVendTransOpenDebit().TransDate,
                    discGraceDays);
            }

            if (transCashDiscCredit)
            {
                possibleCashDiscountDateCredit = settlementPair.getCustVendTransOpenCredit().CashDiscDate;

                fullCashDiscAmountCredit = this.amount(transCashDiscCredit.CashDiscAmount);
                cashDiscAlreadyTakenCredit = this.amount(settlementPreviousTotals.getPrevCashDiscTaken(
                    settlementPair.getCustVendTransOpenCredit().getCashDiscAlreadyTaken(),
                    settlementPair.getCustVendTransOpenCredit().company(),
                    settlementPair.getCustVendTransOpenCredit().RecId));

                cashDiscountHelperCredit = CustVendCashDiscountHelper::construct(settlementPair.getCustVendTransOpenCredit());
                cashDiscountHelperCredit.parmCashDiscountTaken(this.amount(cashDiscAlreadyTakenCredit));
                cashDiscountHelperCredit.parmFullCashDiscountForTier(transCashDiscCredit.CashDiscAmount);
                cashDiscountHelperCredit.parmPreviousSettledAmount(settlementPreviousTotals.getPrevSettledAmount(
                    settlementPair.getCustVendTransOpenCredit().getPrevSettledAmount(),
                    settlementPair.getCustVendTransOpenCredit().company(),
                    settlementPair.getCustVendTransOpenCredit().RecId));

                cashDiscountHelperCredit.parmRemainingOpenBalance(this.amount(
                    settlementPair.getCustVendTransOpenCredit().transOpenData().findRemainingAmountCur()
                    + settlementPair.getSpecTransCredit().Balance01));

                if (settlementPair.getSpecTransCredit().SelectedDateUsedToCalcCashDisc != dateNull())
                {
                    possibleCashDiscountAmountCredit = settlementPair.getSpecTransCredit().CashDiscToTake;
                }
                else
                {
                    this.reverseTransOpenAmounts(settlementPair.getCustVendTransOpenCredit());
                    possibleCashDiscountAmountCredit = this.amount(cashDiscountHelperCredit.determineCashDiscForOpenAmount());
                    this.reverseTransOpenAmounts(settlementPair.getCustVendTransOpenCredit());
                }
            }
        }

        changecompany(settlementPair.getDebitCompany())
        {
            if (settlementPair.getSpecTransDebit().SelectedDateUsedToCalcCashDisc != dateNull())
            {
                // use selected date to determine cash discount
                transCashDiscDebit = CustVendTransCashDisc::findByUseCashDisc(
                    moduleCustVend,
                    settlementPair.getCustVendTransOpenDebit().TableId,
                    settlementPair.getCustVendTransOpenDebit().RecId,
                    settlementPair.getCustVendTransOpenDebit().UseCashDisc,
                    settlementPair.getSpecTransDebit().SelectedDateUsedToCalcCashDisc,
                    discGraceDays);

                // No discount was found for selected date, get last applicable discount
                if (!transCashDiscDebit.RecId && settlementPair.getSpecTransDebit().CashDiscToTake)
                {
                    transCashDiscDebit = CustVendTransCashDisc::findLastCashDisc(
                        moduleCustVend,
                        settlementPair.getCustVendTransOpenDebit().TableId,
                        settlementPair.getCustVendTransOpenDebit().RecId);
                }
            }
            else
            {
                // Find the cash discount record for debit based on credit transaction date
                transCashDiscDebit = CustVendTransCashDisc::findByUseCashDisc(
                    moduleCustVend,
                    settlementPair.getCustVendTransOpenDebit().TableId,
                    settlementPair.getCustVendTransOpenDebit().RecId,
                    settlementPair.getCustVendTransOpenDebit().UseCashDisc,
                    settlementPair.getCustVendTransOpenCredit().TransDate,
                    discGraceDays);
            }

            if (transCashDiscDebit)
            {
                possibleCashDiscountDateDebit = transCashDiscDebit.CashDiscDate;

                fullCashDiscAmountDebit = this.amount(transCashDiscDebit.CashDiscAmount);
                cashDiscAlreadyTakenDebit = this.amount(settlementPreviousTotals.getPrevCashDiscTaken(
                    settlementPair.getCustVendTransOpenDebit().getCashDiscAlreadyTaken(),
                    settlementPair.getCustVendTransOpenDebit().company(),
                    settlementPair.getCustVendTransOpenDebit().RecId));

                cashDiscountHelperDebit = CustVendCashDiscountHelper::construct(settlementPair.getCustVendTransOpenDebit());
                cashDiscountHelperDebit.parmCashDiscountTaken(this.amount(cashDiscAlreadyTakenDebit));
                cashDiscountHelperDebit.parmFullCashDiscountForTier(transCashDiscDebit.CashDiscAmount);
                cashDiscountHelperDebit.parmPreviousSettledAmount(settlementPreviousTotals.getPrevSettledAmount(
                    settlementPair.getCustVendTransOpenDebit().getPrevSettledAmount(),
                    settlementPair.getCustVendTransOpenDebit().company(),
                    settlementPair.getCustVendTransOpenDebit().RecId));

                cashDiscountHelperDebit.parmRemainingOpenBalance(this.amount(
                    settlementPair.getCustVendTransOpenDebit().transOpenData().findRemainingAmountCur()
                    + settlementPair.getSpecTransDebit().Balance01));

                if (settlementPair.getSpecTransDebit().SelectedDateUsedToCalcCashDisc != dateNull())
                {
                    possibleCashDiscountAmountDebit = settlementPair.getSpecTransDebit().CashDiscToTake;
                }
                else
                {
                    // adjust full cash discount by amount already taken
                    this.reverseTransOpenAmounts(settlementPair.getCustVendTransOpenDebit());
                    possibleCashDiscountAmountDebit = this.amount(cashDiscountHelperDebit.determineCashDiscForOpenAmount());
                    this.reverseTransOpenAmounts(settlementPair.getCustVendTransOpenDebit());
                }

                // adjust for tiered discount
                if (settlementPair.getSpecTransDebit().CashDiscToTake != 0.0
                    && (settlementPair.getCustVendTransOpenDebit().AmountCur == (settlementPair.getSpecTransDebit().Balance01 + settlementPair.getSpecTransDebit().CashDiscToTake)))
                {
                    if (settlementPair.getSpecTransDebit().CashDiscToTake != possibleCashDiscountAmountDebit)
                    {
                        // The discount the system calculated is not the same as the discount on specTrans and user wants to fully settle
                        // This could happen when there are tiered discount and the system date on the open transaction window is not the same as
                        // payment transaction date, so a different tiers are used.
                        // To allow the transaction to be fully settled adjust the specTrans.Balance01 field
                        settlementPair.getSpecTransDebit().Balance01 = settlementPair.getCustVendTransOpenDebit().AmountCur - possibleCashDiscountAmountDebit;
                    }
                }
            }
        }

        AmountCur fullSettlementDiffAmountCurLocal = _fullSettlementDiffAmountCur;

        // full settlement flag marked
        if (_isFullSettlement && settlementPair.getSpecTransDebit().FullSettlement == NoYes::Yes && fullSettlementDiffAmountCurLocal)
        {
            // if there was a real discount, full settlement is already taken into account
            if (! (transCashDiscDebit.RecId && settlementPair.getSpecTransDebit().SelectedDateUsedToCalcCashDisc))
            {
                // This is the transaction that was designated to get any diffence, so adjust the cash
                // discount be the difference amount
                fullSettlementDiffAmountCurLocal = settlementPair.convertFullSettlementAmountToDebitCur(fullSettlementDiffAmountCurLocal);
                possibleCashDiscountAmountDebit += fullSettlementDiffAmountCurLocal;
            }

            settlementPair.getCustVendTransOpenDebit().UseCashDisc = UseCashDisc::Always;
            possibleCashDiscountDateDebit = settlementPair.getCustVendTransOpenCredit().TransDate;
        }

        if (_isFullSettlement && settlementPair.getSpecTransCredit().FullSettlement == NoYes::Yes && fullSettlementDiffAmountCurLocal)
        {
            // if there was a real discount, full settlement is already taken into account
            if (! (transCashDiscCredit.RecId && settlementPair.getSpecTransCredit().SelectedDateUsedToCalcCashDisc))
            {
                // This is the transaction that was designated to get any diffence, so adjust the cash
                // discount be the difference amount
                fullSettlementDiffAmountCurLocal = settlementPair.convertFullSettlementAmountToCreditCur(fullSettlementDiffAmountCurLocal);
                possibleCashDiscountAmountCredit += fullSettlementDiffAmountCurLocal;
            }

            settlementPair.getCustVendTransOpenCredit().UseCashDisc = UseCashDisc::Always;
            possibleCashDiscountDateCredit = settlementPair.getCustVendTransOpenDebit().TransDate;
        }

        if (possibleCashDiscountAmountDebit != 0.0 || possibleCashDiscountAmountCredit != 0.0)
        {
            // Determine the settled amount if the possible cash discount is taken in debit transaction currency
            settleAmountAssumingCashDiscTakenDebit = this.calcSettleAmountCurDebitBasedOnPossibleCashDisc(
                possibleCashDiscountAmountDebit,
                possibleCashDiscountAmountCredit,
                _remainingSpecTransRecords);

            // Convert the settlement in debit transaction currency to value in credit transaction currency
            settleAmountAssumingCashDiscTakenCredit = -(settleAmountAssumingCashDiscTakenDebit / settlementExchRate.getPaymentToInvoice());
        }

        actualCashDiscAmountDebit = this.calcActualCashDiscAmountDebit(
            settleAmountAssumingCashDiscTakenDebit,
            possibleCashDiscountAmountDebit,
            currencyHelper,
            cashDiscountHelperDebit);

        actualCashDiscAmountCredit = this.calcActualCashDiscAmountCredit(
            settleAmountAssumingCashDiscTakenCredit,
            possibleCashDiscountAmountCredit,
            currencyHelper,
            cashDiscountHelperCredit);

        // update amounts on transaction for discount
        if (actualCashDiscAmountDebit != 0.0)
        {
            actualCashDiscAmountDebit = CurrencyExchange::round(actualCashDiscAmountDebit, settlementPair.getCustVendTransDebit().CurrencyCode);

            actualCashDiscAmountMstDebit = settlementExchRate.convertDebitCurToMst(actualCashDiscAmountDebit, true);
            actualCashDiscAmountReportingDebit = settlementExchRate.convertDebitCurToReporting(actualCashDiscAmountDebit);

            // Get the ledger account for the cash discount
            cashDiscTransCodeDebit = transCashDiscDebit.CashDiscCode;
            cashDiscLedgerDimensionDebit = this.determineCashDiscountLedgerDimensionDebit(cashDiscTransCodeDebit);

            if (cashDiscountHelperDebit == null) //No prior cash discount was found
            {
                cashDiscountHelperDebit = CustVendCashDiscountHelper::construct(settlementPair.getCustVendTransOpenDebit());
                cashDiscountHelperDebit.parmCashDiscountTaken(this.amount(cashDiscAlreadyTakenDebit));
                cashDiscountHelperDebit.parmPreviousSettledAmount(settlementPreviousTotals.getPrevSettledAmount(
                    settlementPair.getCustVendTransOpenDebit().getPrevSettledAmount(),
                    settlementPair.getCustVendTransOpenDebit().company(),
                    settlementPair.getCustVendTransOpenDebit().RecId));
            }

            if (settlementPair.getSpecTransDebit().SelectedDateUsedToCalcCashDisc == dateNull())
            {
                potentialDiscToTake = possibleCashDiscountAmountDebit;
            }
            else
            {
                potentialDiscToTake = (abs(fullCashDiscAmountDebit) > abs(cashDiscAlreadyTakenDebit)) ?
                    fullCashDiscAmountDebit - cashDiscAlreadyTakenDebit : 0.0;
            }

            // Refactor: This code updates the buffer and should be moved up to SettlementPair
            this.updateCashDiscAmountOnDebitTrans(
                actualCashDiscAmountDebit,
                actualCashDiscAmountMstDebit,
                actualCashDiscAmountReportingDebit,
                potentialDiscToTake,
                possibleCashDiscountDateDebit,
                cashDiscountHelperDebit);
        }

        if (actualCashDiscAmountCredit != 0.0)
        {
            actualCashDiscAmountCredit = CurrencyExchange::round(actualCashDiscAmountCredit, settlementPair.getCustVendTransCredit().CurrencyCode);

            currencyHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::current(settlementPair.getCreditCompany())));
            currencyHelper.parmExchangeDate(settlementPair.getCustVendTransCredit().TransDate);
            currencyHelper.parmExchangeRate1(settlementPair.getCustVendTransCredit().ExchRate);
            currencyHelper.parmExchangeRate2(settlementPair.getCustVendTransCredit().ExchRateSecond);
            settlementPair.getCustVendTransCredit().setExchangeHelperReportingExchRate(currencyHelper);

            actualCashDiscAmountMstCredit = currencyHelper.calculateTransactionToAccounting(settlementPair.getCustVendTransCredit().CurrencyCode, actualCashDiscAmountCredit, true);            
            actualCashDiscAmountReportingCredit = currencyHelper.calculateTransactionCurrencyToReportingCurrency(settlementPair.getCustVendTransCredit().CurrencyCode, actualCashDiscAmountCredit);

            // get cash discount ledger account
            cashDiscLedgerDimensionCredit = this.determineCashDiscountLedgerDimensionCredit(transCashDiscCredit.CashDiscCode);

            if (cashDiscountHelperCredit == null) //No prior cash discount was found
            {
                cashDiscountHelperCredit = CustVendCashDiscountHelper::construct(settlementPair.getCustVendTransOpenCredit());
                cashDiscountHelperCredit.parmCashDiscountTaken(this.amount(cashDiscAlreadyTakenCredit));
                cashDiscountHelperCredit.parmPreviousSettledAmount(settlementPreviousTotals.getPrevSettledAmount(
                    settlementPair.getCustVendTransOpenCredit().getPrevSettledAmount(),
                    settlementPair.getCustVendTransOpenCredit().company(),
                    settlementPair.getCustVendTransOpenCredit().RecId));
            }

            if (settlementPair.getSpecTransCredit().SelectedDateUsedToCalcCashDisc == dateNull())
            {
                potentialDiscToTake = possibleCashDiscountAmountCredit;
            }
            else
            {
                potentialDiscToTake = (abs(fullCashDiscAmountCredit) > abs(cashDiscAlreadyTakenCredit)) ?
                    fullCashDiscAmountCredit - cashDiscAlreadyTakenCredit : 0.0;
            }

            // Refactor: This code updates the buffer and should be moved up to SettlementPair
            this.updateCashDiscAmountOnCreditTrans(
                actualCashDiscAmountCredit,
                actualCashDiscAmountMstCredit,
                actualCashDiscAmountReportingCredit,
                potentialDiscToTake,
                possibleCashDiscountDateCredit,
                cashDiscountHelperCredit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCashDiscAmountDebit</Name>
				<Source><![CDATA[
    public DiscAmount getActualCashDiscAmountDebit()
    {
        return actualCashDiscAmountDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCashDiscAmountMstDebit</Name>
				<Source><![CDATA[
    public AmountMST getActualCashDiscAmountMstDebit()
    {
        return actualCashDiscAmountMstDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCashDiscAmountReportingDebit</Name>
				<Source><![CDATA[
    public AmountMSTSecondary getActualCashDiscAmountReportingDebit()
    {
        return actualCashDiscAmountReportingDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscTransCodeDebit</Name>
				<Source><![CDATA[
    public CashDiscCode getCashDiscTransCodeDebit()
    {
        return cashDiscTransCodeDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscLedgerDimensionDebit</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount getCashDiscLedgerDimensionDebit()
    {
        return cashDiscLedgerDimensionDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCashDiscAmountCredit</Name>
				<Source><![CDATA[
    public DiscAmount getActualCashDiscAmountCredit()
    {
        return actualCashDiscAmountCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCashDiscAmountMstCredit</Name>
				<Source><![CDATA[
    public AmountMST getActualCashDiscAmountMstCredit()
    {
        return actualCashDiscAmountMstCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualCashDiscAmountReportingCredit</Name>
				<Source><![CDATA[
    public AmountMSTSecondary getActualCashDiscAmountReportingCredit()
    {
        return actualCashDiscAmountReportingCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscLedgerDimensionCredit</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount getCashDiscLedgerDimensionCredit()
    {
        return cashDiscLedgerDimensionCredit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>