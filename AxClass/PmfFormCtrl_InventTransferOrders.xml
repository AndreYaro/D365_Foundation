<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_InventTransferOrders</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form InventTransferOrders.
/// </summary>
/// <remarks>
/// Process Distribution
/// </remarks>
class PmfFormCtrl_InventTransferOrders extends PmfFormCtrl
{
    PdsCWFormCtrl   cwCtrl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complete the standard field modified functionality
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId of modified field
    /// </param>
    /// <remarks>
    /// Method also calls the Form control button manager.
    /// </remarks>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(InventTransferOrders,PdsBatchAttribReserve)),
                methodstr(PmfFormCtrl_InventTransferOrders, isBatchEnabled),
                ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the BatchId Inventory dimension enabled?
    /// </summary>
    /// <returns>
    /// true, if the BatchId Inventory dimension is enabled: otherwise false
    /// </returns>
    /// <remarks>
    /// Check the current inventTransferLine record to determine if the item is
    /// batch enabled. This check is not to determine if there are any batch
    /// attributes assocciated.
    /// </remarks>
    public NoYes isBatchEnabled()
    {
        InventTransferLine  invTransferLn;
        boolean             ret = false;

        if (buffer.TableId == tablenum(InventTransferLine))
        {
            invTransferLn = buffer;
            ret = InventTable::find(invTransferLn.ItemId).isItemBatchActivated();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten to make a protected method.
    /// </summary>
    protected void new()
    {
        super();

        if (this.isCatchWeightEnabled())
        {
            cwCtrl = PdsCWFormCtrl_Std::construct();
            cwCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                    [[fieldnum(InventTransferLine,QtyTransfer),
                      fieldnum(InventTransferLine,PdsCWQtyTransfer),
                      false],
                     [fieldnum(InventTransferLine,QtyShipNow),
                      fieldnum(InventTransferLine,PdsCWQtyShipNow),
                      false],
                     [fieldnum(InventTransferLine,QtyReceiveNow),
                      fieldnum(InventTransferLine,PdsCWQtyReceiveNow),
                      false]]
                    ));
            cwCtrl.parmItemFieldId(fieldnum(InventTransferLine,ItemId));
            cwCtrl.parmUnitMethodStr(tablemethodstr(InventTransferLine, pdsCWUnitId));

            this.addSubFormCtrl(cwCtrl);
        }

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - InventTransferLine
    /// </param>
    /// <param name="_datasources2">
    /// Form Data source used by class - InventTransferTable
    /// Default value - null.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventTransferLine))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventTransferTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_InventTransferOrders construct()
    {
        return new PmfFormCtrl_InventTransferOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_InventTransferOrders</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// New instance of class <c>PmfFormCtrl_InventTransferOrders</c>
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PmfFormCtrl_InventTransferOrders</c> and sets the formRun variable
    /// to the vlue of the calling form.
    /// </remarks>
    public static PmfFormCtrl_InventTransferOrders constructFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_InventTransferOrders::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>