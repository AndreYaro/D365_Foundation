<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTransData extends CustVendTransData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashledgerTransTxt</Name>
				<Source><![CDATA[
    public LedgerTransTxt cashledgerTransTxt()
    {
        return LedgerTransTxt::VendCashPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceJour_RU</Name>
				<Source><![CDATA[
    public CustVendInvoiceJour custVendInvoiceJour_RU()
    {
        return VendInvoiceJour::findFromVendTrans(custVendTrans.Invoice, custVendTrans.TransDate, custVendTrans.AccountNum, false, custVendTrans.Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    CustVendTable custVendTable(boolean _forUpdate = false)
    {
        return VendTable::find(custVendTrans.AccountNum, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile defaultPostingProfile()
    {
        return VendParameters::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice</Name>
				<Source><![CDATA[
    boolean existInvoice()
    {
        return VendInvoiceJour::findFromVendTransVoucher(custVendTrans.Invoice, custVendTrans.Voucher, custVendTrans.TransDate, custVendTrans.AccountNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable findPaymModeTable(boolean _forUpdate = false)
    {
        return VendPaymModeTable::find(custVendTrans.PaymMode, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleDate</Name>
				<Source><![CDATA[
    public TransDate getSettleDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        select firstonly crossCompany TransDate from vendTransOpen
            order by TransDate desc
            join firstonly RecId from specTrans
            where specTrans.SpecTableId == _ledgerJournalTrans.TableId
               && specTrans.SpecRecId == _ledgerJournalTrans.RecId
               && specTrans.SpecCompany == _ledgerJournalTrans.company()
               && specTrans.RefTableId == vendTransOpen.TableId
               && specTrans.RefRecId == vendTransOpen.RecId
               && specTrans.RefCompany == vendTransOpen.DataAreaId;

        return vendTransOpen.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnrealizedParameters_W</Name>
				<Source><![CDATA[
    public container getUnrealizedParameters_W(createdTransactionId _createdTransactionId, TransDate _previousUnrealizedDate = dateNull())
    {
        VendExchRateAdjustment vendExchRateAdjustment;

        select firstonly Dimensions, ExchPrinciple, UseProfile, PostingProfile, DateOfRate from vendExchRateAdjustment
            where vendExchRateAdjustment.CreatedTransactionId == _createdTransactionId &&
                  (!_previousUnrealizedDate || (_previousUnrealizedDate && vendExchRateAdjustment.DateOfRate == _previousUnrealizedDate));

        return [vendExchRateAdjustment.Dimensions, vendExchRateAdjustment.ExchPrinciple, vendExchRateAdjustment.UseProfile, vendExchRateAdjustment.PostingProfile, vendExchRateAdjustment.DateOfRate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTax1099</Name>
				<Source><![CDATA[
    protected void settleTax1099(CustVendSettlement _custVendSettlement, CustVendTrans _origTrans)
    {
        super(_custVendSettlement, _origTrans);

        _custVendSettlement.SettleTax1099Amount += custVendTrans.SettleTax1099Amount - _origTrans.SettleTax1099Amount;
        _custVendSettlement.SettleTax1099StateAmount += custVendTrans.SettleTax1099StateAmount - _origTrans.SettleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogSettlementTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogSettlementTxt()
    {
        return "@SYS23977";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogSettlementType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogSettlementType()
    {
        return TransactionLogType::VendTransEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplAccount_RU</Name>
				<Source><![CDATA[
    public CustVendTrans updateEmplAccount_RU(LedgerVoucher _ledgerVoucher,
                                              LedgerPostingType _ledgerPostingType,
                                              DiscAmount _possibleCashDisc,
                                              CashDiscdate _cashDiscdate,
                                              EmplAccount_RU _emplAccount,
                                              PostingProfile _emplPostingProfile,
                                              ExchRate _exchRate,
                                              ExchrateSecondary _exchrateSecondary,
                                              boolean _postToGeneralLedger = true)
    {
        VendTrans vendTransEmpl = custVendTrans.data();
        VendTrans vendTrans = custVendTrans;
        VendTrans_W vendTrans_W;
        TransactionTxt transactionTxt = TransactionTxt::construct();
        LedgerBondClient_RU ledgerBondClient = _ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
        LedgerBondId_RU lastBalanceVRefId;
        EmplVoucher_RU emplVoucher;
        EmplTrans_RU emplTrans;
        ExchRate exchRate;
        ExchrateSecondary exchrateSecondary;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        CurrencyExchangeHelper exchangeHelper;

        if (_emplAccount)
        {
            exchRate = _exchRate;
            exchrateSecondary = _exchrateSecondary;
            vendTransEmpl.DocumentNum = '';
            vendTransEmpl.DocumentDate = dateNull();
            vendTransEmpl.Invoice = '';
            vendTransEmpl.PostingProfile = this.defaultPostingProfile();
            vendTransEmpl.AmountCur = -vendTrans.AmountCur;

            transactionTxt.setType(this.cashledgerTransTxt());
            transactionTxt.setVoucher(vendTrans.Voucher);
            transactionTxt.setFormLetter(vendTrans.Invoice);
            transactionTxt.setLanguage(vendTrans.languageId());

            vendTransEmpl.Txt = transactionTxt.txt();

            if (_possibleCashDisc && _cashDiscdate >= vendTransEmpl.TransDate)
            {
                vendTransEmpl.AmountCur += _possibleCashDisc;
                exchRate = 0;
                exchrateSecondary = 0;

                if (_postToGeneralLedger && ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }
            }
            else
            {
                if (_postToGeneralLedger && ledgerBondClient)
                {
                    lastBalanceVRefId = ledgerBondClient.findVRefByPostingType(LedgerPostingType::VendBalance);
                }
            }

            exchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), vendTrans.TransDate);
            exchangeHelper.parmExchangeRate1(exchRate);
            exchangeHelper.parmExchangeRate2(exchrateSecondary);
            exchangeHelper.parmLedgerRecId(Ledger::current());

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerVoucher.findLedgerVoucherObject(),
                _ledgerPostingType,
                LedgerDimensionFacade::serviceCreateLedgerDimension(vendTrans.summaryLedgerDimension(), vendTrans.DefaultDimension),
                vendTrans.CurrencyCode,
                vendTransEmpl.AmountCur,
                exchangeHelper);
            ledgerVoucherTransObject.parmSourceTableId(vendTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(vendTrans.RecId);

            if (abs(vendTrans.AmountCur) == abs(vendTransEmpl.AmountCur))
            {
                vendTrans_W = vendTrans.vendTrans_W();
                vendTrans_W.EmplAccount_RU = _emplAccount;
                vendTrans.packVendTrans_W(vendTrans_W);
                vendTrans.update();

                vendTrans_W = vendTransEmpl.vendTrans_W();
                vendTrans_W.EmplAccount_RU = _emplAccount;
                vendTransEmpl.packVendTrans_W(vendTrans_W);
            }

            if (_postToGeneralLedger)
            {
                _ledgerVoucher.addTrans(ledgerVoucherTransObject);
            }

            vendTransEmpl.AmountMST = ledgerVoucherTransObject.parmAccountingCurrencyAmount();
            vendTransEmpl.ReportingCurrencyAmount = ledgerVoucherTransObject.parmReportingCurrencyAmount();

            if (_postToGeneralLedger && lastBalanceVRefId)
            {
                ledgerBondClient.bondVRef2VRef(lastBalanceVRefId, ledgerBondClient.lastVrefId());
            }

            emplVoucher = new EmplVoucher_RU(_ledgerVoucher, _emplAccount, -vendTransEmpl.AmountCur, vendTrans.CurrencyCode, LedgerTransTxt::VendCashPayment, vendTrans.DefaultDimension, _emplPostingProfile);

            emplVoucher.setSourceTable(vendTransEmpl);
            emplVoucher.post(emplTrans, NoYes::No, Currency::noYes2UnknownNoYes(vendTrans.euroTriangulation), _postToGeneralLedger, 0, exchRate, exchrateSecondary);

            if (_postToGeneralLedger && ledgerBondClient && !lastBalanceVRefId)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
                ledgerBondClient.removeCurrentLogObject();
            }

            vendTransEmpl.insert();
        }
        else
        {
            vendTransEmpl.RecId = 0;
        }

        return vendTransEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetForCashDiscounts_PSN</Name>
				<Source><![CDATA[
    protected void updateBudgetForCashDiscounts_PSN(LedgerVoucherGroup _ledgerVoucherGroup)
    {
        VendTrans::updateBudgetForCashDiscounts_PSN(_ledgerVoucherGroup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>