<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanInstrumentationKanbanActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanInstrumentationKanbanActivities</c> class provides activities for processing kanbans.
/// </summary>
internal final class KanbanInstrumentationKanbanActivities
{
    private const str ActivityNamePrefix        = 'Kanban.';
    
    private const str EmptyKanban               = 'EmptyKanban';
    private const str ResetKanban               = 'ResetKanban';
    private const str ResetKanbanToNotAssigned  = 'ResetKanbanToNotAssigned';
    private const str AssignKanban              = 'AssignKanban';
    private const str ReceiveKanban             = 'ReceiveKanban';
    private const str CustomStatusUpdate        = 'CustomStatusUpdate';

    private KanbanInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(KanbanInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static KanbanInstrumentationKanbanActivities newFromLogger(KanbanInstrumentationLogger _logger)
    {
        return new KanbanInstrumentationKanbanActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runKanbanStatusUpdate</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext runKanbanStatusUpdate(LeanKanbanStatus _kanbanStatus, boolean _isReset)
    {
        if (_isReset)
        {
            switch (_kanbanStatus)
            {
                case LeanKanbanStatus::NotAssigned:
                    return this.resetKanbanToNotAssigned();
                
                default:
                    return this.resetKanban();
            }
        }

        switch (_kanbanStatus)
        {
            case LeanKanbanStatus::Assigned:
                return this.assignKanban();

            case LeanKanbanStatus::Emptied:
                return this.emptyKanban();

            case LeanKanbanStatus::Received:
                return this.receiveKanban();
        }

        return this.customStatusUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignKanban</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext assignKanban()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + AssignKanban);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanToNotAssigned</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resetKanbanToNotAssigned()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + ResetKanbanToNotAssigned);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanban</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resetKanban()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + ResetKanban);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveKanban</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext receiveKanban()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + ReceiveKanban);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyKanban</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext emptyKanban()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + EmptyKanban);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customStatusUpdate</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext customStatusUpdate()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + CustomStatusUpdate);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>