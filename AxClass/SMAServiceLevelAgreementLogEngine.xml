<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceLevelAgreementLogEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaServiceLevelAgreementLogEngine extends RunBase
{
    SMAServiceOrderId           serviceOrderId;
    SMALogStatus                chosenLogStatus;
    SMASLAStartDateTime         startEndDateTime;
    NoYes                       createReason;
    SMAStageId                  reason;
    Description                 reasonDescription;
    SMAServiceOrderTable        serviceOrderTable;
    SMAServiceOrderLine         serviceOrderLine;
    smmActivities               activities;
    DialogRunbase               dialog;
    DialogField                 dialogTime;
    DialogField                 dialogDate;
    DialogField                 dialogCreateReason;
    DialogField                 dialogReason;
    DialogField                 dialogReasonDescription;
    SMAParameters               parameters;
    Description                 dialogCaption;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
            startEndDateTime
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description from the current class by calling the static description method on the
    /// class if there is one.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description, for example, when you need some
    /// internal variables to build the description text.The static <c>Description</c> method is generally
    /// used to obtain the description of a class because you do not have to instantiate the class to call
    /// it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        return dialogCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean                 ret;
        SMALatestCompletionDateTime   latestCompletionDateTime;

        ret = super(_calledFrom);

        if (dialogCreateReason && dialogCreateReason.value() == NoYes::Yes)
        {
            if (!dialogReason.value())
            {
                // A reason must be specified
                ret = checkFailed("@SYS104855");
            }
        }
        else
        if (chosenLogStatus == SMALogStatus::Closed && parameters.ReasonOnExceedTime)
        {
            latestCompletionDateTime = serviceOrderTable.displayLatestCompletionDateTime();
            if (startEndDateTime > latestCompletionDateTime)
            {
                // A reason must be specified when the service order is closed later than agreed
                ret = checkFailed("@SYS104857");
            }
        }
        else
        if (chosenLogStatus == SMALogStatus::Cancel && parameters.ReasonOnCancel)
        {
            // A reason must be specified when the service order is cancelled
            ret = checkFailed("@SYS110378");
        }

        if (dialogReason && dialogReason.value())
        {
            if (!SMAReasonTable::find(dialogReason.value()))
            {
                // Invalid reason specified
                ret = checkFailed("@SYS104856");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup                     dialogGroup;
        SMAServiceLevelAgreementTable   serviceLevelAgreementTable;

        startEndDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(),DateTimeUtil::getUserPreferredTimeZone());
        dialog = this.dialogInternal(dialog);

        if (chosenLogStatus == SMALogStatus::Closed)
        {
            dialogGroup = dialog.addGroup();

            // End date and time
            dialogGroup.caption("@SYS34406");

            // End time of period
            dialogTime = dialog.addFieldValue(extendedTypeStr(SMASLAEndDateTime), startEndDateTime, "@SYS8758", "@SYS102926");
        }
        else
        if (chosenLogStatus == SMALogStatus::Open)
        {
            serviceLevelAgreementTable = SMAServiceLevelAgreementTable::find(SMAAgreementTable::find(serviceOrderTable.AgreementId).ServiceLevelAgreementId);

            dialogGroup = dialog.addGroup();
            // Start date and time
            dialogGroup.caption("@SYS34405");

            // Start time of period
            dialogTime = dialog.addFieldValue(extendedTypeStr(SMASLAStartDateTime), startEndDateTime, "@SYS8758", "@SYS102925");
        }

        if (chosenLogStatus == SMALogStatus::Closed || chosenLogStatus == SMALogStatus::Cancel)
        {
            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                dialog.addText("@SYS105910");
            }

            // Reason
            dialog.addGroup("@SYS86426");

            // Create reason
            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                dialogCreateReason = dialog.addField(enumStr(NoYes), "@SYS104635", "@SYS113166");
            }
            else
            {
                dialogCreateReason = dialog.addField(enumStr(NoYes), "@SYS104635", "@SYS113164");
            }

            dialogReason = dialog.addField(extendedTypeStr(SMAReasonId));

            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                dialogReasonDescription = dialog.addField(extendedTypeStr(Description),"@SYS6303","@SYS113167");
            }
            else
            {
                dialogReasonDescription = dialog.addField(extendedTypeStr(Description),"@SYS6303","@SYS113165");
            }

            if ((parameters.ReasonOnCancel && chosenLogStatus == SMALogStatus::Cancel)
                ||(parameters.ReasonOnExceedTime && chosenLogStatus == SMALogStatus::Closed && (serviceOrderTable.calcLatestCompletionDateTime() < startEndDateTime)))
            {
                dialogCreateReason.value(NoYes::Yes);
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (chosenLogStatus != SMALogStatus::Cancel)
        {
            startEndDateTime        = DateTimeUtil::removeTimeZoneOffset(dialogTime.value(),DateTimeUtil::getUserPreferredTimeZone());
        }

        if (chosenLogStatus == SMALogStatus::Closed || chosenLogStatus == SMALogStatus::Cancel)
        {
            createReason        = dialogCreateReason.value();
            reason              = dialogReason.value();
            reasonDescription   = dialogReasonDescription.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SMALogStatus         _logStatus,
                       SMAServiceOrderTable _serviceOrderTable  = null,
                       SMAServiceOrderLine  _serviceOrderLine   = null,
                       smmActivities        _activities         = null)
    {
        super();

        chosenLogStatus     = _logStatus;
        serviceOrderTable   = _serviceOrderTable;
        serviceOrderLine    = _serviceOrderLine;
        activities          = _activities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = connull();

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        SMAReasonType       reasonType;

        parameters = SMAParameters::find();

        if (chosenLogStatus == SMALogStatus::Closed)
        {
            // Stop time log
            dialogCaption = "@SYS102927";
        }
        else
        if (chosenLogStatus == SMALogStatus::Cancel)
        {
            // Cancel time log
            dialogCaption = "@SYS104854";
        }
        else
        if (chosenLogStatus == SMALogStatus::Open)
        {
            // Start time log
            dialogCaption = "@SYS102928";
        }

        if (this.prompt())
        {
            // Update SLA time log status
            this.updateSLALog();

            if (createReason)
            {
                if (chosenLogStatus == SMALogStatus::Closed)
                {
                    reasonType = SMAReasonType::Stop;
                }
                else
                {
                    reasonType = SMAReasonType::Cancel;
                }

                SMAServiceOrderReason::createReasonFromTimeLog(serviceOrderTable.ServiceOrderId,
                                                               reason,
                                                               reasonType,
                                                               reasonDescription);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        int         version     = RunBase::getVersion(_packedClass);
        container   packedQuery = connull();

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSLALog</Name>
				<Source><![CDATA[
    public boolean updateSLALog()
    {
        SMAServiceLevelAgreementLog     serviceLevelAgreementLog;
        SMAServiceLevelAgreementLog     newServiceLevelAgreementLog;
        boolean                         checkIfDateIsOpen   = true;
        boolean                         ret                 = true;
        SMAServiceOrderTable            serviceOrder;

        if (chosenLogStatus == SMALogStatus::Closed || chosenLogStatus == SMALogStatus::Cancel)
        {
            // Update the service level agreement log
            ttsbegin;

            select firstonly forupdate serviceLevelAgreementLog order by RecId desc where serviceLevelAgreementLog.ServiceOrderId == serviceOrderTable.ServiceOrderId;

            serviceLevelAgreementLog.EndDateTime    = startEndDateTime;
            serviceLevelAgreementLog.Status         = chosenLogStatus;

            if (serviceLevelAgreementLog.validateWrite())
            {
                serviceLevelAgreementLog.update();

                if (chosenLogStatus == SMALogStatus::Closed)
                {
                    serviceOrder = SMAServiceOrderTable::find(serviceOrderTable.ServiceOrderId, true);
                    serviceOrder.ServiceLevelAgreementStatus = SMALogStatus::Closed;
                    serviceOrder.calcServiceLevelAgreementCompliance();

                    serviceOrder.update();
                }
                else
                {
                    SMAServiceLevelAgreementTable::cancelSLAOnServiceOrder(serviceOrderTable.ServiceOrderId);
                }

                // update caller (in case if dialog was called due to sign off)
                if (activities)
                {
                    activities.update();
                }
                else if (serviceOrderLine)
                {
                    serviceOrderLine.update();
                }
                else if (serviceOrderTable)
                {
                    serviceOrderTable.update();
                }
            }

            ttscommit;
        }
        else
        if (chosenLogStatus == SMALogStatus::Open)
        {
            // Insert into the service level agreement log
            ttsbegin;

            newServiceLevelAgreementLog.ServiceOrderId  = serviceOrderTable.ServiceOrderId;
            newServiceLevelAgreementLog.Status          = SMALogStatus::Open;
            newServiceLevelAgreementLog.StartDateTime   = startEndDateTime;

            if (newServiceLevelAgreementLog.validateWrite())
            {
                newServiceLevelAgreementLog.insert();

                // Update service level agreement status on the service order
                serviceOrder = SMAServiceOrderTable::find(serviceOrderTable.ServiceOrderId, true);
                serviceOrder.ServiceLevelAgreementStatus = SMALogStatus::Open;
                serviceOrder.calcServiceLevelAgreementCompliance();
                serviceOrder.update();
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMAServiceLevelAgreementLogEngine construct(SMALogStatus _logStatus, Common _buffer = null)
    {
        SMAServiceLevelAgreementLogEngine   logStatusEngine = null;
        SMAServiceOrderTable                serviceOrderTable;
        SMAServiceOrderLine                 serviceOrderLine;
        smmActivities                       activities;

        _buffer.reread();

        switch (_buffer.TableId)
        {
            case tablenum(smmActivities):
                activities          = _buffer;
                select firstonly serviceOrderLine where serviceOrderLine.ActivityId == activities.ActivityNumber;
                serviceOrderTable   = SMAServiceOrderTable::find(serviceOrderLine.ServiceOrderId);
                logStatusEngine     = new SMAServiceLevelAgreementLogEngine(_logStatus, serviceOrderTable, serviceOrderLine, activities);
                break;

            case tablenum(SMAServiceOrderLine):
                serviceOrderLine    = _buffer;
                serviceOrderTable   = SMAServiceOrderTable::find(serviceOrderLine.ServiceOrderId);
                logStatusEngine     = new SMAServiceLevelAgreementLogEngine(_logStatus, serviceOrderTable, serviceOrderLine);
                break;

            case tablenum(SMAServiceOrderTable):
                serviceOrderTable   = _buffer;
                logStatusEngine     = new SMAServiceLevelAgreementLogEngine(_logStatus, serviceOrderTable);
                break;

            default:
                // Class %1 must be called with caller.
                throw error(strfmt("@SYS53926", classStr(SMAServiceLevelAgreementLogEngine)));
        }

        return logStatusEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SMAServiceLevelAgreementLogEngine   logStatusEngine;
        SMALogStatus                        logStatus;

        if (args)
        {
            if (args.parmEnumType() == enumnum(SMALogStatus))
            {
                logStatus =  args.parmEnum();
            }

            if (args.record() && logStatus)
            {
                logStatusEngine = SMAServiceLevelAgreementLogEngine::construct(logStatus, args.record());
            }

            if (logStatusEngine)
            {
                logStatusEngine.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>