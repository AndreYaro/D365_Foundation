<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionManagerPurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalizingDefinitionManagerPurch</c> class provides the journalizing definition
///    implementation specific to the purchasing module.
/// </summary>
class JournalizingDefinitionManagerPurch extends JournalizingDefinitionManager
{
    ItemId                  itemId;
    VendAccount             vendAccount;
    InventCategoryRelation  categoryRelation;
    PurchasingTransactionType   purchasingTransactionType;
    JournalizingDefinitionPurchTrans  journalizingDefinitionPurchTrans;
    #define.LedgerPostingType('LedgerPostingType')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDefaultJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default journalizing definition.
    /// </summary>
    /// <returns>The default journalizing definition.</returns>
    protected JournalizingDefinitionId findDefaultJournalizingDefinition()
    {
        VendGroupId vendGroup = VendTable::groupId(vendAccount);

        if (this.parmItemId() != '')
        {
            ItemGroupId itemGroupId = InventTable::find(itemId).itemGroupId();

            select firstonly JournalizingDefinition from
                    journalizingDefinitionPurchTrans
                    order by ItemCode,VendAccountCode asc
                    where
                        ( (journalizingDefinitionPurchTrans.ItemCode == TableGroupCategoryAll::Table &&
                            journalizingDefinitionPurchTrans.ItemId == this.parmItemId() ) ||
                            (journalizingDefinitionPurchTrans.ItemCode == TableGroupCategoryAll::Group &&
                            journalizingDefinitionPurchTrans.ItemGroupId == itemGroupId) ||
                            journalizingDefinitionPurchTrans.ItemCode == TableGroupCategoryAll::All ) &&
                        ( (journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::Table &&
                            journalizingDefinitionPurchTrans.VendAccount == this.parmVendAccount()) ||
                            (journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::GroupId &&
                            journalizingDefinitionPurchTrans.VendGroup == vendGroup) ||
                            journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::All ) &&
                            journalizingDefinitionPurchTrans.PurchasingTransactionType == JournalizingDefinitionPurchTrans::ledgerPostingTypeToPurchasingTransactionType(ledgerPostingType);
        }
        else
        {
            // first try to search on the same level or for ALL condition
            select firstonly JournalizingDefinition from journalizingDefinitionPurchTrans
                order by ItemCode,VendAccountCode asc
                    where
                        ( (journalizingDefinitionPurchTrans.ItemCode == TableGroupCategoryAll::Category &&
                            journalizingDefinitionPurchTrans.EcoResCategory == this.parmCategoryRelation()) ||
                            journalizingDefinitionPurchTrans.ItemCode == TableGroupCategoryAll::All ) &&
                        ( (journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::Table &&
                            journalizingDefinitionPurchTrans.VendAccount == this.parmVendAccount()) ||
                            (journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::GroupId &&
                            journalizingDefinitionPurchTrans.VendGroup == vendGroup) ||
                            journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::All ) &&
                            journalizingDefinitionPurchTrans.PurchasingTransactionType == JournalizingDefinitionPurchTrans::ledgerPostingTypeToPurchasingTransactionType(ledgerPostingType);

            // if the record is not found, try to search in the hierarchy
            if (journalizingDefinitionPurchTrans.JournalizingDefinition == 0)
            {

                EcoResCategory selectedCategory = EcoResCategory::find(this.parmCategoryRelation());
                if (selectedCategory.RecId != 0)
                {
                    EcoResCategory ecoResCategory;

                    select firstonly JournalizingDefinition from journalizingDefinitionPurchTrans
                        order by ItemCode,VendAccountCode asc, ecoResCategory.Level desc
                            where
                                    journalizingDefinitionPurchTrans.ItemCode == TableGroupCategoryAll::Category &&
                                ( (journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::Table &&
                                    journalizingDefinitionPurchTrans.VendAccount == this.parmVendAccount()) ||
                                    (journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::GroupId &&
                                    journalizingDefinitionPurchTrans.VendGroup == vendGroup) ||
                                    journalizingDefinitionPurchTrans.VendAccountCode == TableGroupAll::All ) &&
                                    journalizingDefinitionPurchTrans.PurchasingTransactionType == JournalizingDefinitionPurchTrans::ledgerPostingTypeToPurchasingTransactionType(ledgerPostingType)
                            join Level from ecoResCategory
                            where
                                    ecoResCategory.RecId == journalizingDefinitionPurchTrans.EcoResCategory &&
                                    ecoResCategory.NestedSetLeft  <= selectedCategory.NestedSetLeft &&
                                    ecoResCategory.NestedSetRight >= selectedCategory.NestedSetRight &&
                                    ecoResCategory.CategoryHierarchy == selectedCategory.CategoryHierarchy;
                }
            }
        }
        return journalizingDefinitionPurchTrans.JournalizingDefinition;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journalizing definition ID, if one exists, by using the parameter values; if not, an
    ///    error message is displayed.
    /// </summary>
    /// <returns>
    ///    The journalizing definition ID based on the class parameter.
    /// </returns>
    /// <remarks>
    ///    This method is a purchasing specific implementation of the <c>getDefaultJournalizingDefinition</c>
    ///    method of the <c>JournalizingDefinitionManager</c> class.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The journalizing definition ID cannot be found for the specified parameter values.
    /// </exception>
    public JournalizingDefinitionId getDefaultJournalizingDefinition()
    {
        JournalizingDefinitionId            journalizingDefinitionId;

        if (JournalizingDefinitionManager::validateLedgerPostingTypePurch(ledgerPostingType))
        {
            journalizingDefinitionId = this.findDefaultJournalizingDefinition();

            if (journalizingDefinitionId == 0)
            {
                throw error("@SYS343074");
            }
        }
        else
        {
            throw error(strFmt("@SYS134109",enum2str(ledgerPostingType),#LedgerPostingType));
        }
        return journalizingDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryRelation</Name>
				<Source><![CDATA[
    InventCategoryRelation parmCategoryRelation(InventCategoryRelation _categoryRelation = categoryRelation)
    {
        categoryRelation = _categoryRelation;
        return  categoryRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return _vendAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>