<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentReplenishmentOrderFormLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ConsignmentReplenishmentOrderFormLetter</c> class is the entry point for the formletter framework
/// and can be used to interact with the posting form <c>ConsignmentDraftReplenishmentOrderJournal</c>.
///    The class gathers the information needed during the posting process and passes these values to the <c>FormletterService</c> class
/// using the data contract class pattern. The FormLetterServiceController invokes the <c>FormletterService class</c> when the run method is called.
/// </summary>
public abstract class ConsignmentReplenishmentOrderFormLetter extends FormLetterServiceController
{
    private ConsignmentReplenishmentOrderFormletterContract replenishmentOrderFormLetterContract;
    private FormRun draftReplenishmentOrderJournalForm;
    private VendDocumentTableMap vendDocumentTableMap;
    private RefRecId lastParmTableRecId;

    //List of parameters extracted from arguments for the transfer from main() to getpackedReplenishmentOrderFormletter()
    #LOCALMACRO.CachedArgsList
        parmEnum,
        className,
        methodName,
        callerFormName,
        callerMenuItemName
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a <c>ConsignmentReplenishmentOrderFormLetter</c> class derivative.
    /// </summary>
    /// <param name="_documentStatus">
    /// Document status.
    /// </param>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <returns>
    /// A <c>ConsignmentReplenishmentOrderFormLetter</c> class derivative.
    /// </returns>
    public static ConsignmentReplenishmentOrderFormLetter construct(DocumentStatus _documentStatus,
        IdentifierName _className  = '',
        IdentifierName _methodName = '',
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        if (_className && _methodName)
        {
            switch (_documentStatus)
            {
                case  DocumentStatus::PackingSlip : return ConsignmentReplenishmentOrderFormLetter_ProductReceipt::newConsignmentProductReceipt(_className, _methodName, _executionMode);
            }
        }
        else
        {
            switch (_documentStatus)
            {
                case  DocumentStatus::PackingSlip : return ConsignmentReplenishmentOrderFormLetter_ProductReceipt::newConsignmentProductReceipt();
            }
        }

        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(IdentifierName _className='',
        IdentifierName _methodName='',
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);

        replenishmentOrderFormLetterContract = contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedArguments</Name>
				<Source><![CDATA[
    protected static container getCachedArguments(Args _args)
    {
        str className, methodName;
        SysOperationExecutionMode mode;
        [className, methodName, mode] = FormLetterServiceController::parseServiceInfo(_args);

        int parmEnum = _args.parmEnum();

        MenuItemNameAction  callerMenuItemName = _args.menuItemName();

        Object          callerForm = _args.caller();
        IdentifierName  callerFormName;

        if (callerForm)
        {
            callerFormName    = _args.caller().name();
        }

        return [#CachedArgsList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args)
        {
            throw error("@SYS25407");
        }

        Common record = _args.record();

        FormDataSource  recordDataSource;
        container       dataSourceRecordsPacked;

        if (record)
        {
            recordDataSource  = FormDataUtil::getFormDataSource(record);
            dataSourceRecordsPacked = FormLetter::getFormRecord(recordDataSource);
        }

        int                         parmEnum;
        str                         callerFormName, className, methodName;
        SysOperationExecutionMode   mode = SysOperationExecutionMode::Synchronous;
        MenuItemNameAction          callerMenuItemName;

        container cachedArgs =  ConsignmentReplenishmentOrderFormLetter::getCachedArguments(_args);
        [#CachedArgsList] = cachedArgs;

        container packedReplenishmentOrderFormletter = ConsignmentReplenishmentOrderFormLetter::getpackedReplenishmentOrderFormletter(
            _args,
            cachedArgs,
            record,
            dataSourceRecordsPacked);

        Counter numberOfRecords;
        FormletterOutputContract outputContract;
        ConsignmentReplenishmentOrderFormLetter replenishmentOrderFormLetter;

        try
        {
            if (packedReplenishmentOrderFormletter != conNull())
            {
                replenishmentOrderFormLetter = ConsignmentReplenishmentOrderFormLetter::construct(any2Enum(parmEnum), className, methodName, mode);
                replenishmentOrderFormLetter.unpack(packedReplenishmentOrderFormletter);
                replenishmentOrderFormLetter.init();

                replenishmentOrderFormLetter.parmShowDialog(true);
                replenishmentOrderFormLetter.startOperation();

                outputContract  = replenishmentOrderFormLetter.getOutputContract();
                numberOfRecords = outputContract.parmNumberOfOrdersPosted();
            }
        }
        catch (Exception::Error)
        {
            outputContract  = replenishmentOrderFormLetter.getOutputContract();
            numberOfRecords = outputContract.parmNumberOfOrdersPosted();
        }
        finally
        {
            if (numberOfRecords)
            {
                if (replenishmentOrderFormLetter)
                {
                    replenishmentOrderFormLetter.documentPostMessaging([replenishmentOrderFormLetter.parmId()], numberOfRecords);
                }

                // in the case that a record wasn't passed to the child form, attempt to cast caller as FormRun and grab datasource
                FormRun callerAsFormRun = _args.caller() as FormRun;

                // validate that we don't already have a datasource and validate that the caller is a form
                if (!recordDataSource && callerAsFormRun)
                {
                    // attempt to grab main datasource of caller
                    recordDataSource = callerAsFormRun.datasource();
                }

                if (recordDataSource)
                {
                    boolean recordExists;
                    if (record is ConsignmentReplenishmentOrderHeader)
                    {
                        ConsignmentReplenishmentOrderHeader consignmentReplenishmentOrderHeader = record as ConsignmentReplenishmentOrderHeader;
                        recordExists = ConsignmentReplenishmentOrderHeader::find(consignmentReplenishmentOrderHeader.ReplenishmentOrderNumber).RecId;
                    }

                    FormLetter::reFreshCallerDataSource(recordDataSource,
                                                        recordExists,
                                                        (numberOfRecords > 1));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedReplenishmentOrderFormletter</Name>
				<Source><![CDATA[
    protected static container getPackedReplenishmentOrderFormletter(Args _args,
        container       _cachedArgs,
        Common          _record,
        container       _dataSourceRecordsPacked)
    {
        if (_record.TableId != tableNum(ConsignmentReplenishmentOrderHeader))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        int                         parmEnum;
        str                         callerFormName, className, methodName;
        MenuItemNameAction          callerMenuItemName;
        [#CachedArgsList] = _cachedArgs;

        List list = new List(Types::Record);

        ConsignmentReplenishmentOrderFormLetter replenishmentOrderFormLetter = ConsignmentReplenishmentOrderFormLetter::construct(any2Enum(parmEnum), className, methodName, SysOperationExecutionMode::Synchronous);
        replenishmentOrderFormLetter.parmCallerFormName(callerFormName);
        replenishmentOrderFormLetter.getLastFromCallerFormName();
        replenishmentOrderFormLetter.parmCallerMenuItem(callerMenuItemName);

        replenishmentOrderFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (_record)
        {
            switch (_record.TableId)
            {
                case tableNum(ConsignmentReplenishmentOrderHeader):
                    ConsignmentReplenishmentOrderHeader replenishmentOrderHeader = _record as ConsignmentReplenishmentOrderHeader;
                    replenishmentOrderFormLetter.parmCallerTable(_record);
                    replenishmentOrderFormLetter.parmReplenishmentOrderHeader(replenishmentOrderHeader);
                    replenishmentOrderFormLetter.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                    replenishmentOrderFormLetter.parmCallerMenuItem(callerMenuItemName);

                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            replenishmentOrderFormLetter.allowEmptyTable(replenishmentOrderFormLetter.initAllowEmptyTable(true));
            replenishmentOrderFormLetter.multiForm(true);
        }

        replenishmentOrderFormLetter.prePromptInit();
        replenishmentOrderFormLetter.forceSaveLast();
        return replenishmentOrderFormLetter.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentPostMessaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides message to user if a set of documents successfully post.
    /// </summary>
    /// <param name = "_parmIds">The ID of the records that were posted.</param>
    /// <param name = "_numberOfRecords">Number of records which were posted.</param>
    /// <returns>true if message posted to user; otherwise, false.</returns>
    public boolean documentPostMessaging(container _parmIds, Counter _numberOfRecords = 0)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsignmentDraftReplenishmentOrderJournalHeader</Name>
				<Source><![CDATA[
    private VendDocumentTableMap initConsignmentDraftReplenishmentOrderJournalHeader()
    {
        ConsignmentDraftReplenishmentOrderJournalHeader consignmentDraftReplenishmentOrderJournalHeader;
        return consignmentDraftReplenishmentOrderJournalHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public ConsignmentReplenishmentOrderHeader parmSourceTable(Common _replenishmentOrder = replenishmentOrderFormLetterContract.parmSourceTable())
    {
        return replenishmentOrderFormLetterContract.parmSourceTable(_replenishmentOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplenishmentOrderHeader</Name>
				<Source><![CDATA[
    public ConsignmentReplenishmentOrderHeader parmReplenishmentOrderHeader(ConsignmentReplenishmentOrderHeader _replenishmentOrder)
    {
        this.parmSourceTable(_replenishmentOrder);
        return replenishmentOrderFormLetterContract.parmReplenishmentOrderHeader(_replenishmentOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastParmTableRecId</Name>
				<Source><![CDATA[
    public RefRecId parmLastParmTableRecId()
    {
        return lastParmTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management node type.
    /// </summary>
    /// <returns>
    /// The print management node type for consignment replenishment order.
    /// </returns>
    /// <remarks>The print functionality is not supported for consignment.</remarks>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewContract</Name>
				<Source><![CDATA[
    protected void setNewContract(FormLetterContract _contract)
    {
        super(_contract);
        if (!contractIsFromPreviousVersion)
        {
            replenishmentOrderFormLetterContract = _contract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public IDialogable dialog()
    {
        if (showDialog)
        {
            if (!draftReplenishmentOrderJournalForm)
            {
                draftReplenishmentOrderJournalForm = classfactory.formRunClass(FormLetterServiceController::newClientArgs(formStr(ConsignmentDraftReplenishmentOrderJournal), this));
                draftReplenishmentOrderJournalForm.init();
            }

            return draftReplenishmentOrderJournalForm as IDialogable;
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record from the <c>ConsignmentDraftReplenishmentJournalHeader</c> table that is based
    /// on the <c>chooseLines</c> query.
    /// </summary>
    /// <param name="_processAdditional">
    /// A Boolean value that indicates whether additional data sources should be processed by the
    /// <c>chooseLines</c> query.
    /// </param>
    /// <param name="_parmTable">
    /// A record from the <c>ConsignmentDraftReplenishmentJournalHeader</c> table.
    /// </param>
    /// <param name="_append">
    /// A Boolean value that indicates whether existing records should be removed.
    /// </param>
    public void chooseLines(
        boolean                 _processAdditional      = false,
        VendDocumentTableMap    _vendDocumentTableMap   = this.initConsignmentDraftReplenishmentOrderJournalHeader(),
        boolean                 _append                 = false)
    {
        container outputContainer;

        vendDocumentTableMap  = _vendDocumentTableMap;
        replenishmentOrderFormLetterContract.parmDraftReplenishmentOrderJournalHeader(vendDocumentTableMap);

        outputContainer = ConsignmentReplenishmentOrderFormletterParmData::chooseLines(this.packDataContract(replenishmentOrderFormLetterContract),
                                                          _append);

        this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(outputContainer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    private void prePromptInit()
    {
        this.showQueryForm(false);
        container outputContainer = ConsignmentReplenishmentOrderFormletterParmData::chooseLines(this.packDataContract(replenishmentOrderFormLetterContract), false);

        this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(outputContainer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesFormletterParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves various values from the <c>FormLetterParmDataOutputContract</c>.
    /// </summary>
    /// <param name="_outputContract">
    /// The <c>FormLetterParmDataOutputContract</c> to retrieve the values from.
    /// </param>
    protected void getValuesFormletterParmData(FormLetterParmDataOutputContract _outputContract)
    {
        QueryRun queryRun;
        if (_outputContract.parmChooseLinesQueryPacked())
        {
            queryRun = new QueryRun(SysOperationHelper::base64Decode(_outputContract.parmChooseLinesQueryPacked()));
        }

        this.parmId(_outputContract.parmParmId());
        this.parmDataSourceRecordsPacked(conNull());
        if (queryRun)
        {
            this.parmQueryUsed(queryRun.query());
        }

        lastParmTableRecId = _outputContract.parmLastParmTableRecId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>