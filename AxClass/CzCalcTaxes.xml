<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCalcTaxes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to sum tax amounts for a transaction and group them by <c>TaxType_W</c>
/// and <c>TaxValue</c>.
/// </summary>
abstract class CzCalcTaxes
{
    Map typeValueMap, typeMap, valueMap;

    Common  record;

    boolean allowManualCorrection, // can method add() be called not from calc()
            reverseAmounts,        // add amounts reversed
            inCalcMode;            // is set on/off in method calc()

    real    proportionCur,
            proportionMST;            // add amounts in proportion

    private CurrencyCode transCur;
    /// <summary>
    /// Adds a <c>CzTaxStructValue</c> instance to the map of calculated tax values.
    /// </summary>
    /// <param name="_taxType">
    /// The type of tax to be added.
    /// </param>
    /// <param name="_taxMST">
    /// The tax amount in accounting currency.
    /// </param>
    /// <param name="_taxBaseMST">
    /// The tax base amount in accounting currency.
    /// </param>
    /// <param name="_taxCur">
    /// The tax amount in transaction currency.
    /// </param>
    /// <param name="_taxBaseCur">
    /// The tax base amount in transaction currency.
    /// </param>
    /// <param name="_taxValue">
    /// Percentage or amount per unit of the tax.
    /// </param>
    #define.keyVal([ _taxType, _taxValue ])
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    final public void add(TaxType_W    _taxType,
                          TaxAmount    _taxMST,
                          TaxAmount    _taxBaseMST,
                          TaxAmountCur _taxCur,
                          TaxAmountCur _taxBaseCur,
                          TaxValue     _taxValue)
    {
        CzTaxStruct      struct;
        CzTaxStructValue structVal;

        if (! inCalcMode && ! allowManualCorrection)
            return;

        // type + value map --------
        if (typeValueMap.exists(#keyVal))
        {
            structVal = typeValueMap.lookup(#keyVal);
        }
        else
        {
            structVal = new CzTaxStructValue(_taxType, _taxValue);
        }

        structVal.taxAmountMST(    (reverseAmounts ? - _taxMST     : _taxMST    ) * proportionMST);
        structVal.taxBaseAmountMST((reverseAmounts ? - _taxBaseMST : _taxBaseMST) * proportionMST);
        structVal.taxAmountCur(    (reverseAmounts ? - _taxCur     : _taxCur    ) * proportionCUR);
        structVal.taxBaseAmountCur((reverseAmounts ? - _taxBaseCur : _taxBaseCur) * proportionCUR);

        typeValueMap.insert(#keyVal, structVal);

        // type map ----------------
        if (typeMap.exists(_taxType))
        {
            struct = typeMap.lookup(_taxType);
        }
        else
        {
            struct = new CzTaxStruct(_taxType);
        }

        struct.taxAmountMST(    (reverseAmounts ? - _taxMST     : _taxMST    ) * proportionMST);
        struct.taxBaseAmountMST((reverseAmounts ? - _taxBaseMST : _taxBaseMST) * proportionMST);
        struct.taxAmountCur(    (reverseAmounts ? - _taxCur     : _taxCur    ) * proportionCUR);
        struct.taxBaseAmountCur((reverseAmounts ? - _taxBaseCur : _taxBaseCur) * proportionCUR);

        typeMap.insert(_taxType, struct);

        // value map ---------------
        if (! valueMap.exists(_taxType))
        {
            valueMap.insert(_taxType, _taxValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEmptyValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a blank tax calculation to the <c>CzCalcTaxes</c> instance.
    /// </summary>
    /// <param name="_calc">
    /// The instance of <c>CzCalcTaxes</c> to add the blank calculation to.
    /// </param>
    #define.keyVal([ taxType, taxValue ])
    final public void addEmptyValues(CzCalcTaxes _calc)
    {
        MapIterator it = new MapIterator(typeValueMap);

        TaxType_W   taxType;
        TaxValue    taxValue;

        while (it.more())
        {
            #keyVal = it.key();
            _calc.add(taxType, 0, 0, 0, 0, taxValue);

            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new tax calculation to the <c>CzCalcTaxes</c> based on information
    /// contained in a table buffer.
    /// </summary>
    /// <param name="_record">
    /// Table buffer containing required information for tax calculation.
    /// </param>
    abstract protected void addRecord(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total tax amounts for all previously added tax calculations.
    /// </summary>
    /// <param name="_recalc">
    /// If true, clear current tax calculation results before doing calculation.
    /// </param>
    final public void calc(boolean _recalc = true)
    {
        if (_recalc)
        {
            this.clearResults();
        }

        inCalcMode = true;

        while (record)
        {
            this.addRecord(record);

            next record;
        }

        inCalcMode = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears calculated tax amounts.
    /// </summary>
    final void clearResults()
    {
        typeMap      = new Map(Types::Integer,   Types::Class);
        valueMap     = new Map(Types::Integer,   Types::Real);
        typeValueMap = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>CzTaxStruct</c> with the specified <c>TaxType_W</c>
    /// and, optionally, <c>TaxValue</c>.
    /// </summary>
    /// <param name="_taxType">
    /// The <c>TaxType_W</c> value to look for when searching for an instance of
    /// <c>CzTaxStruct</c>.
    /// </param>
    /// <param name="_taxValue">
    /// The <c>TaxValue</c> value to look for when searching for an instance of
    /// <c>CzTaxStruct</c>.
    /// </param>
    /// <returns>
    /// A <c>CzTaxStruct</c> value.
    /// </returns>
    #define.keyValue([ _taxType, _taxValue ])
    protected CzTaxStruct find(TaxType_W _taxType,
                               TaxValue  _taxValue = 0)
    {
        CzTaxStruct struct;

        if (! prmisdefault(_taxValue))
        {
            if (typeValueMap.exists(#keyValue))
            {
                struct = typeValueMap.lookup(#keyValue);
            }
        }
        else
        {
            if (typeMap.exists(_taxType))
            {
                struct = typeMap.lookup(_taxType);
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIterator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns an instance of <c>CzCalcTaxesIterator</c> for the map of tax
    /// values.
    /// </summary>
    /// <returns>
    /// <c>CzCalcTaxesIterator</c> for the map of tax values.
    /// </returns>
    final public CzCalcTaxesIterator getIterator()
    {
        return new CzCalcTaxesIterator(typeValueMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGreaterThen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax values in this instance of <c>CzCalcTaxes</c> are
    /// greater than the tax values of those in the provided <c>CzCalcTaxes</c>
    /// instance.
    /// </summary>
    /// <param name="_calc">
    /// An instance of <c>CzCalcTaxes</c> to compare values against.
    /// </param>
    /// <param name="_sign">
    /// Number to multiply compared values by.
    /// </param>
    /// <param name="_diffMap">
    /// <c>Map</c> containing the differences in tax amounts stored by <c>TaxType_W</c>
    /// and <c>TaxValue</c>.
    /// </param>
    /// <returns>
    /// true if the values are greater; otherwise, false.
    /// </returns>
    #define.keyVal([ type, value ])
    final public boolean isGreaterThen(CzCalcTaxes _calc,
                                       int         _sign    = 1,
                                       Map         _diffMap = null)
    {
        MapIterator it;
        boolean     ret = false;
        TaxType_W   type;
        TaxValue    value;
        real        diff;

        _calc.addEmptyValues(this);

        it  = new MapIterator(typeValueMap);
        while (it.more())
        {
            #keyVal = it.key();

            diff = this.taxBaseAmountMST(type, value) - _sign * _calc.taxBaseAmountMST(type, value);
            ret  = ret || (diff > 0);

            if (diff && _diffMap)
            {
                _diffMap.insert(- diff, #keyVal);
            }

            it.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>CzCalcTaxes</c>.
    /// </summary>
    /// <param name="_record">
    /// Table buffer that taxes will be calculated for.
    /// </param>
    /// <param name="_allowManualCorrection">
    /// Whether or not to allow tax amounts to be added manually to the calculation.
    /// </param>
    void new(Common  _record,
             boolean _allowManualCorrection = false)
    {
        record                = _record;
        allowManualCorrection = _allowManualCorrection;
        proportionCur         = 1;
        proportionMST         = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Designates a new table buffer to use for tax calculations.
    /// </summary>
    /// <param name="_record">
    /// The new table buffer to use for tax calculations.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The buffer cannot be replaced with a new buffer with a different table id.
    /// </exception>
    public final void newBuffer(Common _record)
    {
        if (record.TableId && _record.TableId != record.TableId)
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }

        record = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseAmounts</Name>
				<Source><![CDATA[
    final public boolean parmReverseAmounts(boolean _reverseAmounts = reverseAmounts)
    {
        reverseAmounts = _reverseAmounts;
        return reverseAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency for the specified
    /// <c>TaxType_W</c> and, optionally, <c>TaxValue</c>.
    /// </summary>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the amount for.
    /// </param>
    /// <param name="_taxValue">
    /// <c>TaxValue</c> to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    real taxAmountCur(TaxType_W _taxType,
                      TaxValue  _taxValue = 0)
    {
        CzTaxStruct struct = prmisdefault(_taxValue) ?
                             this.find(_taxType)     :
                             this.find(_taxType, _taxValue);

        return struct ? struct.taxAmountCur() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Other.
    /// </summary>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxAmountCur_Other()
    {
        return this.taxAmountCur(TaxType_W::Other);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_VAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Standard VAT or Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxAmountCur_VAT()
    {
        return this.taxAmountCur(TaxType_W::VAT) +
               this.taxAmountCur(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Standard VAT.
    /// </summary>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxAmountCur_VAT_Full()
    {
        return this.taxAmountCur(TaxType_W::VAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxAmountCur_VAT_Reduced()
    {
        return this.taxAmountCur(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency for the specified <c>TaxType_W</c>
    /// and, optionally, <c>TaxValue</c>.
    /// </summary>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the amount for.
    /// </param>
    /// <param name="_taxValue">
    /// <c>TaxValue</c> to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    real taxAmountMST(TaxType_W _taxType,
                      TaxValue  _taxValue = 0)
    {
        CzTaxStruct struct = prmisdefault(_taxValue) ?
                             this.find(_taxType)     :
                             this.find(_taxType, _taxValue);

        return struct ? struct.taxAmountMST() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Other.
    /// </summary>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    final real taxAmountMST_Other()
    {
        return this.taxAmountMST(TaxType_W::Other);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_VAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Standard VAT or Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    final TaxAmountCur taxAmountMST_VAT()
    {
        return this.taxAmountMST(TaxType_W::VAT) +
               this.taxAmountMST(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Standard VAT.
    /// </summary>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    final real taxAmountMST_VAT_Full()
    {
        return this.taxAmountMST(TaxType_W::VAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    final real taxAmountMST_VAT_Reduced()
    {
        return this.taxAmountMST(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency for the specified
    /// <c>TaxType_W</c> and, optionally, <c>TaxValue</c>.
    /// </summary>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the base amount for.
    /// </param>
    /// <param name="_taxValue">
    /// <c>TaxValue</c> to find the base amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    real taxBaseAmountCur(TaxType_W _taxType,
                          TaxValue  _taxValue = 0)
    {
        CzTaxStruct struct = prmisdefault(_taxValue) ?
                             this.find(_taxType)     :
                             this.find(_taxType, _taxValue);

        return struct ? struct.taxBaseAmountCur() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Other.
    /// </summary>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxBaseAmountCur_Other()
    {
        return this.taxBaseAmountCur(TaxType_W::Other);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_VAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Standard VAT or Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    final real taxBaseAmountCur_VAT()
    {
        return this.taxBaseAmountCur(TaxType_W::VAT) +
               this.taxBaseAmountCur(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Standard VAT.
    /// </summary>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxBaseAmountCur_VAT_Full()
    {
        return this.taxBaseAmountCur(TaxType_W::VAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    final TaxAmountCur taxBaseAmountCur_VAT_Reduced()
    {
        return this.taxBaseAmountCur(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency for the specified
    /// <c>TaxType_W</c> and, optionally, <c>TaxValue</c>.
    /// </summary>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the amount for.
    /// </param>
    /// <param name="_taxValue">
    /// <c>TaxValue</c> to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    real taxBaseAmountMST(TaxType_W _taxType,
                          TaxValue  _taxValue = 0)
    {
        CzTaxStruct struct = prmisdefault(_taxValue) ?
                             this.find(_taxType)     :
                             this.find(_taxType, _taxValue);

        return struct ? struct.taxBaseAmountMST() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Other.
    /// </summary>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    final real taxBaseAmountMST_Other()
    {
        return this.taxBaseAmountMST(TaxType_W::Other);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_VAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Standard VAT or Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    final real taxBaseAmountMST_VAT()
    {
        return this.taxBaseAmountMST(TaxType_W::VAT) +
               this.taxBaseAmountMST(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Standard VAT.
    /// </summary>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    final real taxBaseAmountMST_VAT_Full()
    {
        return this.taxBaseAmountMST(TaxType_W::VAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Reduced VAT.
    /// </summary>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    final real taxBaseAmountMST_VAT_Reduced()
    {
        return this.taxBaseAmountMST(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TaxValue</c> for a specific <c>TaxType_W</c> in the calculation.
    /// </summary>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the value for.
    /// </param>
    /// <returns>
    /// <c>TaxValue</c> amount for the specified <c>TaxType_W</c>.
    /// </returns>
    TaxValue taxValue(TaxType_W _taxType)
    {
        TaxValue ret;

        if (valueMap.exists(_taxType))
        {
            ret = valueMap.lookup(_taxType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValue_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TaxValue</c> for the Standard VAT <c>TaxType_W</c> in the
    /// calculation.
    /// </summary>
    /// <returns>
    /// <c>TaxValue</c> amount for Standard VAT.
    /// </returns>
    final public TaxValue taxValue_VAT_Full()
    {
        return this.taxValue(TaxType_W::VAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValue_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TaxValue</c> for the Reduced VAT <c>TaxType_W</c> in the
    /// calculation.
    /// </summary>
    /// <returns>
    /// <c>TaxValue</c> amount for Reduced VAT.
    /// </returns>
    final public TaxValue taxValue_VAT_Reduced()
    {
        return this.taxValue(TaxType_W::VATReduced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total tax amount in transaction currency for all tax types.
    /// </summary>
    /// <returns>
    /// Total tax amount for all tax types.
    /// </returns>
    final real totalTaxAmountCur()
    {
        MapIterator it = new MapIterator(typeMap);
        real        ret;

        while (it.more())
        {
            ret += this.taxAmountCur(it.key());
            it.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total tax amount in accounting currency for all tax types.
    /// </summary>
    /// <returns>
    /// Total tax amount for all tax types.
    /// </returns>
    final real totalTaxAmountMST()
    {
        MapIterator it = new MapIterator(typeMap);
        real        ret;

        while (it.more())
        {
            ret += this.taxAmountMST(it.key());
            it.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total tax base amount in transaction currency for all tax types.
    /// </summary>
    /// <returns>
    /// Total tax base amount for all tax types.
    /// </returns>
    final TaxAmountCur totalTaxBaseAmountCur()
    {
        MapIterator it = new MapIterator(typeMap);
        real        ret;

        while (it.more())
        {
            ret += this.taxBaseAmountCur(it.key());
            it.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transaction currency code.
    /// </summary>
    /// <param name = "code">Transaction currency code for the case when we set value.</param>
    /// <returns>Transaction currency code.</returns>
    public CurrencyCode transactionCurrencyCode(CurrencyCode code = transCur)
    {
        if (code != transCur)
        {
            transCur = code;
        }

        return transCur;
	}

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxBaseAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total base tax amount in accounting currency for all tax types.
    /// </summary>
    /// <returns>
    /// Total tax base amount for all tax types.
    /// </returns>
    final real totalTaxBaseAmountMST()
    {
        MapIterator it = new MapIterator(typeMap);
        real        ret;

        while (it.more())
        {
            ret += this.taxBaseAmountMST(it.key());
            it.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>CzCalcTaxes</c> based on the provided table buffer.
    /// </summary>
    /// <param name="_buffer">
    /// Table buffer that taxes will be calculated for.
    /// </param>
    /// <param name="_allowManualCorrection">
    /// Whether or not to allow tax amounts to be added manually to the calculation.
    /// </param>
    /// <param name="_reverseAmounts">
    /// Whether or not to reverse the tax amounts when they are added to the
    /// calculation.
    /// </param>
    /// <returns>
    /// An instance of one of the derived classes of <c>CzCalcTaxes</c>.
    /// </returns>
    static CzCalcTaxes construct(Common  _buffer,
                                 boolean _allowManualCorrection = false,
                                 boolean _reverseAmounts        = false)
    {
        CzCalcTaxes ret;

        if (_buffer)
        {
            switch (_buffer.TableId)
            {
                case tablenum(TaxTrans)                :
                    ret = new CzCalcTaxesPosted(_buffer,      _allowManualCorrection);
                    break;

                case tablenum(TmpTaxWorkTrans)         :
                    ret = new CzCalcTaxesUnposted(_buffer,    _allowManualCorrection);
                    break;

                case tablenum(CzTaxCreditMemoTrans)    :
                    ret = new CzCalcTaxesCreditMemo(_buffer,  _allowManualCorrection);
                    break;

                case tablenum(CzTaxDocumentTrans)      :
                    ret = new CzCalcTaxesTaxDocument(_buffer, _allowManualCorrection);
                    break;

                default :
                    throw error(strfmt("@SYS31187", _buffer.caption()));
            }
        }
        else
        {
            ret = new CzCalcTaxesSimple(null, _allowManualCorrection);
        }

        ret.parmReverseAmounts(_reverseAmounts);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>