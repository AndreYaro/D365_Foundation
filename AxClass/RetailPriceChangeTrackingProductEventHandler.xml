<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingProductEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data event handler for product related tables.
/// </summary>
internal class RetailPriceChangeTrackingProductEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EcoResProductCategory_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for updating EcoResProductCategory.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void EcoResProductCategory_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        EcoResProductCategory original = orig as EcoResProductCategory;
        EcoResProductCategory newInstance = sender;

        if (original.Product != newInstance.Product)
        {
            RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(original.Product);
            RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(newInstance.Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCategory_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for delete EcoResProductCategory.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void EcoResProductCategory_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        EcoResProductCategory original = orig as EcoResProductCategory;
        RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(original.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCategory_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for inserting EcoResProductCategory.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void EcoResProductCategory_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        EcoResProductCategory newInstance = sender;
        RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(newInstance.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for updating InventDimCombination (release product variant).
    /// </summary>
    /// <param name = "sender">The sender.</param>
    /// <param name = "orig">The orig.</param>
    /// <param name = "e">The data event args.</param>
    internal static void InventDimCombination_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        InventDimCombination original = orig as InventDimCombination;
        InventTable inventTable = InventTable::find(original.ItemId);

        if (inventTable)
        {
            RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
        }

        InventDimCombination updated = sender as InventDimCombination;
        if (updated.ItemId != original.ItemId)
        {
            InventTable inventTableForUpdatedVariant = InventTable::find(updated.ItemId);

            if (inventTableForUpdatedVariant)
            {
                RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTableForUpdatedVariant.Product);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for deleting InventDimCombination (release product variant).
    /// </summary>
    /// <param name = "sender">The sender.</param>
    /// <param name = "orig">The orig.</param>
    /// <param name = "e">The data event args.</param>
    internal static void InventDimCombination_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        InventDimCombination original = orig as InventDimCombination;
        InventTable inventTable = InventTable::find(original.ItemId);

        if (inventTable)
        {
            RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for inserting InventDimCombination (release product variant).
    /// </summary>
    /// <param name = "sender">The sender.</param>
    /// <param name = "orig">The orig.</param>
    /// <param name = "e">The data event args.</param>
    internal static void InventDimCombination_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        InventDimCombination original = sender as InventDimCombination;
        InventTable inventTable = InventTable::find(original.ItemId);

        if (inventTable)
        {
            RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatalogProduct_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for updating CatalogProduct.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void CatalogProduct_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        CatalogProduct original = orig as CatalogProduct;
        CatalogProduct newInstance = sender;

        if (original.Product != newInstance.Product || original.Catalog != newInstance.Catalog)
        {
            RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(RetailPriceChangeTrackingProductEventHandler::getProductId(original.Product));
            RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(RetailPriceChangeTrackingProductEventHandler::getProductId(newInstance.Product));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatalogProduct_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for delete CatalogProduct.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void CatalogProduct_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        CatalogProduct original = orig as CatalogProduct;
        RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(RetailPriceChangeTrackingProductEventHandler::getProductId(original.Product));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatalogProduct_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for inserting CatalogProduct.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void CatalogProduct_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        CatalogProduct newInstance = sender;
        RetailPriceChangeTracking::writeProductPriceChangeRecordsCrossCompany(RetailPriceChangeTrackingProductEventHandler::getProductId(newInstance.Product));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get distinct product id, or product master id for a variant.
    /// </summary>
    /// <param name="_productId">The product id.</param>
    /// <returns>The price id.</returns>
    private static RefRecId getProductId(RefRecId _productId)
    {
        if (_productId == 0)
        {
            return 0;
        }

        // If this is a variant, find its product master.
        EcoResDistinctProductVariant productVariant = EcoResDistinctProductVariant::find(_productId);

        if (productVariant && productVariant.ProductMaster > 0)
        {
            return productVariant.ProductMaster;
        }

        // If this is a distinct product, or a product master.
        return _productId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>