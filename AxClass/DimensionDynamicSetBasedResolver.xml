<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDynamicSetBasedResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This exists to share common logic for entity set based dimension validation independent of dimension field id.
/// </summary>
public final class DimensionDynamicSetBasedResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set based resolution for default dimensions.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <param name = "_stagingTableId">The table id for the staging table.</param>
    /// <param name = "_defaultDimensionFieldName">The name of the field for the default dimension on the staging table.</param>
    /// <param name = "_defaultDimensionFieldId">The field id for the default dimension on the staging table.</param>
    /// <param name = "_definitionGroupId">The field id for the definition group on the staging table.</param>
    /// <param name = "_executionId">The field id for the execution id on the staging table.</param>
    /// <param name = "_transferStatusId">The field id for the transfer status on the staging table.</param>
    /// <returns>The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.</returns>
    public static DimensionDataEntitySFKCacheTmp resolve(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        TableId _stagingTableId,
        FieldName _defaultDimensionFieldName,
        FieldId _defaultDimensionFieldId,
        FieldId _definitionGroupId,
        FieldId _executionId,
        FieldId _transferStatusId)
    {
        SysDictTable stagingTable = new SysDictTable(_stagingTableId);
        SysDictField field = new SysDictField(_stagingTableId, _defaultDimensionFieldId);        
        boolean isDimensionDisplayValue = SysDictType::isEqualOrExtending(field.typeId(), extendedTypeName2Id(extendedTypeStr(DimensionDisplayValue)));

        if (!stagingTable || stagingTable.tableGroup() != TableGroup::Staging || !isDimensionDisplayValue)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = new Query();
        QueryBuildDataSource stagingDS = query.addDataSource(_stagingTableId);
        stagingDS.addRange(_definitionGroupId).value(_dmfDefinitionGroupExecution.DefinitionGroup);
        stagingDS.addRange(_executionId).value(_dmfDefinitionGroupExecution.ExecutionId);
        stagingDS.addRange(_transferStatusId).value(queryValue(DMFTransferStatus::NotStarted));
        stagingDS.addRange(_transferStatusId).value(queryValue(DMFTransferStatus::Validated));
        stagingDS.addGroupByField(_defaultDimensionFieldId);

        Map insertMap = DimensionDynamicSetBasedResolver::resolveCustomMapping(stagingDS, _defaultDimensionFieldName, _defaultDimensionFieldId);

        DimensionDataEntitySFKCacheTmp dimCacheTmp;
        Query::insert_recordset(dimCacheTmp, insertMap, query);

        DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityDefaultDimensionFormat;
        ExtendedDataTypeName dataType = extendedTypeStr(DimensionDefault);

        update_recordset dimCacheTmp
            setting EnumValue = LedgerJournalACType::Ledger,
            HierarchyType = hierarchyType,
            ExtendedDataType = dataType;

        DimensionDynamicSetBasedResolver::resolveSetBasedDimensions(dimCacheTmp);
        DimensionDynamicSetBasedResolver::resolveNonCached(dimCacheTmp);

        return dimCacheTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveNonCached</Name>
				<Source><![CDATA[
    private static void resolveNonCached(DimensionDataEntitySFKCacheTmp _dimCacheTmp)
    {
        while select forupdate _dimCacheTmp where _dimCacheTmp.Found == NoYes::No
        {
            try
            {
                ttsbegin;
                _dimCacheTmp.ResolvedReference = DimensionDefaultResolver::newResolver(_dimCacheTmp.IntegrationString).resolve();
                _dimCacheTmp.Found = NoYes::Yes;
                _dimCacheTmp.doUpdate();
                ttscommit;
            }
            catch (Exception::Error)
            {
                // Invalid accounts will raise an exception, but should
                // not cause the full import process to fail. Instead those
                // rows need to be marked as error, which is done in the caller.
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSetBasedDimensions</Name>
				<Source><![CDATA[
    private static void resolveSetBasedDimensions(DimensionDataEntitySFKCacheTmp _dimCacheTmp)
    {
        DimensionDataEntitySFKCache dimCache;

        DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityDefaultDimensionFormat;
        ExtendedDataTypeName dataType = extendedTypeStr(DimensionDefault);

        update_recordset _dimCacheTmp
            setting Found = NoYes::Yes,
                ResolvedReference = dimCache.ResolvedReference
        join ResolvedReference from dimCache
            where dimCache.IntegrationString == _dimCacheTmp.IntegrationString
                && dimCache.EnumValue == LedgerJournalACType::Ledger
                && dimCache.HierarchyType == hierarchyType
                && dimCache.ExtendedDataType == dataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCustomMapping</Name>
				<Source><![CDATA[
    private static Map resolveCustomMapping(QueryBuildDataSource _queryBuildDataSource, FieldName _defaultDimensionFieldName, int _defaultDimensionFieldId)
    {
        Map insertMap = new Map(Types::String, Types::Container);
        QueryBuildFieldList qbfl = _queryBuildDataSource.fields();
        int uniqueId = _queryBuildDataSource.uniqueId();
        
        DimensionDynamicSetBasedResolver::addInsertFieldMapping(qbfl, insertMap, uniqueId, _defaultDimensionFieldId, _defaultDimensionFieldName, fieldStr(DimensionDataEntitySFKCacheTmp, IntegrationString));

        return insertMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInsertFieldMapping</Name>
				<Source><![CDATA[
    private static void addInsertFieldMapping(QueryBuildFieldList _fieldList, Map _fieldMapping, int _sourceTableUniqueId, FieldId _sourceFieldId, FieldName _sourceFieldName, FieldName _destinationFieldName)
    {
        _fieldList.addField(_sourceFieldId);
        _fieldMapping.insert(_destinationFieldName, [_sourceTableUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>