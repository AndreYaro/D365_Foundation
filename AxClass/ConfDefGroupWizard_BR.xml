<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfDefGroupWizard_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ConfDefGroupWizard_BR</c> class controls the <c>ConfDefGroupWizard_BR</c> form
/// implementing the methods to control the flow of the wizard and trees.
/// </summary>
public class ConfDefGroupWizard_BR extends SysWizard
{
    #ISOCountryRegionCodes
    #FormTreeControl
    #Properties
    #ResAppl
    #AOT

    TmpSysQuery             allFields;

    Map                     allTablesLabel;
    Map                     allTablesName;

    ImageListAppl_Report    imageListAppl_Report;
    ImageListAppl_checkbox  imageListAppl_checkbox;
    ImageListAppl_PadLock   imageListAppl_PadLock;
    ImageListAppl_RadioBtn  imageListAppl_RadioBtn;

    Map                     tableAllRelationMap;
    Map                     tableFieldGroupMap;
    Map                     tableSumMap;

    Map                     tableSelectedMap;
    Map                     fieldSelectedMap;
    Map                     sumSelectedMap;
    Map                     sortSelectedMap;
    Map                     rangeSelectedMap;

    Map                     autoSelectMap;
    Map                     displayMethodsInFormMap;

    int                     fieldNo;
    int                     sortNo;
    int                     rangeNo;
    int                     dataSourceNo;
    int                     key;

    boolean                 showSysName;
    TreeItemIdx             dragFromIdx;

    ConfGroupId_BR          confGroupId;
    Map                     savedSelectionData;
    Map                     loadedTables;

    #define.Welcome(    1)
    #define.Tables(     2)
    #define.Fields(     3)
    #define.SumSetup(   4)
    #define.Sorting(    5)
    #define.Ranges(     6)
    #define.Complete(   7)

    #define.AutoReport('AutoReport')
    #define.menuItemData('#menuItemData#')

    #define.newLine('\n')

    #define.sumAverage(1)
    #define.sumCount(2)
    #define.sumTotal(3)


    #define.selTable(1)
    #define.selField(2)
    #define.selSum(3)
    #define.selSort(4)
    #define.selRange(5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through the saved selection and populate
    /// the corresponding tree control with it.
    /// </summary>
    /// <param name="_tree">The tree control to be populated.</param>
    /// <param name="_kind">The kind of tree control.</param>
    private void autoSelect(FormTreeControl _tree, int _kind)
    {
        TreeItemIdx     fieldIdx;
        MapIterator     fieldIterator;
        Map             source;
        int             tableId;
        MapIterator     tableIterator;
        SysQueryItem    sysQueryItem;

        if (this.hasSavedSelectionData(_kind))
        {
            source = savedSelectionData.lookup(_kind);
            tableIterator = new MapIterator(source);
            tableIterator.begin();
            while (tableIterator.more())
            {
                tableId = tableIterator.key();
                if (this.isTableCurrentlySelected(tableId))
                {
                    fieldIterator = new MapIterator(tableIterator.value());
                    fieldIterator.begin();
                    while (fieldIterator.more())
                    {
                        sysQueryItem = fieldIterator.value();

                        fieldIdx = this.fieldFindIdx(   _tree,
                                                        tableId,
                                                        sysQueryItem.parmFieldId(),
                                                        _tree.getRoot(),
                                                        sysQueryItem.parmFieldGroupId(),
                                                        sysQueryItem.parmFieldGroupId() != 0,
                                                        false);

                        if (fieldIdx)
                        {
                            _tree.select(fieldIdx);
                            this.autoSelectAdd(_kind, sysQueryItem);
                        }

                        fieldIterator.next();
                    }
                }

                tableIterator.next();
            }

            this.disableSavedSelection(_kind);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoSelectAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a single item.
    /// </summary>
    /// <param name="_kind">The kind of item being added.</param>
    /// <param name="_sysQueryItem">The item data.</param>
    private void autoSelectAdd(int _kind, SysQueryItem _sysQueryItem)
    {
        SortOrder   sortOrder;
        int         sumAverage;
        int         sumCount;
        int         sumTotal;

        switch (_kind)
        {
            case #selField:
                this.fieldAdd();
                break;

            case #selSum:
                [sumAverage, sumCount, sumTotal] = _sysQueryItem.parmData();
                this.sumAdd(sumAverage, sumCount, sumTotal);
                break;

            case #selSort:
                [sortOrder] = _sysQueryItem.parmData();
                this.sortAdd(sortOrder, true);
                break;

            case #selRange:
                this.rangeAdd();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoSelectValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the selected tables are still valid
    /// for the other tabs that are based on it.
    /// </summary>
    /// <param name="_tabId">The tab being validated.</param>
    /// <returns>true if the selected tables are valid; false, otherwise.</returns>
    private boolean autoSelectValidate(int _tabId)
    {
        MapIterator     tableIterator = new MapIterator(tableSelectedMap);
        SysQueryItem    tableData;
        Set             set;
        Set             tableSet      = new Set(Types::Integer);
        Set             differenceSet;

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableSet.add(tableData.parmTableId());
            tableIterator.next();
        }

        if (autoSelectMap.exists(_tabId))
        {
            set             = autoSelectMap.lookup(_tabId);
            differenceSet   = Set::difference(set, tableSet);

            if (!differenceSet.elements())
            {
                return false;
            }
        }

        autoSelectMap.insert(_tabId, tableSet);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>back</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves back in the wizard.
    /// </summary>
    void back()
    {
        super();
        this.tabChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the image on a tree control item.
    /// </summary>
    /// <param name="_formTreeControl">The tree control that contains the item.</param>
    /// <param name="_treeItemIdx">The item index.</param>
    /// <param name="_imageRes">The image to be used.</param>
    private void changeImage(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx, ImageRes _imageRes)
    {
        FormTreeItem    formTreeItem;

        formTreeItem = _formTreeControl.getItem(_treeItemIdx);
        formTreeItem.image(_imageRes);
        formTreeItem.selectedImage(_imageRes);
        _formTreeControl.setItem(formTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDeselectedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes items from a map that were deselected.
    /// </summary>
    /// <param name="_set">The set of items that remain.</param>
    /// <param name="_map">The map of items that will be changed.</param>
    private void deleteDeselectedItem(Set _set, Map _map)
    {
        Set             deletedSet;
        SetIterator     setIterator;

        deletedSet = Set::difference(_map.keySet(), _set);

        setIterator = new SetIterator(deletedSet);
        setIterator.begin();
        while (setIterator.more())
        {
            _map.remove(setIterator.value());
            setIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableSavedSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the saved selection items.
    /// </summary>
    /// <param name="_key">The kind of data being cleared.</param>
    private void disableSavedSelection(int _key)
    {
        savedSelectionData.insert(_key, new Map(Types::Integer, Types::Class));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dragBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if user drags any controls and returns true or false based on the object type and condition.
    /// </summary>
    /// <param name="_formTreeControl">
    /// Name of the form control being dragged.
    /// </param>
    /// <param name="x">
    /// The co-ordinate, x.
    /// </param>
    /// <param name="y">
    /// The co-ordinate, y.
    /// </param>
    /// <param name="_object">
    /// true to check if the control is not locked and false to check for control types integer and string.
    /// </param>
    /// <returns>
    /// true if the form control is not locked or it is of type integer value other than zero
    /// or of type string value containing a menu item name; false in all other cases.
    /// </returns>
    public boolean dragBegin(FormTreeControl _formTreeControl, int x, int y, boolean _object = true)
    {
        SysQueryItem    sysQueryItem;

        [dragFromIdx] = _formTreeControl.hitTest(x, y);
        if (dragFromIdx)
        {
            _formTreeControl.select(dragFromIdx);

            if (_object)
            {
                sysQueryItem = _formTreeControl.getItem(dragFromIdx).data();

                if (    !sysQueryItem.parmLock()
                    &&  !sysQueryItem.parmName())
                {
                    return true;
                }
            }
            else
            {
                switch (typeof(_formTreeControl.getItem(dragFromIdx).data()))
                {
                    case Types::Integer:
                        if (_formTreeControl.getItem(dragFromIdx).data() > 0)
                        {
                            return true;
                        }
                        break;

                    case Types::String:
                        if (    _formTreeControl.getItem(dragFromIdx).data()
                            &&  _formTreeControl.getItem(dragFromIdx).data() == #menuItemData)
                        {
                            return true;
                        }
                        break;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dragDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the form control is dragged to the correct location.
    /// </summary>
    /// <param name="_activeSource">
    /// Source location.
    /// </param>
    /// <param name="_dragSource">
    /// The form control being dragged.
    /// </param>
    /// <param name="_passiveSource">
    /// Destination location.
    /// </param>
    /// <param name="_equal">
    /// true if the control is dragged and dropped in the same location; false when dropped in destination.
    /// </param>
    /// <returns>
    /// true if the form control is dragged from source to destination; false otherwise.
    /// </returns>
    public boolean dragDrop(FormTreeControl _activeSource, FormControl _dragSource, FormTreeControl _passiveSource  = null, boolean _equal = false)
    {
        if (_dragSource.handle() == classidget(_activeSource)
            &&  (_equal
                ||  (!_equal
                    && !_dragSource.equal(_activeSource)))
            &&  (!_passiveSource
                ||  (_passiveSource
                    && !_dragSource.equal(_passiveSource))))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dragOver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns action to be perfomed on the form control.
    /// </summary>
    /// <param name="_activeSource">
    /// Source location.
    /// </param>
    /// <param name="_dragSource">
    /// The form control being dragged.
    /// </param>
    /// <returns>
    /// Option Move if the form control is being dragged from source location; Option None otherwise.
    /// </returns>
    public FormDrag dragOver(FormTreeControl _activeSource, FormTreeControl _dragSource)
    {
        if (_dragSource.handle() == classidget(_activeSource))
        {
            return FormDrag::Move;
        }

        return FormDrag::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the given button if there the given item has valid information.
    /// </summary>
    /// <param name="_formTreeItem">The tree control item to be checked.</param>
    /// <param name="_formButtonControl">The button to be enabled or disabled.</param>
    /// <param name="_object">true if the tree control item has an object; false, otherwise.</param>
    public void enableButton(FormTreeItem _formTreeItem, FormButtonControl _formButtonControl, boolean _object = true)
    {
        SysQueryItem    sysQueryItem;
        boolean         enable;
        str             data;
        int             id;

        if (_formTreeItem && _formTreeItem.data())
        {
            if (_object)
            {
                sysQueryItem = _formTreeItem.data();

                if (sysQueryItem
                    && !sysQueryItem.parmLock())
                {
                    enable = true;
                }
            }
            else
            {
                id = any2int(_formTreeItem.data());
                if (id)
                {
                    if (id > 0)
                    {
                        enable = true;
                    }
                }
                else
                {
                    data = any2str(_formTreeItem.data());
                    if (data)
                    {
                        enable = true;
                    }
                }
            }
        }

        _formButtonControl.enabled(enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpDownButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the up and down buttons given an item
    /// by checking if it is the first or last item on the tree.
    /// </summary>
    /// <param name="_formTreeControl">The tree control that contains the item.</param>
    /// <param name="_formTreeItem">The tree control item.</param>
    /// <param name="_up">The Up button.</param>
    /// <param name="_down">The Down button.</param>
    public void enableUpDownButtons(FormTreeControl _formTreeControl, FormTreeItem _formTreeItem, FormButtonControl _up, FormButtonControl _down)
    {
        SysQueryItem    sysQueryItem;
        boolean         enableUp;
        boolean         enableDown;

        if (_formTreeItem && _formTreeItem.data())
        {
            sysQueryItem     = _formTreeItem.data();

            if (sysQueryItem &&
                !sysQueryItem.parmLock())
            {
                if (_formTreeControl.getPrevSibling(_formTreeItem.idx()))
                {
                    enableUp = true;
                }

                if (_formTreeControl.getNextSibling(_formTreeItem.idx()))
                {
                    enableDown = true;
                }
            }
        }

        _up.enabled(enableUp);
        _down.enabled(enableDown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a field from the All field tree to the Selected field tree.
    /// </summary>
    public void fieldAdd()
    {
        FormTreeControl fieldAllTree        = formRun.getFieldAllTree();
        FormTreeControl fieldSelectedTree   = formRun.getFieldSelectedTree();
        TreeItemIdx     treeItemIdx         = fieldAllTree.getFirstSelected();
        TreeItemIdx     parentIdx;
        SysQueryItem    sysQueryItem;
        SysQueryItem    newItemData;
        Set             set;
        SetIterator     setIterator;
        Map             fieldMap;
        FormTreeItem    formTreeItem;
        int             addPosition;

        if (fieldAllTree.getItem(treeItemIdx))
        {
            sysQueryItem = fieldAllTree.getItem(treeItemIdx).data();

            if (!sysQueryItem.parmLock())
            {
                if (!this.isNextEnabled())
                {
                    this.nextEnabled(true, #Fields);
                    formRun.enableFieldDeleteAll(true);
                }

                parentIdx = this.tableFindIdx(fieldSelectedTree, sysQueryItem.parmTableId(), fieldSelectedTree.getRoot(), true);

                if (fieldSelectedMap.exists(!sysQueryItem.parmTableId()))
                {
                    fieldSelectedMap.insert(sysQueryItem.parmTableId(), new Map(Types::Integer, Types::Class));
                }
                fieldMap = fieldSelectedMap.lookup(sysQueryItem.parmTableId());
                fieldNo++;
                addPosition = this.getFieldPositionNumber();

                newItemData = new SysQueryItem();
                newItemData.parmTableId(     sysQueryItem.parmTableId());
                newItemData.parmFieldId(     sysQueryItem.parmFieldId());
                newItemData.parmFieldGroupId(sysQueryItem.parmFieldGroupId());
                newItemData.parmFieldGroup(  sysQueryItem.parmFieldGroup());
                newItemData.parmSortNo(      addPosition);

                fieldMap.insert(addPosition, newItemData);

                set         = SysFormTreeControl::copyTreeItem(fieldAllTree, null, fieldSelectedTree, parentIdx);
                setIterator = new SetIterator(set);
                setIterator.begin();
                while (setIterator.more())
                {
                    if (fieldSelectedTree.getParent(setIterator.value()) == parentIdx)
                    {
                        formTreeItem = fieldSelectedTree.getItem(setIterator.value());
                        break;
                    }
                    setIterator.next();
                }
                formTreeItem.data(newItemData);
                fieldSelectedTree.setItem(formTreeItem);
                fieldSelectedTree.select(formTreeItem.idx());

                SysFormTreeControl::expandTree(fieldSelectedTree, parentIdx, 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAutoSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the All field tree with the saved selection.
    /// </summary>
    private void fieldAutoSelect()
    {
        FormTreeControl     fieldAllTree    = formRun.getFieldAllTree();
        MapIterator         mapIterator     = new MapIterator(fieldSelectedMap);
        Map                 map;
        TreeItemIdx         treeItemIdx;

        this.autoSelect(formRun.getFieldAllTree(), #selField);
        mapIterator.begin();

        if (this.autoSelectValidate(#fields))
        {
            while (mapIterator.more())
            {
                map = mapIterator.value();
                if (!map.elements())
                {
                    select firstonly allFields
                        order by Tablelabel
                        where allFields.Table_Id    == mapIterator.key()
                           && allFields.Tablelabel  == #AutoReport
                           && allFields.SortingNo;

                    if (allFields)
                    {
                        treeItemIdx  = this.fieldFindIdx(fieldAllTree, mapIterator.key(), 0, fieldAllTree.getRoot(), allFields.SortingNo, true);
                        fieldAllTree.select(treeItemIdx);
                        this.fieldAdd();
                    }
                }

                mapIterator.next();
            }

            this.selectFirstChild(fieldAllTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds all field trees.
    /// </summary>
    protected void fieldBuild()
    {
        this.fieldFillList();
        this.fieldBuildAllTree();
        this.fieldBuildSelectedTree();
        this.fieldAutoSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldBuildAllTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the All field tree.
    /// </summary>
    private void fieldBuildAllTree()
    {
        FormTreeControl     fieldAllTree    = formRun.getFieldAllTree();
        Map                 fieldGroupMap;
        MapIterator         tableIterator   = new MapIterator(tableSelectedMap);
        SysQueryItem        tableData;
        SysQueryItem        sysQueryItem;
        tableId             tableId;
        TreeItemIdx         rootIdx         = 0;
        TreeItemIdx         parentIdx;

        fieldAllTree.deleteAll();

        this.deleteDeselectedItem(this.findSelectedTable(), fieldSelectedMap);

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            sysQueryItem = new SysQueryItem();
            sysQueryItem.parmLock(true);
            sysQueryItem.parmTableId(tableId);

            parentIdx       = SysFormTreeControl::addTreeItem(fieldAllTree, this.tableLabel(tableId), rootIdx, sysQueryItem, imageListAppl_Report.image(#ImageTable), true);
            fieldGroupMap   = tableFieldGroupMap.lookup(tableId);

            while select allFields
                order by Table_Id, Tablelabel
                where allFields.Table_Id    == tableId
                    && allFields.SortingNo   != 0
            {
                this.fieldBuildFieldGroup(fieldAllTree, tableId, allFields.SortingNo, fieldGroupMap, parentIdx);
            }

            if (showSysName)
            {
                while select allFields
                    order by Table_Id, Tablelabel
                    where allFields.Table_Id == tableId
                       && allFields.Field_Id
                {
                    this.fieldBuildField(fieldAllTree, tableId, allFields.Field_Id, allFields.Tablelabel, parentIdx);
                }
            }
            else
            {
                while select allFields
                    order by Table_Id, FieldLabel
                    where allFields.Table_Id == tableId
                       && allFields.Field_Id
                {
                    this.fieldBuildField(fieldAllTree, tableId, allFields.Field_Id, allFields.FieldLabel, parentIdx);
                }
            }
            tableIterator.next();
        }

        SysFormTreeControl::expandTree(fieldAllTree, fieldAllTree.getRoot(), 1);
        this.selectFirstChild(fieldAllTree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldBuildField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a field in one of the Field trees.
    /// </summary>
    /// <param name="_formTreeControl">The tree control to be populated.</param>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldId">The FieldId of the field.</param>
    /// <param name="_labelType">The type of label.</param>
    /// <param name="_parentIdx">The index of the parent item.</param>
    /// <param name="_sortNo">The sorting position; optional.</param>
    private void fieldBuildField(FormTreeControl _formTreeControl, tableId _tableId, fieldId _fieldId, LabelType _labelType, TreeItemIdx _parentIdx, int _sortNo = 0)
    {
        SysQueryItem    sysQueryItem = new SysQueryItem();
        FormTreeItem    formTreeItem;
        ImageRes        imageRes;

        sysQueryItem.parmTableId(_tableId);
        sysQueryItem.parmFieldId(_fieldId);
        sysQueryItem.parmSortNo(_sortNo);

        imageRes        = this.fieldOverlayImage(_tableId, _fieldId);

        formTreeItem    = _formTreeControl.getItem(SysFormTreeControl::addTreeItem(_formTreeControl, _labelType, _parentIdx, sysQueryItem, this.fieldImage(_tableId, _fieldId)));
        formTreeItem.overlayImage(imageRes);

        _formTreeControl.setItem(formTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldBuildFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a field group in one of the Field trees.
    /// </summary>
    /// <param name="_formTreeControl">The tree control to be populated.</param>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldGroupId">The FieldGroupId of the group.</param>
    /// <param name="_fieldGroupMap">The map of attributes of the field.</param>
    /// <param name="_parentIdx">The index of the parent item.</param>
    /// <param name="_existSet">Set of existing fields; optional.</param>
    /// <param name="_lock">True if the fields in the field group will be added locked; false, otherwise.</param>
    private void fieldBuildFieldGroup(FormTreeControl _formTreeControl, tableId _tableId, int _fieldGroupId, Map _fieldGroupMap, TreeItemIdx _parentIdx, Set _existSet = null, boolean _lock = true)
    {
        SysQueryItem    sysQueryItem        = new SysQueryItem();
        TreeItemIdx     treeItemIdx;
        TreeItemIdx     childIdx;
        FormTreeItem    formTreeItem;
        ImageRes        imageRes;
        ImageRes        overlayImageRes;
        ImageRes        stateImageRes;
        TmpSysQuery     tmpSysQuery;
        MapIterator     fieldIterator;
        Map             fieldAttributeMap;
        int             fieldAttributeCount;
        LabelType       labelType;

        sysQueryItem.parmTableId(_tableId);
        sysQueryItem.parmFieldGroupId(_fieldGroupId);
        sysQueryItem.parmFieldGroup(true);
        sysQueryItem.parmLock(!_lock);

        tmpSysQuery.setTmpData(allFields);

        select firstonly tmpSysQuery
            order by Table_Id, Tablelabel
            where tmpSysQuery.Table_Id    == _tableId
               && tmpSysQuery.SortingNo   == _fieldGroupId;

        fieldAttributeMap   = _fieldGroupMap.lookup(tmpSysQuery.SortingNo);
        fieldAttributeCount = fieldAttributeMap.elements();
        fieldIterator = new MapIterator(_fieldGroupMap.lookup(tmpSysQuery.SortingNo));
        while (fieldIterator && fieldIterator.more())
        {
            labelType = this.fieldLabel(_tableId, fieldIterator.value());
            if (labelType =="")
            {
                //remove the "field group" if it has empty field(i.e. DEL_* field)
                return;
            }
            fieldIterator.next();
        }

        treeItemIdx     = SysFormTreeControl::addTreeItem(_formTreeControl, tmpSysQuery.Tablelabel, _parentIdx, sysQueryItem, imageListAppl_Report.image(#ImageReportFieldGroup), (fieldAttributeCount > 0));

        fieldIterator.begin();

        while (fieldIterator.more())
        {
            if (!_existSet
                || _existSet.in(fieldIterator.value()))
            {
                sysQueryItem = new SysQueryItem();
                sysQueryItem.parmLock(_lock);
                sysQueryItem.parmTableId(_tableId);
                sysQueryItem.parmFieldId(fieldIterator.value());
                sysQueryItem.parmFieldGroupId(_fieldGroupId);

                imageRes        = this.fieldImage(_tableId, fieldIterator.value());
                stateImageRes   = imageListAppl_PadLock.image(#ImagePadLockClosed);
                overlayImageRes = this.fieldOverlayImage(_tableId, fieldIterator.value());

                childIdx        = SysFormTreeControl::addTreeItem(_formTreeControl, this.fieldLabel(_tableId, fieldIterator.value()), treeItemIdx, sysQueryItem, imageRes , false, stateImageRes);
                formTreeItem    = _formTreeControl.getItem(childIdx);
                formTreeItem.overlayImage(overlayImageRes);
                _formTreeControl.setItem(formTreeItem);
            }
            fieldIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldBuildSelectedTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the Selected field tree.
    /// </summary>
    private void fieldBuildSelectedTree()
    {
        FormTreeControl     fieldSelectedTree       = formRun.getFieldSelectedTree();
        SysQueryItem        sysQueryItem;
        SysQueryItem        fieldData;
        SysQueryItem        tableData;
        Map                 fieldGroupMap;
        MapIterator         fieldSortingIterator;
        MapIterator         tableIterator           = new MapIterator(tableSelectedMap);
        tableId             tableId;
        TreeItemIdx         rootIdx                 = 0;
        TreeItemIdx         parentIdx;

        fieldSelectedTree.deleteAll();

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            if (!fieldSelectedMap.exists(tableId))
            {
                fieldSelectedMap.insert(tableId, new Map(Types::Integer, Types::Class));
            }

            sysQueryItem = new SysQueryItem();
            sysQueryItem.parmLock(true);
            sysQueryItem.parmTableId(tableId);

            parentIdx = SysFormTreeControl::addTreeItem(fieldSelectedTree, this.tableLabel(tableId), rootIdx, sysQueryItem, imageListAppl_Report.image(#ImageReportSection), true);

            fieldSortingIterator = new MapIterator(fieldSelectedMap.lookup(tableId));
            fieldSortingIterator.begin();

            while (fieldSortingIterator.more())
            {
                fieldData     = fieldSortingIterator.value();
                fieldData.parmSortNo(fieldSortingIterator.key());

                if (fieldData.parmFieldGroup())
                {
                    fieldGroupMap = tableFieldGroupMap.lookup(tableId);
                    this.fieldBuildFieldGroup(fieldSelectedTree, tableId, fieldData.parmFieldGroupId(), fieldGroupMap, parentIdx);
                }
                else
                {
                    select firstonly allFields
                        where allFields.Table_Id == tableId
                           && allFields.Field_Id == fieldData.parmFieldId();

                    if (allFields)
                    {
                        // When adding selected fields, we need to set the SortNo property as the key as the same would be used
                        // while deleting the field from selected fields list.
                        this.fieldBuildField(fieldSelectedTree, tableId, fieldData.parmFieldId(),
                                            this.fieldLabel(tableId, fieldData.parmFieldId()), parentIdx,
                                            fieldSortingIterator.key());
                    }
                }

                fieldSortingIterator.next();
            }

            tableIterator.next();
        }

        fieldNo          = key;
        SysFormTreeControl::expandTree(fieldSelectedTree, fieldSelectedTree.getRoot());
        this.selectFirstChild(fieldSelectedTree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a field from the Selected field tree.
    /// </summary>
    /// <param name="_deleteAll">true if the tree is to be emptied; false, otherwise.</param>
    public void fieldDelete(boolean _deleteAll = false)
    {
        FormTreeControl fieldAllTree        = formRun.getFieldAllTree();
        FormTreeControl fieldSelectedTree   = formRun.getFieldSelectedTree();
        TreeItemIdx     treeItemIdx         = fieldSelectedTree.getFirstSelected();
        SysQueryItem    sysQueryItem;
        Map             fieldMap;

        if (_deleteAll)
        {
            fieldSelectedMap = new Map(Types::Integer, Types::Class);
            this.fieldBuildAllTree();
            this.fieldBuildSelectedTree();
            this.nextEnabled(false, #Fields);
            formRun.enableFieldDeleteAll(false);
        }
        else
        {
            if (fieldSelectedTree.getItem(treeItemIdx))
            {
                sysQueryItem = fieldSelectedTree.getItem(treeItemIdx).data();

                if (!sysQueryItem.parmLock())
                {
                    fieldMap = fieldSelectedMap.lookup(sysQueryItem.parmTableId());

                    if (fieldMap.exists(sysQueryItem.parmSortNo()))
                    {
                        fieldMap.remove(sysQueryItem.parmSortNo());
                    }
                    fieldAllTree.select(this.fieldFindIdx(fieldAllTree, sysQueryItem.parmTableId(), sysQueryItem.parmFieldId(), fieldAllTree.getRoot(), sysQueryItem.parmFieldGroupId(), sysQueryItem.parmFieldGroup()));

                    fieldSelectedTree.delete(treeItemIdx);
                }
            }

            if (!this.validateNext(fieldSelectedMap))
            {
                this.nextEnabled(false, #Fields);
                formRun.enableFieldDeleteAll(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldFillList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the internal list of all fields.
    /// </summary>
    private void fieldFillList()
    {
        MapIterator     tableIterator = new MapIterator(tableSelectedMap);
        SysQueryItem    tableData;
        Map             fieldGroupMap;
        Map             fieldMap;
        int             i, j;
        tableId         tableId;
        container       field;
        container       fieldGroup;
        container       fieldGroupElement;

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            select firstonly allFields
                where allFields.Table_Id == tableId;

            if (!allFields)
            {
                [field, fieldGroup] = ConfDefGroupWizard_BR::fieldFillContainer(tableId);

                fieldGroupMap = new Map(Types::Integer, Types::Class);
                for (i = conlen(fieldGroup); i > 0; i--)
                {
                    allFields.clear();
                    allFields.Table_Id = tableId;
                    [allFields.SortingNo, allFields.TableLabel, fieldGroupElement] = conPeek(fieldGroup, i);
                    allFields.insert();

                    fieldMap = new Map(Types::Integer, Types::Integer);
                    for (j = conlen(fieldGroupElement); j > 0; j--)
                    {
                        fieldMap.insert(j, conPeek(fieldGroupElement, j));
                    }

                    fieldGroupMap.insert(i, fieldMap);
                }
                tableFieldGroupMap.insert(tableId, fieldGroupMap);

                for (i = conlen(field); i > 0; i--)
                {
                    allFields.clear();
                    allFields.Table_Id = tableId;
                    [allFields.Field_Id, allFields.TableLabel, allFields.FieldLabel, allFields.RangeValue] = conPeek(field, i);
                    allFields.insert();
                }
            }
            tableIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldFindIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the tree item of the given field.
    /// </summary>
    /// <param name="_formTreeControl">The tree control to be searched.</param>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldId">The FieldId of the field.</param>
    /// <param name="_treeItemIdx">The index of the root item.</param>
    /// <param name="_fieldGroupId">The FieldGroupId to be used in the search.</param>
    /// <param name="_fieldGroup">true if it's a field group; false, otherwise.</param>
    /// <param name="_lock">true if it has to be locked; false, otherwise.</param>
    /// <returns>
    /// The tree item of the given field.
    /// </returns>
    private TreeItemIdx fieldFindIdx(FormTreeControl _formTreeControl, tableId _tableId, fieldId _fieldId, TreeItemIdx _treeItemIdx, int _fieldGroupId = 0, boolean _fieldGroup = false, boolean _lock = false)
    {
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;
        TreeItemIdx     foundIdx;

        while (  _treeItemIdx
                && !foundIdx)
        {
            formTreeItem    = _formTreeControl.getItem(_treeItemIdx);
            sysQueryItem    = formTreeItem.data();

            if (    sysQueryItem.parmLock()          == _lock
                &&  sysQueryItem.parmTableId()       == _tableId
                &&  sysQueryItem.parmFieldId()       == _fieldId
                &&  sysQueryItem.parmFieldGroup()    == _fieldGroup
                &&  sysQueryItem.parmFieldGroupId()  == _fieldGroupId)
            {
                return _treeItemIdx;
            }

            if (_formTreeControl.getChild(_treeItemIdx))
            {
                foundIdx = this.fieldFindIdx(_formTreeControl, _tableId, _fieldId, _formTreeControl.getChild(_treeItemIdx), _fieldGroupId, _fieldGroup, _lock);
            }

            _treeItemIdx = _formTreeControl.getNextSibling(formTreeItem.idx());
        }

        return foundIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field help text to the tree control.
    /// </summary>
    /// <param name="_formTreeControl">The tree control to be changed.</param>
    /// <param name="_formTreeItem">The tree item to be used.</param>
    public void fieldHelpText(FormTreeControl _formTreeControl, FormTreeItem _formTreeItem)
    {
        LabelType       helpText;
        SysQueryItem    sysQueryItem;

        if (_formTreeItem.idx())
        {
            sysQueryItem = _formTreeItem.data();

            select firstonly allFields
                where allFields.Table_Id    == sysQueryItem.parmTableId()
                   && allFields.Field_Id    == sysQueryItem.parmFieldId();

            if (allFields)
            {
                helpText = allFields.RangeValue;
            }
        }

        _formTreeControl.helpText(helpText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image being used y the field.
    /// </summary>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldId">The FieldId of the field.</param>
    /// <returns>The image of the field.</returns>
    private ImageRes fieldImage(tableId _tableId, fieldId _fieldId)
    {
        SysDictField    sysDictField;
        Types           baseType;

        if (_fieldId > 0)
        {
            sysDictField    = new SysDictField(_tableId, _fieldId);
            baseType        = sysDictField.baseType();

            return imageListAppl_Report.image(imageListAppl_Report.findFieldImage(baseType));
        }

        return imageListAppl_Report.image(#imageMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the label of the given field.
    /// </summary>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldId">The FieldId of the field.</param>
    /// <returns>The label used.</returns>
    private LabelType fieldLabel(tableId _tableId, fieldId _fieldId)
    {
        TmpSysQuery tmpSysQuery;
        LabelType   labelType;

        tmpSysQuery.setTmpData(allFields);

        select firstonly tmpSysQuery
            where tmpSysQuery.Table_Id == _tableId
               && tmpSysQuery.Field_Id == _fieldId;

        if (tmpSysQuery)
        {
            if (showSysName)
            {
                labelType = tmpSysQuery.Tablelabel;
            }
            else
            {
                labelType = tmpSysQuery.FieldLabel;
            }
        }

        return labelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldMoveItemVertical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a field item up or down.
    /// </summary>
    /// <param name="_upDown">true if the move is up; false, otherwise.</param>
    public void fieldMoveItemVertical(boolean _upDown)
    {
        fieldSelectedMap = this.moveItemVertical(formRun.getfieldSelectedTree(), _upDown);
        fieldNo          = key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the name of the given field.
    /// </summary>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldId">The FieldId of the field.</param>
    /// <returns>The name used.</returns>
    private LabelType fieldName(tableId _tableId, fieldId _fieldId)
    {
        TmpSysQuery tmpSysQuery;
        LabelType   labelType;

        tmpSysQuery.setTmpData(allFields);

        select firstonly tmpSysQuery
            where tmpSysQuery.Table_Id == _tableId
               && tmpSysQuery.Field_Id == _fieldId;

        if (tmpSysQuery)
        {
            labelType = tmpSysQuery.Tablelabel;
        }

        return labelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldOverlayImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the overlay image of the field.
    /// </summary>
    /// <param name="_tableId">The TableId of the field.</param>
    /// <param name="_fieldId">The FieldId of the field.</param>
    /// <returns>The overlay image used.</returns>
    private ImageRes fieldOverlayImage(tableId _tableId, fieldId _fieldId)
    {
        Types           baseType;
        SysDictTable    dictTable;
        SysDictMethod   methodInfo;
        DictType        dictType;

        if (_fieldId < 0)
        {
            dictTable   = new SysDictTable(_tableId);
            methodInfo  = dictTable.objectMethodObject(-_fieldId);
            dictType    = new DictType(methodInfo.returnId());

            if (dictType)
            {
                baseType    = dictType.baseType();
            }
            else
            {
                baseType    = methodInfo.returnType();
            }

            return imageListAppl_Report.image(imageListAppl_Report.findOverlayImage(baseType));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the selection of fields.
    /// </summary>
    /// <returns>true if the selection is validated; false, otherwise.</returns>
    protected boolean fieldValidate()
    {
        Set             dublicateFieldSet;
        Set             tmpSet;
        SetIterator     setIterator;
        Map             fieldGroupMap;
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        MapIterator     fieldIterator;
        MapIterator     fieldGroupIterator;
        SysQueryItem    tableData;
        SysQueryItem    fieldData;
        tableId         tableId;
        str             tmpText;
        str             duplicateFieldText;

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData           = tableIterator.value();
            tableId             = tableData.parmTableId();

            dublicateFieldSet   = new Set(Types::Integer);
            tmpSet              = new Set(Types::Integer);

            fieldIterator       = new MapIterator(fieldSelectedMap.lookup(tableId));
            fieldIterator.begin();

            while (fieldIterator.more())
            {
                fieldData     = fieldIterator.value();

                if (fieldData.parmFieldGroup())
                {
                    fieldGroupMap       = tableFieldGroupMap.lookup(tableId);
                    fieldGroupIterator  = new MapIterator(fieldGroupMap.lookup(fieldData.parmFieldGroupId()));
                    fieldGroupIterator.begin();
                    while (fieldGroupIterator.more())
                    {
                        if (!tmpSet.in(fieldGroupIterator.value()))
                        {
                            tmpSet.add(fieldGroupIterator.value());
                        }
                        else
                        {
                            dublicateFieldSet.add(fieldGroupIterator.value());
                        }
                        fieldGroupIterator.next();
                    }
                }
                else
                {
                    if (!tmpSet.in(fieldData.parmFieldId()))
                    {
                        tmpSet.add(fieldData.parmFieldId());
                    }
                    else
                    {
                        dublicateFieldSet.add(fieldData.parmFieldId());
                    }
                }
                fieldIterator.next();
            }

            if (dublicateFieldSet.elements())
            {
                if (duplicateFieldText)
                {
                    duplicateFieldText += #newLine;
                }

                duplicateFieldText += this.tableLabel(tableId) + ': ';

                setIterator = new SetIterator(dublicateFieldSet);
                setIterator.begin();
                while (setIterator.more())
                {
                    if (tmpText)
                    {
                        tmpText += ', ';
                    }
                    tmpText += this.fieldLabel(tableId, setIterator.value());
                    setIterator.next();
                }
                duplicateFieldText += tmpText;
            }
            tableIterator.next();
        }

        if (duplicateFieldText)
        {
            duplicateFieldText = "@SYS68027" + #newLine + #newLine +
                                 duplicateFieldText + #newLine + #newLine +
                                 "@SYS68026";
            return Box::yesNo(duplicateFieldText, DialogButton::No) == DialogButton::Yes;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first child in the given item's level.
    /// </summary>
    /// <param name="_formTreeControl">The tree control to be searched.</param>
    /// <param name="_treeItemIdx">The tree item where search begins.</param>
    /// <returns>The item index of the found child</returns>
    private TreeItemIdx findFirstChild(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx)
    {
        TreeItemIdx  foundIdx;

        while ( !foundIdx
                && _treeItemIdx)
        {
            if (_formTreeControl.getChild(_treeItemIdx))
            {
                foundIdx = _formTreeControl.getChild(_treeItemIdx);
            }

            _treeItemIdx = _formTreeControl.getNextSibling(_treeItemIdx);
        }

        if (!foundIdx)
        {
            foundIdx = _formTreeControl.getRoot();
        }

        return foundIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSelectedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a set with the Selected tables.
    /// </summary>
    /// <returns>The <c>Set</c> object.</returns>
    private Set findSelectedTable()
    {
        MapIterator     mapIterator = new MapIterator(tableSelectedMap);
        Set             tableSet    = new Set(Types::Integer);
        SysQueryItem    tableData;

        mapIterator.begin();
        while (mapIterator.more())
        {
            tableData = mapIterator.value();
            tableSet.add(tableData.parmTableId());
            mapIterator.next();
        }

        return tableSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTreeRadioImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the selected or unselected radio image.
    /// </summary>
    /// <param name="selected">true if selected image; false, otherwise.</param>
    /// <returns>The corresponding radio image.</returns>
    private ImageRes findTreeRadioImage(boolean selected)
    {
        if (selected)
        {
            return imageListAppl_RadioBtn.image(#imageRadioAll);
        }
        else
        {
            return imageListAppl_RadioBtn.image(#imageRadioNone);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTreeStateImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the checked or unchecked state image.
    /// </summary>
    /// <param name="checked">true if checked image; false, otherwise. Optional.</param>
    /// <returns>The corresponding state image.</returns>
    private ImageRes findTreeStateImage(boolean checked = false)
    {
        if (checked)
        {
            return imageListAppl_checkbox.image(#imageCheckAll);
        }
        else
        {
            return imageListAppl_checkbox.image(#imageCheckNone);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finishes the wizard and save all the selections.
    /// </summary>
    public void finish()
    {
        super();
        this.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the form name.
    /// </summary>
    /// <returns>
    /// Name of the form ConfDefGroupWizard_BR.
    /// </returns>
    formName formName()
    {
        return formstr(ConfDefGroupWizard_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldPositionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last position of a field in the auto report fields <c>Map</c>.
    /// </summary>
    /// <returns>
    /// A int value greater than the largest key value used in the auto report fields <c>Map</c>.
    /// </returns>
    /// <remarks>
    /// This is done to ensure that the new field which is added is not added with a key value of
    /// existing field in the <c>Map</c>.
    /// </remarks>
    private int getFieldPositionNumber()
    {
        MapIterator     tableIterator;
        MapIterator     fieldIterator;
        int             largestNumber, currentNumber;
        SysQueryItem    tableData;

        if (tableSelectedMap)
        {
            tableIterator = new MapIterator(tableSelectedMap);
            tableIterator.begin();

            while (tableIterator.more())
            {
                tableData           = tableIterator.value();
                fieldIterator       = new MapIterator(fieldSelectedMap.lookup(tableData.parmTableId()));
                while (fieldIterator.more())
                {
                    currentNumber = fieldIterator.key();
                    if (currentNumber > largestNumber)
                    {
                        largestNumber = currentNumber;
                    }

                    fieldIterator.next();
                }

                tableIterator.next();
            }
        }

        return largestNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFinishButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves wheter the wizard has a Finish button.
    /// </summary>
    /// <returns>Always true.</returns>
    boolean hasFinishButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSavedSelectionData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves if the given kind of data has saved selection.
    /// </summary>
    /// <param name="_key">The kind of data.</param>
    /// <returns>true if there is saved selection; false, otherwise.</returns>
    private boolean hasSavedSelectionData(int _key)
    {
        Map data;

        data = savedSelectionData.lookup(_key);

        return data.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hitTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item that was clicked.
    /// </summary>
    /// <param name="_formTreeControl">The tree control clicked.</param>
    /// <param name="_x">The horizontal coordinate.</param>
    /// <param name="_y">The vertical coordinate.</param>
    /// <returns>The index of the tree item; 0 if none was clicked.</returns>
    public TreeItemIdx hitTest(FormTreeControl _formTreeControl, int _x, int _y)
    {
        TreeItemIdx     treeItemIdx;
        int             focus;

        [treeItemIdx, focus] = _formTreeControl.hitTest(_x, _y);

        if (focus & #FTCHT_ONITEM
            && _formTreeControl.getItem(treeItemIdx))
        {
            return treeItemIdx;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the wizard form.
    /// </summary>
    /// <param name="_form">The <c>Form</c> object to be initialized.</param>
    private void initForm(Form _form)
    {
        FormBuildDesign         buildDesign;
        FormBuildTabControl     buildTab;

        // Much of the code that handles the UI in runtime
        // is based on SysWizard::prompt()

        buildDesign = _form.design();
        this.initFormTitle(_form.design());

        buildTab = this.initFormFindTabControl(buildDesign);
        this.initFormHeaders(buildTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFindTabControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the tab control of the wizard.
    /// </summary>
    /// <param name="_buildDesign">An instance of <c>FormBuildDesign</c>.</param>
    /// <returns>The <c>FormBuidTabControl</c> created.</returns>
    private FormBuildTabControl initFormFindTabControl(FormBuildDesign _buildDesign)
    {
        FormBuildControl        buildControl;
        FormBuildTabControl     buildTab;
        int                     i;

        for (i = 1; i <= _buildDesign.controlCount(); i++)
        {
            buildControl = _buildDesign.controlNum(i);
            if (classIdGet(buildControl) == classNum(FormBuildTabControl))
            {
                buildTab = buildControl;
                break;
            }
        }

        return buildTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the wizard form headers.
    /// </summary>
    /// <param name="_buildTab">An instance of <c>FormBuildTabControl</c>.</param>
    private void initFormHeaders(FormBuildTabControl _buildTab)
    {
        FormBuildTabPageControl buildTabPage;
        int                     i;

        if (_buildTab)
        {
            for (i = 1; i <= _buildTab.controlCount(); i++)
            {
                buildTabPage = _buildTab.controlNum(i);

                switch (i)
                {
                    case #Welcome:
                        buildTabPage.caption("@GLS2035");
                        break;

                    case #Tables:
                        buildTabPage.caption("@SYS55761");
                        buildTabPage.helpText("@GLS2038");
                        break;

                    case #Fields:
                        buildTabPage.caption("@SYS36590");
                        buildTabPage.helpText("@GLS2039");
                        break;

                    case #Sorting:
                        buildTabPage.caption("@SYS35013");
                        buildTabPage.helpText("@GLS2040");
                        break;

                    case #SumSetup:
                        buildTabPage.caption("@SYS15564");
                        buildTabPage.helpText("@GLS2041");
                        break;

                    case #Ranges:
                        buildTabPage.caption("@SYS74558");
                        buildTabPage.helpText("@GLS2042");
                        break;

                    case #Complete:
                        buildTabPage.caption("@GLS2045");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the wizard form by calling the method initForm.
    /// </summary>
    void initFormRun()
    {
        super();
        this.initForm(formRun.form());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the wizard title.
    /// </summary>
    /// <param name="_buildDesign">A <c>FormBuildDesign</c> instance.</param>
    private void initFormTitle(FormBuildDesign _buildDesign)
    {
        _buildDesign.caption(strfmt("%1 - %2: %3", "@GLS2046", "@GLS2047", this.parmConfGroupId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectionData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal map of save selections.
    /// </summary>
    private void initSelectionData()
    {
        int i;

        savedSelectionData = new Map(Types::Integer, Types::Class);
        for (i = #selTable ; i <= #selRange ; i++)
        {
            savedSelectionData.insert(i, new Map(Types::Integer, Types::Class));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableCurrentlySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given table is selected.
    /// </summary>
    /// <param name="tableId">The TableId of the table.</param>
    /// <returns>true if the table is selected; false, otherwise.</returns>
    private boolean isTableCurrentlySelected(int tableId)
    {
        return this.isTableSelected(tableSelectedMap, tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableInUseByLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given table is in use by the current layout.
    /// </summary>
    /// <param name="_tableId">The TableId of the table.</param>
    /// <returns>
    /// True if the given table is used by the current layout; false otherwise.
    /// </returns>
    private boolean isTableInUseByLayout(tableId _tableId)
    {
        ConfLayoutFields_BR confLayoutFields;
        ConfLayoutGroups_BR confLayoutGroups;

        select firstOnly RecId
        from confLayoutFields
            join RecId
            from confLayoutGroups
        where   confLayoutGroups.ConfGroupId     == confGroupId
            &&  confLayoutGroups.LayoutGroupId   == confLayoutFields.LayoutGroupId
            &&  confLayoutFields.TableName       == tableid2name(_tableId);

        return confLayoutFields.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTablePreviouslySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given table was previously selected.
    /// </summary>
    /// <param name="tableId">The TableId of the table.</param>
    /// <returns>true if table was selected; false, otherwise.</returns>
    private boolean isTablePreviouslySelected(int tableId)
    {
        return this.isTableSelected(loadedTables, tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given map contains the given table.
    /// </summary>
    /// <param name="source">A <c>Map</c> object that contains the tables.</param>
    /// <param name="tableId">The TableId of the table being searched.</param>
    /// <returns>true if table was found; false, otherwise.</returns>
    private boolean isTableSelected(Map source, int tableId)
    {
        MapIterator     tableIterator;
        SysQueryItem    tableInfo;

        if (source)
        {
            tableIterator = new MapIterator(source);

            tableIterator.begin();
            while (tableIterator.more())
            {
                tableInfo = tableIterator.value();
                if (tableInfo.parmTableId() == tableId)
                {
                    return true;
                }

                tableIterator.next();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads information of the objects involved in the query, namely tables, fields
    /// and selected summation options, sort order, range information.
    /// </summary>
    public void load()
    {
        savedSelectionData.insert(#selTable,    this.loadTable());
        savedSelectionData.insert(#selField,    this.loadField());
        savedSelectionData.insert(#selSum,      this.loadSum());
        savedSelectionData.insert(#selSort,     this.loadSortOrder());
        savedSelectionData.insert(#selRange,    this.loadRange());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadField</Name>
				<Source><![CDATA[
    private Map loadField()
    {
        ConfDefinitions_BR      confDefinitions;
        Map                     mapTableIdMaps;
        Map                     mapSortNoQueryItems;
        SysQueryItem            queryItem;
        DictTable               dictTable;
        int                     groupNo;

        mapTableIdMaps = new Map(Types::Integer, Types::Class);

        while select confDefinitions
            where confDefinitions.ConfGroupId == confGroupId
        {
            queryItem = new SysQueryItem();
            queryItem.parmTableId(tableName2Id(confDefinitions.TableName));
            queryItem.parmSortNo(confDefinitions.SortingNumber);

            if (confDefinitions.FieldName)
            {
                queryItem.parmFieldId(Global::fieldId2Ext(fieldName2Id(queryItem.parmTableId(), confDefinitions.FieldName), 1));
            }
            else
            {
                if (!dictTable || dictTable.id() != queryItem.parmTableId())
                {
                    dictTable =  new DictTable(queryItem.parmTableId());
                }

                for (groupNo = 1; groupNo <= dictTable.fieldGroupCnt(); groupNo++)
                {
                    if (dictTable.fieldGroup(groupNo) == confDefinitions.FieldGroup)
                    {
                        queryItem.parmFieldGroupId(groupNo);
                        break;
                    }
                }
            }

            if (!mapTableIdMaps.exists(queryItem.parmTableId()))
            {
                mapSortNoQueryItems = new Map(Types::Integer, Types::Class);
                mapTableIdMaps.insert(queryItem.parmTableId(), mapSortNoQueryItems);
            }
            else
            {
                mapSortNoQueryItems = mapTableIdMaps.lookup(queryItem.parmTableId());
            }

            mapSortNoQueryItems.insert(confDefinitions.SortingNumber, queryItem);
        }

        return mapTableIdMaps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRange</Name>
				<Source><![CDATA[
    private Map loadRange()
    {
        ConfRange_BR            confRange;
        Map                     mapFieldIdQueryItems;
        Map                     mapTableIdMaps;
        SysQueryItem            queryItem;

        mapTableIdMaps = new Map(Types::Integer, Types::Class);

        while select TableName, FieldName
            from confRange
            where confRange.ConfGroupId == confGroupId
        {
            queryItem = new SysQueryItem();
            queryItem.parmTableId(tableName2Id(confRange.TableName));
            queryItem.parmFieldId(Global::fieldId2Ext(fieldName2Id(queryItem.parmTableId(), confRange.FieldName), 1));

            if (!mapTableIdMaps.exists(queryItem.parmTableId()))
            {
                mapFieldIdQueryItems = new Map(Types::Integer, Types::Class);
                mapTableIdMaps.insert(queryItem.parmTableId(), mapFieldIdQueryItems);
            }
            else
            {
                mapFieldIdQueryItems = mapTableIdMaps.lookup(queryItem.parmTableId());
            }

            mapFieldIdQueryItems.insert(queryItem.parmFieldId(), queryItem);
        }

        return mapTableIdMaps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSortOrder</Name>
				<Source><![CDATA[
    private Map loadSortOrder()
    {
        ConfSortOrder_BR        confSortOrder;
        Map                     mapSortNoQueryItems;
        Map                     mapTableIdMaps;
        SortOrder               sortOrder;
        SysQueryItem            queryItem;

        mapTableIdMaps = new Map(Types::Integer, Types::Class);

        while select confSortOrder where confSortOrder.ConfGroupId == confGroupId
        {
            queryItem = new SysQueryItem();
            queryItem.parmTableId(tableName2Id(confSortOrder.TableName));
            queryItem.parmSortNo(confSortOrder.SortingNumber);
            queryItem.parmFieldId(Global::fieldId2Ext(fieldname2id(queryItem.parmTableId(), confSortOrder.FieldName), 1));

            sortOrder = confSortOrder.SortOrder == 0 ? SortOrder::Ascending : SortOrder::Descending;
            queryItem.parmData([sortOrder]);
            queryItem.parmImageRes(this.sortFindSortImage(sortOrder));

            if (!mapTableIdMaps.exists(queryItem.parmTableId()))
            {
                mapSortNoQueryItems = new Map(Types::Integer, Types::Class);
                mapTableIdMaps.insert(queryItem.parmTableId(), mapSortNoQueryItems);
            }
            else
            {
                mapSortNoQueryItems = mapTableIdMaps.lookup(queryItem.parmTableId());
            }

            mapSortNoQueryItems.insert(queryItem.parmSortNo(), queryItem);
        }

        return mapTableIdMaps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSum</Name>
				<Source><![CDATA[
    private Map loadSum()
    {
        ConfSummation_BR        confSummation;
        Map                     mapFieldIdQueryItem;
        Map                     mapTableIdMaps;
        SysQueryItem            queryItem;

        mapTableIdMaps = new Map(Types::Integer, Types::Class);

        while select confSummation where confSummation.ConfGroupId == confGroupId
        {
            queryItem = new SysQueryItem();
            queryItem.parmTableId(tableName2Id(confSummation.TableName));
            queryItem.parmFieldId(Global::fieldId2Ext(fieldname2id(queryItem.parmTableId(), confSummation.FieldName), 1));
            queryItem.parmData([confSummation.AverageSelected, confSummation.CountSelected, confSummation.SumSelected]);

            if (!mapTableIdMaps.exists(queryItem.parmTableId()))
            {
                mapFieldIdQueryItem = new Map(Types::Integer, Types::Class);
                mapTableIdMaps.insert(queryItem.parmTableId(), mapFieldIdQueryItem);
            }
            else
            {
                mapFieldIdQueryItem = mapTableIdMaps.lookup(queryItem.parmTableId());
            }

            mapFieldIdQueryItem.insert(queryItem.parmFieldId(), queryItem);
        }

        return mapTableIdMaps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTable</Name>
				<Source><![CDATA[
    private Map loadTable()
    {
        ConfTableSelection_BR   confTableSelection;
        SysQueryItem            queryItem;

        loadedTables = new Map(Types::Integer, Types::Class);

        while select confTableSelection
            order by DataSourceNumber
            where confTableSelection.ConfGroupId == confGroupId
        {
            queryItem = new SysQueryItem();
            queryItem.parmSortNo(confTableSelection.DataSourceNumber);
            queryItem.parmTableId(tablename2id(confTableSelection.TableName));
            queryItem.parmRelatedId(tablename2id(confTableSelection.RelatedTo));

            loadedTables.insert(confTableSelection.DataSourceNumber, queryItem);
        }

        return loadedTables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveItemVertical</Name>
				<Source><![CDATA[
    private Map moveItemVertical(FormTreeControl _formTreeControl, boolean _upDown, boolean _isTableMap = false)
    {
        Map map;

        SysFormTreeControl::moveVertical(_formTreeControl, _upDown);
        map = this.sortSelected(_formTreeControl, _isTableMap);

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        imageListAppl_Report    = new ImageListAppl_Report();
        imageListAppl_checkbox  = new ImageListAppl_checkbox();
        imageListAppl_PadLock   = new ImageListAppl_PadLock();
        imageListAppl_RadioBtn  = new ImageListAppl_RadioBtn();

        tableAllRelationMap     = new Map(Types::Integer, Types::Class);
        tableFieldGroupMap      = new Map(Types::Integer, Types::Class);
        tableSumMap             = new Map(Types::Integer, Types::Class);

        tableSelectedMap        = new Map(Types::Integer, Types::Class);
        fieldSelectedMap        = new Map(Types::Integer, Types::Class);
        sumSelectedMap          = new Map(Types::Integer, Types::Class);
        sortSelectedMap         = new Map(Types::Integer, Types::Class);
        rangeSelectedMap        = new Map(Types::Integer, Types::Class);

        allTablesLabel          = new Map(Types::String,  Types::Integer);
        allTablesName           = new Map(Types::String,  Types::Integer);

        autoSelectMap           = new Map(Types::Integer, Types::Class);

        displayMethodsInFormMap = new Map(Types::Integer, Types::Class);

        this.initSelectionData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newObjectName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object name
    /// </summary>
    /// <param name="_treeNodePath">
    /// A tree node path
    /// </param>
    /// <param name="_name">
    /// A string with the name of the object
    /// </param>
    /// <returns>
    /// The name of the object
    /// </returns>
    protected Name newObjectName(TreeNodePath _treeNodePath, Name _name)
    {
        TreeNodePath    tmp     = _treeNodePath + #AOTDelimiter + _name;
        int             i;
        int             found;
        str             number;

        found   = strFind(_name, '_', strlen(_name), -strlen(_name));
        number  = subStr(_name, found + 1, strlen(_name) - found);

        if (number
            && match('<:d+', number))
        {
            i       = str2int(number);
            _name   = substr(_name, 1, found - 1);
        }

        while (infolog.findNode(tmp))
        {
            if (i)
            {
                i++;
            }
            else
            {
                i = 2;
            }
            tmp = _treeNodePath + #AOTDelimiter + _name + '_' + int2str(i);
        }

        if (i)
        {
            _name += '_' + int2str(i);
        }

        return _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the next form in the wizard.
    /// </summary>
    public void next()
    {
        boolean     nextOk = true;

        switch (tabIdx)
        {
            case #Welcome:
                this.tableBuild();
                break;
            case #Tables:
                this.fieldBuild();
                break;
            case #Fields:
                nextOk = this.fieldValidate();
                this.sumBuild();
                this.sortRangeBuild();
                break;
            case #SumSetup:
                nextOk = this.sumValidate();
                break;
        }

        if (nextOk)
        {
            super();
            this.tabChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfGroupId</Name>
				<Source><![CDATA[
    public ConfGroupId_BR parmConfGroupId(ConfGroupId_BR _confGroupId = confGroupId)
    {
        confGroupId = _confGroupId;
        return confGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range options.
    /// </summary>
    /// <param name="_add">
    /// Specifies if the range option has to be added to the map.
    /// </param>
    public void rangeAdd(boolean _add = true)
    {
        rangeSelectedMap = this.sortRangeAdd(formRun.getRangeAllTree(), formRun.getRangeSelectedTree(), rangeSelectedMap, true, rangeNo, SortOrder::Ascending, _add);
        rangeNo          = key;
        formRun.enableRangeDeleteAll(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeAutoSelect</Name>
				<Source><![CDATA[
    private void rangeAutoSelect()
    {
        FormTreeControl rangeAllTree        = formRun.getRangeAllTree();
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        SysDictTable    dictTable;
        DictIndex       dictIndex;
        SysDictField    sysDictField;
        SysDictField    arrayField;
        SysQueryItem    tableData;
        int             indexId, j;

        this.autoSelect(formRun.getRangeAllTree(), #selRange);

        if (!this.validateNext(rangeSelectedMap)
            && this.autoSelectValidate(#Ranges))
        {
            tableIterator.begin();
            while (tableIterator.more())
            {
                tableData   = tableIterator.value();
                dictTable   = new SysDictTable(tableData.parmTableId());

                if (dictTable.indexCnt())
                {
                    indexId = dictTable.indexNext(0);
                    while (indexId)
                    {
                        dictIndex = dictTable.indexObject(indexId);
                        if (dictIndex.numberOfFields())
                        {
                            sysDictField = new SysDictField(dictTable.id(),  dictIndex.field(1));
                            for (j = 1; j <= sysDictField.arraySize(); j++)
                            {
                                arrayField = new SysDictField(dictTable.id(), sysDictField.id(), j);

                                if (arrayField.saveContents() &&
                                    arrayField.visible() &&
                                    !isType(arrayField.typeId(), extendedTypeNum(recId)))
                                {
                                    rangeAllTree.select(this.fieldFindIdx(rangeAllTree, dictTable.id(), arrayField.extendedFieldId(), rangeAllTree.getRoot()));
                                    this.rangeAdd();
                                }
                            }
                        }
                        indexId = dictTable.indexNext(indexId);
                    }
                }
                tableIterator.next();
            }

            this.selectFirstChild(rangeAllTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes range options.
    /// </summary>
    /// <param name="_deleteAll">
    /// Specifies if all range options have to be deleted from the map.
    /// </param>
    public void rangeDelete(boolean _deleteAll)
    {
        rangeSelectedMap = this.sortRangeDelete(formRun.getRangeSelectedTree(), formRun.getRangeAllTree(), rangeSelectedMap, true, _deleteAll);
        formRun.enableRangeDeleteAll(this.validateNext(rangeSelectedMap));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportGenerateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the query, adds ranges, sort options based on the selection in the Configurator definition wizard and returns the query.
    /// </summary>
    /// <returns>
    /// The generated query.
    /// </returns>
    protected Query reportGenerateQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    parentDataSource;
        Set                     headerSet;
        Set                     totalSet;
        MapIterator             tableIterator           = new MapIterator(tableSelectedMap);
        MapIterator             mapIterator;
        SysQueryItem            tableData;
        SysQueryItem            sysQueryItem;
        tableId                 tableId;
        int                     sortingNo;
        SortOrder               sortOrder;

        query = new Query();
        query.name('Query');
        query.userUpdate(true);

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData       = tableIterator.value();
            tableId         = tableData.parmTableId();
            sortingNo       = 0;

            if (tableData.parmRelatedId())
            {
                parentDataSource        = query.dataSourceTable(tableData.parmRelatedId());
                queryBuildDataSource    = parentDataSource.addDataSource(tableId);
            }
            else
            {
                queryBuildDataSource    = query.addDataSource(tableId);
            }
            queryBuildDataSource.relations(true);

            if (sortSelectedMap.exists(tableId))
            {
                mapIterator = new MapIterator(sortSelectedMap.lookup(tableId));
                mapIterator.begin();
                while (mapIterator.more())
                {
                    sysQueryItem    = mapIterator.value();
                    [sortOrder]     = sysQueryItem.parmData();
                    queryBuildDataSource.addSortField(sysQueryItem.parmFieldId(), sortOrder);
                    sortingNo++;

                    if (headerSet &&
                        headerSet.in(sysQueryItem.parmFieldId()))
                    {
                        queryBuildDataSource.autoHeader(sortingNo, true);
                    }

                    if (totalSet &&
                        totalSet.in(sysQueryItem.parmFieldId()))
                    {
                        queryBuildDataSource.autoSum(sortingNo, true);
                    }
                    mapIterator.next();
                }
            }

            if (rangeSelectedMap.exists(tableId))
            {
                mapIterator = new MapIterator(rangeSelectedMap.lookup(tableId));
                mapIterator.begin();
                while (mapIterator.more())
                {
                    sysQueryItem = mapIterator.value();

                    queryBuildDataSource.addRange(sysQueryItem.parmFieldId());

                    mapIterator.next();
                }
            }
            tableIterator.next();
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the selected configurator details to generate the query.
    /// </summary>
    protected void save()
    {
        ttsbegin;

        this.saveTableAndRelation();
        this.saveField();
        this.saveSum();
        this.saveSortOrder();
        this.saveRange();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveField</Name>
				<Source><![CDATA[
    private void saveField()
    {
        ConfDefinitions_BR      confDefinitions;
        DictTable               dictTable;
        MapIterator             fieldIt;
        RecordInsertList        ril;
        SortingNumber           sortNumber;
        SysQueryItem            queryItem;
        MapIterator             tableIt;

        delete_from confDefinitions where confDefinitions.ConfGroupId == confGroupId;

        ril = new RecordInsertList(tableNum(ConfDefinitions_BR));

        tableIt = new MapIterator(fieldSelectedMap);
        tableIt.begin();
        while (tableIt.more())
        {
            dictTable = null;
            fieldIt = new MapIterator(tableIt.value());
            fieldIt.begin();
            sortNumber = 1;

            while (fieldIt.more())
            {
                queryItem = fieldIt.value();

                confDefinitions.clear();
                confDefinitions.initValue();
                confDefinitions.ConfGroupId      = confGroupId;
                confDefinitions.TableName        = tableid2name(tableIt.key());
                confDefinitions.SortingNumber    = sortNumber;

                if (queryItem.parmFieldGroup())
                {
                    if (!dictTable)
                    {
                        dictTable = new DictTable(tableIt.key());
                    }
                    confDefinitions.FieldGroup = dictTable.fieldGroup(queryItem.parmFieldGroupId());
                }
                else
                {
                    confDefinitions.FieldName = fieldid2name(tableIt.key(), queryItem.parmFieldId());
                }

                ril.add(confDefinitions);
                sortNumber++;

                fieldIt.next();
            }

            tableIt.next();
        }

        ril.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRange</Name>
				<Source><![CDATA[
    private void saveRange()
    {
        ConfRange_BR        confRange;
        MapIterator         fieldIt;
        RecordInsertList    ril;
        SysQueryItem        queryItem;
        MapIterator         tableIt;
        identifiername      tableName;

        delete_from confRange where confRange.ConfGroupId == confGroupId;

        ril     = new RecordInsertList(tablenum(ConfRange_BR));
        tableIt = new MapIterator(rangeSelectedMap);
        tableIt.begin();
        while (tableIt.more())
        {
            tableName   = tableid2name(tableIt.key());
            fieldIt     = new MapIterator(tableIt.value());
            fieldIt.begin();
            while (fieldIt.more())
            {
                queryItem = fieldIt.value();

                confRange.clear();
                confRange.initValue();
                confRange.ConfGroupId  = confGroupId;
                confRange.TableName    = tableName;
                confRange.FieldName    = fieldId2Name(tableIt.key(), queryItem.parmFieldId());
                ril.add(confRange);

                fieldIt.next();
            }

            tableIt.next();
        }

        ril.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRelations</Name>
				<Source><![CDATA[
    private void saveRelations(tableId _parentId, tableId _childId, RecordInsertList _rilConfRelations)
    {
        ConfRelations_BR    confRelations;
        int                 lineNum;
        SysDictRelation     relation;

        relation = new SysDictRelation(_parentId);

        if (!(      relation.loadNameRelation(tableId2Name(_childId))
                ||  relation.loadTableRelation(_childId)))
        {
            return;
        }

        for (lineNum = 1 ; lineNum <= relation.lines() ; lineNum++)
        {
            confRelations.clear();
            confRelations.initValue();
            confRelations.ConfGroupId      = confGroupId;
            confRelations.SourceTableName  = tableId2Name(_parentId);
            confRelations.RelatedTable     = tableId2Name(_childId);

            switch (relation.lineType(lineNum))
            {
                case TableRelation::Field:
                    confRelations.RelationshipType = ConfRelationships_BR::Normal;
                    confRelations.SourceFieldName  = fieldId2Name(_parentId, relation.lineTableValue(lineNum));
                    confRelations.RelatedField     = fieldId2Name(_childId, relation.lineExternTableValue(lineNum));
                    break;

                case TableRelation::ThisFixed:
                    confRelations.RelationshipType = ConfRelationships_BR::FixedField;
                    confRelations.SourceFieldName  = fieldId2Name(_parentId, relation.lineTableValue(lineNum));
                    confRelations.FixedValue       = relation.lineExternTableValue(lineNum);
                    break;

                case TableRelation::ExternFixed:
                    confRelations.RelationshipType = ConfRelationships_BR::FixedFieldRelated;
                    confRelations.RelatedField     = fieldId2Name(_childId, relation.lineExternTableValue(lineNum));
                    confRelations.FixedValue       = relation.lineTableValue(lineNum);
                    break;
            }

            _rilConfRelations.add(confRelations);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSortOrder</Name>
				<Source><![CDATA[
    private void saveSortOrder()
    {
        ConfSortOrder_BR    confSortOrder;
        MapIterator         fieldIt;
        RecordInsertList    ril;
        SortingNumber       sortNumber;
        SortOrder           sortOrder;
        SysQueryItem        queryItem;
        MapIterator         tableIt;
        identifiername      tableName;

        delete_from confSortOrder where confSortOrder.ConfGroupId == confGroupId;

        ril     = new RecordInsertList(tablenum(ConfSortOrder_BR));
        tableIt = new MapIterator(sortSelectedMap);
        tableIt.begin();
        while (tableIt.more())
        {
            tableName   = tableid2name(tableIt.key());
            sortNumber  = 1;
            fieldIt    = new MapIterator(tableIt.value());
            fieldIt.begin();
            while (fieldIt.more())
            {
                queryItem  = fieldIt.value();
                [sortOrder] = queryItem.parmData();

                confSortOrder.ConfGroupId     = confGroupId;
                confSortOrder.TableName       = tableName;
                confSortOrder.FieldName       = fieldid2name(tableIt.key(), queryItem.parmFieldId());
                confSortOrder.SortOrder       = sortOrder == SortOrder::Ascending ? 0 : 1;
                confSortOrder.SortingNumber   = sortNumber;
                ril.add(confSortOrder);

                sortNumber++;
                fieldIt.next();
            }
            tableIt.next();
        }

        ril.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSum</Name>
				<Source><![CDATA[
    private void saveSum()
    {
        ConfSummation_BR    confSummation;
        MapIterator         fieldIt;
        RecordInsertList    ril;
        container           savedFields;
        SysQueryItem        queryItem;
        MapIterator         tableIt;
        identifiername      tableName;

        delete_from confSummation where confSummation.ConfGroupId == confGroupId;

        ril     = new RecordInsertList(tablenum(ConfSummation_BR));
        tableIt = new MapIterator(sumSelectedMap);
        tableIt.begin();
        while (tableIt.more())
        {
            savedFields = connull();
            tableName   = tableid2name(tableIt.key());
            fieldIt     = new MapIterator(tableIt.value());
            fieldIt.begin();
            while (fieldIt.more())
            {
                queryItem = fieldIt.value();

                if (queryItem && !confind(savedFields, queryItem.parmFieldId()))
                {
                    confSummation.clear();
                    confSummation.initValue();
                    confSummation.ConfGroupId  = confGroupId;
                    confSummation.TableName    = tableName;
                    confSummation.FieldName    = fieldid2name(tableIt.key(), queryItem.parmFieldId());

                    if (queryItem.parmData())
                    {
                        [confSummation.AverageSelected, confSummation.CountSelected, confSummation.SumSelected] = queryItem.parmData();
                        if (confSummation.AverageSelected || confSummation.CountSelected || confSummation.SumSelected)
                        {
                            ril.add(confSummation);
                            savedFields = conins(savedFields, 1, queryItem.parmFieldId());
                        }
                    }
                }
                fieldIt.next();
            }
            tableIt.next();
        }

        ril.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTableAndRelation</Name>
				<Source><![CDATA[
    private void saveTableAndRelation()
    {
        ConfRelations_BR        confRelations;
        ConfTableSelection_BR   confTableSelection;
        int                     childNo;
        int                     dsNo;
        Query                   query;
        RecordInsertList        confRelationsRil;
        RecordInsertList        confTableSelectionRil;

        delete_from confRelations      where confRelations.ConfGroupId      == confGroupId;
        delete_from confTableSelection where confTableSelection.ConfGroupId == confGroupId;

        query = this.reportGenerateQuery();

        confRelationsRil        = new RecordInsertList(tablenum(ConfRelations_BR));
        confTableSelectionRil   = new RecordInsertList(tablenum(ConfTableSelection_BR));

        dsNo = 0;
        for (childNo = 1; childNo <= query.childDataSourceCount(); childNo++)
        {
            dsNo = this.saveTableAndRelationDS(query.childDataSourceNo(childNo), 0, dsNo, confRelationsRil, confTableSelectionRil);
        }

        confRelationsRil.insertDatabase();
        confTableSelectionRil.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTableAndRelationDS</Name>
				<Source><![CDATA[
    private int saveTableAndRelationDS(QueryBuildDataSource _qbds, tableId _parent, int _dsNo, RecordInsertList _confRelationsRil, RecordInsertList _confTableSelectionRil)
    {
        int                     childNo;
        ConfTableSelection_BR   confTableSelection;

        _dsNo++;

        confTableSelection.clear();
        confTableSelection.initValue();
        confTableSelection.ConfGroupId      = confGroupId;
        confTableSelection.DataSourceNumber = _dsNo;
        confTableSelection.TableName        = tableid2name(_qbds.table());

        if (_parent)
        {
            confTableSelection.RelatedTo    = tableid2name(_parent);
            confTableSelection.SysRelation  = false;
            this.saveRelations(_parent, _qbds.table(), _confRelationsRil);
        }
        else
        {
            confTableSelection.SysRelation = true;
        }

        _confTableSelectionRil.add(confTableSelection);

        for (childNo = 1; childNo <= _qbds.childDataSourceCount(); childNo++)
        {
            _dsNo = this.saveTableAndRelationDS(_qbds.childDataSourceNo(childNo), _qbds.table(), _dsNo, _confRelationsRil, _confTableSelectionRil);
        }

        return _dsNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFirstChild</Name>
				<Source><![CDATA[
    private void selectFirstChild(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx = _formTreeControl.getRoot())
    {
        _formTreeControl.select(_treeItemIdx);
        _formTreeControl.select(this.findFirstChild(_formTreeControl, _treeItemIdx));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up options to enable or disable Next, Previous, Finish buttons.
    /// </summary>
    public void setupNavigation()
    {
        nextEnabled[#Welcome  ] = true;      backEnabled[#Welcome  ] = false;
        nextEnabled[#Tables   ] = false;     backEnabled[#Tables   ] = true;
        nextEnabled[#Fields   ] = true;      backEnabled[#Fields   ] = true;
        nextEnabled[#SumSetup ] = true;      backEnabled[#SumSetup ] = true;
        nextEnabled[#Sorting  ] = true;      backEnabled[#Sorting  ] = true;
        nextEnabled[#Ranges   ] = true;      backEnabled[#Ranges   ] = true;
        nextEnabled[#Complete ] = false;     backEnabled[#Complete ] = true;

        finishEnabled[#Welcome  ] = false;
        finishEnabled[#Tables   ] = false;
        finishEnabled[#Fields   ] = false;
        finishEnabled[#SumSetup ] = true;
        finishEnabled[#Sorting  ] = true;
        finishEnabled[#Ranges   ] = true;
        finishEnabled[#Complete ] = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sort options.
    /// </summary>
    /// <param name="_sortOrder">
    /// Specifies if the sort order is ascending or descending.
    /// </param>
    /// <param name="_add">
    /// Specifies if the sort option has to be added to the map.
    /// </param>
    public void sortAdd(SortOrder _sortOrder = SortOrder::Ascending, boolean _add = true)
    {
        sortSelectedMap = this.sortRangeAdd(formRun.getSortAllTree(), formRun.getSortSelectedTree(), sortSelectedMap, false, sortNo, _sortOrder, _add);
        sortNo          = key;
        formRun.enableSortDeleteAll(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortAutoSelect</Name>
				<Source><![CDATA[
    private void sortAutoSelect()
    {
        FormTreeControl sortAllTree         = formRun.getSortAllTree();
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        SysDictTable    dictTable;
        DictIndex       dictIndex;
        SysDictField    sysDictField;
        SysDictField    arrayField;
        SysQueryItem    tableData;
        indexId         indexId;
        int             numberOfFields;
        int             i, j;

        this.autoSelect(formRun.getSortAllTree(), #selSort);

        if (!this.validateNext(sortSelectedMap)
            && this.autoSelectValidate(#sorting))
        {
            tableIterator.begin();
            while (tableIterator.more())
            {
                tableData   = tableIterator.value();
                dictTable   = new SysDictTable(tableData.parmTableId());

                if (dictTable.indexCnt())
                {
                    if (dictTable.primaryIndex())
                    {
                        indexId = dictTable.primaryIndex();
                    }
                    else
                    {
                        indexId = dictTable.indexNext(0);
                    }

                    if (indexId)
                    {
                        dictIndex = dictTable.indexObject(indexId);
                        if (dictIndex.numberOfFields())
                        {
                            numberOfFields = dictIndex.numberOfFields();
                            for (i = 1; i <= numberOfFields; i++)
                            {
                                sysDictField = new SysDictField(dictTable.id(),  dictIndex.field(i));
                                for (j = 1; j <= sysDictField.arraySize(); j++)
                                {
                                    arrayField = new SysDictField(dictTable.id(), sysDictField.id(), j);

                                    if (arrayField.saveContents()
                                        && arrayField.visible()
                                        && !isType(arrayField.typeId(), extendedTypeNum(recId)))
                                    {
                                        sortAllTree.select(this.fieldFindIdx(sortAllTree, dictTable.id(), arrayField.extendedFieldId(), sortAllTree.getRoot()));
                                        this.sortAdd();
                                    }
                                }
                            }
                        }
                    }
                }
                tableIterator.next();
            }

            this.selectFirstChild(sortAllTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortBuildSortOrder</Name>
				<Source><![CDATA[
    private void sortBuildSortOrder(FormTreeControl _toTree, TreeItemIdx _treeItemIdx, SortOrder _sortOrder)
    {
        SysQueryItem sysQueryItem;

        this.changeImage(_toTree, _treeItemIdx, this.sortFindSortImage(_sortOrder));

        sysQueryItem = new SysQueryItem();
        sysQueryItem.parmLock(true);
        sysQueryItem.parmData([SortOrder::Ascending]);
        SysFormTreeControl::addTreeItem(_toTree, "@SYS67997", _treeItemIdx, sysQueryItem, this.sortFindSortImage(SortOrder::Ascending), false, this.findTreeRadioImage(_sortOrder == SortOrder::Ascending));

        sysQueryItem = new SysQueryItem();
        sysQueryItem.parmLock(true);
        sysQueryItem.parmData([SortOrder::Descending]);
        SysFormTreeControl::addTreeItem(_toTree, "@SYS67998", _treeItemIdx, sysQueryItem, this.sortFindSortImage(SortOrder::Descending), false, this.findTreeRadioImage(_sortOrder == SortOrder::Descending));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortChangeSortDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the sort direction
    /// </summary>
    /// <param name="_x">
    /// The value of the x axis
    /// </param>
    /// <param name="_y">
    /// The value of the y axis
    /// </param>
    /// <returns>
    /// true if was sorted; otherwise, false
    /// </returns>
    public boolean sortChangeSortDirection(int _x, int _y)
    {
        FormTreeControl sortSelectedTree   = formRun.getSortSelectedTree();
        FormTreeItem    formTreeItem;
        TreeItemIdx     treeItemIdx;
        TreeItemIdx     parentItemIdx;
        SysQueryItem    sysQueryItem;
        Map             sortMap;
        int             focus;
        SortOrder       sortOrder;

        [treeItemIdx, focus] = sortSelectedTree.hitTest(_x, _y);

        if (focus & #FTCHT_ONITEMSTATEICON
            && sortSelectedTree.getItem(treeItemIdx))
        {
            formTreeItem    = sortSelectedTree.getItem(treeItemIdx);
            if (formTreeItem.stateImage() != imageListAppl_RadioBtn.image(#imageRadioAll))
            {
                parentItemIdx   = sortSelectedTree.getParent(treeItemIdx);
                formTreeItem    = sortSelectedTree.getItem(parentItemIdx);
                sysQueryItem    = formTreeItem.data();

                [sortOrder]     = sysQueryItem.parmData();
                sortOrder       = (sortOrder == SortOrder::Ascending) ? SortOrder::Descending : SortOrder::Ascending;

                sysQueryItem.parmData([sortOrder]);

                sortMap         = sortSelectedMap.lookup(sysQueryItem.parmTableId());
                sortMap.insert(sysQueryItem.parmSortNo(), sysQueryItem);

                this.changeImage(sortSelectedTree, parentItemIdx, this.sortFindSortImage((sortOrder == SortOrder::Ascending) ? SortOrder::Descending : SortOrder::Ascending));

                treeItemIdx     = sortSelectedTree.getChild(parentItemIdx);
                formTreeItem    = sortSelectedTree.getItem(treeItemIdx);
                formTreeItem.stateImage(this.findTreeRadioImage(sortOrder == SortOrder::Ascending));
                sortSelectedTree.setItem(formTreeItem);

                treeItemIdx     = sortSelectedTree.getNextSibling(treeItemIdx);
                formTreeItem    = sortSelectedTree.getItem(treeItemIdx);
                formTreeItem.stateImage(this.findTreeRadioImage(sortOrder == SortOrder::Descending));
                sortSelectedTree.setItem(formTreeItem);
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes sort options.
    /// </summary>
    /// <param name="_deleteAll">
    /// Specifies if all sort options have to be deleted from the map.
    /// </param>
    public void sortDelete(boolean _deleteAll)
    {
        sortSelectedMap = this.sortRangeDelete(formRun.getSortSelectedTree(), formRun.getSortAllTree(), sortSelectedMap, false, _deleteAll);
        formRun.enableSortDeleteAll(this.validateNext(sortSelectedMap));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortFindSortImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the image depending on whether it's ascending or descending.
    /// </summary>
    /// <param name="_sortOrder">
    /// Specifies if it's ascending or descending.
    /// </param>
    /// <returns>
    /// The image to be used.
    /// </returns>
    ImageRes sortFindSortImage(SortOrder _sortOrder)
    {
        if (_sortOrder == SortOrder::Ascending)
        {
            return imageListAppl_Report.image(#ImageQuerySortingAscending);
        }
        else
        {
            return imageListAppl_Report.image(#ImageQuerySortingDescending);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMoveItemVertical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the item vertically
    /// </summary>
    /// <param name="_upDown">
    /// True to move up and false to move down
    /// </param>
    public void sortMoveItemVertical(boolean _upDown)
    {
        sortSelectedMap = this.moveItemVertical(formRun.getSortSelectedTree(), _upDown);
        sortNo          = key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRangeAdd</Name>
				<Source><![CDATA[
    private Map sortRangeAdd(FormTreeControl _fromTree, FormTreeControl _toTree, Map _map, boolean _sortRange, int _keyValue, SortOrder _sortOrder = SortOrder::Ascending, boolean _add = true)
    {
        TreeItemIdx     treeItemIdx      = _fromTree.getFirstSelected();
        TreeItemIdx     newParentIdx;
        FormTreeItem    formTreeItem;
        SysQueryItem    sysQueryItem;
        Map             fieldMap;
        tableId         tableId;
        Set             set;
        SetIterator     setIterator;

        key = _keyValue;
        if (treeItemIdx)
        {
            formTreeItem    = _fromTree.getItem(treeItemIdx);
            sysQueryItem    = formTreeItem.data();

            if (!sysQueryItem.parmLock())
            {
                tableId         = sysQueryItem.parmTableId();
                newParentIdx    = this.fieldFindIdx(_toTree, tableId, 0, _toTree.getRoot(), 0, false, true);

                if (!_map.exists(tableId))
                {
                    _map.insert(tableId, new Map(Types::Integer, Types::Class));
                }
                fieldMap = _map.lookup(tableId);

                if (!sysQueryItem.parmData())
                {
                    sysQueryItem.parmData([_sortOrder]);
                }

                if (_add)
                {
                    key++;
                    sysQueryItem.parmSortNo(key);
                    sysQueryItem.parmImageRes(formTreeItem.image());
                    fieldMap.insert(key, sysQueryItem);
                }

                set = SysFormTreeControl::moveTreeItem(_fromTree, null, _toTree, newParentIdx);

                setIterator = new SetIterator(set);
                setIterator.begin();
                if (setIterator.more())
                {
                    treeItemIdx = setIterator.value();
                }

                if (_sortRange)
                {
                    this.changeImage(_toTree, treeItemIdx, imageListAppl_Report.image(#imageQueryRange));
                }
                else
                {
                    this.sortBuildSortOrder(_toTree, treeItemIdx, _sortOrder);
                }

                SysFormTreeControl::expandTree(_toTree, _toTree.getRoot());

                _toTree.select(treeItemIdx);
                this.selectFirstChild(_fromTree, this.tableFindIdx(_fromTree, tableId, _fromTree.getRoot(), true));
            }
        }

        return _map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRangeBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts the fields and adds ranges to the fields.
    /// </summary>
    protected void sortRangeBuild()
    {
        this.sortRangeBuildAllTree(formRun.getSortAllTree(), sortSelectedMap);
        this.sortRangeBuildAllTree(formRun.getRangeAllTree(), rangeSelectedMap);

        sortSelectedMap  = this.sortRangeBuildSelectedTree(formRun.getSortAllTree(), formRun.getSortSelectedTree(), sortSelectedMap, false, sortNo);
        sortNo           = key;
        rangeSelectedMap = this.sortRangeBuildSelectedTree(formRun.getRangeAllTree(), formRun.getRangeSelectedTree(), rangeSelectedMap, true, rangeNo);
        rangeNo          = key;

        this.sortAutoSelect();
        this.rangeAutoSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRangeBuildAllTree</Name>
				<Source><![CDATA[
    private void sortRangeBuildAllTree(FormTreeControl _formTreeControl, Map _map)
    {
        SysQueryItem    sysQueryItem;
        SysQueryItem    tableData;
        MapIterator     tableIterator = new MapIterator(tableSelectedMap);
        tableId         tableId;
        TreeItemIdx     parentIdx;
        TreeItemIdx
        rootIdx         = 0;

        _formTreeControl.deleteAll();
        this.deleteDeselectedItem(this.findSelectedTable(), _map);

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            sysQueryItem = new SysQueryItem();
            sysQueryItem.parmLock(true);
            sysQueryItem.parmTableId(tableId);

            parentIdx = SysFormTreeControl::addTreeItem(_formTreeControl, this.tableLabel(tableId), rootIdx, sysQueryItem, imageListAppl_Report.image(#ImageTable), true);

            if (!_map.exists(tableId))
            {
                _map.insert(tableId, new Map(Types::Integer, Types::Class));
            }

            if (showSysName)
            {
                while select allFields
                    order by Table_Id, Tablelabel
                    where allFields.Table_Id == tableId
                       && allFields.Field_Id >  0
                       && !allFields.SortingNo
                {
                    this.fieldBuildField(_formTreeControl, tableId, allFields.Field_Id, allFields.TableLabel, parentIdx);
                }
            }
            else
            {
                while select allFields
                    order by Table_Id, FieldLabel
                    where allFields.Table_Id == tableId
                       && allFields.Field_Id >  0
                       && !allFields.SortingNo
                {
                    this.fieldBuildField(_formTreeControl, tableId, allFields.Field_Id, allFields.FieldLabel, parentIdx);
                }
            }
            tableIterator.next();
        }

        SysFormTreeControl::expandTree(_formTreeControl, _formTreeControl.getRoot());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRangeBuildSelectedTree</Name>
				<Source><![CDATA[
    private Map sortRangeBuildSelectedTree(FormTreeControl _fromTree, FormTreeControl _toTree, Map _map, boolean _sortRange, int _keyValue)
    {
        SysQueryItem    sysQueryItem;
        SysQueryItem    tableData;
        MapIterator     sortIterator;
        MapIterator     tableIterator   = new MapIterator(tableSelectedMap);
        tableId         tableId;
        TreeItemIdx     treeItemIdx;
        TreeItemIdx     rootIdx         = 0;
        SortOrder       sortOrder;

        _toTree.deleteAll();
        key = _keyValue;

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            sysQueryItem = new SysQueryItem();
            sysQueryItem.parmLock(true);
            sysQueryItem.parmTableId(tableId);

            SysFormTreeControl::addTreeItem(_toTree, this.tableLabel(tableId), rootIdx, sysQueryItem, imageListAppl_Report.image(#ImageTable), true);

            sortIterator    = new MapIterator(_map.lookup(tableId));
            sortIterator.begin();
            while (sortIterator.more())
            {
                sysQueryItem = sortIterator.value();

                if (!_sortRange)
                {
                    [sortOrder] = sysQueryItem.parmData();
                }
                treeItemIdx     = this.fieldFindIdx(_fromTree, tableId, sysQueryItem.parmFieldId(), _fromTree.getRoot(), 0, false, false);

                if (treeItemIdx)
                {
                    _fromTree.select(treeItemIdx);
                    _map = this.sortRangeAdd(_fromTree, _toTree, _map, _sortRange, key, sortOrder, false);
                }

                sortIterator.next();
            }

            tableIterator.next();
        }

        SysFormTreeControl::expandTree(_toTree, _toTree.getRoot());
        this.selectFirstChild(_fromTree);
        this.selectFirstChild(_toTree);

        return _map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRangeDelete</Name>
				<Source><![CDATA[
    private Map sortRangeDelete(FormTreeControl _fromTree, FormTreeControl _toTree, Map _map, boolean _sortRange, boolean _deleteAll)
    {
        TreeItemIdx     treeItemIdx      = _fromTree.getFirstSelected();
        TreeItemIdx     newParentIdx;
        TreeItemIdx     newItemIdx;
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;
        tableId         tableId;
        Map             fieldMap;
        Set             set;
        SetIterator     setIterator;

        if (_deleteAll)
        {
            _map = new Map(Types::Integer, Types::Class);
            this.sortRangeBuildAllTree(_toTree, _map);
            _map = this.sortRangeBuildSelectedTree(_toTree, _fromTree, _map, 0, _sortRange);

            if (_sortRange)
            {
                rangeNo = key;
            }
            else
            {
                sortNo = key;
            }
        }
        else
        {
            if (treeItemIdx)
            {
                formTreeItem    = _fromTree.getItem(treeItemIdx);
                sysQueryItem    = formTreeItem.data();

                if (!sysQueryItem.parmLock())
                {
                    tableId         = sysQueryItem.parmTableId();
                    newParentIdx    = this.fieldFindIdx(_toTree, tableId, 0, _toTree.getRoot(), 0, false, true);

                    set = SysFormTreeControl::moveTreeItem(_fromTree, null, _toTree, newParentIdx);

                    setIterator = new SetIterator(set);
                    setIterator.begin();
                    while (setIterator.more())
                    {
                        treeItemIdx = setIterator.value();

                        if (_toTree.getParent(treeItemIdx) == newParentIdx)
                        {
                            newItemIdx = treeItemIdx;
                            this.changeImage(_toTree, treeItemIdx, this.fieldImage(tableId, sysQueryItem.parmFieldId()));
                        }
                        else
                        {
                            _toTree.delete(treeItemIdx);
                        }
                        setIterator.next();
                    }

                    fieldMap = _map.lookup(tableId);
                    _map = this.sortSelected(_fromTree);

                    if (fieldMap.exists(sysQueryItem.parmSortNo()))
                    {
                        fieldMap.remove(sysQueryItem.parmSortNo());
                    }

                    SysFormTreeControl::expandTree(_toTree, _toTree.getRoot());
                    _toTree.select(newItemIdx);
                }
            }
        }

        return _map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortSelected</Name>
				<Source><![CDATA[
    private Map sortSelected(FormTreeControl _formTreeControl, boolean _isTableMap = false)
    {
        MapIterator     tableIterator = new MapIterator(tableSelectedMap);
        SysQueryItem    tableData;
        tableId         tableId;
        TreeItemIdx     treeItemIdx;
        Map             map           = new Map(Types::Integer, Types::Class);
        Map             tmpMap        = new Map(Types::Integer, Types::Class);

        key = 0;
        if (tableIterator)
        {
            tableIterator.begin();
            while (tableIterator.more())
            {
                tableData   = tableIterator.value();
                if (tableData)
                {
                    tableId     = tableData.parmTableId();

                    treeItemIdx = this.tableFindIdx(_formTreeControl, tableId, _formTreeControl.getRoot(), !_isTableMap);
                    if (treeItemIdx)
                    {
                        tmpMap  = this.sortSelectedOrder(_formTreeControl, treeItemIdx);
                        map.insert(tableId, tmpMap);
                    }

                    tableIterator.next();
                }
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortSelectedOrder</Name>
				<Source><![CDATA[
    private Map sortSelectedOrder(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx, boolean _nextSibling = false, Map _map = new Map(Types::Integer, Types::Class))
    {
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;

        while (_treeItemIdx)
        {
            formTreeItem    = _formTreeControl.getItem(_treeItemIdx);
            sysQueryItem    = formTreeItem.data();

            if (!sysQueryItem.parmLock())
            {
                key++;
                sysQueryItem.parmSortNo(key);
                _map.insert(key, sysQueryItem);
            }

            if (_formTreeControl.getChild(formTreeItem.idx()))
            {
                _map = this.sortSelectedOrder(_formTreeControl, _formTreeControl.getChild(formTreeItem.idx()), true, _map);
            }

            if (_nextSibling)
            {
                _treeItemIdx = _formTreeControl.getNextSibling(formTreeItem.idx());
            }
            else
            {
                break;
            }
        }

        return _map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>spaceDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the space bar key pressed.
    /// </summary>
    /// <param name="_vKey">
    /// The key pressed.
    /// </param>
    /// <returns>
    /// true if space bar key is pressed; false otherwise.
    /// </returns>
    public boolean spaceDown(int _vKey)
    {
        #KeyPressed

        return (_vKey == #space);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selected summation option.
    /// </summary>
    /// <param name="_sumAverage">
    /// Summation option Average.
    /// </param>
    /// <param name="_sumCount">
    /// Summation option Count.
    /// </param>
    /// <param name="_sumTotal">
    /// Summation option Total.
    /// </param>
    public void sumAdd(boolean _sumAverage = true, boolean _sumCount = false, boolean _sumTotal = false)
    {
        FormTreeControl sumSelectedTree = formRun.getSumSelectedTree();
        FormTreeControl sumAllTree      = formRun.getsumAllTree();
        TreeItemIdx     treeItemIdx     = sumAllTree.getFirstSelected();
        TreeItemIdx     newParentIdx;
        FormTreeItem    formTreeItem;
        SysQueryItem    sysQueryItem;
        Map             fieldMap;
        tableId         tableId;
        Set             set;
        SetIterator     setIterator;

        if (treeItemIdx)
        {
            formTreeItem    = sumAllTree.getItem(treeItemIdx);
            sysQueryItem    = formTreeItem.data();

            if (!sysQueryItem.parmLock())
            {
                formRun.enableSumDeleteAll(true);

                tableId         = sysQueryItem.parmTableId();
                newParentIdx    = this.fieldFindIdx(sumSelectedTree, tableId, 0, sumSelectedTree.getRoot(), 0, false, true);

                if (!sumSelectedMap.exists(tableId))
                {
                    sumSelectedMap.insert(tableId, new Map(Types::Integer, Types::Class));
                }
                fieldMap = sumSelectedMap.lookup(tableId);

                if (!sysQueryItem.parmData())
                {
                    sysQueryItem.parmData([_sumAverage, _sumCount, _sumTotal]);
                }
                fieldMap.insert(sysQueryItem.parmFieldId(), sysQueryItem);

                set = SysFormTreeControl::moveTreeItem(sumAllTree, null, sumSelectedTree, newParentIdx);

                setIterator = new SetIterator(set);
                setIterator.begin();
                while (setIterator.more())
                {
                    treeItemIdx = setIterator.value();

                    if (newParentIdx == sumSelectedTree.getParent(treeItemIdx))
                    {
                        break;
                    }
                    setIterator.next();
                }

                this.sumBuildSum(sumSelectedTree, treeItemIdx, _sumAverage, _sumCount, _sumTotal);

                SysFormTreeControl::expandTree(sumSelectedTree, sumSelectedTree.getRoot(), 1);
                SysFormTreeControl::expandTree(sumSelectedTree, newParentIdx, 1);
                SysFormTreeControl::expandTree(sumSelectedTree, treeItemIdx, 1);

                sumSelectedTree.select(treeItemIdx);
                this.selectFirstChild(sumAllTree);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAddType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums the added type
    /// </summary>
    /// <param name="_x">
    /// The value of the x axis
    /// </param>
    /// <param name="_y">
    /// The value of the y axis
    /// </param>
    /// <returns>
    /// true if the type was sum; otherwise, false
    /// </returns>
    public boolean sumAddType(int _x, int _y)
    {
        FormTreeControl sumSelectedTree   = formRun.getSumSelectedTree();
        FormTreeItem    formTreeItem;
        FormTreeItem    parentItem;
        TreeItemIdx     parentIdx;
        TreeItemIdx     treeItemIdx;
        SysQueryItem    sysQueryItem;
        SysQueryItem    parentItemData;
        int             sumType;
        boolean         sumChange;
        container       sumTypes;
        Map             fieldMap;
        int             focus;

        [treeItemIdx, focus] = sumSelectedTree.hitTest(_x, _y);

        if (focus & #FTCHT_ONITEMSTATEICON
            && sumSelectedTree.getItem(treeItemIdx))
        {
            formTreeItem    = sumSelectedTree.getItem(treeItemIdx);
            parentIdx       = sumSelectedTree.getParent(formTreeItem.idx());

            if (parentIdx)
            {
                sysQueryItem            = formTreeItem.data();
                [sumType, sumChange]    = sysQueryItem.parmData();
                sumChange               = !sumChange;

                sysQueryItem.parmData([sumType, sumChange]);

                parentItem      = sumSelectedTree.getItem(parentIdx);
                parentItemData  = parentItem.data();
                sumTypes        = parentItemData.parmData();

                sumTypes        = conpoke(sumTypes, sumType, sumChange);

                parentItemData.parmData(sumTypes);

                formTreeItem.stateImage(this.findTreeStateImage(sumChange));
                sumSelectedTree.setItem(formTreeItem);

                fieldMap = sumSelectedMap.lookup(parentItemData.parmTableId());
                fieldMap.insert(parentItemData.parmSortNo(), parentItemData);
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAutoSelect</Name>
				<Source><![CDATA[
    private void sumAutoSelect()
    {
        FormTreeControl sumAllTree          = formRun.getSumAllTree();
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        SysQueryItem    tableData;
        Set             autoSelectSet;
        SetIterator     autoSelectIterator;
        TreeItemIdx     treeItemIdx;

        this.autoSelect(formRun.getSumAllTree(), #selSum);

        if (!this.validateNext(sumSelectedMap)
            && this.autoSelectValidate(#sumSetup))
        {
            tableIterator.begin();
            while (tableIterator.more())
            {
                tableData   = tableIterator.value();
                treeItemIdx = this.tableFindIdx(sumAllTree, tableData.parmTableId(), sumAllTree.getRoot());

                if (treeItemIdx)
                {
                    autoSelectSet       = this.sumFindAmount(sumAllTree, treeItemIdx);
                    autoSelectIterator  = new SetIterator(autoSelectSet);
                    while (autoSelectIterator.more())
                    {
                        sumAllTree.select(autoSelectIterator.value());
                        this.sumAdd();
                        autoSelectIterator.next();
                    }
                }

                tableIterator.next();
            }

            this.selectFirstChild(sumAllTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums up the selected field.
    /// </summary>
    protected void sumBuild()
    {
        Map map;

        this.sumFillList();
        map = this.sumBuildAllTree();

        if (this.validateContents(map))
        {
            skipTab[#SumSetup] = false;
            this.sumBuildSelectedTree(map);
            this.sumAutoSelect();
        }
        else
        {
            skipTab[#SumSetup] = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBuildAllTree</Name>
				<Source><![CDATA[
    private Map sumBuildAllTree()
    {
        FormTreeControl sumAllTree          = formRun.getSumAllTree();
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        MapIterator     fieldIterator;
        MapIterator     fieldGroupIterator;
        Set             sumFieldSet;
        Set             sumAllSet;
        Map             fieldGroupMap;
        Map             sumAllfieldsMap     = new Map(Types::Integer, Types::Class);
        tableId         tableId;
        SysQueryItem    tableData;
        SysQueryItem    fieldData;
        SysQueryItem    sysQueryItem;
        TreeItemIdx     rootIdx             = 0;
        TreeItemIdx     parentIdx;

        sumAllTree.deleteAll();
        this.deleteDeselectedItem(this.findSelectedTable(), sumSelectedMap);

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            sumAllSet       = new Set(Types::Integer);
            sumFieldSet     = tableSumMap.lookup(tableId);

            sysQueryItem = new SysQueryItem();
            sysQueryItem.parmLock(true);
            sysQueryItem.parmTableId(tableId);

            parentIdx = SysFormTreeControl::addTreeItem(sumAllTree, this.tableLabel(tableId), rootIdx, sysQueryItem, imageListAppl_Report.image(#ImageReportSection), true);

            if (sumFieldSet
                && fieldSelectedMap.exists(tableId))
            {
                fieldIterator = new MapIterator(fieldSelectedMap.lookup(tableId));
                fieldIterator.begin();

                while (fieldIterator.more())
                {
                    fieldData     = fieldIterator.value();

                    if (fieldData.parmFieldGroup())
                    {
                        fieldGroupMap = tableFieldGroupMap.lookup(tableId);

                        fieldGroupIterator = new MapIterator(fieldGroupMap.lookup(fieldData.parmFieldGroupId()));
                        fieldGroupIterator.begin();

                        while (fieldGroupIterator.more())
                        {
                            if (sumFieldSet.in(fieldGroupIterator.value())
                                && !sumAllSet.in(fieldGroupIterator.value()))
                            {
                                sumAllSet.add(fieldGroupIterator.value());
                                this.fieldBuildField(sumAllTree, tableId, fieldGroupIterator.value(), this.fieldLabel(tableId, fieldGroupIterator.value()), parentIdx);
                            }
                            fieldGroupIterator.next();
                        }
                    }
                    else
                    {
                        if (sumFieldSet.in(fieldData.parmFieldId())
                            && !sumAllSet.in(fieldData.parmFieldId()))
                        {
                            sumAllSet.add(fieldData.parmFieldId());
                            this.fieldBuildField(sumAllTree, tableId, fieldData.parmFieldId(), this.fieldLabel(tableId, fieldData.parmFieldId()), parentIdx);
                        }
                    }

                    fieldIterator.next();
                }
            }

            sumAllfieldsMap.insert(tableId, sumAllSet);
            tableIterator.next();
        }

        SysFormTreeControl::expandTree(sumAllTree, sumAllTree.getRoot());
        this.selectFirstChild(sumAllTree);

        return sumAllfieldsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBuildSelectedTree</Name>
				<Source><![CDATA[
    private void sumBuildSelectedTree(Map _sumAllFieldMap)
    {
        FormTreeControl sumSelectedTree     = formRun.getSumSelectedTree();
        FormTreeControl sumAllTree          = formRun.getSumAllTree();
        SysQueryItem    sysQueryItem;
        SysQueryItem    fieldData;
        SysQueryItem    tableData;
        MapIterator     fieldIterator;
        MapIterator     fieldGroupIterator;
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        Map             fieldGroupMap;
        Map             sumSelectedFieldMap;
        Set             sumAllSet;
        Set             sumFieldSet;
        tableId         tableId;
        TreeItemIdx     rootIdx             = 0;
        TreeItemIdx     treeItemIdx;
        boolean         sumAverage;
        boolean         sumCount;
        boolean         sumTotal;

        sumSelectedTree.deleteAll();

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData           = tableIterator.value();
            tableId             = tableData.parmTableId();
            sumAllSet           = _sumAllFieldMap.lookup(tableId);
            sumFieldSet         = tableSumMap.lookup(tableId);

            if (!sumAllSet)
            {
                sumAllSet = new Set(Types::Integer);
            }

            if (!sumSelectedMap.exists(tableId))
            {
                sumSelectedMap.insert(tableId, new Map(Types::Integer, Types::Class));
            }
            sumSelectedFieldMap = sumSelectedMap.lookup(tableId);

            sysQueryItem = new SysQueryItem();
            sysQueryItem.parmLock(true);
            sysQueryItem.parmTableId(tableId);

            SysFormTreeControl::addTreeItem(sumSelectedTree, this.tableLabel(tableId), rootIdx, sysQueryItem, imageListAppl_Report.image(#ImageReportSection), false);

            if (sumSelectedFieldMap
                && sumFieldSet
                && fieldSelectedMap.exists(tableId))
            {
                fieldIterator = new MapIterator(fieldSelectedMap.lookup(tableId));
                fieldIterator.begin();

                while (fieldIterator.more())
                {
                    fieldData       = fieldIterator.value();

                    // FieldGroup
                    if (fieldData.parmFieldGroup())
                    {
                        fieldGroupMap       = tableFieldGroupMap.lookup(tableId);

                        fieldGroupIterator  = new MapIterator(fieldGroupMap.lookup(fieldData.parmFieldGroupId()));
                        fieldGroupIterator.begin();
                        while (fieldGroupIterator.more())
                        {
                            if (sumSelectedFieldMap.exists(fieldGroupIterator.value())
                                && sumFieldSet.in(fieldGroupIterator.value())
                                && sumAllSet.in(fieldGroupIterator.value()))
                            {
                                treeItemIdx = this.fieldFindIdx(sumAllTree, tableId, fieldGroupIterator.value(), sumAllTree.getRoot(), 0, false, false);
                                if (treeItemIdx)
                                {
                                    sumAllSet.remove(fieldGroupIterator.value());
                                    fieldData                           = sumSelectedFieldMap.lookup(fieldGroupIterator.value());
                                    [sumAverage, sumCount, sumTotal]    = fieldData.parmData();
                                    sumAllTree.select(treeItemIdx);
                                    this.sumAdd(sumAverage, sumCount, sumTotal);
                                }
                            }
                            fieldGroupIterator.next();
                        }
                    }
                    // Fields
                    else
                    {
                        if (sumSelectedFieldMap.exists(fieldData.parmFieldId()) &&
                            sumFieldSet.in(fieldData.parmFieldId()) &&
                            sumAllSet.in(fieldData.parmFieldId()))
                        {
                            treeItemIdx = this.fieldFindIdx(sumAllTree, tableId, fieldData.parmFieldId(), sumAllTree.getRoot(), 0, false, false);
                            if (treeItemIdx)
                            {
                                sumAllSet.remove(fieldData.parmFieldId());
                                fieldData                = sumSelectedFieldMap.lookup(fieldData.parmFieldId());
                                [sumAverage, sumCount, sumTotal] = fieldData.parmData();
                                sumAllTree.select(treeItemIdx);
                                this.sumAdd(sumAverage, sumCount, sumTotal);
                            }
                        }
                    }

                    fieldIterator.next();
                }
            }

            tableIterator.next();
        }

        SysFormTreeControl::expandTree(sumSelectedTree, sumSelectedTree.getRoot());
        SysFormTreeControl::expandTree(sumAllTree, sumAllTree.getRoot());
        this.selectFirstChild(sumSelectedTree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBuildSum</Name>
				<Source><![CDATA[
    private void sumBuildSum(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx, boolean _sumAverage, boolean _sumCount, boolean _sumTotal)
    {
        ImageRes        imageRes          = imageListAppl_Report.image(#ImageReportSum);
        SysQueryItem    sysQueryItem;

        sysQueryItem = new SysQueryItem();
        sysQueryItem.parmData([#sumAverage, _sumAverage]);
        sysQueryItem.parmLock(true);
        SysFormTreeControl::addTreeItem(_formTreeControl, "@GLS2048", _treeItemIdx, sysQueryItem, imageRes, false, this.findTreeStateImage(_sumAverage));

        sysQueryItem = new SysQueryItem();
        sysQueryItem.parmLock(true);
        sysQueryItem.parmData([#sumCount, _sumCount]);
        SysFormTreeControl::addTreeItem(_formTreeControl, "@GLS2049", _treeItemIdx, sysQueryItem, imageRes, false, this.findTreeStateImage(_sumCount));

        sysQueryItem = new SysQueryItem();
        sysQueryItem.parmLock(true);
        sysQueryItem.parmData([#sumTotal, _sumTotal]);
        SysFormTreeControl::addTreeItem(_formTreeControl, "@GLS2050", _treeItemIdx, sysQueryItem, imageRes, false, this.findTreeStateImage(_sumTotal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes summation options.
    /// </summary>
    /// <param name="_deleteAll">
    /// Specifies if all summation options have to be deleted from the map.
    /// </param>
    public void sumDelete(boolean _deleteAll)
    {
        FormTreeControl sumSelectedTree   = formRun.getSumSelectedTree();
        FormTreeControl sumAllTree        = formRun.getSumAllTree();
        TreeItemIdx     treeItemIdx       = sumSelectedTree.getFirstSelected();
        TreeItemIdx     newParentIdx;
        TreeItemIdx     newItemIdx;
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;
        tableId         tableId;
        Map             fieldMap;
        Map             map;
        Set             set;
        SetIterator     setIterator;

        if (_deleteAll)
        {
            sumSelectedMap = new Map(Types::Integer, Types::Class);
            map = this.sumBuildAllTree();
            this.sumBuildSelectedTree(map);
            formRun.enableSumDeleteAll(false);
        }
        else
        {
            if (treeItemIdx)
            {
                formTreeItem    = sumSelectedTree.getItem(treeItemIdx);
                sysQueryItem    = formTreeItem.data();

                if (!sysQueryItem.parmLock())
                {
                    tableId         = sysQueryItem.parmTableId();
                    newParentIdx    = this.fieldFindIdx(sumAllTree, tableId, 0, sumAllTree.getRoot(), 0, false, true);

                    set = SysFormTreeControl::moveTreeItem(sumSelectedTree, null, sumAllTree, newParentIdx);

                    setIterator = new SetIterator(set);
                    setIterator.begin();
                    while (setIterator.more())
                    {
                        treeItemIdx = setIterator.value();
                        if (newParentIdx == sumAllTree.getParent(treeItemIdx))
                        {
                            newItemIdx = treeItemIdx;
                            sumAllTree.getItem(treeItemIdx).children(false);
                        }
                        else
                        {
                            sumAllTree.delete(treeItemIdx);
                        }
                        setIterator.next();
                    }

                    fieldMap = sumSelectedMap.lookup(tableId);
                    fieldMap.remove(sysQueryItem.parmFieldId());
                    SysFormTreeControl::expandTree(sumAllTree, sumAllTree.getRoot());
                    sumAllTree.select(newItemIdx);
                    formRun.enableSumDeleteAll(this.validateNext(sumSelectedMap));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumFillList</Name>
				<Source><![CDATA[
    private void sumFillList()
    {
        SysQueryItem    tableData;
        tableId         tableId;
        MapIterator     tableIterator = new MapIterator(tableSelectedMap);
        SysDictField    sysDictField;
        Set             sumSet;
        Types           types;

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData   = tableIterator.value();
            tableId     = tableData.parmTableId();

            if (!tableSumMap.exists(tableId))
            {
                sumSet = new Set(Types::Integer);

                while select allFields
                    order by Table_Id, Field_Id
                    where allFields.Table_Id == tableId
                       && !allFields.SortingNo
                {
                    if (allFields.Field_Id > 0)
                    {
                        sysDictField = new SysDictField(allFields.Table_Id, allFields.Field_Id);
                        types        = sysDictField.baseType();

                        if (types == Types::Real ||
                            types == Types::Integer)
                        {
                            sumSet.add(allFields.Field_Id);
                        }
                    }
                }

                tableSumMap.insert(tableId, sumSet);
            }

            tableIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumFindAmount</Name>
				<Source><![CDATA[
    private Set sumFindAmount(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx, Set _set = new Set(Types::Integer))
    {
        SysDictField    sysDictField;
        SysDictMethod   methodInfo;
        SysDictTable    dictTable;
        DictType        dictType;
        extendedTypeId  extendedTypeId;

        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;

        while (_treeItemIdx)
        {
            formTreeItem    = _formTreeControl.getItem(_treeItemIdx);
            sysQueryItem    = formTreeItem.data();

            if (!sysQueryItem.parmLock())
            {
                if (sysQueryItem.parmFieldId() > 0)
                {
                    sysDictField    = new SysDictField(sysQueryItem.parmTableId(), sysQueryItem.parmFieldId());
                    extendedTypeId  = sysDictField.typeId();
                }
                else
                {
                    dictTable       = new SysDictTable(sysQueryItem.parmTableId());
                    methodInfo      = new SysDictMethod(UtilElementType::TableInstanceMethod, dictTable.id(), dictTable.objectMethod(-sysQueryItem.parmFieldId()));
                    extendedTypeId  = methodInfo.returnId();
                }

                dictType = new DictType(extendedTypeId);

                if (dictType
                    &&  isType(extendedTypeId, extendedTypeNum(Amount)))
                {
                    _set.add(_treeItemIdx);
                }
            }

            if (_formTreeControl.getChild(formTreeItem.idx()))
            {
                _set = this.sumFindAmount(_formTreeControl, _formTreeControl.getChild(formTreeItem.idx()));
            }

            _treeItemIdx = _formTreeControl.getNextSibling(formTreeItem.idx());
        }

        return _set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the summation based on ranges, returns true if validation succeeds.
    /// </summary>
    /// <returns>
    /// true if validation success; false otherwise.
    /// </returns>
    protected boolean sumValidate()
    {
        FormTreeControl sumSelectedTree     = formRun.getSumSelectedTree();
        Set             noSumFieldSet;
        Map             noSumMap            = new Map(Types::Integer, Types::Class);
        SetIterator     setIterator;
        MapIterator     tableIterator       = new MapIterator(tableSelectedMap);
        MapIterator     sumIterator;
        SysQueryItem    tableData;
        SysQueryItem    sumData;
        tableId         tableId;
        str             tmpText;
        str             noSumText;
        boolean         sumAverage, sumCount, sumTotal;

        tableIterator.begin();
        while (tableIterator.more())
        {
            tableData           = tableIterator.value();
            tableId             = tableData.parmTableId();

            noSumFieldSet       = new Set(Types::Integer);

            sumIterator       = new MapIterator(sumSelectedMap.lookup(tableId));
            sumIterator.begin();

            while (sumIterator.more())
            {
                sumData                             = sumIterator.value();
                [sumAverage, sumCount, sumTotal]    = sumData.parmData();

                if (    !sumAverage
                    &&  !sumCount
                    &&  !sumTotal)
                {
                    noSumFieldSet.add(sumData.parmFieldId());
                }
                sumIterator.next();
            }

            if (noSumFieldSet.elements())
            {
                if (noSumText)
                {
                    noSumText += #newLine;
                }

                noSumText += this.tableLabel(tableId) + ': ';

                setIterator = new SetIterator(noSumFieldSet);
                setIterator.begin();
                while (setIterator.more())
                {
                    if (tmpText)
                    {
                        tmpText += ', ';
                    }
                    tmpText += this.fieldLabel(tableId, setIterator.value());
                    setIterator.next();
                }
                noSumText += tmpText;
            }
            noSumMap.insert(tableId, noSumFieldSet);
            tableIterator.next();
        }

        if (noSumText)
        {
            noSumText = "@SYS68023" + #newLine + #newLine +
                        noSumText + #newLine + #newLine +
                        "@SYS68024";

            if (Box::okCancel(noSumText, DialogButton::Cancel) == DialogButton::Ok)
            {
                tableIterator.begin();
                while (tableIterator.more())
                {
                    tableData           = tableIterator.value();
                    tableId             = tableData.parmTableId();

                    setIterator       = new SetIterator(noSumMap.lookup(tableId));
                    setIterator.begin();

                    while (setIterator.more())
                    {
                        sumSelectedTree.select(this.fieldFindIdx(sumSelectedTree, tableId, setIterator.value(), sumSelectedTree.getRoot()));
                        this.sumDelete(false);
                        setIterator.next();
                    }
                    tableIterator.next();
                }
                return true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tabChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when the user moves to next tab.
    /// </summary>
    protected void tabChanged()
    {
        FormControl formControl;

        switch (tabIdx)
        {
            case #Welcome:
                formControl = formRun.getShowSysName();
                break;

            case #Tables:
                this.tableAutoSelect();
                break;

            case #Fields:
                formControl = formRun.getFieldAllTree();
                break;

            case #SumSetup:
                formControl = formRun.getSumAllTree();
                break;

            case #Sorting:
                formControl = formRun.getSortAllTree();
                break;

            case #Ranges:
                formControl = formRun.getRangeAllTree();
                break;
        }

        if (formControl)
        {
            formControl.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds table selected to the Selected tables list.
    /// </summary>
    /// <param name="_fromTreeControl">
    /// Source location.
    /// </param>
    /// <param name="_toParentItemIdx">
    /// Destination location.
    /// </param>
    public void tableAdd(FormTreeControl _fromTreeControl, TreeItemIdx _toParentItemIdx = -1)
    {
        FormTreeControl tableSelectedTree   = formRun.getTableSelectedTree();
        FormTreeControl tableAllTree        = formRun.getTableAllTree();
        FormTreeControl tableRelationTree   = formRun.getTableRelationTree();
        SysQueryItem    sysQueryItem;
        SysQueryItem    parentItem;
        TreeItemIdx     treeItemIdx         = _fromTreeControl.getFirstSelected();
        tableId         tableId;
        tableId         relatedTableId;
        FormTreeItem    formTreeItem;

        if (_fromTreeControl.getItem(treeItemIdx))
        {
            if (_fromTreeControl.id() == tableRelationTree.id())
            {
                tableId    = _fromTreeControl.getItem(treeItemIdx).data();

                if (_fromTreeControl.getParent(treeItemIdx))
                {
                    if (_toParentItemIdx < 0)
                    {
                        relatedTableId   = _fromTreeControl.getItem(_fromTreeControl.getParent(treeItemIdx)).data();
                        relatedTableId   = -relatedTableId;
                        _toParentItemIdx = this.tableFindIdx(tableSelectedTree, relatedTableId, tableSelectedTree.getRoot(), false);
                    }

                    if (tableId)
                    {
                        treeItemIdx     = this.tableFindIdx(tableAllTree, tableId, tableAllTree.getRoot(), false, false);
                    }
                }
            }

            if (treeItemIdx)
            {
                tableAllTree.select(treeItemIdx);
                formTreeItem    = tableAllTree.getItem(treeItemIdx);
                tableId         = formTreeItem.data();
                sysQueryItem    = new SysQueryItem();
                sysQueryItem.parmTableId(tableId);

                if (formTreeItem)
                {
                    if (_toParentItemIdx < 0)
                    {
                        return;
                    }

                    if (!this.isNextEnabled())
                    {
                        this.nextEnabled(true, #Tables);
                        formRun.enableTableDeleteAll(true);
                        formRun.enableShowSysName(false);
                    }

                    if (_toParentItemIdx > 0 &&
                        !relatedTableId)
                    {
                        parentItem      = tableSelectedTree.getItem(_toParentItemIdx).data();
                        relatedTableId  = parentItem.parmTableId();
                    }

                    dataSourceNo++;
                    sysQueryItem.parmSortNo(dataSourceNo);
                    sysQueryItem.parmRelatedId(relatedTableId);
                    tableSelectedMap.insert(dataSourceNo, sysQueryItem);

                    formTreeItem.data(sysQueryItem);
                    tableAllTree.setItem(formTreeItem);

                    SysFormTreeControl::copyTreeItem(tableAllTree, null, tableSelectedTree, _toParentItemIdx);
                    this.tableBuildRelationTree();
                    SysFormTreeControl::expandTree(tableSelectedTree, tableSelectedTree.getRoot());

                    tableAllTree.delete(treeItemIdx);
                    tableAllTree.select(tableAllTree.getFirstVisible());

                    treeItemIdx = this.tableFindIdx(tableSelectedTree, tableId, tableSelectedTree.getRoot());
                    tableSelectedTree.select(treeItemIdx);

                    treeItemIdx  = this.tableFindIdx(tableRelationTree, -tableId, tableRelationTree.getRoot(), true, false);

                    if (treeItemIdx)
                    {
                        tableRelationTree.expand(treeItemIdx);
                        treeItemIdx = tableRelationTree.getChild(treeItemIdx);
                        tableRelationTree.select(treeItemIdx);
                    }
                    else
                    {
                        tableRelationTree.select(tableRelationTree.getFirstVisible());
                    }
                }
            }

            _fromTreeControl.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableAutoSelect</Name>
				<Source><![CDATA[
    private void tableAutoSelect()
    {
        int             parentId;
        TreeItemIdx     parentNodeIdx;
        Map             savedData;
        SysQueryItem    sysQueryItem;
        MapIterator     tableIterator;
        FormTreeControl tableTree;
        TreeItemIdx     tableTreeIdx;

        FormTreeControl tableAllTree = formRun.getTableAllTree();
        FormTreeControl tableRelatedTree = formRun.getTableRelationTree();
        FormTreeControl tableSelectedTree = formRun.getTableSelectedTree();

        if (this.hasSavedSelectionData(#selTable))
        {
            savedData = savedSelectionData.lookup(#selTable);
            tableIterator = new MapIterator(savedData);

            tableIterator.begin();
            while (tableIterator.more())
            {
                sysQueryItem = tableIterator.value();
                parentId = sysQueryItem.parmRelatedId();

                if (parentId)
                {
                    tableTree = tableRelatedTree;
                    parentNodeIdx = tableTree.getRoot();
                    while (parentNodeIdx)
                    {
                        if (tableTree.getItem(parentNodeIdx).data() == -parentId)
                        {
                            break;
                        }
                        parentNodeIdx = tableTree.getNextSibling(parentNodeIdx);
                    }
                }
                else
                {
                    tableTree = tableAllTree;
                }

                tableTreeIdx = this.tableFindIdx(   tableTree,
                                                    sysQueryItem.parmTableId(),
                                                    parentNodeIdx ? parentNodeIdx : tableTree.getRoot(),
                                                    true,
                                                    false);

                tableTree.getParent(tableTreeIdx);

                tableTree.select(tableTreeIdx);
                if (parentId)
                {
                    this.tableAdd(tableTree);
                }
                else
                {
                    this.tableAdd(tableTree, tableSelectedTree.getRoot());
                }

                tableIterator.next();
            }

            this.disableSavedSelection(#selTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all tables or related tables which are part of configurator definition group.
    /// </summary>
    protected void tableBuild()
    {
        FormTreeControl     tableSelectedTree   = formRun.getTableSelectedTree();
        FormTreeControl     tableRelationTree   = formRun.getTableRelationTree();
        FormCheckBoxControl formCheckBoxControl = formRun.getShowSysName();

        if (allTablesName.elements())
        {
            if (showSysName != formCheckBoxControl.value())
            {
                showSysName = formCheckBoxControl.value();
                this.tableBuildAllTree();
                this.tableChangeLabel(tableSelectedTree, tableSelectedTree.getRoot(), false);
                this.tableChangeLabel(tableRelationTree, tableRelationTree.getRoot(), true);
            }
        }
        else
        {
            showSysName = formCheckBoxControl.value();
            this.tableFillList();
            this.tableBuildAllTree();
            this.tableReset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableBuildAllTree</Name>
				<Source><![CDATA[
    private void tableBuildAllTree()
    {
        FormTreeControl tableAllTree        = formRun.getTableAllTree();
        MapIterator     mapIterator;

        tableAllTree.deleteAll();

        if (showSysName)
        {
            mapIterator = new MapIterator(allTablesName);
        }
        else
        {
            mapIterator = new MapIterator(allTablesLabel);
        }

        mapIterator.begin();
        while (mapIterator.more())
        {
            SysFormTreeControl::addTreeItem(tableAllTree, mapIterator.key(), FormTreeAdd::Root, mapIterator.value(), imageListAppl_Report.image(#ImageTable));
            mapIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableBuildRelationTree</Name>
				<Source><![CDATA[
    private void tableBuildRelationTree()
    {
        TreeItemIdx         treeItemIdx;
        SysQueryItem        tableData;
        FormTreeControl     tableRelatedTree   = formRun.getTableRelationTree();
        Set                 buildTableSet      = new Set(Types::Integer);
        MapIterator         tableIterator;
        MapIterator         mapIterator;
        tableId             tableId;

        tableRelatedTree.deleteAll();
        tableIterator = new MapIterator(tableSelectedMap);
        tableIterator.begin();

        while (tableIterator.more())
        {
            tableData = tableIterator.value();
            tableId   = tableData.parmTableId();

            if (!tableAllRelationMap.exists(tableId))
            {
                tableAllRelationMap.insert(tableId, this.tableFillRelatedList(tableId));
            }

            buildTableSet = Set::difference(tableAllRelationMap.lookup(tableId), this.findSelectedTable());

            if (buildTableSet.elements())
            {
                treeItemIdx     = SysFormTreeControl::addTreeItem(tableRelatedTree, this.tableLabel(tableId), 0, -tableId, imageListAppl_Report.image(#imageRelations), true);

                if (showSysName)
                {
                    mapIterator = new MapIterator(allTablesName);
                }
                else
                {
                    mapIterator = new MapIterator(allTablesLabel);
                }

                mapIterator.begin();
                while (mapIterator.more())
                {
                    if (buildTableSet.in(mapIterator.value()))
                    {
                        SysFormTreeControl::addTreeItem(tableRelatedTree, mapIterator.key(), treeItemIdx, mapIterator.value(), imageListAppl_Report.image(#imageTable));
                    }
                    mapIterator.next();
                }
            }
            tableIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableChangeLabel</Name>
				<Source><![CDATA[
    private void tableChangeLabel(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx, boolean _andLock)
    {
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;
        tableId         tableId;
        boolean         locked;

        while (_treeItemIdx)
        {
            formTreeItem    = _formTreeControl.getItem(_treeItemIdx);

            if (_andLock)
            {
                tableId         = formTreeItem.data();
            }
            else
            {
                sysQueryItem    = formTreeItem.data();
                tableId         = sysQueryItem.parmTableId();
                locked          = sysQueryItem.parmLock();
            }

            if (!locked
                || _andLock)
            {
                formTreeItem.text(this.tableLabel(tableId));
                _formTreeControl.setItem(formTreeItem);
            }

            if (_formTreeControl.getChild(_treeItemIdx))
            {
                this.tableChangeLabel(_formTreeControl, _formTreeControl.getChild(_treeItemIdx), _andLock);
            }

            _treeItemIdx = _formTreeControl.getNextSibling(_treeItemIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes tables selected from Selected tables list.
    /// </summary>
    /// <param name="_deleteAll">
    /// Specifies if all tables selected have to be removed.
    /// </param>
    public void tableDelete(boolean _deleteAll = false)
    {
        FormTreeControl tableSelectedTree   = formRun.getTableSelectedTree();
        FormTreeControl tableAllTree        = formRun.getTableAllTree();
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;
        TreeItemIdx     treeItemIdx         = tableSelectedTree.getFirstSelected();
        TreeItemIdx     newItemIdx;
        FormTreeControl tableRelatedTree;

        tableRelatedTree    = formRun.getTableRelationTree();

        if (_deleteAll)
        {
            treeItemIdx = tableSelectedTree.getRoot();

            while (treeItemIdx)
            {
                tableSelectedTree.select(treeItemIdx);
                treeItemIdx = tableSelectedTree.getNextVisible(treeItemIdx);
                this.tableDelete();
            }
            this.tableReset();
            newItemIdx = tableAllTree.getRoot();
            formRun.enableTableRelationAddOne(false);
        }
        else
        {
            if (tableSelectedTree.getItem(treeItemIdx))
            {
                formTreeItem    = tableSelectedTree.getItem(treeItemIdx);
                sysQueryItem    = formTreeItem.data();

                if (!sysQueryItem.parmLock())
                {
                    newItemIdx      = SysFormTreeControl::addTreeItem(tableAllTree, this.tableLabel(sysQueryItem.parmTableId()), FormTreeAdd::Root, sysQueryItem.parmTableId(), imageListAppl_Report.image(#ImageTable));
                    tableAllTree.setItem(tableAllTree.getItem(newItemIdx));
                    newItemIdx      = this.tableInsertAfter(newItemIdx);

                    tableSelectedMap.remove(sysQueryItem.parmSortNo());

                    if (tableSelectedTree.getChild(treeItemIdx))
                    {
                        this.tableDeleteSelected(tableSelectedTree, tableAllTree, tableSelectedTree.getChild(treeItemIdx));
                    }
                    tableSelectedTree.delete(treeItemIdx);

                    this.tableBuildRelationTree();
                }
            }

            if (!tableSelectedMap.elements())
            {
                this.nextEnabled(false, #Tables);
                formRun.enableTableDeleteAll(false);
                formRun.enableShowSysName(true);
            }

            if (!tableRelatedTree.getFirstSelected())
            {
                formRun.enableTableRelationAddOne(false);
            }
        }

        tableAllTree.select(newItemIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDeleteSelected</Name>
				<Source><![CDATA[
    private void tableDeleteSelected(FormTreeControl _fromTree, FormTreeControl _toTree, TreeItemIdx _treeItemIdx)
    {
        FormTreeItem    formTreeItem;
        TreeItemIdx     newItemIdx;
        SysQueryItem    sysQueryItem;

        while (_treeItemIdx)
        {
            formTreeItem    = _fromTree.getItem(_treeItemIdx);
            sysQueryItem    = formTreeItem.data();

            newItemIdx = SysFormTreeControl::addTreeItem(_toTree, this.tableLabel(sysQueryItem.parmTableId()), 0, sysQueryItem.parmTableId(), imageListAppl_Report.image(#ImageTable), false, 0, FormTreeAdd::First);
            _toTree.setItem(_toTree.getItem(newItemIdx));

            tableSelectedMap.remove(sysQueryItem.parmSortNo());

            if (_fromTree.getChild(formTreeItem.idx()))
            {
                this.tableDeleteSelected(_fromTree, _toTree, _fromTree.getChild(formTreeItem.idx()));
            }

            _treeItemIdx = _fromTree.getNextSibling(formTreeItem.idx());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFillList</Name>
				<Source><![CDATA[
    private void tableFillList()
    {
        int                  i;
        container            table;
        tableId              tableId,lookupTableId;
        LabelType            label;
        Name                 name;
        int                  elements;
        Set                  duplicateLabels;
        DictTable            dictTable;
        str                  tableName;

        table       = ConfDefGroupWizard_BR::tableFillContainer();
        elements    = conlen(table);
        duplicateLabels = new Set(Types::String);

        for (i=1; i <= elements; i++)
        {
            [tableId, name, label]  = conpeek(table, i);
            // Table System Names
            allTablesName.insert(name, tableId);

            // Table Labels

            // If duplicate labels
            if (allTablesLabel.exists(label))
            {
                lookupTableId = allTablesLabel.lookup(label);
                duplicateLabels.add(label);
                // Renaming table in Map
                allTablesLabel.remove(label);
                dictTable = new DictTable(lookupTableId);
                tableName = dictTable.name();

                allTablesLabel.insert(strfmt('%1(%2)', label, tableName), lookupTableId);
                // Adding value if there are more dups
                duplicateLabels.add(label);
                // Adding new table
                allTablesLabel.insert(strfmt('%1(%2)',label,name), tableId);
            }
            else if (duplicateLabels.in(label))
            {
                allTablesLabel.insert(strfmt('%1(%2)',label,name), tableId);
            }
            else
            {
                allTablesLabel.insert(label, tableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFillRelatedList</Name>
				<Source><![CDATA[
    private Set tableFillRelatedList(tableId _tableId)
    {
        Set         relatedTableSet = new Set(Types::Integer);
        int         i;
        container   table;

        table = ConfDefGroupWizard_BR::tableFillRelatedContainer(_tableId);

        for (i = conlen(table); i; i--)
        {
            relatedTableSet.add(conpeek(table, i));
        }

        return relatedTableSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFindIdx</Name>
				<Source><![CDATA[
    private TreeItemIdx tableFindIdx(FormTreeControl _formTreeControl, tableId _tableId, TreeItemIdx _treeItemIdx, boolean _lock = false, boolean _object = true)
    {
        SysQueryItem    sysQueryItem;
        FormTreeItem    formTreeItem;
        TreeItemIdx     foundIdx;
        tableId         itemTableId;

        while ( _treeItemIdx
                && !foundIdx)
        {
            formTreeItem    = _formTreeControl.getItem(_treeItemIdx);

            if (_object)
            {
                sysQueryItem    = formTreeItem.data();

                if (    sysQueryItem.parmLock()    == _lock
                    &&  sysQueryItem.parmTableId() == _tableId)
                {
                    return _treeItemIdx;
                }
            }
            else
            {
                itemTableId = formTreeItem.data();
                if (itemTableId == _tableId)
                {
                    return _treeItemIdx;
                }
            }
            if (_formTreeControl.getChild(_treeItemIdx))
            {
                foundIdx = this.tableFindIdx(_formTreeControl, _tableId, _formTreeControl.getChild(_treeItemIdx), _lock, _object);
            }

            _treeItemIdx = _formTreeControl.getNextSibling(formTreeItem.idx());
        }

        return foundIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableInsertAfter</Name>
				<Source><![CDATA[
    private TreeItemIdx tableInsertAfter(TreeItemIdx _newTreeItemIdx)
    {
        FormTreeControl tableAllTree        = formRun.getTableAllTree();
        FormTreeItem    formTreeItem;
        LabelType       labelType;
        TreeItemIdx     treeItemIdx;

        formTreeItem    = tableAllTree.getItem(_newTreeItemIdx);
        labelType       = formTreeItem.text();
        tableAllTree.select(_newTreeItemIdx);
        treeItemIdx     = _newTreeItemIdx;

        while (treeItemIdx)
        {
            formTreeItem = tableAllTree.getItem(treeItemIdx);

            if (formTreeItem.text() >= labelType)
            {
                treeItemIdx = tableAllTree.getPrevSibling(treeItemIdx);
            }
            else
            {
                break;
            }
        }

        if (!treeItemIdx)
        {
            treeItemIdx = FormTreeAdd::First;
        }

        if (_newTreeItemIdx != treeItemIdx)
        {
            _newTreeItemIdx = tableAllTree.moveItem(_newTreeItemIdx, FormTreeAdd::Root, treeItemIdx);
        }

        return _newTreeItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableLabel</Name>
				<Source><![CDATA[
    private LabelType tableLabel(tableId _tableId)
    {
        MapIterator mapIterator;

        if (showSysName)
        {
            mapIterator = new MapIterator(allTablesName);
        }
        else
        {
            mapIterator = new MapIterator(allTablesLabel);
        }

        mapIterator.begin();
        while (mapIterator.more())
        {
            if (_tableId == mapIterator.value())
            {
                return mapIterator.key();
            }

            mapIterator.next();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableMoveItemVertical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the item vertically
    /// </summary>
    /// <param name="_upDown">
    /// True to move up and false to move down
    /// </param>
    public void tableMoveItemVertical(boolean _upDown)
    {
        Map             map;
        SysQueryItem    tableData;
        tableId         tableId;
        MapIterator     tableIterator = new MapIterator(tableSelectedMap);

        tableIterator.begin();
        tableData           = tableIterator.value();
        tableId             = tableData.parmTableId();
        map                 = this.moveItemVertical(formRun.getTableSelectedTree(), _upDown, true);
        tableSelectedMap    = map.lookup(tableId);
        dataSourceNo        = key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableRelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the tables are related
    /// </summary>
    /// <param name="tableId1">
    /// The id of the table
    /// </param>
    /// <param name="tableId2">
    /// The id of the table
    /// </param>
    /// <returns>
    /// true if the table is related; otherwise, false
    /// </returns>
    public boolean tableRelated(tableId tableId1, tableId tableId2)
    {
        DictRelation dictRelation = new DictRelation(tableId1);

        return dictRelation.loadTableRelation(tableId2) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableReset</Name>
				<Source><![CDATA[
    private void tableReset()
    {
        SysQueryItem    sysQueryItem        = new SysQueryItem();
        FormTreeControl tableSelectedTree   = formRun.getTableSelectedTree();
        FormTreeControl tableRelationTree   = formRun.getTableRelationTree();

        tableSelectedTree.deleteAll();
        tableRelationTree.deleteAll();

        sysQueryItem.parmLock(true);
        SysFormTreeControl::addTreeItem(tableSelectedTree, "@SYS26774", 0, sysQueryItem, imageListAppl_Report.image(#ImageTables), true);

        tableSelectedMap = new Map(Types::Integer, Types::Class);

        this.nextEnabled(false, #Tables);
        formRun.enableTableDeleteAll(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableSelectedDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drops the table selected
    /// </summary>
    /// <param name="_activeSource">
    /// The active form tree control
    /// </param>
    /// <param name="_dragSource">
    /// The form tree control to drag
    /// </param>
    /// <param name="x">
    /// The value of the x axis
    /// </param>
    /// <param name="y">
    /// The value of the y axis
    /// </param>
    public void tableSelectedDrop(FormTreeControl _activeSource, FormTreeControl _dragSource, int x, int y)
    {
        TreeItemIdx     toItemIdx;
        TreeItemIdx     newItemIdx;
        FormTreeItem    formTreeItem;
        SysQueryItem    fromQueryItem;
        SysQueryItem    toQueryItem;
        tableId         fromTableId;
        tableId         toTableId;
        SysQueryItem    parentItem;
        SysQueryItem    tableItem;

        if (this.dragDrop(_activeSource, _dragSource, null, true))
        {
            [toItemIdx] = _activeSource.hitTest(x,y);

            if (toItemIdx <= 0)
            {
                toItemIdx = _activeSource.getRoot();
            }

            formTreeItem    = _activeSource.getItem(toItemIdx);
            toQueryItem     = formTreeItem.data();
            toTableId       = toQueryItem.parmTableId();

            formTreeItem    = _dragSource.getItem(dragFromIdx);

            if (_dragSource.equal(_activeSource))
            {
                fromQueryItem   = formTreeItem.data();
                fromTableId     = fromQueryItem.parmTableId();
            }
            else
            {
                fromTableId     = formTreeItem.data();
            }

            if (fromTableId != toTableId)
            {
                if (toTableId > 0
                    && !this.tableRelated(fromTableId, toTableId))
                {
                    toItemIdx = _activeSource.getRoot();
                }

                if (_dragSource.equal(_activeSource))
                {
                    newItemIdx          = _activeSource.moveItem(dragFromIdx, toItemIdx, FormTreeAdd::Sort);
                    tableSelectedMap    = this.sortSelectedOrder(_activeSource, _activeSource.getRoot());
                    dataSourceNo        = key;

                    if (toItemIdx > 0)
                    {
                        parentItem = _activeSource.getItem(toItemIdx).data();
                        tableItem  = _activeSource.getItem(newItemIdx).data();
                        tableItem.parmRelatedId(parentItem.parmTableId());
                    }
                }
                else
                {
                    this.tableAdd(_dragSource, toItemIdx);
                }

                SysFormTreeControl::expandTree(_activeSource, _activeSource.getRoot());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the contents of the map.
    /// </summary>
    /// <param name="_map">
    /// The <c>Map</c> to validate.
    /// </param>
    /// <returns>
    /// true when the value of the map has contents; otherwise, false.
    /// </returns>
    private boolean validateContents(Map _map)
    {
        MapEnumerator   mapEnum = _map.getEnumerator();
        Set             set;

        while (mapEnum.moveNext())
        {
            set = mapEnum.currentValue();

            if (set.elements())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNext</Name>
				<Source><![CDATA[
    private boolean validateNext(Map _map)
    {
        MapIterator mapIterator = new MapIterator(_map);
        Map         map;

        mapIterator.begin();
        while (mapIterator.more())
        {
            map = mapIterator.value();

            if (map.elements())
            {
                return true;
            }

            mapIterator.next();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <param name="_confGroupId">
    /// Initialises confGroupId with the value supplied in the parameter.
    /// </param>
    /// <returns>
    /// The wizard object.
    /// </returns>
    public static ConfDefGroupWizard_BR construct(ConfGroupId_BR _confGroupId)
    {
        ConfDefGroupWizard_BR wizard = new ConfDefGroupWizard_BR();

        wizard.init();
        wizard.parmConfGroupId(_confGroupId);
        wizard.load();

        return wizard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldFillContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selected fields and default fields to a container.
    /// </summary>
    /// <param name="_tableId">
    /// TableId of the selected table.
    /// </param>
    /// <returns>
    /// A container holding selected fields and fieldgroups.
    /// </returns>
    protected static container fieldFillContainer(tableId _tableId)
    {
        SysDictField    sysDictField;
        SysDictField    arrayField;
        SysDictTable    dictTable;
        DictMethod      methodInfo;
        DictFieldGroup  dictFieldGroup;
        Name            methodName;
        LabelType       fieldGroupName;
        int             i, j, k;
        int             lastElement;
        int             lastFieldElement;
        int             id;
        str             arrayText;
        container       field;
        container       method;
        container       fieldGroup;
        container       fieldGroupElement;
        container       tmpContainer;
        container       countryCode;

        dictTable = new SysDictTable(_tableId);
        if (dictTable)
        {
            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                sysDictField = new SysDictField(dictTable.id(), dictTable.fieldCnt2Id(i));
                for (j = 1; j <= sysDictField.arraySize(); j++)
                {
                    arrayText  = '';
                    arrayField = new SysDictField(dictTable.id(), sysDictField.id(), j);
                    if (j > 1)
                    {
                        arrayText  = strfmt(' (%1)', int2str(j));
                    }

                    countryCode = arrayField.getCountryRegionCodes();

                    if (arrayField.visible()
                        &&  arrayField.saveContents()
                        && (conLen(countryCode) == 0 || countryCode == [#isoBR])
                        &&  arrayField.baseType() != Types::VarString
                        &&  arrayField.baseType() != Types::Container)
                    {
                        lastElement++;
                        field = conIns(field, lastElement, [arrayField.extendedFieldId(),
                                                            arrayField.name() + arrayText,
                                                            arrayField.label(),
                                                            arrayField.help()]);
                    }
                }
            }
            lastElement = 0;

            for (i = 1; i <= dictTable.objectMethodCnt(); i++)
            {
                methodInfo   = dictTable.objectMethodObject(i);
                if (methodInfo
                    &&  (methodInfo.displayType() == DisplayFunctionType::Get
                        ||  methodInfo.displayType() == DisplayFunctionType::Set)
                    &&  methodInfo.returnType()  != Types::Container)
                {
                    lastElement++;
                }
            }

            lastElement = 0;
            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                dictFieldGroup = new DictFieldGroup(dictTable.id(), dictTable.fieldGroup(i));
                fieldGroupName = dictFieldGroup.name();
                if (SysLabel::isLabelId(dictFieldGroup.name()))
                {
                    fieldGroupName = new Label(LanguageTable::defaultLanguage()).extractString(fieldGroupName);
                }
                fieldGroupElement   = connull();
                lastFieldElement    = 0;

                for (j = 1; j <= dictFieldGroup.numberOfFields(); j++)
                {
                    methodName  = dictFieldGroup.methodName(dictFieldGroup.field(j));
                    if (methodName)
                    {
                        id = 0;
                        for (k = conLen(method);  k > 0; k--)
                        {
                            tmpContainer = conPeek(method, k);
                            if (conPeek(tmpContainer, 2) == methodName)
                            {
                                id = conPeek(tmpContainer, 1);
                                break;
                            }
                        }
                        if (id)
                        {
                            lastFieldElement++;
                            fieldGroupElement = conIns(fieldGroupElement, lastFieldElement, id);
                        }
                    }
                    else
                    {
                        sysDictField = new SysDictField(dictTable.id(), dictFieldGroup.field(j));
                        for (k = 1; k <= sysDictField.arraySize(); k++)
                        {
                            arrayField  = new SysDictField(dictTable.id(), sysDictField.id(), k);
                            lastFieldElement++;
                            fieldGroupElement = conIns(fieldGroupElement, lastFieldElement, arrayField.extendedFieldId());
                        }
                    }
                }

                lastElement++;
                fieldGroup = conIns(fieldGroup, lastElement, [i,
                                                              fieldGroupName,
                                                              fieldGroupElement]);
            }
        }

        return [field, fieldGroup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoBR, GlobalizationConstants::FeatureReferenceBR00068] ],
            funcName()
        );

        ConfTable_BR            confTable;
        ConfDefGroupWizard_BR   wizard      = new ConfDefGroupWizard_BR();

        if (args.record() && args.record().TableId == tablenum(ConfTable_BR))
        {
            confTable = args.record();

            wizard.parmConfGroupId(confTable.ConfGroupId);
            wizard.load();

            if (wizard.prompt())
            {
                wizard.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFillContainer</Name>
				<Source><![CDATA[
    private static container tableFillContainer()
    {
        Dictionary      dictionary      = new Dictionary();
        tableId         tableId         = dictionary.tableNext(0);
        SysDictTable    sysDictTable;
        container       table;
        int             i;

        while (tableId)
        {
            sysDictTable = new SysDictTable(tableId);

            if (ConfDefGroupWizard_BR::tableValidate(sysDictTable) && sysDictTable.visible())
            {
                i++;
                table = conIns(table, i, [sysDictTable.id(), sysDictTable.name(), sysDictTable.getLabelOrName()]);
            }

            tableId = dictionary.tableNext(tableId);
        }

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFillRelatedContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selected table and related tables to a container.
    /// </summary>
    /// <param name="_tableId">
    /// TableId of the selected table.
    /// </param>
    /// <returns>
    /// A container holding selected and related tables.
    /// </returns>
    protected static container tableFillRelatedContainer(tableId _tableId)
    {
        xRefTableRelation   xRefTableRelation;
        SysDictTable        relatedTable;
        SysDictTable        mainTable;
        SysDictRelation     tableRelation;
        Name                name;
        container           table;
        int                 relatedCounter;

        name = tableId2Name(_tableId);

        while select TableName, RelationName from xRefTableRelation
            order by TableName, RelationName
            where xRefTableRelation.RelatedTableName == name
        {
            relatedTable = new SysDictTable(tableName2Id(xRefTableRelation.TableName));

            if (ConfDefGroupWizard_BR::tableValidate(relatedTable))
            {
                table = conins(table, conLen(table) + 1, relatedTable.id());
            }
        }

        while select RelatedTableName, RelationName from xRefTableRelation
            order by RelatedTableName, RelationName
            where xRefTableRelation.TableName        == name
               && !(xRefTableRelation.RelationName   == fieldstr(Common,DataAreaId)
               && xRefTableRelation.RelatedTableName == tablestr(DataArea))    // exclude the 'internal' table DataAreaId
        {
            relatedTable = new SysDictTable(tableName2Id(xRefTableRelation.RelatedTableName));

            if (ConfDefGroupWizard_BR::tableValidate(relatedTable))
            {
                table = conins(table, conLen(table) + 1, relatedTable.id());
            }
        }

        mainTable = new SysDictTable(_tableId);
        for (relatedCounter = mainTable.relationCnt() ; relatedCounter > 0 ; relatedCounter--)
        {
            tableRelation = new SysDictRelation(_tableId);
            tableRelation.loadNameRelation(mainTable.relation(relatedCounter));
            relatedTable  = new SysDictTable(tableRelation.externTable());
            if (ConfDefGroupWizard_BR::tableValidate(relatedTable) && !conFind(table, relatedTable.id()))
            {
                table = conIns(table, conLen(table) + 1, relatedTable.id());
            }
        }

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableValidate</Name>
				<Source><![CDATA[
    private static boolean tableValidate(SysDictTable _dictTable)
    {
        return (_dictTable
            && !_dictTable.isMap()
            && !_dictTable.isTmp()
            && _dictTable.rights() > AccessType::NoAccess);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>