<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRecordList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a sorted list of <c>Kanban</c> records, ordered by associated job status and a custom field list.
/// </summary>
public class KanbanRecordList
{
    Map             mapKanbanRecords;
    container       sortList;

    MapEnumerator   enumeratorMap;
    boolean         shouldMoveNext;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Positions the iterator of the list on the first <c>Kanban</c> and returns its data.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> to be returned.
    /// </param>
    /// <returns>
    /// true if the operation was successful, otherwise false.
    /// </returns>
    public boolean first(Kanban _kanban)
    {
        this.initEnumerator();

        return this.next(_kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization of the current object.
    /// </summary>
    private void init()
    {
        mapKanbanRecords    = new Map(Types::Enum, Types::Class);
        enumeratorMap       = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the map enumerator.
    /// </summary>
    private void initEnumerator()
    {
        enumeratorMap  = mapKanbanRecords.getEnumerator();
        shouldMoveNext = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>Kanban</c> record to the list
    /// </summary>
    /// <param name="_jobStatus">
    /// The status of the last job of the <c>Kanban</c>.
    /// </param>
    /// <param name="_kanban">
    /// The <c>Kanban</c> to be inserted.
    /// </param>
    public void insert(LeanKanbanJobStatus _jobStatus,
                        Kanban _kanban)
    {
        RecordSortedList rslKanbans;

        if (mapKanbanRecords.exists(_jobStatus))
        {
            rslKanbans = mapKanbanRecords.lookup(_jobStatus);
        }
        else
        {
            rslKanbans = new RecordSortedList(tableNum(Kanban));
            rslKanbans.sortOrderFromContainer(sortList);
            mapKanbanRecords.insert(_jobStatus, rslKanbans);
        }

        rslKanbans.ins(_kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates and returns the next <c>Kanban</c> in the list.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> to be returned.
    /// </param>
    /// <returns>
    /// true if a record was returned, otherwise false.
    /// </returns>
    /// <remarks>
    /// Returned kanbans are ordered by job status and then by the order criteria provided at construction time.
    /// </remarks>
    public boolean next(Kanban _kanban)
    {
        boolean             done = false;
        boolean             recordFound = false;

        if (!enumeratorMap)
        {
            this.initEnumerator();
        }

        while (!recordFound && !done)
        {
            if (shouldMoveNext)
            {
                // iterate status map if needed
                done = enumeratorMap.moveNext() == false;
            }

            if (!done)
            {
                RecordSortedList currentList = enumeratorMap.currentValue();

                if (shouldMoveNext)
                {
                    recordFound = currentList.first(_kanban);
                }
                else
                {
                    recordFound = currentList.next(_kanban);
                }

                shouldMoveNext = !recordFound;
            }
        }

        return recordFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortList</Name>
				<Source><![CDATA[
        public container parmSortList(container _sortList = sortList)
    {
        sortList = _sortList;

        return sortList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanRecordList construct()
    {
        return new KanbanRecordList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_orderList">
    /// A container holding the list of fields defining the sort order
    /// (other than the <c>KanbanJob</c> status)
    /// </param>
    /// <returns>
    /// An instance of <c>KanbanRecordList</c>
    /// </returns>
    public static KanbanRecordList newStandard(container _orderList)
    {
        KanbanRecordList result = KanbanRecordList::construct();
        result.parmSortList(_orderList);
        result.init();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
