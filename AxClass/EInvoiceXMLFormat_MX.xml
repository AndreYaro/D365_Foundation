<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceXMLFormat_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceXMLFormat_MX</c> class handles the formatting of the EInvoice XML document for current version: CFDI v3.2
/// </summary>
public class EInvoiceXMLFormat_MX
{
    #define.UTF8('UTF-8')
    #EInvoiceXMLDefaultValues_MX

    XmlDocument xmlDoc;
    XmlNameSpaceManager nsmgr;
    EInvoiceJourBaseMap_MX eInvoiceJourMap;
    EInvoiceTransBaseMap_MX eInvoiceTransMap;
    str defaultNameSpace;
    str defaultForeignTradeNamespace;
    str xsi;
    str schemaLocation;
    protected str cartaPorteNs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add_RegimenFiscalElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the "RegimenFiscal" node.
    /// </summary>
    /// <param name="_emissorElement">The node that will contains the new "RegimenFiscal" node.</param>
    /// <param name="_description">The default value for this attribute.</param>
    protected void add_RegimenFiscalElement(XmlElement _emissorElement, EInvoiceTaxRegimeDescription_MX _description = #NotApplicable)
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        TaxRegime_MX taxRegime;

        select count(RecId) from taxRegime
            where taxRegime.RefRecId == companyInfo.RecId;

        if (!taxRegime.RecId)
        {
            this.addRegimenElement(_emissorElement, _description);
        }

        while select Description from taxRegime
                where taxRegime.RefRecId == companyInfo.RecId
        {
            this.addRegimenElement(_emissorElement,strLRTrim(taxRegime.Description));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRegimenElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the "RegimenFiscal" node.
    /// </summary>
    /// <param name="_emissorElement">The node that will contains the new "RegimenFiscal" node.</param>
    /// <param name="_description">The default value for this attribute.</param>
    protected void addRegimenElement(XmlElement _emissorElement, EInvoiceTaxRegimeDescription_MX _description = #NotApplicable)
    {
        XmlElement regimenFiscalElement;

        regimenFiscalElement = this.createElement('RegimenFiscal');
        regimenFiscalElement.setAttribute('Regimen', _description);
        _emissorElement.appendChild(regimenFiscalElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_RetencionesElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Retencion node.
    /// </summary>
    /// <param name="_retencionesElement">The XML element to append the created node.</param>
    protected void add_RetencionesElement(XmlElement _retencionesElement)
    {
        XmlElement retencionesElement;
        List taxTransList;
        ListEnumerator taxTransEnumerator;
        TaxTrans taxTrans;

        taxTransList = eInvoiceJourMap.getPositveTaxAmountList();
        taxTransEnumerator = taxTransList.getEnumerator();

        while (taxTransEnumerator.moveNext())
        {
            taxTrans = taxTransEnumerator.current();
            retencionesElement = this.createElement('Retencion');

            retencionesElement.setAttribute('impuesto', this.formatTaxType(taxTrans.TaxType_MX));
            retencionesElement.setAttribute('importe', this.formatXmlAmount(taxTrans.SourceTaxAmountCur));

            _retencionesElement.appendChild(retencionesElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_TrasladosElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Translados node.
    /// </summary>
    /// <param name="_trasladosElement">The XML element to append the created node.</param>
    protected void add_TrasladosElement(XmlElement _trasladosElement)
    {
        XmlElement trasladoElement;
        List taxTransList;
        ListEnumerator taxTransEnumerator;
        TaxTrans taxTrans;

        taxTransList = eInvoiceJourMap.getNegativeTaxAmountList();
        taxTransEnumerator = taxTransList.getEnumerator();

        while (taxTransEnumerator.moveNext())
        {
            taxTrans = taxTransEnumerator.current();
            trasladoElement = this.createElement('Traslado');

            trasladoElement.setAttribute('impuesto', this.formatTaxType(taxTrans.TaxType_MX));
            trasladoElement.setAttribute('tasa', this.formatXmlAmount(TaxTrans.TaxValue));
            trasladoElement.setAttribute('importe', this.formatXmlAmount(taxTrans.SourceTaxAmountCur));

            _trasladosElement.appendChild(trasladoElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDuplicatedSpaces</Name>
				<Source><![CDATA[
    /// <summary>
    /// transfer original string may contain more than one blank space to string contain only one blank space between words
    /// </summary>
    /// <param name="_original">
    /// the original string may contain more than one blank space
    /// </param>
    /// <returns>
    /// output string contain only one blank space between words
    /// </returns>
    protected str removeDuplicatedSpaces(str _original)
    {
        TextBuffer buffer = new TextBuffer();
        buffer.setText(_original);
        buffer.replace('[ ]+', ' ');

        return buffer.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public XmlDocument create(EInvoiceJourBaseMap_MX _eInvoiceMap)
    {
        eInvoiceJourMap = _eInvoiceMap;

        return this.doFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_AddressInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_AddressInfoNode(
        str _nodeName,
        str _street,
        str _streetNumber,
        str _buildingComplement,
        str _county,
        str _city,
        str _state,
        str _countryRegionId,
        str _zipcode)
    {
        XmlElement addressElement;

        addressElement = this.createElement(_nodeName);
        addressElement.setAttribute('calle', this.formatString(strrtrim(_street)));

        if (_streetNumber)
        {
            addressElement.setAttribute('noExterior', this.formatString(_streetNumber));
        }

        if (_buildingComplement)
        {
            addressElement.setAttribute('noInterior', this.formatString(_buildingComplement));
        }

        if (_county)
        {
            addressElement.setAttribute('colonia', this.formatString(_county));
            addressElement.setAttribute('municipio', this.formatString(_county));
        }

        if (_city)
        {
            AddressElement.setAttribute('localidad', this.formatString(_city));
        }

        if (_state)
        {
            addressElement.setAttribute('estado', this.formatString(_state));
        }

        addressElement.setAttribute('pais', this.formatString(_countryRegionId));

        addressElement.setAttribute('codigoPostal', this.formatString(_zipCode));

        return addressElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_AduanaInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_AduanaInfoNode(
        str _nodeName,
        str _number,
        str _date,
        str _aduana)
    {
        XmlElement AduanaElement;

        AduanaElement = this.createElement(_nodeName);
        AduanaElement.setAttribute('numero', eInvoiceTransMap.CustomsDocNumber());
        AduanaElement.setAttribute('fecha', this.formatXmlDate(eInvoiceTransMap.CustomsDocDate()));
        AduanaElement.setAttribute('aduana', this.formatString(eInvoiceTransMap.CustomsName()));

        return AduanaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ComprobanteElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Comprobante node.
    /// </summary>
    /// <returns>The created comprobante element.</returns>
    protected XmlElement create_ComprobanteElement()
    {
        XmlElement comprobanteElement;
        XmlAttribute schemaLocationAttribute;

        comprobanteElement = this.createElement('Comprobante');
        schemaLocationAttribute = xmlDoc.createAttribute2('xsi:schemaLocation', xsi);
        schemaLocationAttribute.value(schemaLocation);

        comprobanteElement.setAttribute('xmlns:cfdi', defaultNamespace);
        comprobanteElement.setAttributeNode(schemaLocationAttribute);
        comprobanteElement.setAttribute('version', this.version());
        comprobanteElement.setAttribute('fecha', DateTimeUtil::toStr(eInvoiceJourMap.documentDateTime()));
        comprobanteElement.setAttribute('formaDePago', this.formatPaymentSched(eInvoiceJourMap.numberofPayments()));
        comprobanteElement.setAttribute('noCertificado', eInvoiceJourMap.certificateSerialNumber());
        comprobanteElement.setAttribute('certificado', eInvoiceJourMap.certificateInBase64());

        if (eInvoiceJourMap.TermOfPaymDesc())
        {
            comprobanteElement.setAttribute('condicionesDePago', eInvoiceJourMap.TermOfPaymDesc());
        }

        comprobanteElement.setAttribute('subTotal', this.formatXmlAmount(eInvoiceJourMap.subTotal()));

        if (eInvoiceJourMap.totalDiscountAmount())
        {
			comprobanteElement.setAttribute('descuento', this.formatXmlAmount(eInvoiceJourMap.totalDiscountAmount()));
        }

        if (Currency::currencyCodeISO(eInvoiceJourMap.currencyCode()) != 'MXN')
        {
            comprobanteElement.setAttribute('TipoCambio', this.formatXmlAmount(eInvoiceJourMap.exchangeRate()));
            comprobanteElement.setAttribute('Moneda', eInvoiceJourMap.currencyCode());
        }

        comprobanteElement.setAttribute('total', this.formatXmlAmount(eInvoiceJourMap.totalAmount()));
        comprobanteElement.setAttribute('metodoDePago', eInvoiceJourMap.MethodOfPayment() ? eInvoiceJourMap.MethodOfPayment() : #NotIdentified);
        comprobanteElement.setAttribute('LugarExpedicion', eInvoiceJourMap.emitentCity());
        comprobanteElement.setAttribute('tipoDeComprobante', this.setInvoiceType());
        comprobanteElement.setAttribute('NumCtaPago', eInvoiceJourMap.paymentAccount() ? eInvoiceJourMap.paymentAccount() : #NotIdentified);

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ConceptoElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Concepto node.
    /// </summary>
    /// <returns>The created concepto element.</returns>
    protected XmlElement create_ConceptoElement()
    {
        XmlElement conceptoElement;
        XmlElement informacionAduaneraElement;
        XmlElement cuentaPredial;

        conceptoElement = this.create_ItemInfoNode('Concepto',
            this.formatXmlAmount(eInvoiceTransMap.qty()),
            eInvoiceTransMap.unit(),
            eInvoiceTransMap.itemId(),
            eInvoiceTransMap.itemName(),
            this.formatXmlAmount(eInvoiceTransMap.amount() / eInvoiceTransMap.qty()),
            this.formatXmlAmount(eInvoiceTransMap.amount()));

        if (eInvoiceTransMap.CustomsName()
            || eInvoiceTransMap.CustomsDocNumber()
            || eInvoiceTransMap.CustomsDocDate())
        {
            informacionAduaneraElement = this.create_AduanaInfoNode('InformacionAduanera',
                'numero',
                'fecha',
                'aduana');
            conceptoElement.appendChild(informacionAduaneraElement);
        }
        else if (eInvoiceTransMap.PropertyNumber())
        {
            cuentaPredial = this.createElement('CuentaPredial');
            cuentaPredial.setAttribute('numero', eInvoiceTransMap.PropertyNumber());
            conceptoElement.appendChild(cuentaPredial);
        }

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ConceptoElementMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Concepto node for a given MarkupTrans record.
    /// </summary>
    /// <param name="_markupTrans">The MarkupTrans record to generate the concepto node.</param>
    /// <returns>The Concepto node.</returns>
    protected XmlElement create_ConceptoElementMarkupTrans(MarkupTrans _markupTrans)
    {
        return this.create_ItemInfoNode('Concepto',
            '1',
            'un',
            _markupTrans.MarkupCode,
            _markupTrans.markupTable().Txt,
            this.formatXmlAmount(_markupTrans.CalculatedAmount),
            this.formatXmlAmount(_markupTrans.CalculatedAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_EmisorElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Emissor node.
    /// </summary>
    /// <returns>The created Emissor element.</returns>
    protected XmlElement create_EmisorElement()
    {
        XmlElement emisorElement;
        XmlElement domicillioFiscalElement;
        XmlElement expedidoElement;

        emisorElement = this.createElement('Emisor');
        emisorElement.setAttribute('rfc', eInvoiceJourMap.getCompanyInfo().RFC_MX);

        if (eInvoiceJourMap.getCompanyInfo().Name)
        {
            emisorElement.setAttribute('nombre', eInvoiceJourMap.getCompanyInfo().Name);
        }

        domicillioFiscalElement = this.create_FiscalAddressInfoNode('DomicilioFiscal',
            eInvoiceJourMap.emitentStreet(),
            eInvoiceJourMap.emitentStreetNumber(),
            eInvoiceJourMap.emitentBuildingComplement(),
            eInvoiceJourMap.emitentCounty(),
            eInvoiceJourMap.emitentCity(),
            eInvoiceJourMap.emitentState(),
            eInvoiceJourMap.emitentCountryRegion(),
            eInvoiceJourMap.emitentZipCode());

        expedidoElement = this.create_AddressInfoNode('ExpedidoEn',
            eInvoiceJourMap.emitentStreet(),
            eInvoiceJourMap.emitentStreetNumber(),
            eInvoiceJourMap.emitentBuildingComplement(),
            eInvoiceJourMap.emitentCounty(),
            eInvoiceJourMap.emitentCity(),
            eInvoiceJourMap.emitentState(),
            eInvoiceJourMap.emitentCountryRegion(),
            eInvoiceJourMap.emitentZipCode());

        emisorElement.appendChild(domicillioFiscalElement);
        emisorElement.appendChild(expedidoElement);

        this.add_RegimenFiscalElement(emisorElement);

        return emisorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_FiscalAddressInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_FiscalAddressInfoNode(
        str _nodeName,
        str _street,
        str _streetNumber,
        str _buildingComplement,
        str _county,
        str _city,
        str _state,
        str _countryRegionId,
        str _zipcode)
    {
        XmlElement addressElement;

        addressElement = this.createElement(_nodeName);
        addressElement.setAttribute('calle', this.formatString(strrtrim(_street)));

        if (_streetNumber)
        {
            addressElement.setAttribute('noExterior', this.formatString(_streetNumber));
        }

        if (_buildingComplement)
        {
            addressElement.setAttribute('noInterior', this.formatString(_buildingComplement));
        }

        if (_county)
        {
            addressElement.setAttribute('colonia', this.formatString(_county));
        }

        if (_city)
        {
            AddressElement.setAttribute('localidad', this.formatString(_city));
        }

        AddressElement.setAttribute('municipio', this.formatString(_county));

        if (_state)
        {
            addressElement.setAttribute('estado', this.formatString(_state));
        }

        addressElement.setAttribute('pais', this.formatString(_countryRegionId));

        addressElement.setAttribute('codigoPostal', this.formatString(_zipCode));

        return addressElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a XmlElement.
    /// </summary>
    /// <param name="_elementName">
    /// The name of the element to be created.
    /// </param>
    /// <returns>
    /// The created XmlElement.
    /// </returns>
    /// <remarks>
    /// The element will be created on the cce11 NameSpace.
    /// </remarks>
    protected XmlElement createForeignTradeElement(str _elementName)
    {
        return xmlDoc.createElement3('cce11', _elementName, defaultForeignTradeNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCartaPorteElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a XmlElement.
    /// </summary>
    /// <param name="_elementName">
    /// The name of the element to be created.
    /// </param>
    /// <returns>
    /// The created XmlElement.
    /// </returns>
    /// <remarks>
    /// The element will be created on the cartaPorte NameSpace.
    /// </remarks>
    protected XmlElement createCartaPorteElement(str _elementName)
    {
        XmlElement cartaPorteElement;

        if (EInvoiceCFDICartaPorteVersion_3_1MXFlight::instance().isEnabled())
        {
            cartaPorteElement = xmlDoc.createElement3('cartaporte31', _elementName, cartaPorteNs);
        }
        else
        {
            cartaPorteElement = xmlDoc.createElement3('cartaporte30', _elementName, cartaPorteNs);
        }
       
        return cartaPorteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ItemInfoNode</Name>
				<Source><![CDATA[
    protected XmlElement create_ItemInfoNode(
        str _nodeName,
        str _qty,
        str _unit,
        str _itemId,
        str _itemDesc,
        str _unitprice,
        str _lineAmount)
    {
        XmlElement ItemElement;

        ItemElement = this.createElement(_nodeName);
        ItemElement.setAttribute('cantidad', this.formatString(_qty));
        ItemElement.setAttribute('unidad', _unit ? _unit : #NotApplicable);

        if (_itemId)
        {
            ItemElement.setAttribute('descripcion', this.removeDuplicatedSpaces(this.formatString(_itemId + ' - ' + _itemDesc)));
        }
        else
        {
            ItemElement.setAttribute('descripcion', this.removeDuplicatedSpaces(this.formatString(_itemDesc)));
        }

        ItemElement.setAttribute('valorUnitario', this.formatString(_unitPrice));
        ItemElement.setAttribute('importe', this.formatString(_lineAmount));

        return ItemElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ReceptorElement</Name>
				<Source><![CDATA[
    protected XmlElement create_ReceptorElement()
    {
        XmlElement receptorElement;
        XmlElement domicillioFiscalElement;

        receptorElement = this.createElement('Receptor');
        receptorElement.setAttribute('rfc', eInvoiceJourMap.invoiceRFC());
        // to do kiran
        if (DirPartyTable::findRec(eInvoiceJourMap.getCustTable().Party).Name)
        {
            receptorElement.setAttribute('nombre', this.removeDuplicatedSpaces(eInvoiceJourMap.invoicingName()));
        }

        domicillioFiscalElement = this.create_AddressInfoNode('Domicilio',
            this.removeDuplicatedSpaces(eInvoiceJourMap.invoiceStreet()),
            eInvoiceJourMap.invoiceStreetNumber(),
            eInvoiceJourMap.invoiceBuildingComplement(),
            eInvoiceJourMap.invoiceCounty(),
            eInvoiceJourMap.invoiceCity(),
            eInvoiceJourMap.invoiceState(),
            eInvoiceJourMap.invoiceCountryRegion(),
            eInvoiceJourMap.invoiceZipCode());

        receptorElement.appendChild(domicillioFiscalElement);

        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a XmlElement.
    /// </summary>
    /// <param name="_elementName">The name of the element to be created.</param>
    /// <returns>The created XmlElement.</returns>
    /// <remarks>
    /// The element will be created on the cfdi Namespace.
    /// </remarks>
    protected XmlElement createElement(str _elementName)
    {
        return xmlDoc.createElement3('cfdi',_elementName, defaultNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    protected void createLines(XmlElement _parentElement)
    {
        XmlElement conceptosElement;

        conceptosElement = this.createElement('Conceptos');

        eInvoiceJourMap.resetLines();
        while (eInvoiceJourMap.nextLine())
        {
            eInvoiceTransMap = eInvoiceJourMap.currentLine();

            conceptosElement.appendChild(this.create_ConceptoElement());

            this.createLinesFromMarkup(conceptosElement, eInvoiceTransMap.markupTransList());
        }

        this.createLinesFromMarkup(conceptosElement, eInvoiceJourMap.markupTransList());

        _parentElement.appendChild(conceptosElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates XML elements related to markup transactions.
    /// </summary>
    /// <param name = "_conceptosElement">The parent XML element.</param>
    /// <param name = "_list">The list of markp transactions to process.</param>
    protected void createLinesFromMarkup(XmlElement _conceptosElement, List _list)
    {
        ListEnumerator listEnumerator;

        if (!_list)
        {
            return;
        }

        listEnumerator = _list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            MarkupTrans markupTransLocal = listEnumerator.current();

            if (!this.skipMarkupLine(markupTransLocal))
            {
                _conceptosElement.appendChild(
                    this.create_ConceptoElementMarkupTrans(markupTransLocal));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if markup transaction must be skipped.
    /// </summary>
    /// <param name = "_markupTrans">The markup transaction to check.</param>
    /// <returns>false.</returns>
    protected boolean skipMarkupLine(MarkupTrans _markupTrans)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxesLines</Name>
				<Source><![CDATA[
    protected void createTaxesLines(XmlElement _parentElement)
    {
        XmlElement impuestosElement;
        XmlElement retencionesElement;
        XmlElement trasladosElement;

        impuestosElement = this.createElement('Impuestos');
        impuestosElement.setAttribute('totalImpuestosRetenidos', this.formatXmlAmount(eInvoiceJourMap.TotalTaxAmountRetained()));
        impuestosElement.setAttribute('totalImpuestosTrasladados', this.formatXmlAmount(eInvoiceJourMap.TotalTaxAmountRegular()));

        if (eInvoiceJourMap.TotalTaxAmountRetained())
        {
            retencionesElement = this.createElement('Retenciones');
            this.add_RetencionesElement(retencionesElement);
            impuestosElement.appendChild(retencionesElement);
        }

        if (eInvoiceJourMap.TotalTaxAmountRegular())
        {
            trasladosElement = this.createElement('Traslados');
            this.add_TrasladosElement(trasladosElement);
            impuestosElement.appendChild(trasladosElement);
        }

        _parentElement.appendChild(impuestosElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlDocumentInvoiceJour</Name>
				<Source><![CDATA[
    protected XmlElement createXmlDocumentInvoiceJour()
    {
        XmlElement comprobanteElement;
        XmlElement emissorElement;
        XmlElement receptorElement;

        comprobanteElement = this.create_ComprobanteElement();
        emissorElement = this.create_EmisorElement();
        receptorElement = this.create_ReceptorElement();

        comprobanteElement.appendChild(emissorElement);
        comprobanteElement.appendChild(receptorElement);

        this.createLines(comprobanteElement);

        this.createTaxesLines(comprobanteElement);

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
    private XmlDocument doFormat()
    {
        XmlElement comprobanteElement;

        this.init();
        comprobanteElement = this.createXmlDocumentInvoiceJour();

        xmlDoc.appendChild(comprobanteElement);
        xmlDoc.insertBefore(xmlDoc.createXmlDeclaration('1.0', #UTF8, ''),
                            xmlDoc.documentElement());

        this.signDocument();

        return xmlDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPaymentSched</Name>
				<Source><![CDATA[
    protected str formatPaymentSched(PositiveNumber _installments)
    {
        #define.FormatPaymentMessagefor1Payment('Pago en una sola exhibicion')
        #define.FormatPaymentMessageforNPayments("Parcialidad 1 de \%1")

        if (!_installments)
        {
            return #FormatPaymentMessagefor1Payment;
        }

        return strfmt(#FormatPaymentMessageforNPayments, _installments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes invalid chars of a given string.
    /// </summary>
    /// <param name="_value">The string to be formatted.</param>
    /// <returns>The formated string.</returns>
    protected str formatString(str _value)
    {
        str formatedString;

        formatedString = strRem(_value,num2char(10));
        formatedString = strRem(formatedString,num2char(11));
        formatedString = strRem(formatedString,num2char(12));

        return formatedString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTaxType</Name>
				<Source><![CDATA[
    protected str formatTaxType(TaxType_MX _taxType)
    {
        str taxTypeStr;

        switch (_taxType)
        {
            case TaxType_MX::IEPS:
                taxTypeStr = 'IEPS';
                break;

            case TaxType_MX::ISR:
                taxTypeStr = 'ISR';
                break;

            case TaxType_MX::IVA:
                taxTypeStr = 'IVA';
                break;

            default:
                break;
        }

        return taxTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatInteger</Name>
				<Source><![CDATA[
    protected static internal str formatInteger(int _value, str _format = '{0:D2}')
    {
        return System.String::Format(_format, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmount</Name>
				<Source><![CDATA[
    protected str formatXmlAmount(real _number, int _decimals = 6)
    {
        return num2Str
        (
            abs(_number),
            1,
            _decimals, // decimal digits
            1, // Decimal separator (.)
            0 // No Thousands separator
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlDate</Name>
				<Source><![CDATA[
    protected str formatXmlDate(date _date)
    {
        str strFormat;

        strFormat = date2str(_date, 321, 2, 3, 2, 3, 4, DateFlags::None);

        return strFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the format class for the version 3.2 of the electronic invoice.
    /// </summary>
    protected void init()
    {
        defaultNameSpace = this.getDefaultNamespace();
        xsi = this.getXsi();
        schemaLocation = this.getSchemaLocation();

        nsmgr = new XmlNameSpaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace('cfdi', defaultNameSpace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultNamespace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default namespace.
    /// </summary>
    /// <returns>The namespace.</returns>
    [Hookable(false)]
    protected str getDefaultNamespace()
    {
        return 'http://www.sat.gob.mx/cfd/3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXsi</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the xsi.
    /// </summary>
    /// <returns>The xsi.</returns>
    [Hookable(false)]
    protected str getXsi()
    {
        return 'http://www.w3.org/2001/XMLSchema-instance';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the schema location.
    /// </summary>
    /// <returns>The schema location.</returns>
    [Hookable(false)]
    protected str getSchemaLocation()
    {
        return 'http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv32.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>EInvoiceXMLFormat_MX</c> class
    /// </summary>
    public void new()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMX00015, funcName());

        xmlDoc = new XmlDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceType</Name>
				<Source><![CDATA[
    protected str setInvoiceType()
    {
        #define.ingreso('ingreso')
        #define.egreso('egreso')

        return eInvoiceJourMap.totalAmount() < 0 ? #egreso : #ingreso;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeIfNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the attribute to the xmlElement if the value of the attribute is not empty.
    /// </summary>
    /// <param name="_xmlElement">
    /// Element to be updated.
    /// </param>
    /// <param name="_attributeName">
    /// The name of the attribite.
    /// </param>
    /// <param name="_attributeValue">
    /// The value of the attribute.
    /// </param>
    /// <returns>
    /// Updated xml element.
    /// </returns>
    protected XmlElement setAttributeIfNotEmpty(XmlElement _xmlElement, str _attributeName, str _attributeValue)
    {
        if(_attributeValue)
        {
            _xmlElement.setAttribute(_attributeName, _attributeValue);
        }

        return _xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocument</Name>
				<Source><![CDATA[
    protected void signDocument()
    {
        EInvoiceSignXmlDoc_MX signDocument;
        str sello;
        XmlElement comprobanteElementChanged;
        CFDDigestAlgorithm_MX algorithm;

        signDocument = new EInvoiceSignXmlDoc_MX();

        comprobanteElementChanged = xmlDoc.selectSingleNode(@'/cfdi:Comprobante', nsmgr);

        algorithm = EInvoiceCFDIParameters_MX::find().CFDIDigestAlgorithm;
        sello = EInvoiceSignXmlDoc_MX::getSello(this.getOriginalChain(), algorithm);

        comprobanteElementChanged.setAttribute('sello', sello);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalChain</Name>
				<Source><![CDATA[
    protected str getOriginalChain()
    {
        var xmlEInvReader = EInvoiceXMLDocReader_MX::constructFromResponseMessage(eInvoiceJourMap.eInvoiceVersion(), xmlDoc.toString());

        return xmlEinvReader.getOriginalChain();
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the electronic invoice version.
    /// </summary>
    /// <returns>The electronic version.</returns>
    protected str version()
    {
        return '3.2';
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressBlankSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// transfer original string may contain more than one blank space to string contain only one blank space between words.
    /// </summary>
    /// <param name="_original">
    /// the original string may contain more than one blank space.
    /// </param>
    /// <returns>
    /// output string contain only one blank space between words.
    /// </returns>
    protected str compressBlankSpace(str _original)
    {
        TextBuffer buffer = new TextBuffer();
        buffer.setText(_original);
        buffer.replace('[ ]+', ' ');

        return buffer.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>EInvoiceXMLFormat_MX</c> class
    /// </summary>
    /// <returns>The new instance</returns>
    public static EInvoiceXMLFormat_MX construct()
    {
        EInvoiceCFDIParameters_MX eInvoiceCFDIParam = EInvoiceCFDIParameters_MX::find();

        switch (eInvoiceCFDIParam.CFDIVersion)
        {
            case EInvoiceCFDIVersion_MX::V3_2:
                return new EInvoiceXMLFormat_MX();

            case EInvoiceCFDIVersion_MX::V3_3:
                return new EInvoiceXMLFormat_V3_3_MX();

            case EInvoiceCFDIVersion_MX::V4:
                return new EInvoiceXMLFormat_V4_MX();

            default:
                throw Error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a XML to cancel an electronic invoice.
    /// </summary>
    /// <param name="_eInvoiceJour">The electronic invoice to be cancelled.</param>
    /// <returns>The XML to cancel the invoice.</returns>
    public static str generateCancel(EInvoiceJour_MX _eInvoiceJour)
    {
        str ret;

        if (!BusinessDocumentParameters::isServiceProcessingEnabled(_eInvoiceJour, EInvoicingFeaturesForService::MX00010))
        {
            XmlDocument xmlDoc = XmlDocument::newBlank();

            XmlElement nodeCancela = xmlDoc.createElement('CancelaCFD');
            xmlDoc.appendChild(nodeCancela);

            XmlElement nodeCancelacion = xmlDoc.createElement('Cancelacion');
            nodeCancelacion.setAttribute('Fecha', DateTimeUtil::toStr(DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone())));
            nodeCancelacion.setAttribute('RfcEmisor', CompanyInfo::find().RFC_MX);

            nodeCancela.appendChild(nodeCancelacion);

            XmlElement nodeFolios = xmlDoc.createElement('Folios');

            XmlElement nodeFolio = xmlDoc.createElement('Folio');
            nodeFolio.setAttribute('FechaTimbrado', DateTimeUtil::toStr(EInvoiceDocState_MX::applyTimeZoneOffset(_eInvoiceJour.CFDIDateTimeStamp)));
            nodeFolio.setAttribute('UUID', _eInvoiceJour.CFDIUUID);
            nodeFolio.setAttribute('MotivoCancelacion', EInvoiceXMLFormat_MX::formatInteger(enum2int(_eInvoiceJour.CFDICancelReason)));

            if (_eInvoiceJour.CFDICancelReason == EInvoiceCFDICancelReason_MX::Substitution)
            {
                nodeFolio.setAttribute('FolioSustitucion', _eInvoiceJour.CancelSubstitution);
            }

            nodeFOlios.appendChild(nodeFolio);
            nodeCancelacion.appendChild(nodeFolios);
            ret = xmlDoc.toString();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCancelRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a XML to cancel an electronic invoice.
    /// </summary>
    /// <param name="_eInvoiceJour">
    /// The electronic invoice to be cancelled.
    /// </param>
    /// <returns>
    /// The XML to cancel the invoice.
    /// </returns>
    static str generateCancelRequest(EInvoiceJour_MX _eInvoiceJour)
    {
        XmlDocument     xmlDoc = XmlDocument::newBlank();
        XmlElement      nodeCancelacion = xmlDoc.createElement('ConsultaCancelacion');
        
        nodeCancelacion.setAttribute('RfcEmisor',CompanyInfo::find().RFC_MX);
        nodeCancelacion.setAttribute('ConsultaCancelacionId', _eInvoiceJour.CFDICancelationId);
        
        xmlDoc.appendChild(nodeCancelacion);
        
        return xmlDoc.toString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>