<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventoryAvailabilityPropertyBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailInventoryAvailabilityPropertyBatch</c> class is used to processing inventory availabilities to the target attributes.
/// </summary>
public class RetailInventoryAvailabilityPropertyBatch extends SysOperationServiceController implements BatchRetryable
{

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private static str RetailInventoryAvailabilityPropertyBatchName = "RetailInventoryAvailabilityPropertyBatch";

    private int64 dataAreaRowsInserted;
    private int64 dataAreaRowsDeleted;
    private int64 dataAreaRowsUpdated;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a RetailInventoryAvailabilityPropertyBatch. RetailInventoryAvailabilityPropertyBatch is used to execute processingOperations.
    /// </summary>
    /// <param name="_className">
    /// The class name to use when executing the service operation.
    /// </param>
    /// <param name="_methodName">
    /// The method name to use when executing the service operation.
    /// </param>
    internal void new(identifierName _className = classStr(RetailInventoryAvailabilityPropertyBatch), identifierName _methodName = methodStr(RetailInventoryAvailabilityPropertyBatch, processingOperations))
    {
        super(_className, _methodName);
        this.parmDialogCaption("@Retail:RetailInitializeInventoryProductAttributeDialogLabel");
        this.parmShowProgressForm(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailInventoryAvailabilityPropertyBatch controller = new RetailInventoryAvailabilityPropertyBatch();

        if (controller.prompt())
        {
            controller.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the class must run in batch or not.
    /// Forces the slider in the dialog to true.
    /// </summary>
    /// <returns>True since this class must always run in batch.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processing inventory availabilities to the target attributes.
    /// </summary>
    /// <param name="dataContract">
    /// The data contract for the batch.
    /// </param>
    public void processingOperations(RetailInventoryAvailabilityPropertyBatchDataContract dataContract)
    {
        RetailParameters retailParameters = RetailParameters::find();

        EcoResAttribute attribute = EcoResAttribute::find(retailParameters.InventoryProductAttribute);
        EcoResTextValue textValue = EcoResTextValue::find(retailParameters.InventoryProductOutOfStockAttributeValue);

        if (!attribute || !textValue)
        {
            // No attribute is configured to be populated.
            eventSource.EventWriteNoInventoryAvailabilityFound();
            throw error("@Retail:RetailInventoryAvailabilityBatchOutOfStockAttributeOrValueNotFoundErrorMessage");
        }

        boolean isRetailDisableInventoryAvailabilityPropertyCacheFlightEnabled = RetailDisableInventoryAvailabilityPropertyCacheFlight::instance().isEnabled();
        if(isRetailDisableInventoryAvailabilityPropertyCacheFlightEnabled)
        {
            eventSource.EventWriteProductAvailabilityJobBegin(RetailInventoryAvailabilityPropertyBatchName);
        }
        else
        {
            eventSource.EventWriteProductAvailabilityJobBegin(tableStr(RetailLevelAwareOutOfStockItems));
        }
        System.Diagnostics.Stopwatch totalJobStopWatch = new System.Diagnostics.Stopwatch();
        this.startNewTiming(totalJobStopWatch);
        int64 durationInMs;
        int64 totalRowsAffected = 0;
        dataAreaRowsInserted = 0;
        dataAreaRowsDeleted = 0;

        eventSource.EventWriteRunningInventoryAvailabilityPropertyBatch(attribute.RecId, textValue.RecId);
        str outOfStockValue = EcoResTextValue::find(retailParameters.InventoryProductOutOfStockAttributeValue).TextValue;
        DataAreaId currentDataAreaId = CompanyInfo::getDataArea(CompanyInfo::Current());
        EcoResTextValue availableAttribute = EcoResTextValue::find(retailParameters.InventoryProductAvailableAttributeValue);
        str availableValue = availableAttribute ? availableAttribute.TextValue : "";

        if (!availableValue)
        {
            RetailInventoryLevelProfileRange availableRange;
            select firstonly availableRange where availableRange.Code == RetailInventoryLevelProfileHelper::AvailableLevelCode;

            availableValue = availableRange.Label;
            if (!availableRange)
            {
                availableValue =  RetailInventoryLevelProfileHelper::AvailableLevelInitialLabel;
            }
        }

        EcoResAttribute sortableAttribute = EcoResAttribute::find(retailParameters.InventoryProductAvailabilitySortableAttribute);
        RetailChannelTable retailChannelTable;
        while select retailChannelTable where
            retailChannelTable.inventLocationDataAreaId == currentDataAreaId &&
            (retailChannelTable.ChannelType == RetailChannelType::SharePointOnlineStore
            || retailChannelTable.ChannelType == RetailChannelType::OnlineStore)
        {
            try
            {
                ttsbegin;
                this.processAttributesForChannel(retailChannelTable, attribute, sortableAttribute, outOfStockValue, availableValue, retailParameters);
                ttscommit;
            }
            catch
            {
                // Don't block running other channels.
                eventSource.EventWriteExceptionPopulateAttributesForChannel(retailChannelTable.RecId);
                ttsabort;
            }
         }

        // Keep track of how many total rows are affected by the whole job
        durationInMs = this.stopTimingAndGetDurationInMs(totalJobStopWatch);
        if (isRetailDisableInventoryAvailabilityPropertyCacheFlightEnabled)
        {
            totalRowsAffected = dataAreaRowsUpdated;
            eventSource.EventWriteProductAvailabilityJobEnd(RetailInventoryAvailabilityPropertyBatchName, /* Use 0 for perforamnce */ 0, totalRowsAffected, durationInMs);
        }
        else
        {
            totalRowsAffected = dataAreaRowsDeleted + dataAreaRowsInserted;
            eventSource.EventWriteProductAvailabilityJobEnd(tableStr(RetailLevelAwareOutOfStockItems), /* Use 0 for perforamnce */ 0, totalRowsAffected, durationInMs);
        }

        eventSource.EventWriteFinishInventoryAvailabilityPropertyBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAttributesForChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processing inventory availabilities for a specific channel.
    /// </summary>
    /// <param name="_retailChannelTable">
    /// The retail channel table.
    /// </param>
    /// <param name="_attribute">
    /// The inventory attribute.
    /// </param>
    /// <param name="_sortableAttribute">
    /// The inventory sortable attribute.
    /// </param>
    /// <param name="_outOfStockValue">
    /// The out of stock value.
    /// </param>
    /// <param name="_availableValue">
    /// The available value.
    /// </param>
    /// <param name="_retailParameters">
    /// Retail parameters.
    /// </param>
    private void processAttributesForChannel(RetailChannelTable _retailChannelTable, EcoResAttribute _attribute, EcoResAttribute _sortableAttribute, str _outOfStockValue, str _availableValue, RetailParameters _retailParameters)
    {
        RetailInternalOrganization retailInternalOrganization = RetailInternalOrganization::findByChannelId(_retailChannelTable.RecId);

        eventSource.EventWritePopulatingOutOfStockItems(_retailChannelTable.RecId);
        boolean isRetailPopulateOutOfStockItemsSplitQueryFlightEnabled = RetailPopulateOutOfStockItemsSplitQueryFlight::instance().isEnabled();
        TmpRetailLevelAwareOutOfStockItems tmpOutOfStockItems = isRetailPopulateOutOfStockItemsSplitQueryFlightEnabled
            ? RetailInventoryAvailabilityPropertyBatch::populateOutOfStockItemsV2(_retailChannelTable, _retailParameters)
            : RetailInventoryAvailabilityPropertyBatch::populateOutOfStockItems(_retailChannelTable, _retailParameters);
        int64 rowCount = tmpOutOfStockItems.RowCount();
        eventSource.EventWritePopulatingInventoryAttributeValues(_retailChannelTable.RecId, rowCount);

        boolean isRetailDisableInventoryAvailabilityPropertyCacheFlightEnabled = RetailDisableInventoryAvailabilityPropertyCacheFlight::instance().isEnabled();
        boolean changed = false;
        if (isRetailDisableInventoryAvailabilityPropertyCacheFlightEnabled)
        {
            changed = this.updateAttributesNotUsingOutOfStockCacheTable(_retailChannelTable, _attribute, _sortableAttribute, _outOfStockValue, _availableValue, _retailParameters, tmpOutOfStockitems, retailInternalOrganization);
        }
        else
        {
            changed = this.updateAttributesUsingOutOfStockCacheTable(_retailChannelTable, _attribute, _sortableAttribute, _outOfStockValue, _availableValue, _retailParameters, tmpOutOfStockitems, retailInternalOrganization);
        }

        // Publish attribute values changes after updating them.
        if (changed)
        {
            Args _args = new Args();
            _args.record(retailInternalOrganization);
            RetailInternalOrgUpdateChannel::main(_args);
        }

        eventSource.EventWritePopulatedInventoryProductAttributeValues(_retailChannelTable.RecId, changed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributesUsingOutOfStockCacheTable</Name>
				<Source><![CDATA[
    private boolean updateAttributesUsingOutOfStockCacheTable(RetailChannelTable _retailChannelTable, EcoResAttribute _attribute, EcoResAttribute _sortableAttribute, str _outOfStockValue, str _availableValue, RetailParameters _retailParameters, TmpRetailLevelAwareOutOfStockItems tmpOutOfStockitems, RetailInternalOrganization retailInternalOrganization)
    {
        RetailLevelAwareOutOfStockItems levelAwareOutOfStockItems;

        levelAwareOutOfStockItems.skipDatabaseLog(true);
        levelAwareOutOfStockItems.skipEvents(true);

        System.Diagnostics.Stopwatch subJobStopWatch = new System.Diagnostics.Stopwatch();
        int64 durationInMs;

        // Insert
        eventSource.EventWriteProductAvailabilityJobInsertBegin(tableStr(RetailLevelAwareOutOfStockItems), _retailChannelTable.RecId);
        this.startNewTiming(subJobStopWatch);

        boolean changed = false;
        while select ItemId from tmpOutOfStockitems
                    notexists join levelAwareOutOfStockItems
                        where tmpOutOfStockitems.ItemId == levelAwareOutOfStockItems.ItemId
                            && levelAwareOutOfStockItems.RetailChannel == _retailChannelTable.RecId
        {
            changed = true;
            RetailInventoryAvailabilityPropertyBatch::addOrDeleteAttributeValue(tmpOutOfStockitems.ItemId, true, _outOfStockValue, _availableValue, retailInternalOrganization, _attribute);
            RetailInventoryAvailabilityPropertyBatch::addOrDeleteSortableAttributeValue(tmpOutOfStockitems.ItemId, true, retailInternalOrganization, _sortableAttribute);
        }

        int64 rowsInserted = RetailInventoryAvailabilityPropertyBatch::insertOutOfStockItems(_retailChannelTable, levelAwareOutOfStockItems,  tmpOutOfStockItems);
        dataAreaRowsInserted += rowsInserted;
        durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
        eventSource.EventWriteProductAvailabilityJobInsertEnd(tableStr(RetailLevelAwareOutOfStockItems), _retailChannelTable.RecId, rowsInserted, durationInMs);

        while select ItemId from levelAwareOutOfStockItems
                        where levelAwareOutOfStockItems.RetailChannel == _retailChannelTable.RecId
                    notexists join tmpOutOfStockitems
                        where tmpOutOfStockitems.ItemId == levelAwareOutOfStockItems.ItemId
        {
            changed = true;
            RetailInventoryAvailabilityPropertyBatch::addOrDeleteAttributeValue(levelAwareOutOfStockItems.ItemId, false, _outOfStockValue, _availableValue, retailInternalOrganization, _attribute);
            RetailInventoryAvailabilityPropertyBatch::addOrDeleteSortableAttributeValue(levelAwareOutOfStockItems.ItemId, false, retailInternalOrganization, _sortableAttribute);
        }

        // Delete
        eventSource.EventWriteProductAvailabilityJobDeleteBegin(tableStr(RetailLevelAwareOutOfStockItems), _retailChannelTable.RecId);
        this.startNewTiming(subJobStopWatch);

        delete_from levelAwareOutOfStockItems
                    where levelAwareOutOfStockItems.RetailChannel == _retailChannelTable.RecId
                notexists join tmpOutOfStockitems
                    where tmpOutOfStockitems.ItemId == levelAwareOutOfStockItems.ItemId;

        int64 rowsDeleted = levelAwareOutOfStockItems.RowCount();
        dataAreaRowsDeleted += rowsDeleted;
        durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
        eventSource.EventWriteProductAvailabilityJobDeleteEnd(tableStr(RetailLevelAwareOutOfStockItems), _retailChannelTable.RecId, rowsDeleted, durationInMs);

        return changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributesNotUsingOutOfStockCacheTable</Name>
				<Source><![CDATA[
    private boolean updateAttributesNotUsingOutOfStockCacheTable(RetailChannelTable _retailChannelTable, EcoResAttribute _attribute, EcoResAttribute _sortableAttribute, str _outOfStockValue, str _availableValue, RetailParameters _retailParameters, TmpRetailLevelAwareOutOfStockItems tmpOutOfStockitems, RetailInternalOrganization retailInternalOrganization)
    {
        System.Diagnostics.Stopwatch subJobStopWatch = new System.Diagnostics.Stopwatch();
        int64 durationInMs;

        // Update
        eventSource.EventWriteProductAvailabilityJobUpdateBegin(tableStr(EcoResAttributeValue), _retailChannelTable.RecId);
        this.startNewTiming(subJobStopWatch);

        // Add or delete attribute for out of stock items
        eventSource.EventWriteInventoryAvailabilityPropertyBatchUpdateOutOfStockItemsBegin(RetailInventoryAvailabilityPropertyBatchName, _retailChannelTable.RecId);
        boolean changed = false;
        int64 rowsAffected = 0;
        while select ItemId from tmpOutOfStockitems
        {
            changed = true;
            boolean updated = RetailInventoryAvailabilityPropertyBatch::addOrDeleteAttributeValue(tmpOutOfStockitems.ItemId, true, _outOfStockValue, _availableValue, retailInternalOrganization, _attribute);
            RetailInventoryAvailabilityPropertyBatch::addOrDeleteSortableAttributeValue(tmpOutOfStockitems.ItemId, true, retailInternalOrganization, _sortableAttribute);
            if (updated)
            {
                rowsAffected++;
            }
        }
        durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
        eventSource.EventWriteInventoryAvailabilityPropertyBatchUpdateOutOfStockItemsEnd(RetailInventoryAvailabilityPropertyBatchName, _retailChannelTable.RecId, rowsAffected, durationInMs);

        // Add or delete attribute for in stock items
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        InventTable inventTable;
        RetailChannelAssortedProductView retailChannelAssortedProductView;
        while select ItemId from inventTable group by inventTable.ItemId
            join retailChannelAssortedProductView
                where retailChannelAssortedProductView.PRODUCTID == inventTable.PRODUCT
                    && retailChannelAssortedProductView.OMOPERATINGUNITID == _retailChannelTable.OMOperatingUnitID
                    && retailChannelAssortedProductView.ValidFrom <= currentDate
                    && retailChannelAssortedProductView.ValidTo >= currentDate
            notexists join tmpOutOfStockitems
                where tmpOutOfStockitems.ItemId == inventTable.ItemId
        {
            changed = true;
            boolean updated = RetailInventoryAvailabilityPropertyBatch::addOrDeleteAttributeValue(inventTable.ItemId, false, _outOfStockValue, _availableValue, retailInternalOrganization, _attribute);
            RetailInventoryAvailabilityPropertyBatch::addOrDeleteSortableAttributeValue(inventTable.ItemId, false, retailInternalOrganization, _sortableAttribute);
            if (updated)
            {
                rowsAffected++;
            }
        }

        dataAreaRowsUpdated += rowsAffected;
        durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
        eventSource.EventWriteProductAvailabilityJobUpdateEnd(RetailInventoryAvailabilityPropertyBatchName, _retailChannelTable.RecId, rowsAffected, durationInMs);

        return changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOutOfStockItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert out of stock items to the temp table.
    /// </summary>
    /// <param name="_retailChannelTable">
    /// The retail channel table.
    /// </param>
    /// <param name="_levelAwareOutOfStockItems">
    /// The level aware out of stock items.
    /// </param>
    /// <param name="_tmpOutOfStockItems">
    /// The temp table for level aware out of stock items.
    /// </param>
    /// <returns>The number of rows inserted.</returns>
    private static int64 insertOutOfStockItems(RetailChannelTable _retailChannelTable, RetailLevelAwareOutOfStockItems _levelAwareOutOfStockItems, TmpRetailLevelAwareOutOfStockItems _tmpOutOfStockItems)
    {
        SysDaInsertObject insertObject = new SysDaInsertObject(_levelAwareOutOfStockItems);
        insertObject.fields()
            .add(fieldStr(RetailLevelAwareOutOfStockItems, ItemId))
            .add(fieldStr(RetailLevelAwareOutOfStockItems, RetailChannel));

        SysDaQueryObject sourceDataQuery = new SysDaQueryObject(_tmpOutOfStockItems);
        sourceDataQuery.projection()
            .add(fieldStr(TmpRetailLevelAwareOutOfStockItems, ItemId))
            .addValue(_retailChannelTable.RecId);

        SysDaQueryObject outOfStockDataQuery = new SysDaQueryObject(_levelAwareOutOfStockItems);
        outOfStockDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_levelAwareOutOfStockItems, fieldStr(RetailLevelAwareOutOfStockItems, ItemId)),
            new SysDaFieldExpression(_tmpOutOfStockItems, fieldStr(TmpRetailLevelAwareOutOfStockItems, ItemId))
        ).and(new SysDaEqualsExpression(
            new SysDaFieldExpression(_levelAwareOutOfStockItems, fieldStr(RetailLevelAwareOutOfStockItems, RetailChannel)),
            new SysDaValueExpression(_retailChannelTable.RecId)
        )));

        sourceDataQuery.joinClause(SysDaJoinKind::NotExistsJoin, outOfStockDataQuery);

        insertObject.query(sourceDataQuery);
        SysDaInsertStatement insertStmt = new SysDaInsertStatement();
        insertStmt.insert(insertObject);

        return _levelAwareOutOfStockItems.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOutOfStockItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate out of stock items.
    /// </summary>
    /// <param name="_retailChannelTable">
    /// The retail channel table.
    /// </param>
    /// <param name="_retailParameters">
    /// The retail parameters.
    /// </param>
    /// <returns>
    /// Returns the temp table containing the out of stock items.
    /// </returns>
    private static TmpRetailLevelAwareOutOfStockItems populateOutOfStockItems(RetailChannelTable _retailChannelTable, RetailParameters _retailParameters)
    {
        TmpRetailLevelAwareOutOfStockItems tmpOutOfStockItems;
        RetailChannelAssortedProductView retailChannelAssortedProductView;
        InventTableModule inventTableModule;
        InventTable inventTable;
        RetailInventoryLevelProfile levelProfile;
        RetailInventoryLevelProfileRange profileRange;
        RetailLevelAwareAvailabilityView retailLevelAwareAvailabilityView;
        InventModelGroupItem inventModelGroupItem;
        InventModelGroup inventModelGroup;

        tmpOutOfStockItems.skipDatabaseLog(true);
        tmpOutOfStockItems.skipEvents(true);

        SysDaInsertObject insertObject = new SysDaInsertObject(tmpOutOfStockItems);
        insertObject.fields()
            .add(fieldStr(TmpRetailLevelAwareOutOfStockItems, ItemId));

        SysDaQueryObject sourceDataQuery = new SysDaQueryObject(retailChannelAssortedProductView);
        sourceDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, OMOperatingUnitId)),
            new SysDaValueExpression(_retailChannelTable.OMOperatingUnitID)
        ).and(new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, ValidFrom)),
            new SysDaValueExpression(DateTimeUtil::utcNow())
        )).and(new SysDaGreaterThanOrEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, ValidTo)),
            new SysDaValueExpression(DateTimeUtil::utcNow())
        )));

        SysDaQueryObject inventTableDataQuery = new SysDaQueryObject(inventTable);
        SysDaQueryObject inventModelGroupItemDataQuery = new SysDaQueryObject(inventModelGroupItem);
        SysDaQueryObject inventModelGroupDataQuery = new SysDaQueryObject(inventModelGroup);

        inventTableDataQuery.projection()
            .add(fieldStr(InventTable, ItemId));
        inventTableDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, ProductId)),
            new SysDaFieldExpression(inventTable, fieldStr(InventTable, Product))
        ));

        inventTableDataQuery.joinClause(SysDaJoinKind::InnerJoin, inventModelGroupItemDataQuery);
        inventModelGroupItemDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(inventTable, fieldStr(InventTable, ItemId)),
            new SysDaFieldExpression(inventModelGroupItem, fieldStr(InventModelGroupItem, ItemId))
        ));

        inventModelGroupItemDataQuery.joinClause(SysDaJoinKind::InnerJoin, inventModelGroupDataQuery);
        inventModelGroupDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(inventModelGroupItem, fieldStr(InventModelGroupItem, ModelGroupId)),
            new SysDaFieldExpression(inventModelGroup, fieldStr(InventModelGroup, ModelGroupId))
        ).and(new SysDaEqualsExpression(
            new SysDaFieldExpression(inventModelGroup, fieldStr(InventModelGroup, StockedProduct)),
            new SysDaValueExpression(NoYes::Yes)
        )));

        inventTableDataQuery.groupByClause()
            .add(fieldStr(InventTable, ItemId));
        sourceDataQuery.joinClause(SysDaJoinKind::InnerJoin, inventTableDataQuery);

        SysDaQueryObject availabilityDataQuery = new SysDaQueryObject(retailLevelAwareAvailabilityView);
        SysDaBinaryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(retailLevelAwareAvailabilityView, fieldStr(RetailLevelAwareAvailabilityView, InventLocationId)),
            new SysDaValueExpression(_retailChannelTable.inventLocation)
        ).and(new SysDaEqualsExpression(
            new SysDaFieldExpression(retailLevelAwareAvailabilityView, fieldStr(RetailLevelAwareAvailabilityView, ItemId)),
            new SysDaFieldExpression(inventTable, fieldStr(InventTable, ItemId))
        ));
        
        if (_retailParameters.InventoryLevelCalculationMode == RetailInventoryLevelCalculationMode::PhysicalAvailable)
        {
            whereClause = whereClause.and(new SysDaGreaterThanExpression(
                new SysDaFieldExpression(retailLevelAwareAvailabilityView, fieldStr(RetailLevelAwareAvailabilityView, PhysicalAvailable)),
                new SysDaValueExpression(0)
            ));
        }
        else
        {
            whereClause = whereClause.and(new SysDaGreaterThanExpression(
                new SysDaFieldExpression(retailLevelAwareAvailabilityView, fieldStr(RetailLevelAwareAvailabilityView, TotalAvailable)),
                new SysDaValueExpression(0)
            ));
        }
        availabilityDataQuery.whereClause(whereClause);
        inventModelGroupDataQuery.joinClause(SysDaJoinKind::NotExistsJoin, availabilityDataQuery);

        insertObject.query(sourceDataQuery);
        SysDaInsertStatement insertStmt = new SysDaInsertStatement();
        insertStmt.insert(insertObject);

        return tmpOutOfStockItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOutOfStockItemsV2</Name>
				<Source><![CDATA[
    private static TmpRetailLevelAwareOutOfStockItems populateOutOfStockItemsV2(RetailChannelTable _retailChannelTable, RetailParameters _retailParameters)
    {
        TmpRetailLevelAwareOutOfStockItems tmpOutOfStockItems;
        RetailChannelAssortedProductView retailChannelAssortedProductView;
        InventTableModule inventTableModule;
        InventTable inventTable;
        RetailInventoryLevelProfile levelProfile;
        RetailInventoryLevelProfileRange profileRange;
        RetailLevelAwareAvailabilityView retailLevelAwareAvailabilityView;
        InventModelGroupItem inventModelGroupItem;
        InventModelGroup inventModelGroup;
        TmpRetailLevelAwareAvailableStockItems tmpAvailableStockItems;

        tmpOutOfStockItems.skipDatabaseLog(true);
        tmpOutOfStockItems.skipEvents(true);

        tmpAvailableStockItems.skipDatabaseLog(true);
        tmpAvailableStockItems.skipEvents(true);

        SysDaInsertObject insertObject = new SysDaInsertObject(tmpOutOfStockItems);
        insertObject.fields()
            .add(fieldStr(TmpRetailLevelAwareOutOfStockItems, ItemId));

        SysDaQueryObject sourceDataQuery = new SysDaQueryObject(retailChannelAssortedProductView);
        sourceDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, OMOperatingUnitId)),
            new SysDaValueExpression(_retailChannelTable.OMOperatingUnitID)
        ).and(new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, ValidFrom)),
            new SysDaValueExpression(DateTimeUtil::utcNow())
        )).and(new SysDaGreaterThanOrEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, ValidTo)),
            new SysDaValueExpression(DateTimeUtil::utcNow())
        )));

        SysDaQueryObject inventTableDataQuery = new SysDaQueryObject(inventTable);
        SysDaQueryObject inventModelGroupItemDataQuery = new SysDaQueryObject(inventModelGroupItem);
        SysDaQueryObject inventModelGroupDataQuery = new SysDaQueryObject(inventModelGroup);

        inventTableDataQuery.projection()
            .add(fieldStr(InventTable, ItemId));
        inventTableDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(retailChannelAssortedProductView, fieldStr(RetailChannelAssortedProductView, ProductId)),
            new SysDaFieldExpression(inventTable, fieldStr(InventTable, Product))
        ));

        inventTableDataQuery.joinClause(SysDaJoinKind::InnerJoin, inventModelGroupItemDataQuery);
        inventModelGroupItemDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(inventTable, fieldStr(InventTable, ItemId)),
            new SysDaFieldExpression(inventModelGroupItem, fieldStr(InventModelGroupItem, ItemId))
        ));

        inventModelGroupItemDataQuery.joinClause(SysDaJoinKind::InnerJoin, inventModelGroupDataQuery);
        inventModelGroupDataQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(inventModelGroupItem, fieldStr(InventModelGroupItem, ModelGroupId)),
            new SysDaFieldExpression(inventModelGroup, fieldStr(InventModelGroup, ModelGroupId))
        ).and(new SysDaEqualsExpression(
            new SysDaFieldExpression(inventModelGroup, fieldStr(InventModelGroup, StockedProduct)),
            new SysDaValueExpression(NoYes::Yes)
        )));

        inventTableDataQuery.groupByClause()
            .add(fieldStr(InventTable, ItemId));
        sourceDataQuery.joinClause(SysDaJoinKind::InnerJoin, inventTableDataQuery);

        if (_retailParameters.InventoryLevelCalculationMode == RetailInventoryLevelCalculationMode::PhysicalAvailable)
        {
            insert_recordset tmpAvailableStockItems(ItemId)
            select ItemId from retailLevelAwareAvailabilityView
                group by ItemId
                where retailLevelAwareAvailabilityView.PhysicalAvailable > 0
                && retailLevelAwareAvailabilityView.InventLocationId == _retailChannelTable.inventLocation;
        }
        else
        {
            insert_recordset tmpAvailableStockItems(ItemId)
            select ItemId from retailLevelAwareAvailabilityView
                group by ItemId
                where retailLevelAwareAvailabilityView.TotalAvailable > 0
                && retailLevelAwareAvailabilityView.InventLocationId == _retailChannelTable.inventLocation;
        }

        SysDaQueryObject availabilityDataQuery = new SysDaQueryObject(tmpAvailableStockItems);
        SysDaBinaryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(tmpAvailableStockItems, fieldStr(TmpRetailLevelAwareAvailableStockItems, ItemId)),
            new SysDaFieldExpression(inventTable, fieldStr(InventTable, ItemId))
        );

        availabilityDataQuery.whereClause(whereClause);

        inventModelGroupDataQuery.joinClause(SysDaJoinKind::NotExistsJoin, availabilityDataQuery);

        insertObject.query(sourceDataQuery);
        SysDaInsertStatement insertStmt = new SysDaInsertStatement();
        insertStmt.insert(insertObject);

        return tmpOutOfStockItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrDeleteAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update or insert attribute values.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_isOutOfStock">
    /// The flag indicating whether the item is out of stock or not.
    /// </param>
    /// <param name="_outOfStockText">
    /// The out of stock text.
    /// </param>
    /// <param name="_availableText">
    /// The available text.
    /// </param>
    /// <param name="_internalOrganization">
    /// The internal organization targetting for.
    /// </param>
    /// <param name="_attribute">
    /// The inventory attribute.
    /// </param>
    /// <returns>The flag indicating whether there's attribute update.</returns>
    private static boolean addOrDeleteAttributeValue(ItemId _itemId, boolean _isOutOfStock, AttributeValueText _outOfStockText, AttributeValueText _availableText, RetailInternalOrganization _internalOrganization, EcoResAttribute _attribute)
    {
        InventTable inventTable = InventTable::find(_itemId);
        EcoResTextValue ecoResValue;
        EcoResAttributeValue ecoResAttributeValue;
        RetailInternalOrgProductInstanceValView retailProdIntOrgInstValue;
        boolean updated = false;
        boolean isRetailNotDeleteInventoryAvailableAttributeFlightEnabled = RetailNotDeleteInventoryAvailableAttributeFlight::instance().isEnabled();

        select forupdate firstonly ecoResValue
            join forupdate firstonly ecoResAttributeValue
                where ecoResAttributeValue.Attribute == _attribute.RecId
                    && ecoResAttributeValue.Value == ecoResValue.RecId
            exists join retailProdIntOrgInstValue
                where retailProdIntOrgInstValue.InstanceValue == ecoResAttributeValue.InstanceValue
                    && retailProdIntOrgInstValue.Product == inventTable.Product
                    && retailProdIntOrgInstValue.InternalOrganization == _internalOrganization.RecId;
        if (isRetailNotDeleteInventoryAvailableAttributeFlightEnabled)
        {
            if (ecoResValue)
            {
                str newValue = _isOutOfStock ? _outOfStockText : _availableText;
                if (ecoResValue.TextValue != newValue)
                {
                    ecoResValue.TextValue = newValue;
                    ecoResValue.update();
                    updated = true;
                }
            }
            else
            {
                RetailInternalOrgProduct retailInternalOrgProduct = RetailInternalOrgProduct::findOrCreateByInternalOrgProduct(_internalOrganization.RecId, inventTable.Product);
                RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(retailInternalOrgProduct.RecId);

                EcoResTextValue ecoResTextValue;
                ecoResTextValue.TextValue = _isOutOfStock ? _outOfStockText : _availableText;
                ecoResTextValue.insert();

                ecoResAttributeValue.Value = ecoResTextValue.RecId;
                ecoResAttributeValue.InstanceValue = retailInternalOrgProductInstanceValue.RecId;
                ecoResAttributeValue.Attribute = _attribute.RecId;
                ecoResAttributeValue.insert();
                updated = true;
            }
        }
        else
        {
            if (ecoResValue)
            {
                if (!_isOutOfStock)
                {
                    RetailInternalOrgProduct retailInternalOrgProduct = RetailInternalOrgProduct::findByInternalOrgProduct(_internalOrganization.RecId, inventTable.Product, true);
                    RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findByInternalOrgProduct(retailInternalOrgProduct.RecId, true);
                    ecoResValue.delete();
                    ecoResAttributeValue.delete();
                    retailInternalOrgProductInstanceValue.delete();
                    retailInternalOrgProduct.delete();
                    updated = true;
                }
                else if (ecoResValue.TextValue != _outOfStockText)
                {
                    ecoResValue.TextValue = _outOfStockText;
                    ecoResValue.update();
                    updated = true;
                }
            }
            else if (_isOutOfStock)
            {
                RetailInternalOrgProduct retailInternalOrgProduct = RetailInternalOrgProduct::findOrCreateByInternalOrgProduct(_internalOrganization.RecId, inventTable.Product);
                RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(retailInternalOrgProduct.RecId);

                EcoResTextValue ecoResTextValue;
                ecoResTextValue.TextValue = _outOfStockText;
                ecoResTextValue.insert();

                ecoResAttributeValue.Value = ecoResTextValue.RecId;
                ecoResAttributeValue.InstanceValue = retailInternalOrgProductInstanceValue.RecId;
                ecoResAttributeValue.Attribute = _attribute.RecId;
                ecoResAttributeValue.insert();
                updated = true;
            }
        }

        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrDeleteSortableAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update or insert sortable attribute values.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_isOutOfStock">
    /// The flag indicating whether the item is out of stock or not.
    /// </param>
    /// <param name="_internalOrganization">
    /// The internal organization targetting for.
    /// </param>
    /// <param name="_sortableAttribute">
    /// The inventory sortable attribute.
    /// </param>
    private static void addOrDeleteSortableAttributeValue(ItemId _itemId, boolean _isOutOfStock, RetailInternalOrganization _internalOrganization, EcoResAttribute _sortableAttribute)
    {
        // for customer who update from old veresion, this attribute will be null
        if (!_sortableAttribute)
        {
            return;
        }

        InventTable inventTable = InventTable::find(_itemId);
        EcoResBooleanValue ecoResValue;
        EcoResAttributeValue ecoResAttributeValue;
        RetailInternalOrgProductInstanceValView retailProdIntOrgInstValue;
        boolean isRetailNotDeleteInventoryAvailableAttributeFlightEnabled = RetailNotDeleteInventoryAvailableAttributeFlight::instance().isEnabled();

        select forupdate firstonly ecoResValue
            join forupdate firstonly ecoResAttributeValue
                where ecoResAttributeValue.Attribute == _sortableAttribute.RecId
                    && ecoResAttributeValue.Value == ecoResValue.RecId
            exists join retailProdIntOrgInstValue
                where retailProdIntOrgInstValue.InstanceValue == ecoResAttributeValue.InstanceValue
                    && retailProdIntOrgInstValue.Product == inventTable.Product
                    && retailProdIntOrgInstValue.InternalOrganization == _internalOrganization.RecId;
        if (isRetailNotDeleteInventoryAvailableAttributeFlightEnabled)
        {
            if (ecoResValue)
            {
                boolean newValue = _isOutOfStock ? false : true;
                if (ecoResValue.BooleanValue != newValue)
                {
                    ecoResValue.BooleanValue = newValue;
                    ecoResValue.update();
                }
            }
            else
            {
                RetailInternalOrgProduct retailInternalOrgProduct = RetailInternalOrgProduct::findOrCreateByInternalOrgProduct(_internalOrganization.RecId, inventTable.Product);
                RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(retailInternalOrgProduct.RecId);

                EcoResBooleanValue ecoResBooleanValue;
                ecoResBooleanValue.BooleanValue = _isOutOfStock ? false : true;
                ecoResBooleanValue.insert();

                ecoResAttributeValue.Value = ecoResBooleanValue.RecId;
                ecoResAttributeValue.InstanceValue = retailInternalOrgProductInstanceValue.RecId;
                ecoResAttributeValue.Attribute = _sortableAttribute.RecId;
                ecoResAttributeValue.insert();
            }
        }
        else
        {
            if (ecoResValue)
            {
                if (!_isOutOfStock)
                {
                    RetailInternalOrgProduct retailInternalOrgProduct = RetailInternalOrgProduct::findByInternalOrgProduct(_internalOrganization.RecId, inventTable.Product, true);
                    ecoResValue.delete();
                    ecoResAttributeValue.delete();
                    retailInternalOrgProduct.delete();
                }
                else if (ecoResValue.BooleanValue != false)
                {
                    ecoResValue.BooleanValue = false;
                    ecoResValue.update();
                }
            }
            else if (_isOutOfStock)
            {
                RetailInternalOrgProduct retailInternalOrgProduct = RetailInternalOrgProduct::findOrCreateByInternalOrgProduct(_internalOrganization.RecId, inventTable.Product);
                RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(retailInternalOrgProduct.RecId);

                EcoResBooleanValue ecoResBooleanValue;
                ecoResBooleanValue.BooleanValue = false;
                ecoResBooleanValue.insert();

                ecoResAttributeValue.Value = ecoResBooleanValue.RecId;
                ecoResAttributeValue.InstanceValue = retailInternalOrgProductInstanceValue.RecId;
                ecoResAttributeValue.Attribute = _sortableAttribute.RecId;
                ecoResAttributeValue.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startNewTiming</Name>
				<Source><![CDATA[
    private void startNewTiming(System.Diagnostics.Stopwatch jobStopWatch)
    {
        jobStopWatch.Reset();
        jobStopWatch.Start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopTimingAndGetDurationInMs</Name>
				<Source><![CDATA[
    private int64 stopTimingAndGetDurationInMs(System.Diagnostics.Stopwatch jobStopWatch)
    {
        jobStopWatch.Stop();
        System.TimeSpan timeSpan = jobStopWatch.Elapsed;
        int64 durationInMs = timeSpan.TotalMilliseconds;
        return durationInMs;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>