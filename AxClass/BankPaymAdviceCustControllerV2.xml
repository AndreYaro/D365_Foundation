<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceCustControllerV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymAdviceCustControllerV2</c> class controls the operation of the <c>BankPaymAdviceCustV2</c> report.
/// If default parameters are provided, then the controller will accept the given parameters and execute without a user interface.
/// Otherwise, it will allow the user to specify criteria.
/// </summary>
public class BankPaymAdviceCustControllerV2 extends SrsPrintMgmtController implements BatchRetryable, ERIDestinationAwareController
{
    private readonly Map customerPrintMgmtSettingsValidation = new Map(Types::Int64, Types::Enum);
    private BankPaymAdviceDefaultParameters defaultParameters;
    private CBDDestinationsController cbdDestinationsController = CBDDestinationsController::tryCreateInstance();
    private boolean hasError = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    public SysOperationStartResult startOperation()
    {
        this.batchInfo().parmRetriesOnFailure(0);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        BankPaymAdvicePrintMgmtReportFormatSetup::setDefaultFormat(PrintMgmtDocumentType::CustPaymAdvice);

        if (defaultParameters != null)
        {
            this.printDefaultParametersList();
        }
        else
        {
            this.printContractQuery();
        }

        if (hasError)
        {
            throw error('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDefaultParametersList</Name>
				<Source><![CDATA[
    private void printDefaultParametersList()
    {
        SRSPrintDestinationSettings printSettings = defaultParameters.printSettings;
        BankPaymAdviceContract contract = defaultParameters.BankPaymAdviceContract;
        List paymentLines = defaultParameters.paymentList;

        this.parmReportContract().parmRdpContract(contract);

        ListEnumerator paymentLineEnumerator = paymentLines.getEnumerator();
        LedgerJournalTrans ledgerJournalTrans;

        while (paymentLineEnumerator.moveNext() && !this.parmCancelRun())
        {
            ledgerJournalTrans.data(paymentLineEnumerator.current());

            this.printLine(
                ledgerJournalTrans,
                contract,
                printSettings,
                contract.parmShouldDefaultFromPrintMgmt());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printContractQuery</Name>
				<Source><![CDATA[
    private void printContractQuery()
    {
        SRSPrintDestinationSettings printSettings = this.getDataContractObject(identifierStr(SRSPrintDestinationSettings)) as SRSPrintDestinationSettings;
        BankPaymAdviceContract contract = this.parmReportContract().parmRdpContract() as BankPaymAdviceContract;
        QueryRun paymentLineQuery = BankPaymAdvicePaymentQueryGenerator::construct().getPaymentLineQueryRun(contract);

        while (paymentLineQuery.next() && !this.parmCancelRun())
        {
            LedgerJournalTrans ledgerJournalTrans = paymentLineQuery.get(tableNum(LedgerJournalTrans));

            this.printLine(
                ledgerJournalTrans,
                contract,
                printSettings,
                contract.parmShouldDefaultFromPrintMgmt());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPrintLine</Name>
				<Source><![CDATA[
    protected boolean canPrintLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLine</Name>
				<Source><![CDATA[
    private void printLine(
        LedgerJournalTrans _ledgerJournalTrans,
        BankPaymAdviceContract _contract,
        SrsPrintDestinationSettings _printSettings,
        NoYes _shouldDefaultFromPrintMgmt)
    {
        CustTable custTable = CustTable::findByCompany(_ledgerJournalTrans.Company, _ledgerJournalTrans.parmAccount());

        if (custTable.RecId == 0)
        {
            warning(strFmt("@CashManagement:BankPaymAdviceReportNotAssociatedWithAccountWarning", _ledgerJournalTrans.Voucher, "@SYS302"));
        }
        else if (this.canPrintLine(_ledgerJournalTrans))
        {
            BankPaymAdviceReportGeneratorCust bankPaymAdviceReportGeneratorCust = BankPaymAdviceReportGenerator::newForJournal(_ledgerJournalTrans.JournalNum);

            try
            {
                bankPaymAdviceReportGeneratorCust.setExecutionContextFromContract(_contract);

                bankPaymAdviceReportGeneratorCust.generateReportData(_ledgerJournalTrans);

                this.updateContractForLine(_contract, _ledgerJournalTrans, custTable);

                this.setPrintMgmtReportRun(custTable, _printSettings, _shouldDefaultFromPrintMgmt);

                if (this.checkReportRunSettings(custTable))
                {
                    this.outputReports();
                }
            }
            catch
            {
                hasError = true;
            }
            finally
            {
                bankPaymAdviceReportGeneratorCust.deleteReportData();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContractForLine</Name>
				<Source><![CDATA[
    private void updateContractForLine(BankPaymAdviceContract _contract, LedgerJournalTrans _ledgerJournalTrans, CustTable _custTable)
    {
        _contract.parmAccountNum(_custTable.AccountNum);
        _contract.parmPaymMode(_ledgerJournalTrans.PaymMode);
        _contract.parmCompanyBankAccountId(_ledgerJournalTrans.parmOffsetAccount());

        _contract.parmLedgerJournalTransRecId(_ledgerJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintMgmtReportRun</Name>
				<Source><![CDATA[
    private void setPrintMgmtReportRun(CustTable _custTable, SRSPrintDestinationSettings _printSettings, NoYes _shouldDefaultFromPrintMgmt)
    {
        CustLanguageId custLanguage = this.getCustomerLanguage(_custTable);

        changecompany (_custTable.DataAreaId)
        {
            this.initPrintMgmtReportRun();

            if (_shouldDefaultFromPrintMgmt || isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
            {
                if (isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
                {
                    printMgmtReportRun.parmForcePrintJobSettings(!_shouldDefaultFromPrintMgmt);
                }

                this.defaultFromPrintMgmt(_custTable, custLanguage);

                if (!_shouldDefaultFromPrintMgmt
                    && cbdDestinationsController
                    && isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
                {
                    cbdDestinationsController.setERDestinationsInPrintSettings(printMgmtReportRun);
                }
            }
            else
            {
                PrintMgmtPrintSettingDetail printSettingDetail = this.initPrintSettingDetailFromPrintSettings(_printSettings);
                printMgmtReportRun.loadSettingDetail(printSettingDetail);
            }

            this.setLanguage(custLanguage);
        }

        this.parmReportContract().parmPrintSettings().parmSRSPrintArchiveContract().parmExecutionID('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            PrintMgmtHierarchyType::Sales,
            PrintMgmtNodeType::CustTable,
            PrintMgmtDocumentType::CustPaymAdvice);

        printMgmtReportRun.parmReportRunController(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromPrintMgmt</Name>
				<Source><![CDATA[
    private void defaultFromPrintMgmt(CustTable _custTable, CustLanguageId _custLanguage)
    {
        printMgmtReportRun.load(_custTable, _custTable, _custLanguage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintSettingDetailFromPrintSettings</Name>
				<Source><![CDATA[
    private PrintMgmtPrintSettingDetail initPrintSettingDetailFromPrintSettings(SRSPrintDestinationSettings _printSettings)
    {
        const str NoCountryRegionId = '';

        PrintMgmtReportFormat printMgmtReportFormat = PrintMgmtReportFormat::findByTypeWithSystem(
            PrintMgmtDocumentType::CustPaymAdvice,
            this.getReportName(),
            NoCountryRegionId);

        PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();
        printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
        printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);
        printSettingDetail.parmType(PrintMgmtDocInstanceType::Original);
        printSettingDetail.parmInstanceName(enum2str(PrintMgmtDocInstanceType::Original));
        printSettingDetail.parmNumberOfCopies(1);
        printSettingDetail.parmPrintJobSettings(_printSettings);

        return printSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerLanguage</Name>
				<Source><![CDATA[
    private CustLanguageId getCustomerLanguage(CustTable _custTable)
    {
        CustLanguageId custLanguageId = _custTable.languageId();
        return custLanguageId ? custLanguageId : CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguage</Name>
				<Source><![CDATA[
    private void setLanguage(CustLanguageId _custLanguageId)
    {
        this.parmReportContract().parmRdlContract().parmLabelLanguageId(_custLanguageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(_custLanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReportRunSettings</Name>
				<Source><![CDATA[
    private boolean checkReportRunSettings(CustTable _custTable)
    {
        boolean arePrintMgmtSettingsValid = true;

        if (!printMgmtReportRun.more())
        {
            if (customerPrintMgmtSettingsValidation.exists(_custTable.RecId))
            {
                arePrintMgmtSettingsValid = customerPrintMgmtSettingsValidation.lookup(_custTable.RecId);
            }
            else
            {
                setPrefix(strFmt("@CashManagement:BankPaymAdviceReportCustPrefix", _custTable.name()));

                arePrintMgmtSettingsValid = checkFailed("@CashManagement:BankPaymAdviceReportCustPrintSettingsError");

                customerPrintMgmtSettingsValidation.insert(_custTable.RecId, arePrintMgmtSettingsValid);
            }
        }

        return arePrintMgmtSettingsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doNotUseWaitPattern</Name>
				<Source><![CDATA[
    public boolean doNotUseWaitPattern()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    protected str getReportName()
    {
        return ssrsReportStr(BankPaymAdviceCustV2, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        BankPaymAdviceCustControllerV2 controller = new BankPaymAdviceCustControllerV2();
        boolean shouldShowDialog = true;

        if (_args && _args.parmObject() is BankPaymAdviceDefaultParameters)
        {
            shouldShowDialog = false;
            controller.defaultParameters = _args.parmObject();
        }

        controller.parmReportName(controller.getReportName());
        controller.parmArgs(_args);

        // SysLastValue should not be used when the controller can run with or without a dialog since the last saved value will override the input from this execution.
        controller.parmShowDialog(shouldShowDialog);
        controller.parmLoadFromSysLastValue(false);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataContractInfoObjectsInternal</Name>
				<Source><![CDATA[
    protected Map getDataContractInfoObjectsInternal()
    {
        if (!dataContractInfoObjects)
        {
            super();

            if (cbdDestinationsController && isFlightEnabled(LocalizationFlights::ForcePrintJobSettings)
                && this.parmArgs() && this.parmArgs().dataset() == tableNum(LedgerJournalTrans))
            {
                cbdDestinationsController.setHierarchyType(PrintMgmtHierarchyType::Sales);
                cbdDestinationsController.setNodeType(PrintMgmtNodeType::CustTable);
                cbdDestinationsController.setDocumentType(PrintMgmtDocumentType::CustPaymAdvice);

                LedgerJournalTrans ledgerJournalTransLoc = this.parmArgs().record();

                Query queryLoc = new Query();
                QueryBuildDataSource qbds = queryLoc.addDataSource(tableNum(CustTable));
                qbds.addRange(fieldNum(CustTable, AccountNum)).value(queryValue(ledgerJournalTransLoc.parmAccount()));

                cbdDestinationsController.initERFormatDestinations(queryLoc, dataContractInfoObjects);
            }
        }
        return dataContractInfoObjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (cbdDestinationsController && isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
        {
            BankPaymAdviceContract contract = this.parmReportContract().parmRdpContract() as BankPaymAdviceContract;
            contract.parmHideSSRSDestination(cbdDestinationsController.getHideSSRSDestinationTab());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDestinationTab</Name>
				<Source><![CDATA[
    public boolean showDestinationTab(boolean _showDestinationTab = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisplayFormatNameOnDestinationTab</Name>
				<Source><![CDATA[
    public boolean shouldDisplayFormatNameOnDestinationTab()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>