<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDownloadSubjobSourceLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// Represents the logger class for logging download source sync operations for a subjob.
/// </summary>
internal class RetailCDXDownloadSubjobSourceLogger extends RetailCDXLogger
{
    RetailCDXDownloadSubjobSourceContext subjobContext;
    private RetailCDXDataSyncContext jobContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailCDXDownloadSubjobLogger</c> class.
    /// </summary>
    /// <param name = "_jobContext">The data sync job source context object.</param>
    /// <param name = "_subjobContext">The data sync subjob source context object.</param>
    internal void new(RetailCDXDataSyncContext _jobContext, RetailCDXDownloadSubjobSourceContext _subjobContext = null) 
    {
        super();
        this.jobContext = _jobContext;
        this.subjobContext = _subjobContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceCreateCSVPacketStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceCreateCSVPacketStart()
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logStartEvent('CDXSubjobDownloadSourceCreateCSVPacket', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceCreateCSVPacketStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceCreateCSVPacketStop(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();
            
            this.logStopEvent('CDXSubjobDownloadSourceCreateCSVPacket', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceCreateCSVPacketFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceCreateCSVPacketFailure(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();
            
            this.logEvent('CDXSubjobDownloadSourceCreateCSVPacketFailure', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceChangeTrackingStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceChangeTrackingStart()
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();
            
            this.logStartEvent('CDXSubjobDownloadSourceChangeTracking', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceChangeTrackingStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceChangeTrackingStop(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();
            
            this.logStopEvent('CDXSubjobDownloadSourceChangeTracking', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceChangeTrackingFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceChangeTrackingFailure(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logEvent('CDXSubjobDownloadSourceChangeTrackingFailure', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceFilterChannelDataStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceFilterChannelDataStart()
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logStartEvent('CDXSubjobDownloadSourceFilterChannelData', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceFilterChannelDataStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceFilterChannelDataStop(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logStopEvent('CDXSubjobDownloadSourceFilterChannelData', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceFilterChannelDataFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceFilterChannelDataFailure(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logEvent('CDXSubjobDownloadSourceFilterChannelDataFailure', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceWriteDataPacketStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceWriteDataPacketStart()
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logStartEvent('CDXSubjobDownloadSourceWriteDataPacket', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceWriteDataPacketStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceWriteDataPacketStop(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logStopEvent('CDXSubjobDownloadSourceWriteDataPacket', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobDownloadSourceWriteDataPacketFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobDownloadSourceWriteDataPacketFailure(System.Exception exception)
    {
        SetEnumerator currentSessions = jobContext.getCurrentSessions().getEnumerator();

        while (currentSessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = currentSessions.current();

            this.logEvent('CDXSubjobDownloadSourceWriteDataPacketFailure', this.getLogDataFromContext(currentSession.parmSessionNumber(), currentSession.parmSessionType(), exception), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogDataFromContext</Name>
				<Source><![CDATA[
    private container getLogDataFromContext(RetailCDXSessionNumber _session, RetailCDXDownloadSessionType sessionType, System.Exception exception = null)
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException([exception]);

        int filesize = 0;
        int channelSpecificRows = 0;

        if (subjobContext.paramDataFileContextMap().exists(sessionType))
        {
            RetailCDXDownloadSessionDataFileContext sessionDataFileContext = subjobContext.paramDataFileContextMap().lookup(sessionType);
            channelSpecificRows = sessionDataFileContext.parmChannelSpecificRows();
            filesize = sessionDataFileContext.parmFileSize();
        }

        return  [_session,
                int642Str(jobContext.paramDataGroupRecID()),
                jobContext.paramJobID(),
                subjobContext.paramSubjobId(),
                subjobContext.paramAXSourceTableName(),
                subjobContext.paramIsAXTableTempDB(),
                enum2Symbol(enumNum(RetailCDXDataDistributionTableFilterType), subjobContext.paramTableFilterType()),
                subjobContext.paramChannelTableName(),
                subjobContext.paramRelatedTableCount(),
                subjobContext.paramColumnCount(),
                channelSpecificRows,
                subjobContext.paramPackedDeletedRows(),
                filesize,
                jobContext.paramCorrelationId(),
                this.duration('CDXSubjobDownloadSourceChangeTracking'),
                this.duration('CDXSubjobDownloadSourceFilterChannelData'),
                this.duration('CDXSubjobDownloadSourceWriteDataPacket'),
                this.duration('CDXSubjobDownloadSourceCreateCSVPacket'),
                subjobContext.parmIsOptimizedPropagation(),
                success,
                errorMessage,
                this.previousErrorEvent
            ];

    }

]]></Source>
			</Method>
			<Method>
				<Name>logChangeTrackingStartQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for starting executing change tracking query.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_queryId">Query Id.</param>
    /// <param name = "_queryType">Query type.</param>
    internal void logChangeTrackingStartQuery(TableName _axTableName, RetailCDXSqlQueryID _queryId, RetailCDXSqlQueryTypeEnum _queryType)
    {
        MapEnumerator sessions = jobContext.getSessions().getEnumerator();

        while (sessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = sessions.currentValue();

            ApplicationEventSource::EventWriteRetailCdxChangeTrackingTableQueryRunStart(
                                        currentSession.parmSessionNumber(),
                                        _axTableName,
                                        _queryId,
                                        enum2Symbol(enumNum(RetailCDXSqlQueryTypeEnum), _queryType),
                                        0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChangeTrackingFinishQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for finishing executing change tracking query.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_queryId">Query Id.</param>
    /// <param name = "_queryType">Query type.</param>
    /// <param name = "_changedRowCount">Changed rows for the current table.</param>
    internal void logChangeTrackingFinishQuery(TableName _axTableName, RetailCDXSqlQueryID _queryId, RetailCDXSqlQueryTypeEnum _queryType, int _changedRowCount)
    {
        MapEnumerator sessions = jobContext.getSessions().getEnumerator();

        while (sessions.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = sessions.currentValue();

            ApplicationEventSource::EventWriteRetailCdxChangeTrackingTableQueryRunStop(
                                        currentSession.parmSessionNumber(),
                                        _axTableName,
                                        _queryId,
                                        enum2Symbol(enumNum(RetailCDXSqlQueryTypeEnum), _queryType),
                                        _changedRowCount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>