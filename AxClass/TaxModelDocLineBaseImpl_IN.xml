<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineBaseImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxModelDocLineBaseImpl_IN</c> class is the base implement of the tax model document line.
/// </summary>
public class TaxModelDocLineBaseImpl_IN extends TaxModelDocLineBaseImpl
    implements TaxModelTaxable_IN
{
    TaxModelDocLineHelper_IN        helperIN;
    TaxModelDocLineExtensionIN      documentLineExtensionMap;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return helperIN.getAssessableValueTransactionCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        return helperIN.getMaximumRetailPriceTransactionCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return helperIN.getTaxRateBasingDate(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    public TaxRegistrationNumber_IN getTaxRegistrationNumber(TaxType_IN _taxType)
    {
        return helperIN.getTaxRegistrationNumber(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the tax registration
    /// </returns>
    public RefRecId getTaxRegistrationNumberRefRecId(TaxType_IN _taxType)
    {
        return helperIN.getTaxRegistrationNumberRefRecId(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        super(_documentLineMap);
    
        documentLineExtensionMap = TaxModelDocLineExtensionIN::findByBaseTable(_documentLineMap.SourceTableId, _documentLineMap.SourceRecId);
            
        helperIN = new TaxModelDocLineHelper_IN();
        helperIN.setDocumentLine(_documentLineMap);
        helperIN.setTaxModelTaxable(this);
        helperIN.setTransTaxInformation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxTypeAttached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the transaction document has the given <c>TaxType_IN</c> <c>TaxCode</c>
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// True, if it has.
    /// </returns>
    public boolean isTaxTypeAttached(TaxType_IN _taxType)
    {
        return helperIN.isTaxTypeAttached(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    public NoYes isForeignTransaction()
    {
        return helperIN.isForeignTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in accounting currency for the document line.
    /// </summary>
    /// <returns>
    /// The assessable value mst.
    /// </returns>
    public AmountMST getAssessableValueAccountingCurrency()
    {
        return helperIN.getAssessableValueAccountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>TaxModelTaxable</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTaxable</c>
    /// </returns>
    public TaxModelTaxable getOriginalTaxModelTaxable()
    {
        return helperIN.getOriginalTaxModelTaxable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInterStateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if it is the inter state transaction.
    /// </summary>
    /// <returns>
    /// True if it is not inter state transaction; otherwise, false.
    /// </returns>
    public NoYes IsInterStateTransaction()
    {
        return helperIN.IsInterStateTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    public TaxRegistrationNumber_IN getPartyTaxRegistrationNumber(TaxType_IN _taxType)
    {
        return helperIN.getPartyTaxRegistrationNumber(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The party <c>RecId</c> of the tax registration
    /// </returns>
    public RefRecId getPartyTaxRegistrationNumberRefRecId(TaxType_IN _taxType)
    {
        return helperIN.getPartyTaxRegistrationNumberRefRecId(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineExtensionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension map <c>TaxModelDocLineExtensionIN</c> of the documentLineMap.
    /// </summary>
    /// <returns>
    /// The extension map.
    /// </returns>
    public TaxModelDocLineExtensionIN getDocumentLineExtensionMap()
    {
        return helperIN.getDocumentLineExtensionMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelTaxableByTaxDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return buffer of <C>TaxModelTaxable_IN</C> by tax document line.
    /// </summary>
    /// <param name="_taxDocumentLine">
    /// The tax document line buffer.
    /// </param>
    /// <returns>Buffer of <C>TaxModelTaxable_IN</C>.</returns>
    public static TaxModelTaxable_IN getTaxModelTaxableByTaxDocumentLine(ITaxDocumentLine _taxDocumentLine)
    {
        SalesPurchJournalLine       salesPurchJournalLine;
    
        ProjProposalOnAcc           projProposalOnAcc;
        ProjProposalOnAccDetail     projProposalOnAccDetail;
        ProjOnAccTransSale          projOnAccTransSale;
    
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;
    
        ProjProposalCost            projProposalCost;
        ProjProposalCostDetail      projProposalCostDetail;
        ProjCostTransSale           projCostTransSale;
    
        ProjProposalItem            projProposalItem;
        ProjProposalItemDetail      projProposalItemDetail;
        ProjItemTransSale           projItemTransSale;
    
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalEmplDetail      projProposalEmplDetail;
        ProjEmplTransSale           projEmplTransSale;
    
        switch(_taxDocumentLine.sourceTableId())
        {
            case tableNum(ProjProposalOnAcc):
                projProposalOnAcc = projProposalOnAcc::findRecId(_taxDocumentLine.sourceRecId());
    
                select firstOnly projOnAccTransSale
                        exists join projProposalOnAccDetail
                            where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
                                && projProposalOnAccDetail.SaleRefRecId == projOnAccTransSale.RecId;
    
                salesPurchJournalLine = projOnAccTransSale;
                break;
    
            case tableNum(ProjProposalRevenue):
                projProposalRevenue = ProjProposalRevenue::findRecId(_taxDocumentLine.sourceRecId());
    
                select firstOnly projRevenueTransSale
                        exists join projProposalRevenueDetail
                            where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                                && projProposalRevenueDetail.SaleRefRecId == projRevenueTransSale.RecId;
    
                salesPurchJournalLine = projRevenueTransSale;
                break;
    
            case tableNum(ProjProposalCost):
                projProposalCost = ProjProposalCost::findRecId(_taxDocumentLine.sourceRecId());
    
                select firstOnly projCostTransSale
                        exists join projProposalCostDetail
                            where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                                && projProposalCostDetail.SaleRefRecId == projCostTransSale.RecId;
    
                salesPurchJournalLine = projCostTransSale;
                break;
    
            case tableNum(ProjProposalItem):
                projProposalItem = ProjProposalITem::findRecId(_taxDocumentLine.sourceRecId());
                if (projProposalItem.ItemType != ProjItemType::SalesOrder)
                {
                    select firstOnly projItemTransSale
                        exists join projProposalItemDetail
                            where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                                && projProposalItemDetail.SaleRefRecId == projItemTransSale.RecId;
    
                    salesPurchJournalLine = projItemTransSale;
                }
                else
                {
                    salesPurchJournalLine = projProposalItem.salesLine();
                }
                break;
    
            case tableNum(ProjProposalEmpl):
                projProposalEmpl = ProjProposalEmpl::findRecId(_taxDocumentLine.sourceRecId());
    
                select firstOnly projEmplTransSale
                        exists join projProposalEmplDetail
                            where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                                && projProposalEmplDetail.SaleRefRecId == projEmplTransSale.RecId;
    
                salesPurchJournalLine = projEmplTransSale;
                break;
    
            default:
                salesPurchJournalLine = SalesPurchJournalLine::findRecId(
                    _taxDocumentLine.sourceTableId(),
                    _taxDocumentLine.sourceRecId());
        }
    
        if (salesPurchJournalLine)
        {
            return TaxModelDocLineFactory::newTaxModelDocLine(salesPurchJournalLine);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxInfomation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TransTaxInformation</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TransTaxInformation</c>
    /// </returns>
    public TransTaxInformation getTransTaxInfomation()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    public LogisticsAddressStateId getConsumptionStateId()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxInformation_IN</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getTaxInfomationTable()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name="_type">
    /// The type.
    /// </param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// <remarks>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from transaction line delivery address.
    /// </remarks>
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(TransTaxInformationType_IN::Normal);
        }
        else
        {
            //Validate the address effectiveness and add the warning to telemetry for further analysis, no warning message popup
            helper.checkLogisticsPostalAddressWithEffectiveDateTime(this.getTaxDefaultLocationRefRecId());
            return LogisticsPostalAddress::findByLocation(this.getTaxDefaultLocationRefRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDefaultLocationRefRecId</Name>
				<Source><![CDATA[
    private RefRecId getTaxDefaultLocationRefRecId()
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLocationRefRecId();
        }
        else if (mappingExists(tableNum(SalesPurchJournalLine), documentLineMap.SourceTableId, fieldNum(SalesPurchJournalLine, InventDimId)))
        {
            InventDim inventDim = InventDim::find(this.getInventDimId());

            return TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId);
        }
        else
        {
            return transTaxInformation.CompanyLocation
                ? transTaxInformation.CompanyLocation
                : LogisticsLocationDefault::findSimpleDefaultByRoleType(CompanyInfo::find(), LogisticsLocationRoleType::Delivery).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    /// <remarks>
    /// The method may be required to be overridden by different type of transaction.
    /// </remarks>
    public RefRecId getTaxLocationRefRecId()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Deemed export property of party.
    /// </summary>
    /// <returns>
    /// True, if it is Deemed export, else false 
    /// </returns>
    public NoYes getIsDeemedExport()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SEZ property of party.
    /// </summary>
    /// <returns>
    /// True, if the party is SEZ, else false 
    /// </returns>
    public NoYes getIsSEZParty()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonGST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if tax is Non-GST for the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Non-GST for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId isNonGST()
    {
        return helperIN.isNonGST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportCalcTaxInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether support calculate tax in accounting currency for this transaction line.
    /// Currently we only support import order and export order.
    /// </summary>
    /// <returns>
    /// True if support, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isSupportCalcTaxInAccountingCurrency()
    {
        return helperIN.isSupportCalcTaxInAccountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssessableValueAccountingCurrencyAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether user can set assessable value on UI for this transaction line.
    /// Currently only for import order, user can set assessable value in accounting currency on UI.
    /// </summary>
    /// <returns>
    /// True if can, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isAssessableValueAccountingCurrencyAvailable()
    {
        return helperIN.isAssessableValueAccountingCurrencyAvailable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>