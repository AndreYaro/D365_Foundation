<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorSavePurchaseOrderBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

internal abstract class RetailDocumentOperationProcessorSavePurchaseOrderBase extends RetailDocumentOperationProcessorInventoryDocumentBase
{
    protected CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument retailInventoryCommitDocument;
    protected PurchTable purchaseOrder;

    protected const int defaultNumberOfCharacters = 5;
    protected const int defaultNumberOfDecimals = 3;
    protected const int defaultDataSequence = DateFormat::MDY;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document of CreatePurchaseOrder and SavePurchaseOrder operation.
    /// </summary>
    /// <returns>A container object to indicate the result document.</returns>
    protected container processInternal()
    {
        container ret = conNull();
        str inventoryDocumentJsonStr = conPeek(this.requestContainer, 1);

        this.retailInventoryCommitDocument = RetailTransactionServiceJsonHelper::DeserializeInventoryInboundOutboundCommitDocumentFromJSON(inventoryDocumentJsonStr);
        this.validateInventoryInboundOutboundCommitDocument(this.retailInventoryCommitDocument);
        ttsbegin;
        this.createOrUpdatePurchaseOrder();
        this.attachNoteForInventoryCommitDocument(retailInventoryCommitDocument);
        ttscommit;

        str result;

        try
        {
            result = this.getProcessInternalResult();
        }
        catch
        {
            this.GetEventSource().EventWriteInventoryDocumentsSerializationFailed();
            return conNull();
        }

        return [result];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>PurchTable</c> table object from <c>InventoryInboundOutboundDocument</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    /// <returns>
    /// An <c>PurchTable</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        Common ret;

        PurchId purchaseOrderId = _inventoryInboundOutboundDocument.get_SourceDocument().get_DocumentId();
        ret = PurchTable::find(purchaseOrderId);

        if (!ret)
        {
            throw error(strFmt("@Retail:NotValidPurchaseOrderIdError", purchaseOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>PurchLine</c> table object from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document line.</param>
    /// <returns>
    /// An <c>PurchLine</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocumentLine(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        Common ret;

        RecId purchaseOrderLineRecId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_RecordId();
        PurchId purchaseOrderId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_DocumentId();
        ret = PurchLine::findRecId(purchaseOrderLineRecId);

        if (!ret)
        {
            throw error (strFmt("@Retail:CannotFindPurchaseOrderLineError", purchaseOrderLineRecId, purchaseOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdatePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create purchase order.
    /// </summary>
    protected void createOrUpdatePurchaseOrder()
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;

        this.createPurchaseOrderHeader();
        IEnumerable lineList = inventoryCommitDocument.DocumentLines as IEnumerable;
        IEnumerator enumerator = lineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            InventJournalTrans inventJournalTrans;

            CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
            this.validateInventoryInboundOutboundDocumentLine(line);
            this.createOrUpdatePurchaseOrderLine(line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update purchase order header.
    /// </summary>
    protected void createPurchaseOrderHeader()
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        CommerceRuntimeDataModel.InventoryInboundOutboundSourceDocument sourceDocument = document.SourceDocument;
        PurchTable purchTable;

        if (sourceDocument != null)
        {
            PurchId purchId = sourceDocument.DocumentId;
            purchTable = PurchTable::find(purchId, true);
            if (document.ShipDate)
            {
                purchTable.DeliveryDate = str2date(document.ShipDate.ToString(),defaultDataSequence);
            }
            if (document.ReceiveDate)
            {
                purchTable.AccountingDate = str2date(document.ReceiveDate.ToString(),defaultDataSequence);
            }
            purchTable.OrderAccount = document.SenderDetails;
            purchTable.initFromVendTable();
            purchTable.update();
        }
        else
        {
            VendAccount vendAccount = document.SenderDetails;
            purchTable.initValue(PurchaseType::Purch);
            purchTable.PurchId = NumberSeq::newGetNum(PurchParameters::numRefPurchId()).num();
            purchTable.DeliveryDate = str2date(document.ShipDate.ToString(),defaultDataSequence);
            purchTable.AccountingDate = str2date(document.ReceiveDate.ToString(),defaultDataSequence);

            purchTable.OrderAccount = vendAccount;
            purchTable.initFromVendTable();
            if (RetailInventoryPurchaseOrderSetLocationFromCommitDocumentFlight::instance().isEnabled())
            {
                purchTable.InventSiteId = InventLocation::find(document.Receiver).InventSiteId;
                purchTable.InventLocationId = document.Receiver;
                purchTable.setAddressFromInventLocationId(document.Receiver);
            }
            purchTable.insert();
            var newSourceDocument = new Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundSourceDocument();
            newSourceDocument.DocumentId = purchTable.PurchId;
            document.SourceDocument = newSourceDocument;
        }
        
        document.DocumentId = purchTable.PurchId;
        this.purchaseOrder = purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdatePurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create purchase order line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    protected void createOrUpdatePurchaseOrderLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        if(_line.get_SourceDocumentLine()!= null && _line.get_SourceDocumentLine().get_RecordId() != 0)
        {
            this.updatePurchaseOrderLine(_line);
        }
        else
        {
            this.createPurchaseOrderLine(_line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create purchase order line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    protected void createPurchaseOrderLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        if (_line.QuantityToUpdate != 0)
        {
            CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
            CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
            PurchTable purchTable = this.purchaseOrder;

            EcoResProductRecId productRecId = _line.ProductId;
            EcoResDistinctProduct product = EcoResDistinctProduct::find(productRecId);
            int numberOfDecimals = defaultNumberOfDecimals;

            InventDimCombination inventDimCombination;
            InventTable inventTable;

            if (!product.isDistinctProduct())
            {
                inventDimCombination = InventDimCombination::findByDistinctProductVariant(productRecId);
            }
            else
            {
                inventTable = InventTable::findByProduct(productRecId);
            }

            ItemId itemId = RetailDocumentOperationProcessorInventoryDocumentBase::getItemIdByProductId(productRecId);
            InventTableModule inventTableModule = InventTableModule::find(itemId, ModuleInventPurchSales::Invent, false);
            if (inventTableModule)
            {
                UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(inventTableModule.UnitId);
                if (unitOfMeasure)
                {
                    numberOfDecimals = unitOfMeasure.DecimalPrecision;
                }
            }

            InventLocationId storeId = document.Receiver;
            // Safe handling - store id may not come, will populate from purchase table.
            if (!storeId)
            {
                storeId = purchTable.InventLocationId;
            }

            InventDim newInventDim = this.createInventDimForAddingLine(
            storeId, _line.LocationId, product, inventDimCombination, inventTable);

            ttsbegin;
            // Let's update PO line.
            PurchLine purchLine;

            purchLine.initValue();
            purchLine.PurchId           = purchTable.PurchId;
            purchLine.ItemId            = itemId;
            purchLine.itemIdChanged(); // it allows to determine whether the product should be tracked in inventory
            purchLine.PurchQty          = _line.QuantityToUpdate;
            if (RetailCreatePurchaseOrderFromPosUseSubmittedUomFlight::instance().isEnabled())
            {
                str unitId = _line.UnitOfMeasure;
                // If no UOM in the submitted line, use the inventory UOM
                if (!unitId)
                {
                    unitId = inventTableModule.UnitId;
                }

                if (unitId)
                {
                    purchLine.PurchUnit = unitID;
                }
            }

            purchLine.setInventDimId(newInventDim.inventDimId);
            purchLine.initBarcode(newInventDim);

            purchLine.createLine(true,   //  validation
                true,   //  initFromPurchTable
                false,  //  initFromInventTableModule
                true,   //  calcInventQty
                true,   //  searchMarkup
                true,   //  searchPrice
                false); //  ignorePurchTableInventDim

            ttscommit;
            var sourceDocumentLine = new Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundSourceDocumentLine();
            sourceDocumentLine.RecordId = purchLine.RecId;
            _line.SourceDocumentLine = sourceDocumentLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update purchase order line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    protected void updatePurchaseOrderLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        RecId lineRecId = _line.get_SourceDocumentLine().get_RecordId();
        PurchLine poLine = PurchLine::findRecId(lineRecId, true);

        Qty qtyOrdered = _line.QuantityOrdered;

        if (qtyOrdered == 0)
        {
            poLine.delete();
        }
        else if(qtyOrdered != poLine.QtyOrdered)
        {
            poLine.PurchQty = qtyOrdered;
            PurchLine::modifyPurchQty(poLine, poLine.inventDim());
            InventMovement::bufferSetRemainQty(poLine);
            poLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimForAddingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles registration of the new inventory dimensions record for adding new order line.
    /// </summary>
    /// <param name="storeId">
    /// The receiving store id.
    /// </param>
    /// <param name="wmsLocationId">
    /// The WHS receiving location id.
    /// </param>
    /// <param name="product">
    /// The product record for the line.
    /// </param>
    /// <param name="inventDimCombination">
    /// Invent dimension for the product if this product is a variant one.
    /// </param>
    /// <param name="inventTable">
    /// Invent table for the product if this product is a distinct one.
    /// </param>
    /// <returns>
    /// Inventory dimensions.
    /// </returns>
    protected InventDim createInventDimForAddingLine(
        InventLocationId storeId,
        WMSLocationId wmsLocationId,
        EcoResDistinctProduct product,
        InventDimCombination inventDimCombination,
        InventTable inventTable)
    {
        
        InventLocation inventLocation = InventLocation::find(storeId);
        InventSiteId siteId = inventLocation.InventSiteId;
        WHSInventStatusId inventoryStatusId;
        ItemId itemId;
        InventDim newInventDim;
        if (!product.isDistinctProduct())
        {
            InventDim tmpInventDim = inventDimCombination.inventDim();
            newInventDim.configId = tmpInventDim.configId;
            newInventDim.InventColorId = tmpInventDim.InventColorId;
            newInventDim.InventSizeId = tmpInventDim.InventSizeId;
            newInventDim.InventStyleId = tmpInventDim.InventStyleId;
            newInventDim.InventVersionId = tmpInventDim.InventVersionId;

            itemId = inventDimCombination.ItemId;
        }
        else
        {
            itemId = InventTable.ItemId;
        }

        newInventDim.InventLocationId = storeId;
        newInventDim.InventSiteId = siteId;

        EcoResStorageDimensionGroupRecId storageTrackingDimensionGroup = InventTable::find(itemId).storageDimensionGroup();
        EcoResStorageDimensionGroupFldSetup storageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(storageTrackingDimensionGroup, fieldNum(InventDim, WMSLocationId));
        boolean isItemLocationActive = storageDimensionGroupFldSetup.IsActive;
        if (isItemLocationActive)
        {
            // If the item is storage tracking dimension location active, we set wmsLocationId for it. Otherwise leave it blank.
            newInventDim.wmsLocationId = wmsLocationId != '' ? wmsLocationId : inventLocation.wmsLocationIdDefaultReceipt;
        }

        if (WHSInventEnabled::exist(itemId))
        {
            inventoryStatusId = WHSInventStatus::getDefaultInventStatus(storeId).InventStatusId;
            newInventDim.InventStatusId = inventoryStatusId;
        }

        newInventDim = InventDim::findOrCreate(newInventDim);
        return newInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessInternalResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get process internal result.
    /// </summary>
    /// <returns>The result.</returns>
    protected str getProcessInternalResult()
    {
        System.Type[] typeArray = new System.Type[1]();
        System.Type sourceDocumentType = new Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument().GetType();
        typeArray.SetValue(sourceDocumentType, 0);
        str result = RetailTransactionServiceJsonHelper::SerializeToJson(retailInventoryCommitDocument.Document, typeArray);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAttachNoteToInventoryDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if note needs to be attached to inventory document line.
    /// </summary>
    /// <param name = "_line">The document line.</param>
    /// <returns>
    /// The boolean value indicates whether line is deleted.
    /// </returns>
    protected boolean shouldAttachNoteToInventoryDocumentLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        if (!_line.Note)
        {
            return false;
        }

        Qty qtyOrdered;
        if (_line.QuantityOrdered)
        {
            qtyOrdered = _line.QuantityOrdered;
        }

        return !(_line.QuantityToUpdate == 0 && qtyOrdered == 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>