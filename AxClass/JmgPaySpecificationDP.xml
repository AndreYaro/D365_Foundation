<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPaySpecificationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgPaySpecificationDP</c> class fetches records for the <c>JmgPaySpecification</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(JmgPaySpecification)),
    SRSReportParameterAttribute(classstr(JmgPaySpecificationContract))
]
class JmgPaySpecificationDP extends SrsReportDataProviderPreProcessTempDB
{
#TimeConstants

    JmgTmpPaySpecification              tmpPaySpecification;
    boolean                             processCalculationResults;
    boolean                             asSum;
    boolean                             processPay;
    boolean                             hideRate;
    boolean                             payAsSum;
    boolean                             processRegistrations;
    boolean                             outputSign;
    boolean                             outputBreak;
    boolean                             outputAbsence;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJmgTmpPaySpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to query the temporary table and returns data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(JmgTmpPaySpecification))]
    public JmgTmpPaySpecification getJmgTmpPaySpecification()
    {
        select tmpPaySpecification;
        return tmpPaySpecification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCalculationResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes calculation results and inserts a record into the <c>JmgTmpPaySpecification</c> temporary
    ///    buffer with the results.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record, which contains the calculation results to process.
    /// </param>
    private void processCalculationResults(JmgStampJournalTable _jmgStampJournalTable)
    {
        //Fill temp table
        if (processCalculationResults)
        {
            tmpPaySpecification.Headline                    = "@SYS40080";
            tmpPaySpecification.GroupingNumber              = 1;
            tmpPaySpecification.RegProfileDate              = _jmgStampJournalTable.ProfileDate;
            tmpPaySpecification.WorkSeconds                 = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.WorkSeconds);
            tmpPaySpecification.PaySeconds                  = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PaySeconds);
            tmpPaySpecification.PayOvertimeSeconds          = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PayOverTimeSeconds);
            tmpPaySpecification.PayLegalAbsenceSeconds      = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PayLegalAbsenceSeconds);
            tmpPaySpecification.PayIllegalAbsenceSeconds    = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PayIllegalAbsenceSeconds);
            tmpPaySpecification.PayFlexSubSeconds           = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PayFlexSubSeconds);
            tmpPaySpecification.PayFlexAddSeconds           = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PayFlexAddSeconds);
            tmpPaySpecification.PaidBreakSeconds            = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.PaidBreakSeconds);
            tmpPaySpecification.NonPaidBreakSeconds         = JmgProfileSeconds::formattedSeconds(_jmgStampJournalTable.NonPaidBreakSeconds);
            tmpPaySpecification.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes pay events that are associated to the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record for which to process pay.
    /// </param>
    /// <param name="_profileDateRange">
    ///    The date range to process pay for.
    /// </param>
    private void processPay(JmgStampJournalTable _jmgStampJournalTable, Range _profileDateRange)
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        QueryRun                qr;
        JmgPayEvents            jmgPayEvents;
        JmgTransferEvents       jmgTransferEvents;
        JmgStampJournalTable    jmgStampJournalTable;

        if (!processPay)
        {
            return;
        }

        if (_jmgStampJournalTable.Transferred)
        {
            q       = new Query();
            qbds    = q.addDataSource(tablenum(JmgPayEvents));
            qbds.fields().dynamic(true);
            qbds.addRange(fieldnum(JmgPayEvents, Worker)).value(queryValue(_jmgStampJournalTable.Worker));
            qbr     = qbds.addRange(fieldnum(JmgPayEvents, ProfileDate));

            if (asSum || !processCalculationResults)
            {
                qbr.value(_profileDateRange);
            }
            else
            {
                qbr.value(queryValue(_jmgStampJournalTable.ProfileDate));
            }

            qbds.sortClear();
            if (payAsSum)
            {
                qbds.addSelectionField(fieldnum(JmgPayEvents,PaySeconds),SelectionField::Sum);
                qbds.addSortField(fieldnum(JmgPayEvents,PayCostType));
                qbds.addSortField(fieldnum(JmgPayEvents,Price));
                qbds.orderMode(OrderMode::GroupBy);
            }
            else
            {
                qbds.addSortField(fieldnum(JmgPayEvents,ProfileDate));
                qbds.addSortField(fieldnum(JmgPayEvents,PayCostType));
                qbds.addSortField(fieldnum(JmgPayEvents,PaySpecType));
                qbds.addSortField(fieldnum(JmgPayEvents,Price));
                qbds.orderMode(OrderMode::OrderBy);
            }

            qr = new QueryRun(q);

            while (qr.next())
            {
                jmgPayEvents = qr.get(tablenum(JmgPayEvents));
                tmpPaySpecification.RegProfileDate          = jmgPayEvents.ProfileDate;
                tmpPaySpecification.PayCostType             = jmgPayEvents.PayCostType;
                tmpPaySpecification.PayTime                 = JmgProfileSeconds::formattedSeconds(jmgPayEvents.PaySeconds);
                if (payAsSum)
                {
                    tmpPaySpecification.Price               = jmgPayEvents.Price;
                    tmpPaySpecification.TotalPrice          = jmgPayEvents.totalPrice();
                }
                else
                {
                    tmpPaySpecification.Price               = 0;
                    tmpPaySpecification.TotalPrice          = 0;
                }
                tmpPaySpecification.insert();
            }
        }
        else
        {
            // Create temporary pay events to send.
            // TwC BP error mitigated. RecordLevelSecurity is ensured.
            jmgPayEvents.setTmp();
            q       = new Query();
            q.recordLevelSecurity(true);
            qbds    = q.addDataSource(tablenum(JmgStampJournalTable));
            qbds.addRange(fieldnum(JmgStampJournalTable, Worker)).value(queryValue(_jmgStampJournalTable.Worker));
            qbds.addRange(fieldnum(JmgStampJournalTable, Transferred)).value(queryValue(_jmgStampJournalTable.Transferred));
            qbr     = qbds.addRange(fieldnum(JmgStampJournalTable, ProfileDate));
            if (asSum || !processCalculationResults)
            {
                qbr.value(_profileDateRange);
            }
            else
            {
                qbr.value(queryValue(_jmgStampJournalTable.ProfileDate));
            }

            qr      = new QueryRun(q);
            while (qr.next())
            {
                jmgStampJournalTable = qr.get(tablenum(JmgStampJournalTable));
                jmgTransferEvents = new JmgTransferEvents();
                jmgTransferEvents.createPayEventsArray(jmgStampJournalTable);

                while (jmgTransferEvents.nextEvent(jmgPayEvents))
                {
                    if (jmgPayEvents.PayCostType)
                    {
                        jmgPayEvents.Cost  = jmgPayEvents.PaySeconds/#SecondsPerHour * jmgPayEvents.Price;
                        jmgPayEvents.doInsert();
                    }
                }
            }

            if (payAsSum)
            {
                while select sum(PaySeconds), PayCostType, Price
                    from jmgPayEvents
                    group by PayCostType, Price

                {
                    tmpPaySpecification.PayCostType             = jmgPayEvents.PayCostType;
                    tmpPaySpecification.PayTime                 = JmgProfileSeconds::formattedSeconds(jmgPayEvents.PaySeconds);
                    tmpPaySpecification.Price                   = jmgPayEvents.Price;
                    tmpPaySpecification.TotalPrice              = jmgPayEvents.totalPrice();

                    tmpPaySpecification.insert();
                }
            }
            else
            {
                while select jmgPayEvents
                    order by ProfileDate, PayCostType, PaySpecType, Price
                {
                    tmpPaySpecification.RegProfileDate          = jmgPayEvents.ProfileDate;
                    tmpPaySpecification.PayCostType             = jmgPayEvents.PayCostType;
                    tmpPaySpecification.PayTime                 = JmgProfileSeconds::formattedSeconds(jmgPayEvents.PaySeconds);
                    tmpPaySpecification.Price                   = jmgPayEvents.Price;
                    tmpPaySpecification.TotalPrice              = jmgPayEvents.totalPrice();

                    tmpPaySpecification.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines whether a <c>JmgStampJournalTable</c> record need to be processed for the report.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record, which contains the calculation results to process.
    /// </param>
    /// <returns>
    ///    <c>true</c> if a record is to be processed; otherwise, false.
    /// </returns>
    private boolean processRecord(JmgStampJournalTable _jmgStampJournalTable)
    {
        if (_jmgStampJournalTable.Transferred)
        {
            return true;
        }

        if ((_jmgStampJournalTable.WorkSeconds
            +   _jmgStampJournalTable.PaySeconds
            +   _jmgStampJournalTable.PayOverTimeSeconds
            +   _jmgStampJournalTable.PayLegalAbsenceSeconds
            +   _jmgStampJournalTable.PayIllegalAbsenceSeconds
            +   _jmgStampJournalTable.PayFlexSubSeconds
            +   _jmgStampJournalTable.PayFlexAddSeconds
            +   _jmgStampJournalTable.PaidBreakSeconds
            +   _jmgStampJournalTable.NonPaidBreakSeconds) == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRegistrations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes registrations that are associated to the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record for which to process registrations.
    /// </param>
    /// <param name="_profileDateRange">
    ///    The date range for which to process registrations.
    /// </param>
    private void processRegistrations(JmgStampJournalTable _jmgStampJournalTable, Range _profileDateRange)
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryRun                qr;

        tableId                 transTableId;
        fieldId                 workerFieldId;
        fieldId                 profileDateFieldId;
        fieldId                 jourRegTypeFieldId;
        indexId                 workerProfileDateId;
        Range                   jourRegTypeRange;
        JmgStampTransMap        stampTrans;

        q = new Query();
        if (_jmgStampJournalTable.Transferred == NoYes::Yes)
        {
            transTableId        = tablenum(JmgStampTrans);
            workerFieldId       = fieldnum(JmgStampTrans, Worker);
            profileDateFieldId  = fieldnum(JmgStampTrans, ProfileDate);
            jourRegTypeFieldId  = fieldnum(JmgStampTrans, JourRegType);
            workerProfileDateId = indexnum(JmgStampTrans, EmplProfDateIdx);
        }
        else
        {
            transTableId        = tablenum(JmgStampJournalTrans);
            workerFieldId       = fieldnum(JmgStampJournalTrans, Worker);
            profileDateFieldId  = fieldnum(JmgStampJournalTrans, ProfileDate);
            jourRegTypeFieldId  = fieldnum(JmgStampJournalTrans, JourRegType);
            workerProfileDateId = indexnum(JmgStampJournalTrans, EmplProfDateIdx);
        }

        qbds = q.addDataSource(transTableId);
        qbds.addRange(workerFieldId).value(queryValue(_jmgStampJournalTable.Worker));
        if (asSum || !processCalculationResults)
        {
            qbds.addRange(profileDateFieldId).value(_profileDateRange);
        }
        else
        {
            qbds.addRange(profileDateFieldId).value(queryValue(_jmgStampJournalTable.ProfileDate));
        }

        jourRegTypeRange = '';
        if (outputSign)
        {
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::SignIn);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::SignOut);
        }

        if (processRegistrations)
        {
            // Production jobs
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::MrpOverlap);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::MrpProcess);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::MrpQueueAfter);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::MrpQueueBefore);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::MrpSetup);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::MrpTransport);

            // Project jobs
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::PrjActivity);
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::PrjProject);

            // Indirect activities
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::IndActivity);
        }

        if (outputBreak)
        {
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::BreakReg);
        }

        if (outputAbsence)
        {
            jourRegTypeRange = queryRangeConcat(jourRegTypeRange, JmgJourRegTypeEnum::Absence);
        }

        if (jourRegTypeRange)
        {
            qbds.addRange(jourRegTypeFieldId).value(jourRegTypeRange);
        }
        else
        {
            // Do not output any registrations.
            return;
        }

        qbds.fields().dynamic(true);
        qbds.sortClear();
        qbds.addSortField(profileDateFieldId);
        qbds.orderMode(OrderMode::OrderBy);

        qbds = qbds.addDataSource(tablenum(JmgStampJournalTable));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(workerFieldId, fieldnum(JmgStampJournalTable, Worker));
        qbds.addLink(profileDateFieldId, fieldnum(JmgStampJournalTable, ProfileDate));
        qbds.addRange(fieldnum(JmgStampJournalTable, Transferred)).value(queryValue(_jmgStampJournalTable.Transferred));

        qr = new QueryRun(q);

        while (qr.next())
        {
            stampTrans = qr.get(transTableId);
            tmpPaySpecification.RegProfileDate          = stampTrans.ProfileDate;
            tmpPaySpecification.JourRegType             = enum2str(stampTrans.JourRegType);
            tmpPaySpecification.JobRef                  = stampTrans.JobRef;
            tmpPaySpecification.JobId                   = stampTrans.JobId;
            tmpPaySpecification.StartTime               = time2str(stampTrans.StartTime,-1,-1);
            tmpPaySpecification.StopTime                = time2str(stampTrans.StopTime,-1,-1);
            tmpPaySpecification.Hours                   = stampTrans.Seconds/#SecondsPerHour;
            tmpPaySpecification.QtyGood                 = stampTrans.QtyGood;
            tmpPaySpecification.QtyError                = stampTrans.QtyError;
            tmpPaySpecification.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        JmgStampJournalTable    stampTable;
        QueryBuildRange         dateQueryBuildRange;
        QueryRun                queryRun         = new SysQueryRun(this.parmQuery());
        HcmWorker               hcmWorker;
        QueryBuildDataSource    qbrs;
        JmgPayTable             jmgPayTable;

        JmgPaySpecificationContract contract = this.parmDataContract() as JmgPaySpecificationContract;

        processCalculationResults = contract.parmProcessCalculationResults();
        asSum = contract.parmAsSum();
        processPay = contract.parmProcessPay();
        hideRate = contract.parmHideRate();
        payAsSum = contract.parmPayAsSum();
        processRegistrations = contract.parmProcessRegistrations();
        outputSign = contract.parmOutputSign();
        outputBreak = contract.parmOutputBreak();
        outputAbsence = contract.parmOutputAbsence();

        qbrs = queryRun.query().dataSourceTable(tablenum(JmgStampJournalTable));
        dateQueryBuildRange = SysQuery::findOrCreateRange(qbrs, fieldnum(JmgStampJournalTable,ProfileDate));

        if (asSum || !processCalculationResults)
        {
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, WorkSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PaySeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PayOverTimeSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PayLegalAbsenceSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PayIllegalAbsenceSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PayFlexSubSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PayFlexAddSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, PaidBreakSeconds), SelectionField::Sum);
            qbrs.addSelectionField(fieldNum(JmgStampJournalTable, NonPaidBreakSeconds), SelectionField::Sum);
            qbrs.addGroupByField(fieldNum(JmgStampJournalTable, Worker));
            qbrs.addGroupByField(fieldNum(JmgStampJournalTable, Transferred));
        }

        while (queryRun.next())
        {
            stampTable                                          = queryRun.get(tablenum(JmgStampJournalTable));
            hcmWorker                                           = HcmWorker::find(stampTable.Worker);

            tmpPaySpecification.clear();

            tmpPaySpecification.PersonnelNumber             = hcmWorker.PersonnelNumber;
            tmpPaySpecification.Name                        = hcmWorker.name();
            tmpPaySpecification.Transferred                 = stampTable.Transferred;

            if (this.processRecord(stampTable))
            {
                this.processCalculationResults(stampTable);
                tmpPaySpecification.Headline                    = "@SYS2694";
                tmpPaySpecification.GroupingNumber              = 2;
                this.processPay(stampTable,dateQueryBuildRange.value());
                tmpPaySpecification.Headline                    = "@SYS32978";
                tmpPaySpecification.GroupingNumber              = 3;
                this.processRegistrations(stampTable,dateQueryBuildRange.value());
            }
        }

        update_recordset tmpPaySpecification
            setting Description = jmgPayTable.Description
            join Description from jmgPayTable
                where jmgPayTable.PayCostType == tmpPaySpecification.PayCostType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>