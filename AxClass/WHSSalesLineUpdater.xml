<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSalesLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSalesLineUpdater</c> class is used to update values tracked in <c>WHSSalesLine</c> tag tables when sales lines are updated.
/// </summary>
[WHSSourceLineTableUpdateAttribute(tableStr(SalesLine))]
class WHSSalesLineUpdater extends WHSOutboundOrderLineUpdater
{
    SalesLine salesLine;

    private static boolean salesLineUpdaterRefactoringFlightIsEnabled = WHSSalesLineUpdaterRefactoringFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets global variables based on passed in common.
    /// </summary>
    /// <param name="_common">
    /// Common is a sales line record.
    /// </param>
    /// <remarks>
    /// The sales line should hold new values after an update.
    /// </remarks>
    public void initFromBuffer(Common _common)
    {
        if (salesLineUpdaterRefactoringFlightIsEnabled)
        {
            super(_common);
        }
        else
        {
            this.setCommonBuffer(_common);

            if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
            {
                inventHandlingUOM = PdsCatchWeightItem::pdsCWUnitId(salesLine.ItemId);
                newUOMSymbol = salesLine.pdsCWUnitId();
                newInventHandlingQty = salesLine.PdsCWRemainInventPhysical;
            }
            else
            {
                inventHandlingUOM = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
                newUOMSymbol = salesLine.SalesUnit;
                newInventHandlingQty = salesLine.RemainInventPhysical;
            }
            productRefRecId = InventTable::itemProduct(salesLine.itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the appropriate <c>WHSSalesLine</c> record based on changes to the related sales line record.
    /// </summary>
    public void updateTable()
    {
        if (this.mustUpdateTable())
        {
            ttsBegin;

            WHSSalesLine whsSalesLine = WHSSalesLine::find(salesLine.InventTransId, true);

            if (oldUOMSymbol != newUOMSymbol)
            {
                WHSCatchWeightTelemetryLogger::logExpectedCatchWeightUnit(funcName(), salesLine.ItemId, newUOMSymbol);
            }

            if (salesLineUpdaterRefactoringFlightIsEnabled)
            {
                whsSalesLine.QtyLeftToLoad = this.recalculateQuantityLeftToLoad(whsSalesLine.QtyLeftToLoad);
                whsSalesLine.ReleasedQty = this.recalculateReleasedQuantity(whsSalesLine.ReleasedQty);
            }
            else
            {
                // Convert orig QtyLeftToLoad to new UOM
                whsSalesLine.QtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                               salesLine.InventDimId,
                                                                                                               whsSalesLine.QtyLeftToLoad,
                                                                                                               oldUOMSymbol,
                                                                                                               newUOMSymbol,
                                                                                                               NoYes::No);

                // For sales Line decrease that causes LoadLine descrease, qtyLeftToLoad will be zero
                if (loadLineDiffHandlingQty < 0)
                {
                    whsSalesLine.QtyLeftToLoad = 0;
                }
                else // If loadLineQty increased or didn't change we need to look at diff in salesLine qty.
                {
                    // Change in salesline minus change in loadLine qty converted to loadLine newUOM
                    Qty convDiffQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                        salesLine.InventDimId,
                                                                                                        (newInventHandlingQty - oldInventHandlingQty) - loadLineDiffHandlingQty,
                                                                                                        inventHandlingUOM,
                                                                                                        newUOMSymbol,
                                                                                                        NoYes::No);

                    whsSalesLine.QtyLeftToLoad += convDiffQty;
                }

                WHSLoadLine loadLine;

                select sum(PickedQty) from loadLine
                where loadLine.InventTransId == whsSalesLine.InventTransId;

                // If not picked released quantity is zero, then we know that the loadLine increase or decrease wasn't for a loadLine on a shipment.
                if (loadLineDiffHandlingQty && (whsSalesLine.ReleasedQty - loadLine.PickedQty))
                {
                    whsSalesLine.ReleasedQty += loadLineDiffHandlingQty;
                }
            }

            whsSalesLine.update();

            // Update sales order header released status
            if (newInventHandlingQty != oldInventHandlingQty)
            {
                using (var parameters = WHSSetSalesOrderReleasedStatusParameters::newLineQuantityUpdated(salesLine, oldInventHandlingQty, newInventHandlingQty))
                {
                    SalesTable::setSalesOrderReleasedStatus(salesLine.SalesId);
                }
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>SalesLine</c> variable based on the passed in common.
    /// </summary>
    /// <param name="_common">
    /// Common is a sales line record.
    /// </param>
    internal protected void setCommonBuffer(Common _common)
    {
        if (salesLineUpdaterRefactoringFlightIsEnabled)
        {
            super(_common);
        }

        if (!(_common is salesLine))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        salesLine = _common as salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ItemId</c> from the <c>SalesLine</c>
    /// </summary>
    /// <returns>
    /// <c>ItemId</c> from the the <c>SalesLine</c> record
    /// </returns>
    [Hookable(false)]
    internal protected ItemId getItemIdFromBuffer()
    {
        return salesLineUpdaterRefactoringFlightIsEnabled
            ? super()
            : salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateTable</Name>
				<Source><![CDATA[
    internal boolean mustUpdateTable()
    {
        if (salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
            && salesLine.LineDeliveryType != salesLine.orig().LineDeliveryType)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>