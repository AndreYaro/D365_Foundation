<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTextTagReplacer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FiscalDocumentTextTagReplacer_BR</c> provides functions to replace tags existing in fiscal document texts.
/// </summary>
class FiscalDocumentTextTagReplacer_BR
{
    #LegalTextTags_BR
    private const str FiscalPrinterSerialNumberTag = '%fiscalRef_FiscalPrinterSerialNumber';
    private const str ECFNumberTag = '%fiscalRef_ECFNumber';

    CompanyName             refProcess_TaxAuthorityName;
    Agency_BR               refProcess_TaxAuthorityAgency;
    RefProcessNo_BR         refProcess_RefProcessNumber;

    CustSuframaNumber_BR    suframa_CustNumber;

    InvoiceId                           fiscalRef_InvNoRef;
    InvoiceSeries_BR                    fiscalRef_InvSeriesRef;
    DocumentDate                        fiscalRef_InvDateRef;
    Name                                fiscalRef_InvAccNameRef;
    LogisticsAddressing                 fiscalRef_InvAccAddressRef;
    IENum_BR                            fiscalRef_InvAccIENumberRef;
    CNPJCPFNum_BR                       fiscalRef_InvAccCNPJCPFNumRef;
    RetailFiscalPrinterSerialNumber_BR  fiscalRef_FiscalPrinterSerialNumber;
    RetailTerminalNumber_BR             fiscalRef_ECFNumber;

    DirPartyName            customer_Name;
    CNPJCPFNum_BR           customer_CnpjCpf;
    IENum_BR                customer_IE;
    LogisticsAddressing     customer_Address;

    DirPartyName            vendor_Name;
    CNPJCPFNum_BR           vendor_CnpjCpf;
    IENum_BR                vendor_IE;
    LogisticsAddressing     vendor_Address;

    TaxAmount               ICMS;
    TaxAmount               IPI;
    TaxAmount               PIS;
    TaxAmount               COFINS;
    TaxAmount               importTax;
    TaxValue                IPI_TaxValue;

    TaxCode                 taxWithhold_Code;
    TaxValue                taxWithhold_Value;
    TaxAmount               taxWithhold_Amount;

    MarkupSum               freight;
    MarkupSum               insurance;
    MarkupSum               siscomex;

    PurchDINumber_BR        DI_Number;
    DIDate_BR               DI_Date;

    ExchRate                exchRate;

    ApproximateTaxValue_BR  approximateTaxValue;
    Name                    approxTaxValueSource;
    TaxAmount               approximateTaxAmount;

    FCINumber_BR            fciNumber;

    TaxBase                     icmsDifRecipientBaseAmount;
    TaxValue                    icmsDifRecipientTaxValue, icmsDifInterTaxValue, icmsDifInterPartTaxValue;
    ICMSDifRecipientTaxAmount   icmsDifRecipientTaxAmount;
    ICMSDifIssuerTaxAmount      icmsDifIssuerTaxAmount;

    TaxAmount                   taxPovertyFundAmount, tribSubstTaxPovertyFundAmount;
    TaxPovertyFundBaseAmount_BR taxPovertyFundBaseAmount, tribSubstTaxPovertyFundBaseAmount;
    TaxPovertyFundPercentage_BR taxPovertyFundPercentage, tribSubstTaxPovertyFundPercentage;

    private Amount                      presumedTaxAmountPerInvUnit;
    private Amount                      presumedTaxBaseAmountPerInvUnit;
    private Amount                      presumedFCPTaxAmountPerInvUnit;
    private Amount                      presumedFCPTaxBaseAmountPerInvUnit;
    private PresumedTaxAmount_BR        presumedTaxAmount;
    private PresumedTaxBaseAmount_BR    presumedTaxBaseAmount;
    private PresumedTaxPercentage_BR    presumedTaxPercentage;
    private PresumedFCPTaxAmount_BR     presumedFCPTaxAmount;
    private PresumedFCPTaxBaseAmount_BR presumedFCPTaxBaseAmount;
    private PresumedFCPTaxPercentage_BR presumedFCPTaxPercentage;
    private Amount                      icmsSubstitutoTaxAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>date2brstr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a <c>Date</c> value to <c>str</c>.
    /// </summary>
    /// <param name="_date">
    /// The value to be converted.
    /// </param>
    /// <returns>
    /// The string representing the input value in the format dd/mm/yyyy.
    /// </returns>
    private str date2brstr(Date _date)
    {
        return  date2str(   _date,              123,
                            DateDay::Digits2,   DateSeparator::Slash,
                            DateMonth::Digits2, DateSeparator::Slash,
                            DateYear::Digits4,  DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a <c>ExchRate</c> value to <c>str</c>.
    /// </summary>
    /// <param name="_exchRate">
    /// The value to be converted.
    /// </param>
    /// <returns>
    /// The string representing the input value.
    /// </returns>
    private str exchRate2str(ExchRate _exchRate)
    {
        System.Double rate = real2double(_exchRate);
        return rate.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSum2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a <c>MarkupSum</c> value to <c>str</c>.
    /// </summary>
    /// <param name="_markupSum">
    /// The value to be converted.
    /// </param>
    /// <returns>
    /// The string representing the input value.
    /// </returns>
    private str markupSum2str(MarkupSum _markupSum)
    {
        return strFmt("%1", _markupSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproximateTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmApproximateTaxAmount(TaxAmount _approximateTaxAmount = approximateTaxAmount)
    {
        approximateTaxAmount = _approximateTaxAmount;

        return approximateTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproximateTaxValue</Name>
				<Source><![CDATA[
    public ApproximateTaxValue_BR parmApproximateTaxValue(ApproximateTaxValue_BR _approximateTaxValue = approximateTaxValue)
    {
        approximateTaxValue = _approximateTaxValue;

        return _approximateTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproxTaxValueSource</Name>
				<Source><![CDATA[
    public Name parmApproxTaxValueSource(Name _approxTaxValueSource = approxTaxValueSource)
    {
        approxTaxValueSource = _approxTaxValueSource;

        return approxTaxValueSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCOFINS</Name>
				<Source><![CDATA[
    public TaxAmount parmCOFINS(TaxAmount _COFINS = COFINS)
    {
        COFINS = _COFINS;

        return COFINS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomer_Address</Name>
				<Source><![CDATA[
    public LogisticsAddressing parmCustomer_Address(LogisticsAddressing _customer_Address = customer_Address)
    {
        customer_Address = _customer_Address;

        return customer_Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomer_CnpjCpf</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR parmCustomer_CnpjCpf(CNPJCPFNum_BR _customer_CnpjCpf = customer_CnpjCpf)
    {
        customer_CnpjCpf = _customer_CnpjCpf;

        return customer_CnpjCpf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomer_IE</Name>
				<Source><![CDATA[
    public IENum_BR parmCustomer_IE(IENum_BR _customer_IE = customer_IE)
    {
        customer_IE = _customer_IE;

        return customer_IE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomer_Name</Name>
				<Source><![CDATA[
    public DirPartyName parmCustomer_Name(DirPartyName _customer_Name = customer_Name)
    {
        customer_Name = _customer_Name;

        return customer_Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDI_Date</Name>
				<Source><![CDATA[
    public DIDate_BR parmDI_Date(DIDate_BR _DI_Date = DI_Date)
    {
        DI_Date = _DI_Date;

        return DI_Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDI_Number</Name>
				<Source><![CDATA[
    public PurchDINumber_BR parmDI_Number(PurchDINumber_BR _DI_Number = DI_Number)
    {
        DI_Number = _DI_Number;

        return DI_Number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate</Name>
				<Source><![CDATA[
    public ExchRate parmExchRate(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFciNumber</Name>
				<Source><![CDATA[
    public FCINumber_BR parmFciNumber(FCINumber_BR _fciNumber = fciNumber)
    {
        fciNumber = _fciNumber;

        return fciNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvAccAddressRef</Name>
				<Source><![CDATA[
    public LogisticsAddressing parmFiscalRef_InvAccAddressRef(LogisticsAddressing _fiscalRef_InvAccAddressRef = fiscalRef_InvAccAddressRef)
    {
        fiscalRef_InvAccAddressRef = _fiscalRef_InvAccAddressRef;

        return fiscalRef_InvAccAddressRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvAccCNPJCPFNumRef</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR parmFiscalRef_InvAccCNPJCPFNumRef(CNPJCPFNum_BR _fiscalRef_InvAccCNPJCPFNumRef = fiscalRef_InvAccCNPJCPFNumRef)
    {
        fiscalRef_InvAccCNPJCPFNumRef = _fiscalRef_InvAccCNPJCPFNumRef;

        return fiscalRef_InvAccCNPJCPFNumRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_FiscalPrinterSerialNumber</Name>
				<Source><![CDATA[
    public RetailFiscalPrinterSerialNumber_BR parmFiscalRef_FiscalPrinterSerialNumber(RetailFiscalPrinterSerialNumber_BR _fiscalRef_FiscalPrinterSerialNumber = fiscalRef_FiscalPrinterSerialNumber)
    {
        fiscalRef_FiscalPrinterSerialNumber = _fiscalRef_FiscalPrinterSerialNumber;

        return fiscalRef_FiscalPrinterSerialNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_ECFNumber</Name>
				<Source><![CDATA[
    public RetailTerminalNumber_BR parmFiscalRef_ECFNumber(RetailTerminalNumber_BR _fiscalRef_ECFNumber = fiscalRef_ECFNumber)
    {
        fiscalRef_ECFNumber = _fiscalRef_ECFNumber;

        return fiscalRef_ECFNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvAccIENumberRef</Name>
				<Source><![CDATA[
    public IENum_BR parmFiscalRef_InvAccIENumberRef(IENum_BR _fiscalRef_InvAccIENumberRef = fiscalRef_InvAccIENumberRef)
    {
        fiscalRef_InvAccIENumberRef = _fiscalRef_InvAccIENumberRef;

        return fiscalRef_InvAccIENumberRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvAccNameRef</Name>
				<Source><![CDATA[
    public Name parmFiscalRef_InvAccNameRef(Name _fiscalRef_InvAccNameRef = fiscalRef_InvAccNameRef)
    {
        fiscalRef_InvAccNameRef = _fiscalRef_InvAccNameRef;

        return fiscalRef_InvAccNameRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvDateRef</Name>
				<Source><![CDATA[
    public DocumentDate parmFiscalRef_InvDateRef(DocumentDate _fiscalRef_InvDateRef = fiscalRef_InvDateRef)
    {
        fiscalRef_InvDateRef = _fiscalRef_InvDateRef;

        return fiscalRef_InvDateRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvNoRef</Name>
				<Source><![CDATA[
    public InvoiceId parmFiscalRef_InvNoRef(InvoiceId _fiscalRef_InvNoRef = fiscalRef_InvNoRef)
    {
        fiscalRef_InvNoRef = _fiscalRef_InvNoRef;

        return fiscalRef_InvNoRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalRef_InvSeriesRef</Name>
				<Source><![CDATA[
    public InvoiceSeries_BR parmFiscalRef_InvSeriesRef(InvoiceSeries_BR _fiscalRef_InvSeriesRef = fiscalRef_InvSeriesRef)
    {
        fiscalRef_InvSeriesRef = _fiscalRef_InvSeriesRef;

        return fiscalRef_InvSeriesRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreight</Name>
				<Source><![CDATA[
    public MarkupSum parmFreight(MarkupSum _freight = freight)
    {
        freight = _freight;

        return freight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMS</Name>
				<Source><![CDATA[
    public TaxAmount parmICMS(TaxAmount _ICMS = ICMS)
    {
        ICMS = _ICMS;

        return ICMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSDifInterPartTaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmICMSDifInterPartTaxValue(TaxValue _icmsDifInterPartTaxValue = icmsDifInterPartTaxValue)
    {
        icmsDifInterPartTaxValue = _icmsDifInterPartTaxValue;

        return icmsDifInterPartTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSDifInterTaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmICMSDifInterTaxValue(TaxValue _icmsDifInterTaxValue = icmsDifInterTaxValue)
    {
        icmsDifInterTaxValue = _icmsDifInterTaxValue;

        return icmsDifInterTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSDifIssuerTaxAmount</Name>
				<Source><![CDATA[
    public ICMSDifIssuerTaxAmount parmICMSDifIssuerTaxAmount(ICMSDifIssuerTaxAmount _icmsDifIssuerTaxAmount = icmsDifIssuerTaxAmount)
    {
        icmsDifIssuerTaxAmount = _icmsDifIssuerTaxAmount;

        return icmsDifIssuerTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSDifRecipientBaseAmount</Name>
				<Source><![CDATA[
    public TaxBase parmICMSDifRecipientBaseAmount(TaxBase _icmsDifRecipientBaseAmount = icmsDifRecipientBaseAmount)
    {
        icmsDifRecipientBaseAmount = _icmsDifRecipientBaseAmount;

        return icmsDifRecipientBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSDifRecipientTaxAmount</Name>
				<Source><![CDATA[
    public ICMSDifRecipientTaxAmount parmICMSDifRecipientTaxAmount(ICMSDifRecipientTaxAmount _icmsDifRecipientTaxAmount = icmsDifRecipientTaxAmount)
    {
        icmsDifRecipientTaxAmount = _icmsDifRecipientTaxAmount;

        return icmsDifRecipientTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSDifRecipientTaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmICMSDifRecipientTaxValue(TaxValue _icmsDifRecipientTaxValue = icmsDifRecipientTaxValue)
    {
        icmsDifRecipientTaxValue = _icmsDifRecipientTaxValue;

        return icmsDifRecipientTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceICMSDifTags</Name>
				<Source><![CDATA[
    private void replaceICMSDifTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #DifICMS, 1, strLen(notes)))
        {
            notes = strReplace(notes, #DifICMS_vBCUFDest       , this.taxValue2str(this.parmICMSDifRecipientBaseAmount()));
            notes = strReplace(notes, #DifICMS_pICMSUFDest     , this.parmICMSDifRecipientTaxValue() ? this.taxValue2str(this.parmICMSDifRecipientTaxValue()) : '');
            notes = strReplace(notes, #DifICMS_vICMSUFDest     , this.taxValue2str(this.parmICMSDifRecipientTaxAmount()));

            notes = strReplace(notes, #DifICMS_pICMSInterPart  , this.taxValue2str(this.parmICMSDifInterPartTaxValue()));
            notes = strReplace(notes, #DifICMS_pICMSInter      , this.taxValue2str(this.parmICMSDifInterTaxValue()));

            notes = strReplace(notes, #DifICMS_vICMSUFRemet    , this.taxValue2str(this.parmICMSDifIssuerTaxAmount()));

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportTax</Name>
				<Source><![CDATA[
    public TaxAmount parmImportTax(TaxAmount _importTax = importTax)
    {
        importTax = _importTax;

        return importTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsurance</Name>
				<Source><![CDATA[
    public MarkupSum parmInsurance(MarkupSum _insurance = insurance)
    {
        insurance = _insurance;

        return insurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIPI</Name>
				<Source><![CDATA[
    public TaxAmount parmIPI(TaxAmount _IPI = IPI)
    {
        IPI = _IPI;
        return IPI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIPI_TaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmIPI_TaxValue(TaxValue _IPI_TaxValue = IPI_TaxValue)
    {
        IPI_TaxValue = _IPI_TaxValue;
        return IPI_TaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIS</Name>
				<Source><![CDATA[
    public TaxAmount parmPIS(TaxAmount _PIS = PIS)
    {
        PIS = _PIS;

        return PIS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiscomex</Name>
				<Source><![CDATA[
    public MarkupSum parmSiscomex(MarkupSum _siscomex = siscomex)
    {
        siscomex = _siscomex;

        return siscomex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuframa_CustNumber</Name>
				<Source><![CDATA[
    public CustSuframaNumber_BR parmSuframa_CustNumber(CustSuframaNumber_BR _suframa_CustNumber = suframa_CustNumber)
    {
        suframa_CustNumber = _suframa_CustNumber;

        return suframa_CustNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmICMSSubstitutoTaxAmount</Name>
				<Source><![CDATA[
    public Amount parmICMSSubstitutoTaxAmount(Amount _icmsSubstitutoTaxAmount = icmsSubstitutoTaxAmount)
    {
        icmsSubstitutoTaxAmount = _icmsSubstitutoTaxAmount;
        
        return icmsSubstitutoTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedFCPTaxAmount</Name>
				<Source><![CDATA[
    public PresumedFCPTaxAmount_BR parmPresumedFCPTaxAmount(PresumedFCPTaxAmount_BR _presumedFCPTaxAmount = presumedFCPTaxAmount)
    {
        presumedFCPTaxAmount = _presumedFCPTaxAmount;
        
        return presumedFCPTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedFCPTaxAmountPerInvUnit</Name>
				<Source><![CDATA[
    public Amount parmPresumedFCPTaxAmountPerInvUnit(Amount _presumedFCPTaxAmountPerInvUnit = presumedFCPTaxAmountPerInvUnit)
    {
        presumedFCPTaxAmountPerInvUnit = _presumedFCPTaxAmountPerInvUnit;
        
        return presumedFCPTaxAmountPerInvUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedFCPTaxBaseAmount</Name>
				<Source><![CDATA[
    public PresumedFCPTaxBaseAmount_BR parmPresumedFCPTaxBaseAmount(PresumedFCPTaxBaseAmount_BR _presumedFCPTaxBaseAmount = presumedFCPTaxBaseAmount)
    {
        presumedFCPTaxBaseAmount = _presumedFCPTaxBaseAmount;
        
        return presumedFCPTaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedFCPTaxBaseAmountPerInvUnit</Name>
				<Source><![CDATA[
    public Amount parmPresumedFCPTaxBaseAmountPerInvUnit(Amount _presumedFCPTaxBaseAmountPerInvUnit = presumedFCPTaxBaseAmountPerInvUnit)
    {
        presumedFCPTaxBaseAmountPerInvUnit = _presumedFCPTaxBaseAmountPerInvUnit;
        
        return presumedFCPTaxBaseAmountPerInvUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedFCPTaxPercentage</Name>
				<Source><![CDATA[
    public PresumedFCPTaxPercentage_BR parmPresumedFCPTaxPercentage(PresumedFCPTaxPercentage_BR _presumedFCPTaxPercentage = presumedFCPTaxPercentage)
    {
        presumedFCPTaxPercentage = _presumedFCPTaxPercentage;
        
        return presumedFCPTaxPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedTaxAmount</Name>
				<Source><![CDATA[
    public PresumedTaxAmount_BR parmPresumedTaxAmount(PresumedTaxAmount_BR _presumedTaxAmount = presumedTaxAmount)
    {
        presumedTaxAmount = _presumedTaxAmount;
        
        return presumedTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedTaxAmountPerInvUnit</Name>
				<Source><![CDATA[
    public Amount parmPresumedTaxAmountPerInvUnit(Amount _presumedTaxAmountPerInvUnit = presumedTaxAmountPerInvUnit)
    {
        presumedTaxAmountPerInvUnit = _presumedTaxAmountPerInvUnit;
        
        return presumedTaxAmountPerInvUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedTaxBaseAmount</Name>
				<Source><![CDATA[
    public PresumedTaxBaseAmount_BR parmPresumedTaxBaseAmount(PresumedTaxBaseAmount_BR _presumedTaxBaseAmount = presumedTaxBaseAmount)
    {
        presumedTaxBaseAmount = _presumedTaxBaseAmount;
        
        return presumedTaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedTaxBaseAmountPerInvUnit</Name>
				<Source><![CDATA[
    public Amount parmPresumedTaxBaseAmountPerInvUnit(Amount _presumedTaxBaseAmountPerInvUnit = presumedTaxBaseAmountPerInvUnit)
    {
        presumedTaxBaseAmountPerInvUnit = _presumedTaxBaseAmountPerInvUnit;
        
        return presumedTaxBaseAmountPerInvUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresumedTaxPercentage</Name>
				<Source><![CDATA[
    public PresumedTaxPercentage_BR parmPresumedTaxPercentage(PresumedTaxPercentage_BR _presumedTaxPercentage = presumedTaxPercentage)
    {
        presumedTaxPercentage = _presumedTaxPercentage;
        
        return presumedTaxPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPovertyFundAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxPovertyFundAmount(TaxAmount _taxPovertyFundAmount = taxPovertyFundAmount)
    {
        taxPovertyFundAmount = _taxPovertyFundAmount;

        return taxPovertyFundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPovertyFundBaseAmount</Name>
				<Source><![CDATA[
    public TaxPovertyFundBaseAmount_BR parmTaxPovertyFundBaseAmount(TaxPovertyFundBaseAmount_BR _taxPovertyFundBaseAmount = taxPovertyFundBaseAmount)
    {
        taxPovertyFundBaseAmount = _taxPovertyFundBaseAmount;
        
        return taxPovertyFundBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPovertyFundPercentage</Name>
				<Source><![CDATA[
    public TaxPovertyFundPercentage_BR parmTaxPovertyFundPercentage(TaxPovertyFundPercentage_BR _taxPovertyFundPercentage = taxPovertyFundPercentage)
    {
        taxPovertyFundPercentage = _taxPovertyFundPercentage;
        
        return taxPovertyFundPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTribSubstTaxPovertyFundAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmTribSubstTaxPovertyFundAmount(TaxAmount _tribSubstTaxPovertyFundAmount = tribSubstTaxPovertyFundAmount)
    {
        tribSubstTaxPovertyFundAmount = _tribSubstTaxPovertyFundAmount;
        
        return tribSubstTaxPovertyFundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTribSubstTaxPovertyFundBaseAmount</Name>
				<Source><![CDATA[
    public TaxPovertyFundBaseAmount_BR parmTribSubstTaxPovertyFundBaseAmount(TaxPovertyFundBaseAmount_BR _tribSubstTaxPovertyFundBaseAmount = tribSubstTaxPovertyFundBaseAmount)
    {
        tribSubstTaxPovertyFundBaseAmount = _tribSubstTaxPovertyFundBaseAmount;
        
        return tribSubstTaxPovertyFundBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTribSubstTaxPovertyFundPercentage</Name>
				<Source><![CDATA[
    public TaxPovertyFundPercentage_BR parmTribSubstTaxPovertyFundPercentage(TaxPovertyFundPercentage_BR _tribSubstTaxPovertyFundPercentage = tribSubstTaxPovertyFundPercentage)
    {
        tribSubstTaxPovertyFundPercentage = _tribSubstTaxPovertyFundPercentage;
        
        return tribSubstTaxPovertyFundPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithhold_Amount</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxWithhold_Amount(TaxAmount _taxWithhold_Amount = taxWithhold_Amount)
    {
        taxWithhold_Amount = _taxWithhold_Amount;

        return taxWithhold_Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithhold_Code</Name>
				<Source><![CDATA[
    public TaxCode parmTaxWithhold_Code(TaxCode _taxWithhold_Code = taxWithhold_Code)
    {
        taxWithhold_Code = _taxWithhold_Code;

        return taxWithhold_Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithhold_Value</Name>
				<Source><![CDATA[
    public TaxValue parmTaxWithhold_Value(TaxValue _taxWithhold_Value = taxWithhold_Value)
    {
        taxWithhold_Value = _taxWithhold_Value;

        return taxWithhold_Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendor_Address</Name>
				<Source><![CDATA[
    public LogisticsAddressing parmVendor_Address(LogisticsAddressing _vendor_Address = vendor_Address)
    {
        vendor_Address = _vendor_Address;

        return vendor_Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendor_CnpjCpf</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR parmVendor_CnpjCpf(CNPJCPFNum_BR _vendor_CnpjCpf = vendor_CnpjCpf)
    {
        vendor_CnpjCpf = _vendor_CnpjCpf;

        return vendor_CnpjCpf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendor_IE</Name>
				<Source><![CDATA[
    public IENum_BR parmVendor_IE(IENum_BR _vendor_IE = vendor_IE)
    {
        vendor_IE = _vendor_IE;

        return vendor_IE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendor_Name</Name>
				<Source><![CDATA[
    public DirPartyName parmVendor_Name(DirPartyName _vendor_Name = vendor_Name)
    {
        vendor_Name = _vendor_Name;

        return vendor_Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceApproxTaxValueTags</Name>
				<Source><![CDATA[
    private void replaceApproxTaxValueTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #ApproximateTaxValue, 1, strLen(notes)))
        {
            notes = strReplace(notes, #ApproximateTaxValue, num2str(approximateTaxValue, 5, 2, ThousandSeparator::None, DecimalSeparator::Dot));
        }

        if (strScan(notes, #ApproximateTaxAmount, 1, strLen(notes)))
        {
            notes = strReplace(notes, #ApproximateTaxAmount, num2str(approximateTaxAmount, 5, 2, ThousandSeparator::None, DecimalSeparator::Dot));
        }

        if (strScan(notes, #ApproxTaxValueSource, 1, strLen(notes)))
        {
            notes = strReplace(notes, #ApproxTaxValueSource,      approxTaxValueSource);
        }

        _textParmData.parmNotes(notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceCustomerTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all tags related to Customer.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    protected void replaceCustomerTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #Customer, 1, strLen(notes)))
        {
            notes = strReplace(notes, #Customer_Name,       customer_Name);
            notes = strReplace(notes, #Customer_CnpjCpf,    customer_CnpjCpf);
            notes = strReplace(notes, #Customer_IE,         customer_IE);
            notes = strReplace(notes, #Customer_Address,    customer_Address);

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceDITags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all tags related to DI.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    private void replaceDITags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #DI, 1, strLen(notes)))
        {
            notes = strReplace(notes, #ImportTax,   this.taxValue2str(importTax));
            notes = strReplace(notes, #PIS,         this.taxValue2str(PIS));
            notes = strReplace(notes, #COFINS,      this.taxAmount2str(COFINS));
            notes = strReplace(notes, #Freight,     this.markupSum2str(freight));
            notes = strReplace(notes, #Insurance,   this.markupSum2str(insurance));
            notes = strReplace(notes, #DI_Number,   DI_Number);
            notes = strReplace(notes, #DI_Date,     this.date2brstr(DI_Date));
            notes = strReplace(notes, #Siscomex,    this.markupSum2str(siscomex));
            notes = strReplace(notes, #ExchRate,    this.exchRate2str(exchRate));

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceFciNumberTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces all tags related to FCI Number.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    private void replaceFciNumberTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        notes = strReplace(notes, #FCI_Number, fciNumber);
        _textParmData.parmNotes(notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceFiscalReferenceTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all tags related to Fiscal reference.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    public void replaceFiscalReferenceTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #FiscalRef, 1, strLen(notes)))
        {
            notes = strReplace(notes, #FiscalRef_InvNoRef,              fiscalRef_InvNoRef);
            notes = strReplace(notes, #FiscalRef_InvSeriesRef,          fiscalRef_InvSeriesRef);
            notes = strReplace(notes, #FiscalRef_InvDateRef,            this.date2brstr(fiscalRef_InvDateRef));
            notes = strReplace(notes, #FiscalRef_InvAccNameRef,         fiscalRef_InvAccNameRef);
            notes = strReplace(notes, #FiscalRef_InvAccAddressRef,      fiscalRef_InvAccAddressRef);
            notes = strReplace(notes, #FiscalRef_InvAccIENumberRef,     fiscalRef_InvAccIENumberRef);
            notes = strReplace(notes, #FiscalRef_InvAccCNPJCPFNumRef,   fiscalRef_InvAccCNPJCPFNumRef);
            notes = strReplace(notes, FiscalPrinterSerialNumberTag,     fiscalRef_FiscalPrinterSerialNumber);
            notes = strReplace(notes, ECFNumberTag,                     int2Str(fiscalRef_ECFNumber));

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceSuframaTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all tags related to Suframa.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    private void replaceSuframaTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        notes = strReplace(notes, #Suframa_CustNumber,  suframa_CustNumber);
        notes = strReplace(notes, #ICMS,                this.taxAmount2str(ICMS));
        notes = strReplace(notes, #Pis,                 this.taxAmount2str(PIS));
        notes = strReplace(notes, #Cofins,              this.taxAmount2str(COFINS));

        _textParmData.parmNotes(notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePresumedTags</Name>
				<Source><![CDATA[
    private void replacePresumedTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();
        
        if (strScan(notes, LegalTextTAGSConstants_BR::presumedTaxAmount, 1, strLen(notes)))
        {
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedTaxAmount, this.taxAmount2str(this.parmPresumedTaxAmount()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedTaxAmountPerUnit, this.taxAmount2str(this.parmPresumedTaxAmountPerInvUnit()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedTaxBaseAmount, this.taxAmount2str(this.parmPresumedTaxBaseAmount()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedTaxBaseAmountPerUnit, this.taxAmount2str(this.parmPresumedTaxBaseAmountPerInvUnit()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedTaxRate, this.taxAmount2str(this.parmPresumedTaxPercentage()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedFCPTaxAmount, this.taxAmount2str(this.parmPresumedFCPTaxAmount()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedFCPTaxAmountPerUnit, this.taxAmount2str(this.parmPresumedFCPTaxAmountPerInvUnit()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedFCPTaxBaseAmount, this.taxAmount2str(this.parmPresumedFCPTaxBaseAmount()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedFCPTaxBaseAmountPerUnit, this.taxAmount2str(this.parmPresumedFCPTaxBaseAmountPerInvUnit()));
            notes = strReplace(notes, LegalTextTAGSConstants_BR::presumedFCPTaxRate, this.taxAmount2str(this.parmPresumedFCPTaxPercentage()));
        }

        if (strScan(notes, LegalTextTAGSConstants_BR::ICMSSubstitutoTaxAmount, 1, strLen(notes)))
        {
            notes = strReplace(notes, LegalTextTAGSConstants_BR::ICMSSubstitutoTaxAmount, this.taxAmount2str(this.parmICMSSubstitutoTaxAmount()));
        }
        
        _textParmData.parmNotes(notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace tags related to Customer, DI, RefProcess, Suframa, Tax, TaxWithold and Vendor.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    /// <remarks>
    /// This method does not replace Fiscal reference tags.
    /// </remarks>
    /// <seealso>
    /// See method replaceFiscalReference().
    /// </seealso>
    public void replaceTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        this.replaceICMSDifTags        (_textParmData);
        this.replaceCustomerTags       (_textParmData);
        this.replaceDITags             (_textParmData);
        this.replaceSuframaTags        (_textParmData);
        this.replaceTaxWithholdTags    (_textParmData);
        this.replaceVendorTags         (_textParmData);
        this.replaceApproxTaxValueTags (_textParmData);
        this.replaceFciNumberTags      (_textParmData);
        this.replaceIpiReturningTags   (_textParmData);
        this.replaceTaxPovertyFundTags (_textParmData);
        this.replacePresumedTags       (_textParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTagsOnList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace tags on a Fiscal document text list.
    /// </summary>
    /// <param name="_listParmData">
    /// The list as an instance of <c>FiscalDocumentTextListParmData_BR</c>.
    /// </param>
    /// <remarks>
    /// This method call replaceTags() for each item in the list.
    /// </remarks>
    /// <seealso>
    /// See method replaceTags().
    /// </seealso>
    public void replaceTagsOnList(FiscalDocumentTextListParmData_BR _listParmData)
    {
        FiscalDocumentTextParmData_BR   textParmData;

        _listParmData.reset();
        while (_listParmData.moveNext())
        {
            textParmData = _listParmData.getCurrent();
            this.replaceTags(textParmData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTaxPovertyFundTags</Name>
				<Source><![CDATA[
    private void replaceTaxPovertyFundTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #TaxPovertyFundAmount, 1, strLen(notes)))
        {
            notes = strReplace(notes, #TaxPovertyFundAmount, this.taxAmount2str(this.parmTaxPovertyFundAmount()));
            notes = strReplace(notes, #TaxPovertyFundBaseAmount, this.taxAmount2str(this.parmTaxPovertyFundBaseAmount()));
            notes = strReplace(notes, #TaxPovertyFundPercentage, this.taxAmount2str(this.parmTaxPovertyFundPercentage()));
        }
    
        if (strScan(notes, #TribSubstTaxPovertyFundAmount, 1, strLen(notes)))
        {
            notes = strReplace(notes, #TribSubstTaxPovertyFundAmount, this.taxAmount2str(this.parmTribSubstTaxPovertyFundAmount()));
            notes = strReplace(notes, #TribSubstTaxPovertyFundBaseAmount, this.taxAmount2str(this.parmTribSubstTaxPovertyFundBaseAmount()));
            notes = strReplace(notes, #TribSubstTaxPovertyFundPercentage, this.taxAmount2str(this.parmTribSubstTaxPovertyFundPercentage()));
        }

        _textParmData.parmNotes(notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTaxWithholdTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all tags related to Tax withhold.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    private void replaceTaxWithholdTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #TaxWithhold, 1, strLen(notes)))
        {
            notes = strReplace(notes, #TaxWithhold_Code,      taxWithhold_Code);
            notes = strReplace(notes, #TaxWithhold_Value,     this.taxValue2str(taxWithhold_Value));
            notes = strReplace(notes, #TaxWithhold_Amount,    this.taxAmount2str(taxWithhold_Amount));

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceVendorTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all tags related to Vendor.
    /// </summary>
    /// <param name="_textParmData">
    /// The Fiscal document text that contains the tags to be replaced.
    /// </param>
    private void replaceVendorTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #Vendor, 1, strLen(notes)))
        {
            notes = strReplace(notes, #Vendor_Name,     vendor_Name);
            notes = strReplace(notes, #Vendor_CnpjCpf,  vendor_CnpjCpf);
            notes = strReplace(notes, #Vendor_IE,       vendor_IE);
            notes = strReplace(notes, #Vendor_Address,  vendor_Address);

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a <c>TaxAmount</c> value to <c>str</c>.
    /// </summary>
    /// <param name="_taxAmount">
    /// The value to be converted.
    /// </param>
    /// <returns>
    /// The string representing the input value.
    /// </returns>
    private str taxAmount2str(TaxAmount _taxAmount)
    {
        return strFmt("%1", _taxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValue2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a <c>TaxValue</c> value to <c>str</c>.
    /// </summary>
    /// <param name="_taxValue">
    /// The value to be converted.
    /// </param>
    /// <returns>
    /// The string representing the input value.
    /// </returns>
    private str taxValue2str(TaxValue _taxValue)
    {
        return strFmt("%1", _taxValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FiscalDocumentTextTagReplacer_BR construct()
    {
        return new FiscalDocumentTextTagReplacer_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceIpiReturningTags</Name>
				<Source><![CDATA[
    private void replaceIpiReturningTags(FiscalDocumentTextParmData_BR _textParmData)
    {
        Notes notes = _textParmData.parmNotes();

        if (strScan(notes, #IPI, 1, strLen(notes)))
        {
            notes = strReplace(notes, #IPI_TaxValue,    this.taxValue2str(IPI_TaxValue));
            notes = strReplace(notes, #IPI,             this.taxValue2str(IPI));

            _textParmData.parmNotes(notes);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>