<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UpdateExciseRegisters_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>UpdateExciseRegisters_IN</c> is used to insert record into <c>ExciseDSARegister_IN</c> table.
/// </summary>
public class UpdateExciseRegisters_IN extends RunBaseBatch implements BatchRetryable
{
    RefRecId    eccNumber;
    TransDate   lastDSAUpdateDate;
    TransDate   toDate;
    NumberSeq   numberSeq;

    DialogField dialogECCNumber;
    DialogField dialogToDate;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
          ECCNumber,
          lastDSAUpdateDate,
          toDate
    #Endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        ;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYP4986060", this);

        dialogECCNumber       = dialog.addFieldValue(extendedtypestr(TaxRegistrationNumberExciseRecId_IN), eccNumber, "@GLS5102", "@GLS5693");
        dialogToDate          = dialog.addFieldValue(extendedtypestr(TransDate), toDate, "@SYS80056", "@SYP4986052");

        dialogToDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDSANumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a number sequence for voucher number.
    /// </summary>
    /// <returns>
    /// Returns a voucher number.
    /// </returns>
    public Voucher getDSANumberSequence()
    {
        NumberSequenceCode  numberSequenceCodeLoc;
        Voucher             voucher;
        ;

        numberSequenceCodeLoc   = NumberSequenceTable::find(ExciseNumSequenceRef_IN::findByRegistrationNumber(eccNumber, ExciseReference_IN::DSA).NumberSequenceTable).NumberSequence;
        if (!numberSequenceCodeLoc)
        {
            throw error (strfmt("@GLS5689", "@GLS5695", eccNumber));
        }
        numberSeq               = NumberSeq::newGetNumFromCode(numberSequenceCodeLoc);
        voucher                 = numberSeq.num();

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ;

        ret = super();

        eccNumber        =    dialogECCNumber.value();
        toDate           =    dialogToDate.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        UpdateExciseRegisters_IN    updateExciseRegisters = new UpdateExciseRegisters_IN();
        identifiername              elemName;
        ;

        elemName    = args.menuItemName();
        if (TaxParameters::find().Excise_IN)
        {
            if (updateExciseRegisters.prompt())
            {
                updateExciseRegisters.runOperation();
                updateExciseRegisters.updateDSARegisters();
            }
        }
        else
        {
            throw error(strfmt("@GLS5131", "@GLS5005"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDSANilProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes nil producton lines on specific date.
    /// </summary>
    /// <param name="_date">
    /// The date for the nil producton lines to be deleted.
    /// </param>
    protected void deleteDSANilProd(TransDate _date)
    {
        ExciseDSARegister_IN    exciseDSARegister;

        exciseDSARegister = ExciseDSARegister_IN::findNilRegisterByECCNumTransDate(eccNumber, _date, true);
        if (exciseDSARegister)
        {
            ttsBegin;
            TaxTrans_IN::findRecId(exciseDSARegister.TaxTrans_IN, true).delete();
            exciseDSARegister.delete();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getfirstDSAUpdateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets first DSA update date for finished goods.
    /// </summary>
    /// <returns>
    /// The first DSA update date for finished goods.
    /// </returns>
    /// <remarks>
    /// Only consider the update date during periodic job
    /// </remarks>
    protected TransDate getfirstDSAUpdateDate()
    {
        TaxTrans_IN     taxTransIN;

        // Note: The >=0 logic is to ignore the auto-updated register during posting journal
        select firstOnly TransDate from taxTransIN
            order by taxTransIN.TransDate asc
            where taxTransIN.DSAQuantity >= 0
                && taxTransIN.CompanyRegistrationNumber == eccNumber
                && taxTransIN.ExciseRegister == ExciseRegister_IN::DSA;

        return taxTransIN.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDSAUpdateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets last DSA update date for finished goods.
    /// </summary>
    /// <returns>
    /// The last DSA update date for finished goods.
    /// </returns>
    /// <remarks>
    /// Only consider the update date during periodic job
    /// </remarks>
    protected TransDate getLastDSAUpdateDate()
    {
        TaxTrans_IN     taxTransIN;

        // Note: The >=0 logic is to ignore the auto-updated register during posting journal
        select firstOnly TransDate from taxTransIN
            order by taxTransIN.TransDate desc
            where taxTransIN.DSAQuantity >= 0
                && taxTransIN.CompanyRegistrationNumber == eccNumber
                && taxTransIN.ExciseRegister == ExciseRegister_IN::DSA;

        return taxTransIN.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDSANilProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts nil producton lines for dates without DSA updated
    /// from last DSA updated date + 1 to To date.
    /// </summary>
    protected void insertDSANilProd()
    {
        ExciseDSARegister_IN    exciseDSARegister;
        TransDate               dsaDate = lastDSAUpdateDate + 1;

        while (dsaDate <= toDate)
        {
            exciseDSARegister = ExciseDSARegister_IN::findByECCNumTransDate(eccNumber, dsaDate);
            if (!exciseDSARegister)
            {
                exciseDSARegister = ExciseDSARegister_IN::insertNilRegister(eccNumber, dsaDate);
                TaxTrans_IN::insertIntoTaxTransDSA(exciseDSARegister,  null);
            }
            dsaDate++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDSARegisters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update DSA Registers for all inventory transactions.
    /// </summary>
    /// <remarks>
    /// DSA register will be updated on daily basis. If no DSA register is
    /// udpated on a specific date, then a nil record will be inserted.
    /// </remarks>
    public void updateDSARegisters()
    {
        lastDSAUpdateDate = this.getLastDSAUpdateDate();
        this.updateDSARegistersForInventTransType(InventTransType::Production);
        this.updateDSARegistersForInventTransType(InventTransType::BOMMain);
        this.updateDSARegistersForInventTransType(InventTransType::PmfProdCoBy);

        // Notes: this is to make sure when no DSA register exists, zero DSA will also
        // be inserted. Even when no DSA register exists after updating, a zero DSA will
        // be inserted on To date
        if (lastDSAUpdateDate == dateNull())
        {
            lastDSAUpdateDate = this.getfirstDSAUpdateDate();
        }
        if (lastDSAUpdateDate == dateNull())
        {
            lastDSAUpdateDate = toDate - 1;
        }

        this.insertDSANilProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDSARegistersForInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update DSA registers for transactions with specific inventory transaction type.
    /// </summary>
    /// <param name="_inventTransType">
    /// The invent transaction type is used to find record.
    /// </param>
    protected void updateDSARegistersForInventTransType(InventTransType  _inventTransType)
    {
        boolean                 updateDSARegister;
        ExciseDSARegister_IN    exciseDSARegister;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventJournalTrans      inventJournalTrans;
        InventTable             inventTable;
        ProdTable               prodTable;
        TaxInformation_IN       taxInformation_IN;
        Voucher                 voucherLoc;
        TransTaxInformation     transTaxInformation;

        while select inventTrans
            join ReferenceCategory, ReferenceId, InventTransId, ItemId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory   == _inventTransType
                    && inventTrans.InventTransOrigin        == inventTransOrigin.RecId
                    && inventTrans.DatePhysical             <= toDate
            notexists join exciseDSARegister
                where exciseDSARegister.RefRecId == inventTrans.RecId
        {
            updateDSARegister = false;

            switch (_inventTransType)
            {
                case InventTransType::Production:
                    prodTable               = ProdTable::find(inventTransOrigin.ReferenceId);
                    transTaxInformation     = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(prodTable);
                    taxInformation_IN       = TaxInformation_IN::find(transTaxInformation.TaxInformation);
                    updateDSARegister =  (  transTaxInformation.ExciseDSA               == NoYes::Yes
                                            && transTaxInformation.ExciseTariffCodes    != 0
                                            && taxInformation_IN.ManECCRegistrationNumberTable  == eccNumber
                                            && (prodTable.ProdStatus        == ProdStatus::ReportedFinished
                                                || prodTable.ProdStatus     == ProdStatus::Completed));
                    break;

                // For co-product and bi-product, this type of transaction is generated during batch order
                case InventTransType::PmfProdCoBy:
                    prodTable               = ProdTable::find(inventTransOrigin.ReferenceId);
                    transTaxInformation     = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(prodTable);
                    inventTable             = inventTransOrigin.inventTable();
                    taxInformation_IN       = TaxInformation_IN::find(transTaxInformation.TaxInformation);
                    updateDSARegister =  (  inventTable.DSA_IN              == NoYes::Yes
                                            && inventTable.ExciseTariffCodes_IN                 != 0
                                            && taxInformation_IN.ManECCRegistrationNumberTable  == eccNumber
                                            && (prodTable.ProdStatus        == ProdStatus::ReportedFinished
                                                || prodTable.ProdStatus     == ProdStatus::Completed));
                    break;

                case InventTransType::BOMMain:
                    inventJournalTrans      = InventJournalTrans::findInventTransId(inventTransOrigin.InventTransId);
                    transTaxInformation     = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventJournalTrans);
                    updateDSARegister = (   transTaxInformation.ExciseDSA
                                            && transTaxInformation.ExciseTariffCodes          != 0
                                            && transTaxInformation.ExciseECCRegistrationNumber  == eccNumber
                                            && inventTrans.StatusReceipt == StatusReceipt::Purchased);
                    break;
            }

            if (updateDSARegister)
            {
                ttsBegin;

                voucherLoc                                   = this.getDSANumberSequence();
                exciseDSARegister.ExciseRecordType           = ExciseRecordType_IN::None;
                exciseDSARegister.NumberSequence             = voucherLoc;
                if (inventTrans.DatePhysical >= lastDSAUpdateDate)
                {
                    exciseDSARegister.dsaDate                    = inventTrans.DatePhysical;
                }
                else
                {
                    exciseDSARegister.dsaDate                    = toDate;
                }
                exciseDSARegister.TaxRegistrationNumberTable = eccNumber;
                exciseDSARegister.Item                       = inventTrans.ItemId;
                exciseDSARegister.ManufacturedQty            = inventTrans.Qty;
                exciseDSARegister.RefRecId                   = inventTrans.RecId;
                exciseDSARegister.RefTableId                 = inventTrans.TableId;
                exciseDSARegister.InventTransId              = inventTransOrigin.InventTransId;

                this.deleteDSANilProd(exciseDSARegister.dsaDate);
                exciseDSARegister.insert();
                TaxTrans_IN::insertIntoTaxTransDSA(exciseDSARegister, inventTrans);

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>