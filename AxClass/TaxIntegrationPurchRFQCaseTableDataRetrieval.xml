<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchRFQCaseTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchRFQCaseTableDataRetrieval</c> class retrieves data from <c>PurchRFQCaseTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(PurchRFQCaseTable))]
public class TaxIntegrationPurchRFQCaseTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected PurchRFQCaseTable purchRFQCaseTable;
    protected PurchRFQCaseLine purchRFQCaseLine;

    protected PurchRFQVendLink purchRFQVendLink;
    protected VendTable vendTable;

    protected InventDim inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            purchRFQCaseTable = document.getLocalRecord();
            return SysDaQueryObjectBuilder::from(this.purchRFQVendLink)
                .where(this.purchRFQVendLink, fieldStr(PurchRFQVendLink, RFQCaseId))
                    .isEqualToLiteral(this.purchRFQCaseTable.RFQCaseId)
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchRFQVendLink, fieldStr(PurchRFQVendLink, VendAccount))
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchRFQCaseTable)
                .where(this.purchRFQCaseTable, fieldStr(PurchRFQCaseTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.purchRFQVendLink) // alternate key (partial)
                    .where(this.purchRFQVendLink, fieldStr(PurchRFQVendLink, RFQCaseId))
                        .isEqualTo(this.purchRFQCaseTable, fieldStr(PurchRFQCaseTable, RFQCaseId))
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchRFQVendLink, fieldStr(PurchRFQVendLink, VendAccount))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.purchRFQCaseLine)
            .where(this.purchRFQCaseLine, fieldStr(PurchRFQCaseLine, RFQCaseId))
                .isEqualToLiteral(this.purchRFQCaseTable.RFQCaseId)
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.purchRFQCaseLine, fieldStr(PurchRFQCaseLine, InventDimId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQCaseTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQCaseTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId)).isEqualToLiteral(this.purchRFQCaseLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId)).isEqualToLiteral(this.purchRFQCaseLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.purchRFQCaseLine.TableId,
            this.purchRFQCaseLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Purchase);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>PurchRFQCaseTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        this.copyToDocumentFromInventStorageDimMap(document, this.purchRFQCaseTable);

        document.setDeliveryDate(this.purchRFQCaseTable.DeliveryDate);
        document.setIncludingTax(this.purchRFQCaseTable.InclTax);
        document.setTransactionCurrencyCode(this.purchRFQCaseTable.CurrencyCode);
        document.setDeliveryTerm(this.purchRFQCaseTable.DlvTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTable,
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            purchRFQCaseTable.DeliveryPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineByDefault(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setTaxable(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PurchRFQCaseLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);
        this.copyToLineFromInventDim(_line, this.inventDim);
        this.copyToLineFromInventTable(_line, this.purchRFQCaseLine.inventTable());
        this.copyQuantityAndTransactionAmountToLine(_line);

        _line.setItemId(this.purchRFQCaseLine.ItemId);
        _line.setUnit(this.purchRFQCaseLine.PurchUnit);
        _line.setInventoryTransactionId(this.purchRFQCaseLine.InventTransId);
        _line.setCategoryId(this.purchRFQCaseLine.CategoryId);
        if (_line.getCategoryId())
        {
            EcoResCategory ecoRESCategory = EcoResCategory::find(_line.getCategoryId());
            _line.setItemCategoryName(ecoRESCategory.Name);
        }

        if (_line.getCategoryId())
        {
            _line.setText(_line.getItemCategoryName());
        }
        else
        {
            _line.setText(_line.getItemId());
        }

        _line.setDeliveryDate(this.purchRFQCaseLine.deliveryDate(document.getInvoiceDate()));
        _line.setTransactionCurrencyCode(this.purchRFQCaseLine.CurrencyCode);

        // no _line.setProductVariant
        // no _line.setItemType
        // no _line.setIntrastatCommodityId
        // no _destination.setIntrastatCommodityCode
        // no _line.setDirectDelivery
        // no _line.setDeliveryTerm
        // no  _line.setLedgerDimension
        // no _line.setOperationLedgerDimension
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quantity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setQuantity(this.purchRFQCaseLine.QtyOrdered);
        _line.setLineAmount(this.purchRFQCaseLine.LineAmount);
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTable, // document
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.purchRFQCaseLine.DeliveryPostalAddress);

        this.copyToLineFromShipmentAddressWithCountryRegionType(
            _line,
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PurchRFQCaseTable</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setDeliveryTerm(purchRFQCaseTable.DlvTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);

        this.copyToDocumentChargeFromDocumentChargeTable(_charge);
        this.copyToDocumentChargeFromHeaderTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromDocumentChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromDocumentChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, markupTransOfDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>PurchRFQTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.purchRFQCaseTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);

        this.copyToLineChargeFromLineChargeTable(_charge);
        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, markupTransOfLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>PurchRFQLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setInventoryTransactionId(this.purchRFQCaseLine.InventTransId);
        _charge.setLedgerDimension(this.purchRFQCaseLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        MarkupTable markupTable = _markupTrans.markupTable();

        switch (markupTable.CustType)
        {
            case MarkupType::LedgerAccount :
                _charge.setOperationLedgerDimension(markupTable.parmCustomerLedgerDimension());
                break;
            case MarkupType::CustVend :
                _charge.setOperationLedgerDimension(VendLedgerAccounts::summaryLedgerDimension(''));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>