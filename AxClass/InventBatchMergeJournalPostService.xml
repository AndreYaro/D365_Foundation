<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchMergeJournalPostService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchMergeJournalPostService</c> is the service class for posting a inventory batch
///    merge journal.
/// </summary>
class InventBatchMergeJournalPostService
{
    InventBatchMergeJournalPostDataContract dataContract;

    InventBatchJournal                      inventBatchJournal;
    InventTable                             inventTable;
    InventJournalTable                      inventJournalTable;

    JournalTableData                        journalTableData;

    TransDate                               transDate;
    int                                     numLines;
    Voucher                                 voucherLast;
    Map                                     sourceToResultMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResultLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds result lines to the generated BOM journal for the source lines on the batch merge journal.
    /// </summary>
    private void addResultLines()
    {
        InventJournalTrans          inventJournalTrans;

        boolean                     first = true;

        Query                       query = new Query();

        InventBatchJournalResult inventBatchJournalResult = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);
        InventDim resultInventDim = inventBatchJournalResult.inventDim();

        QueryBuildDataSource dsSource = query.addDataSource(tableNum(InventBatchJournalSource));
        dsSource.addRange(fieldNum(InventBatchJournalSource, InventBatchJournal)).value(queryValue(inventBatchJournal.RecId));
        dsSource.addSelectionField(fieldNum(InventBatchJournalSource, InventQty), SelectionField::Sum);
        dsSource.addSelectionField(fieldNum(InventBatchJournalSource, cwInventQty), SelectionField::Sum);

        QueryBuildDataSource dsInventDim = dsSource.addDataSource(tableNum(InventDim));
        dsInventDim.relations(true);

        InventDimParm inventDimParm = InventDimParm::activeDimFlag(InventDimGroupSetup::newInventTable(inventTable));
        // Batch, Location, Pallet, Status and License plate will be assigned from the batch journal result
        inventDimParm.InventBatchIdFlag = NoYes::No;
        inventDimParm.wmsLocationIdFlag = NoYes::No;
        inventDimParm.InventStatusFlag  = NoYes::No;
        inventDimParm.LicensePlateFlag  = NoYes::No;
        inventDimParm.queryAddGroupByField(dsInventDim);

        InventJournalTransData inventJournalTransData = journalTableData.journalStatic().newJournalTransData(inventJournalTrans, journalTableData);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventBatchJournalSource inventBatchJournalSource = queryRun.get(tableNum(InventBatchJournalSource));
            InventDim sourceInventDim = queryRun.get(tableNum(InventDim));

            sourceInventDim = InventDim::findOrCreate(sourceInventDim);

            inventJournalTrans.clear();
            inventJournalTransData.initFromJournalTable();
            inventJournalTrans.TransDate = transDate;
            inventJournalTrans.Qty       = inventBatchJournalSource.InventQty;
            inventJournalTrans.PdsCWQty  = inventBatchJournalSource.cwInventQty;
            inventJournalTrans.initFromInventTable(inventTable, false, false);

            if (inventJournalTable.VoucherDraw == JournalVoucherDraw::Entering)
            {
                inventJournalTransData.initVoucher(voucherLast, false);
            }

            InventMov_Journal movement = inventJournalTrans.inventMovement();
            movement.journalSetQtyWithQtyCheck(true, false, false, false);

            inventJournalTransData.addJournalTransVoucher();

            if (first)
            {
                // Must assign some dimensions for the insert, however, we cannot compute the actual dimensions until we have
                // a valid inventory transaction ID as that might be used by the inventory batch number group.
                inventJournalTrans.setInventDimId(this.transResultInventDim(resultInventDim, sourceInventDim).inventDimId);
                inventJournalTransData.insert();

                resultInventDim = this.createOrUpdateResultBatch(movement);

                inventJournalTrans.selectForUpdate(true);
                inventJournalTrans.reread();
                inventJournalTrans.setInventDimId(this.transResultInventDim(resultInventDim, sourceInventDim).InventDimId);
                inventJournalTransData.update();

                first = false;
            }
            else
            {
                inventJournalTrans.setInventDimId(this.transResultInventDim(resultInventDim, sourceInventDim).InventDimId);
                inventJournalTransData.insert();
            }

            voucherLast = inventJournalTrans.Voucher;
            numLines++;

            sourceToResultMap.insert(sourceInventDim.InventDimId, inventJournalTrans.InventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSourceLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the source lines to the generated BOM journal.
    /// </summary>
    private void addSourceLines()
    {
        InventBatchJournalSource    inventBatchJournalSource;
        InventJournalTrans          inventJournalTrans;

        InventJournalTransData inventJournalTransData = journalTableData.journalStatic().newJournalTransData(inventJournalTrans, journalTableData);

        while select inventBatchJournalSource
            where inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId
        {
            InventDim lookupInventDim = inventBatchJournalSource.inventDim();
            // Batch, Location, Pallet, Status and License plate were assigned from the batch journal result
            lookupInventDim.InventBatchId = "";
            lookupInventDim.wmsLocationId = "";
            lookupInventDim.InventStatusId = "";
            lookupInventDim.LicensePlateId = "";

            lookupInventDim = InventDim::findOrCreate(lookupInventDim);

            Debug::assert(sourceToResultMap.exists(lookupInventDim.InventDimId));

            InventTransId finishedLotTransId = sourceToResultMap.lookup(lookupInventDim.InventDimId);

            inventJournalTrans.clear();
            inventJournalTransData.initFromJournalTable();
            inventJournalTrans.TransDate           = transDate;
            inventJournalTrans.bomLine             = NoYes::Yes;
            inventJournalTrans.Qty                 = -inventBatchJournalSource.InventQty;
            inventJournalTrans.PdsCWQty            = -inventBatchJournalSource.cwInventQty;
            inventJournalTrans.InventTransIdFather = finishedLotTransId;
            inventJournalTrans.setInventDimId(inventBatchJournalSource.InventDimId);
            inventJournalTrans.initFromInventTable(inventTable, false, false);

            if (inventJournalTable.VoucherDraw == JournalVoucherDraw::Entering)
            {
                inventJournalTransData.initVoucher(voucherLast, false);
            }

            inventJournalTrans.inventMovement().journalSetQtyWithQtyCheck(true, false, false, false, false);

            inventJournalTransData.addJournalTransVoucher();
            inventJournalTransData.insert();

            voucherLast = inventJournalTrans.Voucher;
            numLines++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBOMJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the new BOM journal in preparation to add to lines for the batch merge task.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///    Thrown if there is no default BOM journal name ID defined in inventory parameters.
    /// </exception>
    private void createBOMJournal()
    {
        InventJournalNameId batchMergeJournalNameId = InventParameters::find().BatchMergeJournalNameId;

        if (!batchMergeJournalNameId)
        {
            throw error("@SYS4001889");
        }

        InventJournalName inventJournalName = InventJournalName::find(batchMergeJournalNameId);

        journalTableData = JournalTableData::newTable(inventJournalTable);

        inventJournalTable.initFromInventJournalName(inventJournalName);
        inventJournalTable.JournalId = journalTableData.nextJournalId();
        inventJournalTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBOMJournalFromBatchMergeLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the inventory BOM journal from the lines on the inventory batch merge.
    /// </summary>
    private void createBOMJournalFromBatchMergeLines()
    {
        inventBatchJournal.selectForUpdate(true);
        inventBatchJournal.reread();

        if (inventBatchJournal.Posted)
        {
            throw error(strFmt("@SYS4001886", inventBatchJournal.JournalId));
        }

        inventTable = inventBatchJournal.inventTable();
        transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        this.createBOMJournal();

        // Must save BOM Journal Id to the inventory batch journal before adding the lines so the BOM line movement can determine that it is related to an inventory batch journal
        inventBatchJournal.bomJournalId = inventJournalTable.JournalId;
        inventBatchJournal.update();

        sourceToResultMap = new Map(Types::String, Types::String);

        this.addResultLines();
        this.addSourceLines();

        inventJournalTable.NumOfLines = numLines;
        inventJournalTable.update();

        inventBatchJournal.Posted = NoYes::Yes;
        inventBatchJournal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateResultBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates the result batch with the defined batch characteristics in the batch journal result record.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement for the first transaction in which the result batch is established.
    /// </param>
    /// <returns>
    ///    The record for the <c>InventDim</c> table for the batch journal result line that may have been updated.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if the inventory batch was manually specified but does not exist.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Thrown if the generated record for the <c>InventBatch</c> table is not valid.
    /// </exception>
    private InventDim createOrUpdateResultBatch(InventMovement _movement)
    {
        InventBatchId               inventBatchId;
        InventBatch                 inventBatch;

        InventBatchJournalResult inventBatchJournalResult = InventBatchJournalResult::findFirst(inventBatchJournal.RecId, true);
        InventDim inventDim = inventBatchJournalResult.inventDim();

        if (!inventDim.InventBatchId)
        {
            // It's possible for the insertion of the movement to generate the batch number due to the settings on the batch number group.
            InventTrans inventTrans = InventTrans::findTransId(_movement.transId());
            if (inventTrans.inventDim().InventBatchId)
            {
                inventBatchId = inventTrans.inventDim().InventBatchId;

                inventBatch = InventBatch::find(inventBatchId, inventBatchJournal.ItemId, true);
            }
            else
            {
                inventBatchId = this.generateBatchId(_movement);

                inventBatch.ItemId        = inventBatchJournal.ItemId;
                inventBatch.InventBatchId = inventBatchId;

                inventBatchJournalResult.fillInventBatch(inventBatch);
                if (!inventBatch.validateWrite())
                {
                    throw error("@SYS18447");
                }
                // Insert may recompute some values different than what we will be setting them to;
                // so insert here and let the ending logic fill the values and do an update to ensure they exactly match.
                inventBatch.insert();
            }

            inventDim.InventBatchId = inventBatchId;
            inventDim = InventDim::findOrCreate(inventDim);

            inventBatchJournalResult.InventDimId = inventDim.InventDimId;
            inventBatchJournalResult.update();
        }
        else
        {
            inventBatch = InventBatch::find(inventDim.InventBatchId, inventBatchJournal.ItemId, true);
            if (!inventBatch.RecId)
            {
                throw error(strFmt("@SYS54778", inventDim.InventBatchId, inventBatchJournal.ItemId));
            }
        }

        inventBatchJournalResult.fillInventBatch(inventBatch);
        if (!inventBatch.validateWrite())
        {
            throw error("@SYS18447");
        }
        inventBatch.update();

        this.updateResultBatchAttributes(inventBatchJournalResult, inventBatch.InventBatchId);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates an inventory batch ID from the batch journal item's batch number group.
    /// </summary>
    /// <param name="_movement">
    ///    The movement from which to take number group properties when generating the new inventory batch ID.
    /// </param>
    /// <returns>
    ///    A new inventory batch ID.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if the item's defined batch number group cannot be found or
    ///    if the item does not have a batch number group defined.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Thrown if the defined batch number group is setup for manual batch number allocation.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Thrown if the number group is not setup properly to produce an inventory batch number.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Thrown if the generated inventory batch number already exists for the batch journal item.
    /// </exception>
    private InventBatchId generateBatchId(InventMovement _movement)
    {
        InventNumGroup inventNumGroup = InventNumGroup::find(inventBatchJournal.inventTable().BatchNumGroupId);
        if (!inventNumGroup)
        {
            throw error(strFmt("@SYS3312", inventBatchJournal.inventTable().BatchNumGroupId));
        }
        if (inventNumGroup.ManualAllocation)
        {
            throw error(strFmt("@SYS4001894", inventBatchJournal.inventTable().BatchNumGroupId, inventBatchJournal.ItemId));
        }

        InventBatchId inventBatchId = inventNumGroup.buildNumber(_movement, extendedTypeNum(InventBatchId));
        if (!inventBatchId)
        {
            throw error(strFmt("@SYS54023", inventNumGroup.NumGroupId));
        }

        if (InventBatch::exist(inventBatchId, inventBatchJournal.ItemId))
        {
            throw error(strFmt("@SYS4001895", inventBatchId, inventBatchJournal.ItemId));
        }

        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the object from the data contract.
    /// </summary>
    /// <param name="_dataContract">
    ///    The data contract to initialize from.
    /// </param>
    private void initFromDataContract(InventBatchMergeJournalPostDataContract _dataContract)
    {
        if (!_dataContract.validate())
        {
            throw error("@SYS326740");
        }

        dataContract        = _dataContract;
        inventBatchJournal  = dataContract.inventBatchJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCompletionMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes completion messages to the infolog.
    /// </summary>
    /// <param name="_journalText">
    ///    The text to use for reporting the status of the BOM journal.
    /// </param>
    private void logCompletionMessages(str _journalText)
    {
        InventBatchJournalResult inventBatchJournalResult = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);

        SysInfoAction_MenuFunction sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(InventBatch), MenuItemType::Display);
        sysInfoAction.parmCallerBuffer(InventBatch::find(inventBatchJournalResult.inventDim().InventBatchId, inventBatchJournal.ItemId));
        sysInfoAction.parmDescription("@SYS4001890");
        info(strFmt("@SYS4001891", inventBatchJournalResult.inventDim().InventBatchId), "", sysInfoAction);

        sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(InventJournalTableBOM), MenuItemType::Display);
        sysInfoAction.parmCallerBuffer(inventJournalTable);
        sysInfoAction.parmDescription("@SYS4001887");
        info(_journalText, "", sysInfoAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the inventory batch merge journal.
    /// </summary>
    /// <param name="_dataContract">
    ///    The data contract containing the parameters for the post operation.
    /// </param>
    public void post(InventBatchMergeJournalPostDataContract _dataContract)
    {
        this.initFromDataContract(_dataContract);

        ttsbegin;

        this.createBOMJournalFromBatchMergeLines();
        this.postBOMJournal();

        ttscommit;

        this.logCompletionMessages(strFmt("@SYS4001888", inventJournalTable.JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBOMJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the generated Inventory BOM Journal.
    /// </summary>
    private void postBOMJournal()
    {
        JournalCheckPost journalCheckPost = InventJournalCheckPost::newJournalCheckPost(JournalCheckPostType::Post, inventJournalTable);
        journalCheckPost.parmAutoBlock(true);
        journalCheckPost.parmThrowCheckFailed(true);
        journalCheckPost.runOperation();

        if (inventJournalTable.SystemBlocked == NoYes::Yes)
        {
            inventJournalTable.SystemBlocked = NoYes::No;
            inventJournalTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transers the inventory batch merge journal to a BOM journal.
    /// </summary>
    /// <param name="_dataContract">
    ///    The data contract containing the parameters for the transfer to journal operation.
    /// </param>
    public void transferToJournal(InventBatchMergeJournalPostDataContract _dataContract)
    {
        this.initFromDataContract(_dataContract);

        ttsbegin;

        this.createBOMJournalFromBatchMergeLines();

        ttscommit;

        this.logCompletionMessages(strFmt("@SYS4001997", inventJournalTable.JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transResultInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the dimensions from the batch journal result with the batch journal source to form
    ///    a result dimension for use with the transaction journal line.
    /// </summary>
    /// <param name="_resultInventDim">
    ///    The batch journal result inventory dimensions record buffer.
    /// </param>
    /// <param name="_sourceInventDim">
    ///    The batch journal source inventory dimension record buffer.
    /// </param>
    /// <returns>
    ///    A record for the <c>InventDim</c> table with the inventory dimensions for the transaction journal merge result line.
    /// </returns>
    private InventDim transResultInventDim(InventDim _resultInventDim, InventDim _sourceInventDim)
    {
        InventDim   transInventDim;

        transInventDim.data(_sourceInventDim);
        transInventDim.InventBatchId = _resultInventDim.InventBatchId;
        if (_resultInventDim.wmsLocationId)
        {
            transInventDim.wmsLocationId = _resultInventDim.wmsLocationId;
        }
        if (_resultInventDim.InventStatusId)
        {
            transInventDim.InventStatusId = _resultInventDim.InventStatusId;
        }
        if (_resultInventDim.LicensePlateId)
        {
            transInventDim.LicensePlateId = _resultInventDim.LicensePlateId;
        }
        transInventDim = InventDim::findOrCreate(transInventDim);

        return transInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResultBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the batch attributes for the result batch to match the specified result batch attribute values.
    /// </summary>
    /// <param name="_result">
    ///    The record for the <c>InventBatchJournalResult</c> table.
    /// </param>
    /// <param name="_inventBatchId">
    ///    The inventory batch ID to update.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    Thrown if there were any validation failures when creating the inventory batch attributes record.
    /// </exception>
    private void updateResultBatchAttributes(InventBatchJournalResult _result, InventBatchId _inventBatchId)
    {
        InventBatchJournalResultAttributeValue  inventBatchJournalResultAttributeValue;
        PdsBatchAttributes                      pdsBatchAttributes;
        int                                     attributesPerPage = InventBatchJournalAttribute::attributesPerPage();
        int                                     i;

        // Ensure that if this was an existing batch, that there are no previous attributes -- we will be replacing them all here
        delete_from pdsBatchAttributes
            where pdsBatchAttributes.ItemId         == inventBatchJournal.ItemId
                && pdsBatchAttributes.InventBatchId == _inventBatchId;

        if (inventBatchJournal.journalController().hasBatchAttributes())
        {
            List attributes = InventBatchJournalAttribute::attributesForJournal(inventBatchJournal.RecId);
            ListEnumerator attributesEnumerator = attributes.getEnumerator();

            while select inventBatchJournalResultAttributeValue
                order by AttributePage
                where inventBatchJournalResultAttributeValue.InventBatchJournalResult == _result.RecId
            {
                for (i = 1; i <= attributesPerPage; i++)
                {
                    if (!attributesEnumerator.moveNext())
                    {
                        break;
                    }

                    if (inventBatchJournalResultAttributeValue.AttributeValue[i])
                    {
                        pdsBatchAttributes.clear();
                        pdsBatchAttributes.ItemId               = inventBatchJournal.ItemId;
                        pdsBatchAttributes.InventBatchId        = _inventBatchId;
                        pdsBatchAttributes.PdsBatchAttribId     = attributesEnumerator.current();
                        pdsBatchAttributes.PdsBatchAttribValue  = inventBatchJournalResultAttributeValue.AttributeValue[i];
                        if (!pdsBatchAttributes.validateWrite())
                        {
                            throw error("@SYS18447");
                        }
                        pdsBatchAttributes.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>