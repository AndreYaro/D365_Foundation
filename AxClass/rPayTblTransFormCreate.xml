<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTblTransFormCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
#RpayTblConstants
#RpayModuleName
class rPayTblTransFormCreate extends RunBase
{
     RPayTblJournal    rPayTblJournal;
     RHRMEmplTable     emplTable;
     RPayTblParameters rPayTblParameters;
     RPayCalculate_Tbl rPayCalculate;
     Form              form;
     QueryRun          queryRun;
     str               dialogCaption;
     boolean           addFields;
     DialogField       titleField, rPayPeriodField, rPayTblRateCodeField, rPayCalendarIdField;
     HCMTitleRecId     title;
     ReportPeriod_RU   rPayPeriod;
     RPayTblRateCode   rPayTblRateCode;
     RPayCalendarId    rPayCalendarId;
     Set               rateCodeSet;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
          title,
          rPayCalendarId,
          rPayPeriod,
          rPayTblRateCode
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addFields(boolean _add)
    {
        addFields = _add;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkJournal(RPayTblJournal _rPayTblJournal = rPayTblJournal)
    {
        if (! RPayTblTransFormCreate::checkExtendedTypes())
        {
            return false;
        }

        if (! _rPayTblJournal.PayFormType && ! _rPayTblJournal.HrmOrganizationId)
        {
            return checkFailed("@GLS105785");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    #AviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createJournalTrans(int _operationProgressNum = 1)
    {
        RPayCalculate_Tbl        payCalculate;
        int operationProgressNum = _operationProgressNum;

        if (! RPayTblTransFormCreate::checkExtendedTypes())
        {
            return;
        }

        this.makeRateCodeSet();

        if (rateCodeSet.elements() == 0)
        {
            checkFailed("@RUP6196");
            return;
        }

        if (operationProgressNum)
        {
            if (! progress)
            {
                this.progressInit("@RUP357", SysQuery::countTotal(queryRun), #AviUpdate);
                operationProgressNum = 1;
            }
            else
            {
                progress.setCount(0, operationProgressNum);
                progress.setTotal(SysQuery::countTotal(queryRun), operationProgressNum);
            }
        }

        while (queryRun.next())
        {
            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            this.updateEmplTimesheet(emplTable);

            if (operationProgressNum)
            {
                progress.incCount(1, operationProgressNum);
                progress.setText("@RUP372" + emplTable.EmployeeId, operationProgressNum);
            }

            if (rPayTblJournal.Interactive && rPayTblJournal.TblDate == RPayParameters::payPeriod(emplTable.EmployeeId))
            {
                payCalculate = new RPayCalculate_Tbl(RPayModuleTable::find(#ModuleNameTbl));
                payCalculate.payPeriod(rPayTblJournal.TblDate);
                payCalculate.calcEmpl(emplTable.EmployeeId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTblLine</Name>
				<Source><![CDATA[
    //remove this method as used only in obsolete method this.createTblLineRevers()
    private void createTblLine(RHRMEmplTable       _emplTable        = emplTable,
                                 TransDate           _startDateReverse = dateNull(),
                                 TransDate           _endDateReverse   = dateNull(),
                                 RPayCorrectedPeriod _correctedPeriod  = dateNull(),
                                 boolean             _reversed         = true)
    {
        RPayTblTrans         rPayTblTrans;
        RPayTblTimeTable     rPayTblTimeTable;
        RPayTblDayHourTrans  rPayTblDayHourTrans;
        RPayCalendarDateLine rPayCalendarDateLine;
        container            conItem, conItemItem, tblCon;
        TransDate            dateStart,dateEnd;
        RPayTblRateValue     currentStavka;
        HCMTitleRecId        currentTitle;
        Set                  recIdSet;
        int                  i, j;
        TransDate            sourceDate;
        RPayCorrectedPeriod  correctedPeriod;

        if (! _emplTable.checkEmplBeforeCalc(rPayTblJournal.TblDate))
        {
            return;
        }

        recIdSet = new Set(Types::Int64);

        tblCon   = this.getTblCon(_emplTable.EmployeeId, _startDateReverse, _endDateReverse);

        ttsbegin;

        for (i = 1; i <= conLen(tblCon); i++)
        {
            conItem = conPeek(tblCon, i);

            if (conLen(conItem))
            {
                conItemItem   = conPeek(conItem, 1);
                dateStart     = conPeek(conItemItem, 2);
                dateEnd       = conPeek(conItemItem, 3);
                currentStavka = conPeek(conItemItem, 4);
                if (! title)
                {
                    currentTitle = conPeek(conItemItem, 5);
                }
            }

            sourceDate      = (_endDateReverse ? endmth(_endDateReverse): (rPayPeriod ? endmth(rPayPeriod) : rPayTblJournal.TblDate));
            correctedPeriod = _correctedPeriod ? endmth(_correctedPeriod) : RPayParameters::payPeriod(_emplTable.EmployeeId);

            select firstonly rPayTblTrans
                where rPayTblTrans.PayTblNum       == rPayTblJournal.TblNum       &&
                      rPayTblTrans.EmplId          == _emplTable.EmployeeId       &&
                      rPayTblTrans.Stavka          == currentStavka               &&
                      rPayTblTrans.PayCalendarId   == (rPayCalendarId ? rPayCalendarId : _emplTable.PayCalendarId)    &&
                      rPayTblTrans.SourceDate      == sourceDate                                                      &&
                      rPayTblTrans.CorrectedPeriod == correctedPeriod                                                 &&
                      rPayTblTrans.HcmTitle        == (title ? title : currentTitle);

            if (rPayTblTrans.RecId && ! recIdSet.in(rPayTblTrans.RecId) && !_startDateReverse)
            {
                continue;
            }

            if (!rPayTblTrans.RecId)
            {
                rPayTblTrans.clear();
                rPayTblTrans.PayTblNum       = rPayTblJournal.TblNum;
                rPayTblTrans.EmplId          = _emplTable.EmployeeId;
                rPayTblTrans.Stavka          = currentStavka;
                rPayTblTrans.HcmTitle        = title ? title : currentTitle;
                rPayTblTrans.SourceDate      = sourceDate;
                rPayTblTrans.CorrectedPeriod = correctedPeriod;
                rPayTblTrans.PayCalendarId   = rPayCalendarId ? rPayCalendarId : _emplTable.PayCalendarId;
                rPayTblTrans.insert();
            }

            recIdSet.add(rPayTblTrans.RecId);

            for (j = 1; j <= conLen(conItem); j ++)
            {
                conItemItem = conPeek(conItem, j);
                dateStart   = conPeek(conItemItem, 2);
                dateEnd     = conPeek(conItemItem, 3);

                if (rPayTblTrans.PayCalendarId)
                {
                    if (rPayTblJournal.PayTblType == RPayTblType::Itog)
                    {
                        rPayTblTrans.initFromCalendarTable(dateStart,dateEnd);
                        rPayTblTrans.validateField(fieldNum(RPayTblTrans,Stavka));
                        rPayTblTrans.update();
                    }
                    else
                    {
                        while select PayTblTimeCode from rPayTblTimeTable
                                  where rPayTblTimeTable.PayFormType == rPayTblJournal.PayFormType
                              exists join rPayCalendarDateLine
                                  where rPayCalendarDateLine.PayCalendarTimeCode == rPayTblTimeTable.PayTblTimeCode &&
                                        rPayCalendarDateLine.CalendarId          == rPayTblTrans.PayCalendarId      &&
                                        rPayCalendarDateLine.TransDate           >= dateStart                       &&
                                        rPayCalendarDateLine.TransDate           <= dateEnd
                        {
                            rPayTblDayHourTrans                = RPayTblDayHourTrans::find(rPayTblTrans.RecId,
                                                                                           rPayTblTimeTable.PayTblTimeCode,
                                                                                           true);
                            rPayTblDayHourTrans.PayTblTimeCode = rPayTblTimeTable.PayTblTimeCode;
                            rPayTblDayHourTrans.TblTransRecId  = rPayTblTrans.RecId;

                            rPayTblDayHourTrans.initFromCalendarTable(dateStart, dateEnd, _reversed, (_endDateReverse && _startDateReverse));
                            rPayTblDayHourTrans.validateField(fieldNum(RPayTblDayHourTrans,Day1));

                            if (! rPayTblDayHourTrans)
                            {
                                rPayTblDayHourTrans.insert();
                            }
                            else
                            {
                                rPayTblDayHourTrans.update();
                            }
                            rPayTblTrans = rPayTblDayHourTrans.rPayTblTrans();
                        }
                    }
                    RpayTblSpecTimeTrans::newTblTrans(rPayTblTrans, dateStart, dateEnd, (_endDateReverse && _startDateReverse), _reversed);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteJournalTrans()
    {
        RPayTblTrans          rPayTblTrans;

        ttsbegin;

        while (queryRun.next())
        {
               emplTable = queryRun.get(tableNum(RHRMEmplTable));

               delete_from rPayTblTrans
                   where rPayTblTrans.EmplId    == emplTable.EmployeeId &&
                         rPayTblTrans.PayTblNum == rPayTblJournal.TblNum;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        if (addFields)
        {
            titleField           = dialog.addFieldValue(extendedTypeStr(HcmTitleRecId),     title);
            rPayCalendarIdField  = dialog.addFieldValue(extendedTypeStr(RPayCalendarId),    rPayCalendarId);
            rPayPeriodField      = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU),   rPayPeriod);
            rPayTblRateCodeField = dialog.addFieldValue(extendedTypeStr(RPayTblRateCode),   rPayTblRateCode);
        }
        dialog.caption(this.dialogCaption());
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str dialogCaption(str _dialogCaption = dialogCaption)
    {
        dialogCaption = _dialogCaption;
        return dialogCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCreateJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean dialogCreateJournal()
    {
        if (endmth(rPayTblJournal.TblDate) < RPayParameters::payPeriod())
        {
            return checkFailed("@RUP437");
        }

        if (Box::yesNo("@RUP358",DialogButton::Yes,"@RUP357","@RUP359") == DialogButton::No)
        {
            return false;
        }

        return RPayController::canModuleChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>form</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Form form(Form _form = form)
    {
        form = _form;
        return form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean     ret;
        int         i;
        DictType    dictType = new DictType(extendedTypeNum(RPayTblRateCode));

        ret = super();

        if (ret && addFields)
        {
            rPayCalendarId = rPayCalendarIdField.value();
            if (rPayCalendarId && ! RPayCalendarTable::find(rPayCalendarId))
            {
                ret = checkFailed("@RUP1080");
            }

            rPayTblRateCode = rPayTblRateCodeField.value();

            for (i = 1; i <= dictType.arraySize(); i ++)
            {
                if (rPayTblRateCode[i] && ! RPayRateTable::find(rPayTblRateCode[i]))
                {
                    ret = checkFailed(strFmt("@RUP2037", dictType.label(i)));
                }
            }

            title = titleField.value();
            if (title && ! HCMTitle::find(title))
            {
                ret = checkFailed("@RUP1081");
            }
            rPayPeriod = rPayPeriodField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTblCon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getTblCon(RHRMEmplId    _emplId,
                                  TransDate _startDateReverse = dateNull(),
                                  TransDate _endDateReverse   = dateNull())
    {
        container            tblCon, dateAndValue, historyCon, conItem;
        RPayTblRateValue     rPayTblRateValue;
        TransDate            dateStart,dateEnd;
        int                  i;
        SetIterator          setIterator;
        RPayRateCallContext  context;

        if (_startDateReverse && _endDateReverse)
        {
            dateStart   = _startDateReverse;
            dateEnd     = _endDateReverse;
        }
        else
        {
            dateStart    = rPayPeriod ? mkDate(1, mthOfYr(rPayPeriod), year(rPayPeriod)) :
                                        mkDate(1, mthOfYr(rPayTblJournal.TblDate), year(rPayTblJournal.TblDate));
            dateEnd      = rPayPeriod ? endmth(rPayPeriod) :
                                        endmth(rPayTblJournal.TblDate);
        }

            historyCon   = RPayHistory::getOrganizationByDateInterval(_emplId,
                                                                  dateStart,
                                                                  dateEnd,
                                                                  rPayTblJournal.HrmOrganizationId);
        if (conLen(historyCon))
        {
            dateStart = conPeek(conPeek(historyCon, 1), 2);
            dateEnd   = conPeek(conPeek(historyCon, conLen(historyCon)), 3);
        }
        else
        {
            return conNull();
        }

        for (i = 1; i <= conLen(historyCon); i ++)
        {
            conItem    = conPeek(historyCon, i);
            conItem    = conIns(conItem, conLen(conItem) + 1, rPayTblRateValue);
            historyCon = conPoke(historyCon, i, conItem);
        }

        setIterator = new SetIterator(rateCodeSet);

        while (setIterator.more())
        {
            context = new RPayRateCallContext();
            context.parmEmployeeId(_emplId);

            dateAndValue = RPayRateObj::getDateAndValue(rPayTblRateCode ? rPayTblRateCode[setIterator.value()] : rPayTblJournal.PayRate[setIterator.value()],
                                                dateStart,
                                                dateEnd,
                                                context);

            tblCon = this.mergeHistoryRateCons(historyCon, dateAndValue, title, setIterator.value());

            setIterator.next();

            if (setIterator.more())
            {
                historyCon = this.makeNewHistoryCon(tblCon);
            }
        }

        return tblCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQueryRun()
    {
        Query            query = new Query("@SYS716");
        QueryBuildDataSource qbds;

        qbds = query.addDataSource(tableNum(RHRMEmplTable));
        findOrCreateRange_W(qbds, fieldNum(RHRMEmplTable, PayFormType), queryValue(rPayTblJournal.PayFormType));

        qbds = qbds.addDataSource(tableNum(RPayHistory));
        qbds.relations(true);
        findOrCreateRange_W(qbds, fieldNum(RPayHistory, hrmOrganizationId), queryValue(RPayTblJournal.HrmOrganizationId));

        queryRun       = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpSumTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpRPayTimeGroupSum initTmpSumTable(RPayTblTrans _rPayTblTrans)
    {
        TmpRPayTimeGroupSum     tmpRPayTimeGroupSum;
        RPayTblTimeTable        rPayTblTimeTable;
        RPayTimeGroupMember     rPayTimeGroupMember;
        RPayCalendarTimeTrans   timeTrans;

        if (! _rPayTblTrans)
        {
            return tmpRPayTimeGroupSum;
        }

        ttsbegin;

        while select RecId from rPayTblTimeTable
                where rPayTblTimeTable.PayFormType == rPayTblJournal.PayFormType
            join PayCalendarTimeCode, TimeGroup from rPayTimeGroupMember
                where rPayTimeGroupMember.PayCalendarTimeCode == rPayTblTimeTable.PayTblTimeCode
        {
            tmpRPayTimeGroupSum.clear();
            tmpRPayTimeGroupSum.CalendarId          = _rPayTblTrans.PayCalendarId;
            tmpRPayTimeGroupSum.TimeGroup           = rPayTimeGroupMember.TimeGroup;

            timeTrans = RPayCalendarTimeTrans::findByTimeCode(_rPayTblTrans.RecId, rPayTimeGroupMember.PayCalendarTimeCode);
            tmpRPayTimeGroupSum.Day = timeTrans.Day;
            tmpRPayTimeGroupSum.Hour = timeTrans.Hour;

            tmpRPayTimeGroupSum.PayCalendarTimeCode = rPayTimeGroupMember.PayCalendarTimeCode;
            tmpRPayTimeGroupSum.TransDate           = rPayTblJournal.TblDate;
            tmpRPayTimeGroupSum.insert();
        }

        ttscommit;

        return tmpRPayTimeGroupSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean journalTransExist(RPayTblJournal _rPayTblJournal = rPayTblJournal)
    {
        return (select rPayTblTrans where rPayTblTrans.PayTblNum == _rPayTblJournal.TblNum).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeNewHistoryCon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container makeNewHistoryCon(container _tblCon)
    {
        container           newHistoryCon, con, conItem, tmpCon;
        int                 i, j;
        Map                 map         = new Map(Types::Date, Types::Integer);
        MapEnumerator       mapEnumerator;

        for (i = 1; i <= conLen(_tblCon); i ++)
        {
            con = conPeek(_tblCon, i);

            for (j = 1; j <= conLen(con); j ++)
            {
                conItem = conPeek(con, j);
                tmpCon += [[conPeek(conItem, 1),
                            conPeek(conItem, 2),
                            conPeek(conItem, 3),
                            conPeek(conItem, 6),
                            conPeek(conItem, 4)]];

                map.insert(conPeek(conItem, 2), conLen(tmpCon));
            }
        }

        mapEnumerator = map.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            conItem = conPeek(tmpCon, mapEnumerator.currentValue());
            newHistoryCon += [conItem];
        }

        return newHistoryCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRateCodeSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void makeRateCodeSet()
    {
        int                i;
        RPayTblRateCode    rateCode;

        rateCodeSet = new Set(Types::Integer);

        rateCode = rPayTblRateCode ? rPayTblRateCode : rPayTblJournal.PayRate;

        for (i = 1; i <= dimOf(rateCode); i ++)
        {
            if (rateCode[i])
            {
                rateCodeSet.add(i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeHistoryRateCons</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container mergeHistoryRateCons(container _historyCon, container _rateCon, HCMTitleRecId _title = 0, int _currentTblRateValue = 1)
    {
        container           con = conNull(), conItem, conItemItem, mapCon;
        Map                 map;
        int                 i, j, k, pos;
        HCMTitleRecId       titleLocal;
        TransDate           lastDate;
        RPayTblRateValue    rPayTblRateValue;
        real                tmp;

        if (! conLen(_historyCon) || ! conLen(_rateCon))
        {
            return conNull();
        }

        map = new Map(Types::Container, Types::Integer);

        j = conLen(_rateCon);

        lastDate = min(conPeek(conPeek(_historyCon, 1), 2), conPeek(conPeek(_rateCon, j), 1));

        for (i = 1; i <= conLen(_historyCon); i ++)
        {
            k ++;
            conItem = conNull();

            titleLocal = (_title ? _title : RPayHistory::findByRecId(conPeek(conPeek(_historyCon, i), 4)).HcmTitle);

            while (conPeek(conPeek(_historyCon, i), 2) > conPeek(conPeek(_rateCon, j), 2))
            {
                if (j == 1) break;
                j --;
            }

            if (_title)
            {
                tmp =  0;
            }
            else
            {
                tmp =  conPeek(conPeek(_historyCon, i), 4);
            }

            rPayTblRateValue = conPeek(conPeek(_historyCon, i), 5);
            rPayTblRateValue[_currentTblRateValue] = conPeek(conPeek(_rateCon, j), 3);
            conItemItem = [conPeek(conPeek(_historyCon, i), 1),
                           max(lastDate, conPeek(conPeek(_historyCon, i), 2)),
                           min(conPeek(conPeek(_historyCon, i), 3), conPeek(conPeek(_rateCon, j), 2)),
                           rPayTblRateValue,
                           titleLocal,
                           tmp];
            mapCon = [conPeek(conPeek(_historyCon, i), 1), rPayTblRateValue, titleLocal];

            if (map.exists(mapCon))
            {
                pos     =  map.lookup(mapCon);
                conItem =  conPeek(con, pos);
                conItem += [conItemItem];
                con     =  conPoke(con, pos, conItem);
            }
            else
            {
                map.insert(mapCon, k);
                conItem += [conItemItem];
                con     += [conItem];
            }
            lastDate = min(conPeek(conPeek(_historyCon, i), 3), conPeek(conPeek(_rateCon, j), 2)) + 1;
            if (conPeek(conPeek(_historyCon, i), 3) >= conPeek(conPeek(_rateCon, j), 2))
            {
                if (conPeek(conPeek(_historyCon, i), 3) > conPeek(conPeek(_rateCon, j), 2))
                {
                    i --;
                }
                j --;
            }
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayTblJournal _rPayTblJournal)
    {
        super();
        if (_rPayTblJournal.RecId)
        {
            rPayTblJournal    = _rPayTblJournal;
            rPayTblParameters = RPayTblParameters::find();

            rPayCalculate = new RPayCalculate_Tbl(RPayModuleTable::find(#ModuleNameTbl));
            rPayCalculate.payPeriod(rPayTblJournal.TblDate);

            this.initQueryRun();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.checkJournal())
        {
            if (! this.journalTransExist() && this.dialogCreateJournal())
            {
                this.createJournalTrans();
            }
            this.updateFormDesign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplTimesheet</Name>
				<Source><![CDATA[
    private void updateEmplTimesheet(RHRMEmplTable _emplTable)
    {
        RPayTblDimension tblDimension;

        tblDimension = new RPayTblDimension();
        tblDimension.parmOrganizationId(rPayTblJournal.HrmOrganizationId);
        tblDimension.parmPayFormType(rPayTblJournal.PayFormType);

        RPayTblUpdater::updateTimesheetFromDimension(dateStartMth(rPayPeriod ? rPayPeriod : rPayTblJournal.TblDate),
                                                    dateEndMth(rPayPeriod ? rPayPeriod : rPayTblJournal.TblDate),
                                                    tblDimension,
                                                    _emplTable.EmployeeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateFormDesign(Form _form = form)
    {
        FormBuildDesign  formBuildDesign;
        DictTable        dictTable = new DictTable(tableNum(RPayTblTrans));
        FormRun          formRun;
        Args             args = new Args();

        if (! form)
        {
            return;
        }

        formBuildDesign = _form.design();
        args.name(_form.name());
        args.record(rPayTblJournal);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExtendedTypes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExtendedTypes()
    {
        DictType    dictTypeCode, dictTypeValue;

        dictTypeCode  = new DictType(extendedTypeNum(RPayTblRateCode));
        dictTypeValue = new DictType(extendedTypeNum(RPayTblRateValue));

        if (dictTypeValue.arraySize() != dictTypeCode.arraySize())
        {
            return checkFailed(strFmt("@RUP2038", dictTypeCode.name(), dictTypeValue.name()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static RPayTblTransFormCreate construct(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(RPayTblJournal):
                return new RPayTblTransFormCreate(_common);
            case tableNum (RPayEmplTblSum):
                return new RPayTblTransFormCreate_Empl(_common);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                 common = _args.record();
        RPayTblTransFormCreate rPayTblTransFormCreate;

        rPayTblTransFormCreate = RPayTblTransFormCreate::construct(common);

        if (! rPayTblTransFormCreate)
        {
            checkFailed("@GLS105755");
            return;
        }

        rPayTblTransFormCreate.form(new Form(_args.parm()));
        rPayTblTransFormCreate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>