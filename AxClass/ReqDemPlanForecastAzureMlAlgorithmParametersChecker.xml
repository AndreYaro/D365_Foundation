<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanForecastAzureMlAlgorithmParametersChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A <c>ReqDemPlanForecastAzureMlAlgorithmParametersChecker</c> checks Azure Ml forecast algorithm parameters.
/// </summary>
public class ReqDemPlanForecastAzureMlAlgorithmParametersChecker
{
    #ReqDemPlanForecastAlgorithmParameters

    private Map globalParameters;
    private Map allocationKeysParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGlobalParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add default and global forecast algorithm parameters that should be validated.
    /// </summary>
    /// <param name = "_name">Parameter name.</param>
    /// <param name = "_value">Parameter value.</param>
    internal void addGlobalParameter(ReqDemPlanAzureMlParameterName _name, ReqDemPlanAzureMlParameterValue _value)
    {
        if (!globalParameters)
        {
            globalParameters = new Map(Types::String, Types::String);
        }

        globalParameters.add(_name, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameterForAllocationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add allocation key specific forecast algorithm parameters that should be validated.
    /// </summary>
    /// <param name = "_allocationKeyMappingRecId">Allocation key RecId.</param>
    /// <param name = "_name">Parameter name.</param>
    /// <param name = "_value">Parameter value.</param>
    internal void addParameterForAllocationKey(RefRecId _allocationKeyMappingRecId, ReqDemPlanAzureMlParameterName _name, ReqDemPlanAzureMlParameterValue _value)
    {
        if (!allocationKeysParameters)
        {
            allocationKeysParameters = new Map(Types::Int64, Types::Class);
        }

        Map allocationKeyParameters;

        if (allocationKeysParameters.exists(_allocationKeyMappingRecId))
        {
            allocationKeyParameters = allocationKeysParameters.lookup(_allocationKeyMappingRecId);
        }
        else
        {
            allocationKeyParameters = new Map(Types::String, Types::String);

            allocationKeysParameters.add(_allocationKeyMappingRecId, allocationKeyParameters);
        }

        allocationKeyParameters.add(_name, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check global, default and allocation key parameters.
    /// </summary>
    /// <param name = "_throwError">True if error should be thrown.</param>
    /// <returns>True if parameters are valid.</returns>
    internal boolean check(boolean _throwError = false)
    {
        boolean returnValue = true;

        setPrefix("@DMP:ForecastParametersCheck");

        ReqDemPlanAzureMlParameterValue missingValueScope = this.getMapValue(globalParameters, #MissingValueScopeName);
        ReqDemPlanAzureMlParameterValue missingValueSubstitution = this.getMapValue(globalParameters, #MissingValueSubstitutionName);

        //Check global parameters
        if (!this.missingValueValidate(missingValueScope, missingValueSubstitution))
        {
            returnValue = checkFailed(this.compatibilityWarningText(missingValueScope, missingValueSubstitution));
        }

        //Check allocation key parameters
        if (allocationKeysParameters)
        {
            MapEnumerator mapEnumerator = allocationKeysParameters.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                missingValueScope = this.getParameterValue(mapEnumerator.currentValue(), #MissingValueScopeName);
                missingValueSubstitution = this.getParameterValue(mapEnumerator.currentValue(), #MissingValueSubstitutionName);

                if (!this.missingValueValidate(missingValueScope, missingValueSubstitution))
                {
                    returnValue = checkFailed(this.compatibilityWarningText(missingValueScope, missingValueSubstitution, mapEnumerator.currentKey()));
                }
            }
        }

        if (!returnValue && _throwError)
        {
            throw error("@DMP:InvalidParameters");
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValue</Name>
				<Source><![CDATA[
    private ReqDemPlanAzureMlParameterValue getParameterValue(Map _allocationKeyParameters, ReqDemPlanAzureMlParameterName _name)
    {
        ReqDemPlanAzureMlParameterValue value;

        value = this.getMapValue(_allocationKeyParameters, _name);

        if (!value && (!_allocationKeyParameters || !_allocationKeyParameters.exists(_name)))
        {
            value = this.getMapValue(globalParameters, _name);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapValue</Name>
				<Source><![CDATA[
    private ReqDemPlanAzureMlParameterValue getMapValue(Map _allocationKeyParameters, ReqDemPlanAzureMlParameterName _name)
    {
        ReqDemPlanAzureMlParameterValue value;

        if (_allocationKeyParameters && _allocationKeyParameters.exists(_name))
        {
            value = _allocationKeyParameters.lookup(_name);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>missingValueValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the MissingValueScope and MissingValueSubstitution forecast algorithm parameters are compatible with each other.
    /// </summary>
    /// <param name = "_missingValueScope">MissingValueScope value.</param>
    /// <param name = "_missingValueSubstitution">MissingValueSubstitution value.</param>
    /// <returns>True in case parameters are compatible.</returns>
    protected boolean missingValueValidate(ReqDemPlanAzureMlParameterValue _missingValueScope, ReqDemPlanAzureMlParameterValue _missingValueSubstitution)
    {
        boolean isValid = true;

        if (((_missingValueScope == #MissingValueScopeValueHistDateRange || _missingValueScope == #MissingValueScopeValueGlobal) &&
            (_missingValueSubstitution == #MissingValueSubstitutionValuePrevious || _missingValueSubstitution == #MissingValueSubstitutionValueInterpolateLinear)))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compatibilityWarningText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate warning message in case the parameters combination is invalid.
    /// </summary>
    /// <param name = "_parameterOne">First parameter.</param>
    /// <param name = "_parameterTwo">Second parameter.</param>
    /// <param name = "_allocationKeyMappingRecId">Allocation key RecId.</param>
    /// <returns>Warning message.</returns>
    protected str compatibilityWarningText(ReqDemPlanAzureMlParameterValue _firstParametere, 
                                           ReqDemPlanAzureMlParameterValue _secondParameter, 
                                           RefRecId _allocationKeyMappingRecId = 0)
    {
        str warningMsg;
        
        if (_allocationKeyMappingRecId)
        {
            ReqDemPlanForecastIAKMap allocationKeyMapping;

            select firstonly ForecastItemAllocation, ForecastItemAllocationDataAreaID from allocationKeyMapping 
                where allocationKeyMapping.RecId == _allocationKeyMappingRecId;

            warningMsg = strFmt("@DMP:ForecastIAKParametersCompatibilityWarning",
                                allocationKeyMapping.ForecastItemAllocation,
                                allocationKeyMapping.ForecastItemAllocationDataAreaID,
                                _firstParametere,
                                _secondParameter);
        }
        else
        {
            warningMsg = strFmt("@DMP:ForecastParametersCompatibilityWarning", _firstParametere, _secondParameter);
        }

        return warningMsg;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>