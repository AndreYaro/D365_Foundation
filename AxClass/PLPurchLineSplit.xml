<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlPurchLineSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PlPurchLineSplit
{
    PurchLine   purchLine;
    PurchQty    splitQty;

    PurchLine   newPurchLine;

    private boolean processMarking;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    private boolean dialog()
    {
        DialogField field;
        Dialog      dialog = new Dialog("@SYS69088");

        field = dialog.addFieldValue(extendedTypeStr(PurchQty), purchLine.RemainPurchPhysical);
        if (dialog.run())
        {
            splitQty = field.value();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchLine</Name>
				<Source><![CDATA[
    PurchLine newPurchLine()
    {
        return newPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pruchLine</Name>
				<Source><![CDATA[
    private PurchLine pruchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>InventTrans</c> record and returns <c>InventTransQtyUpdateContract_PL</c> object with updated quantities.
    /// </summary>
    /// <param name = "_inventTrans"><c>InventTrans</c> record for update.</param>
    /// <param name = "_qty2Split">Inventory quantity to split.</param>
    /// <param name = "_pdsCWQty2Split">CW quantity.</param>
    /// <param name = "_originIdNew"><c>InventTransOriginId</c> value.</param>
    /// <returns><c>InventTransQtyUpdateContract_PL</c> object.</returns>
    protected InventTransQtyUpdateContract_PL updateInventTrans(InventTrans _inventTrans, InventQty _qty2Split, PdsCWInventQty _pdsCWQty2Split, InventTransOriginId _originIdNew)
    {
        InventTransQtyUpdateContract_PL result = new InventTransQtyUpdateContract_PL();
        
        if (abs(_inventTrans.Qty) > abs(_qty2Split))
        {
            InventTransSplit inventSplit = InventTransSplit::newInventTransSplit(_inventTrans.RecId);
            inventSplit.parmSplitQty(_qty2Split);
            inventSplit.pdsCWParmSplitQty(_pdsCWQty2Split);
            inventSplit.runOperation();

            TmpInventTransMark tmpInventTransMark;
            if (this.parmProcessMarking())
            {
                tmpInventTransMark = this.deleteMarking(_inventTrans.InventTransOrigin, _inventTrans.inventDim(), _qty2Split);
            }

            InventTrans newInventTrans;
            select firstonly forupdate newInventTrans
                    where newInventTrans.RecId == inventSplit.updRecId();

            newInventTrans.InventTransOrigin = _originIdNew;
            newInventTrans.update();

            if (this.parmProcessMarking())
            {
                this.updateMarking(tmpInventTransMark, _inventTrans.inventDim(), _qty2Split, _originIdNew);
            }

            result.parmInventQty(0);
            result.parmPdsCWInventQty(0);
        }
        else
        {
            TmpInventTransMark tmpInventTransMark;
            if (this.parmProcessMarking())
            {
                tmpInventTransMark = this.deleteMarking(_inventTrans.InventTransOrigin, _inventTrans.inventDim(), _inventTrans.Qty);
                _inventTrans.reread();
            }

            _inventTrans.InventTransOrigin = _originIdNew;
            _inventTrans.update();

            if (this.parmProcessMarking())
            {
                this.updateMarking(tmpInventTransMark, _inventTrans.inventDim(), _inventTrans.Qty, _originIdNew);
            }

            result.parmInventQty(_qty2Split - _inventTrans.Qty);
            result.parmPdsCWInventQty(_pdsCWQty2Split - _inventTrans.PdsCWQty);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarking</Name>
				<Source><![CDATA[
    private void updateMarking(TmpInventTransMark _tmpInventTransMark, InventDim _inventDim, InventQty _qty2Split, InventTransOriginId _originIdNew)
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDim);

        while select _tmpInventTransMark
        {
            InventQty markedQty = InventTransOrigin::updateMarking(
                _originIdNew,
                _tmpInventTransMark.inventTransOrigin,
                -_tmpInventTransMark.qtyMarkNow,
                '',
                SortOrder::Ascending,
                false,
                _inventDim,
                inventDimParm);

            if (markedQty)
            {
                markedQty = InventTransOrigin::updateMarking(
                    _tmpInventTransMark.inventTransOrigin,
                    _originIdNew,
                    _tmpInventTransMark.qtyMarkNow,
                    '',
                    SortOrder::Ascending,
                    false,
                    _inventDim,
                    inventDimParm);
            }

            if (!markedQty)
            {
                throw error("@ApplicationSuite_Localization:NotEnoughTransactionsMarkingSplitPurchaseLine");

            }
        }

        InventTrans inventTrans;
            
        while select forupdate inventTrans 
            where inventTrans.MarkingRefInventTransOrigin == _originIdNew &&
                inventTrans.StatusIssue == StatusIssue::OnOrder
        {
            inventTrans.StatusIssue = StatusIssue::ReservOrdered;
            inventTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMarking</Name>
				<Source><![CDATA[
    private TmpInventTransMark deleteMarking(InventTransOriginId _inventTransOrigin, InventDim _inventDim, InventQty _qty2Split)
    {
        InventTransMarkCollection inventTransMarkCollection = TmpInventTransMark::markingCollection(InventTransOrigin::find(_inventTransOrigin), _inventDim, _qty2Split);

        TmpInventTransMark tmpInventTransMark;
            
        inventTransMarkCollection.insertCollectionToTmpTable(tmpInventTransMark);

        InventQty qtyRemainToUnMark = _qty2Split;

        select forupdate tmpInventTransMark;
        while (qtyRemainToUnMark && tmpInventTransMark)
        {
            InventQty markNow = tmpInventTransMark.QtyMarked >  -qtyRemainToUnMark ? -tmpInventTransMark.QtyMarked : qtyRemainToUnMark;

            qtyRemainToUnMark -= markNow;

            tmpInventTransMark.qtyMarkNow = -markNow;
            tmpInventTransMark.update();

            next tmpInventTransMark;
        }

        delete_from tmpInventTransMark
            where tmpInventTransMark.qtyMarkNow == 0;
     
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDim);

        while select tmpInventTransMark
        {
            InventQty unMarkedQty = InventTransOrigin::deleteMarking(
                _inventTransOrigin,
                tmpInventTransMark.InventTransOrigin,
                -tmpInventTransMark.qtyMarkNow,
                false,
                _inventDim,
                inventDimParm);

            if (unMarkedQty)
            {
                InventTransOrigin::deleteMarking(
                    tmpInventTransMark.InventTransOrigin,
                    _inventTransOrigin,
                    tmpInventTransMark.qtyMarkNow,
                    false,
                    _inventDim,
                    inventDimParm);
            }
        }

        return tmpInventTransMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessMarking</Name>
				<Source><![CDATA[
    private boolean parmProcessMarking(boolean _processMarking = processMarking)
    {
        processMarking = _processMarking;
        return processMarking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run(Qty _splitQty = 0, PdsCWInventQty _pdsCWSplitQty = 0)
    {
        #OCCRetryCount
        InventTrans         inventTrans;
        InventQty           qty2Split;
        PdsCWInventQty      pdsCWQty2Split;
        InventTransOriginId originIdOld, originIdNew;
        MarkupTrans         markupTrans, newMarkupTrans;
        InventTransQtyUpdateContract_PL inventTransQtyContract;

        splitQty = _splitQty;

        if (!splitQty)
        {
            if (!this.dialog())
            {
                return;
            }
            this.parmProcessMarking(true);
        }

        qty2Split = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                          purchLine.InventDimId,
                                                                                          splitQty,
                                                                                          purchLine.PurchUnit,
                                                                                          purchLine.inventTable().inventUnitId(),
                                                                                          NoYes::Yes);
        pdsCWQty2Split = _pdsCWSplitQty;

        if (!splitQty                                   ||
            splitQty >= purchLine.PurchQty              ||
            splitQty >= purchLine.RemainPurchPhysical   ||
            qty2Split >= purchLine.RemainInventPhysical  ||
            splitQty * purchLine.PurchQty < 0)
        {
            return;
        }

        try
        {
            ttsbegin;

            this.clearNonInventTransRef(purchLine);

            newPurchLine.initFromPurchTable(PurchTable::find(purchLine.PurchId));
            newPurchLine.initFromPurchLine(purchLine, true, true, true, true, splitQty, _pdsCWSplitQty);
            newPurchLine.LineNumber           = purchLine.TradeLineNumbering::getLastLineNumber() + SystemParameters::getSystemLineNumberIncrement();
            newPurchLine.MatchingAgreementLine = purchLine.MatchingAgreementLine;
            newPurchLine.RemainPurchPhysical  = splitQty;
            newPurchLine.RemainInventPhysical = newPurchLine.QtyOrdered;
            newPurchLine.LineAmount           = newPurchLine.calcLineAmount();
            newPurchLine.insert(false, false);

            originIdNew = InventTransOrigin::findByInventTransId(newPurchLine.InventTransId).RecId;
            /*delete_from inventTrans
                where inventTrans.InventTransOrigin == originIdNew;*/
            while select forupdate inventTrans
                where inventTrans.InventTransOrigin == originIdNew
            {
                inventTrans.delete(NoYes::No, NoYes::No);
            }

            purchLine = PurchLine::findRecId(purchLine.RecId, true);
            purchLine.PurchQty             -= splitQty;
            purchLine.PdsCWQty             -= _pdsCWSplitQty;
            purchLine.QtyOrdered            = purchLine.calcQtyOrdered();
            purchLine.RemainPurchPhysical  -= splitQty;
            purchLine.RemainInventPhysical  = purchLine.QtyOrdered;
            purchLine.LineAmount            = purchLine.calcLineAmount();
            purchLine.update(true);

            while select forupdate markupTrans
                where markupTrans.TransTableId == tableNum(PurchLine) &&
                      markupTrans.TransRecId   == purchLine.RecId
            {
                newMarkupTrans.data(markupTrans);
                newMarkupTrans.TransRecId   = newPurchLine.RecId;
                newMarkupTrans.LineNum      = MarkupTrans::lastLineNum(newMarkupTrans.TransTableId, newMarkupTrans.TransRecId) + 1;

                markupTrans.Value           = CurrencyExchangeHelper::amount(markupTrans.Value * purchLine.RemainPurchPhysical / (purchLine.RemainPurchPhysical + splitQty));
                markupTrans.update();

                newMarkupTrans.Value       -= markupTrans.Value;
                newMarkupTrans.insert();
            }

            originIdOld = InventTransOrigin::findByInventTransId(purchLine.InventTransId).RecId;

            while (qty2Split)
            {
                select firstonly forupdate inventTrans
                    where inventTrans.InventTransOrigin == originIdOld
                          && inventTrans.StatusIssue    == StatusIssue::None
                          && inventTrans.StatusReceipt  >  StatusReceipt::Purchased
                          && !inventTrans.DatePhysical;

                if (inventTrans)
                {
                    inventTransQtyContract = this.updateInventTrans(inventTrans, qty2Split, pdsCWQty2Split, originIdNew);
                    qty2Split = inventTransQtyContract.parmInventQty();
                    pdsCWQty2Split = inventTransQtyContract.parmPdsCWInventQty();
                    continue;
                }

                select firstonly reverse forupdate inventTrans
                    order by DatePhysical
                    where inventTrans.InventTransOrigin == originIdOld
                          && inventTrans.StatusIssue    == StatusIssue::None
                          && inventTrans.StatusReceipt  >  StatusReceipt::Purchased;

                if (inventTrans)
                {
                    inventTransQtyContract = this.updateInventTrans(inventTrans, qty2Split, pdsCWQty2Split, originIdNew);
                    qty2Split = inventTransQtyContract.parmInventQty();
                    pdsCWQty2Split = inventTransQtyContract.parmPdsCWInventQty();
                    continue;
                }

                throw error("@GLS110287");
            }

            newPurchLine.ItemRefType          = purchLine.ItemRefType;
            newPurchLine.InventRefTransId     = purchLine.InventRefTransId;
            newPurchLine.InventRefId          = purchLine.InventRefId;
            newPurchLine.doUpdate();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {
            ttsabort;
            Box::stop("@GLS110288");
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNonInventTransRef</Name>
				<Source><![CDATA[
    private void clearNonInventTransRef(PurchLine _purchLine)
    {
        SalesLine salesLine = _purchLine.salesLine(true);

        if (salesLine)
        {
            salesLine.clearInventReference();
            salesLine.SyncPurchLine = NoYes::No;
            salesLine.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PLPurchLineSplit    purchLineSplit = new PLPurchLineSplit();
        Object              purchLine_dataSource;

        if (args && args.record() && args.record().TableId == tableNum(PurchLine))
        {
            purchLineSplit.pruchLine(args.record());
            purchLineSplit.run();

            purchLine_dataSource = FormDataUtil::getFormDataSource(args.record());
            if (purchLine_dataSource)
            {
                purchLine_dataSource.executeQuery();
            }
        }
        else
            throw error(strFmt("@SYS27147", new DictClass(classIdGet(purchLineSplit)).name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits <c>PurchLine</c> by separating the given quantities.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record to split.
    /// </param>
    /// <param name="_splitQty">
    /// Quantity to split in purchase units of measure.
    /// </param>
    /// <param name="_pdsCWSplitQty">
    /// Catch-weight quantity to split; optional.
    /// </param>
    /// <returns>
    /// The new <c>PurchLine</c> that was created durung the split.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws <c>Exception::Error</c> if either <paramref name="_purchLine"/> or <paramref name="_splitQty"/> is not provided.
    /// </exception>
    public static PurchLine update(PurchLine        _purchLine,
                                   Qty              _splitQty,
                                   PdsCWInventQty   _pdsCWSplitQty = 0.0)
    {
        PLPurchLineSplit    purchLineSplit = new PLPurchLineSplit();

        if (_purchLine && _splitQty)
        {
            purchLineSplit.pruchLine(_purchLine);
            purchLineSplit.run(_splitQty, _pdsCWSplitQty);
        }
        else
        {
            throw error(strFmt("@SYS27147", new DictClass(classIdGet(purchLineSplit)).name()));
        }
        return purchLineSplit.newPurchLine();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>