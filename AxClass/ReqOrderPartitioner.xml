<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqOrderPartitioner</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqOrderPartitioner</c> class partitions a set of orders by sorting them by date and item ID and splitting the list in several bundles.
/// </summary>
class ReqOrderPartitioner
{
    #Req

    ReqProcessId    processId;
    RefRecId        planVersion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanVersion</Name>
				<Source><![CDATA[
    protected RefRecId parmPlanVersion(RefRecId _planVersion = planVersion)
    {
        planVersion = _planVersion;
        return planVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessId</Name>
				<Source><![CDATA[
    protected ReqProcessId parmProcessId(ReqProcessId _processId = processId)
    {
        processId = _processId;
        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Partitions the orders.
    /// This is done by grouping the orders in buckets based on their date and item ID.
    /// Then a bundle is pulled from each bucket, while iterating through the buckets in a circular fashion until all orders are exhausted.
    /// </summary>
    public void partition()
    {
        ReqUnscheduledOrders reqUnscheduledOrders;
        ReqTrans reqTrans;
        int orderCount;
        int bundleOrderCount;
        int bundleId;
        Map buckets = new Map(Types::String, Types::Class);
        str bundleKey;
        Set bucketOrders;
        MapEnumerator mapEnumerator;
        SetEnumerator setEnumerator;
        UnitOfWork reqUnscheduledOrdersUpdateList = new UnitofWork();

        WrkCtrSchedulerLogger::Instance().writeToLog(WrkCtrSchedulerLogEvent::PartitionOrders, 'Partitioning start');

        ttsBegin;

        // split orders into bundles according to their resource partitioning assignement
        while select forupdate reqUnscheduledOrders
            where   reqUnscheduledOrders.ProcessId == processId
        join reqDate, ItemId from reqTrans
        order by reqDate
            where   reqTrans.RefId == reqUnscheduledOrders.RefId
            &&
                (
                reqTrans.RefType            == ReqRefType::BOMPlannedOrder
                    || reqTrans.RefType     == ReqRefType::PmfPlannedProdBatch)
            &&      reqTrans.PlanVersion == planVersion
        {
            bundleKey = strFmt('%1#%2', date2str(reqTrans.ReqDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None),
                reqTrans.ItemId);
            if (buckets.exists(bundleKey))
            {
                bucketOrders = buckets.lookup(bundleKey);
            }
            else
            {
                bucketOrders = new Set(Types::Record);
                buckets.insert(bundleKey, bucketOrders);
            }

            bucketOrders.add(reqUnscheduledOrders);

            orderCount ++;
        }

        // while there are orders to process
        bundleOrderCount = 0;
        while (orderCount > 0)
        {
            if (!mapEnumerator)
            {
                mapEnumerator = buckets.getEnumerator();
            }

            // find a bucket that has something
            bucketOrders = null;
            while (mapEnumerator.moveNext())
            {
                bucketOrders = mapEnumerator.currentValue();
                if (bucketOrders.elements() > 0)
                {
                    break;
                }
            }

            if (bucketOrders && bucketOrders.elements() > 0)
            {
                bundleOrderCount = 0;
                setEnumerator = bucketOrders.getEnumerator();
                while (setEnumerator.moveNext() && (bundleOrderCount < #OrderBundleSize))
                {
                    reqUnscheduledOrders = setEnumerator.current();
                    bucketOrders.remove(reqUnscheduledOrders);
                    setEnumerator = bucketOrders.getEnumerator();
                    orderCount--;

                    reqUnscheduledOrders.EngineBundle = bundleId;
                    reqUnscheduledOrdersUpdateList.updateonSaveChanges(reqUnscheduledOrders);
                    bundleOrderCount++;
                }
                bundleId++;
            }
            else
            {
                mapEnumerator = null;
            }
        }

        reqUnscheduledOrdersUpdateList.saveChanges();

        ttsCommit;

        WrkCtrSchedulerLogger::Instance().writeToLog(WrkCtrSchedulerLogEvent::PartitionOrders, 'Partitioning finished');
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqOrderPartitioner construct()
    {
        return new ReqOrderPartitioner();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new order partitioner.
    /// </summary>
    /// <param name="_processId">
    ///    A <c>ReqProcessId</c> data type that identifies the master planning process.
    /// </param>
    /// <param name="_planVersion">
    ///    A <c>RefRecId</c> data type that identifies the plan version that will be used for the master
    ///    planning run.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqOrderPartitioner</c> object.
    /// </returns>
    public static ReqOrderPartitioner newProcessId(ReqProcessId _processId, RefRecId _planVersion)
    {
        ReqOrderPartitioner partitioner = ReqOrderPartitioner::construct();

        partitioner.parmProcessId(_processId);
        partitioner.parmPlanVersion(_planVersion);

        return partitioner;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>