<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMProdFlowResourceUsage</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomProdFlowResourceUsage
{
    BOMCalcResource     resource;
    Hours               processTime;
    Qty                 consumedQty;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BOMCalcTrans calc(
        BOMCalcItem _bomCalcItem)
    {
        BOMCalcTrans        bomCalcTransProcess;
        WrkCtrTable         workCenter;
        CostPrice           costPrice;
        CostMarkup          costMarkup;
        SalesPrice          salesPrice;
        SalesMarkup         salesMarkup;
        CostGroupId         costGroupId;
        RouteCostCategory   processCostCategory;
        InventQty           oldConsumptionVariable = 0;
        // <GEERU>
        CostPrice           costPriceSecCur;
        CostMarkup          costMarkupSecCur;
        // </GEERU>

        workCenter = WrkCtrTable::find(resource);
        processCostCategory = RouteCostCategory::find(workCenter.ProcessCategoryId);
        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, processCostCategory.CostGroupId);

        // <GEERU>
        [costPrice, costPriceSecCur] = this.getCostPrice(_bomCalcItem, workCenter.ProcessCategoryId, bomCalcTransProcess);
        costMarkupSecCur = 0;
        // </GEERU>
        costMarkup  = 0;
        salesPrice  = BOMCostProfit::calcSalesPrice(costPrice, _bomCalcItem.parmProfitSet(), costGroupId);
        salesMarkup = 0;

        select forupdate bomCalcTransProcess
        where bomCalcTransProcess.CostGroupId == costGroupId
            && bomCalcTransProcess.PriceCalcId == _bomCalcItem.parmPriceCalcId()
            && bomCalcTransProcess.Resource == resource
            && bomCalcTransProcess.CalcType == ItemCalcType::Process;

        if (bomCalcTransProcess.RecId)
        {
            oldConsumptionVariable = bomCalcTransProcess.ConsumptionVariable;
            bomCalcTransProcess.ConsumptionVariable = processTime;
        }
        else
        {
            bomCalcTransProcess.CostGroupId = costGroupId;
            bomCalcTransProcess.CalcType = ItemCalcType::Process;
            bomCalcTransProcess.LineNum = _bomCalcItem.getLineNum();
            bomCalcTransProcess.PriceCalcId = _bomCalcItem.parmPriceCalcId();
            bomCalcTransProcess.TransDate = _bomCalcItem.parmCalcDate();
            bomCalcTransProcess.Qty = _bomCalcItem.topParentQty();
            bomCalcTransProcess.Level = _bomCalcItem.parmLevel() + 1;
            bomCalcTransProcess.Resource = resource;
            bomCalcTransProcess.bom = NoYes::No;
            bomCalcTransProcess.CostPriceModelUsed = BOMCalcCostPriceUsed::None;
            bomCalcTransProcess.SalesPriceModelUsed = BOMCalcSalesPriceUsed::None;
            bomCalcTransProcess.ConsumptionConstant = 0;
            bomCalcTransProcess.ConsumptionVariable = processTime;
        }

        this.updatePrices(_bomCalcItem,
                          bomCalcTransProcess,
                          costPrice,
                          costMarkup,
                          salesPrice,
                          // <GEERU>
                          salesMarkup,
                          costPriceSecCur,
                          costMarkupSecCur);
                          // </GEERU>

        bomCalcTransProcess.write();

        // Update parent
        _bomCalcItem.updateCalcPrices(bomCalcTransProcess);
        _bomCalcItem.updateActualPrices(bomCalcTransProcess);
        _bomCalcItem.updateCostCalcTransData(bomCalcTransProcess);

        if (oldConsumptionVariable)
        {
            bomCalcTransProcess.ConsumptionVariable += oldConsumptionVariable;
            this.updatePrices(_bomCalcItem,
                              bomCalcTransProcess,
                              costPrice,
                              costMarkup,
                              salesPrice,
                              // <GEERU>
                              salesMarkup,
                              costPriceSecCur,
                              costMarkupSecCur);
                              // </GEERU>
            bomCalcTransProcess.update();
        }

        return bomCalcTransProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price.
    /// </summary>
    /// <param name="_bomCalcItem">
    /// A bom calculation item.
    /// </param>
    /// <param name="_costCategoryId">
    /// A cost category ID.
    /// </param>
    /// <param name="_bomCalcTrans">
    /// A bom calculation transaction.
    /// </param>
    /// <returns>
    /// The cost price.
    /// </returns>
    /// <remarks>
    /// The return type has been changed to include a secondary currency.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// if called with unknown calculation fallback type.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getCostPrice(
        BOMCalcItem         _bomCalcItem,
        RouteCostCategoryId _costCategoryId /*in*/,
        BOMCalcTrans        _bomCalcTrans   /*in-out*/)
    {
        RouteCostCategoryPrice routeCostCategoryPrice;
        if (_bomCalcItem.parmCostingVersionId())
        {
            routeCostCategoryPrice = RouteCostCategoryPrice::findCostingVersion(_costCategoryId,
                                        _bomCalcItem.parmCostingVersionId(),
                                        _bomCalcItem.parmCalcDate(),
                                        _bomCalcItem.parmSiteId());
        }
        else
        {
            routeCostCategoryPrice = RouteCostCategoryPrice::findCurrentFlex(_costCategoryId, _bomCalcItem.parmSiteId());
        }

        if (!routeCostCategoryPrice)
        {
            switch (_bomCalcItem.parmBOMCalcFallBack())
            {
                case BOMCalcFallBack::None :
                    // Do not fetch a price from the fallback system
                    break;

                case BOMCalcFallBack::CurrentActive :
                    routeCostCategoryPrice = RouteCostCategoryPrice::findCurrentFlex(_costCategoryId, _bomCalcItem.parmSiteId());
                    break;

                case BOMCalcFallBack::Simulated :
                    routeCostCategoryPrice = RouteCostCategoryPrice::findCostingVersion(_costCategoryId,
                                                                                        _bomCalcItem.parmFallBackVersionId(),
                                                                                        _bomCalcItem.parmCalcDate(),
                                                                                        _bomCalcItem.parmSiteId());
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        this.updateWarnings(_bomCalcItem, _costCategoryId, _bomCalcItem.parmCostingVersionId(), routeCostCategoryPrice.VersionId, _bomCalcTrans);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            InventTable::modelGroupByItemId(_bomCalcItem.parmItemId()).PostOnhandFinancialSecCur_RU)
        {
            return [routeCostCategoryPrice.Price, routeCostCategoryPrice.PriceSecCur_RU];
        }

        return [routeCostCategoryPrice.Price, 0.00];
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Qty parmConsumedQty(Qty _consumedQty = consumedQty)
    {
        consumedQty = _consumedQty;

        return consumedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Hours parmProcessTime(Hours _processTime = processTime)
    {
        processTime = _processTime;

        return processTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BOMCalcResource parmResource(BOMCalcResource _resource = resource)
    {
        resource = _resource;

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrices</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void updatePrices(
    BOMCalcItem     _bomCalcItem,
    BOMCalcTrans    _bomCalcTrans,
    Amount          _costPrice,
    Amount          _costMarkup,
    Amount          _salesPrice,
    Amount          _salesMarkup,
    Amount          _costPriceSecCur  = 0,
    Amount          _costMarkupSecCur = 0)
    {
        Qty totalConsump    = _bomCalcTrans.ConsumptionVariable + _bomCalcTrans.ConsumptionConstant;
        Qty topParentQty    = _bomCalcItem.topParentQty();

        _bomCalcTrans.CostPrice      = _costPrice;
        _bomCalcTrans.CostMarkup     = _costMarkup;
        _bomCalcTrans.CostPriceUnit  = 1;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _bomCalcTrans.CostPriceSecCur_RU    = _costPriceSecCur;
            _bomCalcTrans.CostMarkupSecCur_RU   = _costMarkupSecCur;
        }
        // </GEERU>

        _bomCalcTrans.SalesPrice     = _salesPrice;
        _bomCalcTrans.SalesMarkup    = _salesMarkup;
        _bomCalcTrans.SalesPriceUnit = 1;

        _bomCalcTrans.CostPriceQty   = _costPrice *  (totalConsump / topParentQty);
        _bomCalcTrans.CostMarkupQty  = _costMarkup;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
        _bomCalcTrans.CostPriceQtySecCur_RU     = _costPriceSecCur *  (totalConsump / topParentQty);
        _bomCalcTrans.CostMarkupQtySecCur_RU    = _costMarkupSecCur;
        }
        // </GEERU>
        _bomCalcTrans.SalesPriceQty  = _salesPrice * (totalConsump / topParentQty);
        _bomCalcTrans.SalesMarkupQty = _salesMarkup;

        if (_costMarkup || _salesMarkup)
        {
            // Constant costs are added to variable ones if the parent BOM has linetype 'Item'. When BOM level==0 it is the same as linetype Production.
            if (_bomCalcItem.parmLevel() != 0                           &&
                !_bomCalcItem.parmBOM().type().mustBeDerivedDirectly()  &&
                _bomCalcItem.parmBomCalcExplosionMode() != BOMCalcExplosionMode::MakeToOrder)
            {
                _bomCalcTrans.CostPriceQty      = _bomCalcTrans.CostPriceQty  + (_bomCalcTrans.CostMarkupQty / topParentQty);
                _bomCalcTrans.SalesPriceQty     = _bomCalcTrans.SalesPriceQty + (_bomCalcTrans.SalesMarkupQty / topParentQty);
                _bomCalcTrans.CostMarkupQty     = 0;
                _bomCalcTrans.SalesMarkupQty    = 0;
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    _bomCalcTrans.CostPriceQtySecCur_RU     = _bomCalcTrans.CostPriceQtySecCur_RU  + (_bomCalcTrans.CostMarkupQtySecCur_RU / topParentQty);
                    _bomCalcTrans.CostMarkupQtySecCur_RU    = 0;
                }
                // </GEERU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateWarnings(
        BOMCalcItem         _bomCalcItem,
        RouteCostCategoryId _costCategoryId,
        CostingVersionId    _costingVersionId,
        CostingVersionId    _fallbackVersionId,
        BOMCalcTrans        _bomCalcTrans)
    {
        BOMCalcCheckOper bomCalcCheckOper;
        bomCalcCheckOper = BOMCalcCheckOper::newBOMCalcBase(_bomCalcItem);
        bomCalcCheckOper.checkUseFallBack(_costCategoryId, _costingVersionId, _fallbackVersionId);

        if (bomCalcCheckOper.hasMessages())
        {
            _bomCalcTrans.Infolog = bomCalcCheckOper.getMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BOMProdFlowResourceUsage construct(BOMCalcResource _resource, Hours _processTime, Qty _consumedQty)
    {
        BOMProdFlowResourceUsage    usage = new BOMProdFlowResourceUsage();
        usage.parmResource(_resource);
        usage.parmProcessTime(_processTime);
        usage.parmConsumedQty(_consumedQty);
        return usage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>