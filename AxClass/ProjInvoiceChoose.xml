<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceChoose</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class ProjInvoiceChoose extends RunBaseBatch
{
    // Tables
    ProjItemTrans           pProjItemTrans;
    ProjEmplTrans           pProjEmplTrans;
    ProjCostTrans           pProjCostTrans;
    ProjRevenueTrans        pProjRevenueTrans;
    ProjOnAccTrans          pProjOnAccTrans;

    ProjTable               pProjTable;
    ProjInvoiceTable        pProjInvoiceTable;

    SalesTable              pSalesTable;
    SalesLine               pSalesLine;

    ProjProposalJour        pProjProposalJour;
    TmpProjProposalJour     tmpProjProposalJour;

    // Datatypes
    ProjInvoiceType         projInvoiceType;
    SalesEndDiscPct         enddiscPercent;
    SalesUpdate             salesUpdate;
    ProjInvoiceProjId       projInvoiceProjId;
    ProjId                  projId;
    container               projTransIdList;
    container               projTransIdContainer;

    Counter                 progressTotal;
    Counter                 progressCounter;

    //<GEEPL>
    PlTaxPeriodPaymentCode  taxPeriodPaymentCode;
    //</GEEPL>

    DialogField             dialogQtyUpdate;
    DialogField             dialogFromDate;
    DialogField             dialogToDate;

    DialogField             dialogInvoiceDate;

    DialogField             dialogRevenue;
    DialogField             dialogSubscription;
    DialogField             dialogSalesLine;
    DialogField             dialogEmpl;
    DialogField             dialogCost;
    DialogField             dialogItem;
    DialogField             dialogOnAcc;
    DialogField             dialogInvoiceType;

    //<GEEPL>
    DialogField             dialogTaxPeriodPaymentCode;
    #ISOCountryRegionCodes
    //</GEEPL>
    boolean                 newProposal;

    boolean                 querySalesLine;
    boolean                 queryEmpl;
    boolean                 queryCost;
    boolean                 queryRevenue;
    boolean                 querySubscription;
    boolean                 queryItem;
    boolean                 queryOnAcc;

    TransDate               fromDate;
    TransDate               toDate;
    InvoiceDate             invoiceDate;

    boolean                 resetQuery;
    boolean                 calledFromTrans;
    InterCompanyPosted      interCompanyPosted;
    boolean                 showMessages;
    List                    projRevenueProposalList;

    // Objects
    QueryRun                queryRun;

    QueryBuildDataSource    projInvoiceDataSource,
                            projTableDataSource,
                            emplDataSource,
                            emplSaleDataSource,
                            costDataSource,
                            costSaleDataSource,
                            itemDataSource,
                            itemSaleDataSource,
                            revenueDataSource,
                            revenueSaleDataSource,
                            onAccDataSource,
                            onAccSaleDataSource,
                            salesTableDataSource,
                            salesLineDataSource;

    // Progress invoicing
    PSATmpRevRecWizard      m_tTmpProgressInv;
    PSAProjProposalProj     m_tProjProposalProj;

    //  Invoice proposal selection
    str                     m_sQueryCustAccount, m_sQueryProjInvoiceProjId, m_sQueryProjId, m_sQueryEmplId;
    boolean                 m_bSkipQueryOffset;

    //  Creation of invoicing propsal from PSaTmpProjProposalTrans

    PSATmpProjProposalTrans  m_TmpProjProposalTrans;
    PSATmpProjProposalTrans  m_TmpProjProposalTransPreBill;
    boolean                  m_bUseTmpProjProjProposal;

    //  Invoice proposal on PSATmpProjProposalSummary
    PSATmpProjProposalSummary  m_TmpProjProposalSummary;

    //  Proposal info by contract line
    PSAProjProposalContLine     m_tProjProposalContLine;
    PSAContractLineNum          m_sContLineNum;
    Map                         retentionLineMap;

    // end date to insert rProjProposalJour
    ToDate                      dEndDate;
    PSAContractLineNum          m_aUsed; // last used contract line
    Map                         contractLineMap;

    PSAProjFundingSourceRetain      psaProjFundingSourceRetain;
    PSAProjWorkComplete             psaProjWorkComplete;
    PSACustomerRetentionTermLine    psaCustomerRetentionTermLine;
    PSACustomerRetentionTermTable   psaCustomerRetentionTermTable;
    PSAProjProposalProj             projProposalProj;
    Amount                          invoiceAmount;

    boolean                     queryAdvances;
    boolean                     queryRetention;
    ProjFundingSourceId         fundingSourceId;
    ProjRevenueTrans            pProjRetentionTrans;
    SMAServiceOrderTable        smaServiceOrderTable;
    boolean                     updateProposal;
    List                        proposalIdList;
    boolean                     filterOnAccTrans;
    boolean                     isInvoiceProposalCreated;
    ProjInvoiceTypeSelection    queryInvoiceType;
    CurrencyCode                currencyId;

    // <GBR>
    ProjInvoiceProposalSplit_BR projInvoiceProposalSplit_BR;
    // </GBR>

    // <GEEPL>
    #ISOCountryRegionCodes
    // </GEEPL>

    // <GEEPL>
    #define.CurrentVersion(16)
    // </GEEPL>

    #localmacro.CurrentList
        queryEmpl,
        queryCost,
        queryRevenue,
        queryItem,
        queryOnAcc,
        querySalesLine,
        SalesUpdate,
        FromDate,
        ToDate,
        InvoiceDate,
        projInvoiceProjId,
        projId,
        queryInvoiceType,
        querySubscription,
        projTransIdList,
        calledFromTrans
        // <GEEPL>
        ,taxPeriodPaymentCode
        // </GEEPL>
        ,queryAdvances
        ,queryRetention
        ,fundingSourceId
        ,updateProposal
        ,filterOnAccTrans
     #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCostTransSaleRange</Name>
				<Source><![CDATA[
    public void addCostTransSaleRange(QueryBuildDataSource _costSaleDataSource)
    {
        QueryBuildRange costTransStatus;
        QueryBuildRange costFundingSource;
        ProjFundingSource fundingSource = ProjFundingSource::findContractFundingSource(pProjInvoiceTable.ProjInvoiceProjId, fundingSourceId);

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Invoices)
        {
            costTransStatus   = _costSaleDataSource.addRange(fieldNum(ProjCostTransSale, TransStatus));
            costTransStatus.value(queryValue(ProjTransStatus::Posted));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            costTransStatus   = _costSaleDataSource.addRange(fieldNum(ProjCostTransSale,TransStatus));
            costTransStatus.value(queryValue(ProjTransStatus::MarkedCreditnote));
        }

        if (!this.createProposal())
        {
            // add lines to proposal
            if (this.parmProjProposalJour().FundingSource)
            {
                costFundingSource  = _costSaleDataSource.addRange(fieldNum(ProjCostTransSale,FundingSource));
                costFundingSource.value(queryValue(this.parmProjProposalJour().FundingSource));
            }
        }
        else if (fundingSource)
        {
            costFundingSource  = _costSaleDataSource.addRange(fieldNum(ProjCostTransSale,FundingSource));
            costFundingSource.value(queryValue(fundingSource.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEmplTransSaleRange</Name>
				<Source><![CDATA[
    public void addEmplTransSaleRange(QueryBuildDataSource _emplSaleDataSource)
    {
        QueryBuildRange emplTransStatus;
        QueryBuildRange emplFundingSource;
        ProjFundingSource fundingSource = ProjFundingSource::findContractFundingSource(pProjInvoiceTable.ProjInvoiceProjId, fundingSourceId);

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Invoices)
        {
            emplTransStatus  = _emplSaleDataSource.addRange(fieldNum(ProjEmplTransSale, TransStatus));
            emplTransStatus.value(queryValue(ProjTransStatus::Posted));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            emplTransStatus  = _emplSaleDataSource.addRange(fieldNum(ProjEmplTransSale,TransStatus));
            emplTransStatus.value(queryValue(ProjTransStatus::MarkedCreditnote));
        }

        if (!this.createProposal())
        {
            // Add lines to proposal
            if (this.parmProjProposalJour().FundingSource)
            {
                emplFundingSource  = _emplSaleDataSource.addRange(fieldNum(ProjEmplTransSale,FundingSource));
                emplFundingSource.value(queryValue(this.parmProjProposalJour().FundingSource));
            }
        }
        else if (fundingSource)
        {
            emplFundingSource  = _emplSaleDataSource.addRange(fieldNum(ProjEmplTransSale, FundingSource));
            emplFundingSource.value(queryValue(fundingSource.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemTransSaleRange</Name>
				<Source><![CDATA[
    public void addItemTransSaleRange(QueryBuildDataSource _itemSaleDataSource)
    {
        QueryBuildRange itemTransStatus;
        QueryBuildRange itemFundingSource;
        ProjFundingSource fundingSource = ProjFundingSource::findContractFundingSource(pProjInvoiceTable.ProjInvoiceProjId, fundingSourceId);

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Invoices)
        {
            itemTransStatus   = _itemSaleDataSource.addRange(fieldNum(ProjItemTransSale, TransStatus));
            itemTransStatus.value(queryValue(ProjTransStatus::Posted));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            itemTransStatus   = _itemSaleDataSource.addRange(fieldNum(ProjItemTransSale, TransStatus));
            itemTransStatus.value(queryValue(ProjTransStatus::MarkedCreditnote));
        }

        if (!this.createProposal())
        {
            // Add lines to proposal
            if (this.parmProjProposalJour().FundingSource)
            {
                itemFundingSource  = _itemSaleDataSource.addRange(fieldNum(ProjItemTransSale,FundingSource));
                itemFundingSource.value(queryValue(this.parmProjProposalJour().FundingSource));
            }
        }
        else if (fundingSource)
        {
            itemFundingSource  = _itemSaleDataSource.addRange(fieldNum(ProjItemTransSale,FundingSource));
            itemFundingSource.value(queryValue(fundingSource.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnAccTransSaleRange</Name>
				<Source><![CDATA[
    public void addOnAccTransSaleRange(QueryBuildDataSource _onAccSaleDataSource)
    {
        QueryBuildRange onAccTransStatus;
        QueryBuildRange onAccFundingSource;
        ProjFundingSource fundingSource = ProjFundingSource::findContractFundingSource(pProjInvoiceTable.ProjInvoiceProjId, fundingSourceId);

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Invoices)
        {
            onAccTransStatus   = _onAccSaleDataSource.addRange(fieldNum(ProjOnAccTransSale, TransStatus));
            onAccTransStatus.value(queryValue(ProjTransStatus::Registered));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            onAccTransStatus  = _onAccSaleDataSource.addRange(fieldNum(ProjOnAccTransSale, TransStatus));
            onAccTransStatus.value(queryValue(ProjTransStatus::MarkedCreditnote));
        }

        if (!this.createProposal())
        {
            // Add lines to proposal
            if (this.parmProjProposalJour().FundingSource)
            {
                onAccFundingSource  = _onAccSaleDataSource.addRange(fieldNum(ProjOnAccTransSale,FundingSource));
                onAccFundingSource.value(queryValue(this.parmProjProposalJour().FundingSource));
            }
        }
        else if (fundingSource)
        {
            onAccFundingSource  = _onAccSaleDataSource.addRange(fieldNum(ProjOnAccTransSale,FundingSource));
            onAccFundingSource.value(queryValue(fundingSource.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRevenueTransSaleRange</Name>
				<Source><![CDATA[
    public void addRevenueTransSaleRange(QueryBuildDataSource _revenueSaleDataSource)
    {
        QueryBuildRange revenueTransStatus;
        QueryBuildRange revenueFundingSource;
        ProjFundingSource fundingSource = ProjFundingSource::findContractFundingSource(pProjInvoiceTable.ProjInvoiceProjId, fundingSourceId);

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Invoices)
        {
            revenueTransStatus   = _revenueSaleDataSource.addRange(fieldNum(ProjRevenueTransSale, TransStatus));
            revenueTransStatus.value(queryValue(ProjTransStatus::Posted));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            revenueTransStatus  = _revenueSaleDataSource.addRange(fieldNum(ProjRevenueTransSale, TransStatus));
            revenueTransStatus.value(queryValue(ProjTransStatus::MarkedCreditnote));
        }

        if (queryRetention)
        {
            revenueTransStatus = _revenueSaleDataSource.addRange(fieldNum(ProjRevenueTransSale, TransStatus));
            revenueTransStatus.value(queryValue(ProjTransStatus::Invoiced));
        }
        if (!this.createProposal())
        {
            // Add lines to proposal
            if (this.parmProjProposalJour().FundingSource)
            {
                revenueFundingSource  = _revenueSaleDataSource.addRange(fieldNum(ProjRevenueTransSale,FundingSource));
                revenueFundingSource.value(queryValue(this.parmProjProposalJour().FundingSource));
            }
        }
        else if (fundingSource)
        {
            revenueFundingSource  = _revenueSaleDataSource.addRange(fieldNum(ProjRevenueTransSale,FundingSource));
            revenueFundingSource.value(queryValue(fundingSource.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesLineRange</Name>
				<Source><![CDATA[
    public void addSalesLineRange(QueryBuildDataSource _salesLineDataSource)
    {
        QueryBuildRange salesLineTypeRange, salesLineDlvDate, salesLineCurrency;

        if (fromDate || toDate)
        {
            salesLineDlvDate    = _salesLineDataSource.addRange(fieldNum(SalesLine, ConfirmedDlv));
            salesLineDlvDate.value(this.queryFromDate() + '..' + this.queryToDate());
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Invoices)
        {
            // Include both regular sales orders and subscription sales orders
            salesLineTypeRange     = _salesLineDataSource.addRange(fieldNum(SalesLine, SalesType));
            salesLineTypeRange.value(queryValue(SalesType::Sales));

            salesLineTypeRange     = _salesLineDataSource.addRange(fieldNum(SalesLine, SalesType));
            salesLineTypeRange.value(queryValue(SalesType::Subscription));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            salesLineTypeRange  = _salesLineDataSource.addRange(fieldNum(SalesLine, SalesType));
            salesLineTypeRange.value(queryValue(SalesType::ReturnItem));
        }

        if (queryInvoiceType == ProjInvoiceTypeSelection::Both || queryInvoiceType == ProjInvoiceTypeSelection::Creditnotes)
        {
            salesLineTypeRange = _salesLineDataSource.addRange(fieldNum(SalesLine, SalesType));
            salesLineTypeRange.value(queryValue(SalesType::Journal));
        }

        if (currencyId)
        {
            salesLineCurrency = _salesLineDataSource.addRange(fieldNum(SalesLine, CurrencyCode));
            salesLineCurrency.value(queryValue(currencyId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTables</Name>
				<Source><![CDATA[
    protected void assignTables()
    {
        this.parmProjInvoiceTable(queryRun.get(tableNum(ProjInvoiceTable)));
        this.parmProjTable(queryRun.get(tableNum(ProjTable)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetentionBillingRule</Name>
				<Source><![CDATA[
    public void calcRetentionBillingRule(PSAContractLineNum _psaContractLineNum, boolean _isCreditNote = false, RecId _projRevenueTransSaleRecId = 0)
    {
        PSAContractLineItems    psaContractLineItems;

        if (_psaContractLineNum && !_isCreditNote)
        {
            select ContractLineNum from psaContractLineItems
            join psaProjFundingSourceRetain
                where psaContractLineItems.ContractLineNum == psaProjFundingSourceRetain.BillingRuleId
            join forupdate projProposalProj
                where psaProjFundingSourceRetain.BillingRuleId == projProposalProj.ContractLineNum
                    && psaProjFundingSourceRetain.ProjFundingSource == pProjProposalJour.FundingSource
                    && projProposalProj.ContractLineNum == _psaContractLineNum
                    && projProposalProj.ProjProposalId == pProjProposalJour.ProposalId;

            if (projProposalProj)
            {
                invoiceAmount = projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj);
                projProposalProj.RetainedNow       = (invoiceAmount * psaProjFundingSourceRetain.RetainPercent) / 100;
                projProposalProj.RetainedPercent   = psaProjFundingSourceRetain.RetainPercent;
                projProposalProj.update();
            }
        }
        if (_isCreditNote)
        {
            this.retentionReversal(_projRevenueTransSaleRecId, pProjProposalJour.ProposalId, _psaContractLineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetentionProject</Name>
				<Source><![CDATA[
    public void calcRetentionProject(ProjProposalId _proposalId, ProjId _projId, boolean _isCreditNote = false, RecId _projRevenueTransSaleRecId = 0)
    {
        if (_proposalId && !_isCreditNote)
        {
            select RecId, Percent from psaProjWorkComplete
            order by TransDate desc
            join psaProjFundingSourceRetain
            join forupdate ProjId, RecId, InvoicedNow, ContractLineNum, ProjProposalId, InvoicedNowLeadRetainage from projProposalProj
                where psaProjFundingSourceRetain.ProjId == psaProjWorkComplete.ProjId
                    && psaProjFundingSourceRetain.ProjId == projProposalProj.ProjId
                    && psaProjFundingSourceRetain.ProjFundingSource == pProjProposalJour.FundingSource
                    && projProposalProj.ProjProposalId == _proposalId
                    && projProposalProj.ProjId == _projId
                    && projProposalProj.IsPreBill == NoYes::No;

            if (psaProjFundingSourceRetain)
            {
                select RetentionTermId, CompletePercent, RetainPercent from psaCustomerRetentionTermLine
                order by psaCustomerRetentionTermLine.CompletePercent
                    join RecId from psaCustomerRetentionTermTable
                    where psaCustomerRetentionTermLine.RetentionTermId == psaCustomerRetentionTermTable.RetentionTermId
                        && psaCustomerRetentionTermLine.CompletePercent >= psaProjWorkComplete.Percent
                        && psaCustomerRetentionTermTable.RecId == psaProjFundingSourceRetain.CustRetentionTermId;

                if (projProposalProj)
                {
                    invoiceAmount = projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj);
                    projProposalProj.RetainedNow       = (invoiceAmount * psaCustomerRetentionTermLine.RetainPercent) / 100;
                    projProposalProj.RetainedPercent   = psaCustomerRetentionTermLine.RetainPercent;
                    projProposalProj.update();
                }
            }
        }
        if (_isCreditNote)
        {
            this.retentionReversal(_projRevenueTransSaleRecId, _proposalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRetainage</Name>
				<Source><![CDATA[
    public void calculateRetainage(ProjProposalId _proposalId, ProjFundingSourceRefId _fundingSource = 0)
    {
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;

        ProjProposalRevenue     projProposalRevenue;
        ProjProposalRevenueDetail projProposalRevenueDetail;
        ProjRevenueTransSale      projRevenueTransSale;

        ProjProposalCost        projProposalCost;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;

        ProjItemTransSale       projItemTransSale;
        ProjProposalItem        projProposalItem;
        ProjProposalItemDetail  projProposalItemDetail;
        SalesLine               salesLine;

        ProjOnAccTransSale      projOnAccTransSale;
        ProjProposalOnAcc       projProposalOnAcc;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTrans          projOnAccTrans;

        boolean isMarkedForCreditNote(ProjTransStatus _projTransStatus)
        {
            return (_projTransStatus == ProjTransStatus::CreditnoteProposal) ? true : false;
        }

        while select projProposalEmplDetail
        join projEmplTransSale
            where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
        join projProposalEmpl
            where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
               && projProposalEmpl.ProposalId == _proposalId
        {
            if (ProjProposalJour::psaIsCTLNChecked(pProjProposalJour.ProposalId))
            {
                this.calcRetentionBillingRule(projProposalEmpl.psaContractLineNum, isMarkedForCreditNote(projEmplTransSale.TransStatus), projEmplTransSale.RecId);
            }
            else
            {
                this.calcRetentionProject(projProposalEmpl.ProposalId, projProposalEmpl.projEmplTrans().ProjId, isMarkedForCreditNote(projEmplTransSale.TransStatus), projEmplTransSale.RecId);
            }
        }

        while select projProposalRevenueDetail
        join projRevenueTransSale
            where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
        join projProposalRevenue
            where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
               && projProposalRevenue.ProposalId == _proposalId
        {
            if (ProjProposalJour::psaIsCTLNChecked(pProjProposalJour.ProposalId))
            {
                this.calcRetentionBillingRule(projProposalRevenue.psaContractLineNum, isMarkedForCreditNote(projRevenueTransSale.TransStatus), projRevenueTransSale.RecId);
            }
            else
            {
                this.calcRetentionProject(projProposalRevenue.ProposalId, projProposalRevenue.projRevenueTrans().ProjId, isMarkedForCreditNote(projRevenueTransSale.TransStatus), projRevenueTransSale.RecId);
            }
        }

        while select projProposalCostDetail
        join projCostTransSale
            where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
        join projProposalCost
            where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
               && projProposalCost.ProposalId == _proposalId
        {
            if (ProjProposalJour::psaIsCTLNChecked(pProjProposalJour.ProposalId))
            {
                this.calcRetentionBillingRule(projProposalCost.psaContractLineNum, isMarkedForCreditNote(projCostTransSale.TransStatus), projCostTransSale.RecId);
            }
            else
            {
                this.calcRetentionProject(projProposalCost.ProposalId, projProposalCost.projCostTrans().ProjId, isMarkedForCreditNote(projCostTransSale.TransStatus), projCostTransSale.RecId);
            }
        }

        while select projProposalItemDetail
        join projItemTransSale
            where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
        join projProposalItem
            where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
               && projProposalItem.ProposalId == _proposalId
        {
            if (ProjProposalJour::psaIsCTLNChecked(pProjProposalJour.ProposalId))
            {
                this.calcRetentionBillingRule(projProposalItem.psaContractLineNum, isMarkedForCreditNote(projItemTransSale.TransStatus), projProposalItem.RecId);
            }
            else
            {
                this.calcRetentionProject(projProposalItem.ProposalId, projProposalItem.projItemTrans().ProjId, isMarkedForCreditNote(projItemTransSale.TransStatus), projProposalItem.RecId);
            }
        }

        // Sales Orders
        while select ProposalId, psaContractLineNum, RecId from projProposalItem
        join salesLine
        where salesLine.ProjTransId == projProposalItem.ProjTransId
            && projProposalItem.ProposalId == _proposalId
            && projProposalItem.ItemType   == ProjItemType::SalesOrder
        {
            if (ProjProposalJour::psaIsCTLNChecked(pProjProposalJour.ProposalId))
            {
                this.calcRetentionBillingRule(projProposalItem.psaContractLineNum, salesLine.creditNoteLine(), projProposalItem.RecId);
            }
            else
            {
                this.calcRetentionProject(projProposalItem.ProposalId, salesLine.ProjId, salesLine.creditNoteLine(), projProposalItem.RecId);
            }
        }

        while select projProposalOnAccDetail
        join projOnAccTrans
        join projOnAccTransSale
            where projOnAccTrans.TransId == projOnAccTransSale.TransId
               && projOnAccTrans.psaIsOnAccount == NoYes::No
               && projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
        join projProposalOnAcc
            where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
               && projProposalOnAcc.ProposalId == _proposalId
        {
            if (ProjProposalJour::psaIsCTLNChecked(pProjProposalJour.ProposalId))
            {
                this.calcRetentionBillingRule(projProposalOnAcc.psaContractLineNum, isMarkedForCreditNote(projOnAccTransSale.TransStatus), projOnAccTransSale.RecId);
            }
            else
            {
                this.calcRetentionProject(projProposalOnAcc.ProposalId, projProposalOnAcc.projOnAccTrans().ProjID, isMarkedForCreditNote(projOnAccTransSale.TransStatus), projOnAccTransSale.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrigin</Name>
				<Source><![CDATA[
    public boolean checkOrigin()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
        && (this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::FeeJournal
            || this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::FreeTextInvoice
            || this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::AdvancedLedgerEntry
            || this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::ProjAdvancedJournal)
        && queryRevenue)
        {
            return true;
        }
        else
        {
            if ((this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::FeeJournal ||
                 this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                 this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::ProjAdvancedJournal) && queryRevenue)
            {
                return true;
            }
        }

        if (this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::Subscription && querySubscription)
        {
            return true;
        }

        if (this.parmProjRevenueTrans().TransactionOrigin == ProjOrigin::BeginningBalance && queryRevenue)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDocu</Name>
				<Source><![CDATA[
    private void copyDocu(Common  _common, ProjTransIdBase    _transId)
    {
        ProjProposalRevenue     projProposalRevenue;
        ProjProposalOnAcc       projProposalOnAcc;
        ProjProposalItem        projProposalItem;
        ProjProposalCost        projProposalCost;
        ProjProposalEmpl        projProposalEmpl;
        ProjJournalTrans        projJournalTrans;
        InventJournalTrans      inventJournalTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTrans_Project ledgerJournalTrans_Project;

        switch (_common.TableId)
        {
            case tableNum(ProjProposalRevenue):
                projProposalRevenue = _common;
                select * from projJournalTrans where projJournalTrans.TransId == _transId;
                ttsbegin;
                Docu::copy(projJournalTrans,projProposalRevenue);
                ttscommit;
                break;

            case tableNum(ProjProposalOnAcc):
                projProposalOnAcc = _common;
                select * from projJournalTrans where projJournalTrans.TransId == _transId;
                ttsbegin;
                Docu::copy(projJournalTrans,projProposalOnAcc);
                ttscommit;
                break;

            case tableNum(ProjProposalCost):
                projProposalCost = _common;
                select * from ledgerJournalTrans join ledgerJournalTrans_Project
                where ledgerJournalTrans_Project.TransId == _transId &&
                      ledgerJournalTrans.RecId == ledgerJournalTrans_Project.RefRecId;
                ttsbegin;
                Docu::copy(ledgerJournalTrans,projProposalCost);
                ttscommit;
                break;

            case tableNum(ProjProposalItem):
                projProposalItem = _common;
                select * from inventJournalTrans where inventJournalTrans.ProjTransId == _transId;
                ttsbegin;
                Docu::copy(inventJournalTrans,projProposalItem);
                ttscommit;
                break;

            case tableNum(ProjProposalEmpl):
                projProposalEmpl = _common;
                select * from projJournalTrans where projJournalTrans.TransId == _transId;
                ttsbegin;
                Docu::copy(projJournalTrans,projProposalEmpl);
                ttscommit;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeJournal</Name>
				<Source><![CDATA[
    public ProjRevenueTrans createFeeJournal(
                                        ProjId _projId,
                                        AmountCur _retainedAmount,
                                        ProjFundingSourceRefId _fundingSource,
                                        PSAContractLineNum _contractLineNum = '',
                                        boolean _isRetained = false,
                                        ProjCategoryId _category='',
                                        TransDate _transDate =DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                        TransTxt _transTxt = '',
                                        ProjTaxGroup _taxGroup = '',
                                        ProjTaxItemGroup _taxItemGroup = '',
                                        boolean _isReleased = false,
                                        ProjRevenueTrans _origProjRevenueTrans = Null)
    {
        ProjJournalTable            projJournalTable;
        ProjJournalTrans            projJournalTrans;
        ProjJournalCheckPost        projJournalCheckPost;
        ProjRevenueTrans            projRevenueTrans;
        ProjTable                   projTable;
        PSAContractLineItems        psaContractLineItems;
        PSAContractLineItemsSetup   psaContractLineItemsSetup;
        ProjOnAccTrans              projOnAccTrans;
        ProjCategory                projCategoryLoc;
        ProjId                      psaContractLineItemsProjId;

        #OCCRetryCount

        try
        {
            if (!_category)
            {
                if (!ProjCategory::isMarkedCategory().CategoryId)
                {
                    throw error("@SYS50153");
                }
            }

            if (_isRetained &&
                !ProjLinePropertySetup::findLinePropertyId(_projId, ProjCategory::isMarkedCategory().CategoryId))
            {
                throw error("@SYS50154");
            }

            ttsbegin;
            //create the fee journal
            projJournalTable.initFromProjJournalName(ProjJournalName::find(ProjParameters::find().RevenueJournalNameId));          
            projJournalTable.insert();

            projJournalTrans.clear();
            projJournalTrans.initFromProjJournalTable(projJournalTable);
            projJournalTrans.Voucher = NumberSeq::newGetVoucherFromId(projJournalTable.getNumberSequenceTable().RecId).voucher();
            projJournalTrans.ProjTransDate = _transDate;
            projJournalTrans.TransDate     = _transDate;
            projJournalTrans.FundingSource = _fundingSource;
            if (_contractLineNum)
            {
                psaContractLineItems = PSAContractLineItems::find(_contractLineNum);
                switch (psaContractLineItems.LineType)
                {
                    case PSAContractLineType::Fee       :
                    case PSAContractLineType::UOD       :
                    case PSAContractLineType::Progress  :
                        projJournalTrans.ProjId = psaContractLineItems.FeeProjId;
                        break;

                    case PSAContractLineType::TAndM     :
                        if (_projId)
                        {
                            psaContractLineItemsProjId = (select firstonly psaContractLineItemsSetup
                                                            where psaContractLineItemsSetup.ContractLineNum == _contractLineNum
                                                                && psaContractLineItemsSetup.ProjId == _projId).ProjId;
                        }
                        else
                        {
                            psaContractLineItemsProjId = (select firstonly psaContractLineItemsSetup
                                                            where psaContractLineItemsSetup.ContractLineNum == _contractLineNum
                                                                && psaContractLineItemsSetup.ProjId).ProjId;
                        }

                        projJournalTrans.ProjId = psaContractLineItemsProjId;
                        break;

                    case PSAContractLineType::LumpSum   :
                        select firstonly psaContractLineItemsSetup
                            join ProjID from projOnAccTrans
                                where projOnAccTrans.TransId == psaContractLineItemsSetup.ProjOnAccTransId
                                   && psaContractLineItemsSetup.ContractLineNum == _contractLineNum
                                   && psaContractLineItemsSetup.ProjOnAccTransId
                                   && projOnAccTrans.ProjId == _projId;
                        if (psaContractLineItemsSetup)
                        {
                            projJournalTrans.ProjId = projOnAccTrans.ProjID;
                        }
                        break;
                }
            }
            else
            {
                projJournalTrans.ProjId    = _projId;
            }

            // Category Id must be set before call to initFromProjTable to set the Line Property field correctly.
            if (_category)
            {
                projCategoryLoc                = ProjCategory::find(_category);
                projJournalTrans.CategoryId    = projCategoryLoc.CategoryId;
            }
            else
            {
                projCategoryLoc                = ProjCategory::isMarkedCategory();
                projJournalTrans.CategoryId    = projCategoryLoc.CategoryId;
            }

            projTable                      = ProjTable::find(projJournalTrans.ProjId);
            projJournalTrans.initFromProjTable(projTable);

            if (_isRetained && this.parmProjProposalJour())
            {
                projJournalTrans.setLinePropertyFromProposalTrans(this.parmProjProposalJour().ProposalId);               
            }        
            
            if (_isReleased && _origProjRevenueTrans)
            {
                projJournalTrans.LinePropertyId = _origProjRevenueTrans.LinePropertyId;
            }
            else
            {
                projJournalTrans.setLinePropertyFromProposalTrans(this.parmProjProposalJour().ProposalId);
            }

            projJournalTrans.Qty    = 1;

            if (!_transTxt)
            {
                projJournalTrans.Txt    = projTable.psaRetainageBillingDesc();
            }

            else
            {
                projJournalTrans.Txt    = _transTxt;
            }

            projJournalTrans.CurrencyId = ProjInvoiceTable::find(projTable.ProjInvoiceProjId).CurrencyId;
            projJournalTrans.SalesPrice = CurrencyExchange::round(_retainedAmount, projJournalTrans.CurrencyId);
                

            if (!projJournalTrans.TaxItemGroupId && projJournalTrans.CategoryId)
            {
                projJournalTrans.TaxItemGroupId = projCategoryLoc.TaxItemGroupId;
            }

            if (_isRetained || _isReleased)
            {
                projJournalTrans.TaxGroupId = _taxGroup;
                projJournalTrans.TaxItemGroupId = _taxItemGroup;
            }

            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                ProjJournalTransTaxExtensionIN  projJournalTransTaxExtensionIN;

                projJournalTransTaxExtensionIN = projJournalTrans.projJournalTransTaxExtensionIN();
                projJournalTransTaxExtensionIN.AssessableValueTransactionCurrency = projJournalTrans.SalesPrice * projJournalTrans.Qty;
                projJournalTrans.packProjJournalTrans_IN(projJournalTransTaxExtensionIN);
            }
            // </GIN>

            projJournalTrans.insert();

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled() && psaContractLineItems.RecId != 0)
            {
                TransTaxInformationHelper::copyTransTaxInformation(psaContractLineItems, projJournalTrans);
            }
            // </GTE>

            //update the fee journal
            ProjJournalTable::initTotal(projJournalTable);
            projJournalTable.update();

            //Post the fee journal
            projJournalCheckPost = ProjJournalCheckPost::newJournalCheckPost(true,
                                                                             false,
                                                                             JournalCheckPostType::Post,
                                                                             tableNum(ProjJournalTable),
                                                                             projJournalTable.JournalId);
            if (!_category)
            {
                projJournalCheckPost.parmIsRetainage(true);
            }
            else
            {
                projJournalCheckPost.parmIsRetainage(false);
            }

            projJournalCheckPost.parmFundingSourceId(_fundingSource);
            projJournalCheckPost.runOperation();

            select forupdate projRevenueTrans
                join JournalId, Voucher, TransId from projJournalTrans
                where projJournalTrans.JournalId       == projJournalTable.JournalId
                    && projRevenueTrans.VoucherJournal == projJournalTrans.Voucher
                    && projRevenueTrans.TransId        == projJournalTrans.TransId;

            if (projRevenueTrans)
            {
                projRevenueTrans.IsRetained = _isRetained;
                if (!_category)
                {
                    projRevenueTrans.IsReleased = !_isRetained;
                }

                else
                {
                    projRevenueTrans.IsReleased = _isRetained;
                }

                projRevenueTrans.psaContractLineNum = _contractLineNum;
                projRevenueTrans.update();
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProposal</Name>
				<Source><![CDATA[
    protected boolean createProposal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExpenseInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjProposalCost</c> record buffer.
    /// </summary>
    /// <param name = "_projCostTransSale">
    /// A <c>ProjCostTransSale</c> record buffer.
    /// </param>
    /// <param name = "_projFundingSource">
    /// A <c>ProjFundingSource</c> record buffer.</param>
    /// <returns>
    /// The initialized <c>ProjProposalCost</c> record buffer.
    /// </returns>
    protected ProjProposalCost initializeExpenseInvoiceProposal(ProjCostTransSale _projCostTransSale, ProjFundingSource _projFundingSource)
    {
        ProjProposalCost        projProposalCost = ProjProposalCost::initProposaleFromTrans(this.parmProjCostTrans());

        projProposalCost.ProposalId  = this.parmProjProposalJour().ProposalId;
        _projFundingSource            = ProjFundingSource::find(_projCostTransSale.FundingSource);

        if (CustTable::isCustDKPublic(_projFundingSource.CustAccount) == NoYes::Yes && _projFundingSource.eInvoiceLineSpec == NoYes::Yes)
        {
            projProposalCost.eInvoiceAccountCode    = _projFundingSource.eInvoiceAccountCode;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && this.parmProjInvoiceTable().ProjInvoiceNetPrice_BR)
        {
            projProposalCost.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalCost.TaxGroupId, projProposalCost.TaxItemGroupId);
        }
        // </GBR>

        return projProposalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateExpenseInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates <c>ProjProposalCost</c> record.
    /// </summary>
    /// <param name = "_projCostTransSale">
    /// A <c>ProjCostTransSale</c> record buffer.
    /// </param>
    /// <param name = "_projFundingSource">
    /// A <c>ProjFundingSource</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalCost</c> record buffer.
    /// </returns>
    protected ProjProposalCost findOrCreateExpenseInvoiceProposal(ProjCostTransSale _projCostTransSale, ProjFundingSource _projFundingSource)
    {
        ProjProposalCost        projProposalCost;

        projProposalCost = ProjProposalCost::find(this.parmProjCostTrans().TransId, this.parmProjProposalJour().ProposalId);
        if (!projProposalCost)
        {
            projProposalCost = this.initializeExpenseInvoiceProposal(_projCostTransSale, _projFundingSource);

            if (projProposalCost.validateWrite())
            {
                projProposalCost.insert();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        return projProposalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExpenseInvoiceProposalDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjProposalCostDetail</c> record buffer.
    /// </summary>
    /// <param name = "_projProposalCost">
    /// A <c>ProjProposalCost</c> record buffer.
    /// </param>
    /// <param name = "_projCostTransSale">
    /// A <c>ProjCostTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalCostDetail</c> record buffer.
    /// </returns>
    protected ProjProposalCostDetail initializeExpenseInvoiceProposalDetails(ProjProposalCost _projProposalCost, ProjCostTransSale _projCostTransSale)
    {
        ProjProposalCostDetail projProposalCostDetail = ProjProposalCostDetail::initProposaleFromTrans(_projCostTransSale);
        projProposalCostDetail.ProposalRefRecId = _projProposalCost.RecId;

        // <GBR>
        if (BrazilParameters::isEnabled() && _projProposalCost.IncludedTaxPercent_BR)
        {
            projProposalCostDetail.AmountCur = CurrencyExchangeHelper::amount(_projProposalCost.qty() * projProposalCostDetail.salesPriceInclTax_BR(_projProposalCost.IncludedTaxPercent_BR), pProjProposalJour.CurrencyId);
        }
        // </GBR>

        return projProposalCostDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalCostDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalCost">
    /// A <c>ProjProposalCost</c> record buffer.
    /// </param>
    /// <param name = "_projCostTransSale">
    /// A <c>ProjCostTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalCostDetail</c> record.
    /// </returns>
    protected ProjProposalCostDetail createExpenseInvoiceProposalDetail(ProjProposalCost _projProposalCost, ProjCostTransSale _projCostTransSale)
    {
        ProjProposalCostDetail projProposalCostDetail = this.initializeExpenseInvoiceProposalDetails(_projProposalCost, _projCostTransSale);

        if (projProposalCostDetail.validateWrite())
        {
            if (_projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                projProposalCostDetail.AmountCur = projProposalCostDetail.AmountCur * -1;
            }

            projProposalCostDetail.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        return projProposalCostDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionStatusForExpenseSaleTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjCostTransSale</c> record transaction status.
    /// </summary>
    /// <param name = "_projCostTransSale">
    /// A <c>ProjCostTransSale</c> record buffer.
    /// </param>
    protected void updateTransactionStatusForExpenseSaleTransaction(ProjCostTransSale _projCostTransSale)
    {
        if (_projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
        {
            _projCostTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
        }
        else
        {
            _projCostTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
        }

        _projCostTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
    protected void doCost()
    {
        ProjProposalCost        projProposalCost;
        
        ProjCostTransSale       projCostTransSale;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;
        ProjFundingSource       projFundingSource;

        if (this.parmProjCostTrans())
        {
            saleQuery = new Query();
            saleQbds = saleQuery.addDataSource(tableNum(ProjCostTransSale));

            transIdQbr = saleQbds.addRange(fieldNum(ProjCostTransSale,TransId));
            transIdQbr.value(this.parmProjCostTrans().TransId);

            this.addCostTransSaleRange(saleQbds);

            saleQueryRun = new QueryRun(saleQuery);
            while (saleQueryRun.next())
            {
                projCostTransSale = saleQueryRun.get(tableNum(ProjCostTransSale));

                if (this.parmFundingSource() && pProjProposalJour && pProjProposalJour.FundingSource != projCostTransSale.FundingSource)
                {
                    continue;
                }

                projCostTransSale.selectForUpdate(true);

                if (projCostTransSale.canBeInvoiced())
                {
                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        this.setProjProposalJour_BR(this.parmProjCostTrans(), this.parmProjCostTrans().CurrencyId, projCostTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjCostTrans().ProjId));
                    }
                    else
                    {
                        // </GBR>
                        this.setProjProposalJour(projCostTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjCostTrans().ProjId), this.parmProjCostTrans().CurrencyId);
                        // <GBR>
                    }
                    // </GBR>

                    this.progressUpdate(strFmt("@SYS26810", this.parmProjCostTrans().ProjId, date2StrUsr(this.parmProjCostTrans().TransDate, DateFlags::FormatAll)));

                    // update contract line num
                    this.parmContLineNum(this.parmProjCostTrans().psaContractLineNum);

                    projProposalCost = this.findOrCreateExpenseInvoiceProposal(projCostTransSale, projFundingSource);

                    this.createExpenseInvoiceProposalDetail(projProposalCost, projCostTransSale);

                    this.updateTransactionStatusForExpenseSaleTransaction(projCostTransSale);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeHourInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjEmplTransSale</c> record buffer.
    /// </summary>
    /// <param name = "_projEmplTransSale">
    /// A <c>ProjEmplTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The initialized <c>ProjProposalEmpl</c> record buffer.
    /// </returns>
    protected ProjProposalEmpl initializeHourInvoiceProposal(ProjEmplTransSale _projEmplTransSale)
    {
        ProjProposalEmpl projProposalEmpl = ProjProposalEmpl::initProposaleFromTrans(this.parmProjEmplTrans());
        projProposalEmpl.ProposalId = this.parmProjProposalJour().ProposalId;
        ProjFundingSource projFundingSource           = ProjFundingSource::find(_projEmplTransSale.FundingSource);

        if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
        {
            projProposalEmpl.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && this.parmProjInvoiceTable().ProjInvoiceNetPrice_BR)
        {
            projProposalEmpl.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalEmpl.TaxGroupId, projProposalEmpl.TaxItemGroupId);
        }
        // </GBR>

        return projProposalEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHourInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalEmpl</c> record.
    /// </summary>
    /// <param name = "_projEmplTransSale">
    /// A <c>ProjEmplTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalEmpl</c> record buffer.
    /// </returns>
    protected ProjProposalEmpl createHourInvoiceProposal(ProjEmplTransSale _projEmplTransSale)
    {
        ProjProposalEmpl projProposalEmpl = this.initializeHourInvoiceProposal(_projEmplTransSale);

        if (projProposalEmpl.validateWrite())
        {
            projProposalEmpl.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(this.parmProjEmplTrans().TableId, this.parmProjEmplTrans().RecId, projProposalEmpl.TableId, projProposalEmpl.RecId);
        }
        // </GEEPL>

        return projProposalEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateHourInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates <c>ProjProposalEmpl</c> record.
    /// </summary>
    /// <param name = "_projEmplTransSale">
    /// A <c>ProjEmplTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalEmpl</c> record buffer.
    /// </returns>
    protected ProjProposalEmpl findOrCreateHourInvoiceProposal(ProjEmplTransSale _projEmplTransSale)
    {
        ProjProposalEmpl projProposalEmpl = ProjProposalEmpl::find(this.parmProjEmplTrans().TransId, this.parmProjProposalJour().ProposalId);
        if (!projProposalEmpl)
        {
            projProposalEmpl = this.createHourInvoiceProposal(_projEmplTransSale);
        }       

        return projProposalEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeHourInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjProposalEmplDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalEmpl">
    /// A <c>ProjProposalEmpl</c> record buffer.
    /// </param>
    /// <param name = "_projEmplTransSale">
    /// A <c>ProjEmplTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalEmplDetail</c> record.
    /// </returns>
    protected ProjProposalEmplDetail initializeHourInvoiceProposalDetail(ProjProposalEmpl _projProposalEmpl, ProjEmplTransSale _projEmplTransSale)
    {
        ProjProposalEmplDetail projProposalEmplDetail = ProjProposalEmplDetail::initProposaleFromTrans(_projEmplTransSale);

        projProposalEmplDetail.ProposalRefRecId = _projProposalEmpl.RecId;

        // <GBR>
        if (BrazilParameters::isEnabled() && _projProposalEmpl.IncludedTaxPercent_BR)
        {
            projProposalEmplDetail.AmountCur = CurrencyExchangeHelper::amount(_projProposalEmpl.qty() * projProposalEmplDetail.salesPriceInclTax_BR(_projProposalEmpl.IncludedTaxPercent_BR), pProjProposalJour.CurrencyId);
        }
        // </GBR>

        return projProposalEmplDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHourInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalEmplDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalEmpl">
    /// A <c>ProjProposalEmpl</c> record buffer.
    /// </param>
    /// <param name = "_projEmplTransSale">
    /// A <c>ProjEmplTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalEmplDetail</c> record.
    /// </returns>
    protected ProjProposalEmplDetail createHourInvoiceProposalDetail(ProjProposalEmpl _projProposalEmpl, ProjEmplTransSale _projEmplTransSale)
    {
        ProjProposalEmplDetail projProposalEmplDetail = this.initializeHourInvoiceProposalDetail(_projProposalEmpl, _projEmplTransSale);

        if (projProposalEmplDetail.validateWrite())
        {
            if (_projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                projProposalEmplDetail.AmountCur = projProposalEmplDetail.AmountCur * -1;
            }

            projProposalEmplDetail.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionStatusForHourSaleTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjEmplTransSale</c> record transaction status.
    /// </summary>
    /// <param name = "_projEmplTransSale">
    /// A <c>ProjEmplTransSale</c> record buffer.
    /// </param>
    protected void updateTransactionStatusForHourSaleTransaction(ProjEmplTransSale _projEmplTransSale)
    {
        if (_projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
        {
            _projEmplTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
        }
        else
        {
            _projEmplTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
        }

        _projEmplTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
    protected void doEmpl()
    {
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;
        ProjFundingSource       projFundingSource;

        if (this.parmProjEmplTrans())
        {
            saleQuery = new Query();
            saleQbds = saleQuery.addDataSource(tableNum(ProjEmplTransSale));

            transIdQbr = saleQbds.addRange(fieldNum(ProjEmplTransSale,TransId));
            transIdQbr.value(this.parmProjEmplTrans().TransId);

            this.addEmplTransSaleRange(saleQbds);

            saleQueryRun = new QueryRun(saleQuery);
            while (saleQueryRun.next())
            {
                projEmplTransSale = saleQueryRun.get(tableNum(ProjEmplTransSale));

                if (this.parmFundingSource() && pProjProposalJour && pProjProposalJour.FundingSource != projEmplTransSale.FundingSource)
                {
                    continue;
                }

                projEmplTransSale.selectForUpdate(true);

                if (projEmplTransSale.canBeInvoiced())
                {
                    //  update contract line num
                    this.parmContLineNum(this.parmProjEmplTrans().psaContractLineNum);

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        this.setProjProposalJour_BR(this.parmProjEmplTrans(), this.parmProjEmplTrans().CurrencyId, projEmplTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjEmplTrans().ProjId));
                    }
                    else
                    {
                        // </GBR>
                        this.setProjProposalJour(projEmplTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjEmplTrans().ProjId), this.parmProjEmplTrans().CurrencyId);
                        // <GBR>
                    }
                    // </GBR>
                    this.progressUpdate(strFmt("@SYS26810", this.parmProjEmplTrans().ProjId, date2StrUsr(this.parmProjEmplTrans().TransDate, DateFlags::FormatAll)));

                    projProposalEmpl = this.findOrCreateHourInvoiceProposal(projEmplTransSale);

                    this.createHourInvoiceProposalDetail(projProposalEmpl, projEmplTransSale);

                    this.updateTransactionStatusForHourSaleTransaction(projEmplTransSale);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateItemInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>ProjProposalItem</c> must be created.
    /// </summary>
    /// <returns>
    /// true if the <c>ProjProposalItem</c> must be created; otherwise, false.
    /// </returns>
    protected boolean shouldCreateItemInvoiceProposal()
    {
        if (this.parmProjItemTrans())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjProposalItem</c> record buffer.
    /// </summary>
    /// <param name = "_projItemTransSale">
    /// A <c>ProjItemTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The initialized <c>ProjProposalItem</c> record buffer.
    /// </returns>
    protected ProjProposalItem initializeItemInvoiceProposal(ProjItemTransSale _projItemTransSale)
    {
        ProjProposalItem projProposalItem = ProjProposalItem::initProposaleFromTrans(this.parmProjItemTrans());
        projProposalItem.ProposalId     = this.parmProjProposalJour().ProposalId;
        ProjFundingSource projFundingSource = ProjFundingSource::find(_projItemTransSale.FundingSource);

        if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
        {
            projProposalItem.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && this.parmProjInvoiceTable().ProjInvoiceNetPrice_BR)
        {
            projProposalItem.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalItem.TaxGroupId, projProposalItem.TaxItemGroupId);
        }
        // </GBR>

        return projProposalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalItem</c> record.
    /// </summary>
    /// <param name = "_projItemTransSale">
    /// A <c>ProjItemTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalItem</c> record buffer.
    /// </returns>
    protected ProjProposalItem createItemInvoiceProposal(ProjItemTransSale _projItemTransSale)
    {
        ProjProposalItem projProposalItem = this.initializeItemInvoiceProposal(_projItemTransSale);

        if (projProposalItem.validateWrite())
        {
            projProposalItem.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(this.parmProjItemTrans().TableId, this.parmProjItemTrans().RecId, projProposalItem.TableId, projProposalItem.RecId);
        }
        // </GEEPL>

        return projProposalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateItemInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates <c>ProjProposalItem</c> record.
    /// </summary>
    /// <param name = "_projItemTransSale">
    /// A <c>ProjItemTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalItem</c> record buffer.
    /// </returns>
    protected ProjProposalItem findOrCreateItemInvoiceProposal(ProjItemTransSale _projItemTransSale)
    {
        ProjProposalItem projProposalItem = ProjProposalItem::find(this.parmProjItemTrans().ProjTransId, this.parmProjProposalJour().ProposalId);
        if (!projProposalItem)
        {
            projProposalItem = this.createItemInvoiceProposal(_projItemTransSale);
        }

        return projProposalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalItemDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalItem">
    /// A <c>ProjProposalItem</c> record buffer.
    /// </param>
    /// <param name = "_projItemTransSale">
    /// A <c>ProjItemTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalItemDetail</c> record.
    /// </returns>
    protected ProjProposalItemDetail initializeItemInvoiceProposalDetail(ProjProposalItem _projProposalItem, ProjItemTransSale _projItemTransSale)
    {
        ProjProposalItemDetail projProposalItemDetail = ProjProposalItemDetail::initProposaleFromTrans(_projItemTransSale);
        projProposalItemDetail.ProposalRefRecId = _projProposalItem.RecId;

        // <GBR>
        if (BrazilParameters::isEnabled() && _projProposalItem.IncludedTaxPercent_BR)
        {
            projProposalItemDetail.AmountCur = CurrencyExchangeHelper::amount(_projProposalItem.qty() * projProposalItemDetail.salesPriceInclTax_BR(_projProposalItem.IncludedTaxPercent_BR), pProjProposalJour.CurrencyId);
        }
        // </GBR>        

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalItemDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalItem">
    /// A <c>ProjProposalItem</c> record buffer.
    /// </param>
    /// <param name = "_projItemTransSale">
    /// A <c>ProjItemTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalItemDetail</c> record.
    /// </returns>
    protected ProjProposalItemDetail createItemInvoiceProposalDetail(ProjProposalItem _projProposalItem, ProjItemTransSale _projItemTransSale)
    {
        ProjProposalItemDetail projProposalItemDetail = this.initializeItemInvoiceProposalDetail(_projProposalItem, _projItemTransSale);

        if (projProposalItemDetail.validateWrite())
        {
            if (_projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                projProposalItemDetail.AmountCur = projProposalItemDetail.AmountCur * -1;
            }

            projProposalItemDetail.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionStatusForItemSaleTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjItemTransSale</c> record transaction status.
    /// </summary>
    /// <param name = "_projItemTransSale">
    /// A <c>ProjItemTransSale</c> record buffer.
    /// </param>
    protected void updateTransactionStatusForItemSaleTransaction(ProjItemTransSale _projItemTransSale)
    {
        if (_projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
        {
            _projItemTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
        }
        else
        {
            _projItemTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
        }

        _projItemTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
    protected void doItem()
    {
        ProjProposalItem        projProposalItem;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;
        ProjFundingSource       projFundingSource;

        if (this.shouldCreateItemInvoiceProposal())
        {
            saleQuery = new Query();
            saleQbds = saleQuery.addDataSource(tableNum(ProjItemTransSale));

            transIdQbr = saleQbds.addRange(fieldNum(ProjItemTransSale,ProjTransId));
            transIdQbr.value(this.parmProjItemTrans().ProjTransId);

            this.addItemTransSaleRange(saleQbds);

            saleQueryRun = new QueryRun(saleQuery);
            while (saleQueryRun.next())
            {
                projItemTransSale = saleQueryRun.get(tableNum(ProjItemTransSale));

                if (this.parmFundingSource() && pProjProposalJour && pProjProposalJour.FundingSource != projItemTransSale.FundingSource)
                {
                    continue;
                }

                projItemTransSale.selectForUpdate(true);

                if (projItemTransSale.canBeInvoiced())
                {
                    // update contract line num
                    this.parmContLineNum(this.parmProjItemTrans().psaContractLineNum);

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        this.setProjProposalJour_BR(this.parmProjItemTrans(), this.parmProjItemTrans().CurrencyId, projItemTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjItemTrans().ProjId));
                    }
                    else
                    {
                        // </GBR>
                        this.setProjProposalJour(projItemTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjItemTrans().ProjId), this.parmProjItemTrans().CurrencyId);
                        // <GBR>
                    }
                    // </GBR>

                    this.progressUpdate(strFmt("@SYS26810", this.parmProjItemTrans().ProjId, date2StrUsr(this.parmProjItemTrans().TransDate, DateFlags::None)));

                    projProposalItem = this.findOrCreateItemInvoiceProposal(projItemTransSale);
                    projProposalItemDetail = this.createItemInvoiceProposalDetail(projProposalItem, projItemTransSale);

                    this.updateTransactionStatusForItemSaleTransaction(projItemTransSale);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnAccountInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalOnAcc</c> record.
    /// </summary>
    /// <param name = "_projOnAccTransSale">
    /// A <c>ProjOnAccTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalOnAcc</c> record buffer.
    /// </returns>
    protected ProjProposalOnAcc createOnAccountInvoiceProposal(ProjOnAccTransSale _projOnAccTransSale)
    {
        ProjProposalOnAcc projProposalOnAcc = ProjProposalOnAcc::initProposaleFromTrans(this.parmProjOnAccTrans());
        projProposalOnAcc.ProposalId    = this.parmProjProposalJour().ProposalId;
        ProjFundingSource projFundingSource = ProjFundingSource::find(_projOnAccTransSale.FundingSource);

        if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
        {
            projProposalOnAcc.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && this.parmProjInvoiceTable().ProjInvoiceNetPrice_BR)
        {
            projProposalOnAcc.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalOnAcc.TaxGroupId, projProposalOnAcc.TaxItemGroupId);
        }
        // </GBR>

        return projProposalOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateOnAccountInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates <c>ProjProposalOnAcc</c> record.
    /// </summary>
    /// <param name = "_projOnAccTransSale">
    /// A <c>ProjOnAccTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalOnAcc</c> record buffer.
    /// </returns>
    protected ProjProposalOnAcc findOrCreateOnAccountInvoiceProposal(ProjOnAccTransSale _projOnAccTransSale)
    {
        ProjProposalOnAcc projProposalOnAcc = ProjProposalOnAcc::find(this.parmProjOnAccTrans().TransId, this.parmProjProposalJour().ProposalId);
        if (!projProposalOnAcc)
        {
            projProposalOnAcc               = this.createOnAccountInvoiceProposal(_projOnAccTransSale);

            if (projProposalOnAcc.validateWrite())
            {
                projProposalOnAcc.insert();
            }
            else
            {
                throw error("@SYS18447");
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(this.parmProjOnAccTrans().TableId, this.parmProjOnAccTrans().RecId, projProposalOnAcc.TableId, projProposalOnAcc.RecId);
            }
            // </GEEPL>
        }

        return projProposalOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnAccountInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalOnAccDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalOnAcc">
    /// A <c>ProjProposalOnAcc</c> record buffer.
    /// </param>
    /// <param name = "_projOnAccTransSale">
    /// A <c>ProjOnAccTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalOnAccDetail</c> record.
    /// </returns>
    protected ProjProposalOnAccDetail createOnAccountInvoiceProposalDetail(ProjProposalOnAcc _projProposalOnAcc, ProjOnAccTransSale _projOnAccTransSale)
    {
        ProjProposalOnAccDetail projProposalOnAccDetail = ProjProposalOnAccDetail::initProposaleFromTrans(_projOnAccTransSale);
        projProposalOnAccDetail.ProposalRefRecId = _projProposalOnAcc.RecId;
        if (projProposalOnAccDetail.validateWrite())
        {
            if (_projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                projProposalOnAccDetail.AmountCur = projProposalOnAccDetail.AmountCur * -1;
            }

            // <GBR>
            if (BrazilParameters::isEnabled() && _projProposalOnAcc.IncludedTaxPercent_BR)
            {
                projProposalOnAccDetail.AmountCur = CurrencyExchangeHelper::amount(_projProposalOnAcc.qty() * projProposalOnAccDetail.salesPriceInclTax_BR(_projProposalOnAcc.IncludedTaxPercent_BR), pProjProposalJour.CurrencyId);
            }
            // </GBR>

            projProposalOnAccDetail.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        return projProposalOnAccDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionStatusForOnAccountSaleTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjOnAccTransSale</c> record transaction status.
    /// </summary>
    /// <param name = "_projOnAccTransSale">
    /// A <c>ProjOnAccTransSale</c> record buffer.
    /// </param>
    protected void updateTransactionStatusForOnAccountSaleTransaction(ProjOnAccTransSale _projOnAccTransSale)
    {
        if (_projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
        {
            _projOnAccTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
        }
        else
        {
            _projOnAccTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
        }

        _projOnAccTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
    protected void doOnAccount()
    {
        ProjProposalOnAcc       projProposalOnAcc;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTransSale      projOnAccTransSale;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;
        ProjFundingSource       projFundingSource;

        if (this.parmProjOnAccTrans())
        {
            saleQuery = new Query();
            saleQbds = saleQuery.addDataSource(tableNum(ProjOnAccTransSale));

            transIdQbr = saleQbds.addRange(fieldNum(ProjOnAccTransSale,TransId));
            transIdQbr.value(this.parmProjOnAccTrans().TransId);

            this.addOnAccTransSaleRange(saleQbds);

            saleQueryRun = new QueryRun(saleQuery);
            while (saleQueryRun.next())
            {
                projOnAccTransSale = saleQueryRun.get(tableNum(ProjOnAccTransSale));

                if (this.parmFundingSource() && pProjProposalJour && pProjProposalJour.FundingSource != projOnAccTransSale.FundingSource)
                {
                    continue;
                }

                projOnAccTransSale.selectForUpdate(true);

                if (projOnAccTransSale.canBeInvoiced())
                {
                    // update contract line num
                    this.parmContLineNum(this.parmProjOnAccTrans().psaContractLineNum);

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        this.setProjProposalJour_BR(this.parmProjOnAccTrans(), this.parmProjOnAccTrans().CurrencyId, projOnAccTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjOnAccTrans().ProjID));
                    }
                    else
                    {
                        // </GBR>
                        this.setProjProposalJour(projOnAccTransSale.FundingSource, ProjParameters::taxGroupInvoice(this.parmProjOnAccTrans().ProjID), this.parmProjOnAccTrans().CurrencyId);
                        // <GBR>
                    }
                    // </GBR>

                    this.progressUpdate(strFmt("@SYS26810", this.parmProjOnAccTrans().ProjID, date2StrUsr(this.parmProjOnAccTrans().TransDate, DateFlags::FormatAll)));

                    projProposalOnAcc = this.findOrCreateOnAccountInvoiceProposal(projOnAccTransSale);
                    projProposalOnAccDetail = this.createOnAccountInvoiceProposalDetail(projProposalOnAcc, projOnAccTransSale);

                    this.updateTransactionStatusForOnAccountSaleTransaction(projOnAccTransSale);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProposal</Name>
				<Source><![CDATA[
    protected void doProposal()
    {
        boolean doOnAccount = true;

        if (onAccDataSource &&
        onAccDataSource.enabled() &&
        queryRun.changed(tableNum(ProjOnAccTrans)))
        {
            if (pProjOnAccTrans && !queryOnAcc    && this.isOnAccTrans(pProjOnAccTrans))
            {
                doOnAccount = false;
            }

            if (pProjOnAccTrans && !queryAdvances && this.isAdvanceTrans(pProjOnAccTrans))
            {
                doOnAccount = false;
            }

            if (doOnAccount)
        /*
        if (queryOnAcc && queryRun.changed(tableNum(ProjOnAccTrans)))
        */
            {
                this.doOnAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRetention</Name>
				<Source><![CDATA[
    public void doRetention()
    {
        TmpProjProposalJour             tmpProjProposalJourLoc;

        tmpProjProposalJourLoc.setTmpData(tmpProjProposalJour);

        while select tmpProjProposalJourLoc
        order by ProjInvoiceProjId
        {
            select ProposalId, FundingSource, InvoiceAmount from pProjProposalJour
            where pProjProposalJour.RecId == tmpProjProposalJourLoc.RefProjProposalJour;

            if (pProjProposalJour)
            {
                this.calculateRetainage(pProjProposalJour.ProposalId, pProjProposalJour.FundingSource);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjRevenuTransSaleFromQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>ProjRevenueTransSale</c> table buffer from the QueryRun object.
    /// </summary>
    /// <param name = "_saleQueryRun">
    ///     Instance of <c>QueryRun</c>.
    /// </param>
    /// <returns>
    ///     The <c>ProjRevenueTransSale</c> table buffer from the QueryRun object.
    /// </returns>
    protected ProjRevenueTransSale getProjRevenuTransSaleFromQueryRun(QueryRun _saleQueryRun)
    {
        ProjRevenueTransSale projRevenueTransSale = _saleQueryRun.get(tableNum(ProjRevenueTransSale));
        return projRevenueTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalRevenue</c> record.
    /// </summary>
    /// <param name = "_projRevenueTrans">
    /// A <c>ProjRevenueTrans</c> record buffer.
    /// </param>
    /// <param name = "_projRevenueTransSale">
    /// A <c>ProjRevenueTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalRevenue</c> record buffer.
    /// </returns>
    protected ProjProposalRevenue createFeeInvoiceProposal(ProjRevenueTrans _projRevenueTrans, ProjRevenueTransSale _projRevenueTransSale)
    {
        ProjProposalRevenue projProposalRevenue = ProjProposalRevenue::initProposaleFromTrans(_projRevenueTrans);
        projProposalRevenue.ProposalId = this.parmProjProposalJour().ProposalId;
        ProjFundingSource projFundingSource = ProjFundingSource::find(_projRevenueTransSale.FundingSource);

        if (!PSAContractLineItems::find(this.parmContLineNum()).SalesTaxGroup && projFundingSource)
        {
            if (_projRevenueTrans.IsRetained == NoYes::Yes)
            {
                projProposalRevenue.TaxGroupId      = _projRevenueTrans.TaxGroupId;
                projProposalRevenue.TaxItemGroupId  = _projRevenueTrans.TaxItemGroupId;
            }
            else
            {
                // get the tax group based on funding source
                projProposalRevenue.TaxGroupId = ProjParameters::taxGroupInvoice(_projRevenueTrans.ProjId);
            }
        }

        if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
        {
            projProposalRevenue.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && this.parmProjInvoiceTable().ProjInvoiceNetPrice_BR)
        {
            projProposalRevenue.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalRevenue.TaxGroupId, projProposalRevenue.TaxItemGroupId);
        }
        // </GBR>

        return projProposalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFeeInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates <c>ProjProposalRevenue</c> record.
    /// </summary>
    /// <param name = "_projRevenueTrans">
    /// A <c>ProjRevenueTrans</c> record buffer.
    /// </param>
    /// <param name = "_projRevenueTransSale">
    /// A <c>ProjRevenueTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalRevenue</c> record buffer.
    /// </returns>
    protected ProjProposalRevenue findOrCreateFeeInvoiceProposal(ProjRevenueTrans _projRevenueTrans, ProjRevenueTransSale _projRevenueTransSale)
    {
        ProjProposalRevenue projProposalRevenue = ProjProposalRevenue::find(_projRevenueTrans.TransId, this.parmProjProposalJour().ProposalId);
        if (!projProposalRevenue)
        {
            projProposalRevenue = this.createFeeInvoiceProposal(_projRevenueTrans, _projRevenueTransSale);
            if (projProposalRevenue.validateWrite())
            {
                projProposalRevenue.insert();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        return projProposalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFeeInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalRevenueDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalRevenue">
    /// A <c>ProjProposalRevenue</c> record buffer.
    /// </param>
    /// <param name = "_projRevenueTransSale">
    /// A <c>ProjRevenueTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalRevenueDetail</c> record.
    /// </returns>
    protected ProjProposalRevenueDetail initializeFeeInvoiceProposalDetail(ProjProposalRevenue _projProposalRevenue, ProjRevenueTransSale _projRevenueTransSale)
    {
        ProjProposalRevenueDetail projProposalRevenueDetail = ProjProposalRevenueDetail::initProposaleFromTrans(_projRevenueTransSale);
        projProposalRevenueDetail.ProposalRefRecId = _projProposalRevenue.RecId;

        // <GBR>
        if (BrazilParameters::isEnabled() && _projProposalRevenue.IncludedTaxPercent_BR)
        {
            projProposalRevenueDetail.AmountCur = CurrencyExchangeHelper::amount(_projProposalRevenue.qty() * projProposalRevenueDetail.salesPriceInclTax_BR(_projProposalRevenue.IncludedTaxPercent_BR), pProjProposalJour.CurrencyId);
        }
        // </GBR>

        return projProposalRevenueDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeInvoiceProposalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalRevenueDetail</c> record.
    /// </summary>
    /// <param name = "_projProposalRevenue">
    /// A <c>ProjProposalRevenue</c> record buffer.
    /// </param>
    /// <param name = "_projRevenueTransSale">
    /// A <c>ProjRevenueTransSale</c> record buffer.
    /// </param>
    /// <returns>
    /// A <c>ProjProposalRevenueDetail</c> record.
    /// </returns>
    protected ProjProposalRevenueDetail createFeeInvoiceProposalDetail(ProjProposalRevenue _projProposalRevenue, ProjRevenueTransSale _projRevenueTransSale)
    {
        ProjProposalRevenueDetail projProposalRevenueDetail = this.initializeFeeInvoiceProposalDetail(_projProposalRevenue, _projRevenueTransSale);

        if (projProposalRevenueDetail.validateWrite())
        {
            if (_projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                projProposalRevenueDetail.AmountCur = projProposalRevenueDetail.AmountCur * -1;
            }

            projProposalRevenueDetail.insert();
        }
        else
        {
            throw error("@SYS18447");
        }

        return projProposalRevenueDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionStatusForFeeSaleTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjRevenueTransSale</c> record transaction status.
    /// </summary>
    /// <param name = "_projRevenueTransSale">
    /// A <c>ProjRevenueTransSale</c> record buffer.
    /// </param>
    protected void updateTransactionStatusForFeeSaleTransaction(ProjRevenueTransSale _projRevenueTransSale)
    {
        if (_projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
        {
            _projRevenueTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
        }
        else
        {
            _projRevenueTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
        }

        _projRevenueTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the Fee journal.
    /// </summary>
    protected void doRevenue()
    {
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;
        Query                       saleQuery;
        QueryBuildDataSource        saleQbds;
        QueryBuildRange             transIdQbr;
        QueryRun                    saleQueryRun;
        ProjFundingSource           projFundingSource;
        ProjRevenueTransSale        projRevenueTransSaleLoc;
        ProjRevenueTrans            projRevenueTransLoc;

        projRevenueTransLoc = this.parmProjRevenueTrans();
        if (this.isRetentionTrans(projRevenueTransLoc))
        {
            select RecId, FundingSource from projRevenueTransSale
            where projRevenueTransSale.TransId == projRevenueTransLoc.TransId;

            pProjRevenueTrans = this.createFeeJournal(pProjTable.ProjId,
                                                  abs(projRevenueTransLoc.transTurnover()),
                                                  projRevenueTransSale.FundingSource,
                                                  projRevenueTransLoc.psaContractLineNum);

            update_recordset projRevenueTransSaleLoc
            setting psaRefREcId = projRevenueTransSale.RecId
                where projRevenueTransSaleLoc.TransId == pProjRevenueTrans.TransId;
        }

        if (projRevenueTransLoc && this.checkOrigin())
        {
            saleQuery = new Query();
            saleQbds = saleQuery.addDataSource(tableNum(ProjRevenueTransSale));

            transIdQbr = saleQbds.addRange(fieldNum(ProjRevenueTransSale,TransId));
            transIdQbr.value(projRevenueTransLoc.TransId);

            this.addRevenueTransSaleRange(saleQbds);

            saleQueryRun = new QueryRun(saleQuery);
            while (saleQueryRun.next())
            {
                projRevenueTransSale = this.getProjRevenuTransSaleFromQueryRun(saleQueryRun);
                if (this.parmFundingSource() && pProjProposalJour && pProjProposalJour.FundingSource != projRevenueTransSale.FundingSource)
                {
                    continue;
                }

                projRevenueTransSale.selectForUpdate(true);

                if (projRevenueTransSale.canBeInvoiced())
                {
                    // update contract line num
                    this.parmContLineNum(projRevenueTransLoc.psaContractLineNum);

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        this.setProjProposalJour_BR(projRevenueTransLoc, projRevenueTransLoc.CurrencyId, projRevenueTransSale.FundingSource, ProjParameters::taxGroupInvoice(projRevenueTransLoc.ProjId));
                    }
                    else
                    {
                        // </GBR>
                        this.setProjProposalJour(projRevenueTransSale.FundingSource, ProjParameters::taxGroupInvoice(projRevenueTransLoc.ProjId), projRevenueTransLoc.CurrencyId);
                        // <GBR>
                    }
                    // </GBR>

                    this.progressUpdate(strFmt("@SYS26810", projRevenueTransLoc.ProjId, date2StrUsr(projRevenueTransLoc.TransDate, DateFlags::FormatAll)));

                    projProposalRevenue = this.findOrCreateFeeInvoiceProposal(projRevenueTransLoc, projRevenueTransSale);
                    projProposalRevenueDetail = this.createFeeInvoiceProposalDetail(projProposalRevenue, projRevenueTransSale);

                    this.updateTransactionStatusForFeeSaleTransaction(projRevenueTransSale);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectSingleProjFundingSourceForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get singleton funding source for Sales line processing. Multiple funding sources are not suppported for sales orders/item req.
    /// </summary>
    /// <returns>The selected <c>ProjFundingSource</c> buffer.</returns>
    protected ProjFundingSource selectSingleProjFundingSourceForSalesLine()
    {
        ProjFundingSource projFundingSource;

        select firstonly RecId from projFundingSource
                where projFundingSource.ContractId == pProjInvoiceTable.ProjInvoiceProjId;

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateItemInvoiceProposalFormSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to create <c>ProjProposalItem</c> from sales order line.
    /// </summary>
    /// <param name = "_salesLine">
    /// A sales order line record buffer.
    /// </param>
    /// <returns>
    /// true if needs to create <c>ProjProposalItem</c> from sales order line; otherwise, false.
    /// </returns>
    protected boolean shouldCreateItemInvoiceProposalFormSalesLine(SalesLine _salesLine)
    {
        return (_salesLine && _salesLine.canBeInvoiced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemInvoiceProposalFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProjProposalItem</c> record from sales order line.
    /// </summary>
    /// <param name = "_projProposalItem">
    /// A <c>ProjProposalItem</c> record buffer.
    /// </param>
    /// <param name = "_salesLine">
    /// A <c>SalesLine</c> record buffer.
    /// </param>
    protected void createItemInvoiceProposalFromSalesLine(ProjProposalItem _projProposalItem, SalesLine _salesLine)
    {
        ProjProposalItemDetail  projProposalItemDetail;
        ProjFundingSource projFundingSource = this.selectSingleProjFundingSourceForSalesLine();
        ProjFundingSourceRefId  projFundingSourceRefId = projFundingSource.RecId;
        DocuRef                 docuRef;
        boolean                 docuRefCopied = false;

        this.setProjProposalJour(projFundingSourceRefId, ProjParameters::taxGroupInvoice(_salesLine.ProjId) ,_salesLine.CurrencyCode);

        _projProposalItem.ProposalId = this.parmProjProposalJour().ProposalId;

        if (_projProposalItem.validateWrite())
        {
            _projProposalItem.insert();

            projProposalItemDetail                  = ProjProposalItemDetail::initProposaleFromSalesLine(_salesLine);
            projProposalItemDetail.LineAmount       = _salesLine.calcLineAmount(_projProposalItem.DeliverNow);
            projProposalItemDetail.ProposalRefRecId = _projProposalItem.RecId;
            if (projProposalItemDetail.validateWrite())
            {
                projProposalItemDetail.insert();
            }
            else
            {
                // Update has been canceled.
                throw error("@SYS18447");
            }
        }
        else
        {
            // Update has been canceled.
            throw error("@SYS18447");
        }

        // Copy notes from Sales Table
        if (!docuRefCopied)
        {
            docuRefCopied = true;
            select firstonly docuRef index RefIdx where docuRef.RefCompanyId  == SalesTable::find(_projProposalItem.SalesId).DataAreaId &&
                                    docuRef.RefTableId    == tableNum(SalesTable)  &&
                                    docuRef.RefRecId      == SalesTable::find(_projProposalItem.SalesId).RecId;

            if (docuRef)
            {
                Docu::copy(SalesTable::find(_projProposalItem.SalesId), this.parmProjProposalJour());
                docuRef.doClear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSalesLine</Name>
				<Source><![CDATA[
    protected void doSalesLine()
    {
        #ISOCountryRegionCodes
        ProjProposalItem        projProposalItem;
        SalesQuantity           salesQuantity   = SalesQuantity::construct(DocumentStatus::Invoice);
        SalesLine               salesLine;
        /*
    Query                   saleQuery;
    QueryBuildDataSource    saleQbds;
    QueryBuildRange         salesIdQbr;

    QueryRun                saleQueryRun;
    */

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
        && this.parmInvoiceDate())
        {
            salesQuantity.parmTransDate(this.parmInvoiceDate());
        }

        salesLine = this.parmSalesLine();
        if (this.shouldCreateItemInvoiceProposalFormSalesLine(salesLine))
        {
            // update contract line num
            this.parmContLineNum(salesLine.psaContractLineNum);
            this.progressUpdate(strFmt("@SYS26810", salesLine.ProjId, salesLine.ItemId));
            this.parmProjTable(ProjTable::find(salesLine.ProjId));
            this.parmProjInvoiceTable(ProjInvoiceTable::find(this.parmProjTable().ProjInvoiceProjId));

            if (this.parmSalesTable().DiscPercent)
            {
                enddiscPercent = this.parmSalesTable().DiscPercent;
            }

            projProposalItem = ProjProposalItem::initProposaleFromSalesLine(salesLine);

            if (CustTable::isCustDKPublic(ProjFundingSource::findCustAccount(pProjInvoiceTable.ProjInvoiceProjId).CustAccount) == NoYes::Yes && pProjInvoiceTable.eInvoiceLineSpec == NoYes::Yes)
            {
                projProposalItem.eInvoiceAccountCode = pProjInvoiceTable.eInvoiceAccountCode;
            }

            [projProposalItem.DeliverNow, projProposalItem.RemainBefore, projProposalItem.RemainAfter] = salesQuantity.qtySales(salesLine, salesUpdate);

            [projProposalItem.InventNow, projProposalItem.RemainBeforeInvent, projProposalItem.RemainAfterInvent] = salesQuantity.qtyInvent(salesLine, salesUpdate);

            if (projProposalItem.DeliverNow)
            {
                this.createItemInvoiceProposalFromSalesLine(projProposalItem, salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (this.parmCalledFromTrans())
        {
            this.getFromDialogMapTransId();
        }
        else
        {
            this.parmQuerySalesLine(dialogSalesLine.value());
            this.parmQueryEmplTrans(dialogEmpl.value());
            this.parmQueryCostTrans(dialogCost.value());
            this.parmQueryRevenueTrans(dialogRevenue.value());
            this.parmQuerySubscriptionTrans(dialogSubscription.value());
            this.parmQueryItemTrans(dialogItem.value());
            this.parmQueryOnAccTrans(dialogOnAcc.value());

            this.parmFromDate(dialogFromDate.value());
            this.parmToDate(dialogToDate.value());

            this.parmSalesUpdate(dialogQtyUpdate.value());
        }

        this.parmInvoiceDate(dialogInvoiceDate.value());

        this.parmQueryInvoiceType(dialogInvoiceType.value());
        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.parmTaxPeriodPaymentCode_PL(dialogTaxPeriodPaymentCode.value());
        }
        // </GEEPL>
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialogMapTransId</Name>
				<Source><![CDATA[
    public void getFromDialogMapTransId()
    {
        List            list;
        ListIterator    li;

        Common      commonTrans;

        querySalesLine      = false;
        queryEmpl           = false;
        queryCost           = false;
        queryRevenue        = false;
        querySubscription   = false;
        queryItem           = false;
        queryOnAcc          = false;

        if (this.parmTransIdList())
        {
            list    = List::create(this.parmTransIdList());
        }

        li = new ListIterator(list);

        li.begin();

        while (li.more())
        {
            commonTrans         = li.value();

            switch (commonTrans.TableId)
            {
                case tableNum(ProjEmplTrans):
                    queryEmpl   = true;
                    break;

                case tableNum(ProjCostTrans):
                    queryCost   = true;
                    break;

                case tableNum(ProjItemTrans):
                    queryItem   = true;
                    break;

                case tableNum(ProjOnAccTrans):
                    queryOnAcc  = true;
                    break;

                case tableNum(ProjRevenueTrans):
                    queryRevenue        = true;
                    querySubscription   = true;
                    break;
            }
            li.next();
        }

        this.parmFromDate(dateNull());
        this.parmToDate(dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProposalIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of proposal ID that were generated.
    /// </summary>
    /// <returns>
    /// List of proposal ID that were generated.
    /// </returns>
    public List getProposalIdList()
    {
        return proposalIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceProposalSplit_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjInvoiceProposalSplit_BR</c>
    /// </summary>

    protected void initProjInvoiceProposalSplit_BR()
    {
        projInvoiceProposalSplit_BR = new ProjInvoiceProposalSplit_BR(ProjInvoiceTable::find(this.parmprojInvoiceProjId()), projInvoiceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPosted</Name>
				<Source><![CDATA[
    public InterCompanyPosted interCompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;

        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether the record in <c>ProjOnAccTrans</c> table is of type advance.
    /// </summary>
    /// <param name="_trans">
    /// A record in <c>ProjOnAccTrans</c> table is of type advance.
    /// </param>
    /// <returns>
    /// Returns true if the record in <c>ProjOnAccTrans</c> table is of type advance; otherwise false.
    /// </returns>
    protected boolean isAdvanceTrans(ProjOnAccTrans _trans)
    {
        return (_trans.TransactionOrigin == ProjOrigin::Prepayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether the record in <c>ProjOnAccTrans</c> table is of type On Account.
    /// </summary>
    /// <param name="_trans">
    /// A record in <c>ProjOnAccTrans</c> table is of type advance.
    /// </param>
    /// <returns>
    /// Returns true if the record in <c>ProjOnAccTrans</c> table is of type On Account; otherwise false.
    /// </returns>
    protected boolean isOnAccTrans(ProjOnAccTrans _trans)
    {
        ProjOnAccTrans relatedTrans;

        select firstonly RecId from relatedTrans
        where relatedTrans.RecId             == _trans.psaRefRecId &&
              relatedTrans.TransactionOrigin == ProjOrigin::Prepayment;

        return (relatedTrans.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionRelease</Name>
				<Source><![CDATA[
    private boolean isRetentionRelease(ProjProposalId _projProposalId)
    {
        ProjRevenueTrans    projRevenueTrans;
        ProjProposalRevenue projProposalRevenue;

        select RecId from projRevenueTrans
        where projRevenueTrans.IsReleased == NoYes::Yes
        exists join projProposalRevenue
            where projProposalRevenue.TransId    == projRevenueTrans.TransId &&
                    projProposalRevenue.ProposalId == _projProposalId;

        return (projRevenueTrans ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether the record in <c>ProjRevenueTrans</c> table is of type Fee.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// A record in <c>ProjRevenueTrans</c> table is of type Fee.
    /// </param>
    /// <returns>
    /// Returns true if the record in <c>ProjRevenueTrans</c> table is of type Fee; otherwise false.
    /// </returns>
    protected boolean isRetentionTrans(ProjRevenueTrans _projRevenueTrans)
    {
        return (_projRevenueTrans.TransactionOrigin == ProjOrigin::FeeJournal &&
            _projRevenueTrans.IsRetained        == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalJour _projProposalJour = null)
    {
        projRevenueProposalList = new List(Types::String);
        this.parmProjProposalJour(_projProposalJour);

        this.parmShowMessages(false);

        proposalIdList = new List(Types::String);

        isInvoiceProposalCreated = true;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();

        if (queryRun)
        {
            pack = queryRun.pack();
        }

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromTrans</Name>
				<Source><![CDATA[
    public boolean parmCalledFromTrans(boolean _calledFromTrans    = calledFromTrans)
    {
        calledFromTrans = _calledFromTrans;

        return calledFromTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContLineNum</Name>
				<Source><![CDATA[
    public PSAContractLineNum parmContLineNum(PSAContractLineNum _contLineNum = m_sContLineNum)
    {
        m_sContLineNum = _contLineNum;
        return m_sContLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyId</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyId(CurrencyCode _currencyId = currencyId)
    {
        currencyId = _currencyId;

        return currencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDEndDate</Name>
				<Source><![CDATA[
    public ToDate parmDEndDate(ToDate _dEndDate = dEndDate)
    {
        dEndDate = _dEndDate;

        return dEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterOnAccTrans</Name>
				<Source><![CDATA[
    public boolean parmFilterOnAccTrans(boolean _filterOnAccTrans)
    {
        filterOnAccTrans = _filterOnAccTrans;

        return filterOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceId parmFundingSource(ProjFundingSourceId _fundingSourceId = fundingSourceId)
    {
        fundingSourceId = _fundingSourceId;

        return fundingSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    public InvoiceDate parmInvoiceDate(InvoiceDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoiceProposalCreated</Name>
				<Source><![CDATA[
    public boolean parmIsInvoiceProposalCreated(boolean _isInvoiceProposalCreated = isInvoiceProposalCreated)
    {
        isInvoiceProposalCreated = _isInvoiceProposalCreated;

        return isInvoiceProposalCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCostTrans</Name>
				<Source><![CDATA[
    public ProjCostTrans parmProjCostTrans(ProjCostTrans _projCostTrans = pProjCostTrans)
    {
        pProjCostTrans = _projCostTrans;

        return pProjCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjEmplTrans</Name>
				<Source><![CDATA[
    public ProjEmplTrans parmProjEmplTrans(ProjEmplTrans _projEmplTrans = pProjEmplTrans)
    {
        pProjEmplTrans = _projEmplTrans;

        return pProjEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId  = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmprojInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmprojInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId  = _projInvoiceProjId;

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceTable</Name>
				<Source><![CDATA[
    public ProjInvoiceTable parmProjInvoiceTable(ProjInvoiceTable _projInvoiceTable = pProjInvoiceTable)
    {
        pProjInvoiceTable = _projInvoiceTable;

        return pProjInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjItemTrans</Name>
				<Source><![CDATA[
    public ProjItemTrans parmProjItemTrans(ProjItemTrans _projItemTrans = pProjItemTrans)
    {
        pProjItemTrans = _projItemTrans;

        return pProjItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjOnAccTrans</Name>
				<Source><![CDATA[
    public ProjOnAccTrans parmProjOnAccTrans(ProjOnAccTrans _projOnAccTrans = pProjOnAccTrans)
    {
        pProjOnAccTrans = _projOnAccTrans;

        return pProjOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = pProjProposalJour)
    {
        pProjProposalJour = _projProposalJour;

        return pProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjRetentionTrans</Name>
				<Source><![CDATA[
    public ProjRevenueTrans parmProjRetentionTrans(ProjRevenueTrans _projRetentionTrans = pProjRetentionTrans)
    {
        pProjRetentionTrans = _projRetentionTrans;

        return pProjRetentionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjRevenueProposalList</Name>
				<Source><![CDATA[
    public List parmProjRevenueProposalList(List _projRevenueProposalList = projRevenueProposalList)
    {
        projRevenueProposalList = _projRevenueProposalList;

        return projRevenueProposalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjRevenueTrans</Name>
				<Source><![CDATA[
    public ProjRevenueTrans parmProjRevenueTrans(ProjRevenueTrans _projRevenueTrans = pProjRevenueTrans)
    {
        pProjRevenueTrans = _projRevenueTrans;

        return pProjRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmProjTable(ProjTable _projTable = pProjTable)
    {
        pProjTable = _projTable;

        return pProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpProjProposalSummary</Name>
				<Source><![CDATA[
    public PSATmpProjProposalSummary parmPSATmpProjProposalSummary(PSATmpProjProposalSummary _tmpProjProposalSummary = null)
    {
        if (_tmpProjProposalSummary)
        {
            m_TmpProjProposalSummary.setTmpData(_tmpProjProposalSummary);
        }

        m_bUseTmpProjProjProposal = true;
        return m_TmpProjProposalSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpProjProposalTrans</Name>
				<Source><![CDATA[
    public PSATmpProjProposalTrans parmPSATmpProjProposalTrans(PSATmpProjProposalTrans _tmpProjProposalTrans = null)
    {
        if (_tmpProjProposalTrans)
        {
            m_TmpProjProposalTrans.setTmpData(_tmpProjProposalTrans);
        }

        m_bUseTmpProjProjProposal = true;
        return m_TmpProjProposalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpProjProposalTransPreBill</Name>
				<Source><![CDATA[
    public PSATmpProjProposalTrans parmPSATmpProjProposalTransPreBill(PSATmpProjProposalTrans _tmpProjProposalTrans = null)
    {
        if (_tmpProjProposalTrans)
        {
            m_TmpProjProposalTransPreBill.setTmpData(_tmpProjProposalTrans);
        }

        return m_TmpProjProposalTransPreBill;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryAdvanceTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryAdvanceTrans(boolean _queryAdvances = queryAdvances)
    {
        queryAdvances = _queryAdvances;

        return queryAdvances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCostTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryCostTrans(boolean _queryCost = queryCost)
    {
        queryCost = _queryCost;

        return queryCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEmplTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryEmplTrans(boolean _queryEmpl = queryEmpl)
    {
        queryEmpl = _queryEmpl;

        return queryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryInvoiceType</Name>
				<Source><![CDATA[
    public ProjInvoiceTypeSelection parmQueryInvoiceType(ProjInvoiceTypeSelection _queryInvoiceType = queryInvoiceType)
    {
        queryInvoiceType  = _queryInvoiceType;

        return queryInvoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryItemTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryItemTrans(boolean _queryItem = queryItem)
    {
        queryItem = _queryItem;

        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryOnAccTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryOnAccTrans(boolean _queryOnAcc = queryOnAcc)
    {
        queryOnAcc = _queryOnAcc;

        return queryOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRetentionTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryRetentionTrans(boolean _queryRetention = queryRetention)
    {
        queryRetention = _queryRetention;

        return queryRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRevenueTrans</Name>
				<Source><![CDATA[
    public boolean parmQueryRevenueTrans(boolean _queryRevenue = queryRevenue)
    {
        queryRevenue = _queryRevenue;

        return queryRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuerySalesLine</Name>
				<Source><![CDATA[
    public boolean parmQuerySalesLine(boolean _querySalesLine = querySalesLine)
    {
        querySalesLine = _querySalesLine;

        return querySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuerySubscriptionTrans</Name>
				<Source><![CDATA[
    public boolean parmQuerySubscriptionTrans(boolean _querySubscription = querySubscription)
    {
        querySubscription = _querySubscription;

        return querySubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine(SalesLine _salesLine = pSalesLine)
    {
        pSalesLine = _salesLine;

        return pSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = pSalesTable)
    {
        pSalesTable = _salesTable;

        return pSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUpdate</Name>
				<Source><![CDATA[
    public SalesUpdate parmSalesUpdate(SalesUpdate _salesUpdate = salesUpdate)
    {
        salesUpdate  = _salesUpdate;

        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMessages</Name>
				<Source><![CDATA[
    public boolean parmShowMessages(boolean _showMessages = showMessages)
    {
        showMessages = _showMessages;

        return showMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmaServiceOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns a record in <c>SMAServiceOrderTable</c> table.
    /// </summary>
    /// <param name="_smaServiceOrderTable">
    /// A record in <c>SMAServiceOrderTable</c> table.
    /// </param>
    /// <returns>
    /// record in <c>SMAServiceOrderTable</c> table.
    /// </returns>
    public SMAServiceOrderTable parmSmaServiceOrderTable(SMAServiceOrderTable _smaServiceOrderTable = smaServiceOrderTable)
    {
        smaServiceOrderTable = _smaServiceOrderTable;

        return smaServiceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriodPaymentCode_PL</Name>
				<Source><![CDATA[
    public PlTaxPeriodPaymentCode parmTaxPeriodPaymentCode_PL(PlTaxPeriodPaymentCode _taxPeriodPaymentCode = taxPeriodPaymentCode)
    {
        taxPeriodPaymentCode = _taxPeriodPaymentCode;

        return taxPeriodPaymentCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransIdContainer</Name>
				<Source><![CDATA[
    public container parmTransIdContainer(container _transIdContainer  = projTransIdContainer)
    {
        projTransIdContainer = _transIdContainer;

        return projTransIdContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransIdList</Name>
				<Source><![CDATA[
    public container parmTransIdList(container _transIdList  = projTransIdList)
    {
        projTransIdList = _transIdList;

        return projTransIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateProposal</Name>
				<Source><![CDATA[
    public boolean parmUpdateProposal(boolean _update = updateProposal)
    {
        updateProposal = _update;

        return updateProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransIdContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the transactions in the cotnainer to TransIdList list.
    /// </summary>
    public void processTransIdContainer()
    {
        int                                 conPos  = 1;
        List                                transIdList;
        ProjEmplTrans                       tProjEmplTrans;
        ProjCostTrans                       tProjCostTrans;
        ProjItemTrans                       tProjItemTrans;
        SalesLine                           salesLine;
        ProjRevenueTrans                    tProjRevenueTrans;
        ProjOnAccTrans                      tProjOnAccTrans;
        PSAContractLineNum                  spsaContractLineNum;

        if (conLen(projTransIdContainer) == 0)
        {
            return;
        }

        if (this.parmTransIdList())
        {
            transIdList    = List::create(this.parmTransIdList());
        }
        else
        {
            transIdList    = new List(Types::Record);
        }

        while (conPos < conLen(projTransIdContainer))
        {
            switch (conPeek(projTransIdContainer,conPos))
            {
                case ProjTransType::Cost:
                    tProjCostTrans = ProjCostTrans::find(conPeek(projTransIdContainer,conPos +1), true);
                    if (tProjCostTrans)
                    {
                        tProjCostTrans.psaContractLineNum = spsaContractLineNum;
                        tProjCostTrans.update();
                        transIdList.addEnd(tProjCostTrans);
                    }
                    break;
                case ProjTransType::Hour:
                    tProjEmplTrans = ProjEmplTrans::find(conPeek(projTransIdContainer,conPos +1), true);
                    if (tProjEmplTrans)
                    {
                        tProjEmplTrans.psaContractLineNum = spsaContractLineNum;
                        tProjEmplTrans.update();
                        transIdList.addEnd(tProjEmplTrans);
                    }
                    break;
                case ProjTransType::Item:
                    tProjItemTrans = ProjItemTrans::find(conPeek(projTransIdContainer,conPos +1), true);
                    if (tProjItemTrans)
                    {
                        tProjItemTrans.psaContractLineNum = spsaContractLineNum;
                        tProjItemTrans.update();
                        transIdList.addEnd(tProjItemTrans);
                    }
                    salesLine = SalesLine::findInventTransId(conPeek(projTransIdContainer,conPos +1), true);
                    if (salesLine)
                    {
                        salesLine.psaContractLineNum = spsaContractLineNum;
                        salesLine.update();
                        transIdList.addEnd(salesLine);
                    }
                    break;
                case ProjTransType::Revenue:
                    tProjRevenueTrans = ProjRevenueTrans::find(conPeek(projTransIdContainer,conPos +1), true);
                    if (tProjRevenueTrans)
                    {
                        tProjRevenueTrans.psaContractLineNum = spsaContractLineNum;
                        tProjRevenueTrans.update();
                        transIdList.addEnd(tProjRevenueTrans);
                    }
                    break;
                case ProjTransType::OnAccount:
                    tProjOnAccTrans = ProjOnAccTrans::find(conPeek(projTransIdContainer,conPos +1), true);
                    if (tProjOnAccTrans)
                    {
                        tProjOnAccTrans.psaContractLineNum = spsaContractLineNum;
                        tProjOnAccTrans.update();
                        transIdList.addEnd(tProjOnAccTrans);
                    }
                    break;
            }

            conPos = conPos + 2;
        }

        this.parmTransIdList(transIdList.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaAddEndDateToProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts end date into <c>ProjProposalJournal</c>.
    /// </summary>
    protected void psaAddEndDateToProposalJour()
    {
        ProjProposalJour  tProjProposalJour;

        ttsbegin;
        select forupdate  tProjProposalJour
        where tProjProposalJour.RecId==pProjProposalJour.RecId;
        if (tProjProposalJour)
        {
            tProjProposalJour.psaEndDate=dEndDate;
            tProjProposalJour.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaBuildQuery</Name>
				<Source><![CDATA[
    void psaBuildQuery()
    {
        queryRun = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaCreateProjOnAccTrans</Name>
				<Source><![CDATA[
    ProjOnAccTrans psaCreateProjOnAccTrans()
    {
        ProjOnAccTrans   tProjOnAccTrans;
        ProjInvoiceOnAcc tProjInvoiceOnAcc;

        select * from m_tTmpProgressInv
        where m_tTmpProgressInv.ProjId ==  pProjOnAccTrans.ProjID;

        if (m_tTmpProgressInv.RecId)
        {
            return null;
        }

        // if there exists an unposted OnAccTrans for progress invoice do not create a new one
        select firstonly TransId, psaProjProgressInvoice from tProjOnAccTrans
        where tProjOnAccTrans.ProjID == pProjOnAccTrans.ProjID
        &&    tProjOnAccTrans.psaProjProgressInvoice == NoYes::Yes
        notexists join TransId from tProjInvoiceOnAcc
            where tProjInvoiceOnAcc.TransId == tProjOnAccTrans.TransId;

        if (tProjOnAccTrans.RecId)
        {
            return null;
        }

        tProjOnAccTrans.initFromProjTable(pProjOnAccTrans.ProjID); // projId, currency, taxGroup
        tProjOnAccTrans.TransDate   = invoiceDate;
        tProjOnAccTrans.Description = "@PSA1283";
        tProjOnAccTrans.psaProjProgressInvoice = NoYes::Yes;
        tProjOnAccTrans.insert();

        m_tTmpProgressInv.ProjId    = pProjOnAccTrans.ProjID;
        m_tTmpProgressInv.ProjRecId = tProjOnAccTrans.RecId;
        m_tTmpProgressInv.insert();

        return tProjOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaInitProjProposalProj</Name>
				<Source><![CDATA[
    private void psaInitProjProposalProj(ProjProposalJour _rProjProposalJour, ProjFundingSourceRefId _projFundingRefId)
    {
        boolean isPreBillLoc;

        if (pProjOnAccTrans)
        {
            isPreBillLoc = pProjOnAccTrans.TransactionOrigin == ProjOrigin::Deduction ? true : false;
        }

        if (!ProjProposalJour::psaIsCTLNChecked(_rProjProposalJour.ProposalId))
        {
            select m_tProjProposalProj
            where m_tProjProposalProj.ProjId          == this.parmProjTable().ProjId
                && m_tProjProposalProj.ProjProposalId  == _rProjProposalJour.ProposalId
                && m_tProjProposalProj.IsPreBill       == isPreBillLoc;
        }
        else
        {
            select m_tProjProposalProj
            where m_tProjProposalProj.ProjProposalId  == _rProjProposalJour.ProposalId
                && m_tProjProposalProj.ContractLineNum == this.parmContLineNum()
                && m_tProjProposalProj.IsPreBill       == isPreBillLoc;
        }
        if (!m_tProjProposalProj)
        {
            m_tProjProposalProj.ProjId          = this.parmContLineNum() ? PSAContractLineItems::find(this.parmContLineNum()).FeeProjId :
                                                                    this.parmProjTable().ProjId;
            m_tProjProposalProj.ProjProposalId  = _rProjProposalJour.ProposalId;
            m_tProjProposalProj.ContractLineNum = this.parmContLineNum();
            m_tProjProposalProj.FundingSource   = _projFundingRefId;
            m_tProjProposalProj.IsPreBill       = isPreBillLoc;
            m_tProjProposalProj.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAisSelected</Name>
				<Source><![CDATA[
    boolean psAisSelected()
    {
        boolean bret = false;

        if (pProjRevenueTrans)
        {
            bret = retentionLineMap.exists(pProjRevenueTrans.RecId);
        }

        // Allow invoice proposal on PSATmpProjProposalSummary
        while select forupdate m_TmpProjProposalSummary
        where m_TmpProjProposalSummary.Selected == NoYes::Yes
            && (m_TmpProjProposalSummary.ContractLineNum == pProjRevenueTrans.psaContractLineNum
            || m_TmpProjProposalSummary.ContractLineNum == pProjOnAccTrans.psaContractLineNum
            || m_TmpProjProposalSummary.ContractLineNum == pProjEmplTrans.psaContractLineNum
            || m_TmpProjProposalSummary.ContractLineNum == pProjCostTrans.psaContractLineNum
            || m_TmpProjProposalSummary.ContractLineNum == pProjItemTrans.psaContractLineNum
            || m_TmpProjProposalSummary.ContractLineNum == pSalesLine.psaContractLineNum)
        {
            bret = true;
        }

        //For Prebill reconcillation transactions
        while select forupdate  m_TmpProjProposalTransPreBill
            where m_TmpProjProposalTransPreBill.RefTableId   == tableNum(ProjOnAccTrans)
            &&  m_TmpProjProposalTransPreBill.RefRecIdTrans == pProjOnAccTrans.RecId
            &&  m_TmpProjProposalTransPreBill.Selected == NoYes::Yes
        {
            bret = true;
            m_TmpProjProposalTransPreBill.delete();
        }

        while select forupdate  m_TmpProjProposalTrans
        where  ((m_TmpProjProposalTrans.RefTableId  == tableNum(ProjEmplTrans)
           &&  m_TmpProjProposalTrans.RefRecIdTrans == pProjEmplTrans.RecId)
           ||  (m_TmpProjProposalTrans.RefTableId   == tableNum(ProjRevenueTrans)
           &&  m_TmpProjProposalTrans.RefRecIdTrans == pProjRevenueTrans.RecId)
           ||  (m_TmpProjProposalTrans.RefTableId   == tableNum(ProjCostTrans)
           &&  m_TmpProjProposalTrans.RefRecIdTrans == pProjCostTrans.RecId)
           ||  (m_TmpProjProposalTrans.RefTableId   == tableNum(ProjItemTrans)
           &&  m_TmpProjProposalTrans.RefRecIdTrans == pProjItemTrans.RecId)
           ||  (m_TmpProjProposalTrans.RefTableId   == tableNum(ProjOnAccTrans)
           &&  m_TmpProjProposalTrans.RefRecIdTrans == pProjOnAccTrans.RecId)
           ||  (m_TmpProjProposalTrans.RefTableId   == tableNum(SalesLine)
           &&  m_TmpProjProposalTrans.RefRecIdTrans == pSalesLine.RecId))
           &&  (m_TmpProjProposalTrans.Selected == NoYes::Yes)

        {
            bret = true;
            this.retentionRelatedRecs(m_TmpProjProposalTrans.RefRecIdTrans, m_TmpProjProposalTrans.RefTableId);
            m_TmpProjProposalTrans.delete();
        }

        return bret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaParmQueryOnAcc</Name>
				<Source><![CDATA[
    public boolean psaParmQueryOnAcc(boolean _queryOnAcc = queryOnAcc)
    {
        queryOnAcc = _queryOnAcc;
        return queryOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaParmQuerySalesLine</Name>
				<Source><![CDATA[
    public boolean psaParmQuerySalesLine(boolean _querySalesLine = querySalesLine)
    {
        querySalesLine = _querySalesLine;
        return querySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaParmQueryValues</Name>
				<Source><![CDATA[
    protected void psaParmQueryValues(str _sProjInvoiceProjId, str _sProjId, TransDate _dFrom, TransDate _dTo)
    {
        m_sQueryProjInvoiceProjId   = _sProjInvoiceProjId;
        m_sQueryProjId              = _sProjId;
        fromDate                    = _dFrom;
        toDate                      = _dTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaParmSalesUpdate</Name>
				<Source><![CDATA[
    // Description    : Parm function for SalesUpdate member variable
// Parameters     : _eSalesUpdate: Sales update to be set
// Return value   : Sales update value
    SalesUpdate psaParmSalesUpdate(SalesUpdate _eSalesUpdate = salesUpdate)
    {
        salesUpdate = _eSalesUpdate;

        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaParmSkipQueryOffset</Name>
				<Source><![CDATA[
    public boolean psaParmSkipQueryOffset(boolean _bSkipQueryOffset = m_bSkipQueryOffset)
    {
        m_bSkipQueryOffset = _bSkipQueryOffset;
        return m_bSkipQueryOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public abstract QueryRun queryBuild()
    {
        //    return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromDate</Name>
				<Source><![CDATA[
    protected str queryFromDate()
    {
        return queryValue(fromDate ? fromDate : dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryToDate</Name>
				<Source><![CDATA[
    protected str queryToDate()
    {
        return queryValue(toDate ? toDate : dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeTransId</Name>
				<Source><![CDATA[
    public void rangeTransId(QueryBuildDataSource        dataSource)
    {
        ProjTrans               projTrans;
        Common                  commonTrans;
        List                    list;
        ListIterator            li;
        QueryBuildRange         queryRangeTransId;

        #localMacro.clearRange
    queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));

    while (queryRangeTransId)
    {
        dataSource.clearRange(fieldnum(%1,TransId));
        queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));
    }
#endMacro

        #localMacro.clearRangeItem
    queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));

    while (queryRangeTransId)
    {
        dataSource.clearRange(fieldnum(%1,projTransId));
        queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));
    }
#endMacro

        #localMacro.addRange
    li.begin();

    while (li.more())
    {
        commonTrans = li.value();
        projTrans   = ProjTrans::construct(commonTrans);

        if (projTrans.canBeInvoiced() && projTrans.tableId() == tableNum(%1))
        {
            dataSource.addRange(fieldnum(%1,TransId)).value(projTrans.transId());
        }

        li.next();
    }

    queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));
    if (! queryRangeTransId)
    {
            dataSource.addRange(fieldnum(%1,TransId)).value(sysQuery::valueEmptyString());
    }

#endMacro

        #localMacro.addRangeItem
    li.begin();

    while (li.more())
    {
        commonTrans = li.value();
        projTrans   = ProjTrans::construct(commonTrans);

        if (projTrans.canBeInvoiced() && projTrans.tableId() == tableNum(%1))
        {
            dataSource.addRange(fieldnum(%1,projTransId)).value(projTrans.transId());
        }

        li.next();
    }

    queryRangeTransId    = dataSource.findRange(fieldnum(%1,ProjTransId));
    if (! queryRangeTransId)
    {
            dataSource.addRange(fieldnum(%1,ProjTransId)).value(sysQuery::valueEmptyString());
    }
#endMacro

        // init list and list iterator
        if (this.parmTransIdList())
        {
            list    = List::create(this.parmTransIdList());
        }

        li = new ListIterator(list);

        switch (dataSource.table())
        {
            case (tableNum(ProjEmplTrans)):
                #clearRange(ProjEmplTrans)
                #addRange(ProjEmplTrans)
                break;

            case (tableNum(ProjCostTrans)):
                #clearRange(ProjCostTrans)
                #addRange(ProjCostTrans)
                break;

            case (tableNum(ProjItemTrans)):
                #clearRangeItem(ProjItemTrans)
                #addRangeItem(ProjItemTrans)
                break;

            case (tableNum(ProjRevenueTrans)):
                #clearRange(ProjRevenueTrans)
                #addRange(ProjRevenueTrans)
                break;

            case (tableNum(ProjOnAccTrans)):
                #clearRange(ProjOnAccTrans)
                #addRange(ProjOnAccTrans)
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPaymSchedule</Name>
				<Source><![CDATA[
    public void resetPaymSchedule()
    {
        CustPaymSched   custPaymSched;

        delete_from custPaymSched
        where custPaymSched.ExtTableId == tableNum(ProjProposalJour)
        &&    custPaymSched.ExtRecId   == pProjProposalJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retentionRelatedRecs</Name>
				<Source><![CDATA[
    public void retentionRelatedRecs(RecId _recId, TableId _tableId)
    {
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenue         projProposalRevenueLoc;
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalCost            projProposalCost;
        ProjProposalItem            projProposalItem;
        ProjProposalOnAcc           projProposalOnAcc;

        ProjEmplTrans               projEmplTrans;
        ProjCostTrans               projCostTrans;
        ProjItemTrans               projItemTrans;
        ProjOnAccTrans              projOnAccTrans;
        ProjRevenueTrans            projRevenueTrans;
        ProjRevenueTrans            projRevenueTransLoc;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjRevenueTransSale        projRevenueTransSaleLoc;

        void insertRetentionMap(ProjProposalId _proposalId, PSAContractLineNum _psaContractLineNum)
        {
            while select RecId from projProposalRevenueDetail
            join RecId, TransId from projRevenueTransSale
                where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                   && projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote
            join RecId from projProposalRevenueLoc
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenueLoc.RecId
                   && projProposalRevenueLoc.ProposalId == _proposalId
                   && projProposalRevenueLoc.psaContractLineNum == _psaContractLineNum
                   && (projProposalRevenueLoc.IsRetained == NoYes::Yes
                   || projProposalRevenueLoc.IsReleased == NoYes::Yes)
            {
                while select RecId from projRevenueTransSaleLoc
                join RecId from projRevenueTransLoc
                    where projRevenueTransLoc.TransId == projRevenueTransSaleLoc.TransId
                       && (projRevenueTransSaleLoc.psaRefREcId == projRevenueTransSale.RecId
                       || projRevenueTransSaleLoc.RecId == projRevenueTransSale.RecId)
                {
                    if (projRevenueTransLoc)
                    {
                        if (!retentionLineMap.exists(projRevenueTransLoc.RecId))
                        {
                            retentionLineMap.insert(projRevenueTransLoc.RecId, _recId);
                        }
                    }
                }
            }
        }

        if (_tableId == tableNum(ProjEmplTrans))
        {
            while select projProposalEmpl
            join projEmplTrans
                where projEmplTrans.TransId == projProposalEmpl.TransId
                   && projEmplTrans.RecId == _recId
            {
                if (projProposalEmpl)
                {
                    insertRetentionMap(projProposalEmpl.ProposalId, projProposalEmpl.psaContractLineNum);
                }
            }
        }

        if (_tableId == tableNum(ProjRevenueTrans))
        {
            while select projProposalRevenue
            join projRevenueTrans
                where projProposalRevenue.TransId == projRevenueTrans.TransId
                   && projRevenueTrans.RecId == _recId
            {
                if (projProposalRevenue)
                {
                    insertRetentionMap(projProposalRevenue.ProposalId, projProposalRevenue.psaContractLineNum);
                }
            }
        }

        if (_tableId == tableNum(ProjCostTrans))
        {
            while select projProposalCost
            join projCostTrans
            where projCostTrans.TransId == projProposalCost.TransId
               && projCostTrans.RecId == _recId
            {
                if (projProposalCost)
                {
                    insertRetentionMap(projProposalCost.ProposalId, projProposalCost.psaContractLineNum);
                }
            }
        }

        if (_tableId == tableNum(ProjItemTrans))
        {
            while select projProposalItem
            join projItemTrans
            where projItemTrans.ProjTransId == projProposalItem.ProjTransId
               && projItemTrans.RecId == _recId
            {
                if (projProposalItem)
                {
                    insertRetentionMap(projProposalItem.ProposalId, projProposalItem.psaContractLineNum);
                }
            }
        }

        if (_tableId == tableNum(ProjOnAccTrans))
        {
            while select projProposalOnAcc
            join projOnAccTrans
            where projOnAccTrans.TransId == projProposalOnAcc.TransId
               && projOnAccTrans.RecId == _recId
            {
                if (projProposalOnAcc)
                {
                    insertRetentionMap(projProposalOnAcc.ProposalId, projProposalOnAcc.psaContractLineNum);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retentionReversal</Name>
				<Source><![CDATA[
    public void retentionReversal(RecId _recId, ProjProposalId _proposalId = '', PSAContractLineNum _contractLineNum ='')
    {
        ProjRevenueTransSale        projRevenueTransSaleLoc;
        ProjRevenueTrans            projRevenueTrans;
        PSAProjProposalProj         projProposalProjLoc;

        if (_recId)
        {
            select projRevenueTrans
            join LineAmount,psaRetentionPercent from projRevenueTransSaleLoc
            where projRevenueTrans.TransId == projRevenueTransSaleLoc.TransId
                && (projRevenueTrans.IsRetained == NoYes::Yes
                || projRevenueTrans.IsReleased == NoYes::Yes)
                && projRevenueTransSaleLoc.RecId == _recId;

            if (projRevenueTrans)
            {
                select forupdate projProposalProjLoc
                where projProposalProjLoc.ProjProposalId == _proposalId;

                if (projProposalProjLoc)
                {
                    if (projRevenueTrans.IsReleased)
                    {
                        projProposalProjLoc.ReleasedAmount = projRevenueTransSaleLoc.LineAmount;
                    }
                    else
                    {
                        projProposalProjLoc.RetainedNow     = projRevenueTransSaleLoc.LineAmount;
                        projProposalProjLoc.RetainedPercent = projRevenueTransSaleLoc.psaRetentionPercent;
                    }
                    projProposalProjLoc.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        this.saveLast();
        // Build a new query based on the selection the user made....
        try
        {
            ttsbegin;

            this.progressInit("@SYS54552", progressTotal, #AviFormLetter);
            progress.setText("@SYS26577");
            retentionLineMap = new Map(Types::Int64, Types::Int64);

            this.processTransIdContainer();
            this.initQuery();

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.initProjInvoiceProposalSplit_BR();
            }
            // </GBR>

            this.processInvoiceProposals();

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.updateInvoiceTotal_BR();
            }
            else
            {
                // </GBR>
                this.updateInvoiceTotal();
                // <GBR>
            }
            // </GBR>

            // When an invoice proposal is generated, the system will
            // automatically create retainage withholding records and/or retainage billing records at the project level.
            this.doRetention();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            // Update has been canceled.
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoiceProposals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the invoice proposals.
    /// </summary>
    protected void processInvoiceProposals()
    {
        while (queryRun.next())
        {
            this.assignTables();

            //check permissions if we need to create an invoice
            //don't worry about it if updating
            if (this.createProposal() && !pProjTable.status().checkRule(ProjStatusRule::CreateInvoiceProposal))
            {
                //only display the warning once, avoid flooding the log with the same message
                if (queryRun.changed(tableNum(ProjTable)))
                {
                    warning(strFmt("@SYS113136", pProjTable.ProjId, pProjTable.Type, pProjTable.Stage()));
                }
                continue;
            }

            if (this.mustDoProposal())
            {
                this.doProposal();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the proposal must be invoiced.
    /// </summary>
    /// <returns>true if the proposal must be invoice; otherwise, false.</returns>
    protected boolean mustDoProposal()
    {
        return (!m_bUseTmpProjProjProposal || 
                    (m_bUseTmpProjProjProposal && this.psAisSelected()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>tmpProjProposalJour</c> record.
    /// </summary>
    /// <param name="_projFundingRefId">
    ///     Project funding record ID.
    /// </param>
    /// <param name="_taxGroup">
    ///     Tax group
    /// </param>
    /// <param name="_currencyId">
    ///     Currency code
    /// </param>
    protected void getTempProjProposalJour(ProjFundingSourceRefId _projFundingRefId,
                                            TaxGroup  _taxGroup,
                                            CurrencyCode _currencyId)
    {
        select firstonly tmpProjProposalJour
            where tmpProjProposalJour.ProjInvoiceProjId   == this.parmProjTable().ProjInvoiceProjId
               && tmpProjProposalJour.FundingSource       == _projFundingRefId
               && tmpProjProposalJour.TaxGroupId          == _taxGroup
               && tmpProjProposalJour.CurrencyId          == _currencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalJourCreateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProjProposalJourCreateParameters</c> class.
    /// </summary>
    /// <param name = "_projTable">
    /// An instance of <c>ProjTable</c> record.
    /// </param>
    /// <param name = "_projInvoiceType">
    /// A <c>ProjInvoiceType</c> value.
    /// </param>
    /// <param name = "_currencyId">
    /// A <c>CurrencyCode</c> value.
    /// </param>
    /// <param name = "_projFundingSourceRefId">
    /// A <c>ProjFundingSourceRefId</c> value.
    /// </param>
    /// <param name = "_invoiceDate">
    /// An <c>InvoiceDate</c> value.
    /// </param>
    /// <param name = "_interCompanyPosted">
    /// An <c>InterCompanyPosted</c> value.
    /// </param>
    /// <param name = "_psaInvoiceMethod">
    /// A <c>PSAInvoiceMethod</c> value.
    /// </param>
    /// <param name = "_taxPeriodPaymentCode">
    /// A <c>PlTaxPeriodPaymentCode</c> value.
    /// </param>
    /// <param name = "_defaultDimension">
    /// A <c>DimensionDefault</c> value.
    /// </param>
    /// <param name = "_exchRate">
    /// An <c>ExchRate</c> value.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalJourCreateParameters</c> instance.
    /// </returns>
    protected ProjProposalJourCreateParameters createProjProposalJourCreateParameters(
        ProjTable                 _projTable,
        ProjInvoiceType           _projInvoiceType,
        CurrencyCode              _currencyId               = '',
        ProjFundingSourceRefId    _projFundingSourceRefId   = 0,
        InvoiceDate               _invoiceDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InterCompanyPosted        _interCompanyPosted       = false,
        PSAInvoiceMethod          _psaInvoiceMethod         = PSAInvoiceMethod::Progress,
        PlTaxPeriodPaymentCode    _taxPeriodPaymentCode     = '',
        DimensionDefault          _defaultDimension         = 0,
        ExchRate                  _exchRate                 = 0)
    {
        return ProjProposalJourCreateParameters::construct(
                    _projInvoiceType,
                    _currencyId,
                    _projFundingSourceRefId,
                    _invoiceDate,
                    _interCompanyPosted,
                    _psaInvoiceMethod,
                    _taxPeriodPaymentCode,
                    _defaultDimension,
                    _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     setting the <c>tmpProjProposalJour</c> to the list
    /// </summary>
    /// <param name = "_projFundingRefId">
    ///      Project fundiong recId
    /// </param>
    /// <param name="_taxGroup">
    ///     Tax group
    /// </param>
    /// <param name="_currencyId">
    ///     Currency code
    /// </param>
    /// <param name="_sBillTo">
    ///     Contract to bill to
    /// </param>
    /// <param name="defaultDimension">
    ///     Default ledger dimension
    /// </param>
    public void setProjProposalJour(ProjFundingSourceRefId _projFundingRefId,
                                TaxGroup  _taxGroup,
                                CurrencyCode _currencyId,
                                ProjInvoiceProjId _sBillTo = '',
                                DimensionDefault defaultDimension = 0)
    {
        ProjProposalJour rProjProposalJour;
        boolean             isPreBillLoc;

        if (! this.createProposal())
        {
            return;
        }

        this.getTempProjProposalJour(_projFundingRefId, _taxGroup, _currencyId);

        if (tmpProjProposalJour)
        {
            select rProjProposalJour
            where rProjProposalJour.RecId == tmpProjProposalJour.RefProjProposalJour;
        }
        else
        {
            if (updateProposal && pProjProposalJour)
            {
                rProjProposalJour = pProjProposalJour;
            }

            else if (updateProposal && pProjProposalJour)
            {
                rProjProposalJour = pProjProposalJour;
            }
            else
            {
                // <GEEPL>
                /*
            // </GEEPL>
            rProjProposalJour = this.parmProjInvoiceTable().createProposalJour(projInvoiceType,_currencyId, _projFundingRefId, invoiceDate, this.interCompanyPosted());
            // <GEEPL>
            */
            rProjProposalJour = this.parmProjInvoiceTable().createProposalJourFromParameters(
                    this.createProjProposalJourCreateParameters(this.parmProjTable(), projInvoiceType,_currencyId, _projFundingRefId, invoiceDate, this.interCompanyPosted(), PSAInvoiceMethod::Progress, taxPeriodPaymentCode));
                // </GEEPL>

                tmpProjProposalJour.DiscPercent             = enddiscPercent;
                tmpProjProposalJour.ProjInvoiceProjId       = this.parmProjInvoiceTable().ProjInvoiceProjId;
                tmpProjProposalJour.FundingSource           = _projFundingRefId;
                tmpProjProposalJour.TaxGroupId              = _taxGroup;
                tmpProjProposalJour.CurrencyId              = _currencyId;
                tmpProjProposalJour.RefProjProposalJour     = rProjProposalJour.RecId;
                tmpProjProposalJour.insert();
                proposalIdList.addEnd(rProjProposalJour.ProposalId);
            }

            projRevenueProposalList.addEnd(rProjProposalJour.ProposalId);
        }

        if (pProjOnAccTrans)
        {
            isPreBillLoc = pProjOnAccTrans.TransactionOrigin == ProjOrigin::Deduction ? true : false;
        }

        if (!ProjProposalJour::psaIsCTLNChecked(rProjProposalJour.ProposalId))
        {
            select m_tProjProposalProj
            where m_tProjProposalProj.ProjId          == this.parmProjTable().ProjId
                && m_tProjProposalProj.ProjProposalId  == rProjProposalJour.ProposalId
                && m_tProjProposalProj.IsPreBill       == isPreBillLoc;
        }
        else
        {
            select m_tProjProposalProj
            where m_tProjProposalProj.ProjProposalId  == rProjProposalJour.ProposalId
                && m_tProjProposalProj.ContractLineNum == this.parmContLineNum()
                && m_tProjProposalProj.IsPreBill       == isPreBillLoc;
        }

        if (!m_tProjProposalProj)
        {
            m_tProjProposalProj.ProjId          = this.parmContLineNum() ? PSAContractLineItems::find(this.parmContLineNum()).FeeProjId :
                                                                   this.parmProjTable().ProjId;
            m_tProjProposalProj.ProjProposalId  = rProjProposalJour.ProposalId;
            m_tProjProposalProj.ContractLineNum = this.parmContLineNum();
            m_tProjProposalProj.FundingSource   = _projFundingRefId;
            m_tProjProposalProj.IsPreBill       = isPreBillLoc;
            m_tProjProposalProj.insert();
        }

        this.parmProjProposalJour(rProjProposalJour);

        // Add end date to rProjProposalJour
        if (rProjProposalJour.ProposalId && pProjInvoiceTable.psaContractLines == NoYes::Yes)
        {
            this.psaAddEndDateToProposalJour();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalJour_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>ProjProposalJour</c> records
    /// </summary>
    /// <param name="_projProposalTransMap">
    ///     Table map of project transactions
    /// </param>
    /// <param name="_currencyCode">
    ///     Currency code
    /// </param>
    /// <param name="_projFundingRefId">
    ///     Project fundiong recId
    /// </param>
    /// <param name="_taxGroup">
    ///     Tax group
    /// </param>
    /// <param name="_sBillTo">
    ///     Contract to bill to
    /// </param>
    /// <param name="_defaultDimension">
    ///     Default ledger dimension
    /// </param>
    /// <param name="_serviceCodeId">
    ///     Service code id
    /// </param>

    protected void setProjProposalJour_BR(ProjProposalTransMap_BR _projProposalTransMap,
                                   CurrencyCode            _currencyCode,
                                   ProjFundingSourceRefId  _projFundingRefId,
                                   TaxGroup                _taxGroup,
                                   ProjInvoiceProjId       _sBillTo = '',
                                   DimensionDefault        _defaultDimension = 0,
                                   TaxServiceCodeId_BR     _serviceCodeId = '')
    {
        ProjProposalJour rProjProposalJour;

        if (! this.createProposal())
        {
            return;
        }

        projInvoiceProposalSplit_BR.parmInvoiceDate(invoiceDate);
        projInvoiceProposalSplit_BR.interCompanyPosted(this.interCompanyPosted());
        projInvoiceProposalSplit_BR.parmEndDiscPercent(enddiscPercent);

        projInvoiceProposalSplit_BR.parmProjInvoiceTable(pProjInvoiceTable);

        rProjProposalJour = projInvoiceProposalSplit_BR.doSplit(_projProposalTransMap, _currencyCode, _projFundingRefId, _taxGroup, _sBillTo, _defaultDimension);

        projRevenueProposalList.addEnd(rProjProposalJour.ProposalId);
        this.psaInitProjProposalProj(rProjProposalJour, _projFundingRefId);

        this.parmProjProposalJour(rProjProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRange</Name>
				<Source><![CDATA[
    protected void setQueryRange()
    {
        QueryBuildRange     queryRangeProjInvoiceProjId;
        QueryBuildRange     queryRangeProjId;
        ProjId              escapedProjId;
        #DEFINE.asterisk("*")

        if (queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable)).findRange(fieldNum(ProjInvoiceTable,ProjInvoiceProjId)))
        {
            queryRangeProjInvoiceProjId = queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable)).rangeField(fieldNum(ProjInvoiceTable,ProjInvoiceProjId));
            if (projInvoiceProjId)
            {
                queryRangeProjInvoiceProjId.value(SysQuery::value(projInvoiceProjId));
            }
            else
            {
                queryRangeProjInvoiceProjId.value(SysQuery::valueUnlimited());
            }
        }
        if (queryRun.query().dataSourceTable(tableNum(ProjTable)).findRange(fieldNum(ProjTable,ProjId)))
        {
            queryRangeProjId    = queryRun.query().dataSourceTable(tableNum(ProjTable)).rangeField(fieldNum(ProjTable,ProjId));
            if (!projId)
            {
                queryRangeProjId.value(SysQuery::valueUnlimited());
            }
            else if (strFind(projId, #asterisk, 1, strLen(projId)) == strLen(projId))
            {
                escapedProjId = subStr(projId, 1, strLen(projId) -1 );
                escapedProjId = SysQuery::value(escapedProjId);
                projId = strFmt('%1*', escapedProjId);
                queryRangeProjId.value(projId);
            }
            else
            {
                if (ProjTable::existsSubProject(projId + '*'))
                {
                    queryRangeProjId.value(SysQuery::valueLikeAfter(projId));
                }
                else
                {
                    queryRangeProjId.value(SysQuery::value(projId));
                }
            }
        }

        // Invoice proposal selection ranges
        if (m_sQueryCustAccount)
        {
            queryRun.query().dataSourceTable(tableNum(ProjFundingSource)).addRange(fieldNum(ProjFundingSource, CustAccount)).value(m_sQueryCustAccount);
        }

        if (m_sQueryProjInvoiceProjId)
        {
            queryRangeProjInvoiceProjId.value(m_sQueryProjInvoiceProjId);
        }

        if (m_sQueryProjId)
        {
            queryRangeProjId.value(m_sQueryProjId);
        }

        if (m_sQueryEmplId)
        {
            queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,WorkerResponsible)).value(m_sQueryEmplId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;

        // <GEEPL>
        #define.CurrentVersionV15(15)
        #localmacro.CurrentListV15
        queryEmpl,
        queryCost,
        queryRevenue,
        queryItem,
        queryOnAcc,
        querySalesLine,
        SalesUpdate,
        FromDate,
        ToDate,
        InvoiceDate,
        projInvoiceProjId,
        projId,
        queryInvoiceType,
        querySubscription,
        projTransIdList,
        calledFromTrans
     #endmacro
        // </GEEPL>

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;
            // <GEEPL>
            case #CurrentVersionV15:
                [version, #CurrentListV15, packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;
            // </GEEPL>

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the customer is blocked.
    /// </summary>
    /// <param name = "_custAccount">The current customer account.</param>
    /// <returns>true if the customer is blocked; otherwise, false.</returns>
    protected boolean isCustomerBlocked(CustAccount _custAccount)
    {
        return CustTable::blocked(_custAccount) != CustVendorBlocked::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalTotalsParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ProjProposalTotalsParameters</c>.
    /// </summary>
    /// <param name = "_projProposalJour">
    /// A <c>ProjProposalJour</c> record buffer.
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjProposalTotalsParameters</c> class.
    /// </returns>
    protected ProjProposalTotalsParameters createProjProposalTotalsParameters(ProjProposalJour _projProposalJour)
    {
        return ProjProposalTotalsParameters::construct(_projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the project invoice proposal totals and opens up the project invoice proposal details form with info of credit note or invoice proposal creation if the customer is not blocked; otherwise, cancels the project invoice proposal.
    /// </summary>
    protected void initFromTmpProjProposalJour()
    {
        select forupdate pProjProposalJour
            where pProjProposalJour.RecId == tmpProjProposalJour.RefProjProposalJour;

        if (pProjProposalJour)
        {
            if (!this.isCustomerBlocked(pProjProposalJour.InvoiceAccount))
            {
                progress.setText("@SYS8311");

                pProjProposalJour.DiscPercent = tmpProjProposalJour.DiscPercent;
                ProjInvoiceProposalInsertLines::setProjProposalTotalsFromParameters(
                    this.createProjProposalTotalsParameters(this.parmProjProposalJour()));
                if (this.parmShowMessages())
                {
                    SysInfoAction_Formrun infoAction = SysInfoAction_Formrun::newFormname(formstr(ProjInvoiceProposalDetail));
                    infoAction.parmCallerBuffer(pProjProposalJour);
                    if (pProjProposalJour.InvoiceAmount < 0)
                    {
                        info(strFmt("@SYS91513",pProjProposalJour.ProposalId,pProjProposalJour.ProjInvoiceProjId, pProjProposalJour.CurrencyId), '', infoAction);
                    }
                    else
                    {
                        info(strFmt("@SYS66077",pProjProposalJour.ProposalId,pProjProposalJour.ProjInvoiceProjId, pProjProposalJour.CurrencyId), '', infoAction);
                    }
                }
            }
            else
            {
                if (this.parmShowMessages())
                {
                    info(strFmt("@SYS66078", pProjProposalJour.ProposalId,
                                             pProjProposalJour.ProjInvoiceProjId,
                                             pProjProposalJour.CurrencyId,
                                             pProjProposalJour.InvoiceAccount));

                    isInvoiceProposalCreated = false;
                }
                pProjProposalJour.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the customer invoice with invoice proposal as a reference, errors if customer invoice is not found; otherwise, updates the customer invoice totals.
    /// </summary>
    protected void updateInvoiceTotal()
    {

        if (pProjProposalJour)
        {
            select firstonly tmpProjProposalJour where tmpProjProposalJour.RefProjProposalJour == pProjProposalJour.RecId;

            if (!tmpProjProposalJour)
            {
                tmpProjProposalJour.data(pProjProposalJour);
                tmpProjProposalJour.RefProjProposalJour = pProjProposalJour.RecId;
                tmpProjProposalJour.insert();
            }
        }

        if (this.createProposal())
        {
            if (this.parmShowMessages())
            {
                select firstonly tmpProjProposalJour;

                if (! tmpProjProposalJour)
                {
                    info("@SYS66026");
                    isInvoiceProposalCreated = false;
                }
            }
        }
        else
        {
            pProjProposalJour.DueDate        = dateNull();
            pProjProposalJour.CashDiscDate   = dateNull();
            pProjProposalJour.InvoiceDate    = invoiceDate;
            ProjInvoiceProposalInsertLines::setProjProposalTotalsFromParameters(
                this.createProjProposalTotalsParameters(this.parmProjProposalJour()));
            this.resetPaymSchedule();
        }

        while select tmpProjProposalJour
        order by ProjInvoiceProjId
        {
            this.initFromTmpProjProposalJour();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTotal_BR</Name>
				<Source><![CDATA[
    private void updateInvoiceTotal_BR()
    {
        boolean more;
        RecordSortedList proposalJourList;

        if (this.createProposal())
        {
            if (! projInvoiceProposalSplit_BR.isProposalJourCreated())
            {
                info("@SYS66026");
            }
        }
        else
        {
            pProjProposalJour.DueDate        = dateNull();
            pProjProposalJour.CashDiscDate   = dateNull();
            pProjProposalJour.InvoiceDate    = invoiceDate;
            ProjInvoiceProposalInsertLines::setProjProposalTotalsFromParameters(
                ProjProposalTotalsParameters::construct(this.parmProjProposalJour()));
            this.resetPaymSchedule();
        }

        proposalJourList = projInvoiceProposalSplit_BR.getProjProposalJourList();

        for (more = proposalJourList.first(pProjProposalJour);
        more;
        more = proposalJourList.next(pProjProposalJour))
        {
            if (!this.isCustomerBlocked(pProjProposalJour.InvoiceAccount))
            {
                progress.setText("@SYS8311");

                ProjInvoiceProposalInsertLines::setProjProposalTotalsFromParameters(
                    ProjProposalTotalsParameters::construct(this.parmProjProposalJour()));

                if (pProjProposalJour.InvoiceAmount < 0)
                {
                    info(strFmt("@SYS91513",pProjProposalJour.ProposalId,pProjProposalJour.ProjInvoiceProjId, pProjProposalJour.CurrencyId));
                }
                else
                {
                    info(strFmt("@SYS66077",pProjProposalJour.ProposalId,pProjProposalJour.ProjInvoiceProjId, pProjProposalJour.CurrencyId));
                }
            }
            else
            {
                info(strFmt("@SYS66078", pProjProposalJour.ProposalId,
                                     pProjProposalJour.ProjInvoiceProjId,
                                     pProjProposalJour.CurrencyId,
                                     pProjProposalJour.InvoiceAccount));
                pProjProposalJour.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetainage</Name>
				<Source><![CDATA[
    private void updateRetainage(ProjProposalId _projProposalId)
    {
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        PSAProjProposalProj         projProposalProjLoc;

        select RecId, ProposalId, psaContractLineNum, IsReleased from projProposalRevenue
        where projProposalRevenue.ProposalId == _projProposalId;

        if (projProposalRevenue)
        {
            select forupdate RecId, ProjId,ProjProposalId, ContractLineNum from projProposalProjLoc
            where projProposalProjLoc.ProjProposalId == _projProposalId;

            if (projProposalProjLoc)
            {
                select sum(AmountCur) from projProposalRevenueDetail
                exists join projProposalRevenue
                    where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                        && projProposalRevenue.ProposalId == projProposalProjLoc.ProjProposalId
                        && projProposalRevenue.psaContractLineNum == projProposalProjLoc.ContractLineNum
                        && projProposalRevenue.IsReleased == NoYes::Yes;

                if (projProposalRevenueDetail)
                {
                    projProposalProjLoc.ReleasedAmount   = projProposalRevenueDetail.AmountCur;
                    projProposalProjLoc.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (fromDate > toDate && toDate)
        {
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceChooseCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the new <c>ProjInvoiceChoose</c> instance.
    /// </summary>
    /// <param name = "_projChoose">
    /// A <c>ProjChoose</c> enumeration value.
    /// </param>
    /// <param name = "_projProposalJour">
    /// A <c>ProjProposalJour</c> record.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide the new <c>ProjInvoiceChoose</c> instance.
    /// </param>
    static delegate void projInvoiceChooseCreating(ProjChoose _projChoose, ProjProposalJour _projProposalJour, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ProjInvoiceChoose construct(ProjChoose _projChoose, ProjProposalJour _projProposalJour = null)
    {
        ProjInvoiceChoose   projInvoiceChoose;

        switch (_projChoose)
        {
            case ProjChoose::CreateProposalOnAccount:
                projInvoiceChoose = new ProjInvoiceChooseOnAcc(_projProposalJour);
                break;

            case ProjChoose::CreateProposalNormal:
                projInvoiceChoose = new ProjInvoiceChooseNormal(_projProposalJour);
                break;

            case ProjChoose::UpdateProposal:
                switch (_projProposalJour.InvoiceType)
                    {
                        case ProjInvoiceType::Invoice:
                            projInvoiceChoose = new ProjInvoiceChooseNormalUpdate(_projProposalJour);
                            projInvoiceChoose.parmCurrencyId(_projProposalJour.CurrencyId);
                            break;

                        case ProjInvoiceType::OnAccount:
                            projInvoiceChoose = new ProjInvoiceChooseOnAccUpdate(_projProposalJour);
                            projInvoiceChoose.parmCurrencyId(_projProposalJour.CurrencyId);
                            break;

                        default:
                            throw error("@SYS50049");
                    }
                    break;

            default:
                var eventHandlerResult = new EventHandlerResult();
                ProjInvoiceChoose::projInvoiceChooseCreating(_projChoose, _projProposalJour, eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    projInvoiceChoose = eventHandlerResult.result();
                }
                else
                {
                    throw error("@SYS50049");
                }
        }

        return projInvoiceChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransIdList</Name>
				<Source><![CDATA[
    public static List createTransIdList(Args     args)
    {
        List                transIdList;

        FormDataSource      formDataSource;
        ProjCostTrans       projCostTrans;
        ProjEmplTrans       projEmplTrans;
        ProjItemTrans       projItemTrans;
        ProjOnAccTrans      projOnAccTrans;
        ProjRevenueTrans    projRevenueTrans;

        ProjEmplTransSale       projEmplTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjItemTransSale       projItemTransSale;

        SMAServiceOrderTable    smaServiceOrderTable;
        SMAServiceOrderLine     smaServiceOrderLine;
        SalesLine               salesLine;

        ProjPostTransView       dataSourceRecord;
        Args                    callerArgs;


        transIdList     = new List(Types::Record);

        if (args.caller())
        {
            callerArgs = args.caller().args();
        }

        if (callerArgs          &&
        callerArgs.caller() &&
       (callerArgs.caller().name() == formStr(projProjectTransactionsListPage) ||
        callerArgs.caller().name() == formStr(ProjGrantTransListPage)))
        {
            formDataSource = callerArgs.caller().datasource(1);

            for (dataSourceRecord = formDataSource.getFirst(true) ?
                formDataSource.getFirst(true) : formDataSource.cursor();
            dataSourceRecord; dataSourceRecord = formDataSource.getNext())
            {
                switch (dataSourceRecord.ProjTransType)
                {
                    case ProjTransType::Item:
                        projItemTrans = ProjItemTrans::find(dataSourceRecord.TransId);
                        transIdList.addEnd(projItemTrans);
                        break;

                    case ProjTransType::Hour:
                        projEmplTrans = ProjEmplTrans::find(dataSourceRecord.TransId);
                        transIdList.addEnd(projEmplTrans);
                        break;

                    case ProjTransType::Cost:
                        projCostTrans = ProjCostTrans::find(dataSourceRecord.TransId);
                        transIdList.addEnd(projCostTrans);
                        break;

                    case ProjTransType::Revenue:
                        projRevenueTrans = ProjRevenueTrans::find(dataSourceRecord.TransId);
                        transIdList.addEnd(projRevenueTrans);
                        break;

                    case ProjTransType::OnAccount:
                        projOnAccTrans = ProjOnAccTrans::find(dataSourceRecord.TransId);
                        transIdList.addEnd(projOnAccTrans);
                        break;
                }
            }
        }
        else
        {
            formDataSource  = FormDataUtil::getFormDataSource(args.record());

            switch (args.dataset())
            {
                case tableNum(ProjCostTrans):
                    projCostTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projCostTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projCostTrans; projCostTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projCostTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projCostTrans);
                    }
                    break;

                case tableNum(ProjEmplTrans):
                    projEmplTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projEmplTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projEmplTrans; projEmplTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projEmplTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projEmplTrans);
                    }
                    break;

                case tableNum(ProjItemTrans):
                    projItemTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projItemTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projItemTrans; projItemTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projItemTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projItemTrans);
                    }
                    break;

                case tableNum(ProjOnAccTrans):
                    projOnAccTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projOnAccTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projOnAccTrans; projOnAccTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projOnAccTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projOnAccTrans);
                    }
                    break;

                case tableNum(ProjRevenueTrans):
                    projRevenueTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projRevenueTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projRevenueTrans; projRevenueTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projRevenueTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projRevenueTrans);
                    }
                    break;

                case tableNum(SMAServiceOrderTable):
                    smaServiceOrderTable = args.record();

                    while select ProjTransId, TransactionType from smaServiceOrderLine
                    where smaServiceOrderLine.ServiceOrderId     == smaServiceOrderTable.ServiceOrderId &&
                          smaServiceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Posted
                    {
                        switch (smaServiceOrderLine.TransactionType)
                        {
                            case SMATransactionType::Hour      :
                            select TransStatus from projEmplTransSale
                                where projEmplTransSale.TransId == smaServiceOrderLine.ProjTransId;

                                if (projEmplTransSale && projEmplTransSale.TransStatus == ProjTransStatus::Adjusted)
                                {
                                    transIdList.appendList(ProjInvoiceChoose::createTransListOnProjAdjustment(smaServiceOrderLine.TransactionType, smaServiceOrderLine.ProjTransId));
                                }

                                if (projEmplTransSale && projEmplTransSale.TransStatus != ProjTransStatus::Adjusted)
                                {
                                    transIdList.addEnd(ProjEmplTrans::find(smaServiceOrderLine.ProjTransId));
                                }
                                break;

                            case SMATransactionType::Expense   :
                            select TransStatus from projCostTransSale
                                where projCostTransSale.TransId == smaServiceOrderLine.ProjTransId;

                                if (projCostTransSale && projCostTransSale.TransStatus == ProjTransStatus::Adjusted)
                                {
                                    transIdList.appendList(ProjInvoiceChoose::createTransListOnProjAdjustment(smaServiceOrderLine.TransactionType, smaServiceOrderLine.ProjTransId));
                                }

                                if (projCostTransSale && projCostTransSale.TransStatus != ProjTransStatus::Adjusted)
                                {
                                    transIdList.addEnd(ProjCostTrans::find(smaServiceOrderLine.ProjTransId));
                                }
                                break;

                            case SMATransactionType::Fee       :
                            select TransStatus from projRevenueTransSale
                                where projRevenueTransSale.TransId == smaServiceOrderLine.ProjTransId;

                                if (projRevenueTransSale && projRevenueTransSale.TransStatus == ProjTransStatus::Adjusted)
                                {
                                    transIdList.appendList(ProjInvoiceChoose::createTransListOnProjAdjustment(smaServiceOrderLine.TransactionType, smaServiceOrderLine.ProjTransId));
                                }

                                if (projRevenueTransSale && projRevenueTransSale.TransStatus != ProjTransStatus::Adjusted)
                                {
                                    transIdList.addEnd(ProjRevenueTrans::find(smaServiceOrderLine.ProjTransId));
                                }
                                break;

                            case SMATransactionType::Item      :
                            select TransStatus from projItemTransSale
                                where projItemTransSale.ProjTransId == smaServiceOrderLine.ProjTransId;

                                if (projItemTransSale && projItemTransSale.TransStatus == ProjTransStatus::Adjusted)
                                {
                                    transIdList.appendList(ProjInvoiceChoose::createTransListOnProjAdjustment(smaServiceOrderLine.TransactionType, smaServiceOrderLine.ProjTransId));
                                }

                                if (projItemTransSale && projItemTransSale.TransStatus != ProjTransStatus::Adjusted)
                                {
                                    transIdList.addEnd(ProjItemTrans::find(smaServiceOrderLine.ProjTransId));
                                }
                                break;
                        }
                    }

                    //checking to find if any saleslines are related and ready to be invoiced
                    while select RecId from salesLine
                    where salesLine.SalesType      == SalesType::ItemReq &&
                          salesLine.ProjId         == smaServiceOrderTable.ProjId &&
                          salesLine.ServiceOrderId == smaServiceOrderTable.ServiceOrderId &&
                          salesLine.SalesStatus    == SalesStatus::Invoiced
                     join projItemTrans
                         where projItemTrans.ProjTransId == salesLine.ProjTransId
                     join TransStatus from projItemTransSale
                         where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                    {
                        if (projItemTransSale.TransStatus == ProjTransStatus::Adjusted)
                        {
                            transIdList.appendList(ProjInvoiceChoose::createTransListOnProjAdjustment(SMATransactionType::Item,
                                                                                                      projItemTrans.ProjTransId));
                        }
                        else
                        {
                            transIdList.addEnd(projItemTrans);
                        }
                    }
            }
        }

        return transIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListOnProjAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list that will contain new created project transaction after adjustment.
    /// </summary>
    /// <param name="_smaTransactionType">
    /// An enumeration value that represents transaction type in service management.
    /// </param>
    /// <param name="_projTransId">
    /// A string represents project transaction ID.
    /// </param>
    /// <returns>
    /// A list that contains project transactions which are created after adjustment.
    /// </returns>
    public static List createTransListOnProjAdjustment(SMATransactionType  _smaTransactionType,
                                            ProjTransIdBase     _projTransId)
    {
        List                    transIdList;
        ProjCostTrans           projCostTrans;
        ProjEmplTrans           projEmplTrans;
        ProjItemTrans           projItemTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjItemTransSale       projItemTransSale;

        transIdList = new List(Types::Record);

        switch (_smaTransactionType)
        {
            case SMATransactionType::Hour       :
            while select projEmplTrans
                where       projEmplTrans.TransIdRef      == _projTransId
                exists join projEmplTransSale
                    where   projEmplTrans.TransId         == projEmplTransSale.TransId
                        && (projEmplTransSale.TransStatus == ProjTransStatus::Posted
                        ||  projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    transIdList.addEnd(projEmplTrans);
                }
                break;

            case SMATransactionType::Expense    :
            while select projCostTrans
                where       projCostTrans.TransIdRef      == _projTransId
                exists join projCostTransSale
                    where   projCostTrans.TransId         == projCostTransSale.TransId
                        && (projCostTransSale.TransStatus == ProjTransStatus::Posted
                        ||  projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    transIdList.addEnd(projCostTrans);
                }
                break;

            case SMATransactionType::Fee        :
            while select projRevenueTrans
                where       projRevenueTrans.TransIdRef      == _projTransId
                exists join projRevenueTransSale
                    where   projRevenueTrans.TransId         == projRevenueTransSale.TransId
                        && (projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                        ||  projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    transIdList.addEnd(projRevenueTrans);
                }
                break;

            case SMATransactionType::Item       :
            while select projItemTrans
                where       projItemTrans.ProjTransIdRef  == _projTransId
                exists join projItemTransSale
                    where   projItemTrans.ProjTransId     == projItemTransSale.ProjTransId
                        && (projItemTransSale.TransStatus == ProjTransStatus::Posted
                        ||  projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    transIdList.addEnd(projItemTrans);
                }
                break;
        }

        return transIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return strFmt("@SYS18885",funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ProjInvoiceProjId       projInvoiceProjId;
        ProjId                  projId;
        ProjChoose              projChoose;

        ProjProposalJour        projProposalJour;
        ProjInvoiceChoose       projInvoiceChoose;

        PSAContractLineNum      contractLineNum = '';

        if (ProjInvoiceChoose::mustInitializeVariablesFromCallerForm(args))
        {
            projInvoiceProjId   = args.caller().projInvoiceProjId();
            projId              = args.caller().projId();
            contractLineNum     = args.caller().contractLineNum();
        }

        projChoose  = args.parmEnum();

        if (projChoose == ProjChoose::UpdateProposal)
        {
            if (args.record().TableId == tableNum(ProjProposalJour))
            {
                projProposalJour = args.record();
            }
        }
        projInvoiceChoose   = ProjInvoiceChoose::new_InvoiceChoose(projChoose,projInvoiceProjId,projId,projProposalJour, true, contractLineNum);

        projInvoiceChoose.initializeFromArgs(args);

        if (projInvoiceChoose.prompt())
        {
            projInvoiceChoose.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjInvoiceChoose</c> instance.
    /// </summary>
    /// <param name = "_args">
    /// <c>Args</c> instance.
    /// </param>
    protected void initializeFromArgs(Args _args)
    {
        List                    transIdList;      
        // <GEEPL>
        ProjInvoiceTable        projInvoiceTable;
        // </GEEPL>
        
        if (_args.caller() && _args.caller().callerDataRecord())
        {
            Args argsTrans = new Args();

            argsTrans.caller(_args.caller());
            argsTrans.record(_args.caller().callerDataRecord());
            transIdList = ProjInvoiceChoose::createTransIdList(argsTrans);
        }
        
        if (transIdList && transIdList.elements())
        {
            this.parmTransIdList(transIdList.pack());
            this.parmCalledFromTrans(true);
        }

        if (_args.caller() && _args.caller().calledFromInvControl())
        {
            this.parmQueryCostTrans(_args.caller().projTransTypeCost());
            this.parmQueryEmplTrans(_args.caller().projTransTypeEmpl());
            this.parmQueryItemTrans(_args.caller().projTransTypeItem());
            this.parmQueryRevenueTrans(_args.caller().projTransTypeRevenue());
            this.parmQuerySubscriptionTrans(_args.caller().projTransTypeSubscription());
            this.parmQueryOnAccTrans(_args.caller().projTransTypeOnAcc());
            this.parmQuerySalesLine(_args.caller().projTransTypeSales());
            this.parmFromDate(_args.caller().fromDate());
            this.parmToDate(_args.caller().toDate());
            if (_args.caller().toDate())
            {
                this.parmInvoiceDate(_args.caller().toDate());
            }
            else
            {
                this.parmInvoiceDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) &&
            _args.caller() && _args.caller().projInvoiceTable())
        {
            projInvoiceTable = _args.caller().projInvoiceTable();
            this.parmTaxPeriodPaymentCode_PL(projInvoiceTable.TaxPeriodPaymentCode_PL);
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInitializeVariablesFromCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if variables must be initialized from the caller form.
    /// </summary>
    /// <param name = "_args">
    /// <c>Args</c> instance.
    /// </param>
    /// <returns>
    /// true if variables must be initialized; otherwise, false.
    /// </returns>
    protected static boolean mustInitializeVariablesFromCallerForm(Args _args)
    {
        return _args && _args.caller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new_InvoiceChoose</Name>
				<Source><![CDATA[
    public static ProjInvoiceChoose new_InvoiceChoose(
    ProjChoose          _projChoose,
    ProjInvoiceProjId   _projInvoiceProjId  = '',
    ProjId              _projId             = '',
    ProjProposalJour    _projProposalJour   = null,
    boolean             _showMessages       = true,
    PSAContractLineNum  _contractLineNum    = '')

    {
        ProjInvoiceChoose projInvoiceChoose;

        projInvoiceChoose = ProjInvoiceChoose::construct(_projChoose, _projProposalJour);

        projInvoiceChoose.getLast();
        projInvoiceChoose.parmCalledFromTrans(false);

        projInvoiceChoose.parmprojInvoiceProjId(_projInvoiceProjId);
        projInvoiceChoose.parmProjId(_projId);

        projInvoiceChoose.setQueryRange();
        projInvoiceChoose.parmShowMessages(_showMessages);
        projInvoiceChoose.parmContLineNum(_contractLineNum);

        return projInvoiceChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaNew_InvoiceChoose</Name>
				<Source><![CDATA[
    // Change to Server Static
    static ProjInvoiceChoose psaNew_InvoiceChoose(str            _sProjInvoiceProjId     = '',
                                                     str            _sProjId                = '',
                                                     TransDate      _dFrom                  = dateNull(),
                                                     TransDate      _dTo                    = dateNull(),
                                                     boolean              _salesOrderLine    = false,
                                                     SalesUpdate          _salesUpdate       = SalesUpdate::DeliverNow,
                                                     ProjFundingSourceId  _fundingSourceId   = '',
                                                     InvoiceDate          _invoiceDate       = dateNull(),
                                                     boolean              _queryCost         = true,
                                                     boolean              _queryEmpl         = true,
                                                     boolean              _queryItem         = true,
                                                     boolean              _queryRevenue      = true,
                                                     boolean              _queryOnAcc        = true,
                                                     boolean              _querySubscription = false,
                                                     boolean              _queryAdvances     = true,
                                                     boolean              _queryRetention    = false,
                                                     SMAServiceOrderTable _smaServiceOrderTable = null,
                                                     boolean              _filterOnAccTrans  = true,
                                                     ProjInvoiceTypeSelection
                                                                          _projInvoiceTypeSelection = ProjInvoiceTypeSelection::Both)
    {
        ProjInvoiceChoose projInvoiceChoose;

        projInvoiceChoose = ProjInvoiceChoose::construct(ProjChoose::CreateProposalNormal);
        projInvoiceChoose.parmprojInvoiceProjId(_sProjInvoiceProjId);
        projInvoiceChoose.parmQueryCostTrans(_queryCost);
        projInvoiceChoose.parmQueryEmplTrans(_queryEmpl);
        projInvoiceChoose.parmQueryItemTrans(_queryItem);
        projInvoiceChoose.parmQueryRevenueTrans(_queryRevenue);
        projInvoiceChoose.psaParmQueryOnAcc(_queryOnAcc);
        projInvoiceChoose.parmQuerySubscriptionTrans(_querySubscription);
        projInvoiceChoose.psaParmQuerySalesLine(_salesOrderLine);
        projInvoiceChoose.parmQueryAdvanceTrans(_queryAdvances);
        projInvoiceChoose.parmQueryRetentionTrans(_queryRetention);
        projInvoiceChoose.parmFundingSource(_fundingSourceId);
        projInvoiceChoose.parmInvoiceDate(_invoiceDate);
        projInvoiceChoose.parmSmaServiceOrderTable(_smaServiceOrderTable);
        projInvoiceChoose.parmFilterOnAccTrans(_filterOnAccTrans);
        projInvoiceChoose.parmQueryInvoiceType(_projInvoiceTypeSelection);

        projInvoiceChoose.psaBuildQuery();
        projInvoiceChoose.psaParmQueryValues(_sProjInvoiceProjId, _sProjId, _dFrom, _dTo);
        projInvoiceChoose.psaParmSkipQueryOffset(true);
        projInvoiceChoose.psaParmSalesUpdate(PSAParameters::find().ProjProposalSalesUpdate);
        projInvoiceChoose.parmSalesUpdate(_salesUpdate);

        projInvoiceChoose.setQueryRange();
        projInvoiceChoose.initQuery();

        return projInvoiceChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaPreBilling_InvoiceChoose</Name>
				<Source><![CDATA[
    // Change to Server Static
    static ProjInvoiceChoose psaPreBilling_InvoiceChoose(str _sProjInvoiceProjId = '', str _sProjId = '', TransDate _dFrom = dateNull(), TransDate _dTo = dateNull())
    {
        ProjInvoiceChoose projInvoiceChoose;

        projInvoiceChoose = ProjInvoiceChoose::construct(ProjChoose::CreateProposalOnAccount);
        projInvoiceChoose.parmQueryCostTrans(false);
        projInvoiceChoose.parmQueryEmplTrans(false);
        projInvoiceChoose.parmQueryItemTrans(false);
        projInvoiceChoose.parmQueryRevenueTrans(false);
        projInvoiceChoose.psaParmQueryOnAcc(true);
        projInvoiceChoose.psaParmQuerySalesLine(false);

        projInvoiceChoose.psaBuildQuery();

        projInvoiceChoose.psaParmQueryValues(_sProjInvoiceProjId, _sProjId, _dFrom, _dTo);
        projInvoiceChoose.psaParmSkipQueryOffset(true);

        projInvoiceChoose.setQueryRange();
        projInvoiceChoose.initQuery();
        return projInvoiceChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalTotals</Name>
				<Source><![CDATA[
    protected static void setProjProposalTotals(ProjProposalId _projProposalId)
    {
        //Function is deprecated
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>