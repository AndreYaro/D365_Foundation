<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationProjInvoiceJourDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationProjInvoiceJourDataRetrieval</c> class retrieves data from <c>ProjInvoiceJour</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(ProjInvoiceJour))]
public class TaxIntegrationProjInvoiceJourDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected ProjInvoiceJour projInvoiceJour;
    protected ProjProposalJour projProposalJour;
    protected ProjFundingSource projFundingSource;
    protected CustTable custTableInvoice;
    protected CustTable custTable;
    protected TransportationDocument transportationDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.projInvoiceJour)
            .where(this.projInvoiceJour, fieldStr(ProjInvoiceJour, RecId))
                .isEqualToLiteral(this.document.getLocalRecId())
            .outerJoin(this.projProposalJour)
                .where(this.projProposalJour, fieldStr(ProjProposalJour, ProposalId))
                    .isEqualTo(this.projInvoiceJour, fieldStr(ProjInvoiceJour,ProposalId))
            .outerJoin(this.projFundingSource)
                .where(this.projFundingSource, fieldStr(projFundingSource, RecId))
                    .isEqualTo(this.projProposalJour, fieldStr(ProjProposalJour, FundingSource))
            .outerJoin(this.transportationDocument)
                .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                    .isEqualTo(this.projProposalJour, fieldStr(projProposalJour, TransportationDocument))
            .outerJoin(this.custTableInvoice)
                .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                    .isEqualTo(this.projInvoiceJour, fieldStr(ProjInvoiceJour, InvoiceAccount))
            .outerJoin(this.custTable)
                .where(this.custTable, fieldStr(CustTable, AccountNum))
                    .isEqualTo(this.projInvoiceJour, fieldStr(ProjInvoiceJour, OrderAccount))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        // For now, only header info is needed for Customer invouce journal, so skip document charge and line.
        document.setShouldSkipDocumentCharge(true);
        document.setShouldSkipLine(true);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId(this.projInvoiceJour.ProjInvoiceId);
        document.setIncludingTax(NoYes::No);
        document.setSign(-1);
        document.setSource(TaxModuleType::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        document.setOrderAccount(this.projInvoiceJour.OrderAccount);
        document.setOrderAccountGroup(this.custTable.CustGroup);
        document.setInvoiceAccount(this.projInvoiceJour.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custTableInvoice.CustGroup);
        document.setTransactionCurrencyCode(this.projInvoiceJour.CurrencyId);
        document.setDeliveryTerm(this.projInvoiceJour.DlvTerm);
        document.setTaxGroup(this.projInvoiceJour.TaxGroupId);
        document.setDeliveryTerm(this.projInvoiceJour.DlvTerm);
        this.copyToDocumentFromVATNum(
            this.projInvoiceJour.VATNum,
            this.projInvoiceJour.VATNumTableType,
            this.projInvoiceJour.VATNumRecId);
        Percent cashDisc = CashDisc::find(projInvoiceJour.CashDiscCode).Percent;
        document.setCashDiscountPercent(cashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrCompanyInformation(
            this.transportationDocument,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);

        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.projInvoiceJour.DeliveryPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);

        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress;
        if (this.projFundingSource.InvoiceLocation)
        {
            invoiceDestinationLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(this.projFundingSource.InvoiceLocation);
        }
        else
        {
            invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                this.custTableInvoice,
                LogisticsLocationRoleType::Invoice);
        }

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>