<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmTransMarkForDeletion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscAdmTransMarkForDeletion</c> class marks the <c>PriceDiscAdmTrans</c> that differ from the original for deletion.
/// </summary>
class PriceDiscAdmTransMarkForDeletion extends SysQueryUpdateRecordSet
{
    QueryBuildDataSource qbdsPriceDiscAdmTrans;
    QueryBuildDataSource qbdsPriceDiscTable;
    PriceDiscAdmTrans parmPriceDiscAdmTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeFieldValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field mapping.
    /// </summary>
    protected void initializeFieldValueMap()
    {
        this.insertFieldValueMapPair(tableNum(PriceDiscAdmTrans), fieldNum(PriceDiscAdmTrans, MustBeDeleted), any2Str(NoYes::Yes));
        this.insertFieldValueMapPair(tableNum(PriceDiscAdmTrans), fieldNum(PriceDiscAdmTrans, Log), strFmt('"%1"', "@SYS138899"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    /// <returns>
    /// The initialized <c>Query</c> object.
    /// </returns>
    protected Query initQuery()
    {
        Query query = new Query();
        
        query.recordLevelSecurity(false);

        qbdsPriceDiscAdmTrans = query.addDataSource(tableNum(PriceDiscAdmTrans));
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, JournalNum)).value(SysQuery::value(parmPriceDiscAdmTrans.JournalNum));
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, MustBeDeleted)).value(SysQuery::value(any2Int(NoYes::No)));

        qbdsPriceDiscTable = qbdsPriceDiscAdmTrans.addDataSource(tableNum(PriceDiscTable));
        qbdsPriceDiscTable.joinMode(JoinMode::InnerJoin);
        qbdsPriceDiscTable.addLink(fieldNum(PriceDiscAdmTrans, PriceDiscTableRef), fieldNum(PriceDiscTable, RecId));
        
        str joinRange = this.retrieveRangeForQueryJoin();
        if (joinRange)
        {
            qbdsPriceDiscTable.addRange(fieldNum(PriceDiscAdmTrans, DataAreaId)).value(joinRange);
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRangeForQueryJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the range for joining datasource.
    /// </summary>
    /// <returns>
    /// The query range value.
    /// </returns>
    private str retrieveRangeForQueryJoin()
    {
        Map fieldNameMapping;
        MapEnumerator me;
        str result;

        fieldNameMapping = this.retrieveFieldMappingForQueryJoin();
        me = fieldNameMapping.getEnumerator();

        while(me.moveNext())
        {
            if (result != '')
            {
                result += ' || ';
            }

            result += strFmt('(%1.%2 != %3.%4)',
                qbdsPriceDiscAdmTrans.name(),
                me.current(),
                qbdsPriceDiscTable.name(),
                me.currentValue());
        }

        if (result != '')
        {
            result = strFmt('(%1)', result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveFieldMappingForQueryJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields for joining datasource.
    /// </summary>
    /// <returns>
    /// The map of fields.
    /// </returns>
    protected Map retrieveFieldMappingForQueryJoin()
    {
        Map fieldNameMapping = new Map(Types::String, Types::String);
        
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, AccountCode), fieldStr(PriceDiscTable, AccountCode));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, AccountRelation), fieldStr(PriceDiscTable, AccountRelation));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, AllocateMarkup), fieldStr(PriceDiscTable, AllocateMarkup));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Amount), fieldStr(PriceDiscTable, Amount));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, CalendarDays), fieldStr(PriceDiscTable, CalendarDays));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Currency), fieldStr(PriceDiscTable, Currency));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, DeliveryTime), fieldStr(PriceDiscTable, DeliveryTime));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, FromDate), fieldStr(PriceDiscTable, FromDate));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, GenericCurrency), fieldStr(PriceDiscTable, GenericCurrency));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, InventDimId), fieldStr(PriceDiscTable, InventDimId));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, ItemCode), fieldStr(PriceDiscTable, ItemCode));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, ItemRelation), fieldStr(PriceDiscTable, ItemRelation));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Markup), fieldStr(PriceDiscTable, Markup));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Module), fieldStr(PriceDiscTable, Module));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Percent1), fieldStr(PriceDiscTable, Percent1));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Percent2), fieldStr(PriceDiscTable, Percent2));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, PriceUnit), fieldStr(PriceDiscTable, PriceUnit));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, QuantityAmountFrom), fieldStr(PriceDiscTable, QuantityAmountFrom));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, QuantityAmountTo), fieldStr(PriceDiscTable, QuantityAmountTo));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, Relation), fieldStr(PriceDiscTable, Relation));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, RelationType), fieldStr(PriceDiscTable, RelationType));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, RowNumber), fieldStr(PriceDiscTable, RowNumber));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, SearchAgain), fieldStr(PriceDiscTable, SearchAgain));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, ToDate), fieldStr(PriceDiscTable, ToDate));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, UnionAllBranchId), fieldStr(PriceDiscTable, UnionAllBranchId));
        fieldNameMapping.insert(fieldStr(PriceDiscAdmTrans, UnitId), fieldStr(PriceDiscTable, UnitId));
        
        return fieldNameMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDataMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip data methods.
    /// </summary>
    /// <returns>true if data methods must be skipped; otherwise, false.</returns>
    protected boolean skipDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PriceDiscAdmTransMarkForDeletion</c> class.
    /// </summary>
    /// <param name="_priceDiscAdmTrans">
    /// The <c>PriceDiscAdmTrans</c> record which carries information for the query.
    /// </param>
    /// <returns>
    /// A new instance.
    /// </returns>
    public static PriceDiscAdmTransMarkForDeletion newFromPriceDiscAdmTrans(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        PriceDiscAdmTransMarkForDeletion instance =
            new PriceDiscAdmTransMarkForDeletion();

        instance.parmPriceDiscAdmTrans = _priceDiscAdmTrans;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>