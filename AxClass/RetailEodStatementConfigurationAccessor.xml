<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEodStatementConfigurationAccessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEodStatementConfigurationAccessor</c> class handles the logic of accessing statement posting parameters
/// by deciding whether they should be read from the <c>RetailParameters</c> table, <c>RetailStoreTable</c> or from the <c>RetailStatementTable</c>.
/// </summary>
internal class RetailEodStatementConfigurationAccessor
{
    private RetailStatementTable statementTable;
    private RetailStoreTable retailStoreTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromStatementId</Name>
				<Source><![CDATA[
    internal static RetailEodStatementConfigurationAccessor constructFromStatementId(RetailStatementId _statementId)
    {
        return RetailEodStatementConfigurationAccessor::construct(RetailStatementTable::find(_statementId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailEodStatementConfigurationAccessor construct(RetailStatementTable _statementTable)
    {
        return new RetailEodStatementConfigurationAccessor(_statementTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(RetailStatementTable _statementTable)
    {
        this.statementTable = _statementTable;
        this.retailStoreTable = RetailStoreTable::find(_statementTable.storeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAggregateBeforePosting</Name>
				<Source><![CDATA[
    internal NoYes isAggregateBeforePosting()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.AggregateBeforePosting :
            RetailParameters::find().aggregateBeforePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisableCountingRequired</Name>
				<Source><![CDATA[
    internal NoYes isDisableCountingRequired()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.DisableCountingRequired :
            RetailParameters::find().DisableCountingRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReserveInventoryDuringStatementCalculation</Name>
				<Source><![CDATA[
    internal RetailEodReserveInventoryDuringStatementCalculation isReserveInventoryDuringStatementCalculation()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.ReserveInventoryDuringStatementCalculation :
            RetailParameters::find().ReserveInventoryDuringStatementCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSkipAggregationForReturns</Name>
				<Source><![CDATA[
    internal RetailSkipAggregationForReturns isSkipAggregationForReturns()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.SkipAggregationForReturns :
            RetailParameters::find().SkipAggregationForReturns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateGSTTransactionId_IN</Name>
				<Source><![CDATA[
    internal NoYes isUpdateGSTTransactionId_IN()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.UpdateGSTTransactionId_IN :
            RetailParameters::find().UpdateGSTTransactionId_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisableTransactionConsistencyChecker</Name>
				<Source><![CDATA[
    internal RetailTransactionConsistencyCheckerStatus isDisableTransactionConsistencyChecker()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.DisableTransactionConsistencyChecker :
            RetailParameters::find().DisableTransactionConsistencyChecker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumberOfThreadsCustomerOrder</Name>
				<Source><![CDATA[
    internal RetailEodMaxNumberOfCustomerOrderThreads getMaxNumberOfThreadsCustomerOrder()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.MaxNumberOfThreadsCustomerOrder :
            RetailParameters::find().MaxNumberOfThreadsCustomerOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecalculateDimensionsOnPostingError</Name>
				<Source><![CDATA[
    internal RetailRecalculateDimensionsOnPostingError isRecalculateDimensionsOnPostingError()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.RecalculateDimensionsOnPostingError :
            RetailParameters::find().RecalculateDimensionsOnPostingError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfferLedgerDimension</Name>
				<Source><![CDATA[
    internal LedgerDimensionDefaultAccount getOfferLedgerDimension()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.OfferLedgerDimension :
            RetailParameters::find().OfferLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMixMatchLedgerDimension</Name>
				<Source><![CDATA[
    internal LedgerDimensionDefaultAccount getMixMatchLedgerDimension()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.MixMatchLedgerDimension :
            RetailParameters::find().MixMatchLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMultiBuyLedgerDimension</Name>
				<Source><![CDATA[
    internal LedgerDimensionDefaultAccount getMultiBuyLedgerDimension()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.MultiBuyLedgerDimension :
            RetailParameters::find().MultiBuyLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThresholdLedgerDimension</Name>
				<Source><![CDATA[
    internal LedgerDimensionDefaultAccount getThresholdLedgerDimension()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.ThresholdLedgerDimension :
            RetailParameters::find().ThresholdLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrepaymentLedgerDimension</Name>
				<Source><![CDATA[
    internal LedgerDimensionDefaultAccount getPrepaymentLedgerDimension()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.PrepaymentLedgerDimension :
            RetailParameters::find().PrepaymentLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoSettle</Name>
				<Source><![CDATA[
    internal NoYes isAutoSettle()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.autoSettle :
            RetailParameters::find().autoSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrepaymentLedgerJournalName</Name>
				<Source><![CDATA[
    internal RetailPrePaymentLedgerJournalNameId getPrepaymentLedgerJournalName()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.PrePaymentLedgerJournalName :
            RetailParameters::find().PrePaymentLedgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftcardItem</Name>
				<Source><![CDATA[
	internal ItemId getGiftcardItem()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.GiftcardItem :
            RetailParameters::find().GiftcardItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessGiftcardsAsPrepayments_RU</Name>
				<Source><![CDATA[
    internal NoYesId isProcessGiftcardsAsPrepayments_RU()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.ProcessGiftcardsAsPrepayments_RU :
            RetailParameters::find().ProcessGiftCardsAsPrepayments_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxOnGiftCards</Name>
				<Source><![CDATA[
    internal RetailTaxOnGiftCard isTaxOnGiftCards()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.TaxOnGiftCards :
            RetailParameters::find().TaxOnGiftCards;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregatedTransactionsBundleSize</Name>
				<Source><![CDATA[
	internal RetailEodAggregatedTransactionsBundleSize getAggregatedTransactionsBundleSize()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.AggregatedTransactionsBundleSize :
            RetailParameters::find().AggregatedTransactionsBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseFinancialDimensionFromReturnStore</Name>
				<Source><![CDATA[
    internal NoYes isUseFinancialDimensionFromReturnStore()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.UseFinancialDimensionFromReturnStore :
            RetailParameters::find().UseFinancialDimensionFromReturnStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseChannelCashManagementReconciliation</Name>
				<Source><![CDATA[
    internal NoYes isUseChannelCashManagementReconciliation()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.UseChannelCashManagementReconciliation :
            RetailParameters::find().StmtUseChannelCashManagementReconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartAmountCalculation</Name>
				<Source><![CDATA[
    internal RetailStartAmountCalculation getStartAmountCalculation()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.startAmountCalculation :
            retailStoreTable.startAmountCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOneStatementPerDay</Name>
				<Source><![CDATA[
    internal RetailOneStatementPerDay isOneStatementPerDay()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.oneStatementPerDay :
            retailStoreTable.oneStatementPerDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDropCalculation</Name>
				<Source><![CDATA[
    internal RetailBankDropCalculation getBankDropCalculation()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.bankDropCalculation :
            retailStoreTable.bankDropCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTenderDeclarationCalculation</Name>
				<Source><![CDATA[
    internal RetailTenderDeclarationCalculation getTenderDeclarationCalculation()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.tenderDeclarationCalculation :
            retailStoreTable.tenderDeclarationCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStmtCalcBatchEndTime</Name>
				<Source><![CDATA[
    internal TimeOfDay getStmtCalcBatchEndTime()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.stmtCalcBatchEndTime :
            RetailStoreTable.stmtCalcBatchEndTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStmtAutoSettleCustomerDeposit</Name>
				<Source><![CDATA[
    internal RetailEodStatementAutoSettleCustomerDeposit isStmtAutoSettleCustomerDeposit()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.StmtAutoSettleCustomerDeposit :
            RetailParameters::find().StmtAutoSettleCustomerDeposit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParallelPostingOfSalesPaymentEnabled</Name>
				<Source><![CDATA[
    internal RetailEodStatementPostSalesPaymentsInParallel isParallelPostingOfSalesPaymentEnabled()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.EnableParallelPaymentPostingForSales :
            false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrioritizeDimensionsFromPaymentMethodForStatementsEnabled</Name>
				<Source><![CDATA[
    internal boolean isPrioritizeDimensionsFromPaymentMethodForStatementsEnabled()
    {
        return this.statementParametersInitializedDuringInsert() ? statementTable.PrioritizeDimensionsFromPaymentMethod :
			RetailParameters::find().PrioritizeDimensionsFromPaymentMethodForStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementParametersInitializedDuringInsert</Name>
				<Source><![CDATA[
    private boolean statementParametersInitializedDuringInsert()
    {
        return statementTable.CreationVersionIndicator > RetailStatementCreationVersionIndicator::V0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>