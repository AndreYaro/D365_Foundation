<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTableEventHandlerEEFeatures</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceTableEventHandlerEEFeatures</c> class is used by event handlers from the
/// <c>CustInvoiceTable</c> table methods.
/// </summary>
class CustInvoiceTableEventHandlerEEFeatures
{
    CustInvoiceTable    custInvoiceTable, origCustInvoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes various fields in the <c>CustInvoiceTable</c> table.
    /// </summary>
    /// <param name="custTable">
    /// The <c>CustTable</c> table to initialize from.
    /// </param>
    public void initFromCustTable(CustTable custTable)
    {
        #ISOCountryRegionCodes

        this.initTradeDates_W();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
         && PlTaxDueTable::find(custTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate)
        {
            custInvoiceTable.VatDueDate_W        = custInvoiceTable.DueDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTradeDates_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes various fields in table <c>CustInvoiceTable</c>.
    /// </summary>
    public void initTradeDates_W()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
        {
            this.modifiedTransDate_W   (true);
            this.modifiedDocumentDate_W(true);
        }
        else
        {
            if (! custInvoiceTable.VatDueDate_W && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                custInvoiceTable.VatDueDate_W = custInvoiceTable.InvoiceDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDocumentDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>CustInvoiceTable</c> when <c>DocumentDate</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    public void modifiedDocumentDate_W(boolean _triggerDateChange = true)
    {
        TaxGroupHeading tmpTaxGroupHeading;

        tmpTaxGroupHeading = TaxGroupHeading::find(custInvoiceTable.TaxGroup);

        if (   (!custInvoiceTable.VatDueDate_W || VatDueDateFeature::isEnabled())
            && TaxVATDueDateUtility::isVATDueDateBasedOnDocumentDate(tmpTaxGroupHeading)
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
            custInvoiceTable.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnDocumentDate(tmpTaxGroupHeading, custInvoiceTable.DocumentDate);
            if (_triggerDateChange)
            {
                this.modifiedVATDueDate_W(false);
            }
        }

        if (! custInvoiceTable.SalesDate_W &&
            tmpTaxGroupHeading.FillSalesDate_W == FillSalesDate_W::DocumentDate)
        {
            custInvoiceTable.SalesDate_W = custInvoiceTable.DocumentDate;
            if (_triggerDateChange)
            {
                this.modifiedSalesDate_W(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various fields in the <c>CustInvoiceTable</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The field being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(CustInvoiceTable, InvoiceDate):
                this.modifiedTransDate_W();
                this.paymentModified();
                break;
            case fieldNum(CustInvoiceTable, DocumentDate):
                this.modifiedDocumentDate_W();
                break;
            case fieldNum(CustInvoiceTable, SalesDate_W):
                this.modifiedSalesDate_W();
                break;
            case fieldNum(CustInvoiceTable, DueDate):
            case fieldNum(CustInvoiceTable, VatDueDate_W):
                this.modifiedVATDueDate_W();
                break;
            case fieldNum(CustInvoiceTable, CurrencyCode):
                //<GEEU>
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00009, funcName());
                if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(custInvoiceTable.TableId, custInvoiceTable.RecId))
                {
                    TaxSpecificExchangeRate::deleteBySourceRecord(custInvoiceTable.TableId, custInvoiceTable.RecId);
                }
                else
                {
                    SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(custInvoiceTable, custInvoiceTable.CurrencyCode, TransactionType::Sales, custInvoiceTable.VatDueDate_W);
                }
                //</GEEU>
                break;
            case fieldNum(CustInvoiceTable, Payment):
                this.paymentModified();
                break;
            case fieldNum(CustInvoiceTable, CustBankAccountId):
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    this.paymentModified();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSalesDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>CustInvoiceTable</c> when <c>SalesDate_W</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    public void modifiedSalesDate_W(boolean _triggerDateChange = true)
    {
        TaxGroupHeading tmpTaxGroupHeading;

        tmpTaxGroupHeading = TaxGroupHeading::find(custInvoiceTable.TaxGroup);

        if (! custInvoiceTable.SalesDate_W && ! custInvoiceTable.orig().SalesDate_W)
        {
            boolean salesDateCanBeSet = this.modifiedSalesDate_SalesDate(tmpTaxGroupHeading.FillSalesDate_W);

            if (!salesDateCanBeSet)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillSalesDate_W));
            }
        }

        if (! custInvoiceTable.VatDueDate_W &&
            tmpTaxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::SalesDate &&
            TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            custInvoiceTable.VatDueDate_W = custInvoiceTable.SalesDate_W;
            if (_triggerDateChange)
            {
                this.modifiedVATDueDate_W(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSalesDate_SalesDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value of SalesDate_W.
    /// </summary>
    /// <param name = "_fillSalesDate_W">Sales Date type.</param>
    /// <returns>true if value can be set; false if type is unsupported.</returns>
    protected boolean modifiedSalesDate_SalesDate(FillSalesDate_W _fillSalesDate_W)
    {
        boolean canBeSet = true;
        
        switch (_fillSalesDate_W)
        {
            case FillSalesDate_W::Manually:
                // do nothing
                break;
            case FillSalesDate_W::DocumentDate:
                custInvoiceTable.SalesDate_W = custInvoiceTable.DocumentDate;
                break;
            case FillSalesDate_W::PostingDate:
            case FillSalesDate_W::LastDeliveryDate:
                custInvoiceTable.SalesDate_W = custInvoiceTable.InvoiceDate;
                break;
            case FillSalesDate_W::VATDueDate:
                custInvoiceTable.SalesDate_W = custInvoiceTable.VatDueDate_W;
                break;
            default:
                canBeSet = false;
                break;
        }

        return canBeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTransDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>CustInvoiceTable</c> when <c>InvoiceDate</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    public void modifiedTransDate_W(boolean _triggerDateChange = true)
    {
        TaxGroupHeading tmpTaxGroupHeading;

        tmpTaxGroupHeading = TaxGroupHeading::find(custInvoiceTable.TaxGroup);

        // exception in behaviour: DVR is always filled
        if ((TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(tmpTaxGroupHeading)
            || tmpTaxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::LastDeliveryDate)
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            custInvoiceTable.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(tmpTaxGroupHeading, custInvoiceTable.InvoiceDate);
            if (_triggerDateChange)
            {
                this.modifiedVATDueDate_W(false);
            }
        }

        if ((!custInvoiceTable.SalesDate_W)
             && tmpTaxGroupHeading.FillSalesDate_W == FillSalesDate_W::PostingDate)
        {
            custInvoiceTable.SalesDate_W = custInvoiceTable.InvoiceDate;
            if (_triggerDateChange)
            {
                this.modifiedSalesDate_W(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVATDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>CustInvoiceTable</c> when <c>VatDueDate_W</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    public void modifiedVATDueDate_W(boolean _triggerDateChange = true)
    {
        TaxGroupHeading tmpTaxGroupHeading;

        tmpTaxGroupHeading = TaxGroupHeading::find(custInvoiceTable.TaxGroup);

        TaxUncommitted::deleteForDocumentHeader(custInvoiceTable.TableId, custInvoiceTable.RecId);

        if (PlTaxDueTable::find(custInvoiceTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate)
        {
            custInvoiceTable.VatDueDate_W = custInvoiceTable.DueDate;
        }

        if (CustTable::find(custInvoiceTable.OrderAccount).MandatoryVatDate_PL)
        {
            if (! custInvoiceTable.VatDueDate_W && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                boolean isVatDueDateSet = this.modifiedVATDueDate_VatDueDate(tmpTaxGroupHeading);

                if(!isVatDueDateSet)
                {
                    throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillVATDueDate_W));
                }
            }
        }

        if (! custInvoiceTable.SalesDate_W &&
            tmpTaxGroupHeading.FillSalesDate_W == FillSalesDate_W::VATDueDate)
        {
            custInvoiceTable.SalesDate_W = custInvoiceTable.VatDueDate_W;
            if (_triggerDateChange)
            {
                this.modifiedSalesDate_W(false);
            }
        }

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(custInvoiceTable.TableId, custInvoiceTable.RecId))
        {
            TaxSpecificExchangeRate::updateOrDeleteByVATDueDate(custInvoiceTable.TableId, custInvoiceTable.RecId, custInvoiceTable.VatDueDate_W);
        }
        else
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00009, funcName());
            SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(
                custInvoiceTable,
                custInvoiceTable.CurrencyCode,
                TransactionType::Sales,
                custInvoiceTable.VatDueDate_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVATDueDate_VatDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value of VatDueDate_W in _taxGroupHeading.
    /// </summary>
    /// <param name = "_taxGroupHeading">Tax group heading.</param>
    /// <returns>true if value can be set; false if type is unsupported.</returns>
    protected boolean modifiedVATDueDate_VatDueDate(TaxGroupHeading _taxGroupHeading)
    {
        boolean canBeSet = true;
        switch (_taxGroupHeading.FillVATDueDate_W)
        {
            case FillVATDueDate_W::Manually:
                // do nothing
                break;
            case FillVATDueDate_W::SalesDate:
                custInvoiceTable.VatDueDate_W = custInvoiceTable.SalesDate_W;
                break;
            case FillVATDueDate_W::DocumentDate:
                custInvoiceTable.VatDueDate_W = custInvoiceTable.DocumentDate;
                break;
            case FillVATDueDate_W::PostingDate:
            case FillVATDueDate_W::LastDeliveryDate:
                custInvoiceTable.VatDueDate_W = custInvoiceTable.InvoiceDate;
                break;
            case FillVATDueDate_W::Customized:
                custInvoiceTable.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateCustomized(
                    _taxGroupHeading,
                    custInvoiceTable.InvoiceDate,
                    custInvoiceTable.DocumentDate);
                break;
            default:
                canBeSet = false;
                break;
        }

        return canBeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>CustInvoiceTable</c> class.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The current instance of the <c>CustInvoiceTable</c> table.
    /// </param>
    public void new(CustInvoiceTable _custInvoiceTable)
    {
        custInvoiceTable        = _custInvoiceTable;
        origCustInvoiceTable    = _custInvoiceTable.orig();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in the <c>CustInvoiceTable</c> table.
    /// </summary>
    public void paymentModified()
    {
        // <GEEPL>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) &&
            PlTaxDueTable::find(custInvoiceTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate)
        {
            custInvoiceTable.VatDueDate_W = custInvoiceTable.DueDate;
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTableVatTradeDates</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(CustInvoiceTable), tableMethodStr(CustInvoiceTable, initFromCustTable))]
    /// <summary>
    /// The static method that is used to register the event in the <c>CustInvoiceTable</c> table.
    /// </summary>
    /// <param name="_args">
    /// The arguments from caller method.
    /// </param>
    public static void initFromCustTableVatTradeDates(XppPrePostArgs _args)
    {
        #EECountryRegionCodes

        CustInvoiceTableEventHandlerEEFeatures      custInvoiceTableEventHandler;
        CustInvoiceTable                            custInvoiceTable;
        CustTable                                   custTable;

        if (!TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            return;
        }

        custInvoiceTable                = _args.getThis();
        custInvoiceTableEventHandler    = new CustInvoiceTableEventHandlerEEFeatures(custInvoiceTable);
        custTable                       = _args.getArg('custTable');

        custInvoiceTableEventHandler.initFromCustTable(custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldVatTradeDates</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(CustInvoiceTable), tableMethodStr(CustInvoiceTable, modifiedField))]
    /// <summary>
    /// The static method that is used to register the event in the <c>CustInvoiceTable</c> table.
    /// </summary>
    /// <param name="_args">
    /// The arguments from caller method.
    /// </param>
    public static void modifiedFieldVatTradeDates(XppPrePostArgs _args)
    {
        #EECountryRegionCodes

        CustInvoiceTableEventHandlerEEFeatures      custInvoiceTableEventHandler;
        CustInvoiceTable                            custInvoiceTable;

        if (!TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            return;
        }

        custInvoiceTable                = _args.getThis();
        custInvoiceTableEventHandler    = new CustInvoiceTableEventHandlerEEFeatures(custInvoiceTable);

        custInvoiceTableEventHandler.modifiedField(_args.getArg('_fieldId'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>