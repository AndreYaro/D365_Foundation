<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTSTOInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTSTOInvoiceDP_IN</c> class provides base implementation of a data provider class for stock tranfer order invoice reports.
/// </summary>
public class TaxGSTSTOInvoiceDP_IN extends GSTInvoiceDPBase_IN
{
    InventTransferJour  inventTransferJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    public void createData()
    {
        super();
        select gstInvoiceHeaderFooterTmp where gstInvoiceHeaderFooterTmp.RecId == headerRecId;
        
        if (gstInvoiceHeaderFooterTmp)
        {
            ttsBegin;
            gstInvoiceHeaderFooterTmp.selectForUpdate(true);

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = grandTotal;
            }

            gstInvoiceHeaderFooterTmp.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;
        inventTransferJour = InventTransferJour::findRecId(contract.parmRecordId());
        this.parmInvoiceJournal(inventTransferJour);
        printCopyOriginal = PrintCopyOriginal::OriginalPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        InventTransferLine              inventTransferLine;
        InventTransferJourLine_IN       inventTransferJourLine_IN;
        InventTransferJourLine          inventTransferJourLine;
        TaxDocumentComponentTransaction taxDocumentComponentTransaction;
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        TaxDocument                     taxDocument;
        TransTaxInformation             transTaxInformationTransferTo;

        inventTransferLine = InventTransferJourLine::findInventTransLine_IN(inventTransferJour.TransferId, inventTransferJour.VoucherId);
        taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(inventTransferLine);

        super();

        transTaxInformationTransferTo = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(
            inventTransferLine, false, TransTaxInformationType_IN::InventTransferTo);
        
        gstInvoiceHeaderFooterTmp.ShippedToGSTIN = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformationTransferTo, TaxType_IN::GST).RegistrationNumber;
        gstInvoiceHeaderFooterTmp.BilledToGSTIN = gstInvoiceHeaderFooterTmp.ShippedToGSTIN;

        if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
        {
            select sum(AssessableValue) from inventTransferJourLine_IN
                exists join inventTransferJourLine
                    where inventTransferJourLine.RecId          == inventTransferJourLine_IN.InventTransferJourLine
                        && inventTransferJourLine.TransferId    == inventTransferJour.TransferId
                        && inventTransferJourLine.VoucherId     == inventTransferJour.VoucherId;

            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = inventTransferJourLine_IN.AssessableValue;
            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords = numeralsToTxt_IN(abs(inventTransferJourLine_IN.AssessableValue));
        }
        else
        {
            taxDocument = TaxDocumentUtils::getTaxDocumentBySource(inventTransferJour.TableId, inventTransferJour.RecId);

            while select avg(TaxBaseAmount), sum(TotalInterimTaxPayableAmount), sum(TotalTaxPayableAmount) from taxDocumentComponentTransaction
                group by taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId
                exists join taxDocumentRowTransaction
                    where taxDocumentRowTransaction.RecId                       == taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId
                        && taxDocumentRowTransaction.TransactionHeaderTableId   == taxDocument.OriginSourceTableId
                        && taxDocumentRowTransaction.TransactionHeaderRecId     == taxDocument.OriginSourceRecId
            {
                gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure += taxDocumentComponentTransaction.TaxBaseAmount + taxDocumentComponentTransaction.TotalInterimTaxPayableAmount + taxDocumentComponentTransaction.TotalTaxPayableAmount;
            }

            select sum(AssessableValue) from inventTransferJourLine_IN
                exists join taxDocumentRowTransaction
                    where taxDocumentRowTransaction.TransactionJourLineRecId == inventTransferJourLine_IN.InventTransferJourLine
                        && taxDocumentRowTransaction.TransactionJourLineTableId == tableNum(InventTransferJourLine)
                        && taxDocumentRowTransaction.TransactionHeaderTableId == taxDocument.OriginSourceTableId
                        && taxDocumentRowTransaction.TransactionHeaderRecId == taxDocument.OriginSourceRecId
                    notexists join taxDocumentComponentTransaction
                        where taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId;

            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure += inventTransferJourLine_IN.AssessableValue;
            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords = numeralsToTxt_IN(abs(gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure));
        }

        gstInvoiceHeaderFooterTmp.initEInvoice(inventTransferJour);
        gstInvoiceHeaderFooterTmp.BilledToParty = CompanyInfo::current();

        gstInvoiceHeaderFooterTmp.insert();
        headerRecId = gstInvoiceHeaderFooterTmp.RecId;
        gstInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        InventTransferJourLine  inventTransferJourLine;
        InventTransferParmLine  inventTransferParmLine;

        super(_className);

        if (lineTableId && lineRecId && classStr(ITaxDocumentLine) == _className)
        {
            if (lineTableId == tableNum(InventTransferJourLine))
            {
                select firstOnly inventTransferJourLine
                    where inventTransferJourLine.RecId == lineRecId;

                gstInvoiceTmp.ItemId        = inventTransferJourLine.ItemId;
                gstInvoiceTmp.Name          = inventTransferJourLine.itemName();
                gstInvoiceTmp.Unit          = inventTransferJourLine.UnitId;
                gstInvoiceTmp.UnitPrice     = inventTransferJourLine.UnitPrice_IN;
                gstInvoiceTmp.LineAmount    = inventTransferJourLine.UnitPrice_IN * inventTransferJourLine.QtyShipped;
            }
                        
            if (lineTableId == tableNum(InventTransferParmLine))
            {
                select firstOnly InventTransferParmLine
                    where InventTransferParmLine.RecId == lineRecId;
                
                gstInvoiceTmp.ItemId        = InventTransferParmLine.ItemId;
                gstInvoiceTmp.Name          = InventTransferParmLine.itemName();
                gstInvoiceTmp.Unit          = InventTransferParmLine.inventTransferLine().UnitId;
                gstInvoiceTmp.UnitPrice     = inventTransferParmLine.UnitPrice;
                gstInvoiceTmp.LineAmount    = inventTransferParmLine.UnitPrice * InventTransferParmLine.QtyShipNow;
            }
        }

        if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
        {
            gstInvoiceTmp.TaxableValue = gstInvoiceTmp.LineAmount;
        }

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>