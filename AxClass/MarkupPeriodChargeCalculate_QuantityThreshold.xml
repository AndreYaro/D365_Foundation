<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculate_QuantityThreshold</Name>
	<SourceCode>
		<Declaration><![CDATA[
[MarkupPeriodChargeCalculateMode(MarkupPeriodChargeRuleLineType::QuantityThreshold)]
public class MarkupPeriodChargeCalculate_QuantityThreshold extends MarkupPeriodChargeCalculate
{
    protected EcoResProductUnitConverter ecoResProductUnitConverter;
    
    protected SalesId previousSalesId;

    protected SalesOrderedQty orderedQuantity, totalSalesQty;
    protected SalesQty deliveredQuantity;
    protected Set consumedSalesLineRecIdSet, currentConsumedSalesLineRecIdSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriodRuleTypeRanges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addPeriodRuleTypeRanges(Query _query)
    {
        QueryBuildDataSource qbdsCustInvoiceJour = _query.dataSourceTable(tableNum(CustInvoiceJour));

        QueryBuildDataSource qbdsCustInvoiceTrans = _query.dataSourceTable(tableNum(CustInvoiceTrans));

        // P1 requirement Quantity Threshold: Invoice lines only
        if (this.isSalesLineQuantityThreshold())
        {
            QueryBuildDataSource qbdsSalesLine = qbdsCustInvoiceTrans.addDataSource(tableNum(SalesLine));
            
            qbdsSalesLine.fetchMode(QueryFetchMode::One2One);
            qbdsSalesLine.joinMode(JoinMode::InnerJoin);
        
            str salesLineRange = this.getSalesLineRange(qbdsSalesLine, qbdsCustInvoiceTrans);
            qbdsSalesLine.addRange(fieldNum(SalesLine, InventTransId)).value(salesLineRange);

            if (periodChargeRuleLine.DebitQuantityOnly)
            {
                qbdsSalesLine.addRange(fieldNum(SalesLine, SalesQty)).value(strFmt('>%1', 0));
            }
            
            QueryBuildDataSource qbdsInventTableModule = qbdsSalesLine.addDataSource(tableNum(InventTableModule));
            qbdsInventTableModule.fetchMode(QueryFetchMode::One2One);
            qbdsInventTableModule.joinMode(JoinMode::InnerJoin);
            qbdsInventTableModule.addLink(fieldNum(SalesLine, ItemId), fieldNum(InventTableModule, ItemId), qbdsSalesLine.name());
            qbdsInventTableModule.addRange(fieldNum(InventTableModule, ModuleType)).value(SysQuery::value(ModuleInventPurchSales::Invent));

            this.addCustPackingSlipTransDS(qbdsSalesLine, fieldNum(SalesLine, InventTransId));
            this.addInvoiceLineBaseRelationshipDS(qbdsSalesLine, tableNum(SalesLine), fieldNum(SalesLine, RecId));
        }
        else
        {
            if (periodChargeRuleLine.DebitQuantityOnly)
            {
                qbdsCustInvoiceTrans.addRange(fieldNum(CustInvoiceTrans, Qty)).value(strFmt('>%1', 0));
            }
            
            this.addCustPackingSlipTransDS(qbdsCustInvoiceTrans, fieldNum(CustInvoiceTrans, InventTransId));
            this.addInvoiceLineBaseRelationshipDS(qbdsCustInvoiceTrans, tableNum(CustInvoiceTrans), fieldNum(CustInvoiceTrans, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustPackingSlipTransDS</Name>
				<Source><![CDATA[
    private void addCustPackingSlipTransDS(QueryBuildDataSource _parentQueryBuildDataSource, FieldId _refFieldId)
    {
        // It is to calculate delivered quantity. The original display method is SalesLineType.deliveredInTotal().
        // Delivered quantity for period charge does not consider SalesFastPrintSalesOrderFeature.
        QueryBuildDataSource qbdsCustPackingSlipTrans = _parentQueryBuildDataSource.addDataSource(tableNum(CustPackingSlipTrans));
        qbdsCustPackingSlipTrans.fetchMode(QueryFetchMode::One2One);
        qbdsCustPackingSlipTrans.joinMode(JoinMode::OuterJoin);
        qbdsCustPackingSlipTrans.addLink(_refFieldId, fieldNum(CustPackingSlipTrans, InventTransId), _parentQueryBuildDataSource.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseRelationshipDS</Name>
				<Source><![CDATA[
    private void addInvoiceLineBaseRelationshipDS(QueryBuildDataSource _parentQueryBuildDataSource, tableId _refTableId, FieldId _refFieldId)
    {
        QueryBuildDataSource qbdsPeriodChargeInvoiceLineBaseRelationship = _parentQueryBuildDataSource.addDataSource(tableNum(MarkupPeriodChargeInvoiceLineBaseRelationship));
        qbdsPeriodChargeInvoiceLineBaseRelationship.joinMode(JoinMode::NoExistsJoin);
        qbdsPeriodChargeInvoiceLineBaseRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsPeriodChargeInvoiceLineBaseRelationship.addLink(_refFieldId, fieldNum(MarkupPeriodChargeInvoiceLineBaseRelationship, RefRecId), _parentQueryBuildDataSource.name());
        qbdsPeriodChargeInvoiceLineBaseRelationship.addRange(fieldNum(MarkupPeriodChargeInvoiceLineBaseRelationship, RuleLineType)).value(SysQuery::value(this.getPeriodChargeRuleLineRelationshipType()));
        qbdsPeriodChargeInvoiceLineBaseRelationship.addRange(fieldNum(MarkupPeriodChargeInvoiceLineBaseRelationship, RefTableId)).value(SysQuery::value(_refTableId));
        if (this.mustAddRelationshipPerCharge())
        {
            qbdsPeriodChargeInvoiceLineBaseRelationship.addRange(fieldNum(MarkupPeriodChargeInvoiceLineBaseRelationship, ChargeCode )).value(SysQuery::value(periodChargeRuleLine.ChargeCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupingQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void createGroupingQuery(Query _query)
    {
        QueryBuildDataSource qbdsCustInvoiceTrans = _query.dataSourceTable(tableNum(CustInvoiceTrans));
        QueryBuildDataSource qbdsCustPackingSlipTrans = _query.dataSourceTable(tableNum(CustPackingSlipTrans));
        QueryBuildDataSource qbdsSalesLine = _query.dataSourceTable(tableNum(SalesLine));
        QueryBuildDataSource qbdsInventTableModule = _query.dataSourceTable(tableNum(InventTableModule));
            
        if (this.isSalesLineQuantityThreshold())
        {
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, SalesId));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, SalesUnit));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, ItemId));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, InventDimId));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, SalesStatus));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, RecId));
            
            // Fields for delivered quantity calculation based on inventory transactions
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, DataAreaId));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, InventTransId));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, StockedProduct));
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, SalesCategory));
            qbdsInventTableModule.addGroupByAndSelectionField(fieldNum(InventTableModule, UnitId));

            qbdsCustInvoiceTrans.addSelectionField(fieldNum(CustInvoiceTrans, QtyPhysical), SelectionField::Sum);
            qbdsCustPackingSlipTrans.addSelectionField(fieldNum(CustPackingSlipTrans, Qty), SelectionField::Sum);

            // As sales line is grouped by unique index, aggregation function will not show correct values
            qbdsSalesLine.addGroupByAndSelectionField(fieldNum(SalesLine, SalesQty));

            qbdsSalesLine.addOrderByField(fieldNum(SalesLine, SalesId));
        }
        else
        {
            qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, OrigSalesId));
            qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, SalesUnit));
            qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, ItemId));
            qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, InventDimId));
            qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, RecId));
            qbdsCustInvoiceTrans.addSelectionField(fieldNum(CustInvoiceTrans, QtyPhysical), SelectionField::Sum);
            qbdsCustPackingSlipTrans.addSelectionField(fieldNum(CustPackingSlipTrans, Qty), SelectionField::Sum);
            qbdsCustInvoiceTrans.addSelectionField(fieldNum(CustInvoiceTrans, Qty), SelectionField::Sum);

            qbdsCustInvoiceTrans.addOrderByField(fieldNum(CustInvoiceTrans, OrigSalesId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeInvoiceLineBase(QueryRun _queryRun)
    {
        CustInvoiceJour custInvoiceJour = _queryRun.get(tableNum(CustInvoiceJour));

        CustInvoiceTrans custInvoiceTrans = _queryRun.get(tableNum(CustInvoiceTrans));
        CustPackingSlipTrans custPackingSlipTrans = _queryRun.get(tableNum(CustPackingSlipTrans));

        using (var activityContext = this.instrumentationLogger().periodChargeRuleActivities().initializeInvoiceLineBaseActivity(MarkupPeriodChargeRuleLineType::QuantityThreshold, custInvoiceJour))
        {
            if (this.isSalesLineQuantityThreshold())
            {
                SalesLine salesLine = _queryRun.get(tableNum(SalesLine));

                if (this.isSalesLineRecIdConsumed(salesLine.RecId))
                {
				    if (invoiceLineBaseRelationshipSet.empty())
                    {
                        blockInvoiceLineCreation = true;
                    }

                    if (this.mustGenerateZeroQuantityInvoiceLineBase())
                    {
                        this.generateInvoiceLineBase(custInvoiceJour.RecId, salesLine.SalesId);
                        mustGenerateZeroQuantityInvoiceLineBase = true;
                    }
                }
                else
                {
                    this.instrumentationLogger().periodChargeRuleActivities()
                        .logInitializeInvoiceLineBaseRecord(activityContext, salesLine)
                        .logInitializeInvoiceLineBaseRecord(activityContext, custInvoiceTrans)
                        .logInitializeInvoiceLineBaseRecord(activityContext, custPackingSlipTrans);

                    this.generateInvoiceLineBase(custInvoiceJour.RecId, salesLine.SalesId);

                    this.calculateSalesLineQuantities(salesLine, custInvoiceTrans, custPackingSlipTrans, _queryRun);
                    
                    if (orderedQuantity)
                    {
                        this.addToCurrentConsumedSalesLineRecIdSet(salesLine.RecId);
                        this.addInvoiceLineBaseRelationshipToSet(tableNum(SalesLine), salesLine.RecId, this.mustAddRelationshipPerCharge());
                        blockInvoiceLineCreation = false;
                        mustGenerateZeroQuantityInvoiceLineBase = false;
                    }
				}
            }
            else
            {
                this.instrumentationLogger().periodChargeRuleActivities()
                    .logInitializeInvoiceLineBaseRecord(activityContext, custInvoiceTrans)
                    .logInitializeInvoiceLineBaseRecord(activityContext, custPackingSlipTrans);

                this.generateInvoiceLineBase(custInvoiceJour.RecId, custInvoiceTrans.OrigSalesId);

                this.calculateInvoiceTransQuantities(custInvoiceTrans, custPackingSlipTrans);
                
                if (orderedQuantity)
                {
                    this.addInvoiceLineBaseRelationshipToSet(tableNum(CustInvoiceTrans), custInvoiceTrans.RecId, this.mustAddRelationshipPerCharge());
                    mustGenerateZeroQuantityInvoiceLineBase = false;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void generateInvoiceLineBase(RefRecId _custInvoiceJourRecId, SalesId _salesId)
    {
        if (previousRecId != _custInvoiceJourRecId
            || previousSalesId != _salesId)
        {
            if (previousRecId && previousSalesId)
            {
                this.populateInvoiceLineBase();
            }

            previousRecId = _custInvoiceJourRecId;
            previousSalesId = _salesId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGenerateZeroQuantityInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustGenerateZeroQuantityInvoiceLineBase()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSalesLineQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void calculateSalesLineQuantities(SalesLine _salesLine, CustInvoiceTrans _custInvoiceTrans, CustPackingSlipTrans _custPackingSlipTrans, QueryRun _queryRun)
    {
        if (_salesLine.SalesUnit &&
            _salesLine.SalesUnit != periodChargeRuleLine.UnitSymbol)
        {
            this.setProductUnitConverter(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit);

            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                orderedQuantity += ecoResProductUnitConverter.convertValue(_salesLine.SalesQty);

                if (!this.isSalesLineCanceled(_salesLine))
                {
                    InventTableModule inventTableModule = _queryRun.get(tableNum(InventTableModule));
                    if (periodChargeRuleLine.UnitSymbol == inventTableModule.UnitId && _salesLine.isStocked())
                    {
                        deliveredQuantity += _salesLine.deliveredInventInTotal();
                    }
                    else
                    {
                        deliveredQuantity += ecoResProductUnitConverter.convertValue(_custInvoiceTrans.QtyPhysical + _custPackingSlipTrans.Qty);
                    }
                }
            }
        }
        else
        {
            orderedQuantity += _salesLine.SalesQty;
            if (!this.isSalesLineCanceled(_salesLine))
            {
                deliveredQuantity += _custInvoiceTrans.QtyPhysical + _custPackingSlipTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceTransQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void calculateInvoiceTransQuantities(CustInvoiceTrans _custInvoiceTrans, CustPackingSlipTrans _custPackingSlipTrans)
    {
        if (_custInvoiceTrans.SalesUnit && _custInvoiceTrans.SalesUnit != periodChargeRuleLine.UnitSymbol)
        {
            this.setProductUnitConverter(_custInvoiceTrans.ItemId,  _custInvoiceTrans.InventDimId, _custInvoiceTrans.SalesUnit);

            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                orderedQuantity += ecoResProductUnitConverter.convertValue(_custInvoiceTrans.Qty);
                deliveredQuantity = orderedQuantity;
            }
        }
        else
        {
            orderedQuantity += _custInvoiceTrans.Qty;
            deliveredQuantity = orderedQuantity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initDefault()
    {
        super();

        currentConsumedSalesLineRecIdSet = new Set(Types::Int64);
        consumedSalesLineRecIdSet = new Set(Types::Int64);
        ecoResProductUnitConverter = ecoResProductUnitConverter::construct();
        ecoResProductUnitConverter.parmRoundAbsoluteValue(NoYes::No);

        mustGenerateZeroQuantityInvoiceLineBase = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductUnitConverter</Name>
				<Source><![CDATA[
    private void setProductUnitConverter(ItemId _itemId, InventDimId _inventDimId, SalesUnit _salesUnit)
    {
        ecoResProductUnitConverter.parmApplyRounding(NoYes::No);
        ecoResProductUnitConverter.parmItemId(_itemId);
        ecoResProductUnitConverter.parmInventDimId(_inventDimId);
        ecoResProductUnitConverter.parmFromUnitOfMeasureRecId(EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_salesUnit));
        ecoResProductUnitConverter.parmToUnitOfMeasureRecId(EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(periodChargeRuleLine.UnitSymbol));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoundingUnitConverter</Name>
				<Source><![CDATA[
    private boolean setRoundingUnitConverter()
    {
        UnitOfMeasureRecId ruleLineUnitRecId = EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(periodChargeRuleLine.UnitSymbol);
        if (ecoResProductUnitConverter.parmToUnitOfMeasureRecId() == ruleLineUnitRecId)
        {
            ecoResProductUnitConverter.parmApplyRounding(NoYes::Yes);
            ecoResProductUnitConverter.parmFromUnitOfMeasureRecId(ruleLineUnitRecId);

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setDefaultValues()
    {
        super();

        currentConsumedSalesLineRecIdSet = new Set(Types::Int64);
        previousRecId = 0;
        previousSalesId = '';
        totalSalesQty = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddInvoiceLineBaseHeader</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustAddInvoiceLineBaseHeader()
    {
        return mustGenerateZeroQuantityInvoiceLineBase || orderedQuantity != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void calculateTotals()
    {
        totalSalesQty += orderedQuantity;
        orderedQuantity = 0;
        deliveredQuantity = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLineCondition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkRuleLineCondition()
    {
        return invoiceLineBaseSet.empty() || totalSalesQty >= periodChargeRuleLine.QuantityThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceData()
    {
        super();
        this.populateConsumedSalesLineRecIdSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleChargeAmount calculateInvoiceLineAmount()
    {
        return periodChargeRuleLine.ChargeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCurrencyCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleAmountCurrencyCode getInvoiceCurrencyCode()
    {
        return periodChargeRuleLine.AmountCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodChargeRuleLineRelationshipType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleLineRelationshipType getPeriodChargeRuleLineRelationshipType()
    {
        return MarkupPeriodChargeRuleLineRelationshipType::QuantityThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBaseCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupPeriodChargeInvoiceLineBaseCreateParameters populateInvoiceLineBaseCreationParameters()
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = super();
        invoiceLineBaseCreationParameters.parmSalesId(previousSalesId);

        if (this.setRoundingUnitConverter())
        {
            invoiceLineBaseCreationParameters.parmQtyOrdered(ecoResProductUnitConverter.convertValue(orderedQuantity));
            invoiceLineBaseCreationParameters.parmQtyDelivered(ecoResProductUnitConverter.convertValue(deliveredQuantity));
        }
        else
        {
            invoiceLineBaseCreationParameters.parmQtyOrdered(orderedQuantity);
            invoiceLineBaseCreationParameters.parmQtyDelivered(deliveredQuantity);
        }

        return invoiceLineBaseCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCurrentConsumedSalesLineRecIdSet</Name>
				<Source><![CDATA[
    private void addToCurrentConsumedSalesLineRecIdSet(RecId _salesLineRecId)
    {
        currentConsumedSalesLineRecIdSet.add(_salesLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateConsumedSalesLineRecIdSet</Name>
				<Source><![CDATA[
    private void populateConsumedSalesLineRecIdSet()
    {
        if (!currentConsumedSalesLineRecIdSet.empty())
        {
            SetEnumerator currentConsumedSalesLineRecIdSetEnumerator =  currentConsumedSalesLineRecIdSet.getEnumerator();

            while (currentConsumedSalesLineRecIdSetEnumerator.moveNext())
            {
                RefRecId salesLineRecId = currentConsumedSalesLineRecIdSetEnumerator.current();

                consumedSalesLineRecIdSet.add(salesLineRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineRecIdConsumed</Name>
				<Source><![CDATA[
    private boolean isSalesLineRecIdConsumed(RecId _salesLineRecId)
    {
        return consumedSalesLineRecIdSet.in(_salesLineRecId) || currentConsumedSalesLineRecIdSet.in(_salesLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineQuantityThreshold</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected  boolean isSalesLineQuantityThreshold()
    {
        return salesParameters.MarkupPeriodChargeRuleQtyThresholdMatch == MarkupPeriodChargeRuleQtyThresholdMatch::SalesOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBaseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str generateInvoiceLineBaseId()
    {
        return strFmt('%1 %2 %3', int642Str(periodChargeRuleLine.RecId), int642Str(previousRecId), previousSalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineCanceled</Name>
				<Source><![CDATA[
    protected boolean isSalesLineCanceled(SalesLine _salesLine)
    {
        return _salesLine.SalesStatus == SalesStatus::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddRelationshipPerCharge</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustAddRelationshipPerCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineRange</Name>
				<Source><![CDATA[
    protected str getSalesLineRange(QueryBuildDataSource _qbdsSalesLine, QueryBuildDataSource _qbdsCustInvoiceTrans)
    {
        return strFmt(
                '((%1.%2 == %3.%4) || ((%1.%5 == %6.%7) && (%1.%8 == %9)))',
                _qbdsSalesLine.name(),
                fieldStr(SalesLine, InventTransId),
                _qbdsCustInvoiceTrans.name(),
                fieldStr(CustInvoiceTrans, InventTransId),
                fieldStr(SalesLine, SalesId),
                _qbdsCustInvoiceTrans.name(),
                fieldStr(CustInvoiceTrans, OrigSalesId),
                fieldStr(SalesLine, SalesStatus),
                enum2int(SalesStatus::Canceled));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>