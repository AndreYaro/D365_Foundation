<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

/// <summary>
/// The <c>CustInvoiceJournalTemplateRegistration</c> is the supporting class for the Customer Invoice Journal Template.
/// </summary>
class CustInvoiceJournalExcelTemplate extends DocuTemplateRegistrationBase implements LedgerIJournalExcelTemplate
{
    private const DocuTemplateName ExcelTemplateName = resourceStr(CustInvoiceJournalTemplate);
    private const DataEntityName LineEntityName = tableStr(CustInvoiceJournalLineEntity);
    private const FieldName LineEntityJournalNum = fieldStr(CustInvoiceJournalLineEntity, JournalBatchNumber);
    private const FieldName LineEntityDataAreaId = fieldStr(CustInvoiceJournalLineEntity, dataAreaId);
    private const DataEntityName HeaderEntityName = tableStr(CustInvoiceJournalHeaderEntity);
    private const FieldName HeaderEntityJournalNum = fieldStr(CustInvoiceJournalHeaderEntity, JournalBatchNumber);
    private const FieldName HeaderEntityDataAreaId = fieldStr(CustInvoiceJournalHeaderEntity, dataAreaId);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerTemplates</Name>
				<Source><![CDATA[
    public void registerTemplates()
    {
        this.addTemplate(OfficeAppApplicationType::Excel,
                         ExcelTemplateName,
                         ExcelTemplateName,
                         literalStr("@AccountsReceivable:CustInvoiceJournalTemplateDescription"),
                         literalStr("@AccountsReceivable:CustInvoiceJournalTemplateName"),
                         NoYes::No,
                         NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCustomTrimming</Name>
				<Source><![CDATA[
    public void applyCustomTrimming(Excel.IWorkbookManager _templateManager, Excel.WorkbookSettingsManager _settingsManager, LedgerJournalTable _ledgerJournalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    public boolean isJournalTypeSupported(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::Daily;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTemplateName</Name>
				<Source><![CDATA[
    public DocuTemplateName documentTemplateName()
    {
        return ExcelTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedAccountTypes()
    {
        Set accountSetTypes = new Set(Types::Integer);

        accountSetTypes.add(LedgerJournalACType::Cust);

        return accountSetTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedOffsetAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedOffsetAccountTypes()
    {
        Set offsetAccountTypeSet = new Set(Types::Integer);

        offsetAccountTypeSet.add(LedgerJournalACType::Ledger);

        return offsetAccountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForTemplate</Name>
				<Source><![CDATA[
    public boolean validateJournalForTemplate(LedgerJournalTable _ledgerJournalTable)
    {
        return LedgerJournalExcelTemplate::validateJournalForTemplate(_ledgerJournalTable,this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerEntityName</Name>
				<Source><![CDATA[
    public DataEntityName headerEntityName()
    {
        return HeaderEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEntityName</Name>
				<Source><![CDATA[
    public DataEntityName lineEntityName()
    {
        return LineEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName headerJournalBatchNumberFieldName()
    {
        return HeaderEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName headerDataAreaFieldName()
    {
        return HeaderEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName lineJournalBatchNumberFieldName()
    {
        return LineEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName lineDataAreaFieldName()
    {
        return LineEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendHeaderEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendHeaderEntityFilters(FilterCollectionNode _headerFilter, ExportToExcelFilterTreeBuilder _headerFilterBuilder)
    {
        return _headerFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLineEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendLineEntityFilters(FilterCollectionNode _lineFilter, ExportToExcelFilterTreeBuilder _lineFilterBuilder)
    {
        FilterCollectionNode lineFilter = _lineFilterBuilder.and(
            _lineFilterBuilder.areEqual(fieldStr(CustInvoiceJournalLineEntity, AccountType), LedgerJournalACType::Cust),
            _lineFilterBuilder.areEqual(fieldStr(CustInvoiceJournalLineEntity, OffsetAccountType), LedgerJournalACType::Ledger));

        return _lineFilterBuilder.and(_lineFilter, lineFilter);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>