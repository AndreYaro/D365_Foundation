<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalAccountingEventSourceDocumentProcessorExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjAdvancedJournalAccountingEventSourceDocumentProcessorExtension</c> class handles creation of per line accounting events.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProjAdvancedJournal), SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal)]
public class ProjAdvancedJournalAccountingEventSourceDocumentProcessorExtension extends AccountingEventSourceDocumentProcessorExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccountingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>AccountingEvent</c> record for the specified source document with the specified accounting date, accounting type, and accounting event state.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The record identity of the <c>SourceDocumentHeader</c>.
    /// </param>
    /// <param name="_accountingDate">
    /// The new accounting date.
    /// </param>
    /// <param name="_accountingEventType">
    /// The accounting event type.
    /// </param>
    /// <param name="_accountingEventState">
    /// The new accounting event state.
    /// </param>
    /// <returns>
    /// Accounting event recId.
    /// </returns>
    public AccountingEventRecId createAccountingEvent(
        SourceDocumentHeaderRecId    _sourceDocumentHeaderId,
        AccountingDate               _accountingDate,
        AccountingEventType          _accountingEventType,
        AccountingEventState         _accountingEventState)

    {
        AccountingEvent accountingEvent;

        ttsbegin;

        //Insert any new accounting events that we need to create for the source document
        accountingEvent.SourceDocumentHeader    = _sourceDocumentHeaderId;
        accountingEvent.Type                    = _accountingEventType;
        accountingEvent.State                   = _accountingEventState;
        accountingEvent.AccountingDate          = _accountingDate;
        accountingEvent.insert();

        ttscommit;

        return accountingEvent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the accounting event source document processor extension events.
    /// </summary>
    protected void subscribe()
    {
        super();

        accountingEventSourceDocumentProcessor.creatingAccountingEvents += eventhandler(this.creatingAccountingEvents);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creatingAccountingEvents</Name>
				<Source><![CDATA[
    public void creatingAccountingEvents(
        SourceDocumentHeaderRecId       _sourceDocumentHeaderId,
        AccountingEventType             _accountingEventType,
        AccountingEventState            _accountingEventState)
    {
        SourceDocumentLine sourceDocumentLine;
        ProjAdvancedJournalLine projAdvancedJournalLine;

        while select sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderId
            join projAdvancedJournalLine where projAdvancedJournalLine.SourceDocumentLine == sourceDocumentLine.RecId
        {
            AccountingEventRecId accountingEventRecId = this.createAccountingEvent(_sourceDocumentHeaderId, projAdvancedJournalLine.AccountingDate, _accountingEventType, _accountingEventState);
            ProjAdvancedJournalAccountingEventSourceDocumentProcessorExtension::updateDistributionsForEvent(accountingEventRecId, projAdvancedJournalLine.AccountingDate, sourceDocumentLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionsForEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accounting event for the related distributions.
    /// </summary>
    /// <param name = "_accountingEventRecId">
    /// Accounting event recid.
    /// </param>
    /// <param name = "_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name = "_sourceDocumentRecId">
    /// Source document line recId.
    /// </param>
    public static void updateDistributionsForEvent(recId _accountingEventRecId, AccountingDate _accountingDate, recId _sourceDocumentRecId)
    {
        #OCCRetryCount

        AccountingDistribution      accountingDistribution;
        AccountingDistribution      accountingDistributionChild;
        AccountingDistribution      accountingDistributionParent;

        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(ProjAdvancedJournalAccountingEventSourceDocumentProcessorExtension));
        using (var activityContext = logger.projOpsManagementActivity().updateAccountingDistributionsContext())
        {
            activityContext.addCustomProperty(ProjOpsManagementInstrumentationActivities::Action, 'Updating distributions for event');
            
            try
            {
                ttsbegin;
                update_recordSet accountingDistribution
                    setting AccountingEvent = _accountingEventRecId
                    where accountingDistribution.AccountingDate == _accountingDate
                       && accountingDistribution.AccountingEvent == 0
                       && accountingDistribution.SourceDocumentLine == _sourceDocumentRecId;

                // update child distributions with this accounting event -- like tax distributions.
                update_recordSet accountingDistributionChild
                    setting AccountingEvent = accountingDistributionParent.AccountingEvent
                        where accountingDistributionChild.AccountingEvent == 0
                    join accountingDistributionParent
                        where accountingDistributionParent.RecId == accountingDistributionChild.ParentDistribution
                            && accountingDistributionParent.AccountingEvent != 0
                            && accountingDistributionParent.SourceDocumentLine == _sourceDocumentRecId;

                // Updates GST child distribution with this accounting event.
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    TaxGSTProjAdvancedJournalUtils::updateChildDistributionsForEvent(_accountingEventRecId, _accountingDate, _sourceDocumentRecId);
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                int currRetryCount = xSession::currentRetryCount();
                if (currRetryCount >= #RetryNum)
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::Deadlock, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    throw Exception::Deadlock;
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", 'Deadlock - retrying', currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                int currRetryCount = xSession::currentRetryCount();
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::UpdateConflictNotRecovered, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", 'Update conflict - retrying', currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                        retry;
                    }
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::UpdateConflict, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                int currRetryCount = xSession::currentRetryCount();
                if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::TransientSqlConnectionError, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                int currRetryCount = xSession::currentRetryCount();
                logger.logInformation(strFmt("@Proj:ProjAdvancedJournalAccountingDistributionError", Exception::Error, currRetryCount, _accountingEventRecId, _sourceDocumentRecId));
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>