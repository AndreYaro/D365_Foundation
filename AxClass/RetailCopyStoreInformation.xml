<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCopyStoreInformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCopyStoreInformation</c> class is used for copying the store informations.
/// </summary>
class RetailCopyStoreInformation extends RunBaseBatch implements BatchRetryable
{
    RetailStoreTable     storeTable;
    RetailStoreId        storeIdf;
    RetailStoreId        storeIdt;
    DialogRunbase     dialog;
    RetailCopyStoreInfo  _type;

    DialogField     fieldStoreIdFrom;
    DialogField     fieldStoreIdTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface. In this method the 'FromStore' and 'ToStore'
    /// fields added to <c>fieldStoreIdFrom</c> and <c>fieldStoreIdTo</c>.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    Object dialog()
    {
        ;

        dialog = super();

        dialog.formBuildDesign().dialogSize(0);
        dialog.caption(enum2str(_type));

        dialog.addGroup("@RET4227");
        fieldStoreIdFrom = dialog.addField(extendedtypestr(RetailStoreId),"@RET4216");
        fieldStoreIdTo = dialog.addFieldValue(extendedtypestr(RetailStoreId),storeidt,"@RET4217");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes the <c>storeIdf</c> and <c>storeIdt</c> with the information of 'FromStore' and 'ToStore'. If both are existing then method
    /// returns the super method; else throws error.
    /// </summary>
    /// <returns>
    /// super methos if value in <c>storeIdf</c> and <c>storeIdt</c> exist; else error.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error if either <c>storeIdf</c> or <c>storeIdt</c> is blank.
    /// </exception>
    boolean getFromDialog()
    {
        ;

        storeIdf = fieldStoreIdFrom.value();
        storeIdt = fieldStoreIdTo.value();

        if (storeIdf && storeIdt)
        {
            return super();
        }
        else
        {
            throw error ("@RET4219");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes the <c>_type</c> with the args.parmEnum and <c>storeTable</c> with the args record. <c>storeIdt</c> is initialized wih the value
    /// of storetable.storeId field.
    /// </summary>
    /// <param name="_args">
    /// Args class to pass the arguments.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws error if the call is for wrong class.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws error if the call is for wrong class.
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.dataset())
        {
            if (_args.dataset() == tablenum(RetailStoreTable))
            {
                _type    = _args.parmEnum();
                storeTable = _args.record();
                storeIdt = storetable.StoreNumber;
            }
            else
                throw error ("@RET4123");
        }
        else
        {
            throw error ("@RET4123");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RBOCopyIncomeExpenseAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops <c>RetailIncomeExpenseAccountTable</c> table and finds the record in <c>RetailIncomeExpenseAccountTable</c>, if the record does not
    /// exist then new record is created in <c>RetailIncomeExpenseAccountTable</c> table having RetailIncomeExpenseAccountTable.storeId as <c>_storeIdNew</c>;
    /// else updates the record.
    /// Method loops <c>RetailInfocodeTableSpecific</c> table and finds the record in <c>RetailInfocodeTableSpecific</c>, if the record does not exist then
    /// new record is created in <c>RetailInfocodeTableSpecific</c> table having RetailInfocodeTableSpecific.storeId as <c>_storeIdNew</c>; else updates the record.
    /// </summary>
    /// <param name="_storeId">
    /// ID of the RetailIncomeExpenseAccountTable.storeId field.
    /// ID of the RetailInfocodeTableSpecific.storeId field.
    /// </param>
    /// <param name="_storeIdNew">
    /// ID of the RetailIncomeExpenseAccountTable.storeId field.
    /// ID of the RetailInfocodeTableSpecific.storeId field.
    /// </param>
    void RBOCopyIncomeExpenseAccount(RetailStoreId _storeId,RetailStoreId _storeIdNew)
    {
        RetailIncomeExpenseAccountTable    rboIncomeExpenseOld;
        RetailIncomeExpenseAccountTable    rboIncomeExpenseNew;
        RetailInfocodeTableSpecific     rboInfocodeTableSpecificOld;
        RetailInfocodeTableSpecific     rboInfocodeTableSpecificNew;

        ttsbegin;

        while select rboIncomeExpenseold
            where (rboIncomeExpenseold.storeId == _storeId)
        {
            rboIncomeExpensenew = RetailIncomeExpenseAccountTable::find(_storeIdNew, rboIncomeExpenseOld.accountNum, true);
            if (!rboIncomeExpensenew)
            {
                buf2buf(rboIncomeExpenseOld,rboIncomeExpenseNew);
                rboIncomeExpenseNew.storeId = _storeIdNew;
                rboIncomeExpenseNew.insert();
            }
            else
            {
                buf2buf(rboIncomeExpenseOld,rboIncomeExpenseNew);
                rboIncomeExpenseNew.storeId = _storeIdNew;
                rboIncomeExpenseNew.update();
            }
        }

        while select rboInfocodeTableSpecificold
          where (rboInfocodeTableSpecificold.refRelation == _storeId)
             && (rboInfocodeTableSpecificold.refTableId == RetailInfocodeRefTableIdBase::RetailIncomeExpenseAccountTable)
        {
            rboInfocodeTableSpecificnew = RetailInfocodeTableSpecific::find(rboInfocodeTableSpecificOld.refTableId,
                                                                         _storeIdNew,
                                                                         rboInfocodeTableSpecificOld.infoCodeId,
                                                                         rboInfocodeTableSpecificOld.refRelation2,
                                                                         rboInfocodeTableSpecificOld.refRelation3,
                                                                         true);
            if (!rboInfocodeTableSpecificnew)
            {
                buf2buf(rboInfocodeTableSpecificOld,rboInfocodeTableSpecificNew);
                rboInfocodeTableSpecificNew.refRelation = _storeIdNew;
                rboInfocodeTableSpecificNew.insert();
            }
            else
            {
                buf2buf(rboInfocodeTableSpecificOld,rboInfocodeTableSpecificNew);
                rboInfocodeTableSpecificNew.refRelation = _storeIdNew;
                rboInfocodeTableSpecificNew.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RBOCopyWorkShift</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops <c>RetailWorkShiftSetup</c> table and finds the record for the ID <c>_storeIdNew</c> and RetailWorkShiftSetup.workShiftId, if the
    /// record does not exist then new record is created in <c>RetailWorkShiftSetup</c> table having RetailWorkShiftSetup.storeId as <c>_storeIdNew</c>;
    /// else updates the record.
    /// </summary>
    /// <param name="_storeId">
    /// ID of the RetailWorkShiftSetup.storeId field.
    /// </param>
    /// <param name="_storeIdNew">
    /// ID of the RetailWorkShiftSetup.storeId field.
    /// </param>
    void RBOCopyWorkShift(RetailStoreId _storeId,RetailStoreId _storeIdNew)
    {
        recId storeRecId, storeRecIdNew;
        RetailWorkShiftSetup    rboworkshiftsetupold;
        RetailWorkShiftSetup    rboworkshiftsetupnew;

        ttsbegin;

        storeRecId = RetailStoreTable::find(_storeId).RecId;
        storeRecIdNew = RetailStoreTable::find(_storeIdNew).RecId;

        while select rboworkshiftsetupold
            where (rboworkshiftsetupold.StoreRecId == storeRecId)
        {
            rboworkshiftsetupnew = RetailWorkShiftSetup::find(storeRecIdNew, rboworkshiftsetupold.workShiftId, true);
            if (!rboworkshiftsetupnew)
            {
                buf2buf(rboworkshiftsetupold,rboworkshiftsetupnew);
                rboworkshiftsetupnew.StoreRecId = storeRecIdNew;
                rboworkshiftsetupnew.insert();
            }
            else
            {
                buf2buf(rboworkshiftsetupold,rboworkshiftsetupnew);
                rboworkshiftsetupnew.StoreRecId = storeRecIdNew;
                rboworkshiftsetupnew.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCopySection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops <c>RetailStoreSection</c> table and finds the record for the ID <c>_storeIdNew</c> and RetailStoreSection.sectionId, if the
    /// record does not exist then new record is created in <c>RetailStoreSection</c> table having RetailStoreSection.storeId as <c>_storeIdNew</c>;
    /// else updates the record.
    /// Method loops <c>RetailStoreShelf</c> table and finds the record for the ID <c>_storeIdNew</c>, RetailStoreShelf.sctionId and RetailStoreSection.shelfId,
    /// if the record does not exist then new record is created in <c>RetailStoreShelf</c> table having RetailStoreShelf.storeId as <c>_storeIdNew</c>;
    /// else updates the record.
    /// </summary>
    /// <param name="_storeId">
    /// ID of the RetailStoreSection.storeId field.
    /// ID of the RetailStoreShelf.storeId field.
    /// </param>
    /// <param name="_storeIdNew">
    /// ID of the RetailStoreSection.storeId field.
    /// ID of the RetailStoreShelf.storeId field.
    /// </param>
    void RetailCopySection(RetailStoreId _storeId,RetailStoreId _storeIdNew)
    {
        RetailStoreSection    rboStoreSectionOld;
        RetailStoreSection    rboStoreSectionNew;
        RetailStoreShelf      rboStoreShelfOld;
        RetailStoreShelf      rboStoreShelfNew;

        ttsbegin;

        while select rboStoreSectionold
            where (rboStoreSectionold.storeId == _storeId)
        {
            rboStoreSectionnew = RetailStoreSection::find(_storeIdNew, rboStoreSectionOld.sectionId, true);
            if (!rboStoreSectionnew)
            {
                buf2buf(rboStoreSectionOld,rboStoreSectionNew);
                rboStoreSectionNew.storeId = _storeIdNew;
                rboStoreSectionNew.insert();
            }
            else
            {
                buf2buf(rboStoreSectionOld,rboStoreSectionNew);
                rboStoreSectionNew.storeId = _storeIdNew;
                rboStoreSectionNew.update();
            }
        }

        while select rboStoreShelfold
            where (rboStoreShelfold.storeId == _storeId)
        {
            rboStoreshelfnew = RetailStoreShelf::find(_storeIdNew, rboStoreShelfOld.sectionId, rboStoreShelfOld.shelfId, true);
            if (!rboStoreShelfnew)
            {
                buf2buf(rboStoreShelfOld,rboStoreShelfNew);
                rboStoreShelfNew.storeId = _storeIdNew;
                rboStoreShelfNew.insert();
            }
            else
            {
                buf2buf(rboStoreShelfOld,rboStoreShelfNew);
                rboStoreShelfNew.storeId = _storeIdNew;
                rboStoreShelfNew.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCopyStoreCashDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops <c>RetailStoreCashDeclarationTable</c> table and finds the record for the ID <c>_storeIdNew</c>, RetailStoreCashDeclarationTable.currency,
    /// RetailStoreCashDeclarationTable.type, RetailStoreCashDeclarationTable.amount if the record does not exist then new record is created in
    /// <c>RetailStoreCashDeclarationTable</c> table having RetailStoreCashDeclarationTable.storeId as <c>_storeIdNew</c>; else updates the record.
    /// </summary>
    /// <param name="_storeId">
    /// ID of the RetailStoreCashDeclarationTable.storeId field.
    /// </param>
    /// <param name="_storeIdNew">
    /// ID of the RetailStoreCashDeclarationTable.storeId field.
    /// </param>
    void RetailCopyStoreCashDeclaration(RetailStoreId _storeId,RetailStoreId _storeIdNew)
    {
        RetailStoreCashDeclarationTable    rboStoreCashDeclarationOld;
        RetailStoreCashDeclarationTable    rboStoreCashDeclarationNew;

        ttsbegin;

        while select rboStoreCashDeclarationold
            where (rboStoreCashDeclarationold.storeId == _storeId)
        {
            rboStoreCashDeclarationnew = RetailStoreCashDeclarationTable::find(_storeIdNew, rboStoreCashDeclarationOld.currency, rboStoreCashDeclarationOld.type, rboStoreCashDeclarationOld.amount, true);
            if (!rboStoreCashDeclarationnew)
            {
                buf2buf(rboStoreCashDeclarationOld,rboStoreCashDeclarationNew);
                rboStoreCashDeclarationNew.storeId = _storeIdNew;
                rboStoreCashDeclarationNew.insert();
            }
            else
            {
                buf2buf(rboStoreCashDeclarationOld,rboStoreCashDeclarationNew);
                rboStoreCashDeclarationNew.storeId = _storeIdNew;
                rboStoreCashDeclarationNew.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCopyStoreTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops <c>RetailStoreTenderTypeTable</c> table and finds the record in <c>RetailStoreTenderTypeTable</c>, if the record does not exist then
    /// new record is created in <c>RetailStoreTenderTypeTable</c> table having RetailStoreTenderTypeTable.storeId as <c>_storeIdNew</c>; else updates the record.
    /// Method loops <c>RetailInfocodeTableSpecific</c> table and finds the record in <c>RetailInfocodeTableSpecific</c>, if the record does not exist then
    /// new record is created in <c>RetailInfocodeTableSpecific</c> table having RetailInfocodeTableSpecific.storeId as <c>_storeIdNew</c>; else updates the record.
    /// Method loops <c>RetailStoreTenderTypeCardTable</c> table and finds the record in <c>RetailStoreTenderTypeCardTable</c>, if the record does not exist then
    /// new record is created in <c>RetailStoreTenderTypeCardTable</c> table having RetailStoreTenderTypeCardTable.storeId as <c>_storeIdNew</c>; else updates the record.
    /// </summary>
    /// <param name="_storeId">
    /// ID of the RetailStoreTenderTypeTable.storeId field.
    /// ID of the RetailInfocodeTableSpecific.storeId field.
    /// ID of the RetailStoreTenderTypeCardTable.storeId field.
    /// </param>
    /// <param name="_storeIdNew">
    /// ID of the RetailStoreTenderTypeTable.storeId field.
    /// ID of the RetailInfocodeTableSpecific.storeId field.
    /// ID of the RetailStoreTenderTypeCardTable.storeId field.
    /// </param>
    void RetailCopyStoreTender(RetailStoreId _storeId,RetailStoreId _storeIdNew)
    {
        RefRecId                        oldStoreRecId = RetailStoreTable::find(_storeId).RecId,
                                        newStoreRecId = RetailStoreTable::find(_storeIdNew).RecId;

        RetailCopyStoreInformation::copyStoreTender(oldStoreRecId, newStoreRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyStoreTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops <c>RetailStoreTenderTypeTable</c> table and finds the record in <c>RetailStoreTenderTypeTable</c>, if the record does not exist then
    /// new record is created in <c>RetailStoreTenderTypeTable</c> table having RetailStoreTenderTypeTable.storeId as <c>_storeIdNew</c>; else updates the record.
    /// Method loops <c>RetailInfocodeTableSpecific</c> table and finds the record in <c>RetailInfocodeTableSpecific</c>, if the record does not exist then
    /// new record is created in <c>RetailInfocodeTableSpecific</c> table having RetailInfocodeTableSpecific.storeId as <c>_storeIdNew</c>; else updates the record.
    /// Method loops <c>RetailStoreTenderTypeCardTable</c> table and finds the record in <c>RetailStoreTenderTypeCardTable</c>, if the record does not exist then
    /// new record is created in <c>RetailStoreTenderTypeCardTable</c> table having RetailStoreTenderTypeCardTable.storeId as <c>_storeIdNew</c>; else updates the record.
    /// </summary>
    /// <param name="_srcChannelRecId">
    /// The RecId of the the RetailChannelTable of the source channel which provides the payment methods.
    /// </param>
    /// <param name="_dstChannelRecId">
    /// The RecId of the the RetailChannelTable of the destination channel which provides the payment methods.
    /// </param>
    internal static void copyStoreTender(RetailChannelRecId _srcChannelRecId, RetailChannelRecId _dstChannelRecId)
    {
        RetailStoreTenderTypeTable      rboStoreTenderOld;
        RetailStoreTenderTypeTable      rboStoreTenderNew;
        RetailChannelCurrency           retailChannelCurrencyOld, retailChannelCurrencyNew;
        RetailChannelTable              srcChannel = RetailChannelTable::findByRecId(_srcChannelRecId);
        RetailChannelTable              dstChannel = RetailChannelTable::findByRecId(_dstChannelRecId);

        ttsbegin;

        // Copy currency code if Currency code does not exist in target channel.
        insert_recordset retailChannelCurrencyNew(Channel, CurrencyCode)
        select _dstChannelRecId, CurrencyCode from retailChannelCurrencyOld
            where retailChannelCurrencyOld.Channel == _srcChannelRecId
            notexists join retailChannelCurrencyNew
                where retailChannelCurrencyNew.Channel == _dstChannelRecId &&
                retailChannelCurrencyNew.CurrencyCode == retailChannelCurrencyOld.CurrencyCode;

        while select rboStoreTenderold
            where rboStoreTenderold.Channel == _srcChannelRecId
        {
            rboStoreTendernew = RetailStoreTenderTypeTable::find(_dstChannelRecId, rboStoreTenderOld.tenderTypeId, true);
            if (!rboStoreTendernew)
            {
                buf2buf(rboStoreTenderOld,rboStoreTenderNew);
                rboStoreTenderNew.Channel = _dstChannelRecId;
                rboStoreTenderNew.insert();
            }
            else
            {
                buf2buf(rboStoreTenderOld,rboStoreTenderNew);
                rboStoreTenderNew.Channel = _dstChannelRecId;
                rboStoreTenderNew.update();
            }
        }

        if (srcChannel is RetailStoreTable && dstChannel is RetailStoreTable)
        {
            RetailStoreTable srcStore = srcChannel as RetailStoreTable;
            RetailStoreTable dstStore = dstChannel as RetailStoreTable;

            RetailCopyStoreInformation::copyRetailInfocodeTableSpecific(
                srcStore.StoreNumber, dstStore.StoreNumber, RetailInfocodeRefTableIdBase::RetailStoreTenderTypeTable);

            RetailCopyStoreInformation::copyRetailStoreTenderTypeCardTable(_srcChannelRecId, _dstChannelRecId);

            RetailCopyStoreInformation::copyRetailInfocodeTableSpecific(
                srcStore.StoreNumber, dstStore.StoreNumber, RetailInfocodeRefTableIdBase::RetailStoreTenderTypeCardTable);
        }
        else
        {
            RetailCopyStoreInformation::copyRetailStoreTenderTypeCardTable(_srcChannelRecId, _dstChannelRecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for copying the <c>Tender</c>, <c>IncomeExpense</c>, <c>Section</c>, <c>Cash declaration</c>, <c>Workshift</c> and all other store
    /// informations.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws error if the <c>_type</c> is different.
    /// </exception>
    void run()
    {
        RetailStoreTable            retailStoreCopyFrom;
        boolean                     acrossLE = false;

        // Copy store info across LE is not supported
        select inventLocationDataAreaId from retailStoreCopyFrom
            where retailStoreCopyFrom.StoreNumber == storeidf;

        acrossLE = retailStoreCopyFrom.inventLocationDataAreaId != curext();

        if (acrossLE)
        {
            throw error("@REX4520230");
        }

        Switch(_Type)
        {
        //Tender
            case 0 :
               this.RetailCopyStoreTender(storeidf,storeidt);
               break;
        //IncomeExpense
            case 1 :
                this.RBOCopyIncomeExpenseAccount(storeidf,storeidt);
                break;
        //Section
            case 2 :
                this.RetailCopySection(storeidf,storeidt);
                break;
        //Cash declartation
            case 3 :
                this.RetailCopyStoreCashDeclaration(storeidf,storeidt);
                break;
        // Workshift
            case 4 :
                this.RBOCopyWorkShift(storeidf,storeidt);
                break;
        // Copy all StoreInfo
            case 5 :
                this.RBOCopyIncomeExpenseAccount(storeidf,storeidt);
                this.RetailCopyStoreCashDeclaration(storeIdf,storeidt);
                this.RetailCopySection(storeidf,storeidt);
                this.RetailCopyStoreTender(storeidf,storeidt);
                this.RBOCopyWorkShift(storeidf,storeidt);
                break;
            default :
                throw error("@RET4220");
        }
        info("@REX4520991");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;

        ret = super(packedClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes the new instance of <c>RetailCopyStoreInformation</c> class.
    /// </summary>
    /// <param name="args">
    /// Args class to pass the arguments.
    /// </param>
    /// <remarks>
    /// RetailCopyStoreInformation.initFromArgs method initializes the <c>_type</c> with the args.parmEnum and <c>storeTable</c> with the args record.
    /// <c>storeIdt</c> is initialized wih the value of storetable.storeId field.
    /// RetailCopyStoreInformation.init method returns either true/false based on the <c>boolean</c> value returned on the call of the super method.
    /// RetailCopyStoreInformation.prompt method prompts with the dialog for user interaction.
    /// RetailCopyStoreInformation.run method is used for copying the store information.
    /// </remarks>
    public static void main(args args)
    {
        RetailCopyStoreInformation rboCopyStoreInformation = new RetailCopyStoreInformation();
        ;

        rboCopyStoreInformation.initFromArgs(args);
        rboCopyStoreInformation.init();

        if (rboCopyStoreInformation.prompt())
            rboCopyStoreInformation.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRetailStoreTenderTypeCardTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy RetailStoreTenderTypeCardTable.
    /// </summary>
    /// <param name = "_srcChannelRecId">The RecId of the source RetailChannelTable associated with RetailStoreTenderTypeCardTable.</param>
    /// <param name = "_dstChannelRecId">The RecId of the destination RetailChannelTable associated with RetailStoreTenderTypeCardTable.</param>
    private static void copyRetailStoreTenderTypeCardTable(RetailChannelRecId _srcChannelRecId, RetailChannelRecId _dstChannelRecId)
    {
        RetailStoreTenderTypeCardTable rboStoreTenderTypeCardOld;
        RetailStoreTenderTypeCardTable rboStoreTenderTypeCardNew;

        while select rboStoreTenderTypeCardOld
            where (rboStoreTenderTypeCardOld.Channel == _srcChannelRecId)
        {
            rboStoreTenderTypeCardnew = RetailStoreTenderTypeCardTable::find(_dstChannelRecId, rboStoreTenderTypeCardOld.tenderTypeId, rboStoreTenderTypeCardOld.cardTypeId, true);
            if (!rboStoreTenderTypeCardnew)
            {
                buf2buf(rboStoreTenderTypeCardOld,rboStoreTenderTypeCardNew);
                rboStoreTenderTypeCardNew.Channel = _dstChannelRecId;
                rboStoreTenderTypeCardNew.insert();
            }
            else
            {
                buf2buf(rboStoreTenderTypeCardOld,rboStoreTenderTypeCardNew);
                rboStoreTenderTypeCardNew.Channel = _dstChannelRecId;
                rboStoreTenderTypeCardNew.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRetailInfocodeTableSpecific</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy RetailInfocodeTableSpecific.
    /// </summary>
    /// <param name = "_srcStoreNumber">The source store number.</param>
    /// <param name = "_dstStoreNumber">The destination store number.</param>
    /// <param name = "_infocodeRefTableIdBase">The type of info code.</param>
    private static void copyRetailInfocodeTableSpecific(RetailStoreId _srcStoreNumber, RetailStoreId _dstStoreNumber, RetailInfocodeRefTableIdBase _infocodeRefTableIdBase)
    {
        RetailInfocodeTableSpecific rboInfocodeTableSpecificOld;
        RetailInfocodeTableSpecific rboInfocodeTableSpecificNew;

        while select rboInfocodeTableSpecificOld
                where (rboInfocodeTableSpecificOld.refRelation == _srcStoreNumber)
                    && (rboInfocodeTableSpecificOld.refTableId == _infocodeRefTableIdBase)
        {
            rboInfocodeTableSpecificnew = RetailInfocodeTableSpecific::find(rboInfocodeTableSpecificOld.refTableId,
                                                                            _dstStoreNumber,
                                                                            rboInfocodeTableSpecificOld.infoCodeId,
                                                                            rboInfocodeTableSpecificOld.refRelation2,
                                                                            rboInfocodeTableSpecificOld.refRelation3,
                                                                            true);
            if (!rboInfocodeTableSpecificNew)
            {
                buf2buf(rboInfocodeTableSpecificOld,rboInfocodeTableSpecificNew);
                rboInfocodeTableSpecificNew.refRelation = _dstStoreNumber;
                rboInfocodeTableSpecificNew.insert();
            }
            else
            {
                buf2buf(rboInfocodeTableSpecificOld,rboInfocodeTableSpecificNew);
                rboInfocodeTableSpecificNew.refRelation = _dstStoreNumber;
                rboInfocodeTableSpecificNew.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>