<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentGeneralValidations_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Validates fiscal document contents against specific rules that may prevent it from being persisted.
/// </summary>
/// <remarks>
///     Validation is executed against the Fiscal Document object model (whose root class is <c>FiscalDocumentParmData_BR</c>).
///     Each validation method must be decorated with a <c>FiscalDocumentValidationElementAttribute</c> attribute class.
///     <c>FiscalDocumentValidationElementAttribute</c> may receive an optional parameter of type <c>FiscalDocumentClassification_BR</c> which
///     determines the type of Fiscal Document for which that specific validation method applies to.
///     Another type of attribute may be used to decorate a validation method: the <c>FiscalDocumentValidationElementAttribute</c> can be used to
///     specify the Fiscal Document element that is being validated by the method. The <c>FiscalDocumentElement_BR</c> base enum is used
///     to indicate the different elements that can be validated.
///     This class contains validations applicable for any Fiscal Document model.
///     Validations specific to electronic fiscal documents (NF-e) are kept in class <c>EFiscalDocumentValidation_BR</c>.
///     All validation methods are supposed to log descriptive error messages to be presented to the user.
/// </remarks>
public class FiscalDocumentGeneralValidations_BR extends FiscalDocumentValidationBase_BR
{
    #FiscalDocumentModels_BR
    private NoYesUnchanged validateBenefitCodes;
    private NoYesUnchanged validateBenefitCodeWithTaxationCode;
    private NoYesUnchanged validateBenefitCodeEnabled;
    private FiscalEstablishment_BR fe;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>charges_Siscomex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a miscellaneous charge of type siscomex is valid.
    /// </summary>
    /// <returns>
    /// True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::MiscCharges)
    ]
    public boolean charges_Siscomex()
    {
        if (this.parmFiscalDocumentMiscChargeParmData().parmType()  == MarkupClassification_BR::SISCOMEX
            &&  !this.parmFiscalDocumentParmData().parmImportDeclaration())
        {
            logger.logError("@SYS4000791");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_CarrierCNPJDifferentFromIssuerCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the carrier CNPJ different from issuer CNPJ.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_CarrierCNPJDifferentFromIssuerCNPJ()
    {
        boolean ret = true;

        FiscalEstablishment_BR fiscalEstablishment_BR = this.getFiscalEstablishment();

        if (fiscalEstablishment_BR.EFDocNFeTechNotes < EFDocNFeTechNotes_BR::NFe402021004v131)
        {
            SalesCarrier salesCarrier;

            select firstonly salesCarrier
                where salesCarrier.RecId == fiscalDocumentParmData.parmSalesCarrier();

            if (this.getFiscalEstablishment().checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2021004v100)
                && FiscalDocumentHelper::getFreightTermsIntValue(fiscalDocumentParmData.parmFreightChargeTerms()) != 3
                && fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing
                && salesCarrier.CNPJCPFNum_BR
                && salesCarrier.CNPJCPFNum_BR == fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF())
            {
                logger.logError("@NFE:CarrierCNPJDifferentFromIssuerCNPJ");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_CarrierCNPJDifferentFromReceiverCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the carrier CNPJ different from receiver CNPJ.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_CarrierCNPJDifferentFromReceiverCNPJ()
    {
        boolean ret = true;

        FiscalEstablishment_BR fiscalEstablishment_BR = this.getFiscalEstablishment();

        if (fiscalEstablishment_BR.EFDocNFeTechNotes < EFDocNFeTechNotes_BR::NFe402021004v131)
        {
            SalesCarrier salesCarrier;

            select firstonly salesCarrier
                where salesCarrier.RecId == fiscalDocumentParmData.parmSalesCarrier();

            if (this.getFiscalEstablishment().checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2021004v100)
                && ((FiscalDocumentHelper::getFreightTermsIntValue(fiscalDocumentParmData.parmFreightChargeTerms()) != 3
                && fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming)
                || (FiscalDocumentHelper::getFreightTermsIntValue(fiscalDocumentParmData.parmFreightChargeTerms()) != 4
                && fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing))
                && salesCarrier.CNPJCPFNum_BR
                && salesCarrier.CNPJCPFNum_BR == fiscalDocumentParmData.parmDeliveryCNPJCPF())
            {
                logger.logError("@NFE:CarrierCNPJDifferentFromReceiverCNPJ");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_CarrierCNPJValidationRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the carrier CNPJ different from receiver or issuer CNPJ (NF-e NT2021.004 v1.31).
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_CarrierCNPJValidationRules()
    {
        boolean ret = true;

        FiscalEstablishment_BR fiscalEstablishment_BR = this.getFiscalEstablishment();
        int freightTermsIntValue = FiscalDocumentHelper::getFreightTermsIntValue(fiscalDocumentParmData.parmFreightChargeTerms());

        if (fiscalEstablishment_BR.EFDocNFeTechNotes >= EFDocNFeTechNotes_BR::NFe402021004v131
            && fiscalEstablishment_BR.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2021004v131)
            && freightTermsIntValue != EFDocConstants_BR::FiscalDocumentFreightTerms_NofreightInt)
        {
            SalesCarrier salesCarrier;

            select firstonly CNPJCPFNum_BR from salesCarrier
                where salesCarrier.RecId == fiscalDocumentParmData.parmSalesCarrier();

            FiscalDocDirection_BR tpNFDirection = fiscalDocumentParmData.parmDirection();

            switch (tpNFDirection)
            {
                case FiscalDocDirection_BR::Outgoing:
                    // Validation rule X04-50
                    if (this.compareBaseCNPJ(salesCarrier.CNPJCPFNum_BR, fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF())
                        && !conFind(EFDocConstants_BR::IssuerCNPJValidationRuleRanges, freightTermsIntValue))
                    {
                        logger.logError("@NFE:IssuerCNPJValidationRuleMessage");
                        ret = false;
                    }

                    // Validation rule X04-90
                    if (this.compareBaseCNPJ(salesCarrier.CNPJCPFNum_BR, fiscalDocumentParmData.parmThirdPartyCNPJCPF())
                        && !conFind(EFDocConstants_BR::ReceiverCNPJValidationRuleRanges, freightTermsIntValue))
                    {
                        logger.logError("@NFE:ReceiverCNPJValidationRuleMessage");
                        ret = false;
                    }
                    break;

                case FiscalDocDirection_BR::Incoming:
                    FiscalDocumentPurpose_BR purpose = fiscalDocumentParmData.parmPurpose();
                    if (purpose == FiscalDocumentPurpose_BR::Return)
                    {
                        // Validation rule X04-60
                        if (this.compareBaseCNPJ(salesCarrier.CNPJCPFNum_BR, fiscalDocumentParmData.parmThirdPartyCNPJCPF())
                            && !conFind(EFDocConstants_BR::IssuerCNPJValidationRuleRanges, freightTermsIntValue))
                        {
                            logger.logError("@NFE:ReceiverCNPJValidationRuleMessage");
                            ret = false;
                        }

                        // Validation rule X04-100 (Inbound sales return)
                        if (this.compareBaseCNPJ(salesCarrier.CNPJCPFNum_BR, fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF())
                            && !conFind(EFDocConstants_BR::ReceiverCNPJValidationRuleRanges, freightTermsIntValue))
                        {
                            logger.logError("@NFE:IssuerCNPJValidationRuleMessage");
                            ret = false;
                        }
                    }
                    else
                    {
                        ListEnumerator fiscalDocumentLines = this.parmFiscalDocumentParmData().parmLines().getEnumerator();

                        if (fiscalDocumentLines.moveNext())
                        {
                            FiscalDocumentLineParmData_BR fiscalDocumentLine = fiscalDocumentLines.current();
                            CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(fiscalDocumentLine.parmCFOP());

                            // Validation rule X04-100 (Direct Import scenario)
                            if (purpose == FiscalDocumentPurpose_BR::Regular
                                && cfopTable.CustVendLocation == CustVendLocation_BR::OutsideCountry
                                && this.compareBaseCNPJ(salesCarrier.CNPJCPFNum_BR, fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF())
                                && !conFind(EFDocConstants_BR::ReceiverCNPJValidationRuleRanges, freightTermsIntValue))
                            {
                                logger.logError("@NFE:IssuerCNPJValidationRuleMessage");
                                ret = false;
                            }
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareBaseCNPJ</Name>
				<Source><![CDATA[
    private boolean compareBaseCNPJ(CNPJCPFNUm_BR _fromCNPJ, CNPJCPFNUm_BR _toCNPJ)
    {
        boolean ret = false;

        if (_fromCNPJ && _toCNPJ)
        {
            CNPJCPFNUm_BR fromBaseCNPJ = subStr(strKeep(_fromCNPJ, '0123456789'), 1, 8);
            CNPJCPFNUm_BR toBaseCNPJ = subStr(strKeep(_toCNPJ, '0123456789'), 1, 8);

            ret = (fromBaseCNPJ == toBaseCNPJ) ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_CFOPFirstNumbersAreTheSame</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether all non-empty CFOPs start with the same number.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_CFOPFirstNumbersAreTheSame()
    {
        ListEnumerator                  leLines;
        FiscalDocumentLineParmData_BR   line;
        Set                             cfopFirstNumbers = new Set(Types::String);

        leLines = this.parmFiscalDocumentParmData().parmLines().getEnumerator();

        while (leLines.moveNext())
        {
            line = leLines.current();
            if (line.parmCFOP())
            {
                cfopFirstNumbers.add(subStr(line.parmCFOP(), 1, 1));
            }
        }

        if (cfopFirstNumbers.elements() > 1)
        {
            logger.logError("@GLS220085");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_CnpjNotBlankOnFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the Fiscal Establishment CNJP/CPF is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_CnpjNotBlankOnFiscalEstablishment()
    {
        if (!this.parmFiscalDocumentParmData().parmFiscalEstablishmentCNPJCPF())
        {
            logger.logError("@GLS64217");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_CnpjNotBlankWhenNotForeign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the account CNJP/CPF is not empty.
    /// </summary>
    /// <remarks>
    ///     This validation does not apply to foreign accounts nor to Retail consumers.
    /// </remarks>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_CnpjNotBlankWhenNotForeign()
    {
        if (this.parmFiscalDocumentParmData().isRetailConsumerDocument())
        {
            return true;
        }

        if (!this.parmFiscalDocumentParmData().isForeignOperation()
            && !this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF())
        {
            logger.logError(strFmt("@GLS64213",
                this.parmFiscalDocumentParmData().parmFiscalDocumentAccountType(),
                this.parmFiscalDocumentParmData().parmFiscalDocumentAccountNum()));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_FiscalDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the fiscal document date is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_FiscalDocumentDate()
    {
        str msg;

        if (!fiscalDocumentParmData.parmFiscalDocumentDate())
        {
            msg = strFmt("@SYS84378", fieldPName(FiscalDocument_BR, FiscalDocumentDate));
            logger.logError(msg);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_FiscalDocumentNumberFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the fiscal document number contains only digits.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_FiscalDocumentNumberFormat()
    {
        InvoiceId fiscalDocumentNumber = this.parmFiscalDocumentParmData().parmFiscalDocumentNumber();

        if (strKeep(fiscalDocumentNumber, '0123456789') != fiscalDocumentNumber)
        {
            logger.logError("@GLS64233");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_FiscalDocumentNumberIsMandantory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the fiscal document number is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_FiscalDocumentNumberIsMandantory()
    {
        if (this.parmFiscalDocumentParmData().parmIsProForma())
        {
            return true;
        }

        if (!this.parmFiscalDocumentParmData().parmFiscalDocumentNumber())
        {
            logger.logError("@GLS222118");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_FiscalEstablishmentNameNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the fiscal establishment name is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_FiscalEstablishmentNameNotEmpty()
    {
        if (!this.parmFiscalDocumentParmData().parmFiscalEstablishmentName())
        {
            logger.logError("@GLS64222");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_FiscalEstablishmentPrimaryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the Fiscal Establishment address is complete.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_FiscalEstablishmentPrimaryAddress()
    {
        LogisticsPostalAddress  logisticsPostalAddress;

        logisticsPostalAddress = logisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());

        if (!logisticsPostalAddress.Street
            || !logisticsPostalAddress.StreetNumber
            || !logisticsPostalAddress.City
            || !logisticsPostalAddress.ZipCode)
        {
            logger.logError("@GLS64224");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_FiscalEstablishmentStateSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the fiscal establishment address state has two digits.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_FiscalEstablishmentStateSize()
    {
        LogisticsPostalAddress  logisticsPostalAddress;

        logisticsPostalAddress = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());

        if (strLen(logisticsPostalAddress.State) != 2)
        {
            logger.logError("@GLS64225");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_IENotBlankOnFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the Fiscal Establishment IE number is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_IENotBlankOnFiscalEstablishment()
    {
        if (!this.parmFiscalDocumentParmData().parmFiscalEstablishmentIE())
        {
            logger.logError("@GLS64218");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_IENumFormatOnFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the Fiscal Establishment IE number is valid.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_IENumFormatOnFiscalEstablishment()
    {
        LogisticsPostalAddress fiscalEstablishmentPostalAddress;
        str ieNum = this.parmFiscalDocumentParmData().parmFiscalEstablishmentIE();

        if (this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress())
        {
            fiscalEstablishmentPostalAddress    = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());
        }

        if (!FiscalInformationUtil_BR::isIEValid(ieNum, fiscalEstablishmentPostalAddress.State))
        {
            logger.logError("@GLS64219");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_IENotTaxPayerNotFinalForOutput</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the operation with not taxpayer must indicate operation with end consumer.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_IENotTaxPayerNotFinalForOutput()
    {
        boolean ret = true;

        if (fiscalDocumentParmData.parmThirdPartyIE() != EFDocConstants_BR::ExemptIe
            && !fiscalDocumentParmData.parmThirdPartyICMSContributor()
            && !fiscalDocumentParmData.parmFinalUser()
            && fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Outgoing)
        {
            ListEnumerator leLines = this.parmFiscalDocumentParmData().parmLines().getEnumerator();

            if (leLines.moveNext())
            {
                FiscalDocumentLineParmData_BR line = leLines.current();
                CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(line.parmCFOP());

                if (cfopTable.CustVendLocation == CustVendLocation_BR::OutsideCountry)
                {
                    logger.logError("@NFE:IENotTaxPayerNotFinalForOutputValidation");
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_ModelIsMandantory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the fiscal document model is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_ModelIsMandantory()
    {
        if (!this.parmFiscalDocumentParmData().parmModel())
        {
            logger.logError("@GLS64231");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_OwnFiscalDocumentIsUnique</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the fiscal document number already exists for the series.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::All),
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_OwnFiscalDocumentIsUnique()
    {
        FiscalDocument_BR fiscalDocument;

        if (fiscalDocumentParmData.parmFiscalDocumentIssuer() == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            select firstOnly RecId from fiscalDocument
                where fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::OwnEstablishment
                    && fiscalDocument.FiscalDocumentSeries == fiscalDocumentParmData.parmFiscalDocumentSeries()
                    && fiscalDocument.FiscalDocumentNumber == fiscalDocumentParmData.parmFiscalDocumentNumber()
                    && fiscalDocument.FiscalEstablishment == fiscalDocumentParmData.parmFiscalEstablishmentID()
                    && fiscalDocument.RecId != fiscalDocumentParmData.parmFiscalDocumentRecId();

            if (fiscalDocument)
            {
                logger.logError(strFmt("@GLS220082", fiscalDocumentParmData.parmFiscalDocumentSeries()), #error001);
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_ProcessNumberMaxLength</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the referenced process number length.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_ProcessNumberMaxLength()
    {
        return this.validateProcessNumberMaxLength(this.parmFiscalDocumentParmData().parmListOfTextsParmData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_SeriesIsMandantory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the fiscal document series is not empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_SeriesIsMandantory()
    {
        if (this.parmFiscalDocumentParmData().parmIsProForma())
        {
            return true;
        }

        if (!this.parmFiscalDocumentParmData().parmFiscalDocumentSeries())
        {
            logger.logError("@GLS222117");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_SumOfLineAccountingAmountShouldBeEqualToFiscalDocAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the sum of accounting amount is equal to fiscal document amount
    /// </summary>
    /// <returns>
    /// True if it's equal, otherwise false
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_SumOfLineAccountingAmountShouldBeEqualToFiscalDocAmount()
    {
        var lines = this.parmFiscalDocumentParmData().parmLines().getEnumerator();

        Amount sumOfAccountingAmount;
        LineAmount maxLineAccountingAmount;

        while (lines.moveNext())
        {
            FiscalDocumentLineParmData_BR line = lines.current();
            LineAmount lineAccountingAmount = line.parmAccountingAmount();
            sumOfAccountingAmount += lineAccountingAmount;
            maxLineAccountingAmount = max(maxLineAccountingAmount, lineAccountingAmount);
        }

        AmountMST pennyDiff = CurrencyExchangeHelper::amount(sumOfAccountingAmount) - CurrencyExchangeHelper::amount(this.parmFiscalDocumentParmData().parmTotalAmount());

        if (pennyDiff && !this.adjustTotalAmount(pennyDiff))
        {
            logger.logError(strFmt("@Brazil:FiscaldocumentAccountingAmountValidation", this.parmFiscalDocumentParmData().parmTotalAmount(), sumOfAccountingAmount));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_TypeOfCTeIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the type of CT-e is correctly defined.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Purch),
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean header_TypeOfCTeIsValid()
    {
        if (((this.parmFiscalDocumentParmData().parmModel() == FiscalBooksConstants_BR::FiscalDocModel_57 || this.parmFiscalDocumentParmData().parmModel() == FiscalBooksConstants_BR::FiscalDocModel_67) && this.parmFiscalDocumentParmData().parmTypeOfCTe() == TypeOfCTe_BR::Blank)
            || ((this.parmFiscalDocumentParmData().parmModel() != FiscalBooksConstants_BR::FiscalDocModel_57 && this.parmFiscalDocumentParmData().parmModel() != FiscalBooksConstants_BR::FiscalDocModel_67) && this.parmFiscalDocumentParmData().parmTypeOfCTe() != TypeOfCTe_BR::Blank))
        {
            logger.logError(strFmt("@SYS4001769", enum2str(this.parmFiscalDocumentParmData().parmTypeOfCTe()), this.parmFiscalDocumentParmData().parmModel()));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_cfopAndDirectionShouldMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a fiscal document line CFOP direction is the same as the fiscal document direction.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_cfopAndDirectionShouldMatch()
    {
        CFOPTable_BR    cfopTable;

        cfopTable = CFOPTable_BR::findByCFOPId(this.parmFiscalDocumentLineParmData().parmCFOP());

        if (cfopTable
            && cfopTable.Direction != this.parmFiscalDocumentParmData().parmDirection())
        {
            logger.logError("@GLS63987");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_CfopMustExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a fiscal document line CFOP exists in <c>CFOPTable_BR</c>.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_CfopMustExist()
    {
        CFOPTable_BR        cfopTable;
        SalesPurchCFOPId_BR cfop;

        cfop = this.parmFiscalDocumentLineParmData().parmCFOP();

        if (cfop)
        {
            cfopTable = CFOPTable_BR::findByCFOPId(cfop);

            if (!cfopTable)
            {
                logger.logError(strFmt("@SYS31594", this.parmFiscalDocumentLineParmData().parmCFOP(), tableStr(CFOPTable_BR)));
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_fiscalClassificationForProducs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a fiscal document line for an item of type product has a valid fiscal classification.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_fiscalClassificationForProducs()
    {
        if (this.parmFiscalDocumentLineParmData().parmItemType() == FiscalDocumentLineItemType_BR::Product
            && !this.parmFiscalDocumentLineParmData().parmFiscalClassification())
        {
            logger.logError(strFmt("@GLS63983", this.parmFiscalDocumentLineParmData().parmItemId()));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_FixedAssetCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the CFOP is related to fixed assets
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_FixedAssetCFOP()
    {
        if (this.parmFiscalDocumentLineParmData().parmAssetId()
            && !CFOPTable_BR::isFixedAsset(this.parmFiscalDocumentLineParmData().parmCFOP()))
        {
            logger.logError("@SYS4006936");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_FixedAssetMandatoryCostCenter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the asset has a cost center when it has ICMS or PIS/COFINS credit appropriation control
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Purch),
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line),
        NotApplicableExternalFiscalDocAttribute()
    ]
    public boolean line_FixedAssetMandatoryCostCenter()
    {
        AssetTable assetTable;
        AssetTrans assetTrans;

        boolean existsCostCenter(RecId _defaultDimension)
        {
            DefaultDimensionView defaultDimensionView;
            DimensionAttribute   dimensionAttribute;

            dimensionAttribute      = DimensionAttribute::find(BrazilParameters::find().CostCenterDimensionAttribute);

            select RecId from defaultDimensionView
                where defaultDimensionView.DefaultDimension == _defaultDimension
                    && defaultDimensionView.DimensionAttributeId == dimensionAttribute.RecId;

            return defaultDimensionView.RecId != 0;
        }

        if (this.parmFiscalDocumentLineParmData().parmAssetId())
        {
            select TaxICMSOutgoing_BR, PISCOFINSReceivableLongTerm_BR from assetTable
                where assetTable.AssetId == this.parmFiscalDocumentLineParmData().parmAssetId();

            if (assetTable.TaxICMSOutgoing_BR || assetTable.PISCOFINSReceivableLongTerm_BR)
            {
                select RecId, DefaultDimension from assetTrans
                    where assetTrans.Voucher == this.parmFiscalDocumentParmData().parmInventoryVoucher()
                        && assetTrans.TransDate == this.parmFiscalDocumentParmData().parmAccountingDate()
                        && (assetTrans.TransType == AssetTransType::Acquisition || assetTrans.TransType == AssetTransType::AcquisitionAdj);

                if (assetTrans && !existsCostCenter(assetTrans.DefaultDimension))
                {
                    logger.logError("@SYS4006866");
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_FixedAssetOnSameFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the asset has the same fiscalestablishment of the line.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line),
        NotApplicableExternalFiscalDocAttribute()
    ]
    public boolean line_FixedAssetOnSameFiscalEstablishment()
    {
        AssetTable  assetTable;
        FiscalEstablishment_BR fiscalEstablishment;

        if (this.parmFiscalDocumentLineParmData().parmAssetId())
        {
            select FiscalEstablishmentId
                from fiscalEstablishment
                exists join assetTable
                where assetTable.AssetId == this.parmFiscalDocumentLineParmData().parmAssetId()
                    && fiscalEstablishment.RecId == assetTable.FiscalEstablishment_BR;

            if (this.parmFiscalDocumentParmData().parmFiscalEstablishmentID() != fiscalEstablishment.FiscalEstablishmentId)
            {
                logger.logError(strFmt("@SYS4007172",this.parmFiscalDocumentParmData().parmFiscalEstablishmentID(),fiscalEstablishment.FiscalEstablishmentId));
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_FixedAssetValidFiscalValueForCIAP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the asset with ICMS credit has ICMS tax with fiscal value 3 and
    ///     PIS/COFINS credit has PIS/COFINS tax with fiscal value 3.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Purch),
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line),
        NotApplicableExternalFiscalDocAttribute()
    ]
    public boolean line_FixedAssetValidFiscalValueForCIAP()
    {
        AssetTable                          assetTable;

        ListEnumerator                      le;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;

        boolean                             ret = true;

        if (this.parmFiscalDocumentLineParmData().parmAssetId() && CFOPTable_BR::isFixedAsset(this.parmFiscalDocumentLineParmData().parmCFOP()))
        {
            select TaxICMSOutgoing_BR, PiscofinsReceivableLongTerm_BR from assetTable
                where assetTable.AssetId == this.parmFiscalDocumentLineParmData().parmAssetId();

            if (assetTable.TaxICMSOutgoing_BR || assetTable.PISCOFINSReceivableLongTerm_BR)
            {
                le = this.parmFiscalDocumentLineParmData().parmListOfTaxes().getEnumerator();

                while (le.moveNext())
                {
                    taxTransParmData = le.current();

                    if (taxTransParmData.parmType() == TaxType_BR::ICMS && taxTransParmData.parmFiscalValue() != TaxFiscalValue_BR::WithoutCreditDebitOther)
                    {
                        logger.logError("@SYS4006859");
                        ret = false;
                    }

                    if ((taxTransParmData.parmType() == TaxType_BR::PIS || taxTransParmData.parmType() == TaxType_BR::COFINS)
                        && taxTransParmData.parmFiscalValue() != TaxFiscalValue_BR::WithoutCreditDebitOther)
                    {
                        logger.logError("@SYP4882409");
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_freightNatureIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a fiscal document line freight nature is correctly defined.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Purch),
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_freightNatureIsValid()
    {
        boolean freightNatureCantBeBlank;

        switch (this.parmFiscalDocumentParmData().parmModel())
        {
            case #fiscalDocModel_07:
            case #fiscalDocModel_08:
            case #fiscalDocModel_8B:
            case #fiscalDocModel_09:
            case #fiscalDocModel_10:
            case #fiscalDocModel_11:
            case #fiscalDocModel_26:
            case #fiscalDocModel_27:
            case #fiscalDocModel_57:
                freightNatureCantBeBlank   = true;
                break;
            default:
                freightNatureCantBeBlank   = false;
                break;
        }

        if ((freightNatureCantBeBlank && this.parmFiscalDocumentLineParmData().parmFreightNature() == FreightNature_BR::Blank)
            ||  (!freightNatureCantBeBlank && this.parmFiscalDocumentLineParmData().parmFreightNature() != FreightNature_BR::Blank))
        {
            logger.logError(strFmt("@SYS4001772", this.parmFiscalDocumentLineParmData().parmFreightNature(), this.parmFiscalDocumentParmData().parmModel()));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_ICMSSTAdditionalInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a fiscal document line ICMSST additional information is correctly filled.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_ICMSSTAdditionalInfo()
    {
        boolean ret = true;
        FiscalDocumentLineParmData_BR line = this.parmFiscalDocumentLineParmData();

        if (line.parmHasICMSSTAdditionalInfo() == NoYes::Yes)
        {
            if (line.parmICMSSTCollectionPaymentMode() == ICMSSTCollectionPaymentMode_BR::Blank)
            {
                ret = false;
                logger.logError(strFmt("@FixedAssets:FA_MessageValidation_FieldMustBeFilledIn", fieldId2PName(tableNum(FiscalDocumentLine_BR), fieldNum(FiscalDocumentLine_BR, ICMSSTCollectionPaymentMode))));
            }
            
            if (line.parmICMSSTCollectionPaymentMode() == ICMSSTCollectionPaymentMode_BR::GNRE
                && !line.parmICMSSTCollectionPaymentNumber())
            {
                ret = false;
                logger.logError(strFmt("@FixedAssets:FA_MessageValidation_FieldMustBeFilledIn", fieldId2PName(tableNum(FiscalDocumentLine_BR), fieldNum(FiscalDocumentLine_BR, ICMSSTCollectionPaymentNumber))));
            }
            
            if (line.parmRespWithholdingICMSST() == RespWithholdingICMSST_BR::Blank)
            {
                ret = false;
                logger.logError(strFmt("@FixedAssets:FA_MessageValidation_FieldMustBeFilledIn", fieldId2PName(tableNum(FiscalDocumentLine_BR), fieldNum(FiscalDocumentLine_BR, RespWithholdingICMSST))));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_ProcessNumberMaxLength</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the referenced process number length.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_ProcessNumberMaxLength()
    {
        return this.validateProcessNumberMaxLength(this.parmFiscalDocumentLineParmData().parmListOfTextsParmData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_TaxAttributesShouldNotRepeat</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the taxes incurring on a fiscal document line don't repeat.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_TaxAttributesShouldNotRepeat()
    {
        ListEnumerator                      listOfTaxTransEnumerator;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;
        str                                 attributesKey;
        Set                                 setOfAttributes = new Set(Types::String);

        if (!this.parmFiscalDocumentLineParmData().parmListOfTaxes())
        {
            return true;
        }

        listOfTaxTransEnumerator    = this.parmFiscalDocumentLineParmData().parmListOfTaxes().getEnumerator();
        while (listOfTaxTransEnumerator.moveNext())
        {
            taxTransParmData = listOfTaxTransEnumerator.current();

            attributesKey = strFmt("%1%2%3%4",
                                   taxTransParmData.parmTaxTransSourceRecId(),
                                   taxTransParmData.parmTaxTransSourceTableId(),
                                   taxTransParmData.parmType(),
                                   taxTransParmData.parmRetainedTax());

            if (!setOfAttributes.add(attributesKey))
            {
                logger.logError("@GLS63989");
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_TaxationCodeMandatoryBenefitCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the taxation code with a tax benefit, the benefit code should not be empty.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_TaxationCodeMandatoryBenefitCode()
    {
        boolean ret = true;
        FiscalDocumentLineParmData_BR fiscalDocumentParmLineLoc = this.parmFiscalDocumentLineParmData();
        FBFiscalDocumentTaxSpedAdjustmentCode_BR benefitCode = fiscalDocumentParmLineLoc.parmBenefitCode();
        TaxationCode_BR taxationCodeRet;

        if (!benefitCode
            && !this.skipThirdPartyIncomingValidation()
            && fiscalDocumentParmLineLoc.parmListOfTaxes()
            && this.validateBenefitCodes())
        {
            boolean ret90;
            boolean retST90;
            FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();
            boolean NFeNT2019001v140enabled = fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v140);
            boolean NFeNT2019001v151enabled = fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v151);
            FiscalDocumentParmData_BR fiscalDocumentParmDataLoc = this.parmFiscalDocumentParmData();
            ListEnumerator listOfTaxTransEnumerator = fiscalDocumentParmLineLoc.parmListOfTaxes().getEnumerator();

            while (listOfTaxTransEnumerator.moveNext())
            {
                FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmLoc = listOfTaxTransEnumerator.current();
                TaxType_BR taxTransTaxType = fiscalDocumentTaxTransParmLoc.parmType();
                TaxationCode_BR taxationCode = fiscalDocumentTaxTransParmLoc.parmTaxationCode();

                if (conFind(EFDocConstants_BR::CSTWithTaxBenefit, taxationCode)
                    && conFind(EFDocConstants_BR::TaxTypesICMS, taxTransTaxType))
                {
                    ret = false;
                    taxationCodeRet = taxationCode;

                    LogisticsPostalAddress fiscalEstablishmentPostalAddress = LogisticsPostalAddress::findRecId(fiscalDocumentParmDataLoc.parmFiscalEstablishmentPostalAddress());

                    if (((NFeNT2019001v140enabled
                        && conFind(EFDocConstants_BR::ExclusionStatesv140, fiscalEstablishmentPostalAddress.State))
                        || (NFeNT2019001v151enabled
                        && conFind(EFDocConstants_BR::ExclusionStatesv151, fiscalEstablishmentPostalAddress.State)))
                        && conFind(EFDocConstants_BR::DocModelv140, fiscalDocumentParmDataLoc.parmModel()))
                    {
                        CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(fiscalDocumentParmLineLoc.parmCFOP());
                        if (cfopTable.Purpose == CFOPPurpose_BR::ReturnOrder || cfopTable.Purpose == CFOPPurpose_BR::Return)
                        {
                            ret90 = true;
                            retST90 = true;
                        }
                    }

                    else if (taxationCode == '90' && !fiscalDocumentTaxTransParmLoc.parmTaxReductionPct())
                    {
                        switch (taxTransTaxType)
                        {
                            case TaxType_BR::ICMS:
                                ret90 = true;
                                break;

                            case TaxType_BR::ICMSST:
                                CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(fiscalDocumentParmLineLoc.parmCFOP());

                                if (cfopTable.CustVendLocation == CustVendLocation_BR::SameState)
                                {
                                    retST90 = true;
                                }

                                break;

                            default:
                                break;
                        }
                    }
                    else
                    {
                        break;
                    }
                }
            }

            ret = (ret90 && retST90) ? true : ret;
        }

        if (!ret)
        {
            logger.logError(strFmt("@NFE:TaxationCodeMandatoryBenefitCodeValidation", taxationCodeRet, fiscalDocumentParmLineLoc.parmItemId()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipThirdPartyIncomingValidation</Name>
				<Source><![CDATA[
    private boolean skipThirdPartyIncomingValidation()
    {
        return this.parmFiscalDocumentParmData().parmFiscalDocumentIssuer() == FiscalDocumentIssuer_BR::ThirdParty
            && this.parmFiscalDocumentParmData().parmDirection() == FiscalDocDirection_BR::Incoming
            && !FiscalDocumentNotSkipBenefitValidationIncomingThirdPartyFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>line_UnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates unit price not to be empty for fiscal document line which was posted from sales order.
    /// </summary>
    /// <returns>
    /// True if the validation succeeds; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean line_UnitPrice()
    {
        boolean ret = true;

        if (this.parmFiscalDocumentParmData().parmRefTableId() == tableNum(CustInvoiceJour)
            && CustInvoiceJour::findRecId(this.parmFiscalDocumentParmData().parmRefRecId()).SalesId)
        {
            RefTableId fiscalDocumentLineTableId = this.parmFiscalDocumentLineParmData().parmRefTableId();
            SalesPrice salesPrice;

            switch (fiscalDocumentLineTableId)
            {
                case (tableNum(CustInvoiceTrans)):
                    salesPrice = CustInvoiceTrans::findRecId(this.parmFiscalDocumentLineParmData().parmRefRecId()).SalesPrice;
                    break;

                case (tableNum(SalesLine)):
                    salesPrice = SalesLine::findRecId(this.parmFiscalDocumentLineParmData().parmRefRecId()).SalesPrice;
                    break;

                default:
                    salesPrice = 0.0;
            }

            if (salesPrice == 0.0)
            {
                logger.logError("@NFE:UnitPriceError");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_PISCOFINSBasicTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if tax value follow the default of assessment regimen.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_PISCOFINSBasicTaxValue()
    {
        FiscalDocumentTaxTransParmData_BR   taxTrans = this.parmFiscalDocumentTaxTransParmData();
        FiscalOrganization_BR               fiscalOrganization;
        BrazilParameters                    brazilParameters;
        boolean                             ret = true;

        boolean isTaxValueValid(FBContribAssessmentRegimen_BR _regimen, TaxType_BR _taxType, TaxValue _expectedTaxValue)
        {
            TaxValue actualTaxValue = taxTrans.parmTaxValue();

            if (taxTrans.parmFiscalValue() == TaxFiscalValue_BR::WithCreditDebit ||
                 (taxTrans.parmFiscalValue() == TaxFiscalValue_BR::WithoutCreditDebitOther
                   && taxTrans.parmTaxNonRecoverablePct() != taxTrans.parmTaxValue()))
            {
                actualTaxValue -= taxTrans.parmTaxNonRecoverablePct();
            }

            if (taxTrans.parmType() == _taxType
                && fiscalOrganization.AssessmentRegimen == _regimen
                && _expectedTaxValue
                && actualTaxValue != _expectedTaxValue)
            {
                logger.logError(strFmt("@SYS4006950", taxTrans.parmType(), _regimen, fiscalOrganization.AssessmentContributionType, _expectedTaxValue));
                return false;
            }

            return true;
        }

        if (taxTrans.parmType() != TaxType_BR::PIS && taxTrans.parmType() != TaxType_BR::COFINS)
        {
            return true;
        }

        fiscalOrganization  = FiscalOrganization_BR::findByFiscalEstablishmentId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentID(), curext());
        brazilParameters    = BrazilParameters::find();

        if (fiscalOrganization
            && fiscalOrganization.AssessmentContributionType == FBContribAssessmentContributionType_BR::BasicTaxValue)
        {
            ret = isTaxValueValid(FBContribAssessmentRegimen_BR::Cumulative, TaxType_BR::PIS, brazilParameters.BasicTaxValuePISCumulative);
            ret = isTaxValueValid(FBContribAssessmentRegimen_BR::NonCumulative, TaxType_BR::PIS, brazilParameters.BasicTaxValuePisNonCumulative) && ret;
            ret = isTaxValueValid(FBContribAssessmentRegimen_BR::Cumulative, TaxType_BR::COFINS, brazilParameters.BasicTaxValueCOFINSCumulative) && ret;
            ret = isTaxValueValid(FBContribAssessmentRegimen_BR::NonCumulative, TaxType_BR::COFINS, brazilParameters.BasicTaxValueCOFINSNonCumulative) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxationCodeDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if taxation code direction <c>TaxationCodeDirection_BR</c> is valid for fiscal document direction <c>FiscalDocDirection_BR</c>.
    /// </summary>
    /// <returns>
    ///     True if taxation code direction <c>TaxationCodeDirection_BR</c> is equivalent to fiscal document direction <c>FiscalDocDirection_BR</c> or not applicable, otherwise false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxationCodeDirection()
    {
        FiscalDocDirection_BR       fiscalDocDirection = this.parmFiscalDocumentParmData().parmDirection();
        TaxType_BR                  taxTransTaxType = this.parmFiscalDocumentTaxTransParmData().parmType();
        TaxationCodeDirection_BR    taxationCodeDirection;
        boolean                     ret = true;

        if (taxTransTaxType == TaxType_BR::PIS || taxTransTaxType == TaxType_BR::COFINS)
        {
            taxationCodeDirection = TaxationCodeTable_BR::PISCOFINSDirection(this.parmFiscalDocumentTaxTransParmData().parmTaxationCode());

            if (fiscalDocDirection == FiscalDocDirection_BR::Incoming
                && taxationCodeDirection == TaxationCodeDirection_BR::Outgoing)
            {
                logger.logError(strFmt("@SYS4006927", taxTransTaxType, TaxationCodeDirection_BR::Incoming));
                ret = false;
            }

            if (fiscalDocDirection == FiscalDocDirection_BR::Outgoing
                && taxationCodeDirection == TaxationCodeDirection_BR::Incoming)
            {
                logger.logError(strFmt("@SYS4006927", taxTransTaxType, TaxationCodeDirection_BR::Outgoing));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxationCodeFiscalValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the fiscal value is valid for taxation code.
    /// </summary>
    /// <returns>
    ///     True if the fiscal value is valid for taxation code.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxationCodeFiscalValue()
    {
        TaxFiscalValue_BR   fiscalValue     = this.parmFiscalDocumentTaxTransParmData().parmFiscalValue();
        TaxationCode_BR     taxationCode    = this.parmFiscalDocumentTaxTransParmData().parmTaxationCode();
        TaxType_BR          taxTransTaxType = this.parmFiscalDocumentTaxTransParmData().parmType();
        boolean             ret = true;

        if (taxTransTaxType == TaxType_BR::PIS || taxTransTaxType == TaxType_BR::COFINS)
        {
            if (TaxationCodeTable_BR::isTaxationCodeExcludedFromRevenue(taxTransTaxType, taxationCode) && fiscalValue == TaxFiscalValue_BR::WithCreditDebit)
            {
                logger.logError(strFmt("@SYP4882596", TaxFiscalValue_BR::WithCreditDebit, taxationCode));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxationCodeBenefitType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the type of tax benefit is valid for taxation code.
    /// </summary>
    /// <returns>
    ///     True, if the type of tax benefit is valid for taxation code; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxationCodeBenefitType()
    {
        boolean ret = true;
        TaxType_BR taxTransTaxType = this.parmFiscalDocumentTaxTransParmData().parmType();

        if (taxTransTaxType == TaxType_BR::ICMS && this.validateBenefitCodesTypes())
        {
            TaxationCode_BR taxationCode = this.parmFiscalDocumentTaxTransParmData().parmTaxationCode();
            FBFiscalDocumentTaxSpedAdjustmentCode_BR benefitCode = this.parmFiscalDocumentLineParmData().parmBenefitCode();
            
            if (!TaxBenefitCodeType_BR::isBenefitCodeValidForTaxactionCode(benefitCode, taxationCode))
            {
                logger.logError(strFmt("@NFE:TaxationCodeBenefitTypeValidation", taxationCode, benefitCode, this.parmFiscalDocumentLineParmData().parmItemId()));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxationCodeBenefitCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the tax benefit is valid for taxation code.
    /// </summary>
    /// <returns>
    ///     True, if the tax benefit is valid for taxation code; otherwise false.
    /// </returns>
    [
        FiscalDocumentValidation,
        FiscalDocumentValidationElement(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxationCodeBenefitCode()
    {
        boolean ret = true;
        FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmLoc = this.parmFiscalDocumentTaxTransParmData();

        if (fiscalDocumentTaxTransParmLoc.parmType() == TaxType_BR::ICMS
            && this.validateBenefitCodeWithTaxationCodes()
            && this.shouldValidateBenefitCodeForTaxationCode(fiscalDocumentTaxTransParmLoc))
        {
            TaxationCode_BR taxationCode = fiscalDocumentTaxTransParmLoc.parmTaxationCode();
            FBFiscalDocumentTaxSpedAdjustmentCode_BR benefitCode = this.parmFiscalDocumentLineParmData().parmBenefitCode();
            
            if (benefitCode && !TaxBenefitCodeTaxationCodes_BR::isBenefitCodeValidForTaxactionCode(benefitCode, taxationCode))
            {
                logger.logError(strFmt("@NFE:TaxationCodeBenefitCodeValidation", taxationCode, benefitCode, this.parmFiscalDocumentLineParmData().parmItemId()));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxHasTaxationCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a taxation code exist for taxes that are configured to require them.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxHasTaxationCode()
    {
        if (!TaxationCodeSetup_BR::isTaxationCodeRequired(this.parmFiscalDocumentTaxTransParmData().parmType()))
        {
            return true;
        }

        if (!this.parmFiscalDocumentTaxTransParmData().parmTaxationCode())
        {
            logger.logError(strFmt("@GLS60394", this.parmFiscalDocumentTaxTransParmData().parmType()));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxReductionPctICMS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates tax reduction base for ICMS is less than one hundred percent.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxReductionPctICMS()
    {
        if (this.parmFiscalDocumentTaxTransParmData().parmType() == TaxType_BR::ICMS
            && this.parmFiscalDocumentTaxTransParmData().parmTaxReductionPct() >= 100)
        {
            logger.logError("@SYS4006956");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxTypeIsNotIcmsStForModel02</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether a model 02 document does not include ICMS-ST tax type.
    /// </summary>
    /// <returns>
    ///     True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxTypeIsNotIcmsStForModel02()
    {
        if (this.parmFiscalDocumentParmData().parmModel() == #fiscalDocModel_02
            && this.parmFiscalDocumentTaxTransParmData().parmType() == TaxType_BR::ICMSST)
        {
            logger.logError("@SYS4006992");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxICMSAmountGreaterThanZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether an ICMS tax has a non-zero tax amount.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; false otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxICMSAmountGreaterThanZero()
    {
        boolean ret = true;
        FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmLoc = this.parmFiscalDocumentTaxTransParmData();

        if (this.shouldValidateWhetherTaxICMSAmountGreaterThanZero(fiscalDocumentTaxTransParmLoc)
            && !fiscalDocumentTaxTransParmLoc.parmTaxValue()
            && !fiscalDocumentTaxTransParmLoc.parmTaxReductionPct())
        {
            LogisticsPostalAddress fiscalEstablishmentPostalAddress = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());

            if (fiscalEstablishmentPostalAddress.State == EFDocConstants_BR::StateRJ)
            {
                CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(this.parmFiscalDocumentLineParmData().parmCFOP());
                ret = (cfopTable.Purpose == CFOPPurpose_BR::ReturnOrder || cfopTable.Purpose == CFOPPurpose_BR::Return);
            }
            else
            {
                ret = false;
            }
        }

        if (!ret)
        {
            logger.logError("@NFE:CST51ZeroTaxValueError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxValidateTaxAmountFromBaseAmountWithDocConstants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a tax base amount from base amount is mot equal to 0.
    /// </summary>
    /// <returns>
    /// True if the validation succeeds. False otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxValidateTaxAmountFromBaseAmountWithDocConstants()
    {
        boolean ret = true;
        FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();
        FiscalDocumentParmData_BR fiscalDocumentParmDataLoc = this.parmFiscalDocumentParmData();
        FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmLoc = this.parmFiscalDocumentTaxTransParmData();

        if (this.shouldValidateTaxAmountFromBaseAmountWithDocConstants(
            fiscalEstablishment,
            fiscalDocumentParmDataLoc,
            fiscalDocumentTaxTransParmLoc))
        {
            LogisticsPostalAddress fiscalEstablishmentPostalAddress = LogisticsPostalAddress::findRecId(fiscalDocumentParmDataLoc.parmFiscalEstablishmentPostalAddress());

            if (fiscalEstablishmentPostalAddress.State == EFDocConstants_BR::StateRJ)
            {
                CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(this.parmFiscalDocumentLineParmData().parmCFOP());

                if (cfopTable.Purpose == CFOPPurpose_BR::ReturnOrder || cfopTable.Purpose == CFOPPurpose_BR::Return)
                {
                    return ret;
                }
            }

            TaxBase taxAmountFromBaseAmount = abs(
                (fiscalDocumentTaxTransParmLoc.parmTaxBaseAmountOther() + fiscalDocumentTaxTransParmLoc.parmTaxBaseAmountExempt())
                * fiscalDocumentTaxTransParmLoc.parmTaxValue());

            switch (fiscalDocumentTaxTransParmLoc.parmTaxationCode())
            {
                case '20', '70', '90':
                    ret = (taxAmountFromBaseAmount != 0);
                    break;

                case '30', '40', '50':
                    ret = (taxAmountFromBaseAmount != 0
                        || (this.parmFiscalDocumentLineParmData().parmSuframaDiscountICMS()
                        && fiscalDocumentParmDataLoc.getDeliverySuframaNumber()));
                    break;
                default:
                    break;
            }
        }

        if (!ret)
        {
            logger.logError("@NFE:TaxAmountFromBaseAmountMustBeSelectedError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax_TaxValidateTaxAmountLessThanLimitTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether tax base amount is less than specified limit for the corresponding fiscal establishment.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; false otherwise.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean tax_TaxValidateTaxAmountLessThanLimitTaxBaseAmount()
    {
        boolean ret = true;
        FiscalDocumentTaxTransParmData_BR fiscalDocumentTaxTransParmLoc = this.parmFiscalDocumentTaxTransParmData();

        if (this.getFiscalEstablishment().checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v140)
            && fiscalDocumentTaxTransParmLoc.parmType() == TaxType_BR::ICMS
            && conFind(EFDocConstants_BR::DocModelv140, this.parmFiscalDocumentParmData().parmModel()))
        {
            ret = this.isTaxAmountLessThanLimit(fiscalDocumentTaxTransParmLoc);

            if (!ret)
            {
                logger.logError("@NFE:TaxBaseAmountExceedsLimitError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessNumberMaxLength</Name>
				<Source><![CDATA[
    private boolean validateProcessNumberMaxLength(FiscalDocumentTextListParmData_BR _fiscalDocumentTextListParmData)
    {
        #define.ProcessNumberMaxLength(15)
        #define.Alphanumerics('0123456789abcdefghijklmnopqrstuvxwyzABCDEFGHIJKLMNOPQRSTUVXWYZ')

        boolean                             ret = true;

        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        ListEnumerator                      le;
        RefProcessNo_BR                     processNumber;

        while (_fiscalDocumentTextListParmData.moveNext())
        {
            fiscalDocumentTextParmData = _fiscalDocumentTextListParmData.getCurrent();

            if (fiscalDocumentTextParmData.parmFiscalRefProcessList())
            {
                le = fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

                while (le.moveNext())
                {
                    fiscalDocumentRefProcessParmData = le.current();

                    processNumber = strKeep(fiscalDocumentRefProcessParmData.parmProcessNumber(), #Alphanumerics);

                    if (strLen(processNumber) > #ProcessNumberMaxLength)
                    {
                        logger.logError(strFmt("@SYS4006716", processNumber, #ProcessNumberMaxLength));
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the line amount, if possible.
    /// </summary>
    /// <param name = "_pennyDiff">
    /// Difference between total amount and sum of lines amount.
    /// </param>
    /// <param name = "_maxLineAccountingAmount">
    /// The maximum line amount which can be adjusted.
    /// </param>
    /// <returns>
    /// True, if the line amount was adjusted; otherwise false.
    /// </returns>
    protected boolean adjustLineAmount(AmountMST _pennyDiff, LineAmount _maxLineAccountingAmount)
    {
        boolean ret;

        if (abs(_pennyDiff) <= LedgerParameters::find().MaxRoundingDifferenceMST)
        {
            ListEnumerator lines = this.parmFiscalDocumentParmData().parmLines().getEnumerator();

            while (lines.moveNext())
            {
                FiscalDocumentLineParmData_BR line = lines.current();
                LineAmount lineAccountingAmount = line.parmAccountingAmount();

                if (lineAccountingAmount == _maxLineAccountingAmount)
                {
                    LineAmount adjustLineAccountingAmount = lineAccountingAmount - _pennyDiff;
                    LineAmount adjustLineAmount = line.parmLineAmount() == lineAccountingAmount ? adjustLineAccountingAmount : line.parmLineAmount();
                    line.parmAccountingAmount(adjustLineAccountingAmount);
                    line.parmLineAmount(adjustLineAmount);
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the total amount, if possible.
    /// </summary>
    /// <param name = "_pennyDiff">
    /// Difference between total amount and sum of lines amount.
    /// </param>
    /// <returns>
    /// True, if the total amount was adjusted; otherwise false.
    /// </returns>
    private boolean adjustTotalAmount(AmountMST _pennyDiff)
    {
        boolean ret;

        if (abs(_pennyDiff) <= LedgerParameters::find().MaxRoundingDifferenceMST)
        {
            AmountCur adjustedTotalAmount = this.parmFiscalDocumentParmData().parmTotalAmount() + _pennyDiff;
            this.parmFiscalDocumentParmData().parmTotalAmount(adjustedTotalAmount);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR getFiscalEstablishment()
    {
        if (!fe)
        {
            fe = FiscalEstablishment_BR::findById(this.parmFiscalDocumentParmData().parmFiscalEstablishmentID());
        }

        return fe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBenefitCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that benefit code should be checked.
    /// </summary>
    /// <returns>
    /// true if the check must be applied; false otherwise.
    /// </returns>
    private boolean validateBenefitCodes()
    {
        if (validateBenefitCodes == NoYesUnchanged::Unchanged)
        {
            if (this.validateBenefitCodeWithTaxationCodes())
            {
                validateBenefitCodes = NoYesUnchanged::Yes;
            }
            else
            {
                validateBenefitCodes = NoYesUnchanged::No;
                FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();

                if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v100)
                    && this.validateBenefitCodesEnabled())
                {
                    validateBenefitCodes = NoYesUnchanged::Yes;
                }
            }
        }

        return validateBenefitCodes == NoYesUnchanged::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBenefitCodesEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that 'Validate benefit code' option is selected for the authority.
    /// </summary>
    /// <returns>
    /// true if the option is selected; false otherwise.
    /// </returns>
    private boolean validateBenefitCodesEnabled()
    {
        if (validateBenefitCodeEnabled == NoYesUnchanged::Unchanged)
        {
            FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();
            LogisticsAddressStateId state = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress()).State;
            EFDocAuthorityState_BR efDocAuthorityState;
            LogisticsAddressState logisticsAddressState;

            select firstOnly RecId from efDocAuthorityState
                where efDocAuthorityState.AuthorityId == fiscalEstablishment.EFDocAuthority
                    && efDocAuthorityState.ValidateBenefitCodes == NoYes::Yes
                exists join logisticsAddressState
                    where logisticsAddressState.RecId == efDocAuthorityState.LogisticsAddressState
                        && logisticsAddressState.StateId == state;

            validateBenefitCodeEnabled = efDocAuthorityState.RecId != 0 ? NoYesUnchanged::Yes : NoYesUnchanged::No;
        }

        return validateBenefitCodeEnabled == NoYesUnchanged::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isICMSDesonEnabled</Name>
				<Source><![CDATA[
    private boolean isICMSDesonEnabled()
    {
        FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();
        LogisticsPostalAddressRecId logisticsPostalAddressId = this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress();
        LogisticsPostalAddress LogisticsPostalAddress;
        EFDocAuthorityState_BR efDocAuthorityState;
        LogisticsAddressState logisticsAddressState;

        select firstOnly RecId from efDocAuthorityState
            where efDocAuthorityState.AuthorityId == fiscalEstablishment.EFDocAuthority
                && efDocAuthorityState.AddExempt == NoYes::Yes
            exists join LogisticsPostalAddress
                where LogisticsPostalAddress.RecId == logisticsPostalAddressId
            exists join logisticsAddressState
                where logisticsAddressState.RecId == efDocAuthorityState.LogisticsAddressState
                    && logisticsAddressState.StateId == LogisticsPostalAddress.State;

        return efDocAuthorityState.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBenefitCodeWithTaxationCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a match between benefit and taxation codes should be checked.
    /// </summary>
    /// <returns>
    /// true if the check must be applied; false otherwise.
    /// </returns>
    private boolean validateBenefitCodeWithTaxationCodes()
    {
        if (validateBenefitCodeWithTaxationCode == NoYesUnchanged::Unchanged)
        {
            validateBenefitCodeWithTaxationCode = NoYesUnchanged::No;
            FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();

            if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v110)
                && this.validateBenefitCodesEnabled())
            {
                validateBenefitCodeWithTaxationCode = NoYesUnchanged::Yes;
            }
        }

        return validateBenefitCodeWithTaxationCode == NoYesUnchanged::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ILogger_BR _logger = new InfoLogLogger_BR())
    {
        super(_logger);

        validateBenefitCodes = NoYesUnchanged::Unchanged;
        validateBenefitCodeWithTaxationCode = NoYesUnchanged::Unchanged;
        validateBenefitCodeEnabled = NoYesUnchanged::Unchanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidateBenefitCodeForTaxationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that validations established by N12-94 should be applied.
    /// </summary>
    /// <param name = "_taxTransTaxType"> Type of tax transaction.</param>
    /// <returns>
    /// true if validations should be applied; false otherwise.
    /// </returns>
    private boolean shouldValidateBenefitCodeForTaxationCode(FiscalDocumentTaxTransParmData_BR _taxTransParmData)
    {
        boolean ret = true;
        FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();
        FiscalDocumentParmData_BR fiscalDocumentParmDataLoc = this.parmFiscalDocumentParmData();

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v140)
            && conFind(EFDocConstants_BR::DocModelv140, fiscalDocumentParmDataLoc.parmModel()))
        {
            LogisticsPostalAddress fiscalEstablishmentPostalAddress = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());
            CFOPTable_BR cfopTable = CFOPTable_BR::findByCFOPId(this.parmFiscalDocumentLineParmData().parmCFOP());

            switch (fiscalEstablishmentPostalAddress.State)
            {
                case EFDocConstants_BR::StateRJ:
                    if (cfopTable.Purpose == CFOPPurpose_BR::ReturnOrder || cfopTable.Purpose == CFOPPurpose_BR::Return)
                    {
                        ret = false;
                    }
                    break;

                case EFDocConstants_BR::StateRS:
                    if (cfopTable.Purpose == CFOPPurpose_BR::Return || cfopTable.Direction == FiscalDocDirection_BR::Incoming)
                    {
                        ret = false;
                    }
                    break;

                case EFDocConstants_BR::StateDF:
                    if (cfopTable.Purpose == CFOPPurpose_BR::ReturnOrder 
                        || cfopTable.Purpose == CFOPPurpose_BR::Return
                        || cfopTable.Direction == FiscalDocDirection_BR::Incoming)
                    {
                        ret = false;
                    }
                    break;

                case EFDocConstants_BR::StateMT:
                    if (cfopTable.Purpose == CFOPPurpose_BR::Return)
                    {
                        ret = false;
                    }
                    break;

                default:
                    ret = true;
            }
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getICMSLimitTaxBaseAmount</Name>
				<Source><![CDATA[
    private ICMSSTTaxBaseAmount_BR getICMSLimitTaxBaseAmount()
    {
        FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();

        EFDocAuthority_BR authority = EFDocAuthority_BR::findById(fiscalEstablishment.EFDocAuthority);
        return authority.ICMSLimitbaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAmountLessThanLimit</Name>
				<Source><![CDATA[
    private boolean isTaxAmountLessThanLimit(FiscalDocumentTaxTransParmData_BR _taxTransParmData)
    {
        ICMSSTTaxBaseAmount_BR limitTaxBase = this.getICMSLimitTaxBaseAmount();
        boolean ret = true;

        switch (_taxTransParmData.parmTaxationCode())
        {
            case '00', '10', '20', '70':
                ret = _taxTransParmData.parmTaxBaseAmount() <= limitTaxBase
                    || !limitTaxBase;
                break;

            case '51':
                ret = _taxTransParmData.parmTaxBaseAmount() + _taxTransParmData.parmTaxBaseAmountOther() <= limitTaxBase
                    || !limitTaxBase;
                break;

            case '90':
                ret = _taxTransParmData.parmTaxBaseAmountOther() <= limitTaxBase
                    || !limitTaxBase;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidateWhetherTaxICMSAmountGreaterThanZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that validations established by N12-97 should be applied.
    /// </summary>
    /// <param name = "_taxTransTaxType"> Type of tax transaction.</param>
    /// <returns>
    /// true if validations should be applied; false otherwise.
    /// </returns>
    private boolean shouldValidateWhetherTaxICMSAmountGreaterThanZero(FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParm)
    {
        FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();
        FiscalDocumentParmData_BR fiscalDocumentParmDataLoc = this.parmFiscalDocumentParmData();
        boolean ret;

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v140))
        {
            ret = (conFind(EFDocConstants_BR::TaxTypesICMS, _fiscalDocumentTaxTransParm.parmType())
                && fiscalDocumentParmDataLoc.parmModel() == #FiscalDocModel_55
                && _fiscalDocumentTaxTransParm.parmTaxationCode() == '51');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidateTaxAmountFromBaseAmountWithDocConstants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that validations established by N12-90 should be applied.
    /// </summary>
    /// <param name = "_taxTransTaxType"> Type of tax transaction.</param>
    /// <returns>
    /// true if validations should be applied; false otherwise.
    /// </returns>
    private boolean shouldValidateTaxAmountFromBaseAmountWithDocConstants(
        FiscalEstablishment_BR _fiscalEstablishment,
        FiscalDocumentParmData_BR _fiscalDocumentParmData,
        FiscalDocumentTaxTransParmData_BR _taxTransParmData)
    {
        boolean ret;

        if (_fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v140))
        {
            ret = (this.isICMSDesonEnabled()
                && conFind(EFDocConstants_BR::TaxTypesICMS, _taxTransParmData.parmType())
                && conFind(EFDocConstants_BR::DocModelv140, _fiscalDocumentParmData.parmModel()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBenefitCodesTypes</Name>
				<Source><![CDATA[
    private boolean validateBenefitCodesTypes()
    {
        boolean ret;
        FiscalEstablishment_BR fiscalEstablishment = this.getFiscalEstablishment();

        if (!fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v110)
            && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v100))
        {
            ret = this.validateBenefitCodesEnabled();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>