<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingPendingTransSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingPendingTransSummaryFilter</c> class provides tracing hierarchy filtering for the <see cref="InventTrans form"/> form.
/// </summary>
class InventTrackingPendingTransSummaryFilter extends InventTrackingTransactionSummaryFilter
{
    InventDimId     inventDimId;
    InventDimParm   trackingDimParm;
    ItemId          itemId;
    Set             inventTransRecIdSet;
    str             inventTransKey;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captionSuffix</Name>
				<Source><![CDATA[
    protected str captionSuffix()
    {
        #define.ListSeparator(', ')

        return "@SYS338968" + #ListSeparator + super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFilterTable</Name>
				<Source><![CDATA[
    protected void fillFilterTable()
    {
        InventTransOrigin inventTransOrigin;
        inventTransOrigin.ItemId = tracingCriteria.parmItemIdCriteria();

        InventTrans inventTrans;
        inventTrans.InventDimId = InventDim::findOrCreate(tracingCriteria.parmInventDimCriteria()).InventDimId;

        this.insertKeyDataDTO(
            InventTrackingDimTracingInventTransDTO::newFromInventTrans(inventTrans), 
            InventTrackingDimTracingInventTransOriginDTO::newFromInventTransOrigin(InventTransOrigin));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        itemId              = '';
        inventDimId         = '';
        inventTransKey      = '';
        inventTransRecIdSet = new Set(Types::Int64);

        trackingDimParm.setAllInventDim();
        trackingDimParm.clearProductDimensions();
        trackingDimParm.clearStorageDimensions();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTrans</Name>
				<Source><![CDATA[
    private void insertInventTrans(Query _query, InventTransTmpFilter _inventTransTmpFilter)
    {
        QueryRun    queryRun = new QueryRun(_query);
        InventTrans inventTrans;

        while (queryRun.next())
        {
            inventTrans = queryRun.get(inventTrans.TableId);
            if (!inventTransRecIdSet.in(inventTrans.RecId))
            {
                _inventTransTmpFilter.InventTrans = inventTrans.RecId;
                _inventTransTmpFilter.insert();

                inventTransRecIdSet.add(inventTrans.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTransInbound</Name>
				<Source><![CDATA[
    private void insertInventTransInbound(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        Query                   query           = new Query();
        QueryBuildDataSource    dsInventTrans   = this.setInitialQuery(query, _inventTransDTO, _inventTransOriginDTO);

        // Inbound pending transactions
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Arrived));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Ordered));
        this.insertInventTrans(query, filterTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTransOutbound</Name>
				<Source><![CDATA[
    private void insertInventTransOutbound(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        Query                   query           = new Query();
        QueryBuildDataSource    dsInventTrans   = this.setInitialQuery(query, _inventTransDTO, _inventTransOriginDTO);

        // Outbound pending transactions
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::None));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::OnOrder));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::ReservOrdered));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::ReservPhysical));
        this.insertInventTrans(query, filterTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKeyDataDTO</Name>
				<Source><![CDATA[
    protected void insertKeyDataDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        this.insertInventTransOutbound(_inventTransDTO, _inventTransOriginDTO);
        this.insertInventTransInbound(_inventTransDTO, _inventTransOriginDTO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitialQuery</Name>
				<Source><![CDATA[
    private QueryBuildDataSource setInitialQuery(Query _query, InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        QueryBuildDataSource dsInventTrans = _query.addDataSource(tableNum(InventTrans));

        dsInventTrans.addSelectionField(fieldNum(InventTrans, RecId));
        dsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(_inventTransOriginDTO.itemId()));
        this.inventDimExistsJoin(dsInventTrans, _inventTransDTO.inventDim(), trackingDimParm, true);

        return dsInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyDTO</Name>
				<Source><![CDATA[
    protected str transKeyDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        InventDim       inventDim   = _inventTransDTO.inventDim();
        InventDimParm   inventDimParm;

        if (itemId != _inventTransOriginDTO.itemId()
            || inventDimId != inventDim.InventDimId)
        {
            itemId          = _inventTransOriginDTO.itemId();
            inventDimId     = inventDim.InventDimId;
            inventTransKey  = itemId;

            inventDimParm.initFromInventDim(inventDim);
            ListEnumerator dimEnum = inventDimParm.selectedDimFields().getEnumerator();
            while (dimEnum.moveNext())
            {
                inventTransKey += ';' + inventDim.(dimEnum.current());
            }
        }

        return inventTransKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingPendingTransSummaryFilter construct()
    {
        return new InventTrackingPendingTransSummaryFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingPendingTransSummaryFilter</c> class with a given tracing hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    ///    The tracing hierarchy to use.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingPendingTransSummaryFilter</c> class.
    /// </returns>
    public static InventTrackingPendingTransSummaryFilter newHierarchy(InventTrackingDimTracingHierarchy _hierarchy)
    {
        InventTrackingPendingTransSummaryFilter filter = InventTrackingPendingTransSummaryFilter::construct();

        filter.parmTracingHierarchy(_hierarchy);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
