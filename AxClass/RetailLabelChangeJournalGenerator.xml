<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangeJournalGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for label change journals generation.
/// </summary>
abstract class RetailLabelChangeJournalGenerator extends RunBaseBatch
{
    LineNum             lineNum;
    NumberSeq           numberSeq;

    RecordSortedList    linesRecordSortedList;

    RetailStoreId       currentStoreId;
    RetailStoreId       lastStoreId;
    RefRecId            lastOperatingUnitId;
    NoYes               lastStoreGenerateItemLabels;
    NoYes               lastStoreGenerateShelfLabels;

    PriceDate           priceDate;
    PriceDate           givenPriceDate;

    DialogField         dialogPriceDate;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        priceDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>RetailLabelChangeJournalTrans</c> record to cache.
    /// </summary>
    /// <param name="_journalTrans">
    /// Label change journal trans record.
    /// </param>
    protected void addToCache(RetailLabelChangeJournalTrans _journalTrans)
    {
        if (!linesRecordSortedList)
        {
            linesRecordSortedList = new RecordSortedList(tableNum(RetailLabelChangeJournalTrans));
            linesRecordSortedList.sortOrder(fieldNum(RetailLabelChangeJournalTrans, JournalNum), fieldNum(RetailLabelChangeJournalTrans, ItemId), fieldNum(RetailLabelChangeJournalTrans, VariantId));
        }

        linesRecordSortedList.ins(_journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateActivePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates active retail sales price.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store Id.
    /// </param>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_variantId">
    /// Variant Id.
    /// </param>
    /// <param name="_unitId">
    /// Unit of measurement.
    /// </param>
    /// <param name="_priceDate">
    /// Price date.
    /// </param>
    /// <returns>
    /// Active price.
    /// </returns>
    protected Price calculateActivePrice(
        RetailStoreId _storeId,
        ItemId _itemId,
        RetailVariantId _variantId,
        UnitOfMeasureSymbol _unitId,
        PriceDate _priceDate)
    {
        Price price;
        InventDim inventDimLocal;

        inventDimLocal = InventDimCombination::findVariantId(_variantId).inventDim();

        price = RetailPricingEngine::getRetailPriceByItem(
            _storeId,
            _itemId,
            _unitId,
            inventDimLocal.inventDimId,
            DateTimeUtil::newDateTime(_priceDate, DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone())),
            _variantId);

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureLastStoreParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Captures the last store parameters.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store ID.
    /// </param>
    /// <param name="_operatingUnitId">
    /// Store operating unit ID.
    /// </param>
    /// <param name="_generatesItemLabels">
    /// Store setting to generate item labels.
    /// </param>
    /// <param name="_generatesShelfLabels">
    /// Store setting to generate shelf labels.
    /// </param>
    protected void captureLastStoreParameters(RetailStoreId _storeId, OMOperatingUnitRefRecId _operatingUnitId, NoYes _generatesItemLabels, NoYes _generatesShelfLabels)
    {
        lastStoreId = _storeId;
        lastOperatingUnitId = _operatingUnitId;
        lastStoreGenerateItemLabels = _generatesItemLabels;
        lastStoreGenerateShelfLabels = _generatesShelfLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventItemLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>RetailInventItemLabel</c> record base on the <c>RetailLabelChangeJournalTrans</c> and <c>RetailInventItemLabelSetup</c> records provided.
    /// </summary>
    /// <param name="_journalTrans">
    /// Label change journal trans record.
    /// </param>
    /// <param name="_itemLabelSetup">
    /// Label setup record.
    /// </param>
    private void createInventItemLabel(
        RetailLabelChangeJournalTrans _journalTrans,
        RetailInventItemLabelSetup _itemLabelSetup)
    {
        RetailInventItemLabel inventItemLabel;
        RetailQty labelQty = 1;

        if (_itemLabelSetup.LabelType == RetailLabelTypeBase::ItemLabel)
        {
            labelQty = _journalTrans.Qty;
            // Always round up to the nearest integer value
            // That is a business requirement for labels quantity
            if (LabelQty && frac(labelQty))
            {
                labelQty = roundUpDec(labelQty, 0);
            }
        }

        inventItemLabel.clear();

        inventItemLabel.LabelType   = _itemLabelSetup.LabelType;
        inventItemLabel.StoreId     = _journalTrans.StoreId;
        inventItemLabel.VariantId   = _journalTrans.VariantId;
        inventItemLabel.UnitID      = _journalTrans.UnitId;
        inventItemLabel.ValidOnDate = _journalTrans.PriceValidOnDate;
        inventItemLabel.ItemId      = _journalTrans.ItemId;
        inventItemLabel.Qty         = labelQty;
        inventItemLabel.ReportName  = _itemLabelSetup.ReportName;
        inventItemLabel.Text1       = _itemLabelSetup.Text1;
        inventItemLabel.Text2       = _itemLabelSetup.Text2;
        inventItemLabel.InventDim   = _journalTrans.inventDimId();
        inventItemLabel.Printed     = false;
        inventItemLabel.Price       = _journalTrans.Price;
        inventItemLabel.CompLabelPrice = RetailPriceUtilities::calcComparisonPrice(inventItemLabel.ItemId, inventItemLabel.Price);

        inventItemLabel.ItemBarCode = InventItemBarcode::findRetailUseForPrinting(inventItemLabel.ItemId, inventItemLabel.VariantId, inventItemLabel.UnitID, true).itemBarCode;
        if (!inventItemLabel.ItemBarCode)
        {
            inventItemLabel.ItemBarCode = InventItemBarcode::findRetailUseForPrinting(inventItemLabel.ItemId, inventItemLabel.VariantId, inventItemLabel.UnitID, false).itemBarCode;
        }

        inventItemLabel.LabelChangeJournalNum = _journalTrans.JournalNum;
        inventItemLabel.LabelChangeJournalTrans = _journalTrans.RecId;

        inventItemLabel.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates label change journal header.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store Id.
    /// </param>
    /// <returns>
    /// Label change journal Id.
    /// </returns>
    protected abstract RetailLabelChangeJournalId createJournal(RetailStoreId _storeId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLabelChangeJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates label change journals.
    /// </summary>
    private void createLabelChangeJournals()
    {
        RetailLabelChangeDataFetcher    dataFetcher;
        RetailLabelChangeJournalId      journalNum;

        ItemId                          itemId;
        RetailVariantId                 variantId;
        InventQty                       qty;
        InventUnitId                    unitId;
        RetailStoreId                   storeId;
        RefRecId                        omOperatingUnitId;
        NoYes                           generateItemLabels;
        NoYes                           generateShelfLabels;
        NoYes                           createLabelsForZeroPrice;

        Price                           price;

        dataFetcher = this.getFetcher();

        dataFetcher.reset();

        ttsBegin;

        while (dataFetcher.moveNext())
        {
            [itemId,
             variantId,
             qty,
             unitId,
             storeId,
             omOperatingUnitId,
             generateItemLabels,
             generateShelfLabels,
             createLabelsForZeroPrice] = dataFetcher.current();

            currentStoreId = storeId;

            price = this.calculateActivePrice(storeId, itemId, variantId, unitId, priceDate);
            if (!price)
            {
                if (!createLabelsForZeroPrice)
                {
                    continue; // Skip lines with zero active price in case store does not have 'Create labels for zero price' setting checked.
                }

                warning(strFmt("@SYP4881083", itemId, storeId));
            }

            if (this.newJournalRequired())
            {
                this.flushLines(false, dataFetcher as RetailLabelChangeExclusionProvider, storeId);
                journalNum = this.createJournal(storeId);
            }

            this.processJournalLine(storeId, journalNum, itemId, variantId, price, qty, unitId);

            this.captureLastStoreParameters(storeId, omOperatingUnitId, generateItemLabels, generateShelfLabels);
        }

        // Flush lines for the last journal
        this.flushLines(true, dataFetcher as RetailLabelChangeExclusionProvider);
        // Remove journals that were created in the previous generation run, but are no longer valid
        this.removeObsoleteJournals();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the dialog box.
    /// </summary>
    /// <returns>Returns an object of type <c>DialogRunbase</c>.</returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogPriceDate = dialog.addFieldValue(extendedTypeStr(PriceDate), priceDate, "@SYP4880946");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in cache.
    /// </summary>
    /// <param name="_journalTrans">
    /// Label change journal trans record to find.
    /// </param>
    /// <returns>
    /// true if the record was found; false otherwise.
    /// </returns>
    protected boolean findInCache(RetailLabelChangeJournalTrans _journalTrans)
    {
        return linesRecordSortedList && linesRecordSortedList.find(_journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes label change journal lines to the database and creates corresponding <c>RetailInventItemLabel</c> records.
    /// </summary>
    /// <param name="_lastFlush">
    /// Indicates that this is the last flush; optional.
    /// </param>
    /// <param name="_exclusionProvider">
    /// Exclusion provider object; optional.
    /// </param>
    /// <param name="_currentStoreId">
    /// The Id of the current store number; optional.
    /// </param>
    /// <remarks>
    /// Inserts all label change journal lines to the database in a single call and creates related <c>RetailInventItemLabel</c> records according to the templates set up.
    /// </remarks>
    protected void flushLines(boolean _lastFlush = false, RetailLabelChangeExclusionProvider _exclusionProvider = null, RetailStoreId _currentStoreId = '')
    {
        RetailLabelChangeJournalTrans journalTrans;
        RetailInventItemLabelSetup itemLabelSetup;
        Set organizationTypes = new Set(Types::Enum);
        boolean more;

        void createLabels()
        {
            if (OMInternalOrganization::isInternalOrganizationInSubHierarchy(
                    lastOperatingUnitId,
                    itemLabelSetup.OMInternalOrganization,
                    itemLabelSetup.OMHierarchyType,
                    DateTimeUtil::utcNow(),
                    organizationTypes))
            {
                this.createInventItemLabel(journalTrans, itemLabelSetup);
            }
        }

        if (linesRecordSortedList)
        {
            if (linesRecordSortedList.len())
            {
                linesRecordSortedList.insertDatabase();
            }

            organizationTypes.add(OMInternalOrganizationType::OperatingUnit);
            for (more = linesRecordSortedList.first(journalTrans); more; more = linesRecordSortedList.next(journalTrans))
            {
                if (lastStoreGenerateItemLabels)
                {
                    // Create item template lines for the journal line
                    while select LabelType, ReportName, Text1, Text2, OMInternalOrganization, OMHierarchyType from itemLabelSetup
                        where itemLabelSetup.ItemId == journalTrans.ItemId
                           && itemLabelSetup.LabelType == RetailLabelTypeBase::ItemLabel
                    {
                        createLabels();
                    }
                }

                if (lastStoreGenerateShelfLabels)
                {
                     // Create shelf template lines for the journal line
                    while select LabelType, ReportName, Text1, Text2, OMInternalOrganization, OMHierarchyType from itemLabelSetup
                        where itemLabelSetup.ItemId == journalTrans.ItemId
                           && itemLabelSetup.LabelType == RetailLabelTypeBase::ShelfLabel
                    {
                        createLabels();
                    }
                }
            }
        }

        lineNum = 0;
        linesRecordSortedList = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFetcher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the fetcher class providing the source data for label change journal.
    /// </summary>
    /// <returns>
    /// Retail label change fetcher class.
    /// </returns>
    abstract protected RetailLabelChangeDataFetcher getFetcher()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parameter values from the dialog form.
    /// </summary>
    /// <returns>true if the parameters were retrieved; otherwise, false.</returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        priceDate = dialogPriceDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets nerw label change journal number from the configured number sequence.
    /// </summary>
    /// <returns>
    /// Label change journal number.
    /// </returns>
    /// <remarks>
    /// Uses a number sequence for numbers generation.
    /// </remarks>
    protected RetailLabelChangeJournalId getJournalId()
    {
        if (!numberSeq)
        {
            numberSeq = NumberSeq::newGetNum(RetailParameters::numRefLabelChangeJournalId());
        }

        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasJournalsToShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the generator has journals to show.
    /// </summary>
    /// <returns>
    /// true if the generator has journals to show; false otherwise.
    /// </returns>
    abstract protected boolean hasJournalsToShow()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a label change journal line.
    /// </summary>
    /// <param name="_journalNum">
    /// Label change journal number.
    /// </param>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_variantId">
    /// Product variant Id.
    /// </param>
    /// <param name="_price">
    /// Actual price.
    /// </param>
    /// <param name="_qty">
    /// Quantity.
    /// </param>
    /// <param name="_unitId">
    /// Unit of measure.
    /// </param>
    /// <param name="_storeId">
    /// Retail store Id.
    /// </param>
    /// <returns>
    /// <c>RetailLabelChangeJournalTrans</c> record.
    /// </returns>
    protected RetailLabelChangeJournalTrans initJournalTrans(
        RetailLabelChangeJournalId _journalNum,
        ItemId _itemId,
        RetailVariantId _variantId,
        Price _price,
        InventQty _qty,
        InventUnitId _unitId,
        RetailStoreId _storeId)
    {
        RetailLabelChangeJournalTrans journalTrans;

        journalTrans.initValue();
        journalTrans.JournalNum = _journalNum;
        journalTrans.ItemId = _itemId;
        journalTrans.VariantId = _variantId;
        journalTrans.Price = _price;
        journalTrans.UnitId = _unitId;
        journalTrans.StoreId = _storeId;
        journalTrans.Qty = _qty;
        journalTrans.PriceValidOnDate = priceDate;

        ++lineNum;
        journalTrans.LineNum = lineNum;

        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    public void initParmDefault()
    {
        super();

        if (givenPriceDate)
        {
            priceDate = givenPriceDate;
            givenPriceDate = dateNull();
        }
        else
        {
            priceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whetehr a new journal creation is required.
    /// </summary>
    /// <returns>
    /// true if a new journal is required for the current line; false otherwise.
    /// </returns>
    protected boolean newJournalRequired()
    {
        return currentStoreId != lastStoreId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current version of the parameters.
    /// </summary>
    /// <returns>Returns a container with Version Number and list of parameters.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGivenPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Price Date.
    /// </summary>
    /// <param name = "_givenPriceDate">The Price date to be updated.</param>
    /// <returns>Returns the new or current price date.</returns>
    protected final PriceDate parmGivenPriceDate(priceDate _givenPriceDate = givenPriceDate)
    {
        givenPriceDate = _givenPriceDate;
        return givenPriceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the job of processing current label change journal line.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store Id.
    /// </param>
    /// <param name="_journalNum">
    /// Label change journal number.
    /// </param>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_variantId">
    /// Variant Id.
    /// </param>
    /// <param name = "_price">
    /// Actual price.
    /// </param>
    /// <param name="_qty">
    /// Line quantity.
    /// </param>
    /// <param name="_unitId">
    /// Unit of measure.
    /// </param>
    protected void processJournalLine(
        RetailStoreId _storeId,
        RetailLabelChangeJournalId _journalNum,
        ItemId _itemId,
        RetailVariantId _variantId,
        Price _price,
        Qty _qty,
        UnitOfMeasureSymbol _unitId)
    {
        RetailLabelChangeJournalTrans journalTrans;

        journalTrans.JournalNum = _journalNum;
        journalTrans.ItemId = _itemId;
        journalTrans.VariantId = _variantId;

        if (this.findInCache(journalTrans))
        {
            this.updateInCache(journalTrans, _qty);
        }
        else
        {
            journalTrans = this.initJournalTrans(_journalNum, _itemId, _variantId, _price, _qty, _unitId, _storeId);
            this.addToCache(journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeObsoleteJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides parent method to do nothing.
    /// </summary>
    protected void removeObsoleteJournals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ru the Create Label Change Journals.
    /// </summary>
    public void run()
    {
        this.createLabelChangeJournals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGeneratedJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to show generated journals to the user.
    /// </summary>
    /// <returns>
    /// true if journals need to be shown to the user; false otherwise.
    /// </returns>
    protected boolean showGeneratedJournals()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record that is the source for journals generation.
    /// </summary>
    /// <param name="_callerRecord">
    /// A record the operation was called with.
    /// </param>
    /// <returns>
    /// A source record that all the generated journals are related to.
    /// </returns>
    /// <remarks>
    /// Override this method in derrivatives to provide proper context for showing generated journals.
    /// </remarks>
    protected Common sourceRecord(Common _callerRecord)
    {
        return _callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the class parameters.
    /// </summary>
    /// <param name = "packedClass">The packed version of the class.</param>
    /// <returns>true if successful, otherwise false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        boolean ret = false;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                // Overwrite the hydrated price date restored from SyslastValue with the given price date if we have one.
                // This trick is required to restore proper price date value on client (when showing a dialog) when the class is running on Server.
                // We need to reassign price date value only once as the second time it is being restored with the value set up in the dialog and we should not overwrite the value then.
                if (givenPriceDate)
                {
                    priceDate = givenPriceDate;
                    givenPriceDate = dateNull();
                }
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>RetailLabelChangeJournalTrans</c> record entry in cache.
    /// </summary>
    /// <param name="_journalTrans">
    /// Label change journal trans record.
    /// </param>
    /// <param name="_qty">
    /// Quantity.
    /// </param>
    protected void updateInCache(RetailLabelChangeJournalTrans _journalTrans, Qty _qty)
    {
        _journalTrans.Qty += _qty;
        linesRecordSortedList.ins(_journalTrans, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute validations before generating the Price Label Journal.
    /// </summary>
    /// <param name = "calledFrom">The caller object.</param>
    /// <returns>true when all validations pass; otherwise, false.</returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!priceDate)
        {
            ret = checkFailed("@SYP4880963");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>RetailLabelChangeJournalGenerator</c> base on the <c>RetailLabelChangeGenerationType</c> specified.
    /// </summary>
    /// <param name="_type">
    /// Generation type.
    /// </param>
    /// <param name="_args">
    /// Args.
    /// </param>
    /// <returns>
    /// An instance of <c>RetailLabelChangeJournalGenerato</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error if <paramref name="_type"/> has invalid value.
    /// </exception>
    private static RetailLabelChangeJournalGenerator construct(RetailLabelChangeGenerationType _type, Args _args)
    {
        RetailLabelChangeJournalGenerator generator = null;

        switch (_type)
        {
            case RetailLabelChangeGenerationType::FromSource:
                generator = RetailLabelChangeJournalGenSource::construct(_args);
                break;
            case RetailLabelChangeGenerationType::Batch:
                generator = RetailLabelChangeJournalGeneratorBatch::newFromArgs(_args);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides description for the class.
    /// </summary>
    /// <returns>
    /// Description of the class.
    /// </returns>
    /// <remarks>
    /// Description also serves as a caption for the dialog.
    /// </remarks>
    public static ClassDescription description()
    {
        return "@SYP4881018";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main method used to generate the Price Label Journal.
    /// </summary>
    /// <param name = "args">The <c>Args</c> object.</param>
    public static void main(Args args)
    {
        RetailLabelChangeJournalGenerator   generator;
        RetailLabelChangeGenerationType     generationType;

        if (!args || args.parmEnumType() != enumNum(RetailLabelChangeGenerationType))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        generationType = args.parmEnum();
        generator = RetailLabelChangeJournalGenerator::newOnServer(generationType, args);

        if (generator.prompt())
        {
            generator.runOperation();

            if (generator.hasJournalsToShow())
            {
                if (generator.showGeneratedJournals())
                {
                    RetailLabelChangeJournalGenerator::showJournalsForm(generator.sourceRecord(args.record()));
                }
            }
            else
            {
                if (!generator.isInBatch())
                {
                    warning("@SYP4880964");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>RetailLabelChangeJournalGenerator</c> on Server.
    /// </summary>
    /// <param name="_type">
    /// Generation type.
    /// </param>
    /// <param name="_args">
    /// Args.
    /// </param>
    /// <returns>
    /// An initialized instance of the <c>RetailLabelChangeJournalGenerator</c> class.
    /// </returns>
    /// <remarks>
    /// Instantiates a clss on Server.
    /// </remarks>
    protected static RetailLabelChangeJournalGenerator newOnServer(RetailLabelChangeGenerationType _type, Args _args)
    {
        return RetailLabelChangeJournalGenerator::construct(_type, _args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJournalsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a label change journal form to the user.
    /// </summary>
    /// <param name="_record">
    /// Source record the journals were generated for.
    /// </param>
    private static void showJournalsForm(Common _record)
    {
        MenuFunction mf = new MenuFunction(menuitemDisplayStr(RetailLabelChangeJournalTable), MenuItemType::Display);
        Args args = new Args();
        args.record(_record);
        mf.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>