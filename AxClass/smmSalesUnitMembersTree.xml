<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmSalesUnitMembersTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmSalesUnitMembersTree extends smmFormTreeDatasource
{
    HcmWorker            hcmWorkerDrag;
    CrmWorkerRecId       selectedWorker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a node.
    /// </summary>
    /// <param name="_dropNodeIdx">
    /// The node ID.
    /// </param>
    public void addMember(int _dropNodeIdx)
    {
        smmSalesUnitMembers  salesUnitMember;
        smmSalesUnitMembers  newSalesUnitMember;
        smmSalesUnitMembers  checkedSalesUnitMember;
        boolean              createAsSecondary;
        FormTreeItem         dropedNode;

        createAsSecondary = false;

        // If worker or dropped node does not exist
        if ((!hcmWorkerDrag && !_dropNodeIdx) || (_dropNodeIdx && _dropNodeIdx == tree.getRoot()))
        {
            return;
        }

        // Find the dropped node
        dropedNode = tree.getItem(_dropNodeIdx);
        salesUnitMember = smmSalesUnitMembers::findMemberId(dropedNode.data());
        selectedWorker = 0;

        if (salesUnitMember.SalesUnitId)
        {
            checkedSalesUnitMember = smmSalesUnitMembers::findUnitAndMember(salesUnitMember.SalesUnitId, hcmWorkerDrag.RecId);

            if (!checkedSalesUnitMember && !smmSalesUnitMembers::memberOkToInsert(hcmWorkerDrag.RecId))
            {
                // %1 is already a primary member of another sales unit. Create as secondary member of this sales unit?
                if (Box::yesNo(strfmt("@SYS80619", hcmWorkerDrag.name()), DialogButton::No) != DialogButton::Yes)
                {
                    return;
                }

                createAsSecondary = true;
            }
        }

        if (!checkedSalesUnitMember || createAsSecondary)
        {
            newSalesUnitMember.initValue();
            newSalesUnitMember.SalesPersonWorker    = hcmWorkerDrag.RecId;
            newSalesUnitMember.SalesUnitId          = salesUnitMember.SalesUnitId;
            newSalesUnitMember.Relation             = smmSalesUnitMemberRelation::Primary;

            if (createAsSecondary)
            {
                newSalesUnitMember.Relation     = smmSalesUnitMemberRelation::Secondary;
            }

            newSalesUnitMember.ParentId        = smmSalesUnit::find(salesUnitMember.SalesUnitId).ParentId;
            newSalesUnitMember.insert();

            selectedWorker                      = newSalesUnitMember.SalesManagerWorker;
            basicRecId                          = newSalesUnitMember.RecId;

            // Refresh parent node
            this.updateParent(salesUnitMember.SalesPersonWorker ? tree.getParent(_dropNodeIdx) : _dropNodeIdx);
        }
        else
        {
            // %1 is already a member this sales unit
            info(strfmt("@SYS80620", hcmWorkerDrag.name()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the sub tree.
    /// </summary>
    /// <param name="_parentIdx">
    /// The parent ID.
    /// </param>
    /// <param name="_parentValue">
    /// The parent value.
    /// </param>
    /// <param name="rebuild">
    /// A Boolean value that indicates whether to rebuild.
    /// </param>
    /// <returns>
    /// The ID of the current record.
    /// </returns>
    public int buildSubTree(int _parentIdx, anytype _parentValue, boolean rebuild = false)
    {
        FormTreeItem        formTreeItem;
        Common              childRecord;
        QueryRun            childQuery;
        int                 children;
        int                 idx;
        int                 idxCurrentRecord;
        int                 hdl;
        int                 type;
        str                 selectedDataStr;
        smmSalesUnitMembers salesUnitMembers;
        HcmWorker           hcmWorker;
        anytype             idValue;

        // data is fetched using record leve security
        hcmWorker.recordLevelSecurity(true);

        if (rebuild || !doneNode.in([_parentIdx]))
        {
            if (rebuild)
            {
                // Delete existing subtree
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    doneNode.remove([hdl]);
                    tree.delete(hdl);
                    hdl = tree.getChild(_parentIdx);
                }
            }

            [SelectedData] = selectionStack.pop();

            children    = 0;

            childQuery  = this.subTreeQueryRun(_parentValue);

            while (childQuery.next())
            {
                childRecord = childQuery.get(formDataSource.table());
                this.getChildRecord(childRecord);

                idValue = childRecord.(id);

                formTreeItem = new FormTreeItem(this.itemText(childRecord.(id),
                                                childRecord.(txt)),
                                                this.getImageListIdx(childRecord.TableId,
                                                childRecord.RecId),
                                                this.subTreeQueryRun(childRecord.(id)).next(),
                                                idValue);

                formTreeItem = this.modifyFormTreeItem(formTreeItem);

                if (childRecord.TableId == tablenum(smmSalesUnitMembers))
                {
                    salesUnitMembers = childRecord;
                }

                if (!salesUnitMembers.SalesPersonWorker)
                {
                    formTreeItem.text(salesUnitMembers.SalesUnitId);
                }
                else
                {
                    hcmWorker = HcmWorker::find(childRecord.(fieldnum(smmSalesUnitMembers, SalesPersonWorker)));
                    formTreeItem.text(hcmWorker.name());
                }

                if (salesUnitMembers.SalesPersonWorker == NoYes::Yes)
                {
                    formTreeItem.stateBold(true);
                }

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                if (basicRecId == childRecord.RecId)
                {
                    idxCurrentRecord = idx;
                }

                children++;

                type = typeof(selectedData);

                if (type == Types::Integer)
                {
                    selectedDataStr = int2str(selectedData);
                }

                if (selectionStack.qty())
                {
                    if (IdValue == SelectedData)
                    {
                        tree.expand(idx, FormTreeExpand::Expand);
                    }
                }
                else
                {
                    if (selectedDataStr)
                    {
                        if (IdValue == selectedDataStr)
                        {
                            selectIdx = idx;
                        }
                    }
                    else
                    {
                        if (IdValue == selectedData)
                        {
                            selectIdx = idx;
                        }
                    }
                }
            }
            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            tree.setItem(formTreeItem);
        }

        doneNode.add([_parentIdx]);

        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageListIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image list ID.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <returns>
    /// The image ID.
    /// </returns>
    public int getImageListIdx(tableId _tableId, recId _recId)
    {
        smmSalesUnitMembers salesUnitMembers = null;

        if (salesUnitMembers.TableId == _tableId)
        {
            salesUnitMembers = smmSalesUnitMembers::findRecId(_recId);

            if (salesUnitMembers.SalesManager == NoYes::Yes)
            {
                return 3;
            }

            if (salesUnitMembers.SalesPersonWorker)
            {
                return 2;
            }

            return 1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of images.
    /// </summary>
    /// <returns>
    /// A list of images.
    /// </returns>
    public Imagelist imageList()
    {
        #macrolib.Resource
        #ResAppl

        Imagelist imagelist;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#RES_NODE_COMPANY));
        imagelist.add(new Image(#ImageBOM));
        imagelist.add(new Image(#RES_NODE_USER));
        imagelist.add(new Image(#RES_NODE_USERADM));

        return imagelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the sales unit member tree.
    /// </summary>
    /// <param name="_selectedNode">
    /// The selected node in the tree.
    /// </param>
    public void refreshTree(int _selectedNode)
    {
        int  idx = _selectedNode;

        tree.setFocus();
        this.buildSubTree(_selectedNode, tree.getItem(_selectedNode).data(), true);
        tree.expand(_selectedNode, FormTreeExpand::Expand);

        tree.select(_selectedNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSalesUnitMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a sales unit member from the tree.
    /// </summary>
    /// <param name="_salesUnitId">
    /// The sale unit ID.
    /// </param>
    /// <param name="_salesManagerWorker">
    /// The sales manager.
    /// </param>
    /// <param name="_deleteAll">
    /// A value that indicates whether to delete all
    /// </param>
    /// <param name="_promptForConfirmation">
    /// A value that indicates whether to prompt
    /// </param>
    public void removeSalesUnitMember(smmSalesUnitId _salesUnitId,CRMWorkerRecId _salesManagerWorker, boolean _deleteAll = false, boolean _promptForConfirmation = true)
    {
        FormTreeItem         formTreeItem;
        int                  idx;
        smmSalesUnitMembers  salesUnitMembers;

        idx             = tree.getSelection();
        formTreeItem    = tree.getItem(idx);

        if (this.topItemSelected() && !_deleteAll)
        {
            return;
        }

        formTreeItem = tree.getItem(tree.getSelection());

        if (_deleteAll)
        {
            if (smmSalesUnitMembers::removeAllMembersFromSalesUnit(_salesUnitId,_promptForConfirmation))
            {
                this.refreshTree(formTreeItem.idx());
            }

            return;
        }

        ttsbegin;

        salesUnitMembers = smmSalesUnitMembers::findUnitAndMember(_salesUnitId, _salesManagerWorker, true);

        if (smmSalesUnitMembers::removeMemberFromSalesUnit(salesUnitMembers, HcmWorker::find(_salesManagerWorker), _promptForConfirmation))
        {
            ttscommit;

            int nextSibling = tree.getNextSibling(formTreeItem.idx());
            int prevSibling = tree.getPrevSibling(formTreeItem.idx());
            int parent = tree.getParent(formTreeItem.idx());

            tree.delete(idx);
            doneNode.remove([idx]);

            if (nextSibling)
            {
                tree.select(nextSibling);
            }
            else if (prevSibling)
            {
                tree.select(prevSibling);
            }
            else if (parent)
            {
                tree.select(parent);
                this.buildSubTree(parent, tree.getItem(parent).data(), true);
            }
            else
            {
                tree.select(tree.getRoot());
            }
        }
        else
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectSalesUnitMember</Name>
				<Source><![CDATA[
    void selectSalesUnitMember(smmSalesUnitId _unitId, CRMWorkerRecId _worker = 0)
    {
        smmSalesUnitMembers     salesUnitMembers;
        smmSalesUnitMemberID    salesUnitMemberId;
        Stack                   selectedStack;
        FormTreeItem            treeItem;
        int                     idx;

        salesUnitMembers = smmSalesUnitMembers::findUnitAndMember(_unitId,_worker);
        selectedStack = new Stack();
        do
        {
            selectedStack.push([salesUnitMembers.MemberId]);
            if (salesUnitMembers.ParentId)
            {
                salesUnitMembers = smmSalesUnitMembers::findSalesUnitMember(salesUnitMembers.ParentId);
            }
            else
            {
                salesUnitMembers = null;
            }
        } while (salesUnitMembers);

        idx = tree.getFirstVisible();
        idx = tree.getNextVisible(idx);
        treeItem = tree.getItem(idx);

        while (selectedStack.qty())
        {
            [salesUnitMemberId] = selectedStack.pop();
            while (treeItem.data() != salesUnitMemberId)
            {
                idx = tree.getNextVisible(idx);
                treeItem = tree.getItem(idx);
            }
            if (treeItem.data() == salesUnitMemberId)
            {
                tree.expand(idx,FormTreeExpand::Expand);
            }
        }
        tree.select(idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTreeQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds and runs the query for the sub tree.
    /// </summary>
    /// <param name="_parentValue">
    /// The parent node.
    /// </param>
    /// <returns>
    /// The query run object.
    /// </returns>
    public QueryRun subTreeQueryRun(anytype _parentValue)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRun;
        QueryBuildRange         criteriaParentId;

        queryRun                = new QueryRun(originalQuery);
        query                   = queryRun.query();
        queryBuildDataSource    = query.dataSourceTable(formDataSource.table());
        criteriaParentId        = queryBuildDataSource.addRange(parentId);

        if (!queryBuildDataSource.sortFieldCount())
        {
            queryBuildDataSource.addSortField(fieldnum(smmSalesUnitMembers, SalesUnitId));
            queryBuildDataSource.addSortField(fieldnum(smmSalesUnitMembers, SalesPersonWorker));
            queryBuildDataSource.addSortField(fieldnum(smmSalesUnitMembers, Relation));
            queryBuildDataSource.addSortField(fieldnum(smmSalesUnitMembers, SortField));
        }

        if (_parentValue)
        {
            criteriaParentId.value(_parentValue);
        }
        else
        {
            criteriaParentId.value(strfmt('"%1"', queryValue(_parentValue)));

            query = this.buildDynaLinks(query);
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes a parent node in the tree.
    /// </summary>
    /// <param name="_parentIdx">
    /// The parent node ID.
    /// </param>
    public void updateParent(int _parentIdx)
    {
        tree.setFocus();
        this.buildSubTree(_parentIdx, tree.getItem(_parentIdx).data(), true);
        tree.expand(_parentIdx, FormTreeExpand::Expand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerTableDrag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>hcmWorker</c> table.
    /// </summary>
    /// <param name="_hcmWorkerDrag">
    /// The parameter value of the <c>hcmWorker</c> table.
    /// </param>
    /// <returns>
    /// The <c>hcmWorker</c> table.
    /// </returns>
    public HcmWorker workerTableDrag(HcmWorker _hcmWorkerDrag = hcmWorkerDrag)
    {
        hcmWorkerDrag = _hcmWorkerDrag;

        return hcmWorkerDrag;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>