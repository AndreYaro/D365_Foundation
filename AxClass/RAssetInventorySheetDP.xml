<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventorySheetDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetInventorySheetDP</c> class for <c>RAssetInventorySheet</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAsset)),
    SRSReportParameterAttribute(classStr(RAssetSRSReportContract))
]
class rAssetInventorySheetDP extends SRSReportDataProviderBase
{
    RAssetInventorySheetTMP     rAssetInventorySheetTMP;
    RAssetTransDate             disposalDate;
    Notes                       disposalNotes;
    RAssetId                    disposalDocumentNum;
    TransDate                   rAssetTransDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        /// <summary>
    /// Specifies some report fields: disposalDate, disposalNotes, disposalDocumentNum.
    /// </summary>
    /// <param name="_rAssetStandards">
    /// A record of <c>RAssetStandards</c> table.
    /// </param>
    public void calc(RAssetStandards _rAssetStandards)
    {
        RAssetTrans rAssetTrans;
        RAssetTable rAssetTable = RAssetTable::find(_rAssetStandards.AssetId);
        ;

        disposalDocumentNum = "";
        disposalDate        = dateNull();
        disposalNotes       = "";


        select firstonly AssetTransType, TransDate, Txt, Voucher from rAssetTrans
            where rAssetTrans.AccountNum      == _rAssetStandards.AssetId         &&
                  rAssetTrans.TransDate       <=  rAssetTransDate                &&
                  (rAssetTrans.AssetTransType == RAssetTransType::DisposalSale   ||
                   rAssetTrans.AssetTransType == RAssetTransType::Disposal       ||
                   rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap) &&
                  ! rAssetTrans.StornoRecId;

        switch (rAssetTrans.AssetTransType)
        {
            case  RAssetTransType::DisposalSale:
                disposalDate          = rAssetTrans.TransDate;
                disposalNotes         = rAssetTrans.Txt;
                if (rAssetTable.CustInvoiceId)
                {
                    disposalDocumentNum = rAssetTable.CustInvoiceId;
                }
                else if(rAssetTable.SalesId)
                {
                    disposalDocumentNum = rAssetTable.SalesId;
                }
                break;

            case  RAssetTransType::DisposalScrap,
                  RAssetTransType::Disposal:
                disposalDate          = rAssetTrans.TransDate;
                disposalNotes         = rAssetTrans.Txt;
                disposalDocumentNum   = rAssetTrans.Voucher;
                break;
            default :
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRAssetInventorySheetTmp</Name>
				<Source><![CDATA[
        /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Temporary table <c>RAssetInventorySheetTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RAssetInventorySheetTMP))
    ]
    public RAssetInventorySheetTMP getRAssetInventorySheetTmp()
    {
        return rAssetInventorySheetTMP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventorySheetTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>rAssetInventorySheetTmp</c> temporary table.
    /// </summary>
    /// <param name="_rAssetStandards">
    /// Passes <c>RAssetStandards</c> table object.
    /// </param>
    /// <param name="_rAssetSum">
    /// Passes <c>RAssetSumCalc</c> class object.
    /// </param>
    private void insertInventorySheetTmp(RAssetStandards _rAssetStandards, RAssetSumCalc _rAssetSum)
    {
        RAssetTable         rAssetTable = RAssetTable::find(_rAssetStandards.AssetId);
        rAssetInventorySheetTMP.clear();
        rAssetInventorySheetTMP.AssetMainGroupId    = rAssetTable.AssetGroup;
        rAssetInventorySheetTMP.AssetGroupId        = _rAssetStandards.AssetGroup;
        rAssetInventorySheetTMP.AssetId             = _rAssetStandards.AssetId;
        rAssetInventorySheetTMP.AssetSubGroupId     = _rAssetStandards.SubGroupId;
        rAssetInventorySheetTMP.AssetName           = rAssetTable.Name;
        rAssetInventorySheetTMP.AcquisitionValue    = _rAssetSum.acquisitionValue();
        rAssetInventorySheetTMP.NetBookValue        = _rAssetSum.netBookValue();
        rAssetInventorySheetTMP.DisposalDate        = disposalDate;
        rAssetInventorySheetTMP.DisposalNotes       = disposalNotes;
        rAssetInventorySheetTMP.DisposalDocumentNum = disposalDocumentNum;
        rAssetInventorySheetTMP.AssetGroupTypes     = RAssetMainGroup::find(rAssetTable.AssetGroup).GroupType;
        rAssetInventorySheetTMP.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        QueryBuildDataSource    qbs;
        RAssetSumCalc           rAssetSum;
        NoYes                   zeroBookValue;
        RAssetStandardId        rAssetStandardId;
        RAssetStandards         rAssetStandards;
        RAssetSRSReportContract contract = this.parmDataContract() as RAssetSRSReportContract;

        rAssetTransDate     = contract.parmRAssetTransDate();
        rAssetStandardId    = contract.parmRAssetStandardId();
        zeroBookValue       = contract.parmZeroBookValue();
        qr  = new QueryRun(this.parmQuery());
        qbs = qr.query().dataSourceTable(tableNum(RAssetStandards));
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetStandards, AssetStandardId)).value(rAssetStandardId);

        qbs = qbs.addDataSource(tableNum(RAssetTable));
        qbs.fetchMode(JoinMode::ExistsJoin);
        qbs.relations(true);
        SysQuery::findOrCreateRange(qbs, fieldNum(RAssetTable, AcquisitionDate)).value(SysQuery::range("", rAssetTransDate));

        while(qr.next())
        {
            rAssetStandards = qr.get(tableNum(RAssetStandards));
            rAssetSum = RAssetSumCalc_Trans::newAssetPeriod(rAssetStandards.AssetId, rAssetStandardId, rAssetTransDate);
            if(!zeroBookValue ||
               (zeroBookValue && (rAssetSum.netBookValue() > RAssetStandardTable::find(rAssetStandardId).AssetRound)))
            {
                this.calc(rAssetStandards);
                this.insertInventorySheetTmp(rAssetStandards, rAssetSum);
            }

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>