<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionValueDetailsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionValueDetailsEventHandler</c> class subscribes to events
/// and delegates involving dimension value details.
/// </summary>
public static class DimensionValueDetailsEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DimensionValueDetails_OnInitialized</Name>
				<Source><![CDATA[
    [FormEventHandler(formStr(DimensionValueDetails), FormEventType::Initialized)]
    public static void DimensionValueDetails_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        DimensionIValueDetailMaintain valueDetails = sender as DimensionIValueDetailMaintain;

        if (valueDetails)
        {
            // Enable or disable the legal entity override fields based on dimension attribute.
            FormTabPageControl legalEntityOverridesTab = DimensionValueDetailsEventHandler::getValueDetailsExtentionControl(sender, identifierStr(LegalEntityOverridesTab));

            if (legalEntityOverridesTab)
            {
                legalEntityOverridesTab.visible(!valueDetails.isSaveDataPerCompany());
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                FormCheckBoxControl extension_IsBalancing_PSN = DimensionValueDetailsEventHandler::getValueDetailsExtentionControl(sender, identifierStr(Extension_IsBalancing_PSN));

                if (extension_IsBalancing_PSN)
                {
                    DimensionAttribute dimAttr = valueDetails.getDimensionAttribute();

                    // Do not allow the IsBalancing checkbox to be unchecked if specified as balancing for all values.
                    extension_IsBalancing_PSN.enabled(!dimAttr.IsBalancing_PSN);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeValue_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(DimensionValueDetails, DimensionAttributeValue), FormDataSourceEventType::SelectionChanged)]
    public static void DimensionAttributeValue_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        DimensionValueDetailsEventHandler::setIsSuspendedEnablement(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsTotal_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(DimensionValueDetails, DimensionAttributeValue, IsTotal), FormDataFieldEventType::Modified)]
    public static void IsTotal_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormRun formRun = sender.dataSource().formRun();
        DimensionValueDetailsEventHandler::setIsSuspendedEnablement(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddLegalEntityOverride_OnDialogClosed</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DimensionValueDetails, AddLegalEntityOverride), FormControlEventType::DialogClosed)]
    public static void AddLegalEntityOverride_OnDialogClosed(FormControl sender, FormControlEventArgs e)
    {
        #task
        sender.dataSourceObject().research(true);

        FormRun senderFormRun = sender.formRun();

        if (senderFormRun.inViewMode())
        {
            // Clicking Add button should put the form in edit mode.
            senderFormRun.task(#taskEditRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ActiveFrom_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(DimensionValueDetails, DimensionAttributeValue, ActiveFrom), FormDataFieldEventType::Modified)]
    public static void ActiveFrom_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        DimensionAttributeValue dimensionAttributeValue = sender.dataSource().cursor();

        DimensionActiveFrom origActiveFrom = dimensionAttributeValue.orig().ActiveFrom;
        DimensionActiveFrom activeFrom = dimensionAttributeValue.ActiveFrom;

        if (activeFrom >= origActiveFrom
            && (activeFrom <= dimensionAttributeValue.ActiveTo
            || dimensionAttributeValue.ActiveTo == dateNull()))
        {
            DimensionAttrValueLedgerOverride dimensionAttrValueLedgerOverride;

            select firstonly RecId from dimensionAttrValueLedgerOverride
                where dimensionAttrValueLedgerOverride.DimensionAttributeValue == dimensionAttributeValue.RecId
                    && dimensionAttrValueLedgerOverride.ActiveFrom < activeFrom;

            if (dimensionAttrValueLedgerOverride.RecId)
            {
                // The global modification is less restrictive than the overrides (active from date is after the override), so display the changes
                Args args = new Args();
                args.name(formStr(DimensionValueGlobalDates));
                args.caller(sender.dataSource().formRun());
                args.parmEnumType(enumnum(DimensionValueGlobalDatesEditOption));
                args.parmEnum(DimensionValueGlobalDatesEditOption::ActiveFrom);
                args.record(dimensionAttributeValue);
                args.openMode(OpenMode::Auto);

                FormRun dimensionValueGlobalDatesForm = classfactory.formRunClass(args);

                if (dimensionValueGlobalDatesForm)
                {
                    dimensionValueGlobalDatesForm.init();
                    dimensionValueGlobalDatesForm.run();
                    dimensionValueGlobalDatesForm.wait(true);

                    if (!dimensionValueGlobalDatesForm.closedOk())
                    {
                        // Reset back to orig value.
                        dimensionAttributeValue.ActiveFrom = origActiveFrom;
                        sender.dataSource().write();
                    }

                    sender.dataSource().research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ActiveTo_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(DimensionValueDetails, DimensionAttributeValue, ActiveTo), FormDataFieldEventType::Modified)]
    public static void ActiveTo_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        DimensionAttributeValue dimensionAttributeValue = sender.dataSource().cursor();

        DimensionActiveFrom origActiveTo = dimensionAttributeValue.orig().ActiveTo;
        DimensionActiveFrom activeTo = dimensionAttributeValue.ActiveTo;

        if ((activeTo < origActiveTo || origActiveTo == dateNull())
            && (activeTo >= dimensionAttributeValue.ActiveFrom || dimensionAttributeValue.ActiveFrom == dateNull()))
        {
            DimensionAttrValueLedgerOverride dimensionAttrValueLedgerOverride;

            select firstonly RecId from dimensionAttrValueLedgerOverride
                where dimensionAttrValueLedgerOverride.DimensionAttributeValue == dimensionAttributeValue.RecId &&
                    (dimensionAttrValueLedgerOverride.ActiveTo > activeTo ||
                    dimensionAttrValueLedgerOverride.ActiveTo == dateNull());

            if (dimensionAttrValueLedgerOverride.RecId)
            {
                // The global modification is less restrictive than the overrides (active to date is before the override), so display the changes
                Args args = new Args();
                args.name(formStr(DimensionValueGlobalDates));
                args.caller(sender.dataSource().formRun());
                args.parmEnumType(enumnum(DimensionValueGlobalDatesEditOption));
                args.parmEnum(DimensionValueGlobalDatesEditOption::ActiveTo);
                args.record(dimensionAttributeValue);
                args.openMode(OpenMode::Auto);

                FormRun dimensionValueGlobalDatesForm = classfactory.formRunClass(args);

                if (dimensionValueGlobalDatesForm)
                {
                    dimensionValueGlobalDatesForm.init();
                    dimensionValueGlobalDatesForm.run();
                    dimensionValueGlobalDatesForm.wait(true);

                    if (!dimensionValueGlobalDatesForm.closedOk())
                    {
                        // Reset back to orig value.
                        dimensionAttributeValue.ActiveTo = origActiveTo;
                        sender.dataSource().write();
                    }

                    sender.dataSource().research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSuspended_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(DimensionValueDetails, DimensionAttributeValue, IsSuspended), FormDataFieldEventType::Modified)]
    public static void IsSuspended_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        DimensionAttributeValue dimensionAttributeValue = sender.dataSource().cursor();

        DimensionAttrValueLedgerOverride dimensionAttrValueLedgerOverride;

        if (dimensionAttributeValue.IsSuspended == NoYes::Yes)
        {
            // Suspend this dimension value for all ledgers
            update_recordset dimensionAttrValueLedgerOverride
                setting IsSuspended = NoYes::Yes
                where dimensionAttrValueLedgerOverride.DimensionAttributeValue == dimensionAttributeValue.RecId;
        }
        else
        {
            Ledger currentledger;

            // Activate this dimension value for all ledgers for which IsSuspendedOverriddenByUser = No
            update_recordSet dimensionAttrValueLedgerOverride
                setting IsSuspended = dimensionAttributeValue.IsSuspended
                where  dimensionAttrValueLedgerOverride.DimensionAttributeValue == dimensionAttributeValue.RecId
                    && dimensionAttrValueLedgerOverride.IsSuspendedOverriddenByUser == NoYes::No
                    join currentledger
                        where currentledger.RecId == dimensionAttrValueLedgerOverride.Ledger;
        }

        // Research datasource, in case the legal entity override values were changed.
        // Research will cause a selection change to run the setIsSuspendedEnablement logic.
        sender.dataSource().research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RemoveLegalEntityOverride_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DimensionValueDetails, RemoveLegalEntityOverride), FormControlEventType::Clicked)]
    public static void RemoveLegalEntityOverride_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormDataSource dataSource = sender.parentControl().dataSourceObject();
        DimensionAttrValueLedgerOverride dimensionAttributeValueLedgerOverride = dataSource.cursor() as DimensionAttrValueLedgerOverride;

        if (dimensionAttributeValueLedgerOverride.RecId)
        {
            if (Box::yesNo("@SYS319017", DialogButton::No) == DialogButton::Yes)
            {
                ttsbegin;

                dimensionAttributeValueLedgerOverride.delete();
                ttscommit;
            }
        }

        dataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddLegalEntityOverride_OnGotFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a dimension attribute value if the current record does not have one
    /// when the <c>AddLegalEntityOverride</c> control gets focus.
    /// </summary>
    /// <param name="_sender">
    /// The control that triggered the event.
    /// </param>
    /// <param name="_e">
    /// The event args relating to the form control.
    /// </param>
    [FormControlEventHandler(formControlStr(DimensionValueDetails, AddLegalEntityOverride), FormControlEventType::GotFocus)]
    public static void AddLegalEntityOverride_OnGotFocus(FormControl _sender, FormControlEventArgs _e)
    {
        FormDataSource davDataSource = _sender.dataSourceObject();

        if (davDataSource)
        {
            DimensionAttributeValue dimensionAttributeValue = davDataSource.cursor();

            if (!dimensionAttributeValue.RecId)
            {
                FormRun formRun = _sender.formRun();

                if (formRun)
                {
                    DimensionAttribute dimensionAttribute = formRun.args().record() as DimensionAttribute;

                    if (dimensionAttribute.RecId)
                    {
                        FormDataSource valuesDataSource = formRun.dataSource(formDataSourceStr(DimensionValueDetails, Values));
                        RecId valuesRecId;

                        if (valuesDataSource)
                        {
                            valuesRecId = valuesDataSource.cursor().RecId;
                        }

                        if (valuesRecId)
                        {
                            dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
                                dimensionAttribute.RecId,
                                valuesRecId,
                                true,
                                true);

                            // Refresh the control's datasource so the click event has the dimension attribute value that was just created
                            davDataSource.research(true);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptionsEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_sender">The sender <c>xFormRun</c> instance.</param>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    [SubscribesTo(formStr(DimensionValueDetails), delegateStr(DimensionValueDetails, customizeMenuOptionsEvent))]
    public static void customizeMenuOptionsEvent(xFormRun _sender, OfficeMenuOptions _menuOptions)
    {
        DimensionIValueDetailMaintain dimensionValueDetailsForm = _sender as DimensionIValueDetailMaintain;

        OfficeGeneratedExportMenuItem menuItem = OfficeGeneratedExportMenuItem::construct(
            tableStr(FinancialDimensionValueEntity),
            tableStr(FinancialDimensionValueEntity));
        menuItem.setDisplayNameWithDataEntity();
        _menuOptions.customMenuItems().addEnd(menuItem);

        if (dimensionValueDetailsForm.getDimensionAttribute().Type == DimensionAttributeType::CustomList)
        {
            menuItem = OfficeGeneratedExportMenuItem::construct(
                tableStr(FinancialDimensionValueTranslationEntity),
                tableStr(FinancialDimensionValueTranslationEntity));
            menuItem.setDisplayNameWithDataEntity();
            _menuOptions.customMenuItems().addEnd(menuItem);
        }

        if (!dimensionValueDetailsForm.isSaveDataPerCompany())
        {
            menuItem = OfficeGeneratedExportMenuItem::construct(
                tableStr(FinancialDimensionValueLegalEntityOverrideEntity),
                tableStr(FinancialDimensionValueLegalEntityOverrideEntity));
            menuItem.setDisplayNameWithDataEntity();
            _menuOptions.customMenuItems().addEnd(menuItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContextEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specifed menu item.
    /// </summary>
    /// <param name = "_sender">The sender <c>xFormRun</c> instance.</param>
    /// <param name = "_menuItem">The menu item.</param>
    /// <param name = "_result">
    /// The event handler result to be filled with the <c>ExportToExcelDataEntityContext</c> instance that specifies what
    /// should be exported for the specifed menu item.
    /// </param>
    [SubscribesTo(formStr(DimensionValueDetails), delegateStr(DimensionValueDetails, getDataEntityContextEvent))]
    public static void getDataEntityContextEvent(xFormRun _sender, OfficeGeneratedExportMenuItem _menuItem, EventHandlerResult _result)
    {
        DimensionIValueDetailMaintain valueDetails = _sender as DimensionIValueDetailMaintain;

        switch (_menuItem.dataEntityName())
        {
            case tableStr(FinancialDimensionValueEntity):
                ExportToExcelDataEntityContext context = ExportToExcelDataEntityContext::construct(_menuItem.dataEntityName());

                // Add a filter to show data only for the current dimension attribute.
                ListEnumerator entities = context.entities().getEnumerator();
                entities.moveNext();
                ExportToExcelDataEntityInfo entity = entities.current();

                ExportToExcelFilterTreeBuilder exportFilterTreeBuilder = new ExportToExcelFilterTreeBuilder(_menuItem.dataEntityName());
                entity.filter(exportFilterTreeBuilder.areEqual(
                    fieldstr(FinancialDimensionValueEntity, FinancialDimension),
                    valueDetails.getDimensionAttribute().Name));

                ListEnumerator bindings = context.bindings().getEnumerator();
                bindings.moveNext();
                ExportToExcelDataEntityBindingInfo binding = bindings.current();

                if (valueDetails.isSaveDataPerCompany())
                {
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, FinancialDimension));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, LegalEntityId));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, DimensionValue));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, Description));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, ActiveFrom));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, ActiveTo));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsSuspended));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsTotal));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsBlockedForManualEntry));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, GroupDimension));

                    // Entity Extensions
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsBalancing_PSN));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, Owner));
                }
                else
                {
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, FinancialDimension));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, DimensionValue));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, Description));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, ActiveFrom));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, ActiveTo));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsSuspended));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsTotal));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsBlockedForManualEntry));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, GroupDimension));

                    // Entity Extensions
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, IsBalancing_PSN));
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, Owner));

                    // This should be left blank for this financial dimension,
                    // but cannot be left off the list as then Excel would not allow publishing.
                    binding.fieldList().addEnd(fieldStr(FinancialDimensionValueEntity, LegalEntityId));
                }

                _result.result(context);
                break;

            case tableStr(FinancialDimensionValueTranslationEntity):
            case tableStr(FinancialDimensionValueLegalEntityOverrideEntity):
                context = ExportToExcelDataEntityContext::constructDefault(_menuItem.dataEntityName());

                // Add a filter to show data only for the current dimension attribute.
                entities = context.entities().getEnumerator();
                entities.moveNext();
                entity = entities.current();

                exportFilterTreeBuilder = new ExportToExcelFilterTreeBuilder(_menuItem.dataEntityName());

                // The FinancialDimension field is named the same for both entities.
                entity.filter(exportFilterTreeBuilder.areEqual(
                    fieldstr(FinancialDimensionValueTranslationEntity, FinancialDimension),
                    valueDetails.getDimensionAttribute().Name));

                _result.result(context);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueDetailsExtentionControl</Name>
				<Source><![CDATA[
    private static FormControl getValueDetailsExtentionControl(xFormRun _formRun, IdentifierName _extentionControlName)
    {
        return _formRun.control(_formRun.controlId(_extentionControlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsSuspendedEnablement</Name>
				<Source><![CDATA[
    private static void setIsSuspendedEnablement(FormRun _formRun)
    {
        FormCheckBoxControl ledgerOverride_IsSuspended = DimensionValueDetailsEventHandler::getValueDetailsExtentionControl(_formRun, identifierStr(LedgerOverride_IsSuspended));
        DimensionIValueDetailMaintain valueDetails = _formRun as DimensionIValueDetailMaintain;
        DimensionAttributeValue dimensionAttributeValue = valueDetails.getDimensionAttributeValue();

        if (dimensionAttributeValue.IsSuspended || dimensionAttributeValue.IsTotal)
        {
            // At legal entity level it is disabled if it's a total OR it is already is suspeded at the shared level
            ledgerOverride_IsSuspended.enabled(false);
        }
        else
        {
            // Otherwise it is enabled at the legal entity level because it is not a total and not suspended at the shared level
            ledgerOverride_IsSuspended.enabled(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>