<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoicePost_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoicePost_MX</c> class handles the posting of the Retail EInvoice for CFDI.
/// </summary>
public class RetailEInvoicePost_MX extends EInvoicePost_MX
{
    private RetailEInvoiceAggregatedStatement_MX aggregatedStatement;
    private boolean paymModeCanBeRetrieved;
    RetailStatementJour statementJour;
    RetailStatementJourExt statementJourExt;
    RetailStoreTable storeTable;
    InvoiceDateTime_MX eInvoiceDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfSrcInvoiceContainDataForEInvoice</Name>
				<Source><![CDATA[
    public boolean checkIfSrcInvoiceContainDataForEInvoice()
    {
        Query transQuery = this.getTransQuery();
        transQuery.dataSourceTable(tableNum(RetailTransSalesTransAmountExclPrepView)).firstOnly(true);

        return new QueryRun(transQuery).next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesToProcess</Name>
				<Source><![CDATA[
    private int64 linesToProcess()
    {
        Query transQuery = this.getTransQuery();
        transQuery.clearGroupBy();

        QueryBuildDataSource qbds = transQuery.dataSourceTable(tableNum(RetailTransSalesTransAmountExclPrepView));
        qbds.addSelectionField(fieldNum(RetailTransSalesTransAmountExclPrepView, RetailTransactionTableRecId), SelectionField::Count);

        QueryRun qr = new QueryRun(transQuery);
        if (qr.next())
        {
            RetailTransSalesTransAmountExclPrepView salesTransView = qr.get(tableNum(RetailTransSalesTransAmountExclPrepView));
            return salesTransView.RetailTransactionTableRecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIStatementReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates references to the original electronic invoice.
    /// </summary>
    private void createCFDIStatementReference()
    {
        RetailEInvoiceCFDIRefProcessor_MX retailEInvoiceCFDIRefProcessor_MX = RetailEInvoiceCFDIRefProcessor_MX::construct(eInvoiceJour);

        if (retailEInvoiceCFDIRefProcessor_MX)
        {
            retailEInvoiceCFDIRefProcessor_MX.createCFDIStatementReference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElectronicInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the electronic invoice record based on original Invoice
    /// </summary>
    public void createElectronicInvoiceJour()
    {
        boolean success;

        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();
        RetailCFDITelemetry_MX::postGlobalCFDIJourStart(funcName());
        int64 linesToProcess = this.linesToProcess();

        try
        {
            this.initFromElectronicInvoiceParameters();

            this.initFromInvoiceJour();

            this.initRetailSpecificParameters();

            eInvoiceJour.insert();

            this.createElectronicInvoiceTrans();

            if (eInvoiceJour.IsReturn && EInvoiceCFDIParameters_MX::find().RetailEnableRelatedCFDIInReturns)
            {
                this.createCFDIStatementReference();
            }

            this.setPaymMode();

            eInvoiceJour.XMLDoc = this.createXMLDoc();
            eInvoiceJour.CFDIOriginalString = this.getCFDIOriginalString(eInvoiceJour);

            eInvoiceJour.update();

            if (!this.validate())
            {
                throw error("@SYS319214");
            }

            success = true;
        }
        finally
        {
            stopwatch.Stop();
            RetailCFDITelemetry_MX::postGlobalCFDIJourFinish(funcName(), success, stopwatch.ElapsedMilliseconds, linesToProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElectronicInvoiceTrans</Name>
				<Source><![CDATA[
    public void createElectronicInvoiceTrans()
    {
        EInvoiceCFDIParameters_MX cfdiParameter = EInvoiceCFDIParameters_MX::find();
        RecordInsertList rsl = new RecordInsertList(tableNum(EInvoiceTrans_MX));
        RetailTransSalesTransAmountExclPrepView transactionSalesTrans;

        eInvoiceTrans.RefEInvoiceJourRecId = eInvoiceJour.RecId;
        eInvoiceTrans.RefTableId = tablenum(RetailTransactionTable);
        eInvoiceTrans.ProductCode = cfdiParameter.getRetailProductCode();
        eInvoiceTrans.UOMCode = cfdiParameter.getRetailUnitCode();

        QueryRun qr = new QueryRun(this.getTransQuery());

        while (qr.next())
        {
            transactionSalesTrans = qr.get(tableNum(RetailTransSalesTransAmountExclPrepView));
            eInvoiceTrans.RefRecId = transactionSalesTrans.RetailTransactionTableRecId;
            rsl.add(eInvoiceTrans);
        }

        rsl.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJourMapping</Name>
				<Source><![CDATA[
    public EInvoiceJourBaseMap_MX createInvoiceJourMapping()
    {
        if (!eInvoiceJour)
        {
            eInvoiceJour = aggregatedStatement
                ? EInvoiceJour_MX::findByRef(aggregatedStatement.TableId, aggregatedStatement.RecId)
                : EInvoiceJour_MX::findByRef(statementJour.TableId, statementJour.RecId);
        }

        return EInvoiceJourBaseMap_MX::construct(eInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateNumber</Name>
				<Source><![CDATA[
    protected CertificateNumber_MX getCertificateNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmNumber</Name>
				<Source><![CDATA[
    protected EInvoiceCFDIConfirmNumber_MX getConfirmNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode getCurrencyCode()
    {
        return storeTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    protected ForeignTrade_MX getForeignTrade()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    protected ExchRate getExchRate()
    {
        return ExchangeRateHelper::exchRate(this.getCurrencyCode(), this.getInvoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncotermCode</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getIncotermCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    public Date getInvoiceDate()
    {
        return aggregatedStatement ? aggregatedStatement.PostedDate : statementJour.postedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId getInvoiceId()
    {
        return aggregatedStatement ? aggregatedStatement.AggregatedStatementId : statementJour.statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    public RefRecId getInvoiceJourRecId()
    {
        return aggregatedStatement ? aggregatedStatement.RecId : statementJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourTableId</Name>
				<Source><![CDATA[
    public RefTableId getInvoiceJourTableId()
    {
        return aggregatedStatement ? aggregatedStatement.TableId : statementJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRegIdTrib</Name>
				<Source><![CDATA[
    protected NumRegIdTrib_MX getNumRegIdTrib()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMethod</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPaymMethod()
    {
        return EInvoiceCFDIParameters_MX::find().getRetailPaymMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymMode</Name>
				<Source><![CDATA[
    private void setPaymMode()
    {
        paymModeCanBeRetrieved = true;

        try
        {
            eInvoiceJour.PaymMode = this.getPaymMode(); // Requires transactions
        }
        finally
        {
            paymModeCanBeRetrieved = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    public CustPaymMode getPaymMode()
    {
        if (!paymModeCanBeRetrieved)
        {
            return '';
        }

        Query receiptWithMaxAmountQuery = new Query();

        QueryBuildDataSource qbdsTransactionTable = receiptWithMaxAmountQuery.addDataSource(tableNum(RetailTransactionTable));
        qbdsTransactionTable.relations(true);
        qbdsTransactionTable.firstOnly(true);
        qbdsTransactionTable.addOrderByField(fieldNum(RetailTransactionTable, NetAmount), isReturn ? SortOrder::Descending : SortOrder::Ascending);
        qbdsTransactionTable.addRange(fieldNum(RetailTransactionTable, statementId)).value(queryValue(statementJour.statementId));

        QueryBuildDataSource qbdsCustTable = qbdsTransactionTable.addDataSource(tableNum(CustTable));
        qbdsCustTable.joinMode(JoinMode::InnerJoin);
        qbdsCustTable.addLink(fieldNum(RetailTransactionTable, custAccount), fieldNum(CustTable, AccountNum));
        qbdsCustTable.addSelectionField(fieldNum(CustTable, PaymMode));
        qbdsCustTable.addRange(fieldNum(CustTable, PaymMode)).value(SysQuery::valueNotEmptyString());
        qbdsCustTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEInvoiceTrans = qbdsTransactionTable.addDataSource(tableNum(EInvoiceTrans_MX));
        qbdsEInvoiceTrans.joinMode(JoinMode::ExistsJoin);
        qbdsEInvoiceTrans.addLink(fieldNum(RetailTransactionTable, TableId), fieldNum(EInvoiceTrans_MX, RefTableId));
        qbdsEInvoiceTrans.addLink(fieldNum(RetailTransactionTable, RecId), fieldNum(EInvoiceTrans_MX, RefRecId));
        qbdsEInvoiceTrans.fetchMode(QueryFetchMode::One2One);

        QueryRun qr = new QueryRun(receiptWithMaxAmountQuery);
        CustTable custTable;

        if (qr.next())
        {
            custTable = qr.get(tableNum(CustTable));
        }
        else
        {
            CustAccount custAccount = RetailStoreTable::find(statementJour.storeId).DefaultCustAccount;
            custTable = CustTable::find(custAccount);
        }

        return custTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPurpose()
    {
        return EInvoiceCFDIParameters_MX::find().getRetailPurpose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCertificate</Name>
				<Source><![CDATA[
    protected SourceCertificate_MX getSourceCertificate()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    protected InvoiceAmountMST getTotalAmount()
    {
        return aggregatedStatement ? -1 * aggregatedStatement.salesTotalExclPrepayment(isReturn) : -1 * statementJourExt.salesTotalExclPrepayment(isReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransQuery</Name>
				<Source><![CDATA[
    private Query getTransQuery()
    {
        Query transQuery = aggregatedStatement
            ? RetailEInvoicePost_MX::buildAggregatedStatementTransQuery(aggregatedStatement)
            : RetailEInvoicePost_MX::buildStatementTransQuery(statementJour);

        QueryBuildDataSource qbds = transQuery.dataSourceTable(tableNum(RetailTransSalesTransAmountExclPrepView));
        qbds.addGroupByField(fieldNum(RetailTransSalesTransAmountExclPrepView, RetailTransactionTableRecId));

        this.addSalesOrReturnFilterToQuery(transQuery);

        return transQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceJour</Name>
				<Source><![CDATA[
    protected void initFromInvoiceJour()
    {
        super();

        eInvoiceJour.InvoiceDateTime = eInvoiceDateTime ? eInvoiceDateTime : this.getInvoicePostedDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicePostedDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getInvoicePostedDateTime()
    {
        return aggregatedStatement ? aggregatedStatement.PostedDateTime : statementJour.PostedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailSpecificParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Retail specific electronic invoice fields.
    /// </summary>
    private void initRetailSpecificParameters()
    {
        eInvoiceJour.IsReturn = isReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoicePost_MX</c> class.
    /// </summary>
    /// <param name="_statementJour">
    /// A <c>RetailStatementJour</c> record.
    /// </param>
    public void new(RetailStatementJour _statementJour)
    {
        super();
        statementJour = _statementJour;
        statementJourExt = RetailStatementJourExt::find(statementJour.statementId);
        storeTable = RetailStoreTable::find(statementJour.storeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether EInvoice contains correct data.
    /// </summary>
    /// <returns>
    /// Always true.
    /// </returns>
    /// <remarks>
    /// Runs validation, but do not interrupt invoice creation.
    /// </remarks>
    protected boolean validate()
    {
        super(); 
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJour</Name>
				<Source><![CDATA[
    protected Common invoiceJour()
    {
        if (aggregatedStatement)
        {
            return aggregatedStatement;
        }

        return statementJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSeq</Name>
				<Source><![CDATA[
    protected RefRecId getInvoiceNumberSeq()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequence</Name>
				<Source><![CDATA[
    public RefRecId parmNumberSequence(RefRecId _numberSequence = numberSequence)
    {
        numberSequence = _numberSequence;
        return numberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEInvoiceDateTime</Name>
				<Source><![CDATA[
    public InvoiceDateTime_MX parmEInvoiceDateTime(InvoiceDateTime_MX _eInvoiceDateTime = eInvoiceDateTime)
    {
        eInvoiceDateTime = _eInvoiceDateTime;
        return eInvoiceDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEInvoiceJour</Name>
				<Source><![CDATA[
    public EInvoiceJour_MX parmEInvoiceJour(EInvoiceJour_MX _eInvoiceJour = eInvoiceJour)
    {
        eInvoiceJour = _eInvoiceJour;
        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailEInvoicePost_MX</c> class.
    /// </summary>
    /// <param name="_eInvoiceJour">
    /// The <c>EInvoiceJour_MX</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailEInvoicePost_MX</c>.
    /// </returns>
    public static RetailEInvoicePost_MX constructFromEInvoice(EInvoiceJour_MX _eInvoiceJour)
    {
        RetailEInvoicePost_MX eInvoicePost = _eInvoiceJour.RefTableId == tableNum(RetailEInvoiceAggregatedStatement_MX)
            ? RetailEInvoicePost_MX::constructFromAggregatedStatement(RetailEInvoiceAggregatedStatement_MX::findRecId(_eInvoiceJour.RefRecId))
            : new RetailEInvoicePost_MX(RetailStatementJour::findRecId(_eInvoiceJour.RefRecId));

        eInvoicePost.parmEInvoiceJour(_eInvoiceJour);

        return eInvoicePost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromAggregatedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>RetailEInvoicePost_MX</c> class from aggregated statement.
    /// </summary>
    /// <param name = "_aggregatedStatement">The aggregated statement.</param>
    /// <returns>The class instance.</returns>
    internal static RetailEInvoicePost_MX constructFromAggregatedStatement(RetailEInvoiceAggregatedStatement_MX _aggregatedStatement)
    {
        RetailEInvoicePost_MX invoicePost = new RetailEInvoicePost_MX(_aggregatedStatement.getLastPostedStatementJour());
        invoicePost.aggregatedStatement = _aggregatedStatement;

        return invoicePost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatementTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query returning Retail transaction related to a given Retail statement for creating its EInvoice.
    /// </summary>
    /// <param name = "_statementJour">
    /// A <c>RetailStatementJour</c> cursor.
    /// </param>
    /// <returns>
    /// Builded query.
    /// </returns>
    public static Query buildStatementTransQuery(RetailStatementJour _statementJour)
    {
        return RetailEInvoiceQueryBuilder_MX::construct(_statementJour)
            .build()
            .addGroupBy()
            .query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAggregatedStatementTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query returning Retail transaction related to a given Retail aggregated statement for creating its EInvoice.
    /// </summary>
    /// <param name = "_aggregatedStatement">
    /// A <c>RetailEInvoiceAggregatedStatement_MX</c> cursor.
    /// </param>
    /// <returns>
    /// Builded query.
    /// </returns>
    internal static Query buildAggregatedStatementTransQuery(RetailEInvoiceAggregatedStatement_MX _aggregatedStatement)
    {
        return RetailEInvoiceQueryBuilder_MX::constructFromAggregatedStatement(_aggregatedStatement)
            .build()
            .addGroupBy()
            .query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesOrReturnFilterToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filter to query to select sales or return operations.
    /// </summary>
    /// <param name = "_query">The query to update.</param>
    private void addSalesOrReturnFilterToQuery(Query _query)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(RetailTransSalesTransAmountExclPrepView)).addDataSource(tableNum(RetailTransactionTableExt));
        qbds.addLink(fieldNum(RetailTransSalesTransAmountExclPrepView, Channel), fieldNum(RetailTransactionTableExt, Channel));
        qbds.addLink(fieldNum(RetailTransSalesTransAmountExclPrepView, Store), fieldNum(RetailTransactionTableExt, Store));
        qbds.addLink(fieldNum(RetailTransSalesTransAmountExclPrepView, Terminal), fieldNum(RetailTransactionTableExt, Terminal));
        qbds.addLink(fieldNum(RetailTransSalesTransAmountExclPrepView, TransactionId), fieldNum(RetailTransactionTableExt, TransactionId));
        qbds.joinMode(JoinMode::ExistsJoin);

        str extRange;

        if (isReturn)
        {
            extRange = strFmt('((%1.%2 > 0) || ((%1.%2 = 0) && (%1.%3 < 0)))', // NetAmountExclPrepayment > 0 || NetAmountExclPrepayment = 0 && DiscAmountExclPrepayment < 0
                qbds.name(),
                fieldStr(RetailTransactionTableExt, NetAmountExclPrepayment),
                fieldStr(RetailTransactionTableExt, DiscAmountExclPrepayment));
        }
        else
        {
            extRange = strFmt('((%1.%2 < 0) || ((%1.%2 = 0) && (%1.%3 > 0)))', // NetAmountExclPrepayment < 0 || NetAmountExclPrepayment = 0 && DiscAmountExclPrepayment > 0
                qbds.name(),
                fieldStr(RetailTransactionTableExt, NetAmountExclPrepayment),
                fieldStr(RetailTransactionTableExt, DiscAmountExclPrepayment));
        }

        qbds.addRange(fieldNum(RetailTransactionTableExt, RecId)).value(extRange);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>