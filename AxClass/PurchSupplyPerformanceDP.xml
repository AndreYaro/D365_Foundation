<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSupplyPerformanceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(queryStr(PurchSupplyPerformance))
]
class PurchSupplyPerformanceDP extends SRSReportDataProviderBase
{
    real                        totalLine;
    real                        totalLineLate;
    Days                        daysLate;
    InventTransOrigin           inventTransOrigin;
    InventTrans                 inventTrans;
    VendTable                   vendTable;
    PurchSupplyPerformanceTmp   purchSupplyPerformanceTmp;
    AccountNum acc;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPurchSupplyPerformanceTmp</Name>
				<Source><![CDATA[
        [SRSReportDataSetAttribute('PurchSupplyPerformanceTmp')]
    public PurchSupplyPerformanceTmp getPurchSupplyPerformanceTmp()
    {
        select * from purchSupplyPerformanceTmp;
        return purchSupplyPerformanceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTable</Name>
				<Source><![CDATA[
        private void insertIntoTable()
    {
        purchSupplyPerformanceTmp.clear();
        purchSupplyPerformanceTmp.AccountNum    =   acc;
        purchSupplyPerformanceTmp.Count         =   totalLine;
        purchSupplyPerformanceTmp.TotalLineLate =   totalLineLate;
        purchSupplyPerformanceTmp.DaysLate      =   daysLate;
        purchSupplyPerformanceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Note that this is a framework class. Customizing this class may cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        RecId               party=0;
        ItemId              itemId='';
        Days                days;
        Query               query;
        QueryRun                inventTransQuery;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        boolean first = false;
        boolean purchaseOrderInvoiced = true;
        query   =   this.parmQuery();
        queryBuildDataSource    = query.dataSourceTable(tablenum(InventTrans));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(InventTrans,StatusReceipt));

        queryBuildRange.value(queryRange(StatusReceipt::Purchased,StatusReceipt::Purchased) +' , '+ queryRange(StatusReceipt::Received,StatusReceipt::Received));

        inventTransQuery = new QueryRun(query);

        while (inventTransQuery.next())
        {
            inventTransOrigin   =   inventTransQuery.get(tablenum(InventTransOrigin));
            inventTrans         =   inventTransQuery.get(tablenum(InventTrans));

            purchaseOrderInvoiced = this.validatePurchaseOrder(inventTransOrigin);

            if (purchaseOrderInvoiced && inventTrans.RecId != 0)
            {
                if (first && party != inventTransOrigin.Party)
                {
                    this.insertIntoTable();
                    this.resetLineValues();
                    acc = inventTransOrigin.custVendAC();
                    party = inventTransOrigin.Party;
                    itemId  =   inventTransOrigin.ItemId;
                }
                else if (!first)
                {
                    acc = inventTransOrigin.custVendAC();
                    party = inventTransOrigin.Party;
                    itemId  =   inventTransOrigin.ItemId;
                    first = true;
                }

                totalLine ++;
                if (inventTrans.DatePhysical > inventTrans.DateExpected)
                {
                    days = inventTrans.DatePhysical - inventTrans.DateExpected;

                    if (days)
                    {
                        daysLate += days;
                        totalLineLate++;
                    }
                }
            }
        }

        purchaseOrderInvoiced = this.validatePurchaseOrder(inventTransOrigin);
        if (itemId && purchaseOrderInvoiced)
            this.insertIntoTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineValues</Name>
				<Source><![CDATA[
        private void resetLineValues()
    {
        daysLate        = 0;
        totalLine       = 0;
        totalLineLate   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchaseOrder</Name>
				<Source><![CDATA[
        private boolean validatePurchaseOrder(InventTransOrigin _inventTransOrigin)
    {
        PurchTable purchTable;
        if (_inventTransOrigin.ReferenceCategory == InventTransType::Purch)
        {
            purchTable = PurchTable::find(_inventTransOrigin.ReferenceId);

            if (purchTable.PurchStatus == PurchStatus::Invoiced)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
