<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestStatusChangeApprEvtHndlr</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendRequestStatusChangeApprovalEventHandler</c> class is an event handling class that
///    implements the <c>WorkflowEvent</c> interface.
/// </summary>
class VendRequestStatusChangeApprEvtHndlr implements WorkflowElementStartedEventHandler,
                                                    WorkflowElementCompletedEventHandler,
                                                    WorkflowElementDeniedEventHandler,
                                                    WorkflowElementCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a start event for a workflow item by retrieving the workflow context of the workflow item
    ///    that fired the event and sets the status to pending.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The arguments used to get the workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event fires for a workflow item.
    /// </remarks>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        RecId recId;
        recId =  _workflowElementEventArgs.parmWorkflowContext().parmRecId();

        VendRequestStatusChange::setWorkflowState(recId, VendRequestStatusChangeStatus::RequestCancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles an approve event for a workflow item by retrieving the workflow context of the workflow
    ///    item that fired the event and sets the approval status to approved.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The arguments used to get the workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        RecId recId;
        recId =  _workflowElementEventArgs.parmWorkflowContext().parmRecId();

        VendRequestStatusChange::setWorkflowState(recId, VendRequestStatusChangeStatus::RequestApproved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a denied event for a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The arguments used to get the workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This event is fired when the requestor rejects the approval workflow item.
    /// </remarks>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        RecId recId;
        recId =  _workflowElementEventArgs.parmWorkflowContext().parmRecId();

        VendRequestStatusChange::setWorkflowState(recId, VendRequestStatusChangeStatus::RequestRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a start event for a workflow item by retrieving the workflow context of the workflow item
    ///    that fired the event and sets the status to pending.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The arguments used to get the workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event fires for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        RecId recId;
        recId =  _workflowElementEventArgs.parmWorkflowContext().parmRecId();

        VendRequestStatusChange::setWorkflowState(recId, VendRequestStatusChangeStatus::PendingApproval);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>