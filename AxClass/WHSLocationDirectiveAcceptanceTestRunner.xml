<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationDirectiveAcceptanceTestRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Text.RegularExpressions;

internal final class WHSLocationDirectiveAcceptanceTestRunner
{
    private WHSLocationDirectiveAcceptanceTest acceptanceTest;
    private static EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
    private WHSLocationDirectiveAcceptanceTestResultContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isExpectedResult</Name>
				<Source><![CDATA[
    private boolean isExpectedResult(WMSLocationId _result)
    {
        if (acceptanceTest.ExpectedWMSLocationId)
        {
            return _result == acceptanceTest.ExpectedWMSLocationId;
        }

        if (acceptanceTest.ExpectedLocProfileId)
        {
            return WMSLocation::find(_result, InventDim::find(acceptanceTest.InventDimId).InventLocationId).LocProfileId == acceptanceTest.ExpectedLocProfileId;
        }

        if (acceptanceTest.ExpectedWMSLocationRegEx)
        {
            Regex rx = new Regex(acceptanceTest.ExpectedWMSLocationRegEx, RegexOptions::IgnoreCase);

            return rx.IsMatch(_result);
        }

        if (acceptanceTest.ExpectedZoneId)
        {
            WMSLocation location = WMSLocation::find(_result, InventDim::find(acceptanceTest.InventDimId).InventLocationId);

            return location.ZoneId == acceptanceTest.ExpectedZoneId ||
                location.AdditionalZone1 == acceptanceTest.ExpectedZoneId ||
                location.AdditionalZone2 == acceptanceTest.ExpectedZoneId ||
                location.AdditionalZone3 == acceptanceTest.ExpectedZoneId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLogWithResult</Name>
				<Source><![CDATA[
    private void updateLogWithResult(WHSLocationDirectiveAcceptanceTestResult _result)
    {
        str logMessage;
        switch (_result.Result)
        {
            case WHSLocationDirectiveAcceptanceTestStatus::Skipped:
                logMessage = "@WAX:LocationDirectiveAcceptanceTestSkippedLog";
                break;

            case WHSLocationDirectiveAcceptanceTestStatus::Passed:
                if (acceptanceTest.ExpectedWMSLocationId)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestPassedExactLocationLog",
                        acceptanceTest.ExpectedWMSLocationId);
                }
                else if (acceptanceTest.ExpectedLocProfileId)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestPassedExactLocationProfileLog",
                        acceptanceTest.ExpectedLocProfileId);
                } 
                else if (acceptanceTest.ExpectedWMSLocationRegEx)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestPassedRegExLog",
                        _result.ActualLocationId,
                        acceptanceTest.ExpectedWMSLocationRegEx);
                }
                else if (acceptanceTest.ExpectedZoneId)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestPassedExactLocationZoneLog",
                        _result.ActualLocationId,
                        acceptanceTest.ExpectedZoneId);
                }
                break;

            case WHSLocationDirectiveAcceptanceTestStatus::Failed:
                if (acceptanceTest.ExpectedWMSLocationId)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestFailedExactLocationLog",
                        acceptanceTest.ExpectedWMSLocationId, 
                        _result.ActualLocationId);
                }
                else if (acceptanceTest.ExpectedLocProfileId)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestFailedExactLocationProfileLog",
                        acceptanceTest.ExpectedLocProfileId,
                        WMSLocation::find(_result.ActualLocationId, InventDim::find(acceptanceTest.InventDimId).InventLocationId).LocProfileId);
                }
                else if (acceptanceTest.ExpectedWMSLocationRegEx)
                {
                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestFailedRegExLog",
                        _result.ActualLocationId,
                        acceptanceTest.ExpectedWMSLocationRegEx);
                }
                else if (acceptanceTest.ExpectedZoneId)
                {
                    var wmsLocation = WMSLocation::find(_result.ActualLocationId, InventDim::find(acceptanceTest.InventDimId).InventLocationId);
                    str additionalZones = wmsLocation.AdditionalZone1;
                    
                    if (wmsLocation.AdditionalZone2)
                    {
                        additionalZones += (additionalZones ? ', ' : '')+wmsLocation.AdditionalZone2;
                    }
                    if (wmsLocation.AdditionalZone3)
                    {
                        additionalZones += (additionalZones ? ', ' : '')+wmsLocation.AdditionalZone3;
                    }

                    logMessage = strFmt("@WAX:LocationDirectiveAcceptanceTestFailedExactLocationZoneLog",
                        acceptanceTest.ExpectedZoneId,
                        wmsLocation.ZoneId,
                        additionalZones);
                }
                break;
        }

        if (logMessage)
        {
            _result.Log = logMessage + '\n' + _result.Log;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToInventQty</Name>
				<Source><![CDATA[
    private InventQty convertToInventQty()
    {
        var inventUOM = WHSCatchWeightHelper::inventHandlingUnitId(acceptanceTest.ItemId);
        if (inventUOM == acceptanceTest.UnitOfMeasure)
        {
            return acceptanceTest.Qty;
        }

        return releasedProductUnitConverter.convertGivenUnitSymbols(acceptanceTest.Qty,
                                                        acceptanceTest.UnitOfMeasure,
                                                        inventUOM,
                                                        NoYes::No,
                                                        acceptanceTest.ItemId,
                                                        acceptanceTest.inventDimId,
                                                        NoYes::No);

    }

]]></Source>
			</Method>
			<Method>
				<Name>negateInventSumDelta</Name>
				<Source><![CDATA[
    private void negateInventSumDelta(InventSumDelta _inventSumDelta)
    {
        _inventSumDelta.PostedQty *= -1;
        _inventSumDelta.Deducted *= -1;
        _inventSumDelta.Received *= -1;
        _inventSumDelta.ReservPhysical *= -1;
        _inventSumDelta.ReservOrdered *= -1;
        _inventSumDelta.OnOrder *= -1;
        _inventSumDelta.Ordered *= -1;
        _inventSumDelta.QuotationIssue *= -1;
        _inventSumDelta.QuotationReceipt *= -1;
        _inventSumDelta.Registered *= -1;
        _inventSumDelta.Picked *= -1;
        _inventSumDelta.Arrived *= -1;
        _inventSumDelta.PostedValue *= -1;
        _inventSumDelta.PostedValueSecCur_RU *= -1;
        _inventSumDelta.PhysicalValue *= -1;
        _inventSumDelta.PhysicalValueSecCur_RU *= -1;

        _inventSumDelta.PdsCWPostedQty *= -1;
        _inventSumDelta.PdsCWDeducted *= -1;
        _inventSumDelta.PdsCWReceived *= -1;
        _inventSumDelta.PdsCWReservPhysical *= -1;
        _inventSumDelta.PdsCWReservOrdered *= -1;
        _inventSumDelta.PdsCWOnOrder *= -1;
        _inventSumDelta.PdsCWOrdered *= -1;
        _inventSumDelta.PdsCWQuotationIssue *= -1;
        _inventSumDelta.PdsCWQuotationReceipt *= -1;
        _inventSumDelta.PdsCWRegistered *= -1;
        _inventSumDelta.PdsCWPicked *= -1;
        _inventSumDelta.PdsCWArrived *= -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventoryForInventSum</Name>
				<Source><![CDATA[
    private void clearInventoryForInventSum(InventSum _inventSum)
    {
        InventSumDelta delta;
        delta.initFromInventSum(_inventSum);
        delta.ItemId = _inventSum.ItemId;
        delta.InventDimId = _inventSum.InventDimId;
        this.negateInventSumDelta(delta);
            
        InventTrans inventTrans;
        inventTrans.ItemId = delta.ItemId;
        inventTrans.inventDimId = delta.InventDimId;

        InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().addInventSumDelta(delta, inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventory</Name>
				<Source><![CDATA[
    private void clearInventory()
    {
        InventSum inventSum;
        InventDim inventDim = acceptanceTest.InventDim();        
        Set inventSumsToDelete = new Set(Types::Record);

        // Clear for item on any location
        while select inventSum
            where inventSum.ItemId == acceptanceTest.ItemId &&
                  inventSum.InventSiteId == inventDim.InventSiteId &&
                  inventSum.InventLocationId == inventDim.InventLocationId &&
                  inventSum.ClosedQty == NoYes::No
        {
            inventSumsToDelete.add(inventSum);
        }

        // Clear locations where the test adds inventory
        WHSLocationDirectiveAcceptanceTestInventAdjustment adjustment;
        InventDim adjustmentInventDim;
        
        while select adjustment
            where adjustment.AcceptanceTestRecId == acceptanceTest.RecId
            join adjustmentInventDim
                where adjustmentInventDim.inventDimId == adjustment.InventDimId
            join inventSum
                where inventSum.InventSiteId == adjustmentInventDim.InventSiteId &&
                      inventSum.InventLocationId == adjustmentInventDim.InventLocationId &&
                      inventSum.wmsLocationId == adjustmentInventDim.wmsLocationId &&
                      inventSum.ClosedQty == NoYes::No
        {
            inventSumsToDelete.add(inventSum);
        }

        var enum = inventSumsToDelete.getEnumerator();
        while (enum.moveNext())
        {
            this.clearInventoryForInventSum(enum.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventory</Name>
				<Source><![CDATA[
    private void addInventory()
    {
        WHSLocationDirectiveAcceptanceTestInventAdjustment adjustment;
        
        while select adjustment
            where adjustment.AcceptanceTestRecId == acceptanceTest.RecId
        {
            InventDim inventDim = InventDim::find(adjustment.InventDimId);
            if (!inventDim.wMSLocationId ||
                this.anyDimensionsAboveLocationMissing(adjustment.ItemId, inventDim))
            {
                throw error("@WAX:LocationDirectiveAcceptanceTestUnknownDimensionsForAdjustment");
            }
            this.adjustInventoryForItem(adjustment.ItemId, adjustment.InventDimId, adjustment.InventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInventoryForItem</Name>
				<Source><![CDATA[
    private void adjustInventoryForItem(ItemId _itemId, InventDimId _inventDimId, InventQty _inventQty)
    {
        InventSumDelta delta;
        delta.ItemId = _itemId;
        delta.InventDimId = _inventDimId;
        delta.Received = _inventQty;
            
        InventTrans inventTrans;
        inventTrans.ItemId = delta.ItemId;
        inventTrans.inventDimId = delta.InventDimId;

        InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().addInventSumDelta(delta, inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventory</Name>
				<Source><![CDATA[
    private void setupInventory()
    {
        if (acceptanceTest.InventLevel == WHSLocationDirectiveAcceptanceTestInventLevel::NoInventory)
        {
            this.clearInventory();
        }

        this.addInventory();
        
        InventUpdateOnHandGlobal::Instance().inventUpdateOnhand().ttsNotifyPreCommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockCommits</Name>
				<Source><![CDATA[
    private void blockCommits()
    {
        Debug::Assert(appl.ttsLevel() > 0);
        appl.transactionScope().ttsCommitting += eventhandler(this.throwOnCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwOnCommit</Name>
				<Source><![CDATA[
    private void throwOnCommit()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    private InventTransId findInventTransId()
    {
        if (acceptanceTest.OrderNum)
        {
            InventTransOrigin inventTransOrigin;

            select firstonly InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceId == acceptanceTest.OrderNum &&
                     inventTransOrigin.ReferenceCategory == acceptanceTest.inventTransType() &&
                     inventTransOrigin.ItemId == acceptanceTest.ItemId;

            return inventTransOrigin.InventTransId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveTemplateType</Name>
				<Source><![CDATA[
    private WHSWaveTemplateType waveTemplateType()
    {
        switch (acceptanceTest.WorkTransType)
        {
            case WHSWorkTransType::Sales:
            case WHSWorkTransType::TransferIssue:
                return WHSWaveTemplateType::Shipping;

            case WHSWorkTransType::KanbanPick:
                return WHSWaveTemplateType::Kanban;
                
            case WHSWorkTransType::ProdPick:
                return WHSWaveTemplateType::Production;
        }
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDemandWave</Name>
				<Source><![CDATA[
    private WHSWaveTable createDemandWave()
    {
        WHSWaveTemplateTable waveTemplate;
        WHSWaveTable waveTable;

        select firstonly waveTemplate
            where waveTemplate.WaveTemplateType == this.waveTemplateType() &&
            waveTemplate.InventLocationId == InventDim::find(acceptanceTest.InventDimId).InventLocationId;

        if (waveTemplate)
        {
            waveTable.WaveId = WHSWaveTable::getNextWaveId();
            waveTable.WaveTemplateName = waveTemplate.WaveTemplateName;
        
            waveTable.insert();    
        }
        return waveTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTest</Name>
				<Source><![CDATA[
    private WMSLocationId runTest()
    {
        const WHSWaveId ReleaseToWarehouseId = 'AccTestReleaseWaveId'; 
        const WHSWorkCreateId WorkCreateId = 'AccTestCreateWorkId';
        const WHSWaveExecutionID WaveExecuteId = 'AccTestWaveExecuteId';

        using (var context = WHSLocationDirectiveAcceptanceTestContext::newFromContract(contract))
        {
            WhsLocationDirective locDir = new WhsLocationDirective();
            locDir.parmIsAcceptanceTest(true);
            locDir.parmOrderNum(acceptanceTest.OrderNum);

            // Avoid saving data in a user connection
            locDir.parmIsWorkHistoryLogEnabled(false);

            if (acceptanceTest.isImmediateReplenishmentSupported())
            {
                // Allow creating a replenishment wave if needed.
                locDir.parmReleaseToWarehouseId(ReleaseToWarehouseId);

                WHSWaveTable waveTable = this.createDemandWave();
                if (waveTable)
                {
                    WHSTmpWorkLine tmpWorkLine;
                    tmpWorkLine.ItemId = acceptanceTest.ItemId;
                    tmpWorkLine.InventDimId = acceptanceTest.InventDimId;
                    tmpWorkLine.InventLocationId = InventDim::find(acceptanceTest.InventDimId).InventLocationId;
                    tmpWorkLine.WaveId = waveTable.WaveId;
                    tmpWorkLine.WorkCreateId = WorkCreateId;
                    tmpWorkLine.InventQty = acceptanceTest.Qty;

                    locDir.setGlobals('', WHSOriginType::Wave, waveTable.WaveId, tmpWorkLine, WaveExecuteId);
                }
            }

            contract.subscribeToLocationDirective(locDir);

            InventQty inventQty = this.convertToInventQty();
            
            container actualResult = locDir.findPickPutLocation(
                    acceptanceTest.InventDimId,
                    this.findInventTransId(),
                    acceptanceTest.ItemId,
                    inventQty,
                    acceptanceTest.WorkTransType,
                    acceptanceTest.WorkType,
                    acceptanceTest.LocDirHintCode,
                    inventQty,
                    null,
                    '',
                    '',
                    acceptanceTest.DispositionCode);

            return conPeek(actualResult, 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        boolean mustAddExplanationToLog = true;
        int infologLine = infologLine();
        WHSLocationDirectiveAcceptanceTestResult result;
        result.Result = WHSLocationDirectiveAcceptanceTestStatus::Failed;
        System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
        stopwatch.Start();

        try
        {
            using (var mainConnection = WHSMainConnectionOnly::construct())
            {
                ttsbegin;

                this.validate();
                this.blockCommits();

                if (acceptanceTest.IsInactive)
                {
                    result.Result = WHSLocationDirectiveAcceptanceTestStatus::Skipped;
                }
                else
                {
                    this.setupInventory();

                    contract = WHSLocationDirectiveAcceptanceTestResultContract::construct();

                    result.ActualLocationId = this.runTest();
               
                    contract.populateResult(result);

                    if (this.isExpectedResult(result.ActualLocationId))
                    {
                        result.Result = WHSLocationDirectiveAcceptanceTestStatus::Passed;
                    }
                }
                ttsabort;
            }
        }
        catch
        {
            this.addInfologToLog(infologLine, result);
            mustAddExplanationToLog = false;
        }
        finally
        {
            stopwatch.Stop();

            if (mustAddExplanationToLog)
            {
                this.updateLogWithResult(result);
            }
            this.addInfologToLog(infologLine, result);
            result.acceptanceTestRecId = acceptanceTest.RecId;
            result.DurationInMilliseconds = stopwatch.ElapsedMilliseconds;
            result.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInfologToLog</Name>
				<Source><![CDATA[
    private void addInfologToLog(int _infologLine, WHSLocationDirectiveAcceptanceTestResult _result)
    {
        SysInfologEnumerator enum = SysInfologEnumerator::newData(Infolog.cut(_infologLine));
        while (enum.moveNext())
        {
            _result.Log += enum.currentMessage() + '\n';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private void validate()
    {
        if (this.anyDimensionsAboveLocationMissing(acceptanceTest.ItemId, acceptanceTest.InventDim()))
        {
            throw error("@WAX:LocationDirectiveAcceptanceTestUnknownDimensions");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyDimensionsAboveLocationMissing</Name>
				<Source><![CDATA[
    private boolean anyDimensionsAboveLocationMissing(ItemId _itemId, InventDim _inventDim)
    {                                                                                               
        WhsReservationHierarchyItem hierarchyItem = whsReservationHierarchyItem::findByItem(acceptanceTest.DataAreaId, _itemId);

        WHSReservationHierarchyProvider whsReservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        List reservationHierarchyAboveLocation = whsReservationHierarchyProvider.getDimListAboveLocation(hierarchyItem.ReservationHierarchy, WHSReservationHierarchySortOrder::BottomUp);
        return WHSReservationHierarchyInventDimUtil::inventDimHasBlankValues(_inventDim, reservationHierarchyAboveLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAcceptanceTest</Name>
				<Source><![CDATA[
    public static void executeAcceptanceTest(WHSLocationDirectiveAcceptanceTest _acceptanceTest)
    {
        WHSLocationDirectiveAcceptanceTestRunner runner = new WHSLocationDirectiveAcceptanceTestRunner();
        runner.acceptanceTest = _acceptanceTest;
        runner.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>