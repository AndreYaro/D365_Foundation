<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookMassUpdateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Fetches records for the <c>AssetBookMassUpdate</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetBookMassUpdateBaseData)),
    SRSReportParameterAttribute(classStr(AssetBookMassUpdateContract))
]
public class AssetBookMassUpdateDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetUsedFromDate placedInServiceStart;
    AssetUsedFromDate placedInServiceEnd;
    AssetDepreciationConvention changeFromDepConvention;
    AssetDepreciationConvention changeToDepConvention;
    AssetBookMassUpdateTmp assetBookMassUpdateTmp;
    AssetTable assetTable;
    AssetBook assetBook;
    AssetDepreciationConvention assetDepreciationConvention;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBookMassUpdateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>AssetBookMassUpdate</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetBookMassUpdate</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetBookMassUpdateTmp))
    ]
    public AssetBookMassUpdateTmp getAssetBookMassUpdateTmp()
    {
        select assetBookMassUpdateTmp;
        return assetBookMassUpdateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBookMassUpdateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>AssetBookMassUpdate</c> temporary table.
    /// </summary>
    private void insertAssetBookMassUpdateTmp(RecordInsertList _recordInsertList)
    {
        assetBookMassUpdateTmp.clear();
        assetBookMassUpdateTmp.AssetGroupId = assetBook.assetGroup;
        assetBookMassUpdateTmp.AssetId = assetBook.AssetId;
        assetBookMassUpdateTmp.AssetName = assetTable.Name;
        assetBookMassUpdateTmp.AssetBookId = assetBook.BookId;
        assetBookMassUpdateTmp.ChangeFromDepConvention = changeFromDepConvention;
        assetBookMassUpdateTmp.ChangeToDepConvention = changeToDepConvention;

        _recordInsertList.add(assetBookMassUpdateTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records based on the specified parameters.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;    
    
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetBookMassUpdateTmp), true, true, true, false, true, assetBookMassUpdateTmp);

        Query query = new Query(this.parmQuery());
        AssetBookMassUpdateContract contract = this.parmDataContract() as AssetBookMassUpdateContract;

        placedInServiceStart = contract.parmPlacedInServiceStart();
        placedInServiceEnd = contract.parmPlacedInServiceEnd();
        changeFromDepConvention = contract.parmChangeFromDepConvention();
        changeToDepConvention = contract.parmChangeToDepConvention();

        qbds = query.dataSourceTable(tableNum(AssetBook));
        qbr = qbds.addRange(fieldNum(AssetBook,DepreciationConvention));
        qbr.value(queryValue(changeFromDepConvention));
        queryRun = new QueryRun(query);

        // Do not delete the transactions if the conventions are same.
        if (changeFromDepConvention != changeToDepConvention)
        {
            while (queryRun.next())
            {
                assetBook = queryRun.get(tableNum(AssetBook));
                assetTable = queryRun.get(tableNum(AssetTable));

                // Calls the updateDepreciationConvention method which deletes all depreciation transactions
                // for corresponding AssetBook record before changing the convention.
                if (AssetBookUpdateDepConvention::updateDepreciationConvention(assetBook.AssetId,
                                                                               assetBook.BookId,
                                                                               placedInServiceStart,
                                                                               placedInServiceEnd,
                                                                               changeToDepConvention))
                {
                    this.insertAssetBookMassUpdateTmp(recordInsertList);
                }
            }

            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>