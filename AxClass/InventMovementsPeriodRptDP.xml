<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementsPeriodRptDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMovementsPeriodRptDP</c> class is the report data provider class for the <c>InventMovementsPeriod</c>
///    report.
/// </summary>
[
    SRSReportQuery(queryStr(InventMovementsPeriod)),
    SRSReportParameterAttribute(classStr(InventMovementsPeriodRptContract))
]
class InventMovementsPeriodRptDP extends SRSReportDataProviderPreProcessTempDB
{
    InventMovementsPeriodRptLinesTmp inventMovementsPeriodRptLinesTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoIT, GlobalizationConstants::FeatureReferenceIT00011] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventDimQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query for selecting InventDim records according to filter query,
    /// specified by caller.
    /// </summary>
    /// <param name="_filterQuery">
    /// Filter query specified by caller.
    /// </param>
    /// <returns>
    /// Query that selects InventDim records.
    /// </returns>
    /// <remarks>
    /// Method creates new query object, copies ranges from filter query to it and return it.
    /// </remarks>
    private Query buildInventDimQuery(Query _filterQuery)
    {
        Query q = new Query();
        QueryBuildDataSource qbdsInventDim = q.addDataSource(tableNum(InventDim));

        InventSumDateDimCriteria::copyRangesForDatasource(_filterQuery.dataSourceTable(tableNum(InventDim)), qbdsInventDim);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query for selecting all the data needed for <c>InventMovementsPeriod</c>
    /// report.
    /// </summary>
    /// <param name="_filterQuery">
    /// Filter query specified by caller.
    /// </param>
    /// <param name="_fromDate">
    /// Report start date.
    /// </param>
    /// <param name="_toDate">
    /// Report end date.
    /// </param>
    /// <returns>
    /// Query that selects all the data needed for <c>InventMovementsPeriod</c> report.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildReportQuery(Query _filterQuery, FromDate _fromDate, ToDate _toDate)
    {
        QueryBuildDataSource qbdsInventTransPosting, qbdsInventTrans, qbdsInventDim, qbdsInventTable, qbdsInventTransOrigin;
        QueryBuildRange      qbrInventTransPosting, qbrInventTrans;

        Query q = new Query();

        qbdsInventTrans = q.addDataSource(tableNum(InventTrans));

        qbdsInventTransPosting = qbdsInventTrans.addDataSource(tableNum(InventTransPosting));
        qbdsInventTransPosting.addLink(fieldNum(InventTrans, VoucherPhysical), fieldNum(InventTransPosting, Voucher));
        qbdsInventTransPosting.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransPosting, InventTransOrigin));
        qbdsInventTransPosting.addLink(fieldNum(InventTrans, DatePhysical), fieldNum(InventTransPosting, Transdate));
        qbdsInventTransPosting.joinMode(JoinMode::InnerJoin);
        qbdsInventTransPosting.fetchMode(QueryFetchMode::One2One);

        qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.addLink(fieldNum(InventTrans, InventDimId), fieldNum(InventDim, InventDimId));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);

        qbdsInventTable = qbdsInventTrans.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(InventTrans, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);

        qbdsInventTransOrigin = qbdsInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventTransOrigin.fetchMode(QueryFetchMode::One2One);

        qbrInventTransPosting = qbdsInventTransPosting.addRange(fieldNum(InventTransPosting, InventTransPostingType));
        qbrInventTransPosting.value(queryValue(InventTransPostingType::Physical));

        qbrInventTrans = qbdsInventTrans.addRange(fieldNum(InventTrans, DatePhysical));
        qbrInventTrans.value(SysQuery::range(_fromDate, _toDate));

        // add filter specified by user
        InventSumDateDimCriteria::copyRangesForDatasource(
            _filterQuery.dataSourceTable(tableNum(InventTable)),
            q.dataSourceTable(tableNum(InventTable)));
        InventSumDateDimCriteria::copyRangesForDatasource(
            _filterQuery.dataSourceTable(tableNum(InventDim)),
            q.dataSourceTable(tableNum(InventDim)));

        qbdsInventTrans.addSortField(fieldNum(InventTrans, ItemId), SortOrder::Ascending);
        qbdsInventTrans.addSortField(fieldNum(InventTrans, DatePhysical), SortOrder::Descending);
        qbdsInventTrans.addSortField(fieldNum(InventTransOrigin, InventTransId), SortOrder::Descending);
        qbdsInventTrans.addSortField(fieldNum(InventTrans, RecId), SortOrder::Descending);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates item quantity by date for specified inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// Item id for quantity calculation.
    /// </param>
    /// <param name="_byDate">
    /// Calcualte quantity on the date.
    /// </param>
    /// <param name="_inventDimQuery">
    /// Query that selects InventDim records.
    /// </param>
    /// <returns>
    /// Item quantity
    /// </returns>
    /// <remarks>
    /// Method summarize quantity of items that suit InvenDim filter query.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQty calcQtyByDate(ItemId _itemId, DatePhysical _byDate, Query _inventDimQuery)
    {
        InventSumDateDimCriteria inventSumDate = InventSumDateDimCriteria::newParameters(
            _byDate, _itemId, _inventDimQuery.dataSourceTable(tableNum(InventDim)));

        InventQty qty = inventSumDate.postedQty() + inventSumDate.receivedQty() - inventSumDate.deductedQty();

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates map of all items that suit filter query.
    /// </summary>
    /// <param name="_filterQuery">
    /// Filter query specified by caller.
    /// </param>
    /// <returns>
    /// Map with item ids.
    /// </returns>
    private Map createItemList(Query _filterQuery)
    {
        Query q = new Query();
        QueryBuildDataSource qbdsIT = q.addDataSource(tableNum(InventTable));

        InventSumDateDimCriteria::copyRangesForDatasource(_filterQuery.dataSourceTable(tableNum(InventTable)), qbdsIT);

        Map itemNamesMap = new Map(Types::String, Types::Integer);
        QueryRun qr = new QueryRun(q);
        while (qr.next())
        {
            InventTable inventTable = qr.get(tableNum(InventTable));
            itemNamesMap.insert(inventTable.ItemId, 0);
        }

        return itemNamesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets inventory description.
    /// </summary>
    /// <param name="_itemId">
    /// Item id for getting description.
    /// </param>
    /// <returns>
    /// Item description.
    /// </returns>
    /// <remarks>
    /// If there is no description for the item, empty string is returned.
    /// </remarks>
    private EcoResDescription getInventDescription(ItemId _itemId)
    {
        EcoResProductTranslation    eco;
        InventTable                 invent;
        EcoResDescription           ret;

        LanguageId systemLanguageId = SystemParameters::getSystemLanguageId();

        select firstonly Description from eco
            exists join invent
            where invent.Product == eco.Product
                && invent.ItemId == _itemId
                && eco.LanguageId == systemLanguageId;

        if (eco)
        {
            ret = eco.Description;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventMovementsPeriodRptLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data for the report in the temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(InventMovementsPeriodRptLinesTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventMovementsPeriodRptLinesTmp getInventMovementsPeriodRptLinesTmp()
    {
        select * from inventMovementsPeriodRptLinesTmp;

        return inventMovementsPeriodRptLinesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasureDescription</Name>
				<Source><![CDATA[
    private Description getUnitOfMeasureDescription(ItemId _itemId)
    {
        UnitOfMeasure               unitOfMeasure;
        UnitOfMeasureTranslation    translations;
        Description                 ret;

        LanguageId systemLanguageId = SystemParameters::getSystemLanguageId();

        // the way of getting inventory unit originally located in InventTrans.inventUnit() method
        UnitIDInventory inventUnit = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

        select firstonly Description from translations
            exists join unitOfMeasure
            where unitOfMeasure.RecId       == translations.UnitOfMeasure
                && unitOfMeasure.Symbol     == inventUnit
                && translations.LanguageId  == systemLanguageId;

        if (translations)
        {
            ret = translations.Description;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferWithinWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether inventory transaction is a transfer within a single warehouse.
    /// </summary>
    /// <param name="_inventTransType">
    /// Inventory transaction type.
    /// </param>
    /// <returns>
    /// True if transaction is a transfer within a single warehouse, otherwise False.
    /// </returns>
    private boolean isTransferWithinWarehouse(InventTransType _inventTransType)
    {
        switch (_inventTransType)
        {
            case InventTransType::Blocking:
            case InventTransType::WMSTransport:
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAllLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report lines for All lines report type.
    /// </summary>
    /// <param name="_reportQuery">
    /// Main query of the report (commonly is built by buildReportQuery method).
    /// </param>
    /// <param name="_inventDimQuery">
    /// Inventory dimension query (commonly is built by buildInventDimQuery method).
    /// </param>
    /// <param name="_itemList">
    /// Items map object (commonly is created by createItemList method).
    /// </param>
    /// <param name="_toDate">
    /// Report end date.
    /// </param>
    /// <param name="_showInternal">
    /// Flags that determines, whether to show internal movements or not.
    /// </param>
    /// <remarks>
    /// Method puts records to <c>InventMovementsPeriodRptLinesTmp</c> temp table.
    /// Each record corresponds to a single item movement transaction in the period.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processAllLines(Query _reportQuery, Query _inventDimQuery, Map _itemList, ToDate _toDate, boolean _showInternal)
    {
        ItemId            currentItem;
        RecordInsertList  linesToBeInserted = new RecordInsertList(tableNum(InventMovementsPeriodRptLinesTmp),
                                                                   false,                               // skipInsertMethod
                                                                   false,                               // skipDatabaseLog
                                                                   false,                               // skipEvents
                                                                   false,                               // skipAosValidation
                                                                   false,                               // skipRLSValidation
                                                                   inventMovementsPeriodRptLinesTmp);   // table);

        InventQty         qtyOnHandTo;

        // Run the query with user defined ranges applied to _reportQuery.
        QueryRun queryRun = new QueryRun(_reportQuery);
        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));
            InventTransOrigin inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));

            if (_showInternal || !this.isTransferWithinWarehouse(inventTransOrigin.ReferenceCategory))
            {
                // If new item comes from query
                if (currentItem != inventTrans.ItemId)
                {
                    currentItem = inventTrans.ItemId;
                    qtyOnHandTo = this.calcQtyByDate(currentItem, _toDate, _inventDimQuery);
                }

                inventMovementsPeriodRptLinesTmp.clear();

                inventMovementsPeriodRptLinesTmp.ItemId                   = inventTrans.ItemId;
                inventMovementsPeriodRptLinesTmp.Description              = this.getInventDescription(currentItem);
                inventMovementsPeriodRptLinesTmp.InventUnit               = this.getUnitOfMeasureDescription(currentItem);

                inventMovementsPeriodRptLinesTmp.QtyStart                 = qtyOnHandTo - inventTrans.Qty;
                inventMovementsPeriodRptLinesTmp.QtyReceipt               = inventTrans.Qty > 0 ? inventTrans.Qty : 0;
                inventMovementsPeriodRptLinesTmp.QtyIssue                 = inventTrans.Qty < 0 ? abs(inventTrans.Qty) : 0;
                inventMovementsPeriodRptLinesTmp.QtyEnd                   = qtyOnHandTo;

                inventMovementsPeriodRptLinesTmp.DatePhysical             = inventTrans.DatePhysical;
                inventMovementsPeriodRptLinesTmp.VoucherPhysical          = inventTrans.VoucherPhysical;
                inventMovementsPeriodRptLinesTmp.DateFinancial            = inventTrans.DateFinancial;
                inventMovementsPeriodRptLinesTmp.InvoiceId                = inventTrans.InvoiceId;
                inventMovementsPeriodRptLinesTmp.Voucher                  = inventTrans.Voucher;
                inventMovementsPeriodRptLinesTmp.ReferenceCategory        = inventTransOrigin.ReferenceCategory;
                inventMovementsPeriodRptLinesTmp.ReferenceCategoryVisible = NoYes::Yes;
                inventMovementsPeriodRptLinesTmp.TransRecId               = inventTrans.RecId;
                inventMovementsPeriodRptLinesTmp.InventTransId            = inventTransOrigin.InventTransId;

                qtyOnHandTo = inventMovementsPeriodRptLinesTmp.QtyStart;

                // Current item's been already hanled, no need to check it further
                _itemList.remove(inventMovementsPeriodRptLinesTmp.ItemId);

                linesToBeInserted.add(inventMovementsPeriodRptLinesTmp);
            }
        }
        linesToBeInserted.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processItemsWithoutMovements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report lines for items that have no movements in the report period,
    /// but probably exist in the warehouse (initial quantity is more than zero).
    /// </summary>
    /// <param name="_inventDimQuery">
    /// Inventory dimension query (commonly is built by buildInventDimQuery method).
    /// </param>
    /// <param name="_itemList">
    /// Items map object (commonly is created by createItemList method).
    /// </param>
    /// <param name="_fromDate">
    /// Report start date.
    /// </param>
    /// <param name="_toDate">
    /// Report end date.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processItemsWithoutMovements(Query _inventDimQuery, Map _itemList, FromDate _fromDate, ToDate _toDate)
    {
        RecordInsertList linesToBeInserted = new RecordInsertList(tableNum(InventMovementsPeriodRptLinesTmp),
                                                                  false,                               // skipInsertMethod
                                                                  false,                               // skipDatabaseLog
                                                                  false,                               // skipEvents
                                                                  false,                               // skipAosValidation
                                                                  false,                               // skipRLSValidation
                                                                  inventMovementsPeriodRptLinesTmp);   // table);

        InventQty        qtyOnHandFrom, qtyOnHandTo;

        MapEnumerator itemListEnumerator = new MapEnumerator(_itemList);

        while (itemListEnumerator.moveNext())
        {
            ItemId currentItem = itemListEnumerator.currentKey();

            qtyOnHandFrom = this.calcQtyByDate(currentItem, _fromDate, _inventDimQuery);
            qtyOnHandTo = _fromDate != _toDate ? this.calcQtyByDate(currentItem, _toDate, _inventDimQuery) : qtyOnHandFrom;

            if (qtyOnHandFrom > 0 && qtyOnHandFrom == qtyOnHandTo)
            {
                inventMovementsPeriodRptLinesTmp.clear();

                inventMovementsPeriodRptLinesTmp.ItemId                   = currentItem;
                inventMovementsPeriodRptLinesTmp.Description              = this.getInventDescription(currentItem);
                inventMovementsPeriodRptLinesTmp.InventUnit               = this.getUnitOfMeasureDescription(currentItem);

                inventMovementsPeriodRptLinesTmp.QtyStart                 = qtyOnHandTo;
                inventMovementsPeriodRptLinesTmp.QtyReceipt               = 0;
                inventMovementsPeriodRptLinesTmp.QtyIssue                 = 0;
                inventMovementsPeriodRptLinesTmp.QtyEnd                   = qtyOnHandFrom;

                inventMovementsPeriodRptLinesTmp.TransRecId               = 0;
                inventMovementsPeriodRptLinesTmp.ReferenceCategoryVisible = NoYes::No;

                linesToBeInserted.add(inventMovementsPeriodRptLinesTmp);
            }
        }
        linesToBeInserted.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic. For this report, only data in pseudo-temporary tables are
    ///    transferred to SSRS.
    /// </summary>
    public void processReport()
    {
        Query                            filterQuery, reportQuery, inventDimQuery;
        boolean isNotProcessAllItemIdsFlightEnabled = InventMovementsPeriodRptNotProcessAllItemIdsFlight::instance().isEnabled();

        // Get the data contract from the runtime.
        // This base class method reads the data contract specified in the SRSReportParameterAttribute attribute.
        InventMovementsPeriodRptContract dataContract = this.parmDataContract() as InventMovementsPeriodRptContract;

        // Get the query from the runtime using a dynamic query.
        // This base class method reads the query specified in the SRSReportQueryAttribute attribute.
        filterQuery = this.parmQuery();

        reportQuery = this.buildReportQuery(filterQuery, dataContract.parmFromDate(), dataContract.parmToDate());
        inventDimQuery = this.buildInventDimQuery(filterQuery);

        // Get all filtered items in the list
        Map itemList = this.createItemList(filterQuery);

        ttsbegin;

        // Process items, get movements and create report lines
        if (dataContract.parmTotalsOnly())
        {
            this.processTotalsOnly(reportQuery, inventDimQuery, itemList, dataContract.parmToDate());
        }
        else
        {
            this.processAllLines(reportQuery, inventDimQuery, itemList,
            dataContract.parmToDate(), dataContract.parmIncludeInternalTransfers());
        }

        // Now itemList contains only items which have no movements in the period
        // but we should check if they still exist
        boolean existsFilterQueryForInventTable = filterQuery.dataSourceTable(tableNum(InventTable)).rangeCount() > 1;
        if (!isNotProcessAllItemIdsFlightEnabled || existsFilterQueryForInventTable)
        {
            this.processItemsWithoutMovements(inventDimQuery, itemList, dataContract.parmFromDate(), dataContract.parmToDate());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTotalsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report lines for Totals only report type.
    /// </summary>
    /// <param name="_reportQuery">
    /// Main query of the report (commonly is built by buildReportQuery method).
    /// </param>
    /// <param name="_inventDimQuery">
    /// Inventory dimension query (commonly is built by buildInventDimQuery method).
    /// </param>
    /// <param name="_itemList">
    /// Items map object (commonly is created by createItemList method).
    /// </param>
    /// <param name="_toDate">
    /// Report end date.
    /// </param>
    /// <remarks>
    /// Method puts records to <c>InventMovementsPeriodRptLinesTmp</c> temp table.
    /// Each record contains summarized quantities for an item, based on item movement
    /// transactions made in the report period.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processTotalsOnly(Query _reportQuery, Query _inventDimQuery, Map _itemList, ToDate _toDate)
    {
        ItemId      currentItem;

        // Run the query with user defined ranges applied to _reportQuery.
        QueryRun queryRun = new QueryRun(_reportQuery);
        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));

            // If new item comes from query
            if (currentItem != inventTrans.ItemId)
            {
                // If it is first iteration there is nothing to insert
                if (currentItem)
                {
                    inventMovementsPeriodRptLinesTmp.insert();
                }
                inventMovementsPeriodRptLinesTmp.clear();

                currentItem = inventTrans.ItemId;

                inventMovementsPeriodRptLinesTmp.ItemId      = currentItem;
                inventMovementsPeriodRptLinesTmp.Description = this.getInventDescription(currentItem);
                inventMovementsPeriodRptLinesTmp.InventUnit  = this.getUnitOfMeasureDescription(currentItem);
                inventMovementsPeriodRptLinesTmp.QtyStart    = this.calcQtyByDate(currentItem, _toDate, _inventDimQuery);
                inventMovementsPeriodRptLinesTmp.QtyEnd      = inventMovementsPeriodRptLinesTmp.QtyStart;
                inventMovementsPeriodRptLinesTmp.TransRecId  = 0;
            }

            inventMovementsPeriodRptLinesTmp.QtyStart                 -= inventTrans.Qty;
            inventMovementsPeriodRptLinesTmp.QtyReceipt               += inventTrans.Qty > 0 ? inventTrans.Qty : 0;
            inventMovementsPeriodRptLinesTmp.QtyIssue                 += inventTrans.Qty < 0 ? abs(inventTrans.Qty) : 0;
            inventMovementsPeriodRptLinesTmp.ReferenceCategoryVisible  = NoYes::No;

            // Current item's been already hanled, no need to check it further
            _itemList.remove(inventMovementsPeriodRptLinesTmp.ItemId);
        }
        // Insert last report line
        if (currentItem)
        {
            inventMovementsPeriodRptLinesTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventMovementsPeriodRptDP construct()
    {
        return new InventMovementsPeriodRptDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>