<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAbstractActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAbstractActivity</c> class is an abstract activity class,
/// which is the base of
/// - <c>TaxIntegrationSequence</c>,
/// - <c>TaxIntegrationAbstractActivityOnDocument</c>,
/// - <c>TaxIntegrationAbstractActivityOnLine</c>.
/// </summary>
public abstract class TaxIntegrationAbstractActivity
{
    private const str LoggerNamespace = 'TaxService';

    private static SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxIntegrationAbstractActivity));

    private str name;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationAbstractActivity</c>.
    /// </summary>
    /// <param name = "_name">The name of the activity.</param>
    protected void new(str _name)
    {
        this.name = _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity context of the logger.
    /// </summary>
    /// <returns>The activity context of the logger.</returns>
    protected SysInstrumentationActivityContext getActivityContext()
    {
        return TaxIntegrationAbstractActivity::getActivityContextStatic(this.name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity context of the logger.
    /// </summary>
    /// <param name = "_name">The name of the activity context.</param>
    /// <returns>The activity context of the logger.</returns>
    public final static SysInstrumentationActivityContext getActivityContextStatic(str _name)
    {
        return TaxIntegrationAbstractActivity::logger.activityContext(_name, LoggerNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this activity should be skipped for document.
    /// </summary>
    /// <param name="_document">The <c>TaxIntegrationDoccumentObject</c> to determine the applicability.</param>
    /// <returns>true, if this activity should be skipped for document; otherwise, false.</returns>
    /// <remarks>In most cases, super() should be called in derived class</remarks>
    internal boolean shouldSkip(TaxIntegrationDocumentObject _document)
    {
        boolean ret;

        ret = !_document
            || !_document.isOK()
            || !_document.isTaxable();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>