<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB63_FiscalBooks_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Upgrade scripts for fiscal books.
/// </summary>
public class ReleaseUpdateDB63_FiscalBooks_BR extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system with the source version earlier than AX 6.3.
    /// </summary>
    /// <returns>The script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::v63;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the module name of an upgrade class.
    /// </summary>
    /// <returns>
    /// The module name.
    /// </returns>
    /// <remarks>
    /// This method must be implemented by sub classes.
    /// </remarks>
    public ReleaseUpdateModule moduleName()
    {
        return "@GLS50960";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustFiscalDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the InventTransId field of customer fiscal document line.
    /// </summary>
    [
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSync),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::PartitionScript),
        UpgradeScriptTableAttribute(tableStr(FiscalDocumentLine_BR), false, true, true, false),
        UpgradeScriptTableAttribute(tableStr(CustInvoiceTrans), false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateCustFiscalDocumentLine()
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;
        CustInvoiceTrans        custInvoiceTrans;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        this.callInsertUpdateRelatedSkipMethods(fiscalDocumentLine);

        update_recordSet crosscompany fiscalDocumentLine
            setting InventTransId = custInvoiceTrans.InventTransId
            join custInvoiceTrans
                where   fiscalDocumentLine.RefTableId   == custInvoiceTrans.TableId
                    &&  fiscalDocumentLine.RefRecId     == custInvoiceTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFBTaxAssessmentPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax assessment payment by document from Fiscal Books module filling in the related fiscal document.
    /// </summary>
    [
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSync),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::PartitionScript),
        UpgradeScriptTableAttribute(tableStr(FBTaxAssessmentPayment_BR), false, true, true, false),
        UpgradeScriptTableAttribute(tableStr(FBTaxTrans_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(FiscalDocument_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(FBTaxAssessment_BR), false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateFBTaxAssessmentPayment()
    {
        FBTaxAssessmentPayment_BR           fbTaxAssessmentPayment;
        FiscalDocument_BR                   fiscalDocument;
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxAssessment_BR                  fbTaxAssessment;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        this.callInsertUpdateRelatedSkipMethods(fbTaxAssessmentPayment);

        update_recordSet crosscompany fbTaxAssessmentPayment
            setting FiscalDocument_BR = fiscalDocument.RecId
                where fbTaxAssessmentPayment.PaymentType == FBTaxAssessmentPaymentType_BR::ByDocument
            join RecId from fiscalDocument
            join RecId from fbTaxAssessment
            exists join fbTaxTrans
                where fbTaxAssessmentPayment.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    && fbTaxTrans.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    && fbTaxTrans.FiscalDocument_BR == fiscalDocument.RecId
                    && fbTaxTrans.FBFiscalDocumentAdjustment_BR == 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFbTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax transactions from Fiscal Books module filling in the related fiscal establishment id.
    /// </summary>
    [
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSync),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::PartitionScript),
        UpgradeScriptTableAttribute(tableStr(FBTaxTrans_BR), false, true, true, false),
        UpgradeScriptTableAttribute(tableStr(FiscalDocument_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(RetailFiscalReceipt_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(RetailFiscalReceiptTaxTrans_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(RetailZReport_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(RetailZReportTotalizerTaxTrans_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(FBFiscalDocumentAdjustment_BR), false, true, false, false),
        UpgradeScriptTableAttribute(tableStr(FBTaxAssessmentAdjustment_BR), false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateFbTaxTrans()
    {
        FBTaxTrans_BR                       fbTaxTrans;
        FiscalDocument_BR                   fiscalDocument;
        RetailFiscalReceipt_BR              retailFiscalReceipt;
        RetailFiscalReceiptTaxTrans_BR      retailFiscalReceiptTaxTrans;
        RetailZReport_BR                    retailZReport;
        RetailZReportTotalizerTaxTrans_BR   retailZReportTotalizerTaxTrans;
        FBFiscalDocumentAdjustment_BR       fiscalDocumentAdjustment;
        FBTaxAssessmentAdjustment_BR        taxAssessmentAdjustment;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        this.callInsertUpdateRelatedSkipMethods(fbTaxTrans);

        // Fiscal Books tax transaction is related to a fiscal document
        update_recordSet crosscompany fbTaxTrans
            setting FiscalEstablishmentId = fiscalDocument.FiscalEstablishment, FiscalEstablishmentDataArea = fiscalDocument.dataAreaId
            join fiscalDocument
                where fbTaxTrans.FiscalDocument_BR == fiscalDocument.RecId;

        // Fiscal Books tax transaction is related to a retail fiscal receipt
        update_recordSet crosscompany fbTaxTrans
            setting FiscalEstablishmentId = retailFiscalReceipt.FiscalEstablishment, FiscalEstablishmentDataArea = retailFiscalReceipt.dataAreaId
            join retailFiscalReceiptTaxTrans
                where fbTaxTrans.RetailFiscalReceiptTaxTrans_BR == retailFiscalReceiptTaxTrans.RecId
            join retailFiscalReceipt
                where   retailFiscalReceipt.TransactionId   == retailFiscalReceiptTaxTrans.TransactionId
                    &&  retailFiscalReceipt.StoreId         == retailFiscalReceiptTaxTrans.StoreId
                    &&  retailFiscalReceipt.TerminalId      == retailFiscalReceiptTaxTrans.TerminalId;

        // Fiscal Books tax transaction is related to a retail zreport
        update_recordSet crosscompany fbTaxTrans
            setting FiscalEstablishmentId = retailZReport.FiscalEstablishment, FiscalEstablishmentDataArea = retailZReport.dataAreaId
            join retailZReportTotalizerTaxTrans
                where fbTaxTrans.RetailZReportTotalizerTaxTrans_BR == retailZReportTotalizerTaxTrans.RecId
            join retailZReport
                where   retailZReport.ZReportNumber                 == retailZReportTotalizerTaxTrans.ZReportNumber
                    &&  retailZReport.FiscalPrinterSerialNumber     == retailZReportTotalizerTaxTrans.FiscalPrinterSerialNumber
                    &&  retailZReport.AdditionalFiscalMemoryIndex   == retailZReportTotalizerTaxTrans.AdditionalFiscalMemoryIndex;

        // Fiscal Books tax transaction is related to a fiscal document adjustment
        update_recordSet crosscompany fbTaxTrans
            setting FiscalEstablishmentId = fiscalDocumentAdjustment.FiscalEstablishmentId, FiscalEstablishmentDataArea = fiscalDocumentAdjustment.VoucherDataArea
            join fiscalDocumentAdjustment
                where fbTaxTrans.FBFiscalDocumentAdjustment_BR == fiscalDocumentAdjustment.RecId;

        // Fiscal Books tax transaction is related to a tax assessment adjustment
        update_recordSet crosscompany fbTaxTrans
            setting FiscalEstablishmentId = taxAssessmentAdjustment.FiscalEstablishmentId, FiscalEstablishmentDataArea = taxAssessmentAdjustment.VoucherDataArea
            join taxAssessmentAdjustment
                where fbTaxTrans.FBTaxAssessmentAdjustment_BR == taxAssessmentAdjustment.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailZReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates which Retail Z report records were already posted by the Retail statement.
    /// </summary>
    [
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSync),
        UpgradeScriptConfigKeyAttribute(configurationKeyStr(Retail)),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::PartitionScript),
        UpgradeScriptTableAttribute(tableStr(RetailZReport_BR), false, true, true, false),
        UpgradeScriptTableAttribute(tableStr(RetailTransactionTable), false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateRetailZReport()
    {
        RetailZReport_BR        retailZReport;
        RetailTransactionTable  retailTransactionTable;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        this.callInsertUpdateRelatedSkipMethods(retailZReport);

        update_recordSet crosscompany retailZReport
            setting IsStatementPosted = NoYes::Yes
            exists join retailTransactionTable
                where   retailTransactionTable.transactionId    == retailZReport.TransactionId
                    &&  retailTransactionTable.terminal         == retailZReport.TerminalId
                    &&  retailTransactionTable.store            == retailZReport.StoreId
                    &&  retailTransactionTable.statementId      != '';

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>