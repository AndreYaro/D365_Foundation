<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDlvModeExplodeJobScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// This class <c>RetailDlvModeExplodeJobScheduler</c> is used to push data from DlvMode to TempTable
/// and from TempTable to Normal Tables.
/// This job creates sub-tasks one per each delivey mode, so that each task processes updates for each delivery mode.
/// </summary>
internal class RetailDlvModeExplodeJobScheduler extends RunBaseBatch
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the class must run in batch.
    /// Forces the slider in the dialog to true.
    /// </summary>
    /// <returns>True.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RefRecId batchJobId = this.parmCurrentBatch().BatchJobId;
        eventSource.EventWriteProcessDeliveryModesSchedulerBegin(batchJobId);

        this.cleanupExplodedTables();
        int numberOfWorkersScheduled = this.createWorkers();

        eventSource.EventWriteProcessDeliveryModesSchedulerEnd(batchJobId, numberOfWorkersScheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkers</Name>
				<Source><![CDATA[
    private int createWorkers()
    {
        DlvMode dlvMode;
        BatchHeader batchHeader;
        int numberOfWorkersScheduled = 0;

        while select RecId from dlvMode
        {
            numberOfWorkersScheduled++;

            //creating new task
            RetailDlvModeExplodeTask worker = RetailDlvModeExplodeTask::construct(dlvMode.RecId);

            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            batchHeader.addRuntimeTask(worker, this.parmCurrentBatch().RecId);

            eventSource.EventWriteProcessDeliveryModesScheduledWorker(dlvMode.RecId);
        }

        if (batchHeader)
        {
            batchHeader.save();
        }        

        return numberOfWorkersScheduled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Retail:DlvModeExplodeJobScheduler";   // "Process delivery modes job"
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        // process delivery modes will execute the RetailDlvModeExplodeJobScheduler with multiple tasks.

        RetailDlvModeExplodeJobScheduler scheduler = new RetailDlvModeExplodeJobScheduler();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailDlvModeExplodeJobScheduler</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailDlvModeExplodeJobScheduler</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupExplodedTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean up exploded tables for non-existent delivery modes,
    /// and synchronize categories lookup.
    /// </summary>
    private void cleanupExplodedTables()
    {
        DlvMode dlvMode;
        RetailDlvModeChannelExploded retailDlvModeChannelExploded;
        RetailDlvModeProductExploded retailDlvModeProductExploded;
        RetailDlvModeAddressExploded retailDlvModeAddressExploded;

        delete_from retailDlvModeChannelExploded
            notexists join dlvMode
             where retailDlvModeChannelExploded.DlvMode == dlvMode.RecId;
        int64 countChannelRecordsDeleted = retailDlvModeChannelExploded.RowCount();

        delete_from retailDlvModeProductExploded
            notexists join dlvMode
             where retailDlvModeProductExploded.DlvMode == dlvMode.RecId;
        int64 countProductRecordsDeleted = retailDlvModeProductExploded.RowCount();

        delete_from retailDlvModeAddressExploded
            notexists join dlvMode
             where retailDlvModeAddressExploded.DlvMode == dlvMode.RecId;
        int64 countAddressRecordsDeleted = retailDlvModeAddressExploded.RowCount();
             
        eventSource.EventWriteProcessDeliveryModesCleanupExplodedTables(countChannelRecordsDeleted, countProductRecordsDeleted, countAddressRecordsDeleted);

        //make sure that categories are exploded before running anything.
        RetailCategoryContainmentLookup::synchronizeCategoriesLookup(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>