<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateCrossDockTransferOrderShip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreateCrossDockTransferOrderShip</c> class creates warehouse work for cross docking opportunities that use transfer issue work as the demand.
/// </summary>
class WHSWorkCreateCrossDockTransferOrderShip extends WHSWorkCreateCrossDock
{
    WHSLoadLine     loadLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initWorkLineFromLoadLine</Name>
				<Source><![CDATA[
    private void initWorkLineFromLoadLine(WHSLoadLine _loadLine)
    {
        tmpWorkLine.RefTableId          = tableNum(WHSLoadLine);
        tmpWorkLine.RefRecId            = _loadLine.RecId;
        tmpWorkLine.OriginRefId         = _loadLine.OrderNum;
        tmpWorkLine.OrderNum            = _loadLine.OrderNum;
        tmpWorkLine.ItemId              = _loadLine.ItemId;
        tmpWorkLine.InventTransId       = _loadLine.InventTransId;
        tmpWorkLine.LoadLineRefRecId    = _loadLine.RecId;
        tmpWorkLine.PackingQty          = _loadLine.PackingQty;
        tmpWorkLine.LoadId              = _loadLine.LoadId;
        tmpWorkLine.CustVendAC          = _loadLine.displayCustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkLineFromShipment</Name>
				<Source><![CDATA[
    private void initWorkLineFromShipment(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipment = WHSShipmentTable::find(_shipmentId);

        tmpWorkLine.ShipmentId          = shipment.ShipmentId;
        tmpWorkLine.CarrierCode         = shipment.CarrierCode;
        tmpWorkLine.CarrierServiceCode  = shipment.CarrierServiceCode;
        tmpWorkLine.ModeCode            = shipment.ModeCode;
        tmpWorkLine.WorkTransType       = shipment.WorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptWarehouse</Name>
				<Source><![CDATA[
    private InventLocationId getReceiptWarehouse()
    {
        InventTransferLine transferLine = loadLine.getOrderCommonFromLoadLine() as InventTransferLine;

        InventLocationId transferWarehouseTo = transferLine.inventTransferTable().InventLocationIdTo;

        InventLocation receiptWarehouse = InventLocation::find(transferWarehouseTo);

        if (receiptWarehouse.WHSEnabled
        &&  !receiptWarehouse.WMSLocationIdDefaultReceipt)
        {
            error(strFmt("@WAX4668", transferWarehouseTo));
            throw error("@WAX4673");
        }

        return transferWarehouseTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSplitLoadLine</Name>
				<Source><![CDATA[
    private WHSLoadLine updateSplitLoadLine(
        InventDimId _newInventDimId,
        InventQty   _inventQtyToSplit)
    {
        WHSLoadLine                         newLoadLine;
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        ttsbegin;

        Qty qtyToSplit = releasedProductUnitConverter.convert(_inventQtyToSplit,
                                                              UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(loadLine.ItemId,ModuleInventPurchSales::Invent).UnitId),
                                                              UnitOfMeasure::unitOfMeasureIdBySymbol(loadLine.UOM),
                                                              NoYes::No,
                                                              loadLine.ItemId,
                                                              loadLine.InventDimId);

        buf2Buf(loadLine, newLoadLine);
        newLoadLine.InventDimId = _newInventDimId;
        newLoadLine.InventQty   = _inventQtyToSplit;
        newLoadLine.Qty         = qtyToSplit;
        newLoadLine.insert();

        loadLine.selectForUpdate(true);
        loadLine.InventQty -= _inventQtyToSplit;
        loadLine.Qty       -= qtyToSplit;

        if (loadLine.Qty)
        {
            loadLine.update();
        }
        else
        {
            loadLine.delete();
        }

        ttscommit;

        return newLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpWorkLineForMissingDimension</Name>
				<Source><![CDATA[
	private void createTmpWorkLineForMissingDimension()
    {
        InventTransOrigin   localInventTransOrigin;
        InventTrans         localInventTrans;
        InventDim           localInventDim;
        InventDim           currentCrossDockDim = InventDim::find(crossDockOpportunity.SupplyInventDimId);
        InventQty           remainInventQty = crossDockOpportunity.CrossDockQuantity;

        while select TableId from localInventTransOrigin
            where localInventTransOrigin.InventTransId == crossDockOpportunity.SupplyTransId
            join Qty from localInventTrans
                where localInventTrans.InventTransOrigin == localInventTransOrigin.RecId
                &&    localInventTrans.StatusReceipt      > StatusReceipt::None
                &&    localInventTrans.StatusIssue       == StatusIssue::None
            join localInventDim
                where localInventDim.inventDimId     == localInventTrans.inventDimId
                &&    localInventDim.LicensePlateId  == currentCrossDockDim.LicensePlateId
        {			
            InventDim newSupplyDim;
            newSupplyDim.initFromInventDim(localInventDim, InventDim::dimFieldsList());

            newSupplyDim.clearLocationAndBelowDim(loadLine.ItemId);
            newSupplyDim = InventDim::findOrCreate(newSupplyDim);

            tmpWorkLine.InventDimId = newSupplyDim.inventDimId;

            // Create new loadline for new dimension
            WHSLoadLine newLoadLine = this.updateSplitLoadLine(newSupplyDim.inventDimId, localInventTrans.Qty);
            tmpWorkLine.RefRecId         = newLoadLine.RecId;
            tmpWorkLine.LoadLineRefRecId = newLoadLine.RecId;

            this.createTempLine(tmpWorkLine, localInventTrans.Qty);

            newLoadLine.WorkCreatedQty += workCreatedQty;
            newLoadLine.update();

            remainInventQty -= localInventTrans.Qty;
            if (remainInventQty <= 0)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    public void createTempTable()
    {
        ttsbegin;

        tmpWorkLine.WorkType            = WHSWorkType::Pick;
        tmpWorkLine.OriginType          = WHSOriginType::CrossDock;
        tmpWorkLine.WorkCreateId        = workCreateId;

        this.initWorkLineFromLoadLine(loadLine);
        this.initWorkLineFromShipment(loadLine.ShipmentId);

        tmpWorkLine.ToWarehouse = this.getReceiptWarehouse();

        InventDim	currentDim = InventDim::find(crossDockOpportunity.SupplyInventDimId);
		InventTable localInventTable = InventTable::find(loadLine.ItemId);

        targetLicensePlateId = currentDim.LicensePlateId;
        startLocationId		 = currentDim.wMSLocationId;
		
        if ((!currentDim.inventSerialId
        &&   WhsReservationHierarchyInventDimUtil::isSerialAboveLocation(localInventTable))
        ||  (!currentDim.inventBatchId
        &&   WhsReservationHierarchyInventDimUtil::isBatchAboveLocation(localInventTable)))
        {
            this.createTmpWorkLineForMissingDimension();
        }
        else
        {
            currentDim.clearLocationAndBelowDim(loadLine.ItemId);
            currentDim = InventDim::findOrCreate(currentDim);

            tmpWorkLine.InventDimId = currentDim.inventDimId;
            this.createTempLine(tmpWorkLine, crossDockOpportunity.CrossDockQuantity);

            loadLine.selectForUpdate(true);
            loadLine.WorkCreatedQty += workCreatedQty;
            loadLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        Common          _common,
        WHSWorkCreateId _workCreateId = '')
    {
        loadLine = _common as WHSLoadLine;

        if (!loadLine)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (PdsGlobal::pdsIsCWItem(loadLine.ItemId))
        {
            throw error("@WAX:Error_OpportunisticCrossDockingDoesNotSupportCWItems");
        }

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(loadLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkCreateCrossDockTransferOrderShip construct(
        Common          _common,
        WHSWorkCreateId _workCreateId)
    {
        return new WHSWorkCreateCrossDockTransferOrderShip(_common, _workCreateId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>