<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FreeTextInvoiceController</c> class is the controller class for the <c>FreeTextInvoice</c>
///    report.
/// </summary>
public class FreeTextInvoiceController extends GiroPrintMgmtFormLetterController implements ERIDocumentAttachmentController, BatchRetryable
{
    #File

    SalesFormLetter_FreeText salesFormLetter;
    FreeTextInvoiceContract contract;
    RecordSortedList journalList;
    CustInvoiceJour custInvoiceJour;
    PrintCopyOriginal printCopyOriginal;
    // <GBR>
    #NFPrinting_BR
    FiscalDocumentContract_BR fiscalDocumentContract;
    FiscalDocument_BR fiscalDocument;
    // </GBR>
    // <GEELT>
    #isoCountryRegionCodes
    // </GEELT>
    // <GTH>
    boolean runOnBlockMode_TH;
    // </GTH>
    // <GTE><GIN>
    boolean isGSTInvoice;
    Common custInvoice;
    GSTInvoiceContract_IN gstInvoiceContract;
    SRSCatalogItemName preReportName;
    // </GTE></GIN>
    public Args originalArgs;

    ERDocumentAttachmentContract erDocumentAttachmentContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmERDocumentAttachmentContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ERDocumentAttachmentContract parmERDocumentAttachmentContract(ERDocumentAttachmentContract _erDocumentAttachmentContract = erDocumentAttachmentContract)
    {
        erDocumentAttachmentContract = _erDocumentAttachmentContract;
        return erDocumentAttachmentContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogShow</Name>
				<Source><![CDATA[
    protected void dialogShow()
    {
        // <GTH>
        if (useReportViewerForm && runOnBlockMode_TH)
        {
            FormRun formRun;

            if (dialog is SysOperationDialog)
            {
                SysOperationDialog sysOperationDialog = dialog as SysOperationDialog;
                sysOperationDialog.parmIsModal(true);
                sysOperationDialog.run();
            }
            else
            {
                formRun = dialog as FormRun;
                formRun.run();
            }
            this.dialogPostRun();

            if (formRun)
            {
                formRun.wait(true);
            }
        }
        else
        {
            // </GTH>
            super();
            // <GTH>
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a report header title.
    /// </summary>
    /// <returns>
    /// The report header title.
    /// </returns>
    protected str documentTitle()
    {
        str documentTitle;
        boolean isCreditNote;
        CustParameters custParameters = CustParameters::find();
        CompanyInfo companyInfo = CompanyInfo::find();
        // <GEEU>
        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();
        // </GEEU>

        boolean printCorrInvoiceLabel_DE = isoCountryCode == #isoDE &&
                                               companyInfo.PrintCorrInvoiceLabel_DE &&
                                               custInvoiceJour.InvoiceDate >= companyInfo.PrintCorrInvoiceLabelEffDate_DE;

        if (isoCountryCode == #isoLV)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00010, funcName());
        }

        // <GEEU>
        switch (isoCountryCode)
        {
            // <GEEU>
            //case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
            // </GEEU>
            // <GEECZ>
            case #isoEE, #isoLT, #isoHU, #isoLV, #isoPL:
                // </GEECZ>
                isCreditNote = custInvoiceJour.returnLinesExist_W() || custInvoiceJour.InvoiceAmount < 0;
                break;
            // <GEECZ>
            case #isoCZ:
                return SalesInvoiceController::documentTitle_CZ(custInvoiceJour,
                                                                contract.parmPrintCopyOriginal());
            // </GEECZ>
            // <GMY>
            case #isoMY:
                return SalesInvoiceController::documentTitle_MY(
                    custInvoiceJour,
                    contract.parmPrintCopyOriginal(),
                    contract.parmIsTaxInvoice());
            // </GMY>

            default:
                // </GEEU>
                isCreditNote = custInvoiceJour.InvoiceAmount < 0;
            // <GEEU>
        }
        // </GEEU>

        if (!isCreditNote)
        {
            if (contract.parmPrintCopyOriginal() == PrintCopyOriginal::Copy)
            {
                if (custInvoiceJour.isProforma())
                {
                    if (custInvoiceJour.Prepayment)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS87980"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS70789"), custInvoiceJour.LanguageId);
                    }
                }
                else
                {
                    if (isoCountryCode == #isoLT)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS12128"), custInvoiceJour.LanguageId);
                    }
                    else if (isoCountryCode == #isoAE)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@UAE_VAT:UAE_VAT_CopyTaxInvoice"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS24428"), custInvoiceJour.LanguageId);
                    }
                }
            }
            else
            {
                if (custInvoiceJour.isProforma())
                {
                    if (custInvoiceJour.Prepayment)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS87979"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS4701"), custInvoiceJour.LanguageId);
                    }
                }
                else
                {
                    if (isoCountryCode == #isoAE)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS115505"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS12128"), custInvoiceJour.LanguageId);
                    }
                }
            }
        }
        else
        {
            if (contract.parmPrintCopyOriginal() == PrintCopyOriginal::Copy)
            {
                if (custInvoiceJour.isProforma())
                {
                    if (custInvoiceJour.Prepayment)
                    {
                        documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004214"), custInvoiceJour.LanguageId) :
                                                                   SysLabel::labelId2String(literalStr("@SYS87981"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        if (custParameters.CreditInvoicingReport)
                        {
                            documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004215"), custInvoiceJour.LanguageId) :
                                                                       SysLabel::labelId2String(literalStr("@SYS99741"), custInvoiceJour.LanguageId);
                        }
                        else
                        {
                            documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004215"), custInvoiceJour.LanguageId) :
                                                                       SysLabel::labelId2String(literalStr("@SYS70790"), custInvoiceJour.LanguageId);
                        }
                    }
                }
                else
                {
                    // <GEEHU>
                    if (isoCountryCode == #isoHU)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00005, funcName());
                        // Always print "Invoice credit note" if country is Hungary
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS4081405"), custInvoiceJour.LanguageId);
                    }
                    else if (isoCountryCode == #isoAE)
                    {
                        // Always print "Copy Tax credit note" if country is UAE
                        documentTitle = SysLabel::labelId2String(literalStr("@UAE_VAT:UAE_VAT_CopyTaxCreditNote"), custInvoiceJour.LanguageId);
                    }
                    else
                    // </GEEHU>
                    if (custParameters.CreditInvoicingReport)
                    {
                        documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004216"), custInvoiceJour.LanguageId) :
                                                                   SysLabel::labelId2String(literalStr("@SYS99733"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004216"), custInvoiceJour.LanguageId) :
                                                                   SysLabel::labelId2String(literalStr("@SYS24607"), custInvoiceJour.LanguageId);
                    }
                }
            }
            else
            {
                if (custInvoiceJour.isProforma())
                {
                    if (custInvoiceJour.Prepayment)
                    {
                        documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004214"), custInvoiceJour.LanguageId) :
                                                                   SysLabel::labelId2String(literalStr("@SYS87981"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        if (custParameters.CreditInvoicingReport)
                        {
                            documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004217"), custInvoiceJour.LanguageId) :
                                                                       SysLabel::labelId2String(literalStr("@SYS99735"), custInvoiceJour.LanguageId);
                        }
                        else
                        {
                            documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004217"), custInvoiceJour.LanguageId) :
                                                                       SysLabel::labelId2String(literalStr("@SYS24608"), custInvoiceJour.LanguageId);
                        }
                    }
                }
                else
                {
                    // <GEEHU>
                    if (isoCountryCode == #isoHU)
                    {
                        // Always print "Invoice credit note" if country is Hungary
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS4081405"), custInvoiceJour.LanguageId);
                    }
                    else
                    // </GEEHU>
                    if (custParameters.CreditInvoicingReport)
                    {
                        documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004218"), custInvoiceJour.LanguageId) :
                                                                   SysLabel::labelId2String(literalStr("@SYS99734"), custInvoiceJour.LanguageId);
                    }
                    else if (isoCountryCode == #isoAE)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@UAE_VAT:UAE_VAT_TaxCreditNote"), custInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004218"), custInvoiceJour.LanguageId) :
                                                                   SysLabel::labelId2String(literalStr("@SYS8125"), custInvoiceJour.LanguageId);
                    }
                }
            }
        }
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleForLTU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the report header title for LTU.
    /// </summary>
    /// <param name = "_documentTitle"> documentTitle.</param>
    /// <returns>
    ///     The report header title for LTU.
    /// </returns>
    protected str getDocumentTitleForLTU(str _documentTitle)
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        
        if (!CustInvoiceDoNotAddVATTextToTitleFeature::isEnabled() && strLRTrim(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custInvoiceJour.InvoiceDate)))
        {
            // Adds the "VAT" keyword to the begining of the invoice text if the company is a VAT payer
            _documentTitle = strFmt("@SYS76498", SysLabel::labelId2String(literalStr("@GLS107406"), custInvoiceJour.LanguageId), _documentTitle);
        }
        return _documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiroType</Name>
				<Source><![CDATA[
    /// <summary>
    /// retrieves type of Giro of current FTI.
    /// </summary>
    /// <returns>Typr of Giro associated with current FTI.</returns>
    public PaymentStub getGiroType()
    {
        return custInvoiceJour.GiroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJourId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves record id of current FTI.
    /// </summary>
    /// <returns>Record id of current FTI.</returns>
    public RefRecId getJourId()
    {
        return custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    public void initFormLetterReport()
    {
        Args localArgs = this.parmArgs();
        printCopyOriginal = localArgs.parmEnum();

        if (classIdGet(localArgs.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetter = localArgs.caller();
        }

        journalList = localArgs.record() ? FormLetter::createJournalListCopy(localArgs.record()) : localArgs.object();

        if (!journalList || !journalList.first(custInvoiceJour))
        {
            throw error("@SYS26348");
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::SalesFreeTextInvoice);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesFormLetter)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            formLetterReport.parmUsePrintMgmtDestinations(salesFormLetter.usePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(salesFormLetter.parmUseUserDefinedDestinations());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId2RecID</Name>
				<Source><![CDATA[
    protected RecId invoiceId2RecID(InvoiceId _invoiceId)
    {
        //  When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is concatenation of # and the custInvoiceJour.RecId
        //  This method will strip the leading # and cast the string to a int64.
        return str2int64(subStr(_invoiceId, 2, strLen(_invoiceId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    /// The <c>outReports</c> method loops over print management settings and calls this method for each
    /// print management setting that is loaded. Override this method to modify parameters for each print
    /// setting.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// A print management object has not been initialized.
    /// </exception>
    protected void outputReport()
    {
        Object callerObj;
        String255 documentTitle;
        // <GEELT>
        String255 documentTitleSequel;
        // </GEELT>
        // <GEEHU>
        CustInvoiceJourPrint custInvoiceJourPrint;
        int copyNumber;
        SRSPrintDestinationSettings srsPrintDestinationSettings;
        // </GEEHU>
        SalesFormLetter_FreeText formLetterFreeText;
        PrintMgmtPrintSettingDetail detail = formLetterReport.getCurrentPrintSetting();

        if (detail.parmSSRS() == PrintMgmtSSRS::NonSSRS 
            && !FeatureStateProvider::isFeatureEnabled(FreeTextInvoiceERFormatUseRDPModelMappingEnableFeature::instance()))
        {
            // This method should be executed ONLY for SSRS reports or RDP-based ER reports.
            documentsInProcessCount = documentsInProcessCount ? documentsInProcessCount - 1 : documentsInProcessCount;
            return;
        }

        // <GTE><GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.initReportName_IN();
        }

        if (this.parmIsGSTInvoice_IN())
        {
            this.outputReport_IN();
            super();
            return;
        }
        // </GTE></GIN>

        callerObj = this.parmArgs().caller();

        // <GBR>
        if (!BrazilParameters::isEnabled())
        {
            // </GBR>
            contract.parmInstanceType(detail.parmType());
            contract.parmIdentificationText(detail.parmIdentificationText());
            if (contract.parmInstanceType() == PrintMgmtDocInstanceType::Copy)
            {
                printCopyOriginal = PrintCopyOriginal::Copy;
            }

            contract.parmPrintCopyOriginal(printCopyOriginal);
            documentTitle = this.documentTitle();
            // <GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                documentTitle = this.getDocumentTitleForLTU(documentTitle);
                // Adds "Sequel" word to the end of the invoice text to be shown on each page except the first one.
                documentTitleSequel = SysLabel::labelId2String(literalStr("@GLS221084"));
                contract.parmDocumentTitleSequel(documentTitleSequel);
            }
            // </GEELT>
            contract.parmDocumentTitle(documentTitle);
            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]) && !custInvoiceJour.isProforma())
            {
                srsPrintDestinationSettings = formLetterReport.getCurrentPrintSetting().parmPrintJobSettings();

                if (srsPrintDestinationSettings.printMediumType() == SRSPrintMediumType::Printer)
                {
                    custInvoiceJourPrint = CustInvoiceJourPrint::findFromCustInvoiceJour(custInvoiceJour.RecId);
                    copyNumber = CustInvoiceJourPrint::createInvoiceCopySequence(custInvoiceJour.RecId, printCopyOriginal);

                    if (printCopyOriginal == PrintCopyOriginal::Copy)
                    {
                        contract.parmInvoiceInstanceText(strFmt("%1 %2", int2str(copyNumber), SysLabel::labelId2String(literalStr("@GLS107722"), custInvoiceJour.LanguageId)));
                    }
                    else
                    {
                        if (custInvoiceJourPrint.HasOriginalBeenPrinted)
                        {
                            // Don't allow to print the original document more than once.
                            return;
                        }
                        contract.parmInvoiceInstanceText(strFmt("%1 %2", int2str(0), SysLabel::labelId2String(literalStr("@GLS107723"), custInvoiceJour.LanguageId)));
                    }
                }
                else
                {
                    contract.parmInvoiceInstanceText(strFmt("%1%2%3", SysLabel::labelId2String(literalStr("@GLS107724"), custInvoiceJour.LanguageId) , "\n", SysLabel::labelId2String(literalStr("@GLS107725"), custInvoiceJour.LanguageId)));
                }
            }
            // </GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
            {
                GiroPrintMgmtFormLetterControllerHelper_IS::updateInvoiceJourPrintedOriginal(this.custInvoiceJour, this.printCopyOriginal, detail);
            }

            // <GTH>
            if (   TaxThaiGovCertificationFeatureChecker::isSubstitutionAdjustmentEnabled()
                && !contract.parmMiscText()) // we are not in the process of 'document set' printing
            {
                CustInvoiceJourAdjustment::markInvoiceAsPrinted(custInvoiceJour.RecId, contract.parmAdjustmentRecId_TH());
            }
            // </GTH>
            // <GBR>
        }
        // </GBR>

        // Keeping track of how many documents have been printed to the screen. If it reaches #maxScreenOutput, then the remaining documents that are supposed to be printed to the screen will be printed to PDF files.
        formLetterFreeText = callerObj as SalesFormLetter_FreeText;
        if (formLetterFreeText)
        {
            if (reportContract.parmPrintSettings().printMediumType() == SRSPrintMediumType::Screen)
            {
                formLetterFreeText.parmScreenOutputCount(formLetterFreeText.parmScreenOutputCount() + 1);

                if (formLetterFreeText.parmForceToFile())
                {
                    reportContract.parmPrintSettings(PrintMgmtReportRun::changeDestination(formLetterReport.getPrintMgmtDocumentType(), detail, custInvoiceJour.InvoiceAccount, "", reportContract.parmPrintSettings()));
                }
                else if (formLetterFreeText.parmScreenOutputCount() > #maxScreenOutput)
                {
                    if (Box::okCancel(strFmt("@SYS344190", ""), DialogButton::Ok) == DialogButton::Cancel)
                    {
                        this.cancelRun();
                        throw info("@SYS344191");
                    }
                    formLetterFreeText.parmForceToFile(true);
                    reportContract.parmPrintSettings(PrintMgmtReportRun::changeDestination(formLetterReport.getPrintMgmtDocumentType(), detail, custInvoiceJour.InvoiceAccount, "", reportContract.parmPrintSettings()));
                }
            }
            else if (reportContract.parmPrintSettings().printMediumType() == SRSPrintMediumType::File)
            {
                reportContract.parmPrintSettings(PrintMgmtReportRun::changeDestination(formLetterReport.getPrintMgmtDocumentType(), detail, custInvoiceJour.InvoiceAccount, "", reportContract.parmPrintSettings()));
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected FreeTextInvoiceContract parmContract()
    {
        if (!contract)
        {
            contract = this.parmReportContract().parmRdpContract() as FreeTextInvoiceContract;
        }
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunOnBlockMode_TH</Name>
				<Source><![CDATA[
    private boolean parmRunOnBlockMode_TH(boolean _runOnBlockMode_TH = runOnBlockMode_TH)
    {
        runOnBlockMode_TH = _runOnBlockMode_TH;
        return runOnBlockMode_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        SalesFormLetterReport_FreeText salesFormLetterReport_FreeText = formLetterReport;
        // <GTH>
        TaxAgent taxAgent;
        // <GTH>
        FiscalEstablishment_BR fiscalEstablishment;

        // <GTE><GIN>
        if (this.parmIsGSTInvoice_IN())
        {
            this.preRunModifyContract_IN();
            super();
            return;
        }
        // </GTE></GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            fiscalDocumentContract = this.parmReportContract().parmRdpContract();

            select fiscalDocument
                where fiscalDocument.RefRecId == custInvoiceJour.RecId
                   && fiscalDocument.RefTableId == custInvoiceJour.TableId
                join EFDocPrePrintedSecurityForm, EFDocEnvironment from fiscalEstablishment
                where fiscalEstablishment.FiscalEstablishmentId == fiscalDocument.FiscalEstablishment;

            fiscalDocumentContract.parmRecordId(fiscalDocument.RecId);
            fiscalDocumentContract.parmPrePrintedSecurityForm(fiscalEstablishment.EFDocPrePrintedSecurityForm);
            fiscalDocumentContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);
            fiscalDocumentContract.parmProForma(custInvoiceJour.isProforma());

            if (fiscalDocument.isElectronic())
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
            }
            else
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxNFMemoLines * #MaxNFMemoDescriptionSize);
            }

            if (fiscalEstablishment.EFDocEnvironment == EFDocEnvironment_BR::Testing)
            {
                fiscalDocumentContract.parmEFDocEnvironment(true);
            }
            else
            {
                fiscalDocumentContract.parmEFDocEnvironment(false);
            }
        }
        else
        {
            // </GBR>
            this.parmContract();
            this.parmReportContract().parmRdlContract().parmLanguageId(custInvoiceJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(custInvoiceJour.LanguageId);

            if (custInvoiceJour.isProforma())
            {
                SRSTmpDataStore srsTmpDataStore;

                // Pack the class and insert into the temporary store, passing only the RecId via
                // the contract. This will be unpacked by the RDP class when it is time to process.
                srsTmpDataStore.Value = salesFormLetter.parmFormletterProformaPrintPacked();
                srsTmpDataStore.insert();

                contract.parmFormletterProformaPrintRecId(srsTmpDataStore.RecId);
            }

            contract.parmSalesFormLetterIsProforma(salesFormLetter && salesFormLetter.proforma());

            contract.parmCustInvoiceJourRecId(custInvoiceJour.RecId);
            contract.parmFormLetterTxt(salesFormLetterReport_FreeText.formLetterRemarks(custInvoiceJour).Txt);
            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                contract.parmCustInvoiceDuplicateRecId(this.parmDuplicateInvoiceRecId());
                contract.parmUserName(SysReportRun::userName());
            }
            // </GEEPL>

            // <GIS>
            contract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());
            // </GIS>

            // <GBR>
        }
        // </GBR>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            taxAgent = TaxAgent::find(custInvoiceJour.custInvoiceJourExtensionTH().TaxAgent);
            contract.parmIsUnrealizedVATEnabled(true);
            contract.parmAgentId(taxAgent.AgentId);
            contract.parmAgentName(taxAgent.name());
            contract.parmAgentAddress(taxAgent.address());
            contract.parmPrintCopyOriginal(printCopyOriginal);
            contract.parmIsTaxInvoice(custInvoiceJour.isRealizedVAT());
            contract.parmTaxBranchCode(TaxBranchType::getTBDisplayValueByDefaultDimension(custInvoiceJour.DefaultDimension));
            contract.parmTaxBranchName(TaxBranch::getReportTaxBranchStr(contract.parmTaxBranchCode()));
            contract.parmAdjustmentRecId_TH(CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(
                                                custInvoiceJour.RecId, 
                                                CustInvoiceJourAdjustment::getAdjustmentTypeFromArgs(this.parmArgs())).RecId);

            if (salesFormLetter && salesFormLetter.parmDocuSetCode())
            {
                contract.parmProdType(salesFormLetter.parmProdType());
                contract.parmPrintHeader(salesFormLetter.parmPrintHeader());
                contract.parmLocation(salesFormLetter.parmLocation());
                contract.parmMiscText(salesFormLetter.parmMiscText());
            }
        }
        // </GTH>

        CustParameters custParameters = CustParameters::find();

        if (!BrazilParameters::isEnabled())
        {
            contract.parmSuppressDepreciationOfPaymentSection(custParameters.SuppressDepreciationOfPaymentSection);
        }

        this.preRunModifyContractExtension(this, contract);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContractExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the contract modification before run.
    /// </summary>
    /// <param name = "_controller">The controller object.</param>
    /// <param name = "_contract">The contract object.</param>
    delegate void preRunModifyContractExtension(FreeTextInvoiceController _controller, FreeTextInvoiceContract _contract)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the print setting detail.
    /// </summary>
    /// <returns>The print setting detail.</returns>
    [Replaceable]
    protected PrintMgmtPrintSettingDetail printSettingDetail()
    {
        PrintMgmtPrintSettingDetail printSettingDetail;

        if (BrazilParameters::isEnabled()
            && formLetterReport.moveNextPrintSetting())
        {
            printSettingDetail = formLetterReport.getCurrentPrintSetting();

            if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat())
            {
                fiscalDocument = custInvoiceJour.fiscalDocument_BR();

                // Retrieves the appropiate SSRS Report name to show an invoice (FiscalDocument_BR, EFDocDANFE_BR, RPS_BR)
                this.parmReportName(fiscalDocument.getReportName());

                // Change the default report to Brazilian Format
                printSettingDetail.parmReportFormatName(this.parmReportName());
            }
            else
            {
                // Uses the SSRS Report name configured by user on Print Management
                this.parmReportName(printSettingDetail.parmReportFormatName());
            }

            this.resetReportDataContract();
        }

        return printSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        CustInvoiceTable custInvoiceTable;
        // <GSA>
        LanguageId originalLanguageId;
        // </GSA>
        LanguageId originalLanguageId_AE;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
        boolean printingError = false;


        if (!journalList || !journalList.first(custInvoiceJour))
        {
            throw error("@SYS26348");
        }

        do
        {
            try
            {
                if (custInvoiceJour.isProforma())
                {
                    // custInvoiceJour.InvoiceId is # + Recid so we must strip the leading #
                    select custInvoiceTable
                        where custInvoiceTable.RecId == this.invoiceId2RecID(custInvoiceJour.InvoiceId);
                }
                else
                {
                    select custInvoiceTable
                        where custInvoiceTable.InvoiceId == custInvoiceJour.InvoiceId &&
                                custInvoiceTable.InvoiceDate == custInvoiceJour.InvoiceDate &&
                                custInvoiceTable.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;
                }

                formLetterReport.loadPrintSettings(custInvoiceJour, custInvoiceTable, custInvoiceJour.LanguageId);

                // <GMY>
                if (custInvoiceJour.custInvoiceJour_W().InvoiceType_MY == InvoiceType_MY::GST
                    && !TaxGSTHelper_MY::getGSTRegistrationNumber(custInvoiceJour.InvoiceDate))
                {
                    throw error("@SYP4860820");
                }
                // </GMY>

                PrintMgmtPrintSettingDetail printSettingDetail = this.printSettingDetail();
                if (printSettingDetail)
                {
                    formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
                }
                else
                {
                    this.resetArchiveContractExecutionId();
                }

                // </GTE></GIN>
                this.outputReports();

                DocumentAttachment documentAttachment = DocumentAttachment::construct(PrintMgmtDocumentType::SalesFreeTextInvoice);
                documentAttachment.parmJournal(custInvoiceJour);
                documentAttachment.parmInnerReportDataContract(reportContract);
                documentAttachment.parmPrintCopyOriginal(formLetterReport.parmPrintType());
                documentAttachment.parmERContract(erDocumentAttachmentContract);
                documentAttachment.run();
                // <GSA>
                if (CustVendInvoiceJour::needToPrintInCompanyLanguage_SA(custInvoiceJour))
                {
                    originalLanguageId = custInvoiceJour.LanguageId;
                    CustVendInvoiceJour::setLanguage_SA(custInvoiceJour, CompanyInfo::languageId());
                }
                else
                if (originalLanguageId)
                {
                    if (! custInvoiceJour.Proforma)
                    {
                        CustVendInvoiceJour::setLanguage_SA(custInvoiceJour, originalLanguageId);
                    }
                    originalLanguageId = '';
                }
                // </GSA>

                if (CustVendInvoiceJour::needToPrintInCompanyLanguage_AE(custInvoiceJour))
                {
                    originalLanguageId_AE = custInvoiceJour.LanguageId;
                    CustVendInvoiceJour::setLanguage_AE(custInvoiceJour, CompanyInfo::languageId());

                    if (SalesInvoiceDPPrintCompanyLanguageInvoiceFlight_AE::instance().isEnabled())
                    {
                        this.setSourceInvoiceLanguage(custInvoiceTable, CompanyInfo::languageId());
                    }
                }
                else if (originalLanguageId_AE)
                {
                    CustVendInvoiceJour::setLanguage_AE(custInvoiceJour, originalLanguageId_AE);

                    if (SalesInvoiceDPPrintCompanyLanguageInvoiceFlight_AE::instance().isEnabled())
                    {
                        this.setSourceInvoiceLanguage(custInvoiceTable, originalLanguageId_AE);
                    }

                    originalLanguageId_AE = '';
                }
            }
            catch(errorException)
            {
                error(errorException.Message);
                printingError = true;
            }
        }
        while ((originalLanguageId
                || journalList.next(custInvoiceJour)
                || originalLanguageId_AE)
                && !this.parmCancelRun());

        if (printingError)
        {
            // Throw to report an error in print task, since we caught the exception above.  Due to
            // how the SrsReportRunController parent class handles exceptions in this method, this
            // error message will be stripped from the error log and replaced with a generic error
            // message
            throw error("@AccountsReceivable:BatchInvoicePrintingError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        //<GEEPL>
        #ISOCountryRegionCodes
        RecordSortedList journalList;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceDuplicateTable_W custInvoiceDuplicateTable;
        //</GEEPL>
        FreeTextInvoiceController controller = new FreeTextInvoiceController();
        // <GTE>
        Common common;
        // </GTE>

        if (!FeatureStateProvider::isFeatureEnabled(FreeTextInvoiceERFormatUseRDPModelMappingEnableFeature::instance()) &&
            !NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(
                 PrintMgmtDocumentType::SalesFreeTextInvoice,
                 _args))
        {
            return;
        }

        controller.originalArgs = _args;

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (_args.dataset() == tableNum(CustInvoiceDuplicateTable_W))
            {
                custInvoiceDuplicateTable = _args.record();
                _args.record(custInvoiceDuplicateTable.custInvoiceJour());
                controller.parmDuplicateInvoiceRecId(custInvoiceDuplicateTable.RecId);
            }

            switch (custInvoiceJour.custInvoiceJour_PL().FiscalDocState_PL)
            {
                case PlFiscalDocState::FiscalDocument:
                    try
                    {
                        PlFiscalPrinterHandling::generateFiscalDoc(custInvoiceJour);
                        return;
                    }
                    catch
                    {
                        // Allow execution to continue of PlFiscalPrinterHandling throws an error
                        return;
                    }
                case PlFiscalDocState::PrintedFiscalDocument:
                    info("@GLS110142");
                    return;
                default:
                    break;
            }
        }
        // </GEEPL>

        //<GMX>
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled()
         && EInvoiceFreeTextController_MX::hasEInvoice(_args))
        {
            EInvoiceFreeTextController_MX::main(_args);
            return;
        }
        //</GMX>

        journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();
        journalList.first(custInvoiceJour);

        // <GTH>
        if (!CustInvoiceJourExtensionTH::canInvoiceBePrinted(_args))
        {
            return;
        }

        // print document set
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled()
            && _args.parmEnum() != PrintCopyOriginal::OriginalPrint)
        {
            FreeTextInvoiceController::printDocumentSet(_args);
        }
        else
        {
            // </GTH>
            // <GTE><GIN>
            journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();
            journalList.first(custInvoiceJour);

            common = controller.getTaxDocumentSourceTable(custInvoiceJour);

            if (TaxGSTInvoiceHelper_IN::isGSTInvoice(common))
            {
                controller.parmIsGSTInvoice_IN(true);
                controller.parmCustInvoice_IN(common);
            }
            // </GTE></GIN>

            controller.parmReportName(controller.getReportName(common));
            controller.parmArgs(_args);
            controller.parmShowDialog(false);

            if (_args.parmObject()
                && _args.parmObject() is CustInvoiceControllerFileURLsCollectionIdProvider)
            {
                CustInvoiceControllerFileURLsCollectionIdProvider fileURLsCollectionIdProvider = _args.parmObject() as CustInvoiceControllerFileURLsCollectionIdProvider;
                controller.parmFileURLsCollectionId(fileURLsCollectionIdProvider.getFileURLsCollectionId());
            }

            controller.startOperation();
            // <GTH>
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns report name
    /// </summary>
    /// <param name = "common"><c>Common</c> record</param>
    /// <returns>Report name</returns>
    public SRSCatalogItemName getReportName(Common _common)
    {
        SRSCatalogItemName ret;
        PrintMgmtReportFormatDescription printMgmtReportFormatDescription = FreeTextInvoiceController::getReportFormatDescription(_common);

        if (TaxGSTInvoiceHelper_IN::isGSTInvoice(_common))
        {
            ret = ssrsReportStr(GSTInvoiceReport_IN, Report);
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            ret = ssrsReportStr(FreeTextInvoice, Report_AE);
        }
        else if (BrazilParameters::isEnabled())
        {
            ret = ssrsReportStr(EFDocDANFE_BR, Report);
        }
        else if (printMgmtReportFormatDescription)
        {
            ret = printMgmtReportFormatDescription;
        }
        else
        {
            ret = PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method prints document set.
    /// </summary>
    /// <param name="_args">
    ///     The given args.
    /// </param>
    public static void printDocumentSet(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00004, funcName());

        // <GTH>
        FreeTextInvoiceController controller = new FreeTextInvoiceController();
        SalesFormLetter salesFormLetter;
        TaxUnrealizedDocuSetLine docuSetLineLocal;
        TaxUnrealizedDocuSetTable docuSetTableLocal;
        SRSCatalogItemName reportName;
        boolean firstSet = true;
        SalesDocumentSetSelector docuSetSelector;
        TaxUnrealizedDocuId docuCode;
        boolean printDocuSet = true;

        reportName = ssrsReportStr(FreeTextInvoice, ReportTH);

        // true if print report in free text invoice posting, false if print report via free text invoice journal form.
        if (classIdGet(_args.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetter = _args.caller();
            docuCode = salesFormLetter.parmDocuSetCode();
        }
        else
        {
            docuSetSelector = new SalesDocumentSetSelector();
            printDocuSet = docuSetSelector.run();
            if (printDocuSet
                && docuSetSelector.getDocuCode())
            {
                docuCode = docuSetSelector.getDocuCode();
                salesFormLetter = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
                salesFormLetter.parmDocuSetCode(docuCode);
            }
        }

        if (printDocuSet)
        {
            controller.parmArgs(_args);
            controller.parmReportName(reportName);
            controller.parmShowDialog(false);
            controller.parmRunOnBlockMode_TH(true);
            controller.startOperation();
        }

        // true to print document set.
        if (docuCode)
        {
            while select PrintHeader from docuSetLineLocal
                order by docuSetLineLocal.RecId
                join ProdType, Location, MiscText from docuSetTableLocal
                    where docuSetLineLocal.TaxUnrealizedDocuSetTable == docuSetTableLocal.RecId
                        && docuSetTableLocal.Code == docuCode
            {
                if (firstSet)
                {
                    salesFormLetter.parmProdType(docuSetTableLocal.ProdType);
                    salesFormLetter.parmLocation(docuSetTableLocal.Location);
                    salesFormLetter.parmMiscText(docuSetTableLocal.MiscText);
                    firstSet = false;
                }
                salesFormLetter.parmPrintHeader(docuSetLineLocal.PrintHeader);
                _args.caller(salesFormLetter);
                controller = new FreeTextInvoiceController();
                controller.parmArgs(_args);
                controller.parmReportName(reportName);
                controller.parmShowDialog(false);
                controller.startOperation();
            }
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    /// The <c>outReports</c> method loops over print management settings and calls this method for each
    /// print management setting that is loaded. Override this method to modify parameters for each print
    /// setting.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// A print management object has not been initialized.
    /// </exception>
    protected void outputReport_IN()
    {
        Object    callerObj;
        FileName  filePath;

        SalesFormLetter_FreeText formLetterFreeText;
        TaxDocumentExtension_IN taxDocumentExtension;

        Common sourceTable = this.getTaxDocumentSourceTable(custInvoiceJour);
        TaxDocument taxDocument = TaxDocumentUtils::getTaxDocumentBySource(sourceTable.TableId, sourceTable.RecId);

        if (taxDocument)
        {
            taxDocumentExtension = TaxDocumentExtension_IN::findByTaxDocument(taxDocument.TaxDocumentGuid);
        }

        GSTInvoiceDPBase_IN gstInvoiceDPBaseImp = new TaxGSTFTIInvoiceDP_IN();;
        PrintMgmtPrintSettingDetail detail = formLetterReport.getCurrentPrintSetting();

        callerObj = this.parmArgs().caller();

        gstInvoiceContract.parmInstanceType(detail.parmType());
        gstInvoiceContract.parmIdentificationText(detail.parmIdentificationText());
        if (gstInvoiceContract.parmInstanceType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else if (gstInvoiceContract.parmInstanceType() == PrintMgmtDocInstanceType::Original)
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        gstInvoiceContract.parmPrintCopyOriginal(printCopyOriginal);
        gstInvoiceContract.parmDocumentTitle(gstInvoiceDPBaseImp.documentTitle(
            custInvoiceJour.isProforma(),
            taxDocumentExtension,
            printCopyOriginal,
            ModuleType_IN::AccountsReceivable));
        gstInvoiceContract.parmGSTInvoiceControllerName(classId2Name(classIdGet(this)));

        // Keeping track of how many documents have been printed to the screen. If it reaches #maxScreenOutput, then the remaining documents that are supposed to be printed to the screen will be printed to PDF files.
        formLetterFreeText = callerObj as SalesFormLetter_FreeText;
        if (formLetterFreeText)
        {
            if (reportContract.parmPrintSettings().printMediumType() == SRSPrintMediumType::Screen)
            {
                formLetterFreeText.parmScreenOutputCount(formLetterFreeText.parmScreenOutputCount() + 1);

                if (formLetterFreeText.parmForceToFile())
                {
                    reportContract.parmPrintSettings(PrintMgmtReportRun::changeDestination(formLetterReport.getPrintMgmtDocumentType(), detail, custInvoiceJour.InvoiceAccount, filePath, reportContract.parmPrintSettings()));
                }
                else if (formLetterFreeText.parmScreenOutputCount() > #maxScreenOutput)
                {
                    filePath = SysFileStoreParameters::find().FilePath;
                    if (!filePath)
                    {
                        filePath = System.IO.Path::GetTempPath();
                    }
                    if(!strEndsWith(filePath, #FilePathDelimiter))
                    {
                        filePath += #FilePathDelimiter;
                    }
                    if(Box::okCancel(strFmt("@SYS344190", filePath), DialogButton::Ok) == DialogButton::Cancel)
                    {
                        this.cancelRun();
                        throw info("@SYS344191");
                    }
                    formLetterFreeText.parmForceToFile(true);
                    reportContract.parmPrintSettings(PrintMgmtReportRun::changeDestination(formLetterReport.getPrintMgmtDocumentType(), detail, custInvoiceJour.InvoiceAccount, filePath, reportContract.parmPrintSettings()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoice_IN</Name>
				<Source><![CDATA[
    private Common parmCustInvoice_IN(Common _custInvoice = custInvoice)
    {
        // <GTE><GIN>
        custInvoice = _custInvoice;
        return custInvoice;
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGSTInvoice_IN</Name>
				<Source><![CDATA[
    private boolean parmIsGSTInvoice_IN(boolean _isGSTInvoice = isGSTInvoice)
    {
        // <GTE><GIN>
        isGSTInvoice = _isGSTInvoice;
        return isGSTInvoice;
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets TaxModuleType when print the CustInvoiceJour form.
    /// </summary>
    protected void prePromptModifyContract()
    {
        super();
        if (this.parmIsGSTInvoice_IN())
        {
            gstInvoiceContract = this.parmReportContract().parmRdpContract();
            gstInvoiceContract.parmGSTInvoiceControllerName(classId2Name(classIdGet(this)));
            gstInvoiceContract.parmPrintCopyOriginal(printCopyOriginal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract_IN()
    {
        LedgerJournalTrans ledgerJournalTrans;
        SalesFormLetterReport_FreeText salesFormLetterReport_FreeText = formLetterReport;

        gstInvoiceContract = this.parmReportContract().parmRdpContract();
        gstInvoiceContract.parmGSTInvoiceControllerName(classId2Name(classIdGet(this)));

        if (custInvoiceJour.isProforma())
        {
            gstInvoiceContract.parmFormletterProformaPrint(FormletterProformaPrint::newUnpack(salesFormLetter.parmFormletterProformaPrintPacked()));
        }

        gstInvoiceContract.parmSalesFormLetterIsProforma(salesFormLetter && salesFormLetter.proforma());

        if (gstInvoiceContract.parmRecordId())
        {
            gstInvoiceContract.parmRecordId(custInvoiceJour.RecId);
            gstInvoiceContract.parmTableId(tableNum(CustInvoiceJour));
        }
        else
        {
            if (custInvoice.RecId)
            {
                gstInvoiceContract.parmRecordId(custInvoice.RecId);
                gstInvoiceContract.parmTableId(custInvoice.TableId);
            }
            else
            {
                gstInvoiceContract.parmRecordId(custInvoiceJour.RecId);
                gstInvoiceContract.parmTableId(tableNum(CustInvoiceJour));
            }
        }

        // Process the AR invoice journal case
        select firstOnly RecId from ledgerJournalTrans
            where ledgerJournalTrans.Invoice    == custInvoiceJour.invoiceId
                && ledgerJournalTrans.Voucher   == custInvoiceJour.LedgerVoucher;

        gstInvoiceContract.parmledgerJournalTransRecordId(ledgerJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportName_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report name.
    /// </summary>
    protected void initReportName_IN()
    {
        PrintMgmtPrintSettingDetail printSettingDetail = formLetterReport.getCurrentPrintSetting();

        this.parmIsGSTInvoice_IN(TaxGSTInvoiceHelper_IN::isGSTInvoice(this.getTaxDocumentSourceTable(custInvoiceJour)));

        if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat())
        {
            if (this.parmIsGSTInvoice_IN())
            {
                this.parmReportName(ssrsReportStr(GSTInvoiceReport_IN, Report));
            }
            else
            {
                this.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
            }
            printSettingDetail.parmReportFormatName(this.parmReportName());
        }

        if (preReportName && preReportName != this.parmReportName())
        {
            this.resetReportDataContract();
        }
        preReportName = this.parmReportName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReportDataContract</Name>
				<Source><![CDATA[
    private void resetReportDataContract()
    {
        contractsInitialized = false;
        this.parmReportRun(null);
        this.parmReportContract(null);
        
        // <GTE><GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            gstInvoiceContract = null;
            contract = null;
            custInvoice = null;
        }
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupLocalizationReportName</Name>
				<Source><![CDATA[
    private PrintMgmtPrintSettingDetail setupLocalizationReportName(SRSCatalogItemName _reportName)
    {
        PrintMgmtPrintSettingDetail printSettingDetail = formLetterReport.getCurrentPrintSetting();

        if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat())
        {
            this.parmReportName(_reportName);
        }

        printSettingDetail.parmReportFormatName(this.parmReportName());

        return printSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentSourceTable</Name>
				<Source><![CDATA[
    private Common getTaxDocumentSourceTable(CustInvoiceJour _custInvoiceJour)
    {
        Common common;

        if (_custInvoiceJour.isProforma())
        {
            common = CustInvoiceTable::findSourceDocumentHeader(_custInvoiceJour.SourceDocumentHeader);
        }
        else
        {
            common = _custInvoiceJour;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetArchiveContractExecutionId</Name>
				<Source><![CDATA[
    private void resetArchiveContractExecutionId()
    {
        this.parmReportContract().parmPrintSettings().parmSRSPrintArchiveContract().parmExecutionID('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFormatDescription</Name>
				<Source><![CDATA[
    private static PrintMgmtReportFormatDescription getReportFormatDescription(Common _common)
    {
        PrintMgmtReportFormatDescription printMgmtReportFormatDescription;

        RecId printMgmtDocInstanceRecId = PrintMgmtDocInstance::getPrintMgmtDocRecId(
            0,
            0,
            PrintMgmtNodeType::Sales,
            PrintMgmtDocumentType::SalesFreeTextInvoice,
            PrintMgmtDocInstanceType::Original);

        if (printMgmtDocInstanceRecId)
        {
            PrintMgmtReportFormat printMgmtReportFormat;
            PrintMgmtSettings printMgmtSettings;

            select firstonly Description, SSRS from printMgmtReportFormat
                exists join printMgmtSettings
                    where printMgmtSettings.ReportFormat == printMgmtReportFormat.RecId
                    && printMgmtSettings.ParentId == printMgmtDocInstanceRecId;

            if (printMgmtReportFormat.SSRS == PrintMgmtSSRS::SSRS)
            {
                printMgmtReportFormatDescription = printMgmtReportFormat.Description;
            }
        }

        return printMgmtReportFormatDescription;

    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceInvoiceLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method sets a new language ID on the invoice header.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// A table buffer containing the invoice header.
    /// </param>
    /// <param name="_languageId">
    /// A new language ID of the invoice.
    /// </param>
    protected void setSourceInvoiceLanguage(CustInvoiceTable _custInvoiceTable, LanguageId _languageId)
    {
        if (_custInvoiceTable)
        {
            ttsbegin;

            _custInvoiceTable.selectForUpdate(true);
            _custInvoiceTable.LanguageId = _languageId;
            _custInvoiceTable.doUpdate();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>