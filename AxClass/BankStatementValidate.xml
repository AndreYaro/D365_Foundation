<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankStatementValidate</c> class is performing the validations of bank statement.
/// </summary>
class BankStatementValidate
{
    BankStmtISOAccountStatement statement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the validation.
    /// </summary>
    /// <returns>
    /// Returns true if validation is passed; Otherwise, returns false.
    /// </returns>
    protected boolean doValidate()
    {
        boolean ret = true;

        ttsbegin;
        ret = this.doValidateOnly();
        if (ret)
        {
            this.setValidatedStatus();
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs only the validation, no status update.
    /// </summary>
    /// <returns>
    /// Returns true if validation is passed; Otherwise, returns false.
    /// </returns>
    private boolean doValidateOnly()
    {
        boolean ret = true;

        ttsbegin;

        ret = this.validateBankAccount() && ret;
        ret = this.validateCurrency() && ret;
        ret = this.validateDate() && ret;

        if (this.canValidatePeriodOverlap())
        {
            ret = this.validatePeriodOverlap() && ret;
        }

        ret = this.validatePreviousStatementValidated() && ret;
        ret = this.validatePeriodGap() && ret;
        ret = this.validateNetAmount() && ret;
        ret = this.validateBalances() && ret;
        ret = this.validateTotalLines() && ret;
        ret = this.validateLine() && ret;

        if (ret)
        {
            // Statement passes validation.
            info("@GLS221334");
        }
        else
        {
            // Validation of statement is completed with errors.
            checkFailed("@GLS221335");
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canValidatePeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     To check whether we can call the <c>ValidatePeriodOverlap</c> method or not.
    /// </summary>
    /// <returns>
    ///     true if the <c>validatePeriodOverlap</c> method can be called; otherwise, false.
    /// </returns>
    protected boolean canValidatePeriodOverlap()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankStmtISOAccountStatement</Name>
				<Source><![CDATA[
    private BankStmtISOAccountStatement parmBankStmtISOAccountStatement(BankStmtISOAccountStatement _statement = statement)
    {
        statement = _statement;
        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountCurrency</Name>
				<Source><![CDATA[
    private void setAccountCurrency()
    {
        ttsbegin;
        statement.selectForUpdate(true);
        statement.AccountCurrency = Currency::find(statement.getBankAccountTable().CurrencyCode).CurrencyCodeISO;
        statement.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets net amount for bank statement.
    /// </summary>
    /// <param name="_amount">
    ///     The bank statement amount.
    /// </param>
    /// <remarks>
    ///     This method is only called when net amount is not input and will be set as the calculating amount.
    /// </remarks>
    private void setNetAmount(BankStatementNetAmount _amount)
    {
        BankStmtISOCashBalance cashBalance;

        cashBalance = BankStmtISOCashBalance::findByStatementAndBalanceType(
            statement.RecId,
            BankStatementBalanceType::NetAmount,
            true);

        ttsbegin;

        cashBalance.editNetAmount(true, _amount);
        cashBalance.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the total lines for bank statement.
    /// </summary>
    /// <returns>
    ///     Total lines.
    /// </returns>
    /// <remarks>
    ///     This method is only called when total lines is not input and will be set as the calculating amount.
    /// </remarks>
    private NumberOfRecords setTotalLines()
    {
        NumberOfRecords totalLines = statement.calcTotalLines();

        ttsbegin;
        statement.selectForUpdate(true);
        statement.TotalEntriesNumberOfEntries = any2int(totalLines);
        statement.update();
        ttscommit;

        return totalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidatedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the status of bank statement to <c>BankStatementStatus::Validated</c>.
    /// </summary>
    private void setValidatedStatus()
    {
        ttsbegin;
        statement.selectForUpdate(true);
        statement.ValidatedBy = curUserId();
        statement.ValidatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        statement.updateStatus(BankStatementStatus::Validated);
        statement.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the bank account is filled in.
    /// </summary>
    /// <returns>
    ///     Returns true if bank account is filled in. Otherwise, returns false.
    /// </returns>
    private boolean validateBankAccount()
    {
        boolean ret = true;

        if (!statement.BankAccountTable)
        {
            // Bank account must not be empty.
            ret = checkFailed("@GLS221259");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the bank statement currency is consistent with the setting in bank table.
    /// </summary>
    /// <returns>
    ///     Returns true if bank statement currency is consistent with the setting in bank table.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean validateCurrency()
    {
        boolean ret = true;

        if (statement.AccountCurrency
            && statement.AccountCurrency != Currency::find(statement.getBankAccountTable().CurrencyCode).CurrencyCodeISO)
        {
            // Bank statement currency is not consistent with bank currency.
            ret = checkFailed("@GLS221270");
        }

        if (!statement.AccountCurrency)
        {
            this.setAccountCurrency();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the From date and To date are correct.
    /// </summary>
    /// <returns>
    ///     Returns false if:
    ///     1) From date or To date is not filled in.
    ///     2) From date is later than To date.
    ///     3) From date is later than minimum date of statement lines.
    ///     4) To date is earlier than maximum date of statement lines.
    ///     Otherwise, returns true.
    /// </returns>
    private boolean validateDate()
    {
        boolean isValid = true;

        if (this.isStatementFromOrToDateEmpty())
        {
            // From date and To date must not be empty.
            isValid = checkFailed("@GLS221281");
        }

        // validate date only if tranasaction line are available
        if (this.shouldValidateDateForMinMaxBooking())
        {
            isValid = isValid && this.validateDateForMinMaxBooking();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatementFromOrToDateEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the statement from date or to date is empty.
    /// </summary>
    /// <returns>
    ///     true if the any of the dates are empty; otherwise, false.
    /// </returns>
    protected boolean isStatementFromOrToDateEmpty()
    {
        boolean isStatementFromOrToDateEmpty;

        if (statement.FromDateTime == utcDateTimeNull()
            || statement.ToDateTime == utcDateTimeNull())
        {
            isStatementFromOrToDateEmpty = true;
        }

        return isStatementFromOrToDateEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidateDateForMinMaxBooking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if validation for min and max booking date time should occur.
    /// </summary>
    /// <returns>
    ///     true if validation should occur; otherwise, false.
    /// </returns>
    protected boolean shouldValidateDateForMinMaxBooking()
    {
        return statement.calcTotalLines() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateForMinMaxBooking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates date for min and max booking date.
    /// </summary>
    /// <returns>
    ///     A boolean value indicating whether the statement dates are valid in relation to min and max booking dates.
    /// </returns>
    private boolean validateDateForMinMaxBooking()
    {
        boolean isValid = true;
        
        BankStatementBookingDate minBookingDateTime = statement.dispMinBookingDateTime();
        BankStatementBookingDate maxBookingDateTime = statement.dispMaxBookingDateTime();

        if (minBookingDateTime > maxBookingDateTime)
        {
            // From date must not be later than To date.
            isValid = checkFailed("@GLS221292");
        }

        if (statement.FromDateTime > minBookingDateTime)
        {
            // From date %1 is not aligned with the minimum date %2 of statement lines.
            isValid = checkFailed(this.getValidateDateStatementDateMsg("@GLS221303",
                DateTimeUtil::applyTimeZoneOffset(statement.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                DateTimeUtil::applyTimeZoneOffset(minBookingDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (statement.ToDateTime < maxBookingDateTime)
        {
            // To date %1 is not aligned with the maximum date %2 of statement lines.
            isValid = checkFailed(this.getValidateDateStatementDateMsg("@GLS221314",
                DateTimeUtil::applyTimeZoneOffset(statement.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                DateTimeUtil::applyTimeZoneOffset(maxBookingDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidateDateStatementDateMsg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generate the validate message.
    /// </summary>
    /// <param name = "_label">
    ///     The label which contain the message to display.
    /// </param>
    /// <param name = "_toFromDate">
    ///     Bank statement ISO date time.
    /// </param>
    /// <param name = "_minMaxBookingDateTime">
    ///     Minimum or maximum booking date with time.
    /// </param>
    /// <returns>
    ///     The validate message which is constructed based on the parameter values.
    /// </returns>
    protected str getValidateDateStatementDateMsg(str _label, BankStmtISODateTime _toFromDate, BankStatementBookingDate _minMaxBookingDateTime)
    {
        return strFmt(_label, _toFromDate, _minMaxBookingDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates opening and closing balances depending on the format type of the import.
    /// </summary>
    /// <returns>
    /// True if both opening and closing balances validate.
    /// </returns>
    private boolean validateBalances()
    {
        boolean ret = true;
        boolean validateBalances = true;

        BankStmtISODocument bankStmtISODocument = BankStmtISODocument::find(statement.BankStmtISODocument);

        switch (bankStmtISODocument.FormatName)
        {
            case "@CashManagement:BankReconciliationFormatNameBAI":
                validateBalances = !this.areOpeningAndClosingBalancesBothZero();
                break;
        }

        if (validateBalances)
        {
            ret = this.validateOpeningBalance();
            ret = ret && this.validateEndingBalance();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areOpeningAndClosingBalancesBothZero</Name>
				<Source><![CDATA[
    private boolean areOpeningAndClosingBalancesBothZero()
    {
        boolean areOpeningAndClosingBalancesBothZero = false;

        BankStatementOpeningBalance openingBalance = statement.getOpeningBalance();
        BankStatementEndingBalance endingBalance = statement.getEndingBalance();

        if (openingBalance == 0.0 && endingBalance == 0.0)
        {
            areOpeningAndClosingBalancesBothZero = true;
        }

        return areOpeningAndClosingBalancesBothZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEndingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether calculated ending balance equals to the input one.
    /// </summary>
    /// <returns>
    ///     Returns true if calculated ending balance equals to the input one.
    ///     Otherwise, returns false.
    /// </returns>
    /// <remarks>
    ///     To ensure the net amount is correct, this method should be called after validateNetAmount method.
    ///     Calculated ending balance = Opening balance + Net amount.
    /// </remarks>
    private boolean validateEndingBalance()
    {
        boolean ret = true;

        BankStatementEndingBalance calcEndingBalance = statement.dispOpeningBalance() + statement.dispNetAmount();
        BankStatementEndingBalance endingBalance = statement.dispEndingBalance();

        if (calcEndingBalance != endingBalance)
        {
            // Ending balance %1 does not equal the calculated balance %2 from statement lines.
            ret = checkFailed(strFmt("@GLS221325",
                endingBalance,
                calcEndingBalance));
        }

        ret = ret && this.validateEndingBalanceWithFollowingStatementOpeningBalance();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEndingBalanceWithFollowingStatementOpeningBalance</Name>
				<Source><![CDATA[
    private boolean validateEndingBalanceWithFollowingStatementOpeningBalance()
    {
        BankStmtISOAccountStatement followingStatement;

        // If current statement has sequence number (import via MT940), find the following statement with the minimum sequence number (but larger than current statement) with the same Identification
        if (statement.SequenceNumber != '')
        {
            int64 targetSequenceNumber = str2Int64(statement.SequenceNumber);
            BankStmtISOAccountStatement statementWithSequenceNumber;
            boolean getFirstSequenceNumber = false;
            while select ToDateTime, Identification, SequenceNumber, Status, RecId from statementWithSequenceNumber
                where statementWithSequenceNumber.BankAccountTable == statement.BankAccountTable
                    && statementWithSequenceNumber.BankStatementType == BankStatementType::Reconciliation
                    && statementWithSequenceNumber.ToDateTime == statement.ToDateTime
                    && statementWithSequenceNumber.Identification == statement.Identification
                    && statementWithSequenceNumber.RecId != statement.RecId
            {
                int64 sequenceNumber = str2Int64(statementWithSequenceNumber.SequenceNumber);
                if (sequenceNumber > targetSequenceNumber)
                {
                    if (!getFirstSequenceNumber)
                    {
                        getFirstSequenceNumber = true;
                        followingStatement.data(statementWithSequenceNumber.data());
                    }
                    else if (sequenceNumber < str2Int64(followingStatement.SequenceNumber))
                    {
                        followingStatement.data(statementWithSequenceNumber.data());
                    }
                }
            }
        }

        // If the statement doens't have sequence number or it is the maximum sequence number in the same Identification, find the following statement in the following period
        if (followingStatement.RecId == 0)
        {
            select firstonly count(RecId), ToDateTime from followingStatement
                group by ToDateTime
                order by ToDateTime
                where followingStatement.BankAccountTable == statement.BankAccountTable
                    && followingStatement.BankStatementType == BankStatementType::Reconciliation
                    && followingStatement.ToDateTime > statement.ToDateTime;
            if (followingStatement.RecId > 1)
            {
                // If it exists serveral statments for following period with different sequence number, find the following statement with the minimum sequence number in the following period
                BankStmtISOAccountStatement statementWithSequenceNumber;
                boolean getFirstSequenceNumber = false;
                while select ToDateTime, Identification, SequenceNumber, Status, RecId from statementWithSequenceNumber
                    where statementWithSequenceNumber.BankAccountTable == statement.BankAccountTable
                        && statementWithSequenceNumber.BankStatementType == BankStatementType::Reconciliation
                        && statementWithSequenceNumber.ToDateTime == followingStatement.ToDateTime
                        && statementWithSequenceNumber.RecId != statement.RecId
                {
                    if (!getFirstSequenceNumber)
                    {
                        getFirstSequenceNumber = true;
                        followingStatement.data(statementWithSequenceNumber.data());
                    }
                    else if (str2Int64(statementWithSequenceNumber.SequenceNumber) < str2Int64(followingStatement.SequenceNumber))
                    {
                        followingStatement.data(statementWithSequenceNumber.data());
                    }
                }
            }
            else
            {
                // Otherwise, find the first only statement in the following period
                select firstonly ToDateTime, Identification, Status, RecId from followingStatement
                    order by ToDateTime
                    where followingStatement.BankAccountTable == statement.BankAccountTable
                        && followingStatement.BankStatementType == BankStatementType::Reconciliation
                        && followingStatement.ToDateTime > statement.ToDateTime;
            }
        }

        // Only validate ending balance with following statement's opening balance when following statement's status is not open
        if (followingStatement.RecId != 0 && followingStatement.Status != BankStatementStatus::Open)
        {
            BankStatementOpeningBalance openingBalance = followingStatement.dispOpeningBalance();
            BankStatementEndingBalance endingBalance = statement.dispEndingBalance();

            if (openingBalance != endingBalance)
            {
                // The ending balance %1 does not equal to the opening balance %2 of following statement %3.
                return checkFailed(strFmt("@Bank:EndingBalanceValidationErrorMessage",
                    endingBalance,
                    openingBalance,
                    followingStatement.Identification));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the booking date of all statement lines are filled in.
    /// </summary>
    /// <returns>
    ///     Returns true if the booking date of all statement lines are filled in.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean validateLine()
    {
        BankStmtISOReportEntry reportEntry;
        boolean ret = true;

        select firstonly RecId from reportEntry
            where reportEntry.BankStmtISOAccountStatement == statement.RecId
                && (reportEntry.BookingDateTime == DateTimeUtil::minvalue());
        if (reportEntry.RecId != 0)
        {
            // Booking date of statement line must be filled in.
            ret = checkFailed("@CashManagement:ValidationOfBookingDateInStatementLine");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether net amount equals to the input one.
    /// </summary>
    /// <returns>
    ///     Returns true if calculated net amount equals to the input one.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean validateNetAmount()
    {
        boolean ret = true;

        BankStatementNetAmount netAmount = statement.dispNetAmount();
        BankStatementNetAmount calcNetAmount = statement.calcNetAmount();
        if (netAmount == 0)
        {
            this.setNetAmount(calcNetAmount);
            netAmount = calcNetAmount;
        }

        if (netAmount != calcNetAmount)
        {
            // Net amount %1 does not equal the sum amount %2 of statement lines.
            ret = checkFailed(strFmt("@GLS221328",
                netAmount,
                calcNetAmount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether opening balance equals to the ending balance of previous statement.
    /// </summary>
    /// <returns>
    ///     Returns true if opening balance equals to the ending balance of previous statement.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean validateOpeningBalance()
    {
        boolean ret = true;

        BankStmtISOAccountStatement statementLocal;

        if (statement.SequenceNumber != '')
        {
            int64 targetSequenceNumber = str2Int64(statement.SequenceNumber);
            BankStmtISOAccountStatement statementWithSequenceNumber;
            while select ToDateTime, Identification, SequenceNumber from statementWithSequenceNumber
                where statementWithSequenceNumber.BankAccountTable == statement.BankAccountTable
                    && statementWithSequenceNumber.BankStatementType == BankStatementType::Reconciliation
                    && statementWithSequenceNumber.ToDateTime == statement.ToDateTime
                    && statementWithSequenceNumber.Identification == statement.Identification
                    && statementWithSequenceNumber.RecId != statement.RecId
            {
                int64 sequenceNumber = str2Int64(statementWithSequenceNumber.SequenceNumber);
                if (sequenceNumber < targetSequenceNumber)
                {
                    if (sequenceNumber > str2Int64(statementLocal.SequenceNumber))
                    {
                        statementLocal.data(statementWithSequenceNumber.data());
                    }
                }
            }
        }

        if (statementLocal.RecId == 0)
        {
            select firstonly count(RecId), ToDateTime from statementLocal
                group by ToDateTime
                order by ToDateTime desc
                where statementLocal.BankAccountTable == statement.BankAccountTable
                    && statementLocal.BankStatementType == BankStatementType::Reconciliation
                    && statementLocal.ToDateTime < statement.ToDateTime
                    && statementLocal.RecId != statement.RecId;
            if (statementLocal.RecId > 1)
            {
                BankStmtISOAccountStatement statementWithSequenceNumber;
                while select ToDateTime, Identification, SequenceNumber from statementWithSequenceNumber
                    where statementWithSequenceNumber.BankAccountTable == statement.BankAccountTable
                        && statementWithSequenceNumber.BankStatementType == BankStatementType::Reconciliation
                        && statementWithSequenceNumber.ToDateTime == statementLocal.ToDateTime
                        && statementWithSequenceNumber.RecId != statement.RecId
                {
                    int64 sequenceNumber = str2Int64(statementWithSequenceNumber.SequenceNumber);
                    if (sequenceNumber > str2Int64(statementLocal.SequenceNumber))
                    {
                        statementLocal.data(statementWithSequenceNumber.data());
                    }
                }
            }
            else
            {
                select firstonly ToDateTime, Identification from statementLocal
                    order by ToDateTime desc
                    where statementLocal.BankAccountTable == statement.BankAccountTable
                        && statementLocal.BankStatementType == BankStatementType::Reconciliation
                        && statementLocal.ToDateTime < statement.ToDateTime
                        && statementLocal.RecId != statement.RecId;
            }
        }

        if (statementLocal.RecId != 0)
        {
            BankStatementOpeningBalance openingBalance = statement.dispOpeningBalance();
            BankStatementEndingBalance endingBalance = statementLocal.dispEndingBalance();

            if (openingBalance != endingBalance)
            {
                warning(strFmt("@GLS221329",
                    openingBalance,
                    endingBalance,
                    statementLocal.Identification));

                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreviousStatementValidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the previous statement has been validated.
    /// </summary>
    /// <returns>
    ///     Returns true if the previous statement has been validated.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean validatePreviousStatementValidated()
    {
        boolean ret = true;

        BankStmtISOAccountStatement statementLocal;

        select firstonly Identification, Status from statementLocal
            order by ToDateTime desc
            where statementLocal.BankAccountTable == statement.BankAccountTable
                && statementLocal.BankStatementType == BankStatementType::Reconciliation
                && statementLocal.ToDateTime < statement.ToDateTime;

        if (statementLocal.RecId != 0 && statementLocal.Status == BankStatementStatus::Open)
        {
            warning(strFmt("@CashManagement:BankStatementPreviousOpenNotAllowValidate", statement.Identification, statementLocal.Identification));

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodGap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether there is a gap of period without bank statement.
    /// </summary>
    /// <returns>
    ///     Returns true if there is a gap of period without bank statement.
    ///     Otherwise, returns false.
    /// </returns>
    /// <remarks>
    ///     Validation can be passed even with period gap, so this method always returns true.
    /// </remarks>
    private boolean validatePeriodGap()
    {
        BankStmtISOAccountStatement statementLocal;

        select firstonly ToDateTime from statementLocal
            order by ToDateTime desc
            where statementLocal.BankAccountTable   == statement.BankAccountTable
                && statementLocal.BankStatementType == BankStatementType::Reconciliation
                && statementLocal.ToDateTime < statement.FromDateTime
                && statementLocal.RecId != statement.RecId;

        if (statementLocal.RecId == 0
            || (statementLocal.RecId != 0
                && DateTimeUtil::date(statement.FromDateTime) - DateTimeUtil::date(statementLocal.ToDateTime) > 1))
        {
            // There is no bank statement from %1 to %2.
            info(this.getValidatePeriodGapMsg(
                DateTimeUtil::applyTimeZoneOffset(statementLocal.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                DateTimeUtil::applyTimeZoneOffset(statement.FromDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidatePeriodGapMsg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generate the validate message for period gap.
    /// </summary>
    /// <param name = "_toDateTime">
    ///     Bank statement starting date.
    /// </param>
    /// <param name = "_fromDateTime">
    ///     Bank statement ending date.
    /// </param>
    /// <returns>
    ///     The validate message constructed based on the parameter values.
    /// </returns>
    protected str getValidatePeriodGapMsg(BankStmtISODateTime _toDateTime, BankStmtISODateTime _fromDateTime)
    {
        return strFmt("@GLS221330", _toDateTime, _fromDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether statement period is overlapped.
    /// </summary>
    /// <returns>
    ///     Returns true if the time period for existing statements does not overlap into the time period
    ///     for the new statement. Otherwise, returns false.
    /// </returns>
    private boolean validatePeriodOverlap()
    {
        BankStmtISOAccountStatement existingStatement;
        boolean isValid = true;

        // Checks no overlop between different statement Id.
        // 1. Checks if any record exists that the FromDateTime is earlier than the current ToDateTime, the ToDateTime is later than current FromDateTime.
        // 2. Checks if any record exists that the ToDateTime is equal to the current ToDateTime. The To date can only overlap the From date from the following statement.
        select firstonly existingStatement
            where existingStatement.BankAccountTable == statement.BankAccountTable
                && existingStatement.BankStatementType == BankStatementType::Reconciliation
                && existingStatement.RecId != statement.RecId
                && (existingStatement.Identification != statement.Identification
                    || (BankStmtPeriodOverlapValidateBetweenSequenceNumberFlight::instance().isEnabled())
                        && existingStatement.SequenceNumber == statement.SequenceNumber)
                && ((existingStatement.FromDateTime < statement.ToDateTime
                        && existingStatement.ToDateTime > statement.FromDateTime)
                    || (existingStatement.ToDateTime == statement.ToDateTime));

        if (existingStatement.RecId != 0)
        {
            isValid = this.checkFailedPeriodOverlapError(statement, existingStatement);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFailedPeriodOverlapError</Name>
				<Source><![CDATA[
    private boolean checkFailedPeriodOverlapError(BankStmtISOAccountStatement _statement, BankStmtISOAccountStatement _existingStatement)
    {
        if (_existingStatement.ToDateTime == _statement.ToDateTime)
        {
            checkFailed(strFmt("@Bank:BankStatementValidationPeriodToDateOverlap",
                _statement.Identification,
                _existingStatement.Identification));
        }
        else
        {
            checkFailed(this.getValidatePeriodOverlapMsg(
                DateTimeUtil::applyTimeZoneOffset(_statement.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                DateTimeUtil::applyTimeZoneOffset(_statement.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                _existingStatement.Identification));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidatePeriodOverlapMsg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generate validate message for period overlap.
    /// </summary>
    /// <param name = "_fromDateTime">
    ///     Bank statement starting date and time.
    /// </param>
    /// <param name = "_toDateTime">
    ///     Bank statement ending date and time.
    /// </param>
    /// <param name = "_identification">
    ///     The statement ID.
    /// </param>
    /// <returns>
    ///     The validate message constructed based on the parameter values.
    /// </returns>
    protected str getValidatePeriodOverlapMsg(BankStmtISODateTime _fromDateTime, BankStmtISODateTime _toDateTime, BankStatementId _identification)
    {
        return strFmt("@GLS221331", _fromDateTime, _toDateTime, _identification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTotalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether calculated total lines equals to the input one.
    /// </summary>
    /// <returns>
    ///     Returns true if calculated total lines equals to the input one.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean validateTotalLines()
    {
        boolean ret = true;
        NumberOfRecords totalLines;

        if (statement.TotalEntriesNumberOfEntries == 0)
        {
            totalLines = this.setTotalLines();
        }

        totalLines = statement.calcTotalLines();

        if (statement.TotalEntriesNumberOfEntries != any2int(totalLines))
        {
            // Number of entries %1 does not equal the count of %2 from statement lines.
            ret = checkFailed(strFmt("@GLS221333",
                statement.TotalEntriesNumberOfEntries,
                totalLines));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the instance of <c>BankStatementValidate</c> based on a given
    ///     <c>BankReconciliationStatementType</c> instance.
    /// </summary>
    /// <param name="_statement">
    ///     The given <c>BankStmtISOAccountStatement</c> buffer.
    /// </param>
    /// <returns>
    ///     The constructed <c>BankStatementValidate</c> instance.
    /// </returns>
    private static BankStatementValidate construct(BankStmtISOAccountStatement _statement)
    {
        BankStatementValidate statementValidate;

        statementValidate = new BankStatementValidate();
        statementValidate.parmBankStmtISOAccountStatement(_statement);

        return statementValidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes all validations.
    /// </summary>
    /// <param name="_statementRecid">
    ///     The record id of validating statement.
    /// </param>
    /// <returns>
    /// Returns true if validation is passed; Otherwise, returns false.
    /// </returns>
    public static boolean processValidate(RefRecId _statementRecid)
    {
        BankStmtISOAccountStatement statement;

        statement = BankStmtISOAccountStatement::find(_statementRecid);
        if (statement.RecId == 0)
        {
            throw error(Error::missingRecord(funcName()));
        }

        BankStatementValidate statementValidate = BankStatementValidate::construct(statement);

        return statementValidate.doValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processValidateOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all validations but not updates statement status.
    /// </summary>
    /// <param name="_statementRecid">
    /// The record id of validating statement.
    /// </param>
    /// <returns>
    /// Returns true if validation is passed; Otherwise, returns false.
    /// </returns>
    internal static boolean processValidateOnly(RefRecId _statementRecid)
    {
        BankStmtISOAccountStatement statement;

        statement = BankStmtISOAccountStatement::find(_statementRecid);
        if (statement.RecId == 0)
        {
            throw error(Error::missingRecord(funcName()));
        }

        BankStatementValidate statementValidate = BankStatementValidate::construct(statement);

        return statementValidate.doValidateOnly();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>