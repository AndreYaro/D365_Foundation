<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPerformanceByCategoryDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPerformanceByCategoryDataProvider</c> class is the data provider
/// class for performance by category report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailPerformanceByCategoryDataProvider extends RetailSrsReportDataProviderBase
{
    RetailPerformanceByCategoryTmp t;
    RetailPerformanceByCategoryTmp tmp;
    RetailReportParametersDataContract dc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SSRS framework to bring back data. It gets called after processReport.
    /// </summary>
    /// <returns>The table buffer</returns>
    [SRSReportDataSetAttribute(tableStr(RetailPerformanceByCategoryTmp))]
    public RetailPerformanceByCategoryTmp getTable()
    {
        select * from t;
        return t;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to
    ///    SSRS.Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        dc = this.parmDataContract();

        this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());

        Query q = this.buildQuery();
        QueryRun qr = new QueryRun(q);

        // run query and insert query results into temp table buffer
        while (qr.next())
        {
            CustInvoiceTrans t1 = qr.get(tableNum(CustInvoiceTrans));
            InventTransGrouped t2 = qr.get(tableNum(InventTransGrouped));
            EcoResProductCategoryExpanded t3 = qr.get(tableNum(EcoResProductCategoryExpanded));
            tmp.clear();
            tmp.SalesAmount = t1.LineAmountMST;
            tmp.SalesQuantity = t1.Qty;
            tmp.COGS = t2.COGS;
            tmp.GrossProfitMargin = t1.LineAmountMST - t2.COGS;
            tmp.CategoryID = t3.RecIdCategory;
            tmp.insert();
        }

        // left outer join 'all the category' with 'category that has sales data'
        // this will ensure a complete view of all the hierarchies.
        // then insert into the temp buffer that will be used to display on report.
        RetailCategoryExpanded category;
        while select * from category outer join tmp where tmp.CategoryID == category.RecId
        {
            t.clear();
            t.SalesAmount = tmp.SalesAmount;
            t.SalesQuantity = tmp.SalesQuantity;
            t.GrossProfitMargin = tmp.GrossProfitMargin;
            t.COGS = tmp.COGS;
            t.CategoryID = category.RecId;
            t.ParentCategoryID = category.ParentCategory;
            t.CategoryName = category.Name;
            t.insert();
        }

        this.ClearChannelFilterTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build AX query based on date range and channel.
    /// </summary>
    private Query buildQuery()
    {
        Query q = new Query();

        QueryBuildDataSource t1 = q.addDataSource(tableNum(CustInvoiceTrans));

        QueryBuildDataSource t2 = t1.addDataSource(tableNum(CustInvoiceJour));
        t2.fetchMode(QueryFetchMode::One2One);
        t2.joinMode(JoinMode::InnerJoin);
        t2.relations(true);
        t2.addLink(fieldNum(CustInvoiceTrans, SalesId), fieldNum(CustInvoiceJour, SalesId));
        t2.addLink(fieldNum(CustInvoiceTrans, InvoiceId), fieldNum(CustInvoiceJour, InvoiceId));
        t2.addLink(fieldNum(CustInvoiceTrans, InvoiceDate), fieldNum(CustInvoiceJour, InvoiceDate));
        t2.addLink(fieldNum(CustInvoiceTrans, numberSequenceGroup), fieldNum(CustInvoiceJour, numberSequenceGroup));

        QueryBuildDataSource t3 = t2.addDataSource(tableNum(RetailCustInvoiceJourTable));
        t3.fetchMode(QueryFetchMode::One2One);
        t3.joinMode(JoinMode::InnerJoin);
        t3.relations(false);
        t3.addLink(fieldNum(CustInvoiceJour, RecId), fieldNum(RetailCustInvoiceJourTable, CustInvoiceJour));

        QueryBuildDataSource t4 = t1.addDataSource(tableNum(InventTransOrigin));
        t4.fetchMode(QueryFetchMode::One2One);
        t4.joinMode(JoinMode::OuterJoin);
        t4.relations(true);
        t4.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        QueryBuildDataSource t5 = t4.addDataSource(tableNum(InventTransGrouped));
        t5.fetchMode(QueryFetchMode::One2One);
        t5.joinMode(JoinMode::OuterJoin);
        t5.relations(false);
        t5.addLink(fieldNum(CustInvoiceTrans, InvoiceId), fieldNum(InventTransGrouped, InvoiceId), t1.name());
        t5.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransGrouped, InventTransOrigin));

        QueryBuildDataSource t6 = t1.addDataSource(tableNum(EcoResProductCategoryExpanded));
        t6.fetchMode(QueryFetchMode::One2One);
        t6.joinMode(JoinMode::OuterJoin);
        t6.relations(false);
        t6.addLink(fieldNum(CustInvoiceTrans, ItemId), fieldNum(EcoResProductCategoryExpanded, ItemId));
        t6.addRange(fieldNum(EcoResProductCategoryExpanded, NamedCategoryHierarchyRole)).value(queryValue(EcoResCategoryNamedHierarchyRole::Retail));

        t1.addSelectionField(fieldNum(CustInvoiceTrans, LineAmountMST), SelectionField::Sum);
        t1.addSelectionField(fieldNum(CustInvoiceTrans, LineAmountTaxMST), SelectionField::Sum);
        t1.addSelectionField(fieldNum(CustInvoiceTrans, Qty), SelectionField::Sum);
        t5.addSelectionField(fieldNum(InventTransGrouped, COGS), SelectionField::Sum);
        t6.addSelectionField(fieldNum(EcoResProductCategoryExpanded, RecIdCategory));

        t6.addGroupByField(fieldNum(EcoResProductCategoryExpanded, RecIdCategory));

        t1.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(CustInvoiceTrans, InvoiceDate)));

        //Add join with RetailReportChannelTable.
        this.JoinChannelFilter(t3, fieldNum(RetailCustInvoiceJourTable, RetailChannel));

        return q;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>