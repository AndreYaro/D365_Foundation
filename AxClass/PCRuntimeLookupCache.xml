<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeLookupCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCRuntimeLookupCache</c> class holds a reference to an in memory table buffer for reuse.
/// </summary>
class PCRuntimeLookupCache
{
    Common tmpData;
    // The number of values (rows) in the tmp table.
    // It is much faster to save the row count than counting the number of rows for large domains.
    int    rowCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRowCount</Name>
				<Source><![CDATA[
        public int parmRowCount(int _rowCount = rowCount)
    {
        rowCount = _rowCount;

        return rowCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpData</Name>
				<Source><![CDATA[
        public Common parmTmpData(Common _tmpData = tmpData)
    {
        tmpData = _tmpData;

        return tmpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores a cache lookup instance to the session cache.
    /// </summary>
    /// <param name="_owner">
    /// The owner of the session cache.
    /// </param>
    public void saveToCache(str _owner)
    {
        classfactory.globalCache().set(_owner, 0, this, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCRuntimeLookupCache construct()
    {
        return new PCRuntimeLookupCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a lookup cache object from the cache.
    /// </summary>
    /// <param name="_owner">
    /// The owner of the session cache.
    /// </param>
    /// <returns>
    /// A cached lookup object if one exists; otherwise, a default instance.
    /// </returns>
    public static PCRuntimeLookupCache loadFromCache(str _owner)
    {
        PCRuntimeLookupCache runtimeLookupCache;

        runtimeLookupCache = classfactory.globalCache().get(_owner, 0, runtimeLookupCache);

        if (runtimeLookupCache == null)
        {
            runtimeLookupCache = PCRuntimeLookupCache::construct();
        }

        return runtimeLookupCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>