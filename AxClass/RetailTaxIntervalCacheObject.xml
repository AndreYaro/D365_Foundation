<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTaxIntervalCacheObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTaxIntervalCacheObject</c> stores the tax interval fields that are being cached by <c>RetailPricingDataManager</c>.
/// </summary>
internal class RetailTaxIntervalCacheObject implements SysPackable
{
    #define.CurrentVersion(1)

    #localmacro.CurrentList
    taxCode, taxFromDate, taxToDate, taxLimitMin, taxLimitMax, taxValue
    #endmacro

    private TaxCode taxCode;
    private TaxValidDate taxFromDate;
    private TaxValidDate taxToDate;
    private TaxBaseMin taxLimitMin;
    private TaxBaseMax taxLimitMax;
    private TaxValue taxValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailTaxIntervalCacheObject</c>.
    /// </summary>
    /// <param name = "_taxCode">The tax code of the tax interval.</param>
    /// <param name = "_taxFromDate">The effectivity start date of the tax interval.</param>
    /// <param name = "_taxToDate">The effectivity from date of the tax interval.</param>
    /// <param name = "_taxLimitMin">The effectivity minimum value of the tax interval.</param>
    /// <param name = "_taxLimitMax">The effectivity maximum value of the tax interval.</param>
    /// <param name = "_taxValue">The value of the tax interval.</param>
    /// <returns>A new instance of <c>RetailTaxIntervalCacheObject</c>.</returns>
    public static RetailTaxIntervalCacheObject construct(TaxCode _taxCode, TaxValidDate _taxFromDate, TaxValidDate _taxToDate, TaxBaseMin _taxLimitMin, TaxBaseMax _taxLimitMax, TaxValue _taxValue)
    {
        RetailTaxIntervalCacheObject cacheObject = new RetailTaxIntervalCacheObject();

        cacheObject.taxCode = _taxCode;
        cacheObject.taxFromDate = _taxFromDate;
        cacheObject.taxToDate = _taxToDate;
        cacheObject.taxLimitMin = _taxLimitMin;
        cacheObject.taxLimitMax = _taxLimitMax;
        cacheObject.taxValue = _taxValue;

        return cacheObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new empty instance of <c>RetailTaxIntervalCacheObject</c>.
    /// </summary>
    /// <returns>A new instance of <c>RetailTaxIntervalCacheObject</c>.</returns>
    /// <remarks>
    /// This method is supposed to be used by callers of the <c>unpack</c> method.
    /// </remarks>
    public static RetailTaxIntervalCacheObject constructEmpty()
    {
        return new RetailTaxIntervalCacheObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the state of the current instance.
    /// </summary>
    /// <returns>A container with the serialized state of current instance.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the state and initialize the class with it.
    /// </summary>
    /// <param name = "packedClass">The serialized state.</param>
    /// <returns>
    /// true if deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        int version = Runbase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax code.
    /// </summary>
    /// <returns>The tax code.</returns>
    public TaxCode getTaxCode()
    {
        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax from date.
    /// </summary>
    /// <returns>The tax from date.</returns>
    public TaxValidDate getTaxFromDate()
    {
        return taxFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax to date.
    /// </summary>
    /// <returns>The tax to date.</returns>
    public TaxValidDate getTaxToDate()
    {
        return taxToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLimitMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax limit minimum.
    /// </summary>
    /// <returns>The tax limit minimum.</returns>
    public TaxBaseMin getTaxLimitMin()
    {
        return taxLimitMin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLimitMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax limit maximum.
    /// </summary>
    /// <returns>The tax limit maximum.</returns>
    public TaxBaseMax getTaxLimitMax()
    {
        return taxLimitMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax value.
    /// </summary>
    /// <returns>The tax value.</returns>
    public TaxValue getTaxValue()
    {
        return taxValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>