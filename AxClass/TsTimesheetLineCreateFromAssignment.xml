<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsTimesheetLineCreateFromAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating timesheet lines for a given timesheet based on the assigned
/// activities of the timesheet resource and also on the booked project hours.
/// </summary>
public class TsTimesheetLineCreateFromAssignment
{
    private TSTimesheetTable timesheet;
    private ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of TsTimesheetLineCreateFromAssignment for a given timesheet
    /// </summary>
    /// <param name = "_timesheet">Timesheet that will get new lines based on the assignments</param>
    /// <returns>New instance of TsTimesheetLineCreateFromAssignment</returns>
    public static TsTimesheetLineCreateFromAssignment construct(TSTimesheetTable _timesheet)
    {
        var timesheetCreateFromAssginment = new TsTimesheetLineCreateFromAssignment();
        timesheetCreateFromAssginment.setTimesheet(_timesheet);

        return timesheetCreateFromAssginment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromBookedProjectsAssignedActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create timesheet lines for the timesheet based on the assigned activities of the
    /// timesheet resource and also on the project booked hours of that resource
    /// </summary>
    /// <remarks>
    /// The assigned activities and booked project hours must be comprised by the timesheet period
    /// </remarks>
    public void createLinesFromBookedProjectsAssignedActivities()
    {
        this.createLinesFromAssignedActivities();
        this.createLinesFromBookedProject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the timesheet
    /// </summary>
    /// <param name = "_timesheet">Timesheet that will get the new lines based on the assignments</param>
    /// <remarks>
    /// The project period is also initialized based on the timesheet
    /// </remarks>
    protected void setTimesheet(TSTimesheetTable _timesheet)
    {
        timesheet = _timesheet;

        select firstonly projPeriodTimesheetWeek
            where projPeriodTimesheetWeek.RecId == timesheet.ProjPeriodTimesheetWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjPeriodTimesheetWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the period timesheet week.
    /// </summary>
    /// <param name = "_projPeriodTimesheetWeek">Week that will get the new lines based on the assignments</param>
    internal void setProjPeriodTimesheetWeek(ProjPeriodTimesheetWeek _projPeriodTimesheetWeek)
    {
        projPeriodTimesheetWeek = _projPeriodTimesheetWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndInsertDataintoTSLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the new timesheet line can be created and creates it if the validation is successful
    /// </summary>
    /// <param name = "_tsTimesheetLine">Timesheet line to be validated and created</param>
    private void validateAndInsertDataintoTSLine(TSTimesheetLine _tsTimesheetLine)
    {
        _tsTimesheetLine.initValue();

        if (_tsTimesheetLine.validateWrite())
        {
            _tsTimesheetLine.insert();
            TSTimesheetLineWeek::loadFromLine(_tsTimesheetLine, NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromAssignedActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines for the timesheet based on the assigned activities.
    /// </summary>
    private void createLinesFromAssignedActivities()
    {
        HierarchyTreeTable hierarchyTree;
        PsaProjSchedRole projScheduleRole;
        smmActivities activity;
        ResAssignment activityAssignment;
        ResourceView wbsResource;
        HcmWorkerRecId timesheetWorker = ResourceFacade::getWorker(timesheet.Resource);
        ProjParameters projParameters;

        var periodFrom = this.getTimesheetDateFrom();
        var periodTo = this.getTimesheetDateTo();

        while select crosscompany ActivityNumber, DataAreaId from activity
            group by activity.ActivityNumber, activity.DataAreaId
            exists join hierarchyTree
                where hierarchyTree.DataAreaId == activity.DataAreaId
                    && hierarchyTree.RefRecId == activity.RecId
            exists join activityAssignment
                where activityAssignment.Activity == activity.RecId
                    && ((activityAssignment.Day >= periodFrom && activityAssignment.Day <= periodTo) || !projPeriodTimesheetWeek.RecId)
                    && activityAssignment.CommitType == ResCommitType::HardBook
            exists join projScheduleRole
                where projScheduleRole.RecId == activityAssignment.ActivityResource
            exists join wbsResource
                where projScheduleRole.Resource == wbsResource.RecId
                    && wbsResource.Worker == timesheetWorker
            exists join projParameters
                where projParameters.DataAreaId == curExt()
                    && (projParameters.EnableIntercompanyTimesheet || projParameters.DataAreaId == activity.DataAreaId)
        {
            this.createTimesheetLine(activity, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromBookedProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines for the timesheet based on the booked project hours for the timesheet resource
    /// </summary>
    private void createLinesFromBookedProject()
    {
        HierarchyTreeTable hierarchyTree;
        PsaProjSchedRole projScheduleRole;
        smmActivities activity;
        ResBooking bookedResource;
        TSTimesheetLine newTimesheetLine;
        ResourceView wbsResource;
        HcmWorkerRecId timesheetWorker = ResourceFacade::getWorker(timesheet.Resource);

        var periodFrom = this.getTimesheetDateFrom();
        var periodTo = this.getTimesheetDateTo();

        while select crosscompany ActivityNumber, DataAreaId from activity
            group by activity.ActivityNumber, activity.DataAreaId
            exists join hierarchyTree
                where hierarchyTree.DataAreaId == activity.DataAreaId
                    && hierarchyTree.RefRecId == activity.RecId
            exists join bookedResource
                where bookedResource.Activity == activity.RecId
                    && ((bookedResource.Day >= periodFrom && bookedResource.Day <= periodTo) || !projPeriodTimesheetWeek.RecId)
                    && bookedResource.CommitType == ResCommitType::HardBook
            exists join projScheduleRole
                where projScheduleRole.RecId == bookedResource.ActivityResource
            exists join wbsResource
                where projScheduleRole.Resource == wbsResource.RecId
                    && wbsResource.Worker == timesheetWorker
        {
            this.createTimesheetLine(activity, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a timesheet line based on the activity.
    /// </summary>
    /// <param name = "_activity">Activity that will be used to create the timesheet line</param>
    /// <param name = "_isCreatingFromAssignedActivity">
    /// Indicates if the method will create a timesheet line for an assignment activity or based on the project booked resources.
    /// </param>
    /// <remarks>
    /// Even for the project booked resources, there is a valid activity record that can be used to create the timesheet line.
    /// Nevertheless, the activity number should not be saved when the origin is a booking resource and the category will
    /// also be retrieved based on the worker, instead of relying on the category related to the activity.
    /// </remarks>
    private void createTimesheetLine(smmActivities _activity, boolean _isCreatingFromAssignedActivity)
    {
        TSTimesheetLine newTimesheetLine;

        newTimesheetLine.TimesheetNbr      = timesheet.TimesheetNbr;
        newTimesheetLine.Resource          = timesheet.Resource;
        newTimesheetLine.ProjectDataAreaId = _activity.DataAreaId;

        DataAreaId activityDataAreaId = _activity.DataAreaId;

        if (activityDataAreaId == '')
        {
            activityDataAreaId = curext();
        }

        changeCompany(activityDataAreaId)
        {
            newTimesheetLine.ProjId = _activity.projId();

            ProjCategoryId categoryId;

            if (_isCreatingFromAssignedActivity)
            {
                newTimesheetLine.ActivityNumber = _activity.ActivityNumber;
                newTimesheetLine.CategoryId = newTimesheetLine.setDefaultCategory(newTimesheetLine.dataAreaId != activityDataAreaId);
                newTimesheetLine.ProjCompanySalesCurrency = ProjInvoiceTable::find(ProjTable::find(newTimesheetLine.ProjId).ProjInvoiceProjId).CurrencyId;
                categoryId = ProjActivity::find(_activity.ActivityNumber, false).CategoryDefault;
            }
            else
            {
                categoryId = JmgEmployee::find(TSResource::workerRecId(timesheet.Resource)).ProjCategoryId;
            }

            if (categoryId != '' && categoryId != newTimesheetLine.CategoryId && newTimesheetLine.isCategoryValid(categoryId))
            {
                newTimesheetLine.CategoryId = categoryId;
            }
        }

        if (newTimesheetLine.CategoryId)
        {
            newTimesheetLine.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;

            this.validateAndInsertDataintoTSLine(newTimesheetLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetDateFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start time of the period converted to UTC date time.
    /// </summary>
    /// <returns>UTC date time that represents the start of the timesheet period</returns>
    private utcdatetime getTimesheetDateFrom()
    {
        const TimeOfDay firstSecondOfDay = 0;

        return DatetimeUtil::newDateTime(projPeriodTimesheetWeek.PeriodFrom, firstSecondOfDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetDateTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end time of the period converted to UTC date time.
    /// </summary>
    /// <returns>UTC date time that represents the end of the timesheet period</returns>
    private utcdatetime getTimesheetDateTo()
    {
        return DatetimeUtil::newDateTime(projPeriodTimesheetWeek.periodto, timeMax());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>