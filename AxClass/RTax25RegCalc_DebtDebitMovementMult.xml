<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtDebitMovementMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_DebtDebitMovementMult extends RTax25RegCalc_DebtMovementMultiply implements BatchRetryable
{
    RTax25DebtPeriodType    periodType;

    AmountMST               totalBadDebt0_45,
                            totalBadDebt45_90,
                            totalBadDebt90_240,
                            totalBadDebtReserved,
                            totalBadDebtHopeless,
                            totalAmountDiff,
                            totalAcquisition,
                            totalWriteOffAmount,
                            totalBadDebtRemain0_45,
                            totalBadDebtRemain45_90,
                            totalBadDebtRemain90_240,
                            totalBadDebtRemainReserved,
                            totalBadDebtRemainHopeless;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>debtType</Name>
				<Source><![CDATA[
    protected RTax25DebtType debtType()
    {
        return RTax25DebtType::Debit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodType</Name>
				<Source><![CDATA[
    private void initPeriodType()
    {
        if (! periodType)
        {
            periodType = RTax25DebtPeriodType::newModelParameters(RTax25DebtType::Debit, regQuery.getRegType().badDebtModel());
            periodType.prepareSummator(dateTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    protected boolean initRunItem()
    {
        boolean ret = super();

        this.initPeriodType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
    protected void insertRegisterFooter()
    {
        container totals = ["", dateNull(), "", dateNull(), ""];

        this.initPeriodType();
  
        totals += conDel(
           [totalBadDebt0_45,
            totalBadDebt45_90,
            totalBadDebt90_240,
            totalBadDebtReserved,
            totalBadDebtHopeless], periodType.rowCount() + 1, RTax25DebtModelPeriod::maxPeriodNum() - periodType.rowCount());

        totals += [totalAmountDiff,
                   totalAcquisition,
                   "",
                   dateNull(),
                   "",
                   totalWriteOffAmount];

        totals += conDel(
           [totalBadDebtRemain0_45,
            totalBadDebtRemain45_90,
            totalBadDebtRemain90_240,
            totalBadDebtRemainReserved,
            totalBadDebtRemainHopeless], periodType.rowCount() + 1, RTax25DebtModelPeriod::maxPeriodNum() - periodType.rowCount());

        regQuery.addFooterRecord(0,
                                 totals,
                                 0,
                                 strfmt("@SYS7446"),
                                 startCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFoundCustVendTrans</Name>
				<Source><![CDATA[
    #define.ConPos2(2)
    #define.ConPos5(5)
    #define.ConPos6(6)
    #define.ConPos7(7)
    #define.ConPos8(8)
    protected void processFoundCustVendTrans(CustVendTrans    _custVendTrans,
                                         DueDate          _dueDate)
    {
        CustVendCalcSettledAmounts_RU   custVendCalcSettledAmounts;
        Map                             mapMapSettledAmounts, mapSettledAmounts;
        MapIterator                     it, it2;
        BookStructSmallVATAmounts_RU    settledAmounts, diffAmounts;

        Num                     num;
        Description             description = '';

        container               mainCon, transCon, transDescCon=connull();
        AmountMST               badDebt, balance = 0;
        int                     i;
        RefRecId                profitTableRecId = 0;
        RefTableId              refTableId = 0;
        RefRecId                refRecId = 0;

        boolean                 firstLine = true;
        TransDate               settlementDate = dateNull();
        CustVendTransDetails    custVendTransDetails;

        // Get settlements
        custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(_custVendTrans);
        custVendCalcSettledAmounts.calcSettledAmounts();

        mapMapSettledAmounts = custVendCalcSettledAmounts.mapMapSettledAmountsMST();
        badDebt              = custVendCalcSettledAmounts.transAmountMSTInclVAT();

        custVendTransDetails = new CustVendTransDetails(_custVendTrans, dateFrom - 1);

        badDebt -= custVendTransDetails.amountMSTSettled();

        mainCon = [conpeek(this.transDescription(_custVendTrans), 1),
               _custVendTrans.TransDate,
               _custVendTrans.Txt,
               _dueDate,
               this.accountsOrder(_custVendTrans)];

        if ( ! badDebt)
        return;

        periodType.clearAmounts();
        periodType.setAmount(_dueDate, badDebt);

        for (i = 1; i <= periodType.rowCount(); i++)
        {
            mainCon         += periodType.getAmount(i);
            transCon        += 0.0;
        }

        mainCon = conpoke(mainCon, #ConPos6 + periodType.rowCount(), 0.0);
        mainCon = conpoke(mainCon, #ConPos7 + periodType.rowCount(), 0.0);
        mainCon = conpoke(mainCon, #ConPos8 + periodType.rowCount(), "");   // not used in current vesion

        firstLine = true;

        it = new MapIterator(mapMapSettledAmounts);

        while (it.more() && settlementDate <= dateTo)
        {
            settlementDate = conpeek(it.key(), 1);

            if (settlementDate >= dateFrom && settlementDate <= dateTo)
            {
                // Calc settled amounts -->
                settledAmounts = new BookStructSmallVATAmounts_RU();
                mapSettledAmounts = it.value();
                it2 = new MapIterator(mapSettledAmounts);
                while (it2.more())
                {
                    settledAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(it2.value()));
                    it2.next();
                }
                // Calc settled amounts <--

                // Create register line -->
                if (! firstLine)
                {
                    regQuery.addBodyRecord(profitTableRecId,
                                       mainCon + transDescCon + transCon,
                                       refTableId,
                                       refRecId,
                                       description,
                                       0,
                                       balance);
                    startCount++;
                    // Clear debt amount for the second settlement
                    for (i = 1; i <= periodType.rowCount(); i++)
                    {
                        mainCon = conpoke(mainCon, i + #ConPos5, 0.0);
                    }
                }
                else
                {
                    firstLine = false;
                }

                profitTableRecId = 0;
                balance  = 0.0;
                this.initCurrentSettlement(_custVendTrans, conpeek(it.key(), #ConPos2));

                // Amount & Exch Rate difference
                if (currentCustVendSettlement.ExchAdjustment)
                {
                    diffAmounts = new BookStructSmallVATAmounts_RU();

                    profitTableRecId = this.calcExchRateDifference(_custVendTrans, currentOffsetCustVendTrans, settlementDate, diffAmounts);

                    if ( ! diffAmounts.amountInclVAT())
                    {
                        profitTableRecId = this.calcAmountDifference(_custVendTrans, currentOffsetCustVendTrans, settlementDate, diffAmounts);
                    }

                    balance = abs(diffAmounts.amountInclVAT());
                }

                mainCon = conpoke(mainCon, #ConPos6 + periodType.rowCount(), diffAmounts ? diffAmounts.amountInclVAT() : 0.0);

                // debt amortisation
                if (currentOffsetCustVendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation)
                {
                    profitTableRecId = this.getProfitTableId(_custVendTrans);
                    balance  = settledAmounts.amountInclVAT();
                }

                refTableId = currentCustVendSettlement.TableId;
                refRecId   = currentCustVendSettlement.RecId;

                custVendTransDetails = new CustVendTransDetails(_custVendTrans, dateTo, dateFrom);

                [num, description] = this.transDescription(currentOffsetCustVendTrans);
                transDescCon = [currentOffsetCustVendTrans.TransDate,
                            strfmt("@GLS111165", description, num, currentOffsetCustVendTrans.Txt),
                            custVendTransDetails.amountMSTSettled()];

                description = strfmt("@GLS111166",
                                  _custVendTrans.TableId == tablenum(CustTrans) ? "@SYS11779" : "@SYS8079",
                                  _custVendTrans.AccountNum,
                                  _custVendTrans.Voucher);
                // Create register line <--
            }
            it.next();
        }

        if ( ! firstLine || ! conlen(transDescCon))
        {
            // Last line with an invoice open balance
            if (! conlen(transDescCon)) // not settled
            {
                profitTableRecId   = 0;
                balance    = 0.0;
                refTableId = _custVendTrans.TableId;
                refRecId   = _custVendTrans.RecId;
                transDescCon = [dateNull(), "", 0.0];
                description = strfmt("@GLS111166",
                                  _custVendTrans.TableId == tablenum(CustTrans) ? "@SYS11779" : "@SYS8079",
                                  _custVendTrans.AccountNum,
                                  _custVendTrans.Voucher);
            }

            badDebt = custVendCalcSettledAmounts.transAmountMSTInclVAT();

            custVendTransDetails = new CustVendTransDetails(_custVendTrans, dateTo);

            badDebt -= custVendTransDetails.amountMSTSettled();

            transCon = connull();
            periodType.clearAmounts();
            periodType.setAmount(_dueDate, badDebt);
            for (i = 1; i <= periodType.rowCount(); i++)
            {
                transCon  += periodType.getAmount(i);
            }
            regQuery.addBodyRecord(profitTableRecId,
                               mainCon + transDescCon + transCon,
                               refTableId,
                               refRecId,
                               description,
                               0,
                               balance);
            startCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_DebtDebitMovement trans = _trans;
        totalBadDebt0_45          += trans.Debt0_45;
        totalBadDebt45_90         += trans.Debt45_90;
        totalBadDebt90_240        += trans.Debt90_240;
        totalBadDebtReserved      += trans.DebtReserved;
        totalBadDebtHopeless      += trans.DebtHopeless;
        totalAmountDiff           += trans.AmountExchDifference;
        totalAcquisition          += trans.AcquisitionCost;

        totalWriteOffAmount        += trans.CloseAmount;
        totalBadDebtRemain0_45     += trans.Remain0_45;
        totalBadDebtRemain45_90    += trans.Remain45_90;
        totalBadDebtRemain90_240   += trans.Remain90_240;
        totalBadDebtRemainReserved += trans.RemainReserved;
        totalBadDebtRemainHopeless += trans.RemainHopeless;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>