<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchCalcCost</c> class is used to find the base cost of a purchased item.
/// </summary>
/// <remarks>
/// This could be based on a registered purchase price or a trade agreements.
/// </remarks>
class PurchCalcCost extends BOMCalcCost
{
    PurchPriceModel           purchPriceModel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the base cost for the purchase cost calculation.
    /// </summary>
    /// <remarks>
    ///    The cost of a purchased item can be calculated based on the registered purchase price or the
    ///    registered trade agreements. The <c>PurchCalcCost</c> object finds the desired price.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The instance is not set up correctly.
    /// </exception>
    void calc()
    {
        try
        {
            if (!this.validate())
            {
                throw Exception::Error;
            }

            this.cleanUpCostPrice();
            this.cleanUpSalesPrice();

            this.calcPurchPriceModel();

            this.calcSalesModel(bomCalcGroup.getSalesPriceModel(costPriceModel));
        }
        catch(Exception::Error)
        {
            throw error("@SYS19457");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAlternativeCostModel</Name>
				<Source><![CDATA[
    // Not accesible for PurchCalcCost
    public void calcAlternativeCostModel()
    {
        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrimaryCostModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the base price according to the selected <c>PurchPriceModel</c> enumeration value.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The instance is not set up correctly.
    /// </exception>
    void calcPrimaryCostModel()
    {
        try
        {
            if (! this.validate())
            {
                throw Exception::Error;
            }

            this.cleanUpCostPrice();
            this.calcPurchPriceModel();
        }
        catch(Exception::Error)
        {
            throw error("@SYS19457");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPurchPriceModel</Name>
				<Source><![CDATA[
    private void calcPurchPriceModel()
    {
        switch (purchPriceModel)
        {
            case PurchPriceModel::PriceDisc:
                this.calcCostModel(BOMCalcCostPrice::PriceDisc);
                break;
            case PurchPriceModel::PurchPrice:
                this.calcCostModel(BOMCalcCostPrice::PurchPrice);
                break;
            default:
                throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCalc</Name>
				<Source><![CDATA[
    // Make the method unaccessible for PurchCalcCost
    public void initCalc(
        TransDate         _calcDate,
        ItemId            _itemId,
        InventDimId       _inventDimId,
        Qty               _consumptionInvent,
        Qty               _tradeAgreementInventQty,
        VendAccount       _vendAccount,
        CostProfitSet     _profitSet,
        CostingVersionId    _costingVersionId             = '',
        BOMCalcFallBack   _bomCalcFallBack            = BOMCalcFallBack::None,
        CostingVersionId    _fallBackVersionId          = '',
        BOMCostPriceModel _costPriceModel             = BOMCostPriceModel::BOMCalcGroup,
        InventSiteId      _siteId                     = ''
        )
    {
        super(_calcDate,
              _itemId,
              _inventDimId,
              _consumptionInvent,
              _tradeAgreementInventQty,
              _vendAccount,
              _profitSet,
              _costingVersionId,
              _bomCalcFallBack,
              _fallBackVersionId,
              _costPriceModel,
              _siteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>PurchCalcCost</c> class.
    /// </summary>
    /// <param name="_calcDate">
    ///    The date of the calculation.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension of the item.
    /// </param>
    /// <param name="_consumptionInvent">
    ///    The consumption, in inventory units.
    /// </param>
    /// <param name="_tradeAgreementInventQty">
    ///    The quantity for the trade agreement.
    /// </param>
    /// <param name="_vendAccount">
    ///    The account of the vendor for the trade agreement.
    /// </param>
    /// <param name="_profitSet">
    ///    The profit settings to use to calculate the sales price.
    /// </param>
    /// <param name="_costingVersionId">
    ///    The ID of the costing version used.
    /// </param>
    /// <param name="_bomCalcFallBack">
    ///    A <c>BOMCalcFallBack</c> enumeration value that specifies the fallback strategy used.
    /// </param>
    /// <param name="_fallBackVersionId">
    ///    The fallback costing version, if the <c>BOMCalcFallBack::Simulated</c> enumeration value is used.
    /// </param>
    /// <param name="_purchPriceModel">
    ///    The source of the base cost.
    /// </param>
    /// <param name="_siteId">
    ///    The site for the calculation.
    /// </param>
    /// <remarks>
    ///    The <paramref name="_purchPriceModel" /> parameter can be the <c>PurchPriceModel::PurchPrice</c> or
    ///    <c>PurchPriceModel::PriceDisc</c> enumeration value.
    /// </remarks>
    public void initPurchCalc(
        TransDate           _calcDate,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        Qty                 _consumptionInvent,
        Qty                 _tradeAgreementInventQty,
        VendAccount         _vendAccount,
        CostProfitSet       _profitSet,
        CostingVersionId    _costingVersionId             = '',
        BOMCalcFallBack     _bomCalcFallBack            = BOMCalcFallBack::None,
        CostingVersionId    _fallBackVersionId          = '',
        PurchPriceModel     _purchPriceModel             = PurchPriceModel::PurchPrice,
        InventSiteId        _siteId                     = ''
        )
    {
        this.initCalc(_calcDate,
                      _itemId,
                      _inventDimId,
                      _consumptionInvent,
                      _tradeAgreementInventQty,
                      _vendAccount,
                      _profitSet,
                      _costingVersionId,
                      _bomCalcFallBack,
                      _fallBackVersionId,
                      BOMCostPriceModel::BOMCalcGroup,
                      _siteId);

        this.parmPurchPriceModel(_purchPriceModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchPriceModel</Name>
				<Source><![CDATA[
    public PurchPriceModel parmPurchPriceModel(PurchPriceModel _purchPriceModel = purchPriceModel)
    {
        purchPriceModel = _purchPriceModel;

        return purchPriceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFallBackVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the costing version that was used as fallback.
    /// </summary>
    /// <param name="_priceType">
    /// The type of the price that has to be found.
    /// </param>
    /// <param name="_costingVersionId">
    /// The ID of the costing version that was used as fallback.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The price type is not valid.
    /// </exception>
    protected void setFallBackVersion(
        CostingVersionPriceType _priceType,
        CostingVersionId        _costingVersionId
        )
    {
        switch (_priceType)
        {
            case CostingVersionPriceType::Purch :
                costPriceFallBackVersion = _costingVersionId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCallFallBackVersion</Name>
				<Source><![CDATA[
    protected boolean canCallFallBackVersion(CostingVersionPriceType _priceType)
    {
        return _priceType == CostingVersionPriceType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret;

        ret = super();

        if (!purchPriceModel)
        {
            ret = checkFailed(strFmt("@SYS50104", "@SYS303203")) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchCalcCost construct()
    {
        return new PurchCalcCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>