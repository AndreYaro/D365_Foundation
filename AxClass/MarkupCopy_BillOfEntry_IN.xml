<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupCopy_BillOfEntry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MarkupCopy_BillOfEntry_IN</c> class is used to copy charge for Bill of entry.
/// </summary>
internal class MarkupCopy_BillOfEntry_IN extends MarkupCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>MarkupCopy_BillOfEntry_IN</c>.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MarkupCopy_BillOfEntry_IN</c> class.
    /// </returns>
    public static MarkupCopy_BillOfEntry_IN construct()
    {
        return new MarkupCopy_BillOfEntry_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipCopyFromPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the copy of markup transactions must be skipped.
    /// </summary>
    /// <param name = "_oldMarkupTrans">
    /// Markup transaction table buffer to be copied.
    /// </param>
    /// <param name = "_markupTable">
    /// Charge code table buffer.
    /// </param>
    /// <param name = "_purchLine">
    /// Purchase order line table buffer.
    /// </param>
    /// <param name = "_bufferFrom">
    /// The source table record.
    /// </param>
    /// <param name = "_bufferTo">
    /// The destination table record.
    /// </param>
    /// <param name = "_interCompanyInvoiceNum">
    /// The invoice number used by an intercompany invoice.
    /// </param>
    /// <param name = "_isIntercompany">
    /// A boolean which determines whether an order line is an intercompany order line.
    /// </param>
    /// <returns>
    /// true if the markup copying must be skipped; otherwise, false.
    /// </returns>
    protected boolean mustSkipCopyFromPurchOrder(
        MarkupTrans _oldMarkupTrans,
        MarkupTable _markupTable,
        PurchLine   _purchLine,
        Common      _bufferFrom,
        Common      _bufferTo,
        Num         _interCompanyInvoiceNum,
        boolean     _isIntercompany)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCopyFromBOEJournal</Name>
				<Source><![CDATA[
    private boolean needCopyFromBOEJournal(MarkupTrans _oldMarkupTrans)
    {
        // Only copy if the MarkupTrans is marked Keep or if it is not connected to a pending invoice and not yet invoiced
        if (_oldMarkupTrans.Keep || (_oldMarkupTrans.connectedFromSet().empty() && !_oldMarkupTrans.excludeFromUpdate(DocumentStatus::Invoice, true)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromPurchParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>MarkupTrans</c> table records that are associated with PurchParmTable/PurchParmLine record to CustomsVendBOEJour_IN/CustomsVendBOETrans_IN table.
    /// </summary>
    /// <param name="_copyFromPurchOrderParameters">
    /// The parameter class that has the information for the copy operation.
    /// </param>
    /// <returns>
    /// The number of <c>MarkupTrans</c> table records copied.
    /// </returns>
    public int copyFromPurchParm(MarkupCopyFromPurchOrderParameters _copyFromPurchOrderParameters)
    {
        return this.copyMarkupTrans(_copyFromPurchOrderParameters, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromBOEJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>MarkupTrans</c> table records that are associated with one table record to another table.
    /// </summary>
    /// <param name="_copyFromPurchOrderParameters">
    /// The parameter class that has the information for the copy operation.
    /// </param>
    /// <returns>
    /// The number of <c>MarkupTrans</c> table records copied.
    /// </returns>
    public int copyFromBOEJournal(MarkupCopyFromPurchOrderParameters _copyFromPurchOrderParameters)
    {
        return this.copyMarkupTrans(_copyFromPurchOrderParameters, true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkupTrans</Name>
				<Source><![CDATA[
    private int copyMarkupTrans(
        MarkupCopyFromPurchOrderParameters _copyFromPurchOrderParameters,
        boolean _skipZeroValueMarkupTrans,
        boolean _isCopyFromPurchParm)
    {
        Common bufferFrom = _copyFromPurchOrderParameters.parmBufferFrom();
        Common bufferTo = _copyFromPurchOrderParameters.parmBufferTo();
        CurrencyCode currencyCode = _copyFromPurchOrderParameters.parmCurrencyCode();
        SourceDocumentLineAccountingStatus targetAccountingStatus = _copyFromPurchOrderParameters.parmTargetAccountingStatus();

        if (currencyCode == '')
        {
            CurrencyCodeMap currencyCodeMap = bufferTo;
            currencyCode = currencyCodeMap.CurrencyCode;
        }

        MarkupTrans oldMarkupTrans;
        boolean skippedZeroValueMarkupTrans = false;
        int counter = 0;

        ttsbegin;

        while select oldMarkupTrans
            where oldMarkupTrans.TransTableId == bufferFrom.TableId
                && oldMarkupTrans.TransRecId == bufferFrom.RecId
                && !oldMarkupTrans.IsDeleted
        {
            if (_skipZeroValueMarkupTrans && oldMarkupTrans.Value == 0)
            {
                skippedZeroValueMarkupTrans = true;
                continue;
            }

            if (_isCopyFromPurchParm || this.needCopyFromBOEJournal(oldMarkupTrans))
            {
                Markup::copySingleMarkupTrans(false, oldMarkupTrans, currencyCode, bufferFrom, bufferTo, false, oldMarkupTrans, targetAccountingStatus);
                counter++;
            }
        }

        ttscommit;

        if (skippedZeroValueMarkupTrans)
        {
            warning("@SYS100830");
        }

        return counter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>