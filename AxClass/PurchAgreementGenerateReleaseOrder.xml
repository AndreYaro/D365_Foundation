<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementGenerateReleaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchAgreementGenerateReleaseOrder</c> creates purchase release orders from a purchase
///    agreement.
/// </summary>
/// <remarks>
///    This class extends the <c>RunBase</c> class.
/// </remarks>
class PurchAgreementGenerateReleaseOrder extends AgreementGenerateReleaseOrder
{
    PurchTable              purchTable;
    TmpPurchTable           releaseOrderTable;
    TmpPurchLine            releaseOrderLine;
    PurchAgreementHeader    purchAgreementHeader;
    container               releaseLineList;
    PurchAutoCreateListener purchAutoCreateListener;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        releaseOrderTable,
        releaseLineList
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a release purchase order can be created.
    /// </summary>
    /// <returns>
    ///    true if the release purchase order data is valid and a release purchase order can be created;
    ///    otherwise, false.
    /// </returns>
    public boolean check()
    {
        TmpPurchLine  tmpPurchLineLocal;
        tmpPurchLineLocal.setTmpData(releaseOrderLine);

        setprefix("@SYS4440");

        return this.validateAgreementLineQty(tmpPurchLineLocal)
                && this.validatePurchLinesWithPurchQty(tmpPurchLineLocal)
                && this.validateApprovedVendorList(tmpPurchLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreementLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the purchase quantity on the agreement line.
    /// </summary>
    /// <param name="_tmpPurchLineLocal">
    /// A <c>TmpPurchLine</c> record.
    /// </param>
    /// <returns>
    /// true if the purchase quantity on the agreement line is valid; otherwise, false.
    /// </returns>
    protected boolean validateAgreementLineQty(TmpPurchLine _tmpPurchLineLocal)
    {
        while select sum (PurchQty) from _tmpPurchLineLocal
            group by AgreementLineQuantityCommitment, ItemId
        {
            AgreementLineQuantityCommitment agreementLine = AgreementLineQuantityCommitment::find(_tmpPurchLineLocal.AgreementLineQuantityCommitment);

            if (!AgreementGenerateReleaseOrder::validateQty(_tmpPurchLineLocal.PurchQty, agreementLine))
            {
                setprefix(#PrefixField(_tmpPurchLineLocal, ItemId));
                return checkFailed("@SYS135461");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchLinesWithPurchQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the delivery dates and the mandatory dimensions on <c>PurchLine</c> records with quantity.
    /// </summary>
    /// <param name="_tmpPurchLineLocal">
    /// A <c>TmpPurchLine</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>PurchLine</c> records are valid; otherwise, false.
    /// </returns>
    private boolean validatePurchLinesWithPurchQty (TmpPurchLine _tmpPurchLineLocal)
    {
        boolean ret = true;
        while select _tmpPurchLineLocal
                where _tmpPurchLineLocal.PurchQty != 0
        {
            setprefix(#PrefixField(_tmpPurchLineLocal, ItemId));

            AgreementLineQuantityCommitment agreementLine = AgreementLineQuantityCommitment::find(_tmpPurchLineLocal.AgreementLineQuantityCommitment);

            // Verify delivery dates...
            if (!PurchAgreementGenerateReleaseOrder::checkDeliveryDate(_tmpPurchLineLocal, agreementLine))
            {
                ret = false;
            }

            InventDim curInventDim = this.retrieveInventDimFromTmpPurchLine(_tmpPurchLineLocal);
            // Verify mandatory dimensions
            if (!curInventDim.validateWriteMandatoryAndProductDim(_tmpPurchLineLocal.ItemId))
            {
                ret =  false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventDimFromTmpPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventDim</c> from the given <c>TmpPurchLine</c>.
    /// </summary>
    /// <param name = "_tmpPurchLineLocal">A <c>TmpPurchLine</c> record.</param>
    /// <returns>An <c>InventDim</c> record.</returns>
    [Replaceable]
    protected InventDim retrieveInventDimFromTmpPurchLine(TmpPurchLine _tmpPurchLineLocal)
    {
        return (InventDim::find(_tmpPurchLineLocal.InventDimId, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the approved vendor list.
    /// </summary>
    /// <param name="_tmpPurchLineLocal">
    /// A <c>TmpPurchLine</c> record.
    /// </param>
    /// <returns>
    /// true if the the approved vendor list is valid; otherwise, false.
    /// </returns>
    private boolean validateApprovedVendorList(TmpPurchLine _tmpPurchLineLocal)
    {
        PdsApprovedVendorListCheck_PurchAgrmt avl = PdsApprovedVendorListCheck_PurchAgrmt::construct();
        avl.parmBuffer(purchAgreementHeader);
        avl.parmTmpPurchLineReleaseDetails(_tmpPurchLineLocal);
        avl.parmIgnoreError(false);
        return avl.validateCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLineAddressInfoFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the fields related to the delivery address from the header to a line.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    A <c>TmpPurchTable</c> buffer that indicates the header.)
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    A <c>TmpPurchLine</c> buffer that indicates the line.)
    /// </param>
    public void copyLineAddressInfoFromHeader(TmpPurchTable _releaseOrderTable,
                                              TmpPurchLine  _releaseOrderLine)
    {
        _releaseOrderLine.AddressRecId             = _releaseOrderTable.AddressRefRecId;
        _releaseOrderLine.AddressRefTableId        = _releaseOrderTable.AddressRefTableId;
        _releaseOrderLine.DeliveryName             = _releaseOrderTable.DeliveryName;
        _releaseOrderLine.DeliveryPostalAddress    = _releaseOrderTable.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the purchase release order on the server.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A <c>TmpPurchLine</c> that contains the purchase release lines to create.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    A <c>TmpPurchTable</c> table that contains the purchase release order header to create.
    /// </param>
    protected void createOrder(TmpPurchLine  _releaseOrderLine,
                               TmpPurchTable _releaseOrderTable)
    {
        PurchAutoCreate_ReleaseFromAgreement purchAutoCreate;

        ttsbegin;

        purchAutoCreate = PurchAutoCreate::construct(_releaseOrderLine, null, _releaseOrderTable);

        // if there is a listener object, hook it up with the creation object
        if (purchAutoCreateListener)
        {
            purchAutoCreate.recordCreatingEventHandler  += eventhandler(purchAutoCreateListener.recordCreating);
            purchAutoCreate.recordCreatedEventHandler   += eventhandler(purchAutoCreateListener.recordCreated);
        }

        purchAutoCreate.create();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseLineListFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the <c>TmpPurchTable</c> buffer to the list.
    /// </summary>
    protected void createReleaseLineListFromBuffer()
    {
        List list = new List(Types::Record);

        while select releaseOrderLine
        {
            list.addEnd(releaseOrderLine);
        }
        select releaseOrderLine; // re-select.

        releaseLineList = list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>TmpPurchLine</c> temporary table with records from the agreement lines.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A <c>TmpPurchLine</c> buffer.
    /// </param>
    /// <remarks>
    ///    This method calculates and caches a set of inventory dimensions fields that are available to be
    ///    edited during the release of each line.
    /// </remarks>
    void createReleaseOrderLine(TmpPurchLine _releaseOrderLine)
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;

        agreementLineQuantityCommitment.recordLevelSecurity(true);

        while select agreementLineQuantityCommitment
            order by Agreement, LineNumber
            where agreementLineQuantityCommitment.Agreement == purchAgreementHeader.RecId
            &&    agreementLineQuantityCommitment.IsDeleted == NoYes::No
        {
            _releaseOrderLine.clear();

            this.initFromAgreementLineQuantityCommitment(_releaseOrderLine, agreementLineQuantityCommitment);

            // Initialize line record using header...
            this.initFromHeader(releaseOrderTable, _releaseOrderLine);

            _releaseOrderLine.initVariantId(InventDim::find(_releaseOrderLine.InventDimId));
            _releaseOrderLine.insert();

            // Register editable inventory dimensions fields for current AgreementLineQuantityCommitment...
            this.registerEditableAgreementLineDimensions(agreementLineQuantityCommitment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLineQuantityCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the release order line from the agreement line.
    /// </summary>
    /// <param name = "_releaseOrderLine">The release order line to initialize.</param>
    /// <param name = "_agreementLineQuantityCommitment">The source agreement line.</param>
    public void initFromAgreementLineQuantityCommitment(TmpPurchLine _releaseOrderLine, AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        InventDim               releaseLineInventDimInventoryDefaulted;
        InventDimParm           activeInventDimParm;
        VendTable               agreementVendor;
        InventItemPurchSetup    inventItemPurchSetup;
        boolean                 isDefaulted;

        _releaseOrderLine.ItemId                          = _agreementLineQuantityCommitment.ItemId;
        _releaseOrderLine.AgreementLineQuantityCommitment = _agreementLineQuantityCommitment.RecId;
        _releaseOrderLine.Units                           = _agreementLineQuantityCommitment.ProductUnitOfMeasure;
        _releaseOrderLine.DeliveryDate                    =  max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), _agreementLineQuantityCommitment.EffectiveDate);
        _releaseOrderLine.InventDimId                     = _agreementLineQuantityCommitment.InventDimId;

        releaseLineInventDimInventoryDefaulted = this.initInventoryDimensions(_agreementLineQuantityCommitment);

        _releaseOrderLine.InventDimId = releaseLineInventDimInventoryDefaulted.InventDimId;

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            _releaseOrderLine.ShipCalendarId = _agreementLineQuantityCommitment.ShipCalendarId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a record in the <c>TmpPurchTable</c> temporary table from the purchase agreement that is
    ///    releasing the line.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    A <c>TmpPurchTable</c> buffer.
    /// </param>
    /// <remarks>
    ///    All previously saved entries are deleted before a new record is inserted into the table.
    /// </remarks>
    public void createReleaseOrderTable(TmpPurchTable _releaseOrderTable)
    {
        _releaseOrderTable.recordLevelSecurity(true);
        _releaseOrderTable.clear();

        _releaseOrderTable.initFromPurchAgreement(purchAgreementHeader);

        _releaseOrderTable.insert();

        this.parmReleaseOrderTable(_releaseOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and starts the dialog box.
    /// </summary>
    /// <returns>
    ///    A <c>FormRun</c> object that represents the <c>PurchAgreementGenerateReleaseOrder</c> form.
    /// </returns>
    public Object dialog()
    {
        Args            parameters = new Args();
        FormRun         purchCreateSubOrder;

        parameters.name(formStr(PurchAgreementGenerateReleaseOrder));
        parameters.caller(this);
        parameters.record(purchAgreementHeader);
        purchCreateSubOrder = classfactory.formRunClass(parameters);

        return purchCreateSubOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEditableInventDimFieldsPerLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a map that contains information about the editable <c>InventDim</c> fields for each
    ///    <c>AgreementLineQuantityCommitment</c> record in the <c>PurchAgreementHeader</c> table.
    /// </summary>
    /// <returns>
    ///    A map with a key of the record ID of a <c>AgreementLineQuantityCommitment</c> record and a value of
    ///    an instance of the <c>InvenDimParm</c> class with flags set to <c>NoYes::Yes</c> for each editable
    ///    <c>InventDim</c> field of the instance of the <c>AgreementLineQuantityCommitment</c> record.
    /// </returns>
    /// <remarks>
    ///    All active inventory dimension fields that are not set in the
    ///    <c>AgreementLineQuantityCommitment</c> object are considered as editable.
    /// </remarks>
    public Map getEditableInventDimFieldsPerLines()
    {
        AgreementLineQuantityCommitment    curAgreementLine;
        InventDimParm                      curInventDimParm;
        InventDim                          curAgreementInventDim;

        // If this info allready cached - return it right away...
        if (editableInventDimFieldsPerLine)
        {
            return editableInventDimFieldsPerLine;
        }

        // There is no previously cached information available...
        // We'll create it
        editableInventDimFieldsPerLine = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);

        while select curAgreementLine
            where curAgreementLine.Agreement == purchAgreementHeader.RecId
        {
            curInventDimParm.clear();

            // All active InventDim fields....
            InventDimGroupSetup::newInventTable(curAgreementLine.inventTable()).inventDimParmActive(curInventDimParm);

            // All invent dim fields for current Agreement Line....
            curAgreementInventDim = curAgreementLine.inventDim(false);

            // Calculate editable fields...
            curInventDimParm = this.calculateEditableInventDimFields(curInventDimParm, curAgreementInventDim);

            // Register harvested information...
            editableInventDimFieldsPerLine.insert(curAgreementLine.RecId, curInventDimParm);
        }
        return editableInventDimFieldsPerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a line instance of the <c>TmpPurchLine</c> table from the specified header instance of
    ///    the <c>TmpPurchTable</c> table.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    The header instance from which to initialize.
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    The line instance to initialize.
    /// </param>
    /// <remarks>
    ///    This method copies the address information along with the <c>VendorAccount</c> field.
    /// </remarks>
    public void initFromHeader(TmpPurchTable _releaseOrderTable,
                               TmpPurchLine  _releaseOrderLine  )
    {
        // Transfer Address fields...
        this.copyLineAddressInfoFromHeader(_releaseOrderTable, _releaseOrderLine);

        // Transfer VendAccount
        _releaseOrderLine.VendAccount =_releaseOrderTable.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        releaseLineToBaselineStorageDimensionsDefaulting = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        this.createReleaseLineListFromBuffer();
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAgreementHeader</Name>
				<Source><![CDATA[
    public PurchAgreementHeader parmPurchAgreementHeader(PurchAgreementHeader _purchAgreementHeader = purchAgreementHeader)
    {
        if (_purchAgreementHeader != purchAgreementHeader)
        {
            // Need reset cached information about the editable InventDim fields per line....
            editableInventDimFieldsPerLine = null;
        }
        purchAgreementHeader = _purchAgreementHeader;
        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAutoCreateListener</Name>
				<Source><![CDATA[
    public PurchAutoCreateListener parmPurchAutoCreateListener(PurchAutoCreateListener _purchAutoCreateListener = purchAutoCreateListener)
    {
        purchAutoCreateListener = _purchAutoCreateListener;

        return purchAutoCreateListener;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseOrderLine</Name>
				<Source><![CDATA[
    public TmpPurchLine parmReleaseOrderLine(TmpPurchLine _releaseOrderLine = releaseOrderLine)
    {
        releaseOrderLine = _releaseOrderLine;
        return releaseOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseOrderTable</Name>
				<Source><![CDATA[
    public TmpPurchTable parmReleaseOrderTable(TmpPurchTable _releaseOrderTable = releaseOrderTable)
    {
        releaseOrderTable = _releaseOrderTable;
        return releaseOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreRelaseLineBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Restores the <c>TmpPurchTable</c> buffer.
    /// </summary>
    protected void restoreRelaseLineBuffer()
    {
        List list;
        ListEnumerator le;

        list = List::create(releaseLineList);
        le = list.getEnumerator();
        while (le.moveNext())
        {
            releaseOrderLine = le.current();
            releaseOrderLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a release purchase order on the server.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    A deadlock could not be avoided after a series of tries.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict was detected within the nested transaction.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        this.progressInit("@SYS8801", 0,#Avifilemove, 1);
        progress.updateInterval(0);
        progress.setCount(0);
        progress.setText("@SYS26198");

        setPrefix("@SYS26198");

        try
        {
            if (!releaseOrderLine)
            {
                // Retrieve the temp buffer.
                select releaseOrderLine;
            }

            this.createOrder(releaseOrderLine, releaseOrderTable);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                this.restoreRelaseLineBuffer();
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the purchase order is correct.
    /// </summary>
    /// <param name="calledFrom">
    ///    The object or form that calls the method.
    /// </param>
    /// <returns>
    ///    true if the data is valid and can be used to created a sales release order; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);
        if (ret)
        {
            ret = this.check();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the <c>DeliveryDate</c> field is within the corresponding validity period of the
    ///    <c>AgreementLineQuantityCommitment</c> object.
    /// </summary>
    /// <param name="_releaseLineToTest">
    ///    An instance of the <c>TmpPurchLine</c> record to test.
    /// </param>
    /// <param name="_agreementLineQuantityCommitment">
    ///    An instance of the <c>AgreementLineQuantityCommitment</c> object to test.
    /// </param>
    /// <returns>
    ///    true if the specified value of the <c>DeliveryDate</c> field is in the validity period of a
    ///    corresponding <c>BlankeOrder</c> object.
    /// </returns>
    public static boolean checkDeliveryDate(TmpPurchLine _releaseLineToTest,
                                            AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        if (    _releaseLineToTest.DeliveryDate < _agreementLineQuantityCommitment.EffectiveDate
            ||  _releaseLineToTest.DeliveryDate > _agreementLineQuantityCommitment.ExpirationDate)
        {
            return checkFailed("@SYS135468");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchAgreementGenerateReleaseOrder construct()
    {
        return new PurchAgreementGenerateReleaseOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  args)
    {
        PurchAgreementGenerateReleaseOrder purchCreateReleaseOrder;
        FormDataSource                     purchAgreementHeader_ds;

        if (!args)
        {
            throw error("@SYS25407");
        }

        purchCreateReleaseOrder = PurchAgreementGenerateReleaseOrder::construct();

        if (args.dataset() && args.dataset() == tableNum(PurchAgreementHeader))
        {
            if (FormDataUtil::isFormDataSource(args.record()))
            {
                purchAgreementHeader_ds = FormDataUtil::getFormDataSource(args.record());
            }

            purchCreateReleaseOrder.parmPurchAgreementHeader(args.record().data());
        }

        if (purchCreateReleaseOrder.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
            {
                purchCreateReleaseOrder.runOperation();
            }

            if (purchAgreementHeader_ds)
            {
                purchAgreementHeader_ds.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler of modification of dimension fields.
    /// </summary>
    /// <param name = "_tmpPurchReleaseLine">A release order line record.</param>
    /// <param name = "_inventDim">The lines <c>InventDim</c> record.</param>
    /// <param name = "_dimFieldId">The dimension field ID.</param>
    /// <returns>True if the <c>InventDim</c> was potentially updated; false, otherwise.</returns>
    public boolean modifyInventDim(TmpPurchLine _tmpPurchReleaseLine, InventDim _inventDim, FieldId _dimFieldId)
    {
        ItemId itemId = _tmpPurchReleaseLine.ItemId;

        if (!itemId)
        {
            return false;
        }

		if(!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(itemId, _inventDim))
        {
            return false;
        }

        boolean productDimensionModified    = InventDim::isFieldIdProductDimension(_dimFieldId);
        boolean inventSiteIdModified        = fieldNum(InventDim, InventSiteId) == _dimFieldId;

        if (productDimensionModified || inventSiteIdModified)
        {
            if (productDimensionModified)
            {
                _inventDim = this.resetStorageDimensionsToBaseline(_tmpPurchReleaseLine.AgreementLineQuantityCommitment, _inventDim);
                _tmpPurchReleaseLine.initVariantId(_inventDim);
            }

            _tmpPurchReleaseLine.InventDimId = this.initDimensionsSpecificDefaulting(itemId, _inventDim, false).inventDimId;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemOrderSetupType</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns the type of item order setup.
    /// </summary>
    /// <returns>Type of item order setup.</returns>
    public InventItemOrderSetupType getInventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
	/// <summary>
    /// Sets storage dimensions i.e. site and warehouse based on the vendor.
    /// </summary>
    /// <param name = "_releaseLineInventDimInventory"><c>InventDim</c> record to update.</param>
    /// <returns>Updated <c>InventDim</c> record.</returns>
    public InventDim setStorageDimensionsFromHeader(InventDim _releaseLineInventDimInventory)
    {
        // Look for the vendor card:
        VendTable agreementVendor = purchAgreementHeader.vendTable();

        // Vendor card has Site - use it to default Site settings for release line
        _releaseLineInventDimInventory.InventSiteId		= agreementVendor.InventSiteId;
        _releaseLineInventDimInventory.InventLocationId = agreementVendor.InventLocation;

        return InventDim::findOrCreate(_releaseLineInventDimInventory);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>