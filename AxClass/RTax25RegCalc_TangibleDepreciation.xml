<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TangibleDepreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_TangibleDepreciation extends RTax25RegCalc_AssetsInfo implements BatchRetryable
{
    Counter         transCount;
    AmountMST       amountFooter, amountTotal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    protected void createFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooterRecord</Name>
				<Source><![CDATA[
    private void createFooterRecord(RefRecId        _profitTableRecId,
                                    RAssetId        _accountNum  = "",
                                    int             _i           = 0,
                                    TempStr         _description = "",
                                    TempStr         _product     = "")
    {
        regQuery.addFooterRecord(_profitTableRecId,
                                 [dateNull(),
                                 strfmt(_accountNum),
                                 RAssetTable::find(_accountNum).Name,
                                 _product,
                                 "",
                                 0.0,
                                 0.0,
                                 0.0,
                                 "",
                                 amountFooter,
                                 0.0],
                                 0,
                                 _description ? _description : strfmt("@GLS104014", _accountNum),
                                 _i);

    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderRecord</Name>
				<Source><![CDATA[
private void createHeaderRecord(
        RefRecId _profitTableRecId,
        RAssetId _accountNum  = "",
        int      _i           = 0,
        TempStr  _description = "")
    {
        regQuery.addHeaderRecord(_profitTableRecId,
                                 conNull(),
                                 0,
                                 _description ? _description :
                                  (_accountNum ? strfmt("@GLS104112", _accountNum) : "@SYS28004"),
                                 _i);
    
    }
]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
protected void createTotal()
    {
        regQuery.insertDatabase();
        regQuery.initRegBuffer();
        this.sortRegisterTrans();
    }
]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    private void sortRegisterTrans()
    {
        RTax25RegisterTrans_TangibleDepr    registerTrans;
        RTax25RegisterProfit        profitTable;
        RTax25ProfitId              lastProfitId = "@GLS111174";
        RAssetId                    accountNum, lastAccount = '';
        AmountMST                   tempAmount, amountCode = 0.0, amountProd;
        int                         i = 1;
        boolean                     ret = false, pret = false, qret = false, lret = false;
    
        void createbody()
        {
            pret = true;
            if (! ret)
            {
                if (! qret)
                {
                    this.createHeaderRecord(0, "", i);
                    i++;
                }
                if (! lret)
                {
                    this.createHeaderRecord(0, "", i, strfmt("@GLS104871"));
                    i++;
                    lret = true;
                }
                this.createHeaderRecord(profitTable.rTax25ProfitTable,
                                        RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId,
                                        i,
                                        RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId ? "" : strfmt("@GLS104872"));
                i++;
                ret  = true;
                pret = false;
                qret = true;
            }
            accountNum = registerTrans.InventNum;
            if (lastAccount != accountNum || lastProfitId != RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId)
            {
                if (lastAccount != "")
                {
                    this.createFooterRecord(RTax25ProfitTable::findByProfitId(lastProfitId).RecId, lastAccount, i, "");
                    amountFooter = 0;
                    i++;
                }
                if (lastProfitId != RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId
                 && lastProfitId != "@GLS111174")
                {
                    amountFooter = amountCode;
                    this.createFooterRecord(RTax25ProfitTable::findByProfitId(lastProfitId).RecId, "", i, strfmt("@GLS103999", lastProfitId));
                    amountFooter = 0;
                    i++;
                }
                if (lastProfitId != RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId
                 && pret)
                {
                    this.createHeaderRecord(profitTable.rTax25ProfitTable, RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId, i);
                    i++;
                    amountCode = 0;
                }
                this.createHeaderRecord(profitTable.rTax25ProfitTable, accountNum, i);
                i++;
                lastProfitId    = RTax25ProfitTable::find(profitTable.rTax25ProfitTable).ProfitId;
                lastAccount     = accountNum;
            }
            tempAmount    = registerTrans.DeprAmount;
            amountFooter += tempAmount;
            amountProd   += tempAmount;
            amountCode   += tempAmount;
            amountTotal  += tempAmount;
            registerTrans.TotalDeprAmount = amountFooter;
            registerTrans.LineNumber = i;
            registerTrans.doUpdate();
            i++;
            ret = true;
            progress.incCount();
        }
    
        void createFooter(boolean _parm = false, TempStr descr = "")
        {
            if (ret)
            {
                this.createFooterRecord(RTax25ProfitTable::findByProfitId(lastProfitId).RecId, lastAccount, i);
                i++;
                amountFooter = amountCode;
                this.createFooterRecord(RTax25ProfitTable::findByProfitId(lastProfitId).RecId, "", i, strfmt("@GLS103999", lastProfitId));
                i++;
            }
            if (_parm && (pret || ret))
            {
                amountFooter = amountProd;
                this.createFooterRecord(0, "", i, descr);
                i++;
            }
        }
    
        void purge()
        {
            lastAccount  = "";
            lastProfitId = "@GLS111174";
            amountFooter = 0;
            amountCode   = 0;
            pret         = ret;
            ret          = false;
        }
    
        progress.setText("@SYS4138");
        progress.setTotal(transCount);
        progress.setCount(0);
    
        ttsbegin;
    
        while select forupdate rTax25ProfitTable from profitTable
            order by ProductionAsset, Condition, rTax25ProfitTable
            where profitTable.RegisterId        == registerId  &&
                  profitTable.ProductionAsset   == RTax25AssetProductionType::Production
            join forupdate LineNumber, InventNum, DeprAmount, TotalDeprAmount from registerTrans
                order by LineNumber desc
                where registerTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                      registerTrans.rTax25ProfitTable == profitTable.rTax25ProfitTable
        {
            createBody();
        }
        createFooter(true, strfmt("@GLS104107"));
    
        amountProd = 0;
        lret       = 0;
        purge();
        while select forupdate rTax25ProfitTable from profitTable
            order by ProductionAsset, Condition, rTax25ProfitTable
            where profitTable.RegisterId        == registerId  &&
                  profitTable.ProductionAsset   == RTax25AssetProductionType::NonProduction
            join forupdate LineNumber, InventNum, DeprAmount, TotalDeprAmount from registerTrans
                order by LineNumber desc
                where registerTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                      registerTrans.rTax25ProfitTable == profitTable.rTax25ProfitTable
        {
            createBody();
        }
        createFooter(false, strfmt("@GLS104107"));
    
        purge();
        profitTable  = null;
    
        while select forupdate LineNumber, InventNum, DeprAmount, TotalDeprAmount from registerTrans
            order by LineNumber desc
            where registerTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                  registerTrans.LineNumber <= 0
    
        {
            createBody();
        }
        createFooter(true, "@GLS104870");
    
        if (qret)
        {
             amountFooter = amountTotal;
             this.createFooterRecord(0, "", i, "@SYS9242");
        }
    
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
protected AmountMST tableOperation()
    {
        AmountMST                   mstAmount, baseAmount = 0.0;
        RAssetLifeTime              monthsLine, lifeTime;
        TransDate                   deductionDate;
        RTax25StdDocuments          stddocuments;
        RTax25LedgerRun             ledgerRun;
        RAssetDeprProfile           deprProfile;
    
        GeneralJournalAccountEntry          accountEntry, offsetAccountEntry;
        GeneralJournalAccountEntry_W        accountEntryW, offsetAccountEntryW;
        GeneralJournalEntry                 journalEntry;
        DimensionAttributeLevelValueView    dimAccount,             offsetDimAccount;
    
        DimensionAttribute          mainAccountAttr = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
        deprMethod      = this.assetDeprMethod(dateFrom);
    
        rTax25PeriodIterator.first(true);
    
        do
        {
        select firstonly
                ReportingDate,
            AssetTransType,
            AttachDocumentNumber,
            AttachDocumentDate
            from rAssetTrans
                order by  ReportingDate desc
            where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                    (!rTax25PeriodIterator.fromDateAccounting()                                 ||
                      rAssetTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting()) &&
                    (!rTax25PeriodIterator.fromDateReporting()                                  ||
                      rAssetTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting())  &&
                      rAssetTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()    &&
                      rAssetTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()     &&
                  rAssetTrans.AssetStandardId == assetStandardId                       &&
                  (rAssetTrans.AssetTransType == RAssetTransType::Disposal             ||
                   rAssetTrans.AssetTransType == RAssetTransType::DisposalSale         ||
                   rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap)       &&
                  ! rAssetTrans.StornoRecId;
    
            if (deductionDate < rAssetTrans.ReportingDate)
        {
                deductionDate  = rAssetTrans.ReportingDate;
        }
        }
        while (rTax25PeriodIterator.next());
    
        rTax25PeriodIterator.first();
    
        do
        {
        while select rAssetTrans
            where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                        rAssetTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting() &&
                        rAssetTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()   &&
                        rAssetTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting()  &&
                        rAssetTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()    &&
                  rAssetTrans.AssetStandardId == assetStandardId                       &&
                  (rAssetTrans.AssetTransType == RAssetTransType::Depreciation         ||
                  rAssetTrans.AssetTransType  == RAssetTransType::DepreciationAdj)     &&
                  ! rAssetTrans.StornoRecId
        {
                lifeTime  = this.lifeTime(rAssetTrans.ReportingDate);
                this.reduceFactor(rAssetTrans.ReportingDate);
            mstAmount += - rAssetTrans.AmountMST;
    
            if (!retHeader)
            {
                lastAssetId = rAssetTable.AccountNum;
                retHeader   = true;
            }
            else if (lastAssetId != rAssetTable.AccountNum)
            {
                lastAssetId = rAssetTable.AccountNum;
            }
    
                this.baseCostValue(rAssetTrans.ReportingDate, endmth(deductionDate) == endmth(rAssetTrans.ReportingDate) ? false : true);
                monthsLine  = this.deprMonthsCalc(rAssetTrans.ReportingDate);
            if (rAssetSumTrans.acquisitionValueMST() + rAssetSumTrans.depreciationTotalMST() == 0)
            {
                baseCostValue = baseAmount;
                monthsLine    = lifeTime;
            }
            baseAmount     = baseCostValue;
                productionSign = this.productionSign(rAssetTrans.Voucher, rAssetTrans.ReportingDate);
    
            profitTableRecId = RTax25ProfitTable::findDefaultDimension(
                                    rAssetTrans.DefaultDimension ? rAssetTrans.DefaultDimension : LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(rAssetTrans.LedgerDimension),
                                    false,
                                    registerId).RecId;
    
            if (!profitTableRecId)
            {
                stddocuments = RTax25StdDocuments::construct();
                ledgerRun    = RTax25LedgerRun::newRegisterId(stddocuments, "", registerId);
    
                while select LedgerDimension from accountEntry
                    join EntityInstance from dimAccount
                        where dimAccount.ValueCombinationRecId  == accountEntry.LedgerDimension   &&
                            dimAccount.DimensionAttribute     == mainAccountAttr.RecId
                    join RecId from accountEntryW
                        where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
                    join RecId from offsetAccountEntryW
                        where offsetAccountEntryW.BondBatchTrans_RU == accountEntryW.BondBatchTrans_RU
                    join LedgerDimension from offsetAccountEntry
                        where offsetAccountEntry.GeneralJournalEntry == accountEntry.GeneralJournalEntry
                            && offsetAccountEntry.RecId == offsetAccountEntryW.GeneralJournalAccountEntry
                            && offsetAccountEntry.RecId != accountEntry.RecId
                            && offsetAccountEntry.IsCredit != accountEntry.IsCredit
                    join EntityInstance from offsetDimAccount
                        where offsetDimAccount.ValueCombinationRecId  == offsetAccountEntry.LedgerDimension &&
                            offsetDimAccount.DimensionAttribute     == mainAccountAttr.RecId
                    exists join journalEntry
                        where journalEntry.RecId  == accountEntry.GeneralJournalEntry &&
                            journalEntry.Ledger == Ledger::current()
                {
                    profitTableRecId = ledgerRun.checkAccountsInRange(dimAccount.EntityInstance,
                                                                      LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountEntry.LedgerDimension),
                                                                      offsetDimAccount.EntityInstance,
                                                                      LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetAccountEntry.LedgerDimension));
                    if (profitTableRecId)
                        break;
                }
            }
    
                deprProfile = rAssetStandards.deprProfile(dateFrom);
            transCount++;
            regQuery.addBodyRecord(profitTableRecId,
                                        [rAssetTrans.ReportingDate,
                                  strfmt(rAssetTable.AccountNum),
                                  rAssetTable.Name,
                                  productionSign ? "@SYS5461" : "@SYS2048",
                                        deprProfile.Name ? deprProfile.Name : deprProfile.DeprProfile,
                                  reduceFactor,
                                  origCostValue,
                                  baseCostValue,
                                  baseCostValue ? int2str(lifeTime - monthsLine) : int2str(lifeTime),
                                  - rAssetTrans.AmountMST,
                                  mstAmount],
                                        tableNum(RAssetTrans),
                                        rAssetTrans.TransRecId,
                                  strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name),
                                  -transCount);
        }
        }
        while (rTax25PeriodIterator.next());
    
        return mstAmount;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>