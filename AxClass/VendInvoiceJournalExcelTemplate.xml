<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

/// <summary>
/// The <c>VendInvoiceJournalExcelTemplate</c> is the supporting class for the Vendor invoice journal excel template.
/// </summary>
public class VendInvoiceJournalExcelTemplate extends DocuTemplateRegistrationBase implements LedgerIJournalExcelTemplate
{
    private const DocuTemplateName ExcelTemplateName = resourceStr(VendInvoiceJournalTemplate);
    private const DataEntityName LineEntityName = tableStr(VendInvoiceJournalLineEntity);
    private const FieldName LineEntityJournalNum = fieldStr(VendInvoiceJournalLineEntity, JournalBatchNumber);
    private const FieldName LineEntityDataAreaId = fieldStr(VendInvoiceJournalLineEntity, dataAreaId);
    private const DataEntityName HeaderEntityName = tableStr(VendInvoiceJournalHeaderEntity);
    private const FieldName HeaderEntityJournalNum = fieldStr(VendInvoiceJournalHeaderEntity, JournalBatchNumber);
    private const FieldName HeaderEntityDataAreaId = fieldStr(VendInvoiceJournalHeaderEntity, dataAreaId);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    public boolean isJournalTypeSupported(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::VendInvoiceRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTemplateName</Name>
				<Source><![CDATA[
    public DocuTemplateName documentTemplateName()
    {
        return ExcelTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCustomTrimming</Name>
				<Source><![CDATA[
    public void applyCustomTrimming(Excel.IWorkbookManager _templateManager, Excel.WorkbookSettingsManager _settingsManager, LedgerJournalTable _ledgerJournalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedAccountTypes()
    {
        Set accountTypeSet = new Set(Types::Integer);

        accountTypeSet.add(LedgerJournalACType::FixedAssets);
        accountTypeSet.add(LedgerJournalACType::Ledger);
        accountTypeSet.add(LedgerJournalACType::Project);
        accountTypeSet.add(LedgerJournalACType::Vend);

        return accountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedOffsetAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedOffsetAccountTypes()
    {
        Set offsetAccountTypeSet = new Set(Types::Integer);

        offsetAccountTypeSet.add(LedgerJournalACType::FixedAssets);
        offsetAccountTypeSet.add(LedgerJournalACType::Ledger);
        offsetAccountTypeSet.add(LedgerJournalACType::Project);
        offsetAccountTypeSet.add(LedgerJournalACType::Vend);

        return offsetAccountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedAssetTransTypes</Name>
				<Source><![CDATA[
    public Set supportedAssetTransTypes()
    {
        Set assetTransTypeSet = new Set(Types::Integer);

        assetTransTypeSet.add(AssetTransTypePurch::Acquisition);
        assetTransTypeSet.add(AssetTransTypePurch::AcquisitionAdj);

        return assetTransTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForTemplate</Name>
				<Source><![CDATA[
    public boolean validateJournalForTemplate(LedgerJournalTable _ledgerJournalTable)
    {
        return LedgerJournalExcelTemplate::validateJournalForTemplate(_ledgerJournalTable, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTemplates</Name>
				<Source><![CDATA[
    public void registerTemplates()
    {
        this.addTemplate(
            OfficeAppApplicationType::Excel,
            ExcelTemplateName,
            ExcelTemplateName,
            literalStr("@AccountsPayable:VendInvoiceJournalTemplateDescription"),
            literalStr("@AccountsPayable:VendInvoiceJournalTemplateDisplayName"),
            NoYes::No,
            NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerEntityName</Name>
				<Source><![CDATA[
    public DataEntityName headerEntityName()
    {
        return HeaderEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEntityName</Name>
				<Source><![CDATA[
    public DataEntityName lineEntityName()
    {
        return LineEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName headerJournalBatchNumberFieldName()
    {
        return HeaderEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName headerDataAreaFieldName()
    {
        return HeaderEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName lineJournalBatchNumberFieldName()
    {
        return LineEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName lineDataAreaFieldName()
    {
        return LineEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendHeaderEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendHeaderEntityFilters(FilterCollectionNode _headerFilter, ExportToExcelFilterTreeBuilder _headerFilterBuilder)
    {
        return _headerFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLineEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendLineEntityFilters(FilterCollectionNode _lineFilter, ExportToExcelFilterTreeBuilder _lineFilterBuilder)
    {
        FilterCollectionNode accountTypeFilter = _lineFilterBuilder.or(
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, AccountType), LedgerJournalACType::Vend),
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, AccountType), LedgerJournalACType::Ledger));

        accountTypeFilter = _lineFilterBuilder.or(accountTypeFilter,
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, AccountType), LedgerJournalACType::FixedAssets));

        accountTypeFilter = _lineFilterBuilder.or(accountTypeFilter,
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, AccountType), LedgerJournalACType::Project));

        FilterCollectionNode offsetAccountTypeFilter = _lineFilterBuilder.or(
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, OffsetAccountType), LedgerJournalACType::Ledger),
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, OffsetAccountType), LedgerJournalACType::FixedAssets));

        offsetAccountTypeFilter = _lineFilterBuilder.or(offsetAccountTypeFilter,
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, OffsetAccountType), LedgerJournalACType::Project));

        offsetAccountTypeFilter = _lineFilterBuilder.or(offsetAccountTypeFilter,
            _lineFilterBuilder.areEqual(fieldStr(VendInvoiceJournalLineEntity, OffsetAccountType), LedgerJournalACType::Vend));

        FilterCollectionNode accountAndOffsetAccountTypeFilter = _lineFilterBuilder.and(accountTypeFilter, offsetAccountTypeFilter);

        return _lineFilterBuilder.and(_lineFilter, accountAndOffsetAccountTypeFilter);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>