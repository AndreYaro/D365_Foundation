<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPRPeriodicCreateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFMPRPeriodicCreateController extends SysOperationServiceController implements BatchRetryable
{
    #define.defaultTasksNumber(10)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    protected CFMPRPeriodicCreateTaskController createTask(Query _query, TableId _dataSourceTableId)
    {
        //initialize new task
        CFMPRPeriodicCreateTaskController taskController = new CFMPRPeriodicCreateTaskController();

        //setup task parameters
        CFMPRPeriodicCreateTaskContract taskDataContract = taskController.getDataContractObject();

        taskDataContract.parmPaymentRequestSourceQuery(_query);
        taskDataContract.parmQueryDataSourceTableId(_dataSourceTableId);

        return taskController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@Cashflowmanagement:PaymRequestCreation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    public Batch doBatch()
    {
        BatchHeader batchHeader;

        if (executionMode == SysOperationExecutionMode::ScheduledBatch)
        {
            // Setup alerts so that they alert on success or error via a popup toast
            // If the job is setup for scheduled batch
            batchHeader = this.batchInfo().parmBatchHeader();
            batchHeader.clearAllAlerts();

            batchHeader.addUserAlerts(curUserId(),  // alert user who created the job
                NoYes::Yes,                         // completed
                NoYes::Yes,                         // error
                NoYes::No,                          // canceled
                NoYes::Yes,                         // popup or toast in desktop client
                NoYes::No);                         // email
        }
        else if (executionMode == SysOperationExecutionMode::ReliableAsynchronous)
        {
            // Alerts don't fire in reliable async mode so clear them
            batchHeader = this.batchInfo().parmBatchHeader();
            batchHeader.clearAllAlerts();

            batchHeader.addUserAlerts(curUserId(),  // alert user who created the job
                NoYes::No,                          // completed
                NoYes::No,                          // error
                NoYes::No,                          // canceled
                NoYes::No,                          // popup or toast in desktop client
                NoYes::No);                         // email
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.parmClassName(classStr(CFMPRPeriodicCreateController));
        this.parmMethodName(methodStr(CFMPRPeriodicCreateController, scheduleJob));

        // this controller always runs via batch. It schedules multiple tasks
        // in the batch job it is scheduled in.
        this.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleJob</Name>
				<Source><![CDATA[
    public void scheduleJob(CFMPRPeriodicCreateContract _dataContract)
    {
        container sourceTypesAllowed;
        container sourcesContainer = _dataContract.parmPaymentRequestSources();
        CFMPRPeriodicCreateQueryBuilder sourceQueryBuilder;
        CFMQuerySplitter sourceQuerySplitter;
        Query sourceQuery;
        TableId sourceTableId;
        BatchJob currentJob;

        int totalTasksNumber = _dataContract.parmThreadsNumber() ? _dataContract.parmThreadsNumber() : #defaultTasksNumber;

        // This sample can only function in batch mode
        if (!this.isInBatch())
        {
            throw error("@SYS4160071");
        }

        // Get the header of the currently executing job
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        RefRecId batchJobId  = batchHeader.parmBatchHeaderId();

        // the delete on success flag (runtimeJob) seems to be lost when altering the batch header.
        // Restoring it. This parameter is set when the job is created to execute in reliable
        // async mode
        select RuntimeJob from currentJob 
            where currentJob.RecId == batchJobId;

        batchHeader.parmRuntimeJob(currentJob.RuntimeJob);

        //Get all allowed payment request source types
        sourceTypesAllowed = CFMPRSourceTypesSelector::allowedSourceTypes();

        for (Counter sourcesCounter = 1; sourcesCounter <= conLen(sourceTypesAllowed); sourcesCounter++)
        {
            //Check if current type of payment request source was selected
            CFMPaymentRequestSourceType sourceType = conPeek(sourceTypesAllowed, sourcesCounter);

            if (conFind(sourcesContainer, CFMPRSourceTypesSelector::textValue(sourceType)))
            {
                sourceQueryBuilder = CFMPRPeriodicCreateQueryBuilder::construct(
                    sourceType,
                    _dataContract.parmDateFrom(),
                    _dataContract.parmDateTo(),
                    _dataContract.parmPaymentRequestDataAreas());

                sourceQuery = sourceQueryBuilder.getPaymentRequestSourceQuery();
                sourceTableId = sourceQueryBuilder.getQueryDataSourceTableId();

                sourceQuerySplitter = CFMQuerySplitter::construct(
                    sourceQuery,
                    sourceTableId,
                    totalTasksNumber);

                while(sourceQuerySplitter.nextInterval())
                {
                    batchHeader.addRuntimeTask(this.createTask(
                            sourceQuerySplitter.getIntervalQuery(),
                            sourceTableId),
                       0);
                }
            }
        }

        ttsbegin;
        // Save the current batch header
        batchHeader.save();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CFMPRPeriodicCreateController serviceController = new CFMPRPeriodicCreateController();

        serviceController.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
        SysOperationStartResult ret = serviceController.startOperation();

        if (ret == SysOperationStartResult::Started || ret == SysOperationStartResult::AddedToBatchQueue)
        {
            info("@Cashflowmanagement:OperationSubmittedForProcessing");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>