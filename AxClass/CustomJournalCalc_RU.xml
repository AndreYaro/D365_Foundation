<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalCalc_RU
{
    CustomJournalTable_RU   customJournalTable;
    CustomJournalTrans_RU   customJournalTrans;

    CustomJournalType_RU    customJournalType;
    CustomPartition_RU      customPartition;

    CurrencyCode            standardCurrencyCode;
    CurrencyCode            customCurrencyCode;

    DlvTermId               dlvTermId;
    Map                     dutyCustomPartition;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAdminCharge</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcAdminCharge()
    {
        CustomJournalTotalAmounts_RU    customJournalTotalAmounts;
        TaxTable                        taxTable;
        CustomChargeType_RU             customChargeType;

        if (! customJournalTable)
        {
            return;
        }

        if (customJournalType == CustomJournalType_RU::Export)
            customChargeType = CustomChargeType_RU::AdministrationExport;
        else if (customJournalType == CustomJournalType_RU::Import)
            customChargeType = CustomChargeType_RU::AdministrationImport;

        taxTable = TaxTable::findCustomCharge_RU(customChargeType);

        if (! taxTable)
        {
            throw error(strFmt("@GLS115421", enum2str(customChargeType)));
        }

        customJournalTotalAmounts = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable);

        if (! customJournalTable.selectForUpdate())
        {
            customJournalTable.selectForUpdate(true);
            customJournalTable.reread();
        }

        customJournalTable.InvoiceAdminCharge    = CurrencyExchangeHelper::amount(Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, customJournalTable.PlanArrivalDate, customCurrencyCode, customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost), customJournalType == CustomJournalType_RU::Export ? TaxModuleType::Sales : TaxModuleType::Purch, 1));
        customJournalTable.IndicativeAdminCharge = CurrencyExchangeHelper::amount(Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, customJournalTable.PlanArrivalDate, customCurrencyCode, customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost), customJournalType == CustomJournalType_RU::Export ? TaxModuleType::Sales : TaxModuleType::Purch, 1));
        customJournalTable.EstimativeAdminCharge = CurrencyExchangeHelper::amount(Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, customJournalTable.PlanArrivalDate, customCurrencyCode, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost), customJournalType == CustomJournalType_RU::Export ? TaxModuleType::Sales : TaxModuleType::Purch, 1));
        if (customJournalTable)
        {
            customJournalTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDuty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomAmount_RU calcDuty(ItemId                  _itemId,
                                    FEACCId_RU              _feaccId,
                                    AddressCountryRegionId  _countryRegionId,
                                    TransDate               _onDate,
                                    TaxBase                 _baseAmount,
                                    Qty                     _baseQty,
                                    UnitOfMeasureSymbol     _unitID,
                                    CustomPartition_RU      _customPartition,
                                    boolean                 _isIndicative = false)
    {
        TaxTable                taxTable;

        CustomAmount_RU         customAmount;
        CustomAmount_RU         customAmountFirst;
        CustomAmount_RU         customAmountSecond;
        TaxCode                 taxCode;
        CustomJournalTrans_RU   tmpCustomJournalTrans;
        TaxData                 taxData;
        UnitOfMeasureSymbol     unitIdConvertFrom, unitIdConvertTo;
        real                    valueConvert;
        CustomAmount_RU         cost;

        void calcValueFirst()
        {
            customAmountFirst = Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, _onDate, customCurrencyCode, _baseAmount,
                                                                         (customJournalType == CustomJournalType_RU::Export) ? TaxModuleType::Sales : TaxModuleType::Purch,
                                                                         _baseQty, _unitID, _itemId);
        }

        void calcValueSecond()
        {
            while select tmpCustomJournalTrans
                where tmpCustomJournalTrans.CustomJournalId == customJournalTable.CustomJournalId &&
                      tmpCustomJournalTrans.CustomPartition == _customPartition
            {
                switch (taxTable.CustomCalcMethod_RU)
                {
                    case CustomCalcMethod_RU::Qty :
                        unitIdConvertFrom   = tmpCustomJournalTrans.UnitId;
                        valueConvert        = tmpCustomJournalTrans.Qty;
                        break;
                    case CustomCalcMethod_RU::Weight :
                        unitIdConvertFrom   = UnitOfMeasure::find(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure).Symbol;
                        valueConvert        = tmpCustomJournalTrans.ItemGrossWeight;
                        break;
                    case CustomCalcMethod_RU::Volume :
                        unitIdConvertFrom   = UnitOfMeasure::find(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume).UnitOfMeasure).Symbol;
                        valueConvert        = tmpCustomJournalTrans.Volume;
                        break;
                }

                cost = _isIndicative ? customJournalTrans.IndicativeCost : customJournalTrans.InvoiceCostInclMarkup;

                select firstonly taxData
                    where taxData.TaxCode     == taxCode    &&
                       (! taxData.TaxFromDate                ||
                         (taxData.TaxFromDate <= _onDate       &&
                          taxData.TaxToDate   >= _onDate))     &&
                        ((taxData.TaxLimitMin <= abs(cost)  &&
                         (taxData.TaxLimitMax >= abs(cost)) ||
                         (taxData.TaxLimitMin <= abs(cost)  &&
                         !taxData.TaxLimitMax)));

                if (taxData.CustomRateAmount_RU && unitIdConvertFrom && unitIdConvertTo)
                {
                    EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(customJournalTrans.ItemId,
																																			  customJournalTrans.InventDimId,
																																			  unitIdConvertFrom,
																																			  unitIdConvertTo,
																																			  NoYes::Yes);

                    if (ecoResProductUnitConverter.canValueBeConverted())
                    {
                        valueConvert = ecoResProductUnitConverter.convertValue(valueConvert);

                        if (taxData.CustomCalcQty_RU)
                            customAmountSecond += CurrencyExchangeHelper::mstAmount(taxData.CustomRateAmount_RU, taxData.CustomCurrencyCode_RU, _onDate) * valueConvert / taxData.CustomCalcQty_RU;
                    }
                    else
                    {
                        info(strFmt("@SYS50546", unitIdConvertFrom, unitIdConvertTo));
                    }
                }
            }
        }

        taxCode = FEACCCustomRateTable_RU::findOnDate(_feaccId, TaxType_W::CustomDuty_RU, CustomJournalCalc_RU::customAllImportExport(customJournalType), _countryRegionId, _onDate);

        if (! taxCode)
            return customAmount;

        taxTable = TaxTable::find(taxCode);

        unitIdConvertTo = taxTable.CustomUnitId_RU;

        switch (taxTable.CustomCombinedRate_RU)
        {
            case CustomCombinedRate_RU::None:
                calcValueFirst();

                customAmount = customAmountFirst;
                break;

            case CustomCombinedRate_RU::Max:
                calcValueFirst();
                calcValueSecond();

                customAmount = max(customAmountFirst, customAmountSecond);
                break;

            case CustomCombinedRate_RU::Sum:
                calcValueFirst();
                calcValueSecond();

                customAmount = customAmountFirst + customAmountSecond;
                break;
        }

        return CurrencyExchangeHelper::amount(customAmount, customCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDutyCorrection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomAmount_RU calcDutyCorrection(ItemId                    _itemId,
                                              FEACCId_RU                _feaccId,
                                              AddressCountryRegionId    _countryRegionId,
                                              TransDate                 _onDate,
                                              TaxBase                   _baseAmount,
                                              Qty                       _baseQty,
                                              UnitOfMeasureSymbol       _unitID,
                                              ItemGrossWeight           _itemGrossWeight = 0,
                                              Volume                    _volume = 0)
    {
        TaxTable                taxTable;

        CustomAmount_RU         customAmount;
        CustomAmount_RU         customAmountFirst;
        CustomAmount_RU         customAmountSecond;
        TaxCode                 taxCode;
        TaxData                 taxData;
        UnitOfMeasureSymbol     unitIdConvertFrom, unitIdConvertTo;
        real                    valueConvert;

        void calcValueFirst()
        {
            ;
            customAmountFirst = Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, _onDate, customCurrencyCode, _baseAmount,
                                                                         (customJournalType == CustomJournalType_RU::Export) ? TaxModuleType::Sales : TaxModuleType::Purch,
                                                                         _baseQty, _unitID, _itemId);
        }

        void calcValueSecond()
        {
            switch (taxTable.CustomCalcMethod_RU)
            {
                case CustomCalcMethod_RU::Qty :
                    unitIdConvertFrom   = _unitID;
                    valueConvert        = _baseQty;
                    break;
                case CustomCalcMethod_RU::Weight :
                    unitIdConvertFrom   = UnitOfMeasure::find(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure).Symbol;
                    valueConvert        = _itemGrossWeight;
                    break;
                case CustomCalcMethod_RU::Volume :
                    unitIdConvertFrom   = UnitOfMeasure::find(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume).UnitOfMeasure).Symbol;
                    valueConvert        = _volume;
                    break;
            }

            select firstonly taxData
                where taxData.TaxCode     == taxCode    &&
                   (! taxData.TaxFromDate                ||
                     (taxData.TaxFromDate <= _onDate       &&
                      taxData.TaxToDate   >= _onDate))     &&
                    ((taxData.TaxLimitMin <= abs(_baseAmount)  &&
                     (taxData.TaxLimitMax >= abs(_baseAmount)) ||
                     (taxData.TaxLimitMin <= abs(_baseAmount)  &&
                     !taxData.TaxLimitMax)));

            if (taxData.CustomRateAmount_RU && unitIdConvertFrom && unitIdConvertTo)
            {
                EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
																																		  customJournalTrans.InventDimId,
																																		  unitIdConvertFrom,
																																		  unitIdConvertTo,
																																		  NoYes::Yes);
                if (ecoResProductUnitConverter.canValueBeConverted())
                {
                    valueConvert = ecoResProductUnitConverter.convertValue(valueConvert);

                    if (taxData.CustomCalcQty_RU)
                        customAmountSecond += CurrencyExchangeHelper::mstAmount(taxData.CustomRateAmount_RU, taxData.CustomCurrencyCode_RU, _onDate) * valueConvert / taxData.CustomCalcQty_RU;
                }
                else
                {
                    info(strFmt("@SYS50546", unitIdConvertFrom, unitIdConvertTo));
                }
            }
        }

        taxCode = FEACCCustomRateTable_RU::findOnDate(_feaccId, TaxType_W::CustomDuty_RU, CustomJournalCalc_RU::customAllImportExport(customJournalType), _countryRegionId, _onDate);

        if (! taxCode)
            return customAmount;

        taxTable = TaxTable::find(taxCode);

        unitIdConvertTo = taxTable.CustomUnitId_RU;

        switch (taxTable.CustomCombinedRate_RU)
        {
            case CustomCombinedRate_RU::None:
                calcValueFirst();

                customAmount = customAmountFirst;
                break;

            case CustomCombinedRate_RU::Max:
                calcValueFirst();
                calcValueSecond();

                customAmount = max(customAmountFirst, customAmountSecond);
                break;

            case CustomCombinedRate_RU::Sum:
                calcValueFirst();
                calcValueSecond();

                customAmount = customAmountFirst + customAmountSecond;
                break;
        }

        return CurrencyExchangeHelper::amount(customAmount, customCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExcise</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomAmount_RU calcExcise(ItemId                    _itemId,
                                      FEACCId_RU                _feaccId,
                                      AddressCountryRegionId    _countryRegionId,
                                      TransDate                 _onDate,
                                      TaxBase                   _baseAmount,
                                      Qty                       _baseQty,
                                      UnitOfMeasureSymbol       _unitID)
    {
        CustomAmount_RU customAmount;
        TaxCode         taxCode;

        taxCode = FEACCCustomRateTable_RU::findOnDate(_feaccId, TaxType_W::Excise, CustomJournalCalc_RU::customAllImportExport(customJournalType), _countryRegionId, _onDate);

        if (! taxCode)
            return customAmount;

        customAmount = Tax::construct().taxCalcWithoutSource_RU(taxCode, _onDate, customCurrencyCode, _baseAmount,
                                                                (customJournalType == CustomJournalType_RU::Export) ? TaxModuleType::Sales : TaxModuleType::Purch,
                                                                _baseQty, _unitID, _itemId);

        return CurrencyExchangeHelper::amount(customAmount, customCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIndicativeCost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustomPrice_RU calculateIndicativeCost(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        FEACCId_RU              _feacC,
        VendAccountCustom_RU    _vendAccountCustom,
        TransDate               _onDate,
        Qty                     _qty,
        UnitOfMeasureSymbol     _unitID)
    {
        FEACCIndicativePrice_RU feaccIndicativePrice = FEACCIndicativePrice_RU::findOnDate(_feacC, _vendAccountCustom, _onDate);

        if (! feaccIndicativePrice && customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Indicative)
        {
            warning("@GLS115419");
        }

        CurrencyCode                currencyCode = feaccIndicativePrice.CurrencyCode;
        UnitOfMeasureSymbol         unitIdInvent = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;
        CustomPrice_RU              customPrice;
        
        if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                         _inventDimId,
                                                                                         _unitID,
                                                                                         feaccIndicativePrice.UnitId))
        {
            customPrice = InventTable::unitConvertValue(_itemId,
                                                        _unitID,
                                                        feaccIndicativePrice.UnitId,
                                                        unitIdInvent,
                                                        ((customJournalType == CustomJournalType_RU::Export) ? feaccIndicativePrice.CustomPriceExport : feaccIndicativePrice.CustomPriceImport) /
                                                            (feaccIndicativePrice.Qty ? feaccIndicativePrice.Qty : 1),
                                                        _inventDimId);
        }
        else
        {
            info(strFmt("@SYS50546", feaccIndicativePrice.UnitId, _unitID));
        }

        return CurrencyExchangeHelper::curAmount2CurAmount(customPrice * _qty, currencyCode, customCurrencyCode, customJournalTable.PlanArrivalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceCostInclMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustomAmount_RU calcInvoiceCostInclMarkup(InventTransId           _inventTransId,
                                                        Qty                     _qty,
                                                        CustomJournalTrans_RU   _customJournalTrans)
    {
        SalesLine               salesLine;
        PurchLine               purchLine;
        VendInvoiceTrans        vendInvoiceTrans;
        CustPackingSlipTrans    custPackingSlipTrans;
        VendPackingSlipTrans    vendPackingSlipTrans;

        CustomPrice_RU          customPrice;
        CurrencyCode            currencyCode;
        MarkupAmount            markupAmount = 0;
        UnitOfMeasureSymbol     unitIdInvent;

        switch (customJournalType)
        {
            case CustomJournalType_RU::Export:
                salesLine = SalesLine::findInventTransId(_inventTransId);

                if (salesLine)
                {
                    unitIdInvent = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
                    custPackingSlipTrans = CustPackingSlipTrans::findInventTransId_RU(_inventTransId);

                    EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                        salesLine.InventDimId,
                        salesLine.SalesUnit,
                        _customJournalTrans.UnitId);

                    if (custPackingSlipTrans && custPackingSlipTrans.Qty)
                    {
                        if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(custPackingSlipTrans.ItemId,
                            custPackingSlipTrans.InventDimId,
                            custPackingSlipTrans.SalesUnit,
							_customJournalTrans.UnitId))
                        {
                            currencyCode = standardCurrencyCode;

                            customPrice  = InventTable::unitConvertValue(custPackingSlipTrans.ItemId,
                                _customJournalTrans.UnitId,
                                custPackingSlipTrans.SalesUnit,
                                unitIdInvent,
                                custPackingSlipTrans.Qty
                                    ? custPackingSlipTrans.ValueMST / custPackingSlipTrans.Qty
                                    : 0.0,
                                custPackingSlipTrans.InventDimId);
                        }
                        else
                        {
                            info(strFmt("@SYS50546", custPackingSlipTrans.SalesUnit, _customJournalTrans.UnitId));
                        }
                    }
                    
                    if (!customPrice)
                    {
                        if (ecoResProductUnitConverter.canValueBeConverted())
                        {
                            currencyCode = salesLine.CurrencyCode;

                            customPrice  = InventTable::unitConvertValue(salesLine.ItemId, 
                                _customJournalTrans.UnitId, 
                                salesLine.SalesUnit, 
                                unitIdInvent, 
                                salesLine.PriceUnit
                                    ? salesLine.SalesPrice / salesLine.PriceUnit
                                    : salesLine.SalesPrice,
                                salesLine.InventDimId);
                        }
                        else
                        {
                            info(strFmt("@SYS50546", salesLine.SalesUnit, _customJournalTrans.UnitId));
                        }
                    }
                }
                break;

            case CustomJournalType_RU::Import:
                purchLine       = PurchLine::findInventTransId(_inventTransId);

                if (purchLine)
                {
                    unitIdInvent = InventTableModule::find(purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

                    EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                        purchLine.InventDimId,
                        purchLine.PurchUnit,
                        _customJournalTrans.UnitId);

                    switch (customJournalTable.CustomInventTransStatus)
                    {
                        case CustomInventTransStatus_RU::Ordered    :
                            vendPackingSlipTrans = VendPackingSlipTrans::findInventTransId_RU(_inventTransId);

                            if (vendPackingSlipTrans)
                            {
                                if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(vendPackingSlipTrans.ItemId,
									vendPackingSlipTrans.InventDimId,
									vendPackingSlipTrans.PurchUnit,
									_customJournalTrans.UnitId))
                                {
                                    currencyCode = standardCurrencyCode;

                                    customPrice  = InventTable::unitConvertValue(vendPackingSlipTrans.ItemId,
                                        _customJournalTrans.UnitId,
                                        vendPackingSlipTrans.PurchUnit,
                                        unitIdInvent,
                                        vendPackingSlipTrans.Qty
                                            ? vendPackingSlipTrans.ValueMST / vendPackingSlipTrans.Qty
                                            : 0.0,
                                        vendPackingSlipTrans.InventDimId);
                                }
                                else
                                {
                                    info(strFmt("@SYS50546", vendPackingSlipTrans.PurchUnit, _customJournalTrans.UnitId));
                                }
                            }
                            else
                            {
                                if (ecoResProductUnitConverter.canValueBeConverted())
                                {
                                    currencyCode    = purchLine.CurrencyCode;

                                    customPrice     = InventTable::unitConvertValue(purchLine.ItemId, 
                                        _customJournalTrans.UnitId, 
                                        purchLine.PurchUnit, 
                                        unitIdInvent, 
                                        purchLine.PriceUnit
                                            ? purchLine.PurchPrice / purchLine.PriceUnit 
                                            : purchLine.PurchPrice,
                                        purchLine.InventDimId);
                                }
                                else
                                {
                                    info(strFmt("@SYS50546", purchLine.PurchUnit, _customJournalTrans.UnitId));
                                }
                            }

                            markupAmount = this.calcMarkupAmount(purchLine, purchLine.PurchUnit, unitIdInvent, purchLine.PurchQty, purchLine.LineAmount, _customJournalTrans);

                            break;

                        case CustomInventTransStatus_RU::Purchased  :
                            select firstonly vendInvoiceTrans
                                where vendInvoiceTrans.InventTransId    == _inventTransId &&
                                      vendInvoiceTrans.InvoiceId        == _customJournalTrans.InvoiceId;

                            if (vendInvoiceTrans)
                            {
                                if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(vendInvoiceTrans.ItemId,
									vendInvoiceTrans.InventDimId,                                                             
									vendInvoiceTrans.PurchUnit,    
									_customJournalTrans.UnitId))                                 
                                {                                                                                                                                                                                                                         
                                    currencyCode = vendInvoiceTrans.CurrencyCode;

                                    customPrice  =  PriceDisc::amount2Price(vendInvoiceTrans.LineAmount,
                                        vendInvoiceTrans.DiscPercent,                                   
                                        vendInvoiceTrans.PurchMarkup,
                                        vendInvoiceTrans.Qty,
                                        vendInvoiceTrans.DiscAmount,
                                        vendInvoiceTrans.PriceUnit,
                                        vendInvoiceTrans.CurrencyCode,
                                        vendInvoiceTrans.PurchPrice);

                                    customPrice = customPrice / (vendInvoiceTrans.PriceUnit ? vendInvoiceTrans.PriceUnit : 1);

                                    if (!customPrice && vendInvoiceTrans.Qty)
                                    {
                                        customPrice = vendInvoiceTrans.LineAmount / vendInvoiceTrans.Qty;
                                    }

                                    if (customPrice)
                                    {
                                        customPrice = InventTable::unitConvertValue(vendInvoiceTrans.ItemId,
                                            _customJournalTrans.UnitId,
                                            vendInvoiceTrans.PurchUnit,
                                            unitIdInvent,
                                            customPrice,
                                            vendInvoiceTrans.InventDimId);
                                    }
                                }
                                else
                                {
                                    info(strFmt("@SYS50546", vendInvoiceTrans.PurchUnit, _customJournalTrans.UnitId));
                                }
                            }

                            markupAmount = this.calcMarkupAmount(vendInvoiceTrans, vendInvoiceTrans.PurchUnit, unitIdInvent, vendInvoiceTrans.Qty, vendInvoiceTrans.LineAmount, _customJournalTrans);

                            break;
                    }

                    if (!customPrice)
                    {
                        if (ecoResProductUnitConverter.canValueBeConverted())
                        {
                            currencyCode = purchLine.CurrencyCode;

                            customPrice  = InventTable::unitConvertValue(purchLine.ItemId, 
                                _customJournalTrans.UnitId, 
                                purchLine.PurchUnit, 
                                unitIdInvent, 
                                purchLine.PurchQty
                                    ? purchLine.LineAmount / purchLine.PurchQty
                                    : 0.0,
                                purchLine.InventDimId);
                        }
                        else
                        {
                            info(strFmt("@SYS50546", purchLine.PurchUnit, _customJournalTrans.UnitId));
                        }
                    }
                }
                break;
        }

        _customJournalTrans.MarkupAmount = markupAmount;

        return markupAmount + CurrencyExchangeHelper::curAmount2CurAmount(customPrice * _qty, currencyCode, customCurrencyCode, customJournalTable.PlanArrivalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkupAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected MarkupAmount calcMarkupAmount(Common                  _common,
                                            UnitOfMeasureSymbol     _markupUnit,
                                            UnitOfMeasureSymbol     _inventUnit,
                                            Qty                     _qty,
                                            AmountCur               _value,
                                            CustomJournalTrans_RU   _customJournalTrans)
    {
        MarkupDlvTermConnection_RU  markupDlvTermConnection;
        MarkupTrans                 markupTrans;
        MarkupAmount                markupAmount, markupAmountCur = 0;

        if (!_qty)
        {
            return 0.0;
        }

        if (!(EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(_customJournalTrans.ItemId,
																						   _customJournalTrans.InventDimId,
																						   _markupUnit,
																						   _customJournalTrans.UnitId)))
        {
            info(strFmt("@SYS50546", _markupUnit, _customJournalTrans.UnitId));
            return 0.0;
        }

        _qty = InventTable::unitConvertValue(_customJournalTrans.ItemId, 
                                             _markupUnit, 
                                             _customJournalTrans.UnitId, 
                                             _inventUnit, 
                                             _qty,
                                             _customJournalTrans.InventDimId);

        if (!_qty)
        {
            return 0.0;
        }

        while select markupTrans
            where markupTrans.TransTableId == _common.TableId &&
                  markupTrans.TransRecId   == _common.RecId
            join * from markupDlvTermConnection
                where markupDlvTermConnection.MarkupCode  == markupTrans.MarkupCode &&
                      markupDlvTermConnection.DlvTermCode == dlvTermId
        {
            markupAmount        = Markup::calcTrans(markupTrans, _qty, _value);
            markupAmountCur    += CurrencyExchangeHelper::curAmount2CurAmount(markupAmount, markupTrans.CurrencyCode, customCurrencyCode, _customJournalTrans.customJournalTable().PlanArrivalDate);
        }

        if (_customJournalTrans.Qty != decRound(_qty, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_customJournalTrans.UnitId))))
        {
            markupAmountCur = markupAmountCur * _customJournalTrans.Qty / _qty;
        }

        markupAmountCur = CurrencyExchangeHelper::amount(markupAmountCur, customCurrencyCode);

        return markupAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVAT</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomAmount_RU calcVAT(ItemId                   _itemId,
                                   FEACCId_RU               _feaccId,
                                   TransDate                _onDate,
                                   TaxBase                  _baseAmount,
                                   Qty                      _baseQty,
                                   UnitOfMeasureSymbol      _unitID,
                                   CustomJournalType_RU     _customJournalType,
                                   AddressCountryRegionId   _countryRegionId)
    {
        CustomAmount_RU customAmount;
        TaxCode         taxCode;

        taxCode = FEACCCustomRateTable_RU::findOnDate(_feaccId, TaxType_W::VAT, CustomJournalCalc_RU::customAllImportExport(_customJournalType), _countryRegionId, _onDate);

        if (! taxCode)
        {
            return customAmount;
        }
        customAmount = Tax::construct().taxCalcWithoutSource_RU(taxCode, _onDate, customCurrencyCode, _baseAmount,
                                                                (_customJournalType == CustomJournalType_RU::Export) ? TaxModuleType::Sales : TaxModuleType::Purch,
                                                                _baseQty, _unitID, _itemId);

        return CurrencyExchangeHelper::amount(customAmount, customCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTable</Name>
				<Source><![CDATA[
    public void initFromTable(CustomJournalTable_RU _customJournalTable)
    {
        customJournalTable = _customJournalTable;
        customJournalType  = _customJournalTable.CustomJournalType;
        dlvTermId          = _customJournalTable.DlvTermId;
        if (!dlvTermId)
        {
            dlvTermId          = AgreementHeaderDefault::findAgreementHeader(
                _customJournalTable.agreementHeaderExt().AgreementHeader).DeliveryTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromTrans(CustomJournalTrans_RU _customJournalTrans)
    {
        customJournalTrans = _customJournalTrans;

        this.initFromTable(_customJournalTrans.customJournalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void new()
    {
        standardCurrencyCode = CompanyInfoHelper::standardCurrency();
        customCurrencyCode   = standardCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomPartition</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomPartition_RU parmCustomPartition(CustomPartition_RU    _customPartition = customPartition)
    {
        customPartition = _customPartition;

        return customPartition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
    public void recalc()
    {
        if (! customJournalTable)
        {
            return;
        }

        setPrefix (strFmt("@GLS115380", customJournalTable.CustomJournalId));

        ttsbegin;

        dutyCustomPartition = new Map(Types::String, Types::Container);
        while select forupdate customJournalTrans
            where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId &&
                  (!customPartition || (customPartition && customJournalTrans.CustomPartition == customPartition))
        {
            setPrefix(strFmt("@GLS115381", customJournalTrans.LineNum, customJournalTrans.feaccId));

            if (FEACCTable_RU::find(customJournalTrans.feaccId).Blocked)
            {
                warning(strFmt("@GLS115382", customJournalTrans.LineNum, customJournalTrans.feaccId));
            }
            else
            {
                this.recalcTrans(customJournalTrans);
                customJournalTrans.ChangeInLines = NoYes::No;
                customJournalTrans.update();
            }
        }
        this.recalcCharge();
        this.recalcTable();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcCharge</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void recalcCharge()
    {
        CustomJournalCharge_RU      customJournalCharge;
        CustomJournalChargeCalc_RU  customJournalChargeCalc;

        if (! customJournalTable)
        {
            return;
        }
        while select forupdate customJournalCharge
            where customJournalCharge.CustomJournalId == customJournalTable.CustomJournalId
        {
            customJournalChargeCalc = CustomJournalChargeCalc_RU::construct();
            customJournalChargeCalc.parmCustomJournalTable(customJournalTable);

            [customJournalCharge.Amount, customJournalCharge.TaxAmountCur] = customJournalChargeCalc.calcChargeAmount(customJournalCharge);
            customJournalCharge.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void recalcTable()
    {
        FormDataSource formDataSource;

        if (! customJournalTable)
        {
            return;
        }
        this.calcAdminCharge();

        customJournalTable.selectForUpdate(true);
        customJournalTable.reread();
        customJournalTable.ChangeInLines = NoYes::No;
        customJournalTable.update();

        if (FormDataUtil::isFormDataSource(customJournalTable))
        {
            formDataSource = FormDataUtil::getFormDataSource(customJournalTable);
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void recalcTrans(CustomJournalTrans_RU _customJournalTrans = customJournalTrans)
    {
        CustomJournalTrans_RU   customJournalTransPartition;
        boolean                 multiLine4Partition;
        Amount                  InvoiceCost, invoiceDuty, remainInvoiceDuty, IndicativeCost, indicativeDuty, remainIndicativeDuty, itemGrossWeight, itemVolume;
        Qty                     qtyPartition;
        TaxTable                taxTableDuty;
        TaxCode                 taxCodeDuty;
        UnitOfMeasureSymbol     unitIdModule;
        RoundOff                roundOffAmount      = Currency::find(customCurrencyCode).RoundingPrecision;

        // cost amount
        _customJournalTrans.InvoiceCostInclMarkup = this.calcInvoiceCostInclMarkup(_customJournalTrans.SalesPurchInventTransId, _customJournalTrans.Qty, _customJournalTrans);
        _customJournalTrans.IndicativeCost        = this.calculateIndicativeCost(_customJournalTrans.ItemId,
                                                                                 _customJournalTrans.InventDimId,
                                                                                 _customJournalTrans.feaccId,
                                                                                 customJournalTable.VendAccountCustom,
                                                                                 customJournalTable.PlanArrivalDate,
                                                                                 _customJournalTrans.Qty,
                                                                                 _customJournalTrans.UnitId);

        multiLine4Partition = false;
        // duty
        if (dutyCustomPartition.exists(_customJournalTrans.CustomPartition))
        {
            multiLine4Partition = true;
            [InvoiceCost, invoiceDuty, remainInvoiceDuty, IndicativeCost, indicativeDuty, remainIndicativeDuty, itemGrossWeight, itemVolume] = dutyCustomPartition.lookup(_customJournalTrans.CustomPartition);
        }
        else
        {
            if (CustomJournalTrans_RU::existCustomPartition(_customJournalTrans.CustomJournalId, _customJournalTrans.CustomPartition) > 1)
            {
                multiLine4Partition = true;
                taxCodeDuty         = FEACCCustomRateTable_RU::findOnDate(_customJournalTrans.feaccId, TaxType_W::CustomDuty_RU, CustomJournalCalc_RU::customAllImportExport(customJournalType), _customJournalTrans.CountryRegionId, customJournalTable.PlanArrivalDate);
                if (taxCodeDuty)
                {
                    taxTableDuty    = TaxTable::find(taxCodeDuty);
                    qtyPartition    = 0;
                    invoiceCost     = 0;
                    indicativeCost  = 0;
                    itemGrossWeight = 0;
                    while select customJournalTransPartition
                            where customJournalTransPartition.CustomJournalId == customJournalTable.CustomJournalId &&
                                  customJournalTransPartition.CustomPartition == _customJournalTrans.CustomPartition
                    {
                        unitIdModule    = InventTableModule::find(customJournalTransPartition.ItemId, ModuleInventPurchSales::Invent).UnitId;
                        invoiceCost     += this.calcInvoiceCostInclMarkup(customJournalTransPartition.SalesPurchInventTransId, customJournalTransPartition.Qty, customJournalTransPartition);
                        indicativeCost  += this.calculateIndicativeCost(customJournalTransPartition.ItemId,
                                                                        customJournalTransPartition.InventDimId,
                                                                        customJournalTransPartition.feaccId,
                                                                        customJournalTable.VendAccountCustom,
                                                                        customJournalTable.PlanArrivalDate,
                                                                        customJournalTransPartition.Qty,
                                                                        customJournalTransPartition.UnitId);

                        qtyPartition    += InventTable::unitConvertValue(customJournalTransPartition.ItemId,
                                                                         customJournalTransPartition.UnitId,
                                                                         taxTableDuty.TaxUnit,
                                                                         unitIdModule,
                                                                         customJournalTransPartition.Qty,
                                                                         customJournalTransPartition.InventDimId);

                        //if (taxTableDuty.CustomGrossWeightCalc_RU)
                        itemGrossWeight += customJournalTransPartition.ItemGrossWeight;
                        itemVolume      += customJournalTransPartition.Volume;
                    }

                    invoiceDuty     = this.calcDuty('',
                                                    _customJournalTrans.feaccId,
                                                    _customJournalTrans.CountryRegionId,
                                                    customJournalTable.PlanArrivalDate,
                                                    invoiceCost,
                                                    qtyPartition,
                                                    taxTableDuty.TaxUnit,
                                                    _customJournalTrans.CustomPartition);
                    indicativeDuty  = this.calcDuty('',
                                                    _customJournalTrans.feaccId,
                                                    _customJournalTrans.CountryRegionId,
                                                    customJournalTable.PlanArrivalDate,
                                                    indicativeCost,
                                                    qtyPartition,
                                                    taxTableDuty.TaxUnit,
                                                    _customJournalTrans.CustomPartition,
                                                    true);

                    remainInvoiceDuty       = invoiceDuty;
                    remainIndicativeDuty    = indicativeDuty;
                    dutyCustomPartition.insert(_customJournalTrans.CustomPartition, [InvoiceCost, invoiceDuty, remainInvoiceDuty, IndicativeCost, indicativeDuty, remainIndicativeDuty, itemGrossWeight, itemVolume]);
                }
                else
                {
                    [InvoiceCost, invoiceDuty, remainInvoiceDuty, IndicativeCost, indicativeDuty, remainIndicativeDuty, itemGrossWeight, itemVolume] = [0,0,0,0,0,0];
                }
            }
        }

        if (multiLine4Partition)
        {
            if (!taxTableDuty)
            {
                taxCodeDuty     = FEACCCustomRateTable_RU::findOnDate(_customJournalTrans.feaccId, TaxType_W::CustomDuty_RU, CustomJournalCalc_RU::customAllImportExport(customJournalType), _customJournalTrans.CountryRegionId, customJournalTable.PlanArrivalDate);
                taxTableDuty    = TaxTable::find(taxCodeDuty);
            }

            if (taxTableDuty.CustomCombinedRate_RU == CustomCombinedRate_RU::Max)
            {
                switch (taxTableDuty.CustomCalcMethod_RU)
                {
                    case CustomCalcMethod_RU::Qty :
                        if (!invoiceCost)
                        {
                            info(strFmt("@GLS115283", _customJournalTrans.feaccId));
                        }
                        if (!indicativeCost && _customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Indicative)
                        {
                            info(strFmt("@GLS115284", _customJournalTrans.feaccId));
                        }
                        if (invoiceCost)
                        {
                            _customJournalTrans.InvoiceDuty     = CurrencyExchangeHelper::amount(invoiceDuty / invoiceCost * _customJournalTrans.InvoiceCostInclMarkup, customCurrencyCode);
                        }
                        if (indicativeCost)
                        {
                            _customJournalTrans.IndicativeDuty  = CurrencyExchangeHelper::amount(indicativeDuty / indicativeCost * _customJournalTrans.IndicativeCost, customCurrencyCode);
                        }
                        break;

                    case CustomCalcMethod_RU::Weight :
                        if (itemGrossWeight)
                        {
                            _customJournalTrans.InvoiceDuty     = CurrencyExchangeHelper::amount(invoiceDuty / itemGrossWeight * _customJournalTrans.ItemGrossWeight, customCurrencyCode);
                            _customJournalTrans.IndicativeDuty  = CurrencyExchangeHelper::amount(indicativeDuty / itemGrossWeight * _customJournalTrans.ItemGrossWeight, customCurrencyCode);
                        }
                        else
                            info(strFmt("@GLS115288", _customJournalTrans.feaccId));
                        break;

                    case CustomCalcMethod_RU::Volume :
                        if (itemVolume)
                        {
                            _customJournalTrans.InvoiceDuty     = CurrencyExchangeHelper::amount(invoiceDuty / itemVolume * _customJournalTrans.Volume, customCurrencyCode);
                            _customJournalTrans.IndicativeDuty  = CurrencyExchangeHelper::amount(indicativeDuty / itemVolume * _customJournalTrans.Volume, customCurrencyCode);
                        }
                        else
                            info(strFmt("@GLS115289", _customJournalTrans.feaccId));
                        break;
                }
            }
            else
            {
                if (!invoiceCost)
                {
                    info(strFmt("@GLS115283", _customJournalTrans.feaccId));
                }
                if (!indicativeCost && _customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Indicative)
                {
                    info(strFmt("@GLS115284", _customJournalTrans.feaccId));
                }
                if (invoiceCost)
                {
                    _customJournalTrans.InvoiceDuty     = CurrencyExchangeHelper::amount(invoiceDuty / invoiceCost * _customJournalTrans.InvoiceCostInclMarkup, customCurrencyCode);
                }
                if (indicativeCost)
                {
                    _customJournalTrans.IndicativeDuty  = CurrencyExchangeHelper::amount(indicativeDuty / indicativeCost * _customJournalTrans.IndicativeCost, customCurrencyCode);
                }
            }
            remainInvoiceDuty       -= _customJournalTrans.InvoiceDuty;
            remainIndicativeDuty    -= _customJournalTrans.IndicativeDuty;

            if (remainInvoiceDuty <= roundOffAmount)
            {
                _customJournalTrans.InvoiceDuty += remainInvoiceDuty;
            }

            if (remainIndicativeDuty <= roundOffAmount)
            {
                _customJournalTrans.IndicativeDuty += remainIndicativeDuty;
            }

            dutyCustomPartition.insert(_customJournalTrans.CustomPartition, [InvoiceCost, invoiceDuty, remainInvoiceDuty, IndicativeCost, indicativeDuty, remainIndicativeDuty, itemGrossWeight, itemVolume]);
        }
        else
        {
            _customJournalTrans.InvoiceDuty     = this.calcDuty(_customJournalTrans.ItemId,
                                                                _customJournalTrans.feaccId,
                                                                _customJournalTrans.CountryRegionId,
                                                                customJournalTable.PlanArrivalDate,
                                                                _customJournalTrans.InvoiceCostInclMarkup,
                                                                _customJournalTrans.Qty,
                                                                _customJournalTrans.UnitId,
                                                                _customJournalTrans.CustomPartition);
            _customJournalTrans.IndicativeDuty  = this.calcDuty(_customJournalTrans.ItemId,
                                                                _customJournalTrans.feaccId,
                                                                _customJournalTrans.CountryRegionId,
                                                                customJournalTable.PlanArrivalDate,
                                                                _customJournalTrans.IndicativeCost,
                                                                _customJournalTrans.Qty,
                                                                _customJournalTrans.UnitId,
                                                                _customJournalTrans.CustomPartition,
                                                                true);
        }
        if (customJournalTable.CustomJournalType == CustomJournalType_RU::Import)
        {
            // excise
            _customJournalTrans.InvoiceExcise    = this.calcExcise(_customJournalTrans.ItemId,
                                                                   _customJournalTrans.feaccId,
                                                                   _customJournalTrans.CountryRegionId,
                                                                   customJournalTable.PlanArrivalDate,
                                                                   _customJournalTrans.InvoiceCostInclMarkup,
                                                                   _customJournalTrans.Qty,
                                                                   _customJournalTrans.UnitId);
            _customJournalTrans.IndicativeExcise = this.calcExcise(_customJournalTrans.ItemId,
                                                                    _customJournalTrans.feaccId,
                                                                    _customJournalTrans.CountryRegionId,
                                                                    customJournalTable.PlanArrivalDate,
                                                                    _customJournalTrans.IndicativeCost,
                                                                    _customJournalTrans.Qty,
                                                                    _customJournalTrans.UnitId);
            // vat
            _customJournalTrans.InvoiceVAT       = this.calcVAT(_customJournalTrans.ItemId,
                                                                _customJournalTrans.feaccId,
                                                                customJournalTable.PlanArrivalDate,
                                                                _customJournalTrans.InvoiceCostInclMarkup + _customJournalTrans.InvoiceDuty + _customJournalTrans.InvoiceExcise,
                                                                _customJournalTrans.Qty,
                                                                _customJournalTrans.UnitId,
                                                                customJournalType,
                                                                _customJournalTrans.CountryRegionId);
            _customJournalTrans.IndicativeVAT    = this.calcVAT(_customJournalTrans.ItemId,
                                                                _customJournalTrans.feaccId,
                                                                customJournalTable.PlanArrivalDate,
                                                                _customJournalTrans.IndicativeCost + _customJournalTrans.IndicativeDuty + _customJournalTrans.IndicativeExcise,
                                                                _customJournalTrans.Qty,
                                                                _customJournalTrans.UnitId,
                                                                customJournalType,
                                                                _customJournalTrans.CountryRegionId);
        }
        // fixed
        this.setFixedValues(_customJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFixedValues</Name>
				<Source><![CDATA[
    private void setFixedValues(CustomJournalTrans_RU _customJournalTrans)
    {
        _customJournalTrans.InvoiceDutyFixed      = _customJournalTrans.InvoiceDuty;
        _customJournalTrans.IndicativeDutyFixed   = _customJournalTrans.IndicativeDuty;
        _customJournalTrans.InvoiceExciseFixed    = _customJournalTrans.InvoiceExcise;
        _customJournalTrans.IndicativeExciseFixed = _customJournalTrans.IndicativeExcise;
        _customJournalTrans.InvoiceVATFixed       = _customJournalTrans.InvoiceVAT;
        _customJournalTrans.IndicativeVATFixed    = _customJournalTrans.IndicativeVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrectionAdminCharge</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustomCorrectionTable_RU calcCorrectionAdminCharge(CustomCorrectionTable_RU  _customCorrectionTable,
                                                              CustomJournalTable_RU     _customJournalTable = _customCorrectionTable.customJournalTable(true),
                                                              CurrencyCode              _customCurrencyCode = CompanyInfoHelper::standardCurrency())
    {
        CustomJournalTotalAmounts_RU    customJournalTotalAmounts;
        CustomCorrectionTotalAmounts_RU customCorrectionTotalAmounts;
        CustomCorrectionTotalAmounts_RU customCorrectionTotalAmountsCurrent;
        TaxTable                        taxTable;
        CustomChargeType_RU             customChargeType;
        TaxBase                         baseAmount;

        if (! _customCorrectionTable)
        {
            return _customCorrectionTable;
        }

        if (_customJournalTable.CustomJournalType == CustomJournalType_RU::Export)
            customChargeType = CustomChargeType_RU::AdministrationExport;
        else if (_customJournalTable.CustomJournalType == CustomJournalType_RU::Import)
            customChargeType = CustomChargeType_RU::AdministrationImport;

        taxTable = TaxTable::findCustomCharge_RU(customChargeType);

        if (! taxTable)
        {
            throw error(strFmt("@GLS115421", enum2str(customChargeType)));
        }
        _customCorrectionTable.CorrectionAdminCharge = 0;
        _customCorrectionTable.update();

        customJournalTotalAmounts           = CustomJournalTotalAmounts_RU::createFromJournal(_customJournalTable);
        customCorrectionTotalAmounts        = CustomCorrectionTotalAmounts_RU::createFromJournal(_customJournalTable, null, _customCorrectionTable.CorrectionDate, false);
        customCorrectionTotalAmountsCurrent = CustomCorrectionTotalAmounts_RU::createFromCorrection(_customCorrectionTable);

        baseAmount = customJournalTotalAmounts.estimativeLineTotalAmount() + customCorrectionTotalAmounts.estimativeLineTotalAmount() + customCorrectionTotalAmountsCurrent.estimativeLineTotalAmount();
        if (baseAmount)
        {
            _customCorrectionTable.CorrectionAdminCharge = CurrencyExchangeHelper::amount(Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, _customJournalTable.PlanArrivalDate, _customCurrencyCode, customJournalTotalAmounts.estimativeLineTotalAmount() + customCorrectionTotalAmounts.estimativeLineTotalAmount() + customCorrectionTotalAmountsCurrent.estimativeLineTotalAmount(), _customJournalTable.CustomJournalType == CustomJournalType_RU::Export ? TaxModuleType::Sales : TaxModuleType::Purch, 1) - customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin) - customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::ChargeAdmin));
        }
        else
        {
            _customCorrectionTable.CorrectionAdminCharge = -CurrencyExchangeHelper::amount(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin) + customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::ChargeAdmin));
        }
        return _customCorrectionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPartitionCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost amount by partition.
    /// </summary>
    /// <param name="_customJournalTrans">
    /// The <c>CustomJournalTrans_RU</c> record determining the partition.
    /// </param>
    /// <param name="_calcDate">
    /// The date to calculate the cost on.
    /// </param>
    /// <returns>
    /// Cost amount calculated per partition on the given date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomAmount_RU calcPartitionCost(CustomJournalTrans_RU _customJournalTrans, TransDate _calcDate)
    {
        CustomJournalTransOnDateAmounts_RU  customJournalTransOnDateAmounts;
        CustomJournalTrans_RU               customJournalTransPartition;
        CustomAmount_RU                     partitionCost;

        while select customJournalTransPartition
            where customJournalTransPartition.CustomJournalId   == _customJournalTrans.CustomJournalId
               && customJournalTransPartition.CustomPartition   == _customJournalTrans.CustomPartition
        {
            customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(customJournalTransPartition, _calcDate);
            partitionCost += customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Cost);
        }

        return partitionCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPartitionDuty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the duty amount by partition.
    /// </summary>
    /// <param name="_customJournalTrans">
    /// The <c>CustomJournalTrans_RU</c> record determining the partition.
    /// </param>
    /// <param name="_calcDate">
    /// The date to calculate the duty on.
    /// </param>
    /// <returns>
    /// Duty amount calculated per partition on the given date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomAmount_RU calcPartitionDuty(CustomJournalTrans_RU _customJournalTrans, TransDate _calcDate)
    {
        CustomJournalTransOnDateAmounts_RU  customJournalTransOnDateAmounts;
        CustomJournalTrans_RU               customJournalTransPartition;
        CustomAmount_RU                     partitionDuty;

        while select customJournalTransPartition
            where customJournalTransPartition.CustomJournalId   == _customJournalTrans.CustomJournalId
               && customJournalTransPartition.CustomPartition   == _customJournalTrans.CustomPartition
        {
            customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(customJournalTransPartition, _calcDate);
            partitionDuty += customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Duty);
        }

        return partitionDuty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPartitionValues</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static container calcPartitionValues(CustomJournalTrans_RU _customJournalTrans, TransDate _calcDate)
    {
        ItemGrossWeight                     totalItemGrossWeight;
        ItemVolume                          totalItemVolume;
        CustomJournalTrans_RU               customJournalTrans;
        Qty                                 totalQty;
        AmountMST                           tatalCostAmount;

        CustomJournalTransOnDateAmounts_RU  customJournalTransOnDateAmounts;

        select sum(ItemGrossWeight), sum(Volume), sum(Qty) from customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId &&
                  customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition;

        totalItemGrossWeight = customJournalTrans.ItemGrossWeight;
        totalItemVolume      = customJournalTrans.Volume;
        totalQty             = customJournalTrans.Qty;

        while select forupdate customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId &&
                  customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition
        {
            customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(customJournalTrans, _calcDate, true);
            tatalCostAmount += customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Cost);
        }

        return [tatalCostAmount, totalQty, totalItemGrossWeight, totalItemVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustomJournalCalc_RU construct()
    {
        return new CustomJournalCalc_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctDutyPartition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs partition amounts correction.
    /// </summary>
    /// <param name="_customJournalTrans">
    /// The customs journal line provided.
    /// </param>
    /// <param name="_costAmount">
    /// Cost amount value for partition; optional.
    /// </param>
    /// <param name="_dutyAmount">
    /// Duty amount value for partition; optional.
    /// </param>
    /// <param name="_exciseAmount">
    /// Excise amount value value for partition; optional.
    /// </param>
    /// <param name="_vatAmount">
    /// VAT amount value for partition; optional.
    /// </param>
    /// <param name="_skipDialog">
    /// A Boolean determining whether to skip dialog prompt; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws error when line calculation method is not defined.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void correctDutyPartition(CustomJournalTrans_RU  _customJournalTrans,
                                     CustomAmount_RU        _costAmount   = 0.0,
                                     CustomAmount_RU        _dutyAmount   = 0.0,
                                     CustomAmount_RU        _exciseAmount = 0.0,
                                     CustomAmount_RU        _vatAmount    = 0.0,
                                     boolean                _skipDialog   = false)
    {
        Dialog                              dialog;
        DialogField                         dialogCostAmount;
        DialogField                         dialogDutyAmount;
        DialogField                         dialogExciseAmount;
        DialogField                         dialogVATAmount;
        CustomJournalTotalAmounts_RU        customJournalTotalAmounts;
        TmpCustomJournalTotalsFilters_RU    tmpCustomJournalTotalsFilters;
        CustomJournalTrans_RU               customJournalTrans;
        CustomJournalCalc_RU                customJournalCalc;
        Amount                              newCostAmount,   remainCostAmount;
        Amount                              newDutyAmount,   remainDutyAmount;
        Amount                              newExciseAmount, remainExciseAmount;
        Amount                              newVATAmount,    remainVATAmount;
        CurrencyCode                        customCurrencyCode = CompanyInfoHelper::standardCurrency();
        boolean                             costModified;
        boolean                             error = false;
        TaxCode                             taxCodeDuty;
        TaxTable                            taxTableDuty;
        ItemGrossWeight                     totalItemGrossWeight;
        ItemVolume                          totalItemVolume;
        RoundOff                            customCurrencyRoundingPrecision = Currency::find(customCurrencyCode).RoundingPrecision;

        tmpCustomJournalTotalsFilters.initRange(_customJournalTrans.CustomJournalId, CustomTotalFilterType_RU::CustomPartition, _customJournalTrans.CustomPartition);
        customJournalTotalAmounts = CustomJournalTotalAmounts_RU::createFromJournal(_customJournalTrans.customJournalTable(), tmpCustomJournalTotalsFilters);

        if (_skipDialog)
        {
            if (_costAmount <= 0 || _dutyAmount <= 0 || _exciseAmount <= 0 || _vatAmount <= 0)
            {
                return;
            }

            newCostAmount   = _costAmount;
            newDutyAmount   = _dutyAmount;
            newExciseAmount = _exciseAmount;
            newVATAmount    = _vatAmount;
        }
        else
        {
            dialog = new Dialog("@GLS223718");

            dialog.addText(strFmt("@GLS223723", _customJournalTrans.CustomPartition, _customJournalTrans.CustomJournalId));
            dialogCostAmount    = dialog.addField(extendedTypeStr(PositiveAmount_RU), strFmt("@GLS223724", _customJournalTrans.CalculationMethod), "@GLS223709");
            dialogDutyAmount    = dialog.addField(extendedTypeStr(PositiveAmount_RU), strFmt("@GLS115295", _customJournalTrans.CalculationMethod), "@GLS223710");
            dialogExciseAmount  = dialog.addField(extendedTypeStr(PositiveAmount_RU), strFmt("@GLS223725", _customJournalTrans.CalculationMethod), "@GLS223711");
            dialogVATAmount     = dialog.addField(extendedTypeStr(PositiveAmount_RU), strFmt("@GLS223708", _customJournalTrans.CalculationMethod), "@GLS223712");
            dialogCostAmount.value(  _costAmount   > 0 ? _costAmount   : customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost));
            dialogDutyAmount.value(  _dutyAmount   > 0 ? _dutyAmount   : customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Duty));
            dialogExciseAmount.value(_exciseAmount > 0 ? _exciseAmount : customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Excise));
            dialogVATAmount.value(   _vatAmount    > 0 ? _vatAmount    : customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::VAT));

            if (dialog.run())
            {
                dialog.wait();
            }

            if (dialog.closedOk())
            {
                newCostAmount   = dialogCostAmount.value();
                newDutyAmount   = dialogDutyAmount.value();
                newExciseAmount = dialogExciseAmount.value();
                newVATAmount    = dialogVATAmount.value();
            }
            else
            {
                return;
            }
        }

        if (newCostAmount   == customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost)
        &&  newDutyAmount   == customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Duty)
        &&  newExciseAmount == customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Excise)
        &&  newVATAmount    == customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::VAT))
        {
            return;
        }

        costModified = newCostAmount != customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost);
        remainCostAmount   = newCostAmount;
        remainDutyAmount   = newDutyAmount;
        remainExciseAmount = newExciseAmount;
        remainVATAmount    = newVATAmount;

        ttsbegin;

        select sum(ItemGrossWeight) from customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId &&
                    customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition;

        totalItemGrossWeight = customJournalTrans.ItemGrossWeight;

        select sum(Volume) from customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId &&
                    customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition;

        totalItemVolume = customJournalTrans.Volume;

        while select forupdate customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId &&
                    customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition
        {
            taxCodeDuty = FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId,
                                                                TaxType_W::CustomDuty_RU,
                                                                CustomJournalCalc_RU::customAllImportExport(customJournalTrans.customJournalTable().CustomJournalType),
                                                                customJournalTrans.CountryRegionId,
                                                                customJournalTrans.customJournalTable().PlanArrivalDate);
            taxTableDuty = TaxTable::find(taxCodeDuty);

            if (taxTableDuty.CustomCalcMethod_RU == CustomCalcMethod_RU::Weight && !totalItemGrossWeight &&
                (_customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Invoice ||
                _customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Indicative))
            {
                info(strFmt("@GLS115288", customJournalTrans.feaccId));
            }

            if (taxTableDuty.CustomCalcMethod_RU == CustomCalcMethod_RU::Volume && !totalItemVolume &&
                (_customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Invoice ||
                _customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::Indicative))
            {
                info(strFmt("@GLS115289", customJournalTrans.feaccId));
            }

            switch (_customJournalTrans.CalculationMethod)
            {
                case CustomCalculationMethod_RU::Invoice    :
                    if (CustomJournalTrans_RU::isSingleLinePartition(_customJournalTrans.CustomJournalId, _customJournalTrans.CustomPartition))
                    {
                        customJournalTrans.InvoiceCostInclMarkup    = CurrencyExchangeHelper::amount(newCostAmount, customCurrencyCode);
                        customJournalTrans.InvoiceDuty              = CurrencyExchangeHelper::amount(newDutyAmount, customCurrencyCode);
                        customJournalTrans.InvoiceExcise            = CurrencyExchangeHelper::amount(newExciseAmount, customCurrencyCode);
                        customJournalTrans.InvoiceVAT               = CurrencyExchangeHelper::amount(newVATAmount, customCurrencyCode);
                    }
                    else
                    {
                        if (taxTableDuty.CustomCombinedRate_RU == CustomCombinedRate_RU::Max)
                        {
                            switch (taxTableDuty.CustomCalcMethod_RU)
                            {
                                case CustomCalcMethod_RU::Weight :
                                    if (totalItemGrossWeight)
                                    {
                                        customJournalTrans.InvoiceDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.ItemGrossWeight / totalItemGrossWeight, customCurrencyCode);
                                    }
                                    break;

                                case CustomCalcMethod_RU::Volume :
                                    if (totalItemVolume)
                                    {
                                        customJournalTrans.InvoiceDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.Volume / totalItemVolume, customCurrencyCode);
                                    }
                                    break;

                                case CustomCalcMethod_RU::Qty :
                                    if (customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost))
                                    {
                                        customJournalTrans.InvoiceDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.InvoiceCostInclMarkup / customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                                    }
                                    else
                                    {
                                        info(strFmt("@GLS115283", _customJournalTrans.feaccId));
                                    }
                                    break;
                            }
                        }
                        else
                        {
                            if (customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost))
                            {
                                customJournalTrans.InvoiceDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.InvoiceCostInclMarkup / customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                            }
                            else
                            {
                                info(strFmt("@GLS115283", _customJournalTrans.feaccId));
                            }
                        }
                        if (customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost))
                        {
                            customJournalTrans.InvoiceExcise         = CurrencyExchangeHelper::amount(newExciseAmount * customJournalTrans.InvoiceCostInclMarkup / customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                            customJournalTrans.InvoiceVAT            = CurrencyExchangeHelper::amount(newVATAmount * customJournalTrans.InvoiceCostInclMarkup / customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                            customJournalTrans.InvoiceCostInclMarkup = CurrencyExchangeHelper::amount(newCostAmount * customJournalTrans.InvoiceCostInclMarkup / customJournalTotalAmounts.invoiceAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                        }
                    }

                    remainCostAmount   -= customJournalTrans.InvoiceCostInclMarkup;
                    remainDutyAmount   -= customJournalTrans.InvoiceDuty;
                    remainExciseAmount -= customJournalTrans.InvoiceExcise;
                    remainVATAmount    -= customJournalTrans.InvoiceVAT;

                    if (remainCostAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.InvoiceCostInclMarkup += remainCostAmount;
                        remainCostAmount = 0.0;
                    }
                    if (remainDutyAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.InvoiceDuty += remainDutyAmount;
                        remainDutyAmount = 0.0;
                    }
                    if (remainExciseAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.InvoiceExcise += remainExciseAmount;
                        remainExciseAmount = 0.0;
                    }
                    if (remainVATAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.InvoiceVAT += remainVATAmount;
                        remainVATAmount = 0.0;
                    }
                    break;
                case CustomCalculationMethod_RU::Indicative :
                    if (CustomJournalTrans_RU::isSingleLinePartition(_customJournalTrans.CustomJournalId, _customJournalTrans.CustomPartition))
                    {
                        customJournalTrans.IndicativeCost   = CurrencyExchangeHelper::amount(newCostAmount, customCurrencyCode);
                        customJournalTrans.IndicativeDuty   = CurrencyExchangeHelper::amount(newDutyAmount, customCurrencyCode);
                        customJournalTrans.IndicativeExcise = CurrencyExchangeHelper::amount(newExciseAmount, customCurrencyCode);
                        customJournalTrans.IndicativeVAT    = CurrencyExchangeHelper::amount(newVATAmount, customCurrencyCode);
                    }
                    else
                    {
                        switch (taxTableDuty.CustomCalcMethod_RU)
                        {
                            case CustomCalcMethod_RU::Weight :
                                if (totalItemGrossWeight)
                                {
                                    customJournalTrans.IndicativeDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.ItemGrossWeight / totalItemGrossWeight, customCurrencyCode);
                                }
                                break;

                            case CustomCalcMethod_RU::Volume :
                                if (totalItemVolume)
                                {
                                    customJournalTrans.IndicativeDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.Volume / totalItemVolume, customCurrencyCode);
                                }
                                break;

                            case CustomCalcMethod_RU::Qty :
                                if (customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost))
                                {
                                    customJournalTrans.IndicativeDuty = CurrencyExchangeHelper::amount(newDutyAmount * customJournalTrans.IndicativeCost / customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                                }
                                else
                                {
                                    info(strFmt("@GLS115284", _customJournalTrans.feaccId));
                                }
                                break;
                        }

                        if (customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost))
                        {
                            customJournalTrans.IndicativeExcise = CurrencyExchangeHelper::amount(newExciseAmount * customJournalTrans.IndicativeCost / customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                            customJournalTrans.IndicativeVAT    = CurrencyExchangeHelper::amount(newVATAmount * customJournalTrans.IndicativeCost / customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                            customJournalTrans.IndicativeCost   = CurrencyExchangeHelper::amount(newCostAmount * customJournalTrans.IndicativeCost / customJournalTotalAmounts.indicativeAmount(CustomTotalType_RU::Cost), customCurrencyCode);
                        }
                    }

                    remainCostAmount   -= customJournalTrans.IndicativeCost;
                    remainDutyAmount   -= customJournalTrans.IndicativeDuty;
                    remainExciseAmount -= customJournalTrans.IndicativeExcise;
                    remainVATAmount    -= customJournalTrans.IndicativeVAT;

                    if (remainCostAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.IndicativeCost += remainCostAmount;
                        remainCostAmount = 0.0;
                    }
                    if (remainDutyAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.IndicativeDuty += remainDutyAmount;
                        remainDutyAmount = 0.0;
                    }
                    if (remainExciseAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.IndicativeExcise += remainExciseAmount;
                        remainExciseAmount = 0.0;
                    }
                    if (remainVATAmount <= customCurrencyRoundingPrecision)
                    {
                        customJournalTrans.IndicativeVAT += remainVATAmount;
                        remainVATAmount = 0.0;
                    }
                    break;
                case CustomCalculationMethod_RU::None   :
                    checkFailed(strFmt("@GLS115298", customJournalTrans.feaccId, customJournalTrans.ItemId));
                    error = true;
                    break;
            }

            customJournalTrans.update();
        }

        if (remainCostAmount || remainDutyAmount || remainExciseAmount || remainVATAmount)
        {
            switch (_customJournalTrans.CalculationMethod)
            {
                case CustomCalculationMethod_RU::Invoice:
                    select firstOnly forUpdate customJournalTrans
                    order by InvoiceCostInclMarkup desc
                    where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId
                       && customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition;
                    customJournalTrans.InvoiceCostInclMarkup += remainCostAmount;
                    customJournalTrans.InvoiceDuty           += remainDutyAmount;
                    customJournalTrans.InvoiceExcise         += remainExciseAmount;
                    customJournalTrans.InvoiceVAT            += remainVATAmount;
                    customJournalTrans.update();
                    break;
                case CustomCalculationMethod_RU::Indicative:
                    select firstOnly forUpdate customJournalTrans
                    order by IndicativeCost desc
                    where customJournalTrans.CustomJournalId == _customJournalTrans.CustomJournalId
                       && customJournalTrans.CustomPartition == _customJournalTrans.CustomPartition;
                    customJournalTrans.IndicativeCost        += remainCostAmount;
                    customJournalTrans.IndicativeDuty        += remainDutyAmount;
                    customJournalTrans.IndicativeExcise      += remainExciseAmount;
                    customJournalTrans.IndicativeVAT         += remainVATAmount;
                    customJournalTrans.update();
                    break;
            }
        }

        if (error)
        {
            throw error("@GLS101992");
        }

        if (costModified)
        {
            customJournalCalc = CustomJournalCalc_RU::construct();
            customJournalCalc.initFromTable(_customJournalTrans.customJournalTable(true));
            customJournalCalc.calcAdminCharge();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customAllImportExport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustomAllImportExport_RU customAllImportExport(CustomJournalType_RU _customJournalType)
    {
        switch (_customJournalType)
        {
            case CustomJournalType_RU::Import :
            return CustomAllImportExport_RU::Import;
            case CustomJournalType_RU::Export :
            return CustomAllImportExport_RU::Export;
        }

        return CustomAllImportExport_RU::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomJournalCalc_RU        customJournalCalc;
        CustomJournalTable_RU       customJournalTable;
        CustomJournalTrans_RU       customJournalTrans;

        FormRun                     callerFormRun;
        FormDataSource              callerFormDataSource;
        CustomJournalCalcType_RU    customJournalCalcType;

        if (! _args || _args.dataset() != tableNum(CustomJournalTable_RU) && _args.dataset() != tableNum(CustomJournalTrans_RU))
        {
            throw error(strFmt("@SYS25516", CustomJournalTransCreate_RU::description()));
        }
        if (! _args.record() || ! FormDataUtil::isFormDataSource(_args.record()))
        {
            throw error("@SYS82774");
        }

        customJournalCalcType   = _args.parmEnum();
        callerFormRun           = _args.caller();
        switch (customJournalCalcType)
        {
            case CustomJournalCalcType_RU::Journal :
                customJournalTable  = _args.record();
                customJournalCalc   = CustomJournalCalc_RU::construct();
                customJournalCalc.initFromTable(customJournalTable);
                customJournalCalc.recalc();
                if (_args.caller() && SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)) &&
                    formHasMethod(callerFormRun, identifierStr(tableFormDataSource)))
                {
                    callerFormDataSource = _args.caller().tableFormDataSource();
                    callerFormDataSource.reread();
                    callerFormDataSource.active();
                }
                break;
            case CustomJournalCalcType_RU::DutyPartition :
                customJournalTrans.data(_args.record());
                CustomJournalCalc_RU::correctDutyPartition(customJournalTrans);
                if (_args.caller() && SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)) &&
                    formHasMethod(callerFormRun, identifierStr(transFormDataSource)))
                {
                    callerFormDataSource = _args.caller().transFormDataSource();
                    callerFormDataSource.research();
                    callerFormDataSource.positionToRecord(customJournalTrans);
                }
                if (_args.caller() && SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)) &&
                    formHasMethod(callerFormRun, identifierStr(tableFormDataSource)))
                {
                    callerFormDataSource = _args.caller().tableFormDataSource();
                    callerFormDataSource.reread();
                    callerFormDataSource.refresh();
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>