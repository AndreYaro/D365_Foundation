<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventoryServiceIntegrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RetailInventoryServiceIntegrationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isUsingInventoryServiceAsDataSource</Name>
				<Source><![CDATA[
    public static boolean isUsingInventoryServiceAsDataSource()
    {
        RetailSharedParameters retailSharedParameters = RetailSharedParameters::find();
        return retailSharedParameters && retailSharedParameters.UseInventoryServiceAsDataSource == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUseInventoryServiceAsDataSource</Name>
				<Source><![CDATA[
    public static boolean validateUseInventoryServiceAsDataSource(RetailSharedParameters _retailSharedParameters)
    {
        boolean ret = true;
        if (_retailSharedParameters.orig().UseInventoryServiceAsDataSource == NoYes::No && _retailSharedParameters.UseInventoryServiceAsDataSource == NoYes::Yes)
        {
            InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();
            if (!RetailInventoryServiceIntegrationHelper::validateAadAppTenantId(inventoryServiceParameters))
            {
                ret = false;
            }

            if (!RetailInventoryServiceIntegrationHelper::validateAadAppClientId(inventoryServiceParameters))
            {
                ret = false;
            }

            if (!RetailInventoryServiceIntegrationHelper::validateAadAppClientSecretName(inventoryServiceParameters))
            {
                ret = false;
            }

            Name flagName = RetailConfigurationParameters::getNameForTransactionDateTimeAsCheckoutChannelDateTimeFlag();
            RetailConfigurationParameters configParameter = RetailConfigurationParameters::findByName(flagName);
            if (configParameter)
            {
                ret = checkFailed(strFmt('@RetailInventory:InventoryServiceExtraConfigurationParametersError', flagName));
            }

            if (ret && !InventInventoryDataServiceCommerceIntegrationHelper::initializeCommerceIntegration())
            {
                ret = false;
            }
            
            if (ret && !RetailInventoryServiceIntegrationHelper::resetCommerceQuantitiesToZero())
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAadAppTenantId</Name>
				<Source><![CDATA[
    public static boolean validateAadAppTenantId(InventInventoryDataServiceParameters _inventoryServiceParameters)
    {
        boolean ret = true;
        if (!_inventoryServiceParameters.AadAppTenantId)
        {
            ret = checkFailed(strFmt('@RetailInventory:InventoryServiceEmptyAadAppTenantIdError'));
        }
        else if (!str2Guid(_inventoryServiceParameters.AadAppTenantId))
        {
            ret = checkFailed(strFmt('@RetailInventory:InventoryServiceInvalidAadAppTenantIdError'));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAadAppClientId</Name>
				<Source><![CDATA[
    public static boolean validateAadAppClientId(InventInventoryDataServiceParameters _inventoryServiceParameters)
    {
        boolean ret = true;
        if (!_inventoryServiceParameters.AadAppClientId)
        {
            ret = checkFailed(strFmt('@RetailInventory:InventoryServiceEmptyAadAppClientIdError'));
        }
        else if (!str2Guid(_inventoryServiceParameters.AadAppClientId))
        {
            ret = checkFailed(strFmt('@RetailInventory:InventoryServiceInvalidAadAppClientIdError'));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAadAppClientSecretName</Name>
				<Source><![CDATA[
    public static boolean validateAadAppClientSecretName(InventInventoryDataServiceParameters _inventoryServiceParameters)
    {
        boolean ret = true;
        if (!_inventoryServiceParameters.AadAppClientSecretName)
        {
            ret = checkFailed(strFmt('@RetailInventory:InventoryServiceInvalidAadAppClientSecretNameError'));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCommerceQuantitiesToZero</Name>
				<Source><![CDATA[
    public static boolean resetCommerceQuantitiesToZero()
    {
        try
        {
            InventoryServiceClient inventoryServiceClient = new InventoryServiceClient();
            inventoryServiceClient.resync(InventInventoryDataServiceCommerceIntegrationHelper::Datasource);
            return true;
        }
        catch
        {
            return checkFailed('@RetailInventory:InventoryServiceFailToResetError');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailConfigurationParameters_onValidatingFieldValue</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(RetailConfigurationParameters), DataEventType::ValidatingFieldValue)]
    public static void RetailConfigurationParameters_onValidatingFieldValue(Common _sender, DataEventArgs _e)
    {
        ValidateFieldValueEventArgs ve = _e;
        RetailConfigurationParameters retailConfigurationParameters = _sender as RetailConfigurationParameters;

        if (ve.parmFieldName() == fieldStr(RetailConfigurationParameters, Name))
        {
            Name flagName = RetailConfigurationParameters::getNameForTransactionDateTimeAsCheckoutChannelDateTimeFlag();
            if (retailConfigurationParameters.Name == flagName)
            {
                if (RetailInventoryServiceIntegrationHelper::isUsingInventoryServiceAsDataSource())
                {
                    checkFailed(strFmt('@RetailInventory:InventoryServiceConfigurationParametersConflict', flagName, '@RetailInventory:InventoryServiceUseAsDataSourceLabel'));
                    ve.parmValidateResult(false);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>