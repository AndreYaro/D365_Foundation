<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettlePostingLog_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendSettlePostingLog_RU
{
    CustVendTransPostingLog_RU  transPostingLog;
    Set                         taxTransRecIDs;
    CustVendSettle              custVendSettle;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00029, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTelemetry</Name>
				<Source><![CDATA[
    private void sendTelemetry(LedgerPostingType _postingType)
    {
        if (_postingType == LedgerPostingType::AdvanceAdjustmentGain_RU || _postingType == LedgerPostingType::AdvanceAdjustmentLoss_RU)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00054, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromLedgerTransObject</Name>
				<Source><![CDATA[
    public void createFromLedgerTransObject(LedgerVoucherTransObject   _transObject,
                                            LedgerDimensionAccount     _offsetLedgerDimension,
                                            boolean                    _reverseSign = false)
    {
        Sign sign = _reverseSign ? -1 : 1;

        if (! _transObject)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (! _reverseSign)
        {
            transPostingLog.LedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(_transObject.parmLedgerDimensionId());
            transPostingLog.OffsetLedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(_offsetLedgerDimension);
        }
        else
        {
            transPostingLog.LedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(_offsetLedgerDimension);
            transPostingLog.OffsetLedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(_transObject.parmLedgerDimensionId());
        }

        transPostingLog.Posting         = _transObject.parmLedgerPostingType();
        transPostingLog.CurrencyCode    = _transObject.parmCurrencyCode();

        transPostingLog.AmountCur       = _transObject.parmAmountCur() * sign;
        transPostingLog.AmountMST       = _transObject.parmAmountMST() * sign;
        transPostingLog.AmountMSTSecond = _transObject.parmAmountMSTSecondary() * sign;
        transPostingLog.Correct         = _transObject.parmCorrect();
        transPostingLog.IsTaxed         = taxTransRecIDs && taxTransRecIDs.elements();
        transPostingLog.insert();

        this.sendTelemetry(transPostingLog.Posting);

        this.linkTaxTransactionsWithCreatedLog();

        this.processReverseLogTypes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans(LedgerPostingType           _posting,
                            LedgerDimensionAccount      _ledgerDimension,
                            LedgerDimensionAccount      _offsetLedgerDimension,
                            CurrencyCode                _currencyCode,
                            AmountCur                   _amountCur,
                            AmountMST                   _amountMST,
                            AmountMSTSecondary          _amountMSTSecondary         = 0,
                            ExchRate                    _exchRate                   = 0,
                            AmountMST                   _settlementExchAdj          = 0,
                            AmountMSTSecondary          _reportingSettlementExchAdj = 0)
    {
        if (_exchRate)
        {
            transPostingLog.AmountMST = CurrencyExchangeHelper::mstAmount(_amountCur, _currencyCode, this.parmTransDate(), UnknownNoYes::Unknown, _exchRate);
        }
        else
        {
            transPostingLog.AmountMST = _amountMST;
        }

        transPostingLog.Posting                     = _posting;
        transPostingLog.LedgerDimension             = LedgerDimensionFacade::serviceApplyFixedDimensions(_ledgerDimension);
        transPostingLog.OffsetLedgerDimension       = LedgerDimensionFacade::serviceApplyFixedDimensions(_offsetLedgerDimension);
        transPostingLog.CurrencyCode                = _currencyCode;
        transPostingLog.AmountCur                   = _amountCur;
        transPostingLog.AmountMSTSecond             = _amountMSTSecondary;
        transPostingLog.SettlementExchAdj           = _settlementExchAdj;
        transPostingLog.ReportingSettlementExchAdj  = _reportingSettlementExchAdj;
        transPostingLog.IsTaxed                     = taxTransRecIDs && taxTransRecIDs.elements();
        transPostingLog.insert();

        this.sendTelemetry(transPostingLog.Posting);

        this.linkTaxTransactionsWithCreatedLog();

        this.processReverseLogTypes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkTaxTransactionsWithCreatedLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets reference in <c>TaxTrans</c> to created <c>CustVendTransPostingLog_RU</c>
    /// </summary>
    protected void linkTaxTransactionsWithCreatedLog()
    {
        TaxTrans_RU     taxTrans_RU;
        SetEnumerator   i = taxTransRecIDs ? taxTransRecIDs.getEnumerator() : null;

        while (i && i.moveNext())
        {
            select forupdate taxTrans_RU
                where taxTrans_RU.TaxTrans == i.current();

            if (taxTrans_RU.RecId)
            {
                taxTrans_RU.CustVendTransPostingLog_RU = transPostingLog.RecId;
                taxTrans_RU.update();
            }
            else
            {
                taxTrans_RU.TaxTrans = i.current();
                taxTrans_RU.CustVendTransPostingLog_RU = transPostingLog.RecId;
                taxTrans_RU.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    public Correct parmCorrect(Correct _correct = transPostingLog.Correct)
    {
        transPostingLog.Correct = _correct;
        return transPostingLog.Correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    private CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = transPostingLog.CurrencyCode)
    {
        transPostingLog.CurrencyCode = _currencyCode;
        return transPostingLog.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTransRecId</Name>
				<Source><![CDATA[
    public RefRecId parmInvoiceTransRecId(RefRecId _refRecId = transPostingLog.InvoiceTransRecId)
    {
        transPostingLog.InvoiceTransRecId = _refRecId;
        return transPostingLog.InvoiceTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTransTableId</Name>
				<Source><![CDATA[
    public RefRecId parmInvoiceTransTableId(RefTableId _refTableId = transPostingLog.InvoiceTransTableId)
    {
        transPostingLog.InvoiceTransTableId = _refTableId;
        return transPostingLog.InvoiceTransTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReportingCurrencyTax</Name>
				<Source><![CDATA[
    public boolean parmIsReportingCurrencyTax(boolean _isReportingCurrencyTax = transPostingLog.IsReportingCurrencyTax)
    {
        transPostingLog.IsReportingCurrencyTax = _isReportingCurrencyTax;
        return transPostingLog.IsReportingCurrencyTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetCompany</Name>
				<Source><![CDATA[
    private CompanyId parmOffsetCompany(CompanyId _offsetCompany = transPostingLog.OffsetCompany)
    {
        transPostingLog.OffsetCompany = _offsetCompany;
        return transPostingLog.OffsetCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetRecId</Name>
				<Source><![CDATA[
    public RefRecId parmOffsetRecId(RefRecId _refRecId = transPostingLog.OffSetRecId)
    {
        transPostingLog.OffSetRecId = _refRecId;
        return transPostingLog.OffSetRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLogType</Name>
				<Source><![CDATA[
    private CustVendTransPostingLogType_RU parmPostingLogType(CustVendTransPostingLogType_RU _postingLogType = transPostingLog.PostingLogType)
    {
        transPostingLog.PostingLogType = _postingLogType;
        return transPostingLog.PostingLogType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    private RefTableId parmRefTableId(RefTableId _refTableId = transPostingLog.RefTableId)
    {
        transPostingLog.RefTableId = _refTableId;
        return transPostingLog.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseTrans</Name>
				<Source><![CDATA[
    public boolean parmReverseTrans(boolean _reverseTrans = transPostingLog.ReverseTrans)
    {
        transPostingLog.ReverseTrans = _reverseTrans;
        return transPostingLog.ReverseTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransRecIDs</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Set of recIDs of <c>TaxTrans</c> to link wiwth created record (see createTrans)
    /// </summary>
    /// <param name="_value">Set of recIDs</param>
    /// <returns>current value of the property</returns>
    public Set parmTaxTransRecIDs(Set _value = taxTransRecIDs)
    {
        taxTransRecIDs = _value;
        return taxTransRecIDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransCompany</Name>
				<Source><![CDATA[
    private CompanyId parmTransCompany(CompanyId _transCompany = transPostingLog.TransCompany)
    {
        transPostingLog.TransCompany = _transCompany;
        return transPostingLog.TransCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transPostingLog.TransDate)
    {
        transPostingLog.TransDate = _transDate;
        return transPostingLog.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRecId</Name>
				<Source><![CDATA[
    public RefRecId parmTransRecId(RefRecId _refRecId = transPostingLog.TransRecId)
    {
        transPostingLog.TransRecId = _refRecId;
        return transPostingLog.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = transPostingLog.Voucher)
    {
        transPostingLog.Voucher = _voucher;
        return transPostingLog.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPostingLog</Name>
				<Source><![CDATA[
    public CustVendTransPostingLog_RU transPostingLog()
    {
        return transPostingLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendSettle</Name>
				<Source><![CDATA[
    public static CustVendSettlePostingLog_RU newCustVendSettle(CustVendTransPostingLogType_RU _postingLogType,
                                                                CustVendTrans  _custVendTrans,
                                                                CustVendTrans  _parentTransDebet,
                                                                CustVendTrans  _parentTransCredit)
    {
        CustVendSettlePostingLog_RU custVendSettlePostingLog = new CustVendSettlePostingLog_RU();

        custVendSettlePostingLog.parmRefTableId    (_custVendTrans.TableId);
        custVendSettlePostingLog.parmPostingLogType(_postingLogType);
        custVendSettlePostingLog.parmVoucher       (_custVendTrans.Voucher);
        custVendSettlePostingLog.parmTransDate     (_custVendTrans.TransDate);
        custVendSettlePostingLog.parmCurrencyCode  (_custVendTrans.CurrencyCode);
        custVendSettlePostingLog.parmCorrect       (_custVendTrans.Correct);
        custVendSettlePostingLog.parmTransRecId    (_parentTransDebet.RecId);
        custVendSettlePostingLog.parmOffsetRecId   (_parentTransCredit.RecId);
        custVendSettlePostingLog.parmTransCompany(_parentTransDebet.company());
        custVendSettlePostingLog.parmOffsetCompany(_parentTransCredit.company());

        return custVendSettlePostingLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendSettle</Name>
				<Source><![CDATA[
    public CustVendSettle parmCustVendSettle(CustVendSettle _custVendSettle = custVendSettle)
    {
        custVendSettle = _custVendSettle;
        return custVendSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReverseLogTypes</Name>
				<Source><![CDATA[
    private void processReverseLogTypes()
    {
        if (conFind(CustVendTransPostingLog_RU::reverseTypes(), transPostingLog.PostingLogType) && custVendSettle)
        {
            custVendSettle.parmReversePostingLogSet_RU().add(transPostingLog.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates reporting date information for transactions on settlement.
    /// </summary>
    /// <param name="_reversePostingLogSet">
    /// A set containing record IDs of transactions on settlement log records.
    /// </param>

    public static void createTransLink(Set _reversePostingLogSet)
    {
        CustVendTransPostingLog_RU  postingLog;
        SubledgerVoucherGeneralJournalEntry ledgerTrans, ledgerTransReverse;
        LedgerTransLink_RU          ledgerTransLink;
        CustVendTrans               custVendTrans;
        SetEnumerator               enumerator = _reversePostingLogSet.getEnumerator();

        while (enumerator.moveNext())
        {
            select firstonly RefTableId, TransRecId, Voucher, TransDate from postingLog
                where postingLog.RecId == enumerator.current();

            custVendTrans = new DictTable(postingLog.RefTableId).makeRecord();
            select firstonly custVendTrans
                where custVendTrans.RecId == postingLog.TransRecId;

            ledgerTrans.Voucher             = custVendTrans.Voucher;
            ledgerTrans.AccountingDate      = custVendTrans.TransDate;

            ledgerTransReverse.Voucher          = postingLog.Voucher;
            ledgerTransReverse.AccountingDate   = postingLog.TransDate;

            ledgerTransLink = LedgerTransLink_RU::newTrans(ledgerTransReverse, ledgerTrans);
            ledgerTransLink.parmReportingDate(custVendTrans.TransDate);
            ledgerTransLink.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>