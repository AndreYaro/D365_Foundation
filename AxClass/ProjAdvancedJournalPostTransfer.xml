<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalPostTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProjAdvancedJournalPostTransfer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transferErrorJournalLines</Name>
				<Source><![CDATA[
    internal void transferErrorJournalLines(ProjAdvancedJournal _projAdvancedJournal)
    {
        if (FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance()))
        {
            this.transferLinesEnhanced(_projAdvancedJournal);
        }
        else
        {
            this.transferLinesLegacy(_projAdvancedJournal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLinesLegacy</Name>
				<Source><![CDATA[
    private void transferLinesLegacy(ProjAdvancedJournal _projAdvancedJournal)
    {
        if (_projAdvancedJournal.numOfErrorLines())
        {
            ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostTransfer));
            using (var activityContext = logger.integrationJournalActivity().transferAdvancedJournalErrorLinesContext())
            {
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, _projAdvancedJournal.ProjAdvancedJournalId);

                ProjAdvancedJournal errorProjAdvancedJournal = _projAdvancedJournal.findOrCreateErrorProjAdvancedJournal();
  
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::TransferredAdvancedJournalId, errorProjAdvancedJournal.ProjAdvancedJournalId);
                
                // Reassign the journal line header association
                ProjAdvancedJournalLine projAdvancedJournalLineLocal;

                while select forupdate projAdvancedJournalLineLocal
                    where projAdvancedJournalLineLocal.ProjAdvancedJournal == _projAdvancedJournal.RecId 
                        && projAdvancedJournalLineLocal.PostError == NoYes::Yes
                {
                    // Reassign error journal line to new journal, using doUpdate() to avoid the logic in update() being executed,
                    projAdvancedJournalLineLocal.ProjAdvancedJournal = errorProjAdvancedJournal.RecId;
                    projAdvancedJournalLineLocal.PostError = NoYes::No;
                    projAdvancedJournalLineLocal.doUpdate();

                    // Reassign source document line associated with error journal line to source document header for new journal
                    this.updateLineSourceDocument(projAdvancedJournalLineLocal.SourceDocumentLine, errorProjAdvancedJournal.SourceDocumentHeader);
                }

                // Update source document header to complete status since error lines are reallocated
                this.updateHeaderSourceDocument(_projAdvancedJournal.SourceDocumentHeader);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLinesEnhanced</Name>
				<Source><![CDATA[
    private void transferLinesEnhanced(ProjAdvancedJournal _projAdvancedJournal)
    {
        if (_projAdvancedJournal.numOfErrorLines() && _projAdvancedJournal.countLinesByStatus(ProjAdvancedJournalLineStatus::Processing) == 0)
        {
            ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostTransfer));
            using (var activityContext = logger.integrationJournalActivity().transferAdvancedJournalErrorLinesContext())
            {
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, _projAdvancedJournal.ProjAdvancedJournalId);

                if (_projAdvancedJournal.numOfErrorLines() == _projAdvancedJournal.numOfLines())
                {
                    // if all the lines on this journal are marked for transfer, just mark the journal as error
                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::MarkingHeaderAsError, _projAdvancedJournal.ProjAdvancedJournalId);

                    logger.logError(strFmt("@Proj:AllLinesInJournalIsMarkedForTransfer", _projAdvancedJournal.ProjAdvancedJournalId, _projAdvancedJournal.DataAreaId));

                    ttsbegin;
                    _projAdvancedJournal.selectForUpdate(true);
                    _projAdvancedJournal.Status = ProjAdvancedJournalStatus::Error;
                    _projAdvancedJournal.update();
                    ttscommit;
                }
                else
                {
                    ProjAdvancedJournal errorProjAdvancedJournal = _projAdvancedJournal.findOrCreateErrorProjAdvancedJournal();
  
                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::TransferredAdvancedJournalId, errorProjAdvancedJournal.ProjAdvancedJournalId);

                    List journalLinesToUpdate = new List(Types::Int64);
                    // Reassign the journal line header association
                    ProjAdvancedJournalLine projAdvancedJournalLineLocal;

                    while select forupdate projAdvancedJournalLineLocal
                        where projAdvancedJournalLineLocal.ProjAdvancedJournal == _projAdvancedJournal.RecId
                        && (projAdvancedJournalLineLocal.PostError == NoYes::Yes 
                            || (projAdvancedJournalLineLocal.Status == ProjAdvancedJournalLineStatus::Error
                            || projAdvancedJournalLineLocal.Status == ProjAdvancedJournalLineStatus::Unrecoverable
                            || projAdvancedJournalLineLocal.Status == ProjAdvancedJournalLineStatus::ActualsMissing))
                    {
                        journalLinesToUpdate.addEnd(projAdvancedJournalLineLocal.RecId);
                    }

                    this.transferJournalLinesFromList(journalLinesToUpdate, errorProjAdvancedJournal, activityContext);

                    // Update source document header to complete status since error lines are reallocated
                    this.updateHeaderSourceDocument(_projAdvancedJournal.SourceDocumentHeader);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournalLinesFromList</Name>
				<Source><![CDATA[
    private void transferJournalLinesFromList(List _list, ProjAdvancedJournal _errorJournal, SysInstrumentationActivityContext _activityContext)
    {
        ListEnumerator le = _list.getEnumerator();

        while (le.moveNext())
        {
            ProjAdvancedJournalLine projAdvancedJournalLine;

            try
            {
                ttsbegin;
                projAdvancedJournalLine = ProjAdvancedJournalLine::find(le.current(), true);

                // Reassign error journal line to new journal, using doUpdate() to avoid the logic in update() being executed,
                projAdvancedJournalLine.ProjAdvancedJournal = _errorJournal.RecId;
                projAdvancedJournalLine.PostError = NoYes::Yes;
                if (projAdvancedJournalLine.Status != ProjAdvancedJournalLineStatus::Error 
                    && projAdvancedJournalLine.Status != ProjAdvancedJournalLineStatus::Unrecoverable
                    && projAdvancedJournalLine.Status != ProjAdvancedJournalLineStatus::ActualsMissing)
                {
                    projAdvancedJournalLine.Status = ProjAdvancedJournalLineStatus::Error;
                }
                projAdvancedJournalLine.doUpdate();

                // Reassign source document line associated with error journal line to source document header for new journal
                this.updateLineSourceDocument(projAdvancedJournalLine.SourceDocumentLine, _errorJournal.SourceDocumentHeader);
                ttscommit;

                _activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::TransferredAdvancedJournalLines, int642Str(projAdvancedJournalLine.RecId));
            }
            catch
            {
                error (strFmt("@Proj:AdvancedJournalLineTransferErrorMessage", projAdvancedJournalLine.RecId, _errorJournal.ProjAdvancedJournalId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeaderSourceDocument</Name>
				<Source><![CDATA[
    private void updateHeaderSourceDocument (SourceDocumentHeaderRecId _recId)
    {
        SourceDocumentHeader origSourceDocumentHeader = SourceDocumentHeader::find(_recId, true);
        ttsbegin;
        origSourceDocumentHeader.AccountingStatus = SourceDocumentAccountingStatus::Completed;
        origSourceDocumentHeader.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineSourceDocument</Name>
				<Source><![CDATA[
    private void updateLineSourceDocument (SourceDocumentLineRecId _lineRecId, SourceDocumentHeaderRecId _errorHeaderRecId)
    {
        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_lineRecId, true);
        sourceDocumentLine.SourceDocumentHeader = _errorHeaderRecId;
        sourceDocumentLine.AccountingStatus = SourceDocumentLineAccountingStatus::Draft;
        sourceDocumentLine.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>