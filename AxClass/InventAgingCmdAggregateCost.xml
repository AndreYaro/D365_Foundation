<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAgingCmdAggregateCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAgingCmdAggregateCost</c> class is command that aggregates the inventory quantity and value
/// on the aging report.
/// When the cost has been aggregated the class can set the correct cost on a line in the report.
/// </summary>
public class InventAgingCmdAggregateCost implements InventAgingICommand
{
    Map                                     inventoryAsOfMap;
    InventAgingCmdMapQuery                  inventAgingCmdMapQueryAsOf;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates the inventory quantity and value.
    /// </summary>
    public void execute()
    {
        InventQty               aggregatedQty;
        CostAmount              aggregatedAmount;

        InventQty qty = inventAgingCmdMapQueryAsOf.parmQty();
        CostAmount amount = inventAgingCmdMapQueryAsOf.parmAmount();

        if (qty || amount)
        {
            InventDim inventDim = inventAgingCmdMapQueryAsOf.parmInventDimFinancial();

            str mapKey = inventDim.mapKey();

            if (inventoryAsOfMap.exists(mapKey))
            {
                [aggregatedQty, aggregatedAmount] = inventoryAsOfMap.lookup(mapKey);
            }
            aggregatedQty -= qty;
            aggregatedAmount -= amount;
            inventoryAsOfMap.insert(mapKey, [aggregatedQty, aggregatedAmount]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes the calculated inventory value.
    /// </summary>
    public void flush()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map used for aggregation.
    /// </summary>
    protected void init()
    {
        inventoryAsOfMap = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventAgingCmdMapQueryAsOf</Name>
				<Source><![CDATA[
    protected InventAgingCmdMapQuery parmInventAgingCmdMapQueryAsOf(InventAgingCmdMapQuery _inventAgingCmdMapQueryAsOf = inventAgingCmdMapQueryAsOf)
    {
        inventAgingCmdMapQueryAsOf = _inventAgingCmdMapQueryAsOf;

        return inventAgingCmdMapQueryAsOf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the calculated inventory values on the report line.
    /// </summary>
    /// <param name="_line">
    /// The report line.
    /// </param>
    public void setResultOnLine(InventAgingTmp _line)
    {
        InventQty               qty;
        CostAmount              amount;
        CostAmount              unitCost;

        InventDim inventDim = _line.inventDim();
        inventDim.clearNotSelectedDim(inventAgingCmdMapQueryAsOf.parmInventDimParmFinancial());
        str mapKey = inventDim.mapKey();

        if (inventoryAsOfMap.exists(mapKey))
        {
            [qty, amount] = inventoryAsOfMap.lookup(mapKey);
        }

        if (qty)
        {
            unitCost = amount / qty;
        }
        else
        {
            unitCost = 0;
        }

        _line.Qty = qty;
        _line.Amount = amount;
        _line.UnitPrice = unitCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventAgingCmdAggregateCost construct()
    {
        return new InventAgingCmdAggregateCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdAggregateCost</c> class.
    /// </summary>
    /// <param name="_inventAgingCmdMapQueryAsOf">
    /// The instance of the <c>InventAgingCmdMapQueryAsOf</c> class that maps the query result.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAgingCmdAggregateCost</c> class.
    /// </returns>
    public static InventAgingCmdAggregateCost newFromParameters(
        InventAgingCmdMapQuery              _inventAgingCmdMapQueryAsOf)
    {
        InventAgingCmdAggregateCost inventAgingCmdAggregateCost = InventAgingCmdAggregateCost::construct();
        inventAgingCmdAggregateCost.parmInventAgingCmdMapQueryAsOf(_inventAgingCmdMapQueryAsOf);

        return inventAgingCmdAggregateCost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
