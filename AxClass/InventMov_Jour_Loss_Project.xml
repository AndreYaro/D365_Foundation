<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_Loss_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   InventMov_Jour_Loss_Project extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            cacheAccountOperations = ProjPosting::getInventLedgerDimension(ProjAccountType::CostAccount,
                                                            this.projId(), this.projCategoryId());
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCommittedCostBeReversed</Name>
				<Source><![CDATA[
    public boolean canCommittedCostBeReversed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionForAccountOperationsInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a ledger dimension for the specified combination for account operation.
    /// </summary>
    /// <returns>
    ///     The ID of the <c>LedgerDimensionAccount</c> record.
    /// </returns>
    protected LedgerDimensionAccount createLedgerDimensionForAccountOperationsInvent(LedgerDimensionDefaultAccount _defaultAccountOperations)
    {
        LedgerDimensionAccount accountOperations = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccountOperations, inventJournalTrans.DefaultDimension);

        return accountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getdefaultAccountOperationsProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a ledger dimension number for project transactions.
    /// </summary>
    /// <param name = "_listEnumerator">
    ///     The list enumerator consisiting a list of the funding sources.
    /// </param>
    /// <returns>
    ///     The ledger dimension that is used by the transaction.
    /// </returns>
    protected LedgerDimensionDefaultAccount getdefaultAccountOperationsProj(ListEnumerator _listEnumerator)
    {
        LedgerDimensionDefaultAccount defaultAccountOperations = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
            this.projId(),
            this.projCategoryId(),
            false,
            true,
            _listEnumerator.current());

        return defaultAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getdefaultAccountOperationsInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a ledger dimension number based on the specified combination.
    /// </summary>
    /// <returns>
    ///     The ledger dimension that is used by the transaction.
    /// </returns>
    protected LedgerDimensionDefaultAccount getdefaultAccountOperationsInvent()
    {
        LedgerDimensionDefaultAccount defaultAccountOperations = ProjPosting::getInventLedgerDimension(ProjAccountType::CostAccount,this.projId(), this.projCategoryId());

        return defaultAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the account operation is valid for the account that is associated with each
    ///    funding source.
    /// </summary>
    /// <returns>
    ///    true if the opeartion is valid for the posting of every funding source; otherwise, false.
    /// </returns>
    protected boolean checkAccountOperations()
    {
        boolean ok = true;
        MainAccount mainAccount;

        ProjTrans projTrans = ProjTrans::construct(inventJournalTrans);

        List listFungindSources = ProjFundingSource::getFundingSources(projTrans);

        ListEnumerator listEnumerator = listFungindSources.getEnumerator();

        // validate the account used to post from inventory
        LedgerDimensionDefaultAccount defaultAccountOperations = this.getdefaultAccountOperationsInvent();
        LedgerDimensionAccount accountOperations = this.createLedgerDimensionForAccountOperationsInvent(defaultAccountOperations);

        if (accountOperations)
        {
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(accountOperations);

            if (!MainAccount::checkAllowPosting(mainAccount.MainAccountId, this.ledgerPostingType()))
            {
                ok = false;
            }

            if (!MainAccount::checkPostingType(mainAccount.RecId, this.postingOperations()))
            {
                ok = false;
            }

            if (!mainAccount.checkForPosting())
            {
                ok = false;
            }
        }

        defaultAccountOperations = 0;
        accountOperations = 0;

        // validate the account used to post from Project classes
        if (listFungindSources.elements() >= 2 )
        {
            while (listEnumerator.moveNext() & ok)
            {
                defaultAccountOperations = this.getdefaultAccountOperationsProj(listEnumerator);
                accountOperations = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccountOperations, inventJournalTrans.DefaultDimension);

                if (!accountOperations)
                {
                    ok = checkFailed(strFmt("@SYS25235", this.postingOperations()));
                }
                else
                {
                    mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(accountOperations);

                    if (!MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(accountOperations), this.ledgerPostingType()))
                    {
                        ok = false;
                    }

                    if (!MainAccount::checkPostingType(mainAccount.RecId, this.postingOperations()))
                    {
                        ok = false;
                    }

                    if (!mainAccount.checkForPosting())
                    {
                        ok = false;
                    }
                }

                if ( !ok )
                {
                    break;
                }
                else
                {
                    defaultAccountOperations = 0;
                    accountOperations = 0;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFinancial</Name>
				<Source><![CDATA[
    public void initInventTransFinancial(
        InventTrans         _inventTrans,
        TransDate           _dateFinancial,
        InvoiceId           _invoiceId,
        CurrencyCode        _currencyCode)
    {
        super(_inventTrans, _dateFinancial, _invoiceId, _currencyCode);
        this.setProjAdjustRefId(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransPhysical</Name>
				<Source><![CDATA[
    public void initInventTransPhysical(
        InventTrans         _inventTrans,
        TransDate           _datePhysical,
        PackingSlipId       _packingSlipId)
    {
        super(_inventTrans, _datePhysical, _packingSlipId);
        this.setProjAdjustRefId(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the movement should be returned.
    /// </summary>
    /// <param name="_qty">
    /// The inventory quantity of the movement; optional.
    /// </param>
    /// <returns>
    /// true if the movement should be returned; otherwise, false.
    /// </returns>
    /// <remarks>
    /// An inventory journal transaction is considered returned if the related inventory transaction is a
    /// receipt and the <c>inventTransIdReturn</c> value is specified.
    /// </remarks>
    public boolean isReturned(InventQty _qty = 0)
    {
        return this.transSign() > 0 && inventJournalTrans.InventTransIdReturn != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean  journalCheckTrans()
    {
        boolean ok = ProjPost::newCheckTrans(inventJournalTrans).checkTrans();

        if (! super())
        {
            ok = false;
        }

        if (ok)
        {
            InventUpd_Physical physical = InventUpd_Physical::newCheckPostInventJournalTrans(this);

            InventCostOnhandCache inventCostOnhandCache = InventCostOnhandCache::construct();

            InventOnhand inventOnhand = inventCostOnhandCache.getOnhand(this, inventJournalTrans.inventDim());

            if (!inventOnhand.checkItemDrawFinancial(-inventJournalTrans.Qty, physical.parmAllowNegativeFinancial(), true, -inventJournalTrans.PdsCWQty))
            {
                if (this.transType() == InventTransType::QuarantineOrder
                && this.inventLocationId()
                && InventLocation::find(this.inventLocationId()).InventLocationType != InventLocationType::Quarantine)
                {
                    info("@SYS79282");
                }
                ok = checkFailed("@SYS18447");
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetItemId</Name>
				<Source><![CDATA[
    public boolean journalSetItemId(InventDim _inventDim)
    {
        PriceMarkup     markUpDummy;
        PriceUnit       salesUnitDummy;

        if (inventJournalTrans.ItemId)
        {
            inventJournalTrans.ProjUnitID = InventTableModule::find(inventJournalTrans.ItemId,ModuleInventPurchSales::Sales).UnitId;
        }

        boolean ok = super(_inventDim);

        ProjTable projTable = ProjTable::find(this.projId()); // dimension always from project
        inventJournalTrans.DefaultDimension = inventJournalTrans.copyDimension(projTable.DefaultDimension);
        inventJournalTrans.DefaultDimension = inventJournalTrans.mergeDimension(inventJournalTrans.DefaultDimension, inventTable.DefaultDimension);

        if (!inventJournalTrans.ItemId)
        {
            return ok;
        }

        inventJournalTrans.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(inventJournalTrans.ProjCategoryId,inventJournalTrans.ItemId);

        if (projTable.Type == ProjType::Internal ||
            // When <c>ProjEnableMultipleContractLinesForProjectFeature</c> is turned on, internal projects will be any project that does not have a contract        
            (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && !projTable.ProjInvoiceProjId))
        {
            inventJournalTrans.ProjSalesPrice   = 0;
        }
        else
        {
            [inventJournalTrans.ProjSalesPrice,
             salesUnitDummy,
             markUpDummy]                           = inventTable.salesPriceAgreement(
                                                      inventJournalTrans.TransDate,
                                                      inventJournalTrans.inventDim(),
                                                      inventJournalTrans.Qty,
                                                      inventJournalTrans.ProjUnitID,
                                                      ProjTable::find(inventJournalTrans.ProjId).CustAccount,
                                                      inventJournalTrans.ProjSalesCurrencyId,
                                                      ProjTable::findPriceGroup(inventJournalTrans.ProjId));
        }

        inventJournalTrans.updateAssessableValue_IN();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
    public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        InventMovement::setMinMaxQty(inventJournalTrans, _showUserDialog, false, _doMinQtyCheck, _doMaxQtyCheck);

        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCostControlled</Name>
				<Source><![CDATA[
    public boolean mustBeCostControlled()
    {
        if (this.projId()!= '' && ProjParameters::find().TrackCommittedCostItemJournal)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }
        return new InventMov_Jour_Loss_Project(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProjCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return inventJournalTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedgerOrigin</Name>
				<Source><![CDATA[
    public ProjLedgerOrigin projLedgerOrigin()
    {
        return ProjOrigin::ItemJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransactionOrigin</Name>
				<Source><![CDATA[
    public ProjTransactionOrigin projTransactionOrigin()
    {
        return ProjOrigin::ItemJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the original transactions.
    /// </summary>
    /// <returns>
    ///    The ID of the original transaction originator, if there is an originator; otherwise, zero.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        if (!inventJournalTrans.InventTransIdReturn)
        {
            return 0;
        }

        if (!this.isReturned(this.transSign() * inventJournalTrans.Qty))
        {
            return 0;
        }

        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransIdReturn).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjAdjustRefId</Name>
				<Source><![CDATA[
    public void setProjAdjustRefId(InventTrans _inventTrans)
    {
        if (_inventTrans.ProjAdjustRefId)
        {
            projAdjustRefId = _inventTrans.ProjAdjustRefId;
            return;
        }

        if (!_inventTrans.ProjId)
        {
            return;
        }

        if (!projAdjustRefId)
        {
            projAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }
        _inventTrans.ProjAdjustRefId = projAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty _qtyInvent)
    {
        if (!this.parmIsInsufficientReservationQty())
        {
            super(_qtyInvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return  EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.itemId(), 
																					  this.inventDimId(),
																					  -inventJournalTrans.Qty,
																					  this.transUnitId(),
																					  this.inventTable().inventUnitId(),
																					  NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        if (inventJournalTrans.Qty >= 0)
        {
            return  -1;
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return inventJournalTrans.ProjUnitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerAdjust</Name>
				<Source><![CDATA[
    public void updateLedgerAdjust(
        LedgerVoucher       _ledgerVoucher,
        InventUpd_Financial _updateNow,
        CostAmount          _costAmount,
        ProjAdjustRefId     _projAdjustRefId = '',
        ProjTransDate       _projTransDate = dateNull())
    {
        // <GSA>
        if (LedgerParameters::find().IsZakatEnabled_SA
            && this.mustBeBookedBalanceSheet())
        {
            _ledgerVoucher.findLedgerVoucherObject().parmProjIdDefault_SA(this.projId());
        }
        // </GSA>

        super(_ledgerVoucher, _updateNow, _costAmount, _projAdjustRefId, _projTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Jour_Loss_Project</c> class based on the specified
    ///    record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is initialized.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_Loss_Project</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventMov_Jour_Loss_Project newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_Loss_Project(_inventJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionDefault1ForBalanceSheetUpdateLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first dimension default value for balance sheet update ledger and for invent issue item dimensions will be defaulted.
    /// </summary>
    /// <returns>
    /// Returns the financial dimension set.
    /// </returns>
    protected DimensionDefault retrieveDimensionDefault1ForBalanceSheetUpdateLedger()
    {
        DimensionDefault defaultDimension;

        // Only product dimensions should be defaulted for inventory issue transactions when <c>ProjInventIssueAllowsOnlyProductDimensionsFeature</c> feature is enabled.
        if (this.projId()
            && this.postingBalanceSheet() == LedgerPostingType::InventIssue
            && FeatureStateProvider::isFeatureEnabled(ProjInventIssueAllowsOnlyProductDimensionsFeature::instance()))
        {
            defaultDimension = InventTable::find(this.itemId()).DefaultDimension;
        }
        else
        {
            defaultDimension = super();
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>