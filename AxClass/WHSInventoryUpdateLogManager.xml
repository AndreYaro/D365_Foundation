<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryUpdateLogManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInventoryUpdateLogManager
{
    static private WHSInventoryUpdateLogManager singleton;
    private boolean isWHSInventoryUpdateLogFlightEnabled = WHSInventoryUpdateLogFlight::instance().isEnabled();
    private List list;
    private TradeLineNumber lineNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the state of the object.
    /// </summary>
    protected void reset()
    {
        singleton = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCommit</Name>
				<Source><![CDATA[
    private void doCommit()
    {
        if (!list)
        {
            this.reset();
            return;
        }

        WHSInstrumentationLogger instrumentationLogger = this.instrumentationLogger();

        using (var activityContext = instrumentationLogger.inventoryUpdateLogManagerActivities().doCommit())
        {
            utcdatetime transactionValidationTime = DateTimeUtil::utcNow();

            RecordInsertList recordInsertList = new RecordInsertList(tableNum(WHSInventoryUpdateLog));
            ListEnumerator le = list.getEnumerator();
            while (le.moveNext())
            {
                WHSInventoryUpdateLog log = le.current();
                log.TransactionValidationTime = transactionValidationTime;
                recordInsertList.add(log);
            }

            recordInsertList.insertDatabase();
            this.reset();

            instrumentationLogger.inventoryUpdateLogManagerActivities().logDoCommitMetadata(
                        activityContext,
                        list.elements());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAbort</Name>
				<Source><![CDATA[
    private void doAbort()
    {
        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUpdate</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean logUpdate(InventPhysicalOnHandChangeArgs _args)
    {
        return false; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    private void addRecord(WHSInventoryUpdateLog _log)
    {
        if (!list)
        {
            list = new List(Types::Record);
        }

        list.addEnd(_log);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    private void add(InventPhysicalOnHandChangeArgs _args)
    {
        if (isWHSInventoryUpdateLogFlightEnabled && this.logUpdate(_args))
        {
            lineNumber++;

            InventTrans inventTrans = _args.parmInventTrans();

            WHSInventoryUpdateLog log;
            log.InventTransOrigin = inventTrans.InventTransOrigin;
            log.ItemNumber = inventTrans.ItemId;
            log.InventDimId = inventTrans.inventDimId;
            log.LineNumber = lineNumber;
            log.DispositionCode = _args.parmDispositionCode();

            if (PdsGlobal::pdsIsCWItem(inventTrans.ItemId))
            {
                log.HandlingQuantity = _args.parmDeltaCWQuantity();
                log.HandlingWeight = _args.parmDeltaQuantity();
            }
            else
            {
                log.HandlingQuantity = _args.parmDeltaQuantity();
            }

            this.addRecord(log);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePhysicalOnHandOnChanging</Name>
				<Source><![CDATA[
    [
        SubscribesTo(classStr(InventUpdate), delegatestr(InventUpdate, physicalOnHandChanging)),
        SubscribesTo(classStr(WHSInventoryTransactionRegistrationAction), delegatestr(WHSInventoryTransactionRegistrationAction, physicalOnHandChanging))
    ]
    static internal void handlePhysicalOnHandOnChanging(
        Object                          _context,
        InventPhysicalOnHandChangeArgs  _args)
    {
        if (!singleton)
        {
            singleton = new WHSInventoryUpdateLogManager();
        }

        singleton.add(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the log to the DB.
    /// </summary>
    /// <remarks>
    /// This method must be called after the on-hand checks has been performed, 
    /// since we need to know the point in time where the transaction is valid.
    /// </remarks>
    static internal void commit()
    {
        if (singleton)
        {
            singleton.doCommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>abort</Name>
				<Source><![CDATA[
    static internal void abort()
    {
        if (singleton)
        {
            singleton.doAbort();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>