<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceCustController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankPaymAdviceCustController</c> class is the controller class for the
///    <c>BankPaymAdviceCust</c> report.
/// </summary>
[SysObsolete('This class is obsolete. Please use the BankPaymAdviceCustControllerV2 class.', true, 10\5\2023)]
public class BankPaymAdviceCustController extends SrsPrintMgmtController implements BatchRetryable
{
    protected BankPaymAdviceReportGenerator bankPaymAdviceReportGenerator;

    private CustVendPaymIPrinterSettingsProvider custVendPaymIPrinterSettingsProvider;
    private List paymList;
    private CustTable custTable;
    private int currentSessionId;
    private NoYes usePrintMgmtDestinations;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        this.getArgs();

        if (paymList.empty())
        {
            return;
        }

        BankPaymAdvicePrintMgmtReportFormatSetup::setDefaultFormat(PrintMgmtDocumentType::CustPaymAdvice);

        this.initReportGenerator();
        this.findCurrentSessionId();
        this.updateReportQuery();

        ListEnumerator li = paymList.getEnumerator();
        while (li.moveNext() && !this.parmCancelRun())
        {
            LedgerJournalTrans ledgerJournalTrans;
            ledgerJournalTrans.data(li.current());

            this.findCustTable(ledgerJournalTrans);
            this.generateData(ledgerJournalTrans);

            changecompany(custTable.DataAreaId)
            {
                this.initPrintMgmtReportRun();
                this.initPrintMgmtDestinationSettings();
            }

            CustLanguageId custLanguageId = this.getCustomerLanguage(custTable);

            this.parmReportContract().parmRdlContract().parmLabelLanguageId(custLanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(custLanguageId);

            if (printMgmtReportRun.more())
            {
                this.outputReports();
            }
            else
            {
                warning("@CashManagement:PrintMgmtCustPaymAdviceNotProduced");
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArgs</Name>
				<Source><![CDATA[
    private void getArgs()
    {
        custVendPaymIPrinterSettingsProvider = this.parmArgs().caller();
        paymList = this.parmArgs().parmObject();
        if (this.parmArgs().parmEnumType() && this.parmArgs().parmEnumType() == enumNum(NoYes))
        {
            usePrintMgmtDestinations = this.parmArgs().parmEnum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportGenerator</Name>
				<Source><![CDATA[
    private void initReportGenerator()
    {
        LedgerJournalTrans ledgerJournalTrans;
        ListEnumerator li;

        li = paymList.getEnumerator();
        li.moveNext();
        ledgerJournalTrans = li.current();

        bankPaymAdviceReportGenerator = BankPaymAdviceReportGenerator::newForJournal(ledgerJournalTrans.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentSessionId</Name>
				<Source><![CDATA[
    private void findCurrentSessionId()
    {
        currentSessionId = new xSession().sessionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportQuery</Name>
				<Source><![CDATA[
    private void updateReportQuery()
    {
        Query reportQuery = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        SrsReportHelper::addParameterValueRangeToQuery(
            reportQuery,
            tableNum(BankPaymAdviceCustTmp),
            fieldNum(BankPaymAdviceCustTmp, SessionId),
            queryValue(currentSessionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTable</Name>
				<Source><![CDATA[
    private void findCustTable(LedgerJournalTrans _ledgerJournalTrans )
    {
        custTable = CustTable::findByCompany(_ledgerJournalTrans.Company,
            _ledgerJournalTrans.parmAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerLanguage</Name>
				<Source><![CDATA[
    private CustLanguageId getCustomerLanguage(CustTable _custTable)
    {
        CustLanguageId custLanguageId = _custTable.languageId();
        return custLanguageId ? custLanguageId : CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    private void generateData(LedgerJournalTrans _ledgerJournalTrans)
    {
        bankPaymAdviceReportGenerator.deleteReportData();
        bankPaymAdviceReportGenerator.generateReportData(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
        PrintMgmtHierarchyType::Sales,
            PrintMgmtNodeType::CustTable,
            PrintMgmtDocumentType::CustPaymAdvice);

        printMgmtReportRun.parmReportRunController(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintMgmtReportRun</Name>
				<Source><![CDATA[
    private void loadPrintMgmtReportRun()
    {
        CustLanguageId custLanguageId = this.getCustomerLanguage(custTable);

        if (isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
        {
            printMgmtReportRun.parmForcePrintJobSettings(!usePrintMgmtDestinations);
        }

        printMgmtReportRun.load(custTable, custTable, custLanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtDestinationSettings</Name>
				<Source><![CDATA[
    private void initPrintMgmtDestinationSettings()
    {
        if (usePrintMgmtDestinations || isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
        {
            this.loadPrintMgmtReportRun();
        }
        else
        {
            this.loadDefaultSRSPrintDestinationSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultSRSPrintDestinationSettings</Name>
				<Source><![CDATA[
    private void loadDefaultSRSPrintDestinationSettings()
    {
        PrintMgmtDocInstanceType docInstanceType = PrintMgmtDocInstanceType::Original;

        PrintMgmtReportFormat printMgmtReportFormat;
        printMgmtReportFormat = PrintMgmtReportFormat::findSystem(PrintMgmtDocumentType::CustPaymAdvice);

        PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();
        printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
        printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);
        printSettingDetail.parmType(docInstanceType);
        printSettingDetail.parmInstanceName(enum2str(docInstanceType));
        printSettingDetail.parmNumberOfCopies(1);
        printSettingDetail.parmPrintJobSettings(this.getDefaultSRSPrintDestinationSettings());

        printMgmtReportRun.loadSettingDetail(printSettingDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSRSPrintDestinationSettings</Name>
				<Source><![CDATA[
    private SRSPrintDestinationSettings getDefaultSRSPrintDestinationSettings()
    {
        SRSPrintDestinationSettings printDestinationSetting = new SRSPrintDestinationSettings();
        container printerSetting = custVendPaymIPrinterSettingsProvider.getPrinterSettings(PaymDocumentType::PaymAdvice);
        printDestinationSetting.unpack(printerSetting);

        return printDestinationSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doNotUseWaitPattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to indicate that the wait pattern is not needed.
    /// </summary>
    /// <returns>true if the wait pattern is not needed; Otherwise, false.</returns>
    public boolean doNotUseWaitPattern()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController  controller = new BankPaymAdviceCustController();
        controller.parmReportName(ssrsReportStr(BankPaymAdviceCust, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected void outputReport()
    {
        if (FeatureStateProvider::isFeatureEnabled(ReportDestinationContractWave1Feature::instance()))
        {
            int initialParmEnumType = this.parmArgs().parmEnumType();
            int initialParmEnum = this.parmArgs().parmEnum();
            Object initialParmObject = this.parmArgs().parmObject();

            try
            {
                this.parmArgs().parmEnumType(enumNum(PrintCopyOriginal));
                this.parmArgs().parmEnum(PrintCopyOriginal::OriginalPrint);

                super();
            }
            finally
            {
                this.parmArgs().parmEnumType(initialParmEnumType);
                this.parmArgs().parmEnum(initialParmEnum);
                this.parmArgs().parmObject(initialParmObject);
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>