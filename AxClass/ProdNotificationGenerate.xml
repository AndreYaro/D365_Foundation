<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdNotificationGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdNotificationGenerate extends RunBaseBatch implements BatchRetryable
{
    private ProdNotificationSetup selectedNotificationSetup;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        selectedNotificationSetup
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList] = _packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        var dial = Dialog::newFormnameRunbase(formStr(ProdNotificationRun),this);
        return this.dialogInternal(dial);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationSetup</Name>
				<Source><![CDATA[
    public ProdNotificationSetupRecId parmNotificationSetup()
    {
        return selectedNotificationSetup.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:GenerateNotifications";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (selectedNotificationSetup.RecId != 0)
        {
            this.generateNotificationForSetup(selectedNotificationSetup);
        }
        else
        {
            while select selectedNotificationSetup
            {
                this.generateNotificationForSetup(selectedNotificationSetup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNotificationForSetup</Name>
				<Source><![CDATA[
    private void generateNotificationForSetup(ProdNotificationSetup _prodNotificationSetup)
    {
        SysDictClass dictClass = new SysDictClass(className2Id(_prodNotificationSetup.ClassName));
        ProdINotificationRule ruleClass = dictClass.makeObject();
        ruleClass.generateNotifications(_prodNotificationSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdNotificationGenerate notificationGenerate = new ProdNotificationGenerate();

        if (_args)
        {
            var caller = _args.caller();

            if (_args.caller() != null)
            {
                ProdNotificationSetup setupRecord = _args.record() as ProdNotificationSetup;
                notificationGenerate.getLast();
                notificationGenerate.selectedNotificationSetup = setupRecord;
            }
        }

        if (notificationGenerate.prompt())
        {
            notificationGenerate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>