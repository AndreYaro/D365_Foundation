<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_TORG12_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form TORG-12 to excel
/// </summary>
class XmlExcelReport_TORG12_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    private const str LocalizationFeatureReference = 'EEU-00025';
    TaxAmount           vatAmountOnPage;
    AmountCur           totalAmountOnPage,
                        amountWithVATOnPage;
    Weight              grossWeightAmountOnPage;
    InventQty           qtyAmountOnPage,
                        qtyNumberAmountOnPage;

    Name                currencyExt;

    str                 totalAmountStr1,
                        totalAmountStr2,
                        attorney1,
                        attorney2,
                        attorney3;

    SalesPurchReport_RU salesPurchReport;

    #define.width (57)
    #define.hyphen('-')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    protected void addTotalsOnPage()
    {
        vatAmountOnPage         += line.vatAmount;
        totalAmountOnPage       += line.LineAmount;
        amountWithVATOnPage     += line.lineAmountWithVAT();
        grossWeightAmountOnPage += line.GrossWeight;
        qtyAmountOnPage         += line.Qty;
        qtyNumberAmountOnPage   += line.QtyNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return max(document.getNamedRangeHeightWrapped('lineNo' , int2str(lineNo)),
                   document.getNamedRangeHeightWrapped('Name'   , line.ItemName),
                   document.getNamedRangeHeightWrapped('ItemId' , line.ItemId),
                   document.getNamedRangeHeightWrapped('Packing', line.Packing),
                   document.getNamedRangeHeightWrapped('UnitId' , line.Unit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    protected void clearTotalsOnPage()
    {
        vatAmountOnPage         = 0;
        totalAmountOnPage       = 0;
        amountWithVATOnPage     = 0;
        grossWeightAmountOnPage = 0;
        qtyAmountOnPage         = 0;
        qtyNumberAmountOnPage   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        curWorkSheetNum = 1;
        widthCols       = #width;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00056, funcName());

        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// number of invoiceId or sales purch id
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return strFmt("%1_%2", documentName, documentNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TORG12';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        this.insertValueToSection('lineNo'            , lineNo);
        this.insertValueToSection('Name'              , line.ItemName);
        this.insertValueToSection('ItemId'            , line.ItemId);
        this.insertValueToSection('UnitId'            , line.Unit);
        this.insertValueToSection('OKEI'              , line.CodeOKEI);
        this.insertValueToSection('Packing'           , line.Packing);
        if (line.TaxPackagingQty)
        {
            this.insertValueToSection('TaxPackagingQty'   , line.TaxPackagingQty);
        }
        else
        {
            this.insertValueToSection('TaxPackagingQty'   , #hyphen);
        }
        if (line.QtyNumber)
        {
            this.insertValueToSection('QtyNumber'         , line.QtyNumber);
        }
        else
        {
            this.insertValueToSection('QtyNumber'         , #hyphen);
        }
        if (line.GrossWeight)
        {
            this.insertValueToSection('GrossWeight'       , line.GrossWeight);
        }
        else
        {
            this.insertValueToSection('GrossWeight'       , #hyphen);
        }
        if (line.Qty)
        {
            this.insertValueToSection('Qty'               , line.Qty);
        }
        else
        {
            this.insertValueToSection('Qty'               , #blank);
        }
        this.insertValueToSection('Price'             , line.Price);
        this.insertValueToSection('Amount'            , line.LineAmount);
        this.insertValueToSection('VATValue'          , line.VatValueStr);
        this.insertValueToSection('VATAmount'         , line.vatAmount);
        this.insertValueToSection('AmountWithVAT'     , line.lineAmountWithVAT());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
        if (qtyNumberAmountOnPage)
        {
            this.insertValueToSection('QtyNumberPage'     , qtyNumberAmountOnPage);
        }
        else
        {
            this.insertValueToSection('QtyNumberPage'     , #hyphen);
        }
        if (grossWeightAmountOnPage)
        {
            this.insertValueToSection('GrossWeightPage'   , grossWeightAmountOnPage);
        }
        else
        {
            this.insertValueToSection('GrossWeightPage'   , #hyphen);
        }
        this.insertValueToSection('QtyPage'           , qtyAmountOnPage);
        this.insertValueToSection('AmountPage'        , totalAmountOnPage);
        this.insertValueToSection('VATAmountPage'     , vatAmountOnPage);
        this.insertValueToSection('AmountWithVATPage' , amountWithVATOnPage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
/// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('pageNo'              , this.pageNum());
        this.insertValueToSection('WeightUnit'          , header.UnitId);
        this.insertValueToSection('curExtPrice'         , this.getCurrencyExt());
        this.insertValueToSection('curExtAmount'        , this.getCurrencyExt());
        this.insertValueToSection('curExtVAT'           , this.getCurrencyExt());
        this.insertValueToSection('curExtAmountWithVAT' , this.getCurrencyExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        this.initSplitText();

        if (header.TotalPackagingQty)
        {
            this.insertValueToSection('QtyNumberTotal'     , header.TotalPackagingQty);
        }
        if (header.TotalGrossWeight)
        {
            this.insertValueToSection('GrossWeightTotal'   , header.TotalGrossWeight);
        }
        this.insertValueToSection('QtyTotal'           , header.TotalQty);
        this.insertValueToSection('AmountTotal'        , header.TotalAmount);
        this.insertValueToSection('VATAmountTotal'     , header.TotalVATAmount);
        this.insertValueToSection('AmountWithVATTotal' , header.TotalAmountWithVAT);

        this.insertValueToSection('ItemQty'                   , this.itemQty());
        this.insertValueToSection('NetWeightStr'              , this.getTotalQtyStr());
        this.insertValueToSection('GrossWeightStr'            , this.getTotalGrossWeightStr());
        this.insertValueToSection('QtyNumberStr'              , this.getTotalQtyNumberStr());
        this.insertValueToSection('TotalAmountWithVATStr'     , totalAmountStr1);
        this.insertValueToSection('TotalAmountWithVATStr2'    , totalAmountStr2);
        this.insertValueToSection('DeliveryAllowedTitle'      , header.DirectorTitle);
        this.insertValueToSection('DeliveryAllowedName'       , header.DirectorName);
        this.insertValueToSection('AccountantName'            , header.AccountantName);
        this.insertValueToSection('SupplierTitle'             , header.SupplierTitle);
        this.insertValueToSection('SupplierName'              , header.SupplierName);
        this.insertValueToSection('AcceptorTitle'             , header.AcceptorTitle);
        this.insertValueToSection('AcceptorName'              , header.AcceptorName);
        this.insertValueToSection('TakerTitle'                , header.TakerTitle);
        this.insertValueToSection('TakerName'                 , header.TakerName);
        this.insertValueToSection('AttorneyId'                , header.AttorneyId);
        this.insertValueToSection('AttorneyDate'              , header.AttorneyDate);
        this.insertValueToSection('AttorneyIssuedName'        , attorney1);
        this.insertValueToSection('AttorneyIssuedName2'       , attorney2);
        this.insertValueToSection('AttorneyIssuedName3'       , attorney3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        this.insertValueToSectionNoOverflow('ConsignorBankAddress', header.ConsignorBankAddress);
        this.insertValueToSection(          'ConsignorStructDep'  , header.ConsignorStructDept);
        this.insertValueToSectionNoOverflow('ConsigneeBankAddress', header.ConsigneeBankAddress);
        this.insertValueToSectionNoOverflow('VendBankAddress'     , header.VendBankAddress);
        this.insertValueToSectionNoOverflow('CustBankAddress'     , header.CustBankAddress);
        this.insertValueToSection('OrderDescription', strFmt("@SYS53179", this.getOrderDescription(), header.LanguageId ? 
            SysLabel::labelId2String(literalStr("@GLS100920"), header.LanguageId) : "@GLS100920", header.InvoiceDate));
        this.insertValueToSection(          'InvoiceId'           , header.InvoiceId);
        this.insertValueToSection(          'InvoiceDate'         , header.InvoiceDate);
        this.insertValueToSection(          'ConsignorOKPO'       , header.ConsignorOKPO);
        this.insertValueToSection(          'ConsignorOKDP'       , header.ConsignorOKDP);
        this.insertValueToSection(          'ConsigneeOKPO'       , header.ConsigneeOKPO);
        this.insertValueToSection(          'VendOKPO'            , header.VendOKPO);
        this.insertValueToSection(          'CustOKPO'            , header.CustOKPO);
        this.insertValueToSection(          'OrderNumber'         , this.getOrderDescription());
        this.insertValueToSection(          'DocumentName'        , header.DocumentName);
        this.insertValueToSection(          'BillOfLading'        , header.BillOfLadingId);
        this.insertValueToSection(          'BillOfLadingDate'    , header.BillOfLadingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns extended currency description
    /// </summary>
    /// <returns>
    /// Return value consists of name of currency and name of pennies
    /// </returns>
    protected Name getCurrencyExt()
    {
        CurrencyNameDeclension_RU currencyNameDeclension;

        if (!currencyExt)
        {
            GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
            currencyNameDeclension = CurrencyNameDeclension_RU::find(
                header.CurrencyCode,
                header.LanguageId);

            currencyExt = currencyNameDeclension.ShortName && currencyNameDeclension.ShortNamePenny          ?
                strFmt("@SYS26868", currencyNameDeclension.ShortName, currencyNameDeclension.ShortNamePenny) :
                currencyNameDeclension.ShortName + currencyNameDeclension.ShortNamePenny;
        }

        return currencyExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates order description
    /// </summary>
    /// <returns>
    /// Order description
    /// </returns>
    protected Description getOrderDescription()
    {
        boolean isFTI = salesPurchReport && salesPurchReport.documentStatus() == DocumentStatus::FreeTextInvoice;;
        return header.OrderDescription + #space + (isFTI ? header.InvoiceId : header.SalesPurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountWithVATStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total amount with VAT for report in words
    /// </summary>
    /// <returns>
    /// Total amount with VAT for report in words
    /// </returns>
    protected Name getTotalAmountWithVATStr()
    {
        return converter.numeralsToCurrency(header.TotalAmountWithVAT, header.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalGrossWeightStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total gross weight for report in words plus unit id
    /// </summary>
    /// <returns>
    /// Total gross weight for report in words plus unit id
    /// </returns>
    protected Name getTotalGrossWeightStr()
    {
        return converter.numeralsToTxt(header.TotalGrossWeight) + #space + header.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyNumberStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total packaging qty for report converted to string
    /// </summary>
    /// <returns>
    /// Total packaging qty for report converted to string
    /// </returns>
    protected Name getTotalQtyNumberStr()
    {
        return converter.numeralsToTxt(trunc(header.TotalPackagingQty) + (header.TotalPackagingQty - trunc(header.TotalPackagingQty) ? 1 : 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total qty for report in words plus unit id
    /// </summary>
    /// <returns>
    /// Total qty for report in words plus unit id
    /// </returns>
    protected Name getTotalQtyStr()
    {
        return converter.numeralsToTxt(header.TotalNetWeight) + #space + header.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes texts in report which has to be splitted between several lines
    /// </summary>
    #define.amountChars(44)
    #define.attorneyChars1(47)
    #define.attorneyChars2(52)
    protected void initSplitText()
    {
        [totalAmountStr1,totalAmountStr2] = XMLExcelReport_RU::splitStrByLines(this.getTotalAmountWithVATStr(), [#amountChars]);
        [attorney1, attorney2, attorney3] = XMLExcelReport_RU::splitStrByLines(header.AttorneyIssuedName, [#attorneyChars1, #attorneyChars2]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns no of lines in report in words
    /// </summary>
    /// <returns>
    /// No of lines in report in words
    /// </returns>
    protected Num itemQty()
    {
        return converter.numeralsToTxt(header.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns string which contains data about page number
    /// </summary>
    /// <returns>
    /// String which contains data about page number
    /// </returns>
    protected PageNum_RU pageNum()
    {
        if (pageNum > 1)
            return strFmt(SysLabel::labelId2String(literalStr("@SYS24160"), header.LanguageId), pageNum);

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes salesPurchReport_RU caller reference to the class
    /// </summary>
    /// <param name="_salesPurchReport">
    /// Caller salesPurchReport class
    /// </param>
    public void parmSalesPurchReport(SalesPurchReport_RU _salesPurchReport)
    {
        salesPurchReport = _salesPurchReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(TORG12_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    #define.cellsBody(15)
    #define.cellsOther(46)
    protected Counter totalCells()
    {
        TmpSalesPurchReportLine_RU      lineLocal;
        TmpSalesPurchReportTable_RU     headerLocal;

        lineLocal.setTmpData(line);
        select count(RecId) from lineLocal;

        headerLocal.setTmpData(header);
        select count(RecId) from headerLocal;

        return int642int(headerLocal.RecId) * #cellsOther + (int642int(lineLocal.RecId) * #cellsBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_TORG12_RU construct()
    {
        return new XMLExcelReport_TORG12_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>