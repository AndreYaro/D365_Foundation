<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransEmplProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransEmplProposalSale extends ProjTransEmplProposal
{
    ProjProposalEmplDetail  projProposalEmplDetail;
    ProjEmplTransSale       projEmplTransSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
        public DimensionDefault defaultDimension()
    {
        return projEmplTransSale.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    public AmountMST ledgerSalesAmountMST()
    {
        return projEmplTransSale.LedgerSalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        return projEmplTransSale.LedgerSalesPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjProposalEmpl _projProposalEmpl, ProjProposalEmplDetail _projProposalEmplDetail, ProjEmplTransSale _projEmplTransSale)
    {
        projProposalEmplDetail = _projProposalEmplDetail;
        projEmplTransSale = _projEmplTransSale;

        super(_projProposalEmpl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        boolean invoiced   = ProjProposalJour::find(projProposalEmpl.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;

        if (invoiced)
        {
            return (select projInvoiceEmpl
                        where projInvoiceEmpl.ProjInvoiceId == ProjProposalJour::find(projProposalEmpl.ProposalId).ProjInvoiceId
                           && projInvoiceEmpl.TransId       == this.transId()).Qty;
        }
        else
        {
            if (this.transStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -projEmplTrans.Qty;
            }
            else
            {
                return projEmplTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return projProposalEmplDetail.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
        public ProjTransStatus transStatus()
    {
        return projEmplTransSale.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return CurrencyExchange::round(projProposalEmplDetail.AmountCur, this.currencyIdSales());        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>