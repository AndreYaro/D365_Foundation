<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheet implements SysPackable
{
    #define.DefaultRootNodeId(1)
    #define.DefaultRootNodeCode("Root")
    #define.SafetyLimit(100)

    CostSheetId                     sheetId;
    CostSheetNode                   rootNode;
    boolean                         isCalculated;

    Map                             nodeIndexMap;
    CostSheetCostGroupImpactMap     costGroupImpactMap;

    // Map: node code -> node Id
    Map                             cachedCode2NodeIdMap;
    boolean                         useCache;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        sheetId,
        useCache
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSubnode</Name>
				<Source><![CDATA[
    public void addSubnode(
        CostSheetNodeComposite  _parentNode,
        CostSheetNode           _newSubnode,
        CostSheetNodeId         _insertAfterNodeId = 0)
    {
        _parentNode.addSubnode(_newSubnode, _insertAfterNodeId);

        nodeIndexMap = null; // invalidate the map
        _newSubnode.update(_parentNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToNodeIndexMap</Name>
				<Source><![CDATA[
    public void addToNodeIndexMap(CostSheetNode _costSheetNode)
    {
        this.nodeIndexMap().insert(_costSheetNode.getNodeId(), _costSheetNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public boolean calc(
        CostCalcTransData   _costCalcTransData,
        boolean             _silent = false,
        boolean             _singlePass = false)
    {
        if (rootNode == null)
        {
            return checkFailed("@SYS104688");
        }

        this.clearCalcTransData();
        rootNode.calc(this, _costCalcTransData);

        if (!_singlePass)
        {
            int safetyCounter = 0;
            while (!rootNode.isCalculated() && safetyCounter < #SafetyLimit)
            {
                safetyCounter++;
                rootNode.calc(this, _costCalcTransData);
            }
        }

        if (rootNode.isCalculated())
        {
            isCalculated = true;
        }
        else
        {
            isCalculated = _silent ? false : checkFailed("@SYS104689");
        }

        return isCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCalcTransData</Name>
				<Source><![CDATA[
    public void clearCalcTransData()
    {
        isCalculated = false;

        MapEnumerator nodeEnumerator = this.getNodeIndexMapEnumerator();
        while (nodeEnumerator.moveNext())
        {
            CostSheetNode costSheetNode = nodeEnumerator.currentValue();
            costSheetNode.clearCalcTransData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    public boolean equal(Object _costSheet)
    {
        return rootNode.equal(_costSheet.getRootNode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostGroupImpactMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a <c>Map</c> object that has information about how cost groups affect the costing sheet
    ///    calculation.
    /// </summary>
    /// <remarks>
    ///    The costing sheet is recalculated for each cost group and the nodes are checked for having cost
    ///    data. If the cost data exists, the cost group is considered to inpact the node. This information
    ///    will be stored in a table and used when you load the costing sheet for calculation, so that only
    ///    the limited set of nodes would be loaded for a particular calculation input.
    /// </remarks>
    protected void fillCostGroupImpactMap()
    {
        BOMCostGroup        bomCostGroup;

        costGroupImpactMap = CostSheetCostGroupImpactMap::construct();

        CostCalcTransData costCalcTransData = CostCalcTransData::construct();
        // add all existing cost groups
        while select CostGroupId from bomCostGroup
        {
            costCalcTransData.addCalcTrans(bomCostGroup.CostGroupId, '', ItemCalcType::Item, '', 1, 1, 1, 1, 1, '');
        }
        // add a blank cost group
        costCalcTransData.addCalcTrans('', '', ItemCalcType::Item, '', 1, 1, 1, 1, 1, '');

        this.clearCalcTransData();
        rootNode.calc(this, costCalcTransData);

        int safetyCounter = 0;
        while (!rootNode.isCalculated() && safetyCounter < #SafetyLimit)
        {
            safetyCounter++;
            rootNode.calc(this, costCalcTransData);
        }

        if (!rootNode.isCalculated())
            throw error("@SYS104689");

        rootNode.fillCostGroupImpactMap(costGroupImpactMap);

        this.clearCalcTransData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNodeIndexMap</Name>
				<Source><![CDATA[
    public void fillNodeIndexMap()
    {
        nodeIndexMap = new Map(Types::Integer, Types::Class);

        rootNode.fillNodeIndexMap(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNode</Name>
				<Source><![CDATA[
    public CostSheetNode findNode(CostSheetNodeId _nodeId)
    {
        if (!this.nodeIndexMap().exists(_nodeId))
            return null;

        return this.nodeIndexMap().lookup(_nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNodeByCode</Name>
				<Source><![CDATA[
    public CostSheetNode findNodeByCode(CostSheetNodeCode _code)
    {
        CostSheetNode       costSheetNode = null;

        if (this.getCode2NodeIdMap().exists(_code))
        {
            costSheetNode = this.findNode(this.getCode2NodeIdMap().lookup(_code));
        }

        return costSheetNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNodeParent</Name>
				<Source><![CDATA[
    public CostSheetNode findNodeParent(CostSheetNode _node)
    {
        return _node.getParentNode(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateResult</Name>
				<Source><![CDATA[
    public void generateResult(CostSheetResultOutput _resultOutput)
    {
        List resultLineList = new List(Types::Class);
        rootNode.fillResultLineList(this, resultLineList);
        _resultOutput.load(resultLineList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCode2NodeIdMap</Name>
				<Source><![CDATA[
    public Map getCode2NodeIdMap(boolean _flush = false)
    {
        if (!_flush && useCache && cachedCode2NodeIdMap != null)
            return cachedCode2NodeIdMap;

        Map code2NodeIdMap = new Map(Types::String, Types::Integer);

        MapEnumerator nodeIndexMapEnumerator = this.getNodeIndexMapEnumerator();
        while (nodeIndexMapEnumerator.moveNext())
        {
            CostSheetNode costSheetNode = nodeIndexMapEnumerator.currentValue();
            code2NodeIdMap.insert(costSheetNode.getCode(), costSheetNode.getNodeId());
        }

        if (useCache)
        {
            cachedCode2NodeIdMap = code2NodeIdMap;
        }

        return code2NodeIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNodeId</Name>
				<Source><![CDATA[
    public CostSheetNodeId getMaxNodeId()
    {
        CostSheetNodeId     maxNodeId;

        ListEnumerator enumerator = this.getNodeEnumerator(CostSheetNodeListType::All);
        while (enumerator.moveNext())
        {
            CostSheetNode node = enumerator.current();
            if (node.getNodeId() > maxNodeId)
            {
                maxNodeId = node.getNodeId();
            }
        }

        return maxNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeEnumerator</Name>
				<Source><![CDATA[
    public ListEnumerator getNodeEnumerator(CostSheetNodeListType _nodeListType)
    {
        List            nodeList = new List(Types::Class);

        rootNode.fillNodeList(nodeList, _nodeListType);
        ListEnumerator listEnumerator = nodeList.getEnumerator();

        return listEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeIndexMapEnumerator</Name>
				<Source><![CDATA[
    public MapEnumerator getNodeIndexMapEnumerator()
    {
        return this.nodeIndexMap().getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootNode</Name>
				<Source><![CDATA[
    public CostSheetNodeRoot getRootNode()
    {
        return rootNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSheetId</Name>
				<Source><![CDATA[
    public CostSheetId getSheetId()
    {
        return sheetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculated</Name>
				<Source><![CDATA[
    public boolean isCalculated()
    {
        return isCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDescendantOf</Name>
				<Source><![CDATA[
    public boolean isDescendantOf(
        CostSheetNode _potentialChildNode,
        CostSheetNode _potentialParentNode)
    {
        return _potentialChildNode.isDescendantOf(this, _potentialParentNode.getNodeId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    public void load(
        CostSheetId             _sheetId,
        CostSheetModeStrategy   _modeStrategy)
    {
        sheetId = _sheetId;
        nodeIndexMap = null;

        useCache = !_modeStrategy.canModifyCostSheet();
        CostSheetNodeTable costSheetNodeTable = _modeStrategy.getNodeCursor();

        select firstonly costSheetNodeTable
            where costSheetNodeTable.SheetId == _sheetId
               && costSheetNodeTable.Level == 0;

        if (costSheetNodeTable == null)
        {
            // The very first time the costing sheet is accessed,
            // it will have no nodes stored in the database. We substitute
            // the root node in this case.

            costSheetNodeTable.clear();
            costSheetNodeTable.SheetId = _sheetId;
            costSheetNodeTable.NodeId = #DefaultRootNodeId;
            costSheetNodeTable.Code = #DefaultRootNodeCode;
            costSheetNodeTable.Type = CostSheetNodeType::Root;
        }

        rootNode = CostSheetNodeRoot::construct(costSheetNodeTable, 0, _modeStrategy);
        rootNode.fillNodeIndexMap(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateCostGroupImpact</Name>
				<Source><![CDATA[
    public boolean mustUpdateCostGroupImpact()
    {
        return costGroupImpactMap != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        isCalculated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeIndexMap</Name>
				<Source><![CDATA[
    protected Map nodeIndexMap()
    {
        if (nodeIndexMap == null)
        {
            this.fillNodeIndexMap();
        }

        return nodeIndexMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedRootNode = rootNode == null ? conNull() : rootNode.pack(true);
        return [#CurrentVersion, #CurrentList] + [packedRootNode] + [this.getSurchargesMap().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSubnode</Name>
				<Source><![CDATA[
    public Set removeSubnode(
        CostSheetNodeComposite  _parentNode,
        CostSheetNode           _subnodeToRemove)
    {
        Set removedNodeIdSet = _parentNode.removeSubnode(_subnodeToRemove);
        nodeIndexMap = null; // invalidate the map

        return removedNodeIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSurchargesMap</Name>
				<Source><![CDATA[
    private Map getSurchargesMap()
    {
        ListEnumerator enumerator = this.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);
        Map surchargesMap = new Map(Types::Integer, Types::Class);

        while (enumerator.moveNext())
        {
            CostSheetNodeCalculation nodeCalculation = enumerator.current();
            if (nodeCalculation)
            {
                surchargesMap.insert(nodeCalculation.getNodeId(), nodeCalculation.parmFactorList());
            }
        }
        return surchargesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFactorMap</Name>
				<Source><![CDATA[
    private void loadFactorMap(Map _factorMap)
    {
        MapEnumerator enumerator = _factormap.getEnumerator();
        while (enumerator.moveNext())
        {
            CostSheetNodeCalculation calculation = this.findNode(enumerator.currentKey());
            if (calculation)
            {
                calculation.parmFactorList(enumerator.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    public void save()
    {
        #define.FirstLineNum(1)

        CostSheetNodeTable          costSheetNodeTable;

        ttsbegin;

        delete_from costSheetNodeTable
            where costSheetNodeTable.SheetId == sheetId;

        rootNode.save(this, #FirstLineNum);

        CostSheetFactory::construct().clearCachedData();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCostGroupImpact</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes information collected by the <c>fillNodeIndexMap</c> method to the database.
    /// </summary>
    protected void saveCostGroupImpact()
    {
        CostSheetCostGroupImpact    costSheetCostGroupImpact;

        delete_from costSheetCostGroupImpact
            where costSheetCostGroupImpact.SheetId == sheetId;

        RecordInsertList rilCostSheetCostGroupImpact = new RecordInsertList(tableNum(CostSheetCostGroupImpact));

        MapEnumerator mapEnumerator = costGroupImpactMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            Set nodeIdSet = mapEnumerator.currentValue();
            SetEnumerator setEnumerator = nodeIdSet.getEnumerator();
            while (setEnumerator.moveNext())
            {
                costSheetCostGroupImpact.clear();
                costSheetCostGroupImpact.CostGroupId = mapEnumerator.currentKey();
                costSheetCostGroupImpact.SheetId = sheetId;
                costSheetCostGroupImpact.NodeId = setEnumerator.current();
                rilCostSheetCostGroupImpact.add(costSheetCostGroupImpact);
            }
        }

        rilCostSheetCostGroupImpact.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        #define.PackedRootNodePosition(5)

        Version         version = RunBase::getVersion(_packedClass);
        container       packedRootNode;
        container       packedFactorMap;

        switch (version)
        {
            case #CurrentVersion:
                [version,
                 #CurrentList,
                packedRootNode,
                packedFactorMap] = _packedClass;

                if (conLen(_packedClass) >= #PackedRootNodePosition)
                {
                    rootNode = packedRootNode == conNull() ? null : CostSheetNode::create(packedRootNode);
                }

                Map factorMap = Map::create(packedFactorMap);
                this.loadFactorMap(factorMap);

                break;

            case 2:
                [version, #CurrentList, packedRootNode] = _packedClass;

                if (conLen(_packedClass) >= 4)
                {
                    rootNode = packedRootNode == conNull() ? null : CostSheetNode::create(packedRootNode);
                }

                this.loadFactorMap(this.getSurchargesMap());

                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        CostSheetNode       costSheetNode;
        Set                 costGroupIdSet;
        BOMCostGroup        bomCostGroup;

        #AviFiles

        boolean checkDuplicates(Set _set, anytype _value, str _message)
        {
            boolean noDuplicates = true;
            if (_set.in(_value))
            {
                noDuplicates = checkFailed(strFmt(_message, _value),
                                           '',
                                           SysInfoAction_CostSheetValidate::newNodeId(costSheetNode.getNodeId()));
            }
            else
            {
                _set.add(_value);
            }
            return noDuplicates;
        }

        SysOperationProgress progress = new SysOperationProgress();
        progress.setCaption("@SYS111704");
        progress.update(true);

        // Turn on caching of code2NodeIdMap and re-fill it
        useCache = true;
        this.getCode2NodeIdMap(true);

        setPrefix("@SYS104676");

        boolean ret = sheetId ? true : checkFailed("@SYS105205");

        Set nodeIdSet = new Set(Types::Integer);
        Set codeSet = new Set(Types::String);
        Set costTypeSet = new Set(Types::Enum);
        Map costTypeCostGroupMap = new Map(Types::Enum, Types::Class);

        costTypeCostGroupMap.insert(CostPriceType::COGM, new Set(Types::String));
        costTypeCostGroupMap.insert(CostPriceType::Purchase, new Set(Types::String));

        // Check each node
        ListEnumerator enumerator = this.getNodeEnumerator(CostSheetNodeListType::All);
        while (enumerator.moveNext())
        {
            costSheetNode = enumerator.current();

            setPrefix(costSheetNode.getFullPath(this));

            ret = checkDuplicates(nodeIdSet, costSheetNode.getNodeId(), "@SYS104701") && ret;
            ret = checkDuplicates(codeSet, costSheetNode.getCode(), "@SYS104705") && ret;

            if (costSheetNode.getType() == CostSheetNodeType::CostGroup)
            {
                costGroupIdSet = costTypeCostGroupMap.lookup(costSheetNode.getCostType());

                CostSheetNodeGroup costSheetNodeGroup = costSheetNode;
                ret = checkDuplicates(costGroupIdSet, costSheetNodeGroup.getCostGroupId(), strFmt("@SYS104706", costSheetNodeGroup.getCostGroupId(), costSheetNode.getCostType())) && ret;
            }

            if (costSheetNode.getType() == CostSheetNodeType::Price)
            {
                CostSheetNodePrice costSheetNodePrice = costSheetNode;
                if (costSheetNodePrice.getCostType() != CostPriceType::Undefined)
                {
                    ret = checkDuplicates(costTypeSet, costSheetNodePrice.getCostType(), "@SYS104704") && ret;
                }
            }

            ret = costSheetNode.validate(this) && ret;
        }

        SetEnumerator costTypeEnum = costTypeSet.getEnumerator();
        while (costTypeEnum.moveNext())
        {
            CostPriceType costType = costTypeEnum.current();

            // Default cost groups are not required for purchase nodes
            if (costType != CostPriceType::Purchase)
            {
                costGroupIdSet = costTypeCostGroupMap.lookup(costTypeEnum.current());

                // All default cost groups should be presented in the sheet, if any
                boolean defaultCostGroupsExist = false;
                while select CostGroupId from bomCostGroup
                    where bomCostGroup.TypeDefault == NoYes::Yes
                {
                    if ( (bomCostGroup.CostGroupType == CostGroupType::DirectManufacturing
                          && costType != CostPriceType::COGM) ||
                          bomCostGroup.CostGroupType == CostGroupType::Indirect)
                    {
                        continue;
                    }

                    defaultCostGroupsExist = true;

                    if (!costGroupIdSet.in(bomCostGroup.CostGroupId))
                    {
                        info(strFmt("@SYS105207", bomCostGroup.CostGroupId, costType),
                             '',
                             SysInfoAction_CostSheetValidate::newGroupId(bomCostGroup.CostGroupId));
                    }
                }

                // If there are no default cost groups in the system, then ALL cost groups should be mapped in the sheet
                if (!defaultCostGroupsExist)
                {
                    while select CostGroupId from bomCostGroup
                    {
                        if ( (bomCostGroup.CostGroupType == CostGroupType::DirectManufacturing
                              && costType != CostPriceType::COGM) ||
                              bomCostGroup.CostGroupType == CostGroupType::Indirect)
                        {
                            continue;
                        }

                        if (!costGroupIdSet.in(bomCostGroup.CostGroupId))
                        {
                            info(strFmt("@SYS105204", bomCostGroup.CostGroupId, costType),
                                 '',
                                 SysInfoAction_CostSheetValidate::newGroupId(bomCostGroup.CostGroupId));
                        }
                    }
                }
            }
        }

        ret = this.validateCalculationNodes() && ret;

        // Be sure that the sheet can be calculated (e.g. there are no calculation loops)
        boolean sheetCalculationIsOK = this.calc(CostCalcTransData::construct()) == true ?
                                       true :
                                       checkFailed("@SYS105369");

        ret = sheetCalculationIsOK && ret;

        // Turn off caching of code2NodeIdMap
        useCache = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public static CostSheet build(
        CostSheetId             _sheetId,
        CostSheetModeStrategy   _modeStrategy)
    {
        CostSheet costSheet = CostSheet::construct();
        costSheet.load(_sheetId, _modeStrategy);

        return costSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPackedServer</Name>
				<Source><![CDATA[
    public static container buildPackedServer(
        CostSheetId _sheetId,
        container   _packedModeStrategy)
    {
        CostSheet costSheet = CostSheet::construct();

        CostSheetModeStrategy modeStrategy = CostSheetModeStrategy::create(_packedModeStrategy);

        costSheet.load(_sheetId, modeStrategy);

        return costSheet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostSheet construct()
    {
        return new CostSheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static CostSheet create(container _packedSheet)
    {
        CostSheet costSheet = CostSheet::construct();
        return costSheet.unpack(_packedSheet) ? costSheet : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextNodeId</Name>
				<Source><![CDATA[
    public static CostSheetNodeId nextNodeId(CostSheetNodeId _nodeId = 0)
    {
        CostSheetNodeId    ret;

        if (_nodeId)
        {
            ret = _nodeId + 1;
        }
        else
        {
            ret = #DefaultRootNodeId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveServer</Name>
				<Source><![CDATA[
    public static void saveServer(container _packedSheet)
    {
        CostSheet costSheet = CostSheet::create(_packedSheet);
        costSheet.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostGroupImpact</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds out which costing sheet nodes are affected by which cost groups and fills in a database table
    ///    with this information.
    /// </summary>
    /// <param name="_sheetId">
    ///    A costing sheet identifier.
    /// </param>
    /// <remarks>
    ///    The information collected by the method improves performance when calculating the costing sheet.
    /// </remarks>
    public static void updateCostGroupImpact(CostSheetId _sheetId)
    {
        ttsbegin;
        CostSheet costSheet = CostSheet::build(_sheetId, CostSheetModeStrategyCalculate::newParameter(CostPriceType::Undefined));
        costSheet.fillCostGroupImpactMap();
        costSheet.saveCostGroupImpact();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCalculationNodes</Name>
				<Source><![CDATA[
    protected boolean validateCalculationNodes()
    {
        boolean ret = true;
        CostSheetNode costSheetNode;

        // Check whether any calculation nodes were deleted, that had corresponding records in the ProdIndirectTrans table
        Set calculationNodes = new Set(Types::Container);
        ListEnumerator nodeEnumerator = this.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);
        while (nodeEnumerator.moveNext())
        {
            costSheetNode = nodeEnumerator.current();
            calculationNodes.add([costSheetNode.getCode(), costSheetNode.getType()]);
        }

        ProdIndirectTrans prodIndirectTrans;
        while select Code, Type from prodIndirectTrans
            group by Code, Type
        {
            if (!calculationNodes.in([prodIndirectTrans.Code, prodIndirectTrans.Type]))
            {
                ret = checkFailed(
                    strFmt("@SYS328601",
                         prodIndirectTrans.Code,
                         prodIndirectTrans.Type,
                         "@SYS108877"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>