<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransItemPackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransItemPackingSlip extends ProjTransItem
{
    CustPackingSlipTrans    custPackingSlipTrans;
    SalesLine               salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return salesLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret == true)
        {
            projFundingSource = ProjFundingSource::find(this.fundingSource());
            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId categoryId()
    {
        return salesLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns financial dimensions for this transaction.
    /// </summary>
    /// <returns>
    ///    The financial dimensions for this transaction.
    /// </returns>
    /// <remarks>
    ///    This abstract method must be overridden by classes that extend this class to provide the necessary functionality for the specific transaction.
    /// </remarks>
    public DimensionDefault defaultDimension()
    {
        return custPackingSlipTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return custPackingSlipTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return salesLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean mustHandleBudget()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        if (this.qty() != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustPackingSlipTrans _custPackingSlipTrans)
    {
        custPackingSlipTrans    = _custPackingSlipTrans;
        salesLine               = custPackingSlipTrans.salesLine();

        super(_custPackingSlipTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountItemLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for cost minus item to be used by this transaction.
    /// </summary>
    /// <param name="_fundingSourceID">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for cost minus item.
    /// </returns>
    public LedgerDimensionDefaultAccount offsetAccountItemLedgerDimension(ProjFundingSourceRefId _fundingSourceID)
    {
        LedgerDimensionDefaultAccount ret;

        ret = super(_fundingSourceID);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return salesLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        return custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    public SalesPrice salesPrice()
    {
        return salesLine.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    public TaxGroup taxGroup()
    {
        return salesLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        boolean usePhysicalCostForStdCostItem = 
            salesLine.canItemReqBeCancelled() 
            && salesLine.isStocked() 
            && ProjItemReqUsePhysicalCostForStdCostItemFlight::instance().isEnabled();
        
        if (InventTable::find(this.itemId()).modelGroup().inventModelType().stdCostBased()
            && !usePhysicalCostForStdCostItem)
        {
            return ProjTrans::postedOperationsValue(custPackingSlipTrans.InventTransId, this.parmProjAdjustRefId());
        }

        SalesLine salesLineLocal = custPackingSlipTrans.salesLine();
        if (salesLineLocal && salesLineLocal.SalesType == SalesType::ItemReq && !salesLineLocal.isStocked())
        {
            Amount transCost = this.getTransCostForNonStockedItemReq(salesLine);
            Amount transCostInSalesCurr = transCost;
            
            // Convert the total to company currency when company and contract currencies are different
            // and when purchase order line is linked to sales line.
            if (this.currencyIdSales() != this.currencyIdCost()
                && salesLineLocal.referencedPurchLine())
            {
                transCostInSalesCurr = CurrencyExchangeHelper::mstAmount(transCost, this.currencyIdSales(), this.transDate());
            }
            
            transCost = SalesLineCostPriceInAccountingCurrencyFlight::instance().isEnabled() 
                                    && this.currencyIdSales() != this.currencyIdCost()
                                    && salesLineLocal.referencedPurchLine() ?
                                            transCost :
                                            transCostInSalesCurr;
            return transCost;
        }
        else
        {
            InventTransOrigin inventTransOriginLoc = InventTransOrigin::findByInventTransId(salesLineLocal.InventTransId);
            InventTransOriginId inventTransOriginId = inventTransOriginLoc.RecId;

            if (inventTransOriginLoc.ReferenceCategory == InventTransType::Sales
                && salesLine.canItemReqBeCancelled())
            {
                return -InventTransPackingSlip::costAmountPhysical(inventTransOriginId, custPackingSlipTrans.PackingSlipId, custPackingSlipTrans.DeliveryDate);
            }

            return -custPackingSlipTrans.projInventCostAmount(this.parmProjAdjustRefId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransCostForNonStockedItemReq</Name>
				<Source><![CDATA[
    private Amount getTransCostForNonStockedItemReq(SalesLine _salesLine)
    {
        CostPrice costPrice = _salesLine.CostPrice;
        if (ProjItemReqNonStockedPriceUpdateFlight::instance().isEnabled())
        {
            if (_salesLine.InventRefTransId)
            {
                VendInvoiceTrans vendorInvTrans = VendInvoiceTrans::findInventTransId(_salesLine.InventRefTransId);
                if (vendorInvTrans)
                {
                    LedgerRecId ledgerRecId = Ledger::current();
                    AccountingDate accountingDate = vendorInvTrans.InvoiceDate;
                    CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(ledgerRecId, accountingDate);
                    
                    VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findSourceDocumentHeader(
                        vendorInvTrans.parmSourceDocumentHeader().RecId);
                    if (vendInvoiceInfoTable.FixedExchRate)
                    {
                        currencyExchangeHelper.parmExchangeRate1(vendInvoiceInfoTable.ExchRate);
                    }

                    costPrice = currencyExchangeHelper.calculateTransactionToAccounting(vendorInvTrans.CurrencyCode, vendorInvTrans.PurchPrice, true);
                }
            }
        }
        return costPrice * custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return custPackingSlipTrans.DeliveryDate ? custPackingSlipTrans.DeliveryDate : salesLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public TransactionID transId()
    {
        return salesLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return PriceDisc::price2Amount(this.salesPrice(),
                                       salesLine.PriceUnit,
                                       salesLine.discAmount(),
                                       this.qty(), // Deliver now
                                       salesLine.SalesQty,
                                       salesLine.SalesMarkup,
                                       salesLine.discPercent(),
                                       this.currencyIdSales(),
                                       salesLine.LineAmount,
                                       false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    public Voucher voucherInvoice()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text of the specified transaction.
    /// </summary>
    /// <returns>
    /// The transaction text of the specified transaction.
    /// </returns>
    public TransTxt txt()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>