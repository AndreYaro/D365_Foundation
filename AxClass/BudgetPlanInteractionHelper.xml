<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanInteractionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides the enabled values for all the action menu items for budget plan header and lines.
/// </summary>
public class BudgetPlanInteractionHelper
{
    BudgetPlanHeader        budgetPlanHeader;
    BudgetPlanScenarioRecId budgetPlanScenarioRecId;

    // Budget plan tab buttons
    boolean copyButtonEnabled;
    boolean childButtonEnabled;
    boolean attachButtonEnabled;
    boolean deleteButtonEnabled;
    boolean resetButtonEnabled;
    boolean userIsBlocked;
    boolean workflowButtonEnabled;

    // Budget plan line detail buttons
    boolean addLineButtonEnabled;
    boolean removeLineButtonEnabled;
    boolean budgetPlanLinesEnabled;
    boolean budgetPlanEditable;
    boolean allocateBudgetButtonEnabled;
    boolean budgetPlanGenerateFromGeneralLedgerButtonEnabled;
    boolean budgetPlanGenerateBudgetPlanButtonEnabled;
    boolean budgetPlanGenerateAssetButtonEnabled;
    boolean addPositionsButtonEnabled;
    boolean budgetPlanGenerateProjectForecastButtonEnabled;
    boolean budgetPlanGenerateDemandForecastButtonEnabled;
    boolean budgetPlanGenerateSupplyForecastButtonEnabled;
    boolean budgetPlanGenerateBudgetTransactionButtonEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to allow modification of budget plan based on the task owner or approver of workflow status.
    /// </summary>
    /// <returns>
    /// true if budget plan can be modified; otherwise, false.
    /// </returns>
    public boolean allowEditBudgetPlan()
    {
        boolean isParentOrgPlan;
        boolean isUserTaskOwner     = false;
        boolean isUserApprovalOwner = false;

        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        isParentOrgPlan = this.isParentOrgBudgetPlan();

        if (budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::InReview)
        {
            isUserTaskOwner             = WorkflowWorkItem::isUserTaskOwner(budgetPlanHeader);
            isUserApprovalOwner         = WorkflowWorkItem::isUserApprovalOwner(budgetPlanHeader);
            workflowTrackingStatusTable = Workflow::findTrackingStatusForDocument(budgetPlanHeader);
        }

        return  ((isUserTaskOwner ||
                isUserApprovalOwner ||
                budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::NotSubmitted ||
                budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::Rejected ||
                workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Faulted)
                && !isParentOrgPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledHeaderBudgetPlanButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the header level menu items are enabled.
    /// </summary>
    protected void getEnabledHeaderBudgetPlanButtons()
    {
        boolean canAddChild;
        boolean canDelete;
        boolean canReset;
        boolean isFinalized;
        boolean processActive;
        boolean isParentOrgPlan;

        BudgetPlanningWorkflow budgetPlanningWorkflow;

        budgetPlanningWorkflow = BudgetPlanningWorkflow::find(
            BudgetPlanningProcessAdministration::findByProcessOrganization(
                        budgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanHeader.BudgetingOrganization).BudgetPlanningWorkflow);

        processActive = BudgetPlanningProcessSetup::isProcessActive(budgetPlanHeader.BudgetPlanningProcess);

        isFinalized = budgetPlanHeader.DocumentStatus == BudgetPlanStatus::Finalized ? true : false;

        isParentOrgPlan = this.isParentOrgBudgetPlan();

        budgetPlanHeader.reread();
        userIsBlocked = BudgetPlan::isUserBlocked(budgetPlanHeader);

        canDelete = budgetPlanHeader.canDelete(false);
        canReset = (budgetPlanHeader.DocumentStatus == BudgetPlanStatus::Finalized
                    && (budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::Approved
                        || budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::Rejected)
                    && !budgetPlanningWorkflow.RestrictResetBudgetPlan);

        canAddChild = BudgetPlanningStageRule::findByProcessOrganizationStage(
                        budgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanHeader.BudgetingOrganization,
                        budgetPlanHeader.BudgetPlanningStage).CanAddChildBudgetPlans;

        budgetPlanEditable      = this.allowEditBudgetPlan();
        copyButtonEnabled       = !isParentOrgPlan && processActive;
        childButtonEnabled      = processActive && canAddChild && !isParentOrgPlan;
        attachButtonEnabled     = !isFinalized && canAddChild && !isParentOrgPlan;
        deleteButtonEnabled     = canDelete;
        resetButtonEnabled      = canReset && !isParentOrgPlan && !userIsBlocked;
        workflowButtonEnabled   = (budgetPlanHeader.WorkflowStatus != BudgetPlanWorkflowStatus::NotSubmitted)
                                    || (budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::NotSubmitted && !userIsBlocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the header level menu items.
    /// </summary>
    public void initLineActions()
    {
        if (budgetPlanHeader)
        {
            this.getEnabledLineBudgetPlanButtons();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the header level menu items.
    /// </summary>
    public void initHeaderActions()
    {
        if (budgetPlanHeader)
        {
            this.getEnabledHeaderBudgetPlanButtons();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledLineBudgetPlanButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the the line level menu items are enabled.
    /// </summary>
    protected void getEnabledLineBudgetPlanButtons()
    {
        this.getEnabledHeaderBudgetPlanButtons();

        BudgetPlanningStageRule stageRule;

        stageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                        budgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanHeader.BudgetingOrganization,
                        budgetPlanHeader.BudgetPlanningStage);

        addLineButtonEnabled  = budgetPlanEditable
                                && (stageRule.CanAddBudgetPlanLines || stageRule.CanModifyBudgetPlanLines)
                                && (budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized)
                                && (budgetPlanHeader.WorkflowStatus != BudgetPlanWorkflowStatus::Approved)
                                && !userIsBlocked;

        budgetPlanLinesEnabled      = stageRule.CanModifyBudgetPlanLines && budgetPlanEditable && !userIsBlocked;

        removeLineButtonEnabled     = addLineButtonEnabled;
        allocateBudgetButtonEnabled = addLineButtonEnabled;

        budgetPlanGenerateFromGeneralLedgerButtonEnabled = addLineButtonEnabled;
        budgetPlanGenerateBudgetPlanButtonEnabled = addLineButtonEnabled;
        budgetPlanGenerateAssetButtonEnabled = addLineButtonEnabled;
        addPositionsButtonEnabled = addLineButtonEnabled;
        budgetPlanGenerateProjectForecastButtonEnabled = addLineButtonEnabled;
        budgetPlanGenerateDemandForecastButtonEnabled = addLineButtonEnabled;
        budgetPlanGenerateSupplyForecastButtonEnabled = addLineButtonEnabled;
        budgetPlanGenerateBudgetTransactionButtonEnabled = addLineButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledHcmSelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the forecast position picker button.
    /// </summary>
    /// <param name="_budgetPlanScenarioValue">
    /// The name of the scenario that the user has selected.
    /// </param>
    /// <returns>
    /// true if the select button should be enabled; otherwise, false.
    /// </returns>
    public boolean isEnabledHcmSelectButton(BudgetPlanScenarioName _budgetPlanScenarioValue)
    {
        boolean             enableButton;
        BudgetPlanScenario  budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(_budgetPlanScenarioValue);

        // We want the picker button to be enabled if the add line button is enabled and the current scenario is a monetary scenario.
        if (addLineButtonEnabled && budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
        {
            enableButton = true;
        }
        else
        {
            enableButton = false;
        }

        return enableButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParentOrgBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the <c>BudgetPlanHeader</c> record belongs to the parent organization.
    /// </summary>
    /// <returns>
    /// true if the query returns no record; otherwise, false.
    /// </returns>
    public boolean isParentOrgBudgetPlan()
    {
        boolean   isParent;
        Query     query;
        QueryRun  queryRun;

        // The BudgetPlanHeader must be saved otherwise the query will return results from budget plans other than the selected one.
        if (budgetPlanHeader.RecId)
        {
            query = BudgetPlan::getBudgetPlanHeaderReferenceQuery(
                        budgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanHeader.RecId);

            queryRun = new QueryRun(query);

            if (!queryRun.next())
            {
                isParent = true;
            }
        }

        return isParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmWorkflowButtonEnabled(boolean _workflowButtonEnabled = workflowButtonEnabled)
    {
        workflowButtonEnabled = _workflowButtonEnabled;

        return workflowButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserIsBlocked</Name>
				<Source><![CDATA[
    public boolean parmUserIsBlocked(boolean _userIsBlocked = userIsBlocked)
    {
        userIsBlocked = _userIsBlocked;

        return userIsBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddPositionsButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmAddPositionsButtonEnabled(boolean _addPositionsButtonEnabled = addPositionsButtonEnabled)
    {
        addPositionsButtonEnabled = _addPositionsButtonEnabled;

        return addPositionsButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocateBudgetButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmAllocateBudgetButtonEnabled(boolean _allocateBudgetButtonEnabled = allocateBudgetButtonEnabled)
    {
        allocateBudgetButtonEnabled = _allocateBudgetButtonEnabled;

        return allocateBudgetButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddLineButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmAddLineButtonEnabled(boolean _addLineButtonEnabled = addLineButtonEnabled)
    {
        addLineButtonEnabled = _addLineButtonEnabled;

        return addLineButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttachButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmAttachButtonEnabled(boolean _attachButtonEnabled = attachButtonEnabled)
    {
        attachButtonEnabled = _attachButtonEnabled;

        return attachButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanEditable</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanEditable(boolean _budgetPlanEditable = budgetPlanEditable)
    {
        budgetPlanEditable = _budgetPlanEditable;

        return budgetPlanEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateAsset</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateAsset(boolean _budgetPlanGenerateAssetButtonEnabled = budgetPlanGenerateAssetButtonEnabled)
    {
        budgetPlanGenerateAssetButtonEnabled = _budgetPlanGenerateAssetButtonEnabled;

        return budgetPlanGenerateAssetButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateBudgetPlan</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateBudgetPlan(boolean _budgetPlanGenerateBudgetPlanButtonEnabled = budgetPlanGenerateBudgetPlanButtonEnabled)
    {
        budgetPlanGenerateBudgetPlanButtonEnabled = _budgetPlanGenerateBudgetPlanButtonEnabled;

        return budgetPlanGenerateBudgetPlanButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateBudgetTransaction</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateBudgetTransaction(boolean _budgetPlanGenerateBudgetTransactionButtonEnabled = budgetPlanGenerateBudgetTransactionButtonEnabled)
    {
        budgetPlanGenerateBudgetTransactionButtonEnabled = _budgetPlanGenerateBudgetTransactionButtonEnabled;

        return budgetPlanGenerateBudgetTransactionButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateFromGeneralLedger</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateFromGeneralLedger(boolean _budgetPlanGenerateFromGeneralLedgerButtonEnabled = budgetPlanGenerateFromGeneralLedgerButtonEnabled)
    {
        budgetPlanGenerateFromGeneralLedgerButtonEnabled = _budgetPlanGenerateFromGeneralLedgerButtonEnabled;

        return budgetPlanGenerateFromGeneralLedgerButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateDemandForecast</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateDemandForecast(boolean _budgetPlanGenerateDemandForecastButtonEnabled = budgetPlanGenerateDemandForecastButtonEnabled)
    {
        budgetPlanGenerateDemandForecastButtonEnabled = _budgetPlanGenerateDemandForecastButtonEnabled;

        return budgetPlanGenerateDemandForecastButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateProjectForecast</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateProjectForecast(boolean _budgetPlanGenerateProjectForecastButtonEnabled = budgetPlanGenerateProjectForecastButtonEnabled)
    {
        budgetPlanGenerateProjectForecastButtonEnabled = _budgetPlanGenerateProjectForecastButtonEnabled;

        return budgetPlanGenerateProjectForecastButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateSupplyForecast</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanGenerateSupplyForecast(boolean _budgetPlanGenerateSupplyForecastButtonEnabled = budgetPlanGenerateSupplyForecastButtonEnabled)
    {
        budgetPlanGenerateSupplyForecastButtonEnabled = _budgetPlanGenerateSupplyForecastButtonEnabled;

        return budgetPlanGenerateSupplyForecastButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _budgetPlanHeader = budgetPlanHeader)
    {
        budgetPlanHeader = _budgetPlanHeader;

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLinesEnabled</Name>
				<Source><![CDATA[
    public boolean parmBudgetPlanLinesEnabled(boolean _budgetPlanLinesEnabled = budgetPlanLinesEnabled)
    {
        budgetPlanLinesEnabled = _budgetPlanLinesEnabled;

        return budgetPlanLinesEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanScenarioRecId</Name>
				<Source><![CDATA[
    public BudgetPlanScenarioRecId parmBudgetPlanScenarioRecId(BudgetPlanScenarioRecId _budgetPlanScenarioRecId = budgetPlanScenarioRecId)
    {
        budgetPlanScenarioRecId = _budgetPlanScenarioRecId;

        return budgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmChildButtonEnabled(boolean _childButtonEnabled = childButtonEnabled)
    {
        childButtonEnabled = _childButtonEnabled;

        return childButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmCopyButtonEnabled(boolean _copyButtonEnabled = copyButtonEnabled)
    {
        copyButtonEnabled = _copyButtonEnabled;

        return copyButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmDeleteButtonEnabled(boolean _deleteButtonEnabled = deleteButtonEnabled)
    {
        deleteButtonEnabled = _deleteButtonEnabled;

        return deleteButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemoveLineButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmRemoveLineButtonEnabled(boolean _removeLineButtonEnabled = removeLineButtonEnabled)
    {
        removeLineButtonEnabled = _removeLineButtonEnabled;

        return removeLineButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResetButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmResetButtonEnabled(boolean _resetButtonEnabled = resetButtonEnabled)
    {
        resetButtonEnabled = _resetButtonEnabled;

        return resetButtonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanInteractionHelper construct()
    {
        return new BudgetPlanInteractionHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>BudgetPlanInteractionHelper</c> from a budget plan header record.
    /// </summary>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanInteractionHelper</c> object.
    /// </returns>
    public static BudgetPlanInteractionHelper newFromBudgetPlanHeader(BudgetPlanHeader _budgetPlanHeader)
    {
        BudgetPlanInteractionHelper budgetPlanInteractionHelper;

        budgetPlanInteractionHelper = BudgetPlanInteractionHelper::construct();
        budgetPlanInteractionHelper.parmBudgetPlanHeader(_budgetPlanHeader);

        return budgetPlanInteractionHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>