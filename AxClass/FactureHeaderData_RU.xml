<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureHeaderData_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FactureHeaderData_RU</c> calculates data for facture journal header.
/// </summary>
class FactureHeaderData_RU
{
    FactureJour_RU          factureJour;
    FactureTrans_RU         factureTrans;
    FactureJourHeader_RU    factureHeader;

    IFactureHeaderCaller_RU caller;

    CustTable               custTable, consigneeTable;
    VendTable               vendTable, consignorTable;
    EmployeeTable_RU        emplTable;
    CompanyInfo             companyInfo;

    CustVendInvoiceJour     sourceIndebtednessInvoiceJour;
    AgreementHeaderExt_RU   sourceIndebtednessAgreementHeader;
    VendTable               sourceIndebtednessVendTable;

    Map                     attributeMap;

    int                     creditNoteSign;

    boolean                 isIndebtednessFacture,
                            prepayment,
                            headerExist,
                            taxAgent,
                            findOfficials,
                            factureCreate;

    Name                    accountant,
                            director,
                            responsible;

    OffReportType_RU        reportType;
    VATPartnerKind_RU       partnerKind;

    FactureType_RU          effectiveFactureType;

    #FactureHeader_RU

    protected const int currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValueToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds value to map which holds header data.
    /// </summary>
    /// <param name="_fieldId">
    /// Id of field used as key.
    /// </param>
    /// <param name="_value">
    /// Value of map.
    /// </param>
    /// <remarks>
    /// Value type set to container to allow holding any types.
    /// </remarks>
    protected void addValueToMap(FieldId _fieldId, AnyType _value)
    {
        attributeMap.insert(_fieldId, [_value]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns sign for credit note.
    /// </summary>
    /// <returns>
    /// Sign for credit note.
    /// </returns>
    public int creditNoteSign()
    {
        return creditNoteSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropLineBreaks</Name>
				<Source><![CDATA[
    private LogisticsAddressing dropLineBreaks(LogisticsAddressing _address)
    {
        return strReplace(_address, '\n', ', ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureAddress</Name>
				<Source><![CDATA[
    private LogisticsAddressing getFactureAddress()
    {
        LogisticsPostalAddress  logisticsPostalAddress;

        if (factureJour.DeliveryPostalAddress)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(factureJour.DeliveryPostalAddress);
        }
        else
        {
            logisticsPostalAddress = DirParty::findPostalAddressByRole(companyInfo.RecId, LogisticsLocationRoleType::Invoice);

            if (!logisticsPostalAddress)
            {
                logisticsPostalAddress = companyInfo.postalAddress();
            }
        }
        return this.dropLineBreaks(logisticsPostalAddress.Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns facture header attribute by given id.
    /// </summary>
    /// <param name="_headerFieldId">
    /// Field id of required attribute.
    /// </param>
    /// <returns>
    /// Value of facture header attribute.
    /// </returns>
    /// <remarks>
    /// Returns facture header attribute by given id. If attributes are not initialized, initialization performed.
    /// </remarks>
    public anytype getHeaderAttribute(FieldId _headerFieldId)
    {
        anyType ret;

        if (! attributeMap.elements())
        {
            this.initHeaderData();
        }

        if (attributeMap.exists(_headerFieldId))
        {
            ret = conPeek(attributeMap.lookup(_headerFieldId), 1);
        }
        else
        {
            ret = "";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns temporary instance of <c>FactureJourHeader_RU</c> record filled with attributes.
    /// </summary>
    /// <returns>
    /// Temporary instance of <c>FactureJourHeader_RU</c> record filled with attributes.
    /// </returns>
    public FactureJourHeader_RU getHeaderTmp()
    {
        FactureJourHeader_RU factureJourHeader;
        MapEnumerator        mapEnumerator;

        factureJourHeader.setTmp();

        if (! attributeMap.elements())
        {
            this.initHeaderData();
        }

        mapEnumerator = attributeMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            factureJourHeader.(mapEnumerator.currentKey()) = conPeek(mapEnumerator.currentValue(), 1);
        }

        factureJourHeader.insert();

        return factureJourHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdvanceReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for advance report facture.
    /// </summary>
    protected void initAdvanceReport()
    {
        const int time = 86399;
        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            this.addValueToMap(#CompanyName,       emplTable.worker().name());
            this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(DirParty::primaryPostalAddress(emplTable.worker().RecId, DateTimeUtil::newDateTime(factureJour.FactureDate, time)).Address));
            this.addValueToMap(#CompanyINN,        TaxRegistration::legislationRegistrationValue(emplTable.worker().RecId, TaxRegistrationTypesList::INN, factureJour.FactureDate));
            this.addValueToMap(#CompanyKPP,        '');
            this.addValueToMap(#CompanyParty,      emplTable.worker().recId);

            this.addValueToMap(#ContragentName,       companyInfo.Name);
            this.addValueToMap(#ContragentAddress,    this.dropLineBreaks(companyInfo.postalAddress().Address));
            this.addValueToMap(#ContragentINN,        companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentKPP,        companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentParty,      companyInfo.RecId);

            if (consignorTable)
            {
                this.addValueToMap(#ConsignorAccount,    consignorTable.AccountNum);
                this.addValueToMap(#ConsignorName,       consignorTable.name());
                this.addValueToMap(#ConsignorAddress,    this.dropLineBreaks(consignorTable.postalAddress().Address));
                this.addValueToMap(#ConsignorParty,      consignorTable.Party);
            }

            if (consigneeTable)
            {
                this.addValueToMap(#ConsigneeAccount,    consigneeTable.AccountNum);
                this.addValueToMap(#ConsigneeName,       consigneeTable.name());
                this.addValueToMap(#ConsigneeAddress,    this.dropLineBreaks(consigneeTable.postalAddress().Address));
                this.addValueToMap(#ConsigneeParty,      companyInfo.RecId);
            }
            else
            {
                this.addValueToMap(#ConsigneeName,       companyInfo.name());
                this.addValueToMap(#ConsigneeAddress,    this.dropLineBreaks(companyInfo.postalAddress().Address));
            }
        }

        if (findOfficials)
        {
            accountant  = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Accountant,
                                                                      OffReportType_RU::EmplAdvanceReportFacture).Name;
            director    = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Director,
                                                                      OffReportType_RU::EmplAdvanceReportFacture).Name;
            responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Responsible,
                                                                      OffReportType_RU::EmplAdvanceReportFacture).Name;
        }

        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for amount difference facture.
    /// </summary>
    protected void initAmountDifference()
    {
        switch (factureJour.Module)
        {
            case FactureModule_RU::Cust :
                this.initAmountDifferenceCust();
                break;
            case FactureModule_RU::Vend :
                this.initAmountDifferenceVend();
                break;
            case FactureModule_RU::Empl :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!headerExist)
        {
            this.addValueToMap(#ConsignorName, "@GLS102741");
        }

        if (findOfficials)
        {
            accountant = OfficialsTable_RU::findAccountant().Name;
            director   = OfficialsTable_RU::findDirector().Name;
        }
        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDifferenceCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for amount difference facture for customer.
    /// </summary>
    protected void initAmountDifferenceCust()
    {
        LogisticsPostalAddress  postalAddress;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            postalAddress = companyInfo.postalAddress();
            this.addValueToMap(#CompanyName,       companyInfo.Name);
            this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(postalAddress.Address));
            this.addValueToMap(#CompanyINN,        companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#CompanyKPP,        companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#CompanyParty,      companyInfo.RecId);

            this.addValueToMap(#ContragentName,    custTable.name());
            this.addValueToMap(#ContragentAddress, this.dropLineBreaks(custTable.postalAddress().Address));
            this.addValueToMap(#ContragentINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentParty,   custTable.Party);

            this.addValueToMap(#ConsigneeName,    custTable.name());
            this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(custTable.postalAddress().Address));
            this.addValueToMap(#ConsigneeParty,   custTable.Party);
        }

        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDifferenceVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for amount difference facture for vendor.
    /// </summary>
    protected void initAmountDifferenceVend()
    {
        LogisticsPostalAddress logisticsPostalAddress;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            vendTable = VendTable::find(factureJour.CustVendInvoiceAccount);
            logisticsPostalAddress = companyInfo.postalAddress();

            this.addValueToMap(#CompanyName,       vendTable.name());
            this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(vendTable.postalAddress().Address));
            this.addValueToMap(#CompanyINN,        vendTable.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#CompanyKPP,        vendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#CompanyParty,      vendTable.Party);

            this.addValueToMap(#ContragentName,    companyInfo.Name);
            this.addValueToMap(#ContragentAddress, this.dropLineBreaks(logisticsPostalAddress.Address));
            this.addValueToMap(#ContragentINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentParty,   companyInfo.RecId);

            this.addValueToMap(#ConsigneeName,    companyInfo.Name);
            this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(logisticsPostalAddress.Address));
            this.addValueToMap(#ConsigneeParty,   companyInfo.RecId);
        }

        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBaseData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes base data for facture header calculation.
    /// </summary>
    protected void initBaseData()
    {
        factureHeader = factureJour.factureHeader();
        headerExist   = factureHeader.RecId != 0;

        if (headerExist)
        {
            //use vendor to recognize tax agent
            if (effectiveFactureType == FactureType_RU::TaxCorrection)
            {
                vendTable = VendTable::find(factureJour.orderAccount(factureTrans.isTmp() ? factureTrans : null));
            }
        }
        else
        {
            companyInfo     = CompanyInfo::find();
            consignorTable  = VendTable::find(factureJour.Consignor);
            custTable       = CustTable::find(factureJour.CustVendInvoiceAccount);
            consigneeTable  = CustTable::find(factureJour.Consignee);
            emplTable       = EmployeeTable_RU::findByEmployeeId(factureJour.CustVendInvoiceAccount);
            vendTable       = factureTrans.isTmp() || factureJour.HeaderRevision  ?
                              VendTable::find(factureJour.CustVendInvoiceAccount) :
                              VendTable::find(factureJour.orderAccount(null));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommissionInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for comission invoice facture.
    /// </summary>
    protected void initCommissionInvoice()
    {
        AgreementHeaderExt_RU   agreementHeaderExt;
        CustInvoiceJour         custInvoiceJour;
        VendInvoiceJour         vendInvoiceJour;
        CustVendInvoiceJour     custVendInvoiceJour;
        RecordSortedList        invoiceSortedList;
        boolean                 isCust = (factureJour.Module == FactureModule_RU::Cust);

        if (factureJour.CommPartner)
        {
            switch (factureJour.Module)
            {
                case FactureModule_RU::Cust :
                    this.addValueToMap(#AgencyAgreement, AgencyAgreement_RU::PurchaseCommission);
                    this.addValueToMap(#Seller, factureJour.CommPartner);
                    break;

                case FactureModule_RU::Vend :
                    this.addValueToMap(#AgencyAgreement, AgencyAgreement_RU::SaleCommission);
                    this.addValueToMap(#Buyer, factureJour.CommPartner);
                    break;
            }
        }
        else if (factureJour.FactureType == FactureType_RU::Invoice)
        {
            invoiceSortedList = factureJour.invoiceJourSortedList();
            while (isCust ? invoiceSortedList.next(custInvoiceJour) : invoiceSortedList.next(vendInvoiceJour))
            {
                if (isCust)
                {
                    custVendInvoiceJour = custInvoiceJour;
                }
                else
                {
                    custVendInvoiceJour = vendInvoiceJour;
                }

                agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(custVendInvoiceJour.DefaultDimension);
                if (agreementHeaderExt.RecId)
                {
                    if (agreementHeaderExt.AgencyAgreement != AgencyAgreement_RU::None)
                    {
                        this.addValueToMap(#AgencyAgreement, agreementHeaderExt.AgencyAgreement);

                        switch (agreementHeaderExt.AgencyAgreement)
                        {
                            case AgencyAgreement_RU::SaleCommission :
                                this.addValueToMap(#Buyer, custVendInvoiceJour.OrderAccount);
                                return;

                            case AgencyAgreement_RU::PurchaseCommission :
                                this.addValueToMap(#Seller, custVendInvoiceJour.OrderAccount);
                                break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for customer invoice facture.
    /// </summary>
    /// <param name="_reportType">
    /// <c>OffReportType_RU</c> parameter.
    /// </param>
    protected void initCustInvoice(OffReportType_RU _reportType = OffReportType_RU::CustFacture)
    {
        VendTable   tmpVendTable;
        CustTable   tmpCustTable;
        Addressing  address;
        AgencyAgreement_RU  agencyAgreement;

        if (headerExist)
        {
            this.initFromFactureHeader();

            if (!factureJour.Consignee && factureJour.Module == FactureModule_RU::Cust)
            {
                tmpCustTable = CustTable::find(factureJour.CustVendInvoiceAccount);
                address = DirParty::getPostalAddressByType(tmpCustTable.Party, LogisticsLocationRoleType::Delivery);
                if (address)
                {
                    this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(address));
                }
            }
        }
        else
        {
            this.initCommissionInvoice();

            if (attributeMap.exists(#Seller))
            {
                tmpVendTable = VendTable::find(attributeMap.lookup(#Seller));
            }

            if (! tmpVendTable &&
               (factureJour.InventProfileType == InventProfileType_RU::CommissionAgent ||
                factureJour.InventProfileType == InventProfileType_RU::CommissionPrincipalAgent) &&
                factureJour.InventOwnerId &&
                InventOwner_RU::find(factureJour.InventOwnerId).AccountType == InventOwnerAccountType_RU::Vend)
            {
                tmpVendTable = InventOwner_RU::find(factureJour.InventOwnerId).vendTable();
            }

            if (tmpVendTable)
            {
                this.addValueToMap(#CompanyName,       tmpVendTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(tmpVendTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        tmpVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        tmpVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      tmpVendTable.Party);
            }
            else
            {
                this.addValueToMap(#CompanyName,       companyInfo.Name);
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(companyInfo.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      companyInfo.RecId);
            }

            if (attributeMap.exists(#Buyer))
            {
                tmpCustTable = CustTable::find(attributeMap.lookup(#Buyer));
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#ContragentName,    tmpCustTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(tmpCustTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#ContragentName,    custTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(custTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   custTable.Party);
            }

            if (attributeMap.exists(#AgencyAgreement))
            {
                [agencyAgreement] = attributeMap.lookup(#AgencyAgreement);
            }

            if (consignorTable)
            {
                this.addValueToMap(#ConsignorAccount,   consignorTable.AccountNum);
                this.addValueToMap(#ConsignorName,      consignorTable.name());
                this.addValueToMap(#ConsignorAddress,   this.dropLineBreaks(consignorTable.postalAddress().Address));
                this.addValueToMap(#ConsignorINN,       consignorTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorKPP,       consignorTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorParty,     consignorTable.Party);

                if (consignorTable.SeparateDivisionId_RU)
                {
                    this.addValueToMap(#SeparateDivisionId, consignorTable.SeparateDivisionId_RU);
                    this.addValueToMap(#CompanyKPP, consignorTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#CompanyParty, consignorTable.Party);
                }
            }
            else
            {
                switch(agencyAgreement)
                {
                    case AgencyAgreement_RU::PurchaseCommission :
                        this.addValueToMap(#ConsignorName,    companyInfo.Name);
                        this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                        this.addValueToMap(#ConsignorINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorParty,   companyInfo.RecId);
                        break;
                    case AgencyAgreement_RU::SaleCommission :
                        this.addValueToMap(#ConsignorAccount, custTable.AccountNum);
                        this.addValueToMap(#ConsignorName,    custTable.name());
                        this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(custTable.postalAddress().Address));
                        this.addValueToMap(#ConsignorINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorParty,   custTable.Party);
                        break;
                    default :
                        this.addValueToMap(#ConsignorName,    companyInfo.Name);
                        this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                        this.addValueToMap(#ConsignorINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorParty,   companyInfo.RecId);
                }
            }

            if (consigneeTable)
            {
                this.addValueToMap(#ConsigneeAccount, consigneeTable.AccountNum);
                this.addValueToMap(#ConsigneeName,    consigneeTable.name());
                address = factureJour.DeliveryPostalAddress ? 
                          LogisticsPostalAddress::findRecId(factureJour.DeliveryPostalAddress).Address :
                          DirParty::getPostalAddressByType(consigneeTable.Party, LogisticsLocationRoleType::Delivery);
                if (!address)
                {
                    address = consigneeTable.address();
                }
                this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(address));
                this.addValueToMap(#ConsigneeINN,     consigneeTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeKPP,     consigneeTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeParty,   consigneeTable.Party);
            }
            else
            {
                if (tmpCustTable)
                {
                    this.addValueToMap(#ConsigneeAccount, tmpCustTable.AccountNum);
                    this.addValueToMap(#ConsigneeName,    tmpCustTable.name());
                    address = DirParty::getPostalAddressByType(tmpCustTable.Party, LogisticsLocationRoleType::Delivery);
                    if (!address)
                    {
                        address = tmpCustTable.address();
                    }
                    this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(address));
                    this.addValueToMap(#ConsigneeINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeParty,   tmpCustTable.Party);
                }
                else
                {
                    this.addValueToMap(#ConsigneeAccount, custTable.AccountNum);
                    this.addValueToMap(#ConsigneeName,    custTable.name());
                    address = DirParty::getPostalAddressByType(custTable.Party, LogisticsLocationRoleType::Delivery);

                    if (!address)
                    {
                        address = custTable.address();
                    }
                    this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(address));
                    this.addValueToMap(#ConsigneeINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeParty,   custTable.Party);
                }
            }
        }

        reportType     = _reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for customer invoice credit note facture.
    /// </summary>
    protected void initCustInvoiceCreditNote()
    {
        VendTable               tmpVendTable;
        CustTable               tmpCustTable;
        LogisticsPostalAddress  logisticsPostalAddress;
        AgencyAgreement_RU      agencyAgreement;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            this.initCommissionInvoice();

            if (attributeMap.exists(#Buyer))
            {
                tmpCustTable = CustTable::find(attributeMap.lookup(#Buyer));
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#CompanyName,       tmpCustTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(tmpCustTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#CompanyName,       custTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(custTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      custTable.Party);
            }

            if (attributeMap.exists(#Seller))
            {
                tmpVendTable = VendTable::find(attributeMap.lookup(#Seller));
            }

            if (tmpVendTable)
            {
                this.addValueToMap(#ContragentName,    tmpVendTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(tmpVendTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     tmpVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     tmpVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   tmpVendTable.Party);
            }
            else
            {
                this.addValueToMap(#ContragentName,    companyInfo.Name);
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   companyInfo.RecId);
            }

            if (consignorTable)
            {
                this.addValueToMap(#ConsignorAccount, consignorTable.AccountNum);
                this.addValueToMap(#ConsignorName,    consignorTable.name());
                this.addValueToMap(#ConsignorAddress,
                this.dropLineBreaks(
                    factureJour.DeliveryPostalAddress ? factureJour.deliveryAddress()
                                                      : consignorTable.postalAddress().Address));
                this.addValueToMap(#ConsignorINN,       consignorTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorKPP,       consignorTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorParty,     consignorTable.Party);

                if (consignorTable.SeparateDivisionId_RU)
                {
                    this.addValueToMap(#SeparateDivisionId, consignorTable.SeparateDivisionId_RU);
                    this.addValueToMap(#ContragentKPP, consignorTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ContragentParty, consignorTable.Party);
                }
            }
            else
            {
                if (tmpCustTable)
                {
                    this.addValueToMap(#ConsignorAccount, tmpCustTable.AccountNum);
                    this.addValueToMap(#ConsignorName,    tmpCustTable.name());
                    this.addValueToMap(#ConsignorAddress,
                    this.dropLineBreaks(
                        factureJour.DeliveryPostalAddress ? factureJour.deliveryAddress()
                                                          : tmpCustTable.postalAddress().Address));
                    this.addValueToMap(#ConsignorINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsignorKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsignorParty,   tmpCustTable.Party);
                }
                else
                {
                    this.addValueToMap(#ConsignorAccount, custTable.AccountNum);
                    this.addValueToMap(#ConsignorName,    custTable.name());
                    this.addValueToMap(#ConsignorAddress,
                    this.dropLineBreaks(
                        factureJour.DeliveryPostalAddress ? factureJour.deliveryAddress()
                                                          : custTable.postalAddress().Address));
                    this.addValueToMap(#ConsignorINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsignorKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsignorParty,   custTable.Party);
                }
            }

            if (attributeMap.exists(#AgencyAgreement))
            {
                [agencyAgreement] = attributeMap.lookup(#AgencyAgreement);
            }

            if (consigneeTable)
            {
                this.addValueToMap(#ConsigneeAccount, consigneeTable.AccountNum);
                this.addValueToMap(#ConsigneeName,    consigneeTable.name());
                this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(consigneeTable.postalAddress().Address));
                this.addValueToMap(#ConsigneeINN,     consigneeTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeKPP,     consigneeTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeParty,   consigneeTable.Party);
            }
            else
            {
                switch(agencyAgreement)
                {
                    case AgencyAgreement_RU::PurchaseCommission :
                        this.addValueToMap(#ConsigneeName,    companyInfo.Name);
                        this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                        this.addValueToMap(#ConsigneeINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeParty,   companyInfo.RecId);
                        break;
                    case AgencyAgreement_RU::SaleCommission :
                        this.addValueToMap(#ConsigneeAccount, custTable.AccountNum);
                        this.addValueToMap(#ConsigneeName,    custTable.name());
                        this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(custTable.postalAddress().Address));
                        this.addValueToMap(#ConsigneeINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeParty,   custTable.Party);
                        break;
                    default :
                        logisticsPostalAddress = DirParty::findPostalAddressByRole(companyInfo.RecId, LogisticsLocationRoleType::Invoice);
                        if (!logisticsPostalAddress)
                        {
                            logisticsPostalAddress = companyInfo.postalAddress();
                        }
                        this.addValueToMap(#ConsigneeName,    companyInfo.Name);
                        this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(logisticsPostalAddress.Address));
                        this.addValueToMap(#ConsigneeINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeParty,   companyInfo.RecId);
                }
            }
        }

        reportType = OffReportType_RU::CustFactureCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustomsJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for customer invoice facture.
    /// </summary>
    protected void initCustomsJournal()
    {
        VendTable  localVendTable;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            localVendTable  = VendTable::find(factureJour.CustVendInvoiceAccount);

            this.addValueToMap(#CompanyName,       localVendTable.name());
            this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(localVendTable.postalAddress().Address));
            this.addValueToMap(#CompanyINN,        localVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#CompanyKPP,        localVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#CompanyParty,      localVendTable.Party);

            this.addValueToMap(#ContragentName,    companyInfo.Name);
            this.addValueToMap(#ContragentAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
            this.addValueToMap(#ContragentINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
            this.addValueToMap(#ContragentParty,   companyInfo.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal variables with values from caller.
    /// </summary>
    /// <param name="_caller">
    /// Caller object.
    /// </param>
    protected void initFromCaller(IFactureHeaderCaller_RU _caller)
    {
        caller = _caller;

        if (caller.getFactureJour().isTmp())
        {
            factureJour.setTmp();
            factureTrans.setTmp();

            factureJour.setTmpData(caller.getFactureJour());
            factureTrans.setTmpData(caller.getFactureTrans());

            select firstonly factureJour;
            select firstonly factureTrans;
        }
        else
        {
            factureJour  = caller.getFactureJour();
            factureTrans = caller.getFactureTrans();
        }

        effectiveFactureType = factureJour.FactureType;
        findOfficials = caller.parmFindOfficials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFactureHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attributes with values from <c>FactureJourHeader_RU</c> record.
    /// </summary>
    protected void initFromFactureHeader()
    {
        int         counter;
        FieldId     fieldId;
        DictTable   dictTable = new DictTable(tableNum(FactureJourHeader_RU));
        ;

        counter = dictTable.fieldNext(counter);
        while (counter)
        {
            if (! dictTable.fieldObject(counter).isSystem())
            {
                fieldId = dictTable.fieldObject(counter).id();
                this.addValueToMap(fieldId, factureHeader.(fieldId));
            }

            counter = dictTable.fieldNext(counter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current object instance with data.
    /// </summary>
    protected void initHeaderData()
    {
        this.initBaseData();

        switch (effectiveFactureType)
        {
            case FactureType_RU::Invoice         :
            case FactureType_RU::Facture         :
                this.initInvoice();
                break;
            case FactureType_RU::Prepayment      :
                if (factureJour.Module == FactureModule_RU::Vend)
                {
                    vendTable = VendTable::find(factureJour.CustVendInvoiceAccount);
                    this.initVendPrepayment();
                }
                else
                {
                    this.initPrepayment();
                }
                break;
            case FactureType_RU::AmoutDifference   :
            case FactureType_RU::ExchAdj           :
            case FactureType_RU::AdvanceAdjustment :
            case FactureType_RU::VATAdjustment     :
                this.initAmountDifference();
                break;
            case FactureType_RU::AdvanceReport   :
                this.initAdvanceReport();
                break;
            case FactureType_RU::TaxCorrection   :
                this.initTaxCorrection();
                break;
            case FactureType_RU::GTD             :
            case FactureType_RU::CustomCorrection:
                this.initCustomsJournal();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for invoice facture.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Facture module advance holder is not supported.
    /// </exception>
    protected void initInvoice()
    {
        if (factureJour.Module == FactureModule_RU::Empl)
            throw error(Error::wrongUseOfFunction(funcName()));

        if (this.isNonCreditNoteAttrOrder())
        {
            switch (factureJour.Module)
            {
                case FactureModule_RU::Cust :
                    this.initCustInvoice();
                    break;
                case FactureModule_RU::Vend :
                    this.initVendInvoice();
                    break;
            }

            creditNoteSign = 1;
        }
        else
        {
            switch (factureJour.Module)
            {
                case FactureModule_RU::Cust :
                    this.initCustInvoiceCreditNote();
                    break;
                case FactureModule_RU::Vend :
                    this.initVendInvoiceCreditNote();
                    break;
            }

            creditNoteSign = -1;
        }

        switch (factureJour.Module)
        {
            case FactureModule_RU::Cust :
                reportType = factureJour.creditNote()                ?
                             OffReportType_RU::CustFactureCreditNote :
                             OffReportType_RU::CustFacture;
                break;
            case FactureModule_RU::Vend :
                reportType = factureJour.creditNote()                ?
                             OffReportType_RU::VendFactureCreditNote :
                             OffReportType_RU::VendFacture;
                break;
        }

        if (findOfficials)
        {
            //  reportType is inited in initCustInvoice, initCustInvoiceCreditNote etc.

            accountant  = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Accountant,
                                                                      reportType).Name;

            director    = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Director,
                                                                      reportType).Name;

            responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Responsible,
                                                                      reportType).Name;
        }

        if (isIndebtednessFacture)
        {
            sourceIndebtednessInvoiceJour       = factureJour.indebtednessSourceInvoiceJour();
            sourceIndebtednessVendTable         = VendTable::find(sourceIndebtednessInvoiceJour.InvoiceAccount);
            sourceIndebtednessAgreementHeader   = AgreementHeaderExt_RU::findByDefaultDimension(sourceIndebtednessInvoiceJour.DefaultDimension);

            if (factureJour.creditNote())
            {
                creditNoteSign = -1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for prepayment facture.
    /// </summary>
    protected void initPrepayment()
    {
        VendTable           tmpVendTable;
        CustTable           tmpCustTable;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            this.initCommissionInvoice();

            if (attributeMap.exists(#Seller))
            {
                tmpVendTable = VendTable::find(attributeMap.lookup(#Seller));
            }

            if (tmpVendTable)
            {
                this.addValueToMap(#CompanyName,       tmpVendTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(tmpVendTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        tmpVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        tmpVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      tmpVendTable.Party);
            }
            else
            {
                this.addValueToMap(#CompanyName,       companyInfo.Name);
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(companyInfo.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      companyInfo.RecId);
            }

            if (attributeMap.exists(#Buyer))
            {
                tmpCustTable = CustTable::find(attributeMap.lookup(#Buyer));
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#ContragentName,    tmpCustTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(tmpCustTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#ContragentName,    custTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(custTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     custTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     custTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   custTable.Party);
            }

            this.addValueToMap(#ConsignorName,     #ScorecardMissing);
            this.addValueToMap(#ConsigneeName,     #ScorecardMissing);
        }

        if (findOfficials)
        {
            accountant     = OfficialsTable_RU::findAccountant().Name;
            director       = OfficialsTable_RU::findDirector().Name;
        }

        creditNoteSign = 1;
        prepayment     = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for tax correction facture.
    /// </summary>
    protected void initTaxCorrection()

    {
        switch (factureJour.Module)
        {
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                this.initCustInvoice(OffReportType_RU::TaxCorrectionFactureCust);
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                this.initVendInvoice(OffReportType_RU::TaxCorrectionFactureVend);
                break;
        }

        creditNoteSign = 1;

        if (findOfficials)
        {
            // reportType is inited in initVendInvoice(), initCustInvoice()
            accountant  = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Accountant,
                                                                      reportType).Name;

            director    = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Director,
                                                                      reportType).Name;

            responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                      OffPosition_RU::Responsible,
                                                                      reportType).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for vendor invoice facture.
    /// </summary>
    /// <param name="_reportType">
    /// <c>OffReportType_RU</c> parameter.
    /// </param>
    protected void initVendInvoice(OffReportType_RU _reportType = OffReportType_RU::VendFacture)
    {
        VendTable tmpVendTable;
        CustTable tmpCustTable;
        AgencyAgreement_RU  agencyAgreement;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            this.initCommissionInvoice();

            if (attributeMap.exists(#Seller))
            {
                tmpVendTable = VendTable::find(attributeMap.lookup(#Seller));
            }

            if (tmpVendTable)
            {
                this.addValueToMap(#CompanyName,       tmpVendTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(tmpVendTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        tmpVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        tmpVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      tmpVendTable.Party);
            }
            else
            {
                this.addValueToMap(#CompanyName,       vendTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(vendTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        vendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        vendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      vendTable.Party);
            }

            if (attributeMap.exists(#Buyer))
            {
                tmpCustTable = CustTable::find(attributeMap.lookup(#Buyer));
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#ContragentName,    tmpCustTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(tmpCustTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#ContragentName,    companyInfo.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   companyInfo.RecId);
            }

            if (attributeMap.exists(#AgencyAgreement))
            {
                [agencyAgreement] = attributeMap.lookup(#AgencyAgreement);
            }

            if (consignorTable)
            {
                this.addValueToMap(#ConsignorAccount, consignorTable.AccountNum);
                this.addValueToMap(#ConsignorName,    consignorTable.name());
                this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(consignorTable.postalAddress().Address));
                this.addValueToMap(#ConsignorINN,     consignorTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorKPP,     consignorTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorParty,   consignorTable.Party);
            }
            else
            {
                switch(agencyAgreement)
                {
                    case AgencyAgreement_RU::SaleCommission :
                        this.addValueToMap(#ConsignorName,    companyInfo.name());
                        this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                        this.addValueToMap(#ConsignorINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorParty,   companyInfo.RecId);
                        break;
                    case AgencyAgreement_RU::PurchaseCommission :
                        this.addValueToMap(#ConsignorAccount, vendTable.AccountNum);
                        this.addValueToMap(#ConsignorName,    vendTable.name());
                        this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(vendTable.postalAddress().Address));
                        this.addValueToMap(#ConsignorINN,     vendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorKPP,     vendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsignorParty,   vendTable.Party);
                        break;
                    default :
                        this.addValueToMap(#ConsignorName,    strFmt("@GLS102741"));
                }
            }

            if (consigneeTable)
            {
                this.addValueToMap(#ConsigneeAccount, consigneeTable.AccountNum);
                this.addValueToMap(#ConsigneeName,    consigneeTable.name());
                this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(consigneeTable.postalAddress().Address));
                this.addValueToMap(#ConsigneeINN,     consigneeTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeKPP,     consigneeTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeParty,   consigneeTable.Party);
            }
            else
            {
                if (tmpCustTable)
                {
                    this.addValueToMap(#ConsigneeAccount, tmpCustTable.AccountNum);
                    this.addValueToMap(#ConsigneeName,    tmpCustTable.name());
                    this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(factureJour.deliveryAddress() ?
                                                                          factureJour.deliveryAddress() :
                                                                          tmpCustTable.postalAddress().Address));
                    this.addValueToMap(#ConsigneeINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeParty,   tmpCustTable.Party);
                }
                else
                {
                    this.addValueToMap(#ConsigneeName,    companyInfo.name());
                    this.addValueToMap(#ConsigneeAddress, this.getFactureAddress());
                    this.addValueToMap(#ConsigneeINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                    this.addValueToMap(#ConsigneeParty,   companyInfo.RecId);
                }
            }
        }

        reportType     = _reportType;

        if (vendTable.vatTaxAgent_RU && _reportType == OffReportType_RU::TaxCorrectionFactureVend)
        {
            prepayment = true;
            taxAgent   = true;
        }

        partnerKind = vendTable.vatPartnerKind_RU;

        if (taxAgent)
        {
            this.addValueToMap(#ConsignorAccount, '');
            this.addValueToMap(#ConsignorName,    #ScorecardMissing);
            this.addValueToMap(#ConsignorAddress, '');
            this.addValueToMap(#ConsignorINN,     '');
            this.addValueToMap(#ConsignorKPP,     '');
            this.addValueToMap(#ConsignorParty,   0);

            this.addValueToMap(#ConsigneeAccount, '');
            this.addValueToMap(#ConsigneeName,    #ScorecardMissing);
            this.addValueToMap(#ConsigneeAddress, '');
            this.addValueToMap(#ConsigneeINN,     '');
            this.addValueToMap(#ConsigneeKPP,     '');
            this.addValueToMap(#ConsigneeParty,   0);

            if (partnerKind == VATPartnerKind_RU::NonResident)
            {
                this.addValueToMap(#CompanyINN, '-');
                this.addValueToMap(#CompanyKPP, '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoiceCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for vendor invoice credit note facture.
    /// </summary>
    protected void initVendInvoiceCreditNote()
    {
        VendTable tmpVendTable;
        CustTable tmpCustTable;
        AgencyAgreement_RU  agencyAgreement;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            this.initCommissionInvoice();

            if (attributeMap.exists(#Seller))
            {
                tmpVendTable = VendTable::find(attributeMap.lookup(#Seller));
            }

            if (tmpVendTable)
            {
                this.addValueToMap(#ContragentName,    tmpVendTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(tmpVendTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     tmpVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     tmpVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   tmpVendTable.Party);
            }
            else
            {
                this.addValueToMap(#ContragentName,    consignorTable ? consignorTable.name() : vendTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(vendTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     vendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     vendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   vendTable.Party);
            }

            if (attributeMap.exists(#Buyer))
            {
                tmpCustTable = CustTable::find(attributeMap.lookup(#Buyer));
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#CompanyName,       tmpCustTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(tmpCustTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#CompanyName,       companyInfo.Name);
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(companyInfo.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      companyInfo.RecId);
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#ConsignorName,    tmpCustTable.name());
                this.addValueToMap(#ConsignorAddress, this.dropLineBreaks(factureJour.deliveryAddress() ?
                                                                      factureJour.deliveryAddress() :
                                                                      tmpCustTable.postalAddress().Address));
                this.addValueToMap(#ConsignorINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorParty,   tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#ConsignorName,    companyInfo.Name);
                this.addValueToMap(#ConsignorAddress, this.getFactureAddress());
                this.addValueToMap(#ConsignorINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsignorParty,   companyInfo.RecId);
            }

            if (attributeMap.exists(#AgencyAgreement))
            {
                [agencyAgreement] = attributeMap.lookup(#AgencyAgreement);
            }

            if (consigneeTable)
            {
                this.addValueToMap(#ConsigneeAccount, consigneeTable.AccountNum);
                this.addValueToMap(#ConsigneeName,    consigneeTable.name());
                this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(consigneeTable.postalAddress().Address));
                this.addValueToMap(#ConsigneeKPP,     consigneeTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ConsigneeParty,   consigneeTable.Party);
            }
            else
            {
                switch(agencyAgreement)
                {
                    case AgencyAgreement_RU::SaleCommission :
                        this.addValueToMap(#ConsigneeName,    companyInfo.name());
                        this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                        this.addValueToMap(#ConsigneeINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeParty,   companyInfo.RecId);
                        break;
                    case AgencyAgreement_RU::PurchaseCommission :
                        this.addValueToMap(#ConsigneeAccount, vendTable.AccountNum);
                        this.addValueToMap(#ConsigneeName,    vendTable.name());
                        this.addValueToMap(#ConsigneeAddress, this.dropLineBreaks(vendTable.postalAddress().Address));
                        this.addValueToMap(#ConsigneeINN,     vendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeKPP,     vendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                        this.addValueToMap(#ConsigneeParty,   vendTable.Party);
                        break;
                }
            }
        }

        reportType = OffReportType_RU::VendFactureCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attribute map values for vendor prepayment facture.
    /// </summary>
    /// <param name="_reportType">
    /// <c>OffReportType_RU</c> parameter.
    /// </param>
    protected void initVendPrepayment(OffReportType_RU _reportType = OffReportType_RU::VendFacture)
    {
        VendTable tmpVendTable;
        CustTable tmpCustTable;

        if (headerExist)
        {
            this.initFromFactureHeader();
        }
        else
        {
            this.initCommissionInvoice();

            if (attributeMap.exists(#Seller))
            {
                tmpVendTable = VendTable::find(attributeMap.lookup(#Seller));
            }

            if (tmpVendTable)
            {
                this.addValueToMap(#CompanyName,       tmpVendTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(tmpVendTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        tmpVendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        tmpVendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      tmpVendTable.Party);
            }
            else
            {
                this.addValueToMap(#CompanyName,       vendTable.name());
                this.addValueToMap(#CompanyAddress,    this.dropLineBreaks(vendTable.postalAddress().Address));
                this.addValueToMap(#CompanyINN,        vendTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyKPP,        vendTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#CompanyParty,      vendTable.Party);
            }

            if (attributeMap.exists(#Buyer))
            {
                tmpCustTable = CustTable::find(attributeMap.lookup(#Buyer));
            }

            if (tmpCustTable)
            {
                this.addValueToMap(#ContragentName,    tmpCustTable.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(tmpCustTable.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     tmpCustTable.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     tmpCustTable.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   tmpCustTable.Party);
            }
            else
            {
                this.addValueToMap(#ContragentName,    companyInfo.name());
                this.addValueToMap(#ContragentAddress, this.dropLineBreaks(companyInfo.postalAddress().Address));
                this.addValueToMap(#ContragentINN,     companyInfo.partyINNasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentKPP,     companyInfo.partyKPPasOfDate_RU(factureJour.FactureDate));
                this.addValueToMap(#ContragentParty,   companyInfo.RecId);
            }
        }

        reportType     = _reportType;
        partnerKind    = vendTable.vatPartnerKind_RU;

        if (findOfficials)
        {
            accountant  = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Accountant,
                                                                  reportType).Name;

            director    = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Director,
                                                                  reportType).Name;

            responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Responsible,
                                                                  reportType).Name;
        }

        creditNoteSign = 1;
        prepayment     = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonCreditNoteAttrOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if credit-note order of seller-buyer attributes is used.
    /// </summary>
    /// <returns>
    /// True if credit-note order of seller-buyer attributes is used; otherwise false.
    /// </returns>
    public boolean isNonCreditNoteAttrOrder()
    {
        isIndebtednessFacture = factureJour.isIndebtednessFacture();

        return (! factureJour.creditNote()                                                                          ||
        (factureJour.creditNote()                                                                           &&
         ((factureJour.Module                             == FactureModule_RU::Cust                         &&
           CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::SourceAmount) ||
          (factureJour.Module                             == FactureModule_RU::Vend                         &&
           VendFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::SourceAmount  &&
           ! isIndebtednessFacture))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns value indicating that facture is prepayment.
    /// </summary>
    /// <returns>
    /// Value indicating that facture is prepayment.
    /// </returns>
    public boolean isPrepayment()
    {
        return prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns value indicating that facture is tax agent.
    /// </summary>
    /// <returns>
    /// Value indicating that facture is tax agent.
    /// </returns>
    public boolean isTaxAgent()
    {
        return taxAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        attributeMap = new Map(extendedTypeId2Type(extendedTypeNum(FieldId)), Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccountant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns accountant name for facture.
    /// </summary>
    /// <returns>
    /// Accountant name for facture.
    /// </returns>
    public Name offAccountant()
    {
        return accountant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offDirector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns director name for facture.
    /// </summary>
    /// <returns>
    /// Director name for facture.
    /// </returns>
    public Name offDirector()
    {
        return director;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offResponsible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns responsible name for facture.
    /// </summary>
    /// <returns>
    /// Responsible name for facture.
    /// </returns>
    public Name offResponsible()
    {
        return responsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, 
                accountant,
                director,
                responsible, 
                attributeMap.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns officials report type parameter.
    /// </summary>
    /// <returns>
    /// Officials report type parameter.
    /// </returns>
    public OffReportType_RU reportType()
    {
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFactureCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>FactureJourCreate_RU</c> class instance to internal variable.
    /// </summary>
    /// <param name="_factureCreate">
    /// <c>FactureJourCreate_RU</c> class instance.
    /// </param>
    public void setFactureCreate(boolean _factureCreate)
    {
        factureCreate = _factureCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceIndebtednessAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns agreement for source indebtness.
    /// </summary>
    /// <returns>
    /// Agreement for source indebtness.
    /// </returns>
    public  AgreementHeaderExt_RU sourceIndebtednessAgreement()
    {
        return sourceIndebtednessAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceIndebtednessInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns invoice journal for source indebtness.
    /// </summary>
    /// <returns>
    /// Invoice journal for source indebtness.
    /// </returns>
    public CustVendInvoiceJour sourceIndebtednessInvoiceJour()
    {
        return sourceIndebtednessInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceIndebtednessVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>VendTable</c> record for source indebtness.
    /// </summary>
    /// <returns>
    /// <c>VendTable</c> record for source indebtness.
    /// </returns>
    public VendTable sourceIndebtednessVendTable()
    {
        return sourceIndebtednessVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        boolean     ret     = true;
        container   packedAttributeMap;

        switch (version)
        {
            case currentVersion:
                [   version, 
                    accountant,
                    director,
                    responsible, 
                    packedAttributeMap] = _packedClass;
                
                attributeMap = Map::create(packedAttributeMap);
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatPartnerKind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>VATPartnerKind_RU</c> value for facture.
    /// </summary>
    /// <returns>
    /// <c>VATPartnerKind_RU</c> value for facture.
    /// </returns>
    public VATPartnerKind_RU vatPartnerKind()
    {
        return partnerKind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureHeaderData_RU construct()
    {
        return new FactureHeaderData_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>FactureHeaderData_RU</c> class.
    /// </summary>
    /// <param name="_caller">
    /// Caller object.
    /// </param>
    /// <returns>
    /// New instance of <c>FactureHeaderData_RU</c> class.
    /// </returns>
    public static FactureHeaderData_RU newFromCaller(IFactureHeaderCaller_RU _caller)
    {
        FactureHeaderData_RU factureHeaderData;

        factureHeaderData = FactureHeaderData_RU::construct();
        factureHeaderData.initFromCaller(_caller);

        return factureHeaderData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>