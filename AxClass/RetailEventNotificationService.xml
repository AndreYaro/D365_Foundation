<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The shared part for RetailEventNotificationProcessor and RetailEventNotificationParallelingProcessor helps to handle event notifications.
/// </summary>
public class RetailEventNotificationService
{
    private Map   notificationTypeEnabledStateCache = new Map(Types::Enum, Types::AnyType);
    private SysIMailerNonInteractive mailer;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handleUnprocessedNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// The unprocessed event notifications handler.
    /// </summary>
    /// <param name="_notificationAction">
    /// The event notification action.
    /// </param>
    /// <param name="_batchJobId">
    /// The batch job id.
    /// </param>
    /// <param name="_batchTaskId">
    /// The batch task id.
    /// </param>
    internal void handleUnprocessedNotification(RetailEventNotificationAction _notificationAction, int64 _batchJobId, int64 _batchTaskId)
    {
        str fromAddr, toAddr, subject, message; 
        EmailProfileName senderName;
        RetailENInfo notificationInfo;
        boolean shouldSendEmail = false;
        var emailSendingResult = new RetailEventNotificationSendEmailResult();

        if (this.hasActiveSettingForNotificationType(_notificationAction.EventNotificationType, _batchJobId, _batchTaskId, _notificationAction.RefRecId))
        {
            boolean emailConstructionError = false;
            System.Exception notificationException;
            str notificationTypeStr = enum2Str(_notificationAction.EventNotificationType);

            try
            {
                boolean isRefTableSalesTableForShipment = _notificationAction.isForShipment();

                if (isRefTableSalesTableForShipment)
                {
                    notificationInfo = RetailENInfo::construct(_notificationAction.EventNotificationType, _notificationAction.RefRecId, tableNum(CustPackingSlipJour));
                }
                else
                {
                    notificationInfo = RetailENInfo::construct(_notificationAction.EventNotificationType, _notificationAction.RefRecId);
                }

                if (!notificationInfo)
                {
                    str errorMessage = strFmt("@Retail:RetailEventNotificationConstructNotificationInfoFailed", notificationTypeStr,  _notificationAction.RefRecId);
                    error(errorMessage);
                    eventSource.EventWriteEmailNotificationEmailWasNotConstructed(_batchJobId, _batchTaskId, _notificationAction.RefRecId, notificationTypeStr, errorMessage);
                }
                else if (!notificationInfo.isNotificationEnabled())
                {
                    str warningMessage = strFmt("@Retail:RetailEventNotificationNotEnabled", notificationTypeStr, _notificationAction.RefRecId);
                    warning(warningMessage);
                    eventSource.EventWriteEmailNotificationEmailWasNotConstructed(_batchJobId, _batchTaskId, _notificationAction.RefRecId, notificationTypeStr, warningMessage);
                }
                else
                {
                    container emailDetailsContainer = notificationInfo.generateEmail();
                    [fromAddr, toAddr, subject, message] = emailDetailsContainer;
                    if (conLen(emailDetailsContainer) >= 5)
                    {
                        senderName = conPeek(emailDetailsContainer, 5);
                    }

                    shouldSendEmail = true;
                    eventSource.EventWriteEmailNotificationEmailWasConstructedSuccessfully(_batchJobId, _batchTaskId, _notificationAction.RefRecId, notificationTypeStr);
                }
            }
            catch (notificationException)
            {
                shouldSendEmail = false;

                var errorCode = RetailTransactionServiceUtilities::getErrorCode(RetailTransactionServiceUtilities::getInfologMessages(Global::infologLine()));
                emailSendingResult.error = notificationException.ToString();

                // Inserting retail event notification log.
                this.insertNotificationLog(_notificationAction,
                                               notificationInfo,
                                               true, // Indicates that there was an error constructing the email.
                                               emailSendingResult.emailSentSuccessfully,
                                               fromAddr,
                                               toAddr,
                                               subject,
                                               message,
                                               emailSendingResult.error);

                error(notificationException.Message);
                eventSource.EventWriteEmailNotificationEmailWasConstructedWithErrors(_batchJobId, _batchTaskId, _notificationAction.RefRecId, notificationTypeStr, errorCode);
            }

            if (shouldSendEmail)
            {
                System.Exception trySendEmailException;

                try
                {
                    // adding a try...catch... here to catch possible errors thrown in trySendEmail COC.
                    emailSendingResult = this.trySendEmail(RetailEventNotificationSendEmailParameters::constructV2(fromAddr, senderName, toAddr, subject, message, _batchJobId, _batchTaskId, _notificationAction.RefRecId));
                }
                catch (trySendEmailException)
                {
                    var errorCode = RetailTransactionServiceUtilities::getErrorCode(RetailTransactionServiceUtilities::getInfologMessages(Global::infologLine()));
                    emailSendingResult.error = trySendEmailException.ToString();

                    error(trySendEmailException.Message);
                    eventSource.EventWriteEmailNotificationEmailSendingFailedWithErrors(_batchJobId, _batchTaskId, _notificationAction.RefRecId, notificationTypeStr, errorCode);
                }

                // Inserting retail event notification log.
                this.insertNotificationLog(_notificationAction,
                                               notificationInfo,
                                               false, // Indicates that there was no error constructing the email.
                                               emailSendingResult.emailSentSuccessfully,
                                               fromAddr,
                                               toAddr,
                                               subject,
                                               message,
                                               emailSendingResult.error);

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProcessedNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes RetailEventNotificationAction after processing.
    /// </summary>
    /// <param name="_eventNotificationAction">
    /// The Retail event notification action.
    /// </param>
    internal void removeProcessedNotification(RetailEventNotificationAction _eventNotificationAction)
    {
        ttsbegin;
        _eventNotificationAction.selectForUpdate(true);
        _eventNotificationAction.delete();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trySendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an email message without having to set any properties or collections.
    /// </summary>
    /// <param name="_parameters">
    /// The parameter for send email event.
    /// </param>
    /// <returns> True if the email was successfully sent; otherwise, False.</returns>
    [Replaceable]
    public RetailEventNotificationSendEmailResult trySendEmail(RetailEventNotificationSendEmailParameters _parameters)
    {
        const int maxRetries = 3;
        int retryCount = 0;
        var result = new RetailEventNotificationSendEmailResult();
        System.Exception exception;

        // Initialize with SMTP settings
        if (mailer == null)
        {
            mailer = SysMailerFactory::getNonInteractiveMailer();
        }

        // Validation first.
        if (mailer == null)
        {
            result.emailSentSuccessfully = false;
            result.error = "@Retail:RetailEventNotificationInitializeSysMailerFailed";
            error(result.error);
            eventSource.EventWriteEmailNotificationEmailWasNotSent(_parameters.batchJobId, _parameters.batchTaskId, _parameters.notificationRecId, result.error);
            return result;
        }

        if (_parameters.fromAddress == '')
        {
            result.emailSentSuccessfully = false;
            result.error = strFmt("@Retail:RetailEventNotificationSenderEmailAddressEmpty", _parameters.notificationRecId);
            error(result.error);
            eventSource.EventWriteEmailNotificationEmailWasNotSent(_parameters.batchJobId, _parameters.batchTaskId, _parameters.notificationRecId, result.error);
            return result;
        }

        if (_parameters.toAddress == '')
        {
            result.emailSentSuccessfully = false;
            result.error = strFmt("@Retail:RetailEventNotificationReceiverEmailAddressEmpty", _parameters.notificationRecId);

            // No error log: customer email address may be empty so we just bypass to send email.
            info(result.error);
            eventSource.EventWriteEmailNotificationEmailWasNotSent(_parameters.batchJobId, _parameters.batchTaskId, _parameters.notificationRecId, result.error);
            return result;
        }

        try
        {
            eventSource.EventWriteEmailSendingStart(_parameters.batchJobId, _parameters.batchTaskId, _parameters.notificationRecId);
            var messageBuilder = new SysMailerMessageBuilder();
            messageBuilder.setFrom(_parameters.fromAddress, _parameters.senderName)
                          .addTo(_parameters.toAddress)
                          .setSubject(_parameters.subject)
                          .setBody(_parameters.body);
            mailer.sendNonInteractive(messageBuilder.getMessage());

            result.emailSentSuccessfully = true;
            eventSource.EventWriteEmailNotificationEmailWasSentSuccessfully(_parameters.batchJobId, _parameters.batchTaskId, _parameters.notificationRecId, true);
        }
        catch (exception)
        {
            if (retryCount < maxRetries)
            {
                retryCount++;
                retry;
            }

            else
            {
                var errorCode = RetailTransactionServiceUtilities::getErrorCode(RetailTransactionServiceUtilities::getInfologMessages(Global::infologLine()));
                result.error = exception.Message;
                error(result.error);
                eventSource.EventWriteEmailNotificationEmailWasNotSent(_parameters.batchJobId, _parameters.batchTaskId, _parameters.notificationRecId, errorCode);
                result.emailSentSuccessfully = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveSettingForNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the event notification type is enabled or not.
    /// </summary>
    /// <param name="_notificationType">
    /// The Email notification type.
    /// </param>
    /// <param name="_batchJobId">
    /// The batch job id.
    /// </param>
    /// <param name="_batchTaskId">
    /// The batch task id.
    /// </param>
    /// <param name="_notificationRecId">
    /// The notification record id.
    /// </param>
    /// <returns>True if the event notification action is enabled ; otherwise, false.</returns>
    private boolean hasActiveSettingForNotificationType(RetailEventNotificationType _notificationType, int64 _batchJobId, int64 _batchTaskId, int64 _notificationRecId)
    {
        RetailEventNotificationProfile      notificationProfile;
        RetailEventNotificationSetting      notificationSetting;
        RetailEventNotificationProfileId    profileId;
        boolean  isNotificationTypeEnabled;

        if(!notificationTypeEnabledStateCache.exists(_notificationType))
        {
            select firstOnly notificationSetting
                 where notificationSetting.EventNotificationType == _notificationType
                 && notificationSetting.Active;

            if( notificationSetting )
            {
                isNotificationTypeEnabled = true;
            }
            else
            {
                // Per batch task execution, we will echo this info message only once.
                info(strFmt("@Retail:RetailEventNotificationTypeHasNoActiveSetting", enum2Str(_notificationType)));
                isNotificationTypeEnabled = false;
            }

            notificationTypeEnabledStateCache.insert(_notificationType, isNotificationTypeEnabled);
        }
        else
        {
            isNotificationTypeEnabled = notificationTypeEnabledStateCache.lookup(_notificationType);
        }

        eventSource.EventWriteEmailNotificationTypeEnabled(_batchJobId, _batchTaskId, _notificationRecId, enum2Str(_notificationType), isNotificationTypeEnabled);

        return isNotificationTypeEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNotificationLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserting retail event notification log.
    /// </summary>
    /// <param name = "_notificationAction">RetailEventNotificationAction table buffer.</param>
    /// <param name = "_notificationInfo">Retail event notification information.</param>
    /// <param name = "_emailConstructionError">If the email was constructed successfully or not.</param>
    /// <param name = "_mailSentSuccessfully">If the email was successfully sent or not.</param>
    /// <param name = "_fromAddr">The sender of the email message.</param>
    /// <param name = "_toAddr">The destination address of the email.</param>
    /// <param name = "_subject">The subject of the message.</param>
    /// <param name = "_message">Email message.</param>
    /// <param name = "_error">Error message.</param>
    internal void insertNotificationLog(RetailEventNotificationAction _notificationAction,
                                       RetailENInfo _notificationInfo,
                                       boolean _emailConstructionError,
                                       boolean _mailSentSuccessfully,
                                       str _fromAddr,
                                       str _toAddr,
                                       str _subject,
                                       str _message,
                                       str _error)
    {
        RetailOENInfo orderNotificationInfo;
        RetailEventNotificationLog notificationLog;

        ttsbegin;
        notificationLog.clear();
        notificationLog.SenderEmailAddress = _fromAddr;
        notificationLog.ReceiverEmailAddress = _toAddr;
        notificationLog.DefaultLanguage = CompanyInfo::languageId();
        notificationLog.EmailSubject = _subject;
        notificationLog.EmailMessage = _message;

        if (_notificationAction != null)
        {
            notificationLog.RefRecId = _notificationAction.RefRecId;
            notificationLog.EventNotificationType = _notificationAction.EventNotificationType;
        }

        notificationLog.SentDateTime = DateTimeUtil::utcNow();
        notificationLog.SentSuccessfully = _mailSentSuccessfully? NoYes::Yes : NoYes::No;
        notificationLog.EmailConstructedSuccessfully = _emailConstructionError? NoYes::No : NoYes::Yes;
        notificationLog.ErrorMessage = _error;

        if (_notificationInfo && _notificationInfo.IsSalesOrderInfo())
        {
            orderNotificationInfo = _notificationInfo as RetailOENInfo;
            notificationLog.SalesOrder = orderNotificationInfo.parmSalesOrder().RecId;
        }

        notificationLog.insert();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>