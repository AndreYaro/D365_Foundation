<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AutoChargesSetupLineLevelUnitOfMeasureFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

/// <summary>
/// The <c>AutoChargesSetupLineLevelUnitOfMeasureFeature</c> class defines the feature management feature, 
/// when enabled the usage of sequence and compound configuration can be setup for auto charges.
/// Provides the capability of define the order the charges are calculated and whether charge should be accumulated into the base cost calculation.
/// </summary>
[ExportAttribute(identifierstr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class AutoChargesSetupLineLevelUnitOfMeasureFeature implements IFeatureMetadata, IFeatureLifecycle
{
    private static AutoChargesSetupLineLevelUnitOfMeasureFeature singleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static AutoChargesSetupLineLevelUnitOfMeasureFeature instance()
    {
        if (!singleton)
        {
            singleton = new AutoChargesSetupLineLevelUnitOfMeasureFeature();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@SCM:AutoChargesSetupLineLevelUnitOfMeasureFeatureFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::SalesAndMarketing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@SCM:AutoChargesSetupLineLevelUnitOfMeasureFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2199212';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        MarkupAutoLine markupAutoLine;
        select firstOnly crosscompany RecId from markupAutoLine
            where markupAutoLine.MarkupCategory == MarkupCategory::UnitSpecific
               || markupAutoLine.MarkupCategory == MarkupCategory::UnitSpecificMatch;

        if (markupAutoLine.RecId)
        {
            warning("@SCM:AutoChargesSetupLineLevelUnitOfMeasureFeatureDisableWarningAutoCharge");
            return false;
        }

        MarkupTrans markupTrans;
        select firstOnly crosscompany RecId from markupTrans
            where markupTrans.MarkupCategory == MarkupCategory::UnitSpecific
               || markupTrans.MarkupCategory == MarkupCategory::UnitSpecificMatch;

        if (markupTrans.RecId)
        {
            warning("@SCM:AutoChargesSetupLineLevelUnitOfMeasureFeatureDisableWarningChargeTransaction");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isConfigurationKeyEnabled()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(Markup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureAndConfigurationkeyEnabled</Name>
				<Source><![CDATA[
    internal boolean isFeatureAndConfigurationkeyEnabled()
    {
        return this.isEnabled() && this.isConfigurationKeyEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>