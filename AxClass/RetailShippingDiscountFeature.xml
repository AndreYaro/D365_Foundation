<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailShippingDiscountFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to check existence of configuration for shipping discounts
/// </summary>
internal static final class RetailShippingDiscountFeature
{
    private const str shippingDiscountConfigurationScope = 'ExistsRetailShippingThresholdDiscounts';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existsConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if Shipping Discounts is disabled for call center.
    /// </summary>
    /// <returns>True if shipping discounts is disabled; otherwise, false.</returns>
    public static boolean existsConfiguration()
    {
        boolean hasConfiguration = true;

        SysGlobalObjectCache cache = new SysGlobalObjectCache();

        container packedResult = cache.find(shippingDiscountConfigurationScope, ['shippingDiscounts']);

        if (packedResult == conNull())
        {
            hasConfiguration = RetailPeriodicDiscount::existsShippingDiscounts();

            cache.insert(shippingDiscountConfigurationScope, ['shippingDiscounts'], [hasConfiguration]);
        }
        else
        {
            [hasConfiguration] = packedResult;
        }

        return hasConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailShippingThresholdDiscounts_Post_insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear shipping discount feature flag cache.
    /// </summary>
    /// <param name = "_sender">The <c>RetailShippingThresholdDiscounts</c> record.</param>
    /// <param name = "_args">The event arguments.</param>
    [DataEventHandler(tableStr(RetailShippingThresholdDiscounts), DataEventType::Inserting)]
    public static void RetailShippingThresholdDiscounts_Post_insert(Common senter, DataEventArgs args)
    {
        RetailShippingDiscountFeature::clearExistsRetailShippingThresholdDiscountsScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailShippingThresholdDiscounts_Post_update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear shipping discount feature flag cache.
    /// </summary>
    /// <param name = "_sender">The <c>RetailShippingThresholdDiscounts</c> record.</param>
    /// <param name = "_args">The event arguments.</param>
    [DataEventHandler(tableStr(RetailShippingThresholdDiscounts), DataEventType::Updating)]
    public static void RetailShippingThresholdDiscounts_Post_update(Common senter, DataEventArgs args)
    {
        RetailShippingDiscountFeature::clearExistsRetailShippingThresholdDiscountsScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailShippingThresholdDiscounts_Post_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear shipping discount feature flag cache.
    /// </summary>
    /// <param name = "_sender">The <c>RetailShippingThresholdDiscounts</c> record.</param>
    /// <param name = "_args">The event arguments.</param>
    [DataEventHandler(tableStr(RetailShippingThresholdDiscounts), DataEventType::Deleting)]
    public static void RetailShippingThresholdDiscounts_Post_delete(Common senter, DataEventArgs args)
    {
        RetailShippingDiscountFeature::clearExistsRetailShippingThresholdDiscountsScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExistsRetailShippingThresholdDiscountsScope</Name>
				<Source><![CDATA[
    private static void clearExistsRetailShippingThresholdDiscountsScope()
    {
        SysGlobalObjectCache cache = new SysGlobalObjectCache();

        cache.clear(shippingDiscountConfigurationScope);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>