<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransExplode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransExplode
{
    // Parameters

    ReqTrans        reqTransCaller;
    ReqExplodeType  reqExplodeType;

    // Internal

    Set             setTopRecId;        // ReqTrans.recId
    Map             mapDerived;
    Map             mapReqTrans;
    Map             mapReqTransPO;
    Map             mapParent;
    Map             mapReqTransSettled;

    boolean         intercompany;
    boolean         skipDerived;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReqTrans</Name>
				<Source><![CDATA[
    protected void addReqTrans(
        ReqTrans    _reqTrans,
        Set         _set
        )
    {
        ReqPO reqPO;

        _set.add(_reqTrans.RecId);

        mapReqTrans.insert(_reqTrans.RecId,_reqTrans);

        if (_reqTrans.isPlannedOrder())
        {
            reqPO = _reqTrans.reqPo();
        }

        mapReqTransPO.insert(_reqTrans.RecId, reqPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDerived</Name>
				<Source><![CDATA[
    protected void insertDerived(Set _setParent,recId _recIdParent)
    {
        SetIterator     si = new SetIterator(_setParent);
        Set             setChild;
        ReqTrans        reqTrans;
        ReqTrans        reqTransDerived;

        si.begin();
        while (si.more())
        {
            if (mapReqTrans.exists(si.value()))
            {
                reqTrans = mapReqTrans.lookup(si.value());
            }
            else
            {
                reqTrans = null;
            }

            if (_recIdParent && ! mapParent.exists(reqTrans.RecId))
            {
                mapParent.insert(reqTrans.RecId,_recIdParent);
            }

            if (! mapDerived.exists(reqTrans.RecId))
            {
                // Since the records in the Set can have different company it must be ensured that the right one is used
                changeCompany(
                    reqTrans.company()
                    )
                {
                    if (reqExplodeType == ReqExplodeType::Down)
                    {
                        reqTransDerived = reqTrans.selectDerived(false, intercompany);
                    }
                    else if (reqExplodeType == ReqExplodeType::Up)
                    {
                        reqTransDerived = reqTrans.selectParent(false, intercompany);
                    }

                    setChild = new Set(typeName2Type(extendedtypestr(recId)));

                    while (reqTransDerived.RecId)
                    {
                        // The derived records are not necessarily in the same company so it must be ensure that the right one is used
                        changeCompany(
                            reqTransDerived.company()
                            )
                        {
                            if (   (reqExplodeType == ReqExplodeType::Down && reqTransDerived.Qty > 0)
                                || (reqExplodeType == ReqExplodeType::Up   && reqTransDerived.Qty < 0))
                            {
                                this.addReqTrans(reqTransDerived,setChild);
                            }
                            else
                            {
                                this.insertReqTransSettled(reqTransDerived,setChild);
                            }
                        }
                        next reqTransDerived;
                    }
                    this.insertMapDerived(reqTrans,setChild);
                }
            }
            si.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDerivedCo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert the co products receipts for a planned batch order.
    /// </summary>
    /// <param name="_setParent">
    ///     The set of planned order record ids to insert the co-products for.
    /// </param>
    protected void insertDerivedCo(Set _setParent)
    {
        SetIterator     si = new SetIterator(_setParent);
        Set             setChild = new Set(Types::Int64);
        ReqTrans        reqTrans;
        ReqTrans        reqTransCo;
        ReqPO           reqPO;

        si.begin();
        while (si.more())
        {
            if (mapReqTrans.exists(si.value()))
            {
                reqTrans = mapReqTrans.lookup(si.value());
                changeCompany(reqTrans.company())
                {
                    while select reqTransCo
                            where  reqTransCo.PlanVersion       == reqTrans.PlanVersion
                                && reqTransCo.RefId             == reqTrans.RefId
                                && reqTransCo.RefType           == ReqRefType::PmfCoProduct
                            && ((reqTransCo.InventTransOrigin == 0 && reqTrans.RefType == ReqRefType::PmfPlannedProdBatch)
                                || reqTrans.RefType == ReqRefType::Production)
                    {
                        if (!mapReqTrans.exists(reqTransCo.RecId))
                        {
                            mapReqTrans.insert(reqTransCo.RecId, reqTransCo);
                            if (reqTransCo.isPlannedOrder())
                            {
                                reqPO = reqTransCo.reqPo();
                            }
                            mapReqTransPO.insert(reqTransCo.RecId, reqPO);
                        }
                        if (!_setParent.in(reqTransCo.RecId) && !setChild.in(reqTransCo.RecId))
                        {
                            setChild.add(reqTransCo.RecId);
                        }
                    }
                }
            }
            si.next();
        }
        si = new SetIterator(setChild);
        si.begin();
        while (si.more())
        {
            _setParent.add(si.value());
            si.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMapDerived</Name>
				<Source><![CDATA[
    protected void insertMapDerived(
        ReqTrans    _reqTrans,
        Set         _set
        )
    {
        if (_set && _set.elements())
        {
            mapDerived.insert(_reqTrans.RecId,_set.pack());
            this.insertDerived(_set,_reqTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReqTransSettled</Name>
				<Source><![CDATA[
    protected void insertReqTransSettled(
        ReqTrans    _reqTrans,
        Set         _set
        )
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqTransSettled;
        Set         reqTransSet;

        ReqTrans    baseReqTrans;
        void resolveReqTrans()
        {
            reqTransCov     = baseReqTrans.selectCovJoinTrans();
            reqTransSettled =  reqTransCov.joinChild();

            while (reqTransCov.RecId)
            {
                if (reqTransCov.Qty)
                {
                    this.addReqTrans(reqTransSettled,_set);

                    if (mapReqTransSettled.exists(reqTransSettled.RecId))
                    {
                        reqTransSet = mapReqTransSettled.lookup(reqTransSettled.RecId);
                        reqTransSet.add(_reqTrans.RecId);
                    }
                    else
                    {
                        reqTransSet = new Set(typeName2Type(extendedtypestr(recId)));
                        reqTransSet.add(_reqTrans.RecId);
                        mapReqTransSettled.insert(reqTransSettled.RecId, reqTransSet);
                    }
                }
                next reqTransCov;
            }
        }

        if (this.parmReqExplodeType() == ReqExplodeType::Up
            && (_reqTrans.RefType       == ReqRefType::PmfPlannedProdBatch
                || _reqTrans.RefType    == ReqRefType::PmfCoProduct))
        {
            while select baseReqTrans
                where  baseReqTrans.PlanVersion == _reqTrans.PlanVersion
                    && (baseReqTrans.RefType    == ReqRefType::PmfPlannedProdBatch
                        || baseReqTrans.RefType == ReqRefType::PmfCoProduct)
                    && baseReqTrans.RefId       == _reqTrans.RefId
                    && baseReqTrans.InventTransOrigin   == 0
            {
                resolveReqTrans();
            }
        }
        else
        {
            baseReqTrans = _reqTrans;
            resolveReqTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapDerived</Name>
				<Source><![CDATA[
    public container packMapDerived()
    {
        return mapDerived ? mapDerived.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapParent</Name>
				<Source><![CDATA[
    public container packMapParent()
    {
        return mapParent ? mapParent.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapReqTrans</Name>
				<Source><![CDATA[
    public container packMapReqTrans()
    {
        return mapReqTrans ? mapReqTrans.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapReqTransPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>mapReqTransPO</c> variable packed as a container.
    /// </summary>
    /// <returns>
    ///     A container with the packed map or an empty container if the map has not been calculated.
    /// </returns>
    public container packMapReqTransPO()
    {
        return mapReqTransPO ? mapReqTransPO.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapReqTransSettled</Name>
				<Source><![CDATA[
    public container packMapReqTransSettled()
    {
        return mapReqTransSettled ? mapReqTransSettled.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSetTopRecId</Name>
				<Source><![CDATA[
    public container packSetTopRecId()
    {
        return setTopRecId ? setTopRecId.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompany</Name>
				<Source><![CDATA[
    public boolean parmIntercompany(boolean _intercompany = intercompany)
    {
        intercompany = _intercompany;
        return intercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipDerived</Name>
				<Source><![CDATA[
    internal boolean parmSkipDerived(boolean _skipDerived = skipDerived)
    {
        skipDerived = skipDerived;
        return skipDerived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqExplodeType</Name>
				<Source><![CDATA[
    public ReqExplodeType parmReqExplodeType(ReqExplodeType _reqExplodeType = reqExplodeType)
    {
        reqExplodeType = _reqExplodeType;
        return reqExplodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqTrans</Name>
				<Source><![CDATA[
    public ReqTrans parmReqTrans(ReqTrans _reqTrans = reqTransCaller)
    {
        reqTransCaller = _reqTrans;
        return reqTransCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBatchReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the reqTrans record associated with the batch planned order
    /// </summary>
    /// <param name="_reqTrans">The reqTrans of the co-product</param>
    /// <returns>returns ReqTrans</returns>
    private ReqTrans pmfBatchReqTrans(ReqTrans _reqTrans)
    {
        ReqPO reqPO;
        ReqTrans reqPOTrans;

        reqPO = ReqPO::find(_reqTrans.PlanVersion, _reqTrans.RefId);
        reqPOTrans = reqPO.reqTrans();

        return reqPOTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ReqTrans    reqTrans;

        setTopRecId         = new Set(typeName2Type(extendedtypestr(recId)));
        mapDerived          = new Map(typeName2Type(extendedtypestr(recId)), Types::Container);
        mapReqTrans         = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        mapReqTransPO       = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        mapParent           = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));
        mapReqTransSettled  = new Map(typeName2Type(extendedtypestr(recId)), Types::Class);

        if (reqTransCaller.RecId)
        {
            reqTrans = ReqTrans::findRecId(reqTransCaller.RecId);
            this.includeReqTrans(reqTrans, setTopRecId);

            if (reqTrans.InventTransOrigin)
            {
                ReqTrans reqTransSameOrigin;
                while select reqTransSameOrigin
                    where reqTransSameOrigin.PlanVersion == reqTrans.PlanVersion
                        && reqTransSameOrigin.RefType == reqTrans.RefType
                        && reqTransSameOrigin.RefId == reqTrans.RefId
                        && reqTransSameOrigin.InventTransOrigin == reqTrans.InventTransOrigin
                        && reqTransSameOrigin.RecId != reqTrans.RecId
                {
                    this.includeReqTrans(reqTransSameOrigin, setTopRecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeReqTrans</Name>
				<Source><![CDATA[
    private void includeReqTrans(ReqTrans _reqTrans, Set _setTopRecId)
    {
        if (! _reqTrans.RecId)
        {
            throw error("@SYS5149");
        }

        if (!_reqTrans.Qty)
        {
            throw error("@SYS16660");
        }

        if ((reqExplodeType == ReqExplodeType::Down  && _reqTrans.Qty > 0) ||
                (reqExplodeType == ReqExplodeType::Up    && _reqTrans.Qty < 0))
        {
            this.addReqTrans(_reqTrans,_setTopRecId);
        }
        else
        {
            this.insertReqTransSettled(_reqTrans,_setTopRecId);
        }

        if(!this.parmSkipDerived())
        {
            this.insertDerived(_setTopRecId, 0);
        }
        
        if (reqExplodeType == ReqExplodeType::Down)
        {
            this.insertDerivedCo(_setTopRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static private ReqTransExplode construct()
    {
        return new ReqTransExplode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqTrans</Name>
				<Source><![CDATA[
    public static ReqTransExplode newReqTrans(
        ReqTrans        _reqTrans,
        ReqExplodeType  _reqExplodeType,
        boolean         _interCompany
        )
    {
        ReqTransExplode reqTransExplode = ReqTransExplode::construct();
        reqTransExplode.parmReqExplodeType(_reqExplodeType);
        reqTransExplode.parmReqTrans(_reqTrans);
        reqTransExplode.parmInterCompany(_interCompany);

        reqTransExplode.init();

        return reqTransExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRunReqTrans</Name>
				<Source><![CDATA[
    static container packRunReqTrans(
        ReqTrans        _reqTransCaller,
        ReqExplodeType  _reqExplodeType,
        boolean         _interCompany = false
        )
    {
        ReqTransExplode reqTransExplode = ReqTransExplode::newReqTrans(_reqTransCaller,_reqExplodeType,_interCompany);

        reqTransExplode.run();

        return [reqTransExplode.packSetTopRecId(),
                reqTransExplode.packMapDerived(),
                reqTransExplode.packMapReqTrans(),
                reqTransExplode.packMapReqTransPO(),
                reqTransExplode.packMapParent(),
                reqTransExplode.packMapReqTransSettled()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRunReqTransSkipDerivedRecords</Name>
				<Source><![CDATA[
    internal static container packRunReqTransSkipDerivedRecords(
        ReqTrans        _reqTransCaller,
        ReqExplodeType  _reqExplodeType,
        boolean         _interCompany = false,
        boolean         _skipDerivedRecords = false
        )
    {
        ReqTransExplode reqTransExplode = ReqTransExplode::newReqTrans(_reqTransCaller,_reqExplodeType,_interCompany);
        reqTransExplode.parmSkipDerived(_skipDerivedRecords);

        reqTransExplode.run();

        return [reqTransExplode.packSetTopRecId(),
                reqTransExplode.packMapDerived(),
                reqTransExplode.packMapReqTrans(),
                reqTransExplode.packMapReqTransPO(),
                reqTransExplode.packMapParent(),
                reqTransExplode.packMapReqTransSettled()];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>