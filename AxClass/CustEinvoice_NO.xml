<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEinvoice_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustEinvoice_NO
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
        static void postTrans()
    {
        CustEinvoiceIntegration       integration;
        CustEinvoiceIntegrationTrans  integrationTrans;
        CustEinvoiceIntegrationStatus origStatus;
        boolean                     statusChange;
        ;

        if (Box::yesNo("@SYS119531",DialogButton::No) == DialogButton::Yes)
        {
            ttsbegin;
            while select forupdate integrationTrans
                index hint PostedOkIdx
                where integrationTrans.Posted   == NoYes::No
                   && integrationTrans.Accepted == NoYes::Yes
            join forupdate integration
                where integration.CustEinvoiceIntegrationTypeTable == integrationTrans.CustEinvoiceIntegrationTypeTable
                   && integration.Ref                              == integrationTrans.Ref
            {
                origStatus = integration.Status;
                switch (integrationTrans.Action)
                {
                    case CustEinvoiceIntegrationAction::Add :
                            if (integrationTrans.Sent)
                            {
                                integration.Status      = integrationTrans.NewStatus;
                                integrationTrans.Posted = NoYes::Yes;
                            }
                            else
                            {
                                throw error("@SYS338941");
                            }
                        break;
                    case CustEinvoiceIntegrationAction::Change :
                            if (integrationTrans.Sent)  //only Pending
                            {
                                integration.Status      = integrationTrans.NewStatus ? integrationTrans.NewStatus : integration.Status;
                                integrationTrans.Posted = NoYes::Yes;
                            }
                            else
                            {
                                if ((integrationTrans.Sent   && integrationTrans.Status == CustEinvoiceIntegrationStatus::Pending) ||  //only Pending
                                    (integrationTrans.Status != CustEinvoiceIntegrationStatus::Pending &&
                                     integrationTrans.Status != CustEinvoiceIntegrationStatus::None))
                                {
                                    integration.Status      = integrationTrans.NewStatus ? integrationTrans.NewStatus : integration.Status;
                                    integrationTrans.Posted = NoYes::Yes;
                                }
                            }
                        break;
                    case CustEinvoiceIntegrationAction::Delete :
                            integration.Status      = integrationTrans.NewStatus ? integrationTrans.NewStatus : integration.Status;
                            integrationTrans.Posted = NoYes::Yes;
                        break;
                }

                integration.ExtRef = integrationTrans.ExtRef;
                statusChange = (integration.Status != origStatus);
                integrationTrans.update();
                integration.update();

                CustEinvoice_NO::updateCust(integration,integrationTrans,statusChange);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCust</Name>
				<Source><![CDATA[
        static void updateCust(CustEinvoiceIntegration _integration, CustEinvoiceIntegrationTrans _integrationTrans, boolean _statusChange)
    {
        DictTable                               dictTable;
        DictField                               dictField;
        Common                                  common;
        fieldId                                 fieldId;
        CustPaymMode                            fromPaymMode;
        CustPaymSpec                            fromPaymSpec;
        CustEinvoiceIntegrationPaymModeChg      paymModeChange;
        fieldId                                 paymModeFieldId;
        fieldId                                 paymSpecFieldId;
        fieldId                                 nameFieldId;
        fieldId                                 addressFieldId;
        fieldId                                 zipCodeFieldId;
        fieldId                                 countryFieldId;
        fieldId                                 phoneFieldId;
        fieldId                                 eMailFieldId;

        ;

        if (_integration.RecId && _integration.IntTableId && _integration.IntRecId)
        {
            dictTable   = new DictTable(_integration.IntTableId);
            common      = dictTable.makeRecord();

            ttsbegin;
            select firstonly forupdate common
                where common.RecId   == _integration.IntRecId;

            if (common.RecId)
            {
                for (fieldId=1;fieldId<=dictTable.fieldCnt();fieldId++)
                {
                    dictField = null;
                    dictField = new DictField(common.TableId,fieldId);

                    if (dictField)
                    {
                        if (dictField.name() == literalstr('PaymMode'))
                        {
                            paymModeFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('PaymSpec'))
                        {
                            paymSpecFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('Name'))
                        {
                            nameFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('Address'))
                        {
                            addressFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('ZipCode'))
                        {
                            zipCodeFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('CountryRegionId'))
                        {
                            countryFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('Phone'))
                        {
                            phoneFieldId = fieldId;
                        }
                        if (dictField.name() == literalstr('eMail'))
                        {
                            eMailFieldId = fieldId;
                        }

    //                    if (paymModeFieldId && paymSpecFieldId)
    //                    {
    //                        break;
    //                    }
                    }
                }

                fromPaymMode = common.(paymModeFieldId);
                fromPaymSpec = common.(paymSpecFieldId);

                paymModeChange = CustEinvoiceIntegrationPaymModeChg::findPri(_integration.CustEinvoiceIntegrationTypeTable,
                                                                             _integration.Status,
                                                                             fromPaymMode,
                                                                             fromPaymSpec);
                if (paymModeChange && _statusChange)
                {
                    common.(paymModeFieldId) = paymModeChange.ToPaymMode;
                    common.(paymSpecFieldId) = paymModeChange.ToPaymSpec;
                }
                if (nameFieldId &&
                    (_integrationTrans.RefInfo1Transfer ||
                     _integrationTrans.RefInfo2Transfer)
                   )
                {
                    common.(nameFieldId) = _integrationTrans.RefInfo1 + ' ' + _integrationTrans.RefInfo2;
                }
                if (addressFieldId && zipCodeFieldId &&
                    (_integrationTrans.RefInfo3Transfer ||
                     _integrationTrans.RefInfo4Transfer ||
                     _integrationTrans.RefInfo5Transfer ||
                     _integrationTrans.RefInfo6Transfer)
                   )
                {
                    if (LogisticsAddressZipCode::findZipCodeCity(_integrationTrans.RefInfo5, _integrationTrans.RefInfo6).RecId != 0)
                    {
                        common.(addressFieldId) = (_integrationTrans.RefInfo3 ? (_integrationTrans.RefInfo3 + '\r\n') : '') +
                                                  (_integrationTrans.RefInfo4 ? (_integrationTrans.RefInfo4 + '\r\n') : '') +
                                                  (_integrationTrans.RefInfo5 + ' ' + _integrationTrans.RefInfo6);
                        common.(zipCodeFieldId) = _integrationTrans.RefInfo5;
                    }
                    else
                    {
                        info(strfmt("@SYS119590",_integrationTrans.RefInfo5, _integrationTrans.RefInfo6));
                    }
                }
                if (countryFieldId &&
                    _integrationTrans.RefInfo7Transfer)
                {
                    if (LogisticsAddressCountryRegion::checkExist(strupr(_integrationTrans.RefInfo7)))
                    {
                        common.(countryFieldId) = strupr(_integrationTrans.RefInfo7);
                    }
                }
                if (phoneFieldId &&
                    _integrationTrans.RefInfo8Transfer)
                {
                    common.(phoneFieldId) = _integrationTrans.RefInfo8;
                }
                if (eMailFieldId &&
                    _integrationTrans.RefInfo9Transfer)
                {
                    common.(eMailFieldId) = _integrationTrans.RefInfo9;
                }

                common.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>