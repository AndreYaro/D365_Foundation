<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_ProdCoBy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for Prod Co/By movement
/// </summary>
[InventMovementFactoryAttribute(tableStr(PmfProdCoBy))]
class InventMov_ProdCoBy extends InventMovement
{
    PmfProdCoBy  prodCoBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger account for the co/by receipt
    /// </summary>
    /// <returns>
    /// returns ledger account
    /// </returns>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (prodCoBy.prodTable().ProdPostingType   == ProdPostingType::ProdGroup)
            {
                cacheAccountBalanceSheet = ProdGroup::find(prodCoBy.prodTable().ProdGroupId).ReceiptLedgerDimension;
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceipt));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger account for the co/by receipt offset
    /// </summary>
    /// <returns>
    /// returns ledger account
    /// </returns>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (prodCoBy.prodTable().isProjMethodConsumed())
            {
                cacheAccountOperations = this.accountBalanceSheet();
            }
            else
            {
                if (prodCoBy.prodTable().ProdPostingType   == ProdPostingType::ProdGroup)
                {
                    cacheAccountOperations = ProdGroup::find(prodCoBy.prodTable().ProdGroupId).ReceiptOffsetLedgerDimension;
                }
                else
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceiptOffsetAccount));
                }
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger account for the co/by report as finished
    /// </summary>
    /// <returns>
    /// returns ledger account
    /// </returns>
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        if (! cacheAccountPhysical)
        {
            if (prodCoBy.prodTable().ProdPostingType == ProdPostingType::ProdGroup)
            {
                cacheAccountPhysical = ProdGroup::find(prodCoBy.prodTable().ProdGroupId).ReportLedgerDimension;
            }
            else
            {
                cacheAccountPhysical = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdReportFinished));
            }
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">An inventory account type.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = this.createInventPostingItemLedgerDimensionParameters(_inventAccountType);

        searchParameters.ItemId = prodCoBy.prodTable().ItemId;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method adds remain physical
    /// </summary>
    /// <param name="_inventQty">
    /// Quantity to add to remain physical
    /// </param>
    public void addRemainPhysical(InventQty _inventQty)
    {
        prodCoBy.RemainCoByPhysical += _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId &&  prodCoBy.RecId)
        {
            InventTransOriginPmfProdCoBy::writeOriginOwnerRelationship(prodCoBy.DataAreaId, prodCoBy.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator and the corresponding owner.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (prodCoBy.RecId)
        {
            InventTransOriginPmfProdCoBy::deleteOwnerRelationship(prodCoBy.DataAreaId, prodCoBy.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the inventDimid.
    /// </summary>
    /// <returns>
    /// returns inventDimId
    /// </returns>
    public InventDimId inventDimId()
    {
        return prodCoBy.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the ItemId.
    /// </summary>
    /// <returns>
    /// returns ItemId
    ///</returns>
    public ItemId itemId()
    {
        return prodCoBy.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    /// 0 if entire movement is not marked; otherwise, the ID of the transaction origin marked with.
    /// </returns>
    /// <remarks>
    /// renamed from method 'inventRefTransId'
    /// </remarks>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(prodCoBy.InventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns flag if the movement needs to be post physically.
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean mustBeBookedPhysically()
    {
        if (this.inventModelType().mustAlwaysBeBookedPhysically()
            || prodCoBy.prodTable().prodParametersDim().PostReportedFinished)
        {
            return super();
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns flag if the remain needs to be tracked.
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBatchAttribValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the movement should update the batch attributes on the related quality orders.
    /// </summary>
    /// <returns>
    /// true if attributes should be updated; otherwise, false.
    /// </returns>
    public boolean mustUpdateBatchAttribValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTransFields</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTransFields(InventMovement _movement_orig)
    {
        InventTrans  inventTrans;
        TransDate    newDateExpected = this.transDate() ? this.transDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select firstOnly RecId from inventTrans
            where  inventTrans.InventTransOrigin == this.inventTransOriginId()
                && inventTrans.DateExpected      != newDateExpected;

        if (inventTrans.RecId)
        {
            return true;
        }

        boolean ret = super(_movement_orig);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substantiates the object.
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// Production Co/By
    /// </param>
    /// <param name="_inventType">
    /// Inventory type
    /// </param>
    protected void new(
        PmfProdCoBy  _pmfProdCoBy,
        InventType   _inventType = PmfProdCoByType::construct(_pmfProdCoBy))
    {
        prodCoBy = _pmfProdCoBy;

        super(prodCoBy, _inventType);

        this.parmBurdenItem(prodCoBy.ProductType == PmfProductType::By_Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns original movement for prod co/by
    /// </summary>
    /// <returns>
    /// returns original movement
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        return prodCoBy.RecId
            ? new InventMov_ProdCoBy(prodCoBy.orig(), inventType)
            : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger account for the co/by offset physical
    /// </summary>
    /// <returns>
    /// Ledger account.
    /// </returns>
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (! cacheOffsetAccountPhysical)
        {
            if (prodCoBy.prodTable().ProdPostingType == ProdPostingType::ProdGroup)
            {
                cacheOffsetAccountPhysical = ProdGroup::find(prodCoBy.prodTable().ProdGroupId).ReportOffsetLedgerDimension;
            }
            else
            {
                cacheOffsetAccountPhysical = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdReportFinishedOffsetAccount));
            }
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method adds CW remain physical
    /// </summary>
    /// <param name="_qty">
    /// CW quantity to add to remain physical
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        prodCoBy.PdsCWRemainPhysical += _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns CW remain physical
    /// </summary>
    /// <returns>
    /// returns CW quantity
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return prodCoBy.PdsCWRemainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method set CW remain physical
    /// </summary>
    /// <param name="_qty">
    /// CW quantity to set remain physical
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        prodCoBy.PdsCWRemainPhysical = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets CW transaction quantity
    /// </summary>
    /// <param name="_qty">
    /// CW quantity
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _qty)
    {
        prodCoBy.PdsCWInventCalc = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns CW transaction quantity.
    /// </summary>
    /// <returns>
    /// returns CW quantity
    /// </returns>
    public InventQty pdsCWTransQty()
    {
        return prodCoBy.PdsCWInventCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns CW UnitId
    /// </summary>
    /// <returns>
    /// returns CW unit id
    /// </returns>
    public PdsCWUnitId pdsCWUnitId()
    {
        return prodCoBy.pdsCWUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger post type for the production receipt
    /// </summary>
    /// <returns>
    /// returns ledger posting type
    /// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns posting type for the co/by report as finished offset
    /// </summary>
    /// <returns>
    /// returns ledger account
    /// </returns>
    public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::ProdReportFinishedOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger posting type for receipt offset
    /// </summary>
    /// <returns>
    /// returns ledger account
    /// </returns>
    public LedgerPostingType postingOperations()
    {
        if (prodCoBy.prodTable().isProjMethodConsumed())
        {
            return this.postingBalanceSheet();
        }

        return LedgerPostingType::ProdReceiptOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns ledger post type for the physical
    /// </summary>
    /// <returns>
    /// returns ledger posting type
    /// </returns>
    public LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::ProdReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns remain physical
    /// </summary>
    /// <returns>
    /// returns physical quantity
    /// </returns>
    public InventQty remainPhysical()
    {
        return prodCoBy.RemainCoByPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialProdDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the manufacturing date for the co/by product.
    /// </summary>
    /// <param name="_inventTrans">
    /// A inventory transaction record.
    /// </param>
    /// <returns>
    /// A manufacturing date for the co/by product.
    /// </returns>
    public InventSerialProdDate serialProdDate(InventTrans _inventTrans = null)
    {
        InventTransOriginPmfProdCoBy inventTransOriginPmfProdCoBy;

        if (!_inventTrans)
        {
            select firstonly TableId
                from inventTransOriginPmfProdCoBy
                where  inventTransOriginPmfProdCoBy.PmfProdCoByDataAreaId == prodCoBy.DataAreaId
                    && inventTransOriginPmfProdCoBy.PmfProdCoByRecId      == prodCoBy.RecId
                join DatePhysical, DateInvent
                from _inventTrans
                where  _inventTrans.InventTransOrigin                   == inventTransOriginPmfProdCoBy.InventTransOrigin
                    && _inventTrans.InventDimId                         == prodCoBy.InventDimId
                    && (_inventTrans.DatePhysical
                        || _inventTrans.DateInvent);
        }

        if (_inventTrans.DatePhysical)
        {
            return _inventTrans.DatePhysical;
        }

        if (_inventTrans.DateInvent)
        {
            return _inventTrans.DateInvent;
        }

        return prodCoBy.prodTable().transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the inventDimid.
    /// </summary>
    /// <param name="_dimId">
    /// Inventory dimension id
    /// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        prodCoBy.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory reference fields and returns true if they were set.
    /// </summary>
    /// <param name="_inventRefType">
    /// An inventory reference type.
    /// </param>
    /// <param name="_inventRefId">
    /// An inventory reference id.
    /// </param>
    /// <param name="_markingRefInventTransOrigin">
    /// A related inventory transaction originator.
    /// </param>
    /// <returns>
    /// Returns true if the fields were set; otherwise false.
    /// </returns>
    public boolean setInventRefFields(
        InventRefType       _inventRefType,
        InventRefId         _inventRefId,
        InventTransOriginId _markingRefInventTransOrigin
        )
    {
        InventTransId   markingRefInventTransId = InventTransOrigin::find(_markingRefInventTransOrigin).InventTransId;

        if (prodCoBy.prodTable().status().isBefore(ProdStatus::Completed))
        {
            if (_inventRefType             != prodCoBy.InventRefType
                || _inventRefId            != prodCoBy.InventRefId
                || markingRefInventTransId != prodCoBy.InventRefTransId)
            {
                prodCoBy.InventRefType       = _inventRefType;
                prodCoBy.InventRefId         = _inventRefId;

                prodCoBy.InventRefTransId    = markingRefInventTransId;
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets remain physical for the co/by
    /// </summary>
    /// <param name="_inventQty">
    /// Inventory quantity
    /// </param>
    public void setRemainPhysical(InventQty _inventQty)
    {
        prodCoBy.RemainCoByPhysical = _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets estimated quantity for the co/by
    /// </summary>
    /// <param name="_qtyInvent">
    /// Inventory quantity
    /// </param>
    public void setTransQty(InventQty _qtyInvent)
    {
        prodCoBy.QtyCoByCalc = _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns transaction date for co/by
    /// </summary>
    /// <returns>
    /// returns transaction date
    /// </returns>
    public TransDate transDate()
    {
        return prodCoBy.prodTable().transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns inventory transaction id for co/by
    /// </summary>
    /// <returns>
    /// returns inventory transaction id
    /// </returns>
    public InventTransId transId()
    {
        return prodCoBy.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns sub BOM id
    /// </summary>
    /// <returns>
    /// returns BOM id
    /// </returns>
    public ItemBOMId transItemBOMId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns sub route id
    /// </summary>
    /// <returns>
    /// returns route id
    /// </returns>
    public ItemRouteId transItemRouteId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns transaction quantity - estimated quantity
    /// </summary>
    /// <returns>
    /// returns quantity
    /// </returns>
    public InventQty transQty()
    {
        return prodCoBy.QtyCoByCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns transaction reference Id - Batch number
    /// </summary>
    /// <returns>
    /// returns reference id
    /// </returns>
    public InventTransRefId transRefId()
    {
        return prodCoBy.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns transaction sign
    /// </summary>
    /// <returns>
    /// returns sign
    /// </returns>
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns transaction type
    /// </summary>
    /// <returns>
    /// returns trans type
    /// </returns>
    public InventTransType transType()
    {
        return InventTransType::PmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDoBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the buffer
    /// </summary>
    public void updateDoBuffer()
    {
        ttsbegin;

        buffer.selectForUpdate(true);

        buffer.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// Batch Co/By
    /// </param>
    /// <param name="_inventType">
    /// Inventory type
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static InventMov_ProdCoBy construct(
        PmfProdCoBy  _pmfProdCoBy,
        InventType   _inventType = PmfProdCoByType::construct(_pmfProdCoBy))
    {
        return new InventMov_ProdCoBy(
            _pmfProdCoBy,
            _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the estimated physical value for an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The <c>inventTrans</c> record for which to get the estimated physical value.
    /// </param>
    /// <param name="_inventOnhand">
    ///     An <c>InventOnHand</c> object.
    /// </param>
    /// <param name="_updateNow">
    ///     An <c>InventUpdate</c> object.
    /// </param>
    /// <returns>
    ///     The estimated physical value for the inventory transaction.
    /// </returns>
    protected CostAmount estimatedPhysicalValue(InventTrans _inventTrans, InventOnHand _inventOnhand, InventUpdate _updateNow)
    {
        ProdTable prodTable = prodCoBy.prodTable();
        ProdParametersDim prodParametersDim = prodTable.prodParametersDim();

        if (_inventTrans.Qty > 0 && !this.inventModelGroup().inventModelType().stdCostBased() && prodParametersDim.SpecifyCalc && prodParametersDim.PhyValueUseCalcPrice)
        {
            CostAmount estimatedValue = CurrencyExchangeHelper::amount(PmfCoByProdCalcTrans::findIdRef(prodTable.TableId, prodTable.RecId, prodCoBy.RecId).costPricePcs() * _inventTrans.Qty);
            if (estimatedValue)
            {
                return estimatedValue;
            }
        }

        return super(_inventTrans, _inventOnhand, _updateNow);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>