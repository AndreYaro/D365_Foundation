<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMarkFirmProcessedOrdersData</Name>
	<SourceCode>
		<Declaration><![CDATA[
 public class ReqTransPoMarkFirmProcessedOrdersData
{
    private ReqFirmingRunId firmingRunId; // currently firmingRunId is only set and needed when running auto-firming

    // Purchase orders
    private Map groupingKeyToPurchId;
    private Map purchIdToGroupingKey;

    private Map purchIdToBuyerGroupId;
    private Set purchIdsToSubmitToWorkflow;
    private Set purchIdsToAutoApprove;
    private Set purchIdsToCrossDock;
    private Map purchIdToInventLocationId;
    private Map purchIdToReplenishmentLocation;

    private Set uncommittedPurchaseOrders;

    // Transfer orders
    private Map groupingKeyToTransferId;
    private Set uncommittedTransferOrdersGroupingKeys;

    // Transfer journals
    private Map groupingKeyToJournalId;
    private Set uncommittedTransferJournalsGroupingKeys;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static internal ReqTransPoMarkFirmProcessedOrdersData construct()
    {
        return new ReqTransPoMarkFirmProcessedOrdersData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    internal void reset()
    {
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();

        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirmingRunId</Name>
				<Source><![CDATA[
    public ReqFirmingRunId parmFirmingRunId()
    {
        return firmingRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calls the <c>initInternalMaps</c> method
    /// </summary>
    protected void initialize()
    {
        this.initInternalMaps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInternalMaps</Name>
				<Source><![CDATA[
    private void initInternalMaps()
    {
        //Purchase orders
        purchIdToGroupingKey = new Map(Types::String, Types::String);
        groupingKeyToPurchId = new Map(Types::String, Types::String);

        purchIdsToSubmitToWorkflow = new Set(Types::String);
        purchIdsToAutoApprove = new Set(Types::String);
        purchIdToBuyerGroupId = new Map(Types::String, Types::String);
        purchIdsToCrossDock = new Set(Types::String);
        purchIdToInventLocationId = new Map(Types::String, Types::String);
        purchIdToReplenishmentLocation = new Map(Types::String, Types::String);

        uncommittedPurchaseOrders = new Set(Types::String);

        // Transfer orders
        groupingKeyToTransferId = new Map(Types::String, Types::String);
        uncommittedTransferOrdersGroupingKeys = new Set(Types::String);

        // Transfer journals
        groupingKeyToJournalId = new Map(Types::String, Types::String);
        uncommittedTransferJournalsGroupingKeys = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRollbackPoint</Name>
				<Source><![CDATA[
   internal void saveRollbackPoint()
    {
        if ( this.mustSaveRollbackPoint())
        {
            uncommittedPurchaseOrders = new Set(Types::String);
            uncommittedTransferOrdersGroupingKeys = new Set(Types::String);
            uncommittedTransferJournalsGroupingKeys = new Set(Types::String);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSaveRollbackPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Rollback Point must be saved.
    /// </summary>
    /// <returns> Returns true if the Rollback Point must be saved. </returns>
    protected boolean mustSaveRollbackPoint()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollback</Name>
				<Source><![CDATA[
    internal void rollback()
    {
        if (this.mustRollback())
        {
            this.rollbackUncommittedPurchaseOrders();
            this.rollbackUncommittedTransferTable();
            this.rollbackUncommittedJournalTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRollback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if uncommitted records must be rolled back.
    /// </summary>
    /// <returns> Returns true if uncommitted records must be rolled back. </returns> 
    protected boolean mustRollback()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollbackUncommittedPurchaseOrders</Name>
				<Source><![CDATA[
    private void rollbackUncommittedPurchaseOrders()
    {
        var uncommittedPurchaseOrdersEnumerator = uncommittedPurchaseOrders.getEnumerator();
        while (uncommittedPurchaseOrdersEnumerator.moveNext())
        {
            PurchId purchId = uncommittedPurchaseOrdersEnumerator.current();
            purchIdsToSubmitToWorkflow.remove(purchId);
            purchIdsToAutoApprove.remove(purchId);
            purchIdsToCrossDock.remove(purchId);
            groupingKeyToPurchId.remove(purchIdToGroupingKey.lookup(purchId));
            purchIdToGroupingKey.remove(purchId);
            purchIdToInventLocationId.remove(purchId);
            purchIdToReplenishmentLocation.remove(purchId);
            purchIdToBuyerGroupId.remove(purchId);
        }
        uncommittedPurchaseOrders = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollbackUncommittedTransferTable</Name>
				<Source><![CDATA[
    private void rollbackUncommittedTransferTable()
    {
        var uncommittedTransferOrdersGroupingKeysEnumerator = uncommittedTransferOrdersGroupingKeys.getEnumerator();
        while (uncommittedTransferOrdersGroupingKeysEnumerator.moveNext())
        {
            var groupingKey = uncommittedTransferOrdersGroupingKeysEnumerator.current();
            groupingKeyToTransferId.remove(groupingKey);
        }
        uncommittedTransferOrdersGroupingKeys = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollbackUncommittedJournalTable</Name>
				<Source><![CDATA[
    private void rollbackUncommittedJournalTable()
    {
        var uncommittedTransferJournalsGroupingKeysEnumerator = uncommittedTransferJournalsGroupingKeys.getEnumerator();
        while (uncommittedTransferJournalsGroupingKeysEnumerator.moveNext())
        {
            var groupByKey = uncommittedTransferJournalsGroupingKeysEnumerator.current();
            groupingKeyToJournalId.remove(groupByKey);
        }
        uncommittedTransferJournalsGroupingKeys = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchaseOrder</Name>
				<Source><![CDATA[
    internal void addPurchaseOrder(PurchId _purchId, ReqPlannedOrderGroupingKey _groupingKey)
    {
        if (!purchIdToGroupingKey.exists(_purchId))
        {
            uncommittedPurchaseOrders.add(_purchId);
            groupingKeyToPurchId.insert(_groupingKey, _purchId);
            purchIdToGroupingKey.insert(_purchId, _groupingKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPurchaseOrderForSubmittingToWorflow</Name>
				<Source><![CDATA[
    internal void markPurchaseOrderForSubmittingToWorflow(PurchId _purchId)
    {
        purchIdsToSubmitToWorkflow.add(_purchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrdersToSubmitToWorflow</Name>
				<Source><![CDATA[
    internal Set getPurchaseOrdersToSubmitToWorflow()
    {
        return purchIdsToSubmitToWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPurchaseOrderForAutoApproval</Name>
				<Source><![CDATA[
    internal void markPurchaseOrderForAutoApproval(PurchId _purchId)
    {
        purchIdsToAutoApprove.add(_purchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPurchaseOrderForCrossDocking</Name>
				<Source><![CDATA[
    internal void markPurchaseOrderForCrossDocking(PurchId _purchId)
    {
        purchIdsToCrossDock.add(_purchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPurchaseOrderForUpdatingAddressFromInventLocationId</Name>
				<Source><![CDATA[
    internal void markPurchaseOrderForUpdatingAddressFromInventLocationId(PurchId _purchId, InventLocationId _inventLocationId)
    {
        purchIdToInventLocationId.insert(_purchId, _inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPurchaseOrderForSettingReplenishmentLocation</Name>
				<Source><![CDATA[
    internal void markPurchaseOrderForSettingReplenishmentLocation(PurchId _purchId, InventLocationId _replenishmentLocation)
    {
        purchIdToReplenishmentLocation.insert(_purchId, _replenishmentLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPurchaseOrderForUpdatingBuyerGroupId</Name>
				<Source><![CDATA[
    internal void markPurchaseOrderForUpdatingBuyerGroupId(PurchId _purchId, ItemBuyerGroupId _buyerGroupId)
    {
        if (!purchIdToBuyerGroupId.exists(_purchId))
        {
            purchIdToBuyerGroupId.insert(_purchId, _buyerGroupId);
        }
        else if (purchIdToBuyerGroupId.lookup(_purchId) != _buyerGroupId)
        {
            purchIdToBuyerGroupId.insert(_purchId, '');
            //buyer group will be blank because of different groups on same purchase order
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrdersToAutoApprove</Name>
				<Source><![CDATA[
    internal Set getPurchaseOrdersToAutoApprove()
    {
        return purchIdsToAutoApprove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrderForUpdatingBuyerGroupId</Name>
				<Source><![CDATA[
    internal Map getPurchaseOrderForUpdatingBuyerGroupId()
    {
        return purchIdToBuyerGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlannedOrderGroupFirmingParameters</Name>
				<Source><![CDATA[
    internal void updatePlannedOrderGroupFirmingParameters()
    {
        this.updatePlannedOrderGroupFirmingParametersForPurchaseOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForPurchaseOrderWithGroupingKey</Name>
				<Source><![CDATA[
    internal boolean checkForPurchaseOrderWithGroupingKey(ReqPlannedOrderGroupingKey _groupingKey)
    {
        return groupingKeyToPurchId.exists(_groupingKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrderWithGroupingKey</Name>
				<Source><![CDATA[
    internal PurchId getPurchaseOrderWithGroupingKey(ReqPlannedOrderGroupingKey _groupingKey)
    {
        // The retrieved purchId has been checked by the \Data Dictionary\Tables\PurchTable\Methods\canAutoUpdatePurchOrder method
        // when created in the first place.
        return groupingKeyToPurchId.exists(_groupingKey) ? groupingKeyToPurchId.lookup(_groupingKey) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupingKeyToPurchIdMap</Name>
				<Source><![CDATA[
    internal Map getGroupingKeyToPurchIdMap()
    {
        return groupingKeyToPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransferOrder</Name>
				<Source><![CDATA[
    internal void addTransferOrder(InventTransferId _transferId, ReqPlannedOrderGroupingKey _groupingKey)
    {
        if (!groupingKeyToTransferId.exists(_groupingKey))
        {
            uncommittedTransferOrdersGroupingKeys.add(_groupingKey);
            groupingKeyToTransferId.insert(_groupingKey, _transferId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForTransferOrderWithGroupingKey</Name>
				<Source><![CDATA[
    internal boolean checkForTransferOrderWithGroupingKey(ReqPlannedOrderGroupingKey _groupingKey)
    {
        return groupingKeyToTransferId.exists(_groupingKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOrderWithGroupingKey</Name>
				<Source><![CDATA[
    internal InventTransferId getTransferOrderWithGroupingKey(ReqPlannedOrderGroupingKey _groupingKey)
    {
        return groupingKeyToTransferId.exists(_groupingKey) ? groupingKeyToTransferId.lookup(_groupingKey) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransferJournal</Name>
				<Source><![CDATA[
    internal void addTransferJournal(InventJournalId _journalId, ReqPlannedOrderGroupingKey _groupingKey)
    {
        if (!groupingKeyToJournalId.exists(_groupingKey))
        {
            groupingKeyToJournalId.insert(_groupingKey, _journalId);
            uncommittedTransferJournalsGroupingKeys.add(_groupingKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForTransferJournalWithGroupingKey</Name>
				<Source><![CDATA[
    internal boolean checkForTransferJournalWithGroupingKey(ReqPlannedOrderGroupingKey _groupingKey)
    {
        return groupingKeyToJournalId.exists(_groupingKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferJournalWithGroupingKey</Name>
				<Source><![CDATA[
    internal InventTransferId getTransferJournalWithGroupingKey(ReqPlannedOrderGroupingKey _groupingKey)
    {
        return groupingKeyToJournalId.exists(_groupingKey) ? groupingKeyToJournalId.lookup(_groupingKey) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlannedOrderGroupFirmingParametersForPurchaseOrders</Name>
				<Source><![CDATA[
    private void updatePlannedOrderGroupFirmingParametersForPurchaseOrders()
    {
        var se = purchIdToGroupingKey.getEnumerator();
        while (se.moveNext())
        {
            PurchId purchId = se.currentKey();
            ReqPlannedOrderGroupingKey groupingKey = se.currentValue();

            ttsbegin;
            
            const boolean MustSelectForUpdate = true;
            var groupFirmingParameters = ReqPlannedOrderGroupFirmingParameters::find(firmingRunId, InventTransType::Purch, groupingKey, MustSelectForUpdate, ConcurrencyModel::Pessimistic);
            
            if (groupFirmingParameters.RecId)
            {
                groupFirmingParameters.BuyerGroupId = (purchIdToBuyerGroupId.exists(purchId) && groupFirmingParameters.BuyerGroupId != purchIdToBuyerGroupId.lookup(purchId)) ? '' : groupFirmingParameters.BuyerGroupId;
                groupFirmingParameters.MustOnlySubmitToWorkflow = groupFirmingParameters.MustOnlySubmitToWorkflow || purchIdsToSubmitToWorkflow.in(purchId);
                groupFirmingParameters.MustBeCrossDocked = groupFirmingParameters.MustBeCrossDocked || purchIdsToCrossDock.in(purchId);
                
                if (purchIdToInventLocationId.exists(purchId))
                {
                    groupFirmingParameters.MustUpdateAddressFromInventLocationId = true;
                    groupFirmingParameters.InventLocationId = purchIdToInventLocationId.lookup(purchId);
                }

                if (purchIdToReplenishmentLocation.exists(purchId))
                {
                    groupFirmingParameters.MustUpdateReplenishmentLocation = true;
                    groupFirmingParameters.ReplenishmentLocation = purchIdToReplenishmentLocation.lookup(purchId);
                }

                groupFirmingParameters.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchaseOrderLineNumbering</Name>
				<Source><![CDATA[
    // This should be only run if there are no other processes firming as a part of the same run
    internal void syncPurchaseOrderLineNumbering()
    {
        var se = purchIdToGroupingKey.getEnumerator();
        while (se.moveNext())
        {
            PurchId purchId = se.currentKey();
            ReqTransPoMarkFirmPurchaseLineNumberSequence::syncNumbersWithPurchLineTable(purchId, firmingRunId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAsPartOfBiggerRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance of the class to be a part of a bigger firming run.
    /// </summary>
    /// <param name = "_firmingRunId">The firming run id of the run that should be associated with the instance of the class.</param>
    internal void setAsPartOfBiggerRun(ReqFirmingRunId _firmingRunId)
    {
        firmingRunId = _firmingRunId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>