<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProServiceClient_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Net.Http.Headers;

/// <summary>
/// A service client for Chorus Pro portal communication.
/// </summary>
internal final class BusinessDocChorusProServiceClient_FR extends BusinessDocChorusProServiceClientBase_FR implements BusinessDocChorusProIServiceClientForStructures
{
    private const str AuthorizationHeader = 'Authorization';
    private const str BearerTokenPrefix = 'Bearer ';
    private const str AcceptLanguageHeader = 'Accept-Language';
    private const str TimeZoneHeader = 'x-ms-client-timezone';
    private const str CorrelationIdHeader = 'x-ms-correlation-id';
    private const str ChorusProTechAccountHeader = 'cpro-account';
    private const str ChorusProTechUserNamePasswordPattern = '%1:%2';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProServiceClient_FR construct()
    {
        BusinessDocChorusProParametersFactory parametersFactory = new BusinessDocChorusProParametersFactory();
        BusinessDocChorusProIParameters parameters = parametersFactory.getParameters();
        
        var ret = new BusinessDocChorusProServiceClient_FR();
        ret.setParameters(parameters);
        ret.setEndpointURL(parameters.getWebServiceURL());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshServiceCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes service codes by a given SIRET.
    /// </summary>
    /// <param name = "_siret">A SIRET.</param>
    /// <returns>True, if new values are added; otherwise, false.</returns>
    public boolean refreshServiceCodes(str _siret)
    {
        boolean ret;

        JArray structureList = this.getStructuresBySiret(_siret);
        JObject structure;
        str actualSiret;
        if (structureList != null && structureList.Count > 0)
        {
            structure = structureList.get_Item(0);
            actualSiret = BusinessDocChorusProJObjectUtils::retrieveSiretFromStructure(structure);
        }
        
        if (_siret != actualSiret)
        {
            throw error("@BusinessDocumentSubmissionService:StructureWithSiretNotFoundChorusPro");
        }
        
        var siretCacheTable = BusinessDocChorusProSiretCacheTable_FR::insertFromJObjectIfDoesNotExist(_siret, structure);

        JArray serviceList = this.getServicesByStructureId(siretCacheTable.StructureId);

        ret = BusinessDocChorusProServiceCodeTable_FR::updateFromJArrayServiceList(_siret, serviceList);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStructuresBySiret</Name>
				<Source><![CDATA[
    public JArray getStructuresBySiret(str _siret)
    {
        const str StructureJProperty = 'structure';
        const str StructureListJProperty = 'listeStructures';

        JObject structureDetailsJson = new JObject();
        structureDetailsJson.Add(new JProperty(BusinessDocChorusProJObjectUtils::StructureIdJProperty, _siret));
        structureDetailsJson.Add(new JProperty(BusinessDocChorusProJObjectUtils::StructureIdTypeJProperty, BusinessDocChorusProJObjectUtils::SiretStructureIdType));
        JObject structureJson = new JObject();
        structureJson.Add(new JProperty(StructureJProperty, structureDetailsJson));
        
        JObject structures = this.requestChorusPro(
            parameters.getWebServiceURL(),
            '/cpro/structures/v1',
            'rechercher',
            BusinessDocumentWebHelperBase::HttpPost,
            structureJson.ToString(),
            BusinessDocumentWebHelperBase::JsonContentType);
        
        JArray structureList;
        if (structures != null)
        {
            structureList = structures.SelectToken(StructureListJProperty) as JArray;
        }
        
        return structureList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServicesByStructureId</Name>
				<Source><![CDATA[
    public JArray getServicesByStructureId(int _structureId)
    {
        const str IdStructureJProperty = 'idStructure';
        const str ServiceListJProperty = 'listeServices';
        const str SearchParametersJProperty = 'parametresRechercherServicesStructure';
        const str NumberOfSearchResultItemsJProperty = 'nbResultatsParPage';
        const str PageNumberJProperty = 'pageResultatDemandee';
        const str CurrentPageJProperty = 'parametresRetour.pageCourante';
        const str TotalPagesJProperty = 'parametresRetour.pages';
        const int NumberOfSearchResultItems = 100;
        const int MaxLoopCounter = 20;
        int currentPage = 0;
        int totalPages = 1;

        JObject searchParameters = new JObject();
        searchParameters.Add(new JProperty(NumberOfSearchResultItemsJProperty, NumberOfSearchResultItems));
        JObject idStructureJson = new JObject();
        idStructureJson.Add(new JProperty(IdStructureJProperty, _structureId));

        JArray serviceList = new JArray();
        int loopCounter = 0;
        while (currentPage < totalPages)
        {
            loopCounter++;
            if (loopCounter > MaxLoopCounter)
            {
                break;
            }

            searchParameters.Remove(PageNumberJProperty);
            searchParameters.Add(new JProperty(PageNumberJProperty, currentPage + 1));
            idStructureJson.Remove(SearchParametersJProperty);
            idStructureJson.Add(new JProperty(SearchParametersJProperty, searchParameters));

        JObject services = this.requestChorusPro(
            parameters.getWebServiceURL(),
            '/cpro/structures/v1',
            'rechercher/services',
            BusinessDocumentWebHelperBase::HttpPost,
            idStructureJson.ToString(),
            BusinessDocumentWebHelperBase::JsonContentType);

            serviceList.Merge(services.SelectToken(ServiceListJProperty) as JArray);

            currentPage = services.SelectToken(CurrentPageJProperty);
            totalPages = services.SelectToken(TotalPagesJProperty);

        } 

        return serviceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncodeStringInBase64</Name>
				<Source><![CDATA[
    private str getEncodeStringInBase64(str _data)
    {
        str ret;
        if (_data)
        {
            System.Byte[] plainTextBytes = System.Text.Encoding::UTF8.GetBytes(_data);
            ret = System.Convert::ToBase64String(plainTextBytes);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    protected void addRequestHeaders(HttpRequestMessage _request)
    {
        HttpRequestHeaders headers = _request.Headers;
         
        var culture = infolog.language();
        headers.Add(AcceptLanguageHeader, culture);

        str timeZoneId = DateTimeUtil::getTimeZoneId(DateTimeUtil::GetUserPreferredTimeZone());
        headers.Add(TimeZoneHeader, timeZoneId);

        headers.Date = System.DateTimeOffset::UtcNow;
        
        var techUserName = parameters.getTechUserName();
        var techUserPassword = parameters.getTechUserPassword();
        headers.Add(ChorusProTechAccountHeader, this.getEncodeStringInBase64(strFmt(ChorusProTechUserNamePasswordPattern, techUserName, techUserPassword)));

        str correlationId = strLwr(guid2StrWithoutBraces(newGuid()));
        headers.Add(CorrelationIdHeader, correlationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAuthorizationHeader</Name>
				<Source><![CDATA[
    protected void addAuthorizationHeader(HttpRequestMessage _request)
    {
        HttpRequestHeaders headers = _request.Headers;

        BusinessDocChorusProAccessTokenClient_FR accessTokenClient = BusinessDocChorusProAccessTokenClient_FR::construct();
        str accessToken = accessTokenClient.getAccessToken(true);
        
        headers.Add(AuthorizationHeader, BearerTokenPrefix + accessToken);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>