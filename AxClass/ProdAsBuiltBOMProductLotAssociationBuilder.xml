<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMProductLotAssociationBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdAsBuiltBOMProductLotAssociationBuilder extends ProdAsBuiltBOMProductLotBuilder
{
    private ProdAsBuiltBOMProductLotAssociation productLotAssociation;
    private boolean                             validateBatchId;
    private boolean                             validateSerialIdUniqueness;
    private ProdAsBuiltBOMInputOrigin           inputOrigin;
    private ProdAsBuiltBOMInputType             inputType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchChanged</Name>
				<Source><![CDATA[
    delegate void batchChanged(InventBatchId _productBatchId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialChanged</Name>
				<Source><![CDATA[
    delegate void serialChanged(InventSerialId _productSerialId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductContext</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotBuilder setProductContext(ItemId _productItemId)
    {
        super(_productItemId);

        this.setProductType(productContext.getProductType());

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsActive</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setIsActive(boolean _isActive)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, IsActive), _isActive);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setMatchId(ProdAsBuiltBOMMatchId _matchId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, MatchId), _matchId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setReferenceId(InventTransRefId _referenceId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, ReferenceId), _referenceId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setInventTransId(InventTransId _inventTransId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, InventTransId), _inventTransId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setItemId(ItemId _productItemId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, ItemId), _productItemId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSiteId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setSiteId(InventSiteId _siteId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, SiteId), _siteId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchNumberId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setBatchNumberId(InventBatchId _productBatchId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, BatchNumberId), _productBatchId);
        this.batchChanged(_productBatchId);
        this.setProductInventDimId();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSerialNumberId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setSerialNumberId(InventSerialId _productSerialId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, SerialNumberId), _productSerialId);
        this.serialChanged(_productSerialId);
        this.setProductInventDimId();
        this.setValidateSerialIdUniqueness(true);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductInventDimId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setProductInventDimId()
    {
        productLotAssociation.initInventDim();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductType</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setProductType(PmfProductType _productType)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, ProductType), _productType);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryUnitId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setInventoryUnitId(UnitOfMeasureSymbol _inventUnitId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, InventUnitId), _inventUnitId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGoodQuantity</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setGoodQuantity(ProdReportedGood _goodQty)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, QtyGood), _goodQty);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setErrorQuantity</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setErrorQuantity(ProdReportedError _errorQty)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, QtyError), _errorQty);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransChildRefId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setInventTransChildRefId(InventTransChildRefId _inventTransChildRefId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, InventTransChildRefId), _inventTransChildRefId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransChildType</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setInventTransChildType(InventTransChildType _inventTransChildType)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, InventTransChildType), _inventTransChildType);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportFinishedJournalId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setReportFinishedJournalId(ProdJournalIdProd _reportFinishedJournalId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMProductLotAssociation, ReportFinishedJournalId), _reportFinishedJournalId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidateBatchId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setValidateBatchId(boolean _validateBatchId)
    {
        validateBatchId = _validateBatchId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidateSerialIdUniqueness</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setValidateSerialIdUniqueness(boolean _validateSerialIdUniqueness)
    {
        validateSerialIdUniqueness = _validateSerialIdUniqueness;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInputOrigin</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setInputOrigin(ProdAsBuiltBOMInputOrigin _inputOrigin)
    {
        inputOrigin = _inputOrigin;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInputType</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociationBuilder setInputType(ProdAsBuiltBOMInputType _inputType)
    {
        inputType = _inputType;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLotAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociation productLotAssociation()
    {
        return productLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductLotAssociation</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMProductLotAssociationBuilder setProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        productLotAssociation = _productLotAssociation;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    private void setValue(FieldId _dimFieldId, anytype _value)
    {
        productLotAssociation.(_dimFieldId) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        boolean ret = false;
        
        if (productLotAssociation.IsCompleted)
        {
            error(strFmt("@SCM:TrackedComponentsProductAssociationCompletion", productLotAssociation.MatchId, productLotAssociation.InventTransId));
            return ret;
        }

        ret = this.validateBatch();

        if (this.isSerialNumberAssociated())
        {
            info(strFmt("@SCM:TrackedComponentsProductAssociationSerialNumberCheck", productLotAssociation.SerialNumberId, productLotAssociation.InventTransId, productLotAssociation.MatchId));
            
            if (productContext.isItemBatchable() && productLotAssociation.BatchNumberId)
            {
                var association = ProdAsBuiltBOMProductLotAssociation::findAssociationByUniqueSerialNumber(productLotAssociation);
                if (association.BatchNumberId != productLotAssociation.BatchNumberId)
                {
                    error(strFmt("@SCM:TrackedComponentsProductAssociationSerialBatchNumberCheck", productLotAssociation.SerialNumberId, productLotAssociation.InventTransId, productLotAssociation.BatchNumberId));
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    internal boolean save()
    {
        if (!this.validate())
        {
            return false;
        }

        Num matchId;
        try
        {
            using (var telemetry = ProdInstrumentationSegmentFactory::create(tableStr(ProdAsBuiltBOMProductLotAssociation), ProdInstrumentationActivities::DefaultActivityId, this.createTelemetryParameters()))
            {
                ttsbegin;
                if (!productLotAssociation.MatchId)
                {
                    matchId = ProdAsBuiltBOMProductLotAssociation::getMatchId();
                    this.setMatchId(matchId);
                }
                else
                {
                    matchId = productLotAssociation.MatchId;
                }

                if (!matchId)
                {
                    throw Exception::Error;
                }
                productLotAssociation.selectForUpdate(true);
                productLotAssociation.initInternal();
                productLotAssociation.activateCurrentProductAssociation();
                productLotAssociation.write();
                ttscommit;
            }
        }
        catch (Exception::Error)
        {
            if (!matchId)
            {
                error("@SCM:TrackedComponentsMatchIdExistanceCheck");
            }
            return false;
        }

        return productLotAssociation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTelemetryParameters</Name>
				<Source><![CDATA[
    private SysInstrumentationAdditionalParameters createTelemetryParameters()
    {
        return SysInstrumentationAdditionalParameters::construct()
                .add(ProdInstrumentationActivities::ProductionType, enum2Symbol(enumNum(ProdType), ProdTable::find(productLotAssociation.ReferenceId).ProdType))
                .add(ProdInstrumentationActivities::InputOrigin, enum2Symbol(enumNum(ProdAsBuiltBOMInputOrigin), enum2int(inputOrigin)))
                .add(ProdInstrumentationActivities::InputType, enum2Symbol(enumNum(ProdAsBuiltBOMInputType), enum2int(inputType)))
                .add(productLotAssociation.RecId == 0 ? ProdInstrumentationActivities::Insert : ProdInstrumentationActivities::Update, int642Str(productLotAssociation.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatch</Name>
				<Source><![CDATA[
    internal boolean validateBatch()
    {
        if (validateBatchId && productLotAssociation.BatchNumberId && productContext.isItemBatchable() && !InventBatch::find(productLotAssociation.BatchNumberId, productLotAssociation.ItemId))
        {
            error(strFmt("@SCM:TrackedComponentsBatchNumberCheck", productLotAssociation.BatchNumberId, productLotAssociation.ItemId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductLotAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociation findProductLotAssociation(ProdAsBuiltBOMProductLotAssociationParameters _productLotAssociationParameters)
    {
        var productLotContext = _productLotAssociationParameters.getProductLot();
        var productBatchId    = _productLotAssociationParameters.getBatchNumberId();
        var productSerialId   = _productLotAssociationParameters.getSerialNumberId();
        
        var query = new Query();
        var qbds = query.addDataSource(tableNum(ProdAsBuiltBOMProductLotAssociation));
        qbds.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, ReferenceId)).value(queryValue(productLotContext.ProdId));
        qbds.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, InventTransId)).value(queryValue(productLotContext.InventTransId));
        qbds.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, ItemId)).value(queryValue(productLotContext.ItemId));

        var isBatchAndSerialEnabledItem = productContext.isItemSerializable() && productContext.isItemBatchable();
        if (isBatchAndSerialEnabledItem)
        {
            // ((SN == v) && (BN != "")) OR ((SN == v) && (BN == "")) OR ((SN == "") && (BN != ""))
            if (productSerialId)
            {
                str range = strFmt('((%1 == "%2") && (%3 != "")) || ((%1 == "%2") && (%3 == "")) || ((%1 == "") && (%3 != ""))', fieldStr(ProdAsBuiltBOMProductLotAssociation, SerialNumberId), productSerialId, fieldStr(ProdAsBuiltBOMProductLotAssociation, BatchNumberId));
                SysQuery::findOrCreateRange(qbds, fieldNum(ProdAsBuiltBOMProductLotAssociation, SerialNumberId)).value(range);
            }
            if (productBatchId)
            {
                str range = strFmt('((%1 == "%2") && (%3 != "")) || ((%1 == "%2") && (%3 == "")) || ((%1 == "") && (%3 != ""))', fieldStr(ProdAsBuiltBOMProductLotAssociation, BatchNumberId), productBatchId, fieldStr(ProdAsBuiltBOMProductLotAssociation, SerialNumberId));
                SysQuery::findOrCreateRange(qbds, fieldNum(ProdAsBuiltBOMProductLotAssociation, BatchNumberId)).value(range);
            }
        }
        else if (productContext.isItemSerializable() && productSerialId)
        {
            qbds.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, SerialNumberId)).value(queryValue(productSerialId));
        }
        else if (productContext.isItemBatchable() && productBatchId)
        {
            qbds.addRange(fieldNum(ProdAsBuiltBOMProductLotAssociation, BatchNumberId)).value(queryValue(productBatchId));
        }

        var queryRun = new QueryRun(query);
        ProdAsBuiltBOMProductLotAssociation productAssociation;

        while (queryRun.next())
        {
            productAssociation = queryRun.get(tableNum(ProdAsBuiltBOMProductLotAssociation));

            if (isBatchAndSerialEnabledItem && productAssociation.SerialNumberId && productAssociation.BatchNumberId && _productLotAssociationParameters.getBatchNumberId())
            {
                productAssociation = null;  // create a new association for registered BN if both tracking dimensions are set.
                continue;
            }
            break;
        }
        return productAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberAssociated</Name>
				<Source><![CDATA[
    internal boolean isSerialNumberAssociated()
    {
        if (!this.validateSerialIdUniqueness)
        {
            return false;
        }

        return (select firstonly RecId from ProdAsBuiltBOMProductLotAssociation
            where ProdAsBuiltBOMProductLotAssociation.ItemId         == productLotAssociation.ItemId
               && ProdAsBuiltBOMProductLotAssociation.SerialNumberId == productLotAssociation.SerialNumberId).RecId != 0;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociationBuilder construct()
    {
        return new ProdAsBuiltBOMProductLotAssociationBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuilder</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociationBuilder createBuilder(ProdAsBuiltBOMProductLotAssociationParameters _parameters)
    {
        var productLot = _parameters.getProductLot();
        var builder = ProdAsBuiltBOMProductLotAssociationBuilder::construct()
                        .setReferenceId(productLot.ProdId)
                        .setInventTransId(productLot.InventTransId)
                        .setItemId(productLot.ItemId)
                        .setSiteId(InventDim::find(productLot.InventDimId).InventSiteId)
                        .setInventoryUnitId(productLot.inventoryUnitId())
                        .setInputOrigin(_parameters.getInputOrigin())
                        .setInputType(_parameters.getInputType());

        builder.setProductContext(productLot.ItemId);
        builder.setProductLot(productLot);

        ProdAsBuiltBOMProductLotAssociation existingProductLotAssociation;
        if (_parameters.getProductLotAssociation().InventTransId)
        {
            builder.setProductLotAssociation(_parameters.getProductLotAssociation());
        }
        else
        {
            existingProductLotAssociation = builder.findProductLotAssociation(_parameters);

            if (existingProductLotAssociation.RecId)
            {
                builder.setProductLotAssociation(existingProductLotAssociation);
            }
        }

        if (_parameters.getSerialNumberId())
        {
            builder.setSerialNumberId(_parameters.getSerialNumberId());
        }
        if (_parameters.getBatchNumberId())
        {
            builder.setBatchNumberId(_parameters.getBatchNumberId());
            builder.setValidateBatchId(_parameters.getValidateInput());
        }
        if (_parameters.getInventTransChildRefId())
        {
            builder.setReportFinishedJournalId(_parameters.getReportFinishedJournalId())
                   .setInventTransChildRefId(_parameters.getInventTransChildRefId())
                   .setInventTransChildType(_parameters.getInventTransChildType());
        }

        if (existingProductLotAssociation.InventTransId)
        {
            return builder;
        }

        if (_parameters.getGoodQuantity() == 0 && _parameters.getErrorQuantity() == 0)
        {
            builder.setGoodQuantity(1);
        }
        else
        {
            builder.setGoodQuantity(_parameters.getGoodQuantity())
                   .setErrorQuantity(_parameters.getErrorQuantity());
        }

        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuilderFromProductLotAssociation</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociationBuilder createBuilderFromProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        ProdAsBuiltBOMProductLotAssociationBuilder builder = ProdAsBuiltBOMProductLotAssociationBuilder::construct().setProductLotAssociation(_productLotAssociation);

        builder.setProductContext(_productLotAssociation.ItemId);

        return builder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>