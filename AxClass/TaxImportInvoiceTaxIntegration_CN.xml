<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxImportInvoiceTaxIntegration_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxImportInvoiceTaxIntegration_CN</c> class is used for tax import invoice and tax integration.
/// </summary>
class TaxImportInvoiceTaxIntegration_CN  extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase   dialog;

    DialogField                             dialogDefinitionGroup;
    FileUploadBuild                         dialogImportFileUpload;
    DMFDefinitionGroupName                  definitionGroup;

    Filename                                uploadFileName;
    str                                     uploadFileURL;
    SharedServiceUnitFileID                 uploadFileID;

    // Select file
    const str fileUploadControlLabel = "@GLS221360";
    const str zipFileSuffix = 'zip';
    const str txtFileSuffix = 'txt';
    const str OkButtonName = 'OkButton';

    // No strong-typed way to specify a composite entity
    const str TaxIntegrationImportEntityName = "TaxImportInvoiceTaxIntegrationEntity";

    int successfulFileNumber;
    int totalFileNumber;
    int successfulInvoiceNumber;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
                definitionGroup
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        FormBuildControl formBuildControl;
        DialogGroup dialogGroup;

        // Tax integration import
        dialog.caption("@GLS60748");

        // Import
        dialogGroup = dialog.addGroup("@SYS54759");
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());

        dialogDefinitionGroup = dialog.addFieldValue(extendedTypeStr(DMFDefinitionGroupName), definitionGroup);
        dialogDefinitionGroup.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(TaxImportInvoiceTaxIntegration_CN, lookUpTaxImportDefinitionGroup),
            this);

        dialogImportFileUpload = formBuildControl.addControlEx(classstr(FileUpload), fileUploadControlLabel);
        // Select a file to upload.
        dialogImportFileUpload.fileNameLabel("@SYS308842");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
     /// <summary>
    /// Gets data from dialog.
    /// </summary>
    /// <returns>
    /// Returns true if the operation succeed.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        definitionGroup = dialogDefinitionGroup.value();

        FileUpload fileUploadControl = this.getFormControl(dialog, fileUploadControlLabel);
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            uploadFileURL = fileUploadResult.getDownloadUrl();
            uploadFileName = fileUploadResult.getFileName();
            uploadFileID = fileUploadResult.getFileId();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get form control instance of dialog control.
    /// </summary>
    /// <param name = "_dialog">current dialog.</param>
    /// <param name = "_controlName">name of the control.</param>
    /// <returns>form control instance of the given dialog control.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>importTaxInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import tax invoices.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void importTaxInvoices()
    {
        List importFiles;
        SharedServiceUnitFileID taxIntegrationToImportFileId;
        str importFileName;

        DMFDefinitionGroup dmfDefinitionGroup;
        select firstonly dmfDefinitionGroup
            where dmfDefinitionGroup.DefinitionGroupName == definitionGroup;

        if (strEndsWith(uploadFileName, zipFileSuffix))
        {
            container txtFileSuffixes = [txtFileSuffix];
            importFiles = DataFileImportExportUtils_W::getUnzippedFiles(uploadFileURL, txtFileSuffixes);
        }
        else
        {
            importFiles = new List(Types::Container);
            importFiles.addEnd([uploadFileID, uploadFileName]);
        }

        ListEnumerator importFileEnumerators = importFiles.getEnumerator();

        while (importFileEnumerators.moveNext())
        {
            [taxIntegrationToImportFileId, importFileName] = importFileEnumerators.current();
            // Embed non-XML into data island of XML.
            if (taxIntegrationToImportFileId)
            {
                taxIntegrationToImportFileId = DataFileImportExportUtils::reuploadFileAsXmlFile(taxIntegrationToImportFileId, importFileName, classStr(PaymentFileTemporaryStorageStrategy));
            }

            this.importSingleFile(taxIntegrationToImportFileId, dmfDefinitionGroup);
            totalFileNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSuccessfulInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get count of invoices which succeeded during import.
    /// </summary>
    /// <param name = "_dmfDefinitionGroup">Definition group which processes the tax integration import.</param>
    /// <param name = "_executionId">Job ID of the execution.</param>
    /// <returns>Count of invoices which succeeded during import.</returns>
    private int getSuccessfulInvoiceNumber(
        DMFDefinitionGroup _dmfDefinitionGroup,
        DMFExecutionId _executionId)
    {
        TaxImportInvoiceTaxIntegrationEntityStaging taxIntegrationEntityStaging;

        select firstonly count(RecId) from taxIntegrationEntityStaging
            where
                taxIntegrationEntityStaging.TransferStatus  == DMFTransferStatus::Completed &&
                taxIntegrationEntityStaging.DefinitionGroup == _dmfDefinitionGroup.DefinitionGroupName &&
                taxIntegrationEntityStaging.ExecutionId     == _executionId;

        return int642int(taxIntegrationEntityStaging.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importSingleFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import a single import file which must be in XML format.
    /// </summary>
    /// <param name = "_singleUploadedFile">file Id of the import file.</param>
    /// <param name = "_definitionGroup">Definition group which will be used for this import.</param>
    private void importSingleFile(
        SharedServiceUnitFileID _singleUploadedFile,
        DMFDefinitionGroup _definitionGroup)
    {
        DMFDefinitionGroupEntity definitionGroupEntity;
        int successInvoiceNumber;

        DMFEntity dmfEntity;

        select firstonly RecId, Entity from definitionGroupEntity
            exists join dmfEntity
            where definitionGroupEntity.DefinitionGroup == _definitionGroup.DefinitionGroupName
                && dmfEntity.EntityName     == definitionGroupEntity.Entity
                && dmfEntity.TargetEntity   == TaxIntegrationImportEntityName;

        if (!definitionGroupEntity.RecId)
        {
            // Entity for data project '%1' does not exist.
            throw error(strFmt("@DMF:DMFNoEntityExists", _definitionGroup.DefinitionGroupName));
        }

        DMFExecutionId executionId = DMFUtil::setupNewExecution(_definitionGroup.DefinitionGroupName);

        // Find execution
        DMFDefinitionGroupExecution execution =
                DMFDefinitionGroupExecution::find(
                    _definitionGroup.DefinitionGroupName, definitionGroupEntity.Entity, executionId, true);
        execution.IsTransformed = NoYes::No;
        execution.FilePath = execution.applyTransforms(_singleUploadedFile);
        execution.IsTransformed = NoYes::Yes;
        execution.update();
        DMFQuickImportExport::doPGImport(_definitionGroup.DefinitionGroupName, executionId, true);

        successInvoiceNumber = this.getSuccessfulInvoiceNumber(_definitionGroup, executionId);
        if (successInvoiceNumber != 0)
        {
            successfulFileNumber++;
        }
        successfulInvoiceNumber += successInvoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tax integration import batch.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret;

        ret = super(calledFrom);

        if (!definitionGroup)
        {
            // Definition group Id is not specified.
            ret = checkFailed("@DMF:DMFDefinitionGroupIdNotSpecified");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpTaxImportDefinitionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup to DIXF definition group which has entity tax integration import.
    /// </summary>
    /// <param name = "_formControl">Form control with the lookup.</param>
    private void lookUpTaxImportDefinitionGroup(FormStringControl _formControl)
    {
        DataFileImportExportUtils_W::lookUpDefinitionGroup(_formControl, TaxIntegrationImportEntityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes data entity to import data from the client file to tables.
    /// </summary>
    public void run()
    {
        this.importTaxInvoices();

        if (successfulFileNumber > 0)
        {
            // %1 files have been imported in total
            info(strFmt("@GLS221393", successfulFileNumber));
        }

        if (totalFileNumber - successfulFileNumber > 0)
        {
            // %1 files are found with error.
            info(strFmt("@GLS221404", totalFileNumber - successfulFileNumber));
        }

        // Total of %1 invoice(s) have been assigned official invoice number.
        info(strFmt("@GLS60756", successfulInvoiceNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(dialog, fileUploadControlLabel);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);

        this.setDialogOkButtonEnabled(dialog, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the dialog Ok button until the file upload is complete.
    /// </summary>
    /// <param name="_dialog">The <c>Runbase</c> dialog object.</param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FileUpload fileUpload = this.getFormControl(_dialog, fileUploadControlLabel);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TaxImportInvoiceTaxIntegration_CN ctiDataImportInvoice;

        if (!CustParameters::isTaxIntegrationSystem_CN())
        {
            // This form cannot be activitated unless the paratmeter '%1' is checked.
            warning(strfmt("@GLS54626", fieldid2pname(tablenum(CustParameters), fieldnum(CustParameters, TaxIntegrationSystem_CN))));
            return;
        }

        ctiDataImportInvoice = new TaxImportInvoiceTaxIntegration_CN();

        if (ctiDataImportInvoice.prompt())
        {
            ctiDataImportInvoice.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>