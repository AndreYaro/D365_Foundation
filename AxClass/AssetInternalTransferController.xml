<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetInternalTransferController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetInternalTransferController</c> class is the controller for the <c>AssetInternalTransfer</c> report.
/// </summary>
public class AssetInternalTransferController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the report dialog is opened.
    /// </summary>
    protected void prePromptModifyContract()
    {
        CompanyInfo companyInfo;
        BankAccountTable bankAccountTable;
        AssetInternalTransferContract contract;
        AssetInternalTransferHistory transHistory;
        Query query;
        QueryBuildDataSource qbds;

        super();

        if (!this.parmArgs())
        {
            throw error(strfmt("@SYS19324", this.parmArgs().menuItemName()));
        }

        transHistory = this.parmArgs().record() as AssetInternalTransferHistory;

        if (!transHistory)
        {
            throw error(strfmt("@SYS19324", this.parmArgs().menuItemName()));
        }

        query = this.getFirstQuery();
        qbds = query.dataSourceTable(tableNum(AssetInternalTransferHistory));
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetInternalTransferHistory, RecId)).value(queryValue(transHistory.RecId));

        contract = this.parmReportContract().parmRdpContract() as AssetInternalTransferContract;

        if (!contract.parmDocumentDate())
        {
            contract.parmDocumentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        companyInfo = CompanyInfo::find();
        contract.parmCompanyAddress(companyInfo.postalAddress().Address);
        contract.parmCompanyPhone(companyInfo.phone());
        contract.parmCompanyRegistrationNumber(companyInfo.RegNum);

        bankAccountTable = BankAccountTable::find(companyInfo.Bank);
        contract.parmBankName(bankAccountTable.Name);
        contract.parmBankAccount(bankAccountTable.AccountNum);
        contract.parmBankRegistrationNumber(bankAccountTable.RegistrationNum);

        if (transHistory.FromWorkerResponsible)
        {
            contract.parmFromResponsibleNameTitle(strFmt("@SYS76498",
                HcmWorker::worker2ProfessionalTitle(transHistory.FromWorkerResponsible),
                HcmWorker::worker2Name(transHistory.FromWorkerResponsible)));
        }

        if (transHistory.ToWorkerResponsible)
        {
            contract.parmToResponsibleNameTitle(strFmt("@SYS76498",
                HcmWorker::worker2ProfessionalTitle(transHistory.ToWorkerResponsible),
                HcmWorker::worker2Name(transHistory.ToWorkerResponsible)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00002, funcName());
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00025, funcName());

        AssetInternalTransferController controller = new AssetInternalTransferController();
        controller.parmReportName(ssrsReportStr(AssetInternalTransfer, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>