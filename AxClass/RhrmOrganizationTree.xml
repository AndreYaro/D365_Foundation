<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmOrganizationTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RhrmOrganizationTree extends CCFormTreeDatasource
{
    Stack expandSelectStack;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>expandAndSelect</Name>
				<Source><![CDATA[
        private void expandAndSelect(RPayHRMOrganization _rPayHRMOrganization)
    {
        RpayHRMOrganizationId   rpayHRMOrganizationId,
                                rPayHRMOrganizationIdTree;
        int                     idx;

        if (! _rPayHRMOrganization)
            return;

        expandSelectStack = new Stack();
        this.getParent(_rPayHRMOrganization.HrmOrganizationId);

        this.initSelectIdx();
        this.initRoot("@GLS106284", '');

        tree.lockWindowUpdate(true);
        idx = tree.getRoot();
        while (expandSelectStack.qty())
        {
            [rpayHRMOrganizationId]     = expandSelectStack.pop();
            rPayHRMOrganizationIdTree   = tree.getItem(idx).data();
            while (rPayHRMOrganizationIdTree != rpayHRMOrganizationId)
            {
                idx = tree.getNextVisible(idx);
                rPayHRMOrganizationIdTree   = tree.getItem(idx).data();
            }
            tree.select(idx);
            if (expandSelectStack.qty())
                tree.expand(idx, FormTreeExpand::Expand);
        }
        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParent</Name>
				<Source><![CDATA[
        private void getParent(RpayHRMOrganizationId _organizationParentId)
    {
        RPayHRMOrganization     rPayHRMOrganization;

        select firstonly rPayHRMOrganization
                where rPayHRMOrganization.HrmOrganizationId == _organizationParentId;

        if (rPayHRMOrganization)
        {
            expandSelectStack.push([rPayHRMOrganization.HrmOrganizationId]);
            this.getParent(rPayHRMOrganization.ParentOrganizationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideShowTree</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void hideShowTree(boolean            _show,
                             FormTabPageControl _overview,
                             FormTabControl     _formTabControl,
                             boolean            _first = false)
    {
        tree.visible(_show);
        _overview.visible(! _show);
        _formTabControl.tab((_show)+1);

        if (_show && ! _first)
        {
            this.expandAndSelect(formDataSource.cursor());
        }
        else
        {
            if (tree.getRoot() == tree.getSelection())
            {
                formDataSource.allowEdit(true);
                formDataSource.allowDelete(true);
                formDataSource.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
        public Imagelist imageList()
    {
        #ResAppl
        #Resource

        Imagelist   imagelist;
        ;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#ImageBOM));
        imagelist.add(new Image(#ImageServer));

        return imagelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectIdx</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void initSelectIdx()
    {
        selectIdx = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void organizationType(boolean _showOnlyActive = false)
    {
        QueryRun            queryRun;
        QueryBuildRange     rangeActive;
        ;

        queryRun = new QueryRun(originalQuery);

        if (_showOnlyActive == true)
        {
            rangeActive = queryRun.query().dataSourceNo(1).findRange(fieldNum(RPayHRMOrganization, Active));
            if (! rangeActive)
                rangeActive = queryRun.query().dataSourceNo(1).addRange(fieldNum(RPayHRMOrganization, Active));

            rangeActive.value(queryValue(NoYes::Yes));
        }
        else
        {
            rangeActive = queryRun.query().dataSourceNo(1).findRange(fieldNum(RPayHRMOrganization, Active));
            if (! rangeActive)
                rangeActive = queryRun.query().dataSourceNo(1).addRange(fieldNum(RPayHRMOrganization, Active));

            rangeActive.value(queryRange(NoYes::No, NoYes::Yes));
        }

        originalQuery = queryRun.pack();
        formDataSource.query(queryRun.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDatasource</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void selectDatasource()
    {
        RPayHRMOrganization rPayHRMOrganization;
        ;

        rPayHRMOrganization = RPayHRMOrganization::find(this.selectedData());
        formDataSource.findRecord(rPayHRMOrganization);
        formDataSource.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedData</Name>
				<Source><![CDATA[
        public anytype selectedData()
    {
        return tree.getItem(tree.getSelection()).data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem = null,
                                 FormTreeItem _newItem = null)
    {
        RPayHRMOrganization rPayHRMOrganization;
        ;

        if (! _newItem)
            _newItem = tree.getItem(tree.getSelection());

        oldIdx           = _oldItem.idx();
        newIdx           = _newItem.idx();

        selectedData     = _newItem.data();
        rPayHRMOrganization = RPayHRMOrganization::find(selectedData);

        if (rPayHRMOrganization)
        {
            formDataSource.executeQuery();
        }
        else
        {
            rPayHRMOrganization.clear();
        }

        this.setDatasourceStatus(_newItem.idx());

        formDataSource.findRecord(rPayHRMOrganization);
        formDataSource.refresh();
        formDataSource.active();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMove</Name>
				<Source><![CDATA[
        public boolean validateMove(Common  parentCommon,
                                anytype fromData,
                                anytype toData)
    {
        boolean         ret = true;
        ;

        select parentCommon
            where parentCommon.(id) == toData;

        if (! parentCommon)
            ret = RPayHRMOrganization::validateMove(fromData, parentCommon.(parentId));
        else
        {
            if (parentCommon.(parentId) == fromData)
                ret = false;
            else
            {
                if (parentCommon.(parentId))
                    ret = RPayHRMOrganization::validateMove(fromData, parentCommon.(parentId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>