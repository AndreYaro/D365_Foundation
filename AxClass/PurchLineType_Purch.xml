<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineType_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchLineType_Purch
extends     PurchLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the purchase line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// false if the line is a delivery line; otherwise, true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return purchLine.LineDeliveryType != LineDeliveryType::DeliveryLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    public void deleted()
    {
        super();

        if (PurchPrepayTable::exist(purchTable.PurchId))
        {
            //recalculates prepay available and prepay limit field
            this.recalculatePrepayFields();
        }

        // Cancel COR workflow instances
        this.updateCORWorkflowStates(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the procurement or sales category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement or sales category.
    /// </param>
    /// <returns>
    /// true if the project category has been initialized; otherwise, false.
    /// </returns>
    protected boolean getDefaultProjectGlobalCategory(RefRecId _ecoResCategory)
    {
        boolean         ret;
        ProjCategoryId  projCategoryId;

        projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory);
        if (projCategoryId)
        {
            purchLine.ProjCategoryId = projCategoryId;
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSubcontractedQtyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does a comparison of the actual quantity versus the lean precomputed quantity.
    /// </summary>
    /// <param name="_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    protected void handleSubcontractedQtyUpdate(PurchLine _purchLineOrig)
    {
        if (purchLine.PlanReference != 0 && purchLine.PurchQty != _purchLineOrig.PurchQty)
        {
            // if this is a subcontracting line and the user manually changed the quantity on the line,
            // then we need to do some checks against original quantity and issue warnings if necessary
            // (note: this is not intended to prevent the update itself, rather inform the user of discrepancies)
            LeanDocumentServiceController::compareAgainstOriginalQuantity(purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project fields based on the procurement or sales category.
    /// </summary>
    /// <param name="_procurementCategory">
    /// The <c>ProcurementCategory</c> record with which to initialize the purchase line.
    /// </param>
    /// <param name="_name">
    /// The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(PurchCategory _procurementCategory, ItemFreeTxt _name)
    {
        InventTable inventTable;
        boolean     ret;

        super(_procurementCategory, _name);

        if (purchLine.ProjId)
        {
            if (purchLine.ItemId)
            {
                inventTable = purchLine.inventTable();
            }

            if (!inventTable.ProjCategoryId && _procurementCategory)
            {
                ret = this.getDefaultProjectGlobalCategory(_procurementCategory);

                if (ret)
                {
                    purchLine.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(purchLine.ProjId,purchLine.ProjCategoryId);
                    purchLine.ProjTaxItemGroupId = ProjParameters::taxItemGroupItem(purchLine.ProjCategoryId,purchLine.ItemId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    public void inserting()
    {
        if (PurchCORPolicyTable::decentralized(purchLine))
        {
            PurchCORPolicyTable::setLocation(purchLine, true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsApprovedVendorListCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an instance of PdsApprovedVendorListCheck appropriate for this line type.
    /// </summary>
    /// <returns>
    /// Instance of PdsApprovedVendorListCheck appropriate for this line type.
    /// </returns>
    /// <example>
    /// purchLine.type().pdsApprovedVendorListCheck().validateCheck();
    /// </example>
    /// <remarks>
    /// The base implementation in PurchLineType always returns an instance of
    /// PdsApprovedVendorListCheck_Valid.
    /// </remarks>
    public PdsApprovedVendorListCheck pdsApprovedVendorListCheck()
    {
        return PdsApprovedVendorListCheck::newFromTable(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculatePrepayFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates vendor advance limit and vendor advance available fields.
    /// </summary>
    /// <remarks>
    ///    The vendor advance fields must be recalculated when a purchase order line is added, changed, or
    ///    deleted.
    /// </remarks>
    public void recalculatePrepayFields()
    {
        PurchPrepayTable purchPrepayTable;

        purchPrepayTable = PurchPrepayTable::findPurchId(purchTable.PurchId, true);

        if (purchPrepayTable)
        {
            ttsbegin;
            if (purchPrepayTable.Type == PurchPrepayType::Fixed)
            {
                warning("@AccountsPayable:POAmountChangedAdjustPrepaymentAmountWarningMessage");
            }
            purchPrepayTable.recalculatePrepayLimit();
            purchPrepayTable.recalculateAmounts(false);
            purchPrepayTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchStatus</Name>
				<Source><![CDATA[
    public void updatePurchStatus(PurchLine _purchLineOrig, InventTransIdSum  _inventTransIdSum, boolean _updateHeader)
    {
        super(_purchLineOrig, _inventTransIdSum, _updateHeader);

        this.updateCORWorkflowStates(_purchLineOrig, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        PurchLine purchLine_Orig = purchLine.extensionOrig();

        boolean isDisallowLineRenumberingAllowChangeFromNegativeFlightEnabled = DisallowLineRenumberingAllowChangeFromNegativeFlight::instance().isEnabled();

        if ((!isDisallowLineRenumberingAllowChangeFromNegativeFlightEnabled
            && purchLine.LineNumber                                != purchLine_Orig.LineNumber
            && PurchParameters::find().DisallowLineRenumbering  == NoYes::Yes)
            || (isDisallowLineRenumberingAllowChangeFromNegativeFlightEnabled
            && !this.isRenumberingAllowed(purchLine_Orig.LineNumber)))
        {
            throw error("@SCM:RenumberingOfLinesNotAllowed");
        }

        if (purchLine.VendAccount           != purchLine_Orig.VendAccount   ||
            purchLine.DeliveryDate          != purchLine_Orig.DeliveryDate  ||
            purchLine.ProcurementCategory   != purchLine_Orig.ProcurementCategory)
        {
            if (PurchCORPolicyTable::decentralized(purchLine))
            {
                PurchCORPolicyTable::setLocation(purchLine, true);
            }
            else if (PurchCORPolicyTable::decentralized(purchLine_Orig))
            {
                PurchCORPolicyTable::setLocation(purchLine, false);
            }
        }

        // if the line is lean-subcontracted, then handle qty update
        this.handleSubcontractedQtyUpdate(purchLine_Orig);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRenumberingAllowed</Name>
				<Source><![CDATA[
    private boolean isRenumberingAllowed(TradeLineNumber _origLineNumber)
    {
        if (purchLine.LineNumber == _origLineNumber
            || PurchParameters::find().DisallowLineRenumbering  == NoYes::No
            || (_origLineNumber < 0 && purchLine.LineNumber == -_origLineNumber))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(PurchLine _purchLineOrig)
    {
        super(_purchLineOrig);

        if (PurchPrepayTable::exist(purchTable.PurchId))
        {
            //recalculates prepay available and prepay limit field
            this.recalculatePrepayFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCORWorkflowStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the COR workflow instances that are related to the purchase line.
    /// </summary>
    /// <param name="_purchLineOrig">
    /// The original purchase order line which is updated.
    /// </param>
    /// <param name="_cancelAll">
    ///    A Boolean value that indicates whether to cancel all COR workflow instances.
    /// </param>
    private void updateCORWorkflowStates(PurchLine _purchLineOrig, boolean _cancelAll)
    {
        if (_cancelAll)
        {
            PurchCORDeliveryDueWorkflow::cancelDeliveryDateWorkflow(purchLine);
            PurchCORInvReceivedWorkflow::cancelInvReceivedWorkflow(purchLine);
        }
        else
        {
            // If there is nothing left to be received, existing workflow instances change state
            if (purchLine.PurchStatus != _purchLineOrig.PurchStatus &&
                !purchLine.isOpenOrder() &&
                purchLine.RemainPurchPhysical == 0)
            {
                if (purchLine.isCanceled())
                {
                    PurchCORDeliveryDueWorkflow::cancelDeliveryDateWorkflow(purchLine);
                    PurchCORInvReceivedWorkflow::cancelInvReceivedWorkflow(purchLine);
                }
                else
                {
                    PurchCORDeliveryDueWorkflow::activateCompleteTask(purchLine);
                    PurchCORInvReceivedWorkflow::completeTaskOfInvReceivedWorkflow(purchLine);
                }
            }
            else if (purchLine.DeliveryDate != _purchLineOrig.DeliveryDate)
            {
                // If delivery date is changed, "delivery due" workflow instances should be cancelled.
                PurchCORDeliveryDueWorkflow::cancelDeliveryDateWorkflow(purchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete(boolean _interCompanyForce = false)
    {
        boolean ret;

        ret = super(_interCompanyForce);

        if (ret)
        {
            if (PurchCORRejectsTable::existRejectedPurchLine(purchLine))
            {
                ret = checkFailed("@SYS310672");
            }
        }

        if (ret)
        {
            if (EGAISWaybillSettlement_RU::existsSettlement(purchLine))
            {
                ret = checkFailed(strFmt("@SYP4885948", purchLine.LineNumber));
            }
        }
        


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean      ret;

        ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchLine, TaxItemGroup) :
            case fieldNum(PurchLine, TaxGroup)     :
                if (purchLine.TaxGroup     &&
                    purchLine.TaxItemGroup &&
                    VendTable::find(purchTable.OrderAccount).vatTaxAgent_RU)
                {
                    ret = Tax::checkVATChargeSource_RU(purchTable.purchTable_RU().vatChargeSource_RU, purchLine.TaxGroup, purchLine.TaxItemGroup);
                }
                break;

            case fieldNum(PurchLine, LineNumber)    :
                var purchLine_orig = purchLine.orig();

                if (purchLine_orig.RecId                                != 0
                    && purchLine.LineNumber                             != purchLine_orig.LineNumber
                    && PurchParameters::find().DisallowLineRenumbering  == NoYes::Yes)
                {
                    ret = checkFailed("@SCM:RenumberingOfLinesNotAllowed");
                }
                break;

            case fieldNum(PurchLine, PurchQty)     :
                if (EGAISWaybillSettlement_RU::existsSettlement(purchLine))
                {
                    ret = checkFailed("@SYP4885949");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        
        if (ret)
        {
            if (PurchCORRejectsTable::existRejectedPurchLine(purchLine))
            {
                ret = checkFailed("@SYS310673");
            }
        }
        if (ret && #PdsMRCEnabled
            && PdsMRCParameters::find().RegulationWarningOnPurchase)
        {
            if (purchLine.PurchQty > 0)
            {
                PdsMRCRegulated::checkRegulatedFromBuffer(purchLine);
            }
        }
        if (ret && purchLine.ProjId && purchTable.isProjectSalesItemReqPO())
        {
            ProjValCheckTrans   projValCheckTrans = new ProjValCheckTrans();
            ret = ret & projValCheckTrans.validateMandatory(purchLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchLineType construct(PurchLine purchLine, PurchTable purchTable = purchLine.purchTable())
    {
        if (purchLine.ProjId)
        {
            return new PurchLineType_ProjectPurch(purchLine,purchTable);
        }
        else
        {
            return new PurchLineType_Purch(purchLine,purchTable);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>