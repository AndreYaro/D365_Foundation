<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchInvoice4PaymJournalCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchInvoice4PaymJournalCreate_RU</c> class creates a purchase payment invoice journal.
/// </summary>
class PurchInvoice4PaymJournalCreate_RU extends FormletterJournalCreate
{
    VendInvoice4PaymJour_RU     invoice4PaymJour;
    VendInvoice4PaymTrans_RU    invoice4PaymTrans;

    PurchTable                  purchTable;
    PurchParmTable              purchParmTable;
    PurchParmUpdate             purchParmUpdate;

    PurchTotals                 purchTotals;

    Num                         internalNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    public NumberSeq allocateNumAndVoucher()
    {
        RefRecId                invoice4PaymSeqID;
        NumberSequenceDatatype  invoice4PaymDataType;
        NumberSeq               ret;

        if (purchTable.NumberSequenceGroup)
        {
            invoice4PaymDataType = NumberSequenceDatatype::find(PurchParameters::numRefPurchInvoice4PaymId_RU().NumberSequenceDatatype);
            invoice4PaymSeqID = NumberSequenceGroupRef::findNaturalKey(invoice4PaymDataType.DatatypeId,
                                                                       NumberSeqScopeFactory::createDefaultScope().getId(),
                                                                       purchTable.NumberSequenceGroup).NumberSequenceId;

            if (! invoice4PaymSeqID)
            {
                invoice4PaymSeqID = PurchParameters::numRefPurchInvoice4PaymId_RU().NumberSequenceId;
            }

            ret = NumberSeq::newGetNumFromId(invoice4PaymSeqID,
                                             false,
                                             false,
                                             null,
                                             false,
                                             UnknownNoYes::No);
        }
        else
        {
            ret = NumberSeq::newGetNum(PurchParameters::numRefPurchInvoice4PaymId_RU(),
                                       false,
                                       false,
                                       UnknownNoYes::No);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected void createJournalHeader()
    {
        invoice4PaymJour.initFromPurchTotals(purchTotals);

        invoice4PaymJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _purchParmLine)
    {
        PurchParmLine purchParmLine = _purchParmLine as PurchParmLine;

        invoice4PaymTrans.clear();
        invoice4PaymTrans.initValue();

        invoice4PaymTrans.initFromVendInvoice4PaymJour(invoice4PaymJour);
        invoice4PaymTrans.initFromPurchLine           (purchParmLine.purchLine());
        invoice4PaymTrans.initFromPurchParmLine       (purchParmLine);
        invoice4PaymTrans.setLineNum                  (lineNum);

        invoice4PaymTrans.Qty           = purchParmLine.ReceiveNow;
        invoice4PaymTrans.PdsCWQty      = purchParmLine.PdsCWReceiveNow;

        invoice4PaymTrans.LineAmount    = purchParmLine.lineAmountExclTax(purchParmTable.TransDate);

        invoice4PaymTrans.LineAmountTax = purchParmLine.LineAmount - invoice4PaymTrans.LineAmount;

        this.insertJournalLine(invoice4PaymTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _purchParmLine)
    {
        PurchParmLine purchParmLine = _purchParmLine as PurchParmLine;
        VendInvoice4PaymPurchLink_RU invoice4PaymPurchLink;

        invoice4PaymPurchLink.clear();
        invoice4PaymPurchLink.OrigPurchId = purchParmLine.OrigPurchId;
        invoice4PaymPurchLink.initFromInvoice4PaymJour(invoice4PaymJour);
        this.insertJournalLink(invoice4PaymPurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public Common getJournal()
    {
        return invoice4PaymJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    protected container getNumAndVoucher()
    {
        container numAndVoucher;

        if (! this.proforma() && journalNumber == '')
        {
            numberSeq     = this.allocateNumAndVoucher();
            if (numberSeq)
            {
                numAndVoucher = [ internalNumber, numberSeq.num(), "" ];
            }
        }

        return numAndVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        invoice4PaymJour.clear();
        invoice4PaymJour.initValue();

        [ journalNumber, internalNumber, voucher ] = this.getNumAndVoucher();

        invoice4PaymJour.ParmId                 = purchParmUpdate.ParmId;
        invoice4PaymJour.OffSessionId           = purchParmTable.OffSessionId_RU;
        invoice4PaymJour.Invoice4PaymId         = purchParmTable.Num;
        invoice4PaymJour.FixedDueDate           = purchParmTable.FixedDueDate;

        invoice4PaymJour.InternalInvoice4PaymId = internalNumber;
        invoice4PaymJour.Invoice4PaymDate       = this.updateDate();

        invoice4PaymJour.initFromPurchTable(purchTable);

        invoice4PaymJour.setDocNum(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        purchTable = purchParmTable.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        purchTotals = PurchTotals::newParmTable(purchParmTable,
                                                purchParmUpdate.SpecQty,
                                                purchParmUpdate.ParmId,
                                                purchParmUpdate.SumPurchId,
                                                documentStatus);
        purchTotals.calc();
        this.parmTax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected TableId journalLineTableId()
    {
        return tableNum(VendInvoice4PaymTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    protected TableId linksTableId()
    {
        return tableNum(VendInvoice4PaymPurchLink_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefPurchInvoice4PaymId_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;

        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _parmUpdate as PurchParmUpdate;

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    protected boolean proforma()
    {
        return purchParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchTotals.recordListPurchParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected Object totals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    protected Common typeParmLine()
    {
        PurchParmLine purchParmLine;
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the transaction Date.
    /// </summary>
    /// <returns>
    ///   A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return purchParmTable.updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchInvoice4PaymJournalCreate_RU construct()
    {
        return new PurchInvoice4PaymJournalCreate_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>