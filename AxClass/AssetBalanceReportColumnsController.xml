<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalanceReportColumnsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetBalanceReportColumnsController extends SrsReportRunController implements BatchRetryable
{
    /// <summary>
    /// This method sets the contract value prior to running the report.
    /// </summary>
    /// <remarks>
    /// This is an important method and it should be used by developers to add the extension code before
    /// the report is executed.This method is always called.
    /// </remarks>
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        AssetBalanceReportColumnsContract contract;

        super();
        // <GEEHU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoHU, #IsoLV]))
        {
        // </GEEHU>
            contract = this.parmReportContract().parmRdpContract() as AssetBalanceReportColumnsContract;
            contract.parmVisibleFR(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]));
        // <GEEHU>
        }
        // </GEEHU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetBalanceReportColumnsController controller = new AssetBalanceReportColumnsController();
        controller.parmArgs(_args);
        AssetBalanceReportColumnsController::runAssetBalanceReport(controller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAssetBalanceReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters and executes the report.
    /// </summary>
    /// <param name="controller">The <c>AssetBalanceReportColumnsController</c> object.</param>
    public static void runAssetBalanceReport(AssetBalanceReportColumnsController controller)
    {
        // <GEEHU>
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00035, funcName());
            controller.parmReportName(ssrsReportStr(AssetBalanceReportColumnsHU, Report));
        }
        // </GEEHU>
        // <GEELV>
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00002, funcName());
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00035, funcName());
            controller.parmReportName(ssrsReportStr(AssetBalanceReportColumnsLV, Report));
        }
        else
        {
        // </GEELV>
            controller.parmReportName(ssrsReportStr(AssetBalanceReportColumns, Report));
        // <GEELV>
        }
        // </GEELV>
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>