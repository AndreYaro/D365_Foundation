<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanReportHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanReportHelper</c> is the helper class for the budget plan SSRS reports to provide validation for report parameters,
/// setting the values of report group option parameters and conversion of plan amount to accounting amount.
/// </summary>
public class BudgetPlanReportHelper
{
    #BudgetFaults
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePlanAmountToAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an amount in the accounting currency of the company using budget exchange rates.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount to convert to the accounting currency of the company.
    /// </param>
    /// <param name="_currency">
    /// The currency of the specified amount.
    /// </param>
    /// <param name="_exchangeDate">
    /// The date used to determine the exchange rate for the calculation.
    /// </param>
    /// <param name="_exchangeRateType">
    /// The exchange rate type to use; optional.
    /// </param>
    /// <param name="_suppressErrors">
    /// Determines if messages should be logged for validation failures; optional.
    /// </param>
    /// <returns>
    /// The amount in the accounting currency of the ledger.
    /// </returns>
    public static AmountMST calculatePlanAmountToAccountingAmount(
        AmountCur             _amountCur,
        CurrencyCode          _currency,
        date                  _exchangeDate,
        ExchangeRateTypeRecId _exchangeRateType = 0,
        boolean               _suppressErrors = false)
    {
        AmountMST              amountMST;
        Ledger                 ledger;
        CurrencyExchangeHelper currencyHelper;

        if (_amountCur != 0 && BudgetPlanReportHelper::validateCurrency(_currency, _suppressErrors))
        {
            ledger         = Ledger::find(Ledger::current());
            currencyHelper = CurrencyExchangeHelper::newExchangeDate(ledger.RecId, _exchangeDate);

            if (_exchangeRateType)
            {
                currencyHelper.parmExchangeRateTypeRecId(_exchangeRateType);
            }
            else
            {
                currencyHelper.parmExchangeRateTypeRecId(ledger.BudgetExchangeRateType);
            }

            amountMST = currencyHelper.calculateTransactionToAccounting(_currency, _amountCur, true);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanReportGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the data for the report group option parameter that is passed as an argument to this method.
    /// </summary>
    /// <param name="_reportGroupOption">
    /// The selected element of the <c>BudgetPlanReportGroupOption</c> enum.
    /// </param>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanLine">
    /// The <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name="_budgetPlanningProcess">
    /// The <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_internalOrganization">
    /// The <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// The value corresponding to the report group option parameter that is selected by the user.
    /// </returns>
    public static BudgetPlanReportGroup getBudgetPlanReportGroupData(
        BudgetPlanReportGroupOption                 _reportGroupOption,
        BudgetPlanHeader                            _budgetPlanHeader,
        BudgetPlanLine                              _budgetPlanLine,
        BudgetPlanningProcess                       _budgetPlanningProcess,
        OMInternalOrganization                      _internalOrganization)
    {
        BudgetPlanReportGroup       reportGroup;
        BudgetCycle                 budgetCycle;
        BudgetPlanningStage         budgetPlanningStage;
        BudgetPlanHeader            budgetPlanHeader;
        BudgetPlanPriority          budgetPlanPriority;
        UserGroupInfo               userGroupInfo;

        switch (_reportGroupOption)
        {
            case BudgetPlanReportGroupOption::Priority:
                select firstonly Name from budgetPlanPriority
                     where budgetPlanPriority.RecId == _budgetPlanHeader.BudgetPlanPriority;

                reportGroup = budgetPlanPriority.Name;
                break;

            case BudgetPlanReportGroupOption::Rank:
                reportGroup = int2str(_budgetPlanHeader.Rank);
                break;

            case BudgetPlanReportGroupOption::ResponsibilityCenter:
                reportGroup = _internalOrganization.Name;
                break;

            case BudgetPlanReportGroupOption::BudgetPlanCycle:
                select firstonly Name from budgetCycle
                    where budgetCycle.RecId == _budgetPlanningProcess.BudgetCycle;

                reportGroup = budgetCycle.Name;
                break;

            case BudgetPlanReportGroupOption::BudgetPlanningProcess:
                reportGroup = _budgetPlanningProcess.Name;
                break;

            case BudgetPlanReportGroupOption::BudgetPlanningStage:
                select firstonly Name from budgetPlanningStage
                    where budgetPlanningStage.RecId == _budgetPlanHeader.BudgetPlanningStage;

                reportGroup = budgetPlanningStage.Name;
                break;

            case BudgetPlanReportGroupOption::BudgetPlanPreparer:
                reportGroup = HcmWorker::worker2Name(_budgetPlanHeader.BudgetPlanPreparer);
                break;

            case BudgetPlanReportGroupOption::ParentBudgetPlan:
                select firstonly Name from budgetPlanHeader
                    where budgetPlanHeader.RecId == _budgetPlanHeader.ParentBudgetPlanHeader;

                reportGroup = budgetPlanHeader.Name;
                break;

            case BudgetPlanReportGroupOption::BudgetPlanSecurityGroup:
                select firstonly Name from userGroupInfo
                    where userGroupInfo.Id == _budgetPlanHeader.PlanningUserGroup;

                reportGroup = userGroupInfo.Name;
                break;

            case BudgetPlanReportGroupOption::BudgetPlanWorkflowStatus:
                reportGroup = enum2str(_budgetPlanHeader.WorkflowStatus);
                break;

            case BudgetPlanReportGroupOption::BudgetPlanDocumentStatus:
                reportGroup = enum2str(_budgetPlanHeader.DocumentStatus);
                break;
        }

        return  reportGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanReportGroupDataExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the data for the report group option parameter that is passed as an argument to this method.
    /// </summary>
    /// <param name="_budgetPlanReportGroupOptionExtended">
    /// The selected element of the <c>BudgetPlanReportGroupOptionExtended</c> enum.
    /// </param>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanLine">
    /// The <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name="_budgetPlanningProcess">
    /// The <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_internalOrganization">
    /// The <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// The value corresponding to the report group option parameter that is selected by the user.
    /// </returns>
    public static BudgetPlanReportGroup getBudgetPlanReportGroupDataExtended(
        BudgetPlanReportGroupOptionExtended     _budgetPlanReportGroupOptionExtended,
        BudgetPlanHeader                        _budgetPlanHeader,
        BudgetPlanLine                          _budgetPlanLine,
        BudgetPlanningProcess                   _budgetPlanningProcess,
        OMInternalOrganization                  _internalOrganization)
    {
        BudgetPlanReportGroup       reportGroup;
        HcmPositionForecast         hcmPositionForecast;
        HcmPositionForecastScenario hcmPositionForecastScenario;
        BudgetPlanLine              budgetPlanLine;
        ProjTable                   projTable;
        AssetTable                  assetTable;
        BudgetPlanProposedProject   budgetPlanProposedProject;
        BudgetPlanProposedAsset     budgetPlanProposedAsset;

        reportGroup = BudgetPlanReportHelper::getBudgetPlanReportGroupData(
            enum2int(_budgetPlanReportGroupOptionExtended),
            _budgetPlanHeader,
            _budgetPlanLine,
            _budgetPlanningProcess,
            _internalOrganization);

        if (!reportGroup)
        {
            switch (_budgetPlanReportGroupOptionExtended)
            {
                case BudgetPlanReportGroupOptionExtended::DocumentNumber:
                    reportGroup = _budgetPlanHeader.DocumentNumber;
                    break;

                case BudgetPlanReportGroupOptionExtended::Position:
                    select firstOnly Position from hcmPositionForecast
                        exists join hcmPositionForecastScenario
                            where hcmPositionForecastScenario.PositionForecast == hcmPositionForecast.RecId
                        exists join budgetPlanLine
                            where budgetPlanLine.RecId == _budgetPlanLine.RecId
                                && budgetPlanLine.PositionScenario   == hcmPositionForecastScenario.RecId;

                    reportGroup = hcmPositionForecast.positionId();
                    break;

                case BudgetPlanReportGroupOptionExtended::Project:
                    select firstonly Name from projTable
                        join ProjectId from budgetPlanLine
                        where budgetPlanLine.RecId == _budgetPlanLine.RecId
                            && projTable.ProjId == budgetPlanLine.ProjectId;

                    reportGroup = projTable.Name;
                    break;

                case BudgetPlanReportGroupOptionExtended::FixedAsset:
                    select firstonly Name from assetTable
                        join AssetId from budgetPlanLine
                        where budgetPlanLine.RecId == _budgetPlanLine.RecId
                            && assetTable.AssetId == budgetPlanLine.AssetId;

                    reportGroup = assetTable.Name;
                    break;

                case BudgetPlanReportGroupOptionExtended::ProposedProject:
                    select firstonly Name from budgetPlanProposedProject
                        join ProposedProject from budgetPlanLine
                        where budgetPlanLine.RecId == _budgetPlanLine.RecId
                            && budgetPlanProposedProject.RecId == budgetPlanLine.ProposedProject;

                    reportGroup = budgetPlanProposedProject.Name;
                    break;

                case BudgetPlanReportGroupOptionExtended::ProposedFixedAsset:
                    select firstonly Name from budgetPlanProposedAsset
                        join ProposedAsset from budgetPlanLine
                        where budgetPlanLine.RecId == _budgetPlanLine.RecId
                            && budgetPlanProposedAsset.RecId == budgetPlanLine.ProposedAsset;

                    reportGroup = budgetPlanProposedAsset.Name;
                    break;
            }
        }

        return reportGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedMonetaryScenarioNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Set with localized <c>BudgetPlanScenario</c> records for monetary scenarios and then returns the records in a container.
    /// </summary>
    /// <returns>
    /// The localized <c>BudgetPlanScenario</c> records.
    /// </returns>
    private static container getLocalizedMonetaryScenarioNames()
    {
        BudgetPlanScenario              budgetPlanScenario;
        container                       innerContainer, budgetPlanScenarioContainer;

        while select RecId from budgetPlanScenario
            where budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary
        {
            innerContainer = [BudgetPlanScenarioTranslation::getLocalizedName(budgetPlanScenario.RecId), BudgetPlanScenarioTranslation::getLocalizedDescription(budgetPlanScenario.RecId)];
            budgetPlanScenarioContainer += innerContainer;
        }

        return budgetPlanScenarioContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedScenarioNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Set with localized <c>BudgetPlanScenario</c> records and then returns the records in a container.
    /// </summary>
    /// <returns>
    /// The localized <c>BudgetPlanScenario</c> records.
    /// </returns>
    private static container getLocalizedScenarioNames()
    {
        BudgetPlanScenario              budgetPlanScenario;
        container                       innerContainer, budgetPlanScenarioContainer;

        while select RecId from budgetPlanScenario
        {
            innerContainer = [BudgetPlanScenarioTranslation::getLocalizedName(budgetPlanScenario.RecId), BudgetPlanScenarioTranslation::getLocalizedDescription(budgetPlanScenario.RecId)];
            budgetPlanScenarioContainer += innerContainer;
        }

        return budgetPlanScenarioContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidGroupOptionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of group option field.
    /// </summary>
    /// <param name="_firstGroupOption">
    /// The first group option field.
    /// </param>
    /// <param name="_secondGroupOption">
    /// The second group option field.
    /// </param>
    /// <param name="_thirdGroupOption">
    /// The third group option field.
    /// </param>
    /// <returns>
    /// true if a valid value is selected in group option field, otherwise false.
    /// </returns>
    public static boolean isValidGroupOptionValue(
        BudgetPlanReportGroupOption _firstGroupOption,
        BudgetPlanReportGroupOption _secondGroupOption,
        BudgetPlanReportGroupOption _thirdGroupOption)
    {
        boolean isValid = true;

        if (_firstGroupOption   == _secondGroupOption ||
            _firstGroupOption   == _thirdGroupOption  ||
            _secondGroupOption  == _thirdGroupOption)
        {
            isValid = checkFailed("@GLS150352");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budget plan scenario records.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form string control to bind.
    /// </param>
    /// <param name="_restrictToMonetaryScenarios">
    /// Boolean value to indicate if only monetary scenarios should be shown.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void lookupBudgetPlanScenario(FormStringControl _formStringControl,
                                                boolean _restrictToMonetaryScenarios = false)
    {
        SysTableLookup        tableLookup;
        BudgetPlanScenarioTmp budgetPlanScenarioTmp;
        container             packedLocalizedScenarios;
        Counter               counter;

        if (!_formStringControl)
        {
            throw error(Error::missingParameter(null));
        }

        tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanScenarioTmp), _formStringControl, true);

        // Get the scenario record container
        if (_restrictToMonetaryScenarios)
        {
            packedLocalizedScenarios = BudgetPlanReportHelper::getLocalizedMonetaryScenarioNames();
        }
        else
        {
            packedLocalizedScenarios = BudgetPlanReportHelper::getLocalizedScenarioNames();
        }

        for (counter = 1; counter <= conLen(packedLocalizedScenarios); counter++)
        {
            budgetPlanScenarioTmp.Name = conPeek(packedLocalizedScenarios, counter);
            counter++;
            budgetPlanScenarioTmp.Description = conPeek(packedLocalizedScenarios, counter);
            budgetPlanScenarioTmp.insert();
        }

        tableLookup.parmTmpBuffer(budgetPlanScenarioTmp);

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTmp, Name));
        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTmp, Description));

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the budget plan scenario name.
    /// </summary>
    /// <param name="_budgetPlanScenarioName">
    /// The budget plan scenario name.
    /// </param>
    /// <param name="_reportName">
    /// The name of the report.
    /// </param>
    /// <returns>
    /// true when the name is valid; otherwise, false.
    /// </returns>
    public static boolean validateBudgetPlanScenario(BudgetPlanScenarioName _budgetPlanScenarioName, str _reportName = '')
    {
        boolean isValid = true;
        BudgetPlanScenario  budgetPlanScenario;

        budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(_budgetPlanScenarioName);

        if (!budgetPlanScenario)
        {
            isValid = checkFailed(strfmt("@SYS316757", tablepname(BudgetPlanScenario)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the currency that is involved in a budget transaction.
    /// </summary>
    /// <param name="_currencyCode">
    /// The currency to validate.
    /// </param>
    /// <param name="_suppressErrors">
    /// Determines if messages should be logged for validation failures; optional.
    /// </param>
    /// <returns>
    /// true if the specified currency is valid; otherwise, false.
    /// </returns>
    public static boolean validateCurrency(
        CurrencyCode _currencyCode,
        boolean _suppressErrors = false)
    {
        boolean isValid = true;
        Ledger primaryLedger;

        // Validate that the currency exists.
        if (Currency::exist(_currencyCode) == false)
        {
            isValid = false;

            if (!_suppressErrors)
            {
                checkFailed(strFmt("@SYS117888", _currencyCode, curext()), #BudgetTransactionCurrencyDoesNotExist);
            }
        }
        else
        {
            primaryLedger = Ledger::find(Ledger::current());

            // Validate that the Default budget rate type is defined for the ledger
            if (primaryLedger.BudgetExchangeRateType == 0)
            {
                isValid = false;

                if (!_suppressErrors)
                {
                    checkFailed("@SYS323933", #BudgetRateTypeNotDefinedForLedger);
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>