<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceAuditEvents</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceAuditEvents</c> implements the audit event related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public class RetailTransactionServiceAuditEvents
{
    private static container searchCriteriaNamesMapping = [
            [fieldStr(RetailLog, EventType),                            tableNum(RetailLog),                     fieldStr(RetailLog, EventType)],
            [fieldStr(RetailLogTransactionReference, RefChannel),       tableNum(RetailLogTransactionReference), fieldStr(RetailLogTransactionReference, RefChannel)],
            [fieldStr(RetailLogTransactionReference, RefStore),         tableNum(RetailLogTransactionReference), fieldStr(RetailLogTransactionReference, RefStore)],
            [fieldStr(RetailLogTransactionReference, RefTerminal),      tableNum(RetailLogTransactionReference), fieldStr(RetailLogTransactionReference, RefTerminal)],
            [fieldStr(RetailLogTransactionReference, RefTransactionId), tableNum(RetailLogTransactionReference), fieldStr(RetailLogTransactionReference, RefTransactionId)]
    ];
    
    private const str eventDateTimeFormat                      = 'yyyy-MM-dd hh:mm:ss';

    private const str nameAuditEventsRoot                      = 'AuditEvents';
    private const str nameAuditEventSection                    = 'AuditEvent';

    private const str nameAuditEventFieldChannel               = fieldStr(RetailLog, ChannelId);
    private const str nameAuditEventFieldStore                 = fieldStr(RetailLog, StoreId);
    private const str nameAuditEventFieldTerminal              = fieldStr(RetailLog, TerminalId);
    private const str nameAuditEventFieldRetailLogId           = fieldStr(RetailLog, RetailLogId);
    private const str nameAuditEventFieldUploadType            = fieldStr(RetailLog, UploadType);
    private const str nameAuditEventFieldLogDate               = fieldStr(RetailLog, LogDate);
    private const str nameAuditEventFieldLogTime               = fieldStr(RetailLog, LogTime);
    private const str nameAuditEventFieldLogLevel              = fieldStr(RetailLog, LogLevel);
    private const str nameAuditEventFieldLogString             = fieldStr(RetailLog, LogString);
    private const str nameAuditEventFieldEventType             = fieldStr(RetailLog, EventType);
    private const str nameAuditEventFieldStaffId               = fieldStr(RetailLog, StaffId);
    private const str nameAuditEventFieldCodeUnit              = fieldStr(RetailLog, CodeUnit);
    private const str nameAuditEventFieldDurationInMillisec    = fieldStr(RetailLog, DurationInMilliSec);
    private const str nameAuditEventFieldBatchId               = fieldStr(RetailLog, BatchId);

    private const str nameAuditEventSectionReference           = 'Reference';

    private const str nameAuditEventFieldReferenceId           = fieldStr(RetailLogTransactionReference, ReferenceId);
    private const str nameAuditEventFieldRefChannel            = fieldStr(RetailLogTransactionReference, RefChannel);
    private const str nameAuditEventFieldRefStore              = fieldStr(RetailLogTransactionReference, RefStore);
    private const str nameAuditEventFieldRefTerminal           = fieldStr(RetailLogTransactionReference, RefTerminal);
    private const str nameAuditEventFieldRefTransactionId      = fieldStr(RetailLogTransactionReference, RefTransactionId);

    private const str nameAuditEventSectionFiscalTransactions  = 'FiscalTransactions';
    
    private const str nameAuditEventFiscalTransactionFieldLineNum          = fieldStr(RetailLogFiscalTransaction, LineNum);
    private const str nameAuditEventFiscalTransactionFieldRegisterResponse = fieldStr(RetailLogFiscalTransaction, RegisterResponse);
    private const str nameAuditEventFiscalTransactionFieldFieldTransDate   = fieldStr(RetailLogFiscalTransaction, TransDate);
    private const str nameAuditEventFiscalTransactionFieldFieldTransTime   = fieldStr(RetailLogFiscalTransaction, TransTime);

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateAuditEventExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Valdiates whether a audit event of specified search criteria exists.
    /// </summary>
    /// <param name = "_xmlArgumentString">
    /// The XML document containing the identifier(s) for the entity whose details are to be retrieved.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if a specified audit event exist, otherwise false.
    /// </returns>
    public static container validateAuditEventExists(str _xmlArgumentString = '')
    {
        boolean success = true;
        str error = '';

        QueryRun qrAuditEvent;
        boolean auditEventExists = false;

        try
        {
            XmlElement argsRoot = RetailTransactionServiceUtilities::ParseRootElement(_xmlArgumentString);
            
            if (argsRoot)
            {
                qrAuditEvent = new QueryRun(RetailTransactionServiceAuditEvents::buildAuditEventsQuery(argsRoot));
                auditEventExists = SysQuery::countLoops(qrAuditEvent);
            }
            
        }
        catch (Exception::Error)
        {
            success = false;
            error = RetailTransactionServiceUtilities::getInfologMessages(Global::infologLine());
            eventSource.WriteEventAuditEventExistsError(funcName());
        }

        return [success, error, auditEventExists];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAuditEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register a audit event.
    /// </summary>
    /// <param name="_auditEventXmlStr">
    /// The input xml string containing the audit event information.
    /// </param>
    /// <returns>
    /// <c>Container</c> with the status as true if the creation of record is successful and false otherwise.
    /// </returns>
    public static container registerAuditEvent(str _auditEventXmlStr)
    {
        boolean success = false;
        str error = '';

        // Create audit event
        RetailLog retailLog;
        retailLog.initValue();

        try
        {
            XmlElement argsRoot = RetailTransactionServiceUtilities::ParseRootElement(_auditEventXmlStr);

            if (argsRoot)
            {
                ttsbegin;

                retailLog.ChannelId = str2recId(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldChannel));
                retailLog.StoreId = RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldStore);
                retailLog.TerminalId = RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldTerminal);
                retailLog.RetailLogId = str2Int64(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldRetailLogId));
                retailLog.UploadType = str2int(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldUploadType));
                retailLog.LogDate = str2Date(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldLogDate), 213);
                retailLog.LogTime = str2int(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldLogTime));
                retailLog.LogLevel = str2int(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldLogLevel));
                retailLog.LogString = RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldLogString);
                retailLog.EventType = any2Enum(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldEventType));
                retailLog.StaffId = RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldStaffId);
                retailLog.CodeUnit = RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldCodeUnit);
                retailLog.DurationInMillisec = str2int(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldDurationInMillisec));
                retailLog.BatchId = str2Int64(RetailTransactionServiceUtilities::GetValue(argsRoot, nameAuditEventFieldBatchId));

                retailLog.insert();

                XmlElement reference = argsRoot.getNamedElement(nameAuditEventSectionReference);

                if (reference)
                {
                    RetailLogTransactionReference retailLogTransRef;

                    retailLogTransRef.ChannelId  = retailLog.ChannelId;
                    retailLogTransRef.StoreId = retailLog.StoreId;
                    retailLogTransRef.TerminalId = retailLog.TerminalId;
                    retailLogTransRef.RetailLogId = retailLog.RetailLogId;
                    retailLogTransRef.UploadType = retailLog.UploadType;
                    
                    retailLogTransRef.ReferenceId = str2recId(RetailTransactionServiceUtilities::GetValue(reference, nameAuditEventFieldReferenceId));
                    retailLogTransRef.RefChannel = str2recId(RetailTransactionServiceUtilities::GetValue(reference, nameAuditEventFieldRefChannel));
                    retailLogTransRef.RefStore = RetailTransactionServiceUtilities::GetValue(reference, nameAuditEventFieldRefStore);
                    retailLogTransRef.RefTerminal = RetailTransactionServiceUtilities::GetValue(reference, nameAuditEventFieldRefTerminal);
                    retailLogTransRef.RefTransactionId = RetailTransactionServiceUtilities::GetValue(reference, nameAuditEventFieldRefTransactionId);

                    retailLogTransRef.insert();
                }

                XmlElement fiscalTransactions = argsRoot.getNamedElement(nameAuditEventSectionFiscalTransactions);

                if (fiscalTransactions)
                {
                    XmlNodeList fiscalTransactionsList = fiscalTransactions.childNodes();

                    if (fiscalTransactionsList != null && fiscalTransactionsList.length() > 0)
                    {
                        for (int i = 0; i < fiscalTransactionsList.length(); i++)
                        {
                            XmlNode fiscalTransactionNode = fiscalTransactionsList.item(i);

                            RetailLogFiscalTransaction fiscalTransaction;

                            fiscalTransaction.clear();

                            fiscalTransaction.Channel  = retailLog.ChannelId;
                            fiscalTransaction.Store = retailLog.StoreId;
                            fiscalTransaction.Terminal = retailLog.TerminalId;
                            fiscalTransaction.RetailLogId = retailLog.RetailLogId;
                            fiscalTransaction.UploadType = retailLog.UploadType;
                    
                            fiscalTransaction.RegisterResponse = RetailTransactionServiceUtilities::GetValue(fiscalTransactionNode, nameAuditEventFiscalTransactionFieldRegisterResponse);
                            fiscalTransaction.LineNum = str2Num(RetailTransactionServiceUtilities::GetValue(fiscalTransactionNode, nameAuditEventFiscalTransactionFieldLineNum));
                            fiscalTransaction.TransDate = str2Date(RetailTransactionServiceUtilities::GetValue(fiscalTransactionNode, nameAuditEventFiscalTransactionFieldFieldTransDate), 213);
                            fiscalTransaction.TransTime = str2int(RetailTransactionServiceUtilities::GetValue(fiscalTransactionNode, nameAuditEventFiscalTransactionFieldFieldTransTime));

                            fiscalTransaction.insert();
                        }
                    }
                }

                ttscommit;

                success = true;

            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            error = "@RET2382";
            eventSource.WriteEventRegisterAuditEventError(funcName(), 
                                                          enum2symbol(enumnum(RetailAuditEventType), retailLog.EventType), 
                                                          enum2symbol(enumnum(RetailAuditEventUploadType), retailLog.UploadType),
                                                          retailLog.ChannelId);
        }

        return [success, error];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditEventList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets audit event list.
    /// </summary>
    /// <param name = "_xmlArgumentString">
    /// The XML document containing the identifier(s) for the entity whose details are to be retrieved.
    /// </param>
    /// <returns><c>Container</c> with success value, error description (if any) and audit event list serialized to XML.</returns>
    public static container getAuditEventList(str _xmlArgumentString = '')
    {
        QueryRun qrAuditEvent;
        boolean success = true;
        str error = '';
        RetailLog retailLog;
        RetailLogTransactionReference retailLogTransactionReference;
        XmlDocument result;
        XmlElement xmlRoot, xmlAuditEvent;

        try
        {
            XmlElement argsRoot = RetailTransactionServiceUtilities::ParseRootElement(_xmlArgumentString);

            result = RetailTransactionServiceUtilities::getXmlDocumentForSerializedEntities();
            xmlRoot = result.createElement(nameAuditEventsRoot);
            xmlRoot.setAttribute('xmlns', RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());

            if (argsRoot)
            {

                qrAuditEvent = new QueryRun(RetailTransactionServiceAuditEvents::buildAuditEventsQuery(argsRoot));
                while (qrAuditEvent.next())
                {
                    retailLog = qrAuditEvent.get(tableNum(retailLog));
                    retailLogTransactionReference = qrAuditEvent.get(tableNum(retailLogTransactionReference));
                    xmlAuditEvent = RetailTransactionServiceAuditEvents::serializeAuditEvent(result, retailLog, retailLogTransactionReference);
                    xmlRoot.appendChild(xmlAuditEvent);
                }
            }
            result.appendChild(xmlRoot);
        }
        catch (Exception::Error)
        {
            success = false;
            error = RetailTransactionServiceUtilities::getInfologMessages(Global::infologLine());
            eventSource.WriteEventGetAuditEventListError(funcName());
        }

        return [success, error, result.toString()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAuditEventsQuery</Name>
				<Source><![CDATA[
    private static Query buildAuditEventsQuery (XmlElement _argsRoot)
    {
        Query queryAuditEvent;
        QueryBuildDataSource qbdsRetailLog;
        QueryBuildDataSource qbdsRetailLogTransRef;
        QueryFilter queryFilter;

        queryAuditEvent = new Query();

        qbdsRetailLog = queryAuditEvent.addDataSource(tableNum(RetailLog));
        qbdsRetailLogTransRef = qbdsRetailLog.addDataSource(tableNum(RetailLogTransactionReference));

        qbdsRetailLogTransRef.joinMode(JoinMode::OuterJoin);
        qbdsRetailLogTransRef.relations(true);
        qbdsRetailLogTransRef.fetchMode(QueryFetchMode::One2One);

        for (int i = 1; i <= conLen(searchCriteriaNamesMapping); i++)
        {
            str elementValue;
            str elementName;
            TableId mappedTableId;
            str mappedFieldName;

            [elementName, mappedTableId, mappedFieldName] = conPeek(searchCriteriaNamesMapping, i);
                
            elementValue = RetailTransactionServiceUtilities::GetValue(_argsRoot, elementName);

            if (elementValue)
            {
                queryFilter = queryAuditEvent.addQueryFilter(queryAuditEvent.dataSourceTable(mappedTableId), mappedFieldName);
                queryFilter.value(queryValue(elementValue));
            }
        }

        return queryAuditEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeAuditEvent</Name>
				<Source><![CDATA[
    private static XmlElement serializeAuditEvent(XmlDocument _xmlDoc, RetailLog _retailLog, RetailLogTransactionReference _retailLogTransactionReference)
    {
        XmlElement xmlRetailLog, xmlTransactionReference, xmlChildRecord;
        System.DateTime eventDateTime;

        xmlRetailLog = _xmlDoc.createElement(nameAuditEventSection);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldChannel);
        xmlChildRecord.innerText(int642Str(_retailLog.ChannelId));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldStore);
        xmlChildRecord.innerText(_retailLog.StoreId);
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldTerminal);
        xmlChildRecord.innerText(_retailLog.terminalId);
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldRetailLogId);
        xmlChildRecord.innerText(int642Str(_retailLog.RetailLogId));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldUploadType);
        xmlChildRecord.innerText(int2Str(_retailLog.UploadType));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldLogDate);
        eventDateTime = DateTimeUtil::newDateTime(_retailLog.LogDate, _retailLog.LogTime);
        xmlChildRecord.innerText(eventDateTime.ToString(eventDateTimeFormat));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldLogLevel);
        xmlChildRecord.innerText(int2Str(_retailLog.LogLevel));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldLogString);
        xmlChildRecord.innerText(_retailLog.LogString);
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldEventType);
        xmlChildRecord.innerText(int2str(enum2int(_retailLog.EventType)));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldStaffId);
        xmlChildRecord.innerText(_retailLog.StaffId);
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldBatchId);
        xmlChildRecord.innerText(int642Str(_retailLog.BatchId));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldCodeUnit);
        xmlChildRecord.innerText(_retailLog.CodeUnit);
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldDurationInMillisec);
        xmlChildRecord.innerText(int2str(_retailLog.durationInMilliSec));
        xmlRetailLog.appendChild(xmlChildRecord);

        xmlTransactionReference = _xmlDoc.createElement(nameAuditEventSectionReference);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldReferenceId);
        xmlChildRecord.innerText(int642Str(_retailLogTransactionReference.ReferenceId));
        xmlTransactionReference.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldRefChannel);
        xmlChildRecord.innerText(int642str(_retailLogTransactionReference.RefChannel));
        xmlTransactionReference.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldRefStore);
        xmlChildRecord.innerText(_retailLogTransactionReference.RefStore);
        xmlTransactionReference.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldRefTerminal);
        xmlChildRecord.innerText(_retailLogTransactionReference.RefTerminal);
        xmlTransactionReference.appendChild(xmlChildRecord);

        xmlChildRecord = _xmlDoc.createElement(nameAuditEventFieldRefTransactionId);
        xmlChildRecord.innerText(_retailLogTransactionReference.RefTransactionId);
        xmlTransactionReference.appendChild(xmlChildRecord);

        xmlRetailLog.appendChild(xmlTransactionReference);

        return xmlRetailLog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>