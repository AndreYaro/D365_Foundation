<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookDataCalc_Sales_Export_Process_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookDataCalc_Sales_Export_Process_RU extends BookDataCalc_Sales_Export_RU implements BatchRetryable
{
    QueryRun                    queryRun;
    Integer                     numOfMonths;
    TransDate                   closingDate;

    #define.CurrentVersion(1)

    #define.dsCustTransInvoiceName("dsCustTransInvoice")
    #define.dsFactureJourName     ("dsF")
    #define.dsCustInvoiceJourName ("dsCustInvoiceJour")
    #define.dsCustSettlementName  ("dsCustSettlement")
    #define.dsVendSettlementName  ("dsVendSettlement")

    #define.OR("||")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>begin</Name>
				<Source><![CDATA[
        protected void begin()
    {
        TransDate startDate;
        TransDate endDate;
        #define.MonthsInYear(12)

        // there is no super() call

        [startDate, endDate] = BookDataCalc_RU::datePeriodBook(toDate);

        numOfMonths = #MonthsInYear * (year(endDate) - year(startDate)) + mthOfYr(endDate) - mthOfYr(startDate) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
        public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        #define.Value2(2)
    public boolean check()
    {
        RestoredVATLogTable_RU  restoredVATLogTable;
        boolean                 ret                 = super();
        TransDate               fromDateLocal       = conPeek(BookDataCalc_RU::datePeriodBook(fromDate), 1);
        TransDate               toDateLocal         = conPeek(BookDataCalc_RU::datePeriodBook(toDate), #Value2);

        select firstonly restoredVATLogTable
            index hint PeriodDateIdx
            where restoredVATLogTable.TransDate >= fromDateLocal &&
                  restoredVATLogTable.TransDate <= toDateLocal   &&
                 !restoredVATLogTable.Approved;

        if (restoredVATLogTable)
        {
            warning("@GLS114227");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFactureJourRanges</Name>
				<Source><![CDATA[
        protected void copyFactureJourRanges(Query _queryDestination)
    {
        QueryBuildDataSource    dsDestination, dsSource;
        QueryBuildRange         rangeDestination, rangeSource;
        int                     cx;
        ;

        dsSource      = queryRun.query().dataSourceNo(1);
        dsDestination = _queryDestination.dataSourceTable(tableNum(FactureJour_RU));

        for (cx = 1; cx <= dsSource.rangeCount(); cx++)
        {
            rangeSource = dsSource.range(cx);

            rangeDestination = dsDestination.addRange(rangeSource.field());
            rangeDestination.value(rangeSource.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        Dialog      dialog;
        ;

        closingDate = SalesBookTable_RU::getLastClosedBook().ClosingDate;

        if (closingDate)
        {
            [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(closingDate + 1);
        }

        outgoingVAT = NoYes::Yes;

        dialog = super();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
        protected void end()
    {
        // there is no super() call
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRecord</Name>
				<Source><![CDATA[
        protected boolean fetchNextRecord()
    {
        return recordSortedList.next(factureJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologPrefix</Name>
				<Source><![CDATA[
        protected InfologText getInfologPrefix()
    {
        return BookDataCalc_Sales_Export_Process_RU::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public boolean init()
    {
        TmpSalesBookVATProcessLogTrans_RU logTrans;

        processMode = SalesBookVATProcessCancelType_RU::Process;

        this.initRecordSortedList();

        salesPurchBookData = logTrans;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookTransCalcClass</Name>
				<Source><![CDATA[
        protected BookTransCalc_RU initBookTransCalcClass()
    {
        BookTransCalc_Sales_RU bookTransCalc_Sales;

        progress.setText(strFmt("@GLS111359", factureJour.CustVendInvoiceAccount, factureJour.FactureExternalId));

        bookTransCalc_Sales = BookTransCalc_Sales_RU::newTransCalc(fromDate > #TransitionEndDate ? bookTable.Policy : CustParameters::taxation_RU(factureJour.FactureDate),
                                                                   factureJour,
                                                                   salesPurchBookData,
                                                                   fromDate,
                                                                   toDate,
                                                                   bookTableMode,
                                                                   closingDate ? closingDate : SalesBookTable_RU::getLastClosedBook().ClosingDate,
                                                                   tmpProcessLogTransOper,
                                                                   recordSortedList,
                                                                   fullCheck);

        return bookTransCalc_Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnDelivery</Name>
				<Source><![CDATA[
        private void initOnDelivery()
    {
        this.insertIntoRecordsetList(this.qrSettlementInDependent());
        this.insertIntoRecordsetList(this.qrBlockedFactures());
        this.insertIntoRecordsetList(this.qrRestoredVATFactures());

        if (includePrevPeriodsExportFactures)
        {
            this.insertIntoRecordsetList(this.qrSettlementInDependentInvoicePrev());
        }
        else
        {
            this.insertIntoRecordsetList(this.qrSettlementInDependentInvoice());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnPayment</Name>
				<Source><![CDATA[
        private void initOnPayment()
    {
        #define.ExportVATOnPayment(False)

        if (#ExportVATOnPayment)
        {
            // select export factures
            this.insertIntoRecordsetListEx(this.qrSettlementDependent());
        }

        // select factures for vendor prepayments
        this.insertIntoRecordsetListVend(this.qrVendPrepaymentFacturesPurch());
        this.insertIntoRecordsetListVend(this.qrVendPrepaymentFacturesSales());
        this.insertIntoRecordsetList(this.qrBlockedFactures());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
        public void initParmDefault()
    {
        Query                query;
        QueryBuildDataSource dsFactureJour;
        ;

        super();

        if (! queryRun)
        {
            query = new Query();
            dsFactureJour = query.addDataSource(tableNum(FactureJour_RU));
            findOrCreateRange_W(dsFactureJour,
                                fieldNum(FactureJour_RU,
                                FactureDate)).status(RangeStatus::Hidden);
            queryRun = new QueryRun(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
        protected void initRecordSortedList()
    {
        ;
        recordSortedList = new RecordSortedList(tableNum(FactureJour_RU));
        recordSortedList.sortOrder(fieldNum(FactureJour_RU, FactureDate), fieldNum(FactureJour_RU, RecId));

        this.initOnPayment();
        this.initOnDelivery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inRangeIntoQueryRun</Name>
				<Source><![CDATA[
        protected boolean inRangeIntoQueryRun(FieldId _fieldId, anytype _value)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        boolean                 ret = true;
        ;

        queryBuildDataSource = queryRun.query().dataSourceNo(1);

        queryBuildRange = queryBuildDataSource.findRange(_fieldId);

        if (queryBuildRange)
        {
            ret = inRange(queryBuildRange.value(), _value, false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoRecordsetList</Name>
				<Source><![CDATA[
        private void insertIntoRecordsetList(QueryRun _queryRun)
    {
        FactureJour_RU fJour;

        if (_queryRun)
        {
            while (_queryRun.next())
            {
                fJour = _queryRun.get(tableNum(FactureJour_RU));

                if ( ! recordSortedList.find(fJour) && ! fJour.isBlockedForBookFacture() && ! fJour.isPuchaseCommission())
                {
                    recordSortedList.ins(fJour);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoRecordsetListEx</Name>
				<Source><![CDATA[
        private void insertIntoRecordsetListEx(QueryRun _queryRun)
    {
        FactureJour_RU fJour;
        CustSettlement custSettlement;
        TransDate      transDate;

        if (_queryRun)
        {
            while (_queryRun.next())
            {
                fJour          = _queryRun.get(tableNum(FactureJour_RU));
                custSettlement = _queryRun.get(tableNum(CustSettlement));

                transDate = max(fJour.FactureDate, custSettlement.TransDate);

                if (transDate > toDate)
                {
                    continue;
                }

                if (! recordSortedList.find(fJour) && ! fJour.isBlockedForBookFacture() && ! fJour.isPuchaseCommission())
                {
                    recordSortedList.ins(fJour);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoRecordsetListVend</Name>
				<Source><![CDATA[
        private void insertIntoRecordsetListVend(QueryRun _queryRun)
    {
        FactureJour_RU                      fJour;
        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        if (_queryRun)
        {
            while (_queryRun.next())
            {
                fJour = _queryRun.get(tableNum(FactureJour_RU));

                if (! recordSortedList.find(fJour))
                {
                    select firstonly RecId from logTransOper
                        where logTransOper.Blocked          == NoYes::No &&
                              logTransOper.BlockedAuto      == NoYes::No &&
                              logTransOper.CanceledRefRecId == 0
                    exists join logTrans
                        where logTrans.RecId     == logTransOper.RefRecId &&
                              logTrans.FactureId == fJour.FactureId;

                    if (logTransOper)
                    {
                        recordSortedList.ins(fJour);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, conNull(), queryRun.query().pack(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrBlockedFactures</Name>
				<Source><![CDATA[
        protected QueryRun qrBlockedFactures()
    {
        QueryBuildDataSource    dsFactureJour, dsProcessLogTrans, dsProcessLogTransOper;
        Query                   query;
        container               factureModuleValue;
        boolean                 factureModuleInRange;
        ;

        if (this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, Module), FactureModule_RU::Cust))
        {
            factureModuleInRange = true;
            factureModuleValue += FactureModule_RU::Cust;
        }

        if (this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, Module), FactureModule_RU::Vend))
        {
            factureModuleInRange = true;
            factureModuleValue += FactureModule_RU::Vend;
        }

        if (! factureModuleInRange)
        {
            return null;
        }

        query = new Query();

        dsFactureJour = query.addDataSource(tableNum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, Module),
                            con2Str(factureModuleValue));

        dsProcessLogTrans = dsFactureJour.addDataSource(tableNum(SalesBookVATProcessLogTrans_RU));
        dsProcessLogTrans.addSelectionField(fieldNum(SalesBookVATProcessLogTrans_RU, RecId));
        dsProcessLogTrans.joinMode(JoinMode::ExistsJoin);
        dsProcessLogTrans.addLink(fieldNum(FactureJour_RU, FactureId), fieldNum(SalesBookVATProcessLogTrans_RU, FactureId));

        dsProcessLogTransOper = dsProcessLogTrans.addDataSource(tableNum(SalesBookVATProcessLogTransOper_RU));
        dsProcessLogTransOper.addSelectionField(fieldNum(SalesBookVATProcessLogTransOper_RU, RecId));
        dsProcessLogTransOper.joinMode(JoinMode::ExistsJoin);
        dsProcessLogTransOper.addLink(fieldNum(SalesBookVATProcessLogTrans_RU, RecId), fieldNum(SalesBookVATProcessLogTransOper_RU, RefRecId));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(SalesBookVATProcessLogTransOper_RU, Blocked),
                            queryValue(NoYes::Yes));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(SalesBookVATProcessLogTransOper_RU, CanceledRefRecId),
                            queryValue(0));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(SalesBookVATProcessLogTransOper_RU, TransDate),
                            queryRange(dateNull(), toDate));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrRestoredVATFactures</Name>
				<Source><![CDATA[
        protected QueryRun qrRestoredVATFactures()
    {
        QueryBuildDataSource    dsFactureJour;
        QueryBuildDataSource    dsRestoredVATLogTrans;
        QueryBuildDataSource    dsRestoredVATLogTable;
        Query                   query;
        ;

        query = new Query();

        dsFactureJour = query.addDataSource(tableNum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        dsFactureJour.addSortField(fieldNum(FactureJour_RU, FactureDate));

        dsRestoredVATLogTrans = dsFactureJour.addDataSource(tableNum(RestoredVATLogTrans_RU));
        dsRestoredVATLogTrans.joinMode(JoinMode::ExistsJoin);

        dsRestoredVATLogTrans.addLink(fieldNum(FactureJour_RU, FactureId),  fieldNum(RestoredVATLogTrans_RU, FactureId));
        dsRestoredVATLogTrans.addLink(fieldNum(FactureJour_RU, Module),     fieldNum(RestoredVATLogTrans_RU, FactureModule));

        findOrCreateRange_W(dsRestoredVATLogTrans, fieldNum(RestoredVATLogTrans_RU, Include), queryValue(NoYes::Yes));

        dsRestoredVATLogTable = dsRestoredVATLogTrans.addDataSource(tableNum(RestoredVATLogTable_RU));
        dsRestoredVATLogTable.joinMode(JoinMode::ExistsJoin);

        dsRestoredVATLogTable.addLink(fieldNum(RestoredVATLogTrans_RU, TransDate), fieldNum(RestoredVATLogTable_RU, TransDate));

        findOrCreateRange_W(dsRestoredVATLogTable, fieldNum(RestoredVATLogTable_RU, TransDate), queryRange(fromDate, toDate));
        findOrCreateRange_W(dsRestoredVATLogTable, fieldNum(RestoredVATLogTable_RU, Approved), queryValue(NoYes::Yes));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrSettlementDependent</Name>
				<Source><![CDATA[
        protected QueryRun qrSettlementDependent()
    {
        QueryBuildDataSource    dsFactureJour, dsFactureTrans, dsCustInvoiceJour;
        QueryBuildDataSource    dsCustTransInvoice, dsCustSettlement;
        Query                   query;

        #localmacro.InvoiceAccountValue
            '(\%1.'   + fieldstr(CustInvoiceJour, InvoiceAccount) +
            '== \%2.' + fieldstr(FactureJour_RU, CustVendInvoiceAccount) + ')'
        #endmacro

        #localmacro.TransDateValue
            '((\%1.'                     + fieldstr(FactureJour_RU, FactureDate)      +
            ' >= \%3) && (\%1.'          + fieldstr(FactureJour_RU, FactureDate)      +
            ' <= \%4))' + #OR + '((\%1.' + fieldstr(FactureJour_RU, StatusChangeDate) +
            ' >= \%3) && (\%1.'          + fieldstr(FactureJour_RU, StatusChangeDate) +
            ' <= \%4))' + #OR + '((\%2.' + fieldstr(CustSettlement, TransDate)        +
            ' >= \%3) && (\%2.'          + fieldstr(CustSettlement, TransDate)        +
            ' <= \%4))'
        #endmacro

        #localmacro.CanBeReversedValue
            '(\%1.'             + fieldstr(CustSettlement, CanBeReversed) +
            ')' + #OR + '(\%1.' + fieldstr(CustSettlement, ReversedRecId_RU) + ')'
        #endmacro
        ;

        if (! this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, FactureType), FactureType_RU::Invoice) ||
           ! this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, Module), FactureModule_RU::Cust))
        {
            return null;
        }

        query = new Query();

        dsFactureJour = query.addDataSource(tableNum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, ExportProcessing),
                            queryValue(NoYes::Yes)).status(RangeStatus::Hidden);

        findOrCreateRange_W(dsFactureJour, fieldNum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice));
        findOrCreateRange_W(dsFactureJour, fieldNum(FactureJour_RU, Module), queryValue(FactureModule_RU::Cust));
        findOrCreateRange_W(dsFactureJour, fieldNum(FactureJour_RU, ProcessingType), con2Str([SalesBookFactureProcessingType_RU::VATZero,
                                                                                              SalesBookFactureProcessingType_RU::VATZeroCorrection,
                                                                                              SalesBookFactureProcessingType_RU::OverdueConfirmation]));

        dsFactureTrans = dsFactureJour.addDataSource(tableNum(FactureTrans_RU));
        dsFactureTrans.addSelectionField(fieldNum(FactureTrans_RU, RecId));
        dsFactureTrans.joinMode(JoinMode::InnerJoin);
        dsFactureTrans.relations(true);

        dsCustInvoiceJour = dsFactureTrans.addDataSource(tableNum(CustInvoiceJour), #dsCustInvoiceJourName);
        dsCustInvoiceJour.addSelectionField(fieldNum(CustInvoiceJour, RecId));
        dsCustInvoiceJour.joinMode(JoinMode::InnerJoin);

        dsCustInvoiceJour.addLink(fieldNum(FactureTrans_RU, InvoiceId),           fieldNum(CustInvoiceJour, InvoiceId));
        dsCustInvoiceJour.addLink(fieldNum(FactureTrans_RU, InvoiceDate),         fieldNum(CustInvoiceJour, InvoiceDate));
        dsCustInvoiceJour.addLink(fieldNum(FactureTrans_RU, SalesPurchId),        fieldNum(CustInvoiceJour, SalesId));
        dsCustInvoiceJour.addLink(fieldNum(FactureTrans_RU, NumberSequenceGroup), fieldNum(CustInvoiceJour, NumberSequenceGroup));

        findOrCreateRange_W(dsCustInvoiceJour,
                            fieldNum(CustInvoiceJour, InvoiceAccount),
                            strFmt(#InvoiceAccountValue, dsCustInvoiceJour.name(), dsFactureJour.name()));

        dsCustTransInvoice = dsCustInvoiceJour.addDataSource(tableNum(CustTrans), #dsCustTransInvoiceName);
        dsCustTransInvoice.addSelectionField(fieldNum(CustInvoiceJour, RecId));
        dsCustTransInvoice.joinMode(JoinMode::InnerJoin);

        dsCustTransInvoice.addLink(fieldNum(CustInvoiceJour, LedgerVoucher), fieldNum(CustTrans, Voucher));
        dsCustTransInvoice.addLink(fieldNum(CustInvoiceJour, InvoiceDate), fieldNum(CustTrans, TransDate));
        dsCustTransInvoice.addLink(fieldNum(CustInvoiceJour, InvoiceAccount), fieldNum(CustTrans, AccountNum));
        dsCustTransInvoice.addLink(fieldNum(CustInvoiceJour, InvoiceId), fieldNum(CustTrans, Invoice));

        dsCustSettlement = dsCustTransInvoice.addDataSource(tableNum(CustSettlement), #dsCustSettlementName);
        dsCustSettlement.addSelectionField(fieldNum(CustSettlement, TransDate));
        dsCustSettlement.joinMode(JoinMode::InnerJoin);

        dsCustSettlement.addLink(fieldNum(CustTrans, RecId), fieldNum(CustSettlement, TransRecId));
        dsCustSettlement.addLink(fieldNum(CustTrans, DataAreaId), fieldNum(CustSettlement, TransCompany));

        findOrCreateRange_W(dsCustSettlement,
                            fieldNum(CustSettlement, TransDate),
                            strFmt(#TransDateValue,
                                   dsFactureJour.name(),
                                   dsCustSettlement.name(),
                                   date2StrXpp(fromDate), date2StrXpp(toDate)));

        findOrCreateRange_W(dsCustSettlement,
                            fieldNum(CustSettlement, CanBeReversed),
                            strFmt(#CanBeReversedValue, dsCustSettlement.name()));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrSettlementInDependent</Name>
				<Source><![CDATA[
        protected QueryRun qrSettlementInDependent()
    {
        QueryBuildDataSource    dsFactureJour;
        Query                   query;
        container               factureTypeValue, factureModuleValue;
        boolean                 factureTypeInRange, factureModuleInRange, reversedInRange;

        #localmacro.FactureDateValue
        '((' + fieldstr(FactureJour_RU, FactureDate) + '>= \%1)  && ('  +
               fieldstr(FactureJour_RU, FactureDate) + '<= \%2)) || ((' +
               fieldstr(FactureJour_RU, ReverseDate) + ') && ('         +
               fieldstr(FactureJour_RU, ReverseDate) + '>= \%1)  && ('  +
               fieldstr(FactureJour_RU, ReverseDate) + '<= \%2))'
        #endmacro
        ;

        if (this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, FactureType), FactureType_RU::Facture))
        {
            factureTypeInRange = true;
            factureTypeValue += FactureType_RU::Facture;
        }

        if (this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, Module), FactureModule_RU::Cust))
        {
            factureModuleInRange = true;
            factureModuleValue += FactureModule_RU::Cust;
        }

        if (this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, Reversed), NoYes::No))
        {
            reversedInRange = true;
        }

        if (! factureTypeInRange || ! factureModuleInRange || ! reversedInRange)
        {
            return null;
        }

        query = new Query();

        dsFactureJour = query.addDataSource(tableNum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, ExportProcessing),
                            queryValue(NoYes::Yes)).status(RangeStatus::Hidden);

        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, ProcessingType),
                            con2Str([SalesBookFactureProcessingType_RU::VATZero,
                                     SalesBookFactureProcessingType_RU::VATStandard,
                                     SalesBookFactureProcessingType_RU::VATStandardCorrection,
                                     SalesBookFactureProcessingType_RU::VATZeroCorrection,
                                     SalesBookFactureProcessingType_RU::OverdueConfirmation]));
        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, FactureType),
                            con2Str(factureTypeValue));

        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, Module),
                            con2Str(factureModuleValue));

        findOrCreateRange_W(dsFactureJour,
                            fieldNum(FactureJour_RU, FactureDate),
                            strFmt(#FactureDateValue, date2StrXpp(fromDate), date2StrXpp(toDate)));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrSettlementInDependentInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns a <c>QueryRun</c> object that selects a list of export factures for
    ///  processing according on-delivery politics.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> class instance.
    /// </returns>
    protected QueryRun qrSettlementInDependentInvoice()
    {
        QueryBuildDataSource    dsFactureJour, dsFactureTrans, dsCustInvoiceJour;
        Query                   query;

        #localmacro.InvoiceAccountValue
            '(\%1.'   + fieldstr(CustInvoiceJour, InvoiceAccount) +
            '== \%2.' + fieldstr(FactureJour_RU, CustVendInvoiceAccount) + ')'
        #endmacro

        #localmacro.TransDateValue
            '((\%1.'          + fieldstr(FactureJour_RU, FactureDate)      +
            ' >= \%3) && (\%1.'          + fieldstr(FactureJour_RU, FactureDate)      +
            ' <= \%4))' + #OR + '((\%1.'          + fieldstr(FactureJour_RU, StatusChangeDate) +
            ' >= \%3) && (\%1.'          + fieldstr(FactureJour_RU, StatusChangeDate) +
            ' <= \%4))'
        #endmacro
        ;

        if (! this.inRangeIntoQueryRun(fieldnum(FactureJour_RU, FactureType), FactureType_RU::Invoice) ||
           ! this.inRangeIntoQueryRun(fieldnum(FactureJour_RU, Module), FactureModule_RU::Cust))
        {
            return null;
        }

        query = new Query();

        dsFactureJour = query.addDataSource(tablenum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        findOrCreateRange_W(dsFactureJour,
                            fieldnum(FactureJour_RU, ExportProcessing),
                            queryValue(NoYes::Yes)).status(RangeStatus::Hidden);

        findOrCreateRange_W(dsFactureJour, fieldnum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice));
        findOrCreateRange_W(dsFactureJour, fieldnum(FactureJour_RU, Module), queryValue(FactureModule_RU::Cust));
        findOrCreateRange_W(dsFactureJour, fieldnum(FactureJour_RU, ProcessingType), con2Str([SalesBookFactureProcessingType_RU::VATZero,
                                                                                              SalesBookFactureProcessingType_RU::VATZeroCorrection,
                                                                                              SalesBookFactureProcessingType_RU::OverdueConfirmation]));

        dsFactureTrans = dsFactureJour.addDataSource(tablenum(FactureTrans_RU));
        dsFactureTrans.addSelectionField(fieldnum(FactureTrans_RU, RecId));
        dsFactureTrans.joinMode(JoinMode::InnerJoin);
        dsFactureTrans.relations(true);

        findOrCreateRange_W(dsFactureJour,
                            fieldnum(FactureJour_RU, FactureDate),
                            strfmt(#TransDateValue,
                                   dsFactureJour.name(),
                                   '',
                                   date2StrXpp(fromDate), date2StrXpp(toDate)));

        dsCustInvoiceJour = dsFactureTrans.addDataSource(tablenum(CustInvoiceJour), #dsCustInvoiceJourName);
        dsCustInvoiceJour.addSelectionField(fieldnum(CustInvoiceJour, RecId));
        dsCustInvoiceJour.joinMode(JoinMode::InnerJoin);

        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, InvoiceId),           fieldnum(CustInvoiceJour, InvoiceId));
        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, InvoiceDate),         fieldnum(CustInvoiceJour, InvoiceDate));
        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, SalesPurchId),        fieldnum(CustInvoiceJour, SalesId));
        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, NumberSequenceGroup), fieldnum(CustInvoiceJour, NumberSequenceGroup));

        findOrCreateRange_W(dsCustInvoiceJour,
                            fieldnum(CustInvoiceJour, InvoiceAccount),
                            strfmt(#InvoiceAccountValue, dsCustInvoiceJour.name(), dsFactureJour.name()));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrSettlementInDependentInvoicePrev</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns a <c>QueryRun</c> object that selects a list of export factures for processing according on-delivery politics
    /// including unpaid export factures from previous periods.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> class instance.
    /// </returns>
    protected QueryRun qrSettlementInDependentInvoicePrev()
    {
        QueryBuildDataSource    dsFactureJour, dsFactureTrans, dsCustInvoiceJour;
        Query                   query;

        #localmacro.InvoiceAccountValue
            '(\%1.'   + fieldstr(CustInvoiceJour, InvoiceAccount) +
            '== \%2.' + fieldstr(FactureJour_RU, CustVendInvoiceAccount) + ')'
        #endmacro

        #localmacro.TransDateValue
            '((\%1.'          + fieldstr(FactureJour_RU, FactureDate)      +
            ' <= \%4))' + #OR + '((\%1.'          + fieldstr(FactureJour_RU, StatusChangeDate) +
            ' <= \%4))'
        #endmacro
        ;

        if (! this.inRangeIntoQueryRun(fieldnum(FactureJour_RU, FactureType), FactureType_RU::Invoice) ||
           ! this.inRangeIntoQueryRun(fieldnum(FactureJour_RU, Module), FactureModule_RU::Cust))
        {
            return null;
        }

        query = new Query();

        dsFactureJour = query.addDataSource(tablenum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        findOrCreateRange_W(dsFactureJour,
                            fieldnum(FactureJour_RU, ExportProcessing),
                            queryValue(NoYes::Yes)).status(RangeStatus::Hidden);

        findOrCreateRange_W(dsFactureJour, fieldnum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice));
        findOrCreateRange_W(dsFactureJour, fieldnum(FactureJour_RU, Module), queryValue(FactureModule_RU::Cust));
        findOrCreateRange_W(dsFactureJour, fieldnum(FactureJour_RU, ProcessingType), con2Str([SalesBookFactureProcessingType_RU::VATZero,
                                                                                              SalesBookFactureProcessingType_RU::VATZeroCorrection,
                                                                                              SalesBookFactureProcessingType_RU::OverdueConfirmation]));

        dsFactureTrans = dsFactureJour.addDataSource(tablenum(FactureTrans_RU));
        dsFactureTrans.addSelectionField(fieldnum(FactureTrans_RU, RecId));
        dsFactureTrans.joinMode(JoinMode::InnerJoin);
        dsFactureTrans.relations(true);

        findOrCreateRange_W(dsFactureJour,
                            fieldnum(FactureJour_RU, FactureDate),
                            strfmt(#TransDateValue,
                                   dsFactureJour.name(),
                                   '',
                                   date2StrXpp(fromDate), date2StrXpp(toDate)));

        dsCustInvoiceJour = dsFactureTrans.addDataSource(tablenum(CustInvoiceJour), #dsCustInvoiceJourName);
        dsCustInvoiceJour.addSelectionField(fieldnum(CustInvoiceJour, RecId));
        dsCustInvoiceJour.joinMode(JoinMode::InnerJoin);

        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, InvoiceId),           fieldnum(CustInvoiceJour, InvoiceId));
        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, InvoiceDate),         fieldnum(CustInvoiceJour, InvoiceDate));
        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, SalesPurchId),        fieldnum(CustInvoiceJour, SalesId));
        dsCustInvoiceJour.addLink(fieldnum(FactureTrans_RU, NumberSequenceGroup), fieldnum(CustInvoiceJour, NumberSequenceGroup));

        findOrCreateRange_W(dsCustInvoiceJour,
                            fieldnum(CustInvoiceJour, InvoiceAccount),
                            strfmt(#InvoiceAccountValue, dsCustInvoiceJour.name(), dsFactureJour.name()));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrVendPrepaymentFactures</Name>
				<Source><![CDATA[
        protected Query qrVendPrepaymentFactures()
    {
        QueryBuildDataSource    dsFactureJour, dsVendTransPrepayment, dsVendSettlement;
        QueryBuildDataSource    dsVendTrans_W;
        Query                   query;
        str                     rangeTxt;
        str                     dsName1, dsName2;

        #localMacro.FactureIDRange
            '(\%1.\%2 \%3 \%4.\%5)'
        #endmacro

        #define.equal('==')

        if (! this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, FactureType), FactureType_RU::Prepayment) ||
           ! this.inRangeIntoQueryRun(fieldNum(FactureJour_RU, Module), FactureModule_RU::Vend))
        {
            return null;
        }

        query = new Query();

        //FactureJour_RU
        dsFactureJour = query.addDataSource(tableNum(FactureJour_RU), #dsFactureJourName);
        this.copyFactureJourRanges(query);

        dsFactureJour.addSortField(fieldNum(FactureJour_RU, FactureDate));

        findOrCreateRange_W(dsFactureJour, fieldNum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Prepayment));
        findOrCreateRange_W(dsFactureJour, fieldNum(FactureJour_RU, Module), queryValue(FactureModule_RU::Vend));

        //VendTrans
        dsVendTransPrepayment = dsFactureJour.addDataSource(tableNum(VendTrans));
        dsVendTransPrepayment.addSelectionField(fieldNum(VendTrans, RecId));
        dsVendTransPrepayment.joinMode(JoinMode::InnerJoin);

        findOrCreateRange_W(dsVendTransPrepayment, fieldNum(VendTrans, Prepayment), queryValue(NoYes::Yes));
        dsVendTransPrepayment.addLink(fieldNum(FactureJour_RU, Voucher),        fieldNum(VendTrans, Voucher));
        dsVendTransPrepayment.addLink(fieldNum(FactureJour_RU, CurrencyCode),   fieldNum(VendTrans, CurrencyCode));

        //VendTrans_W
        dsVendTrans_W = VendTrans_W::addToQuery(dsVendTransPrepayment);

        dsName1 = dsFactureJour.name();
        dsName2 = dsVendTrans_W.name();
        rangeTxt = strFmt(
            #FactureIDRange,
            dsName1,
            fieldId2name(tableNum(FactureJour_RU), fieldNum(FactureJour_RU, FactureId)),
            #equal,
            dsName2,
            fieldId2name(tableNum(VendTrans_W), fieldNum(VendTrans_W, PrepaymentFactureId_W)));

        dsVendTrans_W.addRange(fieldNum(VendTrans_W, PrepaymentFactureId_W)).value(rangeTxt);

        dsVendSettlement = dsVendTransPrepayment.addDataSource(tableNum(VendSettlement), #dsVendSettlementName);
        dsVendSettlement.joinMode(JoinMode::InnerJoin);
        dsVendSettlement.addSelectionField(fieldNum(VendSettlement, TransRecId));
        dsVendSettlement.addSelectionField(fieldNum(VendSettlement, OffsetRecid));
        dsVendSettlement.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrVendPrepaymentFacturesPurch</Name>
				<Source><![CDATA[
        protected QueryRun qrVendPrepaymentFacturesPurch()
    {
        QueryBuildDataSource    dsVendSettlement, dsProcessLogTrans, dsProcessLogTransOper;
        Query                   query;

        #localmacro.TransDateValue
            '((\%1.'                     + fieldstr(PurchBookVATProcessLogTransOper_RU, TransDate) +
            ' >= \%3) && (\%1.'          + fieldstr(PurchBookVATProcessLogTransOper_RU, TransDate) +
            ' <= \%4))' + #OR + '((\%2.' + fieldstr(VendSettlement, TransDate)                     +
            ' >= \%3) && (\%2.'          + fieldstr(VendSettlement, TransDate)                     +
            ' <= \%4))'
        #endmacro

        #localmacro.InvoiceRecIdRefValue
            '((\%1.'     + fieldstr(PurchBookVATProcessLogTrans_RU, InvoiceRecIdRef) +
            ' = \%2.'   + fieldstr(VendSettlement, OffsetRecId)                      +
            ') || (\%1.' + fieldstr(PurchBookVATProcessLogTrans_RU, PaymentRecIdRef) +
            ' = \%2.'   + fieldstr(VendSettlement, TransRecId)                       + '))'
        #endmacro
        ;

        query = this.qrVendPrepaymentFactures();

        dsVendSettlement = query.dataSourceTable(tableNum(VendSettlement));

        dsProcessLogTrans = dsVendSettlement.addDataSource(tableNum(PurchBookVATProcessLogTrans_RU));
        dsProcessLogTrans.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(dsProcessLogTrans,
                            fieldNum(PurchBookVATProcessLogTrans_RU, InvoiceRecIdRef),
                            strFmt(#InvoiceRecIdRefValue, dsProcessLogTrans.name(), dsVendSettlement.name()));
        dsProcessLogTrans.addLink(fieldNum(VendSettlement, AccountNum), fieldNum(PurchBookVATProcessLogTrans_RU, AccountNum));

        dsProcessLogTransOper = dsProcessLogTrans.addDataSource(tableNum(PurchBookVATProcessLogTransOper_RU));
        dsProcessLogTransOper.addSelectionField(fieldNum(PurchBookVATProcessLogTransOper_RU, RecId));
        dsProcessLogTransOper.joinMode(JoinMode::InnerJoin);
        dsProcessLogTransOper.addLink(fieldNum(PurchBookVATProcessLogTrans_RU, RecId), fieldNum(PurchBookVATProcessLogTransOper_RU, RefRecId));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(PurchBookVATProcessLogTransOper_RU, Blocked),
                            queryValue(NoYes::No));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(PurchBookVATProcessLogTransOper_RU, CanceledRefRecId),
                            queryValue(0));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(PurchBookVATProcessLogTransOper_RU, TransDate),
                            strFmt(#TransDateValue,
                                   dsProcessLogTransOper.name(),
                                   dsVendSettlement.name(),
                                   date2StrXpp(fromDate), date2StrXpp(toDate)));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrVendPrepaymentFacturesSales</Name>
				<Source><![CDATA[
        protected QueryRun qrVendPrepaymentFacturesSales()
    {
        QueryBuildDataSource    dsVendSettlement, dsProcessLogTrans, dsProcessLogTransOper;
        Query                   query;

        #localmacro.TransDateValue
            '((\%1.'                     + fieldstr(SalesBookVATProcessLogTransOper_RU, TransDate) +
            ' >= \%3) && (\%1.'          + fieldstr(SalesBookVATProcessLogTransOper_RU, TransDate) +
            ' <= \%4))' + #OR + '((\%2.' + fieldstr(VendSettlement, TransDate)                     +
            ' >= \%3) && (\%2.'          + fieldstr(VendSettlement, TransDate)                     +
            ' <= \%4))'
        #endmacro
        ;

        query = this.qrVendPrepaymentFactures();

        dsVendSettlement = query.dataSourceTable(tableNum(VendSettlement));

        dsProcessLogTrans = dsVendSettlement.addDataSource(tableNum(SalesBookVATProcessLogTrans_RU));
        dsProcessLogTrans.joinMode(JoinMode::ExistsJoin);

        dsProcessLogTrans.addLink(fieldNum(VendSettlement, OffsetRecid), fieldNum(SalesBookVATProcessLogTrans_RU, InvoiceRecIdRef));
        dsProcessLogTrans.addLink(fieldNum(VendSettlement, AccountNum),  fieldNum(SalesBookVATProcessLogTrans_RU, AccountNum));

        dsProcessLogTransOper = dsProcessLogTrans.addDataSource(tableNum(SalesBookVATProcessLogTransOper_RU));
        dsProcessLogTransOper.addSelectionField(fieldNum(SalesBookVATProcessLogTransOper_RU, RecId));
        dsProcessLogTransOper.joinMode(JoinMode::InnerJoin);
        dsProcessLogTransOper.addLink(fieldNum(SalesBookVATProcessLogTrans_RU, RecId), fieldNum(SalesBookVATProcessLogTransOper_RU, RefRecId));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(SalesBookVATProcessLogTransOper_RU, Blocked),
                            queryValue(NoYes::No));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(SalesBookVATProcessLogTransOper_RU, CanceledRefRecId),
                            queryValue(0));

        findOrCreateRange_W(dsProcessLogTransOper,
                            fieldNum(SalesBookVATProcessLogTransOper_RU, TransDate),
                            strFmt(#TransDateValue,
                                   dsProcessLogTransOper.name(),
                                   dsVendSettlement.name(),
                                   date2StrXpp(fromDate), date2StrXpp(toDate)));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
        public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInfologPrefix</Name>
				<Source><![CDATA[
        protected void setInfologPrefix()
    {
        setPrefix(BookDataCalc_Sales_Export_Process_RU::description());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
        public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        container   con, conQuery, currentList;
        Query       query;
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, currentList, conQuery, con] = _packedClass;
                super(con);
                query    = new Query(conQuery);
                queryRun = new QueryRun(query);
                break;

            default:
                return false;
        }

        bookTableMode = false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        #define.maxDS(1)
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);
        Integer countDS;

        countDS = queryRun.query().dataSourceCount();

        if (countDS > #maxDS)
        {
            warning(strFmt("@GLS106969", #maxDS, countDS));
            ret = false;
        }

        if (ret && ! SalesBookTable_RU::canProcessDate(fromDate))
        {
            ret = checkFailed("@GLS107090");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@GLS112977";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBookTable</Name>
				<Source><![CDATA[
        public static BookDataCalc_Sales_Export_Process_RU newFromBookTable(TransDate _fromDate, TransDate _toDate)
    {
        BookDataCalc_Sales_Export_Process_RU bookDataCalc;
        ;

        bookDataCalc = new BookDataCalc_Sales_Export_Process_RU();
        bookDataCalc.parmFromDate(_fromDate);
        bookDataCalc.parmToDate(_toDate);
        bookDataCalc.parmBookTableMode(false);

        return bookDataCalc;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>