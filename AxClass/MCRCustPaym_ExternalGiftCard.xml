<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaym_ExternalGiftCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustPaym_ExternalGiftCard</c> class that handles external gift card payments.
/// </summary>
internal class MCRCustPaym_ExternalGiftCard extends MCRCustPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a payment field should be editable by the user.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method checks/changes the allow edit property.
    /// </param>
    /// <returns>
    ///     true if editing should be allowed; otherwise, false.
    /// </returns>
    public boolean allowEdit(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, PercentAmount):
                return false;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditGiftCardSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines is it is allowable to update the serial number.
    /// </summary>
    /// <returns>
    ///     true if there is any posted amount; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The serial number is not allowed to be updated if any amount has been
    ///     posted for this payment.
    /// </remarks>
    public boolean allowEditGiftCardSerialNum()
    {
        if (mcrCustPaymTable.PostedAmount != 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizeCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates authorization for an external gift card charge.
    /// </summary>
    /// <returns>
    ///     The <c>MCRCustPaymStatus</c> after the payment is submitted for authorization.
    /// </returns>
    private MCRCustPaymStatus authorizeCharge()
    {
        CreditCardAuthTrans creditCardAuthTrans;
        MCROrderParameters   mcrOrderParameters;
        boolean             preAuthResult;

        // unable to re-use existing authorization -- create new record

        if (mcrCustPaymTable.RefTableId == tableNum(SalesTable))
        {
            creditCardAuthTrans = CreditCardAuthTrans::mcrFindLatest(mcrCustPaymTable.RecId);
        }

        CreditCardProcess process = CreditCardProcess::construct(CreditCardOperation::Authorize, mcrCustPaymTable);
        process.paramRetailExternalGiftCard(this.paramRetailExternalGiftCard());

        preAuthResult = CreditCardProcess::mcrDoPreAuthWithPassedProcess(mcrCustPaymTable, true, null, process);

        if (!preAuthResult)
        {
            mcrOrderParameters = MCROrderParameters::find();
            int numberOfRetries = mcrOrderParameters.mcrNumCCAuthRetry - mcrCustPaymTable.NumAuthRetry;
            if (mcrOrderParameters.MCRRetryOnSubmit == NoYes::Yes && numberOfRetries > 0)
            {
                // Display warning - Credit card was not authorized, # of remaining retries left for this card = <numberOfRetries>
                info(strFmt("@Retail:CreditCardNotAuthRemainingRetries", numberOfRetries));
            }
        }
        
        // Find the latest credit card authorization record
        creditCardAuthTrans = CreditCardAuthTrans::mcrFindLatest(mcrCustPaymTable.RecId);

        // In Payments Sevices form, When ["AVS Check"] is enabled and ["Void transaction when no results are availble"] is also enabled,
        // The system will void the original auth in case of AVS check failure, and the latest creditcardauthtrans will now be the
        // "Void" record instead of the voided "authorization" record.
        // Note: When the latest credit card operation on this MCRCustpaymTable is a "Void", query for the original voided "authorization" instead.
        if (!creditCardAuthTrans || creditCardAuthTrans.ApprovalType == CreditCardOperation::Void)
        {
            creditCardAuthTrans = CreditCardAuthTrans::mcrFindLatestVoidedApproval(mcrCustPaymTable.RecId);
        }
        
        // calculate resulting payment status
        return MCRCustPaym_CreditCard::calculateChargePaymStatus(creditCardAuthTrans, mcrCustPaymTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizeRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates authorization for a credit card refund (credit to the card).
    /// </summary>
    /// <returns>
    ///     The mcrCustPaymStatus of the payment after authorization initiation.
    /// </returns>
    /// <remarks>
    ///     Currently, authorizations of refunds are tracked by using
    ///     the mcrCustPaymStatus of a settlement record.  It would be preferable to
    ///     use a separate concept (a new table?) for tracking refund
    ///     authorizations.
    /// </remarks>
    private MCRCustPaymStatus authorizeRefund()
    {
        MCRCustPaymStatus       mcrCustPaymStatus;
        Amount                  refundApprovalAmount;
        Amount                  unpostedAmount;

        refundApprovalAmount = MCROrderParameters::find().mcrCreditCardApprovalAmount;

        // Check if a refund amount has been setup, if it has compare unposted to the
        // parameter, otherwise return authorized
        if (refundApprovalAmount)
        {
            unpostedAmount = abs(mcrCustPaymTable.getUnpostedAmount());
            // If the unposted amount is greater than the parameter, refund requires
            // approval
            if (unpostedAmount > refundApprovalAmount)
            {
                mcrCustPaymStatus = MCRCustPaymStatus::NotSubmitted;
            }
            else if (mcrCustPaymTable.IsPrepay)
            {
                mcrCustPaymStatus = MCRCustPaymStatus::Posted;
            }
            else
            {
                mcrCustPaymStatus = MCRCustPaymStatus::Authorized;
            }
        }
        else if (mcrCustPaymTable.IsPrepay)
        {
            mcrCustPaymStatus = MCRCustPaymStatus::Posted;
        }
        else
        {
            mcrCustPaymStatus = MCRCustPaymStatus::Authorized;
        }

        return mcrCustPaymStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the passed amount can be posted.
    /// </summary>
    /// <param name="_postAmount">
    ///     The amount to be checked if it can be posted.
    /// </param>
    /// <returns>
    ///     true if the amount passed in can be posed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     On a return of a gift cert or a gift card, if not advance credit
    ///     then the payment will be a non prepay in which case the amount needs
    ///     to be posted at invoicing. At this point the custpaymstatus is
    ///     authorized and not paid or posted.
    /// </remarks>
    public boolean canPost(AmountCur _postAmount)
    {
        if (_postAmount != 0)
        {
            if (mcrCustPaymTable.IsPrepay)
            {
                if (mcrCustPaymTable.Status == MCRCustPaymStatus::Paid
                    || mcrCustPaymTable.Status == MCRCustPaymStatus::Posted)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if (mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default value of the passed field if it has been defined.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method finds the default value.
    /// </param>
    /// <returns>
    ///     The default value of the specified field if it is defined; otherwise, null.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        Percent totalPercentAmount = 0.0;

        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrepay):
                return NoYes::Yes;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                return 0.0;
        }

        return super(_fieldID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment account and account type.
    /// </summary>
    /// <returns>
    /// The account type <c>LedgerJournalACType</c> and the account <c>LedgerJournalAC</c>
    /// </returns>
    /// <remarks>
    /// By default, the account type and account are determined by the payment method.
    /// </remarks>
    public container getPaymAccount()
    {
        RetailStoreTenderTypeCardTable      retailStoreTenderTypeCardTable;
        LedgerJournalACType                 offsetType;
        LedgerDimensionDefaultAccount       offsetAccount;

        retailStoreTenderTypeCardTable = RetailStoreTenderTypeCardTable::find(mcrCustPaymTable.Channel,
                                                                                mcrCustPaymTable.TenderTypeId,
                                                                                mcrCustPaymTable.CardTypeId);

        if (retailStoreTenderTypeCardTable)
        {
            switch (retailStoreTenderTypeCardTable.accountType)
            {
                case RetailLedgerBank::Bank:
                    offsetType = LedgerJournalACType::Bank;
                break;
                case RetailLedgerBank::Ledger:
                    offsetType = LedgerJournalACType::Ledger;
                break;
            }
            offsetAccount = retailStoreTenderTypeCardTable.LedgerDimension;
        }
        else
        {
            throw error(strFmt("@MCR40426",enum2str(mcrCustPaymTable.CustPaymType)));
        }

        return [offsetType, offsetAccount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an identifier for this payment.
    /// </summary>
    /// <returns>
    ///     An identifier for this payment.
    /// </returns>
    /// <remarks>
    ///     The payment reference is written to the ledger journal during
    ///     posting, and is intended to identify this payment on a bank
    ///     deposit slip or for other financial records.
    ///
    ///     For a gift certificate payment, the return value is the serial number.
    /// </remarks>
    protected PaymReference getPaymReference()
    {
        return RetailExternalGiftCardTable::findById(mcrCustPaymTable.PaymInfoRecId).MaskedCardNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a gift certificate serial number has been provided.
    /// </summary>
    /// <returns>
    ///     true if the gift certificate's serial number has been provided; otherwise, false.
    /// </returns>
    public boolean hasPaymTypeData()
    {
        boolean valid = true;

        if (!mcrCustPaymTable.PaymInfoRecId
            || !mcrCustPaymTable.PaymInfoTableId)
        {
            valid = checkFailed("@SYS116746");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new customer payment of type "gift certificate".
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    ///     The <c>MCRCustPaymTable</c> used to create a new payment.
    /// </param>
    /// <param name="_allowUserInput">
    ///     A boolean that determines whether to allow user input during the
    ///     process of creating a new payment.
    /// </param>
    public void new(MCRCustPaymTable _mcrCustPaymTable, 
        boolean _allowUserInput,
        CreditCardAuthTrans _creditCardAuthTransReversal = null)
    {
        // Add Gift Card to this logic
        if (_mcrCustPaymTable.CustPaymType != MCRCustPaymType::GiftCard)
        {
            throw error(strFmt("@MCR32269", funcName(),
                               enum2str(MCRCustPaymType::GiftCard)));
        }

        super(_mcrCustPaymTable, _allowUserInput, _creditCardAuthTransReversal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    protected real performBalanceCheck()
    {
        real balance = 0.0;
        CreditCardProcess process = CreditCardProcess::construct(CreditCardOperation::Balance, mcrCustPaymTable);
        process.paramRetailExternalGiftCard(this.paramRetailExternalGiftCard());
        
        if (CreditCardProcess::mcrDoBalance(mcrCustPaymTable, process))
        {
            // get latest transation and return balance
            CreditCardAuthTrans creditCardAuthTrans = creditCardAuthTrans::find(this.paramRetailExternalGiftCard().CreditCardAuthTransRecId);

            if (creditCardAuthTrans)
            {
                balance = creditCardAuthTrans.ApprovalAmountCur;
            }
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs authorization on this payment.
    /// </summary>
    /// <returns>
    ///     The resulting payment status of either MCRCustPaymStatus::Authorized or MCRCustPaymStatus::Declined.
    /// </returns>
    /// <remarks>
    ///     A gift card payment is authorized if the remaining amount on the gift
    ///     card plus all unposted amounts is less than or equal to the payment amount.
    /// </remarks>
    protected MCRCustPaymStatus performAuth()
    {
        Amount               unpostedAmount;
        CreditCardAuthTrans  creditCardAuthTrans;
        MCROrderParameters   mcrOrderParameters;

        unpostedAmount = mcrCustPaymTable.getUnpostedAmount();

        if (unpostedAmount == 0.0)
        {
            //  If the payment is zero, need to check if there
            //      are pending auth records.
            if (mcrCustPaymTable.Amount == 0)
            {
                creditCardAuthTrans = CreditCardAuthTrans::mcrFindLatest(mcrCustPaymTable.RecId, true);

                if (creditCardAuthTrans)
                {
                    ttsbegin;
                    creditCardAuthTrans.delete();
                    ttscommit;
                }
            }
            else
            {
                mcrCustPaymTable.Status =  this.determineStatus();
            }
        }
        // Only execute if there is something to process
        else
        {
            if (unpostedAmount > 0.0)
            {
                mcrCustPaymTable.Status = this.authorizeCharge();
            }
            else if (unpostedAmount < 0.0)
            {
                mcrCustPaymTable.Status = this.authorizeRefund();
                throw error("External gift card do not support refunds");
            }

            mcrOrderParameters = MCROrderParameters::find();
            ttsbegin;
            if (mcrCustPaymTable.Status == MCRCustPaymStatus::Declined
                && mcrOrderParameters.mcrNumCCAuthRetry > 0
                && mcrCustPaymTable.NumAuthRetry < mcrOrderParameters.mcrNumCCAuthRetry)
            {
                mcrCustPaymTable.NumAuthRetry++;
                mcrCustPaymTable.Status = MCRCustPaymStatus::NotSubmitted;
            }
            if (mcrCustPaymTable.validateWrite())
            {
                mcrCustPaymTable.update();
            }
            ttscommit;
        }
        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the posting operations using the passed amount.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    /// <remarks>
    ///     Invoked to perform posting operations after posting records to the
    ///     ledger journal.
    ///     Subtract _amount from the gift card's remaining amount.
    /// </remarks>
    protected void performPost(Amount _amount)
    {
        boolean successful = false;

        if (_amount > 0.0)
        {
            successful = this.postCharge(_amount);
        }
        else if (_amount < 0.0)
        {
            successful = this.postRefund(abs(_amount));
        }

        mcrCustPaymTable.reread();

        ttsbegin;
        mcrCustPaymTable.Status = this.determineStatus(_amount < 0, true);
        mcrCustPaymTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the payment for the amount passed.
    /// </summary>
    /// <param name="_amount">
    ///     The amount of the payment being postd.
    /// </param>
    /// <param name="_isPrepay">
    ///     A boolean determining if they payment is a prepay or not.
    /// </param>
    public void post(Amount _amount, boolean _isPrepay)
    {
        setPrefix(strFmt("@MCR10793",
                         enum2str(mcrCustPaymTable.CustPaymType),
                         num2str(_amount, 1, 2, 1, 2)));

        if (!this.validatePost(_amount, true))
        {
            throw error("@MCR10794");
        }

        ttsbegin;

        // perform any posting operations for specific payment types
        this.performPost(_amount);

        // create ledger journal records
        if ( mcrCustPaymTable.Status == MCRCustPaymStatus::Paid ||
             mcrCustPaymTable.Status == MCRCustPaymStatus::Posted ||
             (mcrCustPaymTable.IsPrepay && mcrCustPaymTable.Status != MCRCustPaymStatus::Declined))
        {
            this.postToLedgerJournal(_amount, mcrCustPaymTable.IsPrepay);
            mcrCustPaymTable.updatePostedAmount(_amount);

            // Find the latest LedgerJournalTrans created for the current call center payment
            LedgerJournalTrans ledgerJournalTrans;
            select firstonly forupdate ledgerJournalTrans
                order by ledgerJournalTrans.RecId desc
                where ledgerJournalTrans.MCRRefPaymID == mcrCustPaymTable.RecId;

            // Create Retail Payment Links
            RetailTransactionPaymentsHelper::createPaymentLinks(
                                    SalesTable::findRecId(mcrCustPaymTable.RefRecId, true).SalesId,
                                    mcrCustPaymTable.CardTypeId,
                                    mcrCustPaymTable.TenderTypeId,
                                    ledgerJournalTrans.RecId,
                                    CreditCardAuthTrans::mcrFindLatest(mcrCustPaymTable.RecId));
        }

        mcrCustPaymTable.reread();

        ttscommit;

        if (mcrCustPaymTable.getUnpostedAmount() > 0 && mcrCustPaymTable.Status != MCRCustPaymStatus::Declined)
        {
            CreditCardProcess::mcrDoPreAuth(mcrCustPaymTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Capture an external gift card amount on the credit card payment.
    /// </summary>
    /// <param name="_amount">
    ///     The postivie amount to post.
    /// </param>
    /// <returns>
    /// true if the amount has been captured; otherwise, false.
    /// </returns>
    private boolean postCharge(Amount _amount)
    {
        CreditCardAuthTrans creditCardAuthTrans;
        SalesTable          salesTable;
        boolean             captureSuccess = false;

        creditCardAuthTrans = CreditCardAuthTrans::mcrFindValidPreApproval(mcrCustPaymTable.RecId);

        if (creditCardAuthTrans)
        {
            if (mcrCustPaymTable.RefRecId == tableNum(SalesTable))
            {
                salesTable = SalesTable::findRecId(mcrCustPaymTable.RefRecId);
            }

            CreditCardProcess process = CreditCardProcess::construct(CreditCardOperation::Authorize, mcrCustPaymTable);
            process.paramRetailExternalGiftCard(this.paramRetailExternalGiftCard());

            captureSuccess = CreditCardProcess::mcrDoCaptureWithPassedProcess(mcrCustPaymTable,
                                                            salesInvoiceId,
                                                            custInvoiceJour,
                                                            _amount,
                                                            process);

            if (!captureSuccess)
            {
                warning(strFmt("@MCR4410040", mcrCustPaymTable.displayOrderID()));
            }
        }
        return captureSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates or creates an external gift card settlement record to settle for a credit
    ///     card refund.
    /// </summary>
    /// <param name="_amount">
    ///     The positvice amount to post.
    /// </param>
    /// <returns>
    ///     true if refund successfully posted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Currently, authorizations of refunds are tracked by using
    ///     the status of a settlement record.  It would be preferable to
    ///     use a separate concept (a new table?) for tracking refund
    ///     authorizations.
    /// </remarks>
    private boolean postRefund(Amount _amount)
    {
        boolean             adjustAppAmt = true;

        try
        {
            ttsbegin;
            CreditCardProcess::mcrDoRefund(mcrCustPaymTable);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for authorization.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and the payment should
    ///     be allowed to be submitted for authorization; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the return value is false, then this payment should not be submitted
    ///     for authorization.
    /// </remarks>
    public boolean validateAuthorize(boolean _showErrors = true)
    {
        boolean isValid = true;

        // credit card data is required
        if (!this.hasPaymTypeData())
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR10658");
            }
        }
        if (!isValid)
        {
            ttsbegin;
            mcrCustPaymTable.selectForUpdate(true);
            mcrCustPaymTable.reread();
            mcrCustPaymTable.Status = MCRCustPaymStatus::Declined;
            mcrCustPaymTable.update();
            ttscommit;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates post to ensure that on a return an authorized gift card will not
    ///     issue an error.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be validated in the post.
    /// </param>
    /// <param name="_showErrors">
    ///     A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    ///     true if the amount being posted is valid; otherwise, false.
    /// </returns>
    public boolean validatePost(Amount _amount, boolean _showErrors = true)
    {
        boolean isValid = true;

        Amount unpostedAmount = mcrCustPaymTable.getUnpostedAmount();

        if (mcrCustPaymTable.IsPrepay)
        {
            isValid = super(_amount, _showErrors);
        }
        else
        {
            // this payment must be Posted/Paid
            if (mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted)
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strFmt("@MCR30348", enum2str(mcrCustPaymTable.Status)));
                }
            }

            // must be a non-zero amount
            if (_amount == 0.0)
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strFmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount must have the same sign as the unposted payment amount
            if (isValid && sign(_amount) != sign(unpostedAmount))
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strFmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount may not be greater than the unposted payment amount
            if (isValid && abs(_amount) > abs(unpostedAmount))
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strFmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for an insert or update.
    /// </summary>
    /// <param name="_showErrors">
    ///       A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <param name="_validateAccountSetup">
    ///     A boolean determing whether to validate if an account is
    ///     setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>
    ///     Returns true if all data for this payment is valid and should be allowed
    ///     to be saved to the database.  Returns false if one or more errors exist.
    /// </returns>
    public boolean validateWrite(boolean _showErrors = true,
                                 boolean _validateAccountSetup = true)
    {
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable;
        RetailTenderTypeCardTable      retailTenderTypeCardTable;

        // Cards use account on the <c>RetailStoreTenderTypeCardTable</c>, so skip account
        //  validation in parent class
        boolean isValid = super(_showErrors, false);

        // serial number is required
        if (!this.hasPaymTypeData())
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR11008");
            }
        }
        // Serial number must be valid.
        // Check serial number only for a gift card.
        if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard
            && this.paramRetailExternalGiftCard()
            && this.paramRetailExternalGiftCard().CardNumber != '')
        {
            isValid = false;
        }

        if (!MCRCustPaymTable.checkAllowPaymentByPolicies(_showErrors))
        {
            isValid = false;
        }

        if (this.isGiftCardAvailBalanceLessThanUnpostedAmount(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR11158");
            }
        }

        retailStoreTenderTypeCardTable = RetailStoreTenderTypeCardTable::find(mcrCustPaymTable.Channel,
                                                                              mcrCustPaymTable.TenderTypeId,
                                                                              mcrCustPaymTable.CardTypeId);
        // Validate card setup
        // Related card table must be of type gift card
        if (retailStoreTenderTypeCardTable)
        {
            retailTenderTypeCardTable = RetailTenderTypeCardTable::find(retailStoreTenderTypeCardTable.cardTypeId);
            if (this.isCardTypeGiftCard(retailTenderTypeCardTable))
            {
                isValid = false;
                if (_showErrors)
                {
                    error(strFmt("@MCR40420",
                            retailTenderTypeCardTable.cardTypes,
                            RetailChannelTable::findByOperatingUnitId(mcrCustPaymTable.Channel).ChannelType));
                }
            }
            // payment account is required if parameter is true
            if (this.isPaymentAccountRequired(retailStoreTenderTypeCardTable, _validateAccountSetup))
            {
                isValid = false;
                if (_showErrors)
                {
                    error(strFmt("@MCR10845", mcrCustPaymTable.TenderTypeId));
                }
            }
        }
        else
        {
            isValid = false;
            if (_showErrors)
            {
                error(strFmt("@MCR40422",
                        mcrCustPaymTable.CardTypeId,
                        RetailChannelTable::findByRecId(mcrCustPaymTable.Channel).name()));
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGiftCardAvailBalanceLessThanUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a gift card available balance is less than unposted amount.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if a gift card available balance is less than unposted amount; otherwise, false.
    /// </returns>
    protected boolean isGiftCardAvailBalanceLessThanUnpostedAmount(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.getGiftCardAvailableBalance() < _mcrCustPaymTable.getUnpostedAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCardTypeGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether card type is gift card or not.
    /// </summary>
    /// <param name = "_retailTenderTypeCardTable">
    /// The record buffer of <c>RetailTenderTypeCardTable</c> table.
    /// </param>
    /// <returns>
    /// True if card type is not gift card; otherwise, false.
    /// </returns>
    protected boolean isCardTypeGiftCard(RetailTenderTypeCardTable _retailTenderTypeCardTable)
    {
        return (_retailTenderTypeCardTable.cardTypes != RetailCardTypesBase::GiftCard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentAccountRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the payment account is required.
    /// </summary>
    /// <param name = "_retailStoreTenderTypeCardTable">
    /// The record buffer of <c>RetailStoreTenderTypeCardTable</c> table.
    /// </param>
    /// <param name = "_validateAccountSetup">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// True if payment account is not required; otherwise, false.
    /// </returns>
    protected boolean isPaymentAccountRequired(RetailStoreTenderTypeCardTable _retailStoreTenderTypeCardTable, boolean _validateAccountSetup)
    {
        return (_validateAccountSetup
                && _retailStoreTenderTypeCardTable.LedgerDimension == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournal</Name>
				<Source><![CDATA[
    public void postToLedgerJournal(Amount _amount, boolean _isPrepay)
    {
        //<GEERU>
        RetailGiftCardPost_RU giftCardPost_RU;

        if (RetailParameters::find().ProcessGiftCardsAsPrepayments_RU)
        {
            giftCardPost_RU = RetailGiftCardPost_RU::construct();

            giftCardPost_RU.createGiftCardJournalLines(
                mcrCustPaymTable.getGiftCardNumber(),
                mcrCustPaymTable.CustAccount,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                mcrCustPaymTable.CurrencyCode,
                - _amount,
                this.parmDefaultDimension(),
                null,
                conNull(),
                _isPrepay,
                mcrCustPaymTable.displayOrderID(),
                mcrCustPaymTable.RecId);

            giftCardPost_RU.post();
        }
        else
        {
        //</GEERU>
            super(_amount, _isPrepay);
        //<GEERU>
        }
        //</GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine a status of a CallCenter MCRCustPaymTable record
    /// </summary>
    /// <param name = "isRefund">is this a refund?</param>
    /// <param name = "isPost">is this called from post? If false, it is a payment authorization, otherwise it is a payment capture.</param>
    /// <returns>Returns the calculated status for the payment.</returns>
    public MCRCustPaymStatus determineStatus(boolean isRefund = false, boolean isPost = false)
    {
        MCRCustPaymStatus       retStatus       = mcrCustPaymTable.Status;
        CreditCardAuthTrans     creditCardAuthTrans  = CreditCardAuthTrans::mcrFindLatest(mcrCustPaymTable.RecId);
        AmountCur               settledAmount   = CreditCardAuthTrans::mcrFindCharge(mcrCustPaymTable.RecId).ApprovalAmountCur;

        if (settledAmount == mcrCustPaymTable.Amount)
        {
            retStatus = MCRCustPaymStatus::Paid;
        }
        else if (mcrCustPaymTable.PostedAmount == mcrCustPaymTable.Amount)
        {
            retStatus = MCRCustPaymStatus::Posted;
        }
        else
        {
            if (creditCardAuthTrans)
            {
                if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Declined)
                {
                    retStatus = MCRCustPaymStatus::Declined;
                }
                else if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved)
                {
                    if (mcrCustPaymTable.IsPrepay)
                    {
                        retStatus = MCRCustPaymStatus::Posted;
                    }
                    else
                    {
                        if (isRefund)
                        {
                            retStatus = MCRCustPaymStatus::Posted;
                        }
                        else
                        {
                            if (isPost)
                            {
                                retStatus = MCRCustPaymStatus::Paid;
                            }
                            else
                            {
                                retStatus = MCRCustPaymStatus::Authorized;
                            }
                        }
                    }
                }
            }
        }

        return retStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>