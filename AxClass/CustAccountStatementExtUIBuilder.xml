<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountStatementExtUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustAccountStatementExtUIBuilder</c> class is the UI Builder for the
///    <c>CustAccountStatementExt</c> SSRS report.
/// </summary>
public class CustAccountStatementExtUIBuilder extends SrsReportDataContractUIBuilder
{
    #isoCountryRegionCodes

    CustAccountStatementExtContract contract;

    TransDate fromDate;
    TransDate toDate;
    boolean onlyOpen;
    boolean includeReversed;
    PaymentStub printGiro;
    boolean printNonZero;
    boolean printAmountGiro;
    boolean printPayementSchedule;
    boolean printCreditLimit;
    private boolean singleCurrencyReport;
    TransDate specifyDueToDate;
    boolean printAging;
    CustVendAgingBucketLookUp agingBucket;
    NoYesCombo agingBucketPrintDescription;
    PositiveDays interval;
    DayMonth dayMonth;
    ForwardBackwardPrinting printingDirection;
    boolean agingPeriod;
    boolean manualSetup;
    boolean usePrintManagement;
    DateCode dateCode;

    DialogGroup maturityGrp;
    DialogGroup agingBucketGrp;
    DialogGroup matrurityDistributionGrp;
    DialogField fromDateField;
    DialogField toDateField;
    DialogField onlyOpenField;
    DialogField includeReversedField;
    DialogField printGiroField;
    DialogField printNonZeroField;
    DialogField printAmountGiroField;
    DialogField printPayementScheduleField;
    DialogField printCreditLimitField;
    DialogField singleCurrencyReportField;
    DialogField specifyDueToDateField;
    DialogField printAgingField;
    DialogField agingBucketField;
    DialogField agingBucketPrintDescriptionField;
    DialogField intervalField;
    DialogField dayMonthField;
    DialogField printingDirectionField;
    DialogField usePrintManagementField;
    DialogField dateCodeField;
    DialogField includeCompanyLogoField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        contract = this.dataContractObject() as CustAccountStatementExtContract;

        usePrintManagementField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmUsePrintManagement), contract);

        this.dialog().dialogForm().buildDesign().dialogSize(DialogSize::Large);

        dialog.addGroup("@SYS1046");
        dateCodeField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmDateCode), contract);
        fromDateField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmFromDate), contract);
        toDateField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmToDate), contract);
        onlyOpenField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmOnlyOpen), contract);
        includeReversedField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmIncludeReversed), contract);
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK, #isoBE, #isoCH, #isoNO, #isoFI, #isoCZ, #isoHU]))
        {
            printGiroField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintGiro), contract);
            printAmountGiroField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintAmountGiro), contract);
        }
        printNonZeroField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintNonZero), contract);
        printPayementScheduleField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintPaymentSchedule), contract);
        singleCurrencyReportField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmSingleCurrencyReport), contract);
        printCreditLimitField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintCreditLimit), contract);
        specifyDueToDateField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmSpecifyDueToDate), contract);

        if (CustAccountStatementExtIncludeLogoDialogFlight::instance().isEnabled())
        {
            includeCompanyLogoField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmIncludeCompanyLogo), contract);
        }

        maturityGrp = dialog.addGroup("@SYS91515");
        printAgingField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintAging), contract);
        printAgingField.enabled((fromDateField.value() && fromDateField.value()) || dateCodeField.value());

        agingBucketGrp = dialog.addGroup("@SYS78297", maturityGrp);
        agingBucketGrp.frameOptionButton(FormFrameOptionButton::Radio);
        agingBucketField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmAgingBucket), contract);
        agingBucketField.enabled(printAgingField.value() && agingBucketGrp.optionValue());
        agingBucketPrintDescriptionField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmAgingBucketPrintDescription), contract);
        agingBucketPrintDescriptionField.enabled(printAgingField.value() && agingBucketGrp.optionValue());

        matrurityDistributionGrp = dialog.addGroup("@SYS91521", maturityGrp);
        matrurityDistributionGrp.frameOptionButton(FormFrameOptionButton::Radio);
        intervalField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmInterval), contract);
        intervalField.enabled(printAgingField.value() && matrurityDistributionGrp.optionValue());
        dayMonthField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmDayMonth), contract);
        dayMonthField.enabled(printAgingField.value() && matrurityDistributionGrp.optionValue());
        printingDirectionField = this.addDialogField(methodStr(CustAccountStatementExtContract, parmPrintingDirection), contract);
        printingDirectionField.enabled(printAgingField.value() && matrurityDistributionGrp.optionValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the detail dialog field. The level must be enabled or disabled
    ///    according to value in detail field.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean fromDateModified(FormDateControl _control)
    {
        boolean ret = true;

        if (_control.modified())
        {
            if (fromDateField.value())
            {
                dateCodeField.value('');
            }
            
            this.dateFieldModified();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers data from the dialog into the data contract object.
    /// </summary>
    public void getFromDialog()
    {
        super();

        if (printAgingField.value())
        {
            contract.parmAgingPeriod(agingBucketGrp.optionValue());
            contract.parmManualSetup(matrurityDistributionGrp.optionValue());
        }
        else
        {
            contract.parmAgingPeriod(false);
            contract.parmManualSetup(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts run actions.
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);
        fromDateField.registerOverrideMethod(methodStr(FormDateTimeControl, modified), methodStr(CustAccountStatementExtUIBuilder, fromDateModified), this);
        toDateField.registerOverrideMethod(methodStr(FormDateTimeControl, modified), methodStr(CustAccountStatementExtUIBuilder, toDateModified), this);
        printAgingField.registerOverrideMethod(methodStr(FormDateTimeControl, modified), methodStr(CustAccountStatementExtUIBuilder, printAgingModified), this);
        dateCodeField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(CustAccountStatementExtUIBuilder, dateCodeModified), this);
        dateCodeField.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(CustAccountStatementExtUIBuilder, dateIntervalValidate), this);

        if (contract.parmHideSSRSDestination())
        {
            this.hideSSRSDestinationTab();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideSSRSDestinationTab</Name>
				<Source><![CDATA[
    private void hideSSRSDestinationTab()
    {
        const str destinationControlName = formControlStr(SysOperationTemplateForm, Destination);

        FormControl destinationControl = dialog.formRun().control(dialog.formRun().controlId(destinationControlName));

        if (destinationControl)
        {
            destinationControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printAgingModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the detail dialog field. The level must be enabled or disabled
    ///    according to the value in the detail field.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean printAgingModified(FormCheckBoxControl _control)
    {
        boolean ret = true;

        if (_control.modified())
        {
            if (printAgingField.value())
            {
                agingBucketField.enabled(true);
                agingBucketPrintDescriptionField.enabled(true);
                intervalField.enabled(true);
                dayMonthField.enabled(true);
                printingDirectionField.enabled(true);
            }
            else
            {
                agingBucketField.enabled(false);
                agingBucketPrintDescriptionField.enabled(false);
                intervalField.enabled(false);
                dayMonthField.enabled(false);
                printingDirectionField.enabled(false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the detail dialog field. The level must be enabled or disabled
    ///    according to the value in the detail field.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean toDateModified(FormDateControl _control)
    {
        boolean ret = true;

        if (_control.modified())
        {
            if (toDateField.value())
            {
                dateCodeField.value('');
            }
            
            this.dateFieldModified();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCodeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the date code dialog field. The date from and date to should be populated
    ///    according to the value in the date code field.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean dateCodeModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            if (dateCodeField.value())
            {
                LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(dateCodeField.value());

                if (ledgerPeriodCode)
                {
                    fromDateField.value(ledgerPeriodCode.fromDate());
                    toDateField.value(ledgerPeriodCode.toDate());

                    this.dateFieldModified();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFieldModified</Name>
				<Source><![CDATA[
    private void dateFieldModified()
    {
        if ((fromDateField.value() && toDateField.value()) || dateCodeField.value())
        {
            printAgingField.enabled(true);
        }

        if ((!fromDateField.value() || !toDateField.value()) && !dateCodeField.value())
        {
            printAgingField.enabled(false);
            agingBucketField.enabled(false);
            agingBucketPrintDescriptionField.enabled(false);
            intervalField.enabled(false);
            dayMonthField.enabled(false);
            printingDirectionField.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIntervalValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that a date interval is valid.
    /// </summary>
    /// <param name="_control">
    /// The control in which to verify the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The date interval must exist in the <c>LedgerPeriodCode</c> table.
    /// </remarks>
    private boolean dateIntervalValidate(FormStringControl _control)
    {
        boolean returnValue = true;

        if (_control.modified() && dateCodeField.value())
        {
            returnValue = LedgerPeriodCode::checkExist(dateCodeField.value());

            if (!returnValue)
            {
                dateCodeField.value('');
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>