<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkTableForm</c> class contains the business logic of the <c>WhsWorkTable</c> form.
/// </summary>
class WhsWorkTableForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelLine_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles when Cancel Line button is clicked for selected work lines.
    /// </summary>
    /// <param name="_whsWorkLineDS">
    /// Form data source containing the selected work lines.
    /// </param>
    public void cancelLine_clicked(FormDataSource _whsWorkLineDS)
    {
        var multiSelect = MultiSelectionHelper::construct();
        multiSelect.parmDatasource(_whsWorkLineDS);

        Common workLineCommon = multiSelect.getFirst();

        if (_whsWorkLineDS.recordsMarked().lastIndex() <= 1)
        {
            // Only let the user change quantity if one line is selected to cancel. If multiple
            // lines are selected, assume that full quantity needs to be canceled.
            this.cancelWorkLineWithDialog(this.getWorkLineFromSelected(workLineCommon));
        }
        else
        {
            while (workLineCommon)
            {
                WHSWorkLine workLineProcess = this.getWorkLineFromSelected(workLineCommon);

                WHSCanCancelWorkLineValidationResult result = this.canCancelLineFromUI(workLineProcess);

                if (result.getCanCancelWorkLineResult())
                {
                    WHSWorkLine::cancelLine(workLineProcess.WorkId, workLineProcess.LineNum, workLineProcess.InventQtyWork, workLineProcess.ItemId, false);
                }
                else
                {
                    error(result.getErrorMessage());
                }

                workLineCommon = multiSelect.getNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelLineFromUI</Name>
				<Source><![CDATA[
    private WHSCanCancelWorkLineValidationResult canCancelLineFromUI(WHSWorkLine _workLine)
    {
        if (_workLine.canCancelLine())
        {
            WHSLockedUser lockedUser = WHSWorkClusterTable::findLockedUserFromClusterThatHasWorkIdAssociated(_workLine.WorkId);

            if (lockedUser)
            {
                return WHSCanCancelWorkLineValidationResult::newFailureWithMessage(strFmt("@WAX:WHSCancelWorkLineOfWorkAssociatedToClusterLockedByUserError", _workLine.WorkId, _workLine.LineNum, lockedUser));
            }
            return WHSCanCancelWorkLineValidationResult::newSuccess();
        }

        return WHSCanCancelWorkLineValidationResult::newFailureWithMessage(this.formatWorkCannotBeCanceledMessage(_workLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineFromSelected</Name>
				<Source><![CDATA[
    private WHSWorkLine getWorkLineFromSelected(Common _workLineCommon)
    {
        WHSWorkLine workLine;

        if (_workLineCommon is WHSWorkLineView)
        {
            var workLineView = _workLineCommon as WHSWorkLineView;
            workLine = workLineView.whsWorkLine();
        }
        else
        {
            workLine = _workLineCommon;
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatWorkCannotBeCanceledMessage</Name>
				<Source><![CDATA[
    private str formatWorkCannotBeCanceledMessage(WHSWorkLine _workLine)
    {
        return strFmt("@WAX:WorkLineCannotBeCanceled", _workLine.WorkId, _workLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkLineWithDialog</Name>
				<Source><![CDATA[
    private void cancelWorkLineWithDialog(WHSWorkLine _workLine)
    {
        WHSCanCancelWorkLineValidationResult result = this.canCancelLineFromUI(_workLine);

        if (!result.getCanCancelWorkLineResult())
        {
            error(result.getErrorMessage());
        }
        else
        {
            var dialog = new Dialog();
            dialog.caption("@WAX2135");
            dialog.windowType(FormWindowType::PopUp);

            var dfInventQty = dialog.addField(extendedTypeStr(InventHandlingQty));
            dfInventQty.value(_workLine.InventQtyWork);

            var dfUnitId = dialog.addField(extendedTypeStr(UnitOfMeasureSymbol));
            dfUnitId.value(WHSCatchWeightHelper::inventHandlingUnitId(_workLine.ItemId));
            dfUnitId.enabled(false);

            if (dialog.run())
            {
                InventHandlingQty inventHandlingQty = dfInventQty.value();

                if (inventHandlingQty < 0)
                {
                    error("@WAX:WorkQuantityCannotBeNegative");
                }
                else if (!inventHandlingQty || inventHandlingQty <= _workLine.InventQtyWork)
                {
                    WHSWorkLine::cancelLine(_workLine.WorkId, _workLine.LineNum, inventHandlingQty, _workLine.ItemId, false);
                }
                else
                {
                    error("@WAX2137");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowChangeWorkLockedUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is possible to change the work locked user for all selected work orders.
    /// </summary>
    /// <param name="_caller">An instance of <c>FormRun</c> that called this method.</param>
    public static boolean allowChangeWorkLockedUser(FormRun _caller)
    {
        var multiSelect = MultiSelectionHelper::createFromCaller(_caller);

        if (WHSWorkTableFormMultiSelectGetDataSourceFromCallerFlight::instance().isEnabled())
        {
            FormDataSource formDataSource;

            for (int dataSourceNo = 1; dataSourceNo <= _caller.dataSourceCount(); dataSourceNo++)
            {
                formDataSource = _caller.dataSource(dataSourceNo);

                if (formDataSource.table() == tableNum(WHSWorkTable))
                {
                    multiSelect.parmDatasource(formDataSource);
                }
            }
        }

        var work = multiSelect.getFirst();
        while (work)
        {
            WHSWorkTable workTable = work is WHSWorkTable ? work : WHSWorkTable::find(work.getFieldValue(fieldStr(WHSWorkTable, WorkId)));
            if (!workTable.allowChangeWorkLockedUser()) // If at least one work order does not allow changing user, return false
            {
                return false;
            }
            work = multiSelect.getNext();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to a specified inventory transaction.
    /// </summary>
    /// <param name="_inventTransId">
    /// Inventory transaction id.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str inventTransIdFilter(InventTransId _inventTransId)
    {
        WHSWorkLine         tmpWorkLine;
        str                 ret;

        while select WorkId from tmpWorkLine
            group by WorkId
            where tmpWorkLine.InventTransId == _inventTransId
        {
            if (!ret)
            {
                ret = tmpWorkLine.WorkId;
            }
            else
            {
                ret += ',' + tmpWorkLine.WorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to a specified kanban id.
    /// </summary>
    /// <param name="_kanbanId">
    /// Kanban Id.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str kanbanIdFilter(KanbanId _kanbanId)
    {
        WHSWorkTable    workTableLocal;
        str             ret;

        while select WorkId from workTableLocal
            group by WorkId
            where workTableLocal.OrderNum	   == _kanbanId
            &&	  workTableLocal.WorkTransType == WHSWorkTransType::KanbanPick
        {
            if (!ret)
            {
                ret = workTableLocal.WorkId;
            }
            else
            {
                ret += ',' + workTableLocal.WorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to a specified load.
    /// </summary>
    /// <param name="_loadId">
    /// Load id.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str loadFilter(WHSLoadId _loadId)
    {
        WHSWorkLine tmpWorkLine;
        WHSWorkTable workTable;

        str ret;

        while select WorkId from tmpWorkLine
            group by WorkId
            where tmpWorkLine.LoadId == _loadId
            notexists join workTable
                where workTable.WorkId == tmpWorkLine.WorkId
                    && workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking
        {
            if (!ret)
            {
                ret = tmpWorkLine.WorkId;
            }
            else
            {
                ret += ',' + tmpWorkLine.WorkId;
            }
        }

        ret = this.addSortedInventoryPickingWorkForLoadId(_loadId, ret);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLoadWorkIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list containing work ids related to a specified load.
    /// </summary>
    /// <param name="_loadId">
    /// Load id.
    /// </param>
    /// <param name="_tmpWorkids">
    /// Temp table buffer.
    /// </param>
    /// <returns>
    /// List of work id's.
    /// </returns>
    internal RecordInsertList populateLoadWorkIdList(WHSLoadId _loadId, WHSTmpWorkId _tmpWorkIds)
    {
        RecordInsertList whsWorkIds = new RecordInsertList(tableNum(WHSTmpWorkId), true, true, true, false, false, _tmpWorkIds);

        this.addToLoadWorkIdList(_loadId, _tmpWorkIds, whsWorkIds);
        
        return whsWorkIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToLoadWorkIdList</Name>
				<Source><![CDATA[
    protected void addToLoadWorkIdList(WHSLoadId _loadId, WHSTmpWorkId _tmpWorkIds, RecordInsertList _whsWorkIds)
    {
        this.addLoadWorkIds(_loadId, _tmpWorkIds, _whsWorkIds);
        this.addSortedInventoryPickingWorkForLoadIdTmpTable(_loadId, _tmpWorkIds, _whsWorkids);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadWorkIds</Name>
				<Source><![CDATA[
    private void addLoadWorkIds(WHSLoadId _loadId, WHSTmpWorkId _tmpWorkIds, RecordInsertList _whsWorkIds)
    {
        WHSWorkLine workLine;
        WHSWorkTable workTable;

        while select WorkId from workLine
            group by WorkId
            where workLine.LoadId == _loadId
            notexists join workTable
                where workTable.WorkId == workLine.WorkId
                    && workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking
        {
            _tmpWorkIds.WorkId = workLine.WorkId;
            _whsWorkIds.add(_tmpWorkIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortedInventoryPickingWorkForLoadIdTmpTable</Name>
				<Source><![CDATA[
    private void addSortedInventoryPickingWorkForLoadIdTmpTable(WHSLoadId _loadId, WHSTmpWorkId _tmpWorkIds, RecordInsertList _whsWorkIds)
    {
        WHSOutboundSortPosition      sortPosition;
        WHSOutboundSortPositionTrans sortPositionTrans;
        WHSWorkTable                 workTable;
        WHSWorkLine                  workLine;
        WHSLoadLine                  loadLine;

        while select WorkId from workTable
            where workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking
            exists join sortPosition
                where sortPosition.LicensePlateId == workTable.TargetLicensePlateId
            exists join sortPositionTrans
                where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
            exists join workLine
                where workLine.WorkId == workTable.WorkId
                &&    workLine.RecId  == sortPositionTrans.WorkLine
            exists join loadLine
                where loadLine.RecId    == sortPositionTrans.LoadLine
                &&    loadLine.LoadId   == _loadId
        {
            _tmpWorkIds.WorkId = workTable.WorkId;
            _whsWorkIds.add(_tmpWorkIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortedInventoryPickingWorkForLoadId</Name>
				<Source><![CDATA[
    private str addSortedInventoryPickingWorkForLoadId(
        WHSLoadId _loadId,
        str       _workIds)
    {
        str ret = _workIds;

        WHSOutboundSortPosition      sortPosition;
        WHSOutboundSortPositionTrans sortPositionTrans;
        WHSWorkTable                 tmpWorkTable;
        WHSWorkLine                  tmpWorkLine;
        WHSLoadLine                  loadLine;

        while select WorkId from tmpWorkTable
            where tmpWorkTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking
            exists join sortPosition
                where sortPosition.LicensePlateId == tmpWorkTable.TargetLicensePlateId
            exists join sortPositionTrans
                where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
            exists join tmpWorkLine
                where tmpWorkLine.WorkId == tmpWorkTable.WorkId
                &&    tmpWorkLine.RecId  == sortPositionTrans.WorkLine
            exists join loadLine
                where loadLine.RecId    == sortPositionTrans.LoadLine
                &&    loadLine.LoadId   == _loadId
        {
            if (!ret)
            {
                ret = tmpWorkTable.WorkId;
            }
            else
            {
                ret += ',' + tmpWorkTable.WorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to the specified container.
    /// </summary>
    /// <param name="_containerTable">
    /// A <c>WHSContainerTable</c> record.
    /// </param>
    /// <returns>
    /// A filter string.
    /// </returns>
    public str containerFilter(WHSContainerTable _containerTable)
    {
        WHSWorkTable	workTable;
        str				ret;

        while select WorkId from workTable
            where workTable.ContainerId == _containerTable.ContainerId
        {
            if (!ret)
            {
                ret = workTable.WorkId;
            }
            else
            {
                ret += ',' + workTable.WorkId;
            }
        }

        if (_containerTable.ContainerGroupingLicensePlateId)
        {
            while select WorkId from workTable
                where workTable.TargetLicensePlateId == _containerTable.ContainerGroupingLicensePlateId
            {
                if (!ret)
                {
                    ret = workTable.WorkId;
                }
                else
                {
                    ret += ',' + workTable.WorkId;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to a specified production order.
    /// </summary>
    /// <param name="_prodId">
    /// Production order id.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str prodTableFilter(ProdId _prodId)
    {
        WHSWorkTable        tmpWorkTable;
        str                 ret;

        while select WorkId from tmpWorkTable
            group by WorkId
            where tmpWorkTable.OrderNum == _prodId &&
                  (tmpWorkTable.WorkTransType == WHSWorkTransType::ProdPick ||
                   tmpWorkTable.WorkTransType == WHSWorkTransType::ProdProcessPut ||
                   tmpWorkTable.WorkTransType == WHSWorkTransType::ProdPut)
        {
            if (!ret)
            {
                ret = queryValue(tmpWorkTable.WorkId);
            }
            else
            {
                ret += ',' + queryValue(tmpWorkTable.WorkId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentWorkFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to a specified demand replenishment work id.
    /// </summary>
    /// <param name="_workId">
    /// Demand replenishment work id.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str replenishmentWorkFilter(WHSWorkId   _workId)
    {
        WHSReplenWorkLink   replenWorkLink;
        str                 ret;

        while select replenWorkLink
            group by replenWorkLink.ReplenWorkId
            where replenWorkLink.DemandWorkId == _workId
        {
            if (!ret)
            {
                ret = replenWorkLink.ReplenWorkId;
            }
            else
            {
                ret += ',' + replenWorkLink.ReplenWorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowClosedFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter for showing closed works.
    /// </summary>
    /// <param name="_showClosed">
    /// Determines whether to include closed works or not.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str setShowClosedFilter(boolean _showClosed)
    {
        str filter;

        if (_showClosed)
        {
            filter = '';
        }
        else
        {
            filter = '!' + enum2str(WHSWorkStatus::Closed) + ',' +
                     '!' + enum2str(WHSWorkStatus::Combined) + ',' +
                     '!' + enum2str(WHSWorkStatus::Cancelled);
        }

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentTableFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter string containing work ids related to a specified shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id.
    /// </param>
    /// <returns>
    /// Filter string.
    /// </returns>
    public str shipmentTableFilter(WHSShipmentId _shipmentId)
    {
        WHSWorkLine     tmpWorkLine;
        str             ret;

        while select WorkId from tmpWorkLine
            group by WorkId
            where tmpWorkLine.ShipmentId == _shipmentId
        {
            if (!ret)
            {
                ret = tmpWorkLine.WorkId;
            }
            else
            {
                ret += ',' + tmpWorkLine.WorkId;
            }
        }

        ret = this.addSortedInventoryPickingWorkForShipmentId(_shipmentId, ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortedInventoryPickingWorkForShipmentId</Name>
				<Source><![CDATA[
    private str addSortedInventoryPickingWorkForShipmentId(
        WHSShipmentId   _shipmentId,
        str             _workIds)
    {
        str ret = _workIds;

        WHSOutboundSortPosition      sortPosition;
        WHSOutboundSortPositionTrans sortPositionTrans;
        WHSWorkTable                 tmpWorkTable;
        WHSWorkLine                  tmpWorkLine;
        WHSLoadLine                  loadLine;

        while select WorkId from tmpWorkTable
            where tmpWorkTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking
            exists join sortPosition
                where sortPosition.LicensePlateId == tmpWorkTable.TargetLicensePlateId
            exists join sortPositionTrans
                where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
            exists join tmpWorkLine
                where tmpWorkLine.WorkId == tmpWorkTable.WorkId
                &&    tmpWorkLine.RecId  == sortPositionTrans.WorkLine                        
            exists join loadLine
                where loadLine.RecId        == sortPositionTrans.LoadLine
                &&    loadLine.ShipmentId   == _shipmentId
        {
            if (!ret)
            {
                ret = tmpWorkTable.WorkId;
            }
            else
            {
                ret += ',' + tmpWorkTable.WorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceButton_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls the source order form for the order related to the selected work.
    /// </summary>
    /// <param name="_whsWorkTable">
    ///     <c>WHSWorkTable</c> record to use to find the source record.
    /// </param>
    public void sourceButton_clicked(WHSWorkTable  _whsWorkTable)
    {
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(_whsWorkTable.WorkTransType);

        if (workTransactionType)
        {
            workTransactionType.openSourceOrder(_whsWorkTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsWorkLine_active</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a work line can be cancelled when the line is active.
    /// </summary>
    /// <param name="_whsWorkLine">
    /// The active work line.
    /// </param>
    /// <returns>
    /// True if the work line can be cancelled, false otherwise.
    /// </returns>
    public boolean whsWorkLine_active(WHSWorkLine  _whsWorkLine)
    {
        boolean     cancelLine;

        if (_whsWorkLine.WorkType == WHSWorkType::Put || !_whsWorkLine.ItemId || _whsWorkLine.WorkStatus == WHSWorkStatus::Cancelled)
        {
            cancelLine = false;
        }
        else
        {
            cancelLine = true;
        }

        return cancelLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateChangeLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the change location line button be active.
    /// </summary>
    /// <param name = "_whsWorkLine">The work line.</param>
    /// <returns>true if active; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean activateChangeLocation(WHSWorkLine _whsWorkLine)
    {
        if (_whsWorkLine.WorkStatus != WHSWorkStatus::Open
        ||  (_whsWorkLine.WorkType  != WHSWorkType::Pick
        &&   _whsWorKline.WorkType  != WHSWorkType::Put)
        ||  (_whsWorkLine.isLastWorkLine()
        &&   _whsWorkLine.whsWorkTable().isReplenDemand()))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the location.
    /// </summary>
    /// <param name = "_workLine">The work line.</param>
    [Hookable(false)]
    internal void changeLocation(WHSWorkLine _workLine)
    {
        Dialog dialog = new Dialog("@WAX:ChangeLocationWorkLinePrompt", this);
        DialogField locField = dialog.addField(extendedTypeStr(WMSLocationId));

        dialog.run();

        if (dialog.closedOk())
        {
            WMSLocationId locationId = locField.value();
            InventLocationId inventLocationId = _workLine.whsWorkTable().inventLocationId;

            if (_workLine.WorkType == WHSWorkType::Put)
            {
                WHSPutLocationChangeCheck locationCheck = WHSPutLocationChangeCheck::newFromParameters(
                                                                                        inventLocationId,
																						locationId,
																						_workLine.ItemId,
																						_workLine);

                if (!locationCheck.checkLocation())
                {
                    throw error("@WAX755");
                }
            }
            else if (!WMSLocation::exist(locationId, inventLocationId))
            {
                throw error("@WAX:ChangeLocaitonWorkLineWarehouseValidation");
            }

            WHSWorkExecute workExecute = new WHSWorkExecute();
            workExecute.updateWorkLineLocation(_workLine.WorkId, _workLine.LineNum, locationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workLineCycleCountFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the filter based on the WHSAdjustmentWorkId
    /// </summary>
    /// <param name="_adjustWorkId">
    /// The WHSAdjustmentWorkId pulled from the WHSWorkLineCycleCount table that was passed in
    /// </param>
    /// <returns>
    /// A string to be used as the filter for the form
    /// </returns>
    public str workLineCycleCountFilter(WHSAdjustmentWorkId _adjustWorkId)
    {
        str ret;

        if (_adjustWorkId)
        {
            ret = _adjustWorkId;
        }
        else
        {
            throw error("@WAX613");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHasOpenInitialPickLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the passed work has open initial pick lines.
    /// </summary>
    /// <param name = "_workTable">The work</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work has no open initial pick lines.
    /// </exception>
    [Hookable(false)]
    internal void validateWorkHasOpenInitialPickLines(WHSWorkTable _workTable)
    {
        if (!_workTable.hasOpenPickLinesPriorToFirstPut())
        {
            throw error(strFmt("@WAX:NoOpenInitialPickLines", _workTable.workId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWorkBeingSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to block the passed work for for splitting.
    /// </summary>
    /// <param name = "_workId">The id of the work that should be blocked</param>
    [Hookable(false)]
    internal void tryBlockWorkBeingSplit(WHSWorkId _workId)
    {
        WHSBlockWorkForSplit::tryBlockWorkBeingSplit(_workId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>