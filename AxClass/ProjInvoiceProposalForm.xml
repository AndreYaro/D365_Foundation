<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjInvoiceProposalForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setProposalProjFilterServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serves as a helper method for the <c>ProjInvoiceProposalForm</c>, which needs to run on server for
    ///    efficiency reasons.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    ///    The <paramref name="projInvoiceProjID" /> helps narrow down the filtering to what the form needs to
    ///    show.
    /// </param>
    /// <param name="_projId">
    ///    The <paramref name="projID" /> helps narrow down the filtering to what the form needs to show.
    /// </param>
    /// <returns>
    ///    A container, which is a packed representation of the set that contains the results.
    /// </returns>
    /// <remarks>
    ///    Make sure to unpack the result into a new client-side set.
    /// </remarks>
    public static container setProposalProjFilterServer(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId)
    {
        ProjProposalJour    projProposalJour;

        ProjProposalItem    proposalItem;
        ProjProposalEmpl    proposalEmpl;
        ProjProposalRevenue proposalRevenue;
        ProjProposalOnAcc   proposalOnAcc;
        ProjProposalCost    proposalCost;

        ProjEmplTrans       emplTrans;
        ProjCostTrans       costTrans;
        ProjItemTrans       itemTrans;
        ProjOnAccTrans      onAccTrans;
        ProjRevenueTrans    revenueTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        Set                 setFilter       = new Set(Types::String);

        while select ProposalId from projProposalJour where projProposalJour.ProjInvoiceProjId == _projInvoiceProjId
        {
            /* HOUR TRANSACTIONS */
            select firstonly RecId from proposalEmpl
                exists join emplTrans
                where   proposalEmpl.ProposalId == projProposalJour.ProposalId
                      && emplTrans.TransId == proposalEmpl.TransId
                      && emplTrans.ProjId like _projId;

            if (proposalEmpl.RecId)
            {
                setFilter.add(projProposalJour.ProposalId);
            }

            /* EXPENSE TRANSACTIONS */
            select firstonly RecId from proposalCost
                exists join costTrans
                where proposalCost.ProposalId == projProposalJour.ProposalId
                      && costTrans.TransId == proposalCost.TransId
                      && costTrans.ProjId like _projId;

            if (proposalCost.RecId)
            {
                setFilter.add(projProposalJour.ProposalId);
            }

            /* SALES ORDER TRANSACTIONS */
            select firstonly RecId from proposalItem
                where proposalItem.ProposalId == projProposalJour.ProposalId
                      && proposalItem.SalesId
                exists join inventTransOrigin
                where inventTransOrigin.InventTransId == proposalItem.InventTransId
                exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                      && inventTrans.ProjId like _projId;

            if (proposalItem.RecId)
            {
                setFilter.add(projProposalJour.ProposalId);
            }

            /* ITEM TRANSACTIONS */
            select firstonly RecId from proposalItem
                exists join itemTrans
                where proposalItem.ProposalId == projProposalJour.ProposalId
                      && itemTrans.InventTransId == proposalItem.InventTransId
                      && itemTrans.ProjId like _projId;

            if (proposalItem.RecId)
            {
                setFilter.add(projProposalJour.ProposalId);
            }

            /* ON ACCOUNT TRANSACTIONS */
            select firstonly RecId from proposalOnAcc
                exists join onAccTrans
                where proposalOnAcc.ProposalId == projProposalJour.ProposalId
                      && onAccTrans.TransId == proposalOnAcc.TransId
                      && onAccTrans.ProjID like _projId;

            if (proposalOnAcc.RecId)
            {
                setFilter.add(projProposalJour.ProposalId);
            }

            /* REVENUE TRANSACTIONS */
            select firstonly RecId from proposalRevenue
                exists join revenueTrans
                where proposalRevenue.ProposalId == projProposalJour.ProposalId
                      && revenueTrans.TransId == proposalRevenue.TransId
                      && revenueTrans.ProjId like _projId;

            if (proposalRevenue.RecId)
            {
                setFilter.add(projProposalJour.ProposalId);
            }
        }

        return setFilter.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>