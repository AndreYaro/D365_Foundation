<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportContractLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>TaxGSTRReportContractLine_IN</c> contains tax line information.
/// </summary>
public class TaxGSTRReportContractLine_IN
{
    private const TaxComponent_IN CGST = 'CGST';
    private const TaxComponent_IN IGST = 'IGST';
    private const TaxComponent_IN SGST = 'SGST';
    private const TaxComponent_IN CESS = 'CESS';
    private const TaxComponent_IN CGST_TDS = 'CGST_TDS';
    private const TaxComponent_IN IGST_TDS = 'IGST_TDS';
    private const TaxComponent_IN SGST_TDS = 'SGST_TDS';
    private const TaxComponent_IN CESS_TDS = 'CESS_TDS';

    private TaxDocumentRowTransaction taxDocumentRowTrans;
    private TaxDocumentRowTransaction_IN taxDocumentRowTransIN;
    private TaxModuleTypeId type;
    private NoYes isExempted;
    private NoYes isRefundClaimed;
    private NoYes isNonGst;
    private NoYes isReverseCharge;
    private NoYes isInterstate;
    private NoYes isConsumer;
    private NoYes isPrepayment;
    private TaxExportImport_IN exportImport;
    private GTAServiceCategory_IN inwardOutward;
    private TaxRegistrationNumber_IN gstin;
    private DirPartyName custVendAccount;
    private CustInvoiceId invoiceNumber;
    private TransDate invoiceDate;
    private AmountCur invoiceValue;
    private AmountCur interest;
    private TaxGoodsServices_IN goodsServices;
    private String50 hsnSacCode;
    private DiscAmount totalItemDiscountAmount;
    private TaxAmount taxableValue;
    private TaxComponent_IN taxComponent;
    private TaxValue taxRate;
    private TaxAmount taxAmount;
    private TaxAmount taxAmountITC;
    private TaxAmount taxAmountPaid;
    private TaxDirection taxDirection;
    private LogisticsAddressStateId placeOfSupply;
    private NoYes isProvisionalAssessment;
    private TaxRegistrationNumber_IN gstinEcommerce;
    private CustomsShippingBillNumber_IN shippingBillNumber;
    private CustomsDate_IN shippingBillDate;
    private AddressCountryRegionId recipientStateCode;
    private CustInvoiceId originalInvoiceNumber;
    private TransDate originalInvoiceDate;
    private ITCCategory_IN itcEligibility;
    private TaxAmount itcTotalAvailable;
    private TaxAmount itcAvailableThisMonth;
    private TaxAmount itcTax;
    private String50 documentNumber;
    private TransDate documentDate;
    private real reverseChargePct;
    private TransactionID transactionID;
    private Description description;
    private MerchantID_IN merchantId;
    private String20 month;
    private String50 measure;
    private SequenceNumber sequenceNumber;
    private NoYes isECommerce;
    private Description unitOfMeasure;
    private Qty quantity;
    private TaxAmount advanceAmount;
    private NoteType_MY noteType;
    private InvoiceId noteNumber;
    private TransDate noteDate;
    private ReasonCode reasonCode;
    private NoYes isSettled;
    private TaxRegistrationNumber_IN gstinISD;
    private Amount differentialValue;
    private MerchantID_IN merchantIdEComm;
    private TransDate paymentDate;
    private NoYes isCompounding;
    private Amount additionalTaxAmount;
    private Amount assessableValue;
    private Amount itcReversalAmount;
    private TaxValue rateTDS;
    private TaxAmount taxAmountTDS;
    private TaxAmount taxPaidCashLedger;
    private TaxAmount taxPaidITC;
    private TaxAmount addTaxPaidCashLedger;
    private TaxAmount addTaxPaidITC;
    private Amount refundAmount;
    private TaxAmount cgstAmount;
    private TaxAmount igstAmount;
    private TaxAmount sgstAmount;
    private TaxAmount cessAmount;
    private TaxValue cgstRate;
    private TaxValue igstRate;
    private TaxValue sgstRate;
    private TaxValue cessRate;
    private TaxAmount cgstMonthAmountITC;
    private TaxAmount igstMonthAmountITC;
    private TaxAmount sgstMonthAmountITC;
    private TaxAmount cessMonthAmountITC;
    private InvoiceIdentification_IN invoiceIdentification;
    private str originalTransactionID;
    private TransDate originalTransactionDate;
    private CustomerType_IN customerType;
    private TaxAccountingPostingAccountType taxAccountType;
    private EcoResDescription itemDescription;
    private PriceCur itemRate;
    private LogisticsAddressing custVendAddress;
    private LogisticsAddressCountryRegionISOCode custVendIsoCode;
    private str custVendCity;
    private LogisticsAddressStateId custVendState;
    private NoYes isExportImport;
    private TaxExportImportType_IN exportImportType;
    private TaxAmount recoverableAmount;
    private TaxAmount cgstITCAvailableAmount;
    private TaxAmount igstITCAvailableAmount;
    private TaxAmount sgstITCAvailableAmount;
    private TaxAmount cessITCAvailableAmount;
    private TaxRegistrationNumber_IN originalGstin;
    private TaxTransactionCategory_IN transCategory;
    private NoYes advanceForBillOfSupply;
    private NoYes isGSTTDSDeducted;
    private ServiceCategory_IN serviceCategory;
    private str itcAvailabilityType;
    private CustomsBillOfEntryNumber_IN billOfEntryNumber;
    private CustomsDate_IN billOfEntryDate;
    private TransDate goodsReceiptNoteDate;
    private str goodsReceiptNoteNumber;
    private PurchDeliveredQty goodsReceiptQuantity;
    private AmountMST goodsReceiptAmount;
    private RealBase settlementRate;
    private RealBase unSettledPaymentPercent;
    private TaxTypeOfBillOfSupply_IN taxTypeOfBillOfSupply;
    private NoYes isBillOfSupply;
    private NoYes multiplePayment;
    private NoYes isDocumentCancelled;
    private NoYes isSupplyCoveredUnderSec7;
    private NoYes isForeignCustVend;
    private NoYes isExportOrder;
    
    private AmountMST adjustmentAmount;
    private str portCode;
    private RealBase settledInvoicePercent;
    private container advancePaymentNumCon;
    private TaxRegistrationNumber_IN companyRegNumber;
    private ReasonComment reasonComment;
    private NoYes isNoteForPreGST;
    private NoYes isSupplierCompositionDealer;
    private NoYes isNoteForBillOfSupply;
    private str isCustCompositionOrUINReg;
    private AmountCur totalTransactionValue;
    private str typeOfInvNoteLinkTo;

    private str reportTabPage;
    private str placeOfSupplyLongform;
    private AmountMST originalTransactionTotalValue;
    private Voucher voucher;
    private ItemId itemId;
    private InventQty inventQty;
    private RefRecId gstTransactionInNumSeq;
    private InvoiceId invoiceId;
    private TaxAmount billOfEntryValue;
    private DirPartyName eCommerceOperatorName;
    private str differentialOfTaxRate;
    private TaxAmount taxableValueReturned;
    private TaxAmount taxableValueNet;
    private TaxValue applicableRate;
    private NoYes wouldYouClaimRefund;
    private TaxGSTEPZCode_IN epzCode;
    private TaxGSTRInwardSuppliesType_IN inwardSuppliesType;
    private NoYes isImportOrder;
    private boolean isAnx1;
    private TaxGSTRReturnFilingMonth_IN returnFilingMonth;
    private TaxGSTRReturnFilingQuarter_IN returnFilingQuarter;
    private boolean isNoteForBillOfSupplyBlank;

    // Cache the function result for performance enhancement
    private static Map enumSymbols = new Map(Types::Integer, Types::Class);
    private static Map enumStrs    = new Map(Types::Integer, Types::Class);
    
    private static EnumId enumNumCustomerType_IN = enumNum(CustomerType_IN);
    private static EnumId enumNumGTAServiceCategory_IN = enumNum(GTAServiceCategory_IN);
    private static EnumId enumNumInvoiceIdentification_IN = enumNum(InvoiceIdentification_IN);
    private static EnumId enumNumITCCategory_IN = enumNum(ITCCategory_IN);
    private static EnumId enumNumNoteType_MY = enumNum(NoteType_MY);
    private static EnumId enumNumTaxAccountingPostingAccountType = enumNum(TaxAccountingPostingAccountType);
    private static EnumId enumNumTaxDirection = enumNum(TaxDirection);
    private static EnumId enumNumTaxExportImportType_IN = enumNum(TaxExportImportType_IN);
    private static EnumId enumNumTaxExportImport_IN = enumNum(TaxExportImport_IN);
    private static EnumId enumNumTaxGoodsServices_IN = enumNum(TaxGoodsServices_IN);
    private static EnumId enumNumTaxModuleType = enumNum(TaxModuleType);
    private static EnumId enumNumTaxTransactionCategory_IN = enumNum(TaxTransactionCategory_IN);
    private static EnumId enumNumTaxTypeOfBillOfSupply_IN = enumNum(TaxTypeOfBillOfSupply_IN);
    private static EnumId enumNumInwardSuppliesType = enumNum(TaxInwardSuppliesType_IN);

    #ISOCountryRegionCodes
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAdvanceForBillOfSupply</Name>
				<Source><![CDATA[
    /// <summary>
    /// If all tax amount are 0, the flag advance for bill of supply is yes.
    /// </summary>
    public void fillAdvanceForBillOfSupply()
    {
        if (!this.parmCGSTAmount()
            && !this.parmSGSTAmount()
            && !this.parmIGSTAmount()
            && !this.parmCESSAmount())
        {
            this.parmAdvanceForBillOfSupplyEnum(NoYes::Yes);
        }
        else
        {
            this.parmAdvanceForBillOfSupplyEnum(NoYes::No);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCreditDebitNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Credit/Debit note transaction from <C>TaxDocumentExtension_IN</C>.
    /// </summary>
    /// <param name = "_taxDocumentExtensionIn">Tax document extension for India.</param>
    /// <param name = "_isForOfflineTool">boolean value indicating whether the data is being filled for the offline government tool.</param>
    public void fillCreditDebitNote(TaxDocumentExtension_IN _taxDocumentExtensionIn,
        TaxDocumentExtension_IN _originalTaxDocExtensionIn,
        boolean _isForOfflineTool = false)
    {
        TaxDocumentExtension_IN         origForOrigTaxDocExtensionIn, firstTaxDocExtensionIn;
        TaxDocumentRowTransaction       originalTaxDocRowTrans, origForOrigTaxDocRowTrans, firstTaxDocRowTrans;
        TaxDocumentRowTransaction_IN    originalTaxDocRowTransIn, origForOrigTaxDocRowTransIn, firstTaxDocRowTransIn;
        RefRecId                        origForOrigTaxDocExtensionRecId, firstTaxDocExtensionRecId;
        TaxTransactionCategory_IN       transCategoryForReport;

        [originalTaxDocRowTrans, originalTaxDocRowTransIn] = this.findTransaction(_originalTaxDocExtensionIn.RecId);

        if (originalTaxDocRowTransIn.TransCategory == TaxTransactionCategory_IN::BillOfSupply)
        {
            this.parmIsNoteForBillOfSupplyEnum(NoYes::Yes);
            isNoteForBillOfSupplyBlank = originalTaxDocRowTransIn.CustomsExportOrder || originalTaxDocRowTransIn.TaxGSTEPZCode_IN != TaxGSTEPZCode_IN::None;

            transCategoryForReport = this.convertBillOfSupplyCategory(originalTaxDocRowTrans.BaseAmountCur,
                                                                      _originalTaxDocExtensionIn.RefTaxDocumentExtension,
                                                                      _originalTaxDocExtensionIn.TaxTransactionRefType);
        }
        else
        {
            transCategoryForReport = originalTaxDocRowTransIn.TransCategory;
        }

        if (transCategoryForReport == TaxTransactionCategory_IN::GSTInvoice)
        {
            if (_originalTaxDocExtensionIn.TaxTransactionId)
            {
                this.parmOriginalTransactionID(_originalTaxDocExtensionIn.TaxTransactionId);
                this.parmOriginalTransactionDate(_originalTaxDocExtensionIn.TaxTransactionDate);
            }

            if (_isForOfflineTool && _taxDocumentExtensionIn.RefTaxDocumentExtension != 0)
            {
                this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
            }
        }
        else
        {
            if (_originalTaxDocExtensionIn.TaxTransactionId)
            {
                this.parmOriginalInvoiceNumber(_originalTaxDocExtensionIn.TaxTransactionId);
                this.parmOriginalInvoiceDate(_originalTaxDocExtensionIn.TaxTransactionDate);
            }

            origForOrigTaxDocExtensionRecId = _originalTaxDocExtensionIn.RefTaxDocumentExtension;
            [origForOrigTaxDocRowTrans, origForOrigTaxDocRowTransIn] = this.findTransaction(origForOrigTaxDocExtensionRecId);
            origForOrigTaxDocExtensionIn = TaxDocumentExtension_IN::find(origForOrigTaxDocExtensionRecId);
            if (origForOrigTaxDocRowTransIn.TransCategory == TaxTransactionCategory_IN::BillOfSupply)
            {
                transCategoryForReport = this.convertBillOfSupplyCategory(origForOrigTaxDocRowTrans.BaseAmountCur,
                                                                          origForOrigTaxDocExtensionIn.RefTaxDocumentExtension,
                                                                          origForOrigTaxDocExtensionIn.TaxTransactionRefType);
            }
            else
            {
                transCategoryForReport = origForOrigTaxDocRowTransIn.TransCategory;
            }

            if (transCategoryForReport == TaxTransactionCategory_IN::GSTInvoice)
            {
                if (origForOrigTaxDocExtensionIn.TaxTransactionId)
                {
                    this.parmOriginalTransactionID(origForOrigTaxDocExtensionIn.TaxTransactionId);
                    this.parmOriginalTransactionDate(origForOrigTaxDocExtensionIn.TaxTransactionDate);
                }

                if (_isForOfflineTool && _taxDocumentExtensionIn.RefTaxDocumentExtension != 0)
                {
                    this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
                }
            }
            else
            {
                // Find the first invoice transaction information.
                firstTaxDocExtensionRecId = origForOrigTaxDocExtensionIn.RefTaxDocumentExtension;
                [firstTaxDocRowTrans, firstTaxDocRowTransIn] = this.findFirstTransaction(firstTaxDocExtensionRecId);
                firstTaxDocExtensionIn = TaxDocumentExtension_IN::find(firstTaxDocExtensionRecId);
                if (firstTaxDocRowTransIn.TransCategory == TaxTransactionCategory_IN::BillOfSupply)
                {
                    transCategoryForReport = this.convertBillOfSupplyCategory(firstTaxDocRowTrans.BaseAmountCur,
                                                                              firstTaxDocExtensionIn.RefTaxDocumentExtension,
                                                                              firstTaxDocExtensionIn.TaxTransactionRefType);
                }
                else
                {
                    transCategoryForReport = firstTaxDocRowTransIn.TransCategory;
                }

                if (transCategoryForReport == TaxTransactionCategory_IN::GSTInvoice)
                {
                    if (firstTaxDocExtensionIn.TaxTransactionId)
                    {
                        this.parmOriginalTransactionID(firstTaxDocExtensionIn.TaxTransactionId);
                        this.parmOriginalTransactionDate(firstTaxDocExtensionIn.TaxTransactionDate);
                    }

                    if (_isForOfflineTool && _taxDocumentExtensionIn.RefTaxDocumentExtension != 0)
                    {
                        this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the first invoice transaction information
    /// </summary>
    /// <param name="_taxDocumentExtensionRecId">
    /// The recid of table TaxDocumentExtension_IN.
    /// </param>
    /// <returns>
    /// 1. Transaction line.
    /// 2. Transaction line for India.
    /// 3. Tax document extension for India.
    /// </returns>
    private container findFirstTransaction(RefRecId _taxDocumentExtensionRecId)
    {
        TaxDocumentExtension_IN         taxDocumentExtensionIn;
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransactionIn;
        RefRecId                        refTaxDocumentExtension;
        container                       ret;

        refTaxDocumentExtension = _taxDocumentExtensionRecId;
        Set recIdSet = new Set(Types::Int64);
        while (refTaxDocumentExtension)
        {
            select TransCategory, TaxDocumentExtension from taxDocumentRowTransactionIn
            join BaseAmountCur, TransactionDate from taxDocumentRowTransaction
                where taxDocumentRowTransactionIn.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId
            join TaxTransactionId, TaxTransactionDate, RefTaxDocumentExtension, TaxTransactionRefType from taxDocumentExtensionIn
                where taxDocumentExtensionIn.RecId == taxDocumentRowTransactionIn.TaxDocumentExtension
                    && taxDocumentExtensionIn.RecId == refTaxDocumentExtension;

            if (taxDocumentExtensionIn.RefTaxDocumentExtension)
            {
                recIdSet.add(refTaxDocumentExtension);
                if (recIdSet.in(taxDocumentExtensionIn.RefTaxDocumentExtension))
                {
                    error(strFmt("@TaxReport:OriginalTransactionIdCauseCycleReference", taxDocumentExtensionIn.TaxTransactionId));
                    break;
                }
                refTaxDocumentExtension = taxDocumentExtensionIn.RefTaxDocumentExtension;
            }
            else
            {
                ret = this.findTransaction(refTaxDocumentExtension);
                refTaxDocumentExtension = 0;
            }
        }

        if (!conLen(ret))
        {
            ret = [taxDocumentRowTransaction, taxDocumentRowTransactionIn, taxDocumentExtensionIn];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertBillOfSupplyCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert the transaction category from Bill of supply to GST invoice, credit note or debt note.
    /// </summary>
    /// <param name="_baseAmountCur">
    /// The base amount in transaction currency
    /// </param>
    /// <param name="_refTaxDocumentExtension">
    /// The recid of TaxDocumentExtension
    /// </param>
    /// <param name="_taxTransactionRefType">
    /// Invoice type
    /// </param>
    /// <returns>
    /// The transaction category.
    /// </returns>
    public TaxTransactionCategory_IN convertBillOfSupplyCategory(AmountCur                 _baseAmountCur,
                                                                 RefRecId                  _refTaxDocumentExtension,
                                                                 TaxTransactionRefType_IN  _taxTransactionRefType)
    {
        TaxDocumentExtension_IN taxDocumentExtensionRefIn, taxDocumentExtensionRevisedOriginal;

        if (_baseAmountCur >= 0)
        {
            taxDocumentExtensionRefIn           = TaxDocumentExtension_IN::find(_refTaxDocumentExtension);
            taxDocumentExtensionRevisedOriginal = TaxDocumentExtension_IN::find(taxDocumentExtensionRefIn.RefTaxDocumentExtension);

            // If Original transaction id exists, this record is belong to Credit/Debt note.
            if (taxDocumentExtensionRefIn)
            {
                // Revised invoice
                if (_taxTransactionRefType == TaxTransactionRefType_IN::Revised
                && taxDocumentExtensionRefIn.TaxTransactionId
                && !taxDocumentExtensionRevisedOriginal.TaxTransactionId)
                {
                    return TaxTransactionCategory_IN::GSTInvoice;
                }
                else
                {
                    return TaxTransactionCategory_IN::DebitNote;
                }
            }
            else
            {
                return TaxTransactionCategory_IN::GSTInvoice;
            }
        }
        else
        {
            return TaxTransactionCategory_IN::CreditNote;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExportImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the Export/Import information.
    /// </summary>
    /// <param name="_taxDocumentRowTransaction">
    /// Transaction line.
    /// </param>
    /// <param name="_taxDocumentRowTransactionIn">
    /// Transaction line for India.
    /// </param>
    /// <remarks>
    /// The Export/Import is true when:
    /// 1. The check box is marked on the order; 
    /// 2. The customer or vendor is foreign;
    /// 3. EPZ code not is None.
    ///     Outgoing:   EPZ =  SEZ, with IGST payment = NO, type is SEZWithoutPaymentOfGST;
    ///                 EPZ =  SEZ, with IGST payment = Yes, type is SEZWithPaymentOfGST;
    ///                 EPZ =  DE, type is Deemed;
    ///                 Export order = Yes, GST tax has value, type is ExportWithPaymGST;
    ///                 Export order = Yes, GST tax not has value, type is ExportWithoutPaymGST;
    ///     Incoming:   EPZ =  SEZ, type is SEZ;
    ///                 Import order = yes, GoodsServices = Goods, type is ImportGoods;
    ///                 Import order = yes, GoodsServices = Services, type is ImportServices;
    /// </remarks>
    public void fillExportImport(TaxDocumentRowTransaction _taxDocumentRowTransaction, TaxDocumentRowTransaction_IN _taxDocumentRowTransactionIn)
    {
        TaxDocumentComponentTransaction taxDocumentComponentTransaction;
        TaxTable                        taxTable;
        TaxRegistrationNumbers_IN       taxRegistrationNumbers_IN;
        TaxGSTEPZCode_IN                epzCodeTmp = _taxDocumentRowTransactionIn.TaxGSTEPZCode_IN;
 
        if (epzCodeTmp == TaxGSTEPZCode_IN::None)
        {
            // For compatibility with old data, gets EPZ code from the postal address when it's not derived to TaxDocumentRowTransaction
            LogisticsPostalAddress partyPostalAddress = LogisticsPostalAddress::findRecId(_taxDocumentRowTransaction.PartyPostalAddress);
            epzCodeTmp = LogisticsLocationExt::find(partyPostalAddress.Location).TaxGSTEPZCode_IN;
        }

        const str goods = 'Goods';
 
        if (_taxDocumentRowTransaction.TaxDirection == TaxDirection::OutgoingTax)
        {
            taxRegistrationNumbers_IN = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Customers, TaxType_IN::GST, _taxDocumentRowTransactionIn.PartyRegistrationNumber);

            if (((_taxDocumentRowTransaction.Source == TaxModuleType::SalesInvoice || _taxDocumentRowTransaction.Source == TaxModuleType::FreeTxtInvoice)
                    || (isAnx1
                        && (_taxDocumentRowTransaction.Source == TaxModuleType::Voucher
                            || _taxDocumentRowTransaction.Source == TaxModuleType::Project)))
                && (epzCodeTmp != TaxGSTEPZCode_IN::None
                    || taxRegistrationNumbers_IN.Type == GSTType_IN::UID))
            {
                this.parmIsExportImportEnum(NoYes::Yes);

                if (epzCodeTmp == TaxGSTEPZCode_IN::SEZ)
                {
                    if (_taxDocumentRowTransactionIn.WithIGSTPayment_IN == NoneNoYes_IN::No)
                    {
                        this.parmExportImportTypeEnum(TaxExportImportType_IN::SEZWithoutPaymentOfGST);
                    }
                    else
                    {
                        this.parmExportImportTypeEnum(TaxExportImportType_IN::SEZWithPaymentOfGST);
                    }
                }
                else if (epzCodeTmp != TaxGSTEPZCode_IN::None || taxRegistrationNumbers_IN.Type == GSTType_IN::UID)
                {
                    this.parmExportImportTypeEnum(TaxExportImportType_IN::Deemed);
                }
            }

            if (this.parmExportImportTypeEnum() == TaxExportImportType_IN::None)
            {
                isForeignCustVend = TaxInformationCustTable_IN::findByCustTable(_taxDocumentRowTransaction.CustVendAC).IsForeign;

                if (_taxDocumentRowTransactionIn.CustomsExportOrder == NoYes::Yes || isForeignCustVend)
                {
                    this.parmIsExportImportEnum(NoYes::Yes);
                    
                    select firstOnly TaxAmount from taxDocumentComponentTransaction
                        where taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId == _taxDocumentRowTransaction.RecId
                        exists join taxTable
                            where taxTable.TaxCode == taxDocumentComponentTransaction.TaxCode
                                && taxTable.TaxType_IN == TaxType_IN::GST;

                    if (taxDocumentComponentTransaction.TaxAmount)
                    {
                        this.parmExportImportTypeEnum(TaxExportImportType_IN::ExportWithPaymGST);
                    }
                    else
                    {
                        this.parmExportImportTypeEnum(TaxExportImportType_IN::ExportWithoutPaymGST);
                    }
                }
            }
        }
        else if (_taxDocumentRowTransaction.TaxDirection == TaxDirection::IncomingTax)
        {
            if ((_taxDocumentRowTransaction.Source == TaxModuleType::PurchInvoice
                    || _taxDocumentRowTransaction.Source == TaxModuleType::Voucher)
                && epzCodeTmp == TaxGSTEPZCode_IN::SEZ)
            {
                this.parmIsExportImportEnum(NoYes::Yes);
                this.parmExportImportTypeEnum(TaxExportImportType_IN::SEZ);
            }

            if (this.parmExportImportTypeEnum() == TaxExportImportType_IN::None)
            {
                isForeignCustVend = TaxInformationVendTable_IN::findByVendTable(_taxDocumentRowTransaction.CustVendAC).IsForeign;
 
                if (_taxDocumentRowTransactionIn.CustomsImportOrder == NoYes::Yes || isForeignCustVend)
                {
                    this.parmIsExportImportEnum(NoYes::Yes);

                    if (this.parmGoodsServicesEnum() == TaxGoodsServices_IN::Goods)
                    {
                        this.parmExportImportTypeEnum(TaxExportImportType_IN::ImportGoods);
                    }
                    else
                    {
                        this.parmExportImportTypeEnum(TaxExportImportType_IN::ImportsServices);
                    }
                }
            }
        }
        this.parmIsForeignCustVendEnum(isForeignCustVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFromOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the related information from sales order or purchase order.
    /// </summary>
    /// <param name="_taxDocumentRowTransaction">
    /// Transaction line.
    /// </param>
    /// <param name="_taxDocumentRowTransactionIn">
    /// Transaction line for India.
    /// </param>
    /// <remarks>
    /// For SO, fill the shipping bill number and date.
    /// For PO, 1. fill the bill of entry number and date; 2. fill the product receipt number, date, quantity and amount.
    /// </remarks>
    public void fillFromOrder(TaxDocumentRowTransaction _taxDocumentRowTransaction, TaxDocumentRowTransaction_IN _taxDocumentRowTransactionIn)
    {
        VendPackingSlipTrans vendPackingSlipTrans;
        EximPorts_IN eximPortsIn;

        switch (_taxDocumentRowTransaction.Source)
        {
            case TaxModuleType::Project:
            case TaxModuleType::SalesInvoice:
 
                if (_taxDocumentRowTransactionIn.CustomsExportOrder 
                    && _taxDocumentRowTransaction.TransactionLineTableId == tableNum(SalesParmLine))
                {
                    SalesParmLine salesParmLine = SalesParmLine::findRecId(_taxDocumentRowTransaction.TransactionLineRecId);
 
                    CustomsShippingBillTrans_IN shippingBillTransIn;
                    CustomsShippingBillNumberTable_IN shippingBillNumberTableIn;
                    CustomsShippingBillJour_IN shippingBillJourIn;
                    EximShippingBillTrans_IN eximShippingBillTrans_IN;

                    // Fill shipping bill information.
                    select firstOnly ShippingBillDate, RecId from shippingBillTransIn
                        join ShippingBillNumber from shippingBillNumberTableIn
                            where shippingBillNumberTableIn.RecId == shippingBillTransIn.CustomsShippingBillNumberTable
                            exists join shippingBillJourIn
                                where shippingBillJourIn.ParmId == salesParmLine.ParmId
                                    && shippingBillTransIn.LedgerVoucher == shippingBillJourIn.LedgerVoucher
                                    && shippingBillTransIn.InvoiceDate == shippingBillJourIn.InvoiceDate
                                    && shippingBillTransIn.InvoiceId == shippingBillJourIn.InvoiceId
                                    && shippingBillTransIn.SalesId == shippingBillJourIn.SalesId
                                    && shippingBillTransIn.InventTransId == salesParmLine.InventTransId;

                    select firstonly PortId from eximPortsIn
                        join EximPorts from eximShippingBillTrans_IN
                            where eximShippingBillTrans_IN.ShippingBillTransRecId == shippingBillTransIn.RecId
                                && eximPortsIn.RecId == eximShippingBillTrans_IN.EximPorts;

                    this.parmShippingBillNumber(shippingBillNumberTableIn.ShippingBillNumber);
                    this.parmShippingBillDate(shippingBillTransIn.ShippingBillDate);
                    this.parmPortCode(eximPortsIn.PortId);
                }
                break;
 
            case TaxModuleType::PurchInvoice:
 
                if (_taxDocumentRowTransaction.TransactionLineTableId == tableNum(VendInvoiceInfoLine))
                {
                    VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
                    CustomsVendBOETrans_IN boeTransIn;
                    CustomsBillOfEntryNumberTable_IN customsBillOfEntryNumberTableIn;
                    EximVendBOETrans_IN eximVendBOETransIn;

                    if (_taxDocumentRowTransactionIn.CustomsImportOrder)
                    {
                        // Fill the bill of entry information.
                        select firstonly JournalRefTableId, JournalRefRecId from vendInvoiceInfoSubLine
                            where vendInvoiceInfoSubLine.LineRefRecId == _taxDocumentRowTransaction.TransactionLineRecId;

                        if (vendInvoiceInfoSubLine.JournalRefTableId == tableNum(CustomsVendBOETrans_IN))
                        {
                            select firstOnly BillOfEntryDate, RecId, AssessableValue from boeTransIn
                                where boeTransIn.RecId == vendInvoiceInfoSubLine.JournalRefRecId
                                join BillOfEntryNumber from customsBillOfEntryNumberTableIn
                                    where customsBillOfEntryNumberTableIn.RecId == boeTransIn.CustomsBillOfEntryNumberTable;
                        }

                        if (vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans))
                        {
                            VendPackingSlipTrans vendPackingSlipTransLoc;
                            CustomsVendPackingSlipBOETransLink_IN customsVendPackingSlipBOETransLinkInLoc;

                            select firstOnly BillOfEntryDate, RecId, AssessableValue from boeTransIn
                                join customsVendPackingSlipBOETransLinkInLoc
                                    where customsVendPackingSlipBOETransLinkInLoc.VendPackingSlipTrans == vendInvoiceInfoSubLine.JournalRefRecId
                                        && customsVendPackingSlipBOETransLinkInLoc.CustomsVendBOETrans_IN == boeTransIn.RecId
                                join BillOfEntryNumber from customsBillOfEntryNumberTableIn
                                    where customsBillOfEntryNumberTableIn.RecId == boeTransIn.CustomsBillOfEntryNumberTable;
                        }

                        if (boeTransIn.RecId)
                        {
                            select firstonly CustomsVendBOETransRecId, EximPorts from eximVendBOETransIn
                                where eximVendBOETransIn.CustomsVendBOETransRecId == boeTransIn.RecId
                                join PortId from eximPortsIn
                                    where eximPortsIn.RecId == eximVendBOETransIn.EximPorts;
                        }
                    }
 
                    this.parmPortCode(eximPortsIn.PortId);
                    this.parmBillOfEntryValue(boeTransIn.AssessableValue);
                    this.parmBillOfEntryDate(boeTransIn.BillOfEntryDate);
                    this.parmBillOfEntryNumber(customsBillOfEntryNumberTableIn.BillOfEntryNumber);
 
                    container conTmp = conNull();
                    goodsReceiptNoteDate = dateNull();
                    goodsReceiptQuantity = 0;
                    goodsReceiptAmount   = 0;
 
                    if (boeTransIn.Recid)
                    {
                        CustomsVendPackingSlipBOETransLink_IN customsVendPackingSlipBOETransLinkIn;
                        while select PackingSlipId, DeliveryDate, Qty, ValueMST from vendPackingSlipTrans
                            exists join customsVendPackingSlipBOETransLinkIn
                                where customsVendPackingSlipBOETransLinkIn.CustomsVendBOETrans_IN == boeTransIn.Recid
                                    && customsVendPackingSlipBOETransLinkIn.VendPackingSlipTrans  == vendPackingSlipTrans.RecId
                        {
                            if (vendPackingSlipTrans.DeliveryDate > goodsReceiptNoteDate)
                            {
                                goodsReceiptNoteDate = vendPackingSlipTrans.DeliveryDate;
                            }

                            conTmp += vendPackingSlipTrans.PackingSlipId;
                            goodsReceiptQuantity += vendPackingSlipTrans.Qty;
                            goodsReceiptAmount += vendPackingSlipTrans.ValueMST;
                        }
                    }
                    else
                    {
                        // Fill the vendPackingSlip information.
                        while select RecId from vendInvoiceInfoSubLine
                            join PackingSlipId, DeliveryDate, Qty, ValueMST from vendPackingSlipTrans
                                where vendInvoiceInfoSubLine.LineRefRecId == _taxDocumentRowTransaction.TransactionLineRecId
                                    && vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans)
                                    && vendInvoiceInfoSubLine.JournalRefRecId == vendPackingSlipTrans.RecId
                                    && vendInvoiceInfoSubLine.DocumentId == vendPackingSlipTrans.PackingSlipId
                        {
                            if (vendPackingSlipTrans.DeliveryDate > goodsReceiptNoteDate)
                            {
                                goodsReceiptNoteDate = vendPackingSlipTrans.DeliveryDate;
                            }

                            conTmp += vendPackingSlipTrans.PackingSlipId;
                            goodsReceiptQuantity += vendPackingSlipTrans.Qty;
                            goodsReceiptAmount += vendPackingSlipTrans.ValueMST;
                        }
                    }

                    this.parmGoodsReceiptNoteNumber(con2Str(conTmp, '/'));
                    this.parmGoodsReceiptNoteDate(goodsReceiptNoteDate);
                    this.parmGoodsReceiptQuantity(goodsReceiptQuantity);
                    this.parmGoodsReceiptAmount(goodsReceiptAmount);
                }
                break;
 
            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillGSTAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills CGST, IGST, SGST amounts in case of TaxComponent.
    /// </summary>
    public void fillGSTAmounts()
    {
        switch (this.parmTaxComponent())
        {
            case CGST:
                this.parmCGSTAmount(this.parmTaxAmount());
                this.parmCGSTRate(this.parmTaxRate());
                this.parmCGSTITCAvailableAmount(this.parmRecoverableAmount());
                break;
            case SGST:
                this.parmSGSTAmount(this.parmTaxAmount());
                this.parmSGSTRate(this.parmTaxRate());
                this.parmSGSTITCAvailableAmount(this.parmRecoverableAmount());
                break;
            case IGST:
                this.parmIGSTAmount(this.parmTaxAmount());
                this.parmIGSTRate(this.parmTaxRate());
                this.parmIGSTITCAvailableAmount(this.parmRecoverableAmount());
                break;
            case CESS:
                this.parmCESSAmount(this.parmTaxAmount());
                this.parmCESSRate(this.parmTaxRate());
                this.parmCESSITCAvailableAmount(this.parmRecoverableAmount());
                break;
            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHSNSACCodeFromRowTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills HSN/SAC code in model from TaxDocumentRowTransaction_IN.
    /// </summary>
    /// <param name="_rowTransaction">
    /// Row transaction id.
    /// </param>
    public void fillHSNSACCodeFromRowTransaction(TaxDocumentRowTransaction_IN _rowTransaction)
    {
        if (_rowTransaction.HSNCode)
        {
            this.parmHsnSacCode(_rowTransaction.HSNCode);
            this.parmGoodsServicesEnum(TaxGoodsServices_IN::Goods);
        }
        else if (_rowTransaction.SAC)
        {
            this.parmHsnSacCode(_rowTransaction.SAC);
            this.parmGoodsServicesEnum(TaxGoodsServices_IN::Services);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillITCAvailabilityType</Name>
				<Source><![CDATA[
    public void fillITCAvailabilityType()
    {
        #define.Input('Input')
        #define.InputService('Input Service')
        #define.CapitalGood('Capital Good')
        #define.Ineligible('Ineligible')

        if (!(this.parmCGSTITCAvailableAmount()
            && this.parmSGSTITCAvailableAmount()
            && this.parmIGSTITCAvailableAmount()
            && this.parmCESSITCAvailableAmount()))
        {
            switch (this.parmItcEligibilityEnum())
            {
                case ITCCategory_IN::Input :
                    itcAvailabilityType = #Input;
                    break;
                case ITCCategory_IN::CapitalGoods :
                    itcAvailabilityType = #InputService;
                    break;
                default:
                    break;
            }
 
            if (this.parmServiceCategory() == ServiceCategory_IN::InterUnit)
            {
                itcAvailabilityType = #CapitalGood;
            }
        }
 
        if (!this.parmCGSTITCAvailableAmount()
            && !this.parmSGSTITCAvailableAmount()
            && !this.parmIGSTITCAvailableAmount()
            && !this.parmCESSITCAvailableAmount())
        {
            itcAvailabilityType = #Ineligible;
        }
        this.parmITCAvailabilityType(itcAvailabilityType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOriginalTransactionTotalValue</Name>
				<Source><![CDATA[
    private void fillOriginalTransactionTotalValue(TaxDocumentExtension_IN _taxDocumentExtensionIn)
    {
        TaxDocumentComponentTransaction taxDocumentComponentTransactionOrig;
        TaxDocumentRowTransaction taxDocumentRowTransactionOrig;
        TaxDocumentRowTransaction_IN taxDocumentRowTransactionINOrig;
 
        AmountMST sumBaseAmount;
        TaxAmount sumTaxAmount;
 
        while select sum(TaxAmount), sum(TotalTaxPayableAmount) from taxDocumentComponentTransactionOrig
            group by taxDocumentComponentTransactionOrig.TaxDocumentRowTransactionRecId,
                taxDocumentRowTransactionINOrig.CustomsExportOrder
            join minOf(BaseAmountMST) from taxDocumentRowTransactionOrig
                where taxDocumentRowTransactionOrig.RecId == taxDocumentComponentTransactionOrig.TaxDocumentRowTransactionRecId
            join firstonly CustomsExportOrder from taxDocumentRowTransactionINOrig
                where taxDocumentRowTransactionINOrig.TaxDocumentExtension == _taxDocumentExtensionIn.RefTaxDocumentExtension
                    && taxDocumentRowTransactionINOrig.TaxDocumentRowTransactionRecId == taxDocumentRowTransactionOrig.RecId
        {
            sumBaseAmount += taxDocumentRowTransactionOrig.BaseAmountMST;
 
            if (taxDirection == TaxDirection::OutgoingTax
                && taxDocumentRowTransactionINOrig.CustomsExportOrder == NoYes::No)
            {
                sumTaxAmount += taxDocumentComponentTransactionOrig.TotalTaxPayableAmount;
            }
            else
            {
                sumTaxAmount += taxDocumentComponentTransactionOrig.TaxAmount;
            }
        }
 
        originalTransactionTotalValue = sumBaseAmount + sumTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the payment voucher information.
    /// </summary>
    /// <param name = "_taxDocumentRowTransaction">Transaction line.</param>
    /// <param name = "_taxDocumentRowTransactionIn">Transaction line for India.</param>
    /// <param name = "_taxDocumentExtensionIn">Tax document extension for India.</param>
    /// <param name = "_taxDocumentExtensionRefIn">Original tax document extension for India.</param>
    /// <param name = "_taxDocumentExtensionRevisedOriginal">Revised original tax document extension for India.</param>
    /// <param name = "_toDate">The end date of the reporting period.</param>
    /// <param name = "_isForOfflineTool">boolean value indicating whether the data is being filled for the offline government tool.</param>
    /// <returns>If the payment was settled fully, return false; if it's advance payment, return true.</returns>
    public boolean fillPayment(TaxDocumentRowTransaction _taxDocumentRowTransaction,
        TaxDocumentRowTransaction_IN _taxDocumentRowTransactionIn,
        TaxDocumentExtension_IN _taxDocumentExtensionIn,
        TaxDocumentExtension_IN _taxDocumentExtensionRefIn,
        TaxDocumentExtension_IN _taxDocumentExtensionRevisedOriginal,
        ToDate _toDate,
        boolean _isForOfflineTool = false)
    {
        boolean ret;

        if (_taxDocumentRowTransaction.TransactionLineRecId
            && _taxDocumentRowTransaction.TransactionLineTableId == tableNum(ledgerJournalTrans))
        {
            TaxDocumentComponentTransaction taxDocumentComponentTransaction;
            TaxDocumentComponentTransaction_IN taxDocumentComponentTransactionIn;
            select sum(TotalTaxPayableAmount) from taxDocumentComponentTransaction
                where taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId == _taxDocumentRowTransaction.RecId
                exists join taxDocumentComponentTransactionIn
                    where taxDocumentComponentTransactionIn.TaxDocumentComponnetTransactionRecId == taxDocumentComponentTransaction.RecId
                        && taxDocumentComponentTransactionIn.TaxType == TaxType_IN::GST;
            
            // Filter AR Payment with 100% reverse charge and AP payment if reverse charge is 0%.
            if (taxDocumentComponentTransaction.TotalTaxPayableAmount)
            {
                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_taxDocumentRowTransaction.TransactionLineRecId, false);
 
                switch (this.parmTaxDirectionEnum())
                {
                    case TaxDirection::OutgoingTax:
                        CustTrans custTrans;
                        CustSettlement custSettlement;
                        select firstonly AmountMST, RecId from custTrans
                            where custTrans.Voucher == ledgerJournalTrans.Voucher
                                && custTrans.TransDate == ledgerJournalTrans.TransDate
                                && custTrans.TransType == ledgerJournalTrans.TransactionType;
 
                        if (custTrans.AmountMST)
                        {
                            select sum(SettleAmountMST) from custSettlement
                            where custSettlement.OffsetRecid == custTrans.RecId
                                && custSettlement.TransDate <= _toDate
                                && custSettlement.CanBeReversed == NoYes::Yes;

                            // Caculate the unsettled payment percent
                            this.parmUnsettledPaymentPercent(1.00 - abs(custSettlement.SettleAmountMST / custTrans.AmountMST));
                        }
                        // Filter fully settlement payment journal transactions.
                        if (this.parmUnsettledPaymentPercent())
                        {
                            ret = true;
                        }
                        break;
 
                    case TaxDirection::IncomingTax:
                        VendTrans vendTrans;
                        VendSettlement vendSettlement; 
                        select firstonly AmountMST, RecId from vendTrans
                            where vendTrans.Voucher == ledgerJournalTrans.Voucher
                                && vendTrans.TransDate == ledgerJournalTrans.TransDate
                                && vendTrans.TransType == ledgerJournalTrans.TransactionType;
 
                        if (vendTrans.AmountMST)
                        {
                            select sum(SettleAmountMST) from vendSettlement
                                where vendSettlement.OffsetRecid == vendTrans.RecId
                                    && vendSettlement.TransDate <= _toDate
                                    && vendSettlement.CanBeReversed == NoYes::Yes;
 
                            this.parmUnsettledPaymentPercent(1.00 - abs(vendSettlement.SettleAmountMST / vendTrans.AmountMST));
                        }
                        // Filter fully settlement payment journal transactions.
                        if (this.parmUnsettledPaymentPercent())
                        {
                            ret = true;
                        }
                        break;
 
                    default:
                        break;
                }
            
                if (ret)
                { 
                    if (_taxDocumentRowTransactionIn.TransCategory == TaxTransactionCategory_IN::PaymentVoucher)
                    {
                        if (_taxDocumentExtensionRefIn.TaxTransactionId)
                        {
                            this.parmOriginalInvoiceNumber(_taxDocumentExtensionRefIn.TaxTransactionId);
                            this.parmOriginalInvoiceDate(_taxDocumentExtensionRefIn.TaxTransactionDate);
 
                            if (_isForOfflineTool)
                            {
                                this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
                            }
                        }
                    }
                    else
                    {
                        TaxDocumentRowTransaction originalTaxDocRowTrans;
                        TaxDocumentRowTransaction_IN originalTaxDocRowTransIn;
                        [originalTaxDocRowTrans, originalTaxDocRowTransIn] = this.findTransaction(_taxDocumentExtensionRefIn.RecId);

                        if (originalTaxDocRowTransIn.TransCategory == TaxTransactionCategory_IN::PaymentVoucher)
                        {
                            if (_taxDocumentExtensionRefIn.TaxTransactionId)
                            {
                                this.parmOriginalTransactionID(_taxDocumentExtensionRefIn.TaxTransactionId);
                                this.parmOriginalTransactionDate(_taxDocumentExtensionRefIn.TaxTransactionDate);
 
                                if (_isForOfflineTool)
                                {
                                    this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
                                }
                            }
                        }
                        else
                        {
                            if (_taxDocumentExtensionRefIn.TaxTransactionId)
                            {
                                this.parmOriginalInvoiceNumber(_taxDocumentExtensionRefIn.TaxTransactionId);
                                this.parmOriginalInvoiceDate(_taxDocumentExtensionRefIn.TaxTransactionDate);
 
                                if (_isForOfflineTool)
                                {
                                    this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
                                }
                            }
 
                            TaxDocumentRowTransaction origForOrigTaxDocRowTrans;
                            TaxDocumentRowTransaction_IN origForOrigTaxDocRowTransIn;
                            [origForOrigTaxDocRowTrans, origForOrigTaxDocRowTransIn] = this.findTransaction(_taxDocumentExtensionRevisedOriginal.RecId);
 
                            if (origForOrigTaxDocRowTransIn.TransCategory == TaxTransactionCategory_IN::PaymentVoucher)
                            {
                                if (_taxDocumentExtensionRevisedOriginal.TaxTransactionId)
                                {
                                    this.parmOriginalTransactionID(_taxDocumentExtensionRevisedOriginal.TaxTransactionId);
                                    this.parmOriginalTransactionDate(_taxDocumentExtensionRevisedOriginal.TaxTransactionDate);
 
                                    if (_isForOfflineTool)
                                    {
                                        this.fillOriginalTransactionTotalValue(_taxDocumentExtensionIn);
                                    }
                                }
                            }
                        }
                    }
                    ret = true;
                }
            }
        }
 
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentInfoForMultiPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill settled payment transaction for format 'Adjust multiple Advance Receipt/Payment for Invoice'.
    /// </summary>
    /// <param name="_taxGSTRReportContractHeader">
    /// Tax header information.
    /// </param>
    /// <param name="_taxDocumentExtensionIn">
    /// Tax document extension for India.
    /// </param>
    /// <param name="_taxDocumentExtensionPayment">
    /// Tax document extension of payment transaction for India.
    /// </param>
    /// <param name="_settleAmountMST">
    /// customer or vendor settled amount.
    /// </param>
    private void fillPaymentInfoForMultiPaym(TaxGSTRReportContractHeader_IN    _taxGSTRReportContractHeader,
                                             TaxDocumentExtension_IN        _taxDocumentExtensionIn,
                                             TaxDocumentExtension_IN        _taxDocumentExtensionPayment,
                                             AmountMST                      _settleAmountMST)
    {
        TaxGSTRReportContractLine_IN        lineModelForMultiplePayment;
 
        lineModelForMultiplePayment = new TaxGSTRReportContractLine_IN();
        lineModelForMultiplePayment.parmInvoiceNumber(_taxDocumentExtensionIn.TaxTransactionId);
        lineModelForMultiplePayment.parmInvoiceDate(_taxDocumentExtensionIn.TaxTransactionDate);
        lineModelForMultiplePayment.parmOriginalTransactionID(_taxDocumentExtensionPayment.TaxTransactionID);
        lineModelForMultiplePayment.parmOriginalTransactionDate(_taxDocumentExtensionPayment.TaxTransactionDate);
        lineModelForMultiplePayment.parmAdjustmentAmount(_settleAmountMST);
        lineModelForMultiplePayment.parmTaxDirectionEnum(this.parmTaxDirectionEnum());
        lineModelForMultiplePayment.parmIsMultiplePaymentEnum(NoYes::Yes);
        _taxGSTRReportContractHeader.addLine(lineModelForMultiplePayment);
 
        // Combine the advance payment transaction id.
        if (!conFind(advancePaymentNumCon, _taxDocumentExtensionPayment.TaxTransactionID))
        {
            advancePaymentNumCon += _taxDocumentExtensionPayment.TaxTransactionID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPlaceOfSupplyLongForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the place of supply long form with the state code and state name that is
    /// expected by the government.
    /// </summary>
    /// <param name="_partyAddress">
    /// The place of supply address.
    /// </param>
    public void fillPlaceOfSupplyLongForm(LogisticsPostalAddress _partyAddress)
    {
        #TaxPlaceOfSupplyShortForm_IN
        #TaxPlaceOfSupplyLongForm_IN

        switch (LogisticsAddressState::find(_partyAddress.CountryRegionId, _partyAddress.State).StateCode_IN)
        {
            case #01:
                placeOfSupplyLongForm = #01_JammuKashmir;
                break;

            case #02:
                placeOfSupplyLongForm = #02_HimachalPradesh;
                break;

            case #03:
                placeOfSupplyLongForm = #03_Punjab;
                break;

            case #04:
                placeOfSupplyLongForm = #04_Chandigarh;
                break;

            case #05:
                placeOfSupplyLongForm = #05_Uttarakhand;
                break;

            case #06:
                placeOfSupplyLongForm = #06_Haryana;
                break;

            case #07:
                placeOfSupplyLongForm = #07_Delhi;
                break;

            case #08:
                placeOfSupplyLongForm = #08_Rajasthan;
                break;

            case #09:
                placeOfSupplyLongForm = #09_UttarPradesh;
                break;

            case #10:
                placeOfSupplyLongForm = #10_Bihar;
                break;

            case #11:
                placeOfSupplyLongForm = #11_Sikkim;
                break;

            case #12:
                placeOfSupplyLongForm = #12_ArunachalPradesh;
                break;

            case #13:
                placeOfSupplyLongForm = #13_Nagaland;
                break;

            case #14:
                placeOfSupplyLongForm = #14_Manipur;
                break;

            case #15:
                placeOfSupplyLongForm = #15_Mizoram;
                break;

            case #16:
                placeOfSupplyLongForm = #16_Tripura;
                break;

            case #17:
                placeOfSupplyLongForm = #17_Meghalaya;
                break;

            case #18:
                placeOfSupplyLongForm = #18_Assam;
                break;

            case #19:
                placeOfSupplyLongForm = #19_WestBengal;
                break;

            case #20:
                placeOfSupplyLongForm = #20_Jharkhand;
                break;

            case #21:
                placeOfSupplyLongForm = #21_Odisha;
                break;

            case #22:
                placeOfSupplyLongForm = #22_Chhattisgarh;
                break;

            case #23:
                placeOfSupplyLongForm = #23_MadhyaPradesh;
                break;

            case #24:
                placeOfSupplyLongForm = #24_Gujarat;
                break;

            case #25:
                placeOfSupplyLongForm = #25_DamanDiu;
                break;

            case #26:
                placeOfSupplyLongForm = #26_DadraNagarHaveli;
                break;

            case #27:
                placeOfSupplyLongForm = #27_Maharashtra;
                break;

            case #29:
                placeOfSupplyLongForm = #29_Karnataka;
                break;

            case #30:
                placeOfSupplyLongForm = #30_Goa;
                break;

            case #31:
                placeOfSupplyLongForm = #31_Lakshdweep;
                break;

            case #32:
                placeOfSupplyLongForm = #32_Kerala;
                break;

            case #33:
                placeOfSupplyLongForm = #33_TamilNadu;
                break;

            case #34:
                placeOfSupplyLongForm = #34_Pondicherry;
                break;

            case #35:
                placeOfSupplyLongForm = #35_AndamanNicobarIslands;
                break;

            case #36:
                placeOfSupplyLongForm = #36_Telengana;
                break;

            case #37:
                placeOfSupplyLongForm = #37_AndhraPradesh;
                break;

            case #97:
                placeOfSupplyLongForm = #97_OtherTerritory;
                break;

            default:
                placeOfSupplyLongForm = placeOfSupply;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSettlementForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the payment information for GST invoice.
    /// </summary>
    /// <param name="_taxDocumentRowTransaction">
    /// Transaction line.
    /// </param>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <param name="_taxGSTRReportContractHeader">
    /// Tax header information.
    /// </param>
    /// <param name="_taxDocumentExtensionIn">
    /// Tax document extension for India.
    /// </param>
    /// <remarks>
    /// If the invoice just has one advance payment, populate the advance payment number/date to 'Invoice and bill of supply' format;
    /// else per advance payment record will be insert to 'Adjust multiple Advance Receipt for Invoice' format.
    /// </remarks>
    public void fillSettlementForInvoice(TaxDocumentRowTransaction      _taxDocumentRowTransaction,
                                         FromDate                       _fromDate,
                                         ToDate                         _toDate,
                                         TaxGSTRReportContractHeader_IN    _taxGSTRReportContractHeader,
                                         TaxDocumentExtension_IN        _taxDocumentExtensionIn)
    {
        TaxDocumentRowTransaction_IN taxDocumentRowTransactionInvoice;
        select firstOnly taxDocumentRowTransactionInvoice
            where taxDocumentRowTransactionInvoice.TaxDocumentRowTransactionRecId == _taxDocumentRowTransaction.RecId
                && taxDocumentRowTransactionInvoice.TransCategory != TaxTransactionCategory_IN::PaymentVoucher
                && taxDocumentRowTransactionInvoice.TransCategory != TaxTransactionCategory_IN::RefundVoucher;
 
        if (taxDocumentRowTransactionInvoice)
        {
            this.fillSettlementForInvoiceUseBuffer(
                _taxDocumentRowTransaction,
                taxDocumentRowTransactionInvoice,
                _fromDate,
                _toDate,
                _taxGSTRReportContractHeader,
                _taxDocumentExtensionIn);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSettlementForInvoiceUseBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the payment information for GST invoice.
    /// </summary>
    /// <param name="_taxDocumentRowTransaction">
    /// Transaction line.
    /// </param>
    /// <param name="_taxDocumentRowTransactionIn">
    /// Transaction line India.
    /// </param>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <param name="_taxGSTRReportContractHeader">
    /// Tax header information.
    /// </param>
    /// <param name="_taxDocumentExtensionIn">
    /// Tax document extension for India.
    /// </param>
    /// <remarks>
    /// If the invoice just has one advance payment, populate the advance payment number/date to 'Invoice and bill of supply' format;
    /// else per advance payment record will be insert to 'Adjust multiple Advance Receipt for Invoice' format.
    /// </remarks>
    public void fillSettlementForInvoiceUseBuffer(
        TaxDocumentRowTransaction      _taxDocumentRowTransaction,
        TaxDocumentRowTransaction_IN   _taxDocumentRowTransactionIn,
        FromDate                       _fromDate,
        ToDate                         _toDate,
        TaxGSTRReportContractHeader_IN _taxGSTRReportContractHeader,
        TaxDocumentExtension_IN        _taxDocumentExtensionIn)
    {
        TaxDocumentExtension_IN taxDocumentExtensionPayment;
        Common                  common;
        TaxDocument             taxDocumentPayment;
        AmountMST               sumSettleAmountMST, invoiceAmountMST;
 
        if (_taxDocumentRowTransactionIn
            && _taxDocumentRowTransactionIn.TransCategory != TaxTransactionCategory_IN::PaymentVoucher
            && _taxDocumentRowTransactionIn.TransCategory != TaxTransactionCategory_IN::RefundVoucher)
        {
            switch (this.parmTaxDirectionEnum())
            {
                case TaxDirection::OutgoingTax:
                    CustSettlement custSettlement;
                    CustTrans custTrans, custTransPayment;
                    while select offsetRecId, SettleAmountMST from custSettlement
                        join AmountMST from custTrans
                            where custTrans.Invoice == _taxDocumentRowTransaction.InvoiceId
                                && custTrans.AccountNum == _taxDocumentRowTransaction.CustVendAC
                                && custTrans.TransDate == _taxDocumentRowTransaction.TransactionDate
                                && custTrans.Voucher == _taxDocumentRowTransaction.Voucher
                                && custSettlement.TransCompany == custTrans.dataAreaId
                                && custSettlement.TransRecId == custTrans.RecId
                                && custSettlement.AccountNum == custTrans.AccountNum
                                && custSettlement.CanBeReversed == NoYes::Yes
                            join Voucher, TransDate from custTransPayment
                                where custTransPayment.RecId == custSettlement.offsetRecId
                    {
                        common = TaxDocumentGeneralJournalEntryLink::findByVoucherAndAccountingDate(custTransPayment.Voucher, custTransPayment.TransDate);
                        taxDocumentPayment = TaxDocumentUtils::getTaxDocumentBySource(Common.TableId, Common.RecId);
                        taxDocumentExtensionPayment = TaxDocumentExtension_IN::findByTaxDocument(taxDocumentPayment.TaxDocumentGuid);
 
                        if (taxDocumentExtensionPayment
                            && taxDocumentExtensionPayment.TaxInvReferenceType != GSTReference_IN::None
                            && taxDocumentExtensionPayment.TaxTransactionDate < _fromDate)
                        {
                            this.fillPaymentInfoForMultiPaym(_taxGSTRReportContractHeader,
                                                             _taxDocumentExtensionIn,
                                                             taxDocumentExtensionPayment,
                                                             custSettlement.SettleAmountMST);
 
                            TaxDocumentComponentTransaction taxDocumentComponentTransaction;
                            select firstOnly RecId from taxDocumentComponentTransaction
                                where isGSTTDSDeducted == NoYes::No
                                    && taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId == _taxDocumentRowTransaction.RecId
                                    && (taxDocumentComponentTransaction.TaxCode == IGST_TDS
                                        || taxDocumentComponentTransaction.TaxCode == CGST_TDS
                                        || taxDocumentComponentTransaction.TaxCode == SGST_TDS
                                        || taxDocumentComponentTransaction.TaxCode == CESS_TDS);
 
                            isGSTTDSDeducted = taxDocumentComponentTransaction.RecId ? NoYes::Yes : NoYes::No;
 
                            sumSettleAmountMST += custSettlement.SettleAmountMST;
                            invoiceAmountMST = custTrans.AmountMST;
                        }
                    }
 
                    if (invoiceAmountMST)
                    {
                        settledInvoicePercent = sumSettleAmountMST / invoiceAmountMST;
                    }
                    break;
 
                case TaxDirection::IncomingTax:
                    VendSettlement vendSettlement;
                    VendTrans vendTrans, vendTransPayment;
                    while select offsetRecId, SettleAmountMST from vendSettlement
                        join AmountMST from vendTrans
                            where vendTrans.AccountNum == _taxDocumentRowTransaction.CustVendAC
                                && vendTrans.TransDate == _taxDocumentRowTransaction.TransactionDate
                                && vendTrans.Voucher == _taxDocumentRowTransaction.Voucher
                                && vendSettlement.TransCompany == vendTrans.dataAreaId
                                && vendSettlement.TransRecId == vendTrans.RecId
                                && vendSettlement.AccountNum == vendTrans.AccountNum
                                && vendSettlement.CanBeReversed == NoYes::Yes
                            join Voucher, TransDate from vendTransPayment
                                where vendTransPayment.RecId == vendSettlement.offsetRecId
                    {
                        common = TaxDocumentGeneralJournalEntryLink::findByVoucherAndAccountingDate(vendTransPayment.Voucher, vendTransPayment.TransDate);
                        taxDocumentPayment = TaxDocumentUtils::getTaxDocumentBySource(Common.TableId, Common.RecId);
                        taxDocumentExtensionPayment = TaxDocumentExtension_IN::findByTaxDocument(taxDocumentPayment.TaxDocumentGuid);
 
                        if (taxDocumentExtensionPayment.RecId
                            && taxDocumentExtensionPayment.TaxInvReferenceType != GSTReference_IN::None
                            && taxDocumentExtensionPayment.TaxTransactionDate < _fromDate)
                        {
                            this.fillPaymentInfoForMultiPaym(_taxGSTRReportContractHeader,
                                                             _taxDocumentExtensionIn,
                                                             taxDocumentExtensionPayment,
                                                             abs(vendSettlement.SettleAmountMST));
 
                            sumSettleAmountMST += vendSettlement.SettleAmountMST;
                            invoiceAmountMST    = vendTrans.AmountMST;
                        }
                    }
 
                    if (invoiceAmountMST)
                    {
                        settledInvoicePercent = abs(sumSettleAmountMST / invoiceAmountMST);
                    }
                    break;
 
                default:
                    break;
 
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTypeOfSupply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the type of supply.
    /// </summary>
    /// <param name="_taxDocumentRowTransaction">
    /// Transaction line.
    /// </param>
    /// <remarks>
    /// This method is used for extension.
    /// Type of supplt has three values:
    /// 1. Zero rated; 2. Exempted; 3. Non GST.
    /// </remarks>
    public void fillTypeOfSupply(TaxDocumentRowTransaction _taxDocumentRowTransaction)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the transaction information.
    /// </summary>
    /// <param name="_taxDocumentExtensionRecId">
    /// The recid of table TaxDocumentExtension_IN.
    /// </param>
    /// <returns>
    /// 1. Transaction line.
    /// 2. Transaction line for India.
    /// </returns>
    private container findTransaction(RefRecId _taxDocumentExtensionInRecId)
    {
        TaxDocumentExtension_IN         taxDocumentExtensionIn;
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransactionIn;
 
        select firstOnly TransCategory, TaxDocumentExtension, CustomsExportOrder, TaxGSTEPZCode_IN from taxDocumentRowTransactionIn
            join BaseAmountCur, TransactionDate from taxDocumentRowTransaction
                where taxDocumentRowTransactionIn.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId
            join TaxTransactionId, TaxTransactionDate, RefTaxDocumentExtension, TaxTransactionRefType from taxDocumentExtensionIn
                where taxDocumentExtensionIn.RecId == taxDocumentRowTransactionIn.TaxDocumentExtension
                    && taxDocumentExtensionIn.RecId == _taxDocumentExtensionInRecId;
 
        return [taxDocumentRowTransaction, taxDocumentRowTransactionIn];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeOfInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets type of invoice.
    /// </summary>
    /// <param name="_rowTrans">
    /// The tax document row transaction.
    /// </param>
    /// <param name="_rowTransIN">
    /// The tax document row transaction for india.
    /// </param>
    /// <returns>
    /// The type of invoice.
    /// </returns>
    public str getTypeOfInvoice(TaxDocumentRowTransaction _rowTrans, TaxDocumentRowTransaction_IN _rowTransIN)
    {
        #define.TypeB2B('B2B')
        #define.TypeB2CL('B2CL')
        #define.TypeB2CS('B2CS')
        #define.TypeExportWithPaym('Export with payment')
        #define.TypeExportWithoutPaym('Export without payment GST')

        str         typeOfinvoice;
        AmountCur   totalTransValue = this.getTotalTransactionValue(_rowTrans);

        if (_rowTrans && _rowTransIN)
        {
            // B2B: Credit note /Debit note against B2B transaction
            // PartyRegistrationNumber != "" AND (transCategory == "GSTInvoice" OR transCategory == "BillOfSupply")
            if ((_rowTransIN.TransCategory               == TaxTransactionCategory_IN::GSTInvoice
                ||  _rowTransIN.TransCategory            == TaxTransactionCategory_IN::BillOfSupply)
                && _rowTransIN.PartyRegistrationNumber   != ''
                && _rowTransIN.CustomsExportOrder        == false
                && _rowTransIN.CustomsImportOrder        == false)
            {
                typeOfinvoice = #TypeB2B;
            }
            // B2CL: Original transaction -Interstate transaction over 2.5 lacs
            // PartyRegistrationNumber == "" AND IsInterState == true AND InvoiceValue > 250000
            // AND (transCategory == "GSTInvoice" OR transCategory == "BillOfSupply")
            else if ((_rowTransIN.TransCategory          == TaxTransactionCategory_IN::GSTInvoice
                ||  _rowTransIN.TransCategory            == TaxTransactionCategory_IN::BillOfSupply)
                && _rowTransIN.PartyRegistrationNumber   == ''
                && _rowTransIN.IsInterState              == true
                && _rowTransIN.CustomsExportOrder        == false
                && _rowTransIN.CustomsImportOrder        == false
                && abs(totalTransValue) > TaxGSTRReportConstants_IN::InvoiceAmountThreshold)
            {
                typeOfinvoice = #TypeB2CL;
            }
            // B2CS: Original transaction - Intra state any value, Inter-state below 2.5 lacs
            // PartyRegistrationNumber == "" AND (IsInterState == false OR InvoiceValue <= 250000)
            // AND (transCategory == "GSTInvoice" OR transCategory == "BillOfSupply")
            else if ((_rowTransIN.TransCategory          == TaxTransactionCategory_IN::GSTInvoice
                ||  _rowTransIN.TransCategory            == TaxTransactionCategory_IN::BillOfSupply)
                && _rowTransIN.PartyRegistrationNumber   == ''
                && (_rowTransIN.IsInterState             == false || abs(totalTransValue) <= TaxGSTRReportConstants_IN::InvoiceAmountThreshold)
                && _rowTransIN.CustomsExportOrder        == false
                && _rowTransIN.CustomsImportOrder        == false)
            {
                typeOfinvoice = #TypeB2CS;
            }
            // Export with payment : Export transaction if GST is paid
            // (CustomsExportOrder == true OR CustomsImportOrder == true) AND TransCategory == "GSTInvoice"
            else if (_rowTransIN.TransCategory     == TaxTransactionCategory_IN::GSTInvoice
                && (_rowTransIN.CustomsExportOrder == true || _rowTransIN.CustomsImportOrder == true))
            {
                typeOfinvoice = #TypeExportWithPaym;
            }
            // Export without payment GST-  Export transaction if no GST is applied.
            // (CustomsExportOrder == true OR CustomsImportOrder == true) AND TransCategory == "BillOfSupply"
            else if (_rowTransIN.TransCategory     == TaxTransactionCategory_IN::BillOfSupply
                && (_rowTransIN.CustomsExportOrder == true || _rowTransIN.CustomsImportOrder == true))
            {
                typeOfinvoice = #TypeExportWithoutPaym;
            }
        }

        return typeOfinvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTransactionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total transaction value.
    /// </summary>
    /// <param name="_currentRowTrans">
    /// Current tax document row transaction.
    /// </param>
    /// <returns>
    /// The total transaction value for current tax document row transaction.
    /// </returns>
    public AmountCur getTotalTransactionValue(TaxDocumentRowTransaction _currentRowTrans)
    {
        #define.VendPaymTDT('General ledger - vendor payment')
        #define.CustPaymTDT('General ledger - customer payment')
    
        AmountCur                           totalTransValue;
        TaxDocumentRowTransaction           rowTrans;
        TaxDocumentRowTransaction           rowTransLoc;
        TaxDocumentRowTransaction_IN        rowTransINLoc;
        TaxDocumentComponentTransaction     componentTrans;
        TaxDocumentComponentTransaction_IN  componentTransIN;
        TaxDocumentExtension_IN             taxDocumentExtension;
        LedgerJournalTrans                  ledgerJournalTransLoc;
        
        /// <summary>
        /// Gets the total transaction value from the <c>CustTrans</c>.
        /// </summary>
        /// <returns>
        /// Return true if total transaction value initialized, otherwise false.
        /// </returns>
        boolean getTotalTransValueFromCustTrans()
        {
            CustTrans custTrans = CustTrans::findVoucherDate(_currentRowTrans.Voucher, _currentRowTrans.TransactionDate);
            if (!custTrans)
            {
                custTrans = CustTrans::findVoucherDate(_currentRowTrans.Voucher, _currentRowTrans.InvoiceDate);
            }

            totalTransValue = CustTrans.AmountMST;

            return totalTransValue != 0;
        }

        /// <summary>
        /// Gets the total transaction value from the <c>VendTrans</c>.
        /// </summary>
        /// <returns>
        /// Return true if total transaction value initialized, otherwise false.
        /// </returns>
        boolean getTotalTransValueFromVendTrans()
        {
            VendTrans vendTrans = VendTrans::findVoucherDate(_currentRowTrans.Voucher, _currentRowTrans.TransactionDate);
            if (!vendTrans)
            {
                vendTrans = VendTrans::findVoucherDate(_currentRowTrans.Voucher, _currentRowTrans.InvoiceDate);
            }

            totalTransValue = vendTrans.AmountMST;

            return totalTransValue != 0;
        }

        /// <summary>
        /// Gets the total transaction value from the <c>InventTransJourLine</c>.
        /// </summary>
        /// <returns>
        /// Return true if total transaction value initialized, otherwise false.
        /// </returns>
        boolean getTotalTransValueFromInventTransJourLine()
        {
            InventTransferJourLine inventTransferJourLine;

            select sum(NetAmtShip_IN) from inventTransferJourLine
                where inventTransferJourLine.VoucherId == _currentRowTrans.Voucher
                    && inventTransferJourLine.TransDate == _currentRowTrans.TransactionDate;

            if (inventTransferJourLine.NetAmtShip_IN == 0)
            {
                select sum(NetAmtShip_IN) from inventTransferJourLine
                    where inventTransferJourLine.VoucherId == _currentRowTrans.Voucher
                        && inventTransferJourLine.TransDate == _currentRowTrans.InvoiceDate;
            }

            totalTransValue = inventTransferJourLine.NetAmtShip_IN;

            return totalTransValue != 0;
        }

        if (_currentRowTrans.TransactionJourHeaderTableId    == tableNum(TaxEngineProjCostJourHeader)
            || _currentRowTrans.TransactionJourHeaderTableId == tableNum(TaxEngineProjEmplJourHeader)
            || _currentRowTrans.TransactionJourHeaderTableId == tableNum(TaxEngineProjItemJourHeader)
            || _currentRowTrans.TransactionJourHeaderTableId == tableNum(TaxEngineProjItemSOJourHeader)
            || _currentRowTrans.TransactionJourHeaderTableId == tableNum(TaxEngineProjOnAcctJourHeader)
            || _currentRowTrans.TransactionJourHeaderTableId == tableNum(TaxEngineProjRevenueJourHeader)
            || _currentRowTrans.TransactionJourHeaderTableId == tableNum(TaxEngineProjRevenueSubJourHeader))
        {
            // Handle for project transactions.
            // Gets total taxable value.
            totalTransValue = this.getTotalTransactionValueForProj(_currentRowTrans);
        }
        else
        {
            boolean isTotalTransAmountInitialized = false;
            
            switch (_currentRowTrans.TransactionJourLineTableId)
            {
                case tableNum(CustInvoiceTrans) :
                    isTotalTransAmountInitialized = getTotalTransValueFromCustTrans();
                    break;

                case tableNum(VendInvoiceTrans) :
                    isTotalTransAmountInitialized = getTotalTransValueFromVendTrans();
                    break;

                case tableNum(LedgerJournalTrans) :
                        
                    if (CustTable::exist(_currentRowTrans.CustVendAC))
                    {
                        isTotalTransAmountInitialized = getTotalTransValueFromCustTrans();
                    }
                    else if (VendTable::exist(_currentRowTrans.CustVendAC))
                    {
                        isTotalTransAmountInitialized = getTotalTransValueFromVendTrans();
                    }
                    break;

                case tableNum(InventTransferJourLine) :
                    isTotalTransAmountInitialized = getTotalTransValueFromInventTransJourLine();
                    break;

                default :
                    isTotalTransAmountInitialized = false;
            }

            if (!isTotalTransAmountInitialized)
            {
                // Gets total taxable value.
                if (_currentRowTrans.TransactionHeaderTableId == tableNum(TaxEngineLedgerJournalTransHeader)
                    && _currentRowTrans.TransactionLineTableId == tableNum(LedgerJournalTrans))
                {
                    select sum(BaseAmountMST) from rowTrans
                        where rowTrans.TransactionJourHeaderTableId == _currentRowTrans.TransactionJourHeaderTableId
                            && rowTrans.TransactionJourHeaderRecId  == _currentRowTrans.TransactionJourHeaderRecId
                    exists join ledgerJournalTransLoc
                        where rowTrans.TransactionJourLineRecId      == ledgerJournalTransLoc.RecId
                            && ledgerJournalTransLoc.TransactionType != LedgerTransType::Fee;
                }
                else
                {
                    select sum(BaseAmountMST) from rowTrans
                        where rowTrans.TransactionJourHeaderTableId == _currentRowTrans.TransactionJourHeaderTableId
                            && rowTrans.TransactionJourHeaderRecId  == _currentRowTrans.TransactionJourHeaderRecId;
                }

                // Gets total GST tax amount.
                select sum(TaxAmount) from componentTrans
                    exists join componentTransIN
                        where componentTransIN.TaxDocumentComponnetTransactionRecId == componentTrans.RecId
                            && componentTransIN.TaxType                             == TaxType_IN::GST
                    exists join rowTransLoc
                        where componentTrans.TaxDocumentRowTransactionRecId == rowTransLoc.RecId
                            && rowTransLoc.TransactionJourHeaderTableId     == _currentRowTrans.TransactionJourHeaderTableId
                            && rowTransLoc.TransactionJourHeaderRecId       == _currentRowTrans.TransactionJourHeaderRecId
                        exists join rowTransINLoc
                            where rowTransINLoc.TaxDocumentRowTransactionRecId == rowTransLoc.RecId
                            exists join taxDocumentExtension
                                where taxDocumentExtension.RecId                == rowTransINLoc.TaxDocumentExtension
                                    && taxDocumentExtension.TaxableDocumentType != #VendPaymTDT
                                    && taxDocumentExtension.TaxableDocumentType != #CustPaymTDT;
    
                totalTransValue = rowTrans.BaseAmountMST + componentTrans.TaxAmount;
            }
        }
    
        return this.roundingTotalTransactionValue(_currentRowTrans.Source, totalTransValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTransactionValueForFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total transaction value.
    /// </summary>
    /// <param name="_currentRowTrans">
    /// Current tax document row transaction.
    /// </param>
    /// <returns>
    /// The total transaction value for current tax document row transaction.
    /// </returns>
    public AmountCur getTotalTransactionValueForFee(TaxDocumentRowTransaction _currentRowTrans)
    {
        AmountCur                           totalTransValue;
        TaxDocumentRowTransaction           rowTrans;
        TaxDocumentRowTransaction           rowTransLoc;
        TaxDocumentRowTransaction_IN        rowTransINLoc;
        TaxDocumentComponentTransaction     componentTrans;
        TaxDocumentComponentTransaction_IN  componentTransIN;
        TaxDocumentExtension_IN             taxDocumentExtension;
        LedgerJournalTrans                  ledgerJournalTransLoc;

        // Gets total taxable value.
        select sum(BaseAmountMST) from rowTrans
        where rowTrans.TransactionJourHeaderTableId == _currentRowTrans.TransactionJourHeaderTableId
            && rowTrans.TransactionJourHeaderRecId  == _currentRowTrans.TransactionJourHeaderRecId
        exists join ledgerJournalTransLoc
                where rowTrans.TransactionJourLineRecId   == ledgerJournalTransLoc.RecId
                    && ledgerJournalTransLoc.TransactionType == LedgerTransType::Fee;

        // Gets total GST tax amount for Fee.
        select sum(TaxAmount) from componentTrans
        exists join componentTransIN
            where componentTransIN.TaxDocumentComponnetTransactionRecId == componentTrans.RecId
                && componentTransIN.TaxType                             == TaxType_IN::GST
        exists join rowTransLoc
            where componentTrans.TaxDocumentRowTransactionRecId == rowTransLoc.RecId
                && rowTransLoc.TransactionJourHeaderTableId     == _currentRowTrans.TransactionJourHeaderTableId
                && rowTransLoc.TransactionJourHeaderRecId       == _currentRowTrans.TransactionJourHeaderRecId
            exists join ledgerJournalTransLoc
                where rowTransLoc.TransactionJourLineRecId   == ledgerJournalTransLoc.RecId
                    && ledgerJournalTransLoc.TransactionType == LedgerTransType::Fee
            exists join rowTransINLoc
                where rowTransINLoc.TaxDocumentRowTransactionRecId == rowTransLoc.RecId
                exists join taxDocumentExtension
                    where taxDocumentExtension.RecId == rowTransINLoc.TaxDocumentExtension;


        totalTransValue = rowTrans.BaseAmountMST + componentTrans.TaxAmount;

        return this.roundingTotalTransactionValue(_currentRowTrans.Source, totalTransValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundingTotalTransactionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding the total transaction value.
    /// </summary>
    /// <param name="_source">
    /// Source.
    /// </param>
    /// <param name="_totalTransValue">
    /// The total transaction value.
    /// </param>
    /// <returns>
    /// The total transaction value for current tax document row transaction.
    /// </returns>
    private AmountCur roundingTotalTransactionValue(TaxModuleType _source, AmountCur _totalTransValue)
    {
        return TaxGSTRReportUtil_IN::roundingTotalTransactionValue(_source, _totalTransValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTransactionValueForProj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total transaction value for project.
    /// </summary>
    /// <param name="_currentRowTrans">
    /// Current tax document row transaction.
    /// </param>
    /// <returns>
    /// The total transaction value for current tax document row transaction.
    /// </returns>
    private AmountCur getTotalTransactionValueForProj(TaxDocumentRowTransaction _currentRowTrans)
    {
        TaxDocumentRowTransaction           rowTrans;
        TaxDocumentRowTransaction           rowTransLoc;
        TaxDocumentComponentTransaction     componentTrans;
        TaxDocumentComponentTransaction_IN  componentTransIN;
        SysDictTable                        dictTable;
        Common                              sourceTable;
        ProjInvoiceJour                     projInvoiceJour;
        TaxEngineProjOnAcctJourHeader       onAccHeader;
        TaxEngineProjRevenueJourHeader      revenueHeader;
        TaxEngineProjCostJourHeader         costHeader;
        TaxEngineProjItemJourHeader         itemHeader;
        TaxEngineProjEmplJourHeader         emplHeader;
        TaxEngineProjItemSOJourHeader       itemSOHeader;
        TaxEngineProjRevenueSubJourHeader   revenueSubHeader;

        #define.displayFieldNameProjInvoiceJour('ProjInvoiceJour')

        // Find all the project transactions line in current project invoice journal.
        if (_currentRowTrans.TransactionJourHeaderRecId && _currentRowTrans.TransactionJourHeaderTableId)
        {
            dictTable   = new SysDictTable(_currentRowTrans.TransactionJourHeaderTableId);
            sourceTable = dictTable.makeRecord();

            select firstonly sourceTable
                where sourceTable.RecId == _currentRowTrans.TransactionJourHeaderRecId;
        }
        projInvoiceJour  = ProjInvoiceJour::findRecid(sourceTable.getFieldValue(fieldId2name(dictTable.id(), dictTable.fieldName2Id(#displayFieldNameProjInvoiceJour))));
        onAccHeader      = TaxEngineProjOnAcctJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        revenueHeader    = TaxEngineProjRevenueJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        costHeader       = TaxEngineProjCostJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        itemHeader       = TaxEngineProjItemJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        itemSOHeader     = TaxEngineProjItemSOJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        emplHeader       = TaxEngineProjEmplJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        revenueSubHeader = TaxEngineProjRevenueSubJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);

        // Gets total taxable value.
        select sum(BaseAmountMST) from rowTrans
            where (rowTrans.TransactionJourHeaderTableId   == onAccHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == onAccHeader.RecId)
                || (rowTrans.TransactionJourHeaderTableId  == revenueHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == revenueHeader.RecId)
                || (rowTrans.TransactionJourHeaderTableId  == costHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == costHeader.RecId)
                || (rowTrans.TransactionJourHeaderTableId  == itemHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == itemHeader.RecId)
                || (rowTrans.TransactionJourHeaderTableId  == itemSOHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == itemSOHeader.RecId)
                || (rowTrans.TransactionJourHeaderTableId  == emplHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == emplHeader.RecId)
                || (rowTrans.TransactionJourHeaderTableId  == revenueSubHeader.TableId
                    && rowTrans.TransactionJourHeaderRecId == revenueSubHeader.RecId);

        // Gets total GST tax amount.
        select sum(TaxAmount) from componentTrans
            exists join componentTransIN
                where componentTransIN.TaxDocumentComponnetTransactionRecId == componentTrans.RecId
                    && componentTransIN.TaxType                             == TaxType_IN::GST
            exists join rowTransLoc
                where componentTrans.TaxDocumentRowTransactionRecId == rowTransLoc.RecId
                    && ((rowTransLoc.TransactionJourHeaderTableId    == onAccHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == onAccHeader.RecId)
                    || (rowTransLoc.TransactionJourHeaderTableId    == revenueHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == revenueHeader.RecId)
                    || (rowTransLoc.TransactionJourHeaderTableId    == costHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == costHeader.RecId)
                    || (rowTransLoc.TransactionJourHeaderTableId    == itemHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == itemHeader.RecId)
                    || (rowTransLoc.TransactionJourHeaderTableId    == itemSOHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == itemSOHeader.RecId)
                    || (rowTransLoc.TransactionJourHeaderTableId    == emplHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == emplHeader.RecId)
                    || (rowTransLoc.TransactionJourHeaderTableId    == revenueSubHeader.TableId
                        && rowTransLoc.TransactionJourHeaderRecId   == revenueSubHeader.RecId));

        return rowTrans.BaseAmountMST + componentTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills customer or vendor information in model from TaxDocumentRowTransaction.
    /// </summary>
    /// <param name="_taxDocumentRowTransaction">
    /// Transaction line.
    /// </param>
    public void fillCustVendName(TaxDocumentRowTransaction _taxDocumentRowTransaction)
    {
        InventTransferParmTable inventTransferParmTable;
        InventTransferTable inventTransferTable;
        InventLocation inventLocation;

        if (_taxDocumentRowTransaction.TransactionHeaderTableId == tableNum(InventTransferParmTable))
        {
            select firstonly TransferType_IN, InventLocationIdTo, InventLocationIdFrom from inventTransferTable
                join RecId, UpdateType from inventTransferParmTable
                    where inventTransferParmTable.TransferId == inventTransferTable.TransferId
                        && inventTransferParmTable.RecId     == _taxDocumentRowTransaction.TransactionHeaderRecId;
        }

        if (inventTransferTable && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment)
            {
                inventLocation = InventLocation::find(inventTransferTable.InventLocationIdTo);
            }
            else if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
            {
                inventLocation = InventLocation::find(inventTransferTable.InventLocationIdFrom);
            }
            this.parmCustVendAccount(inventLocation.Name);
        }
        else if (this.parmTaxDirectionEnum() == TaxDirection::OutgoingTax)
        {
            this.parmCustVendAccount(CustTable::find(_taxDocumentRowTransaction.CustVendAC).name());
        }
        else if (this.parmTaxDirectionEnum() == TaxDirection::IncomingTax)
        {
            this.parmCustVendAccount(VendTable::find(_taxDocumentRowTransaction.CustVendAC).name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportImportType</Name>
				<Source><![CDATA[
    public TaxExportImportType_IN getExportImportType()
    {
        return exportImportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGoodsServices</Name>
				<Source><![CDATA[
    public TaxGoodsServices_IN getGoodsServices()
    {
        return goodsServices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsBillOfSupply</Name>
				<Source><![CDATA[
    public NoYes getIsBillOfSupply()
    {
        return isBillOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTransactionTotalValue</Name>
				<Source><![CDATA[
    public AmountMST getOriginalTransactionTotalValue()
    {
        return originalTransactionTotalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettledByAdvacedPaymentPercentage</Name>
				<Source><![CDATA[
    public RealBase getSettledByAdvacedPaymentPercentage()
    {
        return settledInvoicePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    public TaxDirection getTaxDirection()
    {
        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowTrans</Name>
				<Source><![CDATA[
    public TaxDocumentRowTransaction getTaxDocumentRowTrans()
    {
        return taxDocumentRowTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowTransIN</Name>
				<Source><![CDATA[
    public TaxDocumentRowTransaction_IN getTaxDocumentRowTransIN()
    {
        return taxDocumentRowTransIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransCategory</Name>
				<Source><![CDATA[
    public TaxTransactionCategory_IN getTransCategory()
    {
        return transCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeOfBillOfSupply</Name>
				<Source><![CDATA[
    public TaxTypeOfBillOfSupply_IN getTypeOfBillOfSupply()
    {
        return taxTypeOfBillOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdditionalTaxAmount</Name>
				<Source><![CDATA[
    public Amount parmAdditionalTaxAmount(Amount _additionalTaxAmount = additionalTaxAmount)
    {
        additionalTaxAmount = _additionalTaxAmount;
        return additionalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddTaxPaidCashLedger</Name>
				<Source><![CDATA[
    public TaxAmount parmAddTaxPaidCashLedger(TaxAmount _addTaxPaidCashLedger = addTaxPaidCashLedger)
    {
        addTaxPaidCashLedger = _addTaxPaidCashLedger;
        return addTaxPaidCashLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddTaxPaidITC</Name>
				<Source><![CDATA[
    public TaxAmount parmAddTaxPaidITC(TaxAmount _addTaxPaidITC = addTaxPaidITC)
    {
        addTaxPaidITC = _addTaxPaidITC;
        return addTaxPaidITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentAmount</Name>
				<Source><![CDATA[
    public AmountMST parmAdjustmentAmount(AmountMST _adjustmentAmount = adjustmentAmount)
    {
        adjustmentAmount = _adjustmentAmount;
        return adjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmAdvanceAmount(TaxAmount _advanceAmount = advanceAmount)
    {
        advanceAmount = _advanceAmount;
        return advanceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceForBillOfSupply</Name>
				<Source><![CDATA[
    public str parmAdvanceForBillOfSupply(NoYes _advanceForBillOfSupply = advanceForBillOfSupply)
    {
        advanceForBillOfSupply = _advanceForBillOfSupply;
        return this.enumNoYes2Symbol(advanceForBillOfSupply);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceForBillOfSupplyEnum</Name>
				<Source><![CDATA[
    public NoYes parmAdvanceForBillOfSupplyEnum(NoYes _advanceForBillOfSupply = advanceForBillOfSupply)
    {
        advanceForBillOfSupply = _advanceForBillOfSupply;
        return advanceForBillOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessableValue</Name>
				<Source><![CDATA[
    public Amount parmAssessableValue(Amount _assessableValue = assessableValue)
    {
        assessableValue = _assessableValue;
        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfEntryDate</Name>
				<Source><![CDATA[
    public CustomsDate_IN parmBillOfEntryDate(CustomsDate_IN _billOfEntryDate = billOfEntryDate)
    {
        billOfEntryDate = _billOfEntryDate;
        return billOfEntryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfEntryNumber</Name>
				<Source><![CDATA[
    public str parmBillOfEntryNumber(str _billOfEntryNumber = billOfEntryNumber)
    {
        billOfEntryNumber = _billOfEntryNumber;
        return billOfEntryNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCESSAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmCESSAmount(TaxAmount _cessAmount = cessAmount)
    {
        cessAmount = _cessAmount;
        return cessAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCESSITCAvailableAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmCESSITCAvailableAmount(TaxAmount _cessITCAvailableAmount = cessITCAvailableAmount)
    {
        cessITCAvailableAmount = _cessITCAvailableAmount;
        return cessITCAvailableAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCESSMonthAmountITC</Name>
				<Source><![CDATA[
    public TaxAmount parmCESSMonthAmountITC(TaxAmount _cessMonthAmountITC = cessMonthAmountITC)
    {
        cessMonthAmountITC = _cessMonthAmountITC;
        return cessMonthAmountITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCESSRate</Name>
				<Source><![CDATA[
    public TaxValue parmCESSRate(TaxValue _cessRate = cessRate)
    {
        cessRate = _cessRate;
        return cessRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCGSTAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmCGSTAmount(TaxAmount _cgstAmount = cgstAmount)
    {
        cgstAmount = _cgstAmount;
        return cgstAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCGSTITCAvailableAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmCGSTITCAvailableAmount(TaxAmount _cgstITCAvailableAmount = cgstITCAvailableAmount)
    {
        cgstITCAvailableAmount = _cgstITCAvailableAmount;
        return cgstITCAvailableAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCGSTMonthAmountITC</Name>
				<Source><![CDATA[
    public TaxAmount parmCGSTMonthAmountITC(TaxAmount _cgstMonthAmountITC = cgstMonthAmountITC)
    {
        cgstMonthAmountITC = _cgstMonthAmountITC;
        return cgstMonthAmountITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCGSTRate</Name>
				<Source><![CDATA[
    public TaxValue parmCGSTRate(TaxValue _cgstRate = cgstRate)
    {
        cgstRate = _cgstRate;
        return cgstRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyRegNumber</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmCompanyRegNumber(TaxRegistrationNumber_IN _companyRegNumber = companyRegNumber)
    {
        companyRegNumber = _companyRegNumber;
        return companyRegNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerType</Name>
				<Source><![CDATA[
    public str parmCustomerType(CustomerType_IN _customerType = customerType)
    {
        customerType = _customerType;
        return this.enum2Symbol(enumNumCustomerType_IN, customerType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerTypeEnum</Name>
				<Source><![CDATA[
    public CustomerType_IN parmCustomerTypeEnum(CustomerType_IN _customerType = customerType)
    {
        customerType = _customerType;
        return customerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendAccount</Name>
				<Source><![CDATA[
    public DirPartyName parmCustVendAccount(DirPartyName _custVendAccount = custVendAccount)
    {
        custVendAccount = _custVendAccount;
        return custVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendAddress</Name>
				<Source><![CDATA[
    public LogisticsAddressing parmCustVendAddress(LogisticsAddressing _custVendAddress = custVendAddress)
    {
        custVendAddress = _custVendAddress;
        return custVendAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendCity</Name>
				<Source><![CDATA[
    public str parmCustVendCity(str _custVendCity = custVendCity)
    {
        custVendCity = _custVendCity;
        return custVendCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendIsoCode</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode parmCustVendIsoCode(LogisticsAddressCountryRegionISOCode _custVendIsoCode = custVendIsoCode)
    {
        custVendIsoCode = _custVendIsoCode;
        return custVendIsoCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendState</Name>
				<Source><![CDATA[
    public LogisticsAddressStateId parmCustVendState(LogisticsAddressStateId _custVendState = custVendState)
    {
        custVendState = _custVendState;
        return custVendState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription(Description _description = description)
    {
        description = _description;
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDifferentialValue</Name>
				<Source><![CDATA[
    public Amount parmDifferentialValue(Amount _differentialValue = differentialValue)
    {
        differentialValue = _differentialValue;
        return differentialValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    public TransDate parmDocumentDate(TransDate _documentDate = documentDate)
    {
        documentDate = _documentDate;
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public String50 parmDocumentNumber(String50 _documentNumber = documentNumber)
    {
        documentNumber = _documentNumber;
        return documentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportImport</Name>
				<Source><![CDATA[
    public str parmExportImport(TaxExportImport_IN _exportImport = exportImport)
    {
        exportImport = _exportImport;
        return this.enum2Symbol(enumNumTaxExportImport_IN, exportImport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportImportType</Name>
				<Source><![CDATA[
    public str parmExportImportType(TaxExportImportType_IN _exportImportType = exportImportType)
    {
        exportImportType = _exportImportType;
        return this.enum2Str(enumNumTaxExportImportType_IN, exportImportType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportImportTypeEnum</Name>
				<Source><![CDATA[
    public TaxExportImportType_IN parmExportImportTypeEnum(TaxExportImportType_IN _exportImportType = exportImportType)
    {
        exportImportType = _exportImportType;
        return exportImportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsReceiptAmount</Name>
				<Source><![CDATA[
    public AmountMST parmGoodsReceiptAmount(AmountMST _goodsReceiptAmount = goodsReceiptAmount)
    {
        goodsReceiptAmount = _goodsReceiptAmount;
        return goodsReceiptAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsReceiptNoteDate</Name>
				<Source><![CDATA[
    public TransDate parmGoodsReceiptNoteDate(TransDate _goodsReceiptNoteDate = goodsReceiptNoteDate)
    {
        goodsReceiptNoteDate = _goodsReceiptNoteDate;
        return goodsReceiptNoteDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsReceiptNoteNumber</Name>
				<Source><![CDATA[
    public str parmGoodsReceiptNoteNumber(str _goodsReceiptNoteNumber = goodsReceiptNoteNumber)
    {
        goodsReceiptNoteNumber = _goodsReceiptNoteNumber;
        return goodsReceiptNoteNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsReceiptQuantity</Name>
				<Source><![CDATA[
    public PurchDeliveredQty parmGoodsReceiptQuantity(PurchDeliveredQty _goodsReceiptQuantity = goodsReceiptQuantity)
    {
        goodsReceiptQuantity = _goodsReceiptQuantity;
        return goodsReceiptQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsServices</Name>
				<Source><![CDATA[
    public str parmGoodsServices(TaxGoodsServices_IN _goodsServices = goodsServices)
    {
        goodsServices = _goodsServices;
        return this.enum2Symbol(enumNumTaxGoodsServices_IN, goodsServices);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsServicesEnum</Name>
				<Source><![CDATA[
    public TaxGoodsServices_IN parmGoodsServicesEnum(TaxGoodsServices_IN _goodsServices = goodsServices)
    {
        goodsServices = _goodsServices;
        return goodsServices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGstin</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmGstin(TaxRegistrationNumber_IN _gstin = gstin)
    {
        gstin = _gstin;
        return gstin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGstinEcommerce</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmGstinEcommerce(TaxRegistrationNumber_IN _gstinEcommerce = gstinEcommerce)
    {
        gstinEcommerce = _gstinEcommerce;
        return gstinEcommerce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGstinISD</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmGstinISD(TaxRegistrationNumber_IN _gstinISD = gstinISD)
    {
        gstinISD = _gstinISD;
        return gstinISD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHsnSacCode</Name>
				<Source><![CDATA[
    public String50 parmHsnSacCode(String50 _hsnSacCode = hsnSacCode)
    {
        hsnSacCode = _hsnSacCode;
        return hsnSacCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIGSTAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmIGSTAmount(TaxAmount _igstAmount = igstAmount)
    {
        igstAmount = _igstAmount;
        return igstAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIGSTITCAvailableAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmIGSTITCAvailableAmount(TaxAmount _igstITCAvailableAmount = igstITCAvailableAmount)
    {
        igstITCAvailableAmount = _igstITCAvailableAmount;
        return igstITCAvailableAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIGSTMonthAmountITC</Name>
				<Source><![CDATA[
    public TaxAmount parmIGSTMonthAmountITC(TaxAmount _igstMonthAmountITC = igstMonthAmountITC)
    {
        igstMonthAmountITC = _igstMonthAmountITC;
        return igstMonthAmountITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIGSTRate</Name>
				<Source><![CDATA[
    public TaxValue parmIGSTRate(TaxValue _igstRate = igstRate)
    {
        igstRate = _igstRate;
        return igstRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterest</Name>
				<Source><![CDATA[
    public AmountCur parmInterest(AmountCur _interest = interest)
    {
        interest = _interest;
        return interest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    public TransDate parmInvoiceDate(TransDate _invoiceDate = invoiceDate)
    {
        invoiceDate= _invoiceDate;
        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceIdentification</Name>
				<Source><![CDATA[
    public str parmInvoiceIdentification(InvoiceIdentification_IN _invoiceIdentification = invoiceIdentification)
    {
        invoiceIdentification = _invoiceIdentification;
        return this.enum2Symbol(enumNumInvoiceIdentification_IN, invoiceIdentification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceNumber</Name>
				<Source><![CDATA[
    public CustInvoiceId parmInvoiceNumber(CustInvoiceId _invoiceNumber = invoiceNumber)
    {
        invoiceNumber = _invoiceNumber;
        return invoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceValue</Name>
				<Source><![CDATA[
    public AmountCur parmInvoiceValue(AmountCur _invoiceValue = invoiceValue)
    {
        invoiceValue = _invoiceValue;
        return invoiceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInwardOutward</Name>
				<Source><![CDATA[
    public str parmInwardOutward(GTAServiceCategory_IN _inwardOutward = inwardOutward)
    {
        inwardOutward = _inwardOutward;
        return this.enum2Symbol(enumNumGTAServiceCategory_IN, inwardOutward);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBillOfSupply</Name>
				<Source><![CDATA[
    public str parmIsBillOfSupply(NoYes _isBillOfSupply = isBillOfSupply)
    {
        isBillOfSupply = _isBillOfSupply;
        return isExportOrder || epzCode != TaxGSTEPZCode_IN::None ? '' : this.enumNoYes2Symbol(isBillOfSupply);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBillOfSupplyEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsBillOfSupplyEnum(NoYes _isBillOfSupply = isBillOfSupply)
    {
        isBillOfSupply = _isBillOfSupply;
        return isBillOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCompounding</Name>
				<Source><![CDATA[
    public str parmIsCompounding(NoYes _isCompounding = isCompounding)
    {
        isCompounding = _isCompounding;
        return this.enumNoYes2Symbol(isCompounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsConsumer</Name>
				<Source><![CDATA[
    public str parmIsConsumer(NoYes _isConsumer = isConsumer)
    {
        isConsumer = _isConsumer;
        return this.enumNoYes2Symbol(isConsumer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCustCompositionOrUINReg</Name>
				<Source><![CDATA[
    public str parmIsCustCompositionOrUINReg(str _isCustCompositionOrUINReg = isCustCompositionOrUINReg)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentCancelled</Name>
				<Source><![CDATA[
    public str parmIsDocumentCancelled(NoYes _isDocumentCancelled = isDocumentCancelled)
    {
        isDocumentCancelled = _isDocumentCancelled;
        return this.enumNoYes2Symbol(isDocumentCancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsECommerce</Name>
				<Source><![CDATA[
    public str parmIsECommerce(NoYes _isECommerce = isECommerce)
    {
        isECommerce = _isECommerce;
        return this.enumNoYes2Symbol(isECommerce);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExempted</Name>
				<Source><![CDATA[
    public str parmIsExempted(NoYes _isExempted = isExempted)
    {
        isExempted = _isExempted;
        return this.enumNoYes2Symbol(isExempted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExportImport</Name>
				<Source><![CDATA[
    public str parmIsExportImport(NoYes _isExportImport = isExportImport)
    {
        isExportImport = _isExportImport;
        return this.enumNoYes2Symbol(isExportImport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExportImportEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsExportImportEnum(NoYes _isExportImport = isExportImport)
    {
        isExportImport = _isExportImport;
        return isExportImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExportOrderEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsExportOrderEnum(NoYes _isExportOrder = isExportOrder)
    {
        isExportOrder = _isExportOrder;
        return isExportOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsForeignCustVendEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsForeignCustVendEnum(NoYes _isForeignCustVend = isForeignCustVend)
    {
        isForeignCustVend = _isForeignCustVend;
        return isForeignCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGSTTDSDeducted</Name>
				<Source><![CDATA[
    public str parmIsGSTTDSDeducted(NoYes _isGSTTDSDeducted = isGSTTDSDeducted)
    {
        isGSTTDSDeducted = _isGSTTDSDeducted;
        return this.enumNoYes2Symbol(isGSTTDSDeducted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInterstate</Name>
				<Source><![CDATA[
    public str parmIsInterstate(NoYes _isInterstate = isInterstate)
    {
        isInterstate = _isInterstate;
        return this.enumNoYes2Symbol(isInterstate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsMultiplePayment</Name>
				<Source><![CDATA[
    public str parmIsMultiplePayment(NoYes _multiplePayment = multiplePayment)
    {
        multiplePayment = _multiplePayment;
        return this.enumNoYes2Symbol(multiplePayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsMultiplePaymentEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsMultiplePaymentEnum(NoYes _multiplePayment = multiplePayment)
    {
        multiplePayment = _multiplePayment;
        return multiplePayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNonGst</Name>
				<Source><![CDATA[
    public str parmIsNonGst(NoYes _isNonGst = isNonGst)
    {
        isNonGst = _isNonGst;
        return this.enumNoYes2Symbol(isNonGst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNoteForBillOfSupply</Name>
				<Source><![CDATA[
    public str parmIsNoteForBillOfSupply(NoYes _isNoteForBillOfSupply = isNoteForBillOfSupply)
    {
        isNoteForBillOfSupply = _isNoteForBillOfSupply;
        return isNoteForBillOfSupplyBlank ? '' : this.enumNoYes2Symbol(isNoteForBillOfSupply);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNoteForBillOfSupplyEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsNoteForBillOfSupplyEnum(NoYes _isNoteForBillOfSupply = isNoteForBillOfSupply)
    {
        isNoteForBillOfSupply = _isNoteForBillOfSupply;
        return isNoteForBillOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNoteForPreGST</Name>
				<Source><![CDATA[
    public str parmIsNoteForPreGST(NoYes _isNoteForPreGST = isNoteForPreGST)
    {
        isNoteForPreGST = _isNoteForPreGST;
        return this.enumNoYes2Symbol(isNoteForPreGST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrepayment</Name>
				<Source><![CDATA[
    public str parmIsPrepayment(NoYes _isPrepayment = isPrepayment)
    {
        isPrepayment = _isPrepayment;
        return this.enumNoYes2Symbol(isPrepayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProvisionalAssessment</Name>
				<Source><![CDATA[
    public str parmIsProvisionalAssessment(NoYes _isProvisionalAssessment = isProvisionalAssessment)
    {
        isProvisionalAssessment = _isProvisionalAssessment;
        return this.enumNoYes2Symbol(isProvisionalAssessment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRefundClaimed</Name>
				<Source><![CDATA[
    public str parmIsRefundClaimed(NoYes _isRefundClaimed = isRefundClaimed)
    {
        isRefundClaimed = _isRefundClaimed;
        return this.enumNoYes2Symbol(isRefundClaimed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReverseCharge</Name>
				<Source><![CDATA[
    public str parmIsReverseCharge(NoYes _isReverseCharge = isReverseCharge)
    {
        isReverseCharge = _isReverseCharge;
        return this.enumNoYes2Symbol(isReverseCharge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReverseChargeEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsReverseChargeEnum(NoYes _isReverseCharge = isReverseCharge)
    {
        isReverseCharge = _isReverseCharge;
        return isReverseCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSettled</Name>
				<Source><![CDATA[
    public str parmIsSettled(NoYes _isSettled = isSettled)
    {
        isSettled = _isSettled;
        return this.enumNoYes2Symbol(isSettled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSupplierCompositionDealer</Name>
				<Source><![CDATA[
    public str parmIsSupplierCompositionDealer(NoYes _isSupplierCompositionDealer = isSupplierCompositionDealer)
    {
        isSupplierCompositionDealer = _isSupplierCompositionDealer;
        return this.enumNoYes2Symbol(isSupplierCompositionDealer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSupplierCompositionDealerEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsSupplierCompositionDealerEnum(NoYes _isSupplierCompositionDealer = isSupplierCompositionDealer)
    {
        isSupplierCompositionDealer = _isSupplierCompositionDealer;
        return isSupplierCompositionDealer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmITCAvailabilityType</Name>
				<Source><![CDATA[
    public str parmITCAvailabilityType(str _itcAvailabilityType = itcAvailabilityType)
    {
        itcAvailabilityType = _itcAvailabilityType;
        return itcAvailabilityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItcAvailableThisMonth</Name>
				<Source><![CDATA[
    public TaxAmount parmItcAvailableThisMonth(TaxAmount _itcAvailableThisMonth = itcAvailableThisMonth)
    {
        itcAvailableThisMonth = _itcAvailableThisMonth;
        return itcAvailableThisMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItcEligibility</Name>
				<Source><![CDATA[
    public str parmItcEligibility(ITCCategory_IN  _itcEligibility = itcEligibility)
    {
        itcEligibility = _itcEligibility;
        return this.enum2Symbol(enumNumITCCategory_IN, itcEligibility);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItcEligibilityEnum</Name>
				<Source><![CDATA[
    private ITCCategory_IN parmItcEligibilityEnum()
    {
        return itcEligibility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItcReversalAmount</Name>
				<Source><![CDATA[
    public Amount parmItcReversalAmount(Amount _itcReversalAmount = itcReversalAmount)
    {
        itcReversalAmount = _itcReversalAmount;
        return itcReversalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItcTax</Name>
				<Source><![CDATA[
    public TaxAmount parmItcTax(TaxAmount _itcTax = itcTax)
    {
        itcTax = _itcTax;
        return itcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItcTotalAvailable</Name>
				<Source><![CDATA[
    public TaxAmount parmItcTotalAvailable(TaxAmount _itcTotalAvailable = itcTotalAvailable)
    {
        itcTotalAvailable = _itcTotalAvailable;
        return itcTotalAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDescription</Name>
				<Source><![CDATA[
    public EcoResDescription parmItemDescription(EcoResDescription _itemDescription = itemDescription)
    {
        itemDescription = _itemDescription;
        return itemDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRate</Name>
				<Source><![CDATA[
    public PriceCur parmItemRate(PriceCur _itemRate = itemRate)
    {
        itemRate = _itemRate;
        return itemRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeasure</Name>
				<Source><![CDATA[
    public String50 parmMeasure(String50 _measure = measure)
    {
        measure = _measure;
        return measure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMerchantId</Name>
				<Source><![CDATA[
    public MerchantID_IN parmMerchantId(MerchantID_IN _merchantId = merchantId)
    {
        merchantId = _merchantId;
        return merchantId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMerchantIdEComm</Name>
				<Source><![CDATA[
    public MerchantID_IN parmMerchantIdEComm(MerchantID_IN _merchantIdEcomm = merchantIdEComm)
    {
        merchantIdEComm = _merchantIdEComm;
        return merchantIdEComm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMonth</Name>
				<Source><![CDATA[
    public String20 parmMonth(String20 _month = month)
    {
        month = _month;
        return month;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoteDate</Name>
				<Source><![CDATA[
    public TransDate parmNoteDate(TransDate _noteDate = noteDate)
    {
        noteDate = _noteDate;
        return noteDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoteNumber</Name>
				<Source><![CDATA[
    public InvoiceId parmNoteNumber(InvoiceId _noteNumber = noteNumber)
    {
        noteNumber = _noteNumber;
        return noteNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoteType</Name>
				<Source><![CDATA[
    public str parmNoteType(NoteType_MY _noteType = noteType)
    {
        noteType = _noteType;
        return this.enum2Symbol(enumNumNoteType_MY, noteType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalGstin</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber_IN parmOriginalGstin(TaxRegistrationNumber_IN _originalGstin = originalGstin)
    {
        originalGstin = _originalGstin;
        return originalGstin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalInvoiceDate</Name>
				<Source><![CDATA[
    public TransDate parmOriginalInvoiceDate(TransDate _originalInvoiceDate = originalInvoiceDate)
    {
        originalInvoiceDate = _originalInvoiceDate;
        return originalInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalInvoiceNumber</Name>
				<Source><![CDATA[
    public CustInvoiceId parmOriginalInvoiceNumber(CustInvoiceId _originalInvoiceNumber = originalInvoiceNumber)
    {
        originalInvoiceNumber = _originalInvoiceNumber;
        return originalInvoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalTransactionDate</Name>
				<Source><![CDATA[
    public TransDate parmOriginalTransactionDate(TransDate _originalTransactionDate = originalTransactionDate)
    {
        originalTransactionDate = _originalTransactionDate;
        return originalTransactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalTransactionID</Name>
				<Source><![CDATA[
    public str parmOriginalTransactionID(str _originalTransactionID = originalTransactionID)
    {
        originalTransactionID = _originalTransactionID;
        return originalTransactionID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentDate</Name>
				<Source><![CDATA[
    public TransDate parmPaymentDate(TransDate _paymentDate = paymentDate)
    {
        paymentDate = _paymentDate;
        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlaceOfSupply</Name>
				<Source><![CDATA[
    public LogisticsAddressStateId parmPlaceOfSupply(LogisticsAddressStateId _placeOfSupply = placeOfSupply)
    {
        placeOfSupply= _placeOfSupply;
        return placeOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlaceOfSupplyLongform</Name>
				<Source><![CDATA[
    public str parmPlaceOfSupplyLongform(str _placeOfSupplyLongform = placeOfSupplyLongform)
    {
        placeOfSupplyLongform = _placeOfSupplyLongform;
        return placeOfSupplyLongform;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPortCode</Name>
				<Source><![CDATA[
    public str parmPortCode(str _portCode = portCode)
    {
        portCode = _portCode;
        return portCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity(Qty _quantity = quantity)
    {
        quantity = _quantity;
        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRateTDS</Name>
				<Source><![CDATA[
    public TaxValue parmRateTDS(TaxValue _rateTDS = rateTDS)
    {
        rateTDS = _rateTDS;
        return rateTDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    public ReasonCode parmReasonCode(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    public ReasonComment parmReasonComment(ReasonComment _reasonComment = reasonComment)
    {
        reasonComment = _reasonComment;
        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecepientStateCode</Name>
				<Source><![CDATA[
    public AddressCountryRegionId parmRecepientStateCode(AddressCountryRegionId _recipientStateCode = recipientStateCode)
    {
        recipientStateCode = _recipientStateCode;
        return recipientStateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecoverableAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmRecoverableAmount(TaxAmount _recoverableAmount = recoverableAmount)
    {
        recoverableAmount = _recoverableAmount;
        return recoverableAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefundAmount</Name>
				<Source><![CDATA[
    public Amount parmRefundAmount(Amount _refundAmount = refundAmount)
    {
        refundAmount = _refundAmount;
        return refundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTabPage</Name>
				<Source><![CDATA[
    public str parmReportTabPage(str _tabPage = reportTabPage)
    {
        reportTabPage = _tabPage;
 
        return reportTabPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseChargePct</Name>
				<Source><![CDATA[
    public real parmReverseChargePct(real _reverseChargePct = reverseChargePct)
    {
        reverseChargePct = _reverseChargePct;
        return reverseChargePct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSequenceNumber</Name>
				<Source><![CDATA[
    public SequenceNumber parmSequenceNumber(SequenceNumber _sequenceNumber = sequenceNumber)
    {
        sequenceNumber = _sequenceNumber;
        return sequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceCategory</Name>
				<Source><![CDATA[
    public ServiceCategory_IN parmServiceCategory(ServiceCategory_IN  _serviceCategory = serviceCategory)
    {
        serviceCategory = _serviceCategory;
        return serviceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSGSTAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmSGSTAmount(TaxAmount _sgstAmount = sgstAmount)
    {
        sgstAmount = _sgstAmount;
        return sgstAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSGSTITCAvailableAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmSGSTITCAvailableAmount(TaxAmount _sgstITCAvailableAmount = sgstITCAvailableAmount)
    {
        sgstITCAvailableAmount = _sgstITCAvailableAmount;
        return sgstITCAvailableAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSGSTMonthAmountITC</Name>
				<Source><![CDATA[
    public TaxAmount parmSGSTMonthAmountITC(TaxAmount _sgstMonthAmountITC = sgstMonthAmountITC)
    {
        sgstMonthAmountITC = _sgstMonthAmountITC;
        return sgstMonthAmountITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSGSTRate</Name>
				<Source><![CDATA[
    public TaxValue parmSGSTRate(TaxValue _sgstRate = sgstRate)
    {
        sgstRate = _sgstRate;
        return sgstRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingBillDate</Name>
				<Source><![CDATA[
    public CustomsDate_IN parmShippingBillDate(CustomsDate_IN _shippingBillDate = shippingBillDate)
    {
        shippingBillDate = _shippingBillDate;
        return shippingBillDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingBillNumber</Name>
				<Source><![CDATA[
    public CustomsShippingBillNumber_IN parmShippingBillNumber(CustomsShippingBillNumber_IN _shippingBillNumber = shippingBillNumber)
    {
        shippingBillNumber = _shippingBillNumber;
        return shippingBillNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalItemDiscountAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmTotalItemDiscountAmount(DiscAmount _totalItemDiscountAmount = totalItemDiscountAmount)
    {
        totalItemDiscountAmount = _totalItemDiscountAmount;
        return totalItemDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableValue</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxableValue(TaxAmount _taxableValue = taxableValue)
    {
        taxableValue = _taxableValue;
        return taxableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAccountType</Name>
				<Source><![CDATA[
    public str parmTaxAccountType(TaxAccountingPostingAccountType _taxAccountType = taxAccountType)
    {
        taxAccountType = _taxAccountType;
        return this.enum2Symbol(enumNumTaxAccountingPostingAccountType, taxAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxAmount(TaxAmount _taxAmount = taxAmount)
    {
        taxAmount = _taxAmount;
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmountITC</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxAmountITC(TaxAmount _taxAmountITC = taxAmountITC)
    {
        taxAmountITC = _taxAmountITC;
        return taxAmountITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmountPaid</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxAmountPaid(TaxAmount _taxAmountPaid = taxAmountPaid)
    {
        taxAmountPaid = _taxAmountPaid;
        return taxAmountPaid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmountTDS</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxAmountTDS(TaxAmount _taxAmountTDS = taxAmountTDS)
    {
        taxAmountTDS = _taxAmountTDS;
        return taxAmountTDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxComponent</Name>
				<Source><![CDATA[
    public TaxComponent_IN parmTaxComponent(TaxComponent_IN _taxComponent = taxComponent)
    {
        taxComponent = _taxComponent;
        return taxComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDirection</Name>
				<Source><![CDATA[
    public str parmTaxDirection(TaxDirection _taxDirection = taxDirection)
    {
        taxDirection = _taxDirection;
        return this.enum2Symbol(enumNumTaxDirection, taxDirection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDirectionEnum</Name>
				<Source><![CDATA[
    public TaxDirection parmTaxDirectionEnum(TaxDirection _taxDirection = taxDirection)
    {
        taxDirection = _taxDirection;
        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPaidCashLedger</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxPaidCashLedger(TaxAmount _taxPaidCashLedger = taxPaidCashLedger)
    {
        taxPaidCashLedger = _taxPaidCashLedger;
        return taxPaidCashLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPaidITC</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxPaidITC(TaxAmount _taxPaidITC = taxPaidITC)
    {
        taxPaidITC = _taxPaidITC;
        return taxPaidITC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRate</Name>
				<Source><![CDATA[
    public TaxValue parmTaxRate(TaxValue _taxRate = taxRate)
    {
        taxRate = _taxRate;
        return taxRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
    public TransactionID parmTransactionId(TransactionID _transactionID = transactionID)
    {
        transactionID = _transactionID;
        return transactionID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransCategory</Name>
				<Source><![CDATA[
    public str parmTransCategory(TaxTransactionCategory_IN _transCategory = transCategory)
    {
        transCategory = _transCategory;
        return this.enum2Symbol(enumNumTaxTransactionCategory_IN, transCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransCategoryEnum</Name>
				<Source><![CDATA[
    public TaxTransactionCategory_IN parmTransCategoryEnum(TaxTransactionCategory_IN _transCategory = transCategory)
    {
        transCategory = _transCategory;
        return transCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmType</Name>
				<Source><![CDATA[
    public str parmType(TaxModuleTypeId _type = type)
    {
        type = _type;
        return this.enum2Symbol(enumNumTaxModuleType, taxDirection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfBillOfSupply</Name>
				<Source><![CDATA[
    public String30 parmTypeOfBillOfSupply(TaxTypeOfBillOfSupply_IN _taxTypeOfBillOfSupply = taxTypeOfBillOfSupply)
    {
        taxTypeOfBillOfSupply = _taxTypeOfBillOfSupply;
        return this.enum2Str(enumNumTaxTypeOfBillOfSupply_IN, TaxTypeOfBillOfSupply);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfBillOfSupplyEnum</Name>
				<Source><![CDATA[
    public TaxTypeOfBillOfSupply_IN parmTypeOfBillOfSupplyEnum(TaxTypeOfBillOfSupply_IN _taxTypeOfBillOfSupply = taxTypeOfBillOfSupply)
    {
        taxTypeOfBillOfSupply = _taxTypeOfBillOfSupply;
        return taxTypeOfBillOfSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasure</Name>
				<Source><![CDATA[
    public Description parmUnitOfMeasure(Description _unitOfMeasure = unitOfMeasure)
    {
        unitOfMeasure = _unitOfMeasure;
        return unitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnsettledPaymentPercent</Name>
				<Source><![CDATA[
    public RealBase parmUnsettledPaymentPercent(RealBase _unSettledPaymentPercent = unSettledPaymentPercent)
    {
        unSettledPaymentPercent = _unSettledPaymentPercent;
        return unSettledPaymentPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettledByAdvacedPaymentPercentage</Name>
				<Source><![CDATA[
    public void setSettledByAdvacedPaymentPercentage(RealBase _settledInvoicePercent)
    {
        settledInvoicePercent = _settledInvoicePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxDocumentRowTrans</Name>
				<Source><![CDATA[
    public void setTaxDocumentRowTrans(TaxDocumentRowTransaction _taxDocumentRowTrans)
    {
        taxDocumentRowTrans = _taxDocumentRowTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxDocumentRowTransIN</Name>
				<Source><![CDATA[
    public void setTaxDocumentRowTransIN(TaxDocumentRowTransaction_IN _taxDocumentRowTransIN)
    {
        taxDocumentRowTransIN = _taxDocumentRowTransIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalTransactionValue</Name>
				<Source><![CDATA[
    public AmountCur parmTotalTransactionValue(AmountCur _totalTransactionValue = totalTransactionValue)
    {
        totalTransactionValue = _totalTransactionValue;
        return totalTransactionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfInvoiceIsNoteLinkedTo</Name>
				<Source><![CDATA[
    public str parmTypeOfInvoiceIsNoteLinkedTo(str _typeOfInvNoteLinkTo = typeOfInvNoteLinkTo)
    {
        typeOfInvNoteLinkTo = _typeOfInvNoteLinkTo;
        return typeOfInvNoteLinkTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGSTTransactionInNumSeq</Name>
				<Source><![CDATA[
    public RefRecId parmGSTTransactionInNumSeq(RefRecId _gstTransactionInNumSeq = gstTransactionInNumSeq)
    {
        gstTransactionInNumSeq = _gstTransactionInNumSeq;
        return gstTransactionInNumSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInterstateEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsInterstateEnum(NoYes _isInterstate = isInterstate)
    {
        isInterstate = _isInterstate;
        return isInterstate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmInvoiceId(InvoiceId _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDifferentialOfTaxRate</Name>
				<Source><![CDATA[
    public str parmDifferentialOfTaxRate(str _differentialOfTaxRate = differentialOfTaxRate)
    {
        differentialOfTaxRate = _differentialOfTaxRate;
        return differentialOfTaxRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSupplyCoveredUnderSec7</Name>
				<Source><![CDATA[
    public str parmIsSupplyCoveredUnderSec7(NoYes _isSupplyCoveredUnderSec7 = isSupplyCoveredUnderSec7)
    {
        isSupplyCoveredUnderSec7 = _isSupplyCoveredUnderSec7;
        return this.enumNoYes2Symbol(isSupplyCoveredUnderSec7);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSupplyCoveredUnderSec7Enum</Name>
				<Source><![CDATA[
    public NoYes parmIsSupplyCoveredUnderSec7Enum(NoYes _isSupplyCoveredUnderSec7 = isSupplyCoveredUnderSec7)
    {
        isSupplyCoveredUnderSec7 = _isSupplyCoveredUnderSec7;
        return isSupplyCoveredUnderSec7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSupplyCoveredUnderSec7</Name>
				<Source><![CDATA[
    public void fillSupplyCoveredUnderSec7(boolean _isNonIND)
    {
        isSupplyCoveredUnderSec7 = isExportImport|| isInterstate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enumNoYes2Symbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// NoYes enum value to name
    /// </summary>
    /// <param name = "_enum">Enum value</param>
    /// <returns>Enum value name</returns>
    private str enumNoYes2Symbol(NoYes _enum)
    {
        return _enum ? "Yes" : "No";
    }

]]></Source>
			</Method>
			<Method>
				<Name>enum2Symbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// enum2Symbol() method with class static variable cache
    /// </summary>
    /// <param name = "_enumId">Enum id</param>
    /// <param name = "_val">Enum value</param>
    /// <returns>Enum value name</returns>
    private str enum2Symbol(EnumId _enumId, anytype _val)
    {
        str ret;
        Map map;

        if (enumSymbols.exists(_enumId))
        {
            map = enumSymbols.lookup(_enumId);
        }
        else
        {
            map = new Map(Types::Integer, Types::String);
            enumSymbols.insert(_enumId, map);
        }

        if (map.exists(_val))
        {
            ret = map.lookup(_val);
        }
        else
        {
            ret = enum2Symbol(_enumId, _val);
            map.insert(_val, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enum2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// enum2Str() method with class static variable cache
    /// </summary>
    /// <param name = "_enumId">Enum id</param>
    /// <param name = "_val">Enum value</param>
    /// <returns>Enum value label</returns>
    private str enum2Str(EnumId _enumId, anytype _val)
    {
        str ret;
        Map map;

        if (enumStrs.exists(_enumId))
        {
            map = enumStrs.lookup(_enumId);
        }
        else
        {
            map = new Map(Types::Integer, Types::String);
            enumStrs.insert(_enumId, map);
        }

        if (map.exists(_val))
        {
            ret = map.lookup(_val);
        }
        else
        {
            ret = enum2Str(_val);
            map.insert(_val, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfEntryValue</Name>
				<Source><![CDATA[
    public TaxAmount parmBillOfEntryValue(TaxAmount _billOfEntryValue = billOfEntryValue)
    {
        billOfEntryValue = _billOfEntryValue;
        return billOfEntryValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmECommerceOperatorName</Name>
				<Source><![CDATA[
    public DirPartyName parmECommerceOperatorName(DirPartyName _eCommerceOperatorName = eCommerceOperatorName)
    {
        eCommerceOperatorName = _eCommerceOperatorName;
        return eCommerceOperatorName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsECommerceEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsECommerceEnum(NoYes _isECommerce = isECommerce)
    {
        isECommerce = _isECommerce;
        return isECommerce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableValueReturned</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxableValueReturned(TaxAmount _taxableValueReturned = taxableValueReturned)
    {
        taxableValueReturned = _taxableValueReturned;
        return taxableValueReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableValueNet</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxableValueNet(TaxAmount _taxableValueNet = taxableValueNet)
    {
        taxableValueNet = _taxableValueNet;
        return taxableValueNet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplicableRate</Name>
				<Source><![CDATA[
    public TaxValue parmApplicableRate(TaxValue _applicableRate = applicableRate)
    {
        applicableRate = _applicableRate;
        return applicableRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWouldYouClaimRefundEnum</Name>
				<Source><![CDATA[
    public NoYes parmWouldYouClaimRefundEnum(NoYes _wouldYouClaimRefund = wouldYouClaimRefund)
    {
        wouldYouClaimRefund = _wouldYouClaimRefund;
        return wouldYouClaimRefund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWouldYouClaimRefund</Name>
				<Source><![CDATA[
    public str parmWouldYouClaimRefund(NoYes _wouldYouClaimRefund = wouldYouClaimRefund)
    {
        str ret;

        wouldYouClaimRefund = _wouldYouClaimRefund;
        if (isExportOrder || epzCode != TaxGSTEPZCode_IN::None)
        {
            ret = this.enumNoYes2Symbol(wouldYouClaimRefund);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEPZCode</Name>
				<Source><![CDATA[
    public TaxGSTEPZCode_IN parmEPZCode(TaxGSTEPZCode_IN _epzCode = epzCode)
    {
        epzCode = _epzCode;
        return epzCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInwardSuppliesType</Name>
				<Source><![CDATA[
    public str parmInwardSuppliesType(TaxGSTRInwardSuppliesType_IN _inwardSuppliesType = inwardSuppliesType)
    {
        inwardSuppliesType = _inwardSuppliesType;
 
        return this.enum2Symbol(enumNumInwardSuppliesType, inwardSuppliesType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInwardSuppliesTypeEnum</Name>
				<Source><![CDATA[
    public TaxGSTRInwardSuppliesType_IN parmInwardSuppliesTypeEnum(TaxGSTRInwardSuppliesType_IN _inwardSuppliesType = inwardSuppliesType)
    {
        inwardSuppliesType = _inwardSuppliesType;
 
        return inwardSuppliesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsImportOrderEnum</Name>
				<Source><![CDATA[
    public NoYes parmIsImportOrderEnum(NoYes _isImportOrder = isImportOrder)
    {
        isImportOrder = _isImportOrder;
        return isImportOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAnx1</Name>
				<Source><![CDATA[
    public boolean parmIsAnx1(boolean _isAnx1 = isAnx1)
    {
        isAnx1 = _isAnx1;
        return isAnx1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFilingMonth</Name>
				<Source><![CDATA[
    public TaxGSTRReturnFilingMonth_IN parmReturnFilingMonth(TaxGSTRReturnFilingMonth_IN _returnFilingMonth = returnFilingMonth)
    {
        returnFilingMonth = _returnFilingMonth;
        return returnFilingMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFilingQuarter</Name>
				<Source><![CDATA[
    public TaxGSTRReturnFilingQuarter_IN parmReturnFilingQuarter(TaxGSTRReturnFilingQuarter_IN _returnFilingQuarter = returnFilingQuarter)
    {
        returnFilingQuarter = _returnFilingQuarter;
        return returnFilingQuarter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>