<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099DIV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Tax1099DIV extends Tax1099Base implements Tax1099IForm
{
    const str ReturnType = '1';
    private Tax1099FieldsTmp tax1099FieldsTmp = Tax1099FieldsUpdate2021::construct().createUpdatedTax1099FieldsTmp();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        select sum(Amount1), sum(Amount2), sum(Amount3), sum(Amount5), sum(Amount6), sum(Amount7), sum(Amount8), sum(Amount9),
            sum(AmountA), sum(AmountB), sum(AmountC), sum(AmountD), sum(AmountE), sum(AmountF), sum(AmountG),
            sum(Section897OrdinaryDividends), sum(Section897CapitalGain)
            from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099DIV;

        if (_localIRSPayerRec.Amount1 > 0)
        {
            tmpAmountCodes += One; // Total ordinary dividends
        }

        if (_localIRSPayerRec.Amount2 > 0)
        {
            tmpAmountCodes += Two; // Qualified dividends
        }

        if (_localIRSPayerRec.Amount3 > 0)
        {
            tmpAmountCodes += Three; // Total capital gain distribution
        }

        if (_localIRSPayerRec.Amount5 > 0)
        {
            tmpAmountCodes += Five; // Section 199A dividends
        }

        if (_localIRSPayerRec.Amount6 > 0)
        {
            tmpAmountCodes += Six; // Unrecaptured Section 1250 gain
        }

        if (_localIRSPayerRec.Amount7 > 0)
        {
            tmpAmountCodes += Seven; // Section 1202 gain
        }

        if (_localIRSPayerRec.Amount8 > 0)
        {
            tmpAmountCodes += Eight; // Collectibles (28%) rate gain
        }

        if (_localIRSPayerRec.Amount9 > 0)
        {
            tmpAmountCodes += Nine; // Nondividend distributions
        }

        if (_localIRSPayerRec.AmountA > 0)
        {
            tmpAmountCodes += A; // Federal income tax withheld
        }

        if (_localIRSPayerRec.AmountB > 0)
        {
            tmpAmountCodes += B; // Investment expenses
        }

        if (_localIRSPayerRec.AmountC > 0)
        {
            tmpAmountCodes += C; // Foreign tax paid
        }

        if (_localIRSPayerRec.AmountD > 0)
        {
            tmpAmountCodes += D; // Cash liquidation distributions
        }

        if (_localIRSPayerRec.AmountE > 0)
        {
            tmpAmountCodes += E; // Non-cash liquidation distributions
        }

        if (_localIRSPayerRec.AmountF > 0)
        {
            tmpAmountCodes += F; // Exempt interest dividends
        }

        if (_localIRSPayerRec.AmountG > 0)
        {
            tmpAmountCodes += G; // Specified private activity bond interest dividends
        }

        if (_localIRSPayerRec.Section897OrdinaryDividends > 0)
        {
            tmpAmountCodes += H; // Section 897 Ordinary Dividends
        }

        if (_localIRSPayerRec.Section897CapitalGain > 0)
        {
            tmpAmountCodes += J; // Section 897 Capital Gains
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099DIV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        outputRecord = _outputRecord;

        // Second TIN Notice. Field Position: 544
        this.strInsert(_localIRSPayerRec.SecondTIN, 544);

        // Blank. Field Position: 545-546

        // Foreign Country or US Possession. Field Position: 547-586
        this.strInsert(subStr(_localIRSPayerRec.ForeignCountryRegionName, 1, 40), 547);

        // FATCA Filing requirement. Field Position: 587
        if (_localIRSPayerRec.FATCAFilingRequirement == NoYes::Yes)
        {
            this.strInsert('1', 587);
        }

        // Blank. Field Position: 588-662
        // Special Data Entries. Field Position: 663-722 - Used by the different states

        // State Income Tax Withheld. Field Position: 723-734
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.StateTaxWitheld, 12), 723);

        // Local Income Tax Withheld. Field Position: 735-746
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.LocalTaxWithheld, 12), 735);

        // Combined Federal / State Code. Field Position: 747-748
        this.strInsert(_localIRSPayerRec.CombinedFedStateCode, 747);

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        Tax1099StateSummary tax1099StateSummary;
        VendSettlementTax1099 vendSettlementTax1099;
        VendStateTaxID vendStateTaxID;
        Tax1099IRSPayerRec localTax1099IRSPayerRec;
        int stateCounter;

        // Set output table Federal amounts to actual values
        void showFederal()
        {
            _tax1099IRSPayerRecTmp.Amount1 = _tax1099IRSPayerRec.Amount1;
            _tax1099IRSPayerRecTmp.Amount2 = _tax1099IRSPayerRec.Amount2;
            _tax1099IRSPayerRecTmp.Amount3 = _tax1099IRSPayerRec.Amount3
                + _tax1099IRSPayerRec.Amount6 + _tax1099IRSPayerRec.Amount7 + _tax1099IRSPayerRec.Amount8;
            _tax1099IRSPayerRecTmp.Amount4 = _tax1099IRSPayerRec.Amount4;
            _tax1099IRSPayerRecTmp.Amount5 = _tax1099IRSPayerRec.Amount5;
            _tax1099IRSPayerRecTmp.Amount6 = _tax1099IRSPayerRec.Amount6;
            _tax1099IRSPayerRecTmp.Amount7 = _tax1099IRSPayerRec.Amount7;
            _tax1099IRSPayerRecTmp.Amount8 = _tax1099IRSPayerRec.Amount8;
            _tax1099IRSPayerRecTmp.Amount9 = _tax1099IRSPayerRec.Amount9;
            _tax1099IRSPayerRecTmp.AmountA = _tax1099IRSPayerRec.AmountA;
            _tax1099IRSPayerRecTmp.AmountB = _tax1099IRSPayerRec.AmountB;
            _tax1099IRSPayerRecTmp.AmountC = _tax1099IRSPayerRec.AmountC;
            _tax1099IRSPayerRecTmp.AmountD = _tax1099IRSPayerRec.AmountD;
            _tax1099IRSPayerRecTmp.AmountE = _tax1099IRSPayerRec.AmountE;
            _tax1099IRSPayerRecTmp.AmountF = _tax1099IRSPayerRec.AmountF;
            _tax1099IRSPayerRecTmp.AmountG = _tax1099IRSPayerRec.AmountG;
            _tax1099IRSPayerRecTmp.Section897OrdinaryDividends = _tax1099IRSPayerRec.Section897OrdinaryDividends;
            _tax1099IRSPayerRecTmp.Section897CapitalGain = _tax1099IRSPayerRec.Section897CapitalGain;

        }

        // Set output table Federal amounts to 0
        void hideFederal()
        {
            _tax1099IRSPayerRecTmp.Amount1 = 0.0;
            _tax1099IRSPayerRecTmp.Amount2 = 0.0;
            _tax1099IRSPayerRecTmp.Amount3 = 0.0;
            _tax1099IRSPayerRecTmp.Amount4 = 0.0;
            _tax1099IRSPayerRecTmp.Amount5 = 0.0;
            _tax1099IRSPayerRecTmp.Amount6 = 0.0;
            _tax1099IRSPayerRecTmp.Amount7 = 0.0;
            _tax1099IRSPayerRecTmp.Amount8 = 0.0;
            _tax1099IRSPayerRecTmp.Amount9 = 0.0;
            _tax1099IRSPayerRecTmp.AmountA = 0.0;
            _tax1099IRSPayerRecTmp.AmountB = 0.0;
            _tax1099IRSPayerRecTmp.AmountC = 0.0;
            _tax1099IRSPayerRecTmp.AmountD = 0.0;
            _tax1099IRSPayerRecTmp.AmountE = 0.0;
            _tax1099IRSPayerRecTmp.AmountF = 0.0;
            _tax1099IRSPayerRecTmp.AmountG = 0.0;
            _tax1099IRSPayerRecTmp.Section897OrdinaryDividends = 0.0;
            _tax1099IRSPayerRecTmp.Section897CapitalGain = 0.0;
        }

        // Set output table values that are always needed
        void showDefaults()
        {
            _tax1099IRSPayerRecTmp.CompanyName = companyInfo.name();
            _tax1099IRSPayerRecTmp.CompanyAddress = companyInfo.postalAddress().Address;
            _tax1099IRSPayerRecTmp.CompanyPhone = companyInfo.phone();
            _tax1099IRSPayerRecTmp.CompanyTax1099RegNum = companyInfo.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.PayeeNameLine = _tax1099IRSPayerRec.PayeeNameLine;
            _tax1099IRSPayerRecTmp.AddressLine1 = _tax1099IRSPayerRec.address_Line1();
            _tax1099IRSPayerRecTmp.AddressLine2 = _tax1099IRSPayerRec.address_Line2();
            _tax1099IRSPayerRecTmp.Addressing = _tax1099IRSPayerRec.address_on_one_Line();
            _tax1099IRSPayerRecTmp.CityStateZip = _tax1099IRSPayerRec.city_State_Zip();
            _tax1099IRSPayerRecTmp.DirectSalesInd = _tax1099IRSPayerRec.DirectSalesInd;
            _tax1099IRSPayerRecTmp.AcctNumForPayee = _tax1099IRSPayerRec.AcctNumForPayee;
            _tax1099IRSPayerRecTmp.SecondTIN = _tax1099IRSPayerRec.SecondTIN;
            _tax1099IRSPayerRecTmp.ForeignCountryRegionName = _tax1099IRSPayerRec.ForeignCountryRegionName;
            _tax1099IRSPayerRecTmp.PayersRTN = _payersRTN;
            _tax1099IRSPayerRecTmp.FATCAFilingRequirementInd = _tax1099IRSPayerRec.FATCAFilingRequirementInd;
        }

        void doInsert()
        {
            if (this.isTaxAmountsSumPositive(_tax1099IRSPayerRecTmp))
            {
                _tax1099IRSPayerRecTmp.insert();
            }
        }

        ttsbegin;

        // Loop through our temporary table and fill in the Tax1099StateSummary data
        tax1099StateSummary.setTmp();
        select forupdate tax1099StateSummary;

        delete_from localTax1099IRSPayerRec
            where localTax1099IRSPayerRec.Reportable == NoYes::No;

        if (_onlyStateToPrint == '')
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where vendStateTaxID.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                tax1099StateSummary.clear();
                tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099DIVStateIncomeTax(vendStateTaxID.VendAccount,
                    vendStateTaxID.StateId, _fromDate, _toDate);

                if (tax1099StateSummary.StateIncomeTax > 0)
                {
                    tax1099StateSummary.VendAccount = vendStateTaxID.VendAccount;
                    tax1099StateSummary.StateId = vendStateTaxID.StateId;
                    tax1099StateSummary.insert();
                }
            }
        }
        else
        {
            while select VendAccount, StateId
                from vendStateTaxID
                join _tax1099IRSPayerRec
                where _tax1099IRSPayerRec.VendAccount == vendStateTaxID.VendAccount &&
                  vendStateTaxID.StateId == _onlyStateToPrint
            {
                tax1099StateSummary.clear();
                tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099DIVStateIncomeTax(vendStateTaxID.VendAccount, vendStateTaxID.StateId, _fromDate, _toDate);

                if (tax1099StateSummary.StateIncomeTax > 0)
                {
                    tax1099StateSummary.VendAccount = vendStateTaxID.VendAccount;
                    tax1099StateSummary.StateId = vendStateTaxID.StateId;
                    tax1099StateSummary.insert();
                }
            }
        }
        ttscommit;

        // Build records using state information if needed
        while select _tax1099IRSPayerRec
        {
            _tax1099IRSPayerRecTmp.clear();
            showDefaults();

            stateCounter = 0;

            while select tax1099StateSummary
                where tax1099StateSummary.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                // Even case checks _onlyStateToPrint, figures if we need federal info on the form, adds first state info
                if (stateCounter mod 2 == 0)
                {
                    if (_onlyStateToPrint != '' || stateCounter > 1)
                    {
                        hideFederal();
                    }
                    else
                    {
                        showFederal();
                    }

                    _tax1099IRSPayerRecTmp.StateTaxWithheld1 = tax1099StateSummary.StateIncomeTax;
                    _tax1099IRSPayerRecTmp.StateTaxId1 = VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    _tax1099IRSPayerRecTmp.StateId = tax1099StateSummary.StateId;
                }
                // Odd case adds second state, does insert, and sets up for next pass
                else
                {
                    _tax1099IRSPayerRecTmp.StateTaxWithheld2 = tax1099StateSummary.StateIncomeTax;
                    _tax1099IRSPayerRecTmp.StateTaxId2 = VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    _tax1099IRSPayerRecTmp.StateId2 = tax1099StateSummary.StateId;

                    doInsert();
                    _tax1099IRSPayerRecTmp.clear();
                    showDefaults();
                }

                stateCounter++;
            }

            // No state information means we just do federal
            if (stateCounter == 0 && _onlyStateToPrint == '')
            {
                showFederal();
                doInsert();
            }
            // Had state records, ended on an even, do the final insert
            else if (stateCounter mod 2 == 1)
            {
                doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        select firstonly tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099DIV
                && tax1099FieldsTmp.Tax1099Box == Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != '';

        if (tax1099FieldsTmp && tax1099FieldsTmp.Tax1099Box != Tax1099DivConstants::D15)
        {
            _tax1099IRSPayerRec.(fieldName2Id(tableNum(Tax1099IRSPayerRec), tax1099FieldsTmp.Tax1099IRSPayerRecField)) += _localTax1099Summary.SettleTax1099Amount;

        }
        else if (!tax1099FieldsTmp)
        {
            _localTax1099Summary.IRSReportable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        while select tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099DIV
                && tax1099FieldsTmp.Tax1099Box != ''
        {
            fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, tax1099FieldsTmp.Tax1099Box, tax1099FieldsTmp.description, tax1099FieldsTmp.Tax1099Amount, tax1099FieldsTmp.Tax1099Type, _forceUpdate);
        }
        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        while select tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099DIV
                && tax1099FieldsTmp.Tax1099Box == _tax1099Fields.Tax1099Box
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != ''
        {
            _localIRSPayerRec.(fieldName2Id(tableNum(Tax1099IRSPayerRec), tax1099FieldsTmp.Tax1099IRSPayerRecField)) += _tax1099Summary.SettleTax1099Amount;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOrdinaryDividends</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier totalOrdinaryDividends()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D1a, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualifiedDividends</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier qualifiedDividends()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D1b, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCapitalGainDistr</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier totalCapitalGainDistr()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D2a, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unrecapSec1250Gain</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier unrecapSec1250Gain()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D2b, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>section1202gain</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier section1202gain()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D2c, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectibles28Gain</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier collectibles28Gain()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D2d, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nondividendDistributions</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier nondividendDistributions()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D3, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>federalIncomeTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier federalIncomeTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D4, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>section199ADividends</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier section199ADividends()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D5, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>investmentExpenses</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier investmentExpenses()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D6, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignTaxPaid</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier foreignTaxPaid()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D7, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashLiquidationDistributions</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier cashLiquidationDistributions()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D9, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>noncashLiquidationDistributions</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier noncashLiquidationDistributions()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D10, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exemptInterestDividends</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier exemptInterestDividends()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D11, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>specifiedPrivateBondInterestDividends</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier specifiedPrivateBondInterestDividends()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D12, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier stateTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(Tax1099DivConstants::D15, Tax1099Type::F1099DIV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAmountsSumPositive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the sum of tax amounts in the given <c>Tax1099IRSPayerRec</c> buffer is greater than zero.
    /// </summary>
    /// <param name = "_tax1099IRSPayerRecTmp"><c>Tax1099IRSPayerRec</c> buffer.</param>
    /// <returns>true if the sum of tax amounts is greater than zero; otherwise, false.</returns>
    private boolean isTaxAmountsSumPositive(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp)
    {
        boolean isSumGreaterThanZero;

        if (_tax1099IRSPayerRecTmp.Amount1 + _tax1099IRSPayerRecTmp.Amount2 + _tax1099IRSPayerRecTmp.Amount3
            + _tax1099IRSPayerRecTmp.Amount5 + _tax1099IRSPayerRecTmp.Amount6 + _tax1099IRSPayerRecTmp.Amount7
            + _tax1099IRSPayerRecTmp.Amount8 + _tax1099IRSPayerRecTmp.Amount9 + _tax1099IRSPayerRecTmp.AmountA
            + _tax1099IRSPayerRecTmp.AmountB + _tax1099IRSPayerRecTmp.AmountC + _tax1099IRSPayerRecTmp.AmountD
            + _tax1099IRSPayerRecTmp.AmountE + _tax1099IRSPayerRecTmp.AmountF + _tax1099IRSPayerRecTmp.AmountG
            + _tax1099IRSPayerRecTmp.StateTaxWithheld1 + _tax1099IRSPayerRecTmp.StateTaxWithheld2
            + _tax1099IRSPayerRecTmp.Section897OrdinaryDividends + _tax1099IRSPayerRecTmp.Section897CapitalGain > 0)
        {
            isSumGreaterThanZero = true;
        }

        return isSumGreaterThanZero;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>