<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreatePayment_Bank</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayCreatePayment_Bank extends RPayCreatePayment
{
    LedgerJournalTable  ledgerJournalTable;
    LedgerJournalTrans  ledgerJournalTrans;
    Voucher             payVoucherBank;
    TransDate           payDateBank;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoPosting</Name>
				<Source><![CDATA[
    protected void autoPosting()
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        if (! paymentParameters.BankAutoPost)
        {
            return;
        }

        ledgerJournalCheckPost   = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable,
                                                                                 NoYes::Yes,
                                                                                 NoYes::No);
        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    protected boolean createTable()
    {
        if (! paymentParameters.BankPaymentJournalName)
        {
            info("@RUP693");
            return checkFailed("@SYS16764");
        }

        ledgerJournalTable = this.createLedgerJournalTable(ledgerJournalTable,
                                                           paymentParameters.BankPaymentJournalName);
        ledgerJournalTable.OffsetAccountType        = paymentParameters.BankPaymentAccountType;
        ledgerJournalTable.OffsetLedgerDimension    = paymentParameters.BankLedgerDimension;
        ledgerJournalTable.DefaultDimension         = paymentParameters.BankDefaultDimension;
        ledgerJournalTable.update();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        RPayParameters      payParameters = RPayParameters::find();
        RPayTitleposting    payTitlePosting;
        NumberSeq           numberSeq;

        if (! payParameters.OffsetAccountPostingProfile)
        {
            return checkFailed("@RUP2662");
        }

        payTitlePosting = RPayTitleposting::findAccount(payParameters.OffsetAccountPostingProfile, '', '', '', 0);

        ledgerJournalTrans.AccountType      = payTitlePosting.AccountType;
        ledgerJournalTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(payTitlePosting.LedgerDimension, payTitlePosting.DefaultDimension);
        if (ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.DefaultDimension = payTitlePosting.DefaultDimension;
        }

        ledgerJournalTrans.AmountCurDebit   = totalAmount;
        ledgerJournalTrans.RCashPayTransType = RCashPayLedgerTransType::Bank;
        ledgerJournalTrans.Txt              = "@RUP768";

        this.createLedgerJournalTrans(ledgerJournalTrans, ledgerJournalTable);

        numberSeq = NumberSeq::newGetNum(RPayParameters::numRefBankPaymDocNum(), false, true);
        if (numberSeq)
        {
            ledgerJournalTrans.DocumentNum = numberSeq.num();
        }
        ledgerJournalTrans.DocumentDate = ledgerJournalTrans.TransDate;
        ledgerJournalTrans.update();

        payVoucherBank  = ledgerJournalTrans.Voucher;
        payDateBank     = ledgerJournalTrans.TransDate;

        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    protected void showInfo()
    {
        SysInfoAction_FormRun sysInfoAction = SysInfoAction_FormRun::newFormname(formstr(LedgerJournalTable));

        sysInfoAction.parmCallerBuffer(ledgerJournalTable);
        sysInfoAction.parmDescription("@SYS24042");

        info(strfmt("@GLS105883", ledgerJournalTable.JournalNum, ledgerJournalTable.JournalType), '', sysInfoAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayCreatePayment_Bank   rPayCreateBankPayment;
        switch (_args.dataset())
        {
            case tablenum(RPaySheetTable):
                rPayCreateBankPayment = new RPayCreatePayment_BankSheetTable();
                break;
            case tablenum(RPaySheetTrans):
                rPayCreateBankPayment = new RPayCreatePayment_BankSheetTrans();
                break;
            default :
                throw error("@SYS18232");
        }

        rPayCreateBankPayment.setDataSource(_args.record(), FormDataUtil::getFormDataSource(_args.record()));

        if (rPayCreateBankPayment.prompt())
        {
            rPayCreateBankPayment.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>