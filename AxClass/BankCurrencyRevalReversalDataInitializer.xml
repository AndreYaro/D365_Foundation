<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalReversalDataInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalReversalDataInitializer</c> class handles the initial data creation for the bank - foreign currency revaluation reversal process.
/// </summary>
internal final class BankCurrencyRevalReversalDataInitializer
{
    private BankCurrencyRevalHistory bankCurrencyRevalHistory;
    private TransDate transDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalHistoryAndTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalReversalDataInitializer</c> class given a <c>BankCurrencyRevalHistory</c> table buffer storing the original
    /// revaluation historical record and the <c>TransDate</c> that will be used for the reversal posting.
    /// </summary>
    /// <param name = "_bankCurrencyRevalHistory">A <c>BankCurrencyRevalHistory</c> table buffer storing the original revaluation historical record.</param>
    /// <param name = "_transDate">The <c>TransDate</c> that will be used for the reversal posting.</param>
    /// <returns>A new instance of the <c>BankCurrencyRevalReversalDataInitializer</c> class.</returns>
    internal static BankCurrencyRevalReversalDataInitializer newFromBankCurrencyRevalHistoryAndTransDate(BankCurrencyRevalHistory _bankCurrencyRevalHistory, TransDate _transDate)
    {
        BankCurrencyRevalReversalDataInitializer reversalDataInitializer = new BankCurrencyRevalReversalDataInitializer();
        reversalDataInitializer.bankCurrencyRevalHistory = _bankCurrencyRevalHistory;
        reversalDataInitializer.transDate = _transDate;

        return reversalDataInitializer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankCurrencyRevalReversalData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new <c>BankCurrencyRevalTmp</c> table buffer from the existing <c>BankAccountTrans</c> record that was created during the initial revaluation process.
    /// </summary>
    internal BankCurrencyRevalTmp createBankCurrencyRevalReversalData()
    {
        BankCurrencyRevalTmp bankCurrencyRevalTmp = this.populateBankCurrencyRevalTmp();
        bankCurrencyRevalTmp.insert();

        return bankCurrencyRevalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankCurrencyRevalReversalDataByDimension</Name>
				<Source><![CDATA[
    internal BankCurrencyRevalTmp createBankCurrencyRevalReversalDataByDimension()
    {
        BankCurrencyRevalTmp bankCurrencyRevalByDimension;
        BankAccountTrans bankAccountTrans;

        changecompany (bankCurrencyRevalHistory.LegalEntity)
        {
            while select bankAccountTrans
                where bankAccountTrans.Voucher == bankCurrencyRevalHistory.SubledgerVoucher
                    && bankAccountTrans.TransDate == bankCurrencyRevalHistory.TransDate
            {
                bankCurrencyRevalByDimension.clear();

                bankCurrencyRevalByDimension.LegalEntity = CompanyInfo::current();
                bankCurrencyRevalByDimension.BankAccountId = bankAccountTrans.AccountId;
                bankCurrencyRevalByDimension.TransDate = transDate;
                bankCurrencyRevalByDimension.BankCurrencyCode = bankAccountTrans.CurrencyCode;
                bankCurrencyRevalByDimension.AccountingCurrencyAdjustmentAmount = -bankAccountTrans.AmountMST;
                bankCurrencyRevalByDimension.ReportingCurrencyAdjustmentAmount = -bankAccountTrans.AmountReportingCurrency;
                bankCurrencyRevalByDimension.DefaultDimension = bankAccountTrans.DefaultDimension;

                bankCurrencyRevalByDimension.ExchangeRateType = bankCurrencyRevalHistory.ExchangeRateType;
                bankCurrencyRevalByDimension.ExchangeRateDate = bankCurrencyRevalHistory.ExchangeRateDate;
                bankCurrencyRevalByDimension.ReportingCurrencyExchangeRateType = bankCurrencyRevalHistory.ReportingCurrencyExchangeRateType;

                bankCurrencyRevalByDimension.insert();
            }
        }

        return bankCurrencyRevalByDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    private BankCurrencyRevalTmp populateBankCurrencyRevalTmp()
    {
        BankCurrencyRevalTmp bankCurrencyRevalTmp;

        changecompany (bankCurrencyRevalHistory.LegalEntity)
        {
            BankAccountTrans bankAccountTrans = BankAccountTrans::findByVoucher(bankCurrencyRevalHistory.SubledgerVoucher, bankCurrencyRevalHistory.TransDate);

            bankCurrencyRevalTmp.LegalEntity = CompanyInfo::current();
            bankCurrencyRevalTmp.BankAccountId = bankAccountTrans.AccountId;
            bankCurrencyRevalTmp.TransDate = transDate;
            bankCurrencyRevalTmp.BankCurrencyCode = bankAccountTrans.CurrencyCode;
            bankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount = -bankAccountTrans.AmountMST;
            bankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount = -bankAccountTrans.AmountReportingCurrency;

            bankCurrencyRevalTmp.ExchangeRateType = bankCurrencyRevalHistory.ExchangeRateType;
            bankCurrencyRevalTmp.ExchangeRateDate = bankCurrencyRevalHistory.ExchangeRateDate;
            bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType = bankCurrencyRevalHistory.ReportingCurrencyExchangeRateType;
        }
        return bankCurrencyRevalTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>