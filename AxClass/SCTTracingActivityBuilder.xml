<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTTracingActivityBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class SCTTracingActivityBuilder
{
    // Activity code for this builder.
    protected SCTTracingActivityCode activityCode;

    // Indicate if the activity is adding(link) or removing(unlink) relationships between tracking ids.
    protected SCTTracingOperationType tracingOperationType;

    // The record represents the source of order. For example: PurchTable, SalesTable, ProdTable.
    protected Common orderSource;

    // The record represents the source of activity. For example: VendPackingSlipJour, VendInvoiceJour.
    protected Common activitySource;

    // A set of records represents the source of product transactions. "Product" means an increase in inventory.
    protected Set productTransactionSource;

    // A set of records represents the source of consumption transaction. "Consumption" means a decrease in inventory.
    protected Set consumptionTransactionSource;

    // Contains data collection during the tracing activity.
    protected Set dataCollection;

    // A boolean value indicates whether the tracing activity creation is skipped.
    protected boolean shouldSkip;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build and return an tracing activity.
    /// </summary>
    /// <returns>An <c>SCTTracingActivity</c> record instance.</returns>
    public SCTTracingActivity build()
    {
        if (!this.isOrderSourceValid())
        {
            throw error(strFmt("@SCM:SCTActivityOrderSourceValidation", tableId2Name(orderSource.TableId), classId2Name(classIdGet(this))));
        }

        return this.buildActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSkipped</Name>
				<Source><![CDATA[
    internal boolean isSkipped()
    {
        return this.shouldSkip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a tracing activity based on activity type code.
    /// </summary>
    /// <returns>A <c>SCTTracingActivity</c> record instance.</returns>
    protected abstract SCTTracingActivity buildActivity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderSourceValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate order source of this builder.
    /// </summary>
    /// <returns>True if valid. False otherwise.</returns>
    protected abstract boolean isOrderSourceValid()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSerializedTransactionsFromRecords</Name>
				<Source><![CDATA[
    protected str buildSerializedTransactionsFromRecords(Set _records)
    {
        List transactions = new List(Types::Class);
        SetEnumerator enumerator = _records.getEnumerator();
        while (enumerator.moveNext())
        {
            Common record = enumerator.current();
            SCTTracingTransactionContract trans = this.buildTracingTransactionContractFromRecord(record);
            if (trans)
            {
                transactions.addEnd(trans);
            }
        }

        return FormJSONSerializer::serializeClass(transactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTracingTransactionContractFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build tracing transaction contract from record.
    /// </summary>
    /// <param name="_record">A source line</param>
    /// <returns>A <c>SCTTracingTransactionContract</c> contract instance.</returns>
    protected abstract SCTTracingTransactionContract buildTracingTransactionContractFromRecord(Common _record)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>