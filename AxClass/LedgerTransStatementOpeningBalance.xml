<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransStatementOpeningBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransStatementOpeningBalance</c> class populates account opening balances report lines for the Dimension statement report.
/// </summary>
internal final class LedgerTransStatementOpeningBalance
{
    private UserConnection userConnection;
    private LedgerTransStatementStagingTmp ledgerTransStatementStagingTmp;
    private FromDate startDate;
    private FromDate periodStartDate;
    private List postingLayers;
    private DimensionHierarchy focusDimensionHierarchy;
    private Map mainAccountFilterMap;
    private Map dimensionFilterMap;

    private boolean isSkipReportTrxFlightEnabled = FeatureStateProvider::isFeatureEnabled(SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance());
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerTransStatementOpeningBalance));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForLedgerTransStatementDP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static LedgerTransStatementOpeningBalance newForLedgerTransStatementDP(
        UserConnection _userConnection,
        LedgerTransStatementStagingTmp _ledgerTransStatementStagingTmp,
        FromDate _startDate,
        FromDate _periodStartDate,
        List _postingLayers,
        DimensionHierarchy _focusDimensionHierarchy,
        Map _mainAccountFilterMap,
        Map _dimensionFilterMap)
    {
        LedgerTransStatementOpeningBalance ledgerTransStatementOpeningBalance = new LedgerTransStatementOpeningBalance();

        ledgerTransStatementOpeningBalance.userConnection = _userConnection;
        ledgerTransStatementOpeningBalance.ledgerTransStatementStagingTmp = _ledgerTransStatementStagingTmp;
        ledgerTransStatementOpeningBalance.startDate = _startDate;
        ledgerTransStatementOpeningBalance.periodStartDate = _periodStartDate;
        ledgerTransStatementOpeningBalance.postingLayers = _postingLayers;
        ledgerTransStatementOpeningBalance.focusDimensionHierarchy = _focusDimensionHierarchy;
        ledgerTransStatementOpeningBalance.mainAccountFilterMap = _mainAccountFilterMap;
        ledgerTransStatementOpeningBalance.dimensionFilterMap = _dimensionFilterMap;

        return ledgerTransStatementOpeningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOpeningAndOperatingBalancesV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts account opening balance lines for Dimension statement report processing.
    /// </summary>
    internal void insertOpeningAndOperatingBalancesV2()
    {
        using (var activity = instrumentationLogger.activityContext(
            classStr(LedgerTransStatementOpeningBalance),
            methodStr(LedgerTransStatementOpeningBalance, insertOpeningAndOperatingBalancesV2)))
        {
            SysDaInsertObject insertObject = this.createInsertOpeningAndOperatingBalances(
                ledgerTransStatementStagingTmp,
                focusDimensionHierarchy,
                startDate,
                periodStartDate,
                postingLayers);
           
            new SysDaInsertStatement().insert(insertObject);

            // Update account descriptions from the dimension values for the report
            GeneralLedgerBalanceDimensionDescriptionsTmp generalLedgerBalanceDimensionDescriptionsTmp;

            try
            {
                this.setUserConnection(generalLedgerBalanceDimensionDescriptionsTmp);

                insert_recordset generalLedgerBalanceDimensionDescriptionsTmp
                (
                    ReportingDimension
                )
                select ReportingDimension
                    from ledgerTransStatementStagingTmp
                    group by ledgerTransStatementStagingTmp.ReportingDimension
                    where ledgerTransStatementStagingTmp.ReportingDimension != 0;

                GeneralLedgerBalanceDimensionDescriptionsTmp::generateFocusDescriptions(generalLedgerBalanceDimensionDescriptionsTmp, focusDimensionHierarchy.Name, userConnection);

                update_recordset ledgerTransStatementStagingTmp
                    setting MainFocusDescription = generalLedgerBalanceDimensionDescriptionsTmp.DescriptionDisplayValue
                join generalLedgerBalanceDimensionDescriptionsTmp
                    where ledgerTransStatementStagingTmp.ReportingDimension == generalLedgerBalanceDimensionDescriptionsTmp.ReportingDimension;
            }
            finally
            {
                this.disposeUserConnection(generalLedgerBalanceDimensionDescriptionsTmp);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInsertOpeningAndOperatingBalances</Name>
				<Source><![CDATA[
    private SysDaInsertObject createInsertOpeningAndOperatingBalances(
        LedgerTransStatementStagingTmp _ledgerTransStatementTmp,
        DimensionHierarchy _primaryDimensionSet,
        FromDate _startDate,
        FromDate _periodStartDate,
        List _postingLayers)
    {
        SysDaInsertObject ledgerTransStatementTmpInsertObject = new SysDaInsertObject(_ledgerTransStatementTmp);
        ledgerTransStatementTmpInsertObject = this.createBalanceInsertOjbect(ledgerTransStatementTmpInsertObject, _primaryDimensionSet);
        Common balanceTable = ledgerTransStatementTmpInsertObject.query().table();

        // Create the accounting date criteria which considers opening and operating transactions as opening balances up to the
        // start date of the report for the fiscal year
        SysDaQueryExpression whereClause = new SysDaGreaterThanOrEqualsExpression(
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, AccountingDate)),
            new SysDaValueExpression(_periodStartDate));

        whereClause = whereClause.and(new SysDaLessThanExpression(
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, AccountingDate)),
            new SysDaValueExpression(_startDate)));

        whereClause = whereClause.and(new SysDaEqualsExpression(
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, Ledger)),
            new SysDaValueExpression(Ledger::current())));

        // Specify the period type criteria (opening or operating for opening balances - operating included as opening
        // balances for dates less than the report start date)
        SysDaQueryExpression periodTypeClause = new SysDaOrExpression(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, FiscalCalendarPeriodType)),
                new SysDaValueExpression(FiscalPeriodType::Opening)),
            new SysDaEqualsExpression(
                new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, FiscalCalendarPeriodType)),
                new SysDaValueExpression(FiscalPeriodType::Operating)));

        whereClause = whereClause.and(periodTypeClause);

        // Apply any PostingLayer filters
        if (_postingLayers != null)
        {
            SysDaEqualsExpression postingLayerClause;
            ListEnumerator postingLayerLE = _postingLayers.getEnumerator();

            while (postingLayerLE.moveNext())
            {
                var postingLayerEquals =  new SysDaEqualsExpression(
                    new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, PostingLayer)),
                    new SysDaValueExpression(postingLayerLE.current()));

                if (postingLayerClause == null)
                {
                    postingLayerClause = postingLayerEquals;
                }
                else
                {
                    postingLayerClause = postingLayerClause.or(postingLayerEquals);
                }
            }

            whereClause = whereClause.and(postingLayerClause);
        }

        ledgerTransStatementTmpInsertObject.query().whereClause(whereClause);

        return ledgerTransStatementTmpInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceInsertOjbect</Name>
				<Source><![CDATA[
    private SysDaInsertObject createBalanceInsertOjbect(
        SysDaInsertObject _ledgerTransStatementTmpInsertObject,
        DimensionHierarchy _primaryDimensionSet)
    {
        // Add fields and projections from balance table to temp table for opening balances
        _ledgerTransStatementTmpInsertObject.fields()
            .add(fieldStr(LedgerTransStatementStagingTmp, TransDate))
            .add(fieldStr(LedgerTransStatementStagingTmp, AmountDebit))
            .add(fieldStr(LedgerTransStatementStagingTmp, AmountCredit))
            .add(fieldStr(LedgerTransStatementStagingTmp, ReportingCurrencyAmountDebit))
            .add(fieldStr(LedgerTransStatementStagingTmp, ReportingCurrencyAmountCredit))
            .add(fieldStr(LedgerTransStatementStagingTmp, PostingLayer))
            .add(fieldStr(LedgerTransStatementStagingTmp, MainFocusName));

        GeneralLedgerBalance generalLedgerBalance;
        SysDaQueryObject query = _ledgerTransStatementTmpInsertObject.query(new SysDaQueryObject(generalLedgerBalance));
        query.forceSelectOrderHint = true;

        _ledgerTransStatementTmpInsertObject.query().projection()
            .addMin(fieldStr(GeneralLedgerBalanceBase, AccountingDate))
            .addSum(fieldStr(GeneralLedgerBalanceBase, DebitAccountingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceBase, CreditAccountingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceBase, DebitReportingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceBase, CreditReportingCurrencyAmount))
            .add(fieldStr(GeneralLedgerBalanceBase, PostingLayer))
            .addValue(_primaryDimensionSet.Name);

        _ledgerTransStatementTmpInsertObject.query().groupByClause().add(fieldStr(GeneralLedgerBalanceBase, PostingLayer));

        this.createBalanceChildDataSourceObjects(
            _ledgerTransStatementTmpInsertObject,
            _primaryDimensionSet);

        return _ledgerTransStatementTmpInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceChildDataSourceObjects</Name>
				<Source><![CDATA[
    private void createBalanceChildDataSourceObjects(
        SysDaInsertObject _insertObject,
        DimensionHierarchy _primaryDimensionSet)
    {
        SysDaQueryObject generalLedgerBalanceQuery = _insertObject.query();
        
        SysDaQueryObject reportingDimensionReferenceQuery = this.createReportingDimensionReferenceQueryObject(
            _insertObject,
            _primaryDimensionSet);

        SysDaQueryObject reportingDimensionQuery = this.createReportingDimensionQueryObject(
            _insertObject,
            reportingDimensionReferenceQuery,
            _primaryDimensionSet);

        SysDaQueryObject ledgerQuery = this.createLedgerQueryOjbect(_insertObject);

        SysDaQueryObject companyInfoQuery = this.createCompanyInfoQueryObject(_insertObject, ledgerQuery);
        
        // If report filters are applied on the DimensionAttributeValueCombination and/or MainAccount data sources, those filters need to
        // be applied to opening balances
        SysDaQueryObject dimensionAttributeValueCombinationFilterQuery = this.createDimensionAttributeValueCombinationFilterQuery(_insertObject);
        SysDaQueryObject mainAccountFilterQuery = this.createMainAccountFilterObject(dimensionAttributeValueCombinationFilterQuery);

        generalLedgerBalanceQuery
            .joinClause(SysDaJoinKind::InnerJoin, reportingDimensionReferenceQuery)
            .joinClause(SysDaJoinKind::InnerJoin, reportingDimensionQuery)
            .joinClause(SysDaJoinKind::InnerJoin, ledgerQuery)
            .joinClause(SysDaJoinKind::InnerJoin, companyInfoQuery);

        if (dimensionAttributeValueCombinationFilterQuery)
        {
            companyInfoQuery.joinClause(SysDaJoinKind::ExistsJoin, dimensionAttributeValueCombinationFilterQuery);

            if (mainAccountFilterQuery)
            {
                dimensionAttributeValueCombinationFilterQuery.joinClause(SysDaJoinKind::ExistsJoin, mainAccountFilterQuery);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionAttributeValueCombinationFilterQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject createDimensionAttributeValueCombinationFilterQuery(
        SysDaInsertObject _insertObject)
    {
        SysDaQueryObject dimensionAttributeValueCombinationQuery;

        if ((mainAccountFilterMap && mainAccountFilterMap.elements() > 0)
            || (dimensionFilterMap && dimensionFilterMap.elements() > 0))
        {
            DimensionAttributeValueCombination dimensionAttributeValueCombination;
            dimensionAttributeValueCombinationQuery = new SysDaQueryObject(dimensionAttributeValueCombination);

            SysDaQueryObject generalLedgerBalanceQuery = _insertObject.query();

            Common balanceTable = _insertObject.query().table();

            SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(dimensionAttributeValueCombinationQuery.table(), fieldStr(DimensionAttributeValueCombination, RecId)),
                new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, LedgerDimension)));

            if (dimensionFilterMap && dimensionFilterMap.elements() > 0)
            {
                MapEnumerator dimensionFilterEnumerator = dimensionFilterMap.getEnumerator();

                while (dimensionFilterEnumerator.moveNext())
                {
                    whereClause = whereClause.and(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(dimensionAttributeValueCombination, dimensionFilterEnumerator.currentKey()),
                            new SysDaValueExpression(dimensionFilterEnumerator.currentValue())));
                }
            }

            dimensionAttributeValueCombinationQuery.whereClause(whereClause);
        }

        return dimensionAttributeValueCombinationQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMainAccountFilterObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createMainAccountFilterObject(
        SysDaQueryObject _dimensionAttributeValueCombinationQuery)
    {
        SysDaQueryObject mainAccountQuery;

        if (_dimensionAttributeValueCombinationQuery
            && mainAccountFilterMap
            && mainAccountFilterMap.elements() > 0)
        {
            MainAccount mainAccount;
            mainAccountQuery = new SysDaQueryObject(mainAccount);

            SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(mainAccountQuery.table(), fieldStr(MainAccount, RecId)),
                new SysDaFieldExpression(_dimensionAttributeValueCombinationQuery.table(), fieldStr(DimensionAttributeValueCombination, MainAccount)));

            if (mainAccountFilterMap && mainAccountFilterMap.elements() > 0)
            {
                MapEnumerator mainAccountFilterMapEnumerator = mainAccountFilterMap.getEnumerator();

                while (mainAccountFilterMapEnumerator.moveNext())
                {
                    whereClause = whereClause.and(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(mainAccount, mainAccountFilterMapEnumerator.currentKey()),
                            new SysDaValueExpression(mainAccountFilterMapEnumerator.currentValue())));
                }
            }

            mainAccountQuery.whereClause(whereClause);
        }

        return mainAccountQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerQueryOjbect</Name>
				<Source><![CDATA[
    private SysDaQueryObject createLedgerQueryOjbect(
        SysDaInsertObject _insertObject)
    {
        Ledger ledger;
        Common balanceTable = _insertObject.query().table();
        SysDaQueryObject ledgerQuery = new SysDaQueryObject(ledger);

        SysDaQueryExpression ledgerQueryJoin = ledgerQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(ledger, fieldStr(Ledger, RecId)),
                new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceBase, Ledger))));

        return ledgerQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompanyInfoQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createCompanyInfoQueryObject(
        SysDaInsertObject _insertObject,
        SysDaQueryObject _ledgerQueryObject)
    {
        CompanyInfo companyInfo;
        SysDaQueryObject companyInfoQuery = new SysDaQueryObject(companyInfo);

        SysDaQueryExpression companyInfoQueryJoin = companyInfoQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(companyInfo, fieldStr(CompanyInfo, RecId)),
                new SysDaFieldExpression(_ledgerQueryObject.table(), fieldStr(Ledger, PrimaryForLegalEntity))));

        _insertObject.fields()
            .add(fieldStr(LedgerTransStatementStagingTmp, GeneralJournalEntryDataArea));

        companyInfoQuery.projection().add(fieldStr(CompanyInfo, DataArea));
        companyInfoQuery.groupByClause().add(fieldStr(CompanyInfo, DataArea));

        return companyInfoQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportingDimensionReferenceQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createReportingDimensionReferenceQueryObject(
        SysDaInsertObject _insertObject,
        DimensionHierarchy _primaryDimensionSet)
    {
        GeneralLedgerBalanceReportingDimensionReference generalLedgerBalanceReportingDimensionReference;
        SysDaQueryObject generalLedgerBalanceDimensionReferenceQuery = new SysDaQueryObject(generalLedgerBalanceReportingDimensionReference);
        Common balanceTable = _insertObject.query().table();

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(generalLedgerBalanceDimensionReferenceQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension)),
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalance, LedgerDimension)));

        whereClause = whereClause.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(generalLedgerBalanceDimensionReferenceQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimensionReference, FocusDimensionHierarchy)),
                new SysDaValueExpression(_primaryDimensionSet.RecId)));

        generalLedgerBalanceDimensionReferenceQuery.whereClause(whereClause);

        return generalLedgerBalanceDimensionReferenceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportingDimensionQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createReportingDimensionQueryObject(
        SysDaInsertObject _insertObject,
        SysDaQueryObject _generalLedgerBalanceDimensionReferenceQuery,
        DimensionHierarchy _primaryDimensionSet)
    {
        GeneralLedgerBalanceReportingDimension generalLedgerBalanceReportingDimension;
        SysDaQueryObject generalLedgerBalanceDimensionQuery = new SysDaQueryObject(generalLedgerBalanceReportingDimension);

        _insertObject.fields()
            .add(fieldstr(LedgerTransStatementStagingTmp, MainFocusValue));

        generalLedgerBalanceDimensionQuery.projection().add(fieldStr(GeneralLedgerBalanceReportingDimension, DisplayValue));
        generalLedgerBalanceDimensionQuery.groupByClause().add(fieldStr(GeneralLedgerBalanceReportingDimension, DisplayValue));

        _insertObject.fields()
            .add(fieldStr(LedgerTransStatementStagingTmp, ReportingDimension));

        generalLedgerBalanceDimensionQuery.projection().add(fieldStr(GeneralLedgerBalanceReportingDimension, RecId));
        generalLedgerBalanceDimensionQuery.groupByClause().add(fieldStr(GeneralLedgerBalanceReportingDimension, RecId));

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(generalLedgerBalanceDimensionQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimension, RecId)),
            new SysDaFieldExpression(_generalLedgerBalanceDimensionReferenceQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimensionReference, ReportingDimension)));

        whereClause = whereClause.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(generalLedgerBalanceDimensionQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimension, FocusDimensionHierarchy)),
                new SysDaValueExpression(_primaryDimensionSet.RecId)));

        generalLedgerBalanceDimensionQuery.whereClause(whereClause);

        return generalLedgerBalanceDimensionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection on the table buffer.
    /// </summary>
    /// <param name="_common">
    /// The table buffer.
    /// </param>
    private void setUserConnection(Common _common)
    {
        if (userConnection)
        {
            _common.setConnection(userConnection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposeUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the user connection on the table buffer.
    /// </summary>
    /// <param name="_common">
    /// The table buffer.
    /// </param>
    private void disposeUserConnection(Common _common)
    {
        if (isSkipReportTrxFlightEnabled)
        {
            _common.dispose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>