<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_CoByProducts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>PmfFormulaCoBy</c> form
/// </summary>
class PmfFormCtrl_CoByProducts extends PmfFormCtrl
{
    boolean     allowEdit;
    InventDim   inventDimBuffer;
    boolean     isBlocked;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCWCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the catch weight sub control handler
    /// </summary>
    protected void addCWCtrl()
    {
        PdsCWFormCtrl   cwFormCtrl;

        if (this.isCatchWeightEnabled())
        {
            cwFormCtrl = PdsCWFormCtrl_Std::construct();
            cwFormCtrl.parmFormRun(this.parmFormRun());
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(PmfFormulaCoBy,CoByQty),
                    fieldnum(PmfFormulaCoBy,PdsCWQty),
                    false]]
                ));
            cwFormCtrl.parmItemFieldId(fieldnum(PmfFormulaCoBy,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(PmfFormulaCoBy,pdsCWUnitId));

            this.addSubFormCtrl(cwFormCtrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersionIsSiteSpecific</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the associated <c>BOMVersion</c> record is site specific
    /// </summary>
    /// <returns>
    /// true, if the site is specified for the version
    /// </returns>
    private boolean bomVersionIsSiteSpecific()
    {
        BOMVersion bomVersion = this.callerBuffer();

        return bomVersion.pmfIsSiteSpecific();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClosePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates form closing.
    /// </summary>
    /// <returns>
    /// Can close the form.
    /// </returns>
    public boolean canClosePost()
    {
        boolean         ret = true;
        PmfFormulaCoBy  coBy = buffer;

        const int RequiredNumberOfDecimals = 4;
        const int MinimumNumberOfCharacters = 7;
        const int DecimalSeparator = 1; //point
        const int ThousandSeparator = 0; //no thousand separator

        InventTable inventTable =
            this.callerBuffer().TableId == tablenum(BOMVersion)
                ? InventTable::find(this.callerBuffer()
                    .(fieldnum(BOMVersion, ItemId)))
                : coBy.bomVersion().inventTable();

        if (coBy.bomVersion().pmfTotalCostAlloc() > 0 && inventTable.PmfProductType == PmfProductType::MainItem)
        {
            if (coBy.ItemId && (decround(coBy.bomVersion().pmfRemainCostAlloc(), RequiredNumberOfDecimals) > 0))
            {
                checkFailed("@PRO997");
                ret = checkFailed("@PRO1000"
                    + num2str(
                        decround(coBy.bomVersion().pmfTotalCostAlloc(), RequiredNumberOfDecimals),
                            MinimumNumberOfCharacters,
                            RequiredNumberOfDecimals,
                            DecimalSeparator,
                            ThousandSeparator));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PmfProdCoby</c> record can be modified.
    /// </summary>
    /// <returns>
    /// True if the record can be modified; otherwise false.
    /// </returns>
    private boolean canDeleteCoBy()
    {
        return !isBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>BOM</c> can be modified.
    /// </summary>
    /// <returns>
    /// True if the record can be modified; otherwise false.
    /// </returns>
    private boolean canModifyBOM()
    {
        return !isBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>active()</c> event has been processed for the datasource
    /// </summary>
    public void dataSourceActivePost()
    {
        FormDataSource ds;

        this.setProcessFields();

        ds = FormDataUtil::getFormDataSource(inventDimBuffer);

        ds.object(fieldnum(InventDim,InventSiteId)).
            enabled(this.bomVersionIsSiteSpecific());
        ds.object(fieldnum(InventDim,InventLocationId)).
            enabled(this.bomVersionIsSiteSpecific());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formula coby products data source post creation initialization.
    /// </summary>
    public void dataSourceCreatePost()
    {
        BOMVersion              bomVersion = this.callerBuffer();
        PmfFormulaCoBy          pmfFormulaCoByProduct = this.parmBuffer();

        inventDimBuffer.InventSiteId = bomVersion.inventSiteId();
        inventDimBuffer.data(InventDim::findOrCreate(inventDimBuffer));

        pmfFormulaCoByProduct.InventDimId = inventDimBuffer.InventDimId;
        pmfFormulaCoByProduct.initFromBOMVersion(bomVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formula coby products data source pre initialization from parent record.
    /// </summary>
    /// <param name="_buffer">
    /// Parent formula version record.
    /// </param>
    public void dataSourceInitValuePost(Common _buffer)
    {
        PmfFormulaCoBy  pmfFormulaCoByProduct = _buffer;
        BOMVersion      bomVersion = this.callerBuffer();

        pmfFormulaCoByProduct.ProductType = PmfProductType::Co_Product;
        pmfFormulaCoByProduct.LineNum = PmfFormulaCoBy::nextLineNum(
                                            bomVersion.RecId);
        pmfFormulaCoByProduct.CoByQtySerie = bomVersion.PmfBatchSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formula coby products - formula version link range adjustment.
    /// </summary>
    public void dataSourceLinkActivePre()
    {
        BOMVersion bomVersion = this.callerBuffer();

        super();

        formDS.query().dataSourceTable(tablenum(PmfFormulaCoBy))
            .findRange(fieldnum(PmfFormulaCoBy, bomVersionRefRecId))
            .value(queryValue(bomVersion.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the validation for deleting
    /// a record on the form datasource.
    /// </summary>
    /// <returns>
    /// Result of validation.
    /// True if record can be deleted.
    /// </returns>
    public boolean dataSourceValidateDelete()
    {
        boolean ret;

        ret = super();

        if (!this.canDeleteCoBy())
        {
            ret = checkFailed("@PRO2418");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formula coby products data source update validation.
    /// </summary>
    /// <returns>
    /// Validation pass/fail.
    /// </returns>
    public boolean dataSourceValidateWrite()
    {
        boolean          ret;
        PmfFormulaCoBy   coBy = this.pmfFormulaCoByProduct();

        ret = super();

        if (!this.canModifyBOM())
        {
            ret = checkFailed("@PRO2418");
        }
        else
        {
            coBy.InventDimId = InventDim::findOrCreate(inventDimBuffer).InventDimId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the reread and refresh of the displayed data
    /// </summary>
    public void doRefresh()
    {
        this.parmFormDataSource().reread();
        this.parmFormDataSource().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDSField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method enables/disable a field on the formDS using the parameters provided.
    /// </summary>
    /// <param name="_fieldId">
    /// field id of field to be enabled
    /// </param>
    /// <param name="_enable">
    /// boolean value used to enable/disable the ds field.
    /// </param>
    protected void enableDSField(fieldId _fieldId, boolean _enable)
    {
        formDS.object(_fieldId).allowEdit(_enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdBurdenType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>BurdenType</c> field of the <c>PmfFormulaCoBy</c> table.
    /// </summary>
    /// <returns>
    /// The id of the field.
    /// </returns>
    protected fieldId fieldIdBurdenType()
    {
        return fieldnum(PmfFormulaCoBy, BurdenType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCostAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>CostAllocation</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdCostAllocation()
    {
        return fieldnum(PmfFormulaCoBy,CostAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCostAllocationAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>CostAllocationAmt</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdCostAllocationAmt()
    {
        return fieldnum(PmfFormulaCoBy,CostAllocationAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCostAllocationPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>CostAllocationPct</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdCostAllocationPct()
    {
        return fieldnum(PmfFormulaCoBy,CostAllocationPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>ItemId</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdItemId()
    {
        return fieldnum(PmfFormulaCoBy,ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>ProductType</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdProductType()
    {
        return fieldnum(PmfFormulaCoBy,ProductType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>CoByQty</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdQty()
    {
        return fieldnum(PmfFormulaCoBy,CoByQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdRoundUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>RoundUp</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdRoundUp()
    {
        return fieldnum(PmfFormulaCoBy,RoundUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdRoundUpQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the <c>RoundUpQty</c> field of the <c>PmfFormulaCoBy</c> table
    /// </summary>
    /// <returns>
    /// The id of the field
    /// </returns>
    protected fieldId fieldIdRoundUpQty()
    {
        return fieldnum(PmfFormulaCoBy,RoundUpQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the lookup for the fields on the <c>PmfFormulaCoBy</c> record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to handle the lookup for
    /// </param>
    /// <param name="_formControl">
    /// The formcontrol initiating the lookup
    /// </param>
    /// <param name="_filterStr">
    /// Additional filter for the lookup
    /// </param>
    public void fieldLookup(
        fieldId     _fieldId,
        FormControl _formControl,
        str         _filterStr)
    {
        boolean handled = false;

        switch (_fieldId)
        {
            case fieldnum(PmfFormulaCoBy, ItemId) :
                handled = true;
                InventTable::lookupItemTypeCoByProducts(_formControl);
                break;
        }

        if (!handled)
        {
            super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields for the PmfFormulaCoBy datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PmfFormulaCoBy,ProductType),
                fieldnum(PmfFormulaCoBy,CoByQty),
                fieldnum(PmfFormulaCoBy, BurdenType),
                fieldnum(PmfFormulaCoBy, CostAllocationAmt),
                fieldnum(PmfFormulaCoBy, CostAllocationPct),
                fieldnum(PmfFormulaCoBy,CostAllocation),
                fieldnum(PmfFormulaCoBy, ItemId):
                    this.pmfFormulaCoByProduct().updateCostAllocation();
                this.setProcessFields();
                this.updateDesign();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do some additional field validations for fields on the <c>PmfFormulaCoBy</c> record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to validate
    /// </param>
    /// <returns>
    /// true, if the validation succeeds
    /// </returns>
    public boolean fieldValidate(fieldId _fieldId)
    {
        boolean ret;
        PmfFormulaCoBy pmfFormulaCoByProduct;

        pmfFormulaCoByProduct = buffer;
        ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldnum(PmfFormulaCoBy, CostAllocationPct):
                    if (pmfFormulaCoByProduct.CostAllocationPct < 0)
                    {
                        ret = checkFailed("@PRO2255");
                    }
                    break;
                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formula coby products form post initialization.
    /// </summary>
    public void initPost()
    {
        super();

        formDS.query().dataSourceTable(tablenum(PmfFormulaCoBy))
                .addRange(fieldnum(PmfFormulaCoBy, bomVersionRefRecId));

        //set the variable isBlocked (can be set later by refetch of DS)
        isBlocked = BOMParameters::find().BlockEditing && this.pmfFormulaCoByProduct().bomVersion().Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the form element is being initialized
    /// </summary>
    public void initPre()
    {
        this.addCWCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        allowEdit = true;
        isBlocked = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfFormulaCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the buffer as a typed <c>PmfFormulaCoBy</c> record
    /// </summary>
    /// <returns>
    /// The buffer as a <c>PmfFormulaCoBy</c> record
    /// </returns>
    public PmfFormulaCoBy pmfFormulaCoByProduct()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(PmfFormulaCoBy))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId == tablenum(InventDim))
        {
            inventDimBuffer = _datasources2;
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDSEnabledStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables or disables the complete access to a datasource.
    /// </summary>
    /// <param name="_formDataSource">
    ///     The datasource to control.
    /// </param>
    /// <param name="_enabledStatus">
    ///     The status applied to the datasource.
    /// </param>
    /// <remarks>
    ///     The datasources on this form must respect the block editing parameter.
    /// </remarks>
    private void setDSEnabledStatus(FormDataSource _formDataSource, boolean _enabledStatus)
    {
        _formDataSource.allowEdit(_enabledStatus);
        _formDataSource.allowCreate(_enabledStatus);
        _formDataSource.allowDelete(_enabledStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the values and state of the cost related process fields
    /// </summary>
    private void setProcessFields()
    {
        PmfFormulaCoBy pmfFormulaCoByProduct;

        #define.EditCostAllocationAmt('GridCoByProd_EditCostAllocationAmt')
        #define.EditCostAllocationPct('GridCoByProd_EditCostAllocationPct')

        pmfFormulaCoByProduct = buffer;

        if (pmfFormulaCoByProduct.ProductType != PmfProductType::By_Product)
        {
            pmfFormulaCoByProduct.BurdenType = PmfBurdenType::None;
        }

        if (pmfFormulaCoByProduct.BurdenType != PmfBurdenType::None)
        {
            pmfFormulaCoByProduct.CostAllocationPct = 0;
        }

        if (pmfFormulaCoByProduct.BurdenType == PmfBurdenType::None ||
            pmfFormulaCoByProduct.BurdenType == PmfBurdenType::Recycled)
        {
            pmfFormulaCoByProduct.CostAllocationAmt = 0;
        }

        this.enableFormControl(#EditCostAllocationAmt,
            pmfFormulaCoByProduct.ProductType == PmfProductType::By_Product);

        this.enableFormControl(#EditCostAllocationPct,
            pmfFormulaCoByProduct.ProductType != PmfProductType::By_Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        PmfProductType          productType;
        PmfBurdenType           burdenType;
        PmfCostAllocationMethod costAllocation;
        boolean                 isCatchWeight = PdsGlobal::pdsIsCWItem(buffer.(this.fieldIdItemId()));
        #define.EditCostAllocationAmt('GridCoByProd_EditCostAllocationAmt')

        super();

        productType = buffer.(this.fieldIdProductType());
        costAllocation = buffer.(this.fieldIdCostAllocation());
        burdenType = buffer.(this.fieldIdBurdenType());

        isBlocked = BOMParameters::find().BlockEditing && this.pmfFormulaCoByProduct().bomVersion().Approved;

        this.enableDSField(this.fieldIdCostAllocationPct(),
                (costAllocation == PmfCostAllocationMethod::Manual
              || costAllocation == PmfCostAllocationMethod::TCA));

        this.enableDSField(this.fieldIdQty(), !isCatchWeight);

        this.enableDSField(this.fieldIdBurdenType(), productType == PmfProductType::By_Product);
        this.enableDSField(this.fieldIdCostAllocation(), productType == PmfProductType::Co_Product);

        if (this.fieldIdCostAllocationAmt())
        {
            this.enableDSField(this.fieldIdCostAllocationAmt(), burdenType != PmfBurdenType::None &&
                                                                burdenType != PmfBurdenType::Recycled);
        }

        this.enableFormControl(#EditCostAllocationAmt, burdenType != PmfBurdenType::None &&
                                                       burdenType != PmfBurdenType::Recycled);

        this.enableDSField(this.fieldIdRoundUp(),!isCatchWeight);
        this.enableDSField(this.fieldIdRoundUpQty(),!isCatchWeight);

        this.enableFormControl(formControlStr(PmfFormulaCoBy, PmfTCAEstimation), this.pmfFormulaCoByProduct().bomVersion().PmfTotalCostAllocation);

        this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer));

        //block access to both the DSs
        this.setDSEnabledStatus(FormDataUtil::getFormDataSource(buffer),            !isBlocked);
        this.setDSEnabledStatus(FormDataUtil::getFormDataSource(inventDimBuffer),   !isBlocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_CoByProducts construct()
    {
        return new PmfFormCtrl_CoByProducts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_CoByProducts newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_CoByProducts::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>