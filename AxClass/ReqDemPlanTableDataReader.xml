<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanTableDataReader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqDemPlanTableDataReader</c> class exposes table buffers through the data reader interface.
/// </summary>
public class ReqDemPlanTableDataReader implements Microsoft.Dynamics.AX.DemandPlanning.Azure.Data.ISimpleDataReader
{
    private Common table;
    private boolean started;
    private SysDictTable dictTable;
    private Map fieldMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _table)
    {
        table = _table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reads the next row in the data source.
    /// </summary>
    /// <returns>
    ///     true if more data can be read; otherwise, false.
    /// </returns>
    public System.Boolean Read()
    {
        if (started)
        {
            next table;
        }
        started = true;
        return table.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetInt32</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the integer value in the specified column.
    /// </summary>
    /// <param name="_i">
    ///     The column index.
    /// </param>
    /// <returns>
    ///     The integer value.
    /// </returns>
    public System.Int32 GetInt32(int _i)
    {
        return table.(this.getFieldId(_i));
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the string value in the specified column.
    /// </summary>
    /// <param name="_i">
    ///     The column index.
    /// </param>
    /// <returns>
    ///     The string value.
    /// </returns>
    public System.String GetString(int _i)
    {
        return table.(this.getFieldId(_i));
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDecimal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the decimal value in the specified column.
    /// </summary>
    /// <param name="_i">
    ///     The column index.
    /// </param>
    /// <returns>
    ///     The decimal value.
    /// </returns>
    public System.Decimal GetDecimal(int _i)
    {
        return table.(this.getFieldId(_i));
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the date time value in the specified column.
    /// </summary>
    /// <param name="_i">
    ///     The column index.
    /// </param>
    /// <returns>
    ///     The date time value.
    /// </returns>
    public System.DateTime GetDateTime(int _i)
    {
        return table.(_i);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the column index based on column name.
    /// </summary>
    /// <param name = "name">The column name.</param>
    /// <returns>The column index.</returns>
    public int GetOrdinal(str name)
    {
        return this.getDictTable().fieldName2Id(name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Disposes the current instance of the object.
    /// </summary>
    public void Dispose()
    {
        table = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldMap</Name>
				<Source><![CDATA[
    public Map parmFieldMap(Map _fieldMap = fieldMap)
    {
        fieldMap = _fieldMap;
        return fieldMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldId</Name>
				<Source><![CDATA[
    private FieldId getFieldId(int _index)
    {
        return fieldMap ? fieldMap.lookup(_index) : _index;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDictTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or creates a <c>SysDictTable</c> instance for querying table metadata.
    /// </summary>
    /// <returns>The instance of the <c>SysDictTable</c> class.</returns>
    private SysDictTable getDictTable()
    {
        if (!dictTable)
        {
            dictTable = new SysDictTable(table.TableId);
        }
        return dictTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>