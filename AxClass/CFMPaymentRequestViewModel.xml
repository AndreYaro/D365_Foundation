<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Payment request form model view logic class
/// </summary>
class CFMPaymentRequestViewModel
{
    FormDataSource paymentRequestTable_ds;
    FormDataSource paymentRequestLine_ds;
    FormDataSource paymentRequestPaymentOrder_ds;
    NumberSeqFormHandler numberSeqFormHandlerPaymentRequestId;
    boolean numberSeqShouldBeHandled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMPaymentRequestViewModel construct()
    {
        return new CFMPaymentRequestViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPaymentRequestDataSource</Name>
				<Source><![CDATA[
    public static  CFMPaymentRequestViewModel newFromPaymentRequestDataSource(FormDataSource _paymentRequestTableDS,
        FormDataSource _paymentRequestLineDS = null,
        FormDataSource _paymentRequestPaymentOrderDS = null)
    {
        CFMPaymentRequestViewModel viewModel = CFMPaymentRequestViewModel::construct();

        viewModel.parmPaymentRequestTableDatasource(_paymentRequestTableDS);
        viewModel.parmPaymentRequestLineDatasource(_paymentRequestLineDS);
        viewModel.parmPaymentRequestPaymentOrderDatasource(_paymentRequestPaymentOrderDS);
        viewModel.configureDatasource();

        return viewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumChangedEventHandler</Name>
				<Source><![CDATA[
    delegate void accountNumChangedEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeChangedEventHandler</Name>
				<Source><![CDATA[
    delegate void accountTypeChangedEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementApplicableEventHandler</Name>
				<Source><![CDATA[
    delegate void agreementApplicableEventHandler(boolean _agreementApplicable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankPaymentApplicableEventHandler</Name>
				<Source><![CDATA[
    delegate void bankPaymentApplicableEventHandler(boolean _isPaymentConditionsApplicable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAccountNum</Name>
				<Source><![CDATA[
    public void changeAccountNum()
    {
        this.accountNumChangedEventHandler();
        this.parmPaymentRequestTableDatasource().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAccountType</Name>
				<Source><![CDATA[
    public void changeAccountType()
    {
        CFMPaymentRequestTable paymentRequestTable = this.parmPaymentRequestTable();

        this.accountTypeChangedEventHandler();
        this.invoiceAccountApplicableEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.agreementApplicableEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.bankPaymentApplicableEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.paymentAccountTypeCanBeChanged(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.postingProfileCanBeChangedEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeInvoiceAccountNum</Name>
				<Source><![CDATA[
    public void changeInvoiceAccountNum()
    {
        this.invoiceAccountNumChangedEventHandler();
        this.parmPaymentRequestTableDatasource().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures datasource of form to show records demanded by caller
    /// </summary>
    /// <param name="originator">
    /// The cursor from what the form is called
    /// </param>
    /// <param name="_caller">
    /// The caller object.
    /// </param>
    public void configureDatasource(Common originator = null, Object _caller = null)
    {
        if (paymentRequestTable_ds)
        {
            CFMPaymentRequestTable::setRangeForCompany(paymentRequestTable_ds.query());

            if (originator.RecId != 0 && originator.TableId != tableNum(CFMPaymentRequestTable))
            {
                CFMPRViewQueryFilter::filterQuery(originator, paymentRequestTable_ds.query(), _caller);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequestOriginEnabledEventHandler</Name>
				<Source><![CDATA[
    delegate void displayRequestOriginEnabledEventHandler(boolean _visible)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountApplicableEventHandler</Name>
				<Source><![CDATA[
    delegate void invoiceAccountApplicableEventHandler(boolean _isInvoiceAccountApplicable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountNumChangedEventHandler</Name>
				<Source><![CDATA[
    delegate void invoiceAccountNumChangedEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerPaymentRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns created instance of <c>NumberSeqFormHandler</c> class to handle number sequence for payment request.
    /// </summary>
    /// <param name="_packed">
    /// The container that represents packed instance of <c>NumberSeqFormHandler</c> class.
    /// </param>
    /// <returns>
    /// Instance of <c>NumberSeqFormHandler</c> class.
    /// </returns>
    protected NumberSeqFormHandler numberSeqFormHandlerPaymentRequestId(container _packed = conNull())
    {
        if (!numberSeqFormHandlerPaymentRequestId)
        {
            numberSeqFormHandlerPaymentRequestId = NumberSeqFormHandler::construct(this.parmPaymentRequestTableDatasource());
            numberSeqFormHandlerPaymentRequestId.parmNumberSequenceId(CFMParameters::numRefPaymentRequestId().NumberSequenceId);
            numberSeqFormHandlerPaymentRequestId.parmFormDataSource(this.parmPaymentRequestTableDatasource());
            numberSeqFormHandlerPaymentRequestId.parmFieldIdNum(fieldNum(CFMPaymentRequestTable, PaymentRequestId));
            numberSeqFormHandlerPaymentRequestId.parmDontThrowOnMissingRefSetUp(false);
        }

        if (_packed != conNull())
        {
            numberSeqFormHandlerPaymentRequestId.unpack(_packed);
        }

        return numberSeqFormHandlerPaymentRequestId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationCancellationAllowedEventHandler</Name>
				<Source><![CDATA[
    delegate void operationCancellationAllowedEventHandler(boolean _operationAllowed)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationConfirmationAllowedEventHandler</Name>
				<Source><![CDATA[
    delegate void operationConfirmationAllowedEventHandler(boolean _operationAllowed)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationSplitAllowedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when payment request split operation availability is set.
    /// </summary>
    /// <param name="_operationAllowed">
    /// Operation is allowed.
    /// </param>
    delegate void operationSplitAllowedEventHandler(boolean _operationAllowed)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationUpdateFromSourceAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when payment request update operation availability is set.
    /// </summary>
    /// <param name="_operationAllowed">
    /// Operation is allowed.
    /// </param>
    delegate void operationUpdateFromSourceAllowed(boolean _operationAllowed)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSeqShouldBeHandled</Name>
				<Source><![CDATA[
    public boolean parmNumberSeqShouldBeHandled(boolean _numberSeqShouldBeHandled = numberSeqShouldBeHandled)
    {
        numberSeqShouldBeHandled = _numberSeqShouldBeHandled;

        return numberSeqShouldBeHandled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestLineDatasource</Name>
				<Source><![CDATA[
    public FormDataSource parmPaymentRequestLineDatasource(FormDataSource _paymentRequestLine_ds = paymentRequestLine_ds)
    {
        paymentRequestLine_ds = _paymentRequestLine_ds;

        return paymentRequestLine_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestPaymentOrderDatasource</Name>
				<Source><![CDATA[
    public FormDataSource parmPaymentRequestPaymentOrderDatasource(FormDataSource _paymentRequestPaymentOrder_ds = paymentRequestPaymentOrder_ds)
    {
        paymentRequestPaymentOrder_ds = _paymentRequestPaymentOrder_ds;

        return paymentRequestPaymentOrder_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestTable</Name>
				<Source><![CDATA[
    public CFMPaymentRequestTable parmPaymentRequestTable(CFMPaymentRequestTable _paymentRequestTable = null)
    {
        CFMPaymentRequestTable paymentRequestTable;

        if (paymentRequestTable_ds != null)
        {
            paymentRequestTable = paymentRequestTable_ds.cursor() as CFMPaymentRequestTable;

            if (!prmisDefault(_paymentRequestTable))
            {
                paymentRequestTable.data(_paymentRequestTable);
            }
        }

        return paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestTableDatasource</Name>
				<Source><![CDATA[
    public FormDataSource parmPaymentRequestTableDatasource(FormDataSource _paymentRequestTable_ds = paymentRequestTable_ds)
    {
        paymentRequestTable_ds = _paymentRequestTable_ds;

        return paymentRequestTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountTypeCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentAccountTypeCanBeChanged(boolean _paymentAccountTypeCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDueDateCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentDueDateCanBeChanged(boolean _paymentDueDateCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentEditCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentEditCanBeChanged(boolean _editCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentFinDimensionsCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentFinDimensionsCanBeChanged(boolean _paymentFinDimensionsCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOnHoldCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentOnHoldCanBeChanged(boolean _onHoldCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentOrderCanBeChanged(boolean _orderCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderRequisitesCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentOrderRequisitesCanBeChanged (boolean _paymentOrderRequisitesCanBeChanged)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentPrepaymentCanBeChanged</Name>
				<Source><![CDATA[
    delegate void paymentPrepaymentCanBeChanged(boolean _paymentPrepayment)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReqCreatingRollback</Name>
				<Source><![CDATA[
    public void paymentReqCreatingRollback()
    {
        this.numberSeqFormHandlerPaymentRequestId().formMethodClose();
        this.paymentReqCreatingRollBackgEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReqCreatingRollBackgEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentReqCreatingRollBackgEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestActivatedEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestActivatedEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestActive</Name>
				<Source><![CDATA[
    public void paymentRequestActive()
    {
        CFMPaymentRequestTable paymentRequestTable = this.parmPaymentRequestTable();
        boolean allowAddRemoveLines;

        CFMPaymentRequestState paymentRequestState = CFMPaymentRequestState::construct(paymentRequestTable, paymentRequestTable.Status);

        paymentRequestTable_ds.allowDelete(paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Delete));
        paymentRequestTable_ds.allowEdit(paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Correction));

        if (paymentRequestLine_ds)
        {
            allowAddRemoveLines = paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Correction) &&
                                  paymentRequestTable.SourceType == CFMPaymentRequestSourceType::Manual;

            paymentRequestLine_ds.allowDelete(allowAddRemoveLines);
            paymentRequestLine_ds.allowCreate(allowAddRemoveLines);
            paymentRequestLine_ds.allowEdit(allowAddRemoveLines);
        }

        if (paymentRequestPaymentOrder_ds)
        {
            paymentRequestPaymentOrder_ds.allowEdit(paymentRequestTable.Status == CFMPaymentRequestStatus::Opened ||
                                                    paymentRequestTable.Status == CFMPaymentRequestStatus::Confirmed ||
                                                    paymentRequestTable.Status == CFMPaymentRequestStatus::Scheduled);
            this.paymentOrderRequisitesCanBeChanged(paymentRequestTable.isMethodOfPaymentRu());
        }

        this.paymentRequestActivatedEventHandler();

        this.invoiceAccountApplicableEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.agreementApplicableEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.bankPaymentApplicableEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.paymentAccountTypeCanBeChanged(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.postingProfileCanBeChangedEventHandler(paymentRequestTable.AccountType != CFMAccountType::Worker);
        this.paymentOnHoldCanBeChanged(paymentRequestTable.Status != CFMPaymentRequestStatus::Canceled &&
                                       paymentRequestTable.Status != CFMPaymentRequestStatus::Accepted &&
                                       paymentRequestTable.Status != CFMPaymentRequestStatus::Completed);
        this.paymentEditCanBeChanged(paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Correction));
        this.displayRequestOriginEnabledEventHandler(paymentRequestTable.SourceType != CFMPaymentRequestSourceType::Manual);
        this.paymentDueDateCanBeChanged(paymentRequestTable.SourceType == CFMPaymentRequestSourceType::Manual);
        this.paymentFinDimensionsCanBeChanged(paymentRequestTable.SourceType == CFMPaymentRequestSourceType::Manual);
        this.paymentPrepaymentCanBeChanged(paymentRequestTable.SourceType == CFMPaymentRequestSourceType::Manual && paymentRequestTable.AccountType == CFMAccountType::Vend);

        this.operationCancellationAllowedEventHandler(paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Cancellation));
        this.operationConfirmationAllowedEventHandler(paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Confirmation));
        this.operationUpdateFromSourceAllowed(CFMPaymentRequestUpdateFromSource::isUpdateAllowed(paymentRequestTable));

        this.operationSplitAllowedEventHandler(CFMPaymentRequestSplit::isSplitAllowed(paymentRequestTable));
        this.paymentOrderCanBeChanged(paymentRequestTable.AccountType != CFMAccountType::Worker && CFMPaymentRequestTable::existBankPaymentOrderByPaymentRequest(paymentRequestTable.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCreated</Name>
				<Source><![CDATA[
    public void paymentRequestCreated()
    {
        if (numberSeqShouldBeHandled)
        {
            this.numberSeqFormHandlerPaymentRequestId().formMethodDataSourceCreate();
        }

        this.paymentRequestCreatedEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCreatedEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestCreatedEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCreating</Name>
				<Source><![CDATA[
    public void paymentRequestCreating()
    {
        if (numberSeqShouldBeHandled)
        {
            this.numberSeqFormHandlerPaymentRequestId().formMethodDataSourceCreatePre();
        }

        this.paymentRequestCreatingEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCreatingEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestCreatingEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestDeleted</Name>
				<Source><![CDATA[
    public void paymentRequestDeleted()
    {
        if (numberSeqShouldBeHandled)
        {
            this.numberSeqFormHandlerPaymentRequestId().formMethodDataSourceDelete();
        }

        this.paymentRequestDeletedEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestDeletedEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestDeletedEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestDeleting</Name>
				<Source><![CDATA[
    public void paymentRequestDeleting()
    {
        this.paymentRequestDeletingEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestDeletingEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestDeletingEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestValidateWrite</Name>
				<Source><![CDATA[
    public void paymentRequestValidateWrite()
    {
        if (numberSeqShouldBeHandled)
        {
            this.numberSeqFormHandlerPaymentRequestId().formMethodDataSourceValidateWrite();
        }

        this.paymentRequestValidateWriteEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestValidateWriteEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestValidateWriteEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestValidatingWrite</Name>
				<Source><![CDATA[
    public void paymentRequestValidatingWrite()
    {
        if (CFMPaymentRequestTable::exist(this.parmPaymentRequestTable().PaymentRequestId))
        {
            throw error("@CashFlowManagement:PaymentRequestNumberAlreadyExists");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestWriting</Name>
				<Source><![CDATA[
    public void paymentRequestWriting()
    {
        this.paymentRequestWritingEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestWritingEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestWritingEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestWritten</Name>
				<Source><![CDATA[
    public void paymentRequestWritten()
    {
        if (numberSeqShouldBeHandled)
        {
            this.numberSeqFormHandlerPaymentRequestId().formMethodDataSourceWrite();
        }

        this.paymentRequestWrittenEventHandler();
        this.parmPaymentRequestTableDatasource().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestWrittenEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentRequestWrittenEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReqValidatingWriteEventHandler</Name>
				<Source><![CDATA[
    delegate void paymentReqValidatingWriteEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfileCanBeChangedEventHandler</Name>
				<Source><![CDATA[
    delegate void postingProfileCanBeChangedEventHandler(boolean _postingProfileCanBeChanged)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>