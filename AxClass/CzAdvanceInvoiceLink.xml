<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvanceInvoiceLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CzAdvanceInvoiceLink
{
    Map                          paymentsMap,
                                 invoicesMap;

    NoYes                        updateInvoiceStatus;

    CzCustVendAdvanceInvoiceLink link;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDefaultStausInclude</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates status value for included invoice.
    /// </summary>
    /// <param name = "_status">The staus value from advance invoice table.</param>
    /// <param name = "_paymentCnt">The payment counter.</param>
    /// <returns>Calculated status value.</returns>
    [Hookable]
    protected CzAdvanceInvoiceStatus calcDefaultStausInclude(CzAdvanceInvoiceStatus _status, Counter _paymentCnt)
    {
        CzAdvanceInvoiceStatus status;
        switch (_status)
        {
            case CzAdvanceInvoiceStatus::Open     :
            case CzAdvanceInvoiceStatus::PartPaid :
                status = _paymentCnt                      ?
                                CzAdvanceInvoiceStatus::PartPaid :
                                CzAdvanceInvoiceStatus::Open;
                break;
            case CzAdvanceInvoiceStatus::Closed   :
                status = CzAdvanceInvoiceStatus::Closed;
                break;
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDefaultStausNotInclude</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates status value for not included invoice.
    /// </summary>
    /// <param name = "_invoiceTable">The advance invoice table record.</param>
    /// <param name = "_paymentCompany">The payment company.</param>
    /// <param name = "_paymentVoucher">The payment voucher.</param>
    /// <param name = "_paymentDate">The date of payment.</param>
    /// <returns>Calculated status value.</returns>
    [Hookable]
    protected CzAdvanceInvoiceStatus calcDefaultStausNotInclude(CzAdvanceInvoiceTable _invoiceTable, CompanyId _paymentCompany, Voucher _paymentVoucher, TransDate _paymentDate)
    {
        CzAdvanceInvoiceStatus status;
        switch (_invoiceTable.Status)
        {
            case CzAdvanceInvoiceStatus::Open     :
            case CzAdvanceInvoiceStatus::Closed   :
                status = _invoiceTable.Status;
                break;
            case CzAdvanceInvoiceStatus::PartPaid :
                select firstonly crosscompany RecId from link
                        where   link.InvoiceCompany       == _invoiceTable.company()
                           &&   link.AdvanceInvoiceRecId  == _invoiceTable.RecId
                           &&  (link.PaymentCompany       != _paymentCompany
                           ||   link.Voucher              != _paymentVoucher
                           ||   link.TransDate            != _paymentDate);

                status = link.RecId                       ?
                                CzAdvanceInvoiceStatus::PartPaid :
                                CzAdvanceInvoiceStatus::Open;
                break;

        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDefaultStatus</Name>
				<Source><![CDATA[
    private void calcDefaultStatus(CzAdvanceInvoiceTable  _invoiceTable,
                                   boolean                _include,
                                   CzAdvanceInvoiceStatus _selectedStatus,
                                   Counter                _paymentCnt,
                                   CompanyId              _paymentCompany,
                                   Voucher                _paymentVoucher,
                                   TransDate              _paymentDate)
    {
        CzAdvanceInvoiceStatus newStatus;

        if (_include)
        {
            newStatus = this.calcDefaultStausInclude(_invoiceTable.Status, _paymentCnt);
            if (newStatus == CzAdvanceInvoiceStatus::PartPaid)
            {
                newStatus = this.additionalStatusCheckForClosed(_invoiceTable,_paymentCompany,_paymentVoucher,_paymentDate);
            }
        }
        else
        {
            newStatus = this.calcDefaultStausNotInclude(_invoiceTable,_paymentCompany,_paymentVoucher,_paymentDate);
        }

        if (newStatus != _selectedStatus)
        {
            invoicesMap.insert([_invoiceTable.company(), _invoiceTable.RecId], [ _include, newStatus ]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalStatusCheckForClosed</Name>
				<Source><![CDATA[
    private CzAdvanceInvoiceStatus additionalStatusCheckForClosed(CzAdvanceInvoiceTable _invoiceTable, 
                                                                  CompanyId _paymentCompany, 
                                                                  Voucher _paymentVoucher, 
                                                                  TransDate _paymentDate)
    {
        CzVendAdvanceInvoiceLink czVendAdvanceInvoiceLink;
        container result = czVendAdvanceInvoiceLink.paymentAmount(_paymentCompany, _paymentVoucher, _paymentDate);

        if ( conPeek(result, 2) == _invoiceTable.CurrencyCode && conPeek(result, 1) >= _invoiceTable.InvoiceAmount)
        {
            return CzAdvanceInvoiceStatus::Closed;
        }
        return CzAdvanceInvoiceStatus::PartPaid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAdvInvDate</Name>
				<Source><![CDATA[
    public boolean checkAdvInvDate()
    {
        boolean               ret = true;
        MapEnumerator         enuInvoice, enuPayment;

        boolean               include;
        boolean               existsPosted;
        CompanyId             invoiceCompany;
        RefRecId              refRecId;

        CompanyId             company;
        Voucher               voucher;
        TransDate             transDate;

        CzAdvanceInvoiceTable advanceTable;

        ErrorTolerance        advInvDate;

        Set                   dateSet;

        advInvDate = CustParameters::find().AdvInvDate_W;
        if (advInvDate == ErrorTolerance::Accept)
            return true;

        dateSet = new Set(Types::Date);

        enuPayment = paymentsMap.getEnumerator();
        while (enuPayment.moveNext() && dateSet.elements() <= 1)
        {
            if (enuPayment.currentValue())
            {
                [ company, voucher, transDate ] = enuPayment.currentKey();

                dateSet.add(transDate);
            }
        }

        enuInvoice = invoicesMap.getEnumerator();
        while (enuInvoice.moveNext() && ret)
        {
            [ include ] = enuInvoice.currentValue();
            if (include)
            {
                [ invoiceCompany, refRecId ] = enuInvoice.currentKey();
                advanceTable = link.advanceInvoiceTable(invoiceCompany, refRecId);

                // This validation is done when posting the advance invoice, so don't check unposted
                if (advanceTable.Posted)
                {
                    dateSet.add(advanceTable.InvoiceDate);
                    existsPosted = true;
                }
            }
        }

        // If there are only unposted advance invoices, they will be validated during posting
        if (!existsPosted)
        {
            return true;
        }

        ret = dateSet.elements() <= 1;

        if (! ret)
        {
            if (advInvDate == ErrorTolerance::Error)
                throw error("@GLS114095");

            ret = (Box::yesNo("@GLS114094", DialogButton::No) == DialogButton::Yes);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGrossAmount</Name>
				<Source><![CDATA[
    public boolean checkGrossAmount()
    {
        boolean         ret = true;
        MapEnumerator   enuInvoice, enuPayment;

        AmountMST       invoiceAmountMST, paymentAmountMST;
        AmountCur       invoiceAmountCur, paymentAmountCur;

        boolean         include;
        boolean         existsPosted;
        CompanyId       invoiceCompany;
        RefRecId        refRecId;

        CompanyId       paymentCompany;
        Voucher         voucher;
        TransDate       transDate;

        CzCustAdvanceInvoiceTable   advanceTable;
        CustTrans                   custTrans;

        ErrorTolerance              grossAmount;

        Set                         currencySet;

        grossAmount = CustParameters::find().AdvInvAmount_W;
        if (grossAmount == ErrorTolerance::Accept)
            return true;

        currencySet = new Set(Types::String);

        enuInvoice = invoicesMap.getEnumerator();
        while (enuInvoice.moveNext())
        {
            [ include ] = enuInvoice.currentValue();
            if (include)
            {
                [ invoiceCompany, refRecId ] = enuInvoice.currentKey();
                advanceTable = link.advanceInvoiceTable(invoiceCompany, refRecId);

                invoiceAmountCur += advanceTable.InvoiceAmount;
                invoiceAmountMST += advanceTable.amountMST(advanceTable.InvoiceAmount);
                currencySet.add(advanceTable.CurrencyCode);

                if (advanceTable.Posted)
                {
                    existsPosted = true;
                }
            }
        }

        // If there are only unposted advance invoices, they will be validated during posting
        if (!existsPosted)
        {
            return true;
        }

        enuPayment = paymentsMap.getEnumerator();
        while (enuPayment.moveNext())
        {
            if (enuPayment.currentValue())
            {
                [ paymentCompany, voucher, transDate ] = enuPayment.currentKey();

                custTrans = CustTrans::findVoucherDate(voucher, transDate);

                paymentAmountCur += custTrans.remainAmountCur();
                paymentAmountMST += custTrans.remainAmountMST();
                currencySet.add(custTrans.CurrencyCode);
            }
        }

        if ((currencySet.elements() == 1 && invoiceAmountCur != -paymentAmountCur) ||
            (currencySet.elements() >  1 && invoiceAmountMST != -paymentAmountMST))
        {
            if (grossAmount == ErrorTolerance::Error)
                throw error("@GLS114093");

            ret = (Box::yesNo("@GLS114092", DialogButton::No) == DialogButton::Yes);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentDate</Name>
				<Source><![CDATA[
    public boolean checkPaymentDate()
    {
        boolean         ret = true;
        MapEnumerator   enuPayment;
        CompanyId       company;
        Voucher         voucher;
        TransDate       transDate;
        ErrorTolerance  prepaymentDate;

        Set             dateSet;

        prepaymentDate = CustParameters::find().PrepaymentDate_W;
        if (prepaymentDate == ErrorTolerance::Accept)
            return true;

        dateSet = new Set(Types::Date);

        enuPayment = paymentsMap.getEnumerator();
        while (enuPayment.moveNext() && dateSet.elements() <= 1)
        {
            if (enuPayment.currentValue())
            {
                [ company, voucher, transDate ] = enuPayment.currentKey();

                dateSet.add(transDate);
            }
        }

        ret = dateSet.elements() <= 1;

        if (! ret)
        {
            if (prepaymentDate == ErrorTolerance::Error)
                throw error("@GLS114091");

            ret = (Box::yesNo("@GLS114090", DialogButton::No) == DialogButton::Yes);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAdvance</Name>
				<Source><![CDATA[
    public boolean includeAdvance(CzAdvanceInvoiceTable _advanceTable, boolean _include = false)
    {
        boolean ret = false;

        if (prmisdefault(_include))
        {
            if (invoicesMap.exists([_advanceTable.company(), _advanceTable.RecId]))
            {
                [ ret ] = invoicesMap.lookup([_advanceTable.company(), _advanceTable.RecId]);
            }
        }
        else
        {
            invoicesMap.insert([_advanceTable.company(), _advanceTable.RecId], [ _include, _advanceTable.Status ]);
            ret = _include;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includePayment</Name>
				<Source><![CDATA[
    public boolean includePayment(CompanyId _company,
                                  Voucher   _voucher,
                                  TransDate _transDate,
                                  boolean   _include = false)
    {
        boolean ret = false;

        if (prmisdefault(_include))
        {
            if (paymentsMap.exists([ _company, _voucher, _transDate ]))
            {
                ret = paymentsMap.lookup([ _company, _voucher, _transDate ]);
            }
        }
        else
        {
            paymentsMap.insert([ _company, _voucher, _transDate ], _include);
            ret = _include;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // [ Company, Voucher, TransDate ] --> Include/Exclude
        paymentsMap = new Map(Types::Container, Types::Enum);

        // [ Company, RecId ] --> [ Include/Exclude, new status ]
        invoicesMap = new Map(Types::Container, Types::Container);

        this.parmUpdateInvoiceStatus(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLink</Name>
				<Source><![CDATA[
    protected CzCustVendAdvanceInvoiceLink parmLink(CzCustVendAdvanceInvoiceLink _link = link)
    {
        ;
        link = _link;
        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateInvoiceStatus</Name>
				<Source><![CDATA[
    public NoYes parmUpdateInvoiceStatus(NoYes _updateInvoiceStatus = updateInvoiceStatus)
    {
        updateInvoiceStatus = _updateInvoiceStatus;

        return updateInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultStatus</Name>
				<Source><![CDATA[
    public void setDefaultStatus(CzAdvanceInvoiceTable _invoiceTable = null)
    {
        MapIterator paymentsIt, invoicesIt;

        Counter                paymentCnt;

        RefRecId               refRecId;
        boolean                include;
        CzAdvanceInvoiceStatus status;

        CzAdvanceInvoiceTable  advanceTable;

        CompanyId              invoiceCompany;
        CompanyId              paymentCompany;

        Voucher                paymentVoucher;
        TransDate              paymentDate;

        if (! updateInvoiceStatus)
            return;

        paymentsIt = new MapIterator(paymentsMap);

        if (_invoiceTable)
        {
            if (invoicesMap.exists([_invoiceTable.company(), _invoiceTable.RecId]))
            {
                [ include, status ] = invoicesMap.lookup([_invoiceTable.company(), _invoiceTable.RecId]);
            }
            else
            {
                include = true;
                status  = _invoiceTable.Status;
            }

            // always one payment
            [ paymentCompany, paymentVoucher, paymentDate ] = paymentsIt.key();

            this.calcDefaultStatus(_invoiceTable,
                                   include,
                                   status,
                                   1,
                                   paymentCompany,
                                   paymentVoucher,
                                   paymentDate);
        }
        else
        {
            while (paymentsIt.more())
            {
                if (paymentsIt.value())
                {
                    paymentCnt ++;
                }

                paymentsIt.next();
            }

            invoicesIt = new MapIterator(invoicesMap);
            while (invoicesIt.more())
            {
                [ invoiceCompany, refRecId ] = invoicesIt.key();
                [ include, status ]          = invoicesIt.value();

                advanceTable = link.advanceInvoiceTable(invoiceCompany, refRecId);

                this.calcDefaultStatus(advanceTable,
                                       include,
                                       status,
                                       paymentCnt,
                                       curext(),
                                       "",
                                       dateNull());

                invoicesIt.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    public CzAdvanceInvoiceStatus status(CzAdvanceInvoiceTable  _advanceTable,
                                         CzAdvanceInvoiceStatus _newStatus = _advanceTable.Status)
    {
        boolean                include;
        CzAdvanceInvoiceStatus ret = _advanceTable.Status;

        if (updateInvoiceStatus)
        {
            if (invoicesMap.exists([_advanceTable.company(), _advanceTable.RecId]))
            {
                [ include, ret ] = invoicesMap.lookup([_advanceTable.company(), _advanceTable.RecId]);
            }

            if (! prmisdefault(_newStatus))
            {
                invoicesMap.insert([_advanceTable.company(), _advanceTable.RecId], [ include, _newStatus ]);
                ret = _newStatus;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceStatus</Name>
				<Source><![CDATA[
    private void updateInvoiceStatus(CzAdvanceInvoiceStatus _status)
    {
        CzAdvanceInvoiceTable invoiceTable;

        if (! updateInvoiceStatus)
            return;

        invoiceTable = link.advanceInvoiceTable();

        if (invoiceTable.Status != _status)
        {
            changecompany(invoiceTable.company())
            {
                invoiceTable.Status = _status;
                invoiceTable.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLink</Name>
				<Source><![CDATA[
    public void updateLink()
    {
        MapIterator paymentsIt = new MapIterator(paymentsMap),
                    invoicesIt = new MapIterator(invoicesMap);

        Voucher     voucher;
        TransDate   transDate;
        RefRecId    refRecId;

        CompanyId   invoiceCompany;
        CompanyId   paymentCompany;

        boolean                include;
        CzAdvanceInvoiceStatus status;

        ttsbegin;

        while (paymentsIt.more())
        {
            invoicesIt.begin();
            while (invoicesIt.more())
            {
                [ invoiceCompany, refRecId]             = invoicesIt.key();
                [ paymentCompany, voucher, transDate ]  = paymentsIt.key();

                select firstonly forupdate crosscompany link
                    where link.InvoiceCompany      == invoiceCompany
                       && link.AdvanceInvoiceRecId == refRecId
                       && link.PaymentCompany      == paymentCompany
                       && link.Voucher             == voucher
                       && link.TransDate           == transDate;

                [ include, status ] = invoicesIt.value();
                if (include && paymentsIt.value())
                {
                    if (! link.RecId)
                    {
                        link.InvoiceCompany      = invoiceCompany;
                        link.AdvanceInvoiceRecId = refRecId;
                        link.PaymentCompany      = paymentCompany;
                        link.Voucher             = voucher;
                        link.TransDate           = transDate;

                        link.insert();
                    }

                    this.updateInvoiceStatus(status);
                }
                else
                {
                    if (link.RecId)
                    {
                        this.updateInvoiceStatus(status);

                        link.delete();
                    }
                }

                invoicesIt.next();
            }

            paymentsIt.next();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLinksVoucherDate</Name>
				<Source><![CDATA[
    public static void clearLinksVoucherDate(CustVendTrans _custVendTrans)
    {
        CzCustVendAdvanceInvoiceLink link;

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                link = new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord();
                break;

            case tablenum(VendTrans) :
                link = new DictTable(tablenum(CzVendAdvanceInvoiceLink)).makeRecord();
                break;
        }

        ttsbegin;

        select firstonly crosscompany RecId from link
            where link.PaymentCompany   == _custVendTrans.company()
               && link.Voucher          == _custVendTrans.Voucher
               && link.TransDate        == _custVendTrans.TransDate;

        if (link.RecId)
        {
            changecompany(link.company())
            {
                delete_from link
                    where link.PaymentCompany   == _custVendTrans.company()
                       && link.Voucher          == _custVendTrans.Voucher
                       && link.TransDate        == _custVendTrans.TransDate;
            }
            info(strfmt("@GLS111751", _custVendTrans.Voucher, _custVendTrans.TransDate));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    #define.AlreadyLinked(928)
    public static Imagelist imageList()
    {
        Imagelist list = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        ;
        list.add(new Image(#AlreadyLinked));

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLinksVoucherDate</Name>
				<Source><![CDATA[
    public static void moveLinksVoucherDate(CustVendTrans _oldTrans,
                                                   CustVendTrans _newTrans)
    {
        CzCustVendAdvanceInvoiceLink link;

        if (_oldTrans.company() == _newTrans.company() &&
            _oldTrans.Voucher   == _newTrans.Voucher   &&
            _oldTrans.TransDate == _newTrans.TransDate)
        {
            return;
        }

        switch (_oldTrans.TableId)
        {
            case tablenum(CustTrans) :
                link = new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord();
                break;

            case tablenum(VendTrans) :
                link = new DictTable(tablenum(CzVendAdvanceInvoiceLink)).makeRecord();
                break;
        }

        ttsbegin;

        while select forupdate crosscompany link
            where link.PaymentCompany   == _oldTrans.company()
               && link.Voucher          == _oldTrans.Voucher
               && link.TransDate        == _oldTrans.TransDate
        {
            link.PaymentCompany = _newTrans.company();
            link.Voucher        = _newTrans.Voucher;
            link.TransDate      = _newTrans.TransDate;
            link.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAdvance</Name>
				<Source><![CDATA[
    public static CzAdvanceInvoiceLink newFromAdvance(CzAdvanceInvoiceTable _advance)
    {
        CzAdvanceInvoiceLink link = new CzAdvanceInvoiceLink();

        CzCustVendAdvanceInvoiceLink custVendLink;

        switch (_advance.TableId)
        {
            case tablenum(CzCustAdvanceInvoiceTable) :
                custVendLink = new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord();
                break;
            case tablenum(CzVendAdvanceInvoiceTable) :
                custVendLink = new DictTable(tablenum(CzVendAdvanceInvoiceLink)).makeRecord();
                break;
            default                                  :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        link.parmLink(custVendLink);

        link.includeAdvance(_advance, true);

        while select crosscompany custVendLink
            where custVendLink.InvoiceCompany       == _advance.company()
               && custVendLink.AdvanceInvoiceRecId  == _advance.RecId
        {
            link.includePayment(custVendLink.PaymentCompany, custVendLink.Voucher, custVendLink.TransDate, true);
        }

        link.setDefaultStatus();

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceAndLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CzCustVendAdvanceInvoiceLink</c> and <c>CzAdvanceInvoiceTable</c> records.
    /// </summary>
    /// <param name = "_journalType">Type of journal.</param>
    /// <returns>Contract class <c>CustVendAdvanceContract_CZ</c> with packed <c>CzCustVendAdvanceInvoiceLink</c> and <c>CzAdvanceInvoiceTable</c> records.</returns>
    protected static CustVendAdvanceContract_CZ initializeInvoiceAndLink(LedgerJournalType _journalType)
    {
        CustVendAdvanceContract_CZ result = new CustVendAdvanceContract_CZ();

        switch (_journalType)
        {
            case LedgerJournalType::CustPayment:
                result.parmCustVendLink(new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord());
                result.parmCustVendInvoice(new DictTable(tablenum(CzCustAdvanceInvoiceTable)).makeRecord());
                break;
            case LedgerJournalType::Payment:
                result.parmCustVendLink(new DictTable(tablenum(CzVendAdvanceInvoiceLink)).makeRecord());
                result.parmCustVendInvoice(new DictTable(tablenum(CzVendAdvanceInvoiceTable)).makeRecord());
                break;
            default:
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromNonPosted</Name>
				<Source><![CDATA[
    public static CzAdvanceInvoiceLink newFromNonPosted(LedgerJournalTrans _journalTrans)
    {
        CzAdvanceInvoiceLink link = new CzAdvanceInvoiceLink();

        CzCustVendAdvanceInvoiceLink custVendLink;
        CzAdvanceInvoiceTable        custVendInvoice;
        CustVendAdvanceContract_CZ   custVendAdvanceContract;

        custVendAdvanceContract = CzAdvanceInvoiceLink::initializeInvoiceAndLinkFromLedgerJournalTrans(_journalTrans);
        custVendLink = custVendAdvanceContract.parmCustVendLink();
        custVendInvoice = custVendAdvanceContract.parmCustVendInvoice();

        // If the map buffers are not mapped to any particular tables then throw an error.
        // TableId remains the table Id of the Map in case the map buffer is not mapped to a table.
        if (custVendLink.TableId == tableNum(CzCustVendAdvanceInvoiceLink) 
            || custVendInvoice.TableId == tableNum(CzAdvanceInvoiceTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        link.parmLink(custVendLink);

        link.includePayment(_journalTrans.company(), _journalTrans.Voucher, _journalTrans.TransDate, true);

        while select crosscompany custVendLink
            where custVendLink.PaymentCompany   == _journalTrans.company()
               && custVendLink.Voucher          == _journalTrans.Voucher
               && custVendLink.TransDate        == _journalTrans.TransDate
        {
            custVendInvoice.clear();
            custVendInvoice.company(custVendLink.InvoiceCompany);

            select firstonly custVendInvoice
                where custVendInvoice.RecId  == custVendLink.AdvanceInvoiceRecId;

            if (custVendInvoice)
            {
                link.includeAdvance(custVendInvoice, true);
            }
        }

        link.setDefaultStatus();

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPosted</Name>
				<Source><![CDATA[
    public static CzAdvanceInvoiceLink newFromPosted(CustVendTrans _custVendTrans)
    {
        CzAdvanceInvoiceLink link = new CzAdvanceInvoiceLink();

        CzCustVendAdvanceInvoiceLink custVendLink;
        CzAdvanceInvoiceTable        custVendInvoice;

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                custVendLink    = new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord();
                custVendInvoice = new DictTable(tablenum(CzCustAdvanceInvoiceTable)).makeRecord();
                break;
            case tablenum(VendTrans) :
                custVendLink    = new DictTable(tablenum(CzVendAdvanceInvoiceLink)).makeRecord();
                custVendInvoice = new DictTable(tablenum(CzVendAdvanceInvoiceTable)).makeRecord();
                break;
            default                  :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        link.parmLink(custVendLink);

        link.includePayment(_custVendTrans.company(), _custVendTrans.Voucher, _custVendTrans.TransDate, true);

        while select crosscompany custVendLink
            where custVendLink.PaymentCompany   == _custVendTrans.company()
               && custVendLink.Voucher          == _custVendTrans.Voucher
               && custVendLink.TransDate        == _custVendTrans.TransDate
        {
            custVendInvoice.clear();
            custVendInvoice.company(custVendLink.InvoiceCompany);

            select firstonly custVendInvoice
                where custVendInvoice.RecId  == custVendLink.AdvanceInvoiceRecId;

            if (custVendInvoice)
            {
                link.includeAdvance(custVendInvoice, true);
            }
        }

        link.setDefaultStatus();

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPrepaymentHandling_Cust</Name>
				<Source><![CDATA[
    public static CzAdvanceInvoiceLink newFromPrepaymentHandling_Cust(LedgerJournalTrans _journalTrans)
    {
        CzAdvanceInvoiceLink link = new CzAdvanceInvoiceLink();

        CzCustVendAdvanceInvoiceLink custVendLink    = new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord();
        CzAdvanceInvoiceTable        custVendInvoice = new DictTable(tablenum(CzCustAdvanceInvoiceTable)).makeRecord();

        link.parmLink(custVendLink);

        link.includePayment(_journalTrans.company(), _journalTrans.Voucher, _journalTrans.TransDate, true);

        while select crosscompany custVendLink
            where custVendLink.PaymentCompany   == _journalTrans.company()
               && custVendLink.Voucher          == _journalTrans.Voucher
               && custVendLink.TransDate        == _journalTrans.TransDate
        {
            custVendInvoice.clear();
            custVendInvoice.company(custVendLink.InvoiceCompany);

            select firstonly custVendInvoice
                where custVendInvoice.RecId  == custVendLink.AdvanceInvoiceRecId;

            if (custVendInvoice)
            {
                link.includeAdvance(custVendInvoice, true);
            }
        }

        link.setDefaultStatus();

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLink</Name>
				<Source><![CDATA[
    public static void setLink(CompanyId              _paymentCompany,
                                      Voucher                _voucher,
                                      TransDate              _transDate,
                                      CzAdvanceInvoiceTable  _advance,
                                      CzAdvanceInvoiceStatus _newStatus = _advance.Status)
    {
        CzCustVendAdvanceInvoiceLink link;
        CzAdvanceInvoiceTable        tmpAdvance;

        switch (_advance.TableId)
        {
            case tablenum(CzCustAdvanceInvoiceTable) :
                link = new DictTable(tablenum(CzCustAdvanceInvoiceLink)).makeRecord();
                break;

            case tablenum(CzVendAdvanceInvoiceTable) :
                link = new DictTable(tablenum(CzVendAdvanceInvoiceLink)).makeRecord();
                break;
        }

        ttsbegin;

        select firstonly crosscompany link
            where link.PaymentCompany      == _paymentCompany
               && link.Voucher             == _voucher
               && link.TransDate           == _transDate
               && link.InvoiceCompany      == _advance.company()
               && link.AdvanceInvoiceRecId == _advance.RecId;

        if (! link)
        {
            link.PaymentCompany      = _paymentCompany;
            link.Voucher             = _voucher;
            link.TransDate           = _transDate;
            link.InvoiceCompany      = _advance.company();
            link.AdvanceInvoiceRecId = _advance.RecId;
            link.insert();
        }

        if (_newStatus != _advance.Status)
        {
            tmpAdvance = _advance.data();

            changecompany(_advance.company())
            {
                select firstonly forupdate tmpAdvance
                    where tmpAdvance.RecId == _advance.RecId;

                tmpAdvance.Status = _newStatus;
                tmpAdvance.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceAndLinkFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CzCustVendAdvanceInvoiceLink</c> and <c>CzAdvanceInvoiceTable</c> records based on the ledger journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The buffer of the table <c>LedgerJournalTrans</c>.</param>
    /// <returns>Contract class <c>CustVendAdvanceContract_CZ</c> with packed <c>CzCustVendAdvanceInvoiceLink</c> and <c>CzAdvanceInvoiceTable</c> records.</returns>
    protected static CustVendAdvanceContract_CZ initializeInvoiceAndLinkFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CzAdvanceInvoiceLink::initializeInvoiceAndLink(_ledgerJournalTrans.ledgerJournalTable().JournalType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>