<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceSettlementBuild_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the logic of data preparation for displaying in <c>ImprovedCustVendSettlementInquiryFeature</c> related forms and reports.
/// </summary>
public class CustVendInvoiceSettlementBuild_IT
{
    public ModuleCustVend module;
    public CustVendAc custVendAccount;
    public Voucher invoiceVoucher;
    public InvoiceId invoiceId;
    public NoYes openTransOnly;
    public CustVendTempInvoiceList_IT custVendTempInvoiceList;
    public FromDate fromDate;
    public ToDate toDate;
    public SysDictTable transTable, settlementTable, masterDataTable, negInstrTransTable;
    public Map balancesMap;
    public SysDictTable invoiceJourTable;
    public SysDictTable projInvoiceJourTable;
    private const str NoBalance = '---';

    private const str closedFieldName = 'Closed';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCustVendTempInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the invoice list.
    /// </summary>
    /// <returns>
    /// The invoice list.
    /// </returns>
    public CustVendTempInvoiceList_IT buildCustVendTempInvoiceList()
    {
        Query query = new Query();
        Query queryProj = new Query(query);
        QueryBuildDataSource qbdsTransTable = query.addDataSource(transTable.id());
        QueryBuildDataSource qbdsTransTableProj = queryProj.addDataSource(transTable.id());

        if (custVendAccount)
        {
            qbdsTransTable.addRange(transTable.fieldName2Id('AccountNum')).value(custVendAccount);
            qbdsTransTable.addRange(transTable.fieldName2Id('TransType')).value(SysQuery::valueNot(enum2Str(LedgerTransType::Settlement)));
            qbdsTransTableProj.addRange(transTable.fieldName2Id('AccountNum')).value(custVendAccount);
            qbdsTransTableProj.addRange(transTable.fieldName2Id('TransType')).value(SysQuery::valueNot(enum2Str(LedgerTransType::Settlement)));
        }
        if (invoiceVoucher)
        {
            qbdsTransTable.addRange(transTable.fieldName2Id('Voucher')).value(invoiceVoucher);
            qbdsTransTableProj.addRange(transTable.fieldName2Id('Voucher')).value(invoiceVoucher);
        }
        
        if (fromDate || toDate)
        {
            qbdsTransTable.addRange(transTable.fieldName2Id('TransDate')).value(queryRange(fromDate, toDate));
            qbdsTransTableProj.addRange(transTable.fieldName2Id('TransDate')).value(queryRange(fromDate, toDate));
        }
            
        if (invoiceId)
        {
            qbdsTransTable.addRange(transTable.fieldName2Id('Invoice')).value(invoiceId);
            qbdsTransTableProj.addRange(transTable.fieldName2Id('Invoice')).value(invoiceId);
        }
        else
        {
            qbdsTransTable.addRange(transTable.fieldName2Id('Invoice')).value(SysQuery::valueNotEmptyString());
            qbdsTransTableProj.addRange(transTable.fieldName2Id('Invoice')).value(SysQuery::valueNotEmptyString());
        }

        QueryBuildDataSource qbdsInvoiceJour = qbdsTransTable.addDataSource(invoiceJourTable.id());
        qbdsInvoiceJour.relations(true);
    
        if (module == ModuleCustVend::Cust)
        {
            qbdsInvoiceJour.addLink(transTable.fieldName2Id('Voucher'), invoiceJourTable.fieldName2Id('LedgerVoucher'));
        }
        
        if (openTransOnly)
        {
            qbdsTransTable.addRange(transTable.fieldName2Id(closedFieldName)).value(SysQuery::valueEmptyString());
            qbdsTransTableProj.addRange(transTable.fieldName2Id(closedFieldName)).value(SysQuery::valueEmptyString());
        }

        delete_from custVendTempInvoiceList;
    
        QueryRun queryRun = new QueryRun(query);
        CustVendTrans custVendTrans;

        this.fillCustVendTempInvoiceList(queryRun, transTable);

        //Adding project invoices if any
        if (module == ModuleCustVend::Cust)
        {
            QueryBuildDataSource qbdsProjInvoiceJour = qbdsTransTableProj.addDataSource(tableNum(ProjInvoiceJour));
            qbdsProjInvoiceJour.relations(true);
            qbdsProjInvoiceJour.addLink(transTable.fieldName2Id('Voucher'), projInvoiceJourTable.fieldName2Id('LedgerVoucher'));
            queryRun = new QueryRun(queryProj);
            
            this.fillCustVendTempInvoiceList(queryRun, transTable);
        }

        return custVendTempInvoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustVendTempInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>CustVendTempInvoiceList_IT</c> table.
    /// </summary>
    /// <param name = "_queryRun">The <c>QueryRun</c> object.</param>
    /// <param name = "_transTable">The transactions table to refer to.</param>
    protected void fillCustVendTempInvoiceList(QueryRun _queryRun, SysDictTable _transTable)
    {
        while (_queryRun.next())
        {
            CustVendTrans custVendTrans = _queryRun.get(_transTable.id());
            custVendTempInvoiceList.clear();
            custVendTempInvoiceList.initFromCustvendTrans(custVendTrans);
            custVendTempInvoiceList.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustVendTmpInvoiceSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transactions that will be displayed.
    /// </summary>
    /// <param name="_custVendTempInvoice">
    /// The invoice list.
    /// </param>
    /// <returns>
    /// The transaction list.
    /// </returns>
    public CustVendTrans buildCustVendTmpInvoiceSettlement(CustVendTempInvoiceList_IT _custVendTempInvoice)
    {
        CustVendTrans custVendTrans = transTable.makeRecord();
        this.initBalancesMap();
        CustVendTrans custVendInvoiceSettlement;
        custVendInvoiceSettlement.setTmp();

        select firstonly custVendTrans
            where custVendTrans.RecId == _custVendTempInvoice.OriginalRecId;

        custVendInvoiceSettlement.clear();
        AmountMST currentBalance = custVendTrans.AmountMST;
        custVendInvoiceSettlement.data(custVendTrans);
        custVendInvoiceSettlement.insert();
        balancesMap.insert(custVendInvoiceSettlement.RecId, currentBalance);

        CustvendSettlement custVendSettlement = settlementTable.makeRecord();

        while select custVendSettlement
            order by transDate asc
            where custVendSettlement.OffsetRecId == _custVendTempInvoice.OriginalRecId
            join custVendTrans
                where custVendTrans.RecId == custVendSettlement.TransRecId
        {
            custVendInvoiceSettlement.clear();
            custVendTrans.AmountMST = custVendSettlement.SettleAmountMST;
            custVendTrans.AmountCur = custVendSettlement.SettleAmountCUR;

            if (custVendTrans.NegInstId)
            {
                CustVendNegInstTrans custVendNegInstTrans = negInstrTransTable.makeRecord();
                CustVendTrans custVendTransSearch = custVendTrans;

                while select CustVendNegInstTrans
                    order by TransDate, NegInstId, Status
                        where CustVendNegInstTrans.NegInstId == custVendTrans.NegInstId
                        join custVendTransSearch
                            where custVendTransSearch.NegInstId == CustVendNegInstTrans.NegInstId
                                && custVendTransSearch.NegInstStatus == CustVendNegInstTrans.Status
                {
                    custVendInvoiceSettlement.data(custVendTransSearch);
                    custVendInvoiceSettlement.insert();

                    if (custVendTransSearch.NegInstStatus == CustVendNegInstStatus::Drawn)
                    {
                        currentBalance += custVendSettlement.SettleAmountMST;
                        balancesMap.insert(custVendInvoiceSettlement.RecId, currentBalance);
                    }
                }
            }
            else
            {
                currentBalance += custVendSettlement.SettleAmountMST;
                custVendInvoiceSettlement.data(custVendTrans);
                custVendInvoiceSettlement.insert();
                balancesMap.insert(custVendInvoiceSettlement.RecId, currentBalance);
            }
        }
    
        return custVendInvoiceSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalancesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balances map.
    /// </summary>
    /// <returns>The <c>Map</c> object.</returns>
    public Map getBalancesMap()
    {
        return balancesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTempInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendTempInvoiceList_IT</c>.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTempInvoiceList_IT</c>.
    /// </returns>
    public CustVendTempInvoiceList_IT getCustVendTempInvoiceList()
    {
        select custVendTempInvoiceList;
        return custVendTempInvoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMasterDataTableTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>CustVendTable</c> master data.
    /// </summary>
    /// <param name = "_custVendTempInvoiceList">The <c>CustVendTempInvoiceList_IT</c> object to get account from.</param>
    /// <returns>
    /// The <c>CustTable</c> or the <c>VendTable</c> depending on the model.
    /// </returns>
    public CustVendTable getMasterDataTableTable(CustVendTempInvoiceList_IT _custVendTempInvoiceList = null)
    {
        CustVendTable masterData = masterDataTable.makeRecord();
        
        if (_custVendTempInvoiceList)
        {
            select firstonly masterData
                where masterData.AccountNum == _custVendTempInvoiceList.CustVendAC;
        }
    
        return masterData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new record of transtable assigned type.
    /// </summary>
    /// <returns>
    /// The new record of transtable assigned type.
    /// </returns>
    public Common getTransTable()
    {
        return transTable.makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalancesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the balances map.
    /// </summary>
    public void initBalancesMap()
    {
        balancesMap = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the balances map.
    /// </summary>
    public void new()
    {
        this.initBalancesMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendAccount</Name>
				<Source><![CDATA[
    public CustVendAc parmCustVendAccount(CustVendAc _custVendAccount = custVendAccount)
    {
        custVendAccount = _custVendAccount;
    
        return custVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    public SysDictTable parmCustVendTrans(SysDictTable _transTable = transTable)
    {
        transTable = _transTable;
    
        return transTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
    
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpenTransOnly</Name>
				<Source><![CDATA[
    public NoYes parmOpenTransOnly(NoYes _openTransOnly = openTransOnly)
    {
        openTransOnly = _openTransOnly;
    
        return openTransOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmInvoiceId(InvoiceId _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;
    
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceVoucher</Name>
				<Source><![CDATA[
    public Voucher parmInvoiceVoucher(Voucher _invoiceVoucher = invoiceVoucher)
    {
        invoiceVoucher = _invoiceVoucher;
    
        return invoiceVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    public ModuleCustVend parmModule(ModuleCustVend _module = module)
    {
        module = _module;
    
        if (!prmisdefault(_module))
        {
            switch (_module)
            {
                case ModuleCustVend::Cust:
                    transTable = new SysDictTable(tablenum(CustTrans));
                    settlementTable = new SysDictTable(tableNum(CustSettlement));
                    masterDataTable = new SysDictTable(tableNum(CustTable));
                    negInstrTransTable = new SysDictTable(tablenum(CustBillOfExchangeTrans));
                    invoiceJourTable = new SysDictTable(tablenum(CustInvoiceJour));
                    projInvoiceJourTable = new SysDictTable(tablenum(ProjInvoiceJour));
                    break;
                case ModuleCustVend::Vend:
                    transTable = new SysDictTable(tablenum(VendTrans));
                    settlementTable = new SysDictTable(tableNum(VendSettlement));
                    masterDataTable = new SysDictTable(tablenum(VendTable));
                    negInstrTransTable = new SysDictTable(tablenum(VendPromissoryNoteTrans));
                    invoiceJourTable = new SysDictTable(tablenum(VendInvoiceJour));
            }
        }

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNegInstrTransTable</Name>
				<Source><![CDATA[
    public SysDictTable parmNegInstrTransTable(SysDictTable _negInstrTransTable = negInstrTransTable)
    {
        negInstrTransTable = _negInstrTransTable;
    
        return negInstrTransTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementTable</Name>
				<Source><![CDATA[
    public SysDictTable parmSettlementTable(SysDictTable _settlementTable = settlementTable)
    {
        settlementTable = _settlementTable;
    
        return settlementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noBalanceStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string that represetns no balance.
    /// </summary>
    /// <returns>
    /// The no balance string.
    /// </returns>
    public static BalanceStr_IT noBalanceStr()
    {
        return NoBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>