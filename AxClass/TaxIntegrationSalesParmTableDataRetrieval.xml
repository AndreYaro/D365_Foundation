<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSalesParmTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationSalesParmTableDataRetrieval</c> class retrieves data from <c>SalesParmTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(SalesParmTable))]
public class TaxIntegrationSalesParmTableDataRetrieval
    extends TaxIntegrationSalesTableDataRetrieval
{
    protected SalesParmTable salesParmTable;
    protected SalesParmLine salesParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordFlight::instance().isEnabled() && document.getLocalRecord())
        {
            this.salesParmTable = document.getLocalRecord();
            return SysDaQueryObjectBuilder::from(this.salesTable)
                .where(this.salesTable, fieldStr(SalesTable, SalesId))
                    .isEqualToLiteral(this.salesParmTable.SalesId)
                .outerJoin(this.custTable) // alternate key
                    .where(this.custTable, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesTable, fieldStr(SalesTable, CustAccount))
                .outerJoin(this.custTableInvoice) // alternate key
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualToLiteral(this.salesParmTable.InvoiceAccount)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.salesParmTable)
                .where(this.salesParmTable, fieldStr(SalesParmTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.salesTable) // alternate key
                    .where(this.salesTable, fieldStr(SalesTable, SalesId))
                        .isEqualTo(this.salesParmTable, fieldStr(SalesParmTable, SalesId))
                .outerJoin(this.custTable) // alternate key
                    .where(this.custTable, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesTable, fieldStr(SalesTable, CustAccount))
                .outerJoin(this.custTableInvoice) // alternate key
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesParmTable, fieldStr(SalesParmTable, InvoiceAccount))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObjectBuilder queryObjectBuilder;

        queryObjectBuilder = SysDaQueryObjectBuilder::from(this.salesParmLine)
            .where(this.salesParmLine, fieldStr(SalesParmLine, ParmId))
                .isEqualToLiteral(this.salesParmTable.ParmId)
            .where(this.salesParmLine, fieldStr(SalesParmLine, TableRefId))
                .isEqualToLiteral(this.salesParmTable.TableRefId)
            .innerJoin(this.salesLine) // primary key
                .where(this.salesLine, fieldStr(SalesLine, RecId))
                    .isEqualTo(this.salesParmLine, fieldStr(SalesParmLine, SalesLineRecId))
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, InventDimId))
            .outerJoin(this.mcrSalesLineDropShipment) // alternate key
                .where(this.mcrSalesLineDropShipment, fieldStr(MCRSalesLineDropShipment, SalesLine))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, RecId));

        if (TaxIntegrationHeaderPercentChargeFlight::instance().isEnabled())
        {
            // This.SalesTable will change according to SalesLine.
            queryObjectBuilder.innerJoin(this.salesTable)
                .where(this.salesTable, fieldStr(salesTable, SalesId))
                    .isEqualTo(this.salesLine, fieldStr(salesLine, SalesId));
        }

        if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled())
        {
            queryObjectBuilder.outerJoin(this.originalCustInvoiceTrans)
                .where(this.originalCustInvoiceTrans, fieldStr(CustInvoiceTrans, RecId))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, RefReturnInvoiceTrans_W));
        }

         return queryObjectBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        SalesParmSubTable salesParmSubTable;
        SalesTable salesTableLoc;

        // Multiple sales orders can be selected and posted in one invoice at Accounts receivable > Invoices > Batch invoicing > invoice.
        // It will group multiple sales orders in one parm table, then all sales orders are sent in one document and share the same header.
        // There is an issue when different sales orders get different header configurations. This is the same design as core tax.
        // To find MarkupTrans of all SalesTables, follow the same design with SalesCalcTax_parmTrans.nextMarkupLine().
        // Find SalesParmSubTable by SalesParmTable, find SalesTable by SalesParmSubTable and finally find MarkupTrans by SalesTable.
        SysDaQueryObjectBuilder queryObjectBuilder;

        if (TaxIntegrationHeaderPercentChargeFlight::instance().isEnabled())
        {
            // Using this.SalesTable in this query, this.SalesTable will change according to MarkupTrans.
            queryObjectBuilder = SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
                .innerJoin(salesTable)
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                        .isEqualTo(salesTable, fieldStr(SalesTable, TableId))
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                        .isEqualTo(salesTable, fieldStr(SalesTable, RecId));

            queryObjectBuilder.existsJoin(salesParmSubTable)
                .where(salesTable, fieldStr(SalesTable, SalesId))
                    .isEqualTo(salesParmSubTable, fieldStr(SalesParmSubTable, OrigSalesId))
                .where(salesParmSubTable, fieldStr(SalesParmSubTable, TableRefId))
                    .isEqualToLiteral(this.salesParmTable.TableRefId)
                .where(salesParmSubTable, fieldStr(SalesParmSubTable, ParmId))
                    .isEqualToLiteral(this.salesParmTable.ParmId);

            return queryObjectBuilder.toSysDaQueryObject();
        }
        else
        {
            queryObjectBuilder = SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
                .innerJoin(salesTableloc)
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                        .isEqualTo(salesTableLoc, fieldStr(SalesTable, TableId))
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                        .isEqualTo(salesTableLoc, fieldStr(SalesTable, RecId));

            queryObjectBuilder.existsJoin(salesParmSubTable)
                .where(salesTableLoc, fieldStr(SalesTable, SalesId))
                    .isEqualTo(salesParmSubTable, fieldStr(SalesParmSubTable, OrigSalesId))
                .where(salesParmSubTable, fieldStr(SalesParmSubTable, TableRefId))
                    .isEqualToLiteral(this.salesParmTable.TableRefId)
                .where(salesParmSubTable, fieldStr(SalesParmSubTable, ParmId))
                    .isEqualToLiteral(this.salesParmTable.ParmId);

            return queryObjectBuilder.toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
        this.copyFromLegacyTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesParmTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setDocumentDate(this.salesParmTable.DocumentDate);

            switch(document.getDocumentStatus())
            {
                case DocumentStatus::Invoice:
                    document.setVATRegisterDate(this.salesParmTable.VatDueDate_W);
                    document.setInvoiceDate(this.salesParmTable.Transdate);
                    break;
                case DocumentStatus::PickingList:
                    document.setPickingListDate(this.salesParmTable.Transdate);
                    break;
                case DocumentStatus::PackingSlip:
                    document.setPackingSlipDate(this.salesParmTable.Transdate);
                    break;
                case DocumentStatus::Confirmation:
                    document.setDateOfConfirmation(this.salesParmTable.Transdate);
                    break;
                default:
                    break;
            }
        }
        else
        {
            document.setVATRegisterDate(this.salesParmTable.VatDueDate_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromLegacyTax</Name>
				<Source><![CDATA[
    private void copyFromLegacyTax()
    {
        if (EnableReportingCurrencyExchRateInSOInvoice_WFlight::instance().isEnabled()
            && SalesParameters::find().DateOfExchRate_W != DateOfExchRate_W::PostingDate)
        {
            document.setAccountingCurrencyFixedExchangeRate(document.getLegacyTax().parmExchRate());
            document.setReportingCurrencyFixedExchangeRate(document.getLegacyTax().parmReportingCurrencyExchRate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        // no super();

        _line.setQuantity(this.salesParmLine.DeliverNow);
        _line.setLineAmount(this.salesParmLine.LineAmount);
        _line.setTransactionAmount(_line.getLineAmount());
        _line.setCostAmount(this.salesParmLine.DeliverNow * this.getCostPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price.
    /// </summary>
    /// <returns>The cost price.</returns>
    [Replaceable]
    protected CostPrice getCostPrice()
    {
        return this.salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTransactionAmountForDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document transaction amount that the charge belongs to.
    /// </summary>
    /// <returns>The document transaction amount.</returns>
    [SysObsolete("The method has been deprecated use getDocumentLineAmountForDocumentCharge instead", false, 28\2\2024)]
    protected LineAmount getDocumentTransactionAmountForDocumentCharge()
    {
        // When multiple sales orders are processed together,
        // the transaction amount is saved per order in context.
        return document.getContext().getDocumentTransactionAmount(
            this.markupTransOfDocument.TransTableId,
            this.markupTransOfDocument.TransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTotalLineAmountForDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line amount that the charge belongs to.
    /// </summary>
    /// <returns>The document line amount.</returns>
    protected LineAmount getDocumentTotalLineAmountForDocumentCharge()
    {
        // When multiple sales orders are processed together,
        // the transaction amount is saved per order in context
        return document.getContext().getDocumentTotalLineAmount(
            this.markupTransOfDocument.TransTableId,
            this.markupTransOfDocument.TransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToDocumentTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the line amount to line amount cache.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <remarks>
    /// It is only used for header charge now for performance consideration.
    /// </remarks>
    internal void addToDocumentTotalLineAmount(TaxIntegrationLineObject _line)
    {
        if (TaxIntegrationChargeTotalDiscountFlight::instance().isEnabled())
        {
            document.getContext().addDocumentTotalLineAmount(
                salesTable.TableId,
                salesTable.RecId,
                _line.getLineAmount());
        }
        else
        {
            document.getContext().addDocumentTransactionAmount(
                salesTable.TableId,
                salesTable.RecId,
                _line.getTransactionAmount());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>