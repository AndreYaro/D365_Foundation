<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDimensionCombinationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlDimensionCombinationType</c> class determines the state applied to the budget control dimension combination type.
/// </summary>
[ExportMetadataAttribute(enumstr(LedgerDimensionType), LedgerDimensionType::BudgetControl),
 ExportAttribute(identifierstr(Dynamics.AX.Application.DimensionCombinationType))]
public class BudgetControlDimensionCombinationType extends DimensionCombinationType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSingleHierarchy</Name>
				<Source><![CDATA[
    public boolean isSingleHierarchy()
    {
        // Budget control combinations do not support rule hierarchy types.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributeListRestricted</Name>
				<Source><![CDATA[
    public boolean isAttributeListRestricted()
    {
        // Budget control combinations restrict the list of dimension attributes to those that are enabled for budget control.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributeAllowed</Name>
				<Source><![CDATA[
    public boolean isAttributeAllowed(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        boolean isAttributeAllowed = super(_dimensionAttributeRecId);

        if (isAttributeAllowed)
        {
            // Get the list of enabled budget control dimension for the current configuration.
            BudgetControlConfiguration activeControlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current());
            List budgetControlDimensionsList = BudgetControlDimensionAttribute::getDimensionAttributes(activeControlConfiguration.RecId);

            isAttributeAllowed = BudgetControlDimensionAttribute::isDimensionAttributeInList(_dimensionAttributeRecId, budgetControlDimensionsList);
        }

        return isAttributeAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComboDisplayValue</Name>
				<Source><![CDATA[
    public DimensionDisplayValue getComboDisplayValue(DimensionStorage _dimensionStorage, Map _segments, int _totalSegmentCount, str _accountDelimiter)
    {
        DimensionDisplayValue displayValue;
        boolean isFirstValueDisplayed = true;

        int hierarchyCount = _dimensionStorage.hierarchyCount();

        if (Debug::debugMode())
        {
            Debug::assert(hierarchyCount > 0);
            Debug::assert(_totalSegmentCount > 0);
        }

        if (_accountDelimiter == '')
        {
            _accountDelimiter = DimensionParameters::getDimensionSegmentDelimiter();
            Debug::assert(_accountDelimiter != '');
        }

        int i = 1;

        DimensionHierarchyLevel dimHierarchyLevel;

        Set dimAttributes = new Set(Types::Int64);

        i = 1;

        while select DimensionAttribute from dimHierarchyLevel
            order by dimHierarchyLevel.Level
            where dimHierarchyLevel.DimensionHierarchy == _dimensionStorage.getHierarchyId(1)
        {
            if (this.isAttributeAllowed(dimHierarchyLevel.DimensionAttribute))
            {
                displayValue += DimensionStorage::addSegmentToDisplayValue(displayValue, _segments, i, _accountDelimiter, isFirstValueDisplayed);
                isFirstValueDisplayed = false;
            }

            i++;
        }

        return displayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComboDisplayValueInitialSegmentIndex</Name>
				<Source><![CDATA[
    public int getComboDisplayValueInitialSegmentIndex(DimensionHierarchyId _dimensionHierarchyId)
    {
        int initialSegmentIndex;

        DimensionHierarchyLevelCollection levelCollection = DimensionHierarchyLevelCollection::newForHierarchy(_dimensionHierarchyId);
        levelCollection.initializeEnumerator();

        while (levelCollection.moveNext())
        {
            if (this.isAttributeAllowed(levelCollection.currentDimensionAttributeId()))
            {
                initialSegmentIndex = levelCollection.currentLevel();
                break;
            }
        }

        return initialSegmentIndex;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>