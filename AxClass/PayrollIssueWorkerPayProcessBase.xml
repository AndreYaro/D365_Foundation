<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollIssueWorkerPayProcessBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollIssueWorkerPayProcessBase</c> class provides a dialog to submit worker payment for a pay statement or a set of pay statements.
/// </summary>
abstract class PayrollIssueWorkerPayProcessBase extends RunBaseBatch
{
    DialogRunbase           dialog;
    QueryRun                queryRun;
    QueryRun                queryRunPayStatement;
    Common                  callingRecord;
    TmpPayrollIssueWorkerPayDB  issueWorkerPayDB;

    container               payPeriodList;
    PayrollPayCycleRecId    payCycleRecId;
    PayrollPayPeriodRecId   payPeriodRecId;

    FormBuildComboBoxControl    payPeriodBuildComboBox;
    FormComboBoxControl         payPeriodComboBox;
    FormReferenceGroupControl           payCycleReferenceControl;
    FormBuildReferenceGroupControl      payCycleBuildReferenceControl;

    #DEFINE.PayPeriodListControl('PayPeriodListControl')
    #DEFINE.PayCycleControl('PayCycleControl')
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        callingRecord,
        payPeriodRecId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the last user selection on the query if the process is not called from a worker or position form.
    /// </summary>
    /// <returns>
    /// Return true if the process is called to process a group of records.
    /// </returns>
    public boolean allowSaveLast()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the list of period start and end dates and populates the combo box in dialog with these values for the process.
    /// </summary>
    public void createPeriodList()
    {
        PayrollPayPeriod    selectedPayPeriod;
        int                 i, selectionIndex = 1;

        payPeriodList = conNull();
        payPeriodComboBox.clear();

        while select PeriodStartDate, PeriodEndDate from selectedPayPeriod
            order by PeriodEndDate
            where selectedPayPeriod.PayCycle == payCycleRecId
            &&    selectedPayPeriod.PeriodStatus == PayrollPeriodStatus::Open
        {
            i++;
            payPeriodComboBox.add(date2StrUsr(selectedPayPeriod.PeriodStartDate, DateFlags::FormatAll) + ' - ' + date2StrUsr(selectedPayPeriod.PeriodEndDate, DateFlags::FormatAll));

            payPeriodList += selectedPayPeriod.RecId;
        }

        payPeriodComboBox.selection(selectionIndex - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the pay cycle and pay period controls in the dialog.
    /// </summary>
    /// <returns>
    /// The instance of a DialogRunbase class with the customized controls.
    /// </returns>
    public Object dialog()
    {
        dialog = super();

        dialog.caption("@Payroll:SelectThePayStatementCriteriaToCreateThePaymentJournal");

        payCycleBuildReferenceControl = dialog.curFormBuildGroup().addControl(FormControlType::ReferenceGroup, #PayCycleControl);
        payCycleBuildReferenceControl.extendedDataType(extendedTypeNum(PayrollPayCycleRecId));
        payCycleBuildReferenceControl.mandatory(NoYes::Yes);
        payCycleBuildReferenceControl.helpText("@Payroll:ThePayCycleOfThePayStatementsToCreateAJournalFor");

        payPeriodBuildComboBox = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, #PayPeriodListControl);
        payPeriodBuildComboBox.label("@Payroll:PayPeriod");
        payPeriodBuildComboBox.helpText("@Payroll:ThePayPeriodOfThePayStatementsToCreateAJournalFor");
        payPeriodBuildComboBox.comboType(1);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up the dialog controls for user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog with input controls for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        payPeriodComboBox = _dialog.dialogForm().formRun().control(payPeriodBuildComboBox.id());
        payCycleReferenceControl = _dialog.dialogForm().formRun().control(payCycleBuildReferenceControl.id());
        payCycleReferenceControl.registerOverrideMethod(methodStr(FormStringControl, modified),
                                                        methodStr(PayrollIssueWorkerPayProcessBase, payCycleControl_modified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the pay cycle and pay period from the dialog and modify the query according to the user selections.
    /// </summary>
    /// <returns>
    /// Return true if the operation succeeds.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        payCycleRecId   = payCycleReferenceControl.value();
        payPeriodRecId  = conPeek(payPeriodList, payPeriodComboBox.selection() + 1);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the QueryRun object using PayrollPayStatementProcessQuery Query.
    /// </summary>
    public void initQuery()
    {
        queryRun = new QueryRun(queryStr(PayrollPayStatementProcessQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingRecord</Name>
				<Source><![CDATA[
    public Common parmCallingRecord(Common _callingRecord = callingRecord)
    {
        callingRecord = _callingRecord;

        return callingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriodRecId</Name>
				<Source><![CDATA[
    public PayrollPayPeriodRecId parmPayPeriodRecId(PayrollPayPeriodRecId _payPeriodRecId = payPeriodRecId)
    {
        payPeriodRecId = _payPeriodRecId;

        return payPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayCycleRecId</Name>
				<Source><![CDATA[
    public PayrollPayCycleRecId parmPayCycleRecId(PayrollPayCycleRecId _payCycleRecId = payCycleRecId)
    {
        payCycleRecId = _payCycleRecId;

        return payCycleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleControl_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuild the list of period end dates whenever the pay cycle changes.
    /// </summary>
    /// <param name="_formControl">
    /// The instance of the control in the dialog with input modified.
    /// </param>
    /// <returns>
    /// Return true if the pay cycle is modified.
    /// </returns>
    protected boolean payCycleControl_modified(FormControl _formControl)
    {
        boolean ret;

        ret = payCycleReferenceControl.modified();
        if (ret)
        {
            payCycleRecId = payCycleReferenceControl.value();
            this.createPeriodList();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the pay cycle and paid by legal entity restriction to the <c>PayrollPositionDetail</c> table in the query.
    /// </summary>
    protected void setRangeFromDialog()
    {
        QueryBuildDataSource    qbdsPayStatement;

        if (payPeriodRecId != 0)
        {
            qbdsPayStatement = queryRunPayStatement.query().dataSourceTable(tableNum(PayrollPayStatement));

            qbdsPayStatement.addRange(fieldNum(PayrollPayStatement, PayPeriod)).value(queryValue(payPeriodRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;
        Common callingRecordLast;
        PayrollPayPeriodRecId   payPeriodRecIdLast;

        #LOCALMACRO.SaveLastList
            callingRecordLast,
            payPeriodRecIdLast
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, queryCon] = packedClass;
                }
                else
                {
                    [version, #CurrentList, queryCon] = packedClass;
                }

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate both the pay cycle and pay period controls in the dialog has value before the processing starts.
    /// </summary>
    /// <param name="calledFrom">
    /// The object called the validate method.
    /// </param>
    /// <returns>
    /// Return true if the required parameters of dialog are set.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean                     ret;

        ret = super(calledFrom);

        if (payCycleRecId == 0)
        {
            ret = ret && checkFailed("@Payroll:YouMustSelectAPayCycle");
        }

        if (payPeriodRecId == 0)
        {
            ret = ret && checkFailed("@Payroll:YouMustSelectAPayPeriod");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
