<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBBookingPeriodWizard_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBBookingPeriodWizard_BR</c> class create automatically the booking period and the associated tax assessments
/// </summary>
class FBBookingPeriodWizard_BR extends SysWizard
{
    FBBookingPeriodWizardTmp_BR     bookingPeriodWizardTmp;
    FBIPIAssessmentPeriodicity_BR   ipiAssessmentPeriodicity;
    FBBookingPeriod_BR              bookingPeriod;
    FBTaxAssessment_BR              taxAssessment;
    FiscalEstablishment_BR          fiscalEstablishment;

    boolean                         createTaxAssessmentICMS;
    boolean                         createTaxAssessmentICMSST;
    boolean                         createTaxAssessmentIPI;
    boolean                         createTaxAssessmentISS;

    PeriodDate                      periodFrom;
    PeriodDate                      periodTo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBookingPeriod</Name>
				<Source><![CDATA[
    private void createBookingPeriod()
    {
        ttsBegin;

        while select crossCompany fiscalEstablishment
            join bookingPeriodWizardTmp
            where fiscalEstablishment.FiscalEstablishmentId == bookingPeriodWizardTmp.FiscalEstablishmentId
                && fiscalEstablishment.dataAreaId == bookingPeriodWizardTmp.FiscalEstablishmentDataArea
        {
            changeCompany(fiscalEstablishment.dataAreaId)
            {
                bookingPeriod.clear();
                bookingPeriod.FiscalEstablishmentId = bookingPeriodWizardTmp.FiscalEstablishmentId;
                bookingPeriod.FiscalEstablishmentDataArea = bookingPeriodWizardTmp.FiscalEstablishmentDataArea;
                bookingPeriod.PeriodMonth = mthOfYr(bookingPeriodWizardTmp.PeriodDate);
                bookingPeriod.PeriodYear = year(bookingPeriodWizardTmp.PeriodDate);

                if (bookingPeriod.validateWrite())
                {
                    bookingPeriod.insert();
                }
                else
                {
                    throw error("@SYS4006946");
                }

                this.createTaxAssessment();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessment</Name>
				<Source><![CDATA[
    private void createTaxAssessment()
    {
        if (createTaxAssessmentICMS)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10001, funcName());
            this.createTaxAssessmentICMS();
        }

        if (createTaxAssessmentICMSST)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10003, funcName());
            this.createTaxAssessmentICMSST();
        }

        if (createTaxAssessmentIPI)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10004, funcName());
            this.createTaxAssessmentIPI();
        }

        if (createTaxAssessmentISS)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10005, funcName());
            this.createTaxAssessmentISS();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentICMS</Name>
				<Source><![CDATA[
    private void createTaxAssessmentICMS()
    {
        FBParametersPerState_BR parametersPerState;

        parametersPerState = FBParametersPerState_BR::find(fiscalEstablishment.postalAddress());

        taxAssessment = FBTaxAssessmentCreator_BR::createTaxAssessmentICMS(
                                                bookingPeriod,
                                                parametersPerState.ICMSGeneralAdjustmentCode,
                                                parametersPerState.ICMSGeneralAdjustmentCodeFixedAsset,
                                                parametersPerState.ICMSFiscalDocumentAdjustmentCode,
                                                parametersPerState.ICMSFiscalDocumentAdjCodeFixedAsset,
                                                parametersPerState.ICMSFBObservationCodeTable);

        if (!taxAssessment)
        {
            throw error("@SYS4006946");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentICMSST</Name>
				<Source><![CDATA[
    private void createTaxAssessmentICMSST()
    {
        FiscalEstablishmentIEPerState_BR    fiscalEstablishmentIEPerState;

        while select StateId
            from fiscalEstablishmentIEPerState
            where fiscalEstablishmentIEPerState.FiscalEstablishment_BR == fiscalEstablishment.RecId
        {
            taxAssessment = FBTaxAssessmentCreator_BR::createTaxAssessmentICMSST(bookingPeriod, fiscalEstablishmentIEPerState.StateId);

            if (!taxAssessment)
            {
                throw error("@SYS4006946");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentIPI</Name>
				<Source><![CDATA[
    private void createTaxAssessmentIPI()
    {
        taxAssessment = FBTaxAssessmentCreator_BR::createTaxAssessmentIPI(bookingPeriod, ipiAssessmentPeriodicity);

        if (!taxAssessment)
        {
            throw error("@SYS4006946");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentISS</Name>
				<Source><![CDATA[
    private void createTaxAssessmentISS()
    {
        taxAssessment = FBTaxAssessmentCreator_BR::createTaxAssessmentISS(bookingPeriod);

        if (!taxAssessment)
        {
            throw error("@SYS4006946");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finishes the execution of the wizard.
    /// </summary>
    protected void finish()
    {
        super();

        this.createBookingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the name of the form being used to show the wizard user interface.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FormName</c>.
    /// </returns>
    public FormName formName()
    {
        return formStr(FBBookingPeriodWizard_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Advances the wizard form to the next step.
    /// </summary>
    public void next()
    {
        const int PeriodRangeTab = 3;

        // Validate the period range in the third tab
        if (this.curTab() == PeriodRangeTab && !this.validatePeriodRange())
        {
            return;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateTaxAssessmentICMS</Name>
				<Source><![CDATA[
    public boolean parmCreateTaxAssessmentICMS(boolean _createTaxAssessmentICMS = createTaxAssessmentICMS)
    {
        createTaxAssessmentICMS = _createTaxAssessmentICMS;

        return createTaxAssessmentICMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateTaxAssessmentICMSST</Name>
				<Source><![CDATA[
    public boolean parmCreateTaxAssessmentICMSST(boolean _createTaxAssessmentICMSST = createTaxAssessmentICMSST)
    {
        createTaxAssessmentICMSST = _createTaxAssessmentICMSST;

        return createTaxAssessmentICMSST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateTaxAssessmentIPI</Name>
				<Source><![CDATA[
    public boolean parmCreateTaxAssessmentIPI(boolean _createTaxAssessmentIPI = createTaxAssessmentIPI)
    {
        createTaxAssessmentIPI = _createTaxAssessmentIPI;

        return createTaxAssessmentIPI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateTaxAssessmentISS</Name>
				<Source><![CDATA[
    public boolean parmCreateTaxAssessmentISS(boolean _createTaxAssessmentISS = createTaxAssessmentISS)
    {
        createTaxAssessmentISS = _createTaxAssessmentISS;

        return createTaxAssessmentISS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBBookingPeriodWizardTmp_BR</Name>
				<Source><![CDATA[
    public FBBookingPeriodWizardTmp_BR parmFBBookingPeriodWizardTmp_BR(FBBookingPeriodWizardTmp_BR _bookingPeriodWizardTmp = bookingPeriodWizardTmp)
    {
        bookingPeriodWizardTmp = _bookingPeriodWizardTmp;

        return bookingPeriodWizardTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIPIAssessmentPeriodicity</Name>
				<Source><![CDATA[
    public FBIPIAssessmentPeriodicity_BR parmIPIAssessmentPeriodicity(FBIPIAssessmentPeriodicity_BR _ipiAssessmentPeriodicity = ipiAssessmentPeriodicity)
    {
        ipiAssessmentPeriodicity = _ipiAssessmentPeriodicity;

        return ipiAssessmentPeriodicity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodFrom</Name>
				<Source><![CDATA[
    public PeriodDate parmPeriodFrom(PeriodDate _periodFrom = periodFrom)
    {
        periodFrom = _periodFrom;

        return periodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTo</Name>
				<Source><![CDATA[
    public PeriodDate parmPeriodTo(PeriodDate _periodTo = periodTo)
    {
        periodTo = _periodTo;

        return periodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the date range of the booking period generation
    /// </summary>
    /// <returns>
    /// true if the date range is valid; otherwise, false
    /// </returns>
    private boolean validatePeriodRange()
    {
        boolean ret = true;

        if (periodTo < periodFrom)
        {
            ret = checkFailed("@SYS4082150");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormControl                 formControl;
        FBBookingPeriodWizard_BR    wizard = new FBBookingPeriodWizard_BR();

        if (wizard.prompt())
        {
            wizard.run();

            if (_args)
            {
                formControl = _args.callerFormControl();

                if (formControl)
                {
                    formControl.formRun().dataSource().research();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>