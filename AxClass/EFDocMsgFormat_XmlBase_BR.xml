<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EFDocMsgFormat_XmlBase_BR
{
    #define.DefaultNamespace('http://www.portalfiscal.inf.br/nfe')

    public XmlDocument xmlDoc;
    boolean     convertAccentedChars;
    Map         accentedCharsMap;
    protected BusinessDocumentCreationMode creationMode;
    protected boolean isBR00053Enabled;

    #EFDocConstants_BR
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendChildIfNotEmpty</Name>
				<Source><![CDATA[
    protected void appendChildIfNotEmpty(XmlElement _parentElement, XmlNode _childNode)
    {
        str     innerXml;
        boolean isEmpty;
        ;

        if (!_childNode)
        {
            return;
        }

        innerXml        = _childNode.innerXml();

        isEmpty = innerXml == ''
            || innerXml == '0.00';

        if (!isEmpty)
        {
            _parentElement.appendChild(_childNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElement</Name>
				<Source><![CDATA[
    protected XmlElement createElement(str _elementName)
    {
        return xmlDoc.createElement2(_elementName, #DefaultNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElementWithValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the XML element.
    /// </summary>
    /// <param name="_elementName">
    /// The element name.
    /// </param>
    /// <param name="_value">
    /// The element value.
    /// </param>
    /// <returns>
    /// The <c>XmlElement</c> object.
    /// </returns>
    [Hookable]
    public XmlElement createElementWithValue(str _elementName, str _value)
    {
        XmlElement xmlElement;
        str        formattedValue;

        formattedValue = strRemoveCr(_value);
        formattedValue = strRem(formattedValue, '\r');
        formattedValue = strReplace(formattedValue, '\t', ' ');
        if (convertAccentedChars)
        {
            formattedValue = this.getCanonicalFormat(formattedValue);
        }

        xmlElement = xmlDoc.createElement2(_elementName, #DefaultNamespace);
        xmlElement.innerText(formattedValue);

        return xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNode</Name>
				<Source><![CDATA[
    protected boolean existsNode(str _xPath)
    {
        XmlNamespaceManager nsmgr;
        XmlNode selectedNode;

        nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace('x', #DefaultNamespace);

        selectedNode = xmlDoc.selectSingleNode(_xPath, nsmgr);

        return selectedNode != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a date time as the government expects to receive in a NFe XML request (AAAA-MM-DDThh:mm:ssTZD).
    /// </summary>
    /// <param name="_dateTimeToFormat">
    /// The date time to be formmated.
    /// </param>
    /// <returns>
    /// The formated string of the date time
    /// </returns>
    public str formatDateTime(UtcDateTime _dateTimeToFormat)
    {
        utcDateTime dateTimeInCompanyTimezone;
        int         timezoneOffsetSeconds;
        Timezone    companyTimezone;
        str         offset;

        companyTimezone = DateTimeUtil::getCompanyTimeZone();

        dateTimeInCompanyTimezone = DateTimeUtil::applyTimeZoneOffset(_dateTimeToFormat, companyTimezone);

        timezoneOffsetSeconds = DateTimeUtil::getTimeZoneOffset(dateTimeInCompanyTimezone, companyTimezone) * 60;

        offset = time2StrHMLeadingZero(real2int(abs(timezoneOffsetSeconds)));

        if (timezoneOffsetSeconds < 0)
        {
            offset = strFmt('-%1', offset);
        }
        else
        {
            offset = strFmt('+%1', offset);
        }

        return strfmt('%1%2', DateTimeUtil::toStr(dateTimeInCompanyTimezone), offset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatFillLeft</Name>
				<Source><![CDATA[
    protected str formatFillLeft(str _number, int _length)
    {
        return strRFix(this.formatKeepNumbersOnly(_number), _length, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatInt2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats an integer to string accordingly to the XMl layout.
    /// </summary>
    /// <param name="_number">
    /// The given integer number.
    /// </param>
    /// <returns>
    /// The formatted string.
    /// </returns>
    protected str formatInt2Str(int _number)
    {
        return int2str(_number);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatKeepNumbersOnly</Name>
				<Source><![CDATA[
    protected str formatKeepNumbersOnly(str _value)
    {
        return strkeep(_value, '0123456789');
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStr2Int</Name>
				<Source><![CDATA[
    protected str formatStr2Int(str _number)
    {
        return int2str(str2int(this.formatKeepNumbersOnly(_number)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmount</Name>
				<Source><![CDATA[
    protected str formatXmlAmount(real _number, int _decimals = 2)
    {
        return num2Str
        (
            abs(_number),
            1,
            _decimals,  // decimal digits
            1,          // Decimal separator (.)
            0           // No Thousands separator
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlDate</Name>
				<Source><![CDATA[
    protected str formatXmlDate(date _date, EFDocMsgDateFormat_BR _format = EFDocMsgDateFormat_BR::YYYY_MM_DD)
    {
        str strFormat;

        switch (_format)
        {
            case EFDocMsgDateFormat_BR::YYYY_MM_DD :
                strFormat = date2str(_date, 321, 2, 3, 2, 3, 4, DateFlags::None);
                break;

            case EFDocMsgDateFormat_BR::YYMM :
                strFormat = date2str(_date, 321, 0, 0, 2, 0, 2, DateFlags::None);
                break;

            default : throw error(Error::wrongUseOfFunction(funcname()));
        }

        return strFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlQty</Name>
				<Source><![CDATA[
    protected str formatXmlQty(real _number)
    {
        return num2Str
        (
            abs(_number),
            1,
            4,          // 4 decimal digits
            1,          // Decimal separator (.)
            0           // Thousands separator (nothing)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCanonicalFormat</Name>
				<Source><![CDATA[
    public str getCanonicalFormat(str _input)
    {
        int i, currCharNum;
        str newString = _input;

        if (!accentedCharsMap)
        {
            this.initAccentedCharsMap();
        }

        for (i = 1; i <= strlen(newString); i++)
        {
            currCharNum = char2num(newString, i);
            if (accentedCharsMap.exists(currCharNum))
            {
                newString = strpoke(newString, accentedCharsMap.lookup(currCharNum), i);
            }
        }

        return newString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the content of the node with the given path.
    /// </summary>
    /// <param name="_xPath">Path to the node to be read</param>
    /// <param name="_validate">Whether an exception should be thrown when the node is not found</param>
    /// <returns>The content of the node</returns>
    protected str getNodeContent(str _xPath, boolean _validate = true)
    {
        XmlNamespaceManager nsmgr;
        XmlNode selectedNode;
        str nodeContent;

        nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace('x', #DefaultNamespace);

        selectedNode = xmlDoc.selectSingleNode(_xPath, nsmgr);

        if (selectedNode)
        {
            nodeContent = selectedNode.innerText();
        }
        else if (_validate)
        {
            throw Error(strfmt("@GLS63687", _xPath));
        }
        else
        {
            error(strfmt("@GLS63687", _xPath));
        }

        return nodeContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTodayUserPreferredTimeZone</Name>
				<Source><![CDATA[
    public date getTodayUserPreferredTimeZone()
    {
        return DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccentedCharsMap</Name>
				<Source><![CDATA[
    private void initAccentedCharsMap()
    {
        #define.Map2a('ãáàäâ')
        #define.Map2e('éèêë')
        #define.Map2i('íìîï')
        #define.Map2o('õóòöô')
        #define.Map2u('úùüû')
        #define.Map2c('ç')

        void insertIntoMap(str chars, str mapTo)
        {
            int i;
            str upChars = strUpr(chars);
            str upMapTo = strUpr(mapTo);

            for (i = 1; i <= strlen(chars); i++)
            {
                accentedCharsMap.insert(char2num(chars, i),   mapTo);
                accentedCharsMap.insert(char2num(upChars, i), upMapTo);
            }
        }

        accentedCharsMap = new Map(Types::Integer, types::String);

        insertIntoMap(#Map2a, 'a');
        insertIntoMap(#Map2e, 'e');
        insertIntoMap(#Map2i, 'i');
        insertIntoMap(#Map2o, 'o');
        insertIntoMap(#Map2u, 'u');
        insertIntoMap(#Map2c, 'c');
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EFDocMsgFormat_XmlBase_BR</c>
    /// </summary>
    /// <param name="_convertAccentedCharacters">
    /// Indicates whether accented characters should be converted to non-accented in the XML.
    /// </param>
    /// <remarks>
    /// The option to convert accented characters exists because some authorities have trouble
    /// handling these characters. It makes convertions like á, ä, or ã to a, ç to c, etc.
    /// It hurts performance, thus is optional.
    /// </remarks>
    public void new(boolean _convertAccentedCharacters = false)
    {
        xmlDoc = new XmlDocument();
        convertAccentedChars = _convertAccentedCharacters;
        isBR00053Enabled = BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00053]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreationMode</Name>
				<Source><![CDATA[
    public BusinessDocumentCreationMode parmCreationMode(BusinessDocumentCreationMode _creationMode = creationMode)
    {
        creationMode = _creationMode;
        return creationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocument</Name>
				<Source><![CDATA[
    protected str signDocument(KeyVaultCertificateRef _keyVaultCertificateRef,
                               DigitalCertificateSubject _certificateSubject,
                               XmlElement _xmlDoc, 
                               str _elementToBeSignedName) 
    {
        EFDocSignXmlDocument_BR signXml = EFDocSignXmlDocument_BR::construct();

        return signXml.signDocument(_keyVaultCertificateRef, _certificateSubject, _xmlDoc, _elementToBeSignedName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryGetNodeContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to retrieve the content of the node with the given path.
    /// </summary>
    /// <param name="_xPath">Path to the node to be read</param>
    /// <returns>The content of the node</returns>
    protected str tryGetNodeContent(str _xPath)
    {
        XmlNamespaceManager nsmgr;
        XmlNode selectedNode;
        str nodeContent;

        nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace('x', #DefaultNamespace);

        selectedNode = xmlDoc.selectSingleNode(_xPath, nsmgr);

        if (selectedNode)
        {
            nodeContent = selectedNode.innerText();
        }

        return nodeContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUtcDateTimeFromDateStrWithTZD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an utcdatetime information from Date formatted with TZD (timezone difference) information
    /// </summary>
    /// <param name="_dateTimeWithTZD">
    /// DateTime formated with timezone difference information
    /// </param>
    /// <returns>
    /// Returns an utcDateTime
    /// </returns>
    /// <remakrs>
    /// Given a string datetime formatted with tzd like '2014-11-25T16:45:22+03:00' will return the following utcdatetime '2014-11-25T13:45:22'
    /// </remakrs>
    public utcDatetime getUtcDateTimeFromDateStrWithTZD(str _dateTimeWithTZD)
    {
        utcdatetime     dateTime;
        str             strDateTime;
        timeOfDay       timeZone;
        str             timeZoneSignal;

        strDateTime         = substr(_dateTimeWithTZD,1,19);
        timeZoneSignal      = substr(_dateTimeWithTZD,20,1);
        timeZone            = str2time(substr(_dateTimeWithTZD,21,6));

        if (timeZoneSignal == '-')
        {
            dateTime = DateTimeUtil::addSeconds(DateTimeUtil::parse(strDateTime),timeZone);
        }
        else
        {
            dateTime = DateTimeUtil::addSeconds(DateTimeUtil::parse(strDateTime),-timeZone);
        }

        return dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlFromService</Name>
				<Source><![CDATA[
    public str getXmlFromService(
        EFDocEmailVariableType_BR _efDocEmailVariableType,
        FiscalDocument_BR _fiscalDocument)
    {
        BusinessDocumentSubmission submission;

        switch (_efDocEmailVariableType)
        {
            case EFDocEmailVariableType_BR::Submit:
            case EFDocEmailVariableType_BR::SubmitReturnResponse:
                submission = BusinessDocumentSubmission::findByCommon(_fiscalDocument);
                break;

            case EFDocEmailVariableType_BR::Cancel:
            case EFDocEmailVariableType_BR::CancelResponse:
                select firstonly submission
                    order by Stage desc
                    where submission.RefRecId == _fiscalDocument.RecId
                        && submission.RefTableId == tableNum(FiscalDocument_BR);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!submission)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        NFeEmailVariable_BR nfeEmailVariable = NFeEmailVariable_BR::findByType(_efDocEmailVariableType);
        BusinessDocumentInfo documentInfo = BusinessDocumentServiceController::newSubmission(submission).lookupDocumentInfo();

        return documentInfo 
            ? BusinessDocumentSubmissionFunctions::getOutgoingVariableValueByDocInfo(documentInfo, nfeEmailVariable.Name)
            : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>