<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRequestLineDocumentLifecycle</Name>
	<SourceCode>
		<Declaration><![CDATA[
//-----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
/// <summary>
/// ResRequestLine data entity state machine.
/// </summary>
[SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
public final class ResRequestLineDocumentLifecycle extends StateMachine
{
	#define.GraphSize(5)
	boolean graph[#GraphSize * #GraphSize];
	str transitionDescriptionGraph[#GraphSize * #GraphSize];
	str transitionLabelGraph[#GraphSize * #GraphSize];
	str description;
	str label;
	Set finalStates;
	Map indexesToStates;
	Map stateNamesToStates;
	Map statesToDescriptions;
	Map statesToIndexes;
	Map statesToLabels;
	ResRequestLine dataEntity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Enter</Name>
				<Source><![CDATA[
    /// <summary>
/// Occures when a data entity instance state is entered.
/// </summary>
/// <param name="_eventArgs">
/// The enter event arguments.
/// </param>
delegate void Enter(ResRequestLineDocumentLifecycleEnterEventArgs _eventArgs)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>Exit</Name>
				<Source><![CDATA[
    /// <summary>
/// Occures when a data entity instance state is exited.
/// </summary>
/// <param name="_eventArgs">
/// The exit event arguments.
/// </param>
delegate void Exit(ResRequestLineDocumentLifecycleExitEventArgs _eventArgs)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>Transition</Name>
				<Source><![CDATA[
    /// <summary>
/// Occures when a data entity instance state is transitioned.
/// </summary>
/// <param name="_eventArgs">
/// The transition event arguments.
/// </param>
delegate void Transition(ResRequestLineDocumentLifecycleTransitionEventArgs _eventArgs)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static main supports action menu binding
    /// </summary>
    /// <param name="_args">
    /// The action menu Args instance.
    /// </param>
    public static void main(Args _args)
    {
        if (!_args.record())
        {
            throw error(strfmt('@SYS:StateMachineTableSaveRequired', classStr(ResRequestLineDocumentLifecycle), staticmethodstr(ResRequestLineDocumentLifecycle, main), tableid2name(_args.record().TableId)));
        }

        if (!(_args.record() is ResRequestLine))
        {
            throw error(strfmt('@StateMachine:InvalidDataEntityType', tableStr(ResRequestLine), tableid2name(_args.record().TableId)));
        }

        ResRequestLineDocumentLifecycle stateMachine = new ResRequestLineDocumentLifecycle(_args.record());
        ResApprovalStatus enterState = stateMachine.GetStateFromStateName(_args.stateMachineTransitionTo());
        ResApprovalStatus exitState = stateMachine.StateGetter();

        MapEnumerator requestLinesMapEnum = _args.caller().getUserSelectedRequestLines().getEnumerator();

        if (enterState == ResApprovalStatus::InReview &&
            (exitState == ResApprovalStatus::Draft ||
                exitState == ResApprovalStatus::Returned))
        {
            // Resubmit request.
            ResRequestLineDocumentLifecycle::processRequestLine(requestLinesMapEnum, _args,
                WorkflowWorkItemActionType::Resubmit);
        }
        if (enterState == ResApprovalStatus::Approved && exitState == ResApprovalStatus::InReview)
        {
            // Approve request.
            ResRequestLineDocumentLifecycle::approveRequestLine(requestLinesMapEnum, _args);
        }
        else if (enterState == ResApprovalStatus::Returned && exitState == ResApprovalStatus::InReview)
        {
            // Reject request.
            ResRequestLineDocumentLifecycle::processRequestLine(requestLinesMapEnum, _args);
        }
        else if (enterState == ResApprovalStatus::Canceled &&
            (exitState == ResApprovalStatus::Draft ||
                exitState == ResApprovalStatus::InReview ||
                exitState == ResApprovalStatus::Returned))
        {
            // Cancel request.
            ResRequestLineDocumentLifecycle::processRequestLine(requestLinesMapEnum,
                _args, WorkflowWorkItemActionType::CancelLineItem);
        }
        else if (enterState == ResApprovalStatus::Draft &&
            (exitState == ResApprovalStatus::InReview ||
                exitState == ResApprovalStatus::Returned))
        {
            // Recall request.
            ResRequestLineDocumentLifecycle::processRequestLine(requestLinesMapEnum,
                _args, WorkflowWorkItemActionType::RecallLineItem);
        }
        else if (enterState == ResApprovalStatus::InReview &&
            exitState == ResApprovalStatus::InReview)
        {
            // Delegate request.
            ResRequestLineDocumentLifecycle::processRequestLine(requestLinesMapEnum,
                _args, WorkflowWorkItemActionType::Delegate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveRequestLine</Name>
				<Source><![CDATA[
    private static void approveRequestLine(MapEnumerator _requestLinesMapEnum, Args _args)
    {
        Map resourceActivityResurceMap = new Map(Types::Int64, Types::Int64);
        ResTmpRequestLineSelection resTmpRequestLineSelection;
        ResRequestLine requestLineTable;
        activityresourcerecid activityResource;

        ttsbegin;
        while (_requestLinesMapEnum.moveNext())
        {
            ResRequestLineSelectionContext requestLineContext = _requestLinesMapEnum.currentValue();

            // Verify if the exit status of the record is appropriate.
            RefRecId bookingRequestLineRecId = requestLineContext.parmBookingRequestLine();
            RefRecId assignmentRequestLineRecId = requestLineContext.parmAssignmentRequestLine();
            ResRequestLine requestLineRecord = ResRequestLine::find(bookingRequestLineRecId);
            ResRequestLineDocumentLifecycle lineStatMachine = new ResRequestLineDocumentLifecycle(requestLineRecord);
            ResApprovalStatus lineExitState = lineStatMachine.StateGetter();
            ResApprovalStatus lineExpectedState = ResApprovalStatus::InReview;
            if (lineExitState!= lineExpectedState)
            {
                Exception stateNotMatchError =
                        Global::error(strfmt("@Res:ResquestLineApprovalStatusMismatch",
                            datetime2Str(_requestLinesMapEnum.currentKey(), DateFlags::FormatAll),
                            enum2Str(lineExitState), enum2Str(lineExpectedState)));
            }

            ResourceRecId resource = requestLineContext.parmResource();
            if (!requestLineContext.parmActivityResource())
            {
                // Create a new team member for this project if it does not already exists.
                requestLineTable = ResRequestLine::find(bookingRequestLineRecId);
                ActivityRecId rootActivity = requestLineTable.Activity;

                ResIProjTeamController teamControler = ResProjTeamController::getInstanceFromActivityRecId(rootActivity);
                PSAProjSchedRole activityResourceRecord = PSAProjSchedRole::findByRecId(requestLineTable.ActivityResource);
                if (!resourceActivityResurceMap.exists(resource))
                {
                    activityResource = ActivityResourceFacade::findByActivityAndResource(rootActivity, resource);

                    if (!activityResource)
                    {
                        activityResource = teamControler.add(activityResourceRecord.ResourceCategory, activityResourceRecord.PSARoleStartDate,
                                activityResourceRecord.PSARoleEndDate, resource);
                    }
                    resourceActivityResurceMap.insert(resource, activityResource);
                }
                else
                {
                    activityResource = resourceActivityResurceMap.lookup(resource);
                }
            }
            else
            {
                activityResource = requestLineContext.parmActivityResource();
            }

            resTmpRequestLineSelection.RequestLine = bookingRequestLineRecId;
            resTmpRequestLineSelection.Resource = resource;
            resTmpRequestLineSelection.ActivityResource = activityResource;
            resTmpRequestLineSelection.insert();

            if (assignmentRequestLineRecId)
            {
                resTmpRequestLineSelection.RequestLine = assignmentRequestLineRecId;
                resTmpRequestLineSelection.Resource = resource;
                resTmpRequestLineSelection.ActivityResource = activityResource;
                resTmpRequestLineSelection.insert();
            }
        }
        ttscommit;

        // Launch workflow item dialog form.
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog =
                ResRequestHelper::launchWorkflowItemDialogBox(_args);

        // If user close the dialog form by clicking the OK button, approves the request lines which are selected in the form.
        if (workflowWorkItemActionDialog.parmIsClosedOK())
        {
            ActivityResourceName currentResourceName = ResourceFacade::getName(resTmpRequestLineSelection.Resource);

            // Update ResRequestLine table assigned resource and activity resource if it does not match.
            requestLineTable.clear();
            update_recordset requestLineTable
            setting
                AssignedResource = resTmpRequestLineSelection.Resource,
                ActivityResource = resTmpRequestLineSelection.ActivityResource,
                ResourceName = currentResourceName
            join resTmpRequestLineSelection
                where resTmpRequestLineSelection.RequestLine == requestLineTable.RecId
                    && resTmpRequestLineSelection.Resource != requestLineTable.AssignedResource;

            ResRequestHelper::executeWorkItemActionManager(
                workflowWorkItemActionDialog, _args, _requestLinesMapEnum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRequestLine</Name>
				<Source><![CDATA[
    private static void processRequestLine(MapEnumerator _requestLinesMapEnum, Args _args,
        WorkflowWorkItemActionType _workflowActionType = WorkflowWorkItemActionType::None)
    {
        // Launch workflow item dialog form.
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog =
                ResRequestHelper::launchWorkflowItemDialogBox(_args, _workflowActionType);

        // If user close the dialog form by clicking the OK button, reject the request line which are selected in the form.
        if (workflowWorkItemActionDialog.parmIsClosedOK())
        {
            ResRequestHelper::executeWorkItemActionManager(
                workflowWorkItemActionDialog, _args, _requestLinesMapEnum, _workflowActionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
/// ResRequestLineDocumentLifecycle constructor
/// </summary>
/// <param name="_dataEntity">
/// The data entity instance.
/// </param>
/// <remarks>
/// Creates an instance of ResRequestLineDocumentLifecycle.
/// </remarks>
public void new(ResRequestLine _dataEntity)
{
	super('DocumentLifecycle');
	dataEntity = _dataEntity;
	this.BuildGraph();
}

]]></Source>
			</Method>
			<Method>
				<Name>DescriptionId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state machine description label id.
/// </summary>
/// <returns>
/// The state machine description label id.
/// </returns>
public LabelId DescriptionId()
{
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>InitialState</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the initial state.
/// </summary>
/// <returns>
/// The initial state of the state machine.
/// </returns>
public ResApprovalStatus InitialState()
{
	return this.InitialStateGetter();
}

]]></Source>
			</Method>
			<Method>
				<Name>IsFinalState</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a value indicating whether the input enum value is a final state.
/// </summary>
/// <param name="_state">
/// The enum value.
/// </param>
/// <returns>
/// true if the enum value is a final state, otherwise, false.
/// </returns>
public boolean IsFinalState(ResApprovalStatus _state)
{
	return finalStates.in(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>IsState</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a value indicating whether the input enum value is a state.
/// </summary>
/// <param name="_state">
/// The enum value.
/// </param>
/// <returns>
/// true if the enum value is a state, otherwise, false.
/// </returns>
public boolean IsState(ResApprovalStatus _state)
{
	return statesToIndexes.exists(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>IsValidTransition</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a value indicating whether the transition from the exit state to the enter state is valid.
/// </summary>
/// <param name="_exitState">
/// The exit state.
/// </param>
/// <param name="_enterState">
/// The exit state.
/// </param>
/// <returns>
/// true if the transition from the exit state to the enter state is valid, otherwise, false.
/// </returns>
public boolean IsValidTransition(ResApprovalStatus _exitState, ResApprovalStatus _enterState)
{
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return this.IsTransitionValid(_exitState, _enterState);
	}
	return false;
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateDescriptionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state description label id for the input state.
/// </summary>
/// <param name="_state">
/// The state value.
/// </param>
/// <returns>
/// The description label id if the state exists, otherwise an empty string.
/// </returns>
public LabelId GetStateDescriptionLabelId(ResApprovalStatus _state)
{
	if (this.IsState(_state))
	{
		return statesToDescriptions.lookup(_state);
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateFromStateName</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state from the state.
/// </summary>
/// <param name="_stateName">
/// The state name.
/// </param>
/// <returns>
/// The state if the state name exists, otherwise it throws value not found exception.
/// </returns>
public ResApprovalStatus GetStateFromStateName(SysElementName _stateName)
{
	return stateNamesToStates.lookup(_stateName);
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state label id for the input state.
/// </summary>
/// <param name="_state">
/// The state value.
/// </param>
/// <returns>
/// The label id if the state exists, otherwise an empty string.
/// </returns>
public LabelId GetStateLabelId(ResApprovalStatus _state)
{
	if (this.IsState(_state))
	{
		return statesToLabels.lookup(_state);
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>GetTransitionDescriptionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the transition description label id for the input exit and enter state values.
/// </summary>
/// <param name="_exitState">
/// The exit state value.
/// </param>
/// <param name="_enterState">
/// The enter state value.
/// </param>
/// <returns>
/// The description label id if the transtion exists, otherwise an empty string.
/// </returns>
public LabelId GetTransitionDescriptionLabelId(ResApprovalStatus _exitState, ResApprovalStatus _enterState)
{
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return transitionDescriptionGraph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>GetTransitionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the transition label id for the input exit and enter state values.
/// </summary>
/// <param name="_exitState">
/// The exit state value.
/// </param>
/// <param name="_enterState">
/// The enter state value.
/// </param>
/// <returns>
/// The label id if the transtion exists, otherwise an empty string.
/// </returns>
public LabelId GetTransitionLabelId(ResApprovalStatus _exitState, ResApprovalStatus _enterState)
{		
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return transitionLabelGraph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>LabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state machine label id.
/// </summary>
/// <returns>
/// The state machine label id.
/// </returns>
public LabelId LabelId()
{
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>NextStates</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a list of next states for a given source state.
/// </summary>
/// <param name="_state">
/// The source state.
/// </param>
/// <returns>
/// The list of next states for the given source state.
/// </returns>
public List NextStates(ResApprovalStatus _state)
{
	List nextStates = new List(Types::Enum);
	int columnIndex;

	if (this.IsState(_state))
	{
        int rowIndex = this.GetRowIndexFromState(_state);
		for(columnIndex = 1; columnIndex <= #GraphSize; columnIndex++)
		{
			if (graph[rowIndex + columnIndex])
			{
				nextStates.addEnd(this.GetStateFromColumnIndex(columnIndex));
			}
		}
	}
	return nextStates;
}

]]></Source>
			</Method>
			<Method>
				<Name>State</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the current state of the data entity instance.
/// </summary>
/// <returns>
/// The current state of the data entity instance.
/// </returns>
public ResApprovalStatus State()
{
	return this.StateGetter();
}

]]></Source>
			</Method>
			<Method>
				<Name>DataEntity</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the data entity instance.
/// </summary>
/// <returns>
/// The data entity instance.
/// </returns>
public ResRequestLine DataEntity()
{
	return this.DataEntityGetter();
}

]]></Source>
			</Method>
			<Method>
				<Name>TransitionTo</Name>
				<Source><![CDATA[
    /// <summary>
/// Transitions the data entity instance to the input state.
/// </summary>
/// <param name="_state">
/// The enter state value.
/// </param>
/// <remarks>
/// InvalidOperationException is thrown when the transition from the exit state to the enter state is invalid.
/// </remarks>
public void TransitionTo(ResApprovalStatus _state)
{
	this.TransitionToState(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>InitialStateGetter</Name>
				<Source><![CDATA[
    protected int InitialStateGetter()
{
	return ResApprovalStatus::Draft;
}

]]></Source>
			</Method>
			<Method>
				<Name>InvalidStateTransitionMessage</Name>
				<Source><![CDATA[
    protected str InvalidStateTransitionMessage()
{
	return strfmt('@StateMachine:InvalidTransition',
		enum2Symbol(enumNum(ResApprovalStatus), this.ExitState()),
		enum2Symbol(enumNum(ResApprovalStatus), this.EnterState()));
}

]]></Source>
			</Method>
			<Method>
				<Name>IsTransitionValid</Name>
				<Source><![CDATA[
    protected boolean IsTransitionValid(int _exitState, int _enterState)
{
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return graph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
	}
	return false;
}

]]></Source>
			</Method>
			<Method>
				<Name>OnEnter</Name>
				<Source><![CDATA[
    protected void OnEnter()
{
	ResRequestLineDocumentLifecycleEnterEventArgs eventArgs = new ResRequestLineDocumentLifecycleEnterEventArgs(this.DataEntity(), this.StateMachineName(), this.EnterState());
	super();
	this.Enter(eventArgs);
}

]]></Source>
			</Method>
			<Method>
				<Name>OnExit</Name>
				<Source><![CDATA[
    protected void OnExit()
{
	ResRequestLineDocumentLifecycleExitEventArgs eventArgs = new ResRequestLineDocumentLifecycleExitEventArgs(this.DataEntity(), this.StateMachineName(), this.ExitState());
	super();
	this.Exit(eventArgs);
}

]]></Source>
			</Method>
			<Method>
				<Name>OnTransition</Name>
				<Source><![CDATA[
    protected void OnTransition()
{
	ResRequestLineDocumentLifecycleTransitionEventArgs eventArgs = new ResRequestLineDocumentLifecycleTransitionEventArgs(this.DataEntity(), this.StateMachineName(), this.ExitState(), this.EnterState());
	super();
	this.Transition(eventArgs);
}

]]></Source>
			</Method>
			<Method>
				<Name>StateDescriptionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId StateDescriptionLabelIdGetter(int _state)
{
	return this.GetStateDescriptionLabelId(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>StateGetter</Name>
				<Source><![CDATA[
    protected int StateGetter()
{
	return dataEntity.ApprovalStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>StateKindGetter</Name>
				<Source><![CDATA[
    protected StateMachineStateKind StateKindGetter(int _state)
{
	if (this.InitialState() == _state)
	{
		return StateMachineStateKind::Initial;
	}
	else if (this.IsFinalState(_state))
	{
		return StateMachineStateKind::Final;
	}
	return StateMachineStateKind::Intermediate;
}

]]></Source>
			</Method>
			<Method>
				<Name>StateLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId StateLabelIdGetter(int _state)
{
	return this.GetStateLabelId(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>StateSetter</Name>
				<Source><![CDATA[
    protected void StateSetter(int _state)
{
	dataEntity.ApprovalStatus = _state;
}

]]></Source>
			</Method>
			<Method>
				<Name>DataEntityGetter</Name>
				<Source><![CDATA[
    protected Common DataEntityGetter()
{
	return dataEntity;
}

]]></Source>
			</Method>
			<Method>
				<Name>TransitionDescriptionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId TransitionDescriptionLabelIdGetter(int _exitState, int _enterState)
{
	return this.GetTransitionDescriptionLabelId(_exitState, _enterState);
}

]]></Source>
			</Method>
			<Method>
				<Name>TransitionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId TransitionLabelIdGetter(int _exitState, int _enterState)
{	
	return this.GetTransitionLabelId(_exitState, _enterState);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildFinalStates</Name>
				<Source><![CDATA[
    private void BuildFinalStates()
{
	finalStates = new Set(Types::Enum);
	finalStates.add(ResApprovalStatus::Approved);
	finalStates.add(ResApprovalStatus::Canceled);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildGraph</Name>
				<Source><![CDATA[
    private void BuildGraph()
{
	graph[2] = true;
	graph[8] = true;
	graph[9] = true;
	graph[10] = true;
	graph[12] = true;
	graph[15] = true;
	this.BuildTransitionDescriptionGraph();
	this.BuildTransitionLabelGraph();
	this.BuildIndexesToStates();
	this.BuildStatesToIndexes();
	this.BuildStatesToDescriptions();
	this.BuildStatesToLabels();
	this.BuildStateNamesToStates();
	this.BuildFinalStates();
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildIndexesToStates</Name>
				<Source><![CDATA[
    private void BuildIndexesToStates()
{
	indexesToStates = new Map(Types::Integer, Types::Enum);
	indexesToStates.insert(1, ResApprovalStatus::Draft);
	indexesToStates.insert(2, ResApprovalStatus::InReview);
	indexesToStates.insert(3, ResApprovalStatus::Returned);
	indexesToStates.insert(4, ResApprovalStatus::Approved);
	indexesToStates.insert(5, ResApprovalStatus::Canceled);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStateNamesToStates</Name>
				<Source><![CDATA[
    private void BuildStateNamesToStates()
{
	stateNamesToStates = new Map(Types::String, Types::Enum);
	stateNamesToStates.insert('Draft', ResApprovalStatus::Draft);
	stateNamesToStates.insert('InReview', ResApprovalStatus::InReview);
	stateNamesToStates.insert('Returned', ResApprovalStatus::Returned);
	stateNamesToStates.insert('Approved', ResApprovalStatus::Approved);
	stateNamesToStates.insert('Canceled', ResApprovalStatus::Canceled);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToDescriptions</Name>
				<Source><![CDATA[
    private void BuildStatesToDescriptions()
{
	statesToDescriptions = new Map(Types::Integer, Types::String);
	statesToDescriptions.insert(ResApprovalStatus::Draft, '');
	statesToDescriptions.insert(ResApprovalStatus::InReview, '');
	statesToDescriptions.insert(ResApprovalStatus::Returned, '');
	statesToDescriptions.insert(ResApprovalStatus::Approved, '');
	statesToDescriptions.insert(ResApprovalStatus::Canceled, '');
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToIndexes</Name>
				<Source><![CDATA[
    private void BuildStatesToIndexes()
{
	statesToIndexes = new Map(Types::Enum, Types::Integer);
	statesToIndexes.insert(ResApprovalStatus::Draft, 1);
	statesToIndexes.insert(ResApprovalStatus::InReview, 2);
	statesToIndexes.insert(ResApprovalStatus::Returned, 3);
	statesToIndexes.insert(ResApprovalStatus::Approved, 4);
	statesToIndexes.insert(ResApprovalStatus::Canceled, 5);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToLabels</Name>
				<Source><![CDATA[
    private void BuildStatesToLabels()
{
	statesToLabels = new Map(Types::Integer, Types::String);
	statesToLabels.insert(ResApprovalStatus::Draft, literalStr('@Res:Draft'));
	statesToLabels.insert(ResApprovalStatus::InReview, literalStr('@Res:InReview'));
	statesToLabels.insert(ResApprovalStatus::Returned, literalStr('@Res:Returned'));
	statesToLabels.insert(ResApprovalStatus::Approved, literalStr('@Res:Approved'));
	statesToLabels.insert(ResApprovalStatus::Canceled, literalStr('@Res:Canceled'));
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildTransitionDescriptionGraph</Name>
				<Source><![CDATA[
    private void BuildTransitionDescriptionGraph()
{
	transitionDescriptionGraph[2] = '';
	transitionDescriptionGraph[8] = '';
	transitionDescriptionGraph[9] = '';
	transitionDescriptionGraph[10] = '';
	transitionDescriptionGraph[12] = '';
	transitionDescriptionGraph[15] = '';
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildTransitionLabelGraph</Name>
				<Source><![CDATA[
    private void BuildTransitionLabelGraph()
{
	transitionLabelGraph[2] = literalStr('@Res:InReview');
	transitionLabelGraph[8] = literalStr('@Res:Returned');
	transitionLabelGraph[9] = literalStr('@Res:Approved');
	transitionLabelGraph[10] = literalStr('@Res:Canceled');
	transitionLabelGraph[12] = literalStr('@Res:InReview');
	transitionLabelGraph[15] = literalStr('@Res:Canceled');
}

]]></Source>
			</Method>
			<Method>
				<Name>GetColumnIndexFromState</Name>
				<Source><![CDATA[
    private int GetColumnIndexFromState(int _state)
{
	return statesToIndexes.lookup(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>GetRowIndexFromState</Name>
				<Source><![CDATA[
    private int GetRowIndexFromState(int _state)
{
	return #GraphSize * (statesToIndexes.lookup(_state) - 1);
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateFromColumnIndex</Name>
				<Source><![CDATA[
    private ResApprovalStatus GetStateFromColumnIndex(int _index)
{
	return indexesToStates.lookup(_index);
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>