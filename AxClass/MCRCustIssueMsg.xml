<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustIssueMsg</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustIssueMsg</c> class builds a string of hot alert issues and their related
///     information and calls a form that will display the hot alerts
///     for a customer.
/// </summary>
class MCRCustIssueMsg
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildHotAlertStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops through case details for all issues related to a customer that are open and
    ///     checks to see if they are hot alerts.
    /// </summary>
    /// <param name="_custAccount">
    ///     The customer account to check for hot alerts.
    /// </param>
    /// <returns>
    ///     The issue, reason code and notes for all issues relating to the customer account.
    /// </returns>
    /// <remarks>
    ///     If it is a hot alert,
    ///     Add the issue, reason code and notes to the hot alert string.  Return the string that
    ///     is constructed.
    /// </remarks>
    str buildHotAlertStr(AccountNum _custAccount)
    {
        str hotAlertMsg;
        CaseDetail              caseDetail;
        smmLeadPriorityTable    priorityTable;

        CustTable   custTable;
        int         conLoop = 1;
        #define.UNDERSCORES('_________________________')
        #define.COLON(':')

        if (_custAccount)
        {
            while select mcrMergedRoot, AccountNum
                from custTable
                    where custTable.MCRMergedRoot == _custAccount
                        || custTable.AccountNum == _custAccount
                    join Party, CaseId, Description, Status, Priority, Memo
                    from caseDetail
                        where !(caseDetail.Status      == CaseStatus::Closed) &&
                            !(caseDetail.Status        == CaseStatus::Cancelled) &&
                            caseDetail.Party           == custTable.Party
                    exists join priorityTable
                        where priorityTable.MCRHotAlert
                            && caseDetail.Priority        == priorityTable.Priority
                            {
                                //Right to left language requires label of %1%2%3... etc. so it can be reversed
                                hotAlertMsg = hotAlertMsg + #UNDERSCORES + '\n' +
                                    strFmt("@MCR40441", "@MCR35966", caseDetail.CaseId, ',', ' ', "@SYS25589", #COLON, ' ', caseDetail.Description)
                                    + '\n' + strFmt("@MCR40440", "@SYS80402", #COLON, ' ', caseDetail.Memo) + '\n' + '\n';
                            }
        }

        // if hot alert msg is not blank, add the prefix sentence onto the str.
        if (hotAlertMsg)
        {
            hotAlertMsg = "@MCR11042" + '\n' + hotAlertMsg;
        }

        return hotAlertMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHotAlertMsg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check for hot alerts and show pop-up if any exist.
    /// </summary>
    /// <param name="_custAccount">
    ///     The customer account to check for hot alerts.
    /// </param>
    void displayHotAlertMsg(AccountNum _custAccount)
    {
        str hotAlertsMsg;
        Args    args;
        FormRun FR;
        MCRHotAlertsConfigure hotAlertsConfigure = new MCRHotAlertsConfigure();

        hotAlertsMsg = this.BuildHotAlertStr(_custAccount);

        hotAlertsConfigure.parmHotAlertsMsg(hotAlertsMsg);
        hotAlertsConfigure.parmCustAccount(_custAccount);

        // if not blank
        if (hotAlertsMsg)
        {
            args = new Args(formStr(MCRHotAlerts));
            args.parmObject(hotAlertsConfigure);

            FR = classfactory.formRunClass(args);
            FR.init();
            FR.run();
            FR.wait();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>