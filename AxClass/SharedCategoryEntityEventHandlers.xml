<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SharedCategoryEntityEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SharedCategoryEntityEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SharedCategoryEntity_getComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sql string for the computed column definition of the specified computed column method.
    /// </summary>
    /// <param name="_methodName">The method name.</param>
    /// <param name="_result">The <c>EventHandlerResult</c> instance.</param>
    [SubscribesTo(tableStr(SharedCategoryEntity), staticDelegateStr(SharedCategoryEntity, getComputedColumnDefinition))]
    public static void SharedCategoryEntity_getComputedColumnDefinition(MethodName _methodName, EventHandlerResult _result)
    {
        switch (_methodName)
        {
            case tableStaticMethodStr(SharedCategoryEntity, computeUseInExpense):
                _result.result(SharedCategoryEntityEventHandlers::computeUseInRole(CategoryRoleType::Expense));
                break;

            case tableStaticMethodStr(SharedCategoryEntity, computeUseInProject):
                _result.result(SharedCategoryEntityEventHandlers::computeUseInRole(CategoryRoleType::Project));
                break;

            case tableStaticMethodStr(SharedCategoryEntity, computeUseInProduction):
                _result.result(SharedCategoryEntityEventHandlers::computeUseInRole(CategoryRoleType::Production));
                break;

            case tableStaticMethodStr(SharedCategoryEntity, computeExpenseType):
                _result.result(SharedCategoryEntityEventHandlers::computeExpenseType());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeUseInRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compose the sql string used to create data entity UsedIn fields.
    /// </summary>
    /// <param name = "_categoryRoleType">The category type needs to be composed.</param>
    /// <returns>The sql string used to create data entity UsedIn fields.</returns>
    private static str computeUseInRole(CategoryRoleType _categoryRoleType)
    {
        return 'SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END FROM SHAREDCATEGORYROLES SCR1'
             + ' JOIN SHAREDCATEGORYROLETYPE SCRT1 ON SCR1.GLOBALCATEGORYROLETYPE = SCRT1.RECID'
             + ' WHERE SCRT1.CATEGORYROLETYPE = ' + int2Str(enum2int(_categoryRoleType)) + ' AND SCR1.GLOBALCATEGORY = '
             + SysComputedColumn::returnField(
                   tablestr(SharedCategoryEntity), tablestr(SharedCategory), fieldstr(SharedCategory, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeExpenseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compose the sql string used to create ExpenseType field.
    /// </summary>
    /// <returns>The sql string used to create data entity field ExpenseType.</returns>
    private static str computeExpenseType()
    {
        return 'SELECT EXPENSETYPE FROM SHAREDCATEGORYROLES SCR1'
             + ' JOIN SHAREDCATEGORYROLETYPE SCRT1 ON SCR1.GLOBALCATEGORYROLETYPE = SCRT1.RECID '
             + ' WHERE SCRT1.CATEGORYROLETYPE = 0 AND SCR1.GLOBALCATEGORY = '
             + SysComputedColumn::returnField(
                   tablestr(SharedCategoryEntity), tablestr(SharedCategory), fieldstr(SharedCategory, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryEntity_onInsertedEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the shared category record and related role record.
    /// </summary>
    /// <param name = "_sender">The data entity instance.</param>
    /// <param name = "_eventArgs">The event arguments.</param>
    [DataEventHandler(tableStr(SharedCategoryEntity), DataEventType::InsertedEntityDataSource), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void SharedCategoryEntity_onInsertedEntityDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        SharedCategoryEntity sharedCategoryEntity = _sender;
        DataEntityContextResultEventArgs eventArgs = _eventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = eventArgs.parmEntityDataSourceContext();

        ttsbegin;

        boolean ret = true;

        if (dataSourceCtx.name() == dataEntityDataSourceStr(SharedCategoryEntity, SharedCategory))
        {
            SharedCategory sharedCategory = dataSourceCtx.getBuffer();

            // Only call edit method to build shared category roles if the UseIn fields are Yes at insert time.
            if (sharedCategoryEntity.UseInProject)
            {
                ret = ret && sharedCategory.canBeUsedInProject(true, sharedCategoryEntity.UseInProject);
            }

            if (sharedCategoryEntity.UseInExpense)
            {
                ret = ret && sharedCategory.canBeUsedInExpense(true, sharedCategoryEntity.UseInExpense);
                ret = ret && (sharedCategory.expType(true, sharedCategoryEntity.ExpenseType) == sharedCategoryEntity.ExpenseType);
            }

            if (sharedCategoryEntity.UseInProduction)
            {
                ret = ret && sharedCategory.canBeUsedInProduction(true, sharedCategoryEntity.UseInProduction);
            }

            // If any of the edit method returns a different value than the set value, then there's a validation error.
            if (!ret)
            {
                throw error("@Expense:DataEntityInsertFailed");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryEntity_onUpdatedEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the shared category record and related role record.
    /// </summary>
    /// <param name = "_sender">The data entity instance.</param>
    /// <param name = "_eventArgs">The event arguments.</param>
    [DataEventHandler(tableStr(SharedCategoryEntity), DataEventType::UpdatedEntityDataSource), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void SharedCategoryEntity_onUpdatedEntityDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        SharedCategoryEntity sharedCategoryEntity = _sender;
        DataEntityContextResultEventArgs eventArgs = _eventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = eventArgs.parmEntityDataSourceContext();

        ttsbegin;

        boolean ret = true;

        if (dataSourceCtx.name() == dataEntityDataSourceStr(SharedCategoryEntity, SharedCategory))
        {
            SharedCategory sharedCategory = dataSourceCtx.getBuffer();

            sharedCategory.canBeUsedInProject(true, sharedCategoryEntity.UseInProject);

            // In case one of UseInExpense and UseInProduction is Yes, the other is No, we need to call the No one first, otherwise will fail.
            if (sharedCategoryEntity.UseInExpense)
            {
                // Compare the set value with return value to know if there's a validation error.
                ret = ret && (sharedCategory.canBeUsedInProduction(true, sharedCategoryEntity.UseInProduction) == sharedCategoryEntity.UseInProduction);
                ret = ret && (sharedCategory.canBeUsedInExpense(true, sharedCategoryEntity.UseInExpense) == sharedCategoryEntity.UseInExpense);
                ret = ret && (sharedCategory.expType(true, sharedCategoryEntity.ExpenseType) == sharedCategoryEntity.ExpenseType);
            }
            else
            {
                // Compare the set value with return value to know if there's a validation error.
                ret = ret && (sharedCategory.canBeUsedInExpense(true, sharedCategoryEntity.UseInExpense) == sharedCategoryEntity.UseInExpense);
                ret = ret && (sharedCategory.canBeUsedInProduction(true, sharedCategoryEntity.UseInProduction) == sharedCategoryEntity.UseInProduction);
            }

            // If any of the edit method returns a different value than the set value, then there's a validation error.
            if (!ret)
            {
                throw error("@Expense:DataEntityUpdateFailed");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>