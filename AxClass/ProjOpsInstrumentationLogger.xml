<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOpsInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjOpsInstrumentationLogger</c> class handles the backend configuration telemetry logging using IFX framework.
/// Namespace: Represents the area / ownership of logs. This is useful in Geneva but kusto logs may not show the namespace
///            Ideally each area / team should have different namespace and hence separate implementation for SysInstrumentationLoggerBase
/// Activity: Header for the code block being monitored in the instrumentation.
/// ActivityContext: Code block being monitored in the instrumentation.
/// Activity or activity context name is written to TraceEvents.ActivityType and OperationEvents.AcitivityName fields
/// LoggerName: Represents the logger instance publishing the telemetry. loggerName is written to TraceEvents.SourceName field
/// Message logging: Any kind of logging message is written to TraceEvents.TraceMessage
/// </summary>
public class ProjOpsInstrumentationLogger extends SysInstrumentationLoggerBase
{
    protected str instrumentationNamespace = 'ProjectOperationsFnO';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates new object for <c>ProjOpsInstrumentationLogger</c> class
    /// </summary>
    /// <param name = "_loggerName">Name of the logger.</param>
    /// <returns>Logger instance</returns>
    /// <remarks>Logger name is written to TraceEvents.SourceName field.</remarks>
    [Hookable(false)]
    public static ProjOpsInstrumentationLogger createLogger(str _loggerName)
    {
        return new ProjOpsInstrumentationLogger(_loggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>namespace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns namespace of the logger.
    /// </summary>
    /// <returns>Returns namespace of the logger</returns>
    [Hookable(false)]
    public final str namespace()
    {
        return instrumentationNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds info message event to the instumentation logger
    /// </summary>
    /// <param name = "_message">Info message to be logged</param>
    /// <remarks>Info message is written to TraceEvent.TraceMessage with TraceEvents.TraceLevel = Information</remarks>
    [Hookable(false)]
    public void logInformation(str _message)
    {
        try
        {
            logger.logInformation(_message);
        }
        catch
        {
            // Ignore the exception since telemetry logging should not impact product functionality
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds warning message event to the instumentation logger
    /// </summary>
    /// <param name = "_message">Warning message to be logged</param>
    /// <remarks>Warning message is written to TraceEvent. TraceMessage with TraceEvents.TraceLevel = Warning</remarks>
    [Hookable(false)]
    public void logWarning(str _message)
    {
        try
        {
            logger.logWarning(_message);
        }
        catch
        {
            // Ignore the exception since telemetry logging should not impact product functionality
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds error message event to the instumentation logger
    /// </summary>
    /// <param name = "_message">Error message to be logged</param>
    /// <remarks>Error message is written to TraceEvent. TraceMessage with TraceEvents.TraceLevel = Error</remarks>
    [Hookable(false)]
    public void logError(str _message)
    {
        try
        {
            logger.logError(_message);
        }
        catch
        {
            // Ignore the exception since telemetry logging should not impact product functionality
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCritical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds critical message event to the instumentation logger
    /// </summary>
    /// <param name = "_message">Critical message to be logged</param>
    /// <remarks>Critical message is written to TraceEvent. TraceMessage with TraceEvents.TraceLevel = Critical</remarks>
    [Hookable(false)]
    public void logCritical(str _message)
    {
        try
        {
            logger.logCritical(_message);
        }
        catch
        {
            // Ignore the exception since telemetry logging should not impact product functionality
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallStack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns call stack with respect to the calling method.
    /// </summary>
    /// <param name = "_xppCallStack">Container that holds the list of operation calls.</param>
    /// <returns>Formatted string containing the call stack with respect to method call.</returns>
    [Hookable(false)]
    public static str getCallStack(container _xppCallStack)
    {
        str callStackTrace;
        try
        {
            int stackCnt = 1;
            while (conPeek(_xppCallStack, stackCnt))
            {
                callStackTrace += strFmt('\n%1 %2', conPeek(_xppCallStack, stackCnt), conPeek(_xppCallStack, stackCnt + 1));
                stackCnt = stackCnt + 2;
            }
        }
        catch
        {
            // Ignore the exception since telemetry logging should not impact product functionality
        }
        return callStackTrace;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>