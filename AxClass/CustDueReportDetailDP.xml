<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDueReportDetailDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(queryStr(CustDueReportDetail)),
    SRSReportParameterAttribute(classStr(CustDueReportDetailContract))
]
public class CustDueReportDetailDP extends SrsReportDataProviderPreProcessTempDB
{
    CustDueReportDetailTmp custDueReportDetailTmp;
    boolean isCountryRegion_PL;
    AmountCurDebCred prevRunningTotalAmountMST;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustDueReportDetailTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute(tableStr(CustDueReportDetailTmp))
    ]
    public CustDueReportDetailTmp getCustDueReportDetailTmp()
    {
        select custDueReportDetailTmp;
        return custDueReportDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustDueReportDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the <c>Tax1099Summary</c> table.
    /// </summary>
    /// <param name = "_amountCur">
    ///     Amount in transaction currency.
    /// </param>
    /// <param name = "_dueDate">
    ///     The due date.
    /// </param>
    /// <param name = "_possibleCashDisc">
    ///     
    /// </param>
    /// <param name = "_transDate">
    ///     Transaction date.
    /// </param>
    /// <param name = "_billingClassification">
    ///     Billing classification.
    /// </param>
    /// <param name = "_amountMST">
    ///     Amount in accounting currency.
    /// </param>
    [Wrappable(true)]
    protected final void populateCustDueReportDetailTmp(
            AmountCur _amountCur,
            DueDate _dueDate,
            CustCashDiscAmount _possibleCashDisc,
            TransDate _transDate,
            BillingClassification _billingClassification = '',
            AmountMST _amountMST = 0)
    {
        custDueReportDetailTmp.AmountCur1 = _amountCur;
        custDueReportDetailTmp.DueDate = _dueDate;
        custDueReportDetailTmp.PossibleCashDisc = _possibleCashDisc;
        custDueReportDetailTmp.TransDate = _transDate;
        custDueReportDetailTmp.AmountMST1 = _amountMST;

        if (!BrazilParameters::isEnabled())
        {
            custDueReportDetailTmp.BillingClassification = _billingClassification;
        }

        // <GEEPL>
        if (isCountryRegion_PL)
        {
            custDueReportDetailTmp.PrevRunningTotalAmountMST = prevRunningTotalAmountMST;
            prevRunningTotalAmountMST += custDueReportDetailTmp.AmountMST;
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// The <c>PublicSector.CustDueReportDetailDP.processReport</c> method provides the ability to write
    /// the report business logic. This method will be called by Microsoft SQL Server Reporting Services at
    /// runtime. The method should compute data and populate the data tables that will be returned to
    /// Reporting Services.This is a framework class. Customizing this class may cause problems with future
    /// upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        CustDueReportDetailContract contract = this.parmDataContract() as CustDueReportDetailContract;
        TransDate asOfDate = contract.parmAsOfDate();
        QueryRun queryRun = new QueryRun(this.parmQuery());
        CustTrans custTrans;
        RecId custTransRecId;
        RecId custTransOffsetRecId;
        CustTransOpen custTransOpen;
        CustSettlement custSettlement;
        TransDate transDate;
        Set setRecord = new Set(Types::Int64);

        boolean isPublicSectorScenario;
        NoYes inclTransWithNoBillingClass = contract.parmInclTransWithNoBillingClass();
        List billingClassification = contract.parmBillingClassification();

        QueryBuildDataSource qbdsCustTrans = SysQuery::findOrCreateDataSource(queryRun.query(), tableNum(custTrans));
        QueryBuildDataSource qbdsCustTransOpen = qbdsCustTrans.addDataSource(tableNum(CustTransOpen));
        QueryBuildDataSource qbdsCustSettlement = qbdsCustTrans.addDataSource(tableNum(CustSettlement));

        // <GEEPL>
        #isoCountryRegionCodes
        isCountryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        prevRunningTotalAmountMST = 0;
        // </GEEPL>

        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(billingClassification);

        if (isPublicSectorScenario && !BrazilParameters::isEnabled())
        {
            if (qbdsCustTrans)
            {
                CustBillingClassificationReportManager::setBillingClassificationRanges(qbdsCustTrans, billingClassification,
                                                                        inclTransWithNoBillingClass, fieldNum(CustTrans, CustBillingClassification));
            }
        }

        qbdsCustTransOpen.enabled(true);
        qbdsCustTransOpen.fetchMode(QueryFetchMode::One2One);
        qbdsCustTransOpen.joinMode(JoinMode::InnerJoin);
        qbdsCustTransOpen.addLink(fieldNum(CustTrans, RecId), fieldNum(CustTransOpen, RefRecId));

        qbdsCustSettlement.enabled(false);
        qbdsCustSettlement.fetchMode(QueryFetchMode::One2One);
        qbdsCustSettlement.joinMode(JoinMode::InnerJoin);
        qbdsCustSettlement.addLink(fieldNum(CustTrans, RecId), fieldNum(CustSettlement, TransRecId));

        if (asOfDate)
        {
            qbdsCustTransOpen.addRange(fieldNum(CustTransOpen, TransDate)).value(
                queryRange(null, asOfDate));
            qbdsCustSettlement.addRange(fieldNum(CustSettlement, TransDate)).value(
                strFmt('>%1', queryValue(asOfDate)));
            qbdsCustSettlement.addRange(fieldNum(CustSettlement, CanBeReversed)).value(
                queryValue(NoYes::Yes));
        }

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(CustTable)))
            {
                this.updateCustDueReportDetailTmpFromCustTable(queryRun.get(tableNum(CustTable)));
            }

            if (queryRun.changed(tableNum(CustTrans)))
            {
                this.updateCustDueReportDetailTmpFromCustTrans(queryRun.get(tableNum(CustTrans)));
            }

            if (queryRun.changed(tableNum(CustTransOpen)))
            {
                custTransOpen = queryRun.get(tableNum(CustTransOpen));

                if (isPublicSectorScenario && !BrazilParameters::isEnabled())
                {
                    custTrans = queryRun.get(tableNum(CustTrans));

                    this.populateCustDueReportDetailTmp(
                            custTransOpen.AmountCur,
                            custTransOpen.DueDate,
                            custTransOpen.PossibleCashDisc,
                            custTransOpen.TransDate,
                            custTrans.getBillingClassification(),
                            custTransOpen.AmountMST);

                    this.insertCustDueReportDetailTmp();
                }
                else
                {
                    this.populateCustDueReportDetailTmp(
                            custTransOpen.AmountCur,
                            custTransOpen.DueDate,
                            custTransOpen.PossibleCashDisc,
                            custTransOpen.TransDate,
                            '',
                            custTransOpen.AmountMST);

                    this.insertCustDueReportDetailTmp();
                }
            }
        }

        qbdsCustTransOpen.enabled(false);
        qbdsCustSettlement.enabled(true);
        queryRun.reset();
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(CustTable)))
            {
                this.updateCustDueReportDetailTmpFromCustTable(queryRun.get(tableNum(CustTable)));

                // reset the set of records for this customer
                setRecord = new Set(Types::Int64);
                custTransRecId = 0;
                custTransOffsetRecId = 0;
            }

            if (queryRun.changed(tableNum(CustTrans)))
            {
                setRecord.add(custTransRecId);
                setRecord.add(custTransOffsetRecId);

                custTrans = queryRun.get(tableNum(CustTrans));
                custTransRecId = custTrans.RecId;
                custTransOffsetRecId = custTrans.OffsetRecid;

                this.updateCustDueReportDetailTmpFromCustTrans(custTrans);
            }

            if (queryRun.changed(tableNum(CustSettlement)))
            {
                custSettlement = queryRun.get(tableNum(CustSettlement));

                if (!(setRecord.in(custTrans.RecId)) || setRecord.in(custTrans.OffsetRecid))
                {
                    transDate = asOfDate ? custTrans.TransDate : custSettlement.TransDate;

                    if (!(asOfDate && transDate > asOfDate))
                    {
                        if (isPublicSectorScenario && !BrazilParameters::isEnabled())
                        {
                            this.populateCustDueReportDetailTmp(
                                    custSettlement.SettleAmountCur,
                                    asOfDate && custSettlement.DueDate ? custSettlement.DueDate : custTrans.DueDate,
                                    custSettlement.UtilizedCashDisc,
                                    transDate,
                                    custTrans.getBillingClassification(),
                                    custTransOpen.AmountMST);

                            this.insertCustDueReportDetailTmp();
                        }
                        else
                        {
                            this.populateCustDueReportDetailTmp(
                                    custSettlement.SettleAmountCur,
                                    asOfDate && custSettlement.DueDate ? custSettlement.DueDate : custTrans.DueDate,
                                    custSettlement.UtilizedCashDisc,
                                    transDate,
                                    '',
                                    custTransOpen.AmountMST);

                            this.insertCustDueReportDetailTmp();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustDueReportDetailTmpFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the fields of <c>CustDueReportDetailTmp</c> table buffer from <c>CustTable</c> table buffer
    /// </summary>
    /// <param name = "_custTable">
    ///     A <c>CustTable</c> table buffer.
    /// </param>
    protected void updateCustDueReportDetailTmpFromCustTable(CustTable _custTable)
    {
        custDueReportDetailTmp.AccountNum = _custTable.AccountNum;
        custDueReportDetailTmp.CustGroup = _custTable.CustGroup;
        custDueReportDetailTmp.LastInvoiceDate = _custTable.lastInvoiceDate();
        custDueReportDetailTmp.LastPaymentDate = _custTable.lastPaymentDate();
        custDueReportDetailTmp.LastProjInvoiceDate = _custTable.lastProjInvoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustDueReportDetailTmpFromCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the fields of <c>CustDueReportDetailTmp</c> table buffer from <c>CustTrans</c> table buffer.
    /// </summary>
    /// <param name = "_custTrans">
    ///     A <c>CustTrans</c> table buffer.
    /// </param>
    protected void updateCustDueReportDetailTmpFromCustTrans(CustTrans _custTrans)
    {
        custDueReportDetailTmp.Invoice = _custTrans.Invoice;
        custDueReportDetailTmp.PaymReference = _custTrans.PaymReference;
        custDueReportDetailTmp.CurrencyCode = _custTrans.CurrencyCode;
        custDueReportDetailTmp.AmountCur = _custTrans.AmountCur;
        // <GEEPL>
        if (isCountryRegion_PL)
        {
            //custDueReportDetailTmp.PrevRunningTotalAmountMST = prevRunningTotalAmountMST;
            custDueReportDetailTmp.AmountMST = _custTrans.remainAmountMST();
        }
        // </GEEPL>
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custDueReportDetailTmp.FiscalEstablishmentId = _custTrans.fiscalEstablishmentId_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustDueReportDetailTmp</Name>
				<Source><![CDATA[
    private void insertCustDueReportDetailTmp()
    {
        custDueReportDetailTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>