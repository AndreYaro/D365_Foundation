<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyLPLocate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyLPLocate</c> class implements the Round up to full License Plate strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::LPLocate)]
class WhsLocationDirectiveStrategyLPLocate extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;

        if (_locDirTable.WorkTransType != WHSWorkTransType::Replenishment)
        {
            ret = checkFailed("@WAX4304");
        }

        if (_locDirTable.WorkType != WHSWorkType::Pick)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reliesOnDimensionsBelowLocation</Name>
				<Source><![CDATA[
    public boolean reliesOnDimensionsBelowLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckNonLPLocation</Name>
				<Source><![CDATA[
    public boolean mustCheckNonLPLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsRequiredToChange</Name>
				<Source><![CDATA[
    public Set dimensionsRequiredToChange()
    {
        Set result = super();
        result.add(fieldStr(InventDim, LicensePlateId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective,
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        boolean             strategyResult;

        if (_parameters.WorkType == WHSWorkType::Pick)
        {
            Qty lpQtyAvail = WhsLocationDirectiveStrategyLPLocate::getLPAvailableQtyNotInWork(
                _parameters.WorkType,
                _parameters.ItemId,
                _parameters.InventUOM,
                _parameters.Location,
                WhsLocationDirectiveStrategyLPLocate::getInventDimWithLP(_parameters.InventDim, _parameters.CurrentLPId),
                _parameters.InventDim,
                _parameters.CurrentLPId);

            if (lpQtyAvail > _parameters.AvailQty)
            {
                // Unable to locate a full LP from
                strategyResult = false;
            }
            else
            {
                strategyResult = true;

                _locationDirective.parmAvailQty(lpQtyAvail);

                // We are pulling the full LP so we must increase the findQty
                if (_parameters.InventFindQty < lpQtyAvail)
                {
                    _locationDirective.parmInventFindQty(lpQtyAvail);
                }

                // Set the located LP parameters so it can be set on the tmpWorkLine
                _locationDirective.parmLocatedLP(_parameters.CurrentLPId);
            }
        }

        return strategyResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimWithLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the license plate to the input inventory dimensions
    /// </summary>
    /// <param name="_inventDim">
    /// Input inventory dimension to be modified.
    /// </param>
    /// <param name="_licensePlateId">
    /// License plate id to set.
    /// </param>
    /// <returns>
    /// Inventory dimensions including the license plate.
    /// </returns>
    static public InventDim getInventDimWithLP(InventDim _inventDim, WHSLicensePlateId _licensePlateId)
    {
        InventDim lpInventDim;

        lpInventDim.data(_inventDim);
        lpInventDim.LicensePlateId = _licensePlateId;
        lpInventDim = InventDim::findOrCreate(lpInventDim);

        return lpInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLPAvailableQtyNotInWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the available quantity on the license that is not part of existing work
    /// </summary>
    /// <param name="_workType">
    /// Type of work.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_unitId">
    /// UOM of the item.
    /// </param>
    /// <param name="_location">
    /// Location.
    /// </param>
    /// <param name="_lpInventDim">
    /// The inventory dimensions including the item and license plate.
    /// </param>
    /// <param name="_itemInventDim">
    /// The inventory dimensions of the item be located.
    /// </param>
    /// <param name="_lpLocate">
    /// License plate id of the located items.
    /// </param>
    /// <returns>
    /// Available quantity on the license that is not part of existing work
    /// </returns>
    static public InventQty getLPAvailableQtyNotInWork(
        WHSWorkType _workType,
        ItemId _itemId,
        UnitOfMeasureSymbol _unitId,
        WMSLocation _location,
        InventDim _lpInventDim, 
        InventDim _itemInventDim,
        WHSLicensePlateId _lpLocate
        )
    {
        InventQty lpQtyAvail;

        // Find the available amount in the LP
        lpQtyAvail = WHSInventOnHand::getWorkPhysicalInventHandlingQty(_itemId, _lpInventDim.InventDimId);

        // Find total work in temp table that has been soft allocated for this lp
        InventQty inWorkQty = WHSLocationDirective::getTotalInTempTable(_location.inventLocationId,
                                                                _location.wmsLocationId,
                                                                _itemInventDim,
                                                                _unitId,
                                                                _itemId,
                                                                _workType,
                                                                '',
                                                                _lpLocate);

        // Find total open work that has been soft allocated for this lp
        InventQty openLPWorkTotal = WhsLocationDirectiveStrategyLPLocate::getTotalOpenWorkForLocatedLP(_location.InventLocationId,
                                                            _location.wmsLocationId,
                                                            _itemInventDim,
                                                            _unitId,
                                                            _itemId,
                                                            _itemInventDim.InventStatusId,
                                                            _lpLocate);

        lpQtyAvail = lpQtyAvail - inWorkQty - openLPWorkTotal;

        return lpQtyAvail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOpenWorkForLocatedLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity of the items in open pick works from an lp tracked location.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Warehouse id of the work being done.
    /// </param>
    /// <param name="_locationId">
    /// Location id of the work being done.
    /// </param>
    /// <param name="_itemDim">
    /// Item dimensions.
    /// </param>
    /// <param name="_unitId">
    /// UOM of the item.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_inventStatusId">
    /// Item status id.
    /// </param>
    /// <param name="_lpLocate">
    /// License plate id of the located items.
    /// </param>
    /// <returns>
    /// Total quantity of the items in open pick work from lp tracked location.
    /// </returns>
    static public Qty getTotalOpenWorkForLocatedLP(InventLocationId      _inventLocationId,
                                                   WMSLocationId         _locationId,
                                                   InventDim             _itemDim,
                                                   UnitOfMeasureSymbol   _unitId,
                                                   ItemId                _itemId,
                                                   WHSInventStatusId     _inventStatusId,
                                                   WHSLicensePlateId     _lpLocate)
    {
        Qty             qtyInWork;
        WHSWorkLine     workLine;
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        inventDimParm.setAllProductDimensions();
        if (InventTable::find(_itemId).isProductVariantUnitConversionEnabled())
        {
            while select UnitId, sum(QtyRemain), InventDimId from workLine
                group by InventDimId, UnitId
            #InventDimJoin(workLine.InventDimId, inventDim, _itemDim, inventDimParm) &&
                  workLine.ItemId               == _itemId                           &&
                  inventDim.InventLocationId    == _inventLocationId                 &&
                  workLine.wmsLocationId        == _locationId                       &&
                  inventDim.InventStatusId      == _inventStatusId                   &&
                  (workLine.WorkStatus          == WHSWorkStatus::Open               ||
                  workLine.WorkStatus           == WHSWorkStatus::InProcess)         &&
                  workLine.WorkType             == WHSWorkType::Pick                 &&
                  (workLine.LocatedLPId         == _lpLocate                         ||
                  !_lpLocate)
            {
                qtyInWork += WHSLocationDirective::convertQtyGivenUnitSymbols(
                    WHSLocationDirective::parmReleasedProductUnitConverter(),
                    workLine.QtyRemain,
                    workLine.UnitId,
                    _unitId,
                    _itemId,
                    workLine.InventDimId);
            }
        }
        else
        {
            while select UnitId, sum(QtyRemain) from workLine
                group by UnitId
                #InventDimJoin(workLine.InventDimId, inventDim, _itemDim, inventDimParm) &&
                      workLine.ItemId               == _itemId                           &&
                      inventDim.InventLocationId    == _inventLocationId                 &&
                      workLine.wmsLocationId        == _locationId                       &&
                      inventDim.InventStatusId      == _inventStatusId                   &&
                      (workLine.WorkStatus          == WHSWorkStatus::Open               ||
                      workLine.WorkStatus           == WHSWorkStatus::InProcess)         &&
                      workLine.WorkType             == WHSWorkType::Pick                 &&
                      (workLine.LocatedLPId         == _lpLocate                         ||
                      !_lpLocate)
            {
                qtyInWork += WHSLocationDirective::convertQtyGivenUnitSymbols(
                    WHSLocationDirective::parmReleasedProductUnitConverter(),
                    workLine.QtyRemain,
                    workLine.UnitId,
                    _unitId,
                    _itemId);
            }
        }
        return qtyInWork;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>