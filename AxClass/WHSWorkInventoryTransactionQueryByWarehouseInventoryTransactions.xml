<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventoryTransactionQueryByWarehouseInventoryTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventoryTransactionQueryByWarehouseInventoryTransactions</c> is an implementation of the <c>WHSWorkInventoryTransactionIQuery</c> interface
/// based on the warehouse inventory transactions. I.e. it reads information from <c>WHSInventoryTransaction</c> and <c>WHSInventoryItemSetElement</c> tables.
/// </summary>
internal class WHSWorkInventoryTransactionQueryByWarehouseInventoryTransactions implements WHSWorkInventoryTransactionIQuery
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registeredIssueByWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredIssueByWorkLine(WHSWorkId _workId, LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        return this.getInventoryTransactionDescriptorForTransactionType(
            _workId,
            _lineNum,
            _queryParameters,
            WHSInventoryTransactionTypeEnum::RegisteredIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredReceiptByWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredReceiptByWorkLine(WHSWorkId _workId, LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        return this.getInventoryTransactionDescriptorForTransactionType(
            _workId,
            _lineNum,
            _queryParameters,
            WHSInventoryTransactionTypeEnum::RegisteredReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryTransactionDescriptorForTransactionType</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor getInventoryTransactionDescriptorForTransactionType(
        WHSWorkId _workId, 
        LineNum _lineNum, 
        WHSWorkInventoryTransactionQueryParameters _queryParameters,
        WHSInventoryTransactionTypeEnum _inventoryTransactionTypeEnum)
    {
        WHSWorkInventTrans workInventTrans;
        WHSInventoryTransactionView inventoryTransactionView;

        SysDaQueryObject workInventTransQueryObject = this.buildInventoryQuery(
            workInventTrans,
            inventoryTransactionView,
            _workId,
            _lineNum,
            _inventoryTransactionTypeEnum,
            _queryParameters);

        SysDaSearchObject searchObject = new SysDaSearchObject(workInventTransQueryObject);
        SysDaSearchStatement statement = new SysDaSearchStatement();

        workInventTransQueryObject.firstOnlyHint = _queryParameters.parmFirstOnly();

        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        while (statement.findNext(searchObject))
        {
            inventoryTransactionDescriptor.add(WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                inventoryTransactionView.ItemId,
                inventoryTransactionView.HandlingQty,
                inventoryTransactionView.HandlingWeight,
                WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventoryTransactionView(inventoryTransactionView),
                workInventTrans.inventTransIdParent,
                _queryParameters.parmIncludeWorkInventTransRecId() ? workInventTrans.RecId : 0));
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventoryQuery(
        WHSWorkInventTrans _workInventTrans,
        WHSInventoryTransactionView _inventoryTransactionView,
        WHSWorkId _workId,
        LineNum _lineNum,
        WHSInventoryTransactionTypeEnum _inventoryTransactionTypeEnum,
        WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        SysDaQueryObject workInventTransQueryObject = new SysDaQueryObject(_workInventTrans);
        workInventTransQueryObject.projection().add(fieldStr(WHSWorkInventTrans, InventTransIdParent));
        if (_queryParameters.parmIncludeWorkInventTransRecId())
        {
            workInventTransQueryObject.projection().add(fieldStr(WHSWorkInventTrans, RecId));
        }
        workInventTransQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, WorkId)),
                new SysDaValueExpression(_workId))
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, LineNum)),
                new SysDaValueExpression(_lineNum))));

        SysDaQueryObject inventoryTransactionViewQueryObject = new SysDaQueryObject(_inventoryTransactionView);

        var filterByInventoryTransactionOriginIdAndTypeExpression = new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventoryTransactionView, fieldStr(WHSInventoryTransactionView, InventoryTransactionOriginId)),
                    new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, InventoryTransactionOriginId)))
                .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventoryTransactionView, fieldStr(WHSInventoryTransactionView, Type)),
                    new SysDaValueExpression(_inventoryTransactionTypeEnum)));

        if (_queryParameters.parmIncludeArchivedTransactions())
        {
            inventoryTransactionViewQueryObject.whereClause(filterByInventoryTransactionOriginIdAndTypeExpression);
        }
        else
        {
            inventoryTransactionViewQueryObject.whereClause(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventoryTransactionView, fieldStr(WHSInventoryTransactionView, Archived)),
                    new SysDaValueExpression(NoYes::NO))
                .and(filterByInventoryTransactionOriginIdAndTypeExpression));
        }

        workInventTransQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventoryTransactionViewQueryObject);

        return workInventTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionQueryByWarehouseInventoryTransactions construct()
    {
        return new WHSWorkInventoryTransactionQueryByWarehouseInventoryTransactions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>