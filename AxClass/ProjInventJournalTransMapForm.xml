<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInventJournalTransMapForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjInventJournalTransMapForm</c> class initializes and validates project fields on forms
///    with a project tab on it.
/// </summary>
public class ProjInventJournalTransMapForm
{
    ProjInventJournalTransMap projInventJournalTransMap;
    Common                    childBuffer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumberFieldName</Name>
				<Source><![CDATA[
    protected fieldName activityNumberFieldName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostAmount</Name>
				<Source><![CDATA[
    CostAmount calcCostAmount(InventQty  _qty   = intMin())
    {
        InventQty qty = _qty;

        if (qty   == intMin())
        {
            qty   = this.getQtyField();
            if (projInventJournalTransMap.ProjInventJournalTransMap::unitOfMeasureSymbol())
            {
                qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.getItemIdField(),
																							this.getInventDimIdField(),
																							this.getQtyField(),
																							projInventJournalTransMap.ProjInventJournalTransMap::unitOfMeasureSymbol(),
																							this.inventTable().inventUnitId(),
																							NoYes::Yes);
            }
        }

        // Calculate the cost amount based on the price unit
        return PriceDisc::price2Amount(projInventJournalTransMap.ProjCostPrice,
                                       this.priceUnit(),
                                       0,
                                       qty,
                                       qty,
                                       this.getProjCostMarkupField(),
                                       0,
                                       '',
                                       projInventJournalTransMap.ProjCostAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjSalesPrice</Name>
				<Source><![CDATA[
    ProjSalesPriceCost calcProjSalesPrice(InventQtyJournal  _qty = intMin())
    {
        ProjSalesPriceCost  projSalesPriceCost;

        if ((this.getProjIdField()) && (this.getItemIdField()))
        {
            InventQtyJournal    qty = _qty;
            if (qty == intMin())
            {
                qty = this.getQtyField();
            }

            PriceDiscParameters parameters = this.createAndInitPriceDiscParameters(qty);

            PriceDisc priceDisc = this.createPriceDiscInstance(parameters);

            if (! priceDisc.findPrice(ProjTable::findPriceGroup(this.projTable().ProjId)))
            {
                priceDisc.findItemPrice();
            }

            projSalesPriceCost = priceDisc.price();
        }

        return projSalesPriceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_quantity">A <c>Qty</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(Qty _quantity)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.getItemIdField());
        parameters.parmInventDim(this.inventDim());
        parameters.parmUnitID(projInventJournalTransMap.ProjInventJournalTransMap::unitOfMeasureSymbol());
        parameters.parmPriceDiscDate(this.getTransDateField());
        parameters.parmQty(_quantity);
        parameters.parmAccountNum(this.projTable().CustAccount);
        parameters.parmCurrencyCode(this.projTable().currencyId());

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetUnitField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the unit ID is to be initialized from inventory module parameters.
    /// </summary>
    /// <returns>
    /// true if unit ID is to be initialized from inventory module parameters; otherwise, false.
    /// </returns>
    protected boolean canSetUnitField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the ActivityNumber exists and associated to Project.
    /// </summary>
    /// <returns>
    ///     true if the ActivityNumber exists and associated to Project; otherwise, false.
    /// </returns>
    protected boolean checkActivity()
    {
        boolean ret = true;

        if (this.getActivityNumberField())
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.getProjIdField(), this.getActivityNumberField());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategoryId</Name>
				<Source><![CDATA[
    public boolean checkProjCategoryId()
    {
        ProjCategory        projCategory;
        boolean             ret = true;

        if (projInventJournalTransMap.ProjCategoryId)
        {
            projCategory = ProjCategory::find(projInventJournalTransMap.ProjCategoryId);

            if (this.getItemIdField())
            {
                if (projCategory.CategoryType != ProjCategoryType::Item)
                {
                    ret = checkFailed(strfmt("@SYS54897",projInventJournalTransMap.ProjCategoryId)) && ret;
                }
            }
            else if (projCategory.CategoryType == ProjCategoryType::Revenue)
            {
                ret = checkFailed(strfmt("@SYS54897",projInventJournalTransMap.ProjCategoryId)) && ret;
            }

            ret = projCategory.validateIfInactiveAllowed() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    public boolean checkProjId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    private boolean checkReqActivity()
    {
        if (this.isActivityNumberRequired() && (!this.getActivityNumberField()))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActivityNumberRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the ActivityNumber is required for the transaction.
    /// </summary>
    /// <returns>
    ///     Yes if the ActivityNumber is required; otherwise, No.
    /// </returns>
    public RequireActivity isActivityNumberRequired()
    {
        switch (projInventJournalTransMap.TableId)
        {
            case tableNum(PurchReqLine):
                return ProjTable::checkRequireActivity(this.getProjIdField(), tableNum(PurchReqLine), projInventJournalTransMap.ProjCategoryId);

            case tableNum(PurchRFQCaseLine):
                return ProjTable::checkRequireActivity(this.getProjIdField(), tableNum(PurchRFQCaseLine), projInventJournalTransMap.ProjCategoryId);

            case tableNum(PurchRFQLine):
                return ProjTable::checkRequireActivity(this.getProjIdField(), tableNum(PurchRFQLine), projInventJournalTransMap.ProjCategoryId);

            default:
                return ProjTable::checkRequireActivity(this.getProjIdField(), tablenum(ProjItemTrans), projInventJournalTransMap.ProjCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedActivityNumberPost</Name>
				<Source><![CDATA[
    void fieldModifiedActivityNumberPost()
    {
        this.initFromProjActivity(ProjActivity::find(this.getActivityNumberField()));
        this.fieldModifiedProjCatetoryIdPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventDimFieldsPost</Name>
				<Source><![CDATA[
    void fieldModifiedInventDimFieldsPost(InventDim _inventDim, fieldId _dimFieldId)
    {
        this.setInventDimField(_inventDim, _dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedIsProjectPost</Name>
				<Source><![CDATA[
    void fieldModifiedIsProjectPost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedItemIdPost()
    {
        ProjTable       projTable;
        InventTable     inventTable;
        PriceMarkup     markUpDummy;
        PriceUnit       salesUnitDummy;

        void journalSetItemId()
        {
            if (this.getItemIdField() && this.canSetUnitField())
            {
                projInventJournalTransMap.ProjInventJournalTransMap::setUnitField(this.inventTableModuleSales().UnitId);
            }

            projTable = this.projTable();
            inventTable = this.inventTable();
            // use new dimension merge logic

            this.setDimensionField(inventTable.mergeDimension(projTable.DefaultDimension));

            if (this.getItemIdField())
            {
                projInventJournalTransMap.ProjTaxItemGroupId = ProjParameters::taxItemGroupItem(projInventJournalTransMap.ProjCategoryId, this.getItemIdField());

                if (ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(projTable))
                {
                    projInventJournalTransMap.ProjSalesPrice   = 0;
                }
                else
                {
                    [projInventJournalTransMap.ProjSalesPrice,
                     salesUnitDummy,
                     markUpDummy]                           = inventTable.salesPriceAgreement(
                                                              this.getTransDateField(),
                                                              this.inventDim(),
                                                              this.getQtyField(),
                                                              inventTable.inventUnitId(),
                                                              projTable.CustAccount,
                                                              projTable.currencyId(),
                                                              ProjTable::findPriceGroup(projTable.ProjId));
                }
            }
        }
        ;

        journalSetItemId();

        this.initFromInventTable(this.inventTable());

        if (!projInventJournalTransMap.ProjLinePropertyId)
        {
            projInventJournalTransMap.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.getProjIdField(),projInventJournalTransMap.ProjCategoryId);
        }

        projInventJournalTransMap.ProjTaxItemGroupId = ProjParameters::taxItemGroupItem(projInventJournalTransMap.ProjCategoryId,this.getItemIdField());

        if (this.getProjIdField())
        {
            this.setProjSalesPrice(this.projTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjCatetoryIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProjCatetoryIdPost()
    {
        ;

        if (!projInventJournalTransMap.ProjLinePropertyId)
        {
            projInventJournalTransMap.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(this.getProjIdField(),projInventJournalTransMap.ProjCategoryId);
        }

        projInventJournalTransMap.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(projInventJournalTransMap.ProjCategoryId,this.getItemIdField());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the LinePropertyId and TaxItemGroupId
    /// </summary>
    void fieldModifiedProjCategoryId()
    {
        projInventJournalTransMap.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(this.getProjIdField(), projInventJournalTransMap.ProjCategoryId);
        projInventJournalTransMap.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(projInventJournalTransMap.ProjCategoryId, this.getItemIdField());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProjIdPost()
    {
        ProjTable   projTable = this.projTable();

        this.initFromProjTable(this.projTable());
        this.setProjSalesPrice(this.projTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjProdPostingTypePost</Name>
				<Source><![CDATA[
    void fieldModifiedProjProdPostingTypePost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjSalesCurrencyIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProjSalesCurrencyIdPost()
    {
        this.setProjSalesPrice(this.projTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPost</Name>
				<Source><![CDATA[
    void fieldModifiedQtyPost()
    {
        if (projInventJournalTransMap.ProjCostPrice)
        {
            projInventJournalTransMap.ProjCostAmount = this.calcCostAmount();
        }

        if (this.getProjIdField())
        {
            this.setProjSalesPrice(this.projTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProcurementCategoryPost</Name>
				<Source><![CDATA[
    void fieldModifiedProcurementCategoryPost()
    {
        this.setProjSalesPrice(this.projTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityNumberField</Name>
				<Source><![CDATA[
    protected smmActivityNumber getActivityNumberField()
    {
        return projInventJournalTransMap.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCurrencyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the code of currency which the cost is expressed in.
    /// </summary>
    /// <returns>
    /// The code of currency which the cost is expressed in.
    /// </returns>
    protected CurrencyCode getCostCurrencyId()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the procurement or sales category
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement or sales category.
    /// </param>
    /// <returns>
    /// true if the project category has been initialized; otherwise, false.
    /// </returns>
    protected boolean getDefaultProjectGlobalCategory(EcoResCategory _ecoResCategory)
    {
        boolean         ret;
        ProjCategoryId  projCategoryId;

        projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory.RecId);
        if (projCategoryId)
        {
            projInventJournalTransMap.ProjCategoryId = projCategoryId;
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionField</Name>
				<Source><![CDATA[
    protected DimensionDefault getDimensionField()
    {
        return projInventJournalTransMap.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimIdField</Name>
				<Source><![CDATA[
    protected InventDimId getInventDimIdField()
    {
        return projInventJournalTransMap.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdField</Name>
				<Source><![CDATA[
    protected ItemId getItemIdField()
    {
        return projInventJournalTransMap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCostMarkupField</Name>
				<Source><![CDATA[
    protected CostMarkup getProjCostMarkupField()
    {
        return projInventJournalTransMap.ProjCostMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjIdField</Name>
				<Source><![CDATA[
    protected ProjId getProjIdField()
    {
        return projInventJournalTransMap.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjPriceUnitField</Name>
				<Source><![CDATA[
    protected PriceUnit getProjPriceUnitField()
    {
        return projInventJournalTransMap.ProjPriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyField</Name>
				<Source><![CDATA[
    protected InventQtyJournal getQtyField()
    {
        return projInventJournalTransMap.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDateField</Name>
				<Source><![CDATA[
    protected JournalTransDate getTransDateField()
    {
        return projInventJournalTransMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project fields based on the procurement or sales category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement or sales category.
    /// </param>
    void initFromEcoResCategory(EcoResCategory _ecoResCategory)
    {
        InventTable inventTable;
        boolean     ret;

        if (this.getItemIdField())
        {
            inventTable = InventTable::find(this.getItemIdField());
        }

        if (!inventTable.ProjCategoryId && _ecoResCategory)
        {
            ret = this.getDefaultProjectGlobalCategory(_ecoResCategory);
            if (ret)
            {
                this.fieldModifiedProjCatetoryIdPost();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void initFromInventTable(InventTable  inventTable)
    {
        InventDim                       inventDim;
        InventTableModule               inventTableModule;

        //Category
        projInventJournalTransMap.ProjCategoryId = inventTable.ProjCategoryId ? inventTable.ProjCategoryId : projInventJournalTransMap.ProjCategoryId;

        //Cost price
        inventTableModule = this.inventTableModuleInvent();
        if (this.getInventDimIdField())
        {
            inventDim = InventDim::find(this.getInventDimIdField());
        }
        this.setCostPrice(this.getInventDimIdField(), inventDim, inventTableModule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    void initFromProdBOM(ProdBOM  prodBOM)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    void initFromProdTable(ProdTable _prodTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        projInventJournalTransMap.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable       _projTable)
    {
        ;

        projInventJournalTransMap.ProjSalesCurrencyId    = _projTable.currencyId();
        this.setDimensionField(_projTable.DefaultDimension);

        if (!projInventJournalTransMap.ProjLinePropertyId)
        {
            projInventJournalTransMap.ProjLinePropertyId     = ProjLinePropertySetup::findLinePropertyId(this.getProjIdField(),projInventJournalTransMap.ProjCategoryId);
        }

        projInventJournalTransMap.ProjTaxGroupId         = ProjParameters::taxGroupInvoice(this.getProjIdField());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSplitProdTable</Name>
				<Source><![CDATA[
    void initFromSplitProdTable(ProdTable _prodTable) //old production
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdBOM</Name>
				<Source><![CDATA[
    void initProdBOM()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValuePost</Name>
				<Source><![CDATA[
    void initValuePost()
    {
        if (!projInventJournalTransMap.ProjCategoryId)
        {
            projInventJournalTransMap.ProjCategoryId = ProjParameters::find().ItemCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPost</Name>
				<Source><![CDATA[
    void insertPost()
    {
        if (this.getProjIdField() && ! projInventJournalTransMap.ProjTransId)
        {
            projInventJournalTransMap.ProjTransId = ProjParameters::newTransId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.getInventDimIdField(),_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable()
    {
        return InventTable::find(this.getItemIdField());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleInvent</Name>
				<Source><![CDATA[
    public InventTableModule inventTableModuleInvent()
    {
        return InventTableModule::find(this.getItemIdField(), ModuleInventPurchSales::Invent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleSales</Name>
				<Source><![CDATA[
    public InventTableModule inventTableModuleSales()
    {
        return InventTableModule::find(this.getItemIdField(), ModuleInventPurchSales::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateProjCategoryId</Name>
				<Source><![CDATA[
    protected boolean mustValidateProjCategoryId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateProjLinePropertyId</Name>
				<Source><![CDATA[
    protected boolean mustValidateProjLinePropertyId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateProjSalesCurrencyId</Name>
				<Source><![CDATA[
    protected boolean mustValidateProjSalesCurrencyId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateProjSalesUnitID</Name>
				<Source><![CDATA[
    protected boolean mustValidateProjSalesUnitID()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateReqActivity</Name>
				<Source><![CDATA[
    protected boolean mustValidateReqActivity()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateUnitOfMeasure</Name>
				<Source><![CDATA[
    protected boolean mustValidateUnitOfMeasure()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProjInventJournalTransMap _projInventJournalTransMap, Common _childBuffer = null)
    {
        projInventJournalTransMap  = _projInventJournalTransMap;
        childBuffer = _childBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildBuffer</Name>
				<Source><![CDATA[
    public void parmChildBuffer(Common _childBuffer)
    {
        ;
        childBuffer = _childBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInventJournalTransMap</Name>
				<Source><![CDATA[
    public void parmProjInventJournalTransMap(ProjInventJournalTransMap _projInventJournalTransMap)
    {
        ;
        projInventJournalTransMap = _projInventJournalTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    PriceUnit  priceUnit()
    {
        return (this.getProjPriceUnitField() ? this.getProjPriceUnitField() : this.inventTableModuleInvent().PriceUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryIdFieldName</Name>
				<Source><![CDATA[
    protected fieldName projCategoryIdFieldName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIdFieldName</Name>
				<Source><![CDATA[
    protected fieldName projIdFieldName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable()
    {
        return ProjTable::find(this.getProjIdField());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityNumberField</Name>
				<Source><![CDATA[
    protected void setActivityNumberField(smmActivityNumber _activityNumber)
    {
        projInventJournalTransMap.ActivityNumber = _activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPrice</Name>
				<Source><![CDATA[
    void setCostPrice(
        InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
        InventDim               _inventDim                  = null, // set this parameter for better performance if avail
        InventTableModule       _inventTableModuleInvent    = null  // set this parameter for better performance if avail
        )
    {
        InventPriceMap      inventPriceMap;

        inventPriceMap = this.inventTable().inventCostPriceMap(_inventDimId ,_inventDim,_inventTableModuleInvent);

        projInventJournalTransMap.ProjCostPrice = inventPriceMap.price();
        this.setProjPriceUnitField(inventPriceMap.priceUnit());
        this.setProjCostMarkupField(inventPriceMap.markup());
        projInventJournalTransMap.ProjCostAmount = this.calcCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionField</Name>
				<Source><![CDATA[
    protected void setDimensionField(DimensionDefault _dimension)
    {
        if (projInventJournalTransMap.TableId != tablenum(PurchReqLine))
        {
            projInventJournalTransMap.DefaultDimension = projInventJournalTransMap.ProjInventJournalTransMap::copyDimension(_dimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimField</Name>
				<Source><![CDATA[
    void setInventDimField(InventDim _inventDim, fieldId _dimFieldId)
    {
        if (this.inventTable().ItemDimCostPrice && InventDim::isFieldIdProductDimension(_dimFieldId))
        {
            this.setCostPrice('', _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCostMarkupField</Name>
				<Source><![CDATA[
    protected void setProjCostMarkupField(CostMarkup _projCostMarkup)
    {
        projInventJournalTransMap.ProjCostMarkup = _projCostMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjIdField</Name>
				<Source><![CDATA[
    protected void setProjIdField(ProjId _projId)
    {
        projInventJournalTransMap.ProjId = _projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjPriceUnitField</Name>
				<Source><![CDATA[
    protected void setProjPriceUnitField(PriceUnit _projPriceUnit)
    {
        ;
        projInventJournalTransMap.ProjPriceUnit = _projPriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    public void setProjSalesPrice(ProjTable _projTable)
    {
        ProjCategory    category;
        boolean         priceFound;

        if (!_projTable ||
            this.getProjIdField() == '' ||
            ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(_projTable))
        {
            projInventJournalTransMap.ProjSalesPrice = 0;
        }
        else
        {
            if (ProjParameters::find().DefaultCostPriceAsSalesPrice)
            {
                if (projInventJournalTransMap.ProjSalesCurrencyId != this.getCostCurrencyId())
                {
                    projInventJournalTransMap.ProjSalesPrice =  ExchangeRateHelper::curPrice2CurPrice(projInventJournalTransMap.ProjCostPrice,
                                                                                                        this.getCostCurrencyId(),
                                                                                                        projInventJournalTransMap.ProjSalesCurrencyId,
                                                                                                        projInventJournalTransMap.TransDate,
                                                                                                        true);
                }
                else
                {
                    projInventJournalTransMap.ProjSalesPrice =  projInventJournalTransMap.ProjCostPrice;
                }
            }
            else
            {
                if (projInventJournalTransMap.TableId == tableNum(PurchReqLine)
					&& projInventJournalTransMap.BudgetReservationLine_PSN != 0
					&& PublicSectorUtils::isBudgetReservationEnabled())
                {
                    return;
                }

                ProjPriceParameters priceParams;
                category = ProjCategory::find(projInventJournalTransMap.ProjCategoryId);
                switch (category.CategoryType)
                {
                    case ProjCategoryType::Hour:
                        priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
							projInventJournalTransMap.ProjId,
                            0,
                            projInventJournalTransMap.ProjCategoryId,
                            projInventJournalTransMap.ProjLinePropertyId,
                            projInventJournalTransMap.ProjCostPrice,
                            projInventJournalTransMap.ProjSalesCurrencyId);
                        [projInventJournalTransMap.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                        break;

                    case ProjCategoryType::Cost:
                        priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
							projInventJournalTransMap.ProjId,
                            0,
                            projInventJournalTransMap.ProjCategoryId,
                            projInventJournalTransMap.ProjCostPrice,
                            this.getCostCurrencyId(),
                            projInventJournalTransMap.ProjSalesCurrencyId);
                        [projInventJournalTransMap.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                        break;

                    default:
                        projInventJournalTransMap.ProjSalesPrice = this.retrieveProjSalesPrice(_projTable);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProjSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project sales price for the given <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTable">A <c>ProjTable</c> record.</param>
    /// <returns>A <c>PriceCur</c> value.</returns>
    protected PriceCur retrieveProjSalesPrice(ProjTable _projTable)
    {
        PriceDiscParameters parameters = this.createAndInitPriceDiscParameters(this.getQtyField());
        parameters.parmAccountNum(_projTable.CustAccount);
        parameters.parmCurrencyCode(_projTable.currencyId());

        PriceDisc priceDisc = this.createPriceDiscInstance(parameters);

        if (!priceDisc.findPrice(ProjTable::findPriceGroup(_projTable.ProjId)))
        {
            priceDisc.findItemPrice();
        }

        return priceDisc.price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDateField</Name>
				<Source><![CDATA[
    protected void setTransDateField(JournalTransDate _transDate)
    {
        projInventJournalTransMap.TransDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateFieldName</Name>
				<Source><![CDATA[
    protected fieldName transDateFieldName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateTableId</Name>
				<Source><![CDATA[
    protected tableId transDateTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldPost</Name>
				<Source><![CDATA[
    public boolean validateFieldPost(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean     ret = true;

        switch (_fieldName)
        {
            case this.projIdFieldName():
                ret = this.checkProjId() && ret;
                break;

            case this.projCategoryIdFieldName():
                if (this.mustValidateProjCategoryId())
                {
                    ret = this.checkProjCategoryId() && ret;
                }
                break;

            case this.activityNumberFieldName():
                ret = this.checkActivity() && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePost</Name>
				<Source><![CDATA[
    public boolean validateWritePost()
    {
        boolean             ret = true;
        ProjValCheckTrans   projValCheckTrans;

        if (! this.getProjIdField())
        {
            ret = checkFailed("@SYS74373");
        }

        if (this.mustValidateProjLinePropertyId() && ! projInventJournalTransMap.ProjLinePropertyId)
        {
            ret = checkFailed("@SYS76857") && ret;
        }

        if (this.mustValidateUnitOfMeasure() && ! projInventJournalTransMap.UnitOfMeasure)
        {
            ret = checkFailed("@SYS76858") && ret;
        }

        if (this.mustValidateProjSalesUnitID() && ! projInventJournalTransMap.ProjSalesUnitId)
        {
            ret = checkFailed("@SYS76858") && ret;
        }

        if (this.mustValidateProjSalesCurrencyId() && ! projInventJournalTransMap.ProjSalesCurrencyId)
        {
            ret = checkFailed("@SYS76866") && ret;
        }

        ret = this.checkProjId() && ret;

        if (this.mustValidateProjCategoryId())
        {
            if (!projInventJournalTransMap.ProjCategoryId)
            {
                ret = checkFailed("@SYS76856") && ret;
            }

            ret = this.checkProjCategoryId() && ret;
            
            projValCheckTrans = new ProjValCheckTrans();
            ret = projValCheckTrans.validateMandatory(projInventJournalTransMap) && ret;
        }

        ret = this.checkActivity() && ret;

        if (this.mustValidateReqActivity() && ! this.checkReqActivity())
        {
            ret = checkFailed("@SYS104471") && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjInventJournalTransMapForm construct(ProjInventJournalTransMap _projInventJournalTransMap, Common _childBuffer = null)
    {
        ProjInventJournalTransMapForm   projInventJournalTransMapForm;

        switch (_projInventJournalTransMap.TableId)
        {
            case tablenum(ProdTable):
                projInventJournalTransMapForm = new ProjInventJourTransMapForm_ProdTable(_projInventJournalTransMap, null);
                break;

            case tablenum(ProdBOM):
                projInventJournalTransMapForm = new ProjInventJourTransMapForm_ProdBOM(_projInventJournalTransMap, null);
                break;

            case tablenum(ProdJournalBOM):
                projInventJournalTransMapForm = new ProjInvJourTransMapForm_ProdJourBOM(_projInventJournalTransMap, null);
                break;

            case tablenum(ProdTableProj):
                if (_childBuffer.TableId == tablenum(ProdTable))
                {
                    projInventJournalTransMapForm = new ProjInvJourTransMapForm_ProdInvent(_projInventJournalTransMap, _childBuffer);
                }
                else
                {
                    throw error("@SYS18626");
                }
                break;

            case tablenum(ProdParmSplit):
                projInventJournalTransMapForm = new ProjInvJourTransMapForm_ProdSplit(_projInventJournalTransMap, null);
                break;

            case tablenum(PurchReqLine):
                projInventJournalTransMapForm = new ProjInventJourTransMapForm_PurchRqLn(_projInventJournalTransMap, null);
                break;

            case tablenum(PurchRFQCaseLine):
                projInventJournalTransMapForm = new ProjInventJourTransMapForm_RFQCaseLn(_projInventJournalTransMap, null);
                break;

            case tablenum(PurchRFQLine):
                projInventJournalTransMapForm = new ProjInventJourTransMapForm_RFQLine(_projInventJournalTransMap, null);
                break;

            default:
                throw error("@SYS18626");
        }

        return projInventJournalTransMapForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrCreateProdTableProj</Name>
				<Source><![CDATA[
    public static void updateOrCreateProdTableProj(ProdTable _prodTable, ProjItemTypeProdTable _projItemTypeProdTable, JournalTransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), InventQty _qty = 0)
    {
        ProdTableProj      prodTableProj;
        ProjInventJournalTransMapForm   projInventJournalTransMapForm;

        void setFields()
        {
            prodTableProj.TransDate = _transDate;
            if (_qty)
            {
                prodTableProj.Qty = _qty;
            }
        }
        ;

        prodTableProj = _prodTable.prodTableProj(_projItemTypeProdTable, true);
        if (!prodTableProj)
        {
            prodTableProj.clear();
            prodTableProj.ProdId = _prodTable.ProdId;
            prodTableProj.Type = _projItemTypeProdTable;
            setFields();

            projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(prodTableProj, _prodTable);

            projInventJournalTransMapForm.initValuePost();
            projInventJournalTransMapForm.initFromProdTable(_prodTable);
            projInventJournalTransMapForm.initFromInventTable(InventTable::find(_prodTable.ProdId));
            projInventJournalTransMapForm.fieldModifiedItemIdPost();

            prodTableProj.insert();
        }
        else
        {
            setFields();
            projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(prodTableProj, _prodTable);
            projInventJournalTransMapForm.fieldModifiedQtyPost();
            prodTableProj.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>