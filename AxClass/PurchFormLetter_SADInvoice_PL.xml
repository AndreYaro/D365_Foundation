<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_SADInvoice_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFormLetter_SADInvoice_PL</c> class handles SAD processing
/// </summary>
final class PurchFormLetter_SADInvoice_PL extends PurchFormLetter_Invoice implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns document date
    /// </summary>
    /// <returns>
    /// Current system date
    /// </returns>
    public DocumentDate documentDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNum</Name>
				<Source><![CDATA[
    public Num documentNum()
    {
        return PlSADTable::find(this.parmSADNumberCode_PL()).SADNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PlSAD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes exchange rate
    /// </summary>
    /// <returns>
    /// Exchange rate
    /// </returns>
    protected VendExchRate exchRateInit()
    {
        return this.fixedExchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    protected VendExchRate fixedExchRate()
    {
        return purchFormLetterContract.parmSADExchRate_PL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enforces fixed exchange rate
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    protected FixedExchRate fixedExchRateInit()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSADExchRate_PL</Name>
				<Source><![CDATA[
    protected void initSADExchRate_PL(VendInvoiceJour _vendInvoiceJour)
    {
        _vendInvoiceJour.ExchRate = this.parmSADExchRate_PL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReceiptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns purchase receipt date
    /// </summary>
    /// <returns>
    /// SAD date of VAT register
    /// </returns>
    private TransDate purchReceiptDate()
    {
        return PlSADTable::find(this.parmSADNumberCode_PL()).VATDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.splitSADCosts_PL();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSADCosts_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates SAD costs
    /// </summary>
    /// <returns>
    /// true if allocation is possible; otherwise returns false
    /// </returns>
    private boolean splitSADCosts_PL()
    {
        boolean              ret = false;
        PlSADParmCalculation sadParmCalculation;

        if (this.validateSplitSADCosts_PL())
        {
            sadParmCalculation = new PlSADParmCalculation(PlSADTable::find(this.parmSADNumberCode_PL()), this.parmId());
            sadParmCalculation.run();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        return super(_calledFrom) && this.validateSplitSADCosts_PL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSplitSADCosts_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the allocation of SAD costs
    /// </summary>
    /// <returns>
    /// true if allocation is possible; otherwise returns false
    /// </returns>
    private boolean validateSplitSADCosts_PL()
    {
        PlSADParmCalculation sadParmCalculation;

        sadParmCalculation = new PlSADParmCalculation(PlSADTable::find(this.parmSADNumberCode_PL()), this.parmId());

        return sadParmCalculation.checkVendInvoiceInfoLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@GLS109193";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSADInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of PurchFormLetter_SADInvoice_PL class
    /// </summary>
    /// <param name="_className">
    /// Service class name
    /// </param>
    /// <param name="_methodName">
    /// Service method name
    /// </param>
    /// <param name="_executionMode">
    /// Execution mode
    /// </param>
    /// <returns>
    /// New instance of PurchFormLetter_SADInvoice_PL class
    /// </returns>
    static public PurchFormLetter_SADInvoice_PL newSADInvoice(
        IdentifierName            _className     = classStr(FormletterService),
        IdentifierName            _methodName    = methodStr(FormletterService, postPurchaseOrderSAD),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00031, funcName());

        PurchFormLetter_SADInvoice_PL formletter = new PurchFormLetter_SADInvoice_PL(_className, _methodName, _executionMode);
        formletter.init();
        return formletter;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>