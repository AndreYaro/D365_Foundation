<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerVendInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRBrokerVendInvoice</c> class creates and posts vendor invoices for brokerage.
/// </summary>
class MCRBrokerVendInvoice
{
    Amount totalAmount;
    Num invoiceId;
    MCRBrokerVendAccount brokerAccount;
    VendInvoiceInfoTable vendInvoiceInfoTable;
    Map                  vendorContractIdToInvoiceTableMap;
    InvoiceDate          invoiceDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>finalizeVendorInvoice</Name>
				<Source><![CDATA[
    public void finalizeVendorInvoice(boolean postInvoice = true)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        MCRBrokerClaim mcrBrokerClaim;
        MCRBrokerAccrual mcrBrokerAccrual;

        if (vendInvoiceInfoTable)
        {
            ttsbegin;

            vendInvoiceInfoTable.InclTax = false;
            vendInvoiceInfoTable.DocumentDate = invoiceDate;
            vendInvoiceInfoTable.update();

            while select forupdate vendInvoiceInfoLine
                order by RecId asc
                    where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                    && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                join forupdate mcrBrokerClaim
                    where mcrBrokerClaim.ClaimId == vendInvoiceInfoLine.Description
                join mcrBrokerAccrual
                    where mcrBrokerAccrual.RecId == mcrBrokerClaim.BrokerAccrualRecID
            {
                // The expense related dimension should go to the line
                vendInvoiceInfoLine.DefaultDimension = mcrBrokerAccrual.DefaultDimension;
                this.setVendInvoiceLineTax(vendInvoiceInfoLine, mcrBrokerAccrual);
                vendInvoiceInfoLine.update();

                mcrBrokerClaim.VendInvoiceInfoTableTableRefId = vendInvoiceInfoTable.TableRefId;
                mcrBrokerClaim.VendInvoiceInfoTableParmId = vendInvoiceInfoTable.ParmId;
                mcrBrokerClaim.update();

                // Fully distribute the source document line
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(vendInvoiceInfoLine,
                                false, SourceDocumentLineAccountingStatus::FullyDistributed);
            }

            // Post the saved vendor invoice
            if (postInvoice)
            {
                VendInvoicePaymentAuthorizationTask::postSavedInvoice(vendInvoiceInfoTable);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendInvoiceLineTax</Name>
				<Source><![CDATA[
    private void setVendInvoiceLineTax(VendInvoiceInfoLine _vendInvoiceInfoLine, MCRBrokerAccrual _mcrBrokerAccrual)
    {
        MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Cust, _mcrBrokerAccrual.MiscChargeCode);

        if (markupTable 
            && markupTable.VendType == MarkupType::LedgerAccount 
            && markupTable.CustType == MarkupType::LedgerAccount)
        {
            _vendInvoiceInfoLine.TaxGroup = VendTable::find(_mcrBrokerAccrual.BrokerID).TaxGroup;
            TaxItemGroupHeading taxItemGroupHeading = EcoResCategory::getProcurementCategoryItemTaxGroup(_vendInvoiceInfoLine.ProcurementCategory, CompanyInfo::current());
            _vendInvoiceInfoLine.TaxItemGroup = taxItemGroupHeading.TaxItemGroup ? taxItemGroupHeading.TaxItemGroup : markupTable.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        if (invoiceId == '')
        {
            invoiceId = MCRBrokerVendInvoice::getVendorInvoiceNumberSeq().num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates pending vendor invoice with one line.
    /// </summary>
    /// <param name = "_mcrBrokerClaim">
    /// Borker claim record.
    /// </param>
    public void createVendorInvoice(MCRBrokerClaim _mcrBrokerClaim)
    {
        SalesVendorInvoiceInfoCreator vendInvoiceInfoCreator;
        VendInvoiceAccount vendInvoiceAccount;
        str                vendorContractIdKey;
        VendParameters vendParameters = VendParameters::find();

        if (!vendParameters.MCRBrokerProcurementCategory)
        {
            throw error("@SYP4881861");
        }

        vendInvoiceAccount = VendTable::find(brokerAccount).InvoiceAccount;
        if (! vendInvoiceAccount)
        {
            vendInvoiceAccount = brokerAccount;
        }

        vendInvoiceInfoCreator = SalesVendorInvoiceInfoCreator::construct();
        vendInvoiceInfoCreator.parmInvoiceAccount(vendInvoiceAccount);
        vendInvoiceInfoCreator.parmOrderAccount(brokerAccount);
        vendInvoiceInfoCreator.parmInvoiceId(invoiceId);
        vendInvoiceInfoCreator.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        vendInvoiceInfoCreator.parmCurrencyCode(Ledger::accountingCurrency(CompanyInfo::current()));
        vendInvoiceInfoCreator.parmDocumentStatus(DocumentStatus::Invoice);

        vendInvoiceInfoCreator.parmLineAmount(_mcrBrokerClaim.AmountMST);
        vendInvoiceInfoCreator.parmLineProcurementCategory(vendParameters.MCRBrokerProcurementCategory);
        vendInvoiceInfoCreator.parmInvoiceLineDescription(_mcrBrokerClaim.ClaimId);

        if (!vendorContractIdToInvoiceTableMap)
        {
            vendorContractIdToInvoiceTableMap = new Map(Types::String, Types::Record);
        }

        MCRBrokerAccrual mcrBrokerAccrual = MCRBrokerAccrual::findByRecID(_mcrBrokerClaim.BrokerAccrualRecID);
        vendorContractIdKey = mcrBrokerAccrual.BrokerID + '#' + mcrBrokerAccrual.BrokerContractID;
        
        if (vendorContractIdToInvoiceTableMap.exists(vendorContractIdKey))
        {
            vendInvoiceInfoCreator.parmVendInvoiceTable(vendorContractIdToInvoiceTableMap.lookup(vendorContractIdKey));
        }    

        vendInvoiceInfoTable = vendInvoiceInfoCreator.createVendorInvoiceInfoWithOneLine();
        if (!vendorContractIdToInvoiceTableMap.exists(vendorContractIdKey))
        {
            vendorContractIdToInvoiceTableMap.insert(vendorContractIdKey, vendInvoiceInfoTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBrokerAccount</Name>
				<Source><![CDATA[
    public MCRBrokerVendAccount parmBrokerAccount(MCRBrokerVendAccount _brokerAccount = brokerAccount)
    {
        brokerAccount = _brokerAccount;

        return brokerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDocuDate</Name>
				<Source><![CDATA[
    public InvoiceDate parmInvoiceDocuDate(InvoiceDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;
        
        return invoiceDate;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public Num parmInvoiceId(Num _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static MCRBrokerVendInvoice construct()
    {
        return new MCRBrokerVendInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSeq</c> object for the vendor invoice number sequence
    /// defined in the Payroll parameters.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeq</c> object for the vendor invoice number sequence.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>NumberSeq</c> object could not be initialized.
    /// </exception>
    protected static NumberSeq getVendorInvoiceNumberSeq()
    {
        NumberSeq numberSeq;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable numberSequenceTable;

        numberSequenceReference = VendParameters::MCRNumRefBrokerClaimInvoice();

        numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceTable)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }

        if (numberSeq == null)
        {
            throw error(strFmt("@GLS111556", new DictType(extendedTypeNum(MCRBrokerClaimInvoice)).label(), "@SYS336057"));
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInvoiceDocumentFromParams</Name>
				<Source><![CDATA[
    public static MCRBrokerVendInvoice newInvoiceDocumentFromParams(MCRBrokerVendInvoiceParameters _mcrBrokerVendInvoiceParameters)
    {
        MCRBrokerVendInvoice brokerVendInvoice = MCRBrokerVendInvoice::newInvoiceDocument(_mcrBrokerVendInvoiceParameters.parmMCRBrokerVendAccount());

        brokerVendInvoice.parmInvoiceDocuDate(_mcrBrokerVendInvoiceParameters.parmInvoiceDate());

        return brokerVendInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInvoiceDocument</Name>
				<Source><![CDATA[
    public static MCRBrokerVendInvoice newInvoiceDocument(MCRBrokerVendAccount _brokerAccount)
    {
        MCRBrokerVendInvoice brokerVendInvoice;

        brokerVendInvoice = MCRBrokerVendInvoice::construct();

        brokerVendInvoice.parmBrokerAccount(_brokerAccount);

        brokerVendInvoice.init();

        return brokerVendInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>