<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingHourProdLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostControlPostingHourProdLine extends CostControlPostingHour
{
    ProdRouteProj           prodRouteProj;
    ProdRoute               prodRoute;

    ProdRouteProj           prodRouteProj_Orig;
    ProdRoute               prodRoute_Orig;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public smmActivityNumber activityNumber()
    {
        return prodRouteProj.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceAmount</Name>
				<Source><![CDATA[
    public PriceCur costPriceAmount(Qty _qty)
    {
        PriceCur        retAmount=0;
        ProdCalcTrans   prodCalcTrans;

        select prodCalcTrans
            order by CollectRefProdId, CollectRefLevel, LineNum, RecId
            where prodCalcTrans.IdRefTableId    == prodRoute.TableId
            &&    prodCalcTrans.IdRefRecId      == prodRoute.RecId
            &&    prodCalcTrans.CalcType        == prodRouteProj.CalcType;

        if (prodCalcTrans)
        {
            InventQtyConsumption consumptionSum = prodCalcTrans.consumptionSum();
            if (consumptionSum != 0)
            {
                retAmount = prodCalcTrans.costPriceSum() * _qty / consumptionSum;
            }
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty= this.openInTotal(prodRoute,prodRouteProj), TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;

        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
        this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

        if (ProjTable::find(prodRouteProj.ProjId).UseBudgeting)
        {
            ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodRouteProj);
            projBudgetTransactionLine.parmQty(_qty);
            projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.AmountMst);

            if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(),projBudgetTransactionLine.salesAmount()))
            {
                ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(costControlTransCommittedCost.ProjId,projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
            }
        }
        else
        {
            if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);

        costControlTransCommittedCost.initFromProdRouteProj(prodRouteProj);
        costControlTransCommittedCost.initFromProdRoute(prodRoute,prodRouteProj.CalcType);
        AmountCur amountCur = this.costPriceAmount(_qty);
        costControlTransCommittedCost.LineNum = this.lineNum();
        costControlTransCommittedCost.Amount = amountCur;
        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(costControlTransCommittedCost.Amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        
        return  costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;

        if (prodRoute.OprFinished == NoYes::Yes && prodRoute_Orig.OprFinished == NoYes::No)
            retActionType=ProjCommittedCostUpdateAction::Delete;

        else if (!prodRoute_Orig || !CostControlTransCommittedCost::findOpenedByProjTransID(prodRouteProj.ProjTransId))
            retActionType=ProjCommittedCostUpdateAction::Create;

        else if ((prodRoute_Orig.CalcProc!=0 && prodRoute.CalcProc==0 && prodRouteProj.CalcType==ItemCalcType::Process)
              ||(prodRoute_Orig.CalcSetUp!=0 && prodRoute.CalcSetUp==0 && prodRouteProj.CalcType==ItemCalcType::Setup)
              ||(prodRoute_Orig.CalcQty!=0 && prodRoute.CalcQty==0 && prodRouteProj.CalcType==ItemCalcType::Qty))
            retActionType=ProjCommittedCostUpdateAction::Delete;

        else if (this.openInTotal(prodRoute_Orig,prodRouteProj) != this.openInTotal(prodRoute,prodRouteProj)
              || CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId()).Qty != this.openInTotal(prodRoute,prodRouteProj))
                retActionType=ProjCommittedCostUpdateAction::UpdateReverse;

        //no match, return updateOnly
        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        prodRouteProj=childBuffer;
        prodRoute = buffer;
        if (prodRouteProj.orig())
            prodRouteProj_Orig=prodRouteProj.orig();
        if (prodRoute.orig())
            prodRoute_Orig=prodRoute.orig();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNum</Name>
				<Source><![CDATA[
    public LineNum lineNum()
    {
        LineNum         retLineNum=0;
        ProdCalcTrans   prodCalcTrans;
        select prodCalcTrans
            where prodCalcTrans.IdRefTableId    == prodRoute.TableId
            &&    prodCalcTrans.IdRefRecId      == prodRoute.RecId
            &&    prodCalcTrans.CalcType        == prodRouteProj.CalcType;

        if (prodCalcTrans)
            retLineNum=prodCalcTrans.LineNum-1;

        return retLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amount of a transaction.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount of the transaction; optional.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount of the transaction; optional.
    /// </param>
    /// <returns>
    ///    true if the cost and sales amounts can be reduced from the budget; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
    {
        boolean ret = true;

        if (actionType== ProjCommittedCostUpdateAction::Post)
        {
            ret =  false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        if (actionType== ProjCommittedCostUpdateAction::Post)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer,Common _childBuffer)
    {
        super(_buffer,_childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInTotal</Name>
				<Source><![CDATA[
    public Qty openInTotal(ProdRoute _prodRoute,ProdRouteProj _prodRouteProj)
    {
        ProdCalcTrans   prodCalcTrans;
        Qty             retQty;
        select sum (ConsumpVariable), sum(ConsumpConstant), sum (RealConsump) from prodCalcTrans
        group by CalcType
        where prodCalcTrans.IdRefTableId    == _prodRoute.TableId
        &&    prodCalcTrans.IdRefRecId      == _prodRoute.RecId
        &&    prodCalcTrans.CalcType        == _prodRouteProj.CalcType;

        // The estimated qty minus the qty in prodRoute feedback
        if (prodCalcTrans.CalcType == ItemCalcType::Process)
            retQty = ((prodCalcTrans.ConsumpVariable + prodCalcTrans.ConsumpConstant) - prodCalcTrans.RealConsump) - this.parmFinancial();

        else if (prodCalcTrans.CalcType == ItemCalcType::Setup)
            retQty = ((prodCalcTrans.ConsumpVariable + prodCalcTrans.ConsumpConstant) - prodCalcTrans.RealConsump) - this.parmFinancial();

        else if (prodCalcTrans.CalcType == ItemCalcType::Qty)
            retQty =  (prodCalcTrans.ConsumpVariable + prodCalcTrans.ConsumpConstant) - _prodRoute.qtyGood();

        if (retQty<0)
            retQty=0;

        return retQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdRoute</Name>
				<Source><![CDATA[
    public ProdRoute parmProdRoute(ProdRoute _prodRoute=prodRoute)
    {
        prodRoute=_prodRoute;
        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdRouteProj</Name>
				<Source><![CDATA[
    public ProdRouteProj parmProdRouteProj(ProdRouteProj _prodRouteProj=prodRouteProj)
    {
        prodRouteProj=_prodRouteProj;
        return prodRouteProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryId</Name>
				<Source><![CDATA[
    public RouteCostCategoryId projCategoryId()
    {
        RouteCostCategoryId  retCategoryId='';
        switch (prodRouteProj.CalcType)
        {
            case ItemCalcType::Process:
                retCategoryId = prodRoute.ProcessCategoryId;
                break;
            case ItemCalcType::Setup:
                retCategoryId = prodRoute.SetUpCategoryId;
                break;
            case ItemCalcType::Qty:
                retCategoryId = prodRoute.QtyCategoryId;
                break;
        }

        return retCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return prodRouteProj.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return this.openInTotal(prodRoute, prodRouteProj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;
        if (isInvoiced)
        {
            voucher = this.parmLedgerVoucher().lastVoucher();
            ledgerDimensionDefaultAccount = this.parmLedgerDimensionDefaultAccount();
            ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
        }

        while select forupdate costControlTransCommittedCost
            where costControlTransCommittedCost.ProjTransId == this.projTransId()
        {
            // Clear the open; if invoiced, set reverse =true
            if (isInvoiced)
            {
                if (!costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = voucher;
                    costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                }
            }

            if (costControlTransCommittedCost.Open ==NoYes::Yes)
            {
                costControlTransCommittedCost.Open = NoYes::No;
                costControlTransCommittedCost.Reverse = NoYes::No;
                costControlTransCommittedCost.update();

                CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount, ledgerTransDate);

                if (this.mustUpdateBudget() && ProjBudgetReductionHistory::existProjTransId(this.projTransId()))
                {
                    this.budgetUpdate(costControlTransCommittedCost.ProjId,ProjBudgetTransaction::construct(this.parmProdRouteProj()),ProjBudgetAdjustmentType::Increment);
                }

                if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                    this.forecastUpdate(costControlTransCommittedCost,
                                        -costControlTransCommittedCost.Qty,
                                        -costControlTransCommittedCost.Amount);
            }
            else
                costControlTransCommittedCost.update();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        CostControlTransCommittedCost   updateCCTCC;
        CostControlTransCommittedCost   newOpenCCTCC;
        ProjBudgetTransactionLine       projBudgetTransactionLine;
        ProjBudgetTransaction           projBudgetTransaction;

        CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);

        ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
        smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

        ProjCategoryId newCategoryId = this.projCategoryId();
        smmActivityNumber newActivityNum = this.activityNumber();

        while select forupdate updateCCTCC
            where updateCCTCC.ProjTransId == this.projTransId()
        {
            updateCCTCC.CategoryId = newCategoryId;
            updateCCTCC.ActivityNumber = newActivityNum;
            updateCCTCC.LineNum = this.lineNum();
            updateCCTCC.update();
        }

        Amount newAmount = this.costPriceAmount(this.openInTotal(prodRoute,prodRouteProj));
        if (oldOpenCCTCC.Amount==0 && newAmount!=0)
        {
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);
            if (newOpenCCTCC)
            {
                newOpenCCTCC.Amount = newAmount;
                newOpenCCTCC.AmountMst = newOpenCCTCC.Amount;
                newOpenCCTCC.update();

                if (ProjTable::find(newOpenCCTCC.ProjId).UseBudgeting)
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmProdRouteProj());
                    projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                    projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                    projBudgetTransaction = new ProjBudgetTransaction();
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                    this.budgetUpdate(newOpenCCTCC.ProjId,projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
                }
                else
                {
                    this.forecastUpdate(newOpenCCTCC, newOpenCCTCC.Qty, newAmount);
                }
            }
        }
        else if (oldCategoryId != newCategoryId   || oldActivityNum!= newActivityNum || prodRouteProj.ProjSalesPrice != prodRouteProj.orig().ProjSalesPrice)
        {
            this.budgetUpdate(oldOpenCCTCC.ProjId,ProjBudgetTransaction::construct(this.parmProdRouteProj()),ProjBudgetAdjustmentType::Increment);
            this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),false);

            if (ProjTable::find(newOpenCCTCC.ProjId).UseBudgeting)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmProdRouteProj());
                projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(newOpenCCTCC.ProjId,projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(newOpenCCTCC,  newOpenCCTCC.Qty,  newOpenCCTCC.Amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (!ProjParameters::find().TrackCommittedCostProduction)
                ret=false;
        }
        if (ret)
        {
            if (prodRoute.OprFinished == NoYes::Yes)
                return false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>