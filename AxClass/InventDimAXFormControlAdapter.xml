<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimAXFormControlAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimAXFormControlAdapter</c> class is the desktop form control adapter for the
///    <c>InventDim</c> framework.
/// </summary>
/// <remarks>
///    This class adapts a desktop form control to be manipulated by the <c>InventDim</c> framework.
/// </remarks>
public class InventDimAXFormControlAdapter implements InventDimFormControlInterface
{
    FormControl formControl;
    boolean isInGrid;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a Boolean value indicating whether the control is editable.
    /// </summary>
    /// <param name="_value">
    ///    true if the control should be editable, otherwise, false. This parameter is optional.
    /// </param>
    /// <returns>
    ///    true if the control should be editable, otherwise, false.
    /// </returns>
    boolean allowEdit(boolean _value = false)
    {
        if (!prmisDefault(_value))
        {
            return formControl.allowEdit(_value);
        }
        else
        {
            return formControl.allowEdit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the underlying control object.
    /// </summary>
    /// <returns>
    ///    <c>The </c><see cref="T:Object" /> instance.
    /// </returns>
    /// <remarks>
    ///    Callers should avoid calling methods on the returned handle and use interface methods instead.
    /// </remarks>
    Object controlObject()
    {
        return formControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the corresponding data field.
    /// </summary>
    /// <returns>
    ///    The ID of the data field.
    /// </returns>
    public FieldId dataField()
    {
        Object controlObject = formControl;

        return controlObject.dataField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the identifier of the <c>FormDataSource</c> corresponding to this control.
    /// </summary>
    /// <returns>
    ///    The integer identifier of the <c>FormDataSource</c> corresponding to this control.
    /// </returns>
    int dataSource()
    {
        Object controlObject = formControl;

        return controlObject.dataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the control is part of a grid.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether the control is part of a grid.
    /// </returns>
    boolean isInGrid()
    {
        return isInGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a Boolean value indicating whether the control is mandatory.
    /// </summary>
    /// <param name="_value">
    ///    true if the control should be mandatory; otherwise, false. This parameter is optional.
    /// </param>
    /// <returns>
    ///    true if the control should be mandatory; otherwise, false.
    /// </returns>
    boolean mandatory(boolean _value = false)
    {
        Object controlObject = formControl;

        if (!prmisDefault(_value))
        {
            return controlObject.mandatory(_value);
        }
        else
        {
            return controlObject.mandatory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormControl</Name>
				<Source><![CDATA[
        FormControl parmFormControl(FormControl _formControl = formControl)
    {
        formControl = _formControl;
        return formControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInGrid</Name>
				<Source><![CDATA[
        public boolean parmIsInGrid(boolean _isInGrid = isInGrid)
    {
        isInGrid = _isInGrid;

        return isInGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the underlying control supports the <see
    ///    cref="M:InventDimAXFormControlAdapter.mandatory" /> property.
    /// </summary>
    /// <returns>
    ///    Boolean value indicating whether the underlying control supports the <see
    ///    cref="M:InventDimAXFormControlAdapter.mandatory" /> property.
    /// </returns>
    boolean supportsMandatory()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a Boolean value indicating whether the control is visible.
    /// </summary>
    /// <param name="_value">
    ///    true if the control should be visible; otherwise, false. This parameter is optional.
    /// </param>
    /// <returns>
    ///    true if the control should be visible; otherwise, false.
    /// </returns>
    boolean visible(boolean _value = false)
    {
        if (!prmisDefault(_value))
        {
            return formControl.visible(_value);
        }
        else
        {
            return formControl.visible();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimAXFormControlAdapter construct()
    {
        return new InventDimAXFormControlAdapter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:InventDimAXFormControlAdapter" />.
    /// </summary>
    /// <param name="_formControl">
    ///    The underlying <c>FormControl</c> object.
    /// </param>
    /// <param name="_isInGrid">
    ///    A Boolean value that indicates whether the control is part of a grid.
    /// </param>
    /// <returns>
    ///    A new instance of the <see cref="T:InventDimAXFormControlAdapter" />.
    /// </returns>

    public static InventDimAXFormControlAdapter newFormControl(
            FormControl _formControl,
            boolean _isInGrid)
    {
        InventDimAXFormControlAdapter adapter = InventDimAXFormControlAdapter::construct();

        adapter.parmFormControl(_formControl);
        adapter.parmIsInGrid(_isInGrid);
        return adapter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>