<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceConvert_Currency</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PriceConvert_Currency extends PriceConvertDecorator
{
    CurrencyCode newCurrencyCode;
    TransDate transDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return newCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkup()
    {
        CurrencyCode originalCurrencyCode = decoratedPriceConvert.parmCurrencyCode();
        CurrencyCode currencyCode = this.parmCurrencyCode();
        TransDate exchRateDate = this.parmTransDate();

        if (!originalCurrencyCode)
            originalCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        if (!currencyCode)
            currencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        if (!exchRateDate)
            exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        return CurrencyExchangeHelper::curAmount2CurAmount(decoratedPriceConvert.parmMarkup(), originalCurrencyCode, currencyCode, exchRateDate, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode parmNewCurrencyCode(CurrencyCode _newCurrencyCode = newCurrencyCode)
    {
        if (!prmisdefault(_newCurrencyCode))
        {
            newCurrencyCode = _newCurrencyCode;
        }

        return newCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the price.
    /// </summary>
    /// <param name = "_originalCurrencyCode">
    /// Original currency code.
    /// </param>
    /// <param name = "_currencyCode">
    /// Actual currency code.
    /// </param>
    /// <param name = "_exchRateDate">
    /// Exchange rate date.
    /// </param>
    /// <returns>
    /// The price in the actual currency.
    /// </returns>
    [Replaceable]
    protected Price retrievePrice(CurrencyCode _originalCurrencyCode, CurrencyCode _currencyCode, TransDate _exchRateDate)
    {
        return ExchangeRateHelper::curPrice2CurPrice(decoratedPriceConvert.parmPrice(), _originalCurrencyCode, _currencyCode, _exchRateDate, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public Price parmPrice()
    {
        CurrencyCode originalCurrencyCode = decoratedPriceConvert.parmCurrencyCode();
        CurrencyCode currencyCode = this.parmCurrencyCode();
        TransDate exchRateDate = this.parmTransDate();

        if (!originalCurrencyCode)
            originalCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        if (!currencyCode)
            currencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        if (!exchRateDate)
            exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        return this.retrievePrice(originalCurrencyCode, currencyCode, exchRateDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    protected TransDate parmTransDate(TransDate _transDate = transDate)
    {
        if (!prmisdefault(_transDate))
        {
            transDate = _transDate;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PriceConvert_Currency construct(PriceConvert _decoratedPriceConvert)
    {
        return new PriceConvert_Currency(_decoratedPriceConvert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCurrencyConversion</Name>
				<Source><![CDATA[
    public static PriceConvert_Currency newCurrencyConversion(PriceConvert _decoratedPriceConvert, CurrencyCode _newCurrencyCode, TransDate _transDate)
    {
        PriceConvert_Currency priceConvert_Currency;
        priceConvert_Currency = PriceConvert_Currency::construct(_decoratedPriceConvert);
        priceConvert_Currency.parmNewCurrencyCode(_newCurrencyCode);
        priceConvert_Currency.parmTransDate(_transDate);

        return priceConvert_Currency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>