<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_DebtDebitReservMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_DebtDebitReservMovement extends RTax25RegCalc implements BatchRetryable
{
    int                 dateDiff;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        const int ReservePos = 3;
        AmountMST               regPrevReserveAmount,  // Bad debt reserve for a previous period
                                regBadDebtAmount,      // Bad debt amount

                                regUsedReserve,        // Reserve used for bad debt cancellation
                                regUnusedReserve,      // Unused reserve remain

                                regReserveExcess;      // Excess of bad debt amount over reserve amount

        RTax25RegisterJournalTrans  journalTrans;
        RTax25Query                 query;
        RTax25DebtAmounts           debtAmounts;
        RefRecId                    profitTableRecId = 0;
        RTax25DebtModelPeriod       debtPeriod;

        try
        {
            ttsbegin;

            super();

            debtAmounts = RTax25DebtAmounts::newModelParameters(
                dateTo,
                RTax25DebtType::Debit,
                NoYes::No,
                0,
                0,
                regType.badDebtModel() == CustParameters::rTax25DebtModelTax());

            if (dateTo == debtAmounts.getToDate())
            {
                regUsedReserve   = debtAmounts.getUsedReserve();

                regBadDebtAmount = debtAmounts.getWrittenOffAmount();

                journalTrans = debtAmounts.getRegisterJourTrans();

                query = RTax25Query::newParameters(this.reserveRegType(), journalTrans, true);

                if (query.first())
                {
                    select count(DaysFrom) from debtPeriod
                        where debtPeriod.DebtModel == regType.badDebtModel() &&
                              debtPeriod.Percent  != 0;

                    regPrevReserveAmount = query.getField(ReservePos + debtPeriod.DaysFrom);
                    profitTableRecId = query.getRecord().rTax25ProfitTable;
                }

                if (regBadDebtAmount > regPrevReserveAmount)
                {
                    regReserveExcess = regBadDebtAmount - regPrevReserveAmount;
                }
                else
                {
                    regUnusedReserve = regPrevReserveAmount - regBadDebtAmount;
                }

                regQuery.addBodyRecord(profitTableRecId,
                                   [journalTrans.toDate(),
                                    regPrevReserveAmount,
                                    regBadDebtAmount,
                                    regUsedReserve,
                                    regUnusedReserve,
                                    regReserveExcess],
                                    tableNum(RTax25DebtModel),
                                    regType.badDebtModel(),
                                   "",
                                   0,
                                   regReserveExcess);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;

        ret = super();

        if ( ! dateDiff)
        {
            ret = checkFailed("@GLS104249");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        RTax25DebtModelPeriod   debtPeriod;
        boolean                 ret = super(_registerJournalTrans, _batch);        

        select firstonly DaysFrom
            from debtPeriod
            where debtPeriod.BadDebtType == RTax25BadDebtType::Hopeless &&
                  debtPeriod.DebtModel   == regType.badDebtModel();

        dateDiff = debtPeriod.DaysFrom;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a relevant reserve register type.
    /// </summary>
    /// <returns>
    /// A relevant reserve register type.
    /// </returns>
    protected RTax25RegisterType reserveRegType()
    {
        return RTax25RegisterType::DebtDebitReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>