<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRulesCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorRulesCategory
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate entity type list.
    /// </summary>
    /// <returns>The map containing all entity types and their descriptions.</returns>
    public static Map getEntityType()
    {
        Map entityList = new Map(Types::String,Types::Container);

        entityList.insert("@Retail:RetailCommerceValidatorCategoryEntityTypeId", [RetailCommerceValidatorEntityFunction::Functional, tableNum(EcoResCategory), classStr(RetailCommerceValidatorRulesCategory)]);

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate rule list.
    /// </summary>
    /// <returns>The map containing all rules and rule related properties.</returns>
    public static Map getRulesList()
    {
        Map rulesList = new Map(Types::String,Types::Container);

        // Validate if category is active.
        rulesList.insert("@Retail:RetailCommerceValidationCateRu001", [
            "@Retail:RetailCommerceValidatorCategoryEntityTypeId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorCateRu001Description",
            'validateIsActiveCategory',
            formStr(RetailCategory),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validate category display order.
        rulesList.insert("@Retail:RetailCommerceValidationCateRu002", [
            "@Retail:RetailCommerceValidatorCategoryEntityTypeId",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorCateRu002Description",
            'validateCategoryDisplayOrder',
            formStr(RetailCategory),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validate category translation
        rulesList.insert("@Retail:RetailCommerceValidationCateRu003", [
            "@Retail:RetailCommerceValidatorCategoryEntityTypeId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorCateRu003Description",
            'validateCategoryTranslation',
            formStr(RetailCategory),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        return rulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of entities of the Entity type for a given validation
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The number of entities in scope for the validation.</returns>
    public static int64 getEntityCount(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorWorkChannelCategories categories;
        select count(RecId) from categories where categories.ValidationId == _validationId;

        return categories.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsActiveCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cate-Ru-001': Category is inactive.
    /// Validates if the category is active or not.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of warnings.</returns>
    internal static container validateIsActiveCategory(RetailCommerceValidatorTests _validatorTest)
    {
        EcoResCategory ecoResCategory;
        RetailCommerceValidatorWorkChannelCategories channelCategories;
        int resultsCounter = 0;

        while select RecId from ecoResCategory
            where ecoResCategory.IsActive == NoYes::No
                exists join channelCategories
                order by channelCategories.CategoryRefRecId asc
                where channelCategories.CategoryRefRecId == ecoResCategory.RecId
                    && channelCategories.CategoryRefRecId >= _validatorTest.RangeStartRecId
                    && channelCategories.CategoryRefRecId <= _validatorTest.RangeEndRecId
                    && channelCategories.ValidationId == _validatorTest.ValidationId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCategory(_validatorTest.ValidationId,ecoResCategory.RecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                logContext,
                "@Retail:ValidationRuleCounterMetricId",
                "@Retail:RetailCommerceValidatorCateRu001Description",
                _validatorTest.TestId,
                "@Retail:RetailCommerceValidationCateRu001"
                );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategoryDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cate-Ru-002': Category is inactive.
    /// Validates if the category is specified.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of warnings.</returns>
    internal static container validateCategoryDisplayOrder(RetailCommerceValidatorTests _validatorTest)
    {
        EcoResCategory ecoResCategory;
        RetailCommerceValidatorWorkChannelCategories channelCategories;
        int resultsCounter = 0;

        while select RecId from ecoResCategory
            where ecoResCategory.DisplayOrder == 0 && ecoResCategory.ParentCategory != 0
                exists join channelCategories
                order by channelCategories.CategoryRefRecId asc
                where channelCategories.CategoryRefRecId == ecoResCategory.RecId
                    && channelCategories.CategoryRefRecId >= _validatorTest.RangeStartRecId
                    && channelCategories.CategoryRefRecId <= _validatorTest.RangeEndRecId
                    && channelCategories.ValidationId == _validatorTest.ValidationId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCategory(_validatorTest.ValidationId,ecoResCategory.RecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                logContext,
                "@Retail:ValidationRuleCounterMetricId",
                "@Retail:RetailCommerceValidatorCateRu002Description",
                _validatorTest.TestId,
                "@Retail:RetailCommerceValidationCateRu002"
                );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategoryTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cate-Ru-003': Category translation is missing.
    /// Validates if the category translation is specified.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateCategoryTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        EcoResCategory ecoResCategory;
        int resultsCounter = 0;
        EcoResCategoryTranslation categoryTranslation;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorWorkChannelCategories channelCategories;

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
        {
            while select RecId from ecoResCategory
                exists join channelCategories
                    order by channelCategories.CategoryRefRecId asc
                    where channelCategories.CategoryRefRecId == ecoResCategory.RecId
                        && channelCategories.CategoryRefRecId >= _validatorTest.RangeStartRecId
                        && channelCategories.CategoryRefRecId <= _validatorTest.RangeEndRecId
                        && channelCategories.ValidationId == _validatorTest.ValidationId
                notexists join categoryTranslation
                    where categoryTranslation.Category == ecoResCategory.RecId
                        && categoryTranslation.FriendlyName != ''
                        && categoryTranslation.LanguageId == channelLanguages.LanguageId
            {
                str logDescription = strFmt("@Retail:RetailCommerceValidatorCategoryTranslationMissing",channelLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCategory(_validatorTest.ValidationId,ecoResCategory.RecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    logDescription,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidationCateRu003"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>