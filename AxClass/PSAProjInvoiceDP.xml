<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for <c>PSAProjInvoice</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(PSAProjInvoiceContract))
]
class PsaProjInvoiceDP extends ProjInvoiceDPBase
{
    PSAProjInvoiceTmp           tmpPSAProjInvoice;
    PSAProjInvoiceHeaderTmp     tmpPSAProjInvoiceHeader;
    PSAProjInvoiceTaxTmp        tmpPSAProjInvoiceTax;
    SysDocuBrandDetailsRegular  docuBrandDetails;
    ProjInvoiceEmpl             projInvoiceEmpl;
    ProjInvoiceCost             projInvoiceCost;
    ProjInvoiceItem             projInvoiceItem;
    ProjInvoiceRevenue          projInvoiceRevenue;
    ProjInvoiceOnAcc            projInvoiceOnAcc;
    ProjProposalJour            projProposalJour;
    PSAProjProposalProj         psaProjProposalProj;

    FormletterProformaPrint     formletterProformaPrint;
    FormLetterRemarks           formLetterRemarks;
    CustTable                   custTable;
    boolean                     prebill;
    PrePrintLevel               prePrintLevel;
    InventTrans                 inventTrans;
    DocuRefSearch               docuRefHeader;
    DocuRefSearch               docuRef;
    boolean                     printDocuHeader;
    boolean                     printDocuLine;

    boolean                     showSepaNotification;
    CustDirectDebitMandate      custDirectDebitMandate;
    CustBankAccount             custDirectDebitMandateBankAccount;

    #define.Category('')
    #ISOCountryregionCodes

    // <GEEU>
    ProjInvoiceLocalizationTmp      projInvoiceLocalizationTmp;

    boolean                         isGEEUCountryContext;

    Counter                         lineNumber;
    boolean                         projCreditInvoicingSalesLine;
    // </GEEU>

    // <GTH>
    ProjInvoiceJourAdjustment_TH projInvoiceJourAdjustment;
    // </GTH>

    // <GEEPL>
    private char lineSign = '';
    // </GEEPL>

    boolean                     isCountryRegionMY;
    CustTable                   custTable_InvoiceAccount;

    #define.Blank('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLocalizationField</Name>
				<Source><![CDATA[
    private void fillLocalizationField(Common _cursor, char _lineSign)
    {
        if (_cursor.TableId == tableNum(ProjInvoiceEmpl)
            || _cursor.TableId == tableNum(ProjProposalEmpl))
        {
            if (_cursor.TableId == tableNum(ProjProposalEmpl))
            {
                ProjProposalEmpl projProposalEmpl = _cursor;

                select firstonly projInvoiceEmpl
                    where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceEmpl.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceEmpl.TransId == projProposalEmpl.TransId;
            }

            tmpPSAProjInvoice.TransDate = projInvoiceEmpl.TransDate;
            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAProjInvoice.LineTaxAmount                = projInvoiceEmpl.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAProjInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
            {
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceEmpl.TaxAmount;
            }
        }

        if (_cursor.TableId == tableNum(ProjInvoiceCost)
            || _cursor.TableId == tableNum(ProjProposalCost))
        {
            if (_cursor.TableId == tableNum(ProjProposalCost))
            {
                ProjProposalCost projProposalCost = _cursor;

                select firstonly projInvoiceCost
                    where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceCost.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceCost.TransId == projProposalCost.TransId;
            }

            tmpPSAProjInvoice.TransDate = projInvoiceCost.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAProjInvoice.LineTaxAmount                = projInvoiceCost.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAProjInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAProjInvoice.TransDate                    = projInvoiceCost.TransDate;
            }
            // </GEEPL>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
            {
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceCost.TaxAmount;
            }
        }

        if (_cursor.TableId == tableNum(ProjInvoiceItem)
            || _cursor.TableId == tableNum(ProjProposalItem))
        {
            if (_cursor.TableId == tableNum(ProjProposalItem))
            {
                ProjProposalItem projProposalItem = _cursor;

                select firstonly projInvoiceItem
                    where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceItem.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceItem.ProjTransId == projProposalItem.ProjTransId;

                if (!projInvoiceItem)
                {
                    //For credit note the field values ProjTransId of proposal line and proforma invoice line are different
                    ProjProposalItemDetail projProposalItemDetail;
                    ProjInvoiceItemDetail projInvoiceItemDetail;

                    select firstonly projInvoiceItem
                        where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                            && projInvoiceItem.InvoiceDate == projInvoiceJour.InvoiceDate
                    exists join projInvoiceItemDetail
                        where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                            && projInvoiceItemDetail.SaleRefRecId != 0
                    exists join projProposalItemDetail
                        where projProposalItemDetail.SaleRefRecId == projInvoiceItemDetail.SaleRefRecId
                            && projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId;
                }
            }

            tmpPSAProjInvoice.TransDate     = projInvoiceItem.TransDate;
            tmpPSAProjInvoice.TaxWriteCode  = projInvoiceItem.TaxWriteCode;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAProjInvoice.LineTaxAmount                = projInvoiceItem.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAProjInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAProjInvoice.pkWiUCode_PL                 = InventTable::find(projInvoiceItem.ItemId).pkWiUCode_PL;
                //tmpPSAProjInvoice.ItemPriceAfterDiscount       = CurrencyExchangeHelper::amount((tmpPSAProjInvoice.SalesPrice - tmpPSAProjInvoice.DiscAmount) * (1 - tmpPSAProjInvoice.DiscPercent / 100), projInvoiceItem.CurrencyId);

                if (projInvoiceItem.RefReturnInvoiceTrans_W || !projCreditInvoicingSalesLine)
                {
                    // If the line is not a credit note line or a correction line, show the line number.
                    lineNumber++;
                    tmpPSAProjInvoice.LineNumber               = lineNumber;
                }

                if (_lineSign)
                {
                    tmpPSAProjInvoice.LineSign                 = _lineSign;
                }
                else
                {
                    tmpPSAProjInvoice.LineSign                 = projCreditInvoicingSalesLine ? (projInvoiceItem.RefReturnInvoiceTrans_W ? '-' : '+') : '';
                }

                if (!projInvoiceItem.TaxWriteCode &&
                     projInvoiceItem.TaxGroupId   &&
                     projInvoiceItem.TaxItemGroupId)
                {
                    tmpPSAProjInvoice.TaxWriteCode             = TaxTable::getTaxWriteCodeVat(projInvoiceItem.TaxGroupId, projInvoiceItem.TaxItemGroupId);
                }
            }
            // </GEEPL>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                tmpPSAProjInvoice.Intracode                    = EcoResCategory::commodityCode(projInvoiceItem.IntrastatCommodity);
                tmpPSAProjInvoice.ItemName                     = InventTable::find(projInvoiceItem.ItemId).itemName();
            }
            // </GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
            {
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceItem.TaxAmount;
            }
        }

        if (_cursor.TableId == tableNum(ProjInvoiceRevenue)
            || _cursor.TableId == tableNum(ProjProposalRevenue))
        {
            if (_cursor.TableId == tableNum(ProjProposalRevenue))
            {
                ProjProposalRevenue projProposalRevenue = _cursor;

                select firstonly projInvoiceRevenue
                    where projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceRevenue.TransId == projProposalRevenue.TransId;
            }

            tmpPSAProjInvoice.TransDate = projInvoiceRevenue.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAProjInvoice.LineTaxAmount                = projInvoiceRevenue.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAProjInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                tmpPSAProjInvoice.SalesPrice                   = projInvoiceRevenue.salesPrice();
            }
            // </GEELT>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAProjInvoice.TransDate                    = projInvoiceRevenue.TransDate;
                tmpPSAProjInvoice.Quantity                      = projInvoiceRevenue.Qty;
            }
            // </GEEPL>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
            {
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceRevenue.TaxAmount;
            }
        }

        if (_cursor.TableId == tableNum(ProjInvoiceOnAcc)
            || _cursor.TableId == tableNum(ProjProposalOnAcc))
        {
            if (_cursor.TableId == tableNum(ProjProposalOnAcc))
            {
                ProjProposalOnAcc projProposalOnAcc = _cursor;

                select firstonly projInvoiceOnAcc
                    where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceOnAcc.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceOnAcc.TransId == projProposalOnAcc.TransId;
            }

            tmpPSAProjInvoice.TransDate = projInvoiceRevenue.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAProjInvoice.LineTaxAmount                = projInvoiceOnAcc.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAProjInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAProjInvoice.TransDate                    = projInvoiceOnAcc.TransDate;
            }
            // </GEEPL>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
            {
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceOnAcc.TaxAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPackingSlipInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the Packing slip information.
    /// </summary>
    /// <param name="_qty">
    /// Quantity in the packing slip.
    /// </param>
    /// <param name="_packingSlipId">
    /// ID of the packing slip.
    /// </param>
    /// <param name="_shippingDate">
    /// Date of the Packing slip.
    /// </param>
    /// <returns>
    /// String which contains Packing slip information.
    /// </returns>
    private str formatPackingSlipInfo(InventQty _qty, PackingSlipId _packingSlipId, date _shippingDate)
    {
        str infoStr = "@SYS14578" + strFmt(' : %1  ', _qty);

        if (_packingSlipId)
        {
            infoStr += "@SYS23437" + ': ' + _packingSlipId + '  ';
        }

        infoStr += "@SYS16056" + ': ' + date2str(_shippingDate,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll);

        if (_qty || _shippingDate)
        {
            return infoStr;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectiveReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corrective reason for the invoice.
    /// </summary>
    /// <returns>
    /// The corrective reason for the invoice.
    /// </returns>
    /// <remarks>
    /// The following sequence is used when obtaining the corrective reason value:
    ///    1. Check the CustVendCreditInvoicingJour.CustVendCorrectiveReason field.
    ///    2. Check the CustVendCreditInvoicingJour.ReasonRefRecID
    ///    3. Check the ProjInvoiceJour.ReasonTableRef
    ///</remarks>
    private CustVendCorrectiveReason getCorrectiveReason(CustVendCreditInvoicingJour _creditInvoicingJour)
    {
        CustVendCorrectiveReason correctiveReason = _creditInvoicingJour.CustVendCorrectiveReason;

        if (!correctiveReason && _creditInvoicingJour.ReasonRefRecID)
        {
            // Corrective reason string was not set, so try to get it from the related ReasonTableRef record
            correctiveReason = ReasonTableRef::find(_creditInvoicingJour.ReasonRefRecID).ReasonComment;;
        }

        if (!correctiveReason && projInvoiceJour.ReasonTableRef)
        {
            // The CustVendCreditInvoicingJour did not have a corrective reason, so try to get it from the related ProjInvoiceJour record
            correctiveReason = ReasonTableRef::find(projInvoiceJour.ReasonTableRef).ReasonComment;
        }

        return correctiveReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    private void getCustTable(ProjProposalId _proposalId)
    {
        ProjFundingSource   projFundingSource;

        projFundingSource = ProjFundingSource::find(ProjProposalJour::find(_proposalId).FundingSource);

        if (projFundingSource.FundingType == ProjFundingType::Customer)
        {
            custTable = CustTable::findByPartyRecId(projFundingSource.Party);
        }
        else if (projFundingSource.FundingType == ProjFundingType::Grant)
        {
            custTable = CustTable::find(ProjGrant::find(projFundingSource.ProjGrant).CustAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ProjInvoiceLocalizationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSAManageInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjInvoiceLocalizationTmp))
    ]
    public ProjInvoiceLocalizationTmp getProjInvoiceLocalizationTmp()
    {
        return projInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceTmp))
    ]
    public PSAProjInvoiceTmp getPSAProjInvoice()
    {
        return tmpPSAProjInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceHeaderTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceHeaderTmp))
    ]
    public PSAProjInvoiceHeaderTmp getPSAProjInvoiceHeader()
    {
        return tmpPSAProjInvoiceHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))
    ]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        select docuBrandDetails;
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProformaPSAProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert data into table <c>PSAProjInvocieTmp</c> from a proposal line entry.
    /// </summary>
    /// <param name = "_cursor">
    /// Proposal line record to take the data from.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    protected void insertProformaPSAProjInvoiceTmp(Common _cursor, char _lineSign = '')
    {
        if (this.mustCreateProformaPSAProjectInvoiceLine(_cursor, _lineSign))
        {
            this.populateProformaPSAProjectInvoiceLine(_cursor, _lineSign);

            tmpPSAProjInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateProformaPSAProjectInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>PSAProjInvocieTmp</c> record should be created from a proposal line entry..
    /// </summary>
    /// <param name = "_cursor">
    /// Proposal line record to take the data from.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    /// <returns>
    /// true if a <c>PSAProjInvocieTmp</c> record should be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateProformaPSAProjectInvoiceLine(Common _cursor, char _lineSign)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProformaPSAProjectInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PSAProjInvocieTmp</c> record from a proposal line entry.
    /// </summary>
    /// <param name = "_cursor">
    /// Proposal line record to take the data from.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    protected void populateProformaPSAProjectInvoiceLine(Common _cursor, char _lineSign)
    {
        tmpPSAProjInvoice.clear();
        tmpPSAProjInvoice.PackingSlipInfoVisibility = NoYes::No;
        tmpPSAProjInvoice.smaSpecIndexCalc          = NoYes::No;

        switch (_cursor.TableId)
        {
            case tableNum(ProjProposalEmpl):
                this.initFromProjProposalEmpl(_cursor);
                break;

            case tableNum(ProjProposalCost):
                this.initFromProjProposalCost(_cursor);
                break;

            case tableNum(ProjProposalItem):
                this.initFromProjProposalItem(_cursor);
                break;

            case tableNum(ProjProposalRevenue):
                this.initFromProjProposalRevenue(_cursor);
                break;

            case tableNum(ProjProposalOnAcc):
                this.initFromProjProposalOnAcc(_cursor);
                break;
        }

        // Document attachments shown on Invoice
        if (printDocuHeader && docuRefHeader != null)
        {
            projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
            tmpPSAProjInvoice.DocuRefHeaderVisibility   = NoYes::Yes;
            tmpPSAProjInvoice.DocumentHeader            = this.notes(projProposalJour);
            // Have to rewind docuRefSearch for use by next line
            docuRefHeader.init();
        }

        if (printDocuLine && docuRef != null)
        {
            tmpPSAProjInvoice.DocuRefLineVisibility     = NoYes::Yes;
            tmpPSAProjInvoice.DocumentLine              = Docu::concatDocuRefNotes(docuRef);
            // Have to rewind docuRefSearch for use by next line
            docuRef.init();
        }

        // Tax Exempt Number shown on Invoice
        tmpPSAProjInvoice.InvoiceVATNumVisibility   = ProjFormletterParameters::find().PrintInvoiceVATNum;
        tmpPSAProjInvoice.InvoiceAccountVATNum      = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getCounterPartyTaxID();

        // Subscription Index calculation shown on Invoice
        if (projInvoiceJour.SMASpecIndexCalc    &&
            ProjFormletterParameters::find().SMASpecIndexCalc)
        {
            tmpPSAProjInvoice.SMASpecIndexCalc = NoYes::Yes;
        }

        if (TaxParameters::exist() && TaxParameters::find().TaxSpecifyLine)
        {
            this.initProFormaLineTaxAmount(_cursor);
        }

        // <GEEU>
        if (isGEEUCountryContext || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
        {
            this.fillLocalizationField(_cursor, _lineSign);
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAProjInvoiceHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>PSAProjInvoiceHeaderTmp</c> table from corresponding regular tables.
    /// </summary>
    protected void insertPSAProjInvoiceHeaderTmp()
    {
        this.populatePSAProjInvoiceHeaderTmp();

        tmpPSAProjInvoiceHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAProjInvoiceHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set fields on the <c>PSAProjInvoiceHeaderTmp</c> record from corresponding regular tables.
    /// </summary>
    protected void populatePSAProjInvoiceHeaderTmp()
    {
        ProjInvoiceRevenueDetail projInvoiceRevenueDetail;

        // <GBR>
        ProjInvoiceParmTable projInvoiceParmTable;
        // </GBR>
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;
        // <GBR>
        if (BrazilParameters::isEnabled() && projInvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
        {
            select * from custTable where custTable.AccountNum == projInvoiceJour.InvoiceAccount;
            select * from projInvoiceParmTable where projInvoiceParmTable.ParmId == projInvoiceJour.ParmId;
        }
        else
        {
            // </GBR>
            this.getCustTable(projInvoiceJour.ProposalId);
            // <GBR>
        }
        // </GBR>

        formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId, FormTextType::ProjectInvoice);

        tmpPSAProjInvoiceHeader.Name                  = companyInfo.Name;
        tmpPSAProjInvoiceHeader.Address               = companyInfo.postalAddress().Address;

        tmpPSAProjInvoiceHeader.FormLetterTxt         = formLetterRemarks.Txt;
        tmpPSAProjInvoiceHeader.CompanyLogo           = FormLetter::companyLogo();
        tmpPSAProjInvoiceHeader.CompanyDebitDirectId  = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank).DebitDirectId;
        tmpPSAProjInvoiceHeader.StandardCurrency      = Ledger::accountingCurrency();
        tmpPSAProjInvoiceHeader.CompanyVATNumVisibility = ProjFormletterParameters::find().PrintInvoiceVATNum;
        if (tmpPSAProjInvoiceHeader.CompanyVATNumVisibility)
        {
            // Company tax exempt number
            tmpPSAProjInvoiceHeader.CompanyVATNum = TaxRegistration::getTaxRegNumFromJournal(projinvoicejour.TableId,
                                                                                         projinvoicejour.RecId,
                                                                                         projinvoicejour.InvoiceDate);
        }

        if (companyInfo.PrintEnterpriseregister_NO)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
            tmpPSAProjInvoiceHeader.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                     projInvoiceJour.LanguageId);
        }

        tmpPSAProjInvoiceHeader.Telephone             = companyInfo.phone();
        tmpPSAProjInvoiceHeader.Fax                   = companyInfo.teleFax();
        tmpPSAProjInvoiceHeader.giro                  = companyInfo.Giro;
        // Company tax registration number
        tmpPSAProjInvoiceHeader.RegistrationNumber = companyInfo.CoRegNum;
        
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            tmpPSAProjInvoiceHeader.City_BR                     = companyInfo.postalAddress().City;
            tmpPSAProjInvoiceHeader.AuthorizedSignatory_BR      = ProjParameters::find().AuthorizedSignatory_BR;
            tmpPSAProjInvoiceHeader.DesignationSignatory_BR     = ProjParameters::find().DesignationSignatory_BR;
            tmpPSAProjInvoiceHeader.cnpjcpfNum_BR               = custTable.cnpjcpfNum_BR;
            tmpPSAProjInvoiceHeader.Narration_BR                = projInvoiceParmTable.Narration_BR;
        }
        // </GBR>

        tmpPSAProjInvoiceHeader.CustName              = projInvoiceJour.DeliveryName ? projInvoiceJour.DeliveryName : custTable.name();

        ProjFundingSource projFundingSource = ProjFundingSource::find(ProjProposalJour::find(projInvoiceJour.ProposalId).FundingSource);

        if (projFundingSource.LanguageId)
        {
            tmpPSAProjInvoiceHeader.CustAddress = DirUtility::replaceAddressTokenLanguage(LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress), projFundingSource.LanguageId);
        }
        else
        {
            tmpPSAProjInvoiceHeader.CustAddress = DirUtility::replaceAddressTokenLanguage(LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress), custTable.languageId());
        }

        tmpPSAProjInvoiceHeader.CustPhone             = custTable.phone();
        tmpPSAProjInvoiceHeader.CustFax               = custTable.telefax();

        tmpPSAProjInvoiceHeader.InvoiceNum            = projInvoiceJour.ProjInvoiceId;
        tmpPSAProjInvoiceHeader.ProjectContract       = projInvoiceJour.ProjInvoiceProjId;
        tmpPSAProjInvoiceHeader.CustAccountNum        = projInvoiceJour.InvoiceAccount;
        tmpPSAProjInvoiceHeader.OurAccntNum           = projInvoiceJour.ourAccountNum();
        tmpPSAProjInvoiceHeader.Payment               = projInvoiceJour.Payment;
        tmpPSAProjInvoiceHeader.InvoiceDate           = projInvoiceJour.InvoiceDate;
        tmpPSAProjInvoiceHeader.DueDate               = projInvoiceJour.DueDate;
        tmpPSAProjInvoiceHeader.InvoiceCurrency       = projInvoiceJour.CurrencyId;

        // <GMY>
        if (isCountryRegionMY)
        {
            tmpPSAProjInvoiceHeader.InvoiceType_MY      = projInvoiceJour.InvoiceType_MY;
            
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00002, funcName());
                tmpPSAProjInvoiceHeader.RegistrationNumber  = TaxGSTHelper_MY::getGSTRegistrationNumber(projInvoiceJour.InvoiceDate);
                if (projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
                {
                    tmpPSAProjInvoiceHeader.GSTReasonCode_MY    = ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;
                }

                if (custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY)
                {
                    tmpPSAProjInvoiceHeader.GSTReliefClause_MY = this.getGSTReliefClause_MY(projInvoiceJour);
                }
            }

            if (projInvoiceJour.QRCode_W && BusinessDocumentPrintQRCodeFlight_MY::instance().isEnabled())
            {
                str decodeBase64String = CustGenerateQRCode_W::decodeBase64String(projInvoiceJour.QRCode_W);
                tmpPSAProjInvoiceHeader.QRCode_W = CustGenerateQRCode_W::generateQRCodeFromBase64(decodeBase64String);
            }
        }
        // </GMY>

        if (moneyTransferSlip_BE)
        {
            tmpPSAProjInvoiceHeader.PaymentReference_BE = moneyTransferSlip_BE.initProjInvoicePaymId(projinvoiceJour);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFI]) && !tmpPSAProjInvoiceHeader.PaymentReference_BE)
        {
            tmpPSAProjInvoiceHeader.PaymentReference_BE = CustParameters::find().CustInvoiceRefNum_FI ? projInvoiceJour.invoiceReferenceNumberFI() : #Blank;
        }

        // To get Line amount in case there retainage.
        // Since there is a fee transaction created for retainage amount get the data from there.
        if (!projInvoiceJour.isProforma())
        {
            select sum(LineAmount) from projInvoiceRevenueDetail
                join  projInvoiceRevenue
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                   && projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                   && projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                   && projInvoiceRevenue.IsRetained == NoYes::Yes;

            if (projInvoiceRevenueDetail.LineAmount)
            {               
                tmpPSAProjInvoiceHeader.RetainageAmount = projInvoiceRevenueDetail.LineAmount * -1;
            }
        }
        else
        {
            select sum(RetainedNow) from psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId;

            if (psaProjProposalProj.RetainedNow)
            {
                tmpPSAProjInvoiceHeader.RetainageAmount       = psaProjProposalProj.RetainedNow;
            }
        }

        select psaProjProposalProj where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId;

        if (psaProjProposalProj)
        {
            tmpPSAProjInvoiceHeader.IndirectCost          = psaProjProposalProj.calcTotalIndirectComponentInvoice(psaProjProposalProj);
        }

        // Add Retainage to Sales Order Posted balance in case of retainage.
        if (!projInvoiceJour.isProforma())
        {
            tmpPSAProjInvoiceHeader.TotalCustomerBalance  = projInvoiceJour.SalesOrderbalance + tmpPSAProjInvoiceHeader.RetainageAmount - tmpPSAProjInvoiceHeader.IndirectCost;
            tmpPSAProjInvoiceHeader.NonTaxable            = projInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans()) + tmpPSAProjInvoiceHeader.RetainageAmount;
        }
        else
        {
            tmpPSAProjInvoiceHeader.TotalCustomerBalance  = projInvoiceJour.SalesOrderbalance -  tmpPSAProjInvoiceHeader.IndirectCost;
            tmpPSAProjInvoiceHeader.NonTaxable            = projInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans());
        }

        tmpPSAProjInvoiceHeader.NonTaxableMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.NonTaxable * exchRate);
        tmpPSAProjInvoiceHeader.Taxable               = projInvoiceJour.taxableBalanceMST(this.tmpTaxWorkTrans());
        tmpPSAProjInvoiceHeader.TaxableMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.Taxable * exchRate);
        tmpPSAProjInvoiceHeader.Totaldiscount         = projInvoiceJour.EndDisc;
        tmpPSAProjInvoiceHeader.MiscellaneousCharges  = projInvoiceJour.SumMarkup + tmpPSAProjInvoiceHeader.IndirectCost;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
        {
            tmpPSAProjInvoiceHeader.SalesTax          = projInvoiceJour.SumTax - PSAProjInvoiceRPTHelperEE::calculateTotalExcludedTaxAmount(projInvoiceJour.LedgerVoucher);
        }
        else
        {
            tmpPSAProjInvoiceHeader.SalesTax          = projInvoiceJour.SumTax;
        }

        tmpPSAProjInvoiceHeader.NetInvoiceAmount      = tmpPSAProjInvoiceHeader.TotalCustomerBalance - tmpPSAProjInvoiceHeader.Totaldiscount + tmpPSAProjInvoiceHeader.MiscellaneousCharges - tmpPSAProjInvoiceHeader.RetainageAmount;
        tmpPSAProjInvoiceHeader.RoundOff              = projInvoiceJour.InvoiceRoundOff;
        tmpPSAProjInvoiceHeader.Total                 = tmpPSAProjInvoiceHeader.NetInvoiceAmount + tmpPSAProjInvoiceHeader.SalesTax + tmpPSAProjInvoiceHeader.RoundOff;

        tmpPSAProjInvoiceHeader.ShowSepaNotification    = showSepaNotification;
        tmpPSAProjInvoiceHeader.MandateReference        = custDirectDebitMandate.MandateReference;
        tmpPSAProjInvoiceHeader.MandateSWIFTNo          = custDirectDebitMandateBankAccount.swiftNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            tmpPSAProjInvoiceHeader.MandateBankIBAN = custDirectDebitMandateBankAccount.BankIBAN;
        }

        // PrePrintLevelShow used to print invoice according to selected paper format
        tmpPSAProjInvoiceHeader.PrePrintLevelShow     = prePrintLevel;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            tmpPSAProjInvoiceHeader.CashAccountingRegime_ES = TaxParameters::find().CashAccountingRegime_ES;
        }

        CustVendCreditInvoicingJour creditInvoicingJour = CustVendCreditInvoicingJour::findInvoiceId(projInvoiceJour.TableId, projInvoiceJour.RecId);
            
        tmpPSAProjInvoiceHeader.CorrectedInvoiceId = creditInvoicingJour.CustVendCorrectedInvoiceId;
        tmpPSAProjInvoiceHeader.CorrectiveReason = this.getCorrectiveReason(creditInvoicingJour);

        // set Document Branding Header;
        this.setSysDocuBrandDetails();

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            LogisticsPostalAddress  logisticsPostalAddress = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            DirPartyLocation        dirPartyLocation = DirPartyLocation::findByPartyLocation(
                CustTable::find(projInvoiceJour.InvoiceAccount).Party,
                logisticsPostalAddress.Location);

            TaxInformation_TH       taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);
                        
            tmpPSAProjInvoiceHeader.InvoiceTaxNatureOfAddress_TH    = taxInformation_TH.TaxNatureOfAddress;
            tmpPSAProjInvoiceHeader.DeliveryAddress_TH              = logisticsPostalAddress.Address;
            tmpPSAProjInvoiceHeader.RefInvoiceId_TH                 = projInvoiceJour.projInvoiceJourExtension_TH().RefInvoiceId;

            if (projInvoiceJourAdjustment)
            {
                tmpPSAProjInvoiceHeader.initFromProjInvoiceJourAdjustment_TH(projInvoiceJourAdjustment);
                tmpPSAProjInvoiceHeader.InvoiceNum = projInvoiceJourAdjustment.TaxInvoiceId;
                tmpPSAProjInvoiceHeader.RemarkTxt_TH = projInvoiceJourAdjustment.remarkTxt(projInvoiceJour.LanguageId);
                tmpPSAProjInvoiceHeader.AdjustmentDetailsTxt_TH = projInvoiceJourAdjustment.adjustmentDetailsTxt(projInvoiceJour.LanguageId);
            }
            else
            {
                tmpPSAProjInvoiceHeader.InvoiceBranch_TH = taxInformation_TH.BranchNumber;
                tmpPSAProjInvoiceHeader.InvoiceBranchName_TH = LogisticsLocation::find(taxInformation_TH.LogisticsLocation).Description;
                tmpPSAProjInvoiceHeader.InvoiceTaxRegNumber_TH = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(projInvoiceJour).RegistrationNumber;
                tmpPSAProjInvoiceHeader.CustPhone = custTable.phone();
                tmpPSAProjInvoiceHeader.CustFax = custTable.telefax();
            }
        }
        // <GTH>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            tmpPSAProjInvoiceHeader.TaxRegistrationNumber_AE = CustTable::find(projInvoiceJour.InvoiceAccount).registrationNumber();
            tmpPSAProjInvoiceHeader.ExchRate_AE = projInvoiceJour.ExchRate;


            tmpPSAProjInvoiceHeader.TotalCustomerBalance_AE = projInvoiceJour.amountMST(tmpPSAProjInvoiceHeader.TotalCustomerBalance);
            tmpPSAProjInvoiceHeader.Total_AE = projInvoiceJour.amountMST(tmpPSAProjInvoiceHeader.Total);
            tmpPSAProjInvoiceHeader.Totaldiscount_AE = projInvoiceJour.amountMST(projInvoiceJour.EndDisc);
            tmpPSAProjInvoiceHeader.MiscellaneousCharge_AE = projInvoiceJour.amountMST(tmpPSAProjInvoiceHeader.MiscellaneousCharges);
            tmpPSAProjInvoiceHeader.RetainageAmount_AE = projInvoiceJour.amountMST(tmpPSAProjInvoiceHeader.RetainageAmount);
            tmpPSAProjInvoiceHeader.NetInvoiceAmount_AE = projInvoiceJour.amountMST(tmpPSAProjInvoiceHeader.NetInvoiceAmount);
            tmpPSAProjInvoiceHeader.RoundOff_AE = projInvoiceJour.amountMST(projInvoiceJour.InvoiceRoundOff);
            tmpPSAProjInvoiceHeader.SalesTax_AE = projInvoiceJour.amountMST(projInvoiceJour.SumTax);
            
            if (projInvoiceJour.CurrencyId != Ledger::accountingCurrency())
            {
                tmpPSAProjInvoiceHeader.ShowReportingCurTotals_AE = NoYes::Yes;
            }
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
        {
            tmpPSAProjInvoiceHeader.TotalCustomerBalance_AE = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.TotalCustomerBalance * exchRate);
            tmpPSAProjInvoiceHeader.Total_AE = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.Total* exchRate);
            tmpPSAProjInvoiceHeader.Totaldiscount_AE = CurrencyExchangeHelper::amount(projInvoiceJour.EndDisc* exchRate);
            tmpPSAProjInvoiceHeader.MiscellaneousCharge_AE = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.MiscellaneousCharges * exchRate);
            tmpPSAProjInvoiceHeader.RetainageAmount_AE = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.RetainageAmount * exchRate);
            tmpPSAProjInvoiceHeader.NetInvoiceAmount_AE = CurrencyExchangeHelper::amount(tmpPSAProjInvoiceHeader.NetInvoiceAmount * exchRate);
            tmpPSAProjInvoiceHeader.RoundOff_AE = CurrencyExchangeHelper::amount(projInvoiceJour.InvoiceRoundOff * exchRate);
            tmpPSAProjInvoiceHeader.SalesTax_AE = CurrencyExchangeHelper::amount(projInvoiceJour.SumTax * exchRate);
            
            if (projInvoiceJour.CurrencyId != Ledger::accountingCurrency())
            {
                tmpPSAProjInvoiceHeader.ShowReportingCurTotals_AE = NoYes::Yes;
            }
        }

        tmpPSAProjInvoiceHeader.FormLetterTxt = this.addSplitPaymentNote_W(tmpPSAProjInvoiceHeader.FormLetterTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    private void setSysDocuBrandDetails()
    {
        this.populateSysDocuBrandDetails();
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    protected void populateSysDocuBrandDetails()
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol      = Currency::find(projInvoiceJour.CurrencyId).Symbol;
        docuBrandDetails.PaymTermDescription = PaymTerm::find(projInvoiceJour.Payment).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>PSAProjInvoiceTmp</c> table from corresponding regular tables.
    /// </summary>
    /// <param name = "_cursor">
    /// Common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    protected void insertPSAProjInvoiceTmp(Common _cursor, char _lineSign = '')
    {
        if (this.mustCreatePSAProjectInvoiceLine(_cursor, _lineSign))
        {
            this.populatePSAProjInvoiceTmp(_cursor, _lineSign);

            tmpPSAProjInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePSAProjectInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>PSAProjInvocieTmp</c> record should be created  from corresponding regular tables.
    /// </summary>
    /// <param name = "_cursor">
    /// Common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    /// <returns>
    /// true if a <c>PSAProjInvocieTmp</c> record should be created; otherwise, false.
    /// </returns>
    protected boolean mustCreatePSAProjectInvoiceLine(Common _cursor, char _lineSign)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields on the <c>PSAProjInvoiceTmp</c> record from corresponding regular tables.
    /// </summary>
    /// <param name = "_cursor">
    /// Common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    protected void populatePSAProjInvoiceTmp(Common _cursor, char _lineSign = '')
    {
        tmpPSAProjInvoice.clear();
        tmpPSAProjInvoice.PackingSlipInfoVisibility = NoYes::No;
        tmpPSAProjInvoice.smaSpecIndexCalc          = NoYes::No;

        switch (_cursor.TableId)
        {
            case tableNum(ProjInvoiceEmpl):
                this.initFromProjInvoiceEmpl(projInvoiceEmpl);
                break;

            case tableNum(ProjInvoiceCost):
                this.initFromProjInvoiceCost(projInvoiceCost);
                break;

            case tableNum(ProjInvoiceItem):
                this.initFromProjInvoiceItemWithLineSign(projInvoiceItem, _lineSign);
                break;

            case tableNum(ProjInvoiceRevenue):
                this.initFromProjInvoiceRevenue(projInvoiceRevenue);
                break;

            case tableNum(ProjInvoiceOnAcc):
                this.initFromProjInvoiceOnAcc(projInvoiceOnAcc);
                break;
        }

        // Document attachments shown on Invoice
        if (printDocuHeader && docuRefHeader != null)
        {
            projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
            tmpPSAProjInvoice.DocuRefHeaderVisibility   = NoYes::Yes;
            tmpPSAProjInvoice.DocumentHeader            = this.notes(projProposalJour);
            // Have to rewind docuRefSearch for use by next line
            docuRefHeader.init();
        }

        if (printDocuLine && docuRef != null)
        {
            tmpPSAProjInvoice.DocuRefLineVisibility     = NoYes::Yes;
            tmpPSAProjInvoice.DocumentLine              = Docu::concatDocuRefNotes(docuRef);
            // Have to rewind docuRefSearch for use by next line
            docuRef.init();
        }

        // Tax Exempt Number shown on Invoice
        tmpPSAProjInvoice.InvoiceVATNumVisibility   = ProjFormletterParameters::find().PrintInvoiceVATNum;
        tmpPSAProjInvoice.InvoiceAccountVATNum      = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getCounterPartyTaxID();

        // Subscription Index calculation shown on Invoice
        if (projInvoiceJour.smaSpecIndexCalc    &&
            ProjFormletterParameters::find().smaSpecIndexCalc)

        {
            tmpPSAProjInvoice.smaSpecIndexCalc = NoYes::Yes;
        }

        if (TaxParameters::exist() && TaxParameters::find().TaxSpecifyLine)
        {
            this.initLineTaxAmount(_cursor);
        }

        // <GEEU>
        if (isGEEUCountryContext || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
        {
            this.fillLocalizationField(_cursor, _lineSign);
        }
        // </GEEU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            TaxTrans taxTrans_AE;

            select firstonly TaxValue, sourceRegulateAmountCur, TaxCode, taxbaseamountCur, taxAmountCur from taxtrans_AE
                where taxTrans_AE.SourceTableId == _cursor.TableId
                    && taxTrans_AE.SourceRecId == _cursor.RecId
                    && taxTrans_AE.Source == TaxModuleType::Project;

            if (taxTrans_AE)
            {
                tmpPSAProjInvoice.VATAmount_AE = -(taxTrans_AE.SourceRegulateAmountCur);
                tmpPSAProjInvoice.VATPercent_AE = taxTrans_AE.taxValue;
                tmpPSAProjInvoice.TaxCode_AE = taxTrans_AE.TaxCode;
                tmpPSAProjInvoice.TaxAmount_AE = -(taxTrans_AE.TaxAmountCur);
                tmpPSAProjInvoice.TaxBaseAmount_AE = -(taxTrans_AE.TaxBaseAmountCur);
            }

            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            tmpPSAProjInvoice.WithReducedTax_JP = TaxTable::existTaxTransWithReducedTaxType_JP(_cursor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the line tax amount for project invoice line.
    /// </summary>
    /// <param name = "_cursor">Common object to hold table data.</param>
    private void initLineTaxAmount(Common _cursor)
    {
        switch (_cursor.TableId)
        {
            case tableNum(ProjInvoiceEmpl):
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceEmpl.TaxAmount;
                break;

            case tableNum(ProjInvoiceCost):
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceCost.TaxAmount;
                break;

            case tableNum(ProjInvoiceItem):
                // <GEEPL> Credit note line tax when shown on invoice should be negative
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && tmpPSAProjInvoice.LineAmount < 0)
                {
                    tmpPSAProjInvoice.LineTaxAmount = -projInvoiceItem.TaxAmount;
                }
                else
                {
                    tmpPSAProjInvoice.LineTaxAmount = projInvoiceItem.TaxAmount;
                }
                // </GEEPL>
                break;

            case tableNum(ProjInvoiceRevenue):
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceRevenue.TaxAmount;
                break;

            case tableNum(ProjInvoiceOnAcc):
                tmpPSAProjInvoice.LineTaxAmount = projInvoiceOnAcc.TaxAmount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProFormaLineTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the line tax amount for project invoice line when print proforma report.
    /// </summary>
    /// <param name = "_cursor">Common object to hold table data.</param>
    private void initProFormaLineTaxAmount(Common _cursor)
    {
        switch (_cursor.TableId)
        {
            case tableNum(ProjProposalEmpl):
                ProjProposalEmpl projProposalEmpl = _cursor;
                ProjInvoiceEmpl projInvoiceEmplLocal;
                ProjEmplTransSale projEmplTransSale;
                ProjInvoiceEmplDetail projInvoiceEmplDetail;

                select firstonly TaxAmount from projInvoiceEmplLocal
                    where projInvoiceEmplLocal.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceEmplLocal.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        exists join projEmplTransSale
                            where projEmplTransSale.TransId == projProposalEmpl.TransId
                            exists join projInvoiceEmplDetail
                                where projInvoiceEmplDetail.SaleRefRecId == projEmplTransSale.RecId
                                    && projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmplLocal.RecId
                                    && ! projInvoiceEmplDetail.RefRecId;

                tmpPSAProjInvoice.LineTaxAmount = projInvoiceEmplLocal.TaxAmount;
                break;

            case tableNum(ProjProposalCost):
                ProjProposalCost projProposalCost = _cursor;
                ProjInvoiceCost projInvoiceCostLocal;
                ProjCostTransSale projCostTransSale;
                ProjInvoiceCostDetail projInvoiceCostDetail;
                    
                select firstonly TaxAmount from projInvoiceCostLocal
                    where projInvoiceCostLocal.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceCostLocal.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        exists join projCostTransSale
                            where projCostTransSale.TransId == projProposalCost.TransId
                            exists join projInvoiceCostDetail
                                where projInvoiceCostDetail.SaleRefRecId == projCostTransSale.RecId
                                    && projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCostLocal.RecId
                                    && ! projInvoiceCostDetail.RefRecId;

                tmpPSAProjInvoice.LineTaxAmount = projInvoiceCostLocal.TaxAmount;
                break;

            case tableNum(ProjProposalItem):
                ProjProposalItem projProposalItem = _cursor;
                ProjInvoiceItem projInvoiceItemLocal;
                ProjItemTransSale projItemTransSale;
                ProjInvoiceItemDetail projInvoiceItemDetail;

                select firstonly TaxAmount from projInvoiceItemLocal
                    where projInvoiceItemLocal.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceItemLocal.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        exists join projItemTransSale
                            where projItemTransSale.ProjTransId == projProposalItem.ProjTransId
                            exists join projInvoiceItemDetail
                                where projInvoiceItemDetail.SaleRefRecId == projItemTransSale.RecId
                                    && projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItemLocal.RecId
                                    && ! projInvoiceItemDetail.RefRecId;

                tmpPSAProjInvoice.LineTaxAmount = projInvoiceItemLocal.TaxAmount;
                break;

            case tableNum(ProjProposalRevenue):
                ProjProposalRevenue projProposalRevenue = _cursor;
                ProjInvoiceRevenue projInvoiceRevenueLocal;
                ProjRevenueTransSale projRevenueTransSale;
                ProjInvoiceRevenueDetail projInvoiceRevenueDetail;

                select firstonly TaxAmount from projInvoiceRevenueLocal
                    where projInvoiceRevenueLocal.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceRevenueLocal.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        exists join projRevenueTransSale
                            where projRevenueTransSale.TransId == projProposalRevenue.TransId
                            exists join projInvoiceRevenueDetail
                                where projInvoiceRevenueDetail.SaleRefRecId == projRevenueTransSale.RecId
                                    && projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenueLocal.RecId
                                    && ! projInvoiceRevenueDetail.RefRecId;

                tmpPSAProjInvoice.LineTaxAmount = projInvoiceRevenueLocal.TaxAmount;
                break;

            case tableNum(ProjProposalOnAcc):
                ProjProposalOnAcc projProposalOnAcc = _cursor;
                ProjInvoiceOnAcc projInvoiceOnAccLocal;
                ProjOnAccTransSale projOnAccTransSale;
                ProjInvoiceOnAccDetail projInvoiceOnAccDetail;

                select firstonly TaxAmount from projInvoiceOnAccLocal
                    where projInvoiceOnAccLocal.InvoiceDate == projInvoiceJour.InvoiceDate
                        && projInvoiceOnAccLocal.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        exists join projOnAccTransSale
                            where projOnAccTransSale.TransId == projProposalOnAcc.TransId
                            exists join projInvoiceOnAccDetail
                                where projInvoiceOnAccDetail.SaleRefRecId == projOnAccTransSale.RecId
                                    && projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAccLocal.RecId
                                    && ! projInvoiceOnAccDetail.RefRecId;

                tmpPSAProjInvoice.LineTaxAmount = ProjInvoiceOnAcc::findTransId(projProposalOnAcc.TransId).TaxAmount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice employee line.
    /// </summary>
    /// <param name = "_projInvoiceEmpl">The invoice employee line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceEmpl(ProjInvoiceEmpl _projInvoiceEmpl)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;

        tmpPSAProjInvoice.ProjId        = _projInvoiceEmpl.ProjId;
        tmpPSAProjInvoice.Category      = _projInvoiceEmpl.CategoryId;
        tmpPSAProjInvoice.TransTxt      = _projInvoiceEmpl.Txt;
        tmpPSAProjInvoice.Quantity      = _projInvoiceEmpl.Qty;
        tmpPSAProjInvoice.TaxWriteCode  = _projInvoiceEmpl.TaxWriteCode;

        ProjInvoiceEmplDetail       projInvoiceEmplDetail;

        select crosscompany SalesPrice, LineAmount from projInvoiceEmplDetail
                where projInvoiceEmplDetail.InvoiceRefRecId == _projInvoiceEmpl.RecId;

        tmpPSAProjInvoice.LineAmount        = projInvoiceEmplDetail.LineAmount;
        tmpPSAProjInvoice.TransTableId      = _projInvoiceEmpl.TableId;
        tmpPSAProjInvoice.TransTableLabel   = "@SYS5269";

        select ProjId from  psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId &&
                psaProjProposalProj.ProjId == _projInvoiceEmpl.ProjId;

        tmpPSAProjInvoice.ProjectReferenceNumber =  psaProjProposalProj.ProjId;
        tmpPSAProjInvoice.ProjectName   = ProjTable::find(_projInvoiceEmpl.ProjId).Name;
        tmpPSAProjInvoice.SalesPrice    = projInvoiceEmplDetail.SalesPrice;
        tmpPSAProjInvoice.TransactionOrigin = ProjEmplTrans::find(_projInvoiceEmpl.TransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projInvoiceEmpl.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projInvoiceEmpl.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice expense line.
    /// </summary>
    /// <param name = "_projInvoiceCost">The invoice expense line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceCost(ProjInvoiceCost _projInvoiceCost)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;

        tmpPSAProjInvoice.ProjId        = _projInvoiceCost.ProjId;
        tmpPSAProjInvoice.Category      = _projInvoiceCost.CategoryId;
        tmpPSAProjInvoice.TransTxt      = _projInvoiceCost.Txt;
        tmpPSAProjInvoice.Quantity      = _projInvoiceCost.Qty;
        tmpPSAProjInvoice.TaxWriteCode  = _projInvoiceCost.TaxWriteCode;

        ProjInvoiceCostDetail       projInvoiceCostDetail;

        select crosscompany SalesPrice, LineAmount from projInvoiceCostDetail
                where projInvoiceCostDetail.InvoiceRefRecId == _projInvoiceCost.RecId;

        tmpPSAProjInvoice.TransTableId      = _projInvoiceCost.TableId;
        tmpPSAProjInvoice.TransTableLabel   = "@SYS78349";

        select ProjId from  psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId &&
                psaProjProposalProj.ProjId == _projInvoiceCost.ProjId;

        tmpPSAProjInvoice.ProjectReferenceNumber =  psaProjProposalProj.ProjId;
        tmpPSAProjInvoice.ProjectName   = ProjTable::find(_projInvoiceCost.ProjId).Name;

        tmpPSAProjInvoice.SalesPrice    = projInvoiceCostDetail.SalesPrice;
        tmpPSAProjInvoice.LineAmount    = projInvoiceCostDetail.LineAmount;
        tmpPSAProjInvoice.TransactionOrigin = ProjCostTrans::find(_projInvoiceCost.TransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projInvoiceCost.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projInvoiceCost.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItemWithLineSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// POL localization
    /// Initializes the project invoice line based on an invoice item from a credit note
    /// </summary>
    /// <param name = "_projInvoiceItem">The invoice item line used when initializing the project invoice line.</param>
    /// <param name = "_lineSign">The sign of the line to be created.</param>
    private void initFromProjInvoiceItemWithLineSign(ProjInvoiceItem _projInvoiceItem, char _lineSign = '')
    {
        lineSign = _lineSign;
        this.initFromProjInvoiceItem(_projInvoiceItem);
        lineSign = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice item line.
    /// </summary>
    /// <param name = "_projInvoiceItem">The invoice item line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceItem(ProjInvoiceItem _projInvoiceItem)
    {

        ExchRate exchRate = projInvoiceJour.ExchRate / 100;

        tmpPSAProjInvoice.ProjId        = _projInvoiceItem.ProjId;
        tmpPSAProjInvoice.Category      = _projInvoiceItem.CategoryId;
        tmpPSAProjInvoice.TransTxt      = _projInvoiceItem.Txt;
        tmpPSAProjInvoice.Quantity      = this.lineSign == '+' ? -_projInvoiceItem.Qty : _projInvoiceItem.Qty;
        tmpPSAProjInvoice.TaxWriteCode  = _projInvoiceItem.TaxWriteCode;

        ProjInvoiceItemDetail       projInvoiceItemDetail;

        select crosscompany SalesPrice, LineAmount from projInvoiceItemDetail
                where projInvoiceItemDetail.InvoiceRefRecId == _projInvoiceItem.RecId;
        
        // lineSign is used for a POL Regulation to show both a - and + line for the same service item
        // Calling method looks for a credit note (-) to start off then adds a + entry after

        tmpPSAProjInvoice.SalesPrice        = projInvoiceItemDetail.SalesPrice;
        tmpPSAProjInvoice.TransTableId      = _projInvoiceItem.TableId;
        tmpPSAProjInvoice.TransTableLabel   = "@SYS14428";

        select ProjId, RetainedNow from  psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId &&
                psaProjProposalProj.ProjId == _projInvoiceItem.ProjId;

        tmpPSAProjInvoice.LineAmount                = this.lineSign == '+' ? -(projInvoiceItemDetail.LineAmount - psaProjProposalProj.RetainedNow) : projInvoiceItemDetail.LineAmount - psaProjProposalProj.RetainedNow;
        tmpPSAProjInvoice.ProjectReferenceNumber    =  psaProjProposalProj.ProjId;
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(_projInvoiceItem.ProjId).Name;
        tmpPSAProjInvoice.TransactionOrigin         = ProjItemTrans::find(_projInvoiceItem.ProjTransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST)
            {
                if (custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY)
                {
                    TaxGSTReliefCategory_MY reliefCategory_MY = TaxGSTReliefCategory_MY::find(
                    InventTableModule::find(
                        _projInvoiceItem.ItemId,
                        ModuleInventPurchSales::Sales).TaxGSTReliefCategory_MY);

                    if (TaxGSTReliefGroupData_MY::exist(custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY, reliefCategory_MY.RecId))
                    {
                        tmpPSAProjInvoice.GSTReliefItemNumber_MY  = reliefCategory_MY.ReliefItemNumber;
                        tmpPSAProjInvoice.GSTReliefSchedule_MY    = reliefCategory_MY.ReliefSchedule;
                    }
                }

                if (projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
                {
                    tmpPSAProjInvoice.RefInvoiceID_MY       = _projInvoiceItem.RefInvoiceId_MY;
                    tmpPSAProjInvoice.RefInvoiceDate_MY     = _projInvoiceItem.RefInvoiceDate_MY;
                }
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>

        // Packing slip information to print on Invoice
        this.printInventTrans();
        if (inventTrans.RecId != 0 && ProjFormletterParameters::find().PckSlpInfoOnInvoice)
        {
            tmpPSAProjInvoice.PackingSlipInfoVisibility = NoYes::Yes;
            tmpPSAProjInvoice.PackingSlipInfo           = this.printPackingSlipInfo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice fee line.
    /// </summary>
    /// <param name = "_projInvoiceRevenue">The invoice fee line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceRevenue(ProjInvoiceRevenue _projInvoiceRevenue)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;

        tmpPSAProjInvoice.ProjId         = _projInvoiceRevenue.ProjId;
        tmpPSAProjInvoice.Category       = _projInvoiceRevenue.CategoryId;
        tmpPSAProjInvoice.TransTxt       = _projInvoiceRevenue.Txt;
        tmpPSAProjInvoice.Quantity       = _projInvoiceRevenue.Qty;
        tmpPSAProjInvoice.TaxWriteCode   = _projInvoiceRevenue.TaxWriteCode;

        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;

        select crosscompany SalesPrice, LineAmount from projInvoiceRevenueDetail
                where projInvoiceRevenueDetail.InvoiceRefRecId == _projInvoiceRevenue.RecId;

        tmpPSAProjInvoice.SalesPrice        = projInvoiceRevenueDetail.SalesPrice;
        tmpPSAProjInvoice.LineAmount        = projInvoiceRevenueDetail.LineAmount;
        tmpPSAProjInvoice.TransTableId      = _projInvoiceRevenue.TableId;
        tmpPSAProjInvoice.TransTableLabel   = "@SYS2826";

        select ProjId from  psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId &&
                psaProjProposalProj.ProjId == _projInvoiceRevenue.ProjId;

        tmpPSAProjInvoice.ProjectReferenceNumber    = psaProjProposalProj.ProjId;
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(_projInvoiceRevenue.ProjId).Name;
        tmpPSAProjInvoice.TransactionOrigin         = ProjRevenueTrans::find(_projInvoiceRevenue.TransId).TransactionOrigin;

        tmpPSAProjInvoice.smaBasePrice     = _projInvoiceRevenue.smaBasePrice;
        tmpPSAProjInvoice.smaIndex         = _projInvoiceRevenue.smaIndex;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projInvoiceRevenue.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projInvoiceRevenue.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice on-account line.
    /// </summary>
    /// <param name = "_projInvoiceOnAcc">The invoice on-account line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceOnAcc(ProjInvoiceOnAcc _projInvoiceOnAcc)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;

        tmpPSAProjInvoice.ProjId          = _projInvoiceOnAcc.ProjId;
        tmpPSAProjInvoice.TransTxt        = _projInvoiceOnAcc.Txt;
        tmpPSAProjInvoice.Quantity        = _projInvoiceOnAcc.Qty;
        tmpPSAProjInvoice.SalesPrice      = _projInvoiceOnAcc.salesPrice();
        tmpPSAProjInvoice.TaxWriteCode    = _projInvoiceOnAcc.TaxWriteCode;

        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;

        select crosscompany Amount from projInvoiceOnAccDetail
                where projInvoiceOnAccDetail.InvoiceRefRecId == _projInvoiceOnAcc.RecId;

        tmpPSAProjInvoice.LineAmount      = projInvoiceOnAccDetail.Amount;
        tmpPSAProjInvoice.Category        = #Category;
        tmpPSAProjInvoice.TransTableId    = _projInvoiceOnAcc.TableId;

        select ProjId from  psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId &&
                psaProjProposalProj.ProjId == _projInvoiceOnAcc.ProjId;

        tmpPSAProjInvoice.ProjectReferenceNumber    =  psaProjProposalProj.ProjId;
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(_projInvoiceOnAcc.ProjId).Name;
        tmpPSAProjInvoice.IsPreBillApplicable       = prebill;
        tmpPSAProjInvoice.TransTableLabel           = prebill ? "@PSA11465" : "@SYS2826";

        tmpPSAProjInvoice.TransactionOrigin = ProjOnAccTrans::find(_projInvoiceOnAcc.TransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projInvoiceOnAcc.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projInvoiceOnAcc.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on a proposal employee line.
    /// </summary>
    /// <param name = "_projProposalEmpl">The proposal employee line used when initializing the project invoice line.</param>
    protected void initFromProjProposalEmpl(ProjProposalEmpl _projProposalEmpl)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;

        ProjTrans projTransEmpl         = ProjTrans::newProjProposalEmpl(_projProposalEmpl);
        tmpPSAProjInvoice.ProjId        = projTransEmpl.ProjId();
        tmpPSAProjInvoice.Category      = projTransEmpl.CategoryId();
        tmpPSAProjInvoice.TransTxt      = _projProposalEmpl.Txt;
        tmpPSAProjInvoice.Quantity      = projTransEmpl.Qty();
        tmpPSAProjInvoice.TaxWriteCode  = _projProposalEmpl.TaxWriteCode;

        ProjProposalEmplDetail      projProposalEmplDetail;
        ProjEmplTransSale           projEmplTransSale;

        select firstOnly projProposalEmplDetail
                        where projProposalEmplDetail.ProposalRefRecId == _projProposalEmpl.RecId
                            exists join projEmplTransSale
                                where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId;

        tmpPSAProjInvoice.LineAmount                = projProposalEmplDetail.lineAmount();
        tmpPSAProjInvoice.TransTableId              = tableNum(ProjInvoiceEmpl);
        tmpPSAProjInvoice.TransTableLabel           = "@SYS5269";
        tmpPSAProjInvoice.ProjectReferenceNumber    = projTransEmpl.ProjId();
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(projTransEmpl.ProjId()).Name;
        tmpPSAProjInvoice.SalesPrice                = projProposalEmplDetail.SalesPrice;
        tmpPSAProjInvoice.TransactionOrigin         = ProjEmplTrans::find(_projProposalEmpl.TransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projProposalEmpl.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projProposalEmpl.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on a proposal expense line.
    /// </summary>
    /// <param name = "_projProposalCost">The proposal expense line used when initializing the project invoice line.</param>
    protected void initFromProjProposalCost(ProjProposalCost _projProposalCost)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;
        
        ProjTrans projTransCost         = ProjTrans::newProjProposalCost(_projProposalCost);
        tmpPSAProjInvoice.ProjId        = projTransCost.ProjId();
        tmpPSAProjInvoice.Category      = projTransCost.CategoryId();
        tmpPSAProjInvoice.TransTxt      = _projProposalCost.Txt;
        tmpPSAProjInvoice.Quantity      = projTransCost.Qty();
        tmpPSAProjInvoice.TaxWriteCode  = _projProposalCost.TaxWriteCode;

        ProjProposalCostDetail      projProposalCostDetail;
        ProjCostTransSale           projCostTransSale;

        select firstOnly projProposalCostDetail
                        where projProposalCostDetail.ProposalRefRecId == _projProposalCost.RecId
                            exists join projCostTransSale
                                where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId;

        tmpPSAProjInvoice.SalesPrice                = projProposalCostDetail.SalesPrice;
        tmpPSAProjInvoice.LineAmount                = projProposalCostDetail.lineAmount();
        tmpPSAProjInvoice.TransTableId              = tableNum(ProjInvoiceCost);
        tmpPSAProjInvoice.TransTableLabel           = "@SYS78349";
        tmpPSAProjInvoice.ProjectReferenceNumber    = projTransCost.ProjId();
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(projTransCost.ProjId()).Name;
        tmpPSAProjInvoice.TransactionOrigin         = ProjCostTrans::find(_projProposalCost.TransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projProposalCost.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projProposalCost.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on a proposal item line.
    /// </summary>
    /// <param name = "_projProposalItem">The proposal item line used when initializing the project invoice line.</param>
    protected void initFromProjProposalItem(ProjProposalItem _projProposalItem)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;
        
        ProjTrans projTransItem                     = ProjTrans::newProjProposalItem(_projProposalItem);
        tmpPSAProjInvoice.ProjId                    = projTransItem.projId();
        tmpPSAProjInvoice.Category                  = projTransItem.CategoryId();
        tmpPSAProjInvoice.TransTxt                  = _projProposalItem.Txt;
        tmpPSAProjInvoice.Quantity                  = projTransItem.Qty();
        tmpPSAProjInvoice.TaxWriteCode              = _projProposalItem.TaxWriteCode;

        ProjProposalItemDetail      projProposalItemDetail;

        select firstonly salesPrice from projProposalItemDetail
            where projProposalItemDetail.ProposalRefRecId == _projProposalItem.RecId;

        tmpPSAProjInvoice.SalesPrice                = projProposalItemDetail.salesPrice;

        tmpPSAProjInvoice.LineAmount                = projTransItem.transTurnover();
        tmpPSAProjInvoice.TransTableId              = tableNum(ProjInvoiceItem);
        tmpPSAProjInvoice.TransTableLabel           = "@SYS14428";
        tmpPSAProjInvoice.ProjectReferenceNumber    = projTransItem.projId();
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(projTransItem.projId()).Name;
        tmpPSAProjInvoice.TransactionOrigin         = ProjItemTrans::find(_projProposalItem.ProjTransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST)
            {
                if (custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY)
                {
                    TaxGSTReliefCategory_MY reliefCategory_MY   = TaxGSTReliefCategory_MY::find(
                            InventTableModule::find(
                                projInvoiceItem.ItemId,
                                ModuleInventPurchSales::Sales).TaxGSTReliefCategory_MY);

                    if (TaxGSTReliefGroupData_MY::exist(custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY, reliefCategory_MY.RecId))
                    {
                        tmpPSAProjInvoice.GSTReliefItemNumber_MY  = reliefCategory_MY.ReliefItemNumber;
                        tmpPSAProjInvoice.GSTReliefSchedule_MY    = reliefCategory_MY.ReliefSchedule;
                    }
                }

                if (projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
                {
                    tmpPSAProjInvoice.RefInvoiceID_MY       = _projProposalItem.RefInvoiceId_MY;
                    tmpPSAProjInvoice.RefInvoiceDate_MY     = _projProposalItem.RefInvoiceDate_MY;
                }
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>

        // Packing slip information to print on Invoice
        this.printInventTrans();
        if (inventTrans.RecId != 0 && ProjFormletterParameters::find().PckSlpInfoOnInvoice)
        {
            tmpPSAProjInvoice.PackingSlipInfoVisibility = NoYes::Yes;
            tmpPSAProjInvoice.PackingSlipInfo           = this.printPackingSlipInfo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on a proposal fee line.
    /// </summary>
    /// <param name = "_projProposalRevenue">The proposal fee line used when initializing the project invoice line.</param>
    protected void initFromProjProposalRevenue(ProjProposalRevenue _projProposalRevenue)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;
        
        ProjTrans projTransRevenue       = ProjTrans::newProjProposalRevenue(_projProposalRevenue);
        tmpPSAProjInvoice.ProjId         = projTransRevenue.ProjId();
        tmpPSAProjInvoice.Category       = projTransRevenue.CategoryId();
        tmpPSAProjInvoice.TransTxt       = _projProposalRevenue.Txt;
        tmpPSAProjInvoice.Quantity       = projTransRevenue.Qty();
        tmpPSAProjInvoice.TaxWriteCode   = _projProposalRevenue.TaxWriteCode;

        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;

        select firstOnly projProposalRevenueDetail
                        where projProposalRevenueDetail.ProposalRefRecId == _projProposalRevenue.RecId
                            exists join projRevenueTransSale
                                where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId;

        tmpPSAProjInvoice.SalesPrice                = projProposalRevenueDetail.SalesPrice;
        tmpPSAProjInvoice.LineAmount                = projProposalRevenueDetail.lineAmount();
        tmpPSAProjInvoice.TransTableId              = tableNum(ProjInvoiceRevenue);
        tmpPSAProjInvoice.TransTableLabel           = "@SYS2826";
        tmpPSAProjInvoice.ProjectReferenceNumber    = projTransRevenue.ProjId();
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(projTransRevenue.projId()).Name;
        tmpPSAProjInvoice.TransactionOrigin         = ProjRevenueTrans::find(_projProposalRevenue.TransId).TransactionOrigin;
        tmpPSAProjInvoice.smaBasePrice              = projTransRevenue.smaBasePrice();
        tmpPSAProjInvoice.smaIndex                  = projTransRevenue.smaIndex();

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projProposalRevenue.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projProposalRevenue.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on a proposal on-account line.
    /// </summary>
    /// <param name = "_projProposalOnAcc">The proposal on-account line used when initializing the project invoice line.</param>
    protected void initFromProjProposalOnAcc(ProjProposalOnAcc _projProposalOnAcc)
    {
        ExchRate exchRate = projInvoiceJour.ExchRate / 100;
        
        ProjTrans projTransOnAcc          = ProjTrans::newProjProposalOnAcc(_projProposalOnAcc);
        tmpPSAProjInvoice.ProjId          = projTransOnAcc.projId();
        tmpPSAProjInvoice.TransTxt        = _projProposalOnAcc.Txt;
        tmpPSAProjInvoice.Quantity        = projTransOnAcc.Qty();
        tmpPSAProjInvoice.SalesPrice      = projTransOnAcc.salesPrice();
        tmpPSAProjInvoice.TaxWriteCode    = _projProposalOnAcc.TaxWriteCode;

        ProjProposalOnAccDetail     projProposalOnAccDetail;
        ProjOnAccTransSale          projOnAccTransSale;

        select firstOnly projProposalOnAccDetail
            where projProposalOnAccDetail.ProposalRefRecId == _projProposalOnAcc.RecId
                exists join projOnAccTransSale
                    where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId;

        tmpPSAProjInvoice.LineAmount                = projProposalOnAccDetail.lineAmount();
        tmpPSAProjInvoice.Category                  = #Category;
        tmpPSAProjInvoice.TransTableId              = tableNum(ProjInvoiceOnAcc);
        tmpPSAProjInvoice.ProjectReferenceNumber    =  projTransOnAcc.projId();
        tmpPSAProjInvoice.ProjectName               = ProjTable::find(projTransOnAcc.projId()).Name;
        tmpPSAProjInvoice.IsPreBillApplicable       = prebill;
        tmpPSAProjInvoice.TransTableLabel           = prebill ? "@PSA11465" : "@SYS2826";
        tmpPSAProjInvoice.TransactionOrigin         = ProjOnAccTrans::find(_projProposalOnAcc.TransId).TransactionOrigin;

        // <GMY>
        if (isCountryRegionMY)
        {
            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST && projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
            {
                tmpPSAProjInvoice.RefInvoiceID_MY       = _projProposalOnAcc.RefInvoiceId_MY;
                tmpPSAProjInvoice.RefInvoiceDate_MY     = _projProposalOnAcc.RefInvoiceDate_MY;
            }

            tmpPSAProjInvoice.LineAmountMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.LineAmount * exchRate);
            tmpPSAProjInvoice.SalesPriceMST = CurrencyExchangeHelper::amount(tmpPSAProjInvoice.SalesPrice * exchRate);
            tmpPSAProjInvoice.CurrencyCode_AE = Ledger::accountingCurrency();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreBillApplicable_Proposal</Name>
				<Source><![CDATA[
    private boolean isPreBillApplicable_Proposal(ProjProposalOnAcc _projProposalOnAccount)
    {
        ProjOnAccTrans projOnAccTrans;
        return (select count(RecId) from projOnAccTrans
                   where projOnAccTrans.TransId == _projProposalOnAccount.TransId
                   && projOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreBillApplicable</Name>
				<Source><![CDATA[
    private boolean isPreBillApplicable(ProjInvoiceOnAcc _projInvoiceOnAccount)
    {
        ProjOnAccTrans projOnAccTrans;
        return (select count(RecId) from projOnAccTrans
                    where projOnAccTrans.TransId == _projInvoiceOnAccount.TransId
                    && projOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     To check whether record can be inserted for zero sales price, need to check on Invoice Line property.
    /// </summary>
    /// <param name = "_projTrans">
    ///     A record of the <c>ProjTrans</c> table.
    /// </param>
    /// <returns>
    ///     Returns true if transaction can be inserted otherwise false.
    /// </returns>
    protected boolean isPrintInvoiceLine(ProjTrans _projTrans)
    {
        boolean ret = true;

        // If printing an invoice and zero sales price item, need to check On Invoice line property.
        if ((_projTrans.salesPrice() == 0) &&
           ((_projTrans.linePropertyId()) &&
           (!ProjLineProperty::find(_projTrans.linePropertyId()).OnInvoice)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notes</Name>
				<Source><![CDATA[
    private Notes notes(ProjProposalJour _projProposalJour)
    {
        DocuRef     docuRefLoc;
        Notes       notes;
        container   value;
        int         i = 1;
        #xppTexts
        while select Notes from docuRefLoc
            where docuRefLoc.RefCompanyId == _projProposalJour.DataAreaId &&
                docuRefLoc.RefTableId == _projProposalJour.TableId &&
                docuRefLoc.RefRecId == _projProposalJour.RecId

        {
            if (!conFind(value, docuRefLoc.Notes))
            {
                value = conIns(value, i, docuRefLoc.Notes);
                notes += conPeek(value, i) + #newline;
                i++;
            }
        }
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    private void printDocumentHeader()
    {
        printDocuHeader = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Head) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))

        {
            docuRefHeader = DocuRefSearch::newTypeIdAndRestriction(ProjProposalJour::find(projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
            printDocuHeader = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    /// <param name="_buffer">
    /// Common buffer for tables.
    /// </param>
    private void printDocumentLine(Common   _buffer)
    {
        ProjInvoiceItem     projItem;
        ProjInvoiceCost     projCost;
        ProjInvoiceEmpl     projEmpl;
        ProjInvoiceRevenue  projRevenue;
        ProjInvoiceOnAcc    projOnAcc;

        printDocuLine = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Line) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))
        {
            switch (_buffer.TableId)
            {
                case tableNum(ProjInvoiceItem)  :
                    projItem    = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalItem::find(projItem.ProjTransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceCost)  :
                    projCost    = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalCost::find(projCost.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceEmpl)  :
                    projEmpl    = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalEmpl::find(projEmpl.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceRevenue)  :
                    projRevenue = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalRevenue::find(projRevenue.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceOnAcc)  :
                    projOnAcc   = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalOnAcc::find(projOnAcc.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;
            }
            printDocuLine = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventTrans object to use in packing slip information.
    /// </summary>
    private void printInventTrans()
    {
        InventTransOriginId inventTransOriginId;
        ProjItemTrans       localProjItemTrans;

        inventTransOriginId = InventTransOrigin::findByInventTransId(projInvoiceItem.InventTransId).RecId;

        if (projInvoiceItem.ProjTransId)
        {
            localProjItemTrans = ProjItemTrans::find(projInvoiceItem.ProjTransId);
        }

        if (localProjItemTrans)
        {
            select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    inventTrans.ProjAdjustRefId == localProjItemTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId;
        }
        else
        {
            select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    !inventTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPackingSlipInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Packing slip information.
    /// </summary>
    /// <returns>
    /// Formatted string containing packing slip information.
    /// </returns>
    private str printPackingSlipInfo()
    {
        SalesShippingDate shippingDate;
        InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();

        InventQty salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTransOrigin.ItemId,
                                                                                                   inventTrans.InventDimId,
                                                                                                   inventTrans.Qty,
                                                                                                   inventTransOrigin.inventTable().inventUnitId(),
                                                                                                   projInvoiceItem.SalesUnit,
                                                                                                   NoYes::Yes);

        if (inventTrans.PackingSlipId)
        {
            shippingDate = (select custPackingSlipTrans
                    where inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId).DeliveryDate;
        }
        else
        {
            shippingDate = projInvoiceItem.DlvDate;
        }

        return this.formatPackingSlipInfo(salesQty * -1, inventTrans.PackingSlipId, shippingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProformaDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    /// <param name="_buffer">
    /// Common buffer for tables.
    /// </param>
    private void printProformaDocumentLine(Common   _buffer)
    {
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalCost            projProposalCost;
        ProjProposalItem            projProposalItem;
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalOnAcc           projProposalOnAcc;

        printDocuLine = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Line) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))
        {
            switch (_buffer.TableId)
            {
                case tableNum(ProjProposalItem):
                    projProposalItem    = _buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projProposalItem,
                                                                     ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                     DocuRestriction::External);
                    break;

                case tableNum(ProjProposalCost):
                    projProposalCost    = _buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projProposalCost,
                                                                     ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                     DocuRestriction::External);
                    break;

                case tableNum(ProjProposalEmpl):
                    projProposalEmpl    = _buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projProposalEmpl,
                                                                     ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                     DocuRestriction::External);
                    break;

                case tableNum(ProjProposalRevenue):
                    projProposalRevenue = _buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projProposalRevenue,
                                                                     ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                     DocuRestriction::External);
                    break;

                case tableNum(ProjProposalOnAcc):
                    projProposalOnAcc   = _buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projProposalOnAcc,
                                                                     ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                     DocuRestriction::External);
                    break;
            }
            printDocuLine = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceJournalEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceEmpl</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceJournalEmpl()
    {
        while select crosscompany projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceEmpl.InvoiceDate   == projInvoiceJour.InvoiceDate    &&
                  projInvoiceEmpl.DataAreaId    == projInvoiceJour.DataAreaId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjInvoiceEmpl(projInvoiceEmpl);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printDocumentLine(projInvoiceEmpl);
                this.insertPSAProjInvoiceTmp(projInvoiceEmpl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceJournalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceCost</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceJournalCost()
    {
        while select crosscompany projInvoiceCost
            where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceCost.InvoiceDate   == projInvoiceJour.InvoiceDate    &&
                  projInvoiceCost.DataAreaId    == projInvoiceJour.DataAreaId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjInvoiceCost(projInvoiceCost);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printDocumentLine(projInvoiceCost);
                this.insertPSAProjInvoiceTmp(projInvoiceCost);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceJournalItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceItem</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceJournalItem()
    {
        ProjInvoiceItem loopProjInvoiceItem;

        while select crosscompany projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate    &&
                  projInvoiceItem.DataAreaId    == projInvoiceJour.DataAreaId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjInvoiceItem(projInvoiceItem);
            if (this.isPrintInvoiceLine(projTrans))
            {
                if (projInvoiceItem.ItemType == ProjItemType::SalesOrder)
                {
                    this.printInventTrans();
                }

                // Get the Document attachment to display for each line
                this.printDocumentLine(projInvoiceItem);

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    if (!projCreditInvoicingSalesLine && projInvoiceItem.LineAmount < 0)
                    {
                        // Since this is not a sales line based invoice, simulate correction and corrective lines by
                        // showing two report lines per project invoice item line.
                        projInvoiceItem.Qty = abs(projInvoiceItem.Qty);
                        projInvoiceItem.TaxAmount = abs(projInvoiceItem.TaxAmount);
                        projInvoiceItem.LineAmount = abs(projInvoiceItem.LineAmount);
                        this.insertPSAProjInvoiceTmp(projInvoiceItem, '-');

                        // add the corrective line
                        this.insertPSAProjInvoiceTmp(projInvoiceItem, '+');
                    }
                    else
                    {
                        if (projCreditInvoicingSalesLine && projInvoiceItem.RefReturnInvoiceTrans_W)
                        {
                            projInvoiceItem.Qty        = abs(projInvoiceItem.Qty);
                            projInvoiceItem.LineAmount = abs(projInvoiceItem.LineAmount);
                            projInvoiceItem.TaxAmount  = abs(projInvoiceItem.TaxAmount);
                        }

                        this.insertPSAProjInvoiceTmp(projInvoiceItem);

                        if (projCreditInvoicingSalesLine && projInvoiceItem.CreditNoteInternalRef_PL)
                        {
                            while select loopProjInvoiceItem
                                where loopProjInvoiceItem.ProjInvoiceId == projInvoiceItem.ProjInvoiceId &&
                                      loopProjInvoiceItem.InvoiceDate   == projInvoiceItem.InvoiceDate   &&
                                      !loopProjInvoiceItem.RefReturnInvoiceTrans_W &&
                                      loopProjInvoiceItem.CreditNoteInternalRef_PL == projInvoiceItem.CreditNoteInternalRef_PL
                            {
                                this.insertPSAProjInvoiceTmp(loopProjInvoiceItem);
                            }
                        }
                    }
                }
                else
                {
                    // </GEEPL>
                    this.insertPSAProjInvoiceTmp(projInvoiceItem);
                    // <GEEPL>
                }
                // </GEEPL>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceJournalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceRevenue</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceJournalRevenue()
    {
        while select crosscompany projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceRevenue.InvoiceDate   == projInvoiceJour.InvoiceDate    &&
                  projInvoiceRevenue.DataAreaId    == projInvoiceJour.DataAreaId     &&
                  projInvoiceRevenue.IsRetained    == NoYes::No // Donot take transaction (fee) which are retainage related.
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjInvoiceRevenue(projInvoiceRevenue);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printDocumentLine(projInvoiceRevenue);
                this.insertPSAProjInvoiceTmp(projInvoiceRevenue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceJournalOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceOnAcc</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceJournalOnAcc()
    {
        while select crosscompany projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceOnAcc.InvoiceDate   == projInvoiceJour.InvoiceDate &&
                  projInvoiceOnAcc.DataAreaId    == projInvoiceJour.DataAreaId
        {
            prebill = this.isPreBillApplicable(projInvoiceOnAcc);

            // Get the Document attachment to display for each line
            this.printDocumentLine(projInvoiceOnAcc);
            this.insertPSAProjInvoiceTmp(projInvoiceOnAcc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calls to various methods to check whether record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceJournal()
    {
        this.processLinesFromInvoiceJournalEmpl();
        this.processLinesFromInvoiceJournalCost();
        this.processLinesFromInvoiceJournalItem();
        this.processLinesFromInvoiceJournalRevenue();
        this.processLinesFromInvoiceJournalOnAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceProposalEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceEmpl</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceProposalEmpl()
    {
        ProjProposalEmpl projProposalEmpl;

        while select projProposalEmpl
            where projProposalEmpl.ProposalId   == projInvoiceJour.ProposalId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjProposalEmpl(projProposalEmpl);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printProformaDocumentLine(projProposalEmpl);
                this.insertProformaPSAProjInvoiceTmp(projProposalEmpl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceProposalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceCost</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceProposalCost()
    {
        ProjProposalCost projProposalCost;

        while select projProposalCost
            where projProposalCost.ProposalId   == projInvoiceJour.ProposalId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjProposalCost(projProposalCost);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printProformaDocumentLine(projProposalCost);
                this.insertProformaPSAProjInvoiceTmp(projProposalCost);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceProposalItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceItem</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceProposalItem()
    {
        ProjProposalItem projProposalItem;

        while select projProposalItem
            where projProposalItem.ProposalId   == projInvoiceJour.ProposalId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjProposalItem(projProposalItem);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printProformaDocumentLine(projProposalItem);
                this.insertProformaPSAProjInvoiceTmp(projProposalItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceProposalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceRevenue</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceProposalRevenue()
    {
        ProjProposalRevenue projProposalRevenue;

        while select projProposalRevenue
            where projProposalRevenue.ProposalId   == projInvoiceJour.ProposalId
        {
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjProposalRevenue(projProposalRevenue);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printProformaDocumentLine(projProposalRevenue);
                this.insertProformaPSAProjInvoiceTmp(projProposalRevenue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceProposalOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether <c>ProjInvoiceOnAcc</c> record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceProposalOnAcc()
    {
        ProjProposalOnAcc projProposalOnAcc;
        
        while select projProposalOnAcc
            where projProposalOnAcc.ProposalId   == projInvoiceJour.ProposalId
        {
            prebill = this.isPreBillApplicable_Proposal(projProposalOnAcc);
            // Display zero sales price only if invoice line property is set.
            ProjTrans projTrans = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);
            if (this.isPrintInvoiceLine(projTrans))
            {
                // Get the Document attachment to display for each line
                this.printProformaDocumentLine(projProposalOnAcc);
                this.insertProformaPSAProjInvoiceTmp(projProposalOnAcc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinesFromInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls to various methods to check whether record can be printed and inserted for zero sales price.
    /// </summary>
    protected void processLinesFromInvoiceProposal()
    {
        this.processLinesFromInvoiceProposalEmpl();
        this.processLinesFromInvoiceProposalCost();
        this.processLinesFromInvoiceProposalItem();
        this.processLinesFromInvoiceProposalRevenue();
        this.processLinesFromInvoiceProposalOnAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        PSAProjInvoiceRPTHelperEE psaProjInvoiceRPTHelperEE;

        PSAProjInvoiceContract contract;
        prebill = false;

        // <GMY>
        isCountryRegionMY           = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        // </GMY>

        prePrintLevel = ProjFormletterParameters::find().PrePrintLevelInvoice;
        tmpPSAProjInvoiceHeader.setConnection(this.parmUserConnection());
        tmpPSAProjInvoice.setConnection(this.parmUserConnection());

        contract            = this.parmDataContract() as PSAProjInvoiceContract;
        companyInfo         = CompanyInfo::find();

        // <GTH>
        projInvoiceJourAdjustment = ProjInvoiceJourAdjustment_TH::findRecId(contract.parmAdjustmentRecId_TH());
        // </GTH>

        if (contract.parmProjInvoiceJourRecId())
        {
            projInvoiceJour = ProjInvoiceJour::findRecId(contract.parmProjInvoiceJourRecId());
        }

        if (contract.parmFormLetterRecordId())
        {
            this.unpackFormLetter(contract.parmFormLetterRecordId());
        }

        showSepaNotification = this.showSepaNotification();

        // <GMY>
        if (isCountryRegionMY)
        {
            custTable_InvoiceAccount    = CustTable::find(projInvoiceJour.InvoiceAccount);
        }
        // </GMY>

        this.initTempTableFromCompanyInfo();
        this.initTempTableForPaymentSlip();

        // Insert the common header data
        this.insertPSAProjInvoiceHeaderTmp();

        // <GEEU>
        projInvoiceLocalizationTmp.setConnection(this.parmUserConnection());
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            isGEEUCountryContext = true;
            projInvoiceLocalizationTmp.setConnection(this.parmUserConnection());

            psaProjInvoiceRPTHelperEE = PSAProjInvoiceRPTHelperEE::construct(projInvoiceLocalizationTmp);
            psaProjInvoiceRPTHelperEE.insertIntoProjInvoiceLocalizationTmp(projInvoiceJour);

            projCreditInvoicingSalesLine = psaProjInvoiceRPTHelperEE.parmProjCreditInvoicingSalesLine();
        }
        // </GEEU>

        // <GMY>
        if (isCountryRegionMY && projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST)
        {
            this.insertTaxes_MY();
        }
        // </GMY>


        // Get the Document attachment to display in header
        this.printDocumentHeader();

        if (projInvoiceJour.isProforma())
        {
            this.processLinesFromInvoiceProposal();
        }
        else
        {
            this.processLinesFromInvoiceJournal();
        }

        tmpPSAProjInvoiceTax
            = PSAProjInvoiceTaxTmp::insertPSAProjInvoiceTmpForTax(
                projInvoiceJour,
                PSAProjInvoiceTaxTmp::getTaxSpec(projInvoiceJour, formletterProformaPrint));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSepaNotification</Name>
				<Source><![CDATA[
    private boolean showSepaNotification()
    {
        if (projInvoiceJour.InvoiceAmount >= 0 && projInvoiceJour.DirectDebitMandate)
        {
            select firstonly custDirectDebitMandate
                    where custDirectDebitMandate.RecId == projInvoiceJour.DirectDebitMandate
                join custDirectDebitMandateBankAccount
                    where custDirectDebitMandateBankAccount.AccountID == custDirectDebitMandate.BankAccount &&
                            custDirectDebitMandateBankAccount.CustAccount == custDirectDebitMandate.CustAccount;

            if (custDirectDebitMandate && custDirectDebitMandateBankAccount)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (projInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(projInvoiceJour.RecId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the formletter packed class.
    /// </summary>
    /// <param name="_formLetterRecId">
    /// The recid of tempstroe where formletter is stored.
    /// </param>
    private void unpackFormLetter(RecId _formLetterRecId)
    {
        SRSTmpDataStore srsTmpDataStore;
        container       formLetterPackedValue;

        if (_formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == _formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                // get and delete first.
                formLetterPackedValue = srsTmpDataStore.Value;
                srsTmpDataStore.delete();

                // then create form letter
                if (projInvoiceJour.isProforma())
                {
                    formletterProformaPrint = FormletterProformaPrint::newUnpack(formLetterPackedValue);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTReliefClause_MY</Name>
				<Source><![CDATA[
    private str getGSTReliefClause_MY(ProjInvoiceJour _projInvoiceJour)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00006, funcName());

        TaxGSTReliefCategory_MY     reliefCategory;
        ProjProposalItem            projProposalItemLocal;
        ProjInvoiceItem             projInvoiceItemLocal;
        InventTableModule           inventTableModule;
        TaxGSTReliefGroupData_MY    reliefGroupData;

        container   reliefItemNumberCon;
        container   reliefScheduleCon;
        str         reliefClauseText;

        if (_projInvoiceJour.isProforma())
        {
            while select ReliefItemNumber, ReliefSchedule from reliefCategory
                order by ReliefCategoryId
                exists join inventTableModule
                    where inventTableModule.TaxGSTReliefCategory_MY == reliefCategory.RecId
                        && inventTableModule.ModuleType             == ModuleInventPurchSales::Sales
                exists join projProposalItemLocal
                    where projProposalItemLocal.ItemId      == inventTableModule.ItemId
                        && projProposalItemLocal.ProposalId == _projInvoiceJour.ProposalId
                exists join reliefGroupData
                    where reliefGroupData.TaxGSTReliefCategory_MY       == reliefCategory.RecId
                        && reliefGroupData.TaxGSTReliefGroupHeading_MY  == custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY
            {
                reliefItemNumberCon += reliefCategory.ReliefItemNumber;
                reliefScheduleCon   += reliefCategory.ReliefSchedule;
            }
        }
        else
        {
            while select ReliefItemNumber, ReliefSchedule from reliefCategory
                order by ReliefCategoryId
                exists join inventTableModule
                    where inventTableModule.TaxGSTReliefCategory_MY == reliefCategory.RecId
                        && inventTableModule.ModuleType             == ModuleInventPurchSales::Sales
                exists join projInvoiceItemLocal
                    where projInvoiceItemLocal.ItemId           == inventTableModule.ItemId
                        && projInvoiceItemLocal.ProjInvoiceId   == projInvoiceJour.ProjInvoiceId
                        && projInvoiceItemLocal.InvoiceDate     == projInvoiceJour.InvoiceDate
                exists join reliefGroupData
                    where reliefGroupData.TaxGSTReliefCategory_MY       == reliefCategory.RecId
                        && reliefGroupData.TaxGSTReliefGroupHeading_MY  == custTable_InvoiceAccount.TaxGSTReliefGroupHeading_MY
            {
                reliefItemNumberCon += reliefCategory.ReliefItemNumber;
                reliefScheduleCon   += reliefCategory.ReliefSchedule;
            }
        }

        if (reliefItemNumberCon && reliefScheduleCon)
        {
            reliefClauseText = strFmt(
                "@SYP4860801",
                con2Str(reliefItemNumberCon),
                con2Str(reliefScheduleCon));
        }

        return reliefClauseText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceTaxTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceTaxTmp))
    ]
    public PSAProjInvoiceTaxTmp getPSAProjInvoiceTax()
    {
        return tmpPSAProjInvoiceTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes_MY</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the project taxes information.
    /// </summary>
    /// <remarks>
    ///     This method is used for Malaysian.
    /// </remarks>
    public void insertTaxes_MY()
    {
        TaxSpec         taxSpec;
        Amount          amount;
        CashDiscAmount  cashDiscAmountTax;

        if (projInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct(#Blank, naDate(), projInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(formletterProformaPrint.tmpTaxWorkTrans(projInvoiceJour.RecId));
        }
        else
        {
            taxSpec = TaxSpec::construct(projInvoiceJour.LedgerVoucher, projInvoiceJour.InvoiceDate, projInvoiceJour.RecId);
        }

        taxSpec.parmLanguageId(projInvoiceJour.LanguageId);
        taxSpec.parmIsGSTInvoice_MY(true);

        while (taxSpec.parmTaxSpec(false))
        {
            if (TaxParameters::find().CashDiscOnInvoice)
            {
                if (projInvoiceJour.CashDiscPercent == 100)
                {
                    amount            = 0;
                    cashDiscAmountTax = 0;
                }
                else
                {
                    amount            = taxSpec.taxBaseAmount() / ((100 - projInvoiceJour.CashDiscPercent) / 100);
                    cashDiscAmountTax = amount * (projInvoiceJour.CashDiscPercent / 100);
                }
            }

            tmpPSAProjInvoice.clear();
            tmpPSAProjInvoice.IsGSTSummary_MY   = NoYes::Yes;
            tmpPSAProjInvoice.gstSummaryText_MY = taxSpec.getGSTSummaryText_MY(projInvoiceJour);
            tmpPSAProjInvoice.Amount_MY         = -amount;
            tmpPSAProjInvoice.CashDiscAmount_MY = -cashDiscAmountTax;
            tmpPSAProjInvoice.TaxBaseQty_MY     = -taxSpec.taxBaseQty();
            tmpPSAProjInvoice.TaxAmount_MY      = -taxSpec.taxAmount();
            tmpPSAProjInvoice.TaxBaseAmount_MY  = -taxSpec.taxBaseAmount();
            tmpPSAProjInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSplitPaymentNote_W</Name>
				<Source><![CDATA[
    private Notes addSplitPaymentNote_W(Notes _notes)
    {
        Notes ret = _notes;
        const str NewLine = '\n';

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(projInvoiceJour.custTrans().PaymMode);

            if (custPaymModeTable.SplitPayment_W == NoYes::Yes)
            {
                if (ret)
                {
                    ret += NewLine;
                }

                ret += custPaymModeTable.Name;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>