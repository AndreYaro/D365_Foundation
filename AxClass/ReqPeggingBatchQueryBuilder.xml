<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingBatchQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqPeggingBatchDataSourceBuilder</c> class builds form datasource
/// that is used to display pegging information for batch orders using co-products.
/// </summary>
class ReqPeggingBatchQueryBuilder
{
    QueryBuildRange batchPlanVersion;
    QueryBuildRange batchReqRefType;
    QueryBuildRange batchReqRefId;
    QueryBuildRange batchReqRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchReqTransDsInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>BatchReqTrans</c> query that will contain batch order and its related co-products.
    /// </summary>
    /// <param name = "_batchReqTransQuery">The <c>BatchReqTrans</c> query that should be initalized.</param>
    public void batchReqTransDsInit(Query _batchReqTransQuery)
    {
        var qbs             = _batchReqTransQuery.dataSourceTable(tablenum(ReqTrans));
        batchPlanVersion    = qbs.addRange(fieldnum(ReqTrans,PlanVersion));
        batchReqRefType     = qbs.addRange(fieldnum(ReqTrans,RefType));
        batchReqRefId       = qbs.addRange(fieldnum(ReqTrans,RefId));
        batchReqRecId       = qbs.addRange(fieldnum(ReqTrans,RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchReqTransDsExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets query range values based on given <c>ReqTrans</c> record.
    /// </summary>
    /// <param name = "_reqTrans">The <c>ReqTras</c> record</param>
    /// <returns><c>True</c> if given transaction is batch order; otherwhise <c>false</c></returns>
    public boolean batchReqTransDsExecuteQueryPre(ReqTrans _reqTrans)
    {
        boolean isBatch;

        #define.comma(',')

        if (#PmfEnabled
            && (    _reqTrans.RefType == ReqRefType::PmfPlannedProdBatch
                ||  _reqTrans.RefType == ReqRefType::PmfCoProduct)
            &&  InventTable::find(_reqTrans.ItemId).isFormulaAllowed())
        {
            batchPlanVersion.value(queryValue(_reqTrans.PlanVersion));
            batchReqRefType.value(
                queryValue(
                    ReqRefType::PmfPlannedProdBatch)
                        + #comma
                        + queryValue(ReqRefType::PmfCoProduct));
            batchReqRefId.value(queryValue(_reqTrans.RefId));
            batchReqRecId.value(SysQuery::valueUnlimited());
            isBatch = true;
        }
        else
        {
            batchReqRecId.value(queryValue(_reqTrans.RecId));
            batchPlanVersion.value(SysQuery::valueUnlimited());
            batchReqRefType.value(SysQuery::valueUnlimited());
            batchReqRefId.value(SysQuery::valueUnlimited());
            isBatch = false;
        }

        return isBatch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>