<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookDeleteTransProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes the deletion of transactions for a particular value model
/// which does not post transaction to general ledger.
/// </summary>
public class AssetBookDeleteTransProcess
{
    AssetDeleteTransactionTransType assetDeleteTransactionTransType;
    AssetTransDate startingDate;
    AssetBook assetBook;
    boolean depreciationTransDeleted;
    boolean extraordinaryDepreciationTransDeleted;
    boolean disposalTransDeleted;
    AssetDepreciationTime  accumulatedDepreciationTime;
    AssetAmount accumulatedAcquisitionPrice;
    AssetAmountReportingCurrency accumulatedAcquisitionPriceReportingCurrency;
    AssetSumCalc_Trans assetSumCalc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(AssetTrans));
        queryBuildDataSource.update(true);
        queryBuildDataSource.addSortField(fieldNum(AssetTrans, TransDate), SortOrder::Descending);
        queryBuildDataSource.addSortField(fieldNum(AssetTrans, CreatedDateTime), SortOrder::Descending);

        queryBuildDataSource.addRange(fieldNum(AssetTrans, AssetId)).value(assetBook.AssetId);
        queryBuildDataSource.addRange(fieldNum(AssetTrans, BookId)).value(assetBook.BookId);
        queryBuildDataSource.addRange(fieldNum(AssetTrans, TransDate)).value(queryRange(startingDate, dateMax()));

        switch (assetDeleteTransactionTransType)
        {
            case AssetDeleteTransactionTransType::All:
                break;

            case AssetDeleteTransactionTransType::Depreciation:
                queryBuildDataSource.addRange(fieldNum(AssetTrans, TransType)).value(
                    queryValue(AssetTransType::Depreciation)
                        + ','
                        + queryValue(AssetTransType::DepreciationAdj)
                        + ','
                        + queryValue(AssetTransType::ExtraordinaryDepreciation)
                        + ','
                        + queryValue(AssetTransType::BonusDepreciation));
                break;

            case AssetDeleteTransactionTransType::Disposals:
                queryBuildDataSource.addRange(fieldNum(AssetTrans, DisposalTransaction)).value(queryValue(NoYes::Yes));

                break;

            case AssetDeleteTransactionTransType::Revaluation:
                queryBuildDataSource.addRange(fieldNum(AssetTrans, TransType)).value(queryValue(AssetTransType::Revaluation));
                break;

            case AssetDeleteTransactionTransType::Reserve:
                queryBuildDataSource.addRange(fieldNum(AssetTrans, TransType)).value(
                    queryValue(AssetTransType::CapitalReserve)
                        + ','
                        + queryValue(AssetTransType::CapitalReserveTransfer));
                queryBuildDataSource.addRange(fieldNum(AssetTrans, DisposalTransaction)).value(queryValue(NoYes::No));

                break;

            case AssetDeleteTransactionTransType::WriteDowns:
                queryBuildDataSource.addRange(fieldNum(AssetTrans, TransType)).value(queryValue(AssetTransType::WriteDownAdj));
                break;

            case AssetDeleteTransactionTransType::WriteUps:
                queryBuildDataSource.addRange(fieldNum(AssetTrans, TransType)).value(queryValue(AssetTransType::WriteUpAdj));
                break;

            default:
                throw error(strFmt("@SYS12580",assetDeleteTransactionTransType));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalsSetFromVoucherTransDateSet</Name>
				<Source><![CDATA[
    private Set getJournalsSetFromVoucherTransDateSet(Set _voucherTransDateSet)
    {
        Set journalsSet = new Set(Types::String);
        SetEnumerator voucherDateSetEnumerator = _voucherTransDateSet.getEnumerator();

        while (voucherDateSetEnumerator.moveNext())
        {
            Voucher   voucher;
            TransDate transDate;

            [voucher, transDate] = voucherDateSetEnumerator.current();

            JournalId journalId = LedgerJournalTrans::findJournalForVoucher(voucher, transDate).JournalNum;

            journalsSet.add(journalId);
        }

        return journalsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalsWithAssetBook</Name>
				<Source><![CDATA[
    private void deleteJournalsWithAssetBook(Set _journalsSet)
    {
        SetEnumerator journalSetEnumerator = _journalsSet.getEnumerator();

        while (journalSetEnumerator.moveNext())
        {
            JournalId journalId = journalSetEnumerator.current();

            this.deleteJournalLinesWithAssetBook(journalId);
            this.deleteJournalIfLinesNotExist(journalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalIfLinesNotExist</Name>
				<Source><![CDATA[
    private void deleteJournalIfLinesNotExist(LedgerJournalId _assetJournalId)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;

        delete_from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _assetJournalId
        notexists join ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalLinesWithAssetBook</Name>
				<Source><![CDATA[
    private void deleteJournalLinesWithAssetBook(LedgerJournalId _assetJournalId)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        LedgerJournalTable ledgerJournalTable;

        switch (assetDeleteTransactionTransType)
        {
            case AssetDeleteTransactionTransType::All:
                delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId;

                break;

            case AssetDeleteTransactionTransType::Depreciation:
                 delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                            &&  (ledgerJournalTransAsset.TransType == AssetTransTypeJournal::Depreciation
                                 || ledgerJournalTransAsset.TransType == AssetTransTypeJournal::DepreciationAdj
                                 || ledgerJournalTransAsset.TransType == AssetTransTypeJournal::ExtraordinaryDepreciation
                                 || ledgerJournalTransAsset.TransType == AssetTransTypeJournal::BonusDepreciation);

                break;

            case AssetDeleteTransactionTransType::Disposals:
                 delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                            &&  (ledgerJournalTransAsset.TransType == AssetTransTypeJournal::DisposalSale
                                 || ledgerJournalTransAsset.TransType == AssetTransTypeJournal::DisposalScrap);

                break;

            case AssetDeleteTransactionTransType::Revaluation:
                delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                            &&  ledgerJournalTransAsset.TransType == AssetTransTypeJournal::Revaluation;

                break;

            case AssetDeleteTransactionTransType::Reserve:
                 delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                            &&  (ledgerJournalTransAsset.TransType == AssetTransTypeJournal::CapitalReserve
                                 || ledgerJournalTransAsset.TransType == AssetTransTypeJournal::CapitalReserveTransfer);

                break;

            case AssetDeleteTransactionTransType::WriteDowns:
                delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                            &&  ledgerJournalTransAsset.TransType == AssetTransTypeJournal::WriteDownAdj;

                break;

            case AssetDeleteTransactionTransType::WriteUps:
                 delete_from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _assetJournalId
                        && ledgerJournalTrans.TransDate >= startingDate
                    exists join ledgerJournalTransAsset
                        where ledgerJournalTransAsset.AssetId == assetBook.AssetId
                            && ledgerJournalTransAsset.BookId == assetBook.BookId
                            && ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                            &&  ledgerJournalTransAsset.TransType == AssetTransTypeJournal::WriteUpAdj;

                break;

            default:
                throw error(strFmt("@SYS12580",assetDeleteTransactionTransType));
        }

        delete_from ledgerJournalTransAsset
            notexists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransAsset.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalValidation</Name>
				<Source><![CDATA[
    private void finalValidation()
    {
        if (assetBook.NegativeNetBookValue == NoYes::No)
        {
            if (assetSumCalc.netBookValue() < 0)
            {
                throw warning(strFmt("@FixedAssets:FA_ErrorMessage_NegativeNetBookValueDeleteTransactions",
                    assetBook.AssetId,
                    assetBook.BookId));
            }
        }

        if ( assetBook.ExceedingNetBookValue == NoYes::No)
        {
            if (assetSumCalc.netBookValue() >
                assetSumCalc.acquisitionValue() +
                assetSumCalc.acquisitionAdjValue())
            {
                throw warning(strFmt("@FixedAssets:FA_ErrorMessage_NetBookValueHigherAcquisitionCostDeleteTransactions",
                    assetBook.AssetId,
                    assetBook.BookId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AssetBook _assetBook,
        AssetDeleteTransactionTransType _assetDeleteTransactionTransType,
        AssetTransDate _startingDate)
    {
        startingDate = _startingDate;
        assetBook = _assetBook;

        assetDeleteTransactionTransType = _assetDeleteTransactionTransType;
        disposalTransDeleted = false;
        extraordinaryDepreciationTransDeleted = false;
        depreciationTransDeleted = false;

        accumulatedAcquisitionPrice = 0;
        accumulatedAcquisitionPriceReportingCurrency = 0;
        accumulatedDepreciationTime = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReserveRevaluationTrans</Name>
				<Source><![CDATA[
    private void processReserveRevaluationTrans(AssetTrans _assetTrans)
    {
        AssetTrans associatedAssetBookTrans;

        if (_assetTrans.RevaluationDone)
        {
            select firstonly TransDate from associatedAssetBookTrans
                where associatedAssetBookTrans.RevaluedTransId == _assetTrans.RecId;

            if (associatedAssetBookTrans)
            {
                // associated transaction has a date less than starting date and wont be deleted.
                if (associatedAssetBookTrans.TransDate < startingDate)
                {
                    throw warning(strFmt("@FixedAssets:FA_ErrorMessage_RevaluationDeletionError",
                        assetBook.AssetId,
                        assetBook.BookId));
                }
            }
        }

        if (_assetTrans.ReserveTransferDone)
        {
            // if associated transaction exists throw error because we don't know if associated transaction will be deleted
            select firstonly RecId from associatedAssetBookTrans
                where associatedAssetBookTrans.ReserveTransId == _assetTrans.RecId;

            if (associatedAssetBookTrans.RecId != 0)
            {
                throw warning(strFmt("@FixedAssets:FA_ErrorMessage_CapitalReserveTransferDeletionError",
                    assetBook.AssetId,
                    assetBook.BookId));
            }
        }

        if (_assetTrans.RevaluedTransId)
        {
            select firstonly forupdate associatedAssetBookTrans
                where associatedAssetBookTrans.RecId == _assetTrans.RevaluedTransId;

            if (associatedAssetBookTrans)
            {
                associatedAssetBookTrans.RevaluationDone = NoYes::No;
                associatedAssetBookTrans.update();
            }
        }

        if (_assetTrans.ReserveTransId)
        {
            select firstonly forupdate associatedAssetBookTrans
                where associatedAssetBookTrans.RecId == _assetTrans.ReserveTransId;

            if (associatedAssetBookTrans)
            {
                associatedAssetBookTrans.ReserveTransferDone = NoYes::No;
                associatedAssetBookTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetBook</Name>
				<Source><![CDATA[
    private void updateAssetBook()
    {
        if (!AssetTrans::existTransactions(assetBook.AssetId, assetBook.BookId))
        {
            assetBook.Status = AssetStatus::NoAcquisition;
            assetBook.LastDepreciationDate = dateNull();
            assetBook.LastDepreciationDateExtraOrd = dateNull();
            assetBook.LifeTimeRest = assetBook.LifeTime;
            assetBook.DisposalDate = dateNull();
            assetBook.SaleValue = 0;
            assetBook.AcquisitionPrice = 0;
            assetBook.AcquisitionPriceReportingCurrency = 0;
            assetBook.doUpdate();
        }
        else
        {
            if (depreciationTransDeleted)
            {
                assetBook.LastDepreciationDate = AssetTrans::findLastNonReversedTransaction(
                    assetBook.AssetId,
                    assetBook.BookId,
                    AssetTransType::Depreciation).TransDate;

                if (assetBook.LastDepreciationDate != dateNull())
                {
                    assetBook.LifeTimeRest += accumulatedDepreciationTime;
                }
                else
                {
                    assetBook.LifeTimeRest = assetBook.LifeTime;
                }
            }

            if (extraordinaryDepreciationTransDeleted)
            {
                assetBook.LastDepreciationDateExtraOrd = AssetTrans::findLastNonReversedTransaction(
                    assetBook.AssetId,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation).TransDate;
            }

            if (disposalTransDeleted)
            {
                AssetTrans lastNonReversedDisposalSale;
                AssetTrans lastNonReversedDisposalScrap;

                lastNonReversedDisposalSale = AssetTrans::findLastNonReversedTransaction(
                    assetBook.AssetId,
                    assetBook.BookId,
                    AssetTransType::DisposalSale);

                lastNonReversedDisposalScrap = AssetTrans::findLastNonReversedTransaction(
                    assetBook.AssetId,
                    assetBook.BookId,
                    AssetTransType::DisposalScrap);

                if (!(lastNonReversedDisposalSale.RecId || lastNonReversedDisposalScrap.RecId))
                {
                    assetBook.Status = AssetStatus::Open;
                    assetBook.DisposalDate = dateNull();
                    assetBook.SaleValue = 0;
                }
                else if (lastNonReversedDisposalSale.RecId)
                {
                    assetBook.Status = AssetStatus::Sold;
                    assetBook.SaleValue = lastNonReversedDisposalSale.AmountMST;
                }
                else
                {
                    assetBook.Status = AssetStatus::Scrapped;
                }
            }

            if (assetSumCalc.netBookValue() != 0)
            {
                assetBook.Status = AssetStatus::Open;
            }

            if (assetSumCalc.netBookValue() == 0
                && assetBook.Status != AssetStatus::Sold
                &&  assetBook.Status != AssetStatus::Scrapped)
            {
                AssetTrans nonReversedAcquisitionTrans = AssetTrans::findLastNonReversedTransaction(
                    assetBook.AssetId,
                    assetBook.BookId,
                    AssetTransType::Acquisition);

                if (nonReversedAcquisitionTrans.RecId)
                {
                    assetBook.Status = AssetStatus::Closed;
                }
                else
                {
                    assetBook.Status = AssetStatus::NoAcquisition;
                }
            }

            if (accumulatedAcquisitionPrice)
            {
                assetBook.AcquisitionPrice -= accumulatedAcquisitionPrice;
                assetBook.AcquisitionPriceReportingCurrency -= accumulatedAcquisitionPriceReportingCurrency;
            }

            assetBook.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReversalTrans</Name>
				<Source><![CDATA[
    private boolean updateReversalTrans(AssetTrans _assetTrans, TraceNum _traceNum)
    {
        TransactionReversalTrans transactionReversalTransOriginal;
        TransactionReversalTrans transactionReversalTransCurrent;
        TransactionReversalTrans transactionReversalTransLatest;
        AssetTrans AssetTrans;

        boolean revoke;

        select firstonly forupdate transactionReversalTransOriginal
            exists join assetTrans
                where transactionReversalTransOriginal.TraceNum == _traceNum
                    && transactionReversalTransOriginal.Original == NoYes::Yes
                    && transactionReversalTransOriginal.RefTableId == tableNum(AssetTrans)
                    && assetTrans.TransType == _assetTrans.TransType
                    && transactionReversalTransOriginal.RefRecId == assetTrans.RecId;

        select forupdate transactionReversalTransCurrent
            where transactionReversalTransCurrent.TraceNum == _traceNum
                && transactionReversalTransCurrent.RefRecId == _assetTrans.RecId
                && transactionReversalTransCurrent.RefTableId == tableNum(AssetTrans);

        if (transactionReversalTransCurrent.RecId && transactionReversalTransCurrent.Last)
        {
            select firstonly forupdate transactionReversalTransLatest order by RefRecId desc
                exists join assetTrans
                    where transactionReversalTransLatest.TraceNum == _traceNum
                        && transactionReversalTransLatest.RefTableId == tableNum(AssetTrans)
                        && transactionReversalTransLatest.Last == NoYes::No
                        && transactionReversalTransLatest.Original == NoYes::No
                        && assetTrans.TransType == _assetTrans.TransType
                        && assetTrans.AssetId == _assetTrans.AssetId
                        && assetTrans.BookId == _assetTrans.BookId
                        && transactionReversalTransLatest.RefRecId == assetTrans.RecId;

            if (transactionReversalTransLatest.RecId)
            {
                transactionReversalTransLatest.Last = NoYes::Yes;
                transactionReversalTransLatest.doUpdate();

                revoke = transactionReversalTransOriginal.Reversed;
                transactionReversalTransOriginal.Reversed = !revoke;
                transactionReversalTransOriginal.doUpdate();
            }
            else
            {
                revoke = true;
                transactionReversalTransOriginal.delete();
            }

            transactionReversalTransCurrent.delete();
        }

        return revoke;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs the object of the class <c>AssetBookDeleteTransProcess</c>
    /// </summary>
    /// <param name = "_assetBook">The value model whose transactions will be deleted</param>
    /// <param name = "_assetDeleteTransactionTransType">The transaction type to be deleted</param>
    /// <param name = "_startingDate">The starting date of the transactions to be deleted</param>
    /// <returns>an instance of the class <c>AssetBookDeleteTransProcess</c></returns>
    public static AssetBookDeleteTransProcess construct(
        AssetBook _assetBook,
        AssetDeleteTransactionTransType _assetDeleteTransactionTransType,
        AssetTransDate _startingDate = dateNull())
    {
        AssetBookDeleteTransProcess assetBookDeleteTrans;
        assetBookDeleteTrans = new AssetBookDeleteTransProcess(_assetBook, _assetDeleteTransactionTransType, _startingDate);

        return assetBookDeleteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialValidation</Name>
				<Source><![CDATA[
    private void initialValidation()
    {
        if (assetBook.assetBookTable().postToGeneralLedger())
        {
            throw warning(strFmt("@FixedAssets:FA_ErrorMessage_ValueModelLedgerPostingDeleteTrans", assetBook.BookId));
        }

        if (!(assetDeleteTransactionTransType == AssetDeleteTransactionTransType::All
              || assetDeleteTransactionTransType == AssetDeleteTransactionTransType::Disposals)
              && (assetBook.Status == AssetStatus::Scrapped || assetBook.Status == AssetStatus::Sold))
        {
            throw warning(strFmt("@FixedAssets:FA_ErrorMessage_DeleteTransactionOfDisposedAsset", assetBook.AssetId, assetBook.BookId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDepreciationtrans</Name>
				<Source><![CDATA[
    private void processDepreciationtrans(AssetTrans _assetTrans, TraceNum _traceNum, boolean _revoke)
    {
        AssetDepreciationTime  currentDepreciationTime = 0;
        AssetTrans assetTransOriginal;

        if (_assetTrans.TransType == AssetTransType::Depreciation)
        {
            if (_traceNum)
            {
                // The original transaction is needed to get the depreciation time.
                assetTransOriginal = AssetBookDeleteTransProcess::findOriginalAssetTrans(_traceNum);
                currentDepreciationTime = AssetBookDeleteTransProcess::getNumberOfDepreciationPeriods(assetTransOriginal);
            }
            else
            {
                currentDepreciationTime = AssetBookDeleteTransProcess::getNumberOfDepreciationPeriods(_assetTrans);
            }

            if (_revoke)
            {
                accumulatedDepreciationTime -= currentDepreciationTime;
            }
            else
            {
                accumulatedDepreciationTime += currentDepreciationTime;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAcquisitionPrice</Name>
				<Source><![CDATA[
    private void updateAcquisitionPrice(AssetTrans _assetTrans)
    {
        if (_assetTrans.TransType == AssetTransType::Acquisition
                || _assetTrans.TransType == AssetTransType::AcquisitionAdj
                || _assetTrans.TransType == AssetTransType::CapitalReserveTransfer)
        {
            accumulatedAcquisitionPrice += _assetTrans.AmountMST;
            accumulatedAcquisitionPriceReportingCurrency += _assetTrans.ReportingCurrencyAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all the  specified transactions types posted after a particular date
    /// belonging to the given value model which does not post to general ledger
    /// </summary>
    /// <returns>A set of ledger journal numbers from which journal lines were deleted</returns>
    public Set deleteTrans()
    {
        JournalId   assetJournalId = '';
        boolean     transactionFound = false;
        AssetTrans  assetTransOriginal;
        Set         voucherTransDateSet = new Set(Types::Container);

        this.initialValidation();

        ttsbegin;

        QueryRun queryRun = new QueryRun(this.buildQuery());

        while (queryRun.next())
        {
            boolean deleteReversal = false;
            transactionFound = true;

            AssetTrans assetTrans = queryRun.get(tableNum(AssetTrans));

            voucherTransDateSet.add([assetTrans.Voucher, assetTrans.TransDate]);

            TraceNum traceNum = TransactionReversalTrans::findTransactionReversalTrans(tableNum(AssetTrans), assetTrans.RecId).TraceNum;

            if (traceNum)
            {
                deleteReversal = this.updateReversalTrans(assetTrans, traceNum);
            }

            this.processDepreciationTrans(assetTrans, traceNum, deleteReversal);

            this.updateAcquisitionPrice(assetTrans);

            this.processReserveRevaluationTrans(assetTrans);

            this.setTransTypeDeletedFlags(assetTrans);

            assetTrans.delete();
        }

        Set journalsSet = this.getJournalsSetFromVoucherTransDateSet(voucherTransDateSet);
        this.deleteJournalsWithAssetBook(journalsSet);

        if (transactionFound)
        {
            assetSumCalc = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId);
            this.finalValidation();
            this.updateAssetBook();
        }

        ttscommit;

        return journalsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTypeDeletedFlags</Name>
				<Source><![CDATA[
    private void setTransTypeDeletedFlags(AssetTrans _assetTrans)
    {
        if (_assetTrans.TransType == AssetTransType::Depreciation)
        {
            depreciationTransDeleted = true;
        }

        if (_assetTrans.TransType == AssetTransType::ExtraordinaryDepreciation)
        {
            extraordinaryDepreciationTransDeleted = true;
        }

        if (_assetTrans.DisposalTransaction == NoYes::Yes)
        {
            disposalTransDeleted = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfDepreciationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number of periods depreciated using the asset trans.
    /// </summary>
    /// <param name = "_assetTrans">asset trans record</param>
    /// <returns>number of depreciated periods</returns>
    public static AssetDepreciationTime getNumberOfDepreciationPeriods(AssetTrans _assetTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        AssetDepreciationTime returnValue;

        select sum(DepreciationTime) from ledgerJournalTransAsset
            where ledgerJournalTransAsset.AssetId  == _assetTrans.AssetId
                && ledgerJournalTransAsset.BookId   == _assetTrans.BookId
                && ledgerJournalTransAsset.TransType== AssetTransTypeJournal::Depreciation
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TransDate == _assetTrans.TransDate
                    && ledgerJournalTrans.Voucher   == _assetTrans.Voucher
                    && ledgerJournalTrans.RecId == ledgerJournalTransAsset.RefRecId;

        returnValue = ledgerJournalTransAsset.DepreciationTime;

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the original asset transaction assosicated with the trace number.
    /// </summary>
    /// <param name = "_traceNum">The trace number</param>
    /// <returns>The asset transaction record</returns>
    public static AssetTrans findOriginalAssetTrans(TraceNum _traceNum)
    {
        AssetTrans assetTransOriginal;
        TransactionReversalTrans transactionReversalTransOrig;

        select firstonly RefRecId from transactionReversalTransOrig
            where transactionReversalTransOrig.TraceNum == _traceNum
                && transactionReversalTransOrig.Original == true
                && transactionReversalTransOrig.RefTableId == tableNum(AssetTrans);

        select firstonly assetTransOriginal
            where assetTransOriginal.RecId == transactionReversalTransOrig.RefRecId;

        return assetTransOriginal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>