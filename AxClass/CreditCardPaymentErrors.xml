<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentErrors</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A collection of <c>CreditCardPaymentError</c> objects.
/// </summary>

class CreditCardPaymentErrors
{
    Array errors;
    private boolean containsNetworkError;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an error to the list of errors.
    /// </summary>
    /// <param name="_error">
    /// An error.
    /// </param>
    protected void addError(CreditCardPaymentError _error)
    {
        errors.value(errors.lastIndex() + 1, _error);

        if (!containsNetworkError && _error.parmCode() == enum2int(Microsoft.Dynamics.Retail.PaymentSDK.Portable.ErrorCode::CommunicationError))
        {
            containsNetworkError = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of errors.
    /// </summary>
    /// <returns>
    /// A non-negative integer.
    /// </returns>
    public int count()
    {
        return errors.lastIndex();
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsNetworkError</Name>
				<Source><![CDATA[
    internal boolean containsNetworkError()
    {
        return containsNetworkError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display all the errors in the <c>infolog</c> window.
    /// </summary>
    /// <param name = "_showAsInfo">A boolean value indicating if errors should go to messaging center.</param>
    /// <returns>true if the number of errors is not zero.</returns>
    public boolean displayErrors(boolean _showAsInfo = true)
    {
        var n = errors.lastIndex();

        for (var i = 1; i <= n; i++)
        {
            var error = this.getError(i);
            if (_showAsInfo)
            {
                info(strFmt("%1(%2)", error.parmMessage(), error.parmCode()));
            }
            else
            {
                warning(strFmt("%1(%2)", error.parmMessage(), error.parmCode()));
            }
        }
        return n > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an error at a given index.
    /// </summary>
    /// <param name="_index">
    /// A non-negative integer.
    /// </param>
    /// <returns>
    /// An error.
    /// </returns>
    public CreditCardPaymentError getError(int _index)
    {
        return errors.value(_index);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        errors = new Array(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts errors to a human readable string.
    /// </summary>
    /// <returns>
    /// A string.
    /// </returns>
    /// <remarks>
    /// Each error is seperated by a newline and is formatted as "error text(error number)".
    /// </remarks>
    public str toString()
    {
        var n = errors.lastIndex();
        str s;

        for (var i = 1; i <= n; i++)
        {
            var error = this.getError(i);
            s += strFmt("%1(%2)\n", error.parmMessage(), error.parmCode());
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasCanceledByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the error is due to a user abort request.
    /// </summary>
    /// <returns>
    /// true if the user aborted the operation.
    /// </returns>
    public boolean wasCanceledByUser()
    {
        if (errors.lastIndex() == 1)
        {
            return errors.value(1).parmCode() == enum2int(Microsoft.Dynamics.Retail.PaymentSDK.Portable.ErrorCode::UserAborted);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CreditCardPaymentErrors construct()
    {
        return new CreditCardPaymentErrors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromPaymentErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the class where the error values are provided.
    /// </summary>
    /// <param name="_paymentErrors">
    /// An array of errors.
    /// </param>
    /// <returns>
    /// An instance of the <c>CreditCardPaymentErrors</c> class.
    /// </returns>
    public static CreditCardPaymentErrors fromPaymentErrors(Microsoft.Dynamics.Retail.PaymentSDK.Portable.PaymentError[] _paymentErrors)
    {
        var errors = new CreditCardPaymentErrors();

        if (_paymentErrors != null)
        {
            var n = _paymentErrors.get_Length();
            for (var i = 0; i < n; i++)
            {
                Microsoft.Dynamics.Retail.PaymentSDK.Portable.PaymentError paymentError = _paymentErrors.GetValue(i);
                errors.addError(CreditCardPaymentError::construct(CLRInterop::getAnyTypeForObject(paymentError.get_Code()), paymentError.get_Message()));
            }
        }
        return errors;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>