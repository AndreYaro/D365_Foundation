<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaym_GiftCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustPaym_GiftCard</c> class that handles gift card payments.
/// </summary>
class MCRCustPaym_GiftCard extends MCRCustPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a payment field should be editable by the user.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method checks/changes the allow edit property.
    /// </param>
    /// <returns>
    ///     true if editing should be allowed; otherwise, false.
    /// </returns>
    public boolean allowEdit(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, PercentAmount):
                return false;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditGiftCardSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines is it is allowable to update the serial number.
    /// </summary>
    /// <returns>
    ///     true if there is any posted amount; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The serial number is not allowed to be updated if any amount has been
    ///     posted for this payment.
    /// </remarks>
    public boolean allowEditGiftCardSerialNum()
    {
        if (mcrCustPaymTable.PostedAmount != 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the passed amount can be posted.
    /// </summary>
    /// <param name="_postAmount">
    ///     The amount to be checked if it can be posted.
    /// </param>
    /// <returns>
    ///     true if the amount passed in can be posed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     On a return of a gift cert or a gift card, if not advance credit
    ///     then the payment will be a non prepay in which case the amount needs
    ///     to be posted at invoicing. At this point the custpaymstatus is
    ///     authorized and not paid or posted.
    /// </remarks>
    public boolean canPost(AmountCur _postAmount)
    {
        if (_postAmount != 0)
        {
            if (mcrCustPaymTable.IsPrepay)
            {
                if (mcrCustPaymTable.Status == MCRCustPaymStatus::Paid
                    || mcrCustPaymTable.Status == MCRCustPaymStatus::Posted)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if (mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the gift card record associated with this payment.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A boolean that determines if the found record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>RetailGiftCardTable</c> found.
    /// </returns>
    public RetailGiftCardTable findGiftCard(boolean _forUpdate = false)
    {
        //Use the decrypted serial number
        return RetailGiftCardTable::mcrFindRecId(mcrCustPaymTable.PaymInfoRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default value of the passed field if it has been defined.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method finds the default value.
    /// </param>
    /// <returns>
    ///     The default value of the specified field if it is defined; otherwise, null.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        Percent totalPercentAmount = 0.0;

        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrepay):
                return NoYes::Yes;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                return 0.0;
        }

        return super(_fieldID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment account and account type.
    /// </summary>
    /// <returns>
    /// The account type <c>LedgerJournalACType</c> and the account <c>LedgerJournalAC</c>
    /// </returns>
    /// <remarks>
    /// By default, the account type and account are determined by the payment method.
    /// </remarks>
    public container getPaymAccount()
    {
        RetailStoreTenderTypeCardTable      retailStoreTenderTypeCardTable;
        LedgerJournalACType                 offsetType;
        LedgerDimensionDefaultAccount       offsetAccount;

        retailStoreTenderTypeCardTable = RetailStoreTenderTypeCardTable::find(mcrCustPaymTable.Channel,
                                                                                mcrCustPaymTable.TenderTypeId,
                                                                                mcrCustPaymTable.CardTypeId);

        if (retailStoreTenderTypeCardTable)
        {
            switch (retailStoreTenderTypeCardTable.accountType)
            {
                case RetailLedgerBank::Bank:
                    offsetType = LedgerJournalACType::Bank;
                break;
                case RetailLedgerBank::Ledger:
                    offsetType = LedgerJournalACType::Ledger;
                break;
            }
            offsetAccount = retailStoreTenderTypeCardTable.LedgerDimension;
        }
        else
        {
            throw error(strFmt("@MCR40426",enum2str(mcrCustPaymTable.CustPaymType)));
        }

        return [offsetType, offsetAccount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an identifier for this payment.
    /// </summary>
    /// <returns>
    ///     An identifier for this payment.
    /// </returns>
    /// <remarks>
    ///     The payment reference is written to the ledger journal during
    ///     posting, and is intended to identify this payment on a bank
    ///     deposit slip or for other financial records.
    ///
    ///     For a gift certificate payment, the return value is the serial number.
    /// </remarks>
    protected PaymReference getPaymReference()
    {
        return RetailGiftCardTable::mcrFindRecId(mcrCustPaymTable.PaymInfoRecId).entryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a gift certificate serial number has been provided.
    /// </summary>
    /// <returns>
    ///     true if the gift certificate's serial number has been provided; otherwise, false.
    /// </returns>
    public boolean hasPaymTypeData()
    {
        return mcrCustPaymTable.PaymInfoTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new customer payment of type "gift certificate".
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    ///     The <c>MCRCustPaymTable</c> used to create a new payment.
    /// </param>
    /// <param name="_allowUserInput">
    ///     A boolean that determines whether to allow user input during the
    ///     process of creating a new payment.
    /// </param>
    public void new(MCRCustPaymTable _mcrCustPaymTable, boolean _allowUserInput)
    {
        // Add Gift Card to this logic
        if (_mcrCustPaymTable.CustPaymType != MCRCustPaymType::GiftCard)
        {
            throw error(strFmt("@MCR32269", funcName(),
                               enum2str(MCRCustPaymType::GiftCard)));
        }

        super(_mcrCustPaymTable, _allowUserInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    [Hookable(false)]
    protected real performBalanceCheck()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs authorization on this payment.
    /// </summary>
    /// <returns>
    ///     The resulting payment status of either MCRCustPaymStatus::Authorized or MCRCustPaymStatus::Declined.
    /// </returns>
    /// <remarks>
    ///     A gift card payment is authorized if the remaining amount on the gift
    ///     card plus all unposted amounts is less than or equal to the payment amount.
    /// </remarks>
    protected MCRCustPaymStatus performAuth()
    {
        RetailGiftCardTable retailGiftCardTable = this.findGiftCard();

        if (retailGiftCardTable
            && MCRGiftCard::availableBalance(retailGiftCardTable.entryId) < mcrCustPaymTable.getUnpostedAmount())
        {
            warning("@MCR11252");

            mcrCustPaymTable.Status = MCRCustPaymStatus::Declined;
        }
        else
        {
            // Gift card /Gift cert if prepay can be
            // marked paid else it should be authorized.
            if (mcrCustPaymTable.IsPrepay == NoYes::Yes)
            {
                mcrCustPaymTable.Status = MCRCustPaymStatus::Paid;
            }
            else
            {
                mcrCustPaymTable.Status = MCRCustPaymStatus::Authorized;
            }
        }

        ttsBegin;
        mcrCustPaymTable.update();
        ttsCommit;

        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuthReversal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Throws error because reversal not implemented for Gift certificates.
    /// </summary>
    /// <returns>
    ///     An error describing the incorrect use of this function.
    /// </returns>
    public boolean performAuthReversal()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the posting operations using the passed amount.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    /// <remarks>
    ///     Invoked to perform posting operations after posting records to the
    ///     ledger journal.
    ///     Subtract _amount from the gift card's remaining amount.
    /// </remarks>
    protected void performPost(Amount _amount)
    {
        RetailParameters retailParameters = RetailParameters::find();

        if (!retailParameters.GiftCardCompany
            || retailParameters.GiftCardCompany == curext())
        {
            RetailGiftCardTransactions::postFromPaymTable(_amount, this.mcrCustPaymTable);
        }
        else
        {
            changeCompany(retailParameters.GiftCardCompany)
            {
                RetailGiftCardTransactions::postFromPaymTable(_amount, this.mcrCustPaymTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for authorization.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and the payment should
    ///     be allowed to be submitted for authorization; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the return value is false, then this payment should not be submitted
    ///     for authorization.
    /// </remarks>
    public boolean validateAuthorize(boolean _showErrors = true)
    {
        MCRCustPaymTotals   mcrCustPaymTotals;
        RetailGiftCardTable retailGiftCardTable;

        boolean isValid;

        setPrefix(strFmt("@MCR32270", mcrCustPaymTable.TenderTypeId,
                         mcrCustPaymTable.Amount));

        isValid = super(_showErrors);

        // payment account is required
        if (conpeek(this.getPaymAccount(), 2) == 0)
        {
            isValid = false;

            if (_showErrors)
            {
                error(strfmt("@MCR10845", mcrCustPaymTable.TenderTypeId));
            }
        }

        // Avoid calling encryption when the calling method extra times in validate serial num
        // by passing in the unencrypted and encrypted serial number.

        // Serial number must be valid.
        // Check serial number only if gift card.
        if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard)
        {
            if (!MCRCustPaym_GiftCard::ValidatePaymentGiftCardSerialNum(mcrCustPaymTable.PaymInfoRecId, _showErrors))
            {
                isValid = false;
            }
            else
            {
                // currency on gift certificate must match that of payment
                mcrCustPaymTotals = MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId,
                                                              mcrCustPaymTable.RefRecId);
                retailGiftCardTable = RetailGiftCardTable::mcrFindRecId(mcrCustPaymTable.PaymInfoRecId);

                if (retailGiftCardTable &&
                    (mcrCustPaymTotals.getCurrency() != retailGiftCardTable.CurrencyCode))
                {
                    isValid = false;

                    if (_showErrors)
                    {
                        error(strfmt("@MCR11247",
                            retailGiftCardTable.CurrencyCode,
                            mcrCustPaymTotals.getCurrency()));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates post to ensure that on a return an authorized gift card will not
    ///     issue an error.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be validated in the post.
    /// </param>
    /// <param name="_showErrors">
    ///     A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    ///     true if the amount being posted is valid; otherwise, false.
    /// </returns>
    public boolean validatePost(Amount _amount, boolean _showErrors = true)
    {
        boolean isValid = true;

        Amount unpostedAmount = mcrCustPaymTable.getUnpostedAmount();

        if (mcrCustPaymTable.IsPrepay)
        {
            isValid = super(_amount, _showErrors);
        }
        else
        {
            // this payment must be Posted/Paid
            if (mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized)
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR30348", enum2str(mcrCustPaymTable.Status)));
                }
            }

            // must be a non-zero amount
            if (_amount == 0.0)
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount must have the same sign as the unposted payment amount
            if (isValid && sign(_amount) != sign(unpostedAmount))
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }

            // the amount may not be greater than the unposted payment amount
            if (isValid && abs(_amount) > abs(unpostedAmount))
            {
                isValid = false;

                if (_showErrors)
                {
                    error(strfmt("@MCR10796", num2str(_amount, 1, 2, -1, -1)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for an insert or update.
    /// </summary>
    /// <param name="_showErrors">
    ///       A boolean that determins whether to write the errors to an infolog; optional.
    /// </param>
    /// <param name="_validateAccountSetup">
    ///     A boolean determing whether to validate if an account is
    ///     setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>
    ///     Returns true if all data for this payment is valid and should be allowed
    ///     to be saved to the database.  Returns false if one or more errors exist.
    /// </returns>
    public boolean validateWrite(boolean _showErrors = true,
                                 boolean _validateAccountSetup = true)
    {
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable;
        RetailTenderTypeCardTable      retailTenderTypeCardTable;

        // Cards use account on the <c>RetailStoreTenderTypeCardTable</c>, so skip account
        //  validation in parent class
        boolean isValid = super(_showErrors, false);

        // serial number is required
        if (!this.hasPaymTypeData())
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR11008");
            }
        }
        // Serial number must be valid.
        // Check serial number only for a gift card.
        if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard
            && !MCRCustPaym_GiftCard::ValidatePaymentGiftCardSerialNum(mcrCustPaymTable.PaymInfoRecId, _showErrors))
        {
            isValid = false;
        }

        if (!MCRCustPaymTable.checkAllowPaymentByPolicies(_showErrors))
        {
            isValid = false;
        }

        if (this.isGiftCardAvailBalanceLessThanUnpostedAmount(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR11158");
            }
        }
        retailStoreTenderTypeCardTable = RetailStoreTenderTypeCardTable::find(mcrCustPaymTable.Channel,
                                                                              mcrCustPaymTable.TenderTypeId,
                                                                              mcrCustPaymTable.CardTypeId);
        // Validate card setup
        // Related card table must be of type gift card
        if (retailStoreTenderTypeCardTable)
        {
            retailTenderTypeCardTable = RetailTenderTypeCardTable::find(retailStoreTenderTypeCardTable.cardTypeId);
            if (this.isCardTypeGiftCard(retailTenderTypeCardTable))
            {
                isValid = false;
                if (_showErrors)
                {
                    error(strFmt("@MCR40420",
                            retailTenderTypeCardTable.cardTypes,
                            RetailChannelTable::findByOperatingUnitId(mcrCustPaymTable.Channel).ChannelType));
                }
            }
            // payment account is required if parameter is true
            if (this.isPaymentAccountRequired(retailStoreTenderTypeCardTable, _validateAccountSetup))
            {
                isValid = false;
                if (_showErrors)
                {
                    error(strFmt("@MCR10845", mcrCustPaymTable.TenderTypeId));
                }
            }
        }
        else
        {
            isValid = false;
            if (_showErrors)
            {
                error(strFmt("@MCR40422",
                        mcrCustPaymTable.CardTypeId,
                        RetailChannelTable::findByRecId(mcrCustPaymTable.Channel).name()));
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGiftCardAvailBalanceLessThanUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a gift card available balance is less than unposted amount.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if a gift card available balance is less than unposted amount; otherwise, false.
    /// </returns>
    protected boolean isGiftCardAvailBalanceLessThanUnpostedAmount(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.getGiftCardAvailableBalance() < _mcrCustPaymTable.getUnpostedAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCardTypeGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether card type is gift card or not.
    /// </summary>
    /// <param name = "_retailTenderTypeCardTable">
    /// The record buffer of <c>RetailTenderTypeCardTable</c> table.
    /// </param>
    /// <returns>
    /// True if card type is not gift card; otherwise, false.
    /// </returns>
    protected boolean isCardTypeGiftCard(RetailTenderTypeCardTable _retailTenderTypeCardTable)
    {
        return (_retailTenderTypeCardTable.cardTypes != RetailCardTypesBase::GiftCard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentAccountRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the payment account is required.
    /// </summary>
    /// <param name = "_retailStoreTenderTypeCardTable">
    /// The record buffer of <c>RetailStoreTenderTypeCardTable</c> table.
    /// </param>
    /// <param name = "_validateAccountSetup">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// True if payment account is not required; otherwise, false.
    /// </returns>
    protected boolean isPaymentAccountRequired(RetailStoreTenderTypeCardTable _retailStoreTenderTypeCardTable, boolean _validateAccountSetup)
    {
        return (_validateAccountSetup
                && _retailStoreTenderTypeCardTable.LedgerDimension == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentGiftCardSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not the given serial number is valid.
    /// </summary>
    /// <param name="_paymInfoRecId">
    /// The RecID of the <c>RetailGiftCardTable</c> record to be validated against.
    /// </param>
    /// <param name="_showErrors">
    /// If true, errors are written to the infolog.
    /// </param>
    /// <returns>
    /// true if the given serial number is valid; otherwise, false.
    /// </returns>
    public static boolean validatePaymentGiftCardSerialNum(RecId _paymInfoRecId,
                                                            boolean _showErrors = true)
    {
        boolean          isValid     = true;
        MCRCheckDigit    checkDigit  = new MCRCheckDigit_Mod97();
        RetailGiftCardTable retailGiftCardTable;

        // Avoid calling encryption when the calling method already has the field encrypted.
        retailGiftCardTable = RetailGiftCardTable::mcrFindRecId(_paymInfoRecId);
        //Check digits only apply to gift certs.
        if (RetailGiftCardTable.MCRGiftCardType == MCRGiftCardType::Email
            && ! checkDigit.validate(retailGiftCardTable.entryId))
        {
            if (_showErrors)
            {
                error(strFmt("@MCR11009", retailGiftCardTable.entryId));
            }
            //If check digit(s) not right, don't do further validation.
            return false;
        }

        if (   isValid
            && retailGiftCardTable.Reserved
           )
        {
            isValid = false;
            if (_showErrors)
            {
                error("@MCR40293");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournal</Name>
				<Source><![CDATA[
    public void postToLedgerJournal(Amount _amount, boolean _isPrepay)
    {
        //<GEERU>
        RetailGiftCardPost_RU giftCardPost_RU;

        if (RetailParameters::find().ProcessGiftCardsAsPrepayments_RU)
        {
            giftCardPost_RU = RetailGiftCardPost_RU::construct();

            giftCardPost_RU.createGiftCardJournalLines(
                mcrCustPaymTable.getGiftCardNumber(),
                mcrCustPaymTable.CustAccount,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                mcrCustPaymTable.CurrencyCode,
                - _amount,
                this.parmDefaultDimension(),
                null,
                conNull(),
                _isPrepay,
                mcrCustPaymTable.displayOrderID(),
                mcrCustPaymTable.RecId);

            giftCardPost_RU.post();
        }
        else
        {
        //</GEERU>
            super(_amount, _isPrepay);
        //<GEERU>
        }
        //</GEERU>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>