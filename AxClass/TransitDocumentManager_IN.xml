<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentManager_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The manager class for maintaining transit documents attached to transactions.
/// </summary>
/// <remarks>
/// This is a global class now.
/// </remarks>
public class TransitDocumentManager_IN
{
    #TransitDocumentManager

    private RefRecId removedEInvoiceEWayBillRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new transit document manager for the specified transaction
    /// record.
    /// </summary>
    /// <returns>
    /// The transit document manager for manipulating transit documents.
    /// </returns>
    public static TransitDocumentManager_IN newManager()
    {
        TransitDocumentManager_IN   manager;

        manager = new TransitDocumentManager_IN();

        manager.init();

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches a transit document to the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction record.
    /// </param>
    /// <param name="_transitDocument">
    /// The record for transit document content.
    /// </param>
    /// <param name="_transHeader">
    /// The transaction header table.
    /// </param>
    /// <returns>
    /// Whether the transit document is successfully attached to the transaction or not.
    /// </returns>
    public boolean addTransitDocument(
        Common _trans, 
        Common _transitDocument, 
        Common _transHeader = null)
    {
        TransitDocumentType_IN                      documentType;
        TransitDocumentTransactionRelationMap_IN    newRelation;

        // Determine the document type
        documentType = this.findTransitDocumentType(_transitDocument);

        if (!this.allowToAdd(_trans, documentType))
        {
            return false;
        }

        if (OnlineInvoicingHelper_IN::tableSupportsEInvoicing(_trans.TableId)
            && documentType.RefTableId == tableNum(TransitDocumentEWayBill_IN))
        {
            TransitDocumentEWayBill_IN eWayBill = _transitDocument;
            if (TaxGSTEwayBillTypes_IN::find(eWayBill.EWayBillTypes).CanBeSentElectronically)
            {
                ListEnumerator listEnumerator = OnlineInvoicingHelper_IN::getListOfEWayBills(_trans).getEnumerator();
                while (listEnumerator.moveNext())
                {
                    TransitDocumentEWayBill_IN eWayBillCurrent = listEnumerator.current();
                    if (TaxGSTEwayBillTypes_IN::find(eWayBillCurrent.EWayBillTypes).CanBeSentElectronically)
                    {
                        throw error("@Tax_INOnlineInvoicing:EWBMoreThanOne");
                    }
                }
            }
        }

        newRelation = this.getTransactionRelationTable(_transitDocument.TableId);

        ttsBegin;

        newRelation.clear();
        newRelation.TransactionTableId   = _trans.TableId;
        newRelation.TransactionRecId     = _trans.RecId;
        newRelation.TransitDocumentRecId = _transitDocument.RecId;
        newRelation.TransitDocumentType  = documentType.RecId;

        if (_transHeader)
        {
            newRelation.HeadingTableId = _transHeader.TableId;
            newRelation.HeadingRecId = _transHeader.RecId;
        }
        else
        {
            //Treat transaction as the header table.
            newRelation.HeadingTableId = _trans.TableId;
            newRelation.HeadingRecId = _trans.RecId;
        }

        newRelation.insert();

        if (OnlineInvoicingHelper_IN::tableSupportsEInvoicing(_trans.TableId)
            && documentType.RefTableId == tableNum(TransitDocumentEWayBill_IN))
        {
            TransitDocumentEWayBill_IN eWayBill = _transitDocument;

            if (TaxGSTEwayBillTypes_IN::find(eWayBill.EWayBillTypes).CanBeSentElectronically)
            {
                EInvoice_IN eInvoice = EInvoice_IN::findByInvoice(_trans.TableId, _trans.RecId);

                if (eInvoice)
                {
                    if (removedEInvoiceEWayBillRecId != eWayBill.RecId)
                    {
                        eInvoice.selectForUpdate(true);
                        eInvoice.clearEWayBillFields();
                        eInvoice.EWayBillStatus = EinvoiceEWayBillStatus_IN::Created;
                        eInvoice.EWayBillRecId = eWayBill.RecId;
                        eInvoice.update();
                    }

                    removedEInvoiceEWayBillRecId = 0;
                }
            }
        }

        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRemovedEInvoiceEWayBill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the removed E-way bills associated with a source transaction.
    /// </summary>
    /// <param name = "_trans">Source transaction.</param>
    public void processRemovedEInvoiceEWayBill(Common _trans)
    {
        EInvoice_IN eInvoice;

        if (removedEInvoiceEWayBillRecId)
        {
            ttsbegin;

            eInvoice = EInvoice_IN::findByInvoice(_trans.TableId, _trans.RecId, true);
            eInvoice.clearEWayBillFields();
            eInvoice.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyTransitDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether any transit document type exists.
    /// </summary>
    /// <returns>
    /// true if the transit document type exists; false if no transit document type exists.
    /// </returns>
    public boolean existsAnyTransitDocType()
    {
        return TransitDocumentType_IN::existsAnyTransitDocType() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransitRuleForTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether any transit document transaction rule exists for given transaction type
    /// </summary>
    /// <param name="_transType">
    /// transaction type
    /// </param>
    /// <returns>
    /// true if there are any rules for given transaction type; false if not.
    /// </returns>
    public boolean existTransitRuleForTransType(TableId _transType)
    {
        return TransitDocumentTransactionRule_IN::existRuleByTransType(_transType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of transit document of the specified type from the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction record.
    /// </param>
    /// <param name="_transitDocumentSample">
    /// The sample transit document indicating the type of the transit document to be retrieved.
    /// </param>
    /// <returns>
    /// A list of transit document.
    /// </returns>
    public List findTransitDocuments(Common _trans, Common _transitDocumentSample)
    {
        TransitDocumentType_IN                      documentType;
        DictTable                                   dictTable;
        Common                                      content;
        TransitDocumentTransactionRelationMap_IN    transactionMap;
        List                                        result;

        transactionMap = this.getTransactionRelationTable(_transitDocumentSample.TableId);

        // Determine the document type
        documentType = this.findTransitDocumentType(_transitDocumentSample);

        result = new List(Types::Record);

        if (!documentType)
        {
            return result;
        }

        // Initialize content buffer
        dictTable = new DictTable(documentType.RefTableId);
        content = dictTable.makeRecord();
        content.selectForUpdate(false);

        while select TransitDocumentRecId from transactionMap
            where transactionMap.TransactionRecId    == _trans.RecId
               && transactionMap.TransactionTableId  == _trans.TableId
               && transactionMap.TransitDocumentType == documentType.RecId
            join content
                where content.RecId == transactionMap.TransitDocumentRecId
        {
            result.addEnd(content);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocumentsByReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of transit document of the specified type from the specified transaction reference.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The transaction source table id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The transaction source record id.
    /// </param>
    /// <param name="_transitDocumentSample">
    /// The sample transit document indicating the type of the transit document to be retrieved.
    /// </param>
    /// <returns>
    /// A list of transit document.
    /// </returns>
    public List findTransitDocumentsByReference(RefTableId _sourceTableId, RefRecId _sourceRecId, Common _transitDocumentSample)
    {
        Common  record = DataExpUtil::find(_sourceTableId, _sourceRecId);
        List result;

        result = this.findTransitDocumentsByReferenceRecord(record, _transitDocumentSample);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocumentsByReferenceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of transit document of the specified type from the specified transaction reference.
    /// </summary>
    /// <param name="_sourceCommon">
    /// The transaction common.
    /// </param>
    /// <param name="_transitDocumentSample">
    /// The sample transit document indicating the type of the transit document to be retrieved.
    /// </param>
    /// <returns>
    /// A list of transit document.
    /// </returns>
    public List findTransitDocumentsByReferenceRecord(Common _sourceCommon, Common _transitDocumentSample)
    {
        List result;

        result = new List(Types::Record);

        if (_sourceCommon)
        {
            result = this.findTransitDocuments(_sourceCommon, _transitDocumentSample);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactionByTransitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the transaction that the transit document is attached to.
    /// </summary>
    /// <param name = "_transitDocument">The transit document.</param>
    /// <returns>The original transaction.</returns>
    public Common findTransactionByTransitDocument(Common _transitDocument)
    {
        DictTable                                   dictTable;
        Common                                      transaction;
        TransitDocumentTransactionRelationMap_IN    relationMap;
        TransitDocumentType_IN                      transitDocumentType;

        RefTableId                                  transactionTableId;
        RefRecId                                    transactionRecId;

        SysGlobalObjectCache cache = classFactory.globalObjectCache();
        container cacheKey = [_transitDocument.TableId, _transitDocument.RecId, _transitDocument.RecVersion];
        container cachedValue = cache.find(#TransitDocumentToTransactionCacheScope, cacheKey);
        if (cachedValue != conNull())
        {
            [transactionTableId, transactionRecId] = cachedValue;
        }
        else
        {
            relationMap = this.getTransactionRelationTable(_transitDocument.TableId);

            transitDocumentType = this.findTransitDocumentType(_transitDocument);

            select firstonly relationMap
            where relationMap.TransitDocumentType == transitDocumentType.RecId
                && relationMap.TransitDocumentRecId == _transitDocument.RecId
                && relationMap.IsHistory            == NoYes::No;

            if (!relationMap)
            {
                return null;
            }
            else
            {
                transactionTableId = relationMap.TransactionTableId;
                transactionRecId = relationMap.TransactionRecId;

                if(transactionTableId && transactionRecId)
                {
                    cache.insert(#TransitDocumentToTransactionCacheScope, cacheKey, [transactionTableId, transactionRecId]);
                }
            }
        }

        dictTable = new DictTable(transactionTableId);
        transaction = dictTable.makeRecord();

        select firstonly transaction
            where transaction.RecId == transactionRecId;

        return transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the transit document types in list.
    /// </summary>
    /// <param name = "_transTableId">The transaction table id.</param>
    /// <param name = "_transitDocTableId">The transit document table id.</param>
    /// <returns>The transaction document type list.</returns>
    public List findTransitDocTypes(RefTableId _transTableId, RefTableId _transitDocTableId)
    {
        List                                result;
        TransitDocumentType_IN              documentType;
        TransitDocumentTransactionRule_IN   documentRule;

        result = new List(Types::Record);

        while select documentType
            where documentType.RefTableId == _transitDocTableId
            exists join documentRule
                where documentRule.TransitDocumentType == documentType.RecId
                    && documentRule.TransactionType == _transTableId
        {
            result.addEnd(documentType);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTransitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the specified transit document from the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction record.
    /// </param>
    /// <param name="_transitDocument">
    /// The transit document to be removed.
    /// </param>
    public void removeTransitDocument(Common _trans, Common _transitDocument)
    {
        TransitDocumentTransactionRelationMap_IN   relationMap;
        TransitDocumentType_IN                     documentType;

        relationMap = this.getTransactionRelationTable(_transitDocument.TableId);

        ttsBegin;

        documentType = this.findTransitDocumentType(_transitDocument);

        if (OnlineInvoicingHelper_IN::tableSupportsEInvoicing(_trans.TableId)
            && _transitDocument.TableId == tableNum(TransitDocumentEWayBill_IN))
        {
            EInvoice_IN eInvoice = EInvoice_IN::findByInvoice(_trans.TableId, _trans.RecId);
            if (eInvoice.EWayBillRecId == _transitDocument.RecId)
            {
                eInvoice.selectForUpdate(true);
                eInvoice.clearEWayBillFields();
                eInvoice.update();
            }
        }

        delete_from relationMap
            where relationMap.TransactionRecId      == _trans.RecId
                && relationMap.TransactionTableId   == _trans.TableId
                && relationMap.TransitDocumentType  == documentType.RecId
                && relationMap.TransitDocumentRecId == _transitDocument.RecId;

        // Clear related cache
        TransitDocumentManager_IN::clearTransitDocumentToTransactionCache(_transitDocument.TableId, _transitDocument.RecId);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTransitDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all transit documents of the specifed type from the specified transaction.
    /// </summary>
    /// <param name="_trans">
    /// The transaction record.
    /// </param>
    /// <param name="_transitDocumentSample">
    /// A sample transit document record indicating the transit document type.
    /// </param>
    public void removeTransitDocuments(Common _trans, Common _transitDocumentSample)
    {
        this.removeByType(_trans, this.findTransitDocumentType(_transitDocumentSample));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents and relationship for the transaction.
    /// </summary>
    /// <param name = "_trans">The transaction</param>
    public void deleteByTransaction(Common _trans)
    {
        TransitDocumentType_IN                      transitDocumentType;
        TransitDocumentTransactionRule_IN           transactionRule;

        while select transitDocumentType
            from transactionRule
                where transactionRule.TransactionType == _trans.TableId
        {
            transitDocumentType = TransitDocumentType_IN::find(transactionRule.TransitDocumentType);
            if (transitDocumentType)
            {
                this.deleteByType(_trans, transitDocumentType);

                // Clear related cache
                if (transitDocumentType.RefTableId == tableNum(TransTaxInformation))
                {
                    TransTaxInformationHelper::clearCache(_trans.TableId, _trans.RecId);
                }
                else
                {
                    TransitDocumentManager_IN::clearTransactionToTransitDocumentCache(_trans.TableId, _trans.RecId, transitDocumentType.RefTableId);
                }
            }
        }

        //This is used to delete additional records that is associated with the transaction line.
        this.deleteTransationDocumentsByLine(_trans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction header.
    /// </summary>
    /// <param name = "_transHeader">The transaction header</param>
    public void deleteByTransactionHeader(Common _transHeader)
    {
        this.deleteTransationDocumentsByHeader(_transHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs document transition from the source transaction to the target transaction.
    /// </summary>
    /// <param name="_sourceTrans">
    /// The source transaction
    /// </param>
    /// <param name="_targetTrans">
    /// The target transaction
    /// </param>
    /// <param name="_targetTransHeader">
    /// The header table for the target transaction line.
    /// </param>
    /// <param name="_transitDocumentTableId">
    /// The transit document table id for transit.
    /// </param>
    public void transit(
        Common _sourceTrans, 
        Common _targetTrans, 
        Common _targetTransHeader = null,
        RefTableId _transitDocumentTableId = 0)
    {
        TransitDocumentTransactionRule_IN           sourceTransRule;
        RefTableId                                  sourceTransType;
        TransitDocumentTransactionRule_IN           targetTransRule;
        RefTableId                                  targetTransType;
        TransitDocumentType_IN                      transitDocumentType;
        TransitDocumentTransactionRelationMap_IN    sourceTransRelation;
        TransitDocumentTransactionRelationMap_IN    targetTransRelation;
        RecId                                       transitDocumentRecId;
        TransitDocumentCustomActionParameter_IN     customActionParameter;
        Common                                      sourceTransitDocument;
        TransitDocumentTransRuleExtension_IN        ruleExtension;
        TransitDocumentTransitAction_IN             transitAction;
        TransitDocumentTransitOption_IN             transitOption;
        boolean                                     targetTransitDocumentDeleted;
        RefTableId                                  currentTransitDocumentTableId;
        
        sourceTransType = _sourceTrans.TableId;
        targetTransType = _targetTrans.TableId;
        
        ttsBegin;
        
        while select RecId, TransactionType, TransitDocumentType from sourceTransRule
            where sourceTransRule.TransactionType == sourceTransType
            join targetTransRule
                where targetTransRule.TransactionType     == targetTransType
                    && targetTransRule.TransitDocumentType == sourceTransRule.TransitDocumentType
            join transitDocumentType
                where transitDocumentType.RecId == targetTransRule.TransitDocumentType
        {
            currentTransitDocumentTableId = transitDocumentType.RefTableId;

            // Only transit required transit document if specified.
            if (_transitDocumentTableId != 0 && currentTransitDocumentTableId != _transitDocumentTableId)
            {
                continue;
            }

            targetTransitDocumentDeleted = false;

            this.transitRelevantDocuments(_sourceTrans, _targetTrans, _targetTransHeader, targetTransRule);
            
            if (transitDocumentType.UseRuleExtension)
            {
                ruleExtension = TransitDocumentTransRuleExtension_IN::findBySourceAndTargetRule(sourceTransRule.RecId, targetTransRule.RecId);
                if (ruleExtension)
                {
                    transitAction = ruleExtension.TransitAction;
                    transitOption = ruleExtension.TransitOption;
                }
                else
                {
                    transitAction = TransitDocumentTransitAction_IN::None;
                    transitOption = TransitDocumentTransitOption_IN::None;
                }
            }
            else
            {
                transitAction = targetTransRule.TransitAction;
                transitOption = targetTransRule.TransitOption;
            }
            
            //No need to do anything for transit action = None
            if (transitAction == TransitDocumentTransitAction_IN::None)
            {
                continue;
            }
            
            sourceTransRelation = this.getTransactionRelationTable(currentTransitDocumentTableId);
            
            // Transit new ones
            while select sourceTransRelation
                where sourceTransRelation.TransactionRecId    == _sourceTrans.RecId
                    && sourceTransRelation.TransactionTableId  == sourceTransRule.TransactionType
                    && sourceTransRelation.TransitDocumentType == sourceTransRule.TransitDocumentType
            {
                if (transitOption == TransitDocumentTransitOption_IN::Update)
                {
                    this.updateTransitDocument(
                        _targetTrans, transitDocumentType, sourceTransRelation.TransitDocumentRecId);
                }
                else
                {
                    if (transitOption == TransitDocumentTransitOption_IN::Replace && !targetTransitDocumentDeleted)
                    {
                        // Delete all transit documents and relationship.
                        this.deleteByType(
                            _targetTrans,
                            TransitDocumentType_IN::find(targetTransRule.TransitDocumentType));
                            targetTransitDocumentDeleted = true;
                    }
                    
                    // TransitOption = Replace or None
                    switch (transitAction)
                    {
                        case TransitDocumentTransitAction_IN::Copy:
                            transitDocumentRecId = this.copyTransitDocument(currentTransitDocumentTableId, sourceTransRelation.TransitDocumentRecId, _targetTransHeader);
                            break;
                        
                        case TransitDocumentTransitAction_IN::Transit:
                            transitDocumentRecId = sourceTransRelation.TransitDocumentRecId;
                            break;
                        
                        case TransitDocumentTransitAction_IN::Custom:
                            customActionParameter = new TransitDocumentCustomActionParameter_IN();
                            customActionParameter.parmSourceTrans(_sourceTrans);
                            customActionParameter.parmTargetTrans(_targetTrans);
                        
                            sourceTransitDocument = new DictTable(currentTransitDocumentTableId).makeRecord();
                            select firstOnly sourceTransitDocument where sourceTransitDocument.RecId == sourceTransRelation.TransitDocumentRecId;
                            customActionParameter.parmSourceTransitDocument(sourceTransitDocument);
                        
                            this.findTransitDocumentOnTarget(customActionParameter);
                        
                            transitDocumentRecId = customActionParameter.parmTargetTransitDocument().RecId;
                            break;
                    }
                    
                    if (transitDocumentRecId)
                    {
                        targetTransRelation = this.getTransactionRelationTable(currentTransitDocumentTableId);
                        targetTransRelation.clear();
                        targetTransRelation.initValue();
                        targetTransRelation.TransactionRecId     = _targetTrans.RecId;
                        targetTransRelation.TransactionTableId   = targetTransRule.TransactionType;
                        targetTransRelation.TransitDocumentType  = targetTransRule.TransitDocumentType;
                        targetTransRelation.TransitDocumentRecId = transitDocumentRecId;
                        targetTransRelation.ParentRelation       = sourceTransRelation.SourceRecId;
                        if (sourceTransRelation.OriginRelation)
                        {
                            targetTransRelation.OriginRelation   = sourceTransRelation.OriginRelation;
                        }
                        else
                        {
                            targetTransRelation.OriginRelation   = sourceTransRelation.SourceRecId;
                        }

                        if (_targetTransHeader)
                        {
                            targetTransRelation.HeadingTableId = _targetTransHeader.TableId;
                            targetTransRelation.HeadingRecId = _targetTransHeader.RecId;
                        }
                        else
                        {
                            //Treat the target transaction as the heading transaction.
                            targetTransRelation.HeadingTableId = _targetTrans.TableId;
                            targetTransRelation.HeadingRecId = _targetTrans.RecId;
                        }

                        targetTransRelation.insert();
                        
                        if (transitAction == TransitDocumentTransitAction_IN::Transit)
                        {
                            sourceTransRelation.selectForUpdate(true);
                            sourceTransRelation.IsHistory = true;
                            sourceTransRelation.update();
                        }

                        // Update cache
                        SysGlobalObjectCache cache = classFactory.globalObjectCache();
                        Common  transitDocument = DataExpUtil::find(currentTransitDocumentTableId, transitDocumentRecId);
                        container cacheKey = [currentTransitDocumentTableId,
                                              transitDocumentRecId,
                                              transitDocument.RecVersion];
                        cache.insert(
                            #TransitDocumentToTransactionCacheScope,
                            cacheKey, [_targetTrans.TableId, _targetTrans.RecId]
                        );

                        // Update trans tax information cache
                        if (currentTransitDocumentTableId == tableNum(transTaxInformation))
                        {
                            TransTaxInformation transTaxInformation = transitDocument;
                            if (transTaxInformation)
                            {
                                container cacheKeyTransTaxInformation = [_targetTrans.TableId, _targetTrans.RecId, _targetTrans.RecVersion, transTaxInformation.Type];
                                cache.insert(#TransactionToTransTaxInformationCacheScope, cacheKeyTransTaxInformation, [transitDocumentRecId]);
                            }
                        }
                    }
                }
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified document type is allowed to be attached to the specified transaction table type.
    /// </summary>
    /// <param name="_trans">
    /// The transaction table.
    /// </param>
    /// <param name="_documentType">
    /// The document type.
    /// </param>
    /// <returns>
    /// Allows to attach the specified document type to the specified transaction table or not.
    /// </returns>
    protected boolean allowToAdd(Common _trans, TransitDocumentType_IN _documentType)
    {
        TransitDocumentTransactionRule_IN  rule;

        rule = TransitDocumentTransactionRule_IN::findRule(_trans.TableId, _documentType.RecId);
        if (rule.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the transit document type.
    /// </summary>
    /// <param name="_transitDocument">
    /// The transit document sample.
    /// </param>
    /// <returns>
    /// The document type.
    /// </returns>
    protected TransitDocumentType_IN findTransitDocumentType(Common _transitDocument)
    {
        TransitDocumentType_IN  documentType;
        FieldId                 fieldId;

        select firstOnly documentType
            where documentType.RefTableId == _transitDocument.TableId;

        if (documentType.DistinguishFieldId)
        {
            fieldId = documentType.DistinguishFieldId;

            select firstOnly documentType
                where documentType.RefTableId            == _transitDocument.TableId
                   && documentType.DistinguishFieldValue == _transitDocument.(fieldId);
        }

        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the transaction document rule table.
    /// </summary>
    protected void init()
    {
        // move to each attachment controller
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the attachment relation by document type.
    /// </summary>
    /// <param name="_trans">
    /// The transaction table, which has document attached to.
    /// </param>
    /// <param name="_documentType">
    /// The document type.
    /// </param>
    private void removeByType(Common _trans, TransitDocumentType_IN _documentType)
    {
        TransitDocumentTransactionRelationMap_IN   relationMap;
        relationMap = this.getTransactionRelationTable(_documentType.RefTableId);

        ttsBegin;

        if (OnlineInvoicingHelper_IN::tableSupportsEInvoicing(_trans.TableId)
            && _documentType.RefTableId == tableNum(TransitDocumentEWayBill_IN))
        {
            EInvoice_IN eInvoice = EInvoice_IN::findByInvoice(_trans.TableId, _trans.RecId);
            if (eInvoice && eInvoice.EWayBillRecId)
            {
                TransitDocumentEWayBill_IN eWayBill;

                select firstOnly TransitDocumentRecId from relationMap
                    where relationMap.TransactionRecId == _trans.RecId
                        && relationMap.TransactionTableId == _trans.TableId
                        && relationMap.TransitDocumentType == _documentType.RecId
                        && relationMap.TransitDocumentRecId == eInvoice.EWayBillRecId;

                if (relationMap)
                {
                    removedEInvoiceEWayBillRecId = relationMap.TransitDocumentRecId;
                }
            }
        }

        delete_from relationMap
            where relationMap.TransactionRecId     == _trans.RecId
                && relationMap.TransactionTableId  == _trans.TableId
                && relationMap.TransitDocumentType == _documentType.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the transaction document by document type.
    /// </summary>
    /// <param name="_trans">
    /// The transaction table, which has document attached to.
    /// </param>
    /// <param name="_documentType">
    /// The document type.
    /// </param>
    protected void deleteByType(Common _trans, TransitDocumentType_IN _documentType)
    {
        DictTable                                   dictTable;
        Common                                      transitDocument;
        TransitDocumentTransactionRelationMap_IN    relationMap;
        TransitDocumentTransactionRelationMap_IN    relationMapForGivenTransitDoc;

        relationMap = this.getTransactionRelationTable(_documentType.RefTableId);
        relationMapForGivenTransitDoc = this.getTransactionRelationTable(_documentType.RefTableId);

        dictTable = new DictTable(_documentType.RefTableId);
        transitDocument = dictTable.makeRecord();

        // Delete transit documents
        while select transitDocument
            join RecId from relationMap
                where relationMap.TransitDocumentRecId == transitDocument.RecId
                    && relationMap.TransitDocumentType == _documentType.RecId
                    && relationMap.IsHistory == NoYes::No
                    && relationMap.TransactionRecId == _trans.RecId
                    && relationMap.TransactionTableId == _trans.TableId
        {
            select count(RecId) from relationMapForGivenTransitDoc
                where relationMapForGivenTransitDoc.TransitDocumentRecId == transitDocument.RecId;

            if (relationMapForGivenTransitDoc.RecId == 1)
            {
                // Clear related cache
                TransitDocumentManager_IN::clearTransitDocumentToTransactionCache(transitDocument.TableId, transitDocument.RecId);

                transitDocument.selectForUpdate(true);
                transitDocument.delete();
            }
        }

        // Delete relationship for all transit documents
        while select relationMap
             where relationMap.TransactionRecId == _trans.RecId
                && relationMap.TransactionTableId == _trans.TableId
                && relationMap.TransitDocumentType == _documentType.RecId
                && relationMap.IsHistory == NoYes::No
        {
            relationMap.selectForUpdate(true);
            relationMap.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transit document that is attached to the target transaction.
    /// </summary>
    /// <param name="_targetTrans">
    /// The target transaction table, which has document attached to.
    /// </param>
    /// <param name="_transitDocumentType">
    /// The document type.
    /// </param>
    /// <param name="_transitDocumentRecId">
    /// The transit document type.
    /// </param>
    protected void updateTransitDocument(Common _targetTrans, TransitDocumentType_IN _transitDocumentType, RefRecId _transitDocumentRecId)
    {
        DictTable                                   dictTable;
        Common                                      targetTransitDocument;
        Common                                      sourceTransitDocument;
        TransitDocumentTransactionRelationMap_IN    targetTransRelationMap;

        targetTransRelationMap = this.getTransactionRelationTable(_transitDocumentType.RefTableId);
        dictTable = new DictTable(_transitDocumentType.RefTableId);
        targetTransitDocument = dictTable.makeRecord();

        select firstonly targetTransitDocument
            exists join targetTransRelationMap
                where targetTransRelationMap.TransitDocumentRecId == targetTransitDocument.RecId
                && targetTransRelationMap.TransactionTableId == _targetTrans.TableId
                && targetTransRelationMap.TransactionRecId == _targetTrans.RecId
                && targetTransRelationMap.TransitDocumentType == _transitDocumentType.RecId;

        sourceTransitDocument = dictTable.makeRecord();
        select firstonly sourceTransitDocument
            where sourceTransitDocument.RecId == _transitDocumentRecId;

        if (targetTransitDocument && sourceTransitDocument)
        {
            ttsbegin;
            targetTransitDocument.selectForUpdate(true);
            targetTransitDocument.data(sourceTransitDocument);
            targetTransitDocument.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy transit document based on the source content record
    /// </summary>
    /// <param name = "_contentTableId">The table id of the source content table.</param>
    /// <param name = "_contentRecId">The record id of the source content table.</param>
    /// <param name = "_targetTransactionHeader">The record of the target transaction header table.</param>
    /// <returns>The record id of the newly created content record.</returns>
    protected RecId copyTransitDocument(RefTableId _contentTableId, RefRecId _contentRecId, Common _targetTransactionHeader)
    {
        DictTable   dictTable;
        Common      sourceContent;
        Common      destContent;
        RecId       destContentRecId;
        
        dictTable = new DictTable(_contentTableId);
        sourceContent = dictTable.makeRecord();
        destContent = dictTable.makeRecord();

        select firstonly sourceContent
        where sourceContent.RecId == _contentRecId;

        if (sourceContent)
        {
            ttsbegin;

            destContent.data(sourceContent);

            this.copyTransitDocument_Pre(sourceContent, destContent, _targetTransactionHeader);

            destContent.insert();

            this.copyTransitDocument_Post(sourceContent, destContent, _targetTransactionHeader);

            ttscommit;

            destContentRecId = destContent.RecId;
        }

        return destContentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the relation table.
    /// </summary>
    /// <param name = "_transitDocumentTableId">The table id for transit document.</param>
    /// <returns>The relation table record.</returns>
    private Common getTransactionRelationTable(RefTableId _transitDocumentTableId)
    {
        RefTableId  relationTableId;
        DictTable   dictTable;
        Common      relationTable;

        TransitDocumentManagerEventParameter_IN parameter = new TransitDocumentManagerEventParameter_IN();
        parameter.parmTransitDocTableId(_transitDocumentTableId);

        this.getTransitDocumentRelationTable(parameter);

        relationTableId = parameter.parmTransitRelationTableId();
        if (relationTableId)
        {
            dictTable = new DictTable(relationTableId);
            relationTable = dictTable.makeRecord();
        }

        return relationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransitDocumentRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction document transaction relation table.
    /// </summary>
    /// <param name = "_parameter">The parameter of the event.</param>
    delegate void getTransitDocumentRelationTable(TransitDocumentManagerEventParameter_IN _parameter)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitRelevantDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit the relevant documents from source transaction to target transaction.
    /// </summary>
    /// <param name = "_sourceTrans">The source transaction.</param>
    /// <param name = "_targetTrans">The target transaction.</param>
    /// <param name = "_targetTransHeader">The target transaction header.</param>
    /// <param name = "transitRule">The transit rule.</param>
    delegate void transitRelevantDocuments(
        Common                              _sourceTrans,
        Common                              _targetTrans,
        Common                              _targetTransHeader,
        TransitDocumentTransactionRule_IN   transitRule)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransitDocument_Post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy relevants when copying source transit documents to target transit documents.
    /// </summary>
    /// <param name="_sourceTransitDocument">
    /// The source transit document.
    /// </param>
    /// <param name="_targetTransitDocument">
    /// The new transit document.
    /// </param>
    /// <param name = "_targetTransactionHeader">The record of the target transaction header table.</param>
    delegate void copyTransitDocument_Post(Common _sourceTransitDocument, Common _targetTransitDocument, Common _targetTransactionHeader)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransitDocument_Pre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-action before the copied transit document is inserted.
    /// </summary>
    /// <param name="_sourceTransitDocument">
    /// The source transit document.
    /// </param>
    /// <param name="_targetTransitDocument">
    /// The new transit document.
    /// </param>
    /// <param name = "_targetTransactionHeader">The record of the target transaction header table.</param>
    delegate void copyTransitDocument_Pre(Common _sourceTransitDocument, Common _targetTransitDocument, Common _targetTransactionHeader)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocumentOnTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find target transit document for custom action.
    /// </summary>
    /// <param name="_parameter">
    /// The transit parameter.
    /// </param>
    delegate void findTransitDocumentOnTarget(TransitDocumentCustomActionParameter_IN _parameter)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransationDocumentsByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction header.
    /// </summary>
    /// <param name = "_transHeader">The transaction header.</param>
    delegate void deleteTransationDocumentsByHeader(Common _transHeader)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransationDocumentsByLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction line.
    /// </summary>
    /// <param name = "_transLine">The transaction line.</param>
    delegate void deleteTransationDocumentsByLine(Common _transLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocument</Name>
				<Source><![CDATA[
    public Common findTransitDocument(Common _trans, Common _sample)
    {
        TransitDocumentType_IN                      documentType;
        DictTable                                   dictTable;
        Common                                      content;
        TransitDocumentTransactionRelationMap_IN    transactionMap;
        RefTableId                                  transitDocumentTableId;
        RefRecId                                    transitDocumentRecId;

        // Determine the document type
        documentType = this.findTransitDocumentType(_sample);
        if (!documentType)
        {
            return null;
        }
        transitDocumentTableId = documentType.RefTableId;

        transactionMap = this.getTransactionRelationTable(_sample.TableId);
        select firstonly TransitDocumentRecId from transactionMap
            where transactionMap.TransactionRecId    == _trans.RecId
                && transactionMap.TransactionTableId  == _trans.TableId
                && transactionMap.TransitDocumentType == documentType.RecId;
        transitDocumentRecId = transactionMap.TransitDocumentRecId;

        if(transitDocumentTableId && transitDocumentRecId)
        {
            // Initialize content buffer
            dictTable = new DictTable(transitDocumentTableId);
            content = dictTable.makeRecord();
            content.selectForUpdate(false);

            select firstonly content where content.RecId == transitDocumentRecId;
        }

        return content;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHistoricalRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the transit document has historical relationship with any transaction.
    /// </summary>
    /// <param name = "_transitDocument">The transit document</param>
    /// <returns>True if historical relation exists; otherwise, false.</returns>
    public boolean hasHistoricalRelation(Common _transitDocument)
    {
        TransitDocumentTransactionRelationMap_IN    transactionMap;
        TransitDocumentType_IN                      documentType;

        transactionMap = this.getTransactionRelationTable(_transitDocument.TableId);
        documentType = this.findTransitDocumentType(_transitDocument);
        
        select firstonly SourceRecId from transactionMap
            where transactionMap.TransitDocumentRecId == _transitDocument.RecId
            && transactionMap.TransitDocumentType == documentType.RecId
            && transactionMap.IsHistory == NoYes::Yes;

        return transactionMap.SourceRecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransactionToTransitDocumentCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the cache which accelerate the find process from transcation to transit document
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <param name="_sampleTableId">
    /// The sample transit document table Id.
    /// </param>
    public static void clearTransactionToTransitDocumentCache(RefTableId _sourceTableId, RefRecId _sourceRecId, RefTableId _sampleTableId)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransitDocumentToTransactionCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the cache which accelerate the find process from transit document to transcation
    /// </summary>
    /// <param name="_sourceTableId">
    /// The transit document table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The transit document record Id.
    /// </param>
    public static void clearTransitDocumentToTransactionCache(RefTableId _transitDocumentTableId, RefRecId _transitDocumentRecId)
    {
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>