<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalculation_GTE_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of <c>TaxCalculation</c>
/// </summary>
[ExtensionOf(classStr(TaxCalculation))]
final class TaxCalculation_GTE_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a new instance of the <c>Tax</c> class based on the transaction.
    /// </summary>
    /// <param name="_sourceType">
    ///    The type of the transaction to calculate taxes.
    /// </param>
    /// <param name="_initializationClass">
    ///    The initialization class for the given transaction.
    /// </param>
    /// <returns>
    ///    The correct <c>Tax</c> instance based on the calling transaction.
    /// </returns>
    static TaxCalculation newForSourceType(TaxSourceType _sourceType, Object _initializationClass)
    {
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxFreeInvoiceEmpty                     taxFreeInvoiceEmpty;
            TaxPurchEmpty                           taxPurchEmpty;
            TaxCalculationJournalEmpty              taxCalculationJournalEmpty;
            TrvTaxExpenseEmpty                      trvTaxExpenseEmpty;
            TaxCalculationProjAdvancedJournalEmpty  taxCalculationProjAdvancedJournalEmpty;
            TaxComplementaryInvoiceEmpty            taxComplementaryInvoiceEmpty;
            TaxCalculationBankStatementEmpty        taxCalculationBankStatementEmpty;

            switch (_sourceType)
            {
                case TaxSourceType::PurchaseOrder :
                    taxPurchEmpty = new taxPurchEmpty(_initializationClass, false, false, false, true);
                    return taxPurchEmpty;
                case TaxSourceType::FreeTextInvoice :
                    taxFreeInvoiceEmpty = new TaxFreeInvoiceEmpty(_initializationClass, false, false, false, true);
                    return taxFreeInvoiceEmpty;
                case TaxSourceType::Journals :
                    taxCalculationJournalEmpty = new TaxCalculationJournalEmpty(_initializationClass, false, false, false, true);
                    return taxCalculationJournalEmpty;
                case TaxSourceType::Expense :
                    trvTaxExpenseEmpty = new TrvTaxExpenseEmpty(_initializationClass, false, false, false, true);
                    return trvTaxExpenseEmpty;
                case TaxSourceType::BankAccountReconcile:
                    taxCalculationBankStatementEmpty = new TaxCalculationBankStatementEmpty(_initializationClass, false, false, false, true);
                    return taxCalculationBankStatementEmpty;
                case TaxSourceType::ProjAdvancedJournal :
                    return new taxCalculationProjAdvancedJournal(_initializationClass, false, false, false, true);
                default:
                    return  TaxCalculationEmpty::getInstance(_initializationClass);
            }
        }
        else
        {
            return next newForSourceType(_sourceType, _initializationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForSourceTypeWithTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a new instance of the <c>Tax</c> class based on the transaction. This constructor causes
    ///    tax to use the <c>TaxUncommitted</c> table to load and persist taxes.
    /// </summary>
    /// <param name="_sourceType">
    ///    The type of the transaction to calculate taxes.
    /// </param>
    /// <param name="_initializationClass">
    ///    The initialization class for the given transaction. This is a different class for each transaction.
    /// </param>
    /// <param name="_loadTaxUncommitted">
    ///    A Boolean value that specifies whether during the construction to load the <c>TaxUncommitted</c>
    ///    records into taxes <c>TmpTaxWorkTrans</c> buffer which enables most of the inquiry functions to
    ///    work.
    /// </param>
    /// <param name="_loadTaxTrans">
    ///    A Boolean value that specifies whether during the construction to load the <c>TaxTrans</c>
    ///    records into taxes <c>TmpTaxWorkTrans</c> buffer which enables most of the inquiry functions to
    ///    work.
    /// </param>
    /// <param name="_maintainExistingTaxUncommitted">
    ///    A Boolean value which indicates that Tax should merge the newly calculated taxes with
    ///    existing records in TaxUncommitted.
    /// </param>
    /// <returns>
    ///    The the correct Tax instance based on the calling transaction.
    /// </returns>
    static TaxCalculation newForSourceTypeWithTaxUncommitted(TaxSourceType _sourceType, Object _initializationClass, boolean _loadTaxUncommitted, boolean _loadTaxTrans, boolean _maintainExistingTaxUncommitted)
    {
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxFreeInvoiceEmpty                     taxFreeInvoiceEmpty;
            TaxPurchEmpty                           taxPurchEmpty;
            TaxCalculationJournalEmpty              taxCalculationJournalEmpty;
            TrvTaxExpenseEmpty                      trvTaxExpenseEmpty;
            TaxCalculationProjAdvancedJournalEmpty  taxCalculationProjAdvancedJournalEmpty;
            TaxComplementaryInvoiceEmpty            taxComplementaryInvoiceEmpty;
            TaxCalculationBankStatementEmpty        taxCalculationBankStatementEmpty;

            switch (_sourceType)
            {
                case TaxSourceType::PurchaseOrder :
                    taxPurchEmpty = new taxPurchEmpty(_initializationClass, false, false, false);
                    return taxPurchEmpty;
                case TaxSourceType::FreeTextInvoice :
                    taxFreeInvoiceEmpty = new TaxFreeInvoiceEmpty(_initializationClass, false, false, false);
                    return taxFreeInvoiceEmpty;
                case TaxSourceType::Journals :
                    taxCalculationJournalEmpty = new TaxCalculationJournalEmpty(_initializationClass, false, false, false);
                    return taxCalculationJournalEmpty;
                case TaxSourceType::Expense :
                    trvTaxExpenseEmpty = new TrvTaxExpenseEmpty(_initializationClass, false, false, false);
                    return trvTaxExpenseEmpty;
                case TaxSourceType::ProjAdvancedJournal :
                    return new TaxCalculationProjAdvancedJournalEmpty(_initializationClass, false, false, false);
                // <GBR>
                case TaxSourceType::ComplementaryInvoice:
                    return new TaxComplementaryInvoiceEmpty(_initializationClass, false, false, false);
                // </GBR>
                case TaxSourceType::BankAccountReconcile:
                    taxCalculationBankStatementEmpty = new TaxCalculationBankStatementEmpty(_initializationClass, false, false, false);
                    return taxCalculationBankStatementEmpty;
                default:
                    return  TaxCalculationEmpty::getInstance(_initializationClass);
            }
        }
        else
        {
            return next newForSourceTypeWithTaxUncommitted(_sourceType, _initializationClass, _loadTaxUncommitted, _loadTaxTrans, _maintainExistingTaxUncommitted);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>