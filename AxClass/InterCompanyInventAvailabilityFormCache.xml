<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyInventAvailabilityFormCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyInventAvailabilityFormCache</c> class is responsible for caching intercompany available on hand quantities
/// per item per inventory dimension combination.
/// </summary>
public class InterCompanyInventAvailabilityFormCache
{
    private Map itemInterCompanyDimQuantitiesMap;
    private Map whsSpecificAvailabilityMap;
    private str selectedItemInterCompanyDimKey;

    private InventAvailabilitySnapshot      inventAvailabilitySnapshot;
    private WHSSpecificInventAvailability   specificAvailability;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availabilityFromInterCompanySumJoinedWithDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability based on the specified on-hand record and joined inventory dimensions.
    /// </summary>
    /// <param name="_InterCompanyInventSum">
    /// The record of the <c>InterCompanyInventSum</c> table used to get the availability.
    /// </param>
    /// <param name="_inventDimFormDataSource">
    /// The form data source of the <c>InterCompanyInventDim</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAvailability</c> interface.
    /// </returns>
    /// <remarks>
    /// The on-hand record specified in <paramref name="_InterCompanyInventSum"/> parameter must have a joined <c>InterCompanyInventDim</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An exception is thrown if the <paramref name="_InterCompanyInventSum"/> parameter is not joined with a <c>InterCompanyInventDim</c> record.
    /// </exception>
    public InventIAvailability availabilityFromInterCompanySumJoinedWithDim(
        InterCompanyInventSum _InterCompanyInventSum,
        FormDataSource        _inventDimFormDataSource)
    {
        // The formJoinedRecord API can return a Common buffer therefore the return type must be of type Common.
        Common inventDimJoined = formJoinedRecord(_InterCompanyInventSum, _inventDimFormDataSource);

        if (inventDimJoined.TableId == tableNum(InterCompanyInventDim))
        {
            this.updateCachedValuesInterCompanySum(_InterCompanyInventSum, inventDimJoined);
        }
        else
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        return inventAvailabilitySnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterCompanyCachedValues</Name>
				<Source><![CDATA[
    private boolean getInterCompanyCachedValues(ItemId _itemId, InterCompanyInventDim _InterCompanyInventDim)
    {
        boolean found = true;
    
        str newItemDimKey = this.makeItemInterCompanyDimKey(_itemId, _InterCompanyInventDim);
    
        if (selectedItemInterCompanyDimKey != newItemDimKey)
        {
            if (!itemInterCompanyDimQuantitiesMap)
            {
                this.initCache();
            }
    
            selectedItemInterCompanyDimKey = newItemDimKey;
    
            if (itemInterCompanyDimQuantitiesMap.exists(selectedItemInterCompanyDimKey))
            {
                inventAvailabilitySnapshot = itemInterCompanyDimQuantitiesMap.lookup(selectedItemInterCompanyDimKey);
                specificAvailability = whsSpecificAvailabilityMap.lookup(selectedItemInterCompanyDimKey);
            }
            else
            {
                found = false;
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the availability form cache.
    /// </summary>
    public void initCache()
    {
        itemInterCompanyDimQuantitiesMap = new Map(Types::String, Types::Class);
        whsSpecificAvailabilityMap = new Map(Types::String, Types::Class);

        selectedItemInterCompanyDimKey = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeItemInterCompanyDimKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the cached availability for the item Id and inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    ///     The item ID used to get the availability.
    /// </param>
    /// <param name="_InterCompanyInventDim">
    ///     The record of the <c>InterCompanyInventDim</c> table used to execute the calculations.
    /// </param>
    /// <returns>
    ///     true if the availability is found in the cache; otherwise, false.
    /// </returns>
    public str makeItemInterCompanyDimKey(ItemId _itemId, InterCompanyInventDim _InterCompanyInventDim)
    {
        return _itemId + '#' + _InterCompanyInventDim.mapKey() + '#' + curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailabilityNoItem_InterCompany</Name>
				<Source><![CDATA[
    private void setAvailabilityNoItem_InterCompany(InterCompanyInventDim _InterCompanyInventDim)
    {
        // Availability should not be cached and set a snapshot with all quantities being zero
        selectedItemInterCompanyDimKey = this.makeItemInterCompanyDimKey('', _InterCompanyInventDim);
        inventAvailabilitySnapshot = InventAvailabilitySnapshot::zero();
        specificAvailability = WHSSpecificInventAvailability::zero();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyAvailability</Name>
				<Source><![CDATA[
    private void setInterCompanyAvailability(InventIAvailability _availability)
    {
        inventAvailabilitySnapshot = InventAvailabilitySnapshot::convertToSnapshot(_availability);
        itemInterCompanyDimQuantitiesMap.insert(selectedItemInterCompanyDimKey, inventAvailabilitySnapshot);

        specificAvailability = WHSSpecificInventAvailability::newFromAvailability(_availability);
        whsSpecificAvailabilityMap.insert(selectedItemInterCompanyDimKey, specificAvailability);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCachedValuesInterCompanySum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and caches the inventory quantities based on the specified record.
    /// </summary>
    /// <param name="_InterCompanyInventSum">
    ///     The record of the <c>InterCompanyInventSum</c> table used to execute the calculations.
    /// </param>
    /// <param name="_InterCompanyInventDim">
    ///     The record of the <c>InterCompanyInventDim</c> table used to execute the calculations.
    /// </param>
    public void updateCachedValuesInterCompanySum(InterCompanyInventSum _InterCompanyInventSum, InterCompanyInventDim _InterCompanyInventDim)
    {
        if (!_InterCompanyInventSum.ItemId)
        {
            this.setAvailabilityNoItem_InterCompany(_InterCompanyInventDim);
        }
        else if (!this.getInterCompanyCachedValues(_InterCompanyInventSum.ItemId, _InterCompanyInventDim))
        {
            this.setInterCompanyAvailability(
            InterCompanyInventAvailabilityProvider::findByInterCompanySumDim(_InterCompanyInventSum, _InterCompanyInventDim).parmInventAvailability());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>