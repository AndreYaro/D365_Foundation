<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionFilterRetailInvoices_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BusinessDocumentSubmissionFilterRetailInvoices_SA</c> class implements the IBusinessDocumentSubmissionFilter interface
///    to filter retail invoices before submission for Saudi Arabian customer.
/// </summary>
using System.ComponentModel.Composition;

[Export(identifierstr(Dynamics.AX.Application.IBusinessDocumentSubmissionFilter))]
internal class BusinessDocumentSubmissionFilterRetailInvoices_SA implements IBusinessDocumentSubmissionFilter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterBusinessDocumentsBeforeSubmission</Name>
				<Source><![CDATA[
    public void filterBusinessDocumentsBeforeSubmission(QueryBuildDataSource _qbds, TableId _tableId, BusinessDocumentSubmissionContract _dataContract)
    {
        if (this.isSACustomerSubmittingRetailInvoice(_tableId))
        {
            // Exclude customer orders
            QueryBuildDataSource retailCustInvoiceJourQbds = _qbds.addDataSource(tableNum(RetailCustInvoiceJourTable));
            retailCustInvoiceJourQbds.joinMode(JoinMode::NoExistsJoin);
            retailCustInvoiceJourQbds.relations(true);
            retailCustInvoiceJourQbds.addRange(fieldNum(RetailCustInvoiceJourTable, IsEInvocieGeneratedFromPOS_SA)).value(SysQuery::value(NoYes::Yes));

            // Exclude cash and carry transactions
            QueryBuildDataSource retailTransQbds = _qbds.addDataSource(tableNum(RetailTransactionTable));
            retailTransQbds.joinMode(JoinMode::NoExistsJoin);
            retailTransQbds.relations(true);

            QueryBuildDataSource retailFiscalTransQbds = retailTransQbds.addDataSource(tableNum(RetailTransactionFiscalTransDocumentView));
            retailFiscalTransQbds.joinMode(JoinMode::ExistsJoin);
            retailFiscalTransQbds.relations(false);
            retailFiscalTransQbds.addLink(fieldNum(RetailTransactionTable, transactionId), fieldNum(RetailTransactionFiscalTransDocumentView, TransactionId));
            retailFiscalTransQbds.addLink(fieldNum(RetailTransactionTable, store), fieldNum(RetailTransactionFiscalTransDocumentView, Store));
            retailFiscalTransQbds.addLink(fieldNum(RetailTransactionTable, Channel), fieldNum(RetailTransactionFiscalTransDocumentView, Channel));
            retailFiscalTransQbds.addLink(fieldNum(RetailTransactionTable, terminal), fieldNum(RetailTransactionFiscalTransDocumentView, Terminal));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSACustomerSubmittingRetailInvoice</Name>
				<Source><![CDATA[
    private boolean isSACustomerSubmittingRetailInvoice(TableId _tableId)
    {
        boolean isRetailInvoice = _tableId == tableName2Id(tableStr(CustInvoiceJour)) 
            && isConfigurationkeyEnabled(configurationKeyNum(Retail));  //check if retail is enabled before excluding the invoices
        return isRetailInvoice && FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>