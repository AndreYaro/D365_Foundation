<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceQueryGeneralJourCorrect_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerBalanceQueryGeneralJourCorrect_RU extends LedgerBalanceQueryGeneralJournal
{
    RTax25PeriodIterator    rTax25PeriodIterator;

    ReportingDate_RU        startReportingDate,
                            endReportingDate;

    str rangeValueInverted;
    str rangeValueNotInverted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRangeForAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the accounting date range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForAccountingDate(Query _query)
    {
        QueryBuildDataSource ds;

        ds = _query.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));

        if (!endReportingDate)
        {
            if (startAccountingDate)
            {
                rTax25PeriodIterator.applyExtendedRange(ds);
            }
            else
            {
                rTax25PeriodIterator.applyExtendedRange(ds, true);
            }
        }
        else
        {
            ds.addRange(fieldNum(GeneralJournalEntryCorrectiveView_RU, AccountingDate)).value(queryRange(startAccountingDate, endAccountingDate));
            ds.addRange(fieldNum(GeneralJournalEntryCorrectiveView_RU, ReportingDate)).value(queryRange(startReportingDate, endReportingDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the fiscal period ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPeriod(Query _query)
    {
        QueryBuildDataSource ds;
        QueryBuildRange range;

        ds = _query.dataSourceTable(tableNum(FiscalCalendarPeriod));
        if (ds == null)
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));

            // add FiscalCalendarPeriod
            ds = ds.addDataSource(tableNum(FiscalCalendarPeriod));
            ds.fetchMode(QueryFetchMode::One2One);
            ds.addLink(fieldNum(GeneralJournalEntryReportingView_RU, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
        }

        FiscalCalendarPeriod::addRangeForPeriodType(
            ds,
            fieldNum(FiscalCalendarPeriod, Type),
            includeOpeningPeriod,
            includeOperatingPeriod,
            includeClosingPeriod || includeClosingPeriodBySystem);

        // PostingType range is related to includeClosingPeriodBySystem
        if (includeClosingPeriod != includeClosingPeriodBySystem)
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
            range = ds.addRange(fieldNum(GeneralJournalAccountEntry, PostingType));

            if (includeClosingPeriod)
            {
                range.value(SysQuery::valueNot(LedgerPostingType::TransferOpeningClosing));
            }
            else
            {
                range.value(SysQuery::value(LedgerPostingType::TransferOpeningClosing));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPostingLayer(Query _query)
    {
        QueryBuildDataSource ds;

        ds = _query.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));
        GeneralJournalEntry::addRangeForPostingLayer(ds, fieldNum(GeneralJournalEntryCorrectiveView_RU, PostingLayer), postingLayer);

        if (postingLayer == OperationsTax::DminusS)
        {
            // add a group by to separate OperationsTax::Current and OperationsTax::Tax
            ds.addGroupByField(fieldNum(GeneralJournalEntryCorrectiveView_RU, PostingLayer));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayerList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPostingLayerList(Query _query)
    {
        QueryBuildDataSource ds;

        ds = _query.dataSourceTable(tablenum(GeneralJournalEntryCorrectiveView_RU));

        GeneralJournalEntry::addRangeForPostingLayerList(ds, fieldnum(GeneralJournalEntryCorrectiveView_RU, PostingLayer), postingLayerList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToBalanceTotalsReporting</Name>
				<Source><![CDATA[
    private void addToBalanceTotalsReporting(int _sign, GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        AmountCur transactionCurrencyAmount;
        AmountMST accountingCurrencyAmount;

        if (groupByCurrency)
        {
            if (balancesByCurrency.exists(_generalJournalAccountEntry.TransactionCurrencyCode))
            {
                // update case is required for total accounts
                [transactionCurrencyAmount, accountingCurrencyAmount] =
                    balancesByCurrency.lookup(_generalJournalAccountEntry.TransactionCurrencyCode);

                transactionCurrencyAmount += _generalJournalAccountEntry.TransactionCurrencyAmount * _sign;
                accountingCurrencyAmount += _generalJournalAccountEntry.AccountingCurrencyAmount * _sign;

                balancesByCurrency.insert(
                    _generalJournalAccountEntry.TransactionCurrencyCode,
                    [transactionCurrencyAmount,
                    accountingCurrencyAmount]);
            }
            else
            {
                balancesByCurrency.insert(
                    _generalJournalAccountEntry.TransactionCurrencyCode,
                    [_generalJournalAccountEntry.TransactionCurrencyAmount * _sign,
                    _generalJournalAccountEntry.AccountingCurrencyAmount * _sign]);
            }
        }

        if (_generalJournalAccountEntry.IsCredit)
        {
            accountingCurrencyCreditBalance -= _generalJournalAccountEntry.AccountingCurrencyAmount * _sign;
            transactionCurrencyCreditBalance -= _generalJournalAccountEntry.TransactionCurrencyAmount * _sign;
        }
        else
        {
            accountingCurrencyDebitBalance += _generalJournalAccountEntry.AccountingCurrencyAmount * _sign;
            transactionCurrencyDebitBalance += _generalJournalAccountEntry.TransactionCurrencyAmount * _sign;
        }

        reportingCurrencyBalance += _generalJournalAccountEntry.ReportingCurrencyAmount * _sign;
        quantityBalance += _generalJournalAccountEntry.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingDateForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account for which to calculate the balance.
    /// </param>
    /// <remarks>
    /// Use the <c>LedgerBalanceQueryGeneralJournal.getAccountingCurrencyAmount</c> and
    /// <c>LedgerBalanceQueryGeneralJournal.getTmpData</c> methods to retrieve the results.
    /// </remarks>
    public void calculateReportingDateForMainAccount(MainAccount _mainAccount)
    {
        QueryRun run;
        Query query;
        int sign;
        QueryBuildDataSource ds;
        QueryBuildRange range;
        GeneralJournalEntryCorrectiveView_RU generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        #define.Inverted(true)
        #define.NotInverted(false)

        query = this.prepareQuery(_mainAccount);

        this.resetBalanceTotals();

        if (rangeValueNotInverted != '')
        {
            // add the restriction for the main account
            ds = query.dataSourceTable(tableNum(MainAccount));
            range = SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, RecId));
            range.value(rangeValueNotInverted);

            run = new QueryRun(query);
            while (run.next())
            {
                generalJournalEntry = run.get(tableNum(GeneralJournalEntryCorrectiveView_RU)) as GeneralJournalEntryCorrectiveView_RU;
                generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;

                sign = this.getSign(generalJournalEntry.PostingLayer, #NotInverted);

                //if current calculation is turnover sign might be inverted
                if (startAccountingDate)
                {
                    sign = this.inventSignDate(sign, generalJournalEntry.ReportingDate);
                }

                this.addToBalanceTotalsReporting(sign, generalJournalAccountEntry);
            }
        }

        if (rangeValueInverted != '')
        {
            // add the restriction for the main account
            ds = query.dataSourceTable(tableNum(MainAccount));
            range = SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, RecId));
            range.value(rangeValueInverted);

            run = new QueryRun(query);
            while (run.next())
            {
                generalJournalEntry = run.get(tableNum(GeneralJournalEntryCorrectiveView_RU)) as GeneralJournalEntryCorrectiveView_RU;
                generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;

                sign = this.getSign(generalJournalEntry.PostingLayer, #Inverted);

                //if current calculation is turnover sign might be inverted
                if (startAccountingDate)
                {
                    sign = this.inventSignDate(sign, generalJournalEntry.ReportingDate);
                }

                this.addToBalanceTotalsReporting(sign, generalJournalAccountEntry);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_mainAccount">
    ///    Main account to use in the query.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(MainAccount _mainAccount)
    {
        QueryBuildDataSource ds;
        Query                query;
        QueryBuildRange      range;
        QueryRun             run;
        ReportingDate_RU     correctedPeriodDate;

        GeneralJournalEntryCorrectiveView_RU    generalJournalEntry;

        query = this.prepareQuery(_mainAccount, false);

        ds = query.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));
        ds.addSortField(fieldNum(GeneralJournalEntryCorrectiveView_RU, ReportingDate), SortOrder::Ascending);
        ds.addSelectionField(fieldNum(GeneralJournalEntryCorrectiveView_RU, ReportingDate));
        ds.firstOnly(true);

        if (rangeValueNotInverted != '')
        {
            // add the restriction for the main account
            ds = query.dataSourceTable(tableNum(MainAccount));
            range = SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, RecId));
            range.value(rangeValueNotInverted);

            run = new QueryRun(query);

            if (run.next())
            {
                generalJournalEntry = run.get(tableNum(GeneralJournalEntryCorrectiveView_RU)) as GeneralJournalEntryCorrectiveView_RU;

                if (!correctedPeriodDate || (generalJournalEntry.ReportingDate < correctedPeriodDate))
                {
                    correctedPeriodDate = dateEndQtr(generalJournalEntry.ReportingDate);
                }
            }
        }

        if (rangeValueInverted != '')
        {
            // add the restriction for the main account
            ds = query.dataSourceTable(tableNum(MainAccount));
            range = SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, RecId));
            range.value(rangeValueInverted);

            run = new QueryRun(query);
            if (run.next())
            {
                generalJournalEntry = run.get(tableNum(GeneralJournalEntryCorrectiveView_RU)) as GeneralJournalEntryCorrectiveView_RU;

                if (!correctedPeriodDate || (generalJournalEntry.ReportingDate < correctedPeriodDate))
                {
                    correctedPeriodDate = dateEndQtr(generalJournalEntry.ReportingDate);
                }
            }
        }

        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryReportingDate</Name>
				<Source><![CDATA[
    private Query createQueryReportingDate(boolean _calcBalance = true)
    {
        Query query;
        QueryBuildDataSource ds;
        QueryBuildRange range;

        if (baseQuery == null)
        {
            query = new Query(queryStr(GeneralJournalBalanceCorrective_RU));
        }
        else
        {
            query = baseQuery;
        }

        ds = query.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));
        range = ds.addRange(fieldNum(GeneralJournalEntryCorrectiveView_RU, Ledger));
        range.value(SysQuery::value(ledgerRecId));

        this.addRangeForAccountingDate(query);
        this.addRangeForLine(query);
        this.addRangeForPeriod(query);

        if (postingLayerList && postingLayerList.elements() > 0)
        {
            this.addRangeForPostingLayerList(query);
        }
        else
        {
            this.addRangeForPostingLayer(query);
        }

        this.addRangeForJournalizeJournal(query);

        if (groupByCurrency && _calcBalance)
        {
            ds = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
            ds.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        }

        // not currently support on the general journal
        Debug::assert(!groupByDate);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    public TmpAccountSum getTmpData(TmpAccountSum _tmpAccountSum = null)
    {
        MapEnumerator balanceEnumerator;
        AmountCur transactionCurrencyAmount;
        AmountMST accountingCurrencyAmount;

        if (!isTmpDataSet)
        {
            isTmpDataSet = true;
            tmpAccountSum = null;
        }
        if (!prmisDefault(_tmpAccountSum))
        {
            tmpAccountSum.setTmpData(_tmpAccountSum);
        }

        if (groupByCurrency)
        {
            balanceEnumerator = balancesByCurrency.getEnumerator();
            while (balanceEnumerator.moveNext())
            {
                [transactionCurrencyAmount, accountingCurrencyAmount] = balanceEnumerator.currentValue();

                select firstOnly forUpdate tmpAccountSum
                    where tmpAccountSum.CurrencyCode == balanceEnumerator.currentKey();

                tmpAccountSum.CurrencyCode = balanceEnumerator.currentKey();
                tmpAccountSum.Balance01Cur += transactionCurrencyAmount;
                tmpAccountSum.Balance01 += accountingCurrencyAmount;
                tmpAccountSum.write();
            }
        }
        else
        {
                select firstOnly forUpdate tmpAccountSum;
                tmpAccountSum.Balance01 += accountingCurrencyAmount;
                tmpAccountSum.write();
        }

        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSignDate</Name>
				<Source><![CDATA[
    private int inventSignDate(int _currentSign, ReportingDate_RU _reportingDate)
    {
        int sign = _currentSign;

        if (_reportingDate < rTax25PeriodIterator.parmFromDate())
        {
            sign = sign * -1;
        }
        return sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    private Query prepareQuery(MainAccount _mainAccount, boolean _balanceCalc = true)
    {
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        MainAccount mainAccount;
        Query query;
        QueryBuildDataSource ds;
        QueryBuildRange range;
        int previousLength;

        #define.Inverted(true)
        #define.NotInverted(false)

        if (_mainAccount == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_mainAccount.LedgerChartOfAccounts != LedgerChartOfAccounts::current())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // empty means to do nothing
        rangeValueInverted = '';
        rangeValueNotInverted = '';

        if (_mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            dimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

            dimensionAttributeValue =
                DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _mainAccount.MainAccountId);

            // not inverted
            SysDaSearchObject searchObject = LedgerBalanceQueryGeneralJourCorrect_RU_CalculateForMainAccountQuery::createSearchObject(mainAccount, dimensionAttributeValue.RecId, #NotInverted);

            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            while (searchStatement.next(searchObject))
            {
                previousLength = strLen(rangeValueNotInverted);

                if (previousLength > 0)
                {
                    rangeValueNotInverted += ' || ';
                }

                rangeValueNotInverted +=
                    '(' + fieldStr(MainAccount, RecId) + ' == ' + int642str(mainAccount.RecId) + ')';

                if (strLen(rangeValueNotInverted) == previousLength)
                {
                    // string is overflowing
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }

            if (strLen(rangeValueNotInverted) > 0)
            {
                rangeValueNotInverted = '(' + rangeValueNotInverted + ')';
            }

            // inverted
            MainAccount mainAccountInverted;

            searchObject = LedgerBalanceQueryGeneralJourCorrect_RU_CalculateForMainAccountQuery::createSearchObject(mainAccountInverted, dimensionAttributeValue.RecId, #Inverted);

            searchStatement = new SysDaSearchStatement();

            while (searchStatement.next(searchObject))
            {
                previousLength = strLen(rangeValueInverted);

                if (previousLength > 0)
                {
                    rangeValueInverted += ' || ';
                }

                rangeValueInverted +=
                    '(' + fieldStr(MainAccount, RecId) + ' == ' + int642str(mainAccountInverted.RecId) + ')';

                if (strLen(rangeValueInverted) == previousLength)
                {
                    // string is overflowing
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }

            if (strLen(rangeValueInverted) > 0)
            {
                rangeValueInverted = '(' + rangeValueInverted + ')';
            }
        }
        else
        {
            rangeValueNotInverted = SysQuery::value(_mainAccount.RecId);
        }

        query = this.createQueryReportingDate(_balanceCalc);
        ds = query.dataSourceTable(tableNum(DimensionAttributeLevelValueView));

        // add the main account restriction for the view
        range = SysQuery::findOrCreateRange(ds, fieldNum(DimensionAttributeLevelValueView, DimensionAttribute));
        range.value(SysQuery::value(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));

        // add the main account table
        ds = ds.addDataSource(tableNum(MainAccount));
        ds.fetchMode(QueryFetchMode::One2One);
        ds.addLink(fieldNum(DimensionAttributeLevelValueView, EntityInstance), fieldNum(MainAccount, RecId));

        ds = query.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));
        ds.addGroupByField(fieldNum(GeneralJournalEntryCorrectiveView_RU, ReportingDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base query.
    /// </summary>
    /// <param name="_baseQuery">
    /// The base query to set.
    /// </param>
    /// <remarks>
    /// When specified, the base query will be used as the basis for the balance calculation.The base query
    /// must contain the <c>GeneralJournalAccountEntry</c> table.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The base query does not contain the <c>GeneralJournalAccountEntry</c> table.
    /// </exception>
    public void setBaseQuery(Query _baseQuery)
    {
        QueryBuildDataSource ds;
        QueryBuildDataSource dsPrimary;
        QueryBuildRange range;
        int i;

        if (_baseQuery == null)
        {
            baseQuery = null;
            return;
        }

        // clone the query
        baseQuery = new Query(_baseQuery);

        // adjust the query for use by this class
        baseQuery.clearOrderBy();
        baseQuery.clearGroupBy();

        dsPrimary = baseQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        if (dsPrimary == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount), SelectionField::Sum);
        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntry, Quantity), SelectionField::Sum);

        // prepare the query for use here, add needed tables, remove old ranges, etc.
        ds = baseQuery.dataSourceTable(tableNum(GeneralJournalEntryCorrectiveView_RU));
        if (ds == null)
        {
            ds = dsPrimary.addDataSource(tableNum(GeneralJournalEntryCorrectiveView_RU));
            ds.fetchMode(QueryFetchMode::One2One);
            ds.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntryCorrectiveView_RU, RecId));
        }

        for (i = 1; i <= ds.rangeCount(); i++)
        {
            range = ds.range(i);
            if (range.field() == fieldNum(GeneralJournalEntryCorrectiveView_RU, Ledger)
                || range.field() == fieldNum(GeneralJournalEntryCorrectiveView_RU, PostingLayer)
                || range.field() == fieldNum(GeneralJournalEntryCorrectiveView_RU, AccountingDate))
            {
                range.enabled(false);
            }
        }

        ds = baseQuery.dataSourceTable(tableNum(FiscalCalendarPeriod));
        if (ds != null)
        {
            for (i = 1; i <= ds.rangeCount(); i++)
            {
                range = ds.range(i);
                if (range.field() == fieldNum(FiscalCalendarPeriod, Type))
                {
                    range.enabled(false);
                }
            }
        }

        ds = baseQuery.dataSourceTable(tableNum(DimensionAttributeLevelValueView));
        if (ds == null)
        {
            ds = dsPrimary.addDataSource(tableNum(DimensionAttributeLevelValueView));
            ds.fetchMode(QueryFetchMode::One2One);
            ds.joinMode(JoinMode::ExistsJoin);
            ds.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodIterator</Name>
				<Source><![CDATA[
    public void setPeriodIterator(RTax25PeriodIterator _periodIterator)
    {
        rTax25PeriodIterator = _periodIterator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportingDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reporting date range.
    /// </summary>
    /// <param name="_startReportingDate">
    /// The start Reporting date.
    /// </param>
    /// <param name="_endReportingDate">
    /// The end Reporting date.
    /// </param>
    public void setReportingDateRange(date _startReportingDate, date _endReportingDate)
    {
        Debug::assert(_startReportingDate <= _endReportingDate);

        startReportingDate = _startReportingDate;

        if (_endReportingDate == dateNull())
        {
            endReportingDate = dateMax();
        }
        else
        {
            endReportingDate = _endReportingDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerBalanceQueryGeneralJourCorrect_RU construct()
    {
        LedgerBalanceQueryGeneralJourCorrect_RU generalJournalQuery;

        generalJournalQuery = new LedgerBalanceQueryGeneralJourCorrect_RU();

        return generalJournalQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>