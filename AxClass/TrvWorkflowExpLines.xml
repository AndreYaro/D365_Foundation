<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowExpLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvWorkflowExpLines</c> class provides a workflow document class for expense lines.
/// </summary>
[
ExpressionCurrencyLEAttribute(tableStr(TrvExpTrans), fieldStr(TrvExpTrans, LegalEntity)),
ExpressionCurrExchRateDateAttribute(tableStr(TrvExpTrans), fieldStr(TrvExpTrans, TransDate))
]
class TrvWorkflowExpLines extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    /// The query name from the AOT.
    /// </returns>
    QueryName getQueryName()
    {
        return querystr(TrvWorkflowExpLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpendingLimitRequester</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the requester.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The spending limit of the requester.
    /// </returns>
    public TrvExpSpendingLimitAmountMSTRequester parmSpendingLimitRequester(CompanyId _companyId,
                                                                           TableId   _tableId,
                                                                           RecId     _recId)
    {
        TrvExpTrans trvExpTrans;
        if (_tableId != tableNum(TrvExpTrans))
        {
             // Unexpected table: %1
            throw error(strfmt("@SYS328858", tableid2name(_tableId)));
        }

        if (_recId == 0)
        {
            // Workflow context record id is zero.
            throw error("@SYS107964");
        }

        trvExpTrans = TrvExpTrans::find(_recId);

        changecompany(CompanyInfo::findRecId(trvExpTrans.LegalEntity).DataArea)
        {
            return TrvWorkflowExpHeader::findWorkerSpendingLimit(trvExpTrans.CreatingWorker,Ledger::accountingCurrency(trvExpTrans.LegalEntity));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expense project activity number.
    /// </summary>
    /// <param name = "_companyId">Company id of the workflow record.</param>
    /// <param name = "_tableId">Table id of the workflow record</param>
    /// <param name = "_recId">Record id of the workflow record.</param>
    /// <returns>Project activity number of the expense.</returns>
    public ProjActivityNumber parmProjActivityNumber(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        TrvExpTrans trvExpTrans;

        if (_tableId != tableNum(TrvExpTrans))
        {
            // Document table id reference: %1 is not valid.
            throw error(strFmt("@SYS112754", _tableId));
        }

        if (_recId == 0)
        {
            // Document record id is zero.
            throw error("@SYS112755");
        }

        select firstonly ProjActivityNumber from trvExpTrans
            where trvExpTrans.RecId == _recId
				&& trvExpTrans.dataAreaId == _companyId;
        
        return trvExpTrans.ProjActivityNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>