<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>BOMCreate</c> implements the functionality of creating new BOMs.
/// </summary>
class BOMCreate
{
    BOMCreateDialog bomCreateDialog;
    BOMRouteCopyJob bomCopy;

    private boolean isSpecifiedBOMAlreadyExisting;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSpecifiedBOMAlreadyExisting</Name>
				<Source><![CDATA[
    internal boolean isSpecifiedBOMAlreadyExisting()
    {
        return isSpecifiedBOMAlreadyExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBOMCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a BOM by copying the data from another BOM.
    /// </summary>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> buffer that contains the item for which the BOM is created.
    /// </param>
    /// <param name="_fromBOMId">
    /// Source BOM ID to copy from.
    /// </param>
    /// <param name="_toBOMId">
    /// Target BOM ID to copy to.
    /// </param>
    /// <param name="_fromSiteId">
    /// Sorce site ID.
    /// </param>
    /// <param name="_toSiteId">
    /// Target site ID.
    /// </param>
    /// <param name="_name">
    /// The new BOM name to be given to the target BOM.
    /// </param>
    /// <returns>
    /// A container with the newly created BOM ID and site ID.
    /// </returns>
    protected container createBOMCopy(
        InventTable     _inventTable,
        BOMId           _fromBOMId,
        BOMId           _toBOMId,
        InventSiteId    _fromSiteId,
        InventSiteId    _toSiteId,
        Name            _name)
    {
        BOMTable bomTable;

        if (!bomCopy)
        {
            bomCopy = BOMRouteCopyJob::newFromToBOMId(_fromBOMId,_toBOMId, _fromSiteId);
        }

        bomCopy.parmCreatingNewBom(true);

        // If no BOM existed on the original product, initializing the item id makes no sense.
        if (_fromBOMId)
        {
            bomCopy.parmFromItemId(_inventTable.ItemId);
        }
        else
        {
            bomCopy.parmFromItemId('');
        }
        bomCopy.parmToItemId(_inventTable.ItemId);

        if (_toSiteId != '')
        {
            bomCopy.parmToSiteId(_toSiteId);
        }

        // we will do validation manually below
        // it is neccessary to prevent creation of BOMTable record before copy dialog is closed
        bomCopy.parmSkipValidation(true);
        if (bomCopy.prompt())
        {
            ttsbegin;

            if (#PmfEnabled)
            {
                this.createNewBom(_toBOMId, _inventTable.itemGroupId(), _toSiteId, _name, _inventTable.isFormulaAllowed());
            }
            else
            {
                this.createNewBom(_toBOMId, _inventTable.itemGroupId(), _toSiteId, _name);
            }

            bomCopy.parmSkipValidation(false);
            if (bomCopy.validate())
            {
                bomCopy.runOperation();

                bomTable        = BOMTable::find(_toBOMId,true);
                bomTable.SiteId = bomCopy.parmToSiteId();
                bomTable.update();

                ttscommit;
                return [bomTable.bomId, bomTable.SiteId];
            }
            ttsabort;
        }

        return ['', ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new BOM.
    /// </summary>
    /// <param name="_bomId">
    /// The new BOM ID to be created.
    /// </param>
    /// <param name="_itemGroupId">
    /// The item group ID to be set on the new BOM.
    /// </param>
    /// <param name="_dialogSiteId">
    /// The site ID to be set on the new BOM.
    /// </param>
    /// <param name="_dialogName">
    /// The new BOM name.
    /// </param>
    /// <param name="_pmfIsFormula">
    /// The new item is a formula.
    /// </param>
    /// <returns>
    /// The newly created <c>BOMTable</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception thrown if BOM validation fails.
    /// </exception>
    protected BOMTable createNewBom(
        BOMId           _bomId,
        ItemGroupId     _itemGroupId,
        InventSiteId    _dialogSiteId,
        Name            _dialogName
        , boolean _pmfIsFormula = false
        )
    {
        BOMTable bomTable;
        bomTable.bomId          = _bomId;
        bomTable.ItemGroupId    = _itemGroupId;
        bomTable.Name           = _dialogName;
        bomTable.SiteId         = _dialogSiteId;

        if (#pmfEnabled && _pmfIsFormula)
        {
            bomTable.PmfBOMFormula = PmfBOMFormula::Formula;
        }

        if (!bomTable.validateWrite())
        {
            throw error("@SYS23020");
        }
        bomTable.insert();

        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        bomCreateDialog = BOMCreateDialog::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCopy</Name>
				<Source><![CDATA[
    public BOMRouteCopyJob parmBOMCopy(BOMRouteCopyJob _bomCopy = bomCopy)
    {
        bomCopy = _bomCopy;
        return bomCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCreateDialog</Name>
				<Source><![CDATA[
    protected BOMCreateDialog parmBOMCreateDialog(BOMCreateDialog _bomCreateDialog = bomCreateDialog)
    {
        bomCreateDialog = _bomCreateDialog;
        return bomCreateDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCreateBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user for the BOM creation options and performs the actual BOM creation.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID for which the BOM is created.
    /// </param>
    /// <param name="_fromBOMId">
    /// The BOM ID to use as a source for copying BOM data; optional.
    /// </param>
    /// <param name="_fromSiteId">
    /// The site ID to use as a source for copying BOM data; optional.
    /// </param>
    /// <param name="_pmfIsFormula">
    /// The new item is a formula.
    /// </param>
    /// <returns>
    /// A container with the created BOM ID and site ID.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown in case an error has occured during the creation of the BOM.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Thrown in case an update conflict was detected and it was not recovered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// Thrown in case an update conflict was detected.
    /// </exception>
    public container promptCreateBOM(
        ItemId       _itemId,
        BOMId        _fromBOMId  = '',
        InventSiteId _fromSiteId = ''
        , boolean _pmfIsFormula = false
        )
    {
        #OCCRetryCount
        BOMTable            bomTable;

        BOMId               dialogNumber;
        Name                dialogName;
        NoYes               dialogCopy;
        InventSiteId        dialogSiteId;
        container           dialogVal;

        InventTable         inventTable         = InventTable::find(_itemId);
        NumberSeq           numberSeq;
        NumberSequenceTable numberSequenceTable;
        boolean             manual;

        isSpecifiedBOMAlreadyExisting = false;

        if (_pmfIsFormula)
        {
            if (!inventTable.isFormulaAllowed())
            {
                throw error(strfmt("@PRO154", _itemId));
            }
        }
        else
        {
            if (!inventTable.inventItemType().canHaveBOM())
            {
                throw error(strfmt("@SYS78175", inventTable.ItemType));
            }
            else if (!inventTable.isBOMAllowed())
            {
                throw error(strfmt("@SCM:BomCreationNotAllowedForProductionType", inventTable.PmfProductType));
            }
        }

        if (_pmfIsFormula)
        {
            numberSeq = BOMTable::pmfNumberSeqFormula(false, false);
        }
        else
        {
            numberSeq = BOMTable::numberSeq(false, true);
        }

        if (numberSeq)
        {
            numberSequenceTable = NumberSequenceTable::findByNaturalKey(numberSeq.parmNumberSequenceCode());
        }
        manual = !numberSeq || (numberSequenceTable && numberSequenceTable.numAllowEdit());

        dialogVal = bomCreateDialog.promptCreateBOMDialog(manual, _pmfIsFormula);

        if (!dialogVal)
        {
            return ['', '', NoYes::No];
        }

        [dialogNumber,dialogName,dialogCopy,dialogSiteId] = dialogVal;

        try
        {
            ttsbegin;

            if (dialogNumber)
            {
                bomTable.bomId = dialogNumber;
            }
            else
            {
                bomTable.bomId = this.getBomId(_itemId, _fromBOMId, _fromSiteId, _pmfIsFormula, numberSeq, dialogVal);
            }

            if (BOMTable::exist(bomTable.bomId))
            {
                ttsCommit;

                isSpecifiedBOMAlreadyExisting = true;

                return [bomTable.bomId, ''
                    , dialogCopy
                ];
            }

            // create new bom now only if user doesn't check "copy" checkbox
            // otherwise create it only if user press OK in the copy dialog
            if (!dialogCopy)
            {
                this.createNewBom(bomTable.bomId, inventTable.itemGroupId(), dialogSiteId, dialogName
                    , _pmfIsFormula
                );
            }

            ttscommit;

            if (dialogNumber && numberSequenceTable && numberSequenceTable.Continuous)
            {
                // Use tts here to avoid warning
                ttsbegin;
                // Reserve number from prompt
                NumberSeq::newReserveNumFromCode(numberSequenceTable.NumberSequence,
                    NumberSeqScopeFactory::createDefaultScope(), false,true).reserve(dialogNumber);
                ttscommit;
            }

            if (dialogCopy)
            {
                return this.createBOMCopy(inventTable, _fromBOMId, bomTable.bomId, _fromSiteId, dialogSiteId, dialogName)
                    + [dialogCopy]
                ;
            }
            else
            {
                return [bomTable.bomId, dialogSiteId
                    , dialogCopy
                ];
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID for the new BOM.
    /// </summary>
    /// <param name="_itemId">The item ID for which the BOM is created.</param>
    /// <param name="_fromBOMId">The BOM ID to use as a source for copying BOM data.</param>
    /// <param name="_fromSiteId">The site ID to use as a source for copying BOM data.</param>
    /// <param name="_pmfIsFormula">true if the new item is a formula; otherwise, false.</param>
    /// <param name = "_numberSeq">The number sequence class.</param>
    /// <param name = "_dialogValues">
    /// A container with the BOM creation dialog values, that includes the new BOM ID, a name, a flag indicating whether 
    /// the BOM is copied or not and the site identifier, in the form [bomID, bomName, copyBOM, siteID].
    /// </param>
    /// <returns>The BOM ID</returns>
    protected Num getBomId(
        ItemId          _itemId,
        BOMId           _fromBOMId,
        InventSiteId    _fromSiteId,
        boolean         _pmfIsFormula,
        NumberSeq       _numberSequence,
        container       _dialogValues)
    {
        if (!_numberSequence)
        {
            if (_pmfIsFormula)
            {
                _numberSequence = BOMTable::pmfNumberSeqFormula();
            }
            else
            {
                _numberSequence = BOMTable::numberSeq();
            }
        }
        return _numberSequence.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCreate construct()
    {
        return new BOMCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCreateDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BOMCreate</c> class.
    /// </summary>
    /// <param name="_bomCreateDialog">
    /// The BOM creation dialog class instance that has the responsability of displaying the BOM creation dialog; optional.
    /// </param>
    /// <returns>
    /// A new <c>BOMCreate</c> instance.
    /// </returns>
    public static BOMCreate newBOMCreateDialog(BOMCreateDialog _bomCreateDialog = BOMCreateDialog::newDialog())
    {
        BOMCreate bomCreate = BOMCreate::construct();

        bomCreate.parmBOMCreateDialog(_bomCreateDialog);

        return bomCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>