<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransEmplTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransEmplTrans extends ProjTransEmpl
{
    ProjEmplTrans   projEmplTrans;

    boolean         calcTransCost;
    Amount          transCost;
    boolean         getCanBeInvoiced;
    boolean         canBeInvoiced;
    boolean         calcTransTurnover;
    AmountCur       transTurnover;
    boolean         calcLedgerSalesAmountMST;
    AmountMST       ledgerSalesAmountMST;
    boolean         getVoucherInvoice;
    Voucher         voucherInvoice;

    ProjEmplTransTaxExtensionIN projEmplTransTaxExtensionIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projEmplTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction can be adjusted.
    /// </summary>
    /// <returns>
    /// true if the transaction can be adjusted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A transaction can only be adjusted if it has been posted.
    /// </remarks>
    public boolean adjustable()
    {
        ProjEmplTrans       childProjEmplTrans;
        ProjEmplTransCost   projEmplTransCost;
        ProjEmplTransSale   projEmplTransSale;
        ProjParameters      projParameters = ProjParameters::find();
        boolean             adjustableCost = true;
        boolean             adjustableSale = true;

        if (!projParameters.BeginningBalanceStatus && projEmplTrans.transactionOrigin == ProjOrigin::BeginningBalance)
        {
            return false;
        }

        select firstonly RecId from childProjEmplTrans
            where childProjEmplTrans.AdjRefTransId == projEmplTrans.TransId;

        if (!childProjEmplTrans.RecId)
        {
            if (projEmplTrans.AdjRefTransId)
            {
                ProjEmplTrans parentTrans;

                select firstonly RecId, Qty from parentTrans
                        where parentTrans.TransId == projEmplTrans.AdjRefTransId;

                if (parentTrans.RecId)
                {
                    if ((parentTrans.Qty > 0 && projEmplTrans.Qty < 0) ||
                        (parentTrans.Qty < 0 && projEmplTrans.Qty > 0))
                    {
                        return false;
                    }
                }
            }
        }
        else
        {
            return false;
        }

        while select TransStatus from projEmplTransCost
            where projEmplTransCost.TransId == projEmplTrans.TransId
        {
            adjustableCost = adjustableCost && ProjParameters::adjustable(projEmplTransCost.TransStatus);
            if (!adjustableCost)
            {
                break;
            }
        }

        while select TransStatus from projEmplTransSale
            where projEmplTransSale.TransId == projEmplTrans.TransId
        {
            adjustableSale = adjustableSale && ProjParameters::adjustable(projEmplTransSale.TransStatus);
            if (!adjustableSale)
            {
                break;
            }
        }

        return !childProjEmplTrans.RecId && adjustableCost && adjustableSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Assessable value for this transaction.
    /// </summary>
    /// <returns>
    /// Assessable value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountCur assessableValue_IN()
    {
        return projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCapitalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether costs from this transaction can be capitalized.
    /// </summary>
    /// <returns>
    /// true if costs from this transaction can be capitalized; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This value is based on project line property of the project associated with this transaction.
    /// </remarks>
    public boolean canBeCapitalize()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            // Cannot capitalize 'Never' ledger posting
            if (this.ledgerStatusCost() == ProjLedgerStatus::Never)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjEmplTransSale   projEmplTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            if (!getCanBeInvoiced)
            {
                getCanBeInvoiced = true;
                while select projEmplTransSale
                    where projEmplTransSale.TransId == this.transId()
                {
                    canBeInvoiced = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).canBeInvoiced();
                    if (canBeInvoiced)
                    {
                        break;
                    }
                }
            }

            ret = canBeInvoiced;
        }
        else
        {
            ret = super(_chargeable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projEmplTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        CostPrice ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projEmplTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projEmplTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// true if this transaction has been invoiced; otherwise, false.
    /// </returns>
    public  boolean invoiced()
    {
        ProjEmplTransSale   projEmplTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            while select projEmplTransSale
                where projEmplTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).invoiced();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the invoice ID of the invoice for this transaction.
    /// </summary>
    /// <returns>
    /// The invoice ID of the invoice for this transaction.
    /// </returns>
    public ProjInvoiceId invoiceId()
    {
        ProjEmplTransSale   projEmplTransSale;
        ProjInvoiceId       ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            while select projEmplTransSale
                where projEmplTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).invoiceId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the correction field that is associated with a transaction.
    /// </summary>
    /// <returns>
    /// The value of the correction field that is associated with the transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes to support storno.
    /// </remarks>
    public LedgerCorrection isCorrection()
    {
        LedgerCorrection ret;

        ret = projEmplTrans.IsCorrection;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales amount to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST           ret;
        ProjEmplTransSale   projEmplTransSale;
        ProjTrans           projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projEmplTransSale
                    where projEmplTransSale.TransId == projEmplTrans.TransId
                {
                    projTransSale = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projEmplTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Maximum retail price value for this transaction.
    /// </summary>
    /// <returns>
    /// Maximum retail price value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return projEmplTransTaxExtensionIN.MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjEmplTrans _projEmplTrans)
    {
        projEmplTrans               = _projEmplTrans;
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projEmplTransTaxExtensionIN = ProjEmplTransTaxExtensionIN::findByProjEmplTrans(_projEmplTrans.RecId);
        }
        // <GIN>
        super(_projEmplTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originEmpl</Name>
				<Source><![CDATA[
    public ProjOrigin originEmpl()
    {
        return projEmplTrans.TransactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projEmplTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    public  boolean proposal()
    {
        ProjEmplTransSale   projEmplTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            while select projEmplTransSale
                where projEmplTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).proposal();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the project proposal associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal associated with this transaction.
    /// </returns>
    public  ProjProposalId proposalId()
    {
        ProjEmplTransSale   projEmplTransSale;
        ProjProposalId      ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            while select projEmplTransSale
                where projEmplTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).proposalId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projEmplTrans.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        // < Update qty to negative if it is a credit note >

        ProjEmplTransSale   projEmplTransSale;
        boolean invoiced   = ProjProposalJour::find(ProjProposalEmpl::find(this.transId(),this.proposalId()).ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;
        Qty                 emplTransQty = projEmplTrans.Qty;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select TransStatus from projEmplTransSale
                        where projEmplTransSale.TransId == projEmplTrans.TransId;

            // Description: Quantity returned doesn't apply for Selected for credit note transactions
            if (invoiced && projEmplTransSale.TransStatus != ProjTransStatus::MarkedCreditnote)
            {
                emplTransQty = (select projInvoiceEmpl
                                    where projInvoiceEmpl.ProjInvoiceId == ProjProposalJour::find(ProjProposalEmpl::find(this.transId(),this.proposalId()).ProposalId).ProjInvoiceId
                                    && projInvoiceEmpl.TransId       == this.transId()).Qty;
            }
            else
            {
                if (projEmplTransSale.TransStatus   == ProjTransStatus::CreditnoteProposal)
                {
                    emplTransQty = -projEmplTrans.Qty;
                }
            }
        }

        return emplTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return projEmplTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projEmplTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projEmplTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjEmplTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    public TaxGroup taxGroup()
    {
        return projEmplTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    public TaxItemGroup taxItemGroup()
    {
        return projEmplTrans.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        AmountCur   ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            ret = projEmplTrans.TotalCostAmountCur;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return projEmplTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    public TransactionID transId()
    {
        return projEmplTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur           ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            ret = projEmplTrans.TotalSalesAmountCur;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return projEmplTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    public Voucher voucherInvoice()
    {
        Voucher             ret;
        ProjEmplTransSale   projEmplTransSale;
        ProjTrans           projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplTrans)))
        {
            if (!getVoucherInvoice)
            {
                getVoucherInvoice = true;
                while select projEmplTransSale
                    where projEmplTransSale.TransId == projEmplTrans.TransId
                {
                    projTransSale = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                    voucherInvoice = projTransSale.voucherInvoice();
                    if (voucherInvoice)
                    {
                        break;
                    }
                }
            }

            ret = voucherInvoice;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original voucher number associated with this transaction.
    /// </summary>
    /// <returns>
    /// The original voucher number associated with this transaction.
    /// </returns>
    public Voucher voucherOriginal()
    {
        return projEmplTrans.VoucherJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether the transaction is an intercompany transaction.
    /// </summary>
    /// <returns>
    /// True if the transaction is an intercompany; otherwise false.
    /// </returns>
    public boolean isIntercompany()
    {
        return projEmplTrans.isIntercompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lending legal entity.
    /// </summary>
    public DataAreaId lendingLegalEntity()
    {
        DataAreaId ret = curExt();

        if (this.isIntercompany())
        {
            ret = CompanyInfo::findRecId(ResourceFacade::getLegalEntity(projEmplTrans.Resource)).DataArea;

            if (!ret && projEmplTrans.VendInvoiceTrans && ProjPendingVendorInvoiceIntercompanyCheckFlight::instance().isEnabled())
            {
                CustInvoiceTable custInvoiceTable = vendInvoiceTrans::getIntercompanyCustInvoiceTable(projEmplTrans.VendInvoiceTrans, projEmplTrans.ProjId, projEmplTrans.DataAreaId);

                if (custInvoiceTable.ProjIntercompany && custInvoiceTable.ProjIntercompany == projEmplTrans.DataAreaId)
                {
                    ret = custInvoiceTable.DataAreaId;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the from time of the transaction.
    /// </summary>
    /// <returns>
    /// From time of the transaction
    /// </returns>
    public ProjFromTime fromTime()
    {
        return projEmplTrans.FromTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the to time of the transaction.
    /// </summary>
    /// <returns>
    /// To time of the transaction
    /// </returns>
    public ProjToTime toTime()
    {
        return projEmplTrans.ToTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>