<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventReserveDeltaLevelsEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventReserveDeltaLevelsEnumerator</c> class allows to iterate
/// over the levels of the reservation hierarchy for which <c>WHSInventReserveDelta</c> records must be inserted.
/// </summary>
class WHSInventReserveDeltaLevelsEnumerator
{
    InventTable         inventTable;
    Enumerator          hierarchyListEnumerator;
    WHSHierarchyLevel   noOnHandCreationDimLevel;

    InventDim           currentInventDim;
    WHSHierarchyLevel   currentHierarchyLevel;
    FieldId             currentDimFieldId;
    FieldId             prevDimFieldId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the inventory dimension field of the current reservation hierarchy level.
    /// </summary>
    /// <returns>
    /// The ID of the inventory dimension field of the current reservation hierarchy level.
    /// </returns>
    public FieldId currentDimFieldId()
    {
        return currentDimFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current level of the reservation hierarchy.
    /// </summary>
    /// <returns>
    /// The current level of the reservation hierarchy.
    /// </returns>
    public WHSHierarchyLevel currentHierarchyLevel()
    {
        return currentHierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current set of the inventory dimension values.
    /// </summary>
    /// <returns>
    /// The current set of the inventory dimension values.
    /// </returns>
    public InventDim currentInventDim()
    {
        return currentInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the current set of the inventory dimension values.
    /// </summary>
    /// <returns>
    /// The ID of the current set of the inventory dimension values.
    /// </returns>
    public InventDimId currentInventDimId()
    {
        return currentInventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deltaChangesOnlyAvailOrdered</Name>
				<Source><![CDATA[
    private boolean deltaChangesOnlyAvailOrdered(WHSInventReserveDelta _delta)
    {
        return (_delta.AvailOrdered && !_delta.AvailPhysical && !_delta.ReservOrdered && !_delta.ReservPhysical)
            || (_delta.CWAvailOrdered && !_delta.CWAvailPhysical && !_delta.CWReservOrdered && !_delta.CWReservPhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNegativeWarehouseAdjustment</Name>
				<Source><![CDATA[
    private void initForNegativeWarehouseAdjustment(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        InventQtyAvailPhysical      _availPhysical,
        InventQtyAvailOrdered       _availOrdered,
        InventQtyAvailPhysical      _cwAvailPhysical,
        InventQtyAvailOrdered       _cwAvailOrdered)
    {
        inventTable = InventTable::find(_itemId);
        currentInventDim = InventDim::find(_inventDimId);

        WHSReservationHierarchyProvider hierarchyProvider = WHSReservationHierarchyProvider::construct();
        List hierarchyList = hierarchyProvider.getHierarchyListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);
        hierarchyListEnumerator = hierarchyList.getEnumerator();

        noOnHandCreationDimLevel = this.noOnHandCreationLevel((_availOrdered && !_availPhysical) || (_cwAvailOrdered && !_cwAvailPhysical));

        this.moveNext(); // skip the warehouse level
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDelta</Name>
				<Source><![CDATA[
    private void initFromDelta(
        WHSInventReserveDelta   _inventReserveDelta,
        boolean                 _onlyLocationAndBelow)
    {
        this.initFromParameters(_inventReserveDelta.ItemId, _inventReserveDelta.InventDimId, _onlyLocationAndBelow, this.deltaChangesOnlyAvailOrdered(_inventReserveDelta));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    private void initFromParameters(
        ItemId      _itemId,
        InventDimId _inventDimId,
        boolean     _onlyLocationAndBelow,
        boolean     _deltaOnlyChangesAvailOrdered)
    {
        inventTable = InventTable::find(_itemId);
        currentInventDim = InventDim::find(_inventDimId);

        WHSReservationHierarchyProvider hierarchyProvider = WHSReservationHierarchyProvider::construct();

        List hierarchyList = _onlyLocationAndBelow ?
                                 hierarchyProvider.getDimListLocationAndDownFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp):
                                 hierarchyProvider.getHierarchyListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);

        hierarchyListEnumerator = hierarchyList.getEnumerator();

        noOnHandCreationDimLevel = this.noOnHandCreationLevel(_deltaOnlyChangesAvailOrdered);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the cursor to the next level of the reservation hierarchy.
    /// </summary>
    /// <returns>
    /// true, if the next level of the reservation hierarchy was selected; otherwise, false.
    /// </returns>
    public boolean moveNext()
    {
        boolean                             foundNext = false;

        while (!foundNext && hierarchyListEnumerator.moveNext())
        {
            if (prevDimFieldId)
            {
                currentInventDim.clearField(prevDimFieldId);
            }

            WHSReservationHierarchyElementData hierarchyElementData = hierarchyListEnumerator.current();
            currentDimFieldId = hierarchyElementData.parmDimensionFieldId();
            currentHierarchyLevel = hierarchyElementData.parmLevel();

            if ((!noOnHandCreationDimLevel || currentHierarchyLevel < noOnHandCreationDimLevel)
                && (hierarchyElementData.isItemLevelElement() || currentInventDim.(currentDimFieldId)))
            {
                currentInventDim = InventDim::findOrCreate(currentInventDim);
                foundNext = true;
            }

            prevDimFieldId = currentDimFieldId;
        }

        return foundNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOnHandCreationLevel</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyLevel noOnHandCreationLevel(boolean _onlyAvailOrderedChanged)
    {
        // We allow Ordered transactions with holes, so if only Avail ordered is being changed we must check for where the hole is.
        //if (_availOrdered && !_availPhysical && !_reservOrdered && !_reservPhysical)
        if (_onlyAvailOrderedChanged)
        {
            return WHSInventOnHand::topDownNoOnHandCreationDimLevel(inventTable.ItemId, currentInventDim);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSInventReserveDeltaLevelsEnumerator construct()
    {
        return new WHSInventReserveDeltaLevelsEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForNegativeWarehouseAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSInventReserveDeltaLevelsEnumerator</c> class
    /// that will enumerate over the reservation hierarchy levels that are affected
    /// by the on hand change in the warehouse which allows negative physical on hand.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The ID of the inventory dimension values set.
    /// </param>
    /// <param name="_availPhysicalAdjustment">
    /// The physically available quantity adjustment.
    /// </param>
    /// <param name="_availOrderedAdjustment">
    /// The ordered available quantity adjustment.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveDeltaLevelsEnumerator</c> class.
    /// </returns>
    public static WHSInventReserveDeltaLevelsEnumerator newForNegativeWarehouseAdjustment(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        InventQtyAvailPhysical      _availPhysicalAdjustment,
        InventQtyAvailOrdered       _availOrderedAdjustment)
    {
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            throw error("@WAX:Error_WHSCWOnHandNotSupported");
        }
        
        WHSInventReserveDeltaLevelsEnumerator enumerator = WHSInventReserveDeltaLevelsEnumerator::construct();

        enumerator.initForNegativeWarehouseAdjustment(
            _itemId,
            _inventDimId,
            _availPhysicalAdjustment,
            _availOrderedAdjustment, 
            0, 
            0);

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForNegativeWarehouseAdjustmentFromQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSInventReserveDeltaLevelsEnumerator</c> class
    /// that will enumerate over the reservation hierarchy levels that are affected
    /// by the on hand change in the warehouse which allows negative physical on hand.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The ID of the inventory dimension values set.
    /// </param>
    /// <param name="_quantities">
    /// The quantity adjustments.
    /// </param>
    /// <param name="_availOrderedAdjustment">    
    /// <returns>
    /// A new instance of the <c>WHSInventReserveDeltaLevelsEnumerator</c> class.
    /// </returns>
    public static WHSInventReserveDeltaLevelsEnumerator newForNegativeWarehouseAdjustmentFromQuantities(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        WHSInventReserveQuantities  _quantities)
    {
        WHSInventReserveDeltaLevelsEnumerator enumerator = WHSInventReserveDeltaLevelsEnumerator::construct();

        enumerator.initForNegativeWarehouseAdjustment(
            _itemId,
            _inventDimId,
            _quantities.AvailPhysical,
            _quantities.AvailOrdered, 
            _quantities.CWAvailPhysical,
            _quantities.CWAvailOrdered);

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSInventReserveDeltaLevelsEnumerator</c> class
    /// which will iterate over the levels of the reservation hierarchy
    /// where availability information needs to be updated
    /// based on the <c>WHSInventReserveDelta</c> record for the reservation hierarchy level
    /// where the on hand change took place.
    /// </summary>
    /// <param name="_inventReserveDelta">
    /// The <c>WHSInventReserveDelta</c> record for the reservation hierarchy level
    /// where the on hand change took place.
    /// </param>
    /// <param name="_onlyLocationAndBelow">
    /// true, if only the location level of the reservation hierarchy and the levels below should be affected.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSInventReserveDeltaLevelsEnumerator</c> class.
    /// </returns>
    public static WHSInventReserveDeltaLevelsEnumerator newFromDelta(
        WHSInventReserveDelta   _inventReserveDelta,
        boolean                 _onlyLocationAndBelow)
    {
        WHSInventReserveDeltaLevelsEnumerator enumerator = WHSInventReserveDeltaLevelsEnumerator::construct();

        enumerator.initFromDelta(_inventReserveDelta, _onlyLocationAndBelow);

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParametersStopOnWarehouseLevel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventReserveDeltaLevelsEnumerator newFromParametersStopOnWarehouseLevel(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        WHSInventReserveQuantities  _quantities,        
        boolean                     _onlyLocationAndBelow)
    {
        WHSInventReserveDeltaLevelsEnumerator enumerator = WHSInventReserveDeltaLevelsEnumerator::construct();

        boolean onlyAvailOrdered = (_quantities.AvailOrdered && !_quantities.AvailPhysical && !_quantities.ReservOrdered && !_quantities.ReservPhysical) 
                                    || (_quantities.CWAvailOrdered && !_quantities.CWAvailPhysical && !_quantities.CWReservOrdered && !_quantities.CWReservPhysical);

        enumerator.initFromParameters(_itemId, _inventDimId, _onlyLocationAndBelow, onlyAvailOrdered);

        //if we are only populating to the location level there is no need to stop at the warehouse
        if (!_onlyLocationAndBelow)
        {
            var warehouseLevel = WHSReservationHierarchyProvider::construct().getDimLevelFromReservationHierarchy(InventTable::find(_itemId).whsReservationHierarchy(), fieldNum(InventDim, InventLocationId));
            enumerator.noOnHandCreationDimLevel = max(enumerator.noOnHandCreationDimLevel, warehouseLevel);
        }

        return enumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>