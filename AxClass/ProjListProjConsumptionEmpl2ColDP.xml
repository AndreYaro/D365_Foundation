<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjConsumptionEmpl2ColDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjConsumptionEmpl2ColDP</c> class is the report data provider class for the
///    associated <c>ProjListProjConsumptionEmplItem2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementEmplItemConsumption)),
    SRSReportParameterAttribute(classStr(ProjListProjConsumptionContract))
]

class ProjListProjConsumptionEmpl2ColDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    boolean                 skipZero;
    boolean                 skipBlankId;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    projStatement                   actualProjStatement;
    projStatement                   budgetProjStatement;
    ProjListProjTrans_Consumption   listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjConsumptionTmp      projListProjConsumptionTmp;

    QueryRun                qrun;
    ProjEmplItemId          id;
    ResourceRecId           resourceId;
    Name                    name;

    AmountMST               actualSalary;
    AmountMST               budgetSalary;
    AmountMST               actualTotalCost;
    AmountMST               budgetTotalCost;
    ProjQty                 actualQtyHour;
    ProjQty                 budgetQtyHour;

    AmountMST               actualExpense;
    AmountMST               budgetExpense;
    AmountMST               actualItem;
    AmountMST               budgetItem;

    int                     reportType;
    int                     hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    int                     showEmplCost, showEmplQty, showTotalCost, showItemCost, showCostCost;
    str                     headerLabel, periodLabel, totalCostLabel, devianceLabel;
    str                     hourLabel, hourQtyLabel, idLabel;

    boolean                 checkEmplItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
///    Calculates the consumption amount for hour, expense, and item.
/// </summary>
void calculate()
{
    if (checkEmplItem)
    {
        actualProjStatement.parmResource(resourceId);
        budgetProjStatement.parmResource(resourceId);

        actualProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
        budgetProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    }
    else
    {
        actualProjStatement.parmResource(0);
        budgetProjStatement.parmResource(0);

        actualProjStatement.parmEmplItemId(id);
        budgetProjStatement.parmEmplItemId(id);
    }

    if (amountQty ==ProjAmountQty::Amount || amountQty ==ProjAmountQty::AmountQty)
    {
        actualSalary      = actualProjStatement.c105_Consumption_Hour();
        budgetSalary      = budgetProjStatement.c105_Consumption_Hour();
    }

    if (amountQty ==ProjAmountQty::Qty || amountQty ==ProjAmountQty::AmountQty)
    {
        actualQtyHour     = actualProjStatement.c105_Consumption_Hour_qty();
        budgetQtyHour     = budgetProjStatement.c105_Consumption_Hour_qty();
    }

    actualExpense += actualProjStatement.c125_Consumption_Cost();
    budgetExpense += budgetProjStatement.c125_Consumption_Cost();

    actualItem += actualProjStatement.c120_Consumption_Item();
    budgetItem += budgetProjStatement.c120_Consumption_Item();

    actualTotalCost   = actualProjStatement.c100_Total_Consumption();
    budgetTotalCost   = budgetProjStatement.c100_Total_Consumption();
}

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    /// <summary>
/// Calculates the consumption amount for blank Ids.
/// </summary>
void calculateNoId()
{
    actualProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    budgetProjStatement.parmEmplItemId(SysQuery::valueEmptyString());

    actualProjStatement.parmResource(0);
    budgetProjStatement.parmResource(0);

    actualTotalCost    = actualProjStatement.c100_Total_Consumption();
    budgetTotalCost    = budgetProjStatement.c100_Total_Consumption();
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
///    Gets the data from the <c>ProjListProjConsumptionTmp</c> table.
/// </summary>
/// <returns>
///    The data from the <c>ProjListProjConsumptionTmp</c> table.
/// </returns>

[SRSReportDataSetAttribute('ProjListProjConsumptionTmp')]
public ProjListProjConsumptionTmp getProjListProjConsumptionTmp()
{
    select * from projListProjConsumptionTmp;
    return projListProjConsumptionTmp;
}

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
///    Initializes an instance of the <c>ProjListProjTrans</c> class.
/// </summary>
private void initProjListTrans()
{
    listProjTrans = ProjListProjTrans::construct(ProjListStateType::Consumption, ProjListStateId::EmplItem);
    listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

    listProjTrans.parmTimeMaterial(timeMaterial);
    listProjTrans.parmFixedPrice(fixedPrice);
    listProjTrans.parmInvestment(investment);
    listProjTrans.parmInternalCost(internalCost);
    listProjTrans.parmtime(time);

    listProjTrans.parmHour(hour);
    listProjTrans.parmExpenses(expenses);
    listProjTrans.parmItem(item);

    listProjTrans.parmProjFromDate(projFromDate);
    listProjTrans.parmProjBreakDate(projBreakDate);
    listProjTrans.parmProjToDate(projToDate);
    listProjTrans.parmLedgerFromDate(ledgerFromDate);
    listProjTrans.parmLedgerBreakDate(ledgerBreakDate);
    listProjTrans.parmLedgerToDate(ledgerToDate);

    listProjTrans.parmActualVsBudget(actualVsBudget);
    listProjTrans.parmForecastModelId(forecastModelId);

    listProjTransLayout.parmStateProjType(stateProjType);
    listProjTransLayout.parmSkipZero(skipZero);

    listProjTransLayout.parmShowAmount(showAmount);
    listProjTransLayout.parmAmountQty(amountQty);

    if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
    {
        listProjTransLayout.parmLevel(2);
    }

    listProjTrans.parmShowDeviance(true);
}

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
///    Gets the required data and inserts it into the temporary table.
/// </summary>
private void insertProjListProjConsumptionTmp()
{
    projListProjConsumptionTmp.clear();

    projListProjConsumptionTmp.Id            = id;
    projListProjConsumptionTmp.IdLabel       = idLabel;
    projListProjConsumptionTmp.Name          = name;

    if (checkEmplItem)
    {
        projListProjConsumptionTmp.ProjListIdType = ProjListIDType::Employee;
    }
    else
    {
        projListProjConsumptionTmp.ProjListIdType = ProjListIDType::Item;
    }

    projListProjConsumptionTmp.QtyHour       = actualQtyHour;
    projListProjConsumptionTmp.QtyHour1      = budgetQtyHour;
    projListProjConsumptionTmp.QtyHour2      = ProjListProjHelpClass::calcActualVsBudget(actualQtyHour,
                                                budgetQtyHour, actualVsBudget, true);

    projListProjConsumptionTmp.EmplCost      = listProjTransLayout.showAmountReport(actualSalary, showAmount);
    projListProjConsumptionTmp.EmplCost1     = listProjTransLayout.showAmountReport(budgetSalary, showAmount);
    projListProjConsumptionTmp.EmplCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.EmplCost,
                                                projListProjConsumptionTmp.EmplCost1, actualVsBudget, true);

    projListProjConsumptionTmp.TotalCost     = listProjTransLayout.showAmountReport(actualTotalCost, showAmount);
    projListProjConsumptionTmp.TotalCost1    = listProjTransLayout.showAmountReport(budgetTotalCost, showAmount);
    projListProjConsumptionTmp.TotalCost2    = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.TotalCost,
                                                projListProjConsumptionTmp.TotalCost1, actualVsBudget, true);

    projListProjConsumptionTmp.CostCost      = listProjTransLayout.showAmountReport(actualExpense, showAmount);
    projListProjConsumptionTmp.CostCost1     = listProjTransLayout.showAmountReport(budgetExpense, showAmount);
    projListProjConsumptionTmp.CostCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.CostCost,
                                                projListProjConsumptionTmp.CostCost1, actualVsBudget, true);

    projListProjConsumptionTmp.ItemCost      = listProjTransLayout.showAmountReport(actualItem, showAmount);
    projListProjConsumptionTmp.ItemCost1     = listProjTransLayout.showAmountReport(budgetItem, showAmount);
    projListProjConsumptionTmp.ItemCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.ItemCost,
                                                projListProjConsumptionTmp.ItemCost1, actualVsBudget, true);

    // set labels
    projListProjConsumptionTmp.HeaderLabel     = headerLabel;
    projListProjConsumptionTmp.PeriodLabel     = periodLabel;
    projListProjConsumptionTmp.EmplCostLabel   = hourLabel;
    projListProjConsumptionTmp.QtyHourLabel    = hourQtyLabel;
    projListProjConsumptionTmp.TotalCostLabel  = totalCostLabel;
    projListProjConsumptionTmp.DevianceLabel   = devianceLabel;

    // set decimal values
    projListProjConsumptionTmp.DecimalHourQty  = hourQtyDecimals;
    projListProjConsumptionTmp.DecimalAmount   = amountDecimals;

    // set field visibility
    projListProjConsumptionTmp.ShowEmplCost    = showEmplCost;
    projListProjConsumptionTmp.ShowQtyHour     = showEmplQty;
    projListProjConsumptionTmp.ShowItemCost    = showItemCost;
    projListProjConsumptionTmp.ShowCostCost    = showCostCost;
    projListProjConsumptionTmp.ShowTotalCost   = showTotalCost;

    projListProjConsumptionTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
///    Indicates whether the consumption amounts for hour, expense, and item are equal to zero.
/// </summary>
/// <returns>
///    true if all the values are not zero; otherwise, false.
/// </returns>
boolean lineValue()
{
    return ((actualSalary       != 0) ||
            (budgetSalary       != 0) ||
            (actualTotalCost    != 0) ||
            (budgetTotalCost    != 0) ||
            (actualQtyHour      != 0) ||
            (budgetQtyHour      != 0) ||
            (actualExpense      != 0) ||
            (budgetExpense      != 0) ||
            (actualItem         != 0) ||
            (budgetItem         != 0));

}

]]></Source>
			</Method>
			<Method>
				<Name>printEmplItem</Name>
				<Source><![CDATA[
    /// <summary>
///    Gets the employee and item records and calls the <c>calculate</c> method.
/// </summary>
void printEmplItem()
{
    ResourceView    resourceLocal;
    InventTable     itemTableLocal;

    if (SysReportRun::changed(qrun,tableNum(ResourceView)))
    {
        resourceLocal  = qrun.get(tableNum(ResourceView));

        resourceId      = resourceLocal.RecId;
        id              = ResourceFacade::getID(resourceId);
        name            = ResourceFacade::getName(resourceId);
        checkEmplItem   = true;
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) && SysReportRun::changed(qrun,tableNum(InventTable)))
    {
        itemTableLocal  = qrun.get(tableNum(InventTable));

        resourceId      = 0;
        id              = itemTableLocal.ItemId;
        name            = itemTableLocal.defaultProductName();
        checkEmplItem   = false;
    }

    this.calculate();

    if (! skipZero || (this.lineValue()))
    {
        this.insertProjListProjConsumptionTmp();
        this.setFieldZero();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields to zero.
    /// </summary>
    private void setFieldZero()
    {
        actualSalary      = 0;
        actualQtyHour     = 0;

        budgetSalary      = 0;
        budgetQtyHour     = 0;

        actualExpense     = 0;
        budgetExpense     = 0;

        actualItem        = 0;
        budgetItem        = 0;

        actualTotalCost   = 0;
        budgetTotalCost   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SSRS at
///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
    ProjListProjConsumptionContract contract = this.parmDataContract() as ProjListProjConsumptionContract;

    timeMaterial = contract.parmTimeMaterial();
    fixedPrice = contract.parmFixedPrice();
    investment = contract.parmInvestment();
    internalCost = contract.parmInternalCost();
    time = contract.parmTime();

    hour = contract.parmHour();
    expenses = contract.parmExpenses();
    item = contract.parmItem();

    projFromDate = contract.parmProjFromDate();
    projBreakDate = contract.parmProjBreakDate();
    projToDate = contract.parmProjToDate();
    ledgerFromDate = contract.parmLedgerFromDate();
    ledgerBreakDate = contract.parmLedgerBreakDate();
    ledgerToDate = contract.parmLedgerToDate();

    actualVsBudget = contract.parmActualVsBudget2Col();
    forecastModelId = contract.parmForecastModelIdV2();

    skipBlankId = contract.parmSkipBlankId();
    skipZero = contract.parmSkipZero();

    showAmount = contract.parmShowAmount();
    amountQty = contract.parmAmountQty();

    reportType = contract.parmReportType();

    this.initProjListTrans();

    this.setIdLabel();
    headerLabel   = listProjTrans.formatSelection(showAmount,false);
    periodLabel   = listProjTrans.formatPeriodLabel('', DateFlags::None);

    [hourLabel, hourQtyLabel, totalCostlabel, devianceLabel] = listProjTrans.setDisplayLabel2Column(hour, expenses, item);

    [showEmplQty, showEmplCost, showCostCost, showItemCost, showTotalCost] = listProjTrans.setDisplayFlags(amountQty, hour, expenses, item);

    [hourQtyDecimals, amountDecimals,
    grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

    actualProjStatement = projStatement::newListProjConsumption(listProjTrans,ProjActualBudget::Actual,amountQty);
    budgetProjStatement = projStatement::newListProjConsumption(listProjTrans,ProjActualBudget::Budget,amountQty,forecastModelId);

    qrun = new QueryRun(this.parmQuery());

    //  print lines with no Id eg. cost and revenue with no Employee
    if (!skipBlankId)
    {
        this.calculateNoId();
        if (this.lineValue())
        {
            this.insertProjListProjConsumptionTmp();
        }
    }

    while (qrun.next())
    {
        this.printEmplItem();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setIdLabel</Name>
				<Source><![CDATA[
    /// <summary>
///    Sets the label for the ID.
/// </summary>
void setIdLabel()
{
    if ((hour || expenses) &&  !item)
    {
        idLabel = "@SYS89158";
    }
    else if (item && !(expenses || hour))
    {
        idLabel = "@SYS14428";
    }
    else
    {
        idLabel = "@Res:ResourceItem";
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>