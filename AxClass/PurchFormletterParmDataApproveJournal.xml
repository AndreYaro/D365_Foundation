<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataApproveJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::ApproveJournal)]
class PurchFormletterParmDataApproveJournal extends PurchFormletterParmDataInvoice
{
    LedgerJournalTrans ledgerJournalTrans;
    private boolean isDatasourceSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the <c>chooseLines</c> query to work with additional data sources.
    /// </summary>
    /// <param name="_queryAdditional">
    ///    Determines whether additional data sources should be queried.
    /// </param>
    /// <remarks>
    ///    This method is called after the query ranges are already known.
    /// </remarks>
    public void adjustLinesQuery(boolean _queryAdditional)
    {
        QueryBuildDataSource vendInvoiceInfoTableDataSource, nonPOVendInvoiceDataSource;
        QueryBuildRange poolRange;
        RefRecId poolRecId = this.ledgerJournalTransPool().RecId;

        super(_queryAdditional);

        // allow only records with correct pool id
        vendInvoiceInfoTableDataSource = chooseLinesPendingInvoice.query().dataSourceTable(tableNum(VendInvoiceInfoTable));
        poolRange = SysQuery::findOrCreateRange(vendInvoiceInfoTableDataSource, fieldNum(VendInvoiceInfoTable, PoolRecId));
        poolRange.value(SysQuery::value(poolRecId));

        nonPOVendInvoiceDataSource = chooseLinesNonPOInvoice.query().dataSourceTable(tableNum(VendInvoiceInfoTable));
        poolRange = SysQuery::findOrCreateRange(nonPOVendInvoiceDataSource, fieldNum(VendInvoiceInfoTable, PoolRecId));
        poolRange.value(SysQuery::value(poolRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxAdjustmentsFromRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the tax adjustment from the invoice register to the vendor invoice.
    /// </summary>
    /// <remarks>
    /// 1. There may only be one purchase order that is selected for the tax adjustments to be copied.
    /// 2. If the sales tax adjustments were prorated across the invoice lines,
    ///    then an informational message conveying the same is displayed to the user.
    /// </remarks>
    public void copyTaxAdjustmentsFromRegister()
    {
        TaxAmountCur calculatedTax;
        TaxAmountCur actualTax;
        LedgerJournalTrans poolLedgerJournalTrans;
        TaxRegulation taxRegulation;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchTotals purchTotals;

        poolLedgerJournalTrans = this.ledgerJournalTransPool();

        // If multiple POs are selected, then do not copy tax adjustments.
        if (parmTableMap.elements() == 1 && purchParmUpdate.numberOfTables() == 1)
        {
            calculatedTax = TaxTrans::getCalculatedTaxAmountForVoucher(poolLedgerJournalTrans.Voucher, poolLedgerJournalTrans.TransDate);
            actualTax = Tax::taxTotal(poolLedgerJournalTrans.Voucher, poolLedgerJournalTrans.TransDate, '', false, true);

            if (actualTax != calculatedTax)
            {
                // Indicates the tax was adjusted. Hence copy the tax adjustment to the vendor invoice.
                // Need to calculate taxes so that the tax adjustment can be determined and applied to the correct tax codes.
                select firstonly * from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmId == this.parmId();

                purchTotals = PurchTotals::newParmTable(
                    vendInvoiceInfoTable,
                    PurchUpdate::All,
                    vendInvoiceInfoTable.ParmId,
                    '',
                    vendInvoiceInfoTable.Ordering,
                    PurchTotalsCachingMethod::Reuse);

                purchTotals.calc(false, false, true);

                taxRegulation = TaxRegulation::newTaxRegulation(purchTotals.tax(), poolLedgerJournalTrans);
                taxRegulation.createSumsFromTmp();
                taxRegulation.allocateAmount(actualTax);
                taxRegulation.saveTaxRegulation();

                if (taxRegulation.existAdjustmentsForMultipleLines())
                {
                    this.setActiveInvoiceFlag(VendActiveInvoiceFlags::SalesTaxAdjustmentsProrated, true);
                    this.fillOutputContract();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmTable</Name>
				<Source><![CDATA[
    void defaultParmTable(VendDocumentTableMap _vendInvoiceInfoTable, PurchTable _purchTable)
    {
        Debug::assert(_vendInvoiceInfoTable.TableId != tableNum(VendDocumentTableMap));
        _vendInvoiceInfoTable.defaultRow(_purchTable, ledgerJournalTrans);

        VendParameters vendParameters = VendParameters::find();
        if (vendParameters.editUseInvoiceMatching() && vendParameters.editAutomaticHeaderMatching())
        {
            // Saving or Posting will update this value, at this point we only want to flag that the value is something other than LastMatchVarianceOptions::Unknown
            _vendInvoiceInfoTable.LastMatchVariance = LastMatchVarianceOptions::OK;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSumBy</Name>
				<Source><![CDATA[
    protected AccountOrder defaultSumBy()
    {
        return AccountOrder::Account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmTableNum</Name>
				<Source><![CDATA[
    protected Num getParmTableNum(Num _num, PurchTable _purchTable, Num _purchSummaryFormLetterId)
    {
        Num ret;
        _num = ledgerJournalTrans.Invoice;

        ret = super(_num, _purchTable, _purchSummaryFormLetterId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransPool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>LedgerJournalTrans</c> table record representing an AP Invoice Pool.
    /// </summary>
    /// <returns>
    /// A <c>LedgerJournalTrans</c> table record representing an AP Invoice Pool.
    /// </returns>
    protected LedgerJournalTrans ledgerJournalTransPool()
    {
        return LedgerJournalTrans::ledgerJournalTransPool(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalVendTrans</Name>
				<Source><![CDATA[
    VendTrans ledgerJournalVendTrans()
    {
        return VendTrans::find(ledgerJournalTrans.VendTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLastUsedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the last used query is used when the <c>ChooseLines</c> query executes.
    /// </summary>
    /// <returns>
    /// true if the last used query should be used; otherwise, false.
    /// </returns>
    protected boolean loadLastUsedQuery()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the methods to create invoice lines.
    /// </summary>
    /// <param name="_append">
    /// A Boolean value that indicates whether to append the invoice lines instead of over-writing them.
    /// </param>
    /// <remarks>
    /// The <c>PurchFormletterParmDataInvoice.chooseLinesFromPurchSelectLinesManager</c> method is called
    /// for invoice lines creation or deletion when the packed sets are populated from the
    /// <c>PurchSelectLines</c> form.
    /// </remarks>
    protected void selectChooseLines(boolean _append = false)
    {
        VendDocumentTableMap vendInvoiceInfoTable = this.initParmTable();

        super(_append);

        ttsbegin;

        select forupdate purchParmUpdate
            where purchParmUpdate.ParmId == this.parmId();

        if (purchParmUpdate.numberOfTables() == 1)
        {
            select firstonly forupdate vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == this.parmId();

            vendInvoiceInfoTable.Num = this.sumNum();
            vendInvoiceInfoTable.doUpdate();
        }
        else
        {
            purchParmUpdate.SumNum = this.sumNum();
            purchParmUpdate.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumNum</Name>
				<Source><![CDATA[
    protected Num sumNum(Num _sumNum = ledgerJournalTrans.Invoice)
    {
        purchParmUpdate.SumNum = _sumNum;
        return purchParmUpdate.SumNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate(TransDate _transDate = transDate)
    {
        VendDocumentTableMap localParmTable = this.initParmTable();

        if (this.parmLedgerJournalTrans().Voucher != '')
        {
            // Always default the date from the invoice register
            localParmTable.Ordering = this.parmDocumentStatus();
            localParmTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, TransDate), localParmTable.TableId),
                                        purchTable,
                                        this.parmLedgerJournalTrans());
            _transDate = localParmTable.TransDate;
        }

        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        isDatasourceSet = (this.parmDatasourceRecordsPacked() != conNull());

        super();

        if (ledgerJournalTrans.Voucher)
        {
            if (this.invoiceAccountInQuery())
            {
                SysQuery::findOrCreateRange(chooseLines.query().dataSourceTable(tableNum(PurchTable)),fieldNum(PurchTable, InvoiceAccount)).value(queryValue(this.ledgerJournalVendTrans().AccountNum));
                chooseLines.query().dataSourceTable(tableNum(PurchTable)).rangeField(fieldNum(PurchTable, InvoiceAccount)).status(RangeStatus::Locked);
            }
            if (this.vendAccountInQuery())
            {
                SysQuery::findOrCreateRange(chooseLines.query().dataSourceTable(tableNum(PurchTable)),fieldNum(PurchTable, OrderAccount)).value(queryValue(this.ledgerJournalVendTrans().AccountNum));
                chooseLines.query().dataSourceTable(tableNum(PurchTable)).rangeField(fieldNum(PurchTable, OrderAccount)).status(RangeStatus::Locked);
            }

            if (this.updateQueryBuildForPurchId())
            {
                var purchIdRange = SysQuery::findOrCreateRange(chooseLines.query().dataSourceTable(tableNum(PurchTable)), fieldNum(PurchTable, PurchId));
                purchIdRange.value(ledgerJournalTrans.PurchIdRange);
                if(!purchIdRange.valid())
                {
                    purchIdRange.value(queryValue(ledgerJournalTrans.PurchIdRange));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildForPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the query range value for the <c>PurchId</c> field should be set.
    /// </summary>
    /// <returns>
    /// true if the query range value for the <c>PurchId</c> field should be set; otherwise, false.
    /// </returns>
    protected boolean updateQueryBuildForPurchId()
    {
        boolean isRetrievingSpecificInvoice = (this.parmCallerTable().TableId == tableNum(VendInvoiceInfoTable) && isDatasourceSet);

        return (ledgerJournalTrans.PurchIdRange != '' && !isRetrievingSpecificInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer</Name>
				<Source><![CDATA[
    static public container chooseLinesServer(
        container _purchFormletterInvoiceContractPacked,
        boolean _append,
        boolean _reuseParmUpdate = false,
        boolean _onlyCreateParmUpdate = false,
        boolean _executeLateSelection = false,
        PurchInvoiceType _invoiceType = PurchInvoiceType::Standard,
        LedgerJournalTrans _ledgerJournalTrans = null)
    {
        PurchFormletterParmDataApproveJournal purchFormletterParmDataApprovalJournal = PurchFormletterParmData::newChooseLines(_purchFormletterInvoiceContractPacked,
                                                                                                                               _reuseParmUpdate,
                                                                                                                               _onlyCreateParmUpdate,
                                                                                                                               _executeLateSelection);
        purchFormletterParmDataApprovalJournal.parmInvoiceType(_invoiceType);
        purchFormletterParmDataApprovalJournal.parmLedgerJournalTrans(_ledgerJournalTrans);
        purchFormletterParmDataApprovalJournal.createData(_append);
        if (!purchFormletterParmDataApprovalJournal.parmWasQueryFormCancelled())
        {
            purchFormletterParmDataApprovalJournal.copyTaxAdjustmentsFromRegister();
        }

        return purchFormletterParmDataApprovalJournal.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use PurchFormletterParmData::construct() instead.', false, 30\6\2020)]
    static PurchFormletterParmDataApproveJournal construct()
    {
        return new PurchFormletterParmDataApproveJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHeaderCountryRegionData</Name>
				<Source><![CDATA[
    protected void defaultHeaderCountryRegionData()
    {
        super();

        #EECountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            VendInvoiceInfoTable_W localVendInvoiceInfoTable_W;

            localVendInvoiceInfoTable_W.skipDataMethods(true);
            localVendInvoiceInfoTable_W.skipDatabaseLog(true);
            localVendInvoiceInfoTable_W.skipEvents(true);

            VendInvoiceInfoTable vendInvoiceInfoTable;

            update_recordset localVendInvoiceInfoTable_W
                setting PurchReceiptDate_W = ledgerJournalTrans.ReceiptDate_W
            join vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == this.parmId()
                    && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::New
                    && vendInvoiceInfoTable.RecId == localVendInvoiceInfoTable_W.VendInvoiceInfoTable;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>