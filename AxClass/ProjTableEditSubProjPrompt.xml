<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableEditSubProjPrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTableEditSubProjPrompt extends RunBase
{
    ProjTableEditSubProj    projTableEditSubProj;

    ProjId                  parentId;
    fieldId                 fieldId;
    anytype                 newValue;
    anytype                 formerValue;
    ArrayIdx                arrayIdx;
    boolean                 useForIntegration;
    ProjType                projType;
    boolean                 deleteIntegrationFlag;
    NoYes                   allowEditFromPS;
    boolean                 updateLinePropertyId;

    DialogRunbase           dialog;

    DialogField             dialogSelection;
    Map                     enumValue2RadioItemMap;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        ProjTableEditSubProj
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormBuildRadioControl   formBuildRadioControl;
        Set                     allowedEnumValuesSet;
        SetEnumerator           allowedEnumValueEnumerator;
        int                     radioItemNumber;
        int                     allowedEnumValue;
        enumId                  enumId;
        DictEnum                dictEnum;
        Dialog dialogRunBase = Dialog::newFormnameRunbase(formstr(ProjTableEditSubProjPrompt),this);

        dialog = super();

        dialog.alwaysOnTop(true);
        dialog.caption("@SYS339400");

        if (useForIntegration)
        {
            if (deleteIntegrationFlag)
                // Use the SyncProjTableDeleteSubProj Enum if the dialog is built for the integration function
            {
                dialogSelection            = dialog.addFieldValue(enumstr(SyncProjTableDeleteSubProj), projTableEditSubProj);
            }
            else
            {
                // Use the SyncProjTableAddSubProj Enum if the dialog is built for the integration function
                dialogSelection            = dialog.addFieldValue(enumstr(SyncProjTableAddSubProj), projTableEditSubProj);
            }
        }
        else
        {
            dialogSelection            = dialog.addFieldValue(enumstr(ProjTableEditSubProj), projTableEditSubProj);

            allowedEnumValuesSet = new Set(Types::Enum);
            allowedEnumValuesSet.add(ProjTableEditSubProj::Current);
            if (fieldId != fieldNum(ProjTable, DeliveryLocation))
            {
                allowedEnumValuesSet.add(ProjTableEditSubProj::Same);
            }
            allowedEnumValuesSet.add(ProjTableEditSubProj::All);

            enumid = enumNum(ProjTableEditSubProj);
            dictEnum = new DictEnum(enumid);

            formBuildRadioControl = dialogSelection.control(dialogSelection.name());
            formBuildRadioControl.enumType(0);
            formBuildRadioControl.helpText(dictEnum.help());
            formBuildRadioControl.items(allowedEnumValuesSet.elements());

            enumValue2RadioItemMap = new Map(Types::Integer, Types::Integer);
            allowedEnumValueEnumerator = allowedEnumValuesSet.getEnumerator();
            radioItemNumber = 1;

            while (allowedEnumValueEnumerator.moveNext())
            {
                allowedEnumValue = allowedEnumValueEnumerator.current();
                formBuildRadioControl.item(radioItemNumber);
                formBuildRadioControl.text(dictEnum.value2Name(allowedEnumValue));
                enumValue2RadioItemMap.insert(radioItemNumber, allowedEnumValue);
                radioItemNumber++;
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (useForIntegration)
        {
            projTableEditSubProj = dialogSelection.value();
        }
        else
        {
            projTableEditSubProj = enumValue2RadioItemMap.lookup(dialogSelection.value() + 1);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        ProjId      _parentId,
        fieldId     _fieldId,
        anytype     _newValue,
        anytype     _formerValue,
        ArrayIdx    _arrayIdx = 0,
        boolean     _useForIntegration = false,
        ProjType    _projType = ProjType::TimeMaterial,
        boolean     _deleteIntegrationFlag = false,
        NoYes       _allowEditFromPS = NoYes::No,
        boolean     _updateLinePropertyId = false)
    {
        parentId    = _parentId;
        fieldId     = _fieldId;
        newValue    = _newValue;
        formerValue = _formerValue;
        arrayIdx    = _arrayIdx;
        useForIntegration = _useForIntegration;
        projType = _projType;
        deleteIntegrationFlag = _deleteIntegrationFlag;
        allowEditFromPS = _allowEditFromPS;
        updateLinePropertyId = _updateLinePropertyId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTableEditSubProj</Name>
				<Source><![CDATA[
    ProjTableEditSubProj parmProjTableEditSubProj(ProjTableEditSubProj _projTableEditSubProj  = projTableEditSubProj)
    {
        projTableEditSubProj = _projTableEditSubProj;

        return projTableEditSubProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        try
        {
            ttsbegin;
            // If the value of a parent project is being changed
            if (fieldId == fieldNum(ProjTable, DeliveryLocation))
            {
                ProjTable::editSubProjectsAddress(parentId, newValue, projTableEditSubProj);
            }
            else
            {
                ProjTable::editSubProjects(parentId, fieldId, newValue, projTableEditSubProj, formerValue, arrayIdx, updateLinePropertyId);
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        boolean         ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                ret = false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS8313";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>