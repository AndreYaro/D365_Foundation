<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlannedOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ReqPlannedOrder</c> implements planned order related functionality:
/// - inserting planned orders from UI.
/// </summary>
class ReqPlannedOrder
{
    ReqTransPOCreate    reqTransPOCreate;
    ReqTrans            reqTransPO;
    ReqCalcExplode      reqCalcExplode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReqCalcExplode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>ReqCalcExplode</c> class.
    /// </summary>
    /// <param name="_reqTrans">
    ///     The requirement transaction record to explode.
    /// </param>
    /// <returns>
    ///     The instance of the <c>ReqCalcExplode</c> class.
    /// </returns>
    private ReqCalcExplode getReqCalcExplode(ReqTrans _reqTrans)
    {
        if (reqCalcExplode)
        {
            return reqCalcExplode;
        }

        return ReqCalcExplode::newReqTrans(_reqTrans, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ReqTrans</c> record associated with the planned order.
    /// </summary>
    /// <returns>
    /// The <c>ReqTrans</c> record associated with the planned order.
    /// </returns>
    public ReqTrans getReqTransPO()
    {
        return reqTransPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills in the ID of the order and updates various fields when a planned order is inserted from the
    ///    planned orders form.
    /// </summary>
    /// <param name="_reqPO">
    ///    The <c>ReqPO</c> record with the planned order data.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimensions for the planned order.
    /// </param>
    /// <param name="_fromInventLocationId">
    ///    The source warehouse for transfer orders; optional.
    /// </param>
    /// <param name="_toInventLocationId">
    ///    The destination warehouse for transfer orders; optional.
    /// </param>
    /// <param name="_runExplosion">
    ///    Determines if explosion should be performed after order creation; optional.
    /// </param>
    /// <param name="_recalculateBomLevels">
    ///    Determines if BOM levels should be recalculated; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Exception thrown if the validation of the planned order failed.
    /// </exception>
    public void insertFromForm(
        ReqPO               _reqPO,
        InventDim           _inventDim,
        InventLocationId    _fromInventLocationId   = '',
        InventLocationId    _toInventLocationId     = '',
        boolean             _runExplosion           = true,
        boolean             _recalculateBomLevels   = false)
    {
        reqTransPO.clear();

        if (_toInventLocationId)
        {
            _inventDim.InventLocationId = _toInventLocationId;
            _inventDim.initFromInventLocation(_inventDim.inventLocation());
        }

        _inventDim.clearNotCovPrDim(InventDimGroupSetup::newItemId(_reqPO.ItemId));

        if (! _reqPO.validateWrite() || ! _inventDim.checkDimFieldsValid(_reqPO.ItemId,_inventDim.RecId ? _inventDim.orig() : null))
        {
            throw Exception::Error;
        }

        ttsbegin;

        _reqPO.initPurchQty();

        ReqPlanData reqPlanData = ReqPlanData::newReqPlanVersion(_reqPO.PlanVersion);

        _reqPO.RefId  = NumberSeq::newGetNumFromId(reqPlanData.sequencePlannedOrder()).num();

        _reqPO.setBOMCreated(  _reqPO.ItemBomId   ? true : false);
        _reqPO.setRouteCreated(_reqPO.ItemRouteId ? true : false);

        _reqPO.initYield();

        _reqPO.CovInventDimId = InventDim::findOrCreate(_inventDim).InventDimId;

        _reqPO.setIsDerivedDirectly(ReqSetupDim::newCovInventDimId(ReqSetup::newItemId(_reqPO.ItemId), _reqPO.CovInventDimId));

        _reqPO.insert();

        reqTransPo.ReqDateDlvOrig     = _reqPO.ReqDateDlv;
        reqTransPo.Level              = _reqPO.reqSetupDim().itemLevel();

        reqTransPOCreate.parmAlwaysCreateBOM(_reqPO.isBOMCreated());
        reqTransPOCreate.parmAlwaysCreateRoute(_reqPO.isRouteCreated());
        reqTransPOCreate.insertFromReqPo(reqTransPo, _reqPO, false, reqPlanData);

        if (_fromInventLocationId && reqTransPo.RefType == ReqRefType::TransferPlannedOrder)
        {
            reqTransPo.setFromInventLocationId(_fromInventLocationId);
        }

        if (_runExplosion && this.canRunExplosion())
        {
            this.runExplosion(_reqPO, _recalculateBomLevels);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runExplosion</Name>
				<Source><![CDATA[
    private void runExplosion(ReqPO _reqPO, boolean _recalculateBomLevels)
    {
        ReqCalcExplodePo reqCalcExplodePo;
        reqCalcExplodePo = this.getReqCalcExplode(reqTransPo);
        reqCalcExplodePo.parmRecalculateBomLevels(_recalculateBomLevels);
        reqCalcExplodePo.runOperation();
        reqCalcExplodePo.refreshUpdatedReqPo(_reqPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunExplosion</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canRunExplosion()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        reqTransPOCreate = ReqTransPOCreate::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqCalcExplode</Name>
				<Source><![CDATA[
    public ReqCalcExplode parmReqCalcExplode(ReqCalcExplode _reqCalcExplode = reqCalcExplode)
    {
        reqCalcExplode = _reqCalcExplode;

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqTransPOCreate</Name>
				<Source><![CDATA[
    public ReqTransPOCreate parmReqTransPOCreate(ReqTransPOCreate _reqTransPOCreate = reqTransPOCreate)
    {
        reqTransPOCreate = _reqTransPOCreate;
        return reqTransPOCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqPlannedOrder construct()
    {
        return new ReqPlannedOrder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>