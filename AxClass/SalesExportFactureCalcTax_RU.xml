<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesExportFactureCalcTax_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesExportFactureCalcTax_RU
{
    FactureJour_RU  factureJour;
    FactureTrans_RU factureTrans;
    CustInvoiceJour custInvoiceJour;

    TaxExportFacture_RU tax;

    ExchRate            exchRate;
    ExchRateSecondary   exchRateSecondary;
    TransDate           taxCalculationDate;
    boolean             useDomesticTaxCode;
    RefRecId            singleLineRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    TaxAmount calcTax()
    {
        TaxExportFacture_RU taxFacture = new TaxExportFacture_RU(this);
        TaxAmount amount = taxFacture.calc();
        this.parmTax(taxFacture);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return factureJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate()
    {
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary()
    {
        return custInvoiceJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        select nofetch factureTrans
            where factureTrans.Module       == factureJour.Module &&
                  factureTrans.FactureId    == factureJour.FactureId &&
                 (factureTrans.RecId        == singleLineRecId || !singleLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExchRates</Name>
				<Source><![CDATA[
    void initExchRates()
    {
        exchRate = ExchangeRateHelper::exchRate(this.currencyCode(), this.parmTaxCalculationDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextInvoiceJour</Name>
				<Source><![CDATA[
    protected void nextInvoiceJour()
    {
        if (custInvoiceJour.InvoiceDate         != factureTrans.InvoiceDate     ||
           custInvoiceJour.invoiceId           != factureTrans.InvoiceId       ||
           custInvoiceJour.SalesId             != factureTrans.SalesPurchId    ||
           custInvoiceJour.NumberSequenceGroup != factureTrans.NumberSequenceGroup)
        {
           custInvoiceJour = CustInvoiceTrans::findFacture_RU(factureTrans).custInvoiceJour();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    FactureTrans_RU nextLine()
    {
        next factureTrans;
        this.nextInvoiceJour();

        return factureTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureJour_RU</Name>
				<Source><![CDATA[
    FactureJour_RU parmFactureJour_RU(FactureJour_RU    _factureJour = factureJour)
    {
        factureJour = _factureJour;

        return facturejour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSingleLine</Name>
				<Source><![CDATA[
    RefRecId parmSingleLine(RefRecId _singleLineRecId = singleLineRecId)
    {
        singleLineRecId = _singleLineRecId;

        return singleLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax</Name>
				<Source><![CDATA[
    Tax parmTax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCalculationDate</Name>
				<Source><![CDATA[
    TransDate parmTaxCalculationDate(TransDate _taxCalculationDate = taxCalculationDate)
    {
        taxCalculationDate = _taxCalculationDate;

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDomesticTaxCode</Name>
				<Source><![CDATA[
    boolean parmUseDomesticTaxCode(boolean _useDomesticTaxCode = useDomesticTaxCode)
    {
        useDomesticTaxCode = _useDomesticTaxCode;

        return useDomesticTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    RecId recId()
    {
        return factureJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    TableId tableId()
    {
        return factureJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAmount</Name>
				<Source><![CDATA[
    AmountCur transAmount()
    {
        return factureTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transAmountInclTax()
    {
        return this.transAmount() + factureTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transModuleType</Name>
				<Source><![CDATA[
    TaxModuletype   transModuleType()
    {
        TaxModuleType   taxModuletype;

        switch (custInvoiceJour.SalesType)
        {
            case SalesType::Journal:
                taxModuleType = TaxModuletype::FreeTxtInvoice;
                break;
            case SalesType::Sales:
                taxModuleType = TaxModuletype::Sales;
                break;
        }

        return taxModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    Qty transQty()
    {
        return factureTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    InventTransId transTransId()
    {
        return factureTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    UnitOfMeasureSymbol transUnitId()
    {
        return factureTrans.Unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation()
    {
        return custInvoiceJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesExportFactureCalcTax_RU construct(FactureJour_RU   _factureJour)
    {
        SalesExportFacturecalcTax_RU  calcTax = new SalesExportFactureCalcTax_RU();

        calcTax.parmFactureJour_RU(_factureJour);
        calcTax.parmTaxCalculationDate(_factureJour.ExportDate);
        calcTax.initExchRates();

        return calcTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>