<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalHistoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(queryStr(LedgerJournalHistory)),
    SRSReportParameterAttribute(classStr(LedgerJournalContract))
]
public class LedgerJournalHistoryDP extends SrsReportDataProviderPreProcessTempDB
{
    // <GEEU>
    #ISOCountryRegionCodes
    #EECountryRegionCodes

    boolean isEECountryActive;
    // </GEEU>
    LedgerJournalTmp ledgerJournalTmp;
    LedgerJournalTableTmp ledgerJournalTableTmp;
    LedgerJournalReportCaptionsTmp ledgerJournalReportCaptionsTmp;
    RecordInsertList recordInsertList;

    DiscAmount cashDiscAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerJournalTmp))
    ]
    public LedgerJournalTmp getLedgerJournalTmp()
    {
        select ledgerJournalTmp;
        return ledgerJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalTableTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalTableTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerJournalTableTmp)),
        Hookable(false)
    ]
    public LedgerJournalTableTmp getLedgerJournalTableTmp()
    {
        select ledgerJournalTableTmp;
        return ledgerJournalTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalReportCaptionsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalReportCaptionsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalReportCaptionsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerJournalReportCaptionsTmp)),
        Hookable(false)
    ]
    public LedgerJournalReportCaptionsTmp getLedgerJournalReportCaptionsTmp()
    {
        select ledgerJournalReportCaptionsTmp;
        return ledgerJournalReportCaptionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccrualTransactions</Name>
				<Source><![CDATA[
    private void insertAccrualTransactions()
    {
        LedgerJournalTmp ledgerJournalTmpJoin;
        LedgerJournalTransAccrualHistory ledgerJournalTransAccrualHistory;
        LedgerJournalTransAccrualTransHistory ledgerJournalTransAccrualTransHistory;

        NoYes accrualRecordMarked = NoYes::Yes;

        this.takeOwnershipOfTempTable(ledgerJournalTmpJoin);
        ledgerJournalTmpJoin.linkPhysicalTableInstance(ledgerJournalTmp);

        // Add accrualID for the journal lines
        update_recordSet ledgerJournalTmp
            setting AccrualId = ledgerJournalTransAccrualHistory.AccrualId
        join ledgerJournalTransAccrualHistory
            where ledgerJournalTransAccrualHistory.RefTableId == tableNum(LedgerJournalTrans)
                && ledgerJournalTransAccrualHistory.RefRecid == ledgerJournalTmp.LedgerJournalTransRecId
                && ledgerJournalTransAccrualHistory.AccountOffsetaccount == ledgerJournalTmp.AccountOffsetaccount;

        this.updateLedgerDimensionForAccrualTrans();

        // Insert accrual detail records
        insert_recordset ledgerJournalTmp
        (
            IsAccrualRecord,
            LedgerJournalType,
            JournalNum,
            JournalName,
            Name,
            ReportedAsReadyBy,
            RejectedBy,
            Posted,
            PostedDateTime,
            Log,
            ReportCaption,
            Company,
            AccountType,
            CurrencyCode,
            Voucher,
            Invoice,
            LastTransferred,
            FreqCode,
            FreqValue,
            Due,
            PaymId,
            Approved,
            Approver,
            PaymSpec,
            PaymMode,
            BankTransType,
            PaymReference,
            BankDepositNum,
            BankDepositVoucher,
            RemittanceAddressRecID,
            AccountOffsetaccount,
            // from accrual
            LedgerAccountLedgerDimension,
            Txt,
            TotalAmountSumDebit,
            TransDate
        )
        select
            accrualRecordMarked,
            LedgerJournalType,
            JournalNum,
            JournalName,
            Name,
            ReportedAsReadyBy,
            RejectedBy,
            Posted,
            PostedDateTime,
            Log,
            ReportCaption,
            Company,
            AccountType,
            CurrencyCode,
            Voucher,
            Invoice,
            LastTransferred,
            FreqCode,
            FreqValue,
            Due,
            PaymId,
            Approved,
            Approver,
            PaymSpec,
            PaymMode,
            BankTransType,
            PaymReference,
            BankDepositNum,
            BankDepositVoucher,
            RemittanceAddressRecID,
            AccountOffsetaccount
        from ledgerJournalTmpJoin
        join LedgerDimension,
            TransTxt,
            AmountCur,
            DocumentDate
        from ledgerJournalTransAccrualTransHistory
            where ledgerJournalTransAccrualTransHistory.RefTableid == tableNum(LedgerJournalTrans)
                && ledgerJournalTransAccrualTransHistory.RefRecid == ledgerJournalTmpJoin.LedgerJournalTransRecId
        exists join ledgerJournalTransAccrualHistory
            where ledgerJournalTransAccrualHistory.RefTableid == tableNum(LedgerJournalTrans)
                && ledgerJournalTransAccrualHistory.RefRecid == ledgerJournalTmpJoin.LedgerJournalTransRecId
                && LedgerJournalTransAccrualHistory.AccountOffsetaccount == ledgerJournalTmpJoin.AccountOffsetaccount;

        update_recordSet ledgerJournalTmp
            setting TotalAmountSumCredit = 0 - ledgerJournalTmp.TotalAmountSumDebit,
                TotalAmountSumDebit = 0
           where ledgerJournalTmp.TotalAmountSumDebit < 0
            && ledgerJournalTmp.IsAccrualRecord == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransOffset</Name>
				<Source><![CDATA[
    private LedgerJournalTransHistory ledgerJournalTransOffset(LedgerJournalTransHistory _ledgerJournalTransHistory)
    {
        AmountCur amountCurLocal;

        if (_ledgerJournalTransHistory.parmOffsetLedgerDimension())
        {
            if (_ledgerJournalTransHistory.ledgerJournalTableHistory().LedgerJournalInclTax)
            {
                if (!(_ledgerJournalTransHistory.AccountType != LedgerJournalACType::Ledger &&
                      _ledgerJournalTransHistory.AccountType != LedgerJournalACType::Project &&
                     (_ledgerJournalTransHistory.OffsetAccountType == LedgerJournalACType::Ledger ||
                      _ledgerJournalTransHistory.OffsetAccountType == LedgerJournalACType::Project)))
                {
                    _ledgerJournalTransHistory.TaxGroup = '';
                    _ledgerJournalTransHistory.TaxItemGroup = '';
                    _ledgerJournalTransHistory.TaxCode = '';
                }
            }
            else
            {
                if ((_ledgerJournalTransHistory.AccountType == LedgerJournalACType::Ledger       ||
                     _ledgerJournalTransHistory.AccountType == LedgerJournalACType::Project)     &&
                    (_ledgerJournalTransHistory.OffsetAccountType == LedgerJournalACType::Ledger ||
                     _ledgerJournalTransHistory.OffsetAccountType == LedgerJournalACType::Project))
                {
                    _ledgerJournalTransHistory.TaxGroup = '';
                    _ledgerJournalTransHistory.TaxItemGroup = '';
                    _ledgerJournalTransHistory.TaxCode = '';
                }
            }
            _ledgerJournalTransHistory.parmLedgerDimension(_ledgerJournalTransHistory.parmOffsetLedgerDimension());
            _ledgerJournalTransHistory.parmDefaultDimension(_ledgerJournalTransHistory.parmOffsetDefaultDimension());
            _ledgerJournalTransHistory.AccountType = _ledgerJournalTransHistory.OffsetAccountType;
            _ledgerJournalTransHistory.Company = _ledgerJournalTransHistory.OffsetCompany ? _ledgerJournalTransHistory.OffsetCompany : _ledgerJournalTransHistory.Company;
            _ledgerJournalTransHistory.Txt = _ledgerJournalTransHistory.OffsetTxt ? _ledgerJournalTransHistory.OffsetTxt : _ledgerJournalTransHistory.Txt;
            amountCurLocal = _ledgerJournalTransHistory.AmountCurDebit;
            _ledgerJournalTransHistory.AmountCurDebit = _ledgerJournalTransHistory.AmountCurCredit;
            _ledgerJournalTransHistory.AmountCurCredit = amountCurLocal;
            // <GEEU>
            if (isEECountryActive)
            {
                _ledgerJournalTransHistory.PostingProfile = _ledgerJournalTransHistory.OffsetPostingProfile_RU;
            }
            // </GEEU>
            _ledgerJournalTransHistory.parmOffsetLedgerDimension(0);
        }
        else
        {
            _ledgerJournalTransHistory.parmLedgerDimension(0);
            _ledgerJournalTransHistory.AmountCurDebit = 0;
            _ledgerJournalTransHistory.AmountCurCredit = 0;
        }

        return _ledgerJournalTransHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processReport()
    {
        boolean journalTableOnly = false;

        this.takeOwnershipOfTempTable(ledgerJournalTmp);
        this.takeOwnershipOfTempTable(ledgerJournalReportCaptionsTmp);

        LedgerJournalContract contract = this.parmDataContract() as LedgerJournalContract;
        NoYes showAccrualTrans = contract.parmShowAccrualTrans();
        Query query = this.parmQuery();

        // If no user-defined ranges have been provided, query only the LedgerJournalTableHistory
        // records because the LedgerJournalTransHistory records will be added later with a set-based operation
        if (!SysQuery::queryHasRangesOrFilters(query, true))
        {
            journalTableOnly = true;
            query.dataSourceTable(tableNum(LedgerJournalTransHistory)).enabled(false);
            query.clearOrderBy();
        }
                
        this.parmUserConnection().ttsbegin();

        this.populateLedgerJournalReportCaptionsTmp();

        using (SysInstrumentationActivityContext activityContext = this.logProcessReport(contract, query))
        {
            if (journalTableOnly)
            {
                this.processReportForJournalTableHistory(query);
            }
            else
            {
                this.processReportForJournalHistoryTableAndTrans(query);
            }

            this.updateLedgerDimensionFromPostingProfile();

            if (showAccrualTrans)
            {
                this.insertAccrualTransactions();
            }

            this.updateAccountNum();

            this.updateForLedgerAccounts();

            this.updateCustomerAccounts();
            this.updateVendorAccounts();
            this.updateBankAccounts();

            this.updateProjectAccounts();

            this.updateFixedAssetsAccounts();

            // <GEERU>
            isEECountryActive = this.isEECountryActive();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || isEECountryActive)
            {
                this.updateForLocalization();
            }
            // </GEERU>

            this.updateApprover();

            this.updateRemittanceAddress();
        }

        this.parmUserConnection().ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEECountryActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for country/region check.
    /// </summary>
    /// <returns>True if EE country/region functionality must be activated.</returns>
    protected boolean isEECountryActive()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportForJournalTableHistory</Name>
				<Source><![CDATA[
    private void processReportForJournalTableHistory(Query _query)
    {
        Map ledgerJournalTableInsertMap = new Map(Types::String, Types::Container);

        QueryBuildDataSource ledgerJournalTableHistoryDataSource = _query.dataSourceTable(tableNum(LedgerJournalTableHistory));

        if (!ledgerJournalTableHistoryDataSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _query.clearAllFields();

        this.mapLedgerJournalTableHistoryIntoLedgerJournalTableTmp(ledgerJournalTableHistoryDataSource, ledgerJournalTableInsertMap);

        Query::insert_recordset(ledgerJournalTableTmp, ledgerJournalTableInsertMap, _query);
                        
        this.updateReportCaptionsOnLedgerJournalTableTmp();

        this.insertInfoFromLedgerJournalTransHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportForJournalHistoryTableAndTrans</Name>
				<Source><![CDATA[
    private void processReportForJournalHistoryTableAndTrans(Query _query)
    {
        // Skip AOS Validation so that insert and subsequent updates don't revert to row-by-row.
        new SkipAOSValidationPermission().assert();

        Map ledgerJournalTmpInsertMap = new Map(Types::String, Types::Container);

        QueryBuildDataSource ledgerJournalTableHistoryDataSource = _query.dataSourceTable(tableNum(LedgerJournalTableHistory));
        QueryBuildDataSource ledgerJournalTransHistoryDataSource = _query.dataSourceTable(tableNum(LedgerJournalTransHistory));

        if (!ledgerJournalTableHistoryDataSource || !ledgerJournalTransHistoryDataSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _query.clearAllFields();

        this.mapLedgerJournalTableHistoryIntoLegerJournalTmp(ledgerJournalTableHistoryDataSource, ledgerJournalTmpInsertMap);
        this.mapLedgerJournalTransHistoryIntoLegerJournalTmp(ledgerJournalTransHistoryDataSource, ledgerJournalTmpInsertMap);

        Query::insert_recordset(ledgerJournalTmp, ledgerJournalTmpInsertMap, _query);
            
        // some fields can't be mapped due to pattern limitation. Update them in the next step.
        this.updateTheRestOfFields();

        this.insertOffsetTransactions();

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapLedgerJournalTableHistoryIntoLedgerJournalTableTmp</Name>
				<Source><![CDATA[
    private void mapLedgerJournalTableHistoryIntoLedgerJournalTableTmp(QueryBuildDataSource _ledgerJournalTableHistoryDataSource, Map _insertMap)
    {
        int ledgerJournalTableHistoryDataSourceUniqueId = _ledgerJournalTableHistoryDataSource.uniqueId();

        this.addLedgerJournalTableHistoryFields(_ledgerJournalTableHistoryDataSource);
 
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, JournalType),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, JournalType)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, JournalNum),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, JournalNum)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, JournalName),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, JournalName)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, Name),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Name)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, ReportedAsReadyBy),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, ReportedAsReadyBy)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, RejectedBy),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, RejectedBy)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, Posted),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Posted)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, PostedDateTime),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, PostedDateTime)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, Log),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Log)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTableTmp, Approver),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Approver)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapLedgerJournalTableHistoryIntoLegerJournalTmp</Name>
				<Source><![CDATA[
    private void mapLedgerJournalTableHistoryIntoLegerJournalTmp(QueryBuildDataSource _ledgerJournalTableHistoryDataSource, Map _insertMap)
    {
        int ledgerJournalTableHistoryDataSourceUniqueId = _ledgerJournalTableHistoryDataSource.uniqueId();

        this.addLedgerJournalTableHistoryFields(_ledgerJournalTableHistoryDataSource);
 
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, LedgerJournalType),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, JournalType)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, JournalNum),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, JournalNum)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, JournalName),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, JournalName)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Name),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Name)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, ReportedAsReadyBy),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, ReportedAsReadyBy)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, RejectedBy),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, RejectedBy)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Posted),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Posted)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, PostedDateTime),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, PostedDateTime)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Log),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Log)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Approver),
            [ledgerJournalTableHistoryDataSourceUniqueId, fieldStr(LedgerJournalTableHistory, Approver)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerJournalTableHistoryFields</Name>
				<Source><![CDATA[
    private void addLedgerJournalTableHistoryFields(QueryBuildDataSource _ledgerJournalTableHistoryDataSource)
    {
        QueryBuildFieldList ledgerJournalTableHistoryFields = _ledgerJournalTableHistoryDataSource.fields();

        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, JournalType));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, JournalNum));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, JournalName));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, Name));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, ReportedAsReadyBy));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, RejectedBy));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, Posted));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, PostedDateTime));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, Log));
        ledgerJournalTableHistoryFields.addField(fieldNum(LedgerJournalTableHistory, Approver));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapLedgerJournalTransHistoryIntoLegerJournalTmp</Name>
				<Source><![CDATA[
    private void mapLedgerJournalTransHistoryIntoLegerJournalTmp(QueryBuildDataSource _ledgerJournalTransHistoryDataSource, Map _insertMap)
    {
        int ledgerJournalTransHistoryDataSourceUniqueId = _ledgerJournalTransHistoryDataSource.uniqueId();

        this.addLedgerJournalTransHistoryFields(_ledgerJournalTransHistoryDataSource);

        _insertMap.insert(
            fieldStr(LedgerJournalTmp, LedgerDimension),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, LedgerDimension)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Company),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, Company)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, AccountType),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, AccountType)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, OffsetLedgerDimension),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, OffsetLedgerDimension)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, OffsetCompany),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, OffsetCompany)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, OffsetAccountType),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, OffsetAccountType)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, CurrencyCode),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, CurrencyCode)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Voucher),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, Voucher)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Invoice),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, Invoice)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, TransDate),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, TransDate)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, LastTransferred),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, LastTransferred)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, FreqCode),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, FreqCode)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, FreqValue),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, FreqValue)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Due),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, Due)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, DateCashDisc),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, DateCashDisc)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, PaymId),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, PaymId)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Approved),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, Approved)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, PaymSpec),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, PaymSpec)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, PaymMode),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, PaymMode)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, BankTransType),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, BankTransType)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, PaymReference),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, PaymReference)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, BankDepositNum),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, BankDepositNum)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, BankDepositVoucher),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, BankDepositVoucher)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, Txt),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, Txt)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, OffsetText),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, OffsetTxt)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, TotalAmountSumCredit),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, AmountCurCredit)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, TotalAmountSumDebit),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, AmountCurDebit)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, RemittanceAddressRecID),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, RemittanceAddress)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, LedgerJournalTransRecId),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, RecId)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, DefaultDimension),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, DefaultDimension)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, OffsetDefaultDimension),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, OffsetDefaultDimension)]);
        _insertMap.insert(
            fieldStr(LedgerJournalTmp, PostingProfile),
            [ledgerJournalTransHistoryDataSourceUniqueId, fieldStr(LedgerJournalTransHistory, PostingProfile)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerJournalTransHistoryFields</Name>
				<Source><![CDATA[
    private void addLedgerJournalTransHistoryFields(QueryBuildDataSource _ledgerJournalTransHistoryDataSource)
    {
        QueryBuildFieldList ledgerJournalTransHistoryFields = _ledgerJournalTransHistoryDataSource.fields();

        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, LedgerDimension));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, OffsetLedgerDimension));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, OffsetCompany));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, Company));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, AccountType));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, OffsetAccountType));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, CurrencyCode));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, Voucher));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, Invoice));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, TransDate));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, LastTransferred));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, FreqCode));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, FreqValue));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, Due));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, DateCashDisc));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, PaymId));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, Approved));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, PaymSpec));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, PaymMode));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, BankTransType));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, PaymReference));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, BankDepositNum));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, BankDepositVoucher));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, Txt));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, OffsetTxt));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, AmountCurCredit));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, AmountCurDebit));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, RemittanceAddress));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, RecId));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, DefaultDimension));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, OffsetDefaultDimension));
        ledgerJournalTransHistoryFields.addField(fieldNum(LedgerJournalTransHistory, PostingProfile));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTheRestOfFields</Name>
				<Source><![CDATA[
    private void updateTheRestOfFields()
    {
        update_recordset ledgerJournalTmp
            setting CashDiscAmount = cashDiscAmount,
                IsAccrualRecord = NoYes::No,
                AccountOffsetAccount = AccountOffsetAccount::Account,
                LedgerAccountLedgerDimension = ledgerJournalTmp.LedgerDimension,
                ReportCaption = ledgerJournalReportCaptionsTmp.ReportCaption
        join ledgerJournalReportCaptionsTmp
            where ledgerJournalReportCaptionsTmp.JournalType == ledgerJournalTableTmp.JournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOffsetTransactions</Name>
				<Source><![CDATA[
    protected void insertOffsetTransactions()
    {
        this.insertOffsetTransactionsNoOffsetText();
        this.insertOffsetTransactionsOffsetText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOffsetTransactionsNoOffsetText</Name>
				<Source><![CDATA[
    private void insertOffsetTransactionsNoOffsetText()
    {
        SysDaInsertObject insertLedgerJournalTmpObject = this.buildLedgerJournalTmpInsertObject();

        SysDaQueryObject ledgerJournalTmpSourceQuery = this.buildLedgerJournalTmpSourceQuery(fieldStr(LedgerJournalTmp, Txt));
        LedgerJournalTmp ledgerJournalTmpSource = ledgerJournalTmpSourceQuery.table();
        
        ledgerJournalTmpSourceQuery.WhereClause(this.OffsetLedgerDimensionIsNotZero(ledgerJournalTmpSource)
            .and(this.OffsetTextIsEmpty(ledgerJournalTmpSource)));

        this.executeInsertStatement(insertLedgerJournalTmpObject, ledgerJournalTmpSourceQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOffsetTransactionsOffsetText</Name>
				<Source><![CDATA[
    // When the OffsetTxt is provided on the Offset side of the journal line, it should be used instead the default Txt.
    private void insertOffsetTransactionsOffsetText()
    {
        SysDaInsertObject insertLedgerJournalTmpObject = this.buildLedgerJournalTmpInsertObject();

        SysDaQueryObject ledgerJournalTmpSourceQuery = this.buildLedgerJournalTmpSourceQuery(fieldStr(LedgerJournalTmp, OffsetText));
        LedgerJournalTmp ledgerJournalTmpSource = ledgerJournalTmpSourceQuery.table();
        
        ledgerJournalTmpSourceQuery.WhereClause(this.OffsetLedgerDimensionIsNotZero(ledgerJournalTmpSource)
            .and(this.OffsetTextIsNotEmpty(ledgerJournalTmpSource)));

        this.executeInsertStatement(insertLedgerJournalTmpObject, ledgerJournalTmpSourceQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLedgerJournalTmpInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildLedgerJournalTmpInsertObject()
    {
        LedgerJournalTmp ledgerJournalTmpDist;
        this.takeOwnershipOfTempTable(ledgerJournalTmpDist);
        ledgerJournalTmpDist.linkPhysicalTableInstance(ledgerJournalTmp);

        SysDaInsertObject insertLedgerJournalTmpObject = new SysDaInsertObject(ledgerJournalTmpDist);

        this.addFieldsInsertLedgerJournalTmp(insertLedgerJournalTmpObject);

        return insertLedgerJournalTmpObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsInsertLedgerJournalTmp</Name>
				<Source><![CDATA[
    private void addFieldsInsertLedgerJournalTmp(SysDaInsertObject _insertLedgerJournalTmpObject)
    {
        _insertLedgerJournalTmpObject.fields()
            .add(fieldStr(LedgerJournalTmp, LedgerJournalType))
            .add(fieldStr(LedgerJournalTmp, JournalNum))
            .add(fieldStr(LedgerJournalTmp, JournalName))
            .add(fieldStr(LedgerJournalTmp, Name))
            .add(fieldStr(LedgerJournalTmp, ReportedAsReadyBy))
            .add(fieldStr(LedgerJournalTmp, RejectedBy))
            .add(fieldStr(LedgerJournalTmp, Posted))
            .add(fieldStr(LedgerJournalTmp, PostedDateTime))
            .add(fieldStr(LedgerJournalTmp, Log))
            .add(fieldStr(LedgerJournalTmp, Approver))
            .add(fieldStr(LedgerJournalTmp, ReportCaption))
            .add(fieldStr(LedgerJournalTmp, LedgerDimension))
            .add(fieldStr(LedgerJournalTmp, LedgerAccountLedgerDimension))
            .add(fieldStr(LedgerJournalTmp, Company))
            .add(fieldStr(LedgerJournalTmp, AccountType))
            .add(fieldStr(LedgerJournalTmp, CurrencyCode))
            .add(fieldStr(LedgerJournalTmp, Voucher))
            .add(fieldStr(LedgerJournalTmp, Invoice))
            .add(fieldStr(LedgerJournalTmp, TransDate))
            .add(fieldStr(LedgerJournalTmp, LastTransferred))
            .add(fieldStr(LedgerJournalTmp, FreqCode))
            .add(fieldStr(LedgerJournalTmp, FreqValue))
            .add(fieldStr(LedgerJournalTmp, Due))
            .add(fieldStr(LedgerJournalTmp, CashDiscAmount))
            .add(fieldStr(LedgerJournalTmp, DateCashDisc))
            .add(fieldStr(LedgerJournalTmp, PaymId))
            .add(fieldStr(LedgerJournalTmp, Approved))
            .add(fieldStr(LedgerJournalTmp, PaymSpec))
            .add(fieldStr(LedgerJournalTmp, PaymMode))
            .add(fieldStr(LedgerJournalTmp, BankTransType))
            .add(fieldStr(LedgerJournalTmp, PaymReference))
            .add(fieldStr(LedgerJournalTmp, BankDepositNum))
            .add(fieldStr(LedgerJournalTmp, BankDepositVoucher))
            .add(fieldStr(LedgerJournalTmp, Txt))
            .add(fieldStr(LedgerJournalTmp, TotalAmountSumCredit))
            .add(fieldStr(LedgerJournalTmp, TotalAmountSumDebit))
            .add(fieldStr(LedgerJournalTmp, RemittanceAddressRecID))
            .add(fieldStr(LedgerJournalTmp, LedgerJournalTransRecId))
            .add(fieldStr(LedgerJournalTmp, IsAccrualRecord))
            .add(fieldStr(LedgerJournalTmp, AccountOffsetaccount))
            .add(fieldStr(LedgerJournalTmp, OffsetDefaultDimension))
            .add(fieldStr(LedgerJournalTmp, PostingProfile));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLedgerJournalTmpSourceQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildLedgerJournalTmpSourceQuery(str _fieldTxt)
    {
        LedgerJournalTmp ledgerJournalTmpSource;
        this.takeOwnershipOfTempTable(ledgerJournalTmpSource);
        ledgerJournalTmpSource.linkPhysicalTableInstance(ledgerJournalTmp);

        SysDaQueryObject ledgerJournalTmpSourceQuery = new SysDaQueryObject(ledgerJournalTmpSource);

        ledgerJournalTmpSourceQuery.projection()
            .Add(fieldStr(LedgerJournalTmp, LedgerJournalType))
            .Add(fieldStr(LedgerJournalTmp, JournalNum))
            .Add(fieldStr(LedgerJournalTmp, JournalName))
            .Add(fieldStr(LedgerJournalTmp, Name))
            .Add(fieldStr(LedgerJournalTmp, ReportedAsReadyBy))
            .Add(fieldStr(LedgerJournalTmp, RejectedBy))
            .Add(fieldStr(LedgerJournalTmp, Posted))
            .Add(fieldStr(LedgerJournalTmp, PostedDateTime))
            .Add(fieldStr(LedgerJournalTmp, Log))
            .Add(fieldStr(LedgerJournalTmp, Approver))
            .Add(fieldStr(LedgerJournalTmp, ReportCaption))
            .Add(fieldStr(LedgerJournalTmp, OffsetLedgerDimension))
            .Add(fieldStr(LedgerJournalTmp, OffsetLedgerDimension)) // default value for LedgerAccountLedgerDimension
            .Add(fieldStr(LedgerJournalTmp, OffsetCompany))
            .Add(fieldStr(LedgerJournalTmp, OffsetAccountType))
            .Add(fieldStr(LedgerJournalTmp, CurrencyCode))
            .Add(fieldStr(LedgerJournalTmp, Voucher))
            .Add(fieldStr(LedgerJournalTmp, Invoice))
            .Add(fieldStr(LedgerJournalTmp, TransDate))
            .Add(fieldStr(LedgerJournalTmp, LastTransferred))
            .Add(fieldStr(LedgerJournalTmp, FreqCode))
            .Add(fieldStr(LedgerJournalTmp, FreqValue))
            .Add(fieldStr(LedgerJournalTmp, Due))
            .AddValue(0) // CashDiscAmount is zero on the offset
            .Add(fieldStr(LedgerJournalTmp, DateCashDisc))
            .Add(fieldStr(LedgerJournalTmp, PaymId))
            .Add(fieldStr(LedgerJournalTmp, Approved))
            .Add(fieldStr(LedgerJournalTmp, PaymSpec))
            .Add(fieldStr(LedgerJournalTmp, PaymMode))
            .Add(fieldStr(LedgerJournalTmp, BankTransType))
            .Add(fieldStr(LedgerJournalTmp, PaymReference))
            .Add(fieldStr(LedgerJournalTmp, BankDepositNum))
            .Add(fieldStr(LedgerJournalTmp, BankDepositVoucher))
            .Add(_fieldTxt)
            .Add(fieldStr(LedgerJournalTmp, TotalAmountSumDebit))
            .Add(fieldStr(LedgerJournalTmp, TotalAmountSumCredit))
            .Add(fieldStr(LedgerJournalTmp, RemittanceAddressRecID))
            .Add(fieldStr(LedgerJournalTmp, LedgerJournalTransRecId))
            .Add(fieldStr(LedgerJournalTmp, IsAccrualRecord))
            .AddValue(AccountOffsetaccount::OffsetAccount)
            .Add(fieldStr(ledgerjournaltmp, OffsetDefaultDimension))
            .Add(fieldStr(ledgerjournaltmp, PostingProfile));

        return ledgerJournalTmpSourceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>OffsetLedgerDimensionIsNotZero</Name>
				<Source><![CDATA[
    private SysDaNotEqualsExpression OffsetLedgerDimensionIsNotZero(LedgerJournalTmp _ledgerJournalTmpSource)
    {
        return new SysDaNotEqualsExpression(
            new SysDaFieldExpression(_ledgerJournalTmpSource, fieldStr(LedgerJournalTmp, OffsetLedgerDimension)),
            new SysDaValueExpression(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>OffsetTextIsEmpty</Name>
				<Source><![CDATA[
    private SysDaEqualsExpression OffsetTextIsEmpty(LedgerJournalTmp _ledgerJournalTmpSource)
    {
        return new SysDaEqualsExpression(
                    new SysDaFieldExpression(_ledgerJournalTmpSource, fieldStr(LedgerJournalTmp, OffsetText)),
                    new SysDaValueExpression(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>OffsetTextIsNotEmpty</Name>
				<Source><![CDATA[
    private SysDaNotEqualsExpression OffsetTextIsNotEmpty(LedgerJournalTmp _ledgerJournalTmpSource)
    {
        return new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_ledgerJournalTmpSource, fieldStr(LedgerJournalTmp, OffsetText)),
                    new SysDaValueExpression(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInsertStatement</Name>
				<Source><![CDATA[
    private void executeInsertStatement(SysDaInsertObject _insertObject, SysDaQueryObject _query)
    {
        _insertObject.query(_query);

        SysDaInsertStatement insertStmt = new SysDaInsertStatement();
        insertStmt.executeQuery(_insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportCaptionsOnLedgerJournalTableTmp</Name>
				<Source><![CDATA[
    private void updateReportCaptionsOnLedgerJournalTableTmp()
    {
        LedgerJournalReportCaptionsTmp reportCaptions;
        this.takeOwnershipOfTempTable(reportCaptions);
        reportCaptions.linkPhysicalTableInstance(ledgerJournalReportCaptionsTmp);

        update_recordset ledgerJournalTableTmp
            setting ReportCaption = reportCaptions.ReportCaption
        join reportCaptions
            where reportCaptions.JournalType == ledgerJournalTableTmp.JournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerJournalReportCaptionsTmp</Name>
				<Source><![CDATA[
    private void populateLedgerJournalReportCaptionsTmp()
    {
        RecordInsertList insertList = new RecordInsertList(tableNum(LedgerJournalReportCaptionsTmp), true, true, true, true, true, ledgerJournalReportCaptionsTmp);

        this.insertReportCaption(insertList, LedgerJournalType::Daily, "@SYS25908");
        this.insertReportCaption(insertList, LedgerJournalType::Periodic, "@SYS24600");
        this.insertReportCaption(insertList, LedgerJournalType::PurchaseLedger, "@SYS870");
        this.insertReportCaption(insertList, LedgerJournalType::Approval, "@SYS3827");
        this.insertReportCaption(insertList, LedgerJournalType::Payment, "@SYS23060");
        this.insertReportCaption(insertList, LedgerJournalType::CustPayment, "@SYS23060");
        this.insertReportCaption(insertList, LedgerJournalType::VendInvoicePool, "@SYS57805");
        this.insertReportCaption(insertList, LedgerJournalType::VendInvoiceRegister, "@SYS29154");
        this.insertReportCaption(insertList, LedgerJournalType::Assets, "@SYS25908");
        this.insertReportCaption(insertList, LedgerJournalType::AssetBudgets, "@SYS67664");
        this.insertReportCaption(insertList, LedgerJournalType::ReportingCurrencyAdjustment, "@GeneralLedger:ReportingCurrencyAdjustmentJournal");

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReportCaption</Name>
				<Source><![CDATA[
    private void insertReportCaption(RecordInsertList _insertList, LedgerJournalType _journalType, Str1260 _caption )
    {
        ledgerJournalReportCaptionsTmp.clear();
        ledgerJournalReportCaptionsTmp.JournalType = _journalType;
        ledgerJournalReportCaptionsTmp.ReportCaption = _caption;
        _insertList.add(ledgerJournalReportCaptionsTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountNum</Name>
				<Source><![CDATA[
    private void updateAccountNum()
    {
        DimensionAttributeValueCombination dimAttrValueCombo;
        MainAccount mainAccount;
        MainAccountTranslation mainAccountTranslation;

        update_recordSet ledgerJournalTmp
            setting AccountNum = dimAttrValueCombo.DisplayValue,
                MainAccountName = mainAccount.Name
        join dimAttrValueCombo
            where dimAttrValueCombo.RecId == ledgerJournalTmp.LedgerAccountLedgerDimension
        join mainAccount
            where mainAccount.RecId == dimAttrValueCombo.MainAccount;

        LanguageId currentLanguage = DimensionCache::currentDimensionValueLanguageId();

        if (currentLanguage != '')
        {
            update_recordSet ledgerJournalTmp
                setting MainAccountName = mainAccountTranslation.Name
            join dimAttrValueCombo
                where dimAttrValueCombo.RecId == ledgerJournalTmp.LedgerAccountLedgerDimension
            join mainAccountTranslation
                where dimAttrValueCombo.MainAccount == mainAccountTranslation.MainAccount
                    && mainAccountTranslation.LanguageId == currentLanguage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForLedgerAccounts</Name>
				<Source><![CDATA[
    private void updateForLedgerAccounts()
    {
        update_recordSet ledgerJournalTmp
            setting AccountName = ledgerJournalTmp.MainAccountName
                where ledgerJournalTmp.AccountType == LedgerJournalACType::Ledger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerAccounts</Name>
				<Source><![CDATA[
    private void updateCustomerAccounts()
    {
        this.updateCustomerAccountCurrentCompany();
        this.updateCustomerAccountsInterCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerAccountCurrentCompany</Name>
				<Source><![CDATA[
    private void updateCustomerAccountCurrentCompany()
    {
        CustTable CustTable;
        DirPartyTable dirPartyTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        update_recordset ledgerJournalTmp
            setting AccountName = custTable.AccountNum,
                NonLedgerAccountName = dirPartyTable.Name
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Cust
        join dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join custTable
            where custTable.RecId == dimAttrLevelValueView.EntityInstance
        join dirPartyTable
            where dirPartyTable.RecId == custTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerAccountsInterCompany</Name>
				<Source><![CDATA[
    private void updateCustomerAccountsInterCompany()
    {
        CustTable CustTable;
        DirPartyTable dirPartyTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        while select forUpdate crossCompany AccountName, NonLedgerAccountName, Company, AccountNum, DefaultDimension, PostingProfile from ledgerJournalTmp
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Cust
                && ledgerJournalTmp.Company != curExt()
        join RecId from dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join AccountNum from custTable
            where custTable.RecId == dimAttrLevelValueView.EntityInstance
        join Name from dirPartyTable
            where dirPartyTable.RecId == custTable.Party
        {
            if (ledgerJournalTmp.Company)
            {
                changecompany(ledgerJournalTmp.Company)
                {
                    LedgerDimensionAccount customerLedgerDimension = CustTable::findByCompany(ledgerJournalTmp.Company, custTable.AccountNum).summaryLedgerDimension(ledgerJournalTmp.PostingProfile);
                    LedgerDimensionAccount ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(customerLedgerDimension, ledgerJournaltmp.DefaultDimension);
                    ledgerJournalTmp.AccountNum = DimensionAttributeValueCombination::find(ledgerDimensionAccount).DisplayValue;
                    ledgerJournalTmp.AccountName = custTable.AccountNum;
                    ledgerJournalTmp.MainAccountName = MainAccount::findByLedgerDimension(customerLedgerDimension).Name;
                    ledgerJournalTmp.NonLedgerAccountName = dirPartyTable.Name;
                    ledgerJournalTmp.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorAccounts</Name>
				<Source><![CDATA[
    private void updateVendorAccounts()
    {
        this.updateVendorAccountCurrentCompany();
        this.updateVendorAccountsInterCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorAccountCurrentCompany</Name>
				<Source><![CDATA[
    private void updateVendorAccountCurrentCompany()
    {
        VendTable vendTable;
        DirPartyTable dirPartyTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        update_recordset ledgerJournalTmp
            setting AccountName = vendTable.AccountNum,
                NonLedgerAccountName = dirPartyTable.Name
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Vend
        join dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join vendTable
            where vendTable.RecId == dimAttrLevelValueView.EntityInstance
        join dirPartyTable
            where dirPartyTable.RecId == vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorAccountsInterCompany</Name>
				<Source><![CDATA[
    private void updateVendorAccountsInterCompany()
    {
        VendTable vendTable;
        DirPartyTable dirPartyTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        while select forUpdate crossCompany AccountName, NonLedgerAccountName, Company, AccountNum, DefaultDimension, PostingProfile from ledgerJournalTmp
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Vend
                && ledgerJournalTmp.Company != curExt()
        join RecId from dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join AccountNum from vendTable
            where vendTable.RecId == dimAttrLevelValueView.EntityInstance
        join Name from dirPartyTable
            where dirPartyTable.RecId == vendTable.Party
        {
            if (ledgerJournalTmp.Company)
            {
                changecompany(ledgerJournalTmp.Company)
                {
                    LedgerDimensionAccount vendorLedgerDimension = VendTable::findByCompany(ledgerJournalTmp.Company, vendTable.AccountNum).summaryLedgerDimension(ledgerJournalTmp.PostingProfile);
                    LedgerDimensionAccount ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(vendorLedgerDimension, ledgerJournaltmp.DefaultDimension);
                    ledgerJournalTmp.AccountNum = DimensionAttributeValueCombination::find(ledgerDimensionAccount).DisplayValue;
                    ledgerJournalTmp.AccountName = vendTable.AccountNum;
                    ledgerJournalTmp.MainAccountName = MainAccount::findByLedgerDimension(vendorLedgerDimension).Name;
                    ledgerJournalTmp.NonLedgerAccountName = dirPartyTable.Name;
                    ledgerJournalTmp.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccounts</Name>
				<Source><![CDATA[
    private void updateBankAccounts()
    {
        this.updateBankAccountCurrentCompany();
        this.updateBankAccountsInterCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountCurrentCompany</Name>
				<Source><![CDATA[
    private void updateBankAccountCurrentCompany()
    {
        BankAccountTable bankAccountTable;
        DirPartyTable dirPartyTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        update_recordset ledgerJournalTmp
            setting AccountName = bankAccountTable.AccountID,
                NonLedgerAccountName = bankAccountTable.Name
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Bank
        join dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join bankAccountTable
            where bankAccountTable.RecId == dimAttrLevelValueView.EntityInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountsInterCompany</Name>
				<Source><![CDATA[
    private void updateBankAccountsInterCompany()
    {
        BankAccountTable bankAccountTable;
        DirPartyTable dirPartyTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;
        
        while select forUpdate crossCompany AccountName, NonLedgerAccountName, AccountNum, Company, DefaultDimension from ledgerJournalTmp
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Bank
            && ledgerJournalTmp.Company != curExt()
        join RecId from dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join Name, AccountId from bankAccountTable
            where bankAccountTable.RecId == dimAttrLevelValueView.EntityInstance
        {
            if (ledgerJournalTmp.Company)
            {
                changecompany(ledgerJournalTmp.Company)
                {
                    LedgerDimensionAccount bankLedgerDimension = BankAccountTable::findByCompany(ledgerJournalTmp.Company, bankAccountTable.AccountID).LedgerDimension;
                    LedgerDimensionAccount ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(bankLedgerDimension, ledgerJournaltmp.DefaultDimension);
                    ledgerJournalTmp.AccountNum = DimensionAttributeValueCombination::find(ledgerDimensionAccount).DisplayValue;
                    ledgerJournalTmp.AccountName = bankAccountTable.AccountID;
                    ledgerJournalTmp.MainAccountName = MainAccount::findByLedgerDimension(bankLedgerDimension).Name;
                    ledgerJournalTmp.NonLedgerAccountName = bankAccountTable.Name;
                    ledgerJournalTmp.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectAccounts</Name>
				<Source><![CDATA[
    private void updateProjectAccounts()
    {
        ProjTable projTable;
        DimensionAttributeValueCombination dimAttrValueCombo;

        update_recordSet ledgerJournalTmp
            setting AccountName = dimAttrValueCombo.DisplayValue,
                NonLedgerAccountName = projTable.Name
            where ledgerJournalTmp.AccountType == LedgerJournalACType::Project
        join dimAttrValueCombo
            where dimAttrValueCombo.RecId == ledgerJournalTmp.LedgerDimension
        join projTable
            where projTable.ProjId == dimAttrValueCombo.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFixedAssetsAccounts</Name>
				<Source><![CDATA[
    private void updateFixedAssetsAccounts()
    {
        AssetTable assetTable;
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        update_recordset ledgerJournalTmp
            setting AccountName = assetTable.AssetId,
                NonLedgerAccountName = assetTable.Name
            where ledgerJournalTmp.AccountType == LedgerJournalACType::FixedAssets
        join dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
        join assetTable
            where assetTable.RecId == dimAttrLevelValueView.EntityInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForLocalization</Name>
				<Source><![CDATA[
    private void updateForLocalization()
    {
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        RAssetTable rAssetTable;
        while select forUpdate crossCompany AccountName, NonLedgerAccountName from ledgerJournalTmp
                where ledgerJournalTmp.AccountType == LedgerJournalACType::FixedAssets_RU
            join RecId from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
            join Name, AccountNum from rAssetTable
                where rAssetTable.RecId == dimAttrLevelValueView.EntityInstance
        {
            ledgerJournalTmp.AccountName = rAssetTable.AccountNum;
            ledgerJournalTmp.NonLedgerAccountName = rAssetTable.Name;
            ledgerJournalTmp.update();
        }

        //RU employee accounts
        DirPartyTable dirPartyTable;
        HcmWorker hcmWorker;
        EmployeeTable_RU employeeTable_RU;
        HcmEmployment hcmEmployment;
        while select forUpdate crossCompany AccountName, NonLedgerAccountName from ledgerJournalTmp
                where ledgerJournalTmp.AccountType == LedgerJournalACType::Employee_RU
            join RecId from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
            join RecId, EmployeeId from employeeTable_RU
                where employeeTable_RU.RecId == dimAttrLevelValueView.EntityInstance
            join RecId from hcmEmployment
                where employeeTable_RU.HcmEmployment == hcmEmployment.RecId
            join RecId from hcmWorker
                where hcmEmployment.Worker == hcmWorker.RecId
            join Name from dirPartyTable
                where hcmWorker.Person == dirPartyTable.RecId
        {
            ledgerJournalTmp.AccountName = employeeTable_RU.EmployeeId;
            ledgerJournalTmp.NonLedgerAccountName = dirPartyTable.Name;
            ledgerJournalTmp.update();
        }

        //RU deferral accounts
        RDeferralsTable rDeferralsTable;
        while select forUpdate crossCompany AccountName, NonLedgerAccountName from ledgerJournalTmp
                where ledgerJournalTmp.AccountType == LedgerJournalACType::RDeferrals
            join RecId from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTmp.LedgerDimension
            join Name, DeferralsId from rDeferralsTable
                where rDeferralsTable.RecId == dimAttrLevelValueView.EntityInstance
        {
            ledgerJournalTmp.AccountName = rDeferralsTable.DeferralsId;
            ledgerJournalTmp.NonLedgerAccountName = rDeferralsTable.Name;
            ledgerJournalTmp.update();
        }

        //RU cash accounts
        RCashTable rCashTable;
        while select forUpdate crossCompany AccountName, NonLedgerAccountName from ledgerJournalTmp
                where ledgerJournalTmp.AccountType == LedgerJournalACType::RCash
            join RecId from dimAttrLevelValueView
                where dimAttrLevelValueView.RecId == ledgerJournalTmp.LedgerDimension
            join Name, AccountNum from rCashTable
                where rCashTable.RecId == dimAttrLevelValueView.EntityInstance
        {
            ledgerJournalTmp.AccountName = rCashTable.AccountNum;
            ledgerJournalTmp.NonLedgerAccountName = rCashTable.Name;
            ledgerJournalTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateApprover</Name>
				<Source><![CDATA[
    private void updateApprover()
    {
        HcmWorker hcmWorker;

        update_recordSet ledgerJournalTmp
            setting LedgerJournalTransApprovedBy = hcmWorker.PersonnelNumber
        join hcmWorker
            where ledgerJournalTmp.Approver == hcmWorker.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRemittanceAddress</Name>
				<Source><![CDATA[
    private void updateRemittanceAddress()
    {
        LogisticsPostalAddress logisticsAddress;

        update_recordSet ledgerJournalTmp
            setting RemittanceAddress = logisticsAddress.Address
        join logisticsAddress
            where ledgerJournalTmp.RemittanceAddressRecID == logisticsAddress.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a report title based on the <c>LedgerJournalType</c> enumeration value.
    /// </summary>
    /// <param name="_ledgerJournalType">
    /// A <c>LedgerJournalType</c> enumeration value.
    /// </param>
    /// <returns>
    /// The report title.
    /// </returns>
    private Caption setReportName(LedgerJournalType _ledgerJournalType)
    {
        Caption reportCaption;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::Daily :
                reportCaption = "@SYS25908";
                break;
            case LedgerJournalType::Periodic :
                reportCaption ="@SYS24600";
                break;
            case LedgerJournalType::PurchaseLedger :
                reportCaption = "@SYS870";
                break;
            case LedgerJournalType::Approval :
                reportCaption = "@SYS3827";
                break;
            case LedgerJournalType::Payment :
                reportCaption = "@SYS23060";
                break;
            case LedgerJournalType::CustPayment :
                reportCaption = "@SYS23060";
                break;
            case LedgerJournalType::VendInvoicePool :
                reportCaption = "@SYS57805";
                break;
            case LedgerJournalType::VendInvoiceRegister :
                reportCaption = "@SYS29154";
                break;
            case LedgerJournalType::Assets :
                reportCaption = "@SYS25908";
                break;
            case LedgerJournalType::AssetBudgets :
                reportCaption = "@SYS67664";
                break;
            case LedgerJournalType::ReportingCurrencyAdjustment :
                reportCaption = "@GeneralLedger:ReportingCurrencyAdjustmentJournal";
                break;
            default :
                reportCaption = "@SYS6790";
                break;
        }

        return reportCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimensionForAccrualTrans</Name>
				<Source><![CDATA[
    private void updateLedgerDimensionForAccrualTrans()
    {
        LedgerJournalTransHistory   ledgerJournalTransHistory;
        LedgerJournalTransAccrualHistory   ledgerJournalTransAccrualHistory;

        while select forUpdate LedgerAccountLedgerDimension from ledgerJournalTmp
        join RecId from ledgerJournalTransHistory
            where ledgerJournalTransHistory.RecId == ledgerJournalTmp.LedgerJournalTransRecId
        join RefTableid, RefRecid, AccountOffsetaccount, AmountCur, AccrualId from ledgerJournalTransAccrualHistory
            where ledgerJournalTransAccrualHistory.RefTableid == tablenum(LedgerJournalTrans)
                && ledgerJournalTransAccrualHistory.RefRecid == ledgerJournalTransHistory.RecId
                && ledgerJournalTransAccrualHistory.AccountOffsetaccount == ledgerJournalTmp.AccountOffsetaccount
                && ledgerJournalTmp.AccountOffsetaccount == AccountOffsetaccount::Account
        {
            if (ledgerJournalTmp != null)
            {
                ledgerJournalTmp.LedgerAccountLedgerDimension = LedgerAccrualTrans::constructFromHistory(ledgerJournalTransAccrualHistory).getOffsetLedgerDimension(ledgerJournalTransAccrualHistory.AmountCur);

                if (ledgerJournalTmp.LedgerAccountLedgerDimension)
                {
                    ledgerJournalTmp.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInfoFromLedgerJournalTransHistory</Name>
				<Source><![CDATA[
    private void insertInfoFromLedgerJournalTransHistory()
    {
        this.insertTransactionsFromLedgerJournalTransHistory();
        this.insertOffsetTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransactionsFromLedgerJournalTransHistory</Name>
				<Source><![CDATA[
    protected void insertTransactionsFromLedgerJournalTransHistory()
    {
        LedgerJournalTransHistory      ledgerJournalTransHistory;
        NoYes isAccrualRecord = NoYes::No;
        AccountOffsetaccount acctOffsetAccount = AccountOffsetaccount::Account;

        insert_recordset ledgerJournalTmp
        (
            LedgerJournalType,
            JournalNum,
            JournalName,
            Name,
            ReportedAsReadyBy,
            RejectedBy,
            Posted,
            PostedDateTime,
            Log,
            Approver,
            ReportCaption,
            LedgerDimension,
            LedgerAccountLedgerDimension,
            Company,
            AccountType,
            CurrencyCode,
            Voucher,
            Invoice,
            TransDate,
            LastTransferred,
            FreqCode,
            FreqValue,
            Due,
            CashDiscAmount,
            DateCashDisc,
            PaymId,
            Approved,
            PaymSpec,
            PaymMode,
            BankTransType,
            PaymReference,
            BankDepositNum,
            BankDepositVoucher,
            Txt,
            OffsetText,
            TotalAmountSumCredit,
            TotalAmountSumDebit,
            RemittanceAddressRecID,
            LedgerJournalTransRecId,
            IsAccrualRecord,
            AccountOffsetaccount,
            OffsetLedgerDimension,
            OffsetAccountType,
            DefaultDimension,
            OffsetDefaultDimension,
            PostingProfile,
            OffsetCompany
        )
        select
            JournalType,
            JournalNum,
            JournalName,
            Name,
            ReportedAsReadyBy,
            RejectedBy,
            Posted,
            PostedDateTime,
            Log,
            Approver,
            ReportCaption
        from ledgerJournalTableTmp
        join
            LedgerDimension,
            LedgerDimension, // default value for LedgerAccountLedgerDimension
            Company,
            AccountType,
            CurrencyCode,
            Voucher,
            Invoice,
            TransDate,
            LastTransferred,
            FreqCode,
            FreqValue,
            Due,
            CashDiscAmount,
            DateCashDisc,
            PaymId,
            Approved,
            PaymSpec,
            PaymMode,
            BankTransType,
            PaymReference,
            BankDepositNum,
            BankDepositVoucher,
            Txt,
            OffsetTxt,
            AmountCurCredit,
            AmountCurDebit,
            RemittanceAddress,
            RecId,
            isAccrualRecord,
            acctOffsetAccount,
            OffsetLedgerDimension,
            OffsetAccountType,
            DefaultDimension,
            OffsetDefaultDimension,
            PostingProfile,
            OffsetCompany
        from ledgerJournalTransHistory
            where ledgerJournalTransHistory.JournalNum == ledgerJournalTableTmp.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimensionFromPostingProfile</Name>
				<Source><![CDATA[
    // Update LedgerDimension for account type, but when account type is Ledger, calculation is not needed.
    private void updateLedgerDimensionFromPostingProfile()
    {
        LedgerJournalTableHistory ledgerJournalTableHistory;
        LedgerJournalTransHistory ledgerJournalTransHistory;

        while select forUpdate
            LedgerAccountLedgerDimension, AccountOffsetaccount from ledgerJournalTmp
        join * from ledgerJournalTransHistory
            where ledgerJournalTransHistory.RecId == ledgerJournalTmp.LedgerJournalTransRecId
                && ledgerJournalTmp.AccountType != LedgerJournalACType::Ledger
        join * from ledgerJournalTableHistory
            where ledgerJournalTransHistory.JournalNum == ledgerJournalTableHistory.JournalNum
        {
            boolean isInterCompany = ledgerJournalTransHistory.isCompanyIntercompany();

            if (ledgerJournalTmp.AccountOffsetaccount == AccountOffsetaccount::OffsetAccount)
            {
                ledgerJournalTransHistory.LedgerDimension = ledgerJournalTransHistory.OffsetLedgerDimension;
                ledgerJournalTransHistory.AccountType = ledgerJournalTransHistory.OffsetAccountType;
                ledgerJournalTransHistory.Company = ledgerJournalTransHistory.OffsetCompany;

                isInterCompany = ledgerJournalTransHistory.isCompanyIntercompany();

                Amount tempAmount = ledgerJournalTransHistory.AmountCurDebit;
                ledgerJournalTransHistory.AmountCurDebit = ledgerJournalTransHistory.AmountCurCredit;
                ledgerJournalTransHistory.AmountCurCredit = tempAmount;

                ledgerJournalTransHistory.DefaultDimension = isInterCompany ? ledgerJournalTransHistory.DefaultDimension : ledgerJournalTransHistory.OffsetDefaultDimension;
            }

            if (isInterCompany && ledgerJournalTmp.AccountOffsetaccount == AccountOffsetaccount::Account)
            {
                ledgerJournalTransHistory.DefaultDimension = (isInterCompany && ledgerJournalTransHistory.Company == curext()) ?
                    ledgerJournalTransHistory.DefaultDimension : ledgerJournalTransHistory.OffsetDefaultDimension;
            }

            boolean isOffset = ledgerJournalTmp.AccountOffsetaccount == AccountOffsetaccount::OffsetAccount;
            ledgerJournalTmp.LedgerAccountLedgerDimension = ledgerJournalTransHistory.getLedgerDimensionForJournalAccount(ledgerJournalTableHistory, isOffset);

            ledgerJournalTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logProcessReport(LedgerJournalContract _reportContract, Query _query)
    {
        const str InstrumentationNamespace = 'LedgerJournalHistory';

        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);

        SysInstrumentationActivity activityContext = this.getActivityContextForReport(
            InstrumentationNamespace,
            _reportContract,
            _query);

        return instrumentationLogger.activityContextWithCustomProperties(activityContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivity getActivityContextForReport(
        str _instrumentationNamespace,
        LedgerJournalContract _reportContract,
        Query _query)
    {
        const str MetricName = methodStr(LedgerJournalHistoryDP, processReport);

        SysInstrumentationActivity activityContext = SysInstrumentationActivity::construct(
            MetricName,
            _instrumentationNamespace);

        int rowCount = QueryRun::getQueryRowCount(_query, maxInt());
        activityContext.addCustomProperty('RowCountForReport', int2Str(rowCount));

        if (_reportContract.parmShowAccrualTrans())
        {
            activityContext.addCustomProperty('ShowAccrualTrans', 'true');
        }

        if (_reportContract.parmJournalContext() == false)
        {
            activityContext.addCustomProperty('JournalContext', 'false');
        }

        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>