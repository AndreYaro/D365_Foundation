<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSupplyRiskKPICard</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class VendSupplyRiskKPICard
{
    private VendSupplyRiskKPICache cache;
    private VendSupplyRiskKPIType kpiType;
    private FormWindowControl imageControl;
    private FormStringControl captionControl;
    private FormStringControl percentageControl;
    private FormStringControl goalControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static VendSupplyRiskKPICard construct()
    {
        return new VendSupplyRiskKPICard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    internal void initialize()
    {
        real goalValue = this.goal();
        real percentageValue = percent(cache.KPICount, cache.KPITotal);
        real rateValue = percentageValue - goalValue;

        this.updateControl(goalValue, percentageValue, rateValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControl</Name>
				<Source><![CDATA[
    private void updateControl(
        real _goalValue,
        real _percentageValue,
        real _rateValue)
    {
        DictEnum dictEnum = new DictEnum(enumNum(VendSupplyRiskKPIType));

        captionControl.text(dictEnum.value2Label(kpiType));
        
        percentageControl.text(strFmt('%1 %', num2Str(_percentageValue, 3, 2, -1, -1)));
        goalControl.text(strFmt('%1: %2% (%3%)', "@SCM:VendSupplyRiskKPIGoal", num2Str(_goalValue, 3, 0, -1, -1), num2Str(_rateValue, 3, 2, -1, -1)));
       
        imageControl.imageLocation(SysImageLocation::AOTResource);
        imageControl.height(24);
        imageControl.width(24);

        if (_rateValue >= 0)
        {
            imageControl.normalImage(resourceStr(VendSupplyRiskKPIGoalGreen));
        }
        else
        {
            imageControl.normalImage(resourceStr(VendSupplyRiskKPIGoalRed));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goal</Name>
				<Source><![CDATA[
    private real goal()
    {
        switch (kpiType)
        {
            case VendSupplyRiskKPIType::InFullDelivery:
                return VendSupplyRiskParameters::find().InFullDeliveryRate;

            case VendSupplyRiskKPIType::OnTimeDelivery:
                return VendSupplyRiskParameters::find().OnTimeDeliveryRate;

            case VendSupplyRiskKPIType::OnTimeInFullDelivery:
                return VendSupplyRiskParameters::find().OnTimeInFullDeliveryRate;

            case VendSupplyRiskKPIType::RequestedDeliveryDateAcceptance:
                return VendSupplyRiskParameters::find().RequestedDeliveryDateAcceptanceRate;

            default :
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKPI</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static VendSupplyRiskKPICard newKPI(
        VendSupplyRiskKPICache _cache,
        VendSupplyRiskKPIType _kpiType,
        FormWindowControl _imageControl,
        FormStringControl _captionControl,
        FormStringControl _percentageControl,
        FormStringControl _goalControl)
    {
        VendSupplyRiskKPICard kpiCard = VendSupplyRiskKPICard::construct();

        kpiCard.cache = _cache;
        kpiCard.kpiType = _kpiType;
        kpiCard.imageControl = _imageControl;
        kpiCard.captionControl = _captionControl;
        kpiCard.percentageControl = _percentageControl;
        kpiCard.goalControl = _goalControl;

        return kpiCard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>