<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxOverUnderPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxOverUnderPayment</c> class is used in the <c>CustVendSettle</c> class for calculating the
/// tax of an overpayment or an underpayment during the settlement of customer or vendor transactions.
/// </summary>
/// <remarks>
/// This class extends the main tax engine. It derives from the <see cref="T:TaxReverse" />.
/// </remarks>
class TaxOverUnderPayment extends TaxReverse
{
    RecordSortedList    settleOverUnderReverseTax;
    AmountMST           overUnderAmountMST;
    LedgerDimensionDefaultAccount  operationLedgerDimension;           //Uptake of ledgerDimension
    LedgerDimensionDefaultAccount  differingCashDiscountLedgerDimension;   //Uptake of ledgerDimension
    boolean             isTaxWorkTransAdded;
    RefTableId          reverseTaxTableId;
    RefRecId            reverseTaxRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustOperationLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount adjustOperationLedgerDimension(LedgerDimensionAccount _operationLedgerDimension, TaxTrans _taxTrans)
    {
        return this.operationLedgerDimension(_taxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    public TaxAmount calcAndInsertTaxes(
        Voucher      _settlevoucher,
        TransDate    _transactionDate,
        Percent      _percent,
        RecId        _invoiceRecId = 0,
        TransDate    _voucherDate = dateNull())
    {
        TaxTrans        taxTrans;
        TaxTrans_RU     taxTrans_RU;
        TaxAmount       taxAmount;
        CurrencyCode    companyCurrencyCode;
        //<GMX>
        TaxLedgerAccountGroup taxLedgerAccountGroup_MX;
        //</GMX>

        CurrencyCode    reportingCurrency = Ledger::reportingCurrency(this.companyInfo().RecId);

        if (_voucherDate != dateNull())
        {
            taxDate = _voucherDate;
        }

        ttsbegin;

        companyCurrencyCode = Ledger::accountingCurrency(this.companyInfo().RecId);
        isTaxWorkTransAdded = false;

        while select * from taxTrans
            where taxTrans.Voucher    == _settlevoucher   &&
                    taxTrans.TransDate  == _transactionDate &&
                    taxTrans.ExemptTax  == NoYes::No        &&
                    taxTrans.TaxOrigin  == TaxOrigin::Tax
            outer join OffsetLedgerDimension_RU, RecId, TaxTrans from taxTrans_RU
                where taxTrans_RU.TaxTrans == taxTrans.RecId
        {
            triangulation = taxTrans.euroTriangulation;

            if (TaxTable::find(taxTrans.TaxCode).TaxBase != TaxBaseType::AmountByUnit)
            {
                taxWorkTrans.clear();

                taxWorkTrans.HeadingRecId           = headingRecId;
                taxWorkTrans.SourceTableId          = this.sourceTableId();
                taxWorkTrans.SourceRecId            = this.sourceRecId();
                taxWorkTrans.InvoiceRecId           = _invoiceRecId;
                taxWorkTrans.TaxCode                = taxTrans.TaxCode;
                taxWorkTrans.TaxGroup               = taxTrans.TaxGroup;
                taxWorkTrans.TaxItemGroup           = taxTrans.TaxItemGroup;
                taxWorkTrans.Source                 = taxTrans.Source;
                taxWorkTrans.Voucher                = voucher;
                taxWorkTrans.TransDate              = taxDate;
                taxWorkTrans.CalculationDate        = taxDate;
                taxWorkTrans.TaxDirection           = taxTrans.TaxDirection;
                taxWorkTrans.CurrencyCode           = taxTrans.CurrencyCode;
                taxWorkTrans.SourceCurrencyCode     = sourceCurrencyCode;
                taxWorkTrans.TaxAutogenerated       = taxTrans.TaxAutogenerated;
                taxWorkTrans.euroTriangulation      = taxTrans.euroTriangulation;
                taxWorkTrans.TaxAmount              = CurrencyExchangeHelper::amount(taxTrans.TaxAmount * _percent / 100);
                taxWorkTrans.TaxBaseAmount          = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount * _percent / 100);
                taxWorkTrans.TaxInCostPrice         = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPrice * _percent / 100);
                taxWorkTrans.TaxInCostPriceMST      = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceMST * _percent / 100);
                taxWorkTrans.TaxInCostPriceCur      = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceCur * _percent / 100);
                taxWorkTrans.TaxInCostPriceRep      = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceRep * _percent / 100);
                taxWorkTrans.UnrealizedTax          = taxTrans.UnrealizedTax;

                // <GEERU>
                taxWorkTrans.OffsetLedgerDimension_RU = taxTrans_RU.OffsetLedgerDimension_RU;
                // </GEERU>

                if (taxTrans.CurrencyCode && taxTrans.CurrencyCode != companyCurrencyCode)
                {
                    taxWorkTrans.TaxBaseAmountCur   = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountCur * _percent / 100, taxTrans.CurrencyCode);
                    taxWorkTrans.TaxAmountCur       = CurrencyExchangeHelper::amount(taxTrans.TaxAmountCur * _percent / 100, taxTrans.CurrencyCode);

                    taxWorkTrans.TaxBaseAmountRep   = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountRep * _percent / 100, reportingCurrency);
                    taxWorkTrans.TaxAmountRep       = CurrencyExchangeHelper::amount(taxTrans.TaxAmountRep * _percent / 100, reportingCurrency);
                }
                else
                {
                    taxWorkTrans.TaxBaseAmountCur   = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountCur * _percent / 100);
                    taxWorkTrans.TaxAmountCur       = CurrencyExchangeHelper::amount(taxTrans.TaxAmountCur * _percent / 100);
                    taxWorkTrans.TaxBaseAmountRep   = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountRep * _percent / 100);
                    taxWorkTrans.TaxAmountRep       = CurrencyExchangeHelper::amount(taxTrans.TaxAmountRep * _percent / 100);
                }

                if (taxTrans.SourceCurrencyCode == sourceCurrencyCode)
                {
                    taxWorkTrans.SourceTaxAmountCur         = CurrencyExchangeHelper::amount(taxTrans.SourceTaxAmountCur * _percent / 100, taxTrans.SourceCurrencyCode);
                    taxWorkTrans.SourceTaxAmountCurReal     = taxTrans.SourceTaxAmountCur * _percent / 100;
                    taxWorkTrans.SourceBaseAmountCur        = CurrencyExchangeHelper::amount(taxTrans.SourceBaseAmountCur * _percent / 100, taxTrans.CurrencyCode);
                    taxWorkTrans.SourceRegulateAmountCur    = CurrencyExchangeHelper::amount(taxTrans.SourceRegulateAmountCur * _percent / 100, taxTrans.SourceCurrencyCode);
                }
                else
                {
                    taxWorkTrans.SourceTaxAmountCur         = taxWorkTrans.TaxAmount;
                    taxWorkTrans.SourceTaxAmountCurReal     = taxWorkTrans.TaxAmount;
                    taxWorkTrans.SourceBaseAmountCur        = taxWorkTrans.TaxBaseAmount;
                    taxWorkTrans.SourceRegulateAmountCur    = CurrencyExchangeHelper::mstAmount(taxTrans.SourceRegulateAmountCur * _percent / 100, taxTrans.SourceCurrencyCode, taxTrans.TransDate, Currency::noYes2UnknownNoYes(taxTrans.euroTriangulation));

                    // Since SourceTaxAmountCur now holds the MST amount we need to update the TaxInCostPrice to also hold the mst amount.
                    taxWorkTrans.TaxInCostPrice             = taxWorkTrans.TaxInCostPriceMST;
                }

                this.initTaxWorkTransLedgerDimensions(taxTrans);
                //<GMX>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    taxLedgerAccountGroup_MX = TaxLedgerAccountGroup::find(TaxTable::find(taxTrans.TaxCode).TaxAccountGroup);

                    if (taxWorkTrans.Source == TaxModuleType::PurchInvoice)
                    {
                        taxWorkTrans.LedgerDimension            = taxLedgerAccountGroup_MX.TaxIncomingLedgerDimension;
                    }
                    else if (taxWorkTrans.Source == TaxModuleType::SalesInvoice || taxWorkTrans.Source == TaxModuleType::FreeTxtInvoice)
                    {
                        taxWorkTrans.LedgerDimension            = taxLedgerAccountGroup_MX.TaxOutgoingLedgerDimension;
                    }
                }
                //</GMX>

                taxWorkTrans.OperationLedgerDimension       = this.adjustOperationLedgerDimension(taxWorkTrans.OperationLedgerDimension, taxTrans);
                taxWorkTrans.SourceDocumentLine             = taxTrans.SourceDocumentLine;
                taxWorkTrans.HeadingTableId                 = taxTrans.HeadingTableId;
                taxWorkTrans.TaxReports                     = NoYes::Yes;
                taxWorkTrans.ExemptTax                      = NoYes::No;
                taxWorkTrans.TaxOrigin                      = TaxOrigin::Tax;
                taxWorkTrans.IsOverUnderPayment             = NoYes::Yes;
                taxWorkTrans.Txt                            = '';

                taxWorkTrans.OriginalTaxTrans = taxTrans.RecId;
                taxWorkTrans.insert();
                isTaxWorkTransAdded = true;

                if (taxTrans.TaxDirection != TaxDirection::UseTax)
                {
                    if (taxTrans.TaxAutogenerated)
                    {
                        taxAmount += taxWorkTrans.SourceTaxAmountCur;
                    }
                    else
                    {
                        taxAmount += taxWorkTrans.SourceRegulateAmountCur;
                    }
                }
            }
        }

        if (TaxOverUnderPaymentDiffMinusFromTaxAmountFlight::instance().isEnabled())
        {
            taxAmount -= this.roundTaxOnTaxGroup();
        }
        else
        {
            taxAmount += this.roundTaxOnTaxGroup();
        }

        ttscommit;

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    public AmountMST calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        TmpSettleOverUnderReverseTax    tmpSettleOverUnderReverseTax;
        boolean                         run;
        AmountMST                       totalAmountMST;
        AmountMST                       remainAmountMST;
        AmountMST                       overPayPartAmountMST;
        AmountMST                       taxAmountMST;
        Counter                         counter;

        if (!this.taxParameters().TaxOnOverpayment)
        {
            return 0;
        }

        run = settleOverUnderReverseTax.first(tmpSettleOverUnderReverseTax);
        while (run)
        {
            totalAmountMST += tmpSettleOverUnderReverseTax.AmountMST;
            run = settleOverUnderReverseTax.next(tmpSettleOverUnderReverseTax);
            counter++;
        }

        if (!totalAmountMST)
            return 0;

        settleOverUnderReverseTax.first(tmpSettleOverUnderReverseTax);
        for (remainAmountMST = overUnderAmountMST ; counter ; remainAmountMST -= overPayPartAmountMST)
        {
            counter--;
            if (counter)
                tmpSettleOverUnderReverseTax.OverPayPartAmountMST = CurrencyExchangeHelper::amount(tmpSettleOverUnderReverseTax.AmountMST / totalAmountMST * overUnderAmountMST);
            else
                tmpSettleOverUnderReverseTax.OverPayPartAmountMST = remainAmountMST;

            overPayPartAmountMST = tmpSettleOverUnderReverseTax.OverPayPartAmountMST;

            if (tmpSettleOverUnderReverseTax.AmountMST)
                tmpSettleOverUnderReverseTax.Percent = (tmpSettleOverUnderReverseTax.OverPayPartAmountMST / tmpSettleOverUnderReverseTax.AmountMST) * 100;

            settleOverUnderReverseTax.ins(tmpSettleOverUnderReverseTax, true);
            settleOverUnderReverseTax.next(tmpSettleOverUnderReverseTax);
        }

        run = settleOverUnderReverseTax.first(tmpSettleOverUnderReverseTax);
        while (run)
        {
            taxAmountMST += this.calcAndInsertTaxes(tmpSettleOverUnderReverseTax.Voucher,
                                                    tmpSettleOverUnderReverseTax.TransDate,
                                                    tmpSettleOverUnderReverseTax.Percent,
                                                    tmpSettleOverUnderReverseTax.RefRecId);
            run = settleOverUnderReverseTax.next(tmpSettleOverUnderReverseTax);
        }

        this.initLedgerPosting(_ledgerPostingController);

        this.saveAndPost(_ledgerPostingController);

        return taxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChargeBePostedByTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales tax charge can be posted by tax.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    protected boolean canChargeBePostedByTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsTaxTransWorkAdded</Name>
				<Source><![CDATA[
    public boolean getIsTaxTransWorkAdded()
    {
        return isTaxWorkTransAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(AmountMST          _overUnderAmountMST,
             RecordSortedList   _settleOverUnderReverseTax)
    {
        super(100);

        overUnderAmountMST          = _overUnderAmountMST;
        settleOverUnderReverseTax   = _settleOverUnderReverseTax;
        sourceCurrencyCode          = Ledger::accountingCurrency(this.companyInfo().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationLedgerDimension</Name>
				<Source><![CDATA[
    // HQ-939-69-GDNk
    LedgerDimensionAccount operationLedgerDimension(TaxTrans _taxTrans,
                                                    DimensionDefault _defaultDimension = this.getDefaultDimension(this.sourceRecId()))
    {
        LedgerDimensionDefaultAccount   ledgerDimension;
        LedgerDimensionAccount          mergedLedgerDimension;

        ledgerDimension = TaxCashDisc::findOperationLedgerDimension( _taxTrans,
                                                            operationLedgerDimension,
                                                            differingCashDiscountLedgerDimension,
                                                            this.sourceTableId());

        //create the ledgerDimension account value from the operation account and the default dimension.
        mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimension, _defaultDimension);

        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDifferingCashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmDifferingCashDiscountLedgerDimension(LedgerDimensionDefaultAccount _differingCashDiscLedgerDimension = differingCashDiscountLedgerDimension)
    {
        differingCashDiscountLedgerDimension = _differingCashDiscLedgerDimension;

        return differingCashDiscountLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the operationLedgerDimension variable.
    /// </summary>
    /// <param name="_operationLedgerDimension">
    ///    The value to set the operationLedgerDimension variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the operationLedgerDimension variable.
    /// </returns>
    LedgerDimensionDefaultAccount parmOperationLedgerDimension(LedgerDimensionDefaultAccount _operationLedgerDimension = operationLedgerDimension)
    {
        operationLedgerDimension = _operationLedgerDimension;

        return operationLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the sales tax charge.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///     The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_taxTrans">
    ///     The <c>TaxTrans</c> record that holds the amount to be posted.
    /// </param>
    /// <param name="_chargeAmount">
    ///     The charge amount to post.
    /// </param>
    /// <param name="_exchRateHelper">
    ///     The <c>CurrencyExchHelper</c> instance for the <c>TaxTrans</c> record being posted.
    /// </param>
    /// <param name="_transactionLineAccount">
    ///     The <c>LedgerDimensionAccount</c> from the parent of this tax line.
    /// </param>
    /// <remarks>
    ///     The incoming _transactionLineAccount is for the current tax company, but the charges can be in a different company, so we call the getLedgerDimensionForChargeLine() method
    ///     to get either the correct expense account or a due to/due from account to post in the current company.
    /// </remarks>
    public void postCharge(LedgerPostingController _ledgerPostingController, TaxTrans _taxTrans, TaxAmountCur _chargeAmount, CurrencyExchangeHelper _exchRateHelper, LedgerDimensionAccount _transactionLineAccount)
    {
        LedgerDimensionAccount taxChargeLedgerDimension;

        taxChargeLedgerDimension = this.getLedgerDimensionForChargeLine(_chargeAmount, _transactionLineAccount);

        super(_ledgerPostingController, _taxTrans, _chargeAmount, _exchRateHelper, taxChargeLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the record ID to be the parent of the reversing <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_reverseTaxRecId">
    ///    The record ID to be the parent of the reversing <c>TaxTrans</c> record.
    /// </param>
    public void setReverseRecId(RecId _reverseTaxRecId)
    {
        reverseTaxRecId = _reverseTaxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the table ID to the parent of the reversing <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_reverseTaxTableId">
    ///    The table ID to the parent of the reversing <c>TaxTrans</c> record.
    /// </param>
    public void setReverseTableId(RefTableId    _reverseTaxTableId)
    {
        reverseTaxTableId = _reverseTaxTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public RecId sourceRecId()
    {
        return reverseTaxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return reverseTaxTableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>