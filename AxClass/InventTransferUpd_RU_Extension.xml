<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferUpd_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
[ExtensionOf(classStr(InventTransferUpd))]
final class InventTransferUpd_RU_Extension 
{
    private InventTransferParmLine  createInventTransferJourLine_inventTransferParmLine;      

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isLocalizationEnabled</Name>
				<Source><![CDATA[
    private boolean isLocalizationEnabled()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferJourLine</Name>
				<Source><![CDATA[
    protected void createInventTransferJourLine(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm
        )
    {
        createInventTransferJourLine_inventTransferParmLine = _inventTransferParmLine;
        next createInventTransferJourLine(_inventTransferParmLine, _inventTransferLine, _inventDimCriteria, _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssueAndReceiptForInventTransferJourLineCreation</Name>
				<Source><![CDATA[
    protected container statusIssueAndReceiptForInventTransferJourLineCreation()
    {
        StatusIssue   statusIssue;
        StatusReceipt statusReceipt;

        [statusIssue, statusReceipt] = next statusIssueAndReceiptForInventTransferJourLineCreation();

        if (this.isLocalizationEnabled())
        {
            if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment)
            {
                if (createInventTransferJourLine_inventTransferParmLine.QtyShipNow < 0)
                {
                    statusIssue     = StatusIssue::None;
                    statusReceipt   = StatusReceipt::Purchased;
                }
            }
            else
            {
                if (createInventTransferJourLine_inventTransferParmLine.QtyReceiveNow < 0)
                {
                    statusIssue     = StatusIssue::Sold;
                    statusReceipt   = StatusReceipt::None;
                }
            }
        }

        return [statusIssue, statusReceipt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findScrapNow</Name>
				<Source><![CDATA[
    protected InventTrans findScrapNow(
        InventTransferLine      _inventTransferLine,
        InventDimId             _inventDimId)
    {
        if (this.isLocalizationEnabled()
           && inventTransferParmTable.UpdateType != InventTransferUpdateType::PickingList)
        {
            InventTrans inventTransScrap;
            InventTransOriginTransferScrap inventTransOriginTransferScrap;

            select TableId from inventTransOriginTransferScrap
                where inventTransOriginTransferScrap.TransferScrapId         == _inventTransferLine.TransferId
                    && inventTransOriginTransferScrap.TransferScrapDataAreaId == _inventTransferLine.DataAreaId
                    && inventTransOriginTransferScrap.TransferScrapLineNum    == _inventTransferLine.LineNum
                join sum(Qty), sum(PdsCWQty) from inventTransScrap
                    where inventTransScrap.InventTransOrigin == inventTransOriginTransferScrap.InventTransOrigin
                        && ((createInventTransferJourLine_inventTransferParmLine.QtyScrapNow > 0
                        && inventTransScrap.StatusIssue       == StatusIssue::Sold
                        && inventTransScrap.StatusReceipt     == StatusReceipt::None)
                        || (createInventTransferJourLine_inventTransferParmLine.QtyScrapNow < 0
                        && inventTransScrap.StatusIssue       == StatusIssue::None
                        && inventTransScrap.StatusReceipt     == StatusReceipt::Purchased))
                        && inventTransScrap.Voucher           == voucherId
                        && inventTransScrap.DateFinancial     == inventTransferParmTable.TransDate
                        && inventTransScrap.InventDimId       == _inventDimId;

            return inventTransScrap;
        }

        return next findScrapNow( _inventTransferLine, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyClosedOrPartlySettledReceiptTrans_RU</Name>
				<Source><![CDATA[
    private InventTransId findAnyClosedOrPartlySettledReceiptTrans_RU(
        InventTransferId _transferId, 
        Voucher _transferJournalVoucher, 
        boolean _isShipmentReturn)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        InventTable inventTable;
        InventModelGroupItem inventModelGroupItem;
        InventModelGroup inventModelGroup;

        select firstonly InventTransId from inventTransOrigin
            where inventTransOrigin.ReferenceId == _transferId
                && (inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive ||
                    (_isShipmentReturn && inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip))
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::Purchased
                    && inventTrans.StatusIssue == StatusIssue::None
                    && inventTrans.Voucher == _transferJournalVoucher
            exists join inventTable
                where inventTable.ItemId == inventTrans.ItemId
            exists join inventModelGroupItem
                where inventModelGroupItem.ItemId == inventTable.ItemId
                    && inventModelGroupItem.ItemDataAreaId == inventTable.DataAreaId
            exists join inventModelGroup
                where inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
                    && inventModelGroup.DataAreaId == inventModelGroupItem.ModelGroupDataAreaId
                    && ((InventTrans.ValueOpen == InventTransOpen::No || inventTrans.QtySettled != 0) ||
                        (inventModelGroup.PostOnhandFinancialSecCur_RU == NoYes::Yes && (inventTrans.ValueOpenSecCur_RU == InventTransOpen::No || inventTrans.QtySettledSecCur_RU != 0)));
             
        return inventTransOrigin.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionForReverseNotClosed_RU</Name>
				<Source><![CDATA[
    private boolean checkTransactionForReverseNotClosed_RU()
    {
        boolean result = true;

        if (this.isTransferOrderDocumentReturnProcessing_RU() &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            InventTransId inventTransId = this.findAnyClosedOrPartlySettledReceiptTrans_RU(
                inventTransferParmTable.TransferId,
                inventTransferParmTable.VoucherShipmentId,
                inventTransferParmTable.ShipUpdateQty == InventTransferShipUpdateQty::DocumentReturn_RU);
            
            if (inventTransId)
            {
                InventTransferLine inventTransferLine;

                select firstonly LineNum
                    from inventTransferLine
                    where inventTransferLine.InventTransIdReceive == inventTransId;

                if (!inventTransferLine.LineNum)
                {
                    select firstonly LineNum
                        from inventTransferLine
                        where inventTransferLine.InventTransIdTransitTo == inventTransId;
                }

                result = checkFailed(strFmt("@ApplicationSuite_Localization:NotEnoughRecevedQtyToStornoTransferOrder", inventTransferLine.LineNum));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderDocumentReturnProcessing_RU</Name>
				<Source><![CDATA[
    private boolean isTransferOrderDocumentReturnProcessing_RU()
    {
        return inventTransferParmTable.VoucherShipmentId &&
            (inventTransferParmTable.ShipUpdateQty == InventTransferShipUpdateQty::DocumentReturn_RU ||
             inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ok = next validate();

        ok = ok && this.checkTransactionForReverseNotClosed_RU();

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>