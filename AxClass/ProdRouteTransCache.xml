<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteTransCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdRouteTransCache
{
    RecordSortedList        recordCache;
    TmpProdRouteReporting   tmpProdRouteReporting;
    boolean                 joblevel;
    container               prodRead;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchProd</Name>
				<Source><![CDATA[
    void fetchProd(ProdId _prodId)
    {
        ProdRouteTrans prodRouteTransOuter;

        if (joblevel)
        {
            while select
                    sum(Hours),
                    sum(QtyError),
                    sum(QtyGood)
                from prodRouteTransOuter
                group by
                    TransRefId,
                    TransType,
                    JobId
                where prodRouteTransOuter.TransRefId   == _prodId
                   && prodRouteTransOuter.TransRefType == ProdTransRefType::Production
            {
                tmpProdRouteReporting.QtyError      = prodRouteTransOuter.QtyError;
                tmpProdRouteReporting.QtyGood       = prodRouteTransOuter.QtyGood;
                tmpProdRouteReporting.QtyHours      = prodRouteTransOuter.Hours;
                tmpProdRouteReporting.ProdId        = prodRouteTransOuter.TransRefId;
                tmpProdRouteReporting.JobId         = prodRouteTransOuter.JobId;
                tmpProdRouteReporting.TransType     = prodRouteTransOuter.TransType;

                recordCache.ins(tmpProdRouteReporting);
            }
        }
        else
        {
            while select
                    sum(Hours),
                    sum(QtyError),
                    sum(QtyGood)
                from prodRouteTransOuter
                group by
                    TransRefId,
                    OprNum,
                    OprPriority,
                    TransType
                where prodRouteTransOuter.TransRefId == _prodId
                   && prodRouteTransOuter.TransRefType == ProdTransRefType::Production
            {
                tmpProdRouteReporting.QtyError      = prodRouteTransOuter.QtyError;
                tmpProdRouteReporting.QtyGood       = prodRouteTransOuter.QtyGood;
                tmpProdRouteReporting.QtyHours      = prodRouteTransOuter.Hours;
                tmpProdRouteReporting.ProdId        = prodRouteTransOuter.TransRefId;
                tmpProdRouteReporting.OprNum        = prodRouteTransOuter.OprNum;
                tmpProdRouteReporting.OprPriority   = prodRouteTransOuter.OprPriority;
                tmpProdRouteReporting.TransType     = prodRouteTransOuter.TransType;

                recordCache.ins(tmpProdRouteReporting);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJob</Name>
				<Source><![CDATA[
    /*
    void findProd(ProdId _prodId)
    {
        ProdRouteTrans      prodRouteTrans;
        ;

        if (joblevel)
        {
            while select
                    sum (QtyError),
                    sum (QtyGood),
                    sum (Hours)
                from prodRouteTrans
                index hint ProdJobTypeIdx
                group by
                    prodid,
                    OprNum,
                    OprPriority,
                    jobtype
                where prodRouteTrans.prodId == _prodId
            {
                tmpProdRouteReporting.qtyError      = prodRouteTrans.QtyError;
                tmpProdRouteReporting.qtyGood       = prodRouteTrans.QtyGood;
                tmpProdRouteReporting.qtyHours      = prodRouteTrans.Hours;
                tmpProdRouteReporting.ProdId        = prodRouteTrans.ProdId;
                tmpProdRouteReporting.OprNum        = prodRouteTrans.OprNum;
                tmpProdRouteReporting.OprPriority   = prodRouteTrans.OprPriority;
                tmpProdRouteReporting.RouteJobType  = prodRouteTrans.JobType;

                recordCache.ins(tmpProdRouteReporting);
            }
        }
        else
        {
            while select
                    sum (QtyError),
                    sum (QtyGood),
                    sum (Hours)
                from prodRouteTrans
                group by
                    prodid,
                    OprNum,
                    OprPriority
                where prodRouteTrans.prodId == _prodId
            {
                tmpProdRouteReporting.qtyError      = prodRouteTrans.QtyError;
                tmpProdRouteReporting.qtyGood       = prodRouteTrans.QtyGood;
                tmpProdRouteReporting.qtyHours      = prodRouteTrans.Hours;
                tmpProdRouteReporting.ProdId        = prodRouteTrans.ProdId;
                tmpProdRouteReporting.OprNum        = prodRouteTrans.OprNum;
                tmpProdRouteReporting.OprPriority   = prodRouteTrans.OprPriority;

                recordCache.ins(tmpProdRouteReporting);
            }
        }
    }
    */

    boolean findJob(ProdId             _prodId,
                    ProdJobId          _jobId,
                    ProdRouteTransType _transType
                   )
    {
        tmpProdRouteReporting.clear();

        tmpProdRouteReporting.ProdId      = _prodId;
        tmpProdRouteReporting.JobId       = _jobId;
        tmpProdRouteReporting.TransType   = _transType;

        if (confind(prodRead,_prodId))
        {
            recordCache.find(tmpProdRouteReporting);
            return true;
        }
        else
        {
            prodRead += _prodId;
            this.unpack(ProdRouteTransCache::findBlock(_prodId,joblevel));
            recordCache.find(tmpProdRouteReporting);
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpr</Name>
				<Source><![CDATA[
    boolean findOpr(ProdId             _prodId,
                    OprNum             _oprNum,
                    RouteOprPriority   _oprPriority,
                    ProdRouteTransType _transType
                   )
    {
        tmpProdRouteReporting.clear();
        tmpProdRouteReporting.ProdId        = _prodId;
        tmpProdRouteReporting.OprNum        = _oprNum;
        tmpProdRouteReporting.OprPriority   = _oprPriority;
        tmpProdRouteReporting.TransType     = _transType;

        if (confind(prodRead,_prodId))
        {
            recordCache.find(tmpProdRouteReporting);
            return true;
        }
        else
        {
            prodRead += _prodId;
            this.unpack(ProdRouteTransCache::findBlock(_prodId,joblevel));
            recordCache.find(tmpProdRouteReporting);
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hoursJob</Name>
				<Source><![CDATA[
    Hours hoursJob(ProdId    _prodId,
                   ProdJobId _jobId
                  )
    {
        if (!_prodId || !_jobId)
            return 0;
        this.findJob(_prodId,_jobId,ProdRouteTransType::Time);
        return tmpProdRouteReporting.QtyHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hoursOpr</Name>
				<Source><![CDATA[
    Hours hoursOpr(ProdId              _prodId,
                   OprNum              _oprNum,
                   RouteOprPriority    _oprPriority
                  )
    {
        if (!_prodId || !_oprNum)
            return 0;
        this.findOpr(_prodId,_oprNum,_oprPriority,ProdRouteTransType::Time);
        return tmpProdRouteReporting.QtyHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(boolean _joblevel)
    {
        joblevel    = _joblevel;
        recordCache = new RecordSortedList(tablenum(TmpProdRouteReporting));

        if (joblevel)
            recordCache.sortOrder(fieldnum(TmpProdRouteReporting,ProdId),
                                  fieldnum(TmpProdRouteReporting,JobId),
                                  fieldnum(TmpProdRouteReporting,TransType)
                                 );
        else
            recordCache.sortOrder(fieldnum(TmpProdRouteReporting,ProdId),
                                  fieldnum(TmpProdRouteReporting,OprNum),
                                  fieldnum(TmpProdRouteReporting,OprPriority),
                                  fieldnum(TmpProdRouteReporting,TransType)
                                 );
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        container               con;
        TmpProdRouteReporting   packTmpProdRouteReporting;

        if (recordCache.first(packTmpProdRouteReporting))
        do
        {
            con += [packTmpProdRouteReporting];
        } while (recordCache.next(packTmpProdRouteReporting));

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyErrorJob</Name>
				<Source><![CDATA[
    ProdReportedError qtyErrorJob(ProdId    _prodId,
                                  ProdJobId _jobId
                                 )
    {
        if (!_prodId || !_jobId)
            return 0;
        this.findJob(_prodId,_jobId,ProdRouteTransType::Qty);
        return tmpProdRouteReporting.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyErrorOpr</Name>
				<Source><![CDATA[
    ProdReportedError qtyErrorOpr(ProdId            _prodId,
                                  OprNum            _oprNum,
                                  RouteOprPriority  _oprPriority
                                 )
    {
        if (!_prodId || !_oprNum)
            return 0;
        this.findOpr(_prodId,_oprNum,_oprPriority,ProdRouteTransType::Qty);
        return tmpProdRouteReporting.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyGoodJob</Name>
				<Source><![CDATA[
    ProdReportedGood qtyGoodJob(ProdId    _prodId,
                                ProdJobId _jobId
                               )
    {
        if (!_prodId || !_jobId)
            return 0;
        this.findJob(_prodId,_jobId,ProdRouteTransType::Qty);
        return tmpProdRouteReporting.QtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyGoodOpr</Name>
				<Source><![CDATA[
    ProdReportedGood qtyGoodOpr(ProdId            _prodId,
                                OprNum            _oprNum,
                                RouteOprPriority  _oprPriority
                               )
    {
        if (!_prodId || !_oprNum)
            return 0;
        this.findOpr(_prodId,_oprNum,_oprPriority,ProdRouteTransType::Qty);
        return tmpProdRouteReporting.QtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    void unpack(container con)
    {
        Integer                 x;

        for (x=1;x<=conlen(con);x++)
        {
            TmpProdRouteReporting packTmpProdRouteReporting = conpeek(con,x);
            recordCache.ins(packTmpProdRouteReporting,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructJob</Name>
				<Source><![CDATA[
    static ProdRouteTransCache constructJob()
    {
        return new ProdRouteTransCache(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOpr</Name>
				<Source><![CDATA[
    static ProdRouteTransCache constructOpr()
    {
        return new ProdRouteTransCache(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBlock</Name>
				<Source><![CDATA[
    static container findBlock(ProdId    _prodId,
                                      boolean   _jobLevel
                                     )
    {
        ProdRouteTransCache blockCache = new ProdRouteTransCache(_jobLevel);
        blockCache.fetchProd(_prodId);
        return blockCache.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
