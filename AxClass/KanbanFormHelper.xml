<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanFormHelper extends KanbanRulesUIHelper
{
    FormDataSource          kanban_ds;
    Kanban                  kanban;

    FormDataSource          kanbanJob_ds;
    KanbanJob               kanbanJob;

    FormRun                 formRun;

    InventDimCtrl_Frm       inventDimFormSetupPegging;
    InventDimAxFormAdapter  inventDimFormAdapter;
    FormDataSource          inventDimPegging;

    SalesLine               sourceSalesLine;
    SalesId                 sourceSalesId;
    SalesExternalItemId     sourceSalesExternalItemId;
    KanbanRefRecId          kanbanSourceSalesIdCached;
    KanbanId                sourceKanbanId;
    boolean                 kanbanSourceKanbanIdCached;
    InventTransId           sourceInventTransId;
    boolean                 kanbanSourceInventTransIdCached;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handleCancelJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the currently selected job.
    /// </summary>
    /// <remarks>
    ///    Calls the <c>KanbanJobResetSilent</c> command.
    /// </remarks>
    public void handleCancelJob()
    {
        Args args = new Args();

        args.record(kanbanJob);
        new MenuFunction(menuitemActionStr(KanbanJobResetNotPlannedSilent), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCancelKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels a kanban.
    /// </summary>
    /// <remarks>
    ///    Calls the <c>KanbanResetSilent</c> command.
    /// </remarks>
    public void handleCancelKanban()
    {
        Args args = new Args();

        args.record(kanban);
        new MenuFunction(menuitemActionStr(KanbanResetNotAssignedSilent), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCreateEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the action of creating event kanbans for the material that is required for this kanban.
    /// </summary>
    public void handleCreateEvent()
    {
        KanbanJobPickingList    kanbanJobPickingList;
        KanbanJob               firstKanbanJob = kanban.firstKanbanJob();

        // Create event kanbans for each of the picking list lines of the kanban
        if (
            kanban.type().canHaveBOM()
            )
        {
            while select kanbanJobPickingList
                where
                      kanbanJobPickingList.Kanban == kanban.RecId
            {
                ReqEventProcessKanban::newStandard(kanbanJobPickingList, true).runOperation();
            }
        }

        // first kanban job (transfer or semi finished)
        ReqEventProcessKanban::newStandard(firstKanbanJob, true).runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleDuplicateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the duplication command when the button is pressed in the form.
    /// </summary>
    public void handleDuplicateKanban()
    {
        kanban.kanbanRule().type().duplicateKanban(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleEmptyKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the action of emptying a kanban and posts the kanban quantity as consumed.
    /// </summary>
    /// <remarks>
    ///    This method uses the <c>KanbanEmptySilent</c> command.
    /// </remarks>
    public void handleEmptyKanban()
    {
        Args            args = new Args();
        MenuFunction    kanbanEmptySilentMenuFunction = new MenuFunction(menuitemActionStr(KanbanEmptySilent), MenuItemType::Action);

        MultiSelectionHelper multiSelectHelper = MultiSelectionHelper::construct();
        multiSelectHelper.parmDatasource(kanban_ds);

        Kanban kanbanToProcess = multiSelectHelper.getFirst();
        while (kanbanToProcess != null)
        {
            args.record(kanbanToProcess);
            kanbanEmptySilentMenuFunction.run(args);

            kanbanToProcess = multiSelectHelper.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the current kanban.
    /// </summary>
    public void handlePrint()
    {
        KanbanPrinter kanbanPrinter = KanbanPrinter::construct();

        kanbanPrinter.printKanban(kanban, '', true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleViewSourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the action of viewing the source requirement of the kanban.
    /// </summary>
    public void handleViewSourceRequirement()
    {
        MenuFunction    mf;
        Args            args = new Args();

        if (this.sourceSalesId())
        {
            args = new Args();
            args.caller(this);
            args.record(SalesTable::find(this.sourceSalesId()));
            mf = new MenuFunction(menuitemDisplayStr(SalesTable), MenuItemType::Display);
            mf.run(args);
        }
        else
        {
            if (this.sourceKanbanId())
            {
                args = new Args();
                args.caller(this);
                args.record(Kanban::findKanbanId(this.sourceKanbanId()));
                mf = new MenuFunction(menuitemDisplayStr(Kanban), MenuItemType::Display);
                mf.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance value of the <c>InventTransId</c> data type.
    /// </summary>
    /// <remarks>
    ///    This method will be set empty if there is no sales order or kanban source requirement.
    /// </remarks>
    public void initSourceInventTransId()
    {
        if (kanbanSourceSalesIdCached != kanban.RecId)
        {
            this.initSourceSalesFields();
        }

        if (   !sourceSalesId
            && kanbanSourceKanbanIdCached != kanban.RecId)
        {
            this.initSourceKanbanId();
        }

        kanbanSourceInventTransIdCached = kanban.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance value of the source requirement <c>KanbanId</c> class.
    /// </summary>
    /// <remarks>
    ///    The class will be set to empty if there is no kanban source requirement.
    /// </remarks>
    public void initSourceKanbanId()
    {
        ReqPeggingTreeNodeKanban reqPeggingTreeNodeKanban = ReqPeggingTreeNode::newStandard(kanban);
        Common parentRecord = reqPeggingTreeNodeKanban.parent();
        if (   parentRecord is KanbanJobPickingList
            || parentRecord is KanbanJobIssue)
        {
            ReqPeggingTreeNode reqPeggingTreeNodeParent = ReqPeggingTreeNode::newStandard(parentRecord);
            Common referenceRecord = reqPeggingTreeNodeParent.parent();

            if (referenceRecord is Kanban)
            {
                Kanban kanbanReference = referenceRecord as Kanban;
                sourceKanbanId         = kanbanReference.KanbanId;
                sourceInventTransId    = kanbanReference.lastKanbanJob().InventTransId;
            }
        }

        kanbanSourceKanbanIdCached = kanban.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceSalesFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value of the source requirement fields.
    /// </summary>
    /// <remarks>
    /// The value will be set to empty if there is no sales order source requirement.
    /// </remarks>
    public void initSourceSalesFields()
    {
        ReqPeggingTreeNodeKanban reqPeggingTreeNodeKanban = ReqPeggingTreeNode::newStandard(kanban);
        Common referenceRecord = reqPeggingTreeNodeKanban.parent();

        if (referenceRecord is SalesLine)
        {
            sourceSalesLine = referenceRecord as SalesLine;
        }
        else
        {
            sourceSalesLine = null;
        }

        sourceSalesId             = sourceSalesLine.SalesId;
        sourceInventTransId       = sourceSalesLine.InventTransId;
        sourceSalesExternalItemId = sourceSalesLine.ExternalItemId;

        kanbanSourceSalesIdCached = kanban.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the specified lookup form with the specified record.
    /// </summary>
    /// <param name="_formName">
    ///    The form to open.
    /// </param>
    /// <param name="_common">
    ///    The record to show.
    /// </param>
    protected void jumpRef(
        formName _formName,
        Common   _common)
    {
        Args        args         = new Args(_formName);
        FormRun     formRunLocal = classfactory.formRunClass(args);

        args.record(_common);
        formRunLocal.init();
        formRunLocal.run();
        formRunLocal.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefSourceInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the <c>InventTrans</c> form and selects the current source lot.
    /// </summary>
    public void jumpRefSourceInventTransId()
    {
        this.jumpRef(formStr(InventTrans),InventTrans::findTransId(this.sourceInventTransId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefSourceKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the <c>Kanban</c> form and selects the current source kanban.
    /// </summary>
    public void jumpRefSourceKanbanId()
    {
        this.jumpRef(formStr(Kanban),Kanban::findKanbanId(this.sourceKanbanId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefSourceSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the <c>SalesTable</c> form and selects the current source sales line.
    /// </summary>
    public void jumpRefSourceSalesId()
    {
        this.jumpRef(formStr(SalesTable),SalesLine::find(this.sourceSalesId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetupPegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimForm</c> object used for dimensions setup in the pegging list.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimCtrl_Frm</c> instance to be used for dimensions setup.
    /// </returns>
    public InventDimCtrl_Frm parmInventDimFormSetupPegging()
    {
        return inventDimFormSetupPegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimPegging</Name>
				<Source><![CDATA[
    public FormDataSource parmInventDimPegging(FormDataSource _inventDimPegging = inventDimPegging)
    {
        inventDimPegging = _inventDimPegging;

        return inventDimPegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckBOMVersionAssign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the BOM version of the active kanban can be reassigned.
    /// </summary>
    /// <returns>
    ///    true if the BOM version of the active kanban can be reassigned; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Kanbans must have their handling unit status set as the <c>LeanKanbanStatus::NotAssigned</c>
    ///    enumeration value and the first job of the kanban cannot be semi-finished.
    /// </remarks>
    public boolean ruleCheckBOMVersionAssign()
    {
        return     kanban.Status == LeanKanbanStatus::NotAssigned
                && kanban.type().canHaveBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> rule method for determining whether the active kanban can be canceled.
    /// </summary>
    /// <returns>
    ///    true if it can be canceled; otherwise, false.
    /// </returns>
    public boolean ruleCheckKanbanCancel()
    {
        //Returns true if the kanban is in status 'assigned' or “received” and the finantial update is not yet done
        return    kanban.Status    == LeanKanbanStatus::Assigned
               || kanban.Status    == LeanKanbanStatus::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanCreateEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban event can be created.
    /// </summary>
    /// <returns>
    /// true if the kanban can have event kanbans associated to it; otherwise, false.
    /// </returns>
    public boolean ruleCheckKanbanCreateEvent()
    {
        return    kanban.Status < LeanKanbanStatus::Received
               && ReqEventProcessKanban::canHaveEventKanban(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> rule method for determining whether the active kanban can be duplicated.
    /// </summary>
    /// <returns>
    ///    true if the kanban can be duplicated; otherwise, false.
    /// </returns>
    public boolean ruleCheckKanbanDuplicate()
    {
        //This one returns true if the kanban is associated with a DemandOrigin coming from a rule which is of type make to stock (fixed or scheduled)
        return kanban.kanbanRule().ReplenishmentStrategy     == LeanReplenishmentStrategy::Fixed
                || kanban.kanbanRule().ReplenishmentStrategy == LeanReplenishmentStrategy::Scheduled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> rule method for determining whether a user can empty the active kanban.
    /// </summary>
    /// <returns>
    ///    true if the kanban can be empty; otherwise, false.
    /// </returns>
    public boolean ruleCheckKanbanEmpty()
    {
        MultiSelectionHelper multiSelectHelper = MultiSelectionHelper::construct();
        multiSelectHelper.parmDatasource(kanban_ds);

        Kanban kanbanToCheck = multiSelectHelper.getFirst();
        while (kanbanToCheck != null)
        {
            // Returns true if it is possible to empty the kanban, meaning, the current status is 'received'.
            if (kanbanToCheck.Status != LeanKanbanStatus::Received)
            {
                return false;
            }

            kanbanToCheck = multiSelectHelper.getNext();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanEmptyReset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a user can revert an empty kanban status.
    /// </summary>
    /// <returns>
    /// true if the kanban status can be reverted; otherwise, false.
    /// </returns>
    public boolean ruleCheckKanbanEmptyReset()
    {
        return kanban.Status == LeanKanbanStatus::Emptied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanJobCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the active kanban job can be canceled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job can be canceled; otherwise, false.
    /// </returns>
    public boolean ruleCheckKanbanJobCancel()
    {
        return    kanbanJob.RecId
               && kanbanJob.status().isStatusResetAllowed(LeanKanbanJobStatus::NotPlanned,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckRuleReassign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the active kanban can be reassigned to a different rule.
    /// </summary>
    /// <returns>
    ///    true if the active kanban can be reassigned; otherwise, false.
    /// </returns>
    public boolean ruleCheckRuleReassign()
    {
        return LeanRuleReassignment::canKanbanBeReassigned(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckViewSourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a user can view the source requirement of the kanban.
    /// </summary>
    /// <returns>
    ///    true if a user can view the source requirement; otherwise, false.
    /// </returns>
    public boolean ruleCheckViewSourceRequirement()
    {
        return    this.sourceKanbanId()
               || this.sourceSalesId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources that are used in the rule computation process.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>Common</c> table buffer that belongs to the first data source instance.
    /// </param>
    /// <param name="datasources2">
    ///    A <c>Common</c> table buffer that belongs to the second data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A <c>Common</c> table buffer that belongs to the third data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A <c>Common</c> table buffer that belongs to the fourth data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A <c>Common</c> table buffer that belongs to the fifth data source instance; optional.
    /// </param>
    /// <remarks>
    ///    Up to five data sources can be passed. If the implementation requires more data sources, additional
    ///    custom methods should be implemented on the rule implementer class. The method is called by the
    ///    <c>FormButtonManager</c> class on the rule class that implements the <c>ButtonStateProvider</c>
    ///    interface.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        if (datasources1.TableId    != tableNum(Kanban)
            || datasources2.TableId != tableNum(KanbanJob))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanban = datasources1;
        kanban_ds = FormDataUtil::getFormDataSource(kanban);

        kanbanJob = datasources2;
        kanbanJob_ds = FormDataUtil::getFormDataSource(kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the source requirement of the <c>InventTransId</c> data type .
    /// </summary>
    /// <returns>
    ///    A source requirement of the <c>InventTransId</c> data type.
    /// </returns>
    public InventTransId sourceInventTransId()
    {
        if (kanbanSourceInventTransIdCached != kanban.RecId)
        {
            this.initSourceInventTransId();
        }

        return sourceInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the source requirement kanban ID.
    /// </summary>
    /// <returns>
    ///    The source requirement <c>KanbanId</c> value.
    /// </returns>
    public KanbanId sourceKanbanId()
    {
        if (kanbanSourceKanbanIdCached != kanban.RecId)
        {
            this.initSourceKanbanId();
        }

        return sourceKanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceSalesExternalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source requirement <c>ExternalItemId</c>.
    /// </summary>
    /// <returns>
    /// The source requirement <c>ExternalItemId</c>.
    /// </returns>
    public SalesId sourceSalesExternalItemId()
    {
        if (kanbanSourceSalesIdCached != kanban.RecId)
        {
            this.initSourceSalesFields();
        }

        return sourceSalesExternalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the source requirement sales ID.
    /// </summary>
    /// <returns>
    ///    The source requirement <c>SalesId</c> value.
    /// </returns>
    public SalesId sourceSalesId()
    {
        if (kanbanSourceSalesIdCached != kanban.RecId)
        {
            this.initSourceSalesFields();
        }

        return sourceSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the source requirement <c>SalesLines</c> record.
    /// </summary>
    /// <returns>
    ///    The source requirement <c>SalesLine</c> record.
    /// </returns>
    public SalesLine sourceSalesLine()
    {
        if (kanbanSourceSalesIdCached != kanban.RecId)
        {
            this.initSourceSalesFields();
        }

        return sourceSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers design updates to create or update the <c>InventDimFormSetup</c> helper.
    /// </summary>
    /// <param name="_mode">
    ///    An <c>InventDimFormDesignUpdate</c> value that specifies the action type. For example, initialize
    ///    or update.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    An invalid parameter was passed.
    /// </exception>
    public void updateDesign(InventDimFormDesignUpdate _mode)
    {
        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init          :
                if (!inventDimFormSetupPegging)
                {
                    Set set = new Set(Types::String);
                    set.add(inventDimPegging.name());
                    inventDimFormSetupPegging  = InventDimCtrl_Frm::construct();
                    inventDimFormAdapter = InventDimAxFormAdapter::newFromForm(formRun);
                    inventDimFormSetupPegging.parmCallingElement(inventDimFormAdapter);
                    inventDimFormSetupPegging.parmValidDataSources(set);
                    inventDimFormSetupPegging.init();
                }

            case InventDimFormDesignUpdate::Active        :
                inventDimFormSetupPegging.formActiveSetup();
                inventDimFormSetupPegging.formSetControls(true);
                break;

            default : throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static KanbanFormHelper construct()
    {
        return new KanbanFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Kanban</c> record from the caller record buffer.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Kanban</c> record or a record buffer that contains a <c>CardId</c> field.
    /// </param>
    /// <returns>
    ///    The <c>Kanban</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The kanban does not exist.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table buffer has no field named <c>CardId</c>.
    /// </exception>
    public static Kanban kanbanFromRecord(Common _common)
    {
        Kanban  callerKanban;

        switch (_common.TableId)
        {
            case tableNum(Kanban):
                // Get the buffer as it is
                callerKanban = _common;
                break;
            default:
                // Look for a CardId field in the table and find the Kanban for that card
                fieldId fieldId = fieldName2id(_common.TableId,fieldStr(KanbanCard,CardId));
                if (fieldId)
                {
                    callerKanban = Kanban::findKanbanCardId(_common.(fieldId));
                    if (!callerKanban)
                    {
                        throw error(strFmt("@SYS134894",(_common.(fieldId))));
                    }
                }
                break;
        }

        return callerKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a helper class for the kanban form that is based on the actual <c>FormRun</c> data.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object that represents the kanban form.
    /// </param>
    /// <param name="_inventDimPegging">
    ///    A data source with the inventory dimensions of the pegging list.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanFormHelper</c> class.
    /// </returns>
    public static KanbanFormHelper newForm(
        FormRun        _formRun,
        FormDataSource _inventDimPegging)
    {
        KanbanFormHelper kanbanFormHelper = KanbanFormHelper::newStandard();
        kanbanFormHelper.parmFormRun (_formRun);
        kanbanFormHelper.parmInventDimPegging(_inventDimPegging);

        return kanbanFormHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns an instance of <c>KanbanFormHelper</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>KanbanFormHelper</c> class.
    /// </returns>
    public static KanbanFormHelper newStandard()
    {
        KanbanFormHelper kanbanFormHelper = KanbanFormHelper::construct();

        return kanbanFormHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
