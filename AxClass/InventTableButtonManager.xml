<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTableButtonManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTableButtonManager</c> class handles the enabling and disabling of buttons in forms
///    and list pages that show the inventory table.
/// </summary>
public class InventTableButtonManager implements ButtonStateProvider
{
    FormDataSource  inventTable_DS;
    InventTable     inventTable;
    InventItemType  inventItemType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBOMConfigHierarchyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BOMConfigHierarchy</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    /// <c>NoYes::No</c>.
    /// </returns>
    public boolean checkBOMConfigHierarchyEnabled()
    {
        return (inventTable.isBOMAllowed() && inventTable.configActive());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMConfigRouteEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BOMConfigRoute</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    /// <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkBOMConfigRouteEnabled()
    {
        return (inventTable.isBOMAllowed() && inventTable.configActive());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMConsistOfEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BOMConsistOf</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    /// <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkBOMConsistOfEnabled()
    {
        return inventTable.isBOMAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMDesignerEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BOMDesigner</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    /// <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkBOMDesignerEnabled()
    {
        return inventTable.isBOMAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMReportFinishedEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BOMReportFinished</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkBOMReportFinishedEnabled()
    {
        return (inventItemType && inventItemType.canBeProduced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMReportFinishMaxEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BOMReportFinishMax</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkBOMReportFinishMaxEnabled()
    {
        return (inventItemType && inventItemType.canBeProduced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMRouteEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BOMRoute</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkBOMRouteEnabled()
    {
        return inventTable.isFormulaOrBOMAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemConfigEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>ItemConfig</c> functionality should be enabled.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if functionality should be enabled; otherwise,
    ///    <c>NoYes::No</c>.
    /// </returns>
    public NoYes checkItemConfigEnabled()
    {
        return inventTable.configActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the cached rule evaluation results.
    /// </summary>
    /// <remarks>
    ///    When the next refresh action is performed, the rules relevant for the refresh will re-evaluated
    /// </remarks>
    public void clearCache()
    {
        inventItemType = inventTable.inventItemType(); //update the type when record changes in the form
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string that identifies the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    ///    This method is called by the <c>FormButtonManager</c> on the rule class that implements the
    ///    <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="datasources1">
    ///    A Common table buffer that belongs to the 1st data source instance.
    /// </param>
    /// <param name="datasources2">
    ///    A Common table buffer that belongs to the 2nd data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A Common table buffer that belongs to the 3rd data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A Common table buffer that belongs to the 4th data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A Common table buffer that belongs to the 5th data source instance; optional.
    /// </param>
    /// <remarks>
    ///    Up to 5 data sources can be passed. If the implementation requires more data sources, additional
    ///    custom methods should be implemented on the rule implementer class.The method is called by the
    ///    <c>FormButtonManager</c> on the rule class that implements the <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        if (datasources1.TableId != tableNum(InventTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventTable = datasources1;

        inventTable_DS = FormDataUtil::getFormDataSource(inventTable);

        inventItemType = inventTable.inventItemType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTableButtonManager construct()
    {
        return new InventTableButtonManager();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>