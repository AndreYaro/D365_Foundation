<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailNonRecurringTokenFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailNonRecurringTokenFeature</c> represents the feature management for non-recurring token feature.
/// </summary>
[FeatureMetadataConfigurationKey(configurationKeyStr(Retail))]
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[InternalUseOnly]
internal final class RetailNonRecurringTokenFeature implements IFeatureMetadata, IFeatureConfirmationMetadata, IFeatureMetadataEnablementNotifiable, IFeatureDependencies
{
    private static RetailNonRecurringTokenFeature instance;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new RetailNonRecurringTokenFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static RetailNonRecurringTokenFeature instance()
    {
        return RetailNonRecurringTokenFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmationMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelId confirmationMessage()
    {
        return strFmt("@Retail:RetailNonRecurringTokenFeatureEnableMessage", "@Retail:RetailIncrementalCaptureFeatureLabel", "@Retail:RetailRestrictCreditCardUsageFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr('@Retail:RetailNonRecurringTokenFeatureLabel');
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr('@Retail:RetailNonRecurringTokenFeatureDescription');
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2260484';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IFeature[] dependsOnAllFeatures()
    {
        var featureDependency = new IFeature[2]();

        featureDependency.SetValue(RetailIncrementalCaptureFeature::instance(), 0);
        featureDependency.SetValue(RetailRestrictCreditCardUsageFeature::instance(), 1);

        return featureDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        eventSource.EventWriteRetailNonRecurringTokenFeatureEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        eventSource.EventWriteRetailNonRecurringTokenFeatureDisabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>