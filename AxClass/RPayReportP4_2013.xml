<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReportP4_2013</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReportP4_2013 extends XMLExcelReport_RU implements BatchRetryable
{
    ReportPeriod_RU                 payPeriod;
    RHRMEmplId                      responsibleId;
    DialogField                     dfPayPeriod;
    DialogField                     dfResponsibleId;
    RPayCounterUnit                 fundSalary;
    RPayCounterUnit                 fundSocialPayments;
    RPayTimeGroupCode               timeFact;
    RPayGroup                       groupWorkers;
    RPayGroup                       groupShared;
    RPayGroup                       groupContract;
    Range                           reasonFired;
    RHRMReasonCodeId                reasonMass;
    RHRMReasonCodeId                reasonOwnWill;
    boolean                         isQuarter;
    boolean                         lessThan15;

    #define.Title('TITLE')
    #define.Footer('FOOTER')
    #define.Section1('SECTION1')
    #define.Section2('SECTION2')

    #define.pageWidth(157)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        payPeriod,
        responsibleId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)
        return max(#minHeight, this.getRangeHeight(_bookmark));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        currentHeight = 0;
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Title);
        document.insertPageBreak(currentRow);
        this.execute(#Section1);

        document.insertPageBreak(currentRow);
        this.execute(#Section2);

        this.execute(#Footer);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        dfPayPeriod     = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod, "@RUP1123", "@RUP1123");
        dfResponsibleId = dialog.addFieldValue(extendedTypeStr(RHRMEmplId), responsibleId);

        dfResponsibleId.helpText("@RUP2143");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayReportP4';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + date2StrUsr(payPeriod, DateFlags::None) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Title:
                this.fillTitle();
                break;
            case #Footer:
                this.fillFooter();
                break;
            case #Section1:
                this.fillSection1();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report footer.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFooter()
    {
        RHRMEmplTable   emplTable  = RHRMEmplTable::find(responsibleId);
        date        reportDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        this.insertValueToSection('ET_UserTitle', emplTable.titleId());
        this.insertValueToSection('ET_UserName',  emplTable.Name());
        this.insertValueToSection('ET_UserPhone', emplTable.personTable().hcmWorker().phone());

        this.insertValueToSection('SYSDateD',     dayofmth(reportDate));
        this.insertValueToSection('SYSDateM',     RNumDateInWordConverter::construct().date2strMonth(reportDate));
        this.insertValueToSection('SYSDateY',     substr(int2str(year(reportDate)), 3, 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the section 1 of the report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSection1()
    {
        TransDate       start;
        TransDate       end;
        RPayDayHour     dayHour;
        RPayAverageQty  avgD, avgP, avgC;

        start       = lessThan15 ? endmth(dateStartYr(payPeriod)) : payPeriod;
        end         = payPeriod;

        avgD = RPayReportP4_2013::getAverageQty(start, end, groupWorkers);
        this.insertValueToSection('RPH_AverageD', avgD);

        avgP = RPayReportP4_2013::getAverageQty(start, end, groupShared);
        this.insertValueToSection('RPH_AverageP', avgP);

        avgC = RPayReportP4_2013::getAverageQty(start, end, groupContract);
        this.insertValueToSection('RPH_AverageC', avgC);
        this.insertValueToSection('RPH_AverageTotal', avgD + avgP + avgC);

        this.insertValueToSection('OKVED', CompanyInfoHelper::partyOKDPasOfDate_RU(CompanyInfo::find(), payPeriod));

        avgD = RPayReportP4_2013::getFundAmountBySourceDate(start, end, fundSalary, groupWorkers);
        this.insertValueToSection('RPT_SumFundDPay', avgD);

        avgP = RPayReportP4_2013::getFundAmountBySourceDate(start, end, fundSalary, groupShared);
        this.insertValueToSection('RPT_SumFundPPay', avgP);

        avgC = RPayReportP4_2013::getFundAmountBySourceDate(start, end, fundSalary, groupContract);
        this.insertValueToSection('RPT_SumFundCPay', avgC);
        this.insertValueToSection('RPT_SumFundTotal',avgD + avgP + avgC);

        if (isQuarter)
        {
            start = dateStartYr(payPeriod);

            [dayHour] = RPayReportP4_2013::getTblDayHour(start, end, timeFact, groupWorkers, RPayDayHourCalc::Hour);
            this.insertValueToSection('RPETS_SumWorkTimeD',  dayHour);
            [dayHour] = RPayReportP4_2013::getTblDayHour(start, end, timeFact, groupShared, RPayDayHourCalc::Hour);
            this.insertValueToSection('RPETS_SumWorkTimeP',  dayHour);

            this.insertValueToSection('RPT_SumFundSumAssis', RPayReportP4_2013::getFundAmount(start, end, fundSocialPayments, groupWorkers) +
                                                   RPayReportP4_2013::getFundAmount(start, end, fundSocialPayments, groupShared) +
                                                   RPayReportP4_2013::getFundAmount(start, end, fundSocialPayments, groupContract));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report title.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTitle()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        this.insertValueToSection('ReportPeriodYEar',     year(payPeriod));
        this.insertValueToSection('ReportPeriodMonth',    strlwr(mthname(mthofyr(payPeriod))));
        this.insertValueToSection('CI_Name',              companyInfo.Name);
        this.insertValueToSection('CI_ZipCode',           companyInfo.postalAddress().Address);
        this.insertValueToSection('CI_CodeOKPO_RU',       CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, payPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            payPeriod     = endmth(dfPayPeriod.value());
            isQuarter     = dateEndQtr(payPeriod) == payPeriod;
            responsibleId = dfResponsibleId.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True if initialization passed without errors.
    /// </returns>
    public boolean init()
    {
        if ( !super())
        {
            return false;
        }

        setprefix("@RUP2175");

        fundSalary          = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportP4_2013, 1, "@RUP906",   "@RUP2132");
        fundSocialPayments  = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportP4_2013, 2, "@RUP906",   "@RUP2133");
        timeFact            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportP4_2013, 3, "@RUP1230",  "@RUP2134");
        groupWorkers        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportP4_2013, 4, "@RUP1230",  "@RUP2137");
        groupShared         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportP4_2013, 5, "@RUP1230",  "@RUP2138");
        groupContract       = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportP4_2013, 6, "@RUP1230",  "@RUP2139");
        lessThan15          = (RPayReportP4_2013::getAverageQty(payPeriod, payPeriod, groupWorkers) +
                               RPayReportP4_2013::getAverageQty(dateStartYr(payPeriod), payPeriod, groupShared)   +
                               RPayReportP4_2013::getAverageQty(dateStartYr(payPeriod), payPeriod, groupContract)) <= 15;
        if ( !isQuarter && lessThan15)
        {
            return checkFailed(strFmt("@SYS324288", "@RUP1123"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Title);
        this.addSection(#Section1);
        this.addSection(#Section2);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReportP4_2013);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.page1Cells(8)
        #define.page2Cells(8)
        #define.page3Cells(8)

        return #page1Cells + #page2Cells + #page3Cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! dfPayPeriod.value())
            {
                ret = checkFailed("@GLS110794");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3478";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets average employees quantity for the period.
    /// </summary>
    /// <param name="_start">
    /// The start date.
    /// </param>
    /// <param name="_end">
    /// The end date.
    /// </param>
    /// <param name="_payGroup">
    /// The payroll group.
    /// </param>
    /// <returns>
    /// The average employees quantity for the period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageQty getAverageQty(TransDate _start,
                                                      TransDate _end,
                                                      RPayGroup _payGroup = "")
    {
        RPayAverageQuantity rPayAverageQuantity;

        select sum(AverageQty), count(RecId) from rPayAverageQuantity
            where rPayAverageQuantity.PayPeriod >= _start &&
                  rPayAverageQuantity.PayPeriod <= _end   &&
                 (_payGroup == ""                         ||
                  rPayAverageQuantity.PayGroup == _payGroup);

        if (rPayAverageQuantity.RecId == 0)
        {
            return 0;
        }

        if ((mthofyr(_end) - mthofyr(_start) + 1) == 0)
        {
            return 0;
        }

        return round(rPayAverageQuantity.AverageQty / (mthofyr(_end) - mthofyr(_start) + 1), 1.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fund amount for the period.
    /// </summary>
    /// <param name="_start">
    /// The start date.
    /// </param>
    /// <param name="_end">
    /// The end date.
    /// </param>
    /// <param name="_fund">
    /// The fund.
    /// </param>
    /// <param name="_group">
    /// The payroll group.
    /// </param>
    /// <returns>
    /// The fund amount for the period.
    /// </returns>
    #define.Value1000(1000)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount getFundAmount(TransDate       _start,
                                                  TransDate       _end,
                                                  RPayCounterUnit _fund,
                                                  RPayGroup       _group = "")
    {
        RPayTrans       rPayTrans;
        RPayFundMember  rPayFundMember;
        RPayGroupMember rPayGroupMember;

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod >= _start &&
                  rPayTrans.PayPeriod <= _end
        exists join rPayGroupMember
            where _group == "" ||
                  (rPayGroupMember.PayGroup == _group &&
                   rPayGroupMember.PersonEmplId == rPayTrans.EmplId)
        exists join rPayFundMember
            where rPayFundMember.PayCostType == rPayTrans.PayCtype &&
                  rPayFundMember.CounterUnit == _fund;

        return round(rPayTrans.Amount / #Value1000, 0.1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundAmountBySourceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fund amount for period by source date.
    /// </summary>
    /// <param name="_start">
    /// The start date.
    /// </param>
    /// <param name="_end">
    /// The end date.
    /// </param>
    /// <param name="_fund">
    /// The fund.
    /// </param>
    /// <param name="_group">
    /// The payroll group.
    /// </param>
    /// <returns>
    /// The fund amount for period by source date.
    /// </returns>
    #define.Value1000(1000)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount getFundAmountBySourceDate(TransDate       _start,
                                                              TransDate       _end,
                                                              RPayCounterUnit _fund,
                                                              RPayGroup       _group = "")
    {
        RPayTrans       rPayTrans;
        RPayFundMember  rPayFundMember;
        RPayGroupMember rPayGroupMember;

        select sum(Amount) from rPayTrans
            where rPayTrans.SourceDate >= _start &&
                  rPayTrans.SourceDate <= _end
        exists join rPayGroupMember
            where _group == "" ||
                 (rPayGroupMember.PayGroup == _group &&
                  rPayGroupMember.PersonEmplId == rPayTrans.Emplid)
        exists join rPayFundMember
            where rPayFundMember.PayCostType == rPayTrans.PayCtype &&
                  rPayFundMember.CounterUnit == _fund;

        return round(rPayTrans.Amount / #Value1000, 0.1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of operations of resolution journals for the period.
    /// </summary>
    /// <param name="_start">
    /// The start date.
    /// </param>
    /// <param name="_end">
    /// The end date.
    /// </param>
    /// <param name="_payGroup">
    /// The payroll group.
    /// </param>
    /// <param name="_operationType">
    /// The resolution journal operation type.
    /// </param>
    /// <param name="_useReason">
    /// If true the reason should be used.
    /// </param>
    /// <param name="_reasonCodeId">
    /// The reason.
    /// </param>
    /// <returns>
    /// The count of operations of resolution journals for the period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int getJournalOperations(TransDate       _start,
                                                  TransDate       _end,
                                                  RPayGroup       _payGroup,
                                                  RHRMJournalType _operationType,
                                                  boolean         _useReason = false,
                                                  str             _reasonCodeId = "")
    {
        Query                   query = new Query();
        QueryBuildDataSource    dsHistory;
        QueryBuildDataSource    dsGroupMember;
        QueryRun                queryRun;
        RPayHistory             rPayHistory;

        if (_useReason && _reasonCodeId == "")
        {
            return 0;
        }

        dsHistory = query.addDataSource(tablenum(RPayHistory));
        dsHistory.addRange(fieldnum(RPayHistory, OperationType)).value(queryValue(_operationType));
        dsHistory.addRange(fieldnum(RPayHistory, StartDate)).value(SysQuery::range(_start, _end));
        if (_reasonCodeId != "")
        {
            dsHistory.addRange(fieldnum(RPayHistory, HrmReasonCodeId)).value(_reasonCodeId);
        }

        dsHistory.addSelectionField(fieldnum(RPayHistory, RecId), SelectionField::Count);

        dsGroupMember = dsHistory.addDataSource(tablenum(RPayGroupMember));
        dsGroupMember.addLink(fieldnum(RPayHistory, Number), fieldnum(RPayGroupMember, PersonEmplId));
        dsGroupMember.addRange(fieldnum(RPayGroupMember, PayGroup)).value(_payGroup);
        dsGroupMember.joinMode(JoinMode::ExistsJoin);

        queryRun = new QueryRun(query);
        queryRun.next();
        rPayHistory = queryRun.get(tablenum(RPayHistory));

        return any2Int(rPayHistory.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTblDayHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets hours/days count and employees count for the period.
    /// </summary>
    /// <param name="_start">
    /// The start date.
    /// </param>
    /// <param name="_end">
    /// The end date.
    /// </param>
    /// <param name="_timeGroup">
    /// The time group.
    /// </param>
    /// <param name="_payGroup">
    /// The payroll group.
    /// </param>
    /// <param name="_rPayDayHourCalc">
    /// The calculation type (days/hours).
    /// </param>
    /// <returns>
    /// The container with hours/days count and employees count.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getTblDayHour(ReportPeriod_RU   _start,
                                                 ReportPeriod_RU   _end,
                                                 RPayTimeGroupCode _timeGroup,
                                                 RPayGroup         _payGroup,
                                                 RPayDayHourCalc   _rPayDayHourCalc)
    {
        RPayDayHour         total;
        RPayDayHour         fact;
        RPayGroupMember     rPayGroupMember;
        date                d;
        int                 emplCount;
        boolean             emplSeen;

        while select PersonEmplid from rPayGroupMember
            where rPayGroupMember.PayGroup == _payGroup
        {
            emplSeen = false;

            for (d = endmth(_start); d <= _end; d = endmth(nextmth(d)))
            {
                [fact] = RPayEmplTblSum::dayHourGroupSum(
                                        d, rPayGroupMember.PersonEmplId, _rPayDayHourCalc, _timeGroup);
                total += fact;

                if (fact != 0)
                {
                    emplSeen = true;
                }
            }

            if (emplSeen)
            {
                emplCount++;
            }
        }

        return [total, emplCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReportP4_2013 report = new RPayReportP4_2013();

        report.parmArgs(_args);
        if (report.prompt())
        {
            if (report.init())
            {
                report.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>