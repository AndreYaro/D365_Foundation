<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPromissoryNoteCancel extends RunBase
{
    BankAccount accountID;
    BankPromissoryNoteNum promissoryNoteNum;
    VendPromissoryNoteID promissoryNoteId;

    TransTxt cancelReason;
    TransDate transDate;
    Voucher voucher;
    boolean paymentCancelled;

    DialogField dialogTransDate;
    DialogField dialogCancelReason;
    DialogField dialogAccountId;
    DialogField dialogPromissoryNoteNum;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        accountID,
        promissoryNoteId,
        transDate,
        cancelReason,
        voucher
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelPromissoryNote</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void cancelPromissoryNote()
    {
        BankPromissoryNoteTable bankPromissoryNoteTable;
        LedgerVoucher ledgerVoucher;
        NumberSeq numberSeq;

        numberSeq = NumberSeq::newGetVoucher(this.numberSequence());

        if (!this.validation(voucher, promissoryNoteId))
        {
            throw error("@SYS18447");
        }

        ledgerVoucher = this.createReverseLedgerTrans(numberSeq, voucher, this.parmTransDate());
        this.createPaymentOffsetTrans(ledgerVoucher);
        this.removeVendPromissoryNoteJour();
        this.removeVendPromissoryNoteTrans();
        this.removeVendPromissoryNoteInvoice();

        update_recordset bankPromissoryNoteTable
            setting DocumentStatus = BankPromissoryNoteStatus::Cancelled
            where bankPromissoryNoteTable.BankAccountID == accountID
                && bankPromissoryNoteTable.PromissoryNoteNum == promissoryNoteNum;

        paymentCancelled = true;

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closePaymTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void closePaymTrans(
        VendTrans _vendTransToReverse,
        VendTrans _vendTrans,
        LedgerVoucher _ledgerVoucher)
    {
        VendTable vendTable = VendTable::find(_vendTrans.AccountNum);
        VendTransOpen vendTransOpenFieldList;
        NoYes foundVendTransOpen = NoYes::No;

        SpecTransManager specTransManager = SpecTransManager::newFromSpec(vendTable);

        // payment
        while select DataAreaId, TableId, RecId, AmountCur from vendTransOpenFieldList
            where vendTransOpenFieldList.RefRecId == _vendTrans.RecId
        {
            specTransManager.insert(
                vendTransOpenFieldList.DataAreaId,
                vendTransOpenFieldList.TableId,
                vendTransOpenFieldList.RecId,
                vendTransOpenFieldList.AmountCur,
                _vendTrans.CurrencyCode);

            foundVendTransOpen = NoYes::Yes;
        }

        if (!foundVendTransOpen)
        {
            throw error(strfmt("@SYS18598", funcname()));
        }

        // payment reversal
        while select DataAreaId, TableId, RecId, AmountCur from vendTransOpenFieldList
            where vendTransOpenFieldList.RefRecId == _vendTransToReverse.RecId
        {
            specTransManager.insert(
                vendTransOpenFieldList.DataAreaId,
                vendTransOpenFieldList.TableId,
                vendTransOpenFieldList.RecId,
                vendTransOpenFieldList.AmountCur,
                _vendTrans.CurrencyCode);
        }

        VendTrans::settleTransact(vendTable, _ledgerVoucher);
        specTransManager.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentOffsetTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createPaymentOffsetTrans(LedgerVoucher   _ledgerVoucher)
    {
        VendTrans vendTrans_old;
        LedgerTransTxt transTxt;
        CustVendVoucher vendVoucher;
        VendTrans vendTrans;

        while select vendTrans
            where vendTrans.Voucher == voucher
                && vendTrans.PaymReference == promissoryNoteNum
                && vendTrans.PromissoryNoteID == promissoryNoteId
        {
            vendTrans_old = VendTrans::find(vendTrans.RecId);

            vendVoucher = CustVendVoucher::construct(
                SysModule::Vend,
                vendTrans_old.AccountNum,
                -vendTrans_old.AmountCur,
                vendTrans_old.CurrencyCode,
                transTxt,
                vendTrans_old.DefaultDimension,
                vendTrans_old.PostingProfile,
                LedgerPostingType::VendBalance);

            vendVoucher.parmPaymMode(vendTrans_old.PaymMode);
            vendVoucher.parmPaymSpec(vendTrans_old.PaymSpec);
            vendVoucher.parmTransTxt(strfmt('%1: %2, %3',"@SYS1068", vendTrans_old.Voucher, cancelReason));
            vendVoucher.parmTransDate(transDate);
            vendVoucher.parmExchRate(vendTrans_old.ExchRate);
            vendVoucher.parmExchRateSecondary(vendTrans_old.ExchRateSecond);

            vendVoucher.post(_ledgerVoucher, vendTrans_old);

            this.reverseSettlement(vendTrans, _ledgerVoucher);
            this.closePaymTrans(vendTrans_old, vendTrans, _ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseLedgerTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerVoucher createReverseLedgerTrans(
        NumberSeq  _numberSeq,
        Voucher    _voucher,
        TransDate  _paymDate)
    {
        LedgerVoucher ledgerVoucher;
        LedgerVoucherObject ledgerVoucherObject;

        ledgerVoucher = LedgerVoucher::newLedgerPost(
            DetailSummary::Detail,
            SysModule::Vend,
            _numberSeq.parmNumberSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(
            _numberSeq.voucher(),
            transDate,
            SysModule::Vend,
            LedgerTransType::Vend);

        ledgerVoucherObject.lastTransTxt(strfmt('%1: %2, %3',"@SYS1068", _voucher, cancelReason));
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();

        if (this.parmPromissoryNoteNum())
        {
            dialogCancelReason = dialog.addField(extendedtypestr(TransTxt),"@SYS69721","@SYS69722");
        }

        dialogAccountId = dialog.addFieldValue(extendedtypestr(BankAccount), accountID);
        dialogAccountId.active(false);

        dialogPromissoryNoteNum = dialog.addFieldValue(extendedtypestr(VendPromissoryNoteID), promissoryNoteId);
        dialogPromissoryNoteNum.active(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (this.parmPromissoryNoteNum())
        {
            cancelReason    = dialogCancelReason.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequence</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NumberSequenceReference numberSequence()
    {
        return VendParameters::numRefVendCloseVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankAccountID parmAccountId(BankAccount _accountID = accountID)
    {
        accountID = _accountID;
        return accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPromissoryNoteId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendPromissoryNoteID parmPromissoryNoteId(VendPromissoryNoteID _promissoryNoteId = promissoryNoteId)
    {
        promissoryNoteId = _promissoryNoteId;
        return promissoryNoteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPromissoryNoteNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankPromissoryNoteNum parmPromissoryNoteNum(BankPromissoryNoteNum _promissoryNoteNum = promissoryNoteNum)
    {
        promissoryNoteNum = _promissoryNoteNum;
        return promissoryNoteNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVendPromissoryNoteInvoice</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void removeVendPromissoryNoteInvoice()
    {
        VendPromissoryNoteInvoice vendPromissoryNoteInvoice;

        delete_from vendPromissoryNoteInvoice
            where vendPromissoryNoteInvoice.PromissoryNoteId == promissoryNoteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVendPromissoryNoteJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void removeVendPromissoryNoteJour()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;

        delete_from vendPromissoryNoteJour
            where vendPromissoryNoteJour.PromissoryNoteId == promissoryNoteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVendPromissoryNoteTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void removeVendPromissoryNoteTrans()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;

        delete_from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId == promissoryNoteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSettlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void reverseSettlement(
        VendTrans _vendTrans,
        LedgerVoucher _ledgerVoucher)
    {
        VendTable vendTable = VendTable::find(_vendTrans.AccountNum);
        VendSettlement vendSettlement;
        SpecTransManager specTransManager;

        specTransManager = SpecTransManager::newFromSpec(vendTable);

        while select vendSettlement
            where vendSettlement.TransRecId == _vendTrans.RecId
                && vendSettlement.CanBeReversed == NoYes::Yes
        {
            vendSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, _vendTrans.CurrencyCode);
        }

        if (specTransManager.getSpecTransCount() > 0) // specification.existSpecTrans())
        {
            VendTrans::reverseTransact(vendTable, _ledgerVoucher);
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setprefix(VendPromissoryNoteCancel::description());

        try
        {
            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            ttsbegin;

            this.cancelPromissoryNote();

            TransactionLog::create(TransactionLogType::PaymReversal, strfmt("@SYS83590", promissoryNoteNum));

            ttscommit;

            if (paymentCancelled)
            {
                info("@SYS126958");
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validation(
        Voucher _voucher,
        PaymReference _paymReference)
    {
        if (!_voucher)
        {
            return checkFailed(strfmt("@SYS83610", promissoryNoteNum, BankPromissoryNoteTable::find(accountID,promissoryNoteNum).DocumentStatus));
        }

        if (!_paymReference)
        {
            return checkFailed("@SYS24523");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS83537";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        VendPromissoryNoteCancel promissoryNoteCancel;
        Args localArgs = new Args();

        switch (args.dataset())
        {
            case tablenum(VendPromissoryNoteJour) :
                promissoryNoteCancel = VendPromissoryNoteCancel::newVendPromissoryNoteJour(args.record());
                break;

            default :
                throw error(strfmt("@SYS22828","@SYS12483"));
        }

        if (promissoryNoteCancel.prompt())
        {
            localArgs.caller(promissoryNoteCancel);
            localArgs.record(args.record());
            VendPromissoryNoteCancel::serverRun(localArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendPromissoryNoteJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendPromissoryNoteCancel newVendPromissoryNoteJour(VendPromissoryNoteJour _vendPromissoryNoteJour)
    {
        VendPromissoryNoteCancel promissoryNoteCancel;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;

        promissoryNoteCancel = new VendPromissoryNoteCancel();
        promissoryNoteCancel.getLast();

        while select PromissoryNoteId, Status, RemittedtoBankAccountId, TransDate, Voucher from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId == _vendPromissoryNoteJour.PromissoryNoteId
                && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Drawn
        {
            promissoryNoteCancel.parmAccountId(vendPromissoryNoteTrans.RemittedtoBankAccountId);
            promissoryNoteCancel.parmTransDate(vendPromissoryNoteTrans.TransDate);
            promissoryNoteCancel.parmVoucher(vendPromissoryNoteTrans.Voucher);
        }

        promissoryNoteCancel.parmPromissoryNoteId(_vendPromissoryNoteJour.PromissoryNoteId);
        promissoryNoteCancel.parmPromissoryNoteNum(_vendPromissoryNoteJour.DocumentNum);

        return promissoryNoteCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serverRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void serverRun(Args args)
    {
        VendPromissoryNoteCancel promissoryNoteCancel;

        promissoryNoteCancel = VendPromissoryNoteCancel::newVendPromissoryNoteJour(args.record());
        promissoryNoteCancel.unpack(args.caller().pack());
        promissoryNoteCancel.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>