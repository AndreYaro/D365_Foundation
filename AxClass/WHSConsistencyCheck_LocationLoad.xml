<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConsistencyCheck_LocationLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Checks whether the contents of the <c>WHSLocationLoad</c> table
/// is consistent with the physical on hand information.
/// </summary>
class WHSConsistencyCheck_LocationLoad extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;
    CheckFix    customCheckFix;
    boolean     suppressWarnings;
    boolean     allowRunInExistingTTSScope;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        customCheckFix
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSuppressWarnings</Name>
				<Source><![CDATA[
    public boolean parmSuppressWarnings(boolean _suppressWarnings = suppressWarnings)
    {
        suppressWarnings = _suppressWarnings;
        return suppressWarnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowRunInExistingTTSScope</Name>
				<Source><![CDATA[
    public boolean parmAllowRunInExistingTTSScope(boolean _allowRunInExistingTTSScope = allowRunInExistingTTSScope)
    {
        allowRunInExistingTTSScope = _allowRunInExistingTTSScope;
        return allowRunInExistingTTSScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixLocationLoad</Name>
				<Source><![CDATA[
    private void checkFixLocationLoad(WMSLocation _location, CheckFix _checkFix)
    {
        #OCCRetryCount
        WHSLocationLoad calculatedLocationLoad, actualLocationLoad;

        setPrefix(strFmt("@WAX:LocationInWarehouse", _location.wMSLocationId, _location.inventLocationId));

        try
        {
            ttsBegin;

            calculatedLocationLoad.clear();
            calculatedLocationLoad.initFromLocationOnHand(_location);

            actualLocationLoad = WHSLocationLoad::findByLocation(_location, true);

            if (!actualLocationLoad.hasEqualLoad(calculatedLocationLoad))
            {
                if (_checkFix == CheckFix::Fix)
                {
                    actualLocationLoad.initFromLocationLoad(calculatedLocationLoad);
                    actualLocationLoad.write();
                    if (!suppressWarnings)
                    {
                        warning("@WAX:LoadConsistencyCheckFixWarning");
                    }
                }
                else
                {
                    if (!suppressWarnings)
                    {
                        warning("@WAX:LoadConsistencyCheckFoundWarning");
                    }
                }
            }

            ttsCommit;
        }
        catch (Exception::Error)
        {
            error("@SYS18447");
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw;                
            }
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            // Using the optimistic pattern - recovery without rollback of transaction
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            // Using the optimistic pattern - recovery without rollback of transaction
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }

            retry;
        }
        catch
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixLocationLoads</Name>
				<Source><![CDATA[
    private void checkFixLocationLoads(Query _locationQuery, CheckFix _checkFix)
    {
        QueryRun locationQueryRun = new QueryRun(_locationQuery);
        boolean isCrossCompanyQuery = _locationQuery.allowCrossCompany();

        //if we are fixing the load when modigfying a single location we migth be in tts
        if (appl.ttsLevel() != 0 && !allowRunInExistingTTSScope)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        setPrefix("@WAX:LoadConsistencyCheckPrefix");

        while (locationQueryRun.next())
        {
            WMSLocation location = locationQueryRun.get(tableNum(WMSLocation));

            changeCompany(location.dataAreaId)
            {
                this.checkFixLocationLoad(location, _checkFix);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(WHSandTMS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        Query query = new Query();
        query.addDataSource(tableNum(WMSLocation));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomCheckFix</Name>
				<Source><![CDATA[
    public CheckFix parmCustomCheckFix(CheckFix _customCheckFix = customCheckFix)
    {
        if (prmisDefault(_customCheckFix))
        {
            return consistencyCheckJob ? consistencyCheckJob.parmCheckFix() : customCheckFix;
        }

        if (consistencyCheckJob)
        {
            consistencyCheckJob.parmCheckFix(_customCheckFix);
        }
        else
        {
            customCheckFix = _customCheckFix;
        }

        return _customCheckFix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = null)
    {
        if (prmisDefault(_query))
        {
            return queryRun.query();
        }

        queryRun = new QueryRun(_query);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.checkFixLocationLoads(queryRun.query(), this.parmCustomCheckFix());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
    boolean showInTree()
    {
        return isConfigurationKeyEnabled(configurationKeyNum(WHSandTMS));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(WHSConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

        default :
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:WHSLocationLoadConsistencyCheckDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUnitOfMeasureConversionUpdate</Name>
				<Source><![CDATA[
    public static void handleUnitOfMeasureConversionUpdate(XppPrePostArgs _args)
    {
        UnitOfMeasureConversion conversion = _args.getThis();

        WHSLocationLoad::fixLoadForLocations(
            WHSLocationLoad::locationsToFixOnUnitConversionUpdate(conversion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@WAX:WHSLocationLoadConsistencyCheckHelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSynchronouslyNoWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that location load information
    /// is consistent with the physical on hand information. The operation is done Synchronously without showing warnings.
    /// </summary>
    /// <param name="_locationsQuery">
    /// A query that determines which locations need to be analyzed.
    /// </param>
    public static void fixSynchronouslyNoWarnings(Query _locationsQuery)
    {
        WHSConsistencyCheck_LocationLoad consistencyCheck = new WHSConsistencyCheck_LocationLoad();
        consistencyCheck.parmQuery(_locationsQuery);
        consistencyCheck.parmCustomCheckFix(CheckFix::Fix);
        consistencyCheck.parmSuppressWarnings(true);
        consistencyCheck.parmAllowRunInExistingTTSScope(true);
        consistencyCheck.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleFixAsBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules a batch job that ensures that location load information
    /// is consistent with the physical on hand information.
    /// </summary>
    /// <param name="_locationsQuery">
    /// A query that determines which locations need to be analyzed.
    /// </param>
    public static void scheduleFixAsBatchJob(Query _locationsQuery)
    {
        WHSConsistencyCheck_LocationLoad consistencyCheck = new WHSConsistencyCheck_LocationLoad();
        consistencyCheck.parmQuery(_locationsQuery);
        consistencyCheck.parmCustomCheckFix(CheckFix::Fix);

        BatchHeader batchHeader = BatchHeader::construct();
        
        batchHeader.parmRuntimeJob(true);
        batchHeader.addTask(consistencyCheck);
        batchHeader.parmStartDateTime(DateTimeUtil::utcNow());
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>UnitOfMeasureConversion_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Eventlistener for the unit of measure tables OnUpdating event.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e">The event.</param>
    [DataEventHandler(tableStr(UnitOfMeasureConversion), DataEventType::Updating)]
    public static void UnitOfMeasureConversion_onUpdating(Common sender, DataEventArgs e)
    {
        UnitOfMeasureConversion conversion = sender as UnitOfMeasureConversion;

        WHSLocationLoad::fixLoadForLocations(
                WHSLocationLoad::locationsToFixOnUnitConversionUpdate(conversion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>