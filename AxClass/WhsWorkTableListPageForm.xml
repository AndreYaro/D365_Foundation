<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTableListPageForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkTableListPageForm</c> class contains the business logic of the <c>WhsWorkTableListPage</c> form.
/// </summary>
class WhsWorkTableListPageForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWorkIdList</Name>
				<Source><![CDATA[
    public str createWorkIdList(WHSLoadTable _loadTableArgs, WHSShipmentTable _shipmentTableArgs)
    {
        WHSWorkLine workLine;
        str workIdList;

        workIdList = '';

        if (_loadTableArgs)
        {
            while select WorkId from workLine
                group by WorkId
                where workLine.LoadId == _loadTableArgs.LoadId
            {
                workIdList += workLine.WorkId + ',';
            }
        }

        if (_shipmentTableArgs)
        {
            while select WorkId from workLine
                group by WorkId
                where workLine.ShipmentId == _shipmentTableArgs.ShipmentId
            {
                workidList += workLine.WorkId + ',';
            }
        }

        if (workIdList)
        {
            workIdList = subStr(workIdList, 0, strLen(workIdList) - 1);
        }

        return workIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceButton_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Handles when Source button is clicked for a work header record.
	/// </summary>
	/// <param name="_whsWorkTable">
	/// Work header record.
	/// </param>
    public void sourceButton_clicked(WHSWorkTable  _whsWorkTable)
    {
        WHSWorkOrderInterface workOrder = WHSWorkOrderInterface::createInstanceFromBuffer(_whsWorkTable);
        WhsWorkTransactionType::singletonFromTypeOrDefault(workOrder.parmWorkTransType()).openSourceOrderByWorkOrder(workOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHasOpenInitialPickLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the passed work has open initial pick lines.
    /// </summary>
    /// <param name = "_workTable">The work</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work has no open initial pick lines.
    /// </exception>
    [Hookable(false)]
    internal void validateWorkHasOpenInitialPickLines(WHSWorkTable _workTable)
    {
        if (!_workTable.hasOpenPickLinesPriorToFirstPut())
        {
            throw error(strFmt("@WAX:NoOpenInitialPickLines", _workTable.workId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWorkBeingSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to block the passed work for for splitting.
    /// </summary>
    /// <param name = "_workId">The id of the work that should be blocked</param>
    [Hookable(false)]
    internal void tryBlockWorkBeingSplit(WHSWorkId _workId)
    {
        WHSBlockWorkForSplit::tryBlockWorkBeingSplit(_workId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>