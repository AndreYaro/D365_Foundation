<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDisputeCustTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustDisputeCustTrans</c> class changes the status of the <c>CustDispute</c> records
///    associated with <c>CustTrans</c> records.
/// </summary>
class CustDisputeCustTrans
{
    CustTrans custTrans;

    CustCollectionsSetTransactionStatusContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the amount disputed or promised to pay
    /// </summary>
    /// <param name = "_amountCur"><c>AmountCur</c> the amount</param>
    /// <returns><c>AmountCur</c> disputed or promised</returns>
    public AmountCur parmAmountCur(AmountCur _amountCur = context.parmAmountCur())
    {
        if (!prmIsDefault(_amountCur))
        {
            context.parmAmountCur(_amountCur);
        }

        return context.parmAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFollowUpDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the follow up or promise to pay date
    /// </summary>
    /// <param name = "_followUpDate">The date to follow up</param>
    /// <returns><c>TransDate</c> to follow up on or the promise to pay date</returns>
    public TransDate parmFollowUpDate(TransDate _followUpDate = context.parmFollowUpDate())
    {
        if (!prmIsDefault(_followUpDate))
        {
            context.parmFollowUpDate(_followUpDate);
        }

        return context.parmFollowUpDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the user note for the dispute status
    /// </summary>
    /// <param name = "_note">The note to save on the disputestatus</param>
    /// <returns>The note saved on the dispute record</returns>
    public smmActivityUserMemo parmNote(smmActivityUserMemo _note = context.parmNote())
    {
        if (!prmIsDefault(_note))
        {
            context.parmNote(_note);
        }

        return context.parmNote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a task will be created
    /// </summary>
    /// <param name = "_createTask">True to create task</param>
    /// <returns>If a task is to be created</returns>
    public boolean parmCreateTask(boolean _createTask = context.parmCreateTask())
    {
        if (!prmIsDefault(_createTask))
        {
            context.parmCreateTask(_createTask);
        }

        return context.parmCreateTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an action will be recorded
    /// </summary>
    /// <param name = "_recordAction">True if an action will be recorded</param>
    /// <returns>If an aciton is to be recorded</returns>
    public boolean parmRecordAction(boolean _recordAction = context.parmRecordAction())
    {
        if (!prmIsDefault(_recordAction))
        {
            context.parmRecordAction(_recordAction);
        }

        return context.parmRecordAction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUserMemo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the use user memo field which determins if the default note or the users note is used
    /// </summary>
    /// <param name = "_useUserMemo">The value of useusermemo</param>
    /// <returns>True if use the users inputed memo; false to use default memo</returns>
    public boolean parmUseUserMemo(boolean _useUserMemo = context.parmUseUserMemo())
    {
        if (!prmIsDefault(_useUserMemo))
        {
            context.parmUseUserMemo(_useUserMemo);
        }

        return context.parmUseUserMemo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(CustTrans _custTrans, CustVendDisputeStatus _disputeStatus, ReasonCode _reasonCode, ReasonComment _reasonComment)
    {
        custTrans = _custTrans;

        context = CustCollectionsSetTransactionStatusContext::contruct();

        context.parmStatus(_disputeStatus);
        context.parmReasonCode(_reasonCode);
        context.parmReasonComment(_reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FormDataSource ds = FormDataUtil::getFormDataSource(custTrans);

        // When more than one transaction were selected/marked
        if (ds && ds.getFirst(true) && ds.getNext())
        {
            boolean disputeOrPromise = (context.parmStatus() == CustVendDisputeStatus::Disputed || context.parmStatus() == CustVendDisputeStatus::PromiseToPay);

            // When not Promise to pay, Promise to pay broken, or Disputed then the follow up date should be dateNull
            if (!(disputeOrPromise || context.parmStatus() == CustVendDisputeStatus::PromiseToPayBroken))
            {
                context.parmFollowUpDate(dateNull());
            }

            for (custTrans = ds.getFirst(true); custTrans; custTrans = ds.getNext())
            {
                // When disputed or promised to pay and multiple transactions are selected then the amount that is disputed or promised
                // is the remaining balance on the transactions
                context.parmAmountCur(disputeOrPromise ? custTrans.remainAmountCur() : 0.0);

                // Sets the note on the context to the memo that will be created for the activity when the status is changed
                context.parmNote(CustCollectionsSetTransactionStatusHelper::userMemo(context, custTrans.Voucher));

                // Updates the collections status for the <c>CustTrans</c> record based on the context
                CustDisputeCustTrans::disputeCustTrans(custTrans, context);
            }
        }
        else
        {
            // When only a single <c>CustTrans</c> is selected

            context.parmNote(CustCollectionsSetTransactionStatusHelper::userMemo(context, custTrans.Voucher));

            CustDisputeCustTrans::disputeCustTrans(custTrans, context);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustDisputeCustTrans construct(CustTrans _custTrans, CustVendDisputeStatus _disputeStatus, ReasonCode _reasonCode, ReasonComment _reasonComment)
    {
        return new CustDisputeCustTrans(_custTrans, _disputeStatus, _reasonCode, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contructFromContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new <c>CustDisputeCustTrans</c> from the <c>CustCollectionsSetTransactionStatusContext</c> passed in
    /// </summary>
    /// <param name = "_custTrans"><c>CustTrans</c> buffer</param>
    /// <param name = "_context"><c>CustCollectionsSetTransactionStatusContext</c> the context to initialize</param>
    /// <returns></returns>
    public static CustDisputeCustTrans contructFromContext(CustTrans _custTrans, CustCollectionsSetTransactionStatusContext _context)
    {
        CustDisputeCustTrans custDisputeCustTrans = new CustDisputeCustTrans(_custTrans, CustVendDisputeStatus::None, '', '');
        custDisputeCustTrans.parmContext(_context);
        return custDisputeCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContext</Name>
				<Source><![CDATA[
    public CustCollectionsSetTransactionStatusContext parmContext(CustCollectionsSetTransactionStatusContext _context = context)
    {
        if (!prmIsDefault(_context))
        {
            context = _context;
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disputeCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dispute status on the <c>CustTrans</c> record
    /// </summary>
    /// <param name = "_custTrans"><c>CustTrans</c> record to update the dispute status of</param>
    /// <param name = "_context">The <c>CustCollectionsSetTransactionStatusContext</c> to update the dispute values with</param>
    protected static void disputeCustTrans(CustTrans _custTrans, CustCollectionsSetTransactionStatusContext _context)
    {
        CustVendDisputeHelper helper = CustVendDisputeHelper::construct(_custTrans.company(), _custTrans.TableId, _custTrans.RecId);

        helper.setValuesByContext(_context);
        helper.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>