<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjReverseMarking</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjReverseMarking
{
/*    ProjInvoiceEmpl     projInvoiceEmpl;
    ProjInvoiceCost     projInvoiceCost;
    ProjInvoiceRevenue  projInvoiceRevenue;
    ProjInvoiceItem     projInvoiceItem;
    ProjInvoiceOnAcc    projInvoiceOnAcc;

    ProjEmplTrans       projEmplTrans;
    ProjCostTrans       projCostTrans;
    ProjRevenueTrans    projRevenueTrans;
    ProjItemTrans       projItemTrans;
    ProjOnAccTrans      projOnAccTrans;
*/

    ProjTransStatus     preProjTransStatus;
    ProjTransStatus     postProjTransStatus;
    boolean             projCreditInvoicing;

    TmpFrmVirtual       tmpFrmVirtual;
    List                list;
    Map                 updatedRecs;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doCreditInvoicing</Name>
				<Source><![CDATA[
    private void doCreditInvoicing(RefRecId _saleRefRecId,
                                   int      _tableId)
    {
        ProjInvoiceItemDetail           projInvoiceItemDetail;
        ProjInvoiceOnAccDetail          projInvoiceOnAccDetail;
        ProjInvoiceRevenueDetail        projInvoiceRevenueDetail;
        ProjInvoiceCostDetail           projInvoiceCostDetail;
        ProjInvoiceEmplDetail           projInvoiceEmplDetail;
        CustVendCreditInvoicingTable    custVendCreditInvoicingTable;

        ttsbegin;
        if (postProjTransStatus == ProjTransStatus::Invoiced)
        {
            switch (_tableId)
            {
                case tableNum(ProjInvoiceCostDetail):
                    select RecId, SaleRefRecId from projInvoiceCostDetail
                        where projInvoiceCostDetail.SaleRefRecId == _saleRefRecId;

                    if (projInvoiceCostDetail.SaleRefRecId)
                    {
                        select forupdate * from custVendCreditInvoicingTable
                            where custVendCreditInvoicingTable.RefRecId      == projInvoiceCostDetail.RecId
                               && custVendCreditInvoicingTable.RefTableId    == _tableId;

                        if (custVendCreditInvoicingTable)
                        {
                            custVendCreditInvoicingTable.delete();
                        }
                    }
                    break;

                case tableNum(ProjInvoiceEmplDetail):
                    select RecId, SaleRefRecId from projInvoiceEmplDetail
                        where projInvoiceEmplDetail.SaleRefRecId == _saleRefRecId;

                    if (projInvoiceEmplDetail.SaleRefRecId)
                    {
                        select forupdate * from custVendCreditInvoicingTable
                            where custVendCreditInvoicingTable.RefRecId      == projInvoiceEmplDetail.RecId
                               && custVendCreditInvoicingTable.RefTableId    == _tableId;

                        if (custVendCreditInvoicingTable)
                        {
                            custVendCreditInvoicingTable.delete();
                        }
                    }
                    break;

                case tableNum(ProjInvoiceItemDetail):
                    select RecId, SaleRefRecId from projInvoiceItemDetail
                        where projInvoiceItemDetail.SaleRefRecId == _saleRefRecId;

                    if (projInvoiceItemDetail.SaleRefRecId)
                    {
                        select forupdate * from custVendCreditInvoicingTable
                            where custVendCreditInvoicingTable.RefRecId      == projInvoiceItemDetail.RecId
                               && custVendCreditInvoicingTable.RefTableId    == _tableId;

                        if (custVendCreditInvoicingTable)
                        {
                            custVendCreditInvoicingTable.delete();
                        }
                    }
                    break;

                case tableNum(ProjInvoiceOnAccDetail):
                    select RecId, SaleRefRecId from projInvoiceOnAccDetail
                        where projInvoiceOnAccDetail.SaleRefRecId == _saleRefRecId;

                    if (projInvoiceOnAccDetail.SaleRefRecId)
                    {
                        select forupdate * from custVendCreditInvoicingTable
                            where custVendCreditInvoicingTable.RefRecId      == projInvoiceOnAccDetail.RecId
                               && custVendCreditInvoicingTable.RefTableId    == _tableId;

                        if (custVendCreditInvoicingTable)
                        {
                            custVendCreditInvoicingTable.delete();
                        }
                    }
                    break;

                case tableNum(ProjInvoiceRevenueDetail):
                    select RecId, SaleRefRecId from projInvoiceRevenueDetail
                        where projInvoiceRevenueDetail.SaleRefRecId == _saleRefRecId;

                    if (projInvoiceRevenueDetail.SaleRefRecId)
                    {
                        select forupdate * from custVendCreditInvoicingTable
                            where custVendCreditInvoicingTable.RefRecId      == projInvoiceRevenueDetail.RecId
                               && custVendCreditInvoicingTable.RefTableId    == _tableId;

                        if (custVendCreditInvoicingTable)
                        {
                            custVendCreditInvoicingTable.delete();
                        }
                    }
                    break;
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProjInvoiceCost</Name>
				<Source><![CDATA[
    void doProjInvoiceCost(
        RefRecId _saleRefRecId)
    {
        ProjCostTransSale   projCostTransSale;

        ttsbegin;

        projCostTransSale               = ProjCostTransSale::find(_saleRefRecId,true);
        this.getTransStatus(projCostTransSale.TransStatus);
        projCostTransSale.TransStatus   = postProjTransStatus;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdparameters_IN::checkTaxParameters())
        {
            if (postProjTransStatus == ProjTransStatus::MarkedCreditnote && projCostTransSale.TaxAsPerOriginalInvoice_IN)
            {
                projCostTransSale.ProjProposalId_IN = projCostTransSale.proposalId();
            }
            else
            {
                projCostTransSale.ProjProposalId_IN = '';
            }
        }
        // </GIN>

        projCostTransSale.update();
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.selectRetention(ProjProposalCostDetail::findActiveProposalId(_saleRefRecId),
                                 ProjCostTrans::find(projCostTransSale.TransId).psaContractLineNum,
                                 postProjTransStatus);
        }

        updatedRecs.insert(projCostTransSale.RecId,projCostTransSale);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProjInvoiceEmpl</Name>
				<Source><![CDATA[
    void doProjInvoiceEmpl(RefRecId  _saleRefRecId)
    {
        ProjEmplTransSale   projEmplTransSale;

        ttsbegin;

        projEmplTransSale               = ProjEmplTransSale::find(_saleRefRecId,true);
        this.getTransStatus(projEmplTransSale.TransStatus);
        projEmplTransSale.TransStatus   = postProjTransStatus;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdparameters_IN::checkTaxParameters())
        {
            if (postProjTransStatus == ProjTransStatus::MarkedCreditnote && projEmplTransSale.TaxAsPerOriginalInvoice_IN)
            {
                projEmplTransSale.ProjProposalId_IN = projEmplTransSale.proposalId();
            }
            else
            {
                projEmplTransSale.ProjProposalId_IN = '';
            }
        }
        // </GIN>

        projEmplTransSale.update();
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.selectRetention(ProjProposalEmplDetail::findActiveProposalId(_saleRefRecId),
                                 ProjEmplTrans::find(projEmplTransSale.TransId).psaContractLineNum,
                                 postProjTransStatus);
        }

        updatedRecs.insert(projEmplTransSale.RecId,projEmplTransSale);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProjInvoiceItem</Name>
				<Source><![CDATA[
    void doProjInvoiceItem(
        RefRecId _saleRefRecId)
    {
        ProjItemTransSale   projItemTransSale;

        ttsbegin;

        projItemTransSale               = ProjItemTransSale::find(_saleRefRecId,true);
        this.getTransStatus(projItemTransSale.TransStatus);
        projItemTransSale.TransStatus   = postProjTransStatus;
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdparameters_IN::checkTaxParameters())
        {
            if (postProjTransStatus == ProjTransStatus::MarkedCreditnote && projItemTransSale.TaxAsPerOriginalInvoice_IN)
            {
                projItemTransSale.ProjProposalId_IN = projItemTransSale.proposalId();
            }
            else
            {
                projItemTransSale.ProjProposalId_IN = '';
            }
        }
        // </GIN>

        projItemTransSale.update();
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.selectRetention(ProjProposalItemDetail::findActiveProposalId(_saleRefRecId),
                                 ProjItemTrans::find(projItemTransSale.ProjTransId).psaContractLineNum,
                                 postProjTransStatus);
        }

        updatedRecs.insert(projItemTransSale.RecId,projItemTransSale);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProjInvoiceOnAcc</Name>
				<Source><![CDATA[
    void doProjInvoiceOnAcc(
        RefRecId     _saleRefRecId)
    {
        ProjOnAccTransSale      projOnAccTransSale;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailCheck;

        ttsbegin;

        projOnAccTransSale               = ProjOnAccTransSale::find(_saleRefRecId,true);
        this.getTransStatus(projOnAccTransSale.TransStatus);
        projOnAccTransSale.TransStatus   = postProjTransStatus;
        if (projOnAccTransSale.TransStatus==ProjTransStatus::Invoiced)
        {
                select firstonly projInvoiceOnAccDetailCheck
                    where projInvoiceOnAccDetailCheck.SaleRefRecId == projOnAccTransSale.RecId
                    && projInvoiceOnAccDetailCheck.wipPeriod;
                if (projInvoiceOnAccDetailCheck)
                {
                    projOnAccTransSale.TransStatus = ProjTransStatus::Estimated;
                }
        }
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdparameters_IN::checkTaxParameters())
        {
            if (postProjTransStatus == ProjTransStatus::MarkedCreditnote && projOnAccTransSale.TaxAsPerOriginalInvoice_IN)
            {
                projOnAccTransSale.ProjProposalId_IN = projOnAccTransSale.proposalId();
            }
            else
            {
                projOnAccTransSale.ProjProposalId_IN = '';
            }
        }
        // </GIN>
        projOnAccTransSale.update();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.selectRetention(ProjProposalOnAccDetail::findActiveProposalId(_saleRefRecId),
                                 ProjOnAccTrans::find(projOnAccTransSale.TransId).psaContractLineNum,
                                 postProjTransStatus);
        }

        updatedRecs.insert(projOnAccTransSale.RecId,projOnAccTransSale);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProjInvoiceRevenue</Name>
				<Source><![CDATA[
    void doProjInvoiceRevenue(
        RefRecId _saleRefRecId)
    {
        ProjRevenueTransSale    projRevenueTransSale;

        ttsbegin;

        projRevenueTransSale               = ProjRevenueTransSale::find(_saleRefRecId,true);
        this.getTransStatus(projRevenueTransSale.TransStatus);
        projRevenueTransSale.TransStatus   = postProjTransStatus;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdparameters_IN::checkTaxParameters())
        {
            if (postProjTransStatus == ProjTransStatus::MarkedCreditnote && projRevenueTransSale.TaxAsPerOriginalInvoice_IN)
            {
                projRevenueTransSale.ProjProposalId_IN = projRevenueTransSale.proposalId();
            }
            else
            {
                projRevenueTransSale.ProjProposalId_IN = '';
            }
        }
        // </GIN>

        projRevenueTransSale.update();
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.selectRetention(ProjProposalRevenueDetail::findActiveProposalId(_saleRefRecId),
                                 ProjRevenueTrans::find(projRevenueTransSale.TransId).psaContractLineNum,
                                 postProjTransStatus);
        }

        updatedRecs.insert(projRevenueTransSale.RecId,projRevenueTransSale);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransStatus</Name>
				<Source><![CDATA[
    private void getTransStatus(ProjTransStatus _projTransStatus)
    {
        switch (_projTransStatus)
        {
            case ProjTransStatus::MarkedCreditnote:
                postProjTransStatus = ProjTransStatus::Invoiced;
                break;

            case ProjTransStatus::Invoiced:
            case ProjTransStatus::Estimated:
                postProjTransStatus  = ProjTransStatus::MarkedCreditnote;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(container  _listContainer)
    {
        if (_listContainer)
        {
            list        = List::create(_listContainer);
        }

        updatedRecs = new Map(Types::Int64,Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        ListIterator    li = new ListIterator(list);
        #ISOCountryRegionCodes

        projCreditInvoicing = true;

        li.begin();
        while (li.more())
        {
            tmpFrmVirtual = li.value();

            switch (tmpFrmVirtual.TableNum)
            {
                // project transactions
                case tableNum(ProjInvoiceEmplDetail) :
                    this.doProjInvoiceEmpl(tmpFrmVirtual.RefRecId);
                    break;

                case tableNum(ProjInvoiceCostDetail) :
                    this.doProjInvoiceCost(tmpFrmVirtual.RefRecId);
                    break;

                case tableNum(ProjInvoiceRevenueDetail) :
                    this.doProjInvoiceRevenue(tmpFrmVirtual.RefRecId);
                    break;

                case tableNum(ProjInvoiceItemDetail) :
                    this.doProjInvoiceItem(tmpFrmVirtual.RefRecId);
                    break;

                case tableNum(ProjInvoiceOnAccDetail) :
                    this.doProjInvoiceOnAcc(tmpFrmVirtual.RefRecId);
                    break;

                default:
                    throw error("@SYS50049");
            }

            if (projCreditInvoicing)
            {
                this.doCreditInvoicing(tmpFrmVirtual.RefRecId, tmpFrmVirtual.TableNum);
            }

            li.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRetention</Name>
				<Source><![CDATA[
    public void selectRetention(ProjProposalId _proposalId, PSAContractLineNum _psaContractLineNum, ProjTransStatus _transStatus)
    {
        ProjRevenueTransSale        projRevenueTransSale;
        ProjRevenueTransSale        projRevenueTransSaleLoc;
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;

        while select RecId from projProposalRevenueDetail
            join forupdate RecId, TransStatus from projRevenueTransSale
            where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
            join RecId from projProposalRevenue
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                   && projProposalRevenue.ProposalId == _proposalId
                   && projProposalRevenue.psaContractLineNum == _psaContractLineNum
                   && (projProposalRevenue.IsRetained == NoYes::Yes
                   || projProposalRevenue.IsReleased == NoYes::Yes)
        {
            select forupdate TransStatus from projRevenueTransSaleLoc
                where projRevenueTransSaleLoc.psaRefREcId == projRevenueTransSale.RecId;

            if (projRevenueTransSaleLoc)
            {
                if (projRevenueTransSaleLoc.TransStatus == ProjTransStatus::InvoiceProposal)
                {
                    throw error ("@PSA11367");
                }
                projRevenueTransSaleLoc.TransStatus = _transStatus;
                projRevenueTransSaleLoc.update();
                updatedRecs.insert(projRevenueTransSaleLoc.RecId, projRevenueTransSaleLoc);
            }
            projRevenueTransSale.TransStatus = _transStatus;
            projRevenueTransSale.update();
            updatedRecs.insert(projRevenueTransSale.RecId, projRevenueTransSale);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedPacks</Name>
				<Source><![CDATA[
    container updatedPacks()
    {
        return updatedRecs.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddTrans</Name>
				<Source><![CDATA[
    static boolean canAddTrans(ProjTransStatus transStatus)
    {
        if (transStatus != ProjTransStatus::MarkedCreditnote &&
            transStatus != ProjTransStatus::Invoiced         &&
            transStatus != ProjTransStatus::Estimated
           )
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransFromJournals</Name>
				<Source><![CDATA[
    static container getTransFromJournals(container conSet)
    {
        Set                 set;
        SetEnumerator       se;
        ProjInvoiceJour     projInvoiceJour;

        ProjInvoiceEmpl             projInvoiceEmpl;
        ProjInvoiceEmplDetail       projInvoiceEmplDetail;
        ProjInvoiceCost             projInvoiceCost;
        ProjInvoiceCostDetail       projInvoiceCostDetail;
        ProjInvoiceItem             projInvoiceItem;
        ProjInvoiceItemDetail       projInvoiceItemDetail;
        ProjInvoiceOnAcc            projInvoiceOnAcc;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;
        ProjInvoiceRevenue          projInvoiceRevenue;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;

        ProjEmplTransSale           projEmplTransSale;
        ProjCostTrans               projCostTrans;
        ProjCostTransSale           projCostTransSale;
        ProjItemTransSale           projItemTransSale;
        ProjOnAccTransSale          projOnAccTransSale;
        ProjRevenueTrans            projRevenueTrans;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjOnAccTrans              projOnAccTrans;

        // Output trans
        Set                 transSet             = new Set(Types::Record);

        if (conSet)
        {
            set = Set::create(conSet);
        }
        se = set.getEnumerator();

        while (se.moveNext())
        {
            projInvoiceJour = se.current();

            while select ProjInvoiceId, RecId from projInvoiceEmpl
                where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                join projInvoiceEmplDetail
                    where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                    join TransStatus, RecId from projEmplTransSale
                        where projEmplTransSale.RecId == projInvoiceEmplDetail.SaleRefRecId
            {
                if (ProjReverseMarking::canAddTrans(projEmplTransSale.TransStatus) && ! projInvoiceEmplDetail.RefRecId)
                {
                    transSet.add(projInvoiceEmplDetail);
                }
            }

            while select ProjInvoiceId, RecId from projInvoiceCost
                where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    join projInvoiceCostDetail
                         where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                        join TransStatus, TransId, RecId from projCostTransSale
                            where projCostTransSale.RecId == projInvoiceCostDetail.SaleRefRecId
                                join TransId, TransactionOrigin from projCostTrans
                                    where projCostTrans.TransId == projCostTransSale.TransId
                                        && projCostTrans.TransactionOrigin  != ProjOrigin::EstimateAccruedLoss
            {
                if (ProjReverseMarking::canAddTrans(projCostTransSale.TransStatus) && ! projInvoiceCostDetail.RefRecId)
                {
                    transSet.add(projInvoiceCostDetail);
                }
            }

            while select ProjInvoiceId, ItemType, RecId from projInvoiceItem
                where projInvoiceItem.ProjInvoiceId         == projInvoiceJour.ProjInvoiceId
                   && (projInvoiceItem.ItemType             == ProjItemType::Project
                   ||  projInvoiceItem.ItemType             == ProjItemType::InventJournal
                   ||  projInvoiceItem.ItemType             == ProjItemType::PurchOrder
                   ||  projInvoiceItem.ItemType             == ProjItemType::VendorInvoice
                   ||  projInvoiceItem.ItemType             == ProjItemType::Production
                   ||  projInvoiceItem.ItemType             == ProjItemType::ProdLine
                   ||  projInvoiceItem.ItemType             == ProjItemType::BeginningBalance
                   ||  projInvoiceItem.ItemType             == ProjItemType::SalesOrder
                      )
                join projInvoiceItemDetail
                    where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                    join TransStatus, RecId from projItemTransSale
                        where projItemTransSale.RecId == projInvoiceItemDetail.SaleRefRecId
            {
                    if (ProjReverseMarking::canAddTrans(projItemTransSale.TransStatus) && ! projInvoiceItemDetail.RefRecId)
                    {
                        transSet.add(projInvoiceItemDetail);
                    }
            }

            while select ProjInvoiceId, RecId from projInvoiceOnAcc
                where projInvoiceOnAcc.ProjInvoiceId        == projInvoiceJour.ProjInvoiceId
                    join projInvoiceOnAccDetail
                        where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                        join TransStatus, RecId from projOnAccTransSale
                            where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
                                join RecId,TransactionOrigin,PSAIsOnAccount from projOnAccTrans
                                    where projOnAccTrans.TransId == projOnAccTransSale.TransId
            {
                ProjInvoiceOnAcc projInvoiceOnAccLoc;

                if (ProjOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment && projOnAccTrans.PSAIsOnAccount == NoYes::Yes)
                {
                    ProjOnAccTrans projOnAccTransLoc;

                    select RecId from projInvoiceOnAccLoc
                        exists join TransId from projOnAccTransLoc
                            where projOnAccTransLoc.PSARefRecId == projOnAccTrans.RecId
                                && projInvoiceOnAccLoc.TransId == projOnAccTransLoc.TransId;
                }

                //If any reconciled record is found in cash advance then the record is not available for credit note
                if (!projInvoiceOnAccLoc.RecId)
                {
                    if (ProjReverseMarking::canAddTrans(projOnAccTransSale.TransStatus) && ! projInvoiceOnAccDetail.RefRecId)
                    {
                        transSet.add(projInvoiceOnAccDetail);
                    }
                }
            }

            // Revenue
            while select ProjInvoiceId, smaSubscriptionId, RecId from projInvoiceRevenue
                where projInvoiceRevenue.ProjInvoiceId      == projInvoiceJour.ProjInvoiceId
                    && projInvoiceRevenue.smaSubscriptionId  == ''
                    join projInvoiceRevenueDetail
                        where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                        join TransStatus, TransId, RecId from projRevenueTransSale
                            where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                                join TransId, TransactionOrigin from projRevenueTrans
                                    where projRevenueTrans.TransId == projRevenueTransSale.TransId
                                        && (projRevenueTrans.TransactionOrigin  == ProjOrigin::FeeJournal
                                        || projRevenueTrans.TransactionOrigin  == ProjOrigin::ProjAdvancedJournal
                                        || projRevenueTrans.TransactionOrigin  == ProjOrigin::FreeTextInvoice
                                        || projRevenueTrans.TransactionOrigin  == ProjOrigin::BeginningBalance)
            {
                if (ProjReverseMarking::canAddTrans(projRevenueTransSale.TransStatus) && ! projInvoiceRevenueDetail.RefRecId)
                {
                    transSet.add(projInvoiceRevenueDetail);
                }
            }

            // Subscription
            while select ProjInvoiceId, smaSubscriptionId, RecId from projInvoiceRevenue
                where projInvoiceRevenue.ProjInvoiceId      == projInvoiceJour.ProjInvoiceId
                   && projInvoiceRevenue.smaSubscriptionId  != ''
                    join projInvoiceRevenueDetail
                        where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                        join TransStatus, TransId, RecId from projRevenueTransSale
                            where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                                join TransId, TransactionOrigin from  projRevenueTrans
                                    where projRevenueTrans.TransId == projRevenueTransSale.TransId
                                        && projRevenueTrans.TransactionOrigin   == ProjOrigin::Subscription
            {
                if (ProjReverseMarking::canAddTrans(projRevenueTransSale.TransStatus) && ! projInvoiceRevenueDetail.RefRecId)
                {
                    transSet.add(projInvoiceRevenueDetail);
                }
            }
        }

        return transSet.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>