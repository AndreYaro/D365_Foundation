<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDeploymentHierarchyController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>RetailDeploymentHierarchyController</c> class is the AX controller class for the retail deployment hierarchy form.
/// </summary>
public class RetailDeploymentHierarchyController extends HierarchyDesignerBase
{
    Map                                     nodeMap;
    int64                                   rootNodeId;
    int64                                   maxNodeId;
    RetailDeploymentHierarchyUIInterface    ui;
    int64                                   prevSelectedNodeId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the last selected node
    /// </summary>
    public void editSelectedNode()
    {
        RetailDeploymentHierarchyNode node;
        Common record;

        if (nodeMap.exists(prevSelectedNodeId))
        {
            node = nodeMap.lookup(prevSelectedNodeId);
            record = this.getNodeRecordForNode(node);
            ui.showRecordForm(record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableInsertButtons</Name>
				<Source><![CDATA[
/// <summary>
    /// Enables or disable insert buttons.
    /// </summary>
    /// <param name="node">
    /// Node that was selected.
    /// </param>
    protected void enableInsertButtons(RetailDeploymentHierarchyNode node)
    {
        RetailDeploymentHierarchyNodeType type;
        boolean isDrilldown;

        type = node.parmNodeType();
        isDrilldown = node.parmIsDrilldownNode();

        ui.insertNewRTSButtonEnabled(false);
        ui.insertNewSynchServerButtonEnabled(false);
        ui.insertNewSynchClientButtonEnabled(false);
        ui.insertNewChannelDBButtonEnabled(false);
        ui.insertNewRetailServerButtonEnabled(false);
        ui.insertNewModernPOSButtonEnabled(false);
        ui.insertNewEPOSButtonEnabled(false);
        ui.insertNewHardwareStationButtonEnabled(false);

        switch (type)
        {
            case RetailDeploymentHierarchyNodeType::Organization :
                ui.insertButtonEnabled(false);
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewRTSButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewSynchServerButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewSynchClientButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewRetailServerButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewChannelDBButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewEPOSButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewModernPOSButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection :
                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    ui.insertButtonEnabled(true);
                    ui.insertNewHardwareStationButtonEnabled(true);
                }
                else
                {
                    ui.insertButtonEnabled(false);
                }
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService :
                ui.insertButtonEnabled(true);
                ui.insertNewEPOSButtonEnabled(true);
                ui.insertNewRetailServerButtonEnabled(true);
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService :
                ui.insertButtonEnabled(true);
                ui.insertNewSynchClientButtonEnabled(true);
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer :
                ui.insertButtonEnabled(true);
                ui.insertNewModernPOSButtonEnabled(true);
                ui.insertNewHardwareStationButtonEnabled(true);
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB :
                ui.insertButtonEnabled(true);
                ui.insertNewEPOSButtonEnabled(true);
                ui.insertNewRetailServerButtonEnabled(true);
                ui.insertNewSynchClientButtonEnabled(true);
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient :
                ui.insertButtonEnabled(false);
                break;

            case RetailDeploymentHierarchyNodeType::EPOS :
                ui.insertButtonEnabled(false);
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos :
                ui.insertButtonEnabled(false);
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStation :
                ui.insertButtonEnabled(true);
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemsEnabled</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets an array with the node IDs for which the menu items should be enabled.
    /// </summary>
    /// <param name="_nodeID">
    /// The ID of a node.
    /// </param>
    /// <returns>
    /// An Array with the node IDs for which the menu items should be enabled.
    /// </returns>
    /// <remarks>
    /// Used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c> class.
    /// </remarks>
    public Array getMenuItemsEnabled(int64 _nodeID)
    {
        // This method is not used by the locations view.
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNodeType type;
        boolean isDrilldown;
        Array menuItemsEn = new Array(Types::Integer);

        node = this.getNode(_nodeID);
        type = node.parmNodeType();
        isDrilldown = node.parmIsDrilldownNode();

        switch (type)
        {
            case RetailDeploymentHierarchyNodeType::Organization :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection :
                menuItemsEn.value(1, 0); // Edit

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(2, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(2, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(3, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(3, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(4, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(4, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(6, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(6, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(5, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(5, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(8, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(8, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(9, 0); // Insert New Hardware Station

                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(7, 1); // Insert New Real-time Service
                }
                else
                {
                    menuItemsEn.value(7, 0); // Insert New Real-time Service
                }

                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection :
                menuItemsEn.value(1, 0); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS

                if ( !isDrilldown ) //drilldown nodes should not be able to insert
                {
                    menuItemsEn.value(9, 1); // Insert New Hardware Station
                }
                else
                {
                    menuItemsEn.value(9, 0); // Insert New Hardware Station
                }
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 1); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 1); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 1); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service ****
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB ****
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 1); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 1); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 1); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 1); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 1); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service ****
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB ****
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::EPOS :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service ****
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB ****
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB
                menuItemsEn.value(6, 0); // Insert New Retail Server Service ****
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStation :
                menuItemsEn.value(1, 1); // Edit
                menuItemsEn.value(2, 0); // Insert New Real-time Service ****
                menuItemsEn.value(3, 0); // Insert New Synch Server Service
                menuItemsEn.value(4, 0); // Insert New Synch Client Service
                menuItemsEn.value(5, 0); // Insert New Channel DB ****
                menuItemsEn.value(6, 0); // Insert New Retail Server Service
                menuItemsEn.value(7, 0); // Insert New Modern Retail POS
                menuItemsEn.value(8, 0); // Insert New Retail POS
                menuItemsEn.value(9, 0); // Insert New Hardware Station
                break;
        }

        return menuItemsEn;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemText</Name>
				<Source><![CDATA[
/// <summary>
    ///    Gets the text to be displayed on the menu that corresponds to the menu item number.
    /// </summary>
    /// <param name="_menuItemNumber">
    ///    The ID of the menu item.
    /// </param>
    /// <returns>
    ///    The text to be displayed on the menu.
    /// </returns>
    /// <remarks>
    ///    This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    ///    class.
    /// </remarks>
    public str getMenuItemText(int _menuItemNumber)
    {
        // The right click menu is not used by the locations view
        switch (_menuItemNumber)
        {
            case 0:
                return "@SYS324673";
            case 1:
                return "@REX4161027";
            case 2:
                return "@REX4161028";
            case 3:
                return "@REX4161029";
            case 4:
                return "@REX4161030";
            case 5:
                return "@REX4161031";
            case 6:
                return "@REX4161032";
            case 7:
                return "@REX4161033";
            case 8:
                return "@SYP4910050";
            default:
                return "";
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNextNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available node ID.
    /// </summary>
    /// <returns>
    /// The next available node ID.
    /// </returns>
    protected int64 getNextNodeId()
    {
        maxNodeId++;
        if (rootNodeId==0) //If rootNodeId = 0, there are no nodes in the tree
        {
            rootNodeId = maxNodeId;
        }
        return maxNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the node from the node map.
    /// </summary>
    /// <param name="_id">
    /// The id of the node.
    /// </param>
    /// <returns>
    /// The node object.
    /// </returns>
    public RetailDeploymentHierarchyNode getNode(int64 _id)
    {
        RetailDeploymentHierarchyNode node;

        if (nodeMap.exists(_id))
        {
            node = nodeMap.lookup(_id);
        }
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name that must be displayed for the node.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID of the node for which to get the name.
    /// </param>
    /// <returns>
    /// The name of the node.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public str getNodeName(int64 _nodeId)
    {
        RetailDeploymentHierarchyNode node;
        node = this.getNode(_nodeId);

        if (node)
        {
            return node.parmNodeName();
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeRecordForNode</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the primary record that the node represents.
    /// </summary>
    /// <param name="_node">
    /// The node for which to get the record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The record that the node represents.
    /// </returns>
    protected Common getNodeRecordForNode(RetailDeploymentHierarchyNode _node, boolean _forupdate = false)
    {
        Common                          record;
        RetailDeploymentRTSProfile      rts;
        RetailCDXHeadOfficeProfile      sSrv;
        RetailCDXClientProfile          cdxC;
        RetailServerServiceProfile      rSrv;
        RetailChannelDatabaseProfiles   cdB;
        RetailModernPOSProfile          mpoS;
        RetailDeploymentPOSRegisters    epoS;
        RetailHardwareStationProfile    hw;

        //Drilldown's don't have records
        if (_node.parmIsDrilldownNode() == false)
        {
            switch (_node.parmNodeType())
            {
                case RetailDeploymentHierarchyNodeType::RealTimeService:

                    select firstonly rts
                        where rts.RecId == _node.parmRefRecId();

                    record = rts;
                    break;

                case RetailDeploymentHierarchyNodeType::SynchServerService:

                    select firstonly sSrv
                        where sSrv.RecId == _node.parmRefRecId();

                    record = sSrv;
                    break;

                case RetailDeploymentHierarchyNodeType::SynchClient:

                    select firstonly cdxC
                        where cdxC.RecId == _node.parmRefRecId();

                    record = cdxC;
                    break;

                case RetailDeploymentHierarchyNodeType::ChannelDB:

                    select firstonly cdB
                        where cdB.RecId == _node.parmRefRecId();

                    record = cdB;
                    break;

                case RetailDeploymentHierarchyNodeType::RetailServer:

                    select firstonly rSrv
                        where rSrv.RecId == _node.parmRefRecId();

                    record = rSrv;
                    break;

                case RetailDeploymentHierarchyNodeType::EPOS:

                    select firstonly epoS
                        where epoS.RecId == _node.parmRefRecId();

                    record = epoS;
                    break;

                case RetailDeploymentHierarchyNodeType::ModernPos:

                    select firstonly mpoS
                        where mpoS.RecId == _node.parmRefRecId();

                    record = mpoS;
                    break;

                case RetailDeploymentHierarchyNodeType::HardwareStation:

                    select firstonly hw
                        where hw.RecId == _node.parmRefRecId();

                    record = hw;
                    break;
            }
        }

        record.selectForUpdate(_forupdate);
        return record;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type ID of a node.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID of the node for which to get the type.
    /// </param>
    /// <returns>
    /// The node type ID.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public int getNodeType(int64 _nodeId)
    {
        RetailDeploymentHierarchyNode node;
        node = this.getNode(_nodeId);

        if (node)
        {
            return enum2int(node.parmNodeType());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeBorderColor</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the border color for the specified node type.
    /// </summary>
    /// <param name="_nodeTypeID">
    /// The ID of the node type.
    /// </param>
    /// <returns>
    /// A String with the hexadecimal code of the color.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public str getNodeTypeBorderColor(int64 _nodeTypeID)
    {
        #RetailDeploymentHierarchyDecls
        str color;

        switch (int642int(_nodeTypeId))
        {
            case RetailDeploymentHierarchyNodeType::Organization:
                color = #BlueBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection:
                color = #GreenBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService:
                color = #GreenBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection:
                color = #RedBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService:
                color = #RedBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient:
                color = #RedBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection:
                color = #RedBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection:
                color = #BlueBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB:
                color = #BlueBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection:
                color = #OrangeBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer:
                color = #OrangeBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection:
                color = #GreyBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos:
                color = #GreyBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection:
                color = #AzureBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::EPOS:
                color = #AzureBoarder;
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection:
            case RetailDeploymentHierarchyNodeType::HardwareStation:
                color = #GoldBorder;
                break;

            default:
                color = #WhiteBoarder;
        }

        return color;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeBottomGradientColor</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the bottom gradient color for the specified node type.
    /// </summary>
    /// <param name="_nodeTypeID">
    /// The ID of the node type.
    /// </param>
    /// <returns>
    /// A String with the hexadecimal code of the color.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public str getNodeTypeBottomGradientColor(int64 _nodeTypeID)
    {
        #RetailDeploymentHierarchyDecls
        str color;

        switch (int642int(_nodeTypeId))
        {
            case RetailDeploymentHierarchyNodeType::Organization:
                color = #BlueBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection:
                color = #GreenBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService:
                color = #GreenBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection:
                color = #RedBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService:
                color = #RedBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient:
                color = #RedBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection:
                color = #RedBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection:
                color = #BlueBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB:
                color = #BlueBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection:
                color = #OrangeBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer:
                color = #OrangeBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection:
                color = #GreyBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos:
                color = #GreyBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection:
                color = #AzureBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::EPOS:
                color = #AzureBottomGradient;
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection:
            case RetailDeploymentHierarchyNodeType::HardwareStation:
                color = #GoldBottomGradient;
                break;

            default:
                color = #WhiteBottomGradient;
        }

        return color;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeImage</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets an image to be displayed for the specified node type.
    /// </summary>
    /// <param name="_nodeTypeId">
    /// The ID of the node type.
    /// </param>
    /// <returns>
    /// An Array that represents the image.
    /// </returns>
    /// <remarks>
    /// This method is used by the HierarchyDesigner WPF form in a callback
    /// class.
    /// </remarks>
    public static Array getNodeTypeImage(int _nodeTypeId)
    {
        #RetailDeploymentHierarchyDecls
        Array array = new Array(Types::Integer);

        switch (_nodeTypeId)
        {
            case RetailDeploymentHierarchyNodeType::Organization:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#OrganizationImg));
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#RealTimeServiceImg));
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#RealTimeServiceImg));
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#SynchServerImg));
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#SynchServerImg));
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#SynchClientImg));
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#SynchClientImg));
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#ChannelDBImg));
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#ChannelDBImg));
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#RetailServerImg));
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#RetailServerImg));
                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#ModernPOSImg));
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#ModernPOSImg));
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#EPOSImg));
                break;

            case RetailDeploymentHierarchyNodeType::EPOS:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#EPOSImg));
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection:
            case RetailDeploymentHierarchyNodeType::HardwareStation:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#HardwareStationImg));
                break;

            default:
                array = OMImageResourceSerializer::getSerializedImageResource(resourceStr(#GenericImg));
        }

        return array;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeTopGradientColor</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the border color for the specified node type.
    /// </summary>
    /// <param name="_nodeTypeID">
    /// The ID of the node type.
    /// </param>
    /// <returns>
    /// A String with the hexadecimal code of the color.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public str getNodeTypeTopGradientColor(int64 _nodeTypeID)
    {
        #RetailDeploymentHierarchyDecls
        str color;

        switch (int642int(_nodeTypeId))
        {
            case RetailDeploymentHierarchyNodeType::Organization:
                color = #BlueTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection:
                color = #GreenTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService:
                color = #GreenTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection:
                color = #RedTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService:
                color = #RedTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient:
                color = #RedTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection:
                color = #RedTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection:
                color = #BlueTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB:
                color = #BlueTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection:
                color = #OrangeTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer:
                color = #OrangeTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection:
                color = #GreyTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos:
                color = #GreyTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection:
                color = #AzureTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::EPOS:
                color = #AzureTopGradient;
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection:
            case RetailDeploymentHierarchyNodeType::HardwareStation:
                color = #GoldTopGradient;
                break;

            default:
                color = #WhiteTopGradient;
        }

        return color;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfMenuItems</Name>
				<Source><![CDATA[
/// <summary>
    /// Returns the maximum number of menu items possible.
    /// </summary>
    /// <returns>
    /// The maximum number of menu items.
    /// </returns>
    public int getNumberOfMenuItems()
    {
        return 9;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getParentID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of a nodes parent node.
    /// </summary>
    /// <param name="_id">
    /// The ID of the node for which to get the parent.
    /// </param>
    /// <returns>
    /// The ID of the parent node.
    /// </returns>
    /// <remarks>
    /// This method is used by the Hierarchy Designer WPF form
    /// class.
    /// </remarks>
    public int64 getParentID(int64 _id)
    {
        RetailDeploymentHierarchyNode node;
        node = this.getNode(_id);

        if (node)
        {
            return node.parmParentNodeId();
        }

        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the root node.
    /// </summary>
    /// <returns>
    /// The ID of the root node.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public int64 getRootID()
    {
        return rootNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently selected node
    /// </summary>
    /// <returns>
    /// The currently selected node
    /// </returns>
    public RetailDeploymentHierarchyNode getSelectedNode()
    {
        return this.getNode(prevSelectedNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAsParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the given parent-child relationship is valid.
    /// </summary>
    /// <param name="_child">
    /// The ID of the child node.
    /// </param>
    /// <param name="_parent">
    /// The ID of the parent node.
    /// </param>
    /// <returns>
    /// true if the parent-child relationship is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public boolean hasAsParent(int64 _child, int64 _parent)
    {
        RetailDeploymentHierarchyNode node;

        if (nodeMap.exists(_child))
        {
            node = nodeMap.lookup(_child);
            if (node.parmParentNodeId() == _parent)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the class.
    /// </summary>
    public void init()
    {
        rootNodeId = 0;
        maxNodeId = 0;
        nodeMap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new node into the UI.
    /// </summary>
    /// <param name="newNodeType">
    /// The type of the new node.
    /// </param>
    /// <param name="fromNode">
    /// The parent node.
    /// </param>
    public void insertNewNode(RetailDeploymentHierarchyNodeType newNodeType, RetailDeploymentHierarchyNode fromNode = this.getSelectedNode())
    {
        RetailDeploymentHierarchyNode realFromNode;
        boolean passFrom;

        realFromNode = fromNode;
        passFrom = false;

        //we may have hit an artificial node,
        if (fromNode.isArtificalNode())
        {
            //if parent node is "Organization" than this is global add and fromNode is not used
            //otherwise need to go up one level
            if (this.getNodeType(fromNode.parmParentNodeId()) !=  RetailDeploymentHierarchyNodeType::Organization)
            {
                realFromNode = this.getNode(fromNode.parmParentNodeId());

                //in the explore view, we may be in drilldowns (although adding from drilldowns should not be allowed)
                if ( !realFromNode.isArtificalNode() )
                {
                    passFrom = true;
                }
            }
        }
        else
        {
            passFrom = true;
        }

        if (realFromNode.isArtificalNode() || RetailDeploymentHierarchyHelpers::doesRecordExistInAx(realFromNode.parmRefRecId(), realFromNode.parmNodeType()))
        {
            ui.insertNewNode(newNodeType, realFromNode, passFrom);
        }
        else
        {
            info("@REX4161128");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewNodeAndUpdateParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a node into the internal map and updates the parent node to point to the child.
    /// </summary>
    /// <param name="_node">
    /// The node to insert.
    /// </param>
    /// <param name="_parentNode">
    /// The parent node of the node; optional.
    /// </param>
    protected void insertNewNodeAndUpdateParent(RetailDeploymentHierarchyNode _node, RetailDeploymentHierarchyNode _parentNode = null)
    {
        nodeMap.insert(_node.parmId(), _node);
        if (_parentNode)
        {
            _parentNode.addChild(_node.parmId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewNodeArrayAndUpdateParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an array of nodes into the internal map and updates the parent node to point to the child.
    /// </summary>
    /// <param name="_nodes">
    /// The nodes to insert.
    /// </param>
    /// <param name="_parentNode">
    /// The parent node of the nodes; optional.
    /// </param>
    protected void insertNewNodeArrayAndUpdateParent(Array _nodes, RetailDeploymentHierarchyNode _parentNode = null)
    {
        int i;
        for (i = 1; i <= _nodes.lastIndex(); i++)
        {
            this.insertNewNodeAndUpdateParent(_nodes.value(i), _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeMenuItemAction</Name>
				<Source><![CDATA[
/// <summary>
    /// Invokes the menu item specified for the menu number.
    /// </summary>
    /// <param name="nodeID">
    /// The id of the node that was clicked.
    /// </param>
    /// <param name="iMenuItemNumber">
    /// The menu item number that was chosen.
    /// </param>
    /// <param name="iSubMenuItemNumber">
    /// The sub-menu item that was chosen if any.
    /// </param>
    public void invokeMenuItemAction(int64 nodeID, int iMenuItemNumber, int iSubMenuItemNumber)
    {
        RetailDeploymentHierarchyNode node;
        node = this.getNode(nodeID);

        switch (iMenuItemNumber)
        {
            case 0: //Edit
                this.reportNodeDoubleClick(nodeId);
                break;

            case 1: //Insert New Real-time Service
                this.insertNewNode(RetailDeploymentHierarchyNodeType::RealTimeService, node);
                break;

            case 2: //Insert New Synch Server Service
                this.insertNewNode(RetailDeploymentHierarchyNodeType::SynchServerService, node);
                break;

            case 3: //Insert New Synch Client Service
                this.insertNewNode(RetailDeploymentHierarchyNodeType::SynchClient, node);
                break;

            case 4: //Insert New Channel DB
                this.insertNewNode(RetailDeploymentHierarchyNodeType::ChannelDB, node);
                break;

            case 5: //Insert New Retail Server Service
                this.insertNewNode(RetailDeploymentHierarchyNodeType::RetailServer, node);
                break;

            case 6: //Insert New Modern Retail POS
                this.insertNewNode(RetailDeploymentHierarchyNodeType::ModernPos, node);
                break;

            case 7: //Insert New Retail POS
                this.insertNewNode(RetailDeploymentHierarchyNodeType::EPOS, node);
                break;

            case 8: //Insert New Hardware Station
                this.insertNewNode(RetailDeploymentHierarchyNodeType::HardwareStation, node);
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmUI</Name>
				<Source><![CDATA[
    public RetailDeploymentHierarchyUIInterface parmUI(RetailDeploymentHierarchyUIInterface _ui = ui)
    {
        ui = _ui;
        return ui;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures a new instance of the <c>RetailDeploymentHierarchyController</c> class.  Does what a parameterized constructor should do.
    /// </summary>
    /// <param name="_ui">
    /// An instance of the UI interface.
    /// </param>
    public void postConstruct(RetailDeploymentHierarchyUIInterface _ui)
    {
        this.parmUI(_ui);
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportNodeDoubleClick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports that a node has been double-clicked.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID of the clicked node.
    /// </param>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public void reportNodeDoubleClick(int64 _nodeId)
    {
        RetailDeploymentHierarchyNode node;
        Common record;

        if (nodeMap.exists(_nodeId))
        {
            node = nodeMap.lookup(_nodeId);

            if (!node.isArtificalNode())
            {
                if (RetailDeploymentHierarchyHelpers::doesRecordExistInAx(node.parmRefRecId(), node.parmNodeType()))
                {
                    record = this.getNodeRecordForNode(node);
                    ui.showRecordForm(record);
                }
                else
                {
                    info("@REX4161128");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles when a node is selected in the UI.
    /// </summary>
    /// <param name="_id">
    /// The id of the node that was selected.
    /// </param>
    public void reportSelectedNode(int64 _id)
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNodeType nodeType;
        Common record;

        //update buttons & preview pane
        if (nodeMap.exists(_id))
        {
            node = nodeMap.lookup(_id);
            nodeType = node.parmNodeType();

            //update preview pane
            record = this.getNodeRecordForNode(node);
            ui.activeRecordChanged(record, (node.parmIsDrilldownNode() || node.isArtificalNode()), node.isContainerNode(), node.parmNodeName(), node.parmContextStr(), node.parmNumContained());

            ui.editButtonEnable( !(node.isArtificalNode()) && node.parmIsDrilldownNode() == false );

            ui.focusOnButtonEnabled( !(node.isArtificalNode()) && node.parmIsDrilldownNode() == false);

            this.enableInsertButtons(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a node ID is valid.
    /// </summary>
    /// <param name="_id">
    /// The node ID to check.
    /// </param>
    /// <returns>
    /// true if the node is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public boolean validNode(int64 _id)
    {
        return nodeMap.exists(_id);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>