<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLPReceiveLicensePlateLabelBuildWithoutWork</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSLPReceiveLicensePlateLabelBuildWithoutWork extends WHSLicensePlateLabelBuildWithoutWork
{
    private WHSUOMStructure uomStructure;
    private WHSShipmentTable shipmentTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return uomStructure.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderNum</Name>
				<Source><![CDATA[
    protected WHSOrderNum orderNum()
    {
        if (shipmentTable.OrderNum)
        {
            return shipmentTable.OrderNum;
        }

        return WHSLoadTable::find(shipmentTable.LoadId).OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum</Name>
				<Source><![CDATA[
    protected AccountNum accountNum()
    {
        return shipmentTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseOnLabel</Name>
				<Source><![CDATA[
    protected void setWarehouseOnLabel()
    {
        label.InventSiteId = shipmentTable.InventSiteId;
        label.InventLocationId = shipmentTable.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    internal void initFromParameters(WHSLicensePlateLabelBuildWithoutWorkParameters _parameters)
    {
        super(_parameters);
        uomStructure = orderLine as WHSUOMStructure;
        shipmentTable = WHSShipmentTable::find(uomStructure.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNestedLicensePlateLabelsWithUOMStructure</Name>
				<Source><![CDATA[
    internal void buildNestedLicensePlateLabelsWithUOMStructure(WHSUOMStructure _uomStructure)
    {
        if (WHSLicensePlate::exist(_uomStructure.LicensePlateId))
        {
            RecordInsertList recordInsertList = new RecordInsertList(tableNum(WHSLicensePlateLabel));

            this.initializeLicensePlateLabelFromUOMStructure(uomStructure);
            label.LicensePlateId = _uomStructure.LicensePlateId;
            recordInsertList.add(label);

            if (_uomStructure.HasPacks && !_uomStructure.LicensePlateParent)
            {
                WHSUOMStructure childUOMStructure;

                while select LicensePlateId from childUOMStructure
                    where childUOMStructure.LicensePlateParent == _uomStructure.LicensePlateId
                        && childUOMStructure.Module == _uomStructure.Module
                        && childUOMStructure.ShipmentId == _uomStructure.ShipmentId
                {
                    this.initializeLicensePlateLabelFromUOMStructure(childUOMStructure);
                    recordInsertList.add(label);
                }
            }

            recordInsertList.insertDatabase();
        }

        if (!WHSDeferredReceivingSkipPrintContext::skipPrint())
        {
            this.printLabel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLicensePlateLabelFromUOMStructure</Name>
				<Source><![CDATA[
    private void initializeLicensePlateLabelFromUOMStructure(WHSUOMStructure _uomStructure)
    {
        label.clear();
        label.setLabelId();
        label.UserId = userId;
        label.OrderNum = this.orderNum();
        label.LicensePlateId = _uomStructure.LicensePlateId;

        if (WHSDeferredReceivingPrintLabelFlight::instance().isEnabled())
        {
            label.WorkTransType = this.workTransType();
        }

        this.setWarehouseOnLabel();

        if (shipmentTable.LoadId)
        {
            label.CarrierCode = this.getCarrierCode(shipmentTable.LoadId);
        }

        if (shipmentTable.ShipmentId)
        {
            label.ProNum = this.getProNum(shipmentTable.ShipmentId);
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>