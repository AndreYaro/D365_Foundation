<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjOnAccountProjContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for ProjListProjOnAccountProj SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the ProjListProjOnAccountProj SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(ProjListProjOnAccountProjUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class ProjListProjOnAccountProjContract implements SysOperationValidatable,SysOperationInitializable
{
    boolean    timeMaterial;
    boolean    fixedPrice;
    boolean    timeMaterialBillingMethod;
    boolean    fixedPriceBillingMethod;
    TransDate  projFromDate;
    TransDate  projToDate;
    TransDate  ledgerFromDate;
    TransDate  ledgerToDate;
    TransDate  ledgerFromDate1;
    TransDate  ledgerToDate1;
    TransDate  projBreakDate;
    TransDate  ledgerBreakDate;
    ProjListColumnData    actualVsBudget;
    projActualVsBudget     actualVsBudget2Col;
    ProjForecastModelId    forecastModelId;
    ProjListStateProjType    stateProjType;
    Level    level;
    boolean    skipBlankId;
    boolean    skipZero;
    ProjShowAmount    showAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for parameters.
    /// </summary>
    public void initialize()
    {
        this.parmLevel(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualVsBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter actualVsBudget.
    /// </summary>
    /// <param name="_actualVsBudget">
    /// The new value of the datacontract parameter actualVsBudget; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter actualVsBudget
    /// </returns>
    [
        DataMemberAttribute('ActualVsBudget'),
        SysOperationLabelAttribute(literalstr("@SYS82685")),
        SysOperationHelpTextAttribute(literalstr("@SYS90657"))
    ]
    public ProjListColumnData parmActualVsBudget(ProjListColumnData _actualVsBudget = actualVsBudget)
    {
        actualVsBudget = _actualVsBudget;
        return actualVsBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualVsBudget2Col</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter actualVsBudget2Col.
    /// </summary>
    /// <param name="_actualVsBudget2Col">
    /// The new value of the datacontract parameter actualVsBudget2Col; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter actualVsBudget2Col
    /// </returns>
    [
        DataMemberAttribute('ActualVsBudget2Col'),
        SysOperationLabelAttribute(literalstr("@SYS82685")),
        SysOperationHelpTextAttribute(literalstr("@SYS90657"))
    ]
    public projActualVsBudget parmActualVsBudget2Col(projActualVsBudget _actualVsBudget2Col = actualVsBudget2Col)
    {
        actualVsBudget2Col = _actualVsBudget2Col;
        return actualVsBudget2Col;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fixedPrice.
    /// </summary>
    /// <param name="_fixedPrice">
    /// The new value of the datacontract parameter fixedPrice; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fixedPrice
    /// </returns>
    [
        DataMemberAttribute('FixedPrice'),
        SysOperationLabelAttribute(literalstr("@SYS3237")),
        SysOperationHelpTextAttribute(literalstr("@SYS78361"))
    ]
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;
        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPriceBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FixedPriceBillingMethod.
    /// </summary>
    /// <param name="_fixedPriceBillingMethod">
    /// The new value of the datacontract parameter FixedPriceBillingMethod; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FixedPriceBillingMethod
    /// </returns>
    [
        DataMemberAttribute('FixedPriceBillingMethod'),
        SysOperationLabelAttribute(literalStr("@SYS3237")),
        SysOperationHelpTextAttribute(literalStr("@Proj:FixedPriceBillingMethodHelp"))
    ]
    public boolean parmFixedPriceBillingMethod(boolean _fixedPriceBillingMethod = fixedPriceBillingMethod)
    {
        fixedPriceBillingMethod = _fixedPriceBillingMethod;
        return fixedPriceBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter forecastModelId.
    /// </summary>
    /// <param name="_forecastModelId">
    /// The new value of the datacontract parameter forecastModelId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter forecastModelId
    /// </returns>
    [
        DataMemberAttribute('ForecastModelId'),
        SysOperationLabelAttribute(literalstr("@SYS82923")),
        SysOperationHelpTextAttribute(literalstr("@SYS90481"))
    ]
    public ProjForecastModelId parmForecastModelId(ProjForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerBreakDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerBreakDate.
    /// </summary>
    /// <param name="_ledgerBreakDate">
    /// The new value of the datacontract parameter ledgerBreakDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerBreakDate
    /// </returns>
    [
        DataMemberAttribute('LedgerBreakDate'),
        SysOperationLabelAttribute(literalstr("@SYS83773")),
        SysOperationHelpTextAttribute(literalstr("@SYS90526"))
    ]
    public TransDate parmLedgerBreakDate(TransDate _ledgerBreakDate = ledgerBreakDate)
    {
        ledgerBreakDate = _ledgerBreakDate;
        return ledgerBreakDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerFromDate.
    /// </summary>
    /// <param name="_ledgerFromDate">
    /// The new value of the datacontract parameter ledgerFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerFromDate
    /// </returns>
    [
        DataMemberAttribute('LedgerFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS24050")),
        SysOperationHelpTextAttribute(literalstr("@SYS90469"))
    ]
    public TransDate parmLedgerFromDate(TransDate _ledgerFromDate = ledgerFromDate)
    {
        ledgerFromDate = _ledgerFromDate;
        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerFromDate1.
    /// </summary>
    /// <param name="_ledgerFromDate1">
    /// The new value of the datacontract parameter ledgerFromDate1; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerFromDate1
    /// </returns>
    [
        DataMemberAttribute('LedgerFromDate1'),
        SysOperationLabelAttribute(literalstr("@SYS24050")),
        SysOperationHelpTextAttribute(literalstr("@SYS90469"))
    ]
    public TransDate parmLedgerFromDate1(TransDate _ledgerFromDate1 = ledgerFromDate1)
    {
        ledgerFromDate1 = _ledgerFromDate1;
        return ledgerFromDate1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerToDate.
    /// </summary>
    /// <param name="_ledgerToDate">
    /// The new value of the datacontract parameter ledgerToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerToDate
    /// </returns>
    [
        DataMemberAttribute('LedgerToDate'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS90470"))
    ]
    public TransDate parmLedgerToDate(TransDate _ledgerToDate = ledgerToDate)
    {
        ledgerToDate = _ledgerToDate;
        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerToDate1.
    /// </summary>
    /// <param name="_ledgerToDate1">
    /// The new value of the datacontract parameter ledgerToDate1; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerToDate1
    /// </returns>
    [
        DataMemberAttribute('LedgerToDate1'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS90470"))
    ]
    public TransDate parmLedgerToDate1(TransDate _ledgerToDate1 = ledgerToDate1)
    {
        ledgerToDate1 = _ledgerToDate1;
        return ledgerToDate1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter level.
    /// </summary>
    /// <param name="_level">
    /// The new value of the datacontract parameter level; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter level
    /// </returns>
    [
        DataMemberAttribute('Level'),
        SysOperationLabelAttribute(literalstr("@SYS90474")),
        SysOperationHelpTextAttribute(literalstr("@SYS90477"))
    ]
    public Level parmLevel(Level _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBreakDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projBreakDate.
    /// </summary>
    /// <param name="_projBreakDate">
    /// The new value of the datacontract parameter projBreakDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projBreakDate
    /// </returns>
    [
        DataMemberAttribute('ProjBreakDate'),
        SysOperationLabelAttribute(literalstr("@SYS83773")),
        SysOperationHelpTextAttribute(literalstr("@SYS90526"))
    ]
    public TransDate parmProjBreakDate(TransDate _projBreakDate = projBreakDate)
    {
        projBreakDate = _projBreakDate;
        return projBreakDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projFromDate.
    /// </summary>
    /// <param name="_projFromDate">
    /// The new value of the datacontract parameter projFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projFromDate
    /// </returns>
    [
        DataMemberAttribute('ProjFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS24050")),
        SysOperationHelpTextAttribute(literalstr("@SYS90467"))
    ]
    public TransDate parmProjFromDate(TransDate _projFromDate = projFromDate)
    {
        projFromDate = _projFromDate;
        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projToDate.
    /// </summary>
    /// <param name="_projToDate">
    /// The new value of the datacontract parameter projToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projToDate
    /// </returns>
    [
        DataMemberAttribute('ProjToDate'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS90468"))
    ]
    public TransDate parmProjToDate(TransDate _projToDate = projToDate)
    {
        projToDate = _projToDate;
        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter showAmount.
    /// </summary>
    /// <param name="_showAmount">
    /// The new value of the datacontract parameter showAmount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter showAmount
    /// </returns>
    [
        DataMemberAttribute('ShowAmount'),
        SysOperationLabelAttribute(literalstr("@SYS91075")),
        SysOperationHelpTextAttribute(literalstr("@SYS91339"))
    ]
    public ProjShowAmount parmShowAmount(ProjShowAmount _showAmount = showAmount)
    {
        showAmount = _showAmount;
        return showAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipBlankId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter skipBlankId.
    /// </summary>
    /// <param name="_skipBlankId">
    /// The new value of the datacontract parameter skipBlankId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter skipBlankId
    /// </returns>
    [
        DataMemberAttribute('SkipBlankId'),
        SysOperationLabelAttribute(literalstr("@SYS91206")),
        SysOperationHelpTextAttribute(literalstr("@SYS91208"))
    ]
    public boolean parmSkipBlankId(boolean _skipBlankId = skipBlankId)
    {
        skipBlankId = _skipBlankId;
        return skipBlankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter skipZero.
    /// </summary>
    /// <param name="_skipZero">
    /// The new value of the datacontract parameter skipZero; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter skipZero
    /// </returns>
    [
        DataMemberAttribute('SkipZero'),
        SysOperationLabelAttribute(literalstr("@SYS19052")),
        SysOperationHelpTextAttribute(literalstr("@SYS90472"))
    ]
    public boolean parmSkipZero(boolean _skipZero = skipZero)
    {
        skipZero = _skipZero;
        return skipZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateProjType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter stateProjType.
    /// </summary>
    /// <param name="_stateProjType">
    /// The new value of the datacontract parameter stateProjType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter stateProjType
    /// </returns>
    [
        DataMemberAttribute('StateProjType'),
        SysOperationLabelAttribute(literalstr("@SYS75799")),
        SysOperationHelpTextAttribute(literalstr("@SYS90476"))
    ]
    public ProjListStateProjType parmStateProjType(ProjListStateProjType _stateProjType = stateProjType)
    {
        stateProjType = _stateProjType;
        return stateProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter timeMaterial.
    /// </summary>
    /// <param name="_timeMaterial">
    /// The new value of the datacontract parameter timeMaterial; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter timeMaterial
    /// </returns>
    [
        DataMemberAttribute('TimeMaterial'),
        SysOperationLabelAttribute(literalstr("@SYS53874")),
        SysOperationHelpTextAttribute(literalstr("@SYS78362"))
    ]
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;
        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterialBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TimeMaterialBillingMethod.
    /// </summary>
    /// <param name="_timeMaterialBillingMethod">
    /// The new value of the datacontract parameter TimeMaterialBillingMethod; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter TimeMaterialBillingMethod
    /// </returns>
    [
        DataMemberAttribute('TimeMaterialBillingMethod'),
        SysOperationLabelAttribute(literalStr("@SYS53874")),
        SysOperationHelpTextAttribute(literalStr("@Proj:TimeMaterialBillingMethodHelp"))
    ]
    public boolean parmTimeMaterialBillingMethod(boolean _timeMaterialBillingMethod = timeMaterialBillingMethod)
    {
        timeMaterialBillingMethod = _timeMaterialBillingMethod;
        return timeMaterialBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(this.parmFixedPrice() || this.parmTimeMaterial()))
        {
            isValid = checkFailed("@SYS91026");
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
            && !(this.parmTimeMaterialBillingMethod() ||
                this.parmFixedPriceBillingMethod()))
        {
            isValid = checkFailed("@Proj:BillingMethodIsEmptyError");
        }

        if (this.parmActualVsBudget() == ProjListColumnData::Budget)
        {
            if (! this.parmForecastModelId())
            {
                isValid = checkFailed("@SYS87707");
            }
        }

        if ((this.parmActualVsBudget2Col() == projActualVsBudget::Sum_)
            && (
                (this.parmProjBreakDate() < this.parmProjFromDate() || (this.parmProjToDate() && this.parmProjBreakDate() > this.parmProjToDate()))
                || (this.parmLedgerBreakDate() < this.parmLedgerFromDate() || (this.parmLedgerToDate() && this.parmLedgerBreakDate() > this.parmLedgerToDate()))
            )
        )
        {
            // Break date falls outside date interval and actualvsbudget::sum is selected.
            isValid = checkFailed("@SYS90850");
        }

        if ((this.parmProjFromDate() > this.parmProjToDate() && this.parmProjToDate()) || (this.parmLedgerFromDate() > this.parmLedgerToDate() && this.parmLedgerToDate()))
        {
            // Invalid date interval
            isValid = checkFailed("@SYS91020");
        }

        if ((this.parmLedgerFromDate1() > this.parmLedgerToDate1() && this.parmLedgerToDate1()) || (this.parmLedgerFromDate() > this.parmLedgerToDate() && this.parmLedgerToDate()) )
        {
            // Invalid date interval
            isValid = checkFailed("@SYS91020");
        }

        if (this.parmLevel() < 0)
        {
            isValid = checkFailed("@SYS104023");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>