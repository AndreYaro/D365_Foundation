<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSAD</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSAD</c> class is the tax calculation class for SAD document.
/// </summary>
class TaxSAD extends Tax
{
    PlCustVendAccount custVendAccount_PL;
    private SADCalcTax sadCalcTax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates tax amount for SAD documents.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding the use tax.
    /// </returns>
    public TaxAmountCur calc()
    {
        taxModuleType = TaxModuleType::Purch;
        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::SADDocument))
        {
            return this.calcUsingTaxIntegration();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegration</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegration()
    {
        TaxIntegrationDocumentObject document = TaxIntegrationDocumentObject::constructWithRecord(sadCalcTax.getSource());

        this.setFieldsForLegacyTax();
        this.setFieldsForTaxIntegrationDocumentObject(document);
        TaxIntegrationFacade::calculate(document);
        amountExclTaxMap = document.getAmountExcludingTax();

        if (this.parmUseTaxExchangeRate()
            && TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::SADDocument))
        {
            this.calculateBankTaxExchangeRate();
        }
        return this.totalTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for legacy tax.
    /// </summary>
    /// <remarks>
    /// This method is called by calcUsingTaxIntegration().
    /// </remarks>
    protected void setFieldsForLegacyTax()
    {
        container vatRegDataContainer = sadCalcTax.vatRegData_W();
        this.parmVatRegData_W(vatRegDataContainer);
        // Use a fixed number here to avoid improper use.
        this.custVendAccount_PL = conPeek(vatRegDataContainer, 9);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccount_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer/vendor account.
    /// </summary>
    public PlCustVendAccount getCustVendAccount_PL()
    {
        return this.custVendAccount_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBankTaxExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate amount for bank exchange rate.
    /// </summary>
    private void calculateBankTaxExchangeRate()
    {
        this.initTaxTransactionExchangeRate();
        this.calculateTaxDifferenceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize default tax exchange rate.
    /// </summary>
    protected void initTaxTransactionExchangeRate()
    {
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            VatDueDate_W vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(sadCalcTax.tableId(), sadCalcTax.recID());

            if (!vatDueDate)
            {
                vatDueDate = sadCalcTax.taxDate();
            }

            if (!vatDueDate)
            {
                vatDueDate = this.parmTaxDate();
            }

            TaxSpecificExchangeRateHelper taxSpecificExchangeRateHelper = new TaxSpecificExchangeRateHelper(
                sadCalcTax.tableId(),
                sadCalcTax.recID(),
                TransactionType::Purchase,
                this.getTransactionalCurrency(),
                vatDueDate);

            taxSpecificExchangeRateHelper.maintainAccountingCurrencyTaxSpecificExchangeRate();
            taxSpecificExchangeRateHelper.maintainReportingCurrencyTaxSpecificExchangeRate();

            TmpTaxWorkTrans localTaxWorkTrans;
            localTaxWorkTrans.setTmpData(taxWorkTrans);

            while select CurrencyCode from localTaxWorkTrans
                    group by localTaxWorkTrans.CurrencyCode
            {
                taxSpecificExchangeRateHelper.maintainTaxSpecificExchangeRate(localTaxWorkTrans.CurrencyCode);
            }
        }
        else
        {
            SalesTaxTransactionExchangeRate taxExchRate = SalesTaxTransactionExchangeRate::findBySourceRecord(this.headingTableId(), this.headingRecId());
            if (!taxExchRate)
            {
                SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(
                    sadCalcTax.getSource(),
                    this.getTransactionalCurrency(),
                    TransactionType::Purchase,
                    sadCalcTax.taxDate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds a <c>TaxSAD</c> initialized with an <c>SADCalcTax</c>.
    /// </summary>
    /// <param name="_sadCalcTax">
    ///  A <c>SADCalcTax</c> to initialize context in an <c>TaxSAD</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>TaxSAD</c> class.
    /// </returns>
    [Replaceable]
    public static TaxSAD newForCalcTax(SADCalcTax _sadCalcTax)
    {
        TaxSAD taxSAD = new TaxSAD();
        taxSAD.init(_sadCalcTax);

        return taxSAD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes context with <c>SADCalcTax</c>.
    /// </summary>
    /// <param name="_sadCalcTax">
    ///     A <c>SADCalcTax</c> to initialize context.
    /// </param>
    private void init(SADCalcTax _sadCalcTax)
    {
        sadCalcTax = _sadCalcTax;

        headingTableId = _sadCalcTax.tableId();
        headingRecId = _sadCalcTax.recID();
        taxDate = _sadCalcTax.invoiceDate();

        this.setExchRates(
            sadCalcTax.currencyCode(), 
            sadCalcTax.exchRate(taxDate), 
            sadCalcTax.exchRateSecondary(taxDate), 
            Currency::noYes2UnknownNoYes(sadCalcTax.triangulation(taxDate)), taxDate);
        this.setReportingCurrencyExchRate(sadCalcTax.reportingCurrencyExchangeRate(), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction that is being calculated supports sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    /// <remarks>
    /// By default, the transaction does not support sales tax adjustments.
    /// </remarks>
    boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    protected void setFieldsForTaxIntegrationDocumentObject(TaxIntegrationDocumentObject _document)
    {
        _document.setTransactionDate(sadCalcTax.transactionDate());
        _document.setDocumentDate(sadCalcTax.documentDate());
        _document.setInvoiceDate(sadCalcTax.invoiceDate());
        _document.setDeliveryDate(sadCalcTax.deliveryDate());
        _document.setHeadingTableId(this.headingTableId());
        _document.setHeadingRecId(this.headingRecId());

        _document.setSign(1);
        _document.setSource(taxModuleType);
        _document.setBusinessProcess(TaxIntegrationBusinessProcess::SADDocument);
        _document.setLegacyTax(this);
        _document.setShouldSkipDocumentCharge(true);
        _document.setShouldSkipLineCharge(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>