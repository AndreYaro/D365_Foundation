<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountCreatePlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsCycleCountCreatePlan</c> class is used to run batch job for creating cycle count work according to a cycle count plan.
/// </summary>
public class WhsCycleCountCreatePlan extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private QueryRun                    queryRun;
    private WHSCycleCountPlanId         cycleCountPlanId;
    private WHSCycleCountPlanOverview	cycleCountPlanOverview;
    private WHSCycleCountPlan           cycleCountPlan;
    private WHSWorkTemplateTable		cycleCountPlanWorkTemplate;
    private WHSParameters               parameters;
    private utcdatetime                 utcToday;
    private boolean						isWorkTemplateBreakingWorkLines;
    private	boolean						isWorkTemplateBreakingWorkLinesByProductVariantNumber;
    
    private WHSInstrumentationLogger    logger;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cycleCountPlanId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for cycle count work.
    /// </summary>
    /// <returns>
    /// The query for cycle count work.
    /// </returns>
    private Query buildQuery()
    {
        return new Query(queryStr(WHSCycleCountCreateItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTemplateCode</Name>
				<Source><![CDATA[
    private WHSWorkTemplateCode getWorkTemplateCode()
    {
        return cycleCountPlan.CycleCountEmptyLocations == WHSCycleCountEmptyLocations::Exclude ? cycleCountPlan.WorkTemplateCode : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates cycle count work over location.
    /// </summary>
    /// <param name="_location">
    /// Location that cycle count work will be created for.
    /// </param>
    /// <param name="_itemAndDimensionsForWorkCreationSet">
    /// Set of item IDs and related dimensions for which the work lines should be created; optional.
    /// </param>
    /// <returns>
    /// true if the cycle count work is created; otherwise false.
    /// </returns>
    /// <remarks>
    /// If there is an already existing cycle count work on the location, it is short-circuited.
    /// </remarks>
    public boolean createWork(WMSLocation _location, Set _itemAndDimensionsForWorkCreationSet = null)
    {
        if (WHSWorkLine::anyCycleCountWorkExistsAtLocation(_location))
        {
			return false;
        }

        ttsbegin;

        if (isWorkTemplateBreakingWorkLines)
        {
            WHSWorkId cycleCountWorkId = this.createPartialCycleCountWorkHeader(_location);

            this.createCycleCountWorkWithMultipleWorkLines(cycleCountWorkId, _location, _itemAndDimensionsForWorkCreationSet);
        }
        else
        {
            WHSWorkId cycleCountWorkId = this.createFullCycleCountWorkHeader(_location);

            this.createCycleCountWorkLineForLocation(cycleCountWorkId, _location);
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThereExistingCycleCountWorkForLocation</Name>
				<Source><![CDATA[
    private boolean isThereExistingCycleCountWorkForLocation(WMSLocation _location)
    {
        WHSWorkLine		workLine;
        WHSWorkTable	workTable;

        select firstonly RecId from workLine
            where workLine.wmsLocationId	== _location.wmsLocationId
                && workLine.WorkType		== WHSWorkType::Count
			exists join workTable
				where workTable.WorkId				== workLine.WorkId
					&& workTable.InventLocationId	== _location.InventLocationId
					&& workTable.InventSiteId		== _location.inventSiteId()
					&& workTable.WorkStatus			< WHSWorkStatus::Closed;

        return workLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFullCycleCountWorkHeader</Name>
				<Source><![CDATA[
    private WHSWorkId createFullCycleCountWorkHeader(WMSLocation _location)
    {
        WHSWorkTable workTable = this.initCycleCountWorkHeader(_location);

        workTable.insert();

        return workTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPartialCycleCountWorkHeader</Name>
				<Source><![CDATA[
    private WHSWorkId createPartialCycleCountWorkHeader(WMSLocation _location)
    {
        WHSWorkTable workTable = this.initCycleCountWorkHeader(_location);
        
		workTable.IsPartialCycleCountWork = NoYes::Yes;
        workTable.insert();

        return workTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCycleCountWorkHeader</Name>
				<Source><![CDATA[
    protected WHSWorkTable initCycleCountWorkHeader(WMSLocation _location)
    {
        WHSWorkTable workTable;

        workTable.setWorkId();
        workTable.WorkTransType             = WHSWorkTransType::CycleCount;
        workTable.WorkBuildId               = WHSWorkTable::getNextWorkCreateId();
        workTable.InventSiteId              = _location.inventSiteId();
        workTable.InventLocationId          = _location.InventLocationId;
        workTable.WorkPriority              = this.getWorkPriority();
        workTable.WorkCreatedBy             = curUserId();
        workTable.CycleCountPlanOverview	= cycleCountPlanOverview.RecId;
        workTable.WorkPoolId                = this.getWorkPoolId();
        workTable.WorkTemplateCode          = this.getWorkTemplateCode();

        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkPoolId</Name>
				<Source><![CDATA[
	private WHSWorkPoolId getWorkPoolId()
    {
        WHSWorkPoolId workPoolId = cycleCountPlan.WorkPoolId;

        if (!workPoolId)
        {
            workPoolId = cycleCountPlanWorkTemplate.WorkPoolId;
        }

        return workPoolId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkPriority</Name>
				<Source><![CDATA[
    private WHSWorkPriority getWorkPriority()
    {
        WHSWorkPriority workPriority = cycleCountPlanWorkTemplate.DefaultWorkPriority;

        if (!workPriority)
        {
            workPriority = parameters.CycleCountWorkPriority ? parameters.CycleCountWorkPriority : parameters.WorkPriority;
        }

        return workPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCycleCountWorkLineForLocation</Name>
				<Source><![CDATA[
    private void createCycleCountWorkLineForLocation(WHSWorkId _cycleCountWorkId, WMSLocation _location)
    {
        using (var activityContext = this.instrumentationLogger().warehouseCycleCountCreatePlan().createFullLocationCycleCountingWorkLine())
        {
            InventDim workLineInventDim = this.createWorkLineInventDim(_location);

            this.createWorkLine(_cycleCountWorkId, workLineInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCycleCountWorkWithMultipleWorkLines</Name>
				<Source><![CDATA[
    private void createCycleCountWorkWithMultipleWorkLines(
		WHSWorkId	_cycleCountWorkId,
		WMSLocation	_location,
        Set			_itemAndDimensionsForWorkCreationSet)
    {
                
        using (var activityContext = this.instrumentationLogger().warehouseCycleCountCreatePlan().createPartialLocationCycleCountingWorkLines())
        {
            SetEnumerator	itemAndDimensionsForWorkCreationSetEnumerator	= _itemAndDimensionsForWorkCreationSet.getEnumerator();
            LineNum			workLineNumber;

            while (itemAndDimensionsForWorkCreationSetEnumerator.moveNext())
            {
                container itemAndDimensions = itemAndDimensionsForWorkCreationSetEnumerator.current();

                ItemId		itemId						= conPeek(itemAndDimensions, 1);
                InventDimId	productVariantDimensionsId	= conPeek(itemAndDimensions, 2);
                InventDim	workLineInventDim			= this.createWorkLineInventDim(_location, productVariantDimensionsId);

                workLineNumber++;

                this.createWorkLine(_cycleCountWorkId, workLineInventDim, workLineNumber, itemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineInventDim</Name>
				<Source><![CDATA[
    private InventDim createWorkLineInventDim(WMSLocation _location, InventDimId _productVariantDimensionsId = '')
    {
        InventDim workLineInventDim;
		
        if (_productVariantDimensionsId)
        {
            workLineInventDim = InventDim::find(_productVariantDimensionsId);
        }

        workLineInventDim.InventLocationId	= _location.InventLocationId;
        workLineInventDim.InventSiteId      = _location.inventSiteId();
        workLineInventDim.wmsLocationId     = _location.wmsLocationId;

		return InventDim::findOrCreate(workLineInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the work line record.
    /// </summary>
    /// <param name = "_cycleCountWorkId">The cycle count work Id.</param>
    /// <param name = "_workLineInventDim">The inventory dimension.</param>
    /// <param name = "_workLineNumber">The work line number.</param>
    /// <param name = "_itemId">The item Id.</param>
	private void createWorkLine(
        WHSWorkId	_cycleCountWorkId,
        InventDim	_workLineInventDim,
        LineNum		_workLineNumber		= 1,
		ItemId		_itemId				= '')
    {
        WHSWorkLine workLine = this.initializeWorkLine(_cycleCountWorkId,
                                                       _workLineInventDim,
                                                       _workLineNumber,		
                                                       _itemId);				

        workLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the work line record.
    /// </summary>
    /// <param name = "_cycleCountWorkId">The cycle count work Id.</param>
    /// <param name = "_workLineInventDim">The inventory dimension.</param>
    /// <param name = "_workLineNumber">The work line number.</param>
    /// <param name = "_itemId">The item Id.</param>
    /// <returns>The work line record.</returns>
    protected WHSWorkLine initializeWorkLine(WHSWorkId	_cycleCountWorkId,
                                             InventDim	_workLineInventDim,
                                             LineNum	_workLineNumber,
                                             ItemId		_itemId)
    {
        WHSWorkLine workLine;

        workLine.WorkId					= _cycleCountWorkId;
        workLine.LineNum				= _workLineNumber;
        workLine.WorkType				= WHSWorkType::Count;
        workLine.ItemId					= _itemId;
        workLine.wmsLocationId			= _workLineInventDim.wmsLocationId;
        workLine.InventDimId			= _workLineInventDim.InventDimId;
        workLine.Mandatory				= NoYes::Yes;
        
        this.setWorkClassIdAndWorkTemplateLineRecId(workLine);

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTemplateLine</Name>
				<Source><![CDATA[
    private WHSWorkTemplateLine getWorkTemplateLine()
    {
        return WHSWorkTemplateLine::find(cycleCountPlanWorkTemplate.WorkTemplateCode, WHSWorkTransType::CycleCount, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkClassIdAndWorkTemplateLineRecId</Name>
				<Source><![CDATA[
    private void setWorkClassIdAndWorkTemplateLineRecId(WHSWorkLine _workLine)
    {
        WHSWorkTemplateLine workTemplateLine = this.getWorkTemplateLine();

        _workLine.WorkClassId			= workTemplateLine.WorkClassId ? workTemplateLine.WorkClassId : parameters.DefaultCycleCountWorkClassId;
        _workLine.WorkTemplateLineRecId	= workTemplateLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.formBuildDesign().dialogSize(DialogSize::Medium);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        queryRun    = new QueryRun(this.buildQuery());
        parameters  = WHSParameters::find();
        utcToday    = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack(), #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCycleCountPlanId</Name>
				<Source><![CDATA[
    public WHSCycleCountPlanId parmCycleCountPlanId(WHSCycleCountPlanId _cycleCountPlanId = cycleCountPlanId)
    {
        cycleCountPlanId = _cycleCountPlanId;

        return cycleCountPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            #OCCRetryCount

            using (var activityContext = this.instrumentationLogger().warehouseCycleCountCreatePlan().processCycleCountingPlan())
            {
                try
                {
                    ttsbegin;

                    cycleCountPlan = WHSCycleCountPlan::find(cycleCountPlanId);

                    this.validateCycleCountPlan();

                    cycleCountPlanWorkTemplate = WHSWorkTemplateTable::find(cycleCountPlan.WorkTemplateCode, WHSWorkTransType::CycleCount);

                    this.validateWorkTemplate();

                    isWorkTemplateBreakingWorkLines							= WHSWorkTemplateLineGroup::existForWorkTemplateLine(WHSWorkTransType::CycleCount, cycleCountPlanWorkTemplate.WorkTemplateCode);
                    isWorkTemplateBreakingWorkLinesByProductVariantNumber	= WHSWorkTemplateLineGroup::existForWorkTemplateLineAndGroupField(WHSWorkTransType::CycleCount, cycleCountPlanWorkTemplate.WorkTemplateCode, WHSWorkTemplateLineGroupField::ProductVariantNumber);

                    cycleCountPlanOverview = WHSCycleCountPlanOverview::createOrUpdate(cycleCountPlanId, this.parmCurrentBatch().BatchJobId);

                    int createdCycleCountWorkTablesCounter = this.createCycleCountWorkOrders();

                    ttscommit;

                    if (createdCycleCountWorkTablesCounter > 0)
                    {
                        info("@WAX697");
                    }
                    else
                    {
                        info("@WAX698");
                    }
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw;
                    }
                    else
                    {
                        retry;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCycleCountWorkOrders</Name>
				<Source><![CDATA[
    private int createCycleCountWorkOrders()
    {
        using (var activityContext = this.instrumentationLogger().warehouseCycleCountCreatePlan().createCycleCountingWorkOrders())
        {
            int createdCycleCountWorkTablesCounter, locationCounter;
            Map itemAndDimensionsMap;
        
            if (cycleCountPlan.CycleCountEmptyLocations == WHSCycleCountEmptyLocations::Exclude)
            {
                itemAndDimensionsMap = this.createSelectedItemIdAndDimensionsMap();
            }

            QueryRun qrLocation	= new QueryRun(cycleCountPlan.LocationQuery);

            while (qrLocation.next())
            {
                if (this.createCycleCountWorkForLocation(qrLocation.get(tableNum(WMSLocation)), itemAndDimensionsMap))
                {
                    ++createdCycleCountWorkTablesCounter;

                    // If we've hit our max number of work records, end.
                    if (createdCycleCountWorkTablesCounter == cycleCountPlan.MaxCounts)
                    {
                        break;
                    }
                }

                locationCounter++;
            }
            this.instrumentationLogger().warehouseCycleCountCreatePlan().numberOfLocations(locationCounter);
            this.instrumentationLogger().warehouseCycleCountCreatePlan().numberOfCycleCountWorkTablesRecords(createdCycleCountWorkTablesCounter);
            this.instrumentationLogger().warehouseCycleCountCreatePlan().cycleCountPlanMaxCount(cycleCountPlan.MaxCounts);

            return createdCycleCountWorkTablesCounter;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCycleCountWorkForLocation</Name>
				<Source><![CDATA[
    private boolean createCycleCountWorkForLocation(WMSLocation _location, Map _itemAndDimensionsMap)
    {
        boolean isWorkCycleCountWorkCreatedForLocation;

        if (this.validateLocation(_location))
        {
            boolean	createWorkOnLocation;
            Set		itemsAndDimensionsForWorkCreationSet = new Set(Types::Container);

			switch (cycleCountPlan.CycleCountEmptyLocations)
			{
				case WHSCycleCountEmptyLocations::Include:
					createWorkOnLocation = true;
					break;
				case WHSCycleCountEmptyLocations::Only:
                    createWorkOnLocation = _location.whsLocationIdEmptyIncludeDelta(false);
					break;
				case WHSCycleCountEmptyLocations::Exclude:
                    createWorkOnLocation = this.initCreateWorkExcludeEmptyOnLocation(_location, _itemAndDimensionsMap, itemsAndDimensionsForWorkCreationSet);
					break;
			}

			if (createWorkOnLocation)
			{
                if (this.createWork(_location, itemsAndDimensionsForWorkCreationSet))
				{
					isWorkCycleCountWorkCreatedForLocation = true;
				}
			}
        }

        return isWorkCycleCountWorkCreatedForLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreateWorkExcludeEmptyOnLocation</Name>
				<Source><![CDATA[
    private boolean initCreateWorkExcludeEmptyOnLocation(WMSLocation _location, Map _itemAndDimensionsMap, Set _itemsAndDimensionsForWorkCreationSet)
    {
        boolean createWorkOnLocation;

        if (_itemAndDimensionsMap)
        {
            InventSum		inventSum;
            InventDim		inventDim;
            InventDim       inventDimCriteria;
            InventDimParm	inventDimParm;

            inventDimCriteria.InventSiteId		= _location.inventSiteId();
            inventDimCriteria.InventLocationId	= _location.InventLocationId;
            inventDimCriteria.wmsLocationId     = _location.wmsLocationId;

            inventDimParm.initFromInventDim(inventDimCriteria);

            // Select is executed inside the transaction in order to get the latest values and not use cache.
            ttsbegin;

            if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
            {
                select ItemId, InventDimId from inventSum
                where inventSum.PhysicalInvent	> 0
                    && inventSum.ClosedQty      == NoYes::No
                    && #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm);
            }
            else
            {
                select ItemId, InventDimId from inventSum
                where inventSum.PhysicalInvent	> 0
                   && inventSum.ClosedQty      == NoYes::No
                #InventDimExistsJoin(inventSum.inventDimId, inventDim, inventDimCriteria, inventDimParm);
            }

            while (inventSum.ItemId)
            {
                if (_itemAndDimensionsMap.exists(inventSum.ItemId))
                {                    
                    InventDim productDim;

                    Set productDimensionsIdSet = _itemAndDimensionsMap.lookup(inventSum.ItemId);

                    // When productDimensionsIdSet is not null, it means there are specific product variant criteria.
                    if (productDimensionsIdSet)
                    {
                        productDim = this.findProductDimensionsInventDim(inventSum.InventDimId);

                        if (!productDimensionsIdSet.in(productDim.InventDimId))
                        {
                            // Specific variant is not in variants selection => process next inventSum.
                            next inventSum;            
                            continue;
                        }
                    }
                    
					createWorkOnLocation = true;

					/*
						It is not enough to simply add itemId and productDim id to the work creation set,
						because of the case when the product variant query is specified, but the work lines are split by just item number.
						In that case, we need to check on-hand inventory for the product variant, but still create work line for the item master.
					*/

                    ItemId itemIdForWorkCreation;
                    InventDimId inventDimIdForWorkCreation;
                    [itemIdForWorkCreation, inventDimIdForWorkCreation] = this.findItemAndDimensionForWorkCreation(inventSum, productDim);

                    if (itemIdForWorkCreation != '')
                    {
                        _itemsAndDimensionsForWorkCreationSet.add([itemIdForWorkCreation, inventDimIdForWorkCreation]);
                    }

                    if (!isWorkTemplateBreakingWorkLines)
                    {
                        break;
                    }
                }
                next inventSum;
            }

            ttscommit;
        }

        return createWorkOnLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemAndDimensionForWorkCreation</Name>
				<Source><![CDATA[
    protected container findItemAndDimensionForWorkCreation(InventSum _inventSum, InventDim _productDim)
    {
        if (isWorkTemplateBreakingWorkLinesByProductVariantNumber)
        {
            if (!_productDim.RecId)
            {
                _productDim = this.findProductDimensionsInventDim(_inventSum.InventDimId);
            }

            return [_inventSum.ItemId, _productDim.InventDimId];
            
        }
        else
        {
            return [_inventSum.ItemId, ''];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductDimensionsInventDim</Name>
				<Source><![CDATA[
    private InventDim findProductDimensionsInventDim(InventDimId _inventDimId)
    {
        InventDim inventDim = InventDim::find(_inventDimId);
        return InventDim::findDim(InventProductDimension::createInventDimFromTable(inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSelectedItemIdAndDimensionsMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map with ItemId as a key and a <c>Set</c> of ids of product dimensions as a value.
    /// </summary>
    /// <returns>A map with ItemId as a key and a <c>Set</c> of ids of product dimensions as a value.</returns>
    private Map createSelectedItemIdAndDimensionsMap()
    {
        using (var activityContext = this.instrumentationLogger().warehouseCycleCountCreatePlan().populateItemAndDimensionsMap())
        {
            Map itemsAndDimensionsMap = new Map(Types::String, Types::Class);

            itemsAndDimensionsMap = this.populateItemAndDimensionsMapFromCycleCountPlanProductSelectionsItemQueries(itemsAndDimensionsMap);

            return itemsAndDimensionsMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemAndDimensionsMapFromCycleCountPlanProductSelectionsItemQueries</Name>
				<Source><![CDATA[
    private Map populateItemAndDimensionsMapFromCycleCountPlanProductSelectionsItemQueries(Map _itemsAndDimensionsMap)
    {
        if (WHSCycleCountPlanProductSelection::existForCycleCountPlanId(cycleCountPlan.CycleCountPlanId))
        {
			WHSCycleCountPlanProductSelection cycleCountPlanProductSelection;

			while select ItemQuery from cycleCountPlanProductSelection
				where cycleCountPlanProductSelection.CycleCountPlanId == cycleCountPlan.CycleCountPlanId
                    && cycleCountPlanProductSelection.ProductSelectionMode == WHSCycleCountProductSelectionMode::Item
			{
                _itemsAndDimensionsMap = this.populateItemAndDimensionsMapFromItemQuery(_itemsAndDimensionsMap, cycleCountPlanProductSelection.ItemQuery);
            }

            while select ProductVariantQuery from cycleCountPlanProductSelection
                where cycleCountPlanProductSelection.CycleCountPlanId == cycleCountPlan.CycleCountPlanId
                    && cycleCountPlanProductSelection.ProductSelectionMode == WHSCycleCountProductSelectionMode::Variant
            {
                _itemsAndDimensionsMap = this.populateItemAndDimensionsMapFromProductVariantQuery(_itemsAndDimensionsMap, cycleCountPlanProductSelection.ProductVariantQuery);
            }
        }
		else
        {
            _itemsAndDimensionsMap = this.populateItemAndDimensionsMapFromItemQuery(_itemsAndDimensionsMap, WHSCycleCountPlanProductSelection::initItemQuery());
        }

        return _itemsAndDimensionsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemAndDimensionsMapFromItemQuery</Name>
				<Source><![CDATA[
    private Map populateItemAndDimensionsMapFromItemQuery(Map _itemsAndDimensionsMap, WHSItemQuery _itemQuery)
    {
        QueryRun qrItem = new QueryRun(_itemQuery);

        while (qrItem.next())
        {
            _itemsAndDimensionsMap = this.populateItemAndDimensionsMapFromInventTable(_itemsAndDimensionsMap, qrItem.get(tableNum(InventTable)));
        }

        return _itemsAndDimensionsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemAndDimensionsMapFromInventTable</Name>
				<Source><![CDATA[
    private Map populateItemAndDimensionsMapFromInventTable(Map _itemsAndDimensionsMap, InventTable _inventTable)
    {
        if (_inventTable
            && this.validateItem(_inventTable.ItemId))
		{
            // If ItemId was already added, this will update the value to null. Null means all product dimensions.
            _itemsAndDimensionsMap.insert(_inventTable.ItemId, null);
		}

        return _itemsAndDimensionsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemAndDimensionsMapFromProductVariantQuery</Name>
				<Source><![CDATA[
    private Map populateItemAndDimensionsMapFromProductVariantQuery(Map _itemsAndDimensionsMap, WHSProductVariantQuery _productVariantQuery)
    {
        QueryRun qrProductVariant = new QueryRun(_productVariantQuery);

        while (qrProductVariant.next())
        {
            InventDimCombination inventDimCombination = qrProductVariant.get(tableNum(InventDimCombination));

            if (inventDimCombination)
            {
                Set productDimensionsIdSet;

                if (_itemsAndDimensionsMap.exists(inventDimCombination.ItemId))
                {
                    productDimensionsIdSet = _itemsAndDimensionsMap.lookup(inventDimCombination.ItemId);

                    // if product dimensions set is not null, it means that it contains specific product variant dimensions. Add current product dimension to the set.
                    // if null, do nothing since all variants are already implicitly included.
                    if (productDimensionsIdSet)
                    {
                        productDimensionsIdSet.add(inventDimCombination.InventDimId);
                    }
                }
                else
                {
                    productDimensionsIdSet = new Set(Types::String);
                    productDimensionsIdSet.add(inventDimCombination.InventDimId);

                    _itemsAndDimensionsMap.insert(inventDimCombination.ItemId, productDimensionsIdSet);
                }
            }
        }

        return _itemsAndDimensionsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to show query select button or not.
    /// </summary>
    /// <returns>
    /// true if to show query select button; otherwise false.
    /// </returns>
    public boolean showQuerySelectButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        boolean     ret = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #CurrentList] = _packedClass;

                if (!packedQuery)
                {
                    ret = false;
                }
                else
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItem</Name>
				<Source><![CDATA[
    private boolean validateItem(ItemId _itemId)
    {
        return WHSInventEnabled::exist(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a location by checking if it is a user location,
    /// checking if it is a whs enabled warehouse,
    /// checking if it is cycle countable location or
    /// checking if the time between the last cycle count is over threshold.
    /// </summary>
    /// <param name="_location">
    /// Location to be validated.
    /// </param>
    /// <returns>
    /// true if the location is validated; otherwise false.
    /// </returns>
    protected boolean validateLocation(WMSLocation _location)
    {
        #TimeConstants

        // If this is a user location, skip it.
        if (_location.LocProfileId == parameters.UserLocType)
        {
            return false;
        }

        // If this is not a WHS warehouse, skip it.
        if (!InventLocation::find(_location.InventLocationId).whsEnabled)
        {
            return false;
        }

        // If this location is not cycle countable, skip it.
        if (!_location.whsLocationProfile().CycleCountable)
        {
            return false;
        }

        // Check the days between.
        if (cycleCountPlan.DaysBetween > 0
			&& _location.LastCountedUTCDateTime != utcDateTimeNull()
            && (DateTimeUtil::getDifference(utcToday, _location.LastCountedUTCDateTime) / #SecondsPerHour) / #HoursPerDay <= cycleCountPlan.DaysBetween)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSCycleCountCreatePlan</c> instance using cycle count plan id.
    /// </summary>
    /// <param name="_args">
    /// Args contains a <c>WHSCycleCountPlan</c> record.
    /// </param>
    /// <returns>
    /// The newly created <c>WHSCycleCountCreatePlan</c> instance.
    /// </returns>
    public static WHSCycleCountCreatePlan construct()
    {
        return new WHSCycleCountCreatePlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    public static WHSCycleCountCreatePlan constructFromArgs(Args _args)
    {
        if (!_args || _args.dataset() != tableNum(WHSCycleCountPlan))
        {
            throw error("@WAX3997");
        }

        WHSCycleCountPlan _cycleCountPlan = _args.record();
        var cycleCountCreatePlan = WHSCycleCountCreatePlan::construct();

        cycleCountCreatePlan.parmCycleCountPlanId(_cycleCountPlan.CycleCountPlanId);

        return cycleCountCreatePlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX3993";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        var cycleCountCreatePlan = WHSCycleCountCreatePlan::constructFromArgs(_args);

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(cycleCountCreatePlan))
        {
            if (cycleCountCreatePlan.prompt())
            {
                cycleCountCreatePlan.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTemplate</Name>
				<Source><![CDATA[
    private void validateWorkTemplate()
    {
        if (cycleCountPlanWorkTemplate && !cycleCountPlanWorkTemplate.WorkTemplateValid)
        {
            throw error(strFmt("@WAX:ErrorCycleCountWorkCreateInvalidWorkTemplate", cycleCountPlanWorkTemplate.WorkTemplateCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCycleCountPlan</Name>
				<Source><![CDATA[
    private void validateCycleCountPlan()
    {
        if (!cycleCountPlan)
        {
            throw error(strFmt("@WAX:CycleCountPlanNotFound", cycleCountPlanId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsCycleCountCreatePlan));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSCycleCountCreatePlan);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>