<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemPackingSlipSale_Adj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemPackingSlipSale_Adj extends ProjPostItemPackingSlip_Adj
{
    ProjItemTrans               projItemTransNew;
    TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the budget amount.
    /// </summary>
    public void budgetUpdate()
    {
        ProjBudgetTransactionManager  projBudgetTransactionManager;
        ProjBudgetTransactionLine     projBudgetTransactionLine;
        ProjBudgetTransaction         projBudgetTransaction;

        if (!this.parmTransIdOrig())
        {
            if (projTrans.qty() != 0)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(ProjItemTrans::find(this.parmTransIdSales()));
                projBudgetTransactionLine.parmSalesAmount(projTrans.transTurnover());
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);

                if (!projBudgetTransactionManager.adjustBudget(ProjBudgetAdjustmentType::Decrement))
                {
                    throw Exception::Error;
                }
            }
        }
        else
        {
            if (projTrans.qty() < 0)
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a budget update is required.
    /// </summary>
    /// <returns>
    ///    true if a budget update is required; otherwise, false.
    /// </returns>
    public boolean checkUpdateBudget()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemTransSale</Name>
				<Source><![CDATA[
        public ProjItemTransSale initItemTransSale()
    {
        return ProjItemTransSale::initTransFromAdjustment(projItemTransNew, tmpProjAdjustmentCreateSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjItemTrans _projItemTransNew, TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, TmpProjAdjustmentCreateSale _tmpProjAdjustmentCreateSale)
    {
        projItemTransNew = _projItemTransNew;
        tmpProjAdjustmentCreateSale = _tmpProjAdjustmentCreateSale;

        super(_tmpProjAdjustmentCreate);

        projTrans = ProjTrans::newTmpProjAdjustmentCreateSale(_tmpProjAdjustmentCreate, _tmpProjAdjustmentCreateSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
        public void projTransCreate()
    {
        ProjItemTransSale   projItemTransSale;
        boolean             postTurnOver;

        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        projItemTransSale.clear();
        projItemTransSale = this.initItemTransSale();
        projItemTransSale.ProjTransId = projItemTransNew.ProjTransId;
        projItemTransSale.TransStatus = this.transStatus();
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            projItemTransSale.LedgerTransdate =this.parmAdjustmentDate();
        }
        else
        {
            projItemTransSale.LedgerTransdate = ledgerVoucher.lastTransDate();
        }

        postTurnOver = projTrans.canBeAccrued() &&
                projTrans.transTurnoverMST() &&
                ProjRevRecHelper::postWIPItemForProject(ProjTable::find(projItemTransNew.ProjId));

        if (postTurnOver && ProjFundingSource::isExternalFunding(projItemTransSale.FundingSource))
        {
            projItemTransSale.LedgerSalesPosted = true;
            projItemTransSale.LedgerSalesAmount = projTrans.transTurnoverMST();
        }

        if (! projItemTransSale.validateWrite())
        {
            throw error("@SYS21628");
        }

        projItemTransSale.insert();

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(projItemTransSale.ProjTransId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>