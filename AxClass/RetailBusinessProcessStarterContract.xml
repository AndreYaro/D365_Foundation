<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessProcessStarterContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data contract for the creation of retail business process.
/// </summary>
[DataContract]
public class RetailBusinessProcessStarterContract implements SysOperationValidatable
{
    RetailBusinessProcessRecId                      recId;
    RetailBusinessProcessTemplateRecId              templateRecId;
    RetailBusinessProcessName                       processName;
    NoYes                                           recurrence;
    RetailBusinessProcessTargetDate                 targetDate;
    RetailBusinessProcessRecurrenceTargetDateOffset recurrentTargetDateOffset;
    Set                                             selectedChannelRecIds;
    Set                                             selectedWorkerRecIds;
    RecId                                           batchId;
    NoYes                                           inEdit;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the record id of the process
    /// </summary>
    /// <param name = "_value">record id</param>
    /// <returns>record id</returns>
    [DataMember('RecId')]
    public RetailBusinessProcessRecId parmRecId(RetailBusinessProcessRecId _value = recId)
    {
        recId = _value;
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessProcessTemplateHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the record id of the template header associated with the process
    /// </summary>
    /// <param name = "_value">template header id</param>
    /// <returns>template header id</returns>
    [DataMember('BusinessProcessTemplateHeaderRecId')]
    public RetailBusinessProcessTemplateRecId parmBusinessProcessTemplateHeaderRecId(RetailBusinessProcessTemplateRecId _value = templateRecId)
    {
        templateRecId = _value;
        return templateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the name of the process
    /// </summary>
    /// <param name = "_value">process name</param>
    /// <returns>process name</returns>
    [DataMember('ProcessName')]
    public RetailBusinessProcessName parmProcessName(RetailBusinessProcessName _value = processName)
    {
        processName = _value;
        return processName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the value that indicates whether the process is recurrent
    /// </summary>
    /// <param name = "_value">the recurrent value</param>
    /// <returns>the recurrent value</returns>
    [DataMember('Recurrence')]
    public NoYes parmRecurrence(NoYes _value = recurrence)
    {
        recurrence = _value;
        return recurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the target date of one time process
    /// </summary>
    /// <param name = "_value">the target date</param>
    /// <returns>the target date</returns>
    [DataMember('TargetDate')]
    public RetailBusinessProcessTargetDate parmTargetDate(RetailBusinessProcessTargetDate _value = targetDate)
    {
        targetDate = _value;
        return targetDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecurrentTargetDateOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the target date offset of recurrent process
    /// </summary>
    /// <param name = "_value">the recurrent target date offset</param>
    /// <returns>the recurrent target date offset</returns>
    [DataMember('RecurrentTargetDateOffset')]
    public RetailBusinessProcessRecurrenceTargetDateOffset parmRecurrentTargetDateOffset(RetailBusinessProcessRecurrenceTargetDateOffset _value = recurrentTargetDateOffset)
    {
        recurrentTargetDateOffset = _value;
        return recurrentTargetDateOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the batch job id associated with the process
    /// </summary>
    /// <param name = "_value">the batch job id</param>
    /// <returns>the batch job id</returns>
    [DataMember('BatchId')]
    public RecId parmBatchId(RecId _value = batchId)
    {
        batchId = _value;
        return batchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the value that indicates whether the dialog is to edit the process
    /// </summary>
    /// <param name = "_value">the NoYes value</param>
    /// <returns>the NoYes value</returns>
    public NoYes parmInEdit(NoYes _value = inEdit)
    {
        inEdit = _value;
        return inEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedChannelRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a Set of Retail Channel RecIds
    /// </summary>
    /// <param name = "_value">The new Set of Retail Channel RecIds.</param>
    /// <returns>The current Set of Retail Channel Ids.</returns>
    public Set parmSelectedChannelRecIds(Set _value = selectedChannelRecIds)
    {
        selectedChannelRecIds = _value;
        
        if (selectedChannelRecIds == null)
        {
            selectedChannelRecIds = new Set(Types::Int64);
        }
        return selectedChannelRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedWorkerRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a Set of Worker RecIds
    /// </summary>
    /// <param name = "_value">the new set of worker record ids</param>
    /// <returns>the current set of worker ids</returns>
    public Set parmSelectedWorkerRecIds(Set _value = selectedWorkerRecIds)
    {
        selectedWorkerRecIds = _value;
        if (selectedWorkerRecIds == null)
        {
            selectedWorkerRecIds = new Set(Types::Int64);
        }
        return selectedWorkerRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate the data contract
    /// </summary>
    /// <returns>whether the validation passes or not</returns>
    public boolean validate()
    {
        boolean ok = true;

        if (processName == '')
        {
            ok = checkFailed("@RetailTaskManagement:RetailBusinessProcessEmptyNameError");
        }

        if (recurrence == NoYes::No)
        {
            if (targetDate == dateNull())
            {
                ok = checkFailed("@RetailTaskManagement:RetailBusinessProcessEmptyDateError");
            }
            else if (targetDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ok = checkFailed("@RetailTaskManagement:RetailBusinessProcessInvalidDateError");
            }
        }
        else if (recurrence == NoYes::Yes)
        {
            if (recurrentTargetDateOffset <= 0)
            {
                ok = checkFailed("@RetailTaskManagement:RetailBusinessProcessInvalidTargetDateOffsetError");
            }
        }
        
        if ((selectedChannelRecIds == null || selectedChannelRecIds.empty())
            && (selectedWorkerRecIds == null || selectedWorkerRecIds.empty()))
        {
            ok = checkFailed("@RetailTaskManagement:RetailBusinessProcessEmptyAssociationError");
        }

        if (!this.parmInEdit())
        {
            RetailBusinessProcess process;
            select process where process.RetailBusinessProcessTemplateHeader == this.parmBusinessProcessTemplateHeaderRecId() && process.Name == this.parmProcessName();
            if (process)
            {
                ok = checkFailed("@RetailTaskManagement:RetailBusinessProcessDuplicateNameError");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>