<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentContractDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentContractDataProvider</c> class is a base abstract class for the kanban job
///    providers that use a <c>LeanDocumentDataContract</c> data contract as input for filtering out the
///    jobs that have to be part of the subcontracting document creation processing.
/// </summary>
public abstract class LeanDocumentContractDataProvider extends LeanDocumentDataProvider
{
    LeanDocumentDataContract dataContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentContractDataProvider otherProvider = otherObject as LeanDocumentContractDataProvider;

        return  otherObject == this
                || (otherProvider != null
                        && super(otherObject)
                        && dataContract.equals(otherProvider.parmDataContract()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal state of the providers.
    /// </summary>
    protected void init()
    {
        #TimeConstants
        QueryBuildDataSource        qbds = query.dataSourceTable(tablenum(KanbanJob));
        QueryBuildRange             qbdr = SysQuery::findOrCreateRange(qbds, fieldnum(KanbanJob, ActualStartDateTime));
        utcDateTime                 dateTo = dataContract.parmValidToDate() != dateNull() ?
                                                DateTimeUtil::newDateTime(dataContract.parmValidToDate(), #secondsPerDay - 1, DateTimeUtil::getCompanyTimeZone()) :
                                                DateTimeUtil::maxValue();

        this.addRange(tablenum(Kanban),
                        fieldnum(Kanban, LegalEntity),
                        SysQuery::value(dataContract.parmLegalEntity()));

        this.addRange(tablenum(KanbanRule),
                        fieldnum(KanbanRule, LegalEntity),
                        SysQuery::value(dataContract.parmLegalEntity()));

        this.addRange(tablenum(PlanActivity),
                        fieldnum(PlanActivity, LegalEntity),
                        SysQuery::value(dataContract.parmLegalEntity()));

        this.addRange(tablenum(KanbanJob),
                        fieldnum(KanbanJob, Status),
                        strfmt('(%1.%2 >= %3)',
                                qbds.name(),
                                fieldstr(KanbanJob, Status),
                                enum2int(dataContract.parmMinimumJobStatus())),
                        false);

        this.addRange(tablenum(KanbanRule),
                        fieldnum(KanbanRule, RecId),
                        SysQuery::value(dataContract.parmKanbanRule()));

        this.addRange(tablenum(PlanActivity),
                        fieldnum(PlanActivity, RecId),
                        SysQuery::value(dataContract.parmPlanActivity()));

        this.addRange(tablenum(PlanActivity),
                        fieldnum(PlanActivity, PlanReference),
                        SysQuery::value(dataContract.parmPlanReference()));

        this.addRange(tablenum(PlanActivityService),
                        fieldnum(PlanActivityService, PurchAgreementHeader),
                        SysQuery::value(dataContract.parmPurchAgreementHeader()));

        // for jobs in status:
        //      - NotPlanned - use DueDateTime
        //      - Completed - use ActualEndDateTime
        //      - all the other statuses - ExpectedDateTime
        qbdr.value(strfmt('(((%1.%2 == %3) && (%1.%4 >= %5) && (%1.%4 <= %7)) || ' +
                            '((%1.%2 == %8) && (%1.%9 >= %5) && (%1.%9 <= %7)) || ' +
                            '((%1.%2 > %8) && (%1.%2 < %3) && (%1.%6 >= %5) && (%1.%6 <= %7)))',
                                qbds.name(),
                                fieldstr(KanbanJob, Status),
                                enum2int(LeanKanbanJobStatus::Completed),
                                fieldstr(KanbanJob, ActualEndDateTime),
                                queryValue(DateTimeUtil::toStr(DateTimeUtil::newDateTime(dataContract.parmValidFromDate(), 0, DateTimeUtil::getCompanyTimeZone()))),
                                fieldstr(KanbanJob, ExpectedDateTime),
                                DateTimeUtil::toStr(dateTo),
                                enum2int(LeanKanbanJobStatus::NotPlanned),
                                fieldstr(KanbanJob, DueDateTime)));

        // this needs to be done after all the ranges have been added, otherwise the QueryRUn
        // created in the parent won't fetch them during the t-sql generation
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentRecordValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a runtime hook for validating the current record.
    /// </summary>
    /// <returns>
    /// true if the current record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The main assumption is that not all constraints of the provider can be modeled with a query object.
    /// Therefore, you must have a way to provide per-record validation.
    /// </remarks>
    protected boolean isCurrentRecordValid()
    {
        boolean ret = super();

        // validate vendor account
        if (ret && dataContract.parmVendAccount())
        {
            PlanActivity planActivity = this.getCurrentRecord(tablenum(PlanActivity));
            KanbanJob kanbanJob = this.getCurrentRecord(tablenum(KanbanJob));

            ret = ret
                    && (planActivity.RecId != 0)
                    && (planActivity.vendor(kanbanJob, true) == dataContract.parmVendAccount());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(LeanDocumentDataContract _contract)
    {
        super(new Query(querystr(LeanDocumentServiceCreation)));

        dataContract = _contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataContract</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanDocumentDataContract parmDataContract(LeanDocumentDataContract _dataContract = dataContract)
    {
        dataContract = _dataContract;

        return dataContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
