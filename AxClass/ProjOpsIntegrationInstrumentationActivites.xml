<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOpsIntegrationInstrumentationActivites</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class ProjOpsIntegrationInstrumentationActivites extends ProjOpsInstrumentationBaseActitivies
{
    private const str ProjOpsIntegPrefix = 'ProjOpsIntegration.';
    private const str BilledSalesImport = 'billedSalesImport';
    private const str UnbilledSalesImport = 'unbilledSalesImport';
    private const str BaseActualsImport = 'baseActualsImport';
    private const str StagingTableImport = 'stagingTableImport';
    private const str AdvancedJournalPost = 'advancedJournalPost';
    private const str UpdateProjContractLineMilestone = 'updateProjContractLineMilestone';
    private const str DeleteInvoiceProposalLines = 'deleteInvoiceProposalLines';
    private const str InsertEntity = 'InsertEntity';
    private const str UpdateEntity = 'UpdateEntity';
    private const str DeleteEntity = 'DeleteEntity';
    private const str FeatureStatus = 'FeatureStatus';    
    private const str TroubleshootingErrorLog = 'TroubleshootingErrorLog';

    // Activity property constants
    public static const str Intercompany = 'Intercompany';
    public static const str Retainer = 'Retainer';
    public static const str NumberOfCorrections = 'NumOfCorrections';
    public static const str ReversingActual = 'ReversingActual';
    public static const str IntegrationCount = 'IntegrationCount';
    public static const str ActualTransType = 'ActualTransType';
    public static const str ActualTransactionClassification = 'ActualTransactionClassification';
    public static const str NumOfProjOnAccTransSaleRecords = 'NumOfProjOnAccTransSaleRecords';
    public static const str NumOfInvoiceProposalLinesDeleted = 'NumOfInvoiceProposalLinesDeleted';
    public static const str DataSource = 'DataSource';
    public static const str ContractLineId = 'ContractLineId';
    public static const str ProjectContractId = 'ProjectContractId';
    public static const str ProjectId = 'ProjectId';
    public static const str TaskId = 'TaskId';
    public static const str ActualId = 'ActualId';
    public static const str ActualsImportId = 'ActualsImportId';
    public static const str ContractId = 'ContractId';
    public static const str InvoiceProposalId = 'InvoiceProposalId';
    public static const str FundingSourceId = 'FundingSourceId';
    public static const str ContractLineMilestoneIdentifier = 'ContractLineMilestoneIdentifier';
    public static const str ContractLineMilestoneGuid = 'ContractLineMilestoneGuid';
    public static const str TransStatus = 'TransStatus';
    public static const str CategoryId = 'CategoryId';
    public static const str RoleId = 'RoleId';
    public static const str ConnectionId = 'ConnectionId';
    public static const str Transaction1Id = 'Transaction1Id';
    public static const str Transaction1Role = 'Transaction1Role';
    public static const str Transaction1Type = 'Transaction1Type';
    public static const str Transaction2Id = 'Transaction2Id';
    public static const str Transaction2Role = 'Transaction2Role';
    public static const str Transaction2Type = 'Transaction2Type';
    public static const str EstimateHoursImportId = 'EstimateHoursImportId';
    public static const str EstimateExpensesImportId = 'EstimateExpensesImportId';
    public static const str CELedgerVoucher = 'CELedgerVoucher';
    public static const str InvoiceDate = 'InvoiceDate';
    public static const str TroubleshootingErrorLogExpiry = 'TroubleshootingErrorLogExpiry';   
    public static const str ProjectContractLineMilestoneHeaderId = 'ProjectContractLineMilestoneHeaderId';
    public static const str ProjectContractLineMilestoneHeaderGuid = 'ProjectContractLineMilestoneHeaderGuid';
 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billedSalesImportContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for estimate posting operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext billedSalesImportContext()
    {
        return logger.activityContext(this.activity(BilledSalesImport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>billedSalesImportActivity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivity billedSalesImportActivity()
    {
        return this.activity(BilledSalesImport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>advancedJournalPostAcivity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivity advancedJournalPostAcivity()
    {
        return this.activity(AdvancedJournalPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseActualsImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for actuals import operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext baseActualsImport()
    {
        return logger.activityContext(this.activity(BaseActualsImport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unbilledSalesImportContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for unbilled sales import operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext unbilledSalesImportContext()
    {
        return logger.activityContext(this.activity(UnbilledSalesImport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>stagingImportContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for import operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext stagingImportContext()
    {
        return logger.activityContext(this.activity(StagingTableImport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjContractLineMilestone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for updating ProjContractLineMilestone
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext updateProjContractLineMilestone()
    {
        return logger.activityContext(this.activity(UpdateProjContractLineMilestone));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvoiceProposalLinesContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for delete invoice proposal lines.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext deleteInvoiceProposalLinesContext()
    {
        return logger.activityContext(this.activity(DeleteInvoiceProposalLines));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for insert entity data source
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext insertEntityContext()
    {
        return logger.activityContext(this.activity(InsertEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for update entity data source
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext updateEntityContext()
    {
        return logger.activityContext(this.activity(UpdateEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for delete entity data source
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext deleteEntityContext()
    {
        return logger.activityContext(this.activity(DeleteEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureStatusContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for checking ProjOps feature status
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext featureStatusContext()
    {
        return logger.activityContext(this.activity(FeatureStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>troubleshootingErrorLogContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for ProjOps troubleshooting error loging
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext troubleshootingErrorLogContext()
    {
        return logger.activityContext(this.activity(TroubleshootingErrorLog));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for <c>ProjOpsIntegrationInstrumentationActivites</c> object.
    /// </summary>
    /// <param name = "_logger"><c>ProjOpsIntegrationLogger</c> object.</param>
    /// <returns><c>ProjOpsIntegrationInstrumentationActivites</c> instance.</returns>
    [Hookable(false)]
    public static ProjOpsIntegrationInstrumentationActivites construct(ProjOpsIntegrationLogger _logger)
    {
        ProjOpsIntegrationInstrumentationActivites activities = new ProjOpsIntegrationInstrumentationActivites();
        activities.logger = _logger;
        activities.Prefix = ProjOpsIntegPrefix;
        return activities;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>