<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;
        ;

        ret = ret && this.checkBankAccountNum(_bankAccountMap.AccountNum);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        boolean ret = true;
        ;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankContractAccount</Name>
				<Source><![CDATA[
    public boolean checkBankContractAccount(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;
        ;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankRegNum</Name>
				<Source><![CDATA[
    public boolean checkBankRegNum(BankRegNum _registrationNum, BankCodeType _bankCodeType)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGiroContractAccount</Name>
				<Source><![CDATA[
    public boolean checkGiroContractAccount(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;
        ;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGiroNum</Name>
				<Source><![CDATA[
    public boolean checkGiroNum(GiroNum _giroNum)
    {
        boolean ret = true;
        ;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymId</Name>
				<Source><![CDATA[
    public boolean checkPaymId(PaymId  _paymId)
    {
        boolean ret = true;
        ;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankIBANAccessRight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns access right of the current user to the BankIban field of a bank account mapped table.
    /// </summary>
    /// <param name = "_bankAccountMap">A cursor of BankAccountMap type</param>
    /// <returns>The access right of the current user to the AccountNum field of a bank account mapped table.</returns>
    protected AccessRight getBankIBANAccessRight(BankAccountMap _bankAccountMap)
    {
        FieldName mapFieldName = fieldStr(BankAccountMap, BankIBAN);

        FieldId fieldId = _bankAccountMap.BankAccountMap::findMappedFieldId(fieldName2Id(tableNum(BankAccountMap), mapFieldName));
        if (!fieldId)
        {
            throw error(strFmt("@GLS50969", mapFieldName, tableId2Name(_bankAccountMap.tableId)));
        }

        return _bankAccountMap.fieldAccessRight(fieldId2Name(_bankAccountMap.tableId, fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankIBAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the integrity of a given IBAN through use of Mod97 format validation.
    /// </summary>
    /// <param name = "_bankIBAN">The international bank account number.</param>
    /// <param name = "_accountId">The account identifier of the bank account.</param>
    /// <returns>true if the IBAN format passes Mod97 validation; otherwise, false.</returns>
    public static boolean checkBankIBAN(BankIBAN _bankIBAN, str _accountId)
    {
        boolean ret = Bank::verifyBankIBAN(_bankIBAN, _accountId);

        if (!ret)
        {
            checkFailed(strFmt("@CashManagement:IBANValidationMessage", _accountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyBankIBAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the integrity of a given IBAN through use of Mod97 format validation.
    /// </summary>
    /// <param name = "_bankIBAN">The international bank account number.</param>
    /// <returns>true if the IBAN format passes Mod97 validation; otherwise, false.</returns>
    [HookableAttribute]
    protected static boolean verifyBankIBAN(BankIBAN _bankIBAN, str _accountId)
    {
        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(_bankIBAN);
        boolean ret = bankIBANValidator.validateBankIBANFollowsMod97Format();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs the <c>Bank</c> object that is appropriate based on the location of the bank.
    /// </summary>
    /// <param name="_bankLocationISOCode">
    ///    The country and region ISO code of the location of the bank.
    /// </param>
    /// <returns>
    ///    A bank object.
    /// </returns>
    public static Bank construct(LogisticsAddressCountryRegionISOCode _bankLocationISOCode)
    {
        #ISOCountryRegionCodes

        switch (_bankLocationISOCode)
        {
            case #isoDK :
                return new Bank_DK();

            case #isoCA :
                return new Bank_CA();

            case #isoFI :
                return new Bank_FI();

            case #isoFR :
                return new Bank_FR();

            case #isoNO :
                return new Bank_NO();

            case #isoES :
                return new Bank_ES();

            case #isoCH :
                return new Bank_CH();

            case #isoBE :
                return new Bank_BE();

            case #isoNL :
                return new Bank_NL();

            case #isoMX :
                return new Bank_MX();

            case #isoUS :
                return new Bank_US();

            case #isoIT :
                return new Bank_IT();

            // <GJP>
            case #isoJP :
                return new Bank_JP();
            // </GJP>

            // <GEEU>
            case #isoEE :
                return new Bank_EE();
            // </GEEU>

            case #isoBR :
                return new Bank_BR();

            default :
        }
        return new Bank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymIdValidationCountryRegionISOCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the country and region ISO code for the bank validation that is based on the main
    ///    account or the offset account.
    /// </summary>
    /// <param name="_accountType">
    ///    The type of account.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The account number that includes the dimensions.
    /// </param>
    /// <param name="_bankAccountID">
    ///    The bank account identification number.
    /// </param>
    /// <param name="_offsetAccountType">
    ///    The offset account type.
    /// </param>
    /// <param name="_offsetLedgerDimension">
    ///    The offset account number that includes the dimensions.
    /// </param>
    /// <returns>
    ///    A country and region ISO code if applicable; otherwise, an empty string.
    /// </returns>
    /// <remarks>
    ///    The country and region ISO code returned is used to create an instance of a country specific bank
    ///    class.
    /// </remarks>
    public static LogisticsAddressCountryRegionISOCode paymIdValidationCountryRegionISOCode(
        LedgerJournalACType     _accountType,
        LedgerDimensionAccount  _ledgerDimension,
        BankAccountID           _bankAccountID     = '',
        LedgerJournalACType     _offsetAccountType = LedgerJournalACType::Ledger,
        LedgerDimensionAccount  _offsetLedgerDimension = 0
        )
    {
        BankAccountID                           bankAccountID;
        CustVendAC                              accountNum;
        LogisticsAddressCountryRegionISOCode    bankValidationCountryRegionISOCode;

        if ((_offsetAccountType == LedgerJournalACType::Bank && _offsetLedgerDimension) &&
            (_accountType       == LedgerJournalACType::Cust && _ledgerDimension))
        {
            bankAccountID                      = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_offsetLedgerDimension);
            bankValidationCountryRegionISOCode = SysCountryRegionCode::locationCountryInfo(BankAccountTable::find(bankAccountID).Location);
        }
        else
        {
            switch (_accountType)
            {
                case LedgerJournalACType::Cust:
                    //PaymentId Test based on customer BankAccount is not a valid combination
                    bankValidationCountryRegionISOCode = '';
                    break;

                case LedgerJournalACType::Vend :
                    accountNum                          = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerDimension);
                    bankAccountID                       = _bankAccountID ? _bankAccountID : (select firstonly vendTable where vendTable.AccountNum == accountNum).BankAccount;
                    bankValidationCountryRegionISOCode  = SysCountryRegionCode::locationCountryInfo(VendBankAccount::find(accountNum, bankAccountID).Location);
                    break;

                case LedgerJournalACType::Bank :
                    if (_offsetAccountType == LedgerJournalACType::Cust && _offsetLedgerDimension)
                    {
                        bankAccountID                       = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerDimension);
                        bankValidationCountryRegionISOCode  = SysCountryRegionCode::locationCountryInfo(BankAccountTable::find(_bankAccountID).Location);
                    }
                    else
                    {
                        if (_offsetAccountType == LedgerJournalACType::Vend && _offsetLedgerDimension)
                        {
                            accountNum                          = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_offsetLedgerDimension);
                            bankAccountID                       = _bankAccountID ? _bankAccountID : (select firstonly vendTable where vendTable.AccountNum == accountNum).BankAccount;
                            bankValidationCountryRegionISOCode  = SysCountryRegionCode::locationCountryInfo(VendBankAccount::find(accountNum, bankAccountID).Location);
                        }
                        else
                        {
                            bankValidationCountryRegionISOCode = '';
                        }
                    }
                    break;

                default :
                    switch (_offsetAccountType)
                    {
                        case LedgerJournalACType::Cust:
                            //PaymentId Test based on customer BankAccount is not a valid combination
                            bankValidationCountryRegionISOCode = '';
                            break;

                        case LedgerJournalACType::Vend :
                            accountNum                          = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_offsetLedgerDimension);
                            bankAccountID                       = _bankAccountID ? _bankAccountID : (select firstonly vendTable where vendTable.AccountNum == accountNum).BankAccount;
                            bankValidationCountryRegionISOCode  = SysCountryRegionCode::locationCountryInfo(VendBankAccount::find(accountNum, bankAccountID).Location);
                            break;

                        default :
                            bankValidationCountryRegionISOCode = '';
                    }
            }
        }
        return bankValidationCountryRegionISOCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>