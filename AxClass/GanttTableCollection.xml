<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTableCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttTableCollection
{
    List            listTables;
    ListEnumerator  listEnumeratorGlobal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDataFromAllTables</Name>
				<Source><![CDATA[
    public void deleteDataFromAllTables()
    {
        GanttTableBase ganttTable;
        ganttTable = this.findFirst();

        while (ganttTable != null)
        {
            ganttTable.resetAllData();

            ganttTable = this.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    public int elements()
    {
        return listTables.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    public GanttTableBase findFirst()
    {
        listEnumeratorGlobal = listTables.getEnumerator();

        if (listEnumeratorGlobal && listEnumeratorGlobal.moveNext())
        {
            return listEnumeratorGlobal.current();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    public GanttTableBase findNext()
    {
        if (listEnumeratorGlobal == null)
        {
            throw error(strfmt("@SYS19306", funcname()));
        }

        if (listEnumeratorGlobal && listEnumeratorGlobal.moveNext())
        {
            return listEnumeratorGlobal.current();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableId</Name>
				<Source><![CDATA[
    public GanttTableBase findTableId(tableId _tableId)
    {
        GanttTableBase  ganttTable;
        ListEnumerator  listEnumerator;

        listEnumerator = listTables.getEnumerator();

        while (listEnumerator && listEnumerator.moveNext())
        {
            ganttTable = listEnumerator.current();

            if (ganttTable.tableId() == _tableId)
            {
                return ganttTable;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableName</Name>
				<Source><![CDATA[
    public GanttTableBase findTableName(TableName   _tableName,
                                        boolean     _throwErrorIfNotFound = false)
    {
        GanttTableBase ganttTable;

        ganttTable = this.findTableId(tablename2id(_tableName));

        if (_throwErrorIfNotFound && ganttTable == null)
        {
            throw error(GanttTableBase::txtNotFound(_tableName));
        }

        return ganttTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public boolean insert(GanttTableBase _ganttTable)
    {
        if (!_ganttTable)
        {
            throw error(strfmt("@SYS27147", classstr(GanttTableCollection)));
        }

        return listTables.addEnd(_ganttTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        listTables = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUserChangesOnAllTables</Name>
				<Source><![CDATA[
    public void resetUserChangesOnAllTables()
    {
        GanttTableBase ganttTable;
        ganttTable = this.findFirst();

        while (ganttTable != null)
        {
            ganttTable.resetUserChanges();

            ganttTable = this.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRecordsInAllTables</Name>
				<Source><![CDATA[
    public int64 totalRecordsInAllTables()
    {
        int64           totalRecords;
        GanttTableBase  ganttTable;
        ganttTable = this.findFirst();

        while (ganttTable != null)
        {
            totalRecords = totalRecords + ganttTable.count();

            ganttTable = this.findNext();
        }

        return totalRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBaseDataOnAllTablesAfterSaving</Name>
				<Source><![CDATA[
    public void updateBaseDataOnAllTablesAfterSaving()
    {
        GanttTableBase ganttTable;
        ganttTable = this.findFirst();

        while (ganttTable != null)
        {
            if (ganttTable.parmAllowUserModification() && ganttTable.parmKeepBaseData())
            {
                ganttTable.updateBaseDataAfterSaving();
            }

            ganttTable = this.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttTableCollection construct()
    {
        return new GanttTableCollection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>