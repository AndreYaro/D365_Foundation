<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanProjectForecastDrillThroughHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanProjectForecastDrillThroughHelper</c> class is used as a helper for the drill through functionality
/// from budget planning to project forecast.
/// </summary>
class BudgetPlanProjectForecastDrillThroughHelper
{
    DimensionDisplayValue mainAccountValue;
    ForecastModelId       forecastModelId;
    ProjId                projectId;
    Map                   dimensionAttributeValueMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmMainAccountValue</Name>
				<Source><![CDATA[
    public DimensionDisplayValue parmMainAccountValue(DimensionDisplayValue _mainAccountValue = mainAccountValue)
    {
        mainAccountValue = _mainAccountValue;

        return mainAccountValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;

        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId(ProjId _projectId = projectId)
    {
        projectId = _projectId;

        return projectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttributeValueMap</Name>
				<Source><![CDATA[
    public Map parmDimensionAttributeValueMap(Map _dimensionAttributeValueMap = dimensionAttributeValueMap)
    {
        dimensionAttributeValueMap = _dimensionAttributeValueMap;

        return dimensionAttributeValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForBudgetPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjForecastListPage</c> query to add the ranges, when the user drills through from the budget planning details inquiry form.
    /// </summary>
    /// <param name = "_query">The query to update.</param>
    /// <param name = "_drillThroughHelper">The object of the <c>BudgetPlanProjectForecastDrillThroughHelper</c> class.</param>
    public static void updateQueryForBudgetPlanning(Query _query, BudgetPlanProjectForecastDrillThroughHelper _drillThroughHelper)
    {
        ProjPosting                         projPosting;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        QueryBuildDataSource                projForecastUnionDataSource;
        boolean                             isProjectCategoryRelationAll;
        boolean                             isSalesTaxGroupsRequired;
        boolean                             isValidAccountValue;
        str                                 projectCategories;
        str                                 salesTaxGroups;

        isSalesTaxGroupsRequired = true;

        projForecastUnionDataSource = _query.dataSourceTable(tableNum(ProjForecastUnion));

        if (_drillThroughHelper.parmProjectId())
        {
            projForecastUnionDataSource.addRange(fieldNum(ProjForecastUnion, ProjId)).value(_drillThroughHelper.parmProjectId());
        }

        if (_drillThroughHelper.parmForecastModelId())
        {
            projForecastUnionDataSource.addRange(fieldNum(ProjForecastUnion, ModelId)).value(_drillThroughHelper.parmForecastModelId());
        }

        while select projPosting
            exists join dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == projPosting.LedgerDimension
                    && dimensionAttributeValueCombination.DisplayValue == _drillThroughHelper.parmMainAccountValue()
        {
            isValidAccountValue = true;

            if (!isProjectCategoryRelationAll)
            {
                switch (projPosting.CategoryCode)
                {
                    case TableGroupAll::All:
                        isProjectCategoryRelationAll = true;
                        projectCategories = BudgetPlanningConstants::emptyString;
                        break;

                    case TableGroupAll::GroupId:
                        projectCategories += BudgetPlanProjectForecastDrillThroughHelper::findCategoriesByCategoryGroup(projPosting.ProjCategoryRelation);
                        break;

                    case TableGroupAll::Table:
                        projectCategories += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, projPosting.ProjCategoryRelation, BudgetPlanningConstants::Comma);
                        break;
                }
            }

            if (isSalesTaxGroupsRequired)
            {
                if (projPosting.TaxGroupId)
                {
                    salesTaxGroups += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, projPosting.TaxGroupId, BudgetPlanningConstants::Comma);
                }
                else
                {
                    salesTaxGroups = BudgetPlanningConstants::emptyString;
                    isSalesTaxGroupsRequired = false;
                }
            }
        }

        if (!isValidAccountValue)
        {
            BudgetPlanProjectForecastDrillThroughHelper::addRange(
                _query.dataSourceTable(tableNum(ProjTable)),
                fieldNum(ProjTable, ProjId),
                SysQuery::valueEmptyString());
        }

        BudgetPlanProjectForecastDrillThroughHelper::addRangesToQuery(
            _query,
            projectCategories,
            salesTaxGroups,
            _drillThroughHelper.parmDimensionAttributeValueMap());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given category and sales tax group ranges to the given <c>ProjForecastListPage</c> query.
    /// </summary>
    /// <param name = "_query">Query to add the ranges to.</param>
    /// <param name = "_projectCategories">Category range value.</param>
    /// <param name = "_salesTaxGroups">Sales tax group range value.</param>
    /// <param name = "_dimensionAttributeValueMap">Map of default dimension values.</param>
    public static void addRangesToQuery(
        Query   _query,
        str     _projectCategories,
        str     _salesTaxGroups,
        Map     _dimensionAttributeValueMap)
    {
        QueryBuildDataSource projForecastUnionDataSource = _query.dataSourceTable(tableNum(ProjForecastUnion));
        QueryBuildDataSource projTableDataSource = _query.dataSourceTable(tableNum(ProjTable));

        BudgetPlanProjectForecastDrillThroughHelper::addRange(
            projForecastUnionDataSource,
            fieldNum(ProjForecastUnion, CategoryId),
            _projectCategories);

        BudgetPlanProjectForecastDrillThroughHelper::addRange(
            projTableDataSource,
            fieldNum(ProjTable, TaxGroupId),
            _salesTaxGroups);

        BudgetPlanDrillThroughHelper::appendDimensionRanges(projTableDataSource, fieldNum(ProjTable, DefaultDimension), _dimensionAttributeValueMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the given datasource and field number.
    /// </summary>
    /// <param name = "_dataSource">The datasource to add the range to.</param>
    /// <param name = "_fieldNum">The field to add the range to.</param>
    /// <param name = "_rangeValue">The range value.</param>
    public static void addRange(QueryBuildDataSource _dataSource, int _fieldNum, str _rangeValue)
    {
        if (_rangeValue)
        {
            _rangeValue = strDel(_rangeValue, strlen(_rangeValue), 1);

            _dataSource.addRange(_fieldNum).value(_rangeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoriesByCategoryGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string consisting of all categories that are in the given category group.
    /// </summary>
    /// <param name = "_categoryGroupId">The category group to find the categories for.</param>
    /// <returns>A string consisting of all categories separated by commas.</returns>
    public static str findCategoriesByCategoryGroup(ProjCategoryGroupId _categoryGroupId)
    {
        str             categories;
        str             currentCompany;
        ProjCategory    projCategory;

        currentCompany = curExt();

        while select CategoryId from projCategory
            where projCategory.CategoryGroupId == _categoryGroupId && projCategory.DataAreaId == currentCompany
        {
            categories += strFmt(BudgetPlanningConstants::PlaceHolderP1P2, projCategory.CategoryId, BudgetPlanningConstants::Comma);
        }

        return categories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanProjectForecastDrillThroughHelper construct()
    {
        return new BudgetPlanProjectForecastDrillThroughHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>