<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttribReserveForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsBatchAttribReserveForm</c> class exposes functionality for batch attributes.
/// </summary>
class PdsBatchAttribReserveForm
{
    #define.DateMin(1\1\1980)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes or researches the caller.
    /// </summary>
    /// <param name="_caller">
    /// The caller that should be refreshed or researched.
    /// </param>
    public void callerRefresh(Object _caller)
    {
        if (_caller
            && SysDictClass::isEqualOrSuperclass(
                classNum(FormRun), classIdGet(_caller)))
        {
            if ((_caller.name() == formStr(InventTransPick)
            || _caller.name() == formStr(InventTransOnOrder)
            || _caller.name() == formStr(WMSPickingRegistration))
            && SysFormRun::hasMethod(
                    _caller, methodStr(SysFormRun_doRe, doResearch)))
            {
                _caller.doResearch();
            }
            else if (SysFormRun::hasMethod(_caller, methodStr(SysFormRun_doRe, doRefresh)))
            {
                switch (_caller.name())
                {
                    case formStr(SalesTable):
                        _caller.doRefresh(true);
                        break;
                    case formStr(ProdBOM):
                        _caller.doRefresh();
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if expiry date must be validated.
    /// </summary>
    /// <returns>true if expiry date must be validated; otherwise, false.</returns>
    protected boolean mustValidateExpiryDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReserveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that reservation can be made for a line.
    /// </summary>
    /// <param name="_common">
    /// The source line that the reservation should be made for.
    /// </param>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> buffer that will be used for the validation.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer that will be used for the validation.
    /// </param>
    /// <param name="_tmpPdsBatchAttribSelect">
    /// An <c>tmpPdsBatchAttribSelect</c> buffer that will be used for the validation.
    /// </param>
    /// <param name="_checkDate">
    /// A date used for the validation
    /// </param>
    /// <param name="_pdsOverrideFEFO">
    /// A parameter determining if FEFO rules should be overridden.
    /// </param>
    public void checkReserveLine(
        Common                  _common,
        InventTrans             _inventTrans,
        InventDim               _inventDim,
        tmpPdsBatchAttribSelect _tmpPdsBatchAttribSelect,
        TransDate               _checkDate,
        PdsOverrideFEFO         _pdsOverrideFEFO)
    {
        PdsBatchDispCheck_Reserve   pdsDispCheck;
        CustAccount                 custId;

        custId = this.getCustAccount(_common);

        if (!PdsBatchAttributes::pdsCheckBatchAtribReserve(
                _inventTrans.ItemId,
                custId,
                _inventDim.inventBatchId,
                _tmpPdsBatchAttribSelect))
        {
            throw error("@PDS1332");
        }

        if (#PdsShelfEnabled)
        {
            if (this.mustValidateExpiryDate() &&
                _inventDim.inventBatchId && 
                !InventBatch::pdsCheckExpiryDate(
                    _inventDim.inventBatchId,
                    _inventTrans.ItemId,
                    _checkDate,
                    true,
                    custId,
                    _pdsOverrideFEFO,
                    _inventDim))
            {
                throw error("@PRO2139");
            }

            pdsDispCheck = PdsBatchDispCheck_Reserve::construct();
            if (!pdsDispCheck.validateTransCheck(
                    _inventTrans,
                    _common))
            {
                throw error("@PRO2139");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills in default batch attributes into the <c>tmpPdsBatchAttribSelect</c> buffer.
    /// </summary>
    /// <param name="_tmpPdsBatchAttribSelect">
    /// A <c>tmpPdsBatchAttribSelect</c> buffer that will have the attributes filled in.
    /// </param>
    /// <param name="_inventMovement">
    /// An <c>InventMovement</c> movement used to determine the attributes.
    /// </param>
    public void fillDefaultAttributes(
        tmpPdsBatchAttribSelect _tmpPdsBatchAttribSelect,
        InventMovement          _inventMovement)
    {
        TmpPdsBatchAttribSelect tmpAttrSel;

        tmpAttrSel.setTmpData(_tmpPdsBatchAttribSelect);
        delete_from tmpAttrSel;

        if (_inventMovement && _inventMovement.buffer())
        {
            switch (_inventMovement.buffer().TableId)
            {
                case tableNum(SalesLine):
                    if (!this.fillDefaultCustomerAttributes(
                                _tmpPdsBatchAttribSelect,
                                _inventMovement.buffer().(fieldNum(SalesLine,CustAccount)),
                                _inventMovement.itemId()))
                    {
                        this.fillDefaultItemAttributes(_tmpPdsBatchAttribSelect, _inventMovement.itemId());
                    }
                    break;
                default:
                    this.fillDefaultItemAttributes(_tmpPdsBatchAttribSelect, _inventMovement.itemId());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultCustomerAttributes</Name>
				<Source><![CDATA[
    private boolean fillDefaultCustomerAttributes(
        tmpPdsBatchAttribSelect _tmpPdsBatchAttribSelect,
        CustAccount             _custAcct,
        ItemId                  _itemId)
    {
        TmpPdsBatchAttribSelect         tmpAttrSel;
        PdsBatchAttribByItemCustomer    attribByItemCust;
        PdsBatchAttribByAttribGroup     groupAttrs;
        boolean                         attrsFound = false;
        PdsBatchAttribEnumValues        pdsEnumValues;
        PdsBatchAttrib                  attrib;

        void setValue2Storage(anytype _value1, anytype _value2)
        {
            tmpAttrSel.PdsBatchAttribValue1 = attrib.value2Storage(_value1);
            tmpAttrSel.PdsBatchAttribValue2 = attrib.value2Storage(_value2);
        }

        tmpAttrSel.setTmpData(_tmpPdsBatchAttribSelect);

        while select PdsBatchAttribRelation,
                     PdsBatchAttribMin,
                     PdsBatchAttribMax
            from attribByItemCust
            where attribByItemCust.PdsBatchAttribItemId == _itemId
                && attribByItemCust.PdsBatchAttribCode == TableGroupAll::Table
                && (attribByItemCust.PdsBatchAttribAccountCode
                    == TableGroupAll::All
                    || (attribByItemCust.PdsBatchAttribAccountCode
                            == TableGroupAll::Table
                        && attribByItemCust.PdsBatchAttribAccountRelation
                            == _custAcct)
                    || (attribByItemCust.PdsBatchAttribAccountCode
                            == TableGroupAll::GroupId
                        && attribByItemCust.PdsBatchAttribAccountRelation
                            == CustTable::find(_custAcct).CustGroup))
        {
            select firstonly tmpAttrSel
                where tmpAttrSel.PdsBatchAttribId
                        == attribByItemCust.PdsBatchAttribRelation;

            if (!tmpAttrSel.RecId)
            {
                tmpAttrSel.clear();

                tmpAttrSel.PdsBatchAttribId     =
                            attribByItemCust.PdsBatchAttribRelation;
                tmpAttrSel.PdsBatchAttribOpr1   =
                    PdsBatchAttribOpr::MoreEqual;
                tmpAttrSel.PdsBatchAttribOpr2   =
                    PdsBatchAttribOpr::LessEqual;

                attrib = PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId);

                switch (attrib.PdsBatchAttribType)
                {
                    case PdsBatchAttribType::Enumerate :
                        select firstonly PdsAttribEnumValue
                            from pdsEnumValues
                            order by PdsAttribEnumSeq asc
                            where pdsEnumValues.PdsBatchAttribId
                                    == attribByItemCust.PdsBatchAttribRelation;

                        tmpAttrSel.PdsBatchAttribValue1
                            = pdsEnumValues.PdsAttribEnumValue;

                        select firstonly PdsAttribEnumValue
                            from pdsEnumValues
                            order by PdsAttribEnumSeq desc
                            where pdsEnumValues.PdsBatchAttribId
                                    == attribByItemCust.PdsBatchAttribRelation;

                        tmpAttrSel.PdsBatchAttribValue2
                            = pdsEnumValues.PdsAttribEnumValue;
                        break;

                    case PdsBatchAttribType::String :
                        tmpAttrSel.PdsBatchAttribOpr1 = PdsBatchAttribOpr::empty;
                        tmpAttrSel.PdsBatchAttribOpr2 = PdsBatchAttribOpr::empty;
                        break;

                    case PdsBatchAttribType::Date :
                        setValue2Storage(#DateMin,dateMax());
                        break;

                    case PdsBatchAttribType::Integer:
                        setValue2Storage(
                                real2int(attribByItemCust.PdsBatchAttribMin),
                                real2int(attribByItemCust.PdsBatchAttribMax));
                        break;
                    case PdsBatchAttribType::Realnumber:
                        setValue2Storage(
                                attribByItemCust.PdsBatchAttribMin,
                                attribByItemCust.PdsBatchAttribMax);
                        break;
                }

                tmpAttrSel.insert();

                attrsFound = true;
            }
        }

        while select RecId
            from   attribByItemCust
            where  attribByItemCust.PdsBatchAttribItemId == _itemId
                && attribByItemCust.PdsBatchAttribCode == TableGroupAll::GroupId
                && (attribByItemCust.PdsBatchAttribAccountCode
                    == TableGroupAll::All
                    || (attribByItemCust.PdsBatchAttribAccountCode
                            == TableGroupAll::Table
                        && attribByItemCust.PdsBatchAttribAccountRelation
                            == _custAcct)
                    || (attribByItemCust.PdsBatchAttribAccountCode
                            == TableGroupAll::GroupId
                        && attribByItemCust.PdsBatchAttribAccountRelation
                            == CustTable::find(_custAcct).CustGroup))
            join PdsBatchAttribAttribId,
                 PdsBatchAttribMin,
                 PdsBatchAttribMax
            from  groupAttrs
            where  groupAttrs.PdsBatchAttribGroupId
                    == attribByItemCust.PdsBatchAttribRelation
        {
            select firstonly tmpAttrSel
                where tmpAttrSel.PdsBatchAttribId
                        == groupAttrs.PdsBatchAttribAttribId;

            if (!tmpAttrSel.RecId)
            {
                tmpAttrSel.clear();

                tmpAttrSel.PdsBatchAttribId     =
                    groupAttrs.PdsBatchAttribAttribId;
                tmpAttrSel.PdsBatchAttribOpr1   =
                    PdsBatchAttribOpr::MoreEqual;
                tmpAttrSel.PdsBatchAttribOpr2   =
                    PdsBatchAttribOpr::LessEqual;

                attrib = PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId);

                switch (attrib.PdsBatchAttribType)
                {
                    case PdsBatchAttribType::Enumerate :
                        select firstonly PdsAttribEnumValue
                            from pdsEnumValues
                            order by PdsAttribEnumSeq asc
                            where pdsEnumValues.PdsBatchAttribId
                                    == groupAttrs.PdsBatchAttribAttribId;

                        tmpAttrSel.PdsBatchAttribValue1
                            = pdsEnumValues.PdsAttribEnumValue;

                        select firstonly PdsAttribEnumValue
                            from pdsEnumValues
                            order by PdsAttribEnumSeq desc
                            where pdsEnumValues.PdsBatchAttribId
                                    == groupAttrs.PdsBatchAttribAttribId;

                        tmpAttrSel.PdsBatchAttribValue2
                            = pdsEnumValues.PdsAttribEnumValue;
                        break;

                    case PdsBatchAttribType::String :
                        tmpAttrSel.PdsBatchAttribOpr1 = PdsBatchAttribOpr::empty;
                        tmpAttrSel.PdsBatchAttribOpr2 = PdsBatchAttribOpr::empty;
                        break;

                    case PdsBatchAttribType::Date :
                        setValue2Storage(#DateMin,dateMax());
                        break;

                    case PdsBatchAttribType::Integer:
                        setValue2Storage(
                                real2int(groupAttrs.PdsBatchAttribMin),
                                real2int(groupAttrs.PdsBatchAttribMax));
                        break;

                    case PdsBatchAttribType::Realnumber:
                        setValue2Storage(
                                groupAttrs.PdsBatchAttribMin,
                                groupAttrs.PdsBatchAttribMax);
                        break;
                }

                tmpAttrSel.insert();

                attrsFound = true;
            }
        }

        return attrsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultItemAttributes</Name>
				<Source><![CDATA[
    private boolean fillDefaultItemAttributes(
        TMPPdsBatchAttribSelect _tmpPdsBatchAttribSelect,
        ItemId                  _itemId)
    {
        TmpPdsBatchAttribSelect     tmpAttrSel;
        PdsBatchAttribByItem        itemAttrs;
        PdsBatchAttribByAttribGroup groupAttrs;
        PdsBatchAttrib              attrib;
        boolean                     attrsFound = false;

        void setValue2Storage(anytype _value1, anytype _value2)
        {
            tmpAttrSel.PdsBatchAttribValue1 = attrib.value2Storage(_value1);
            tmpAttrSel.PdsBatchAttribValue2 = attrib.value2Storage(_value2);
        }

        tmpAttrSel.setTmpData(_tmpPdsBatchAttribSelect);

        while select PdsBatchAttribRelation,
                     PdsBatchAttribMin,
                     PdsBatchAttribMax
            from itemAttrs
            where  itemAttrs.PdsBatchAttribItemId == _itemId
                && itemAttrs.PdsBatchAttribCode   == TableGroupAll::Table
        {
            select firstonly tmpAttrSel
                where tmpAttrSel.PdsBatchAttribId
                        == groupAttrs.PdsBatchAttribAttribId;

            if (!tmpAttrSel.RecId)
            {
                tmpAttrSel.clear();
                tmpAttrSel.PdsBatchAttribId     = itemAttrs.PdsBatchAttribRelation;
                tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
                tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;

                attrib = PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId);

                switch (attrib.PdsBatchAttribType)
                {
                    case PdsBatchAttribType::Enumerate:
                        tmpAttrSel.PdsBatchAttribValue1 =
                            (select firstonly PdsAttribEnumValue
                                from pdsBatchAttribEnumValues
                                order by PdsAttribEnumSeq asc
                                where pdsBatchAttribEnumValues.PdsBatchAttribId
                                    == tmpAttrSel.PdsBatchAttribId).PdsAttribEnumValue;

                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                        tmpAttrSel.PdsBatchAttribValue2 = '';
                        break;

                    case PdsBatchAttribType::String:
                        tmpAttrSel.PdsBatchAttribValue1 = '';
                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                        tmpAttrSel.PdsBatchAttribValue2 = '';
                        break;

                    case PdsBatchAttribType::Date:
                        setValue2Storage(#DateMin,maxDate());
                        break;

                    case PdsBatchAttribType::Integer:
                        setValue2Storage(
                            real2int(itemAttrs.PdsBatchAttribMin),
                            real2int(itemAttrs.PdsBatchAttribMax));
                        break;

                    case PdsBatchAttribType::Realnumber:
                        setValue2Storage(
                            itemAttrs.PdsBatchAttribMin,
                            itemAttrs.PdsBatchAttribMax);
                        break;
                }

                tmpAttrSel.insert();
                attrsFound = true;
            }
        }
        while select RecId
            from   itemAttrs
            where  itemAttrs.PdsBatchAttribItemId == _itemId
                && itemAttrs.PdsBatchAttribCode   == TableGroupAll::GroupId
            join PdsBatchAttribAttribId,
                 PdsBatchAttribMin,
                 PdsBatchAttribMax
            from groupAttrs
            where groupAttrs.PdsBatchAttribGroupId
                    == itemAttrs.PdsBatchAttribRelation
        {
            select firstonly tmpAttrSel
                where tmpAttrSel.PdsBatchAttribId
                        == groupAttrs.PdsBatchAttribAttribId;

            if (!tmpAttrSel.RecId)
            {
                tmpAttrSel.clear();
                tmpAttrSel.PdsBatchAttribId     = groupAttrs.PdsBatchAttribAttribId;
                tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
                tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;

                attrib = PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId);

                switch (attrib.PdsBatchAttribType)
                {
                    case PdsBatchAttribType::Enumerate:
                        tmpAttrSel.PdsBatchAttribValue1 =
                            (select firstonly PdsAttribEnumValue
                                from pdsBatchAttribEnumValues
                                order by PdsAttribEnumSeq asc
                                where pdsBatchAttribEnumValues.PdsBatchAttribId
                                    == tmpAttrSel.PdsBatchAttribId).PdsAttribEnumValue;

                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                        tmpAttrSel.PdsBatchAttribValue2 = '';
                        break;

                    case PdsBatchAttribType::String:
                        tmpAttrSel.PdsBatchAttribValue1 = '';
                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                        tmpAttrSel.PdsBatchAttribValue2 = '';
                        break;

                    case PdsBatchAttribType::Date:
                        setValue2Storage(#DateMin,maxDate());
                        break;

                    case PdsBatchAttribType::Integer:
                        setValue2Storage(
                            real2int(groupAttrs.PdsBatchAttribMin),
                            real2int(groupAttrs.PdsBatchAttribMax));
                        break;

                    case PdsBatchAttribType::Realnumber:
                        setValue2Storage(
                            groupAttrs.PdsBatchAttribMin,
                            groupAttrs.PdsBatchAttribMax);
                        break;
                }

                tmpAttrSel.insert();

                attrsFound = true;
            }
        }

        return attrsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a customer account ID.
    /// </summary>
    /// <param name="_common">
    /// The buffer that the customer account ID should be returned from.
    /// </param>
    /// <returns>
    /// A customer account ID.
    /// </returns>
    /// <remarks>
    /// If no customer account ID field exist on the buffer an empty string is returned.
    /// </remarks>
    protected CustAccount getCustAccount(Common _common)
    {
        CustAccount custAccount;

        switch (_common.TableId)
        {
            case tableNum(SalesLine) :
                custAccount = _common.(fieldNum(SalesLine,CustAccount));
                break;
            case tableNum(SalesParmLine) :
                custAccount = _common.(fieldNum(SalesParmLine,CustAccount));
                break;
            default :
                custAccount = '';
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PdsBatchAttribReserveForm</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PdsBatchAttribReserveForm</c> class.
    /// </returns>
    public static PdsBatchAttribReserveForm construct()
    {
        return new PdsBatchAttribReserveForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>