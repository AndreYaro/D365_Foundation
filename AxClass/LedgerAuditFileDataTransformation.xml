<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAuditFileDataTransformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerAuditFileDataTransformation</c> class collects data for AuditFile report of General Electronic Report solution.
/// </summary>
class LedgerAuditFileDataTransformation
{
    Map                 duplicateCustVendIdMap;
    Map                 periodMap;
    TransDate           openingBalanceDate;
    FromDate            fromDate;
    ToDate              toDate;
    LedgerAuditFileTransactionTmp                   ledgerAuditFileTransactionTmp;
    LedgerAuditFileTransactionSubLedgerLinesTmp     ledgerAuditFileTransactionSubLedgerTmp;
    LedgerAuditFileTaxCodesTmp                      ledgerAuditFileTaxCodesTmp;
    LedgerAuditFileCustVendTmp                      ledgerAuditFileCustVendTmp;
    LedgerAuditFileOpeningBalanceLineTmp            ledgerAuditFileOpeningBalanceLineTmp;
    LedgerAuditFileOpeningBalanceSubLedgerLinesTmp  ledgerAuditFileOpeningBalanceSubLedgerLinesTmp;
    LedgerAuditFilePeriodTmp                        ledgerAuditFilePeriodTmp;
    const AccountNum custPrefix = 'Cust_';
    const AccountNum vendPrefix = 'Vend_';

    private Set custTableSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains Company transactions.
    /// </summary>
    /// <returns>
    /// A temporary table that contains Company transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFileTransactionTmp getCompanyTransactions()
    {
        return ledgerAuditFileTransactionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTransactionSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains Company Subledger transactions.
    /// </summary>
    /// <returns>
    /// A temporary table that contains Company Subledger transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFileTransactionSubLedgerLinesTmp getCompanyTransactionSubledger()
    {
        return ledgerAuditFileTransactionSubLedgerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains Company tax codes.
    /// </summary>
    /// <returns>
    /// A temporary table that contains Company tax codes.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFileTaxCodesTmp getCompanyTaxCodes()
    {
        return ledgerAuditFileTaxCodesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains customers and vendors list.
    /// </summary>
    /// <returns>
    /// A temporary table that contains customers and vendors list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFileCustVendTmp getCustVendList()
    {
        return ledgerAuditFileCustVendTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalanceLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains opening balance lines.
    /// </summary>
    /// <returns>
    /// A temporary table that contains ccontains opening balance lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFileOpeningBalanceLineTmp getOpeningBalanceLines()
    {
        return ledgerAuditFileOpeningBalanceLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalanceSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains opening balance subledger lines.
    /// </summary>
    /// <returns>
    /// A temporary table that contains opening balance subledger lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFileOpeningBalanceSubLedgerLinesTmp getOpeningBalanceSubledger()
    {
        return ledgerAuditFileOpeningBalanceSubLedgerLinesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a temporary table that contains financial periods information.
    /// </summary>
    /// <returns>
    /// A temporary table that contains financial periods information.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerAuditFilePeriodTmp getPeriods()
    {
        return ledgerAuditFilePeriodTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalanceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns opening balance date.
    /// </summary>
    /// <returns>
    /// The opening balance date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate getOpeningBalanceDate()
    {
        return openingBalanceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reporting period start date.
    /// </summary>
    /// <returns>
    /// The reporting period start date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate getFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reporting period end date.
    /// </summary>
    /// <returns>
    /// The reporting period end date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate getToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FromDate _fromDate, ToDate _toDate)
    {
        fromDate = _fromDate;
        toDate = _toDate;
        openingBalanceDate = LedgerFiscalCalendar::findOpeningStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(),fromDate);
        custTableSet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into temporary tables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateData()
    {
        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        this.fillCustVend();
        this.fillPeriods();
        this.fillOpeningBalance();
        this.fillVATCodes();
        this.fillTransactions();
        this.fillTransSubLedger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the generated data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void validateData()
    {
        select firstonly ledgerAuditFileOpeningBalanceSubLedgerLinesTmp;
        select firstonly ledgerAuditFileTransactionSubLedgerTmp;
        select firstonly ledgerAuditFileTransactionTmp;

        select firstonly ledgerAuditFileTransactionTmp;
        if (!ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.RecId 
            && !ledgerAuditFileTransactionSubLedgerTmp.RecId 
            && !ledgerAuditFileTransactionTmp.RecId )
        {
            throw error(strFmt("@SYS320048", fromDate, toDate));
        }
        else if (!ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.RecId)
        {
            warning(strFmt("@SYS319451", fromDate, toDate));
        }
        else if (!ledgerAuditFileTransactionSubLedgerTmp.RecId && !ledgerAuditFileTransactionTmp.RecId)
        {
            warning(strFmt("@SYS320047", fromDate, toDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalCustLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of rows of customer transactions.
    /// </summary>
    /// <returns>
    /// The total count of customer transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 calcTotalCustLinesCount()
    {
        return this.calcTotalLinesCountPerAccType(CustVendACType::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalVendLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of rows of vendor transactions.
    /// </summary>
    /// <returns>
    /// The total count of vendor transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 calcTotalVendLinesCount()
    {
        return this.calcTotalLinesCountPerAccType(CustVendACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalCustDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total debit amount of customer transactions.
    /// </summary>
    /// <returns>
    /// The total debit amount of customer transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcTotalCustDebitAmount()
    {
        select sum(Amount) from ledgerAuditFileTransactionSubLedgerTmp
            where ledgerAuditFileTransactionSubLedgerTmp.Amount > 0.0
                && ledgerAuditFileTransactionSubLedgerTmp.AccountType == CustVendAcType::Cust;
        return abs(ledgerAuditFileTransactionSubLedgerTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalVendDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total debit amount of vendor transactions.
    /// </summary>
    /// <returns>
    /// The total debit amount of vendor transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcTotalVendDebitAmount()
    {
        select sum(Amount) from ledgerAuditFileTransactionSubLedgerTmp
            where ledgerAuditFileTransactionSubLedgerTmp.Amount < 0.0
                && ledgerAuditFileTransactionSubLedgerTmp.AccountType == CustVendAcType::Vend;
        return abs(ledgerAuditFileTransactionSubLedgerTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalCustCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total credit amount of customer transactions.
    /// </summary>
    /// <returns>
    /// The total credit amount of customer transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcTotalCustCreditAmount()
    {
        select sum(Amount) from ledgerAuditFileTransactionSubLedgerTmp
            where ledgerAuditFileTransactionSubLedgerTmp.Amount < 0.0
                && ledgerAuditFileTransactionSubLedgerTmp.AccountType == CustVendAcType::Cust;
        return abs(ledgerAuditFileTransactionSubLedgerTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalVendCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total credit amount of vendor transactions.
    /// </summary>
    /// <returns>
    /// The total credit amount of vendor transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcTotalVendCreditAmount()
    {
        select sum(Amount) from ledgerAuditFileTransactionSubLedgerTmp
            where ledgerAuditFileTransactionSubLedgerTmp.Amount > 0.0
                && ledgerAuditFileTransactionSubLedgerTmp.AccountType == CustVendAcType::Vend;
        return abs(ledgerAuditFileTransactionSubLedgerTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalCustLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of rows of customer opening balance transactions.
    /// </summary>
    /// <returns>
    /// The total count of customer opening balance transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 calcOBTotalCustLinesCount()
    {
        return this.calcOBTotalLinesCountPerAccType(CustVendACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalVendLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of rows of vendor opening balance transactions.
    /// </summary>
    /// <returns>
    /// The total count of vendor opening balance transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 calcOBTotalVendLinesCount()
    {
        return this.calcOBTotalLinesCountPerAccType(CustVendACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalCustDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total debit amount of customer opening balance transactions.
    /// </summary>
    /// <returns>
    /// The total debit amount of customer opening balance transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcOBTotalCustDebitAmount()
    {
        select sum(Amount) from ledgerAuditFileOpeningBalanceSubLedgerLinesTmp
            where ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount > 0.0
            && ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType == CustVendACType::Cust;
        return abs(ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalVendDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total debit amount of vendor opening balance transactions.
    /// </summary>
    /// <returns>
    /// The total debit amount of vendor opening balance transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcOBTotalVendDebitAmount()
    {
        select sum(Amount) from ledgerAuditFileOpeningBalanceSubLedgerLinesTmp
            where ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount < 0.0
            && ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType == CustVendACType::Vend;
        return abs(ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalTransactionsDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total debit amount of the General Journal transactions.
    /// </summary>
    /// <returns>
    /// The total debit amount of the General Journal transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcTotalTransactionsDebitAmount()
    {
        return this.calcTotalTransactionAmountByType(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalTransactionsCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total credit amount of the General Journal transactions.
    /// </summary>
    /// <returns>
    /// The total credit amount of the General Journal transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST calcTotalTransactionsCreditAmount()
    {
        return this.calcTotalTransactionAmountByType(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalTransactionsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total transactions count.
    /// </summary>
    /// <returns>
    /// The total transactions count.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 calcTotalTransactionsCount()
    {
        select count(RecId) from ledgerAuditFileTransactionTmp;
        return ledgerAuditFileTransactionTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalCustCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total debit amount of customer opening balance transactions.
    /// </summary>
    /// <returns>
    /// The total debit amount of customer opening balance transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public  AmountMST calcOBTotalCustCreditAmount()
    {
        select sum(Amount) from ledgerAuditFileOpeningBalanceSubLedgerLinesTmp
            where ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount < 0.0
            && ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType == CustVendACType::Cust;
        return abs(ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalVendCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total credit amount of vendor opening balance transactions.
    /// </summary>
    /// <returns>
    /// The total credit amount of vendor opening balance transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public  AmountMST calcOBTotalVendCreditAmount()
    {
        select sum(Amount) from ledgerAuditFileOpeningBalanceSubLedgerLinesTmp
            where ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount > 0.0
            && ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType == CustVendACType::Vend;
        return abs(ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalLinesCountPerAccType</Name>
				<Source><![CDATA[
    private int64 calcTotalLinesCountPerAccType(CustVendACType accType)
    {
        select count(RecId) from ledgerAuditFileTransactionSubLedgerTmp
            where ledgerAuditFileTransactionSubLedgerTmp.AccountType == accType;
        return ledgerAuditFileTransactionSubLedgerTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOBTotalLinesCountPerAccType</Name>
				<Source><![CDATA[
    private int64 calcOBTotalLinesCountPerAccType(CustVendACType accType)
    {
        select count(RecId), AccountType from ledgerAuditFileOpeningBalanceSubLedgerLinesTmp
            where ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType == accType;
        return ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalTransactionAmountByType</Name>
				<Source><![CDATA[
    private AmountMST calcTotalTransactionAmountByType(NoYes _isCredit)
    {
        AmountMST totalAmount = 0;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        select GeneralJournalAccountEntryId from ledgerAuditFileTransactionTmp
            join sum(AccountingCurrencyAmount) from generalJournalAccountEntry
        where generalJournalAccountEntry.RecId == ledgerAuditFileTransactionTmp.GeneralJournalAccountEntryId && generalJournalAccountEntry.IsCredit == _isCredit;

        return _isCredit == NoYes::Yes ? -generalJournalAccountEntry.AccountingCurrencyAmount : generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPeriods</Name>
				<Source><![CDATA[
    private void fillPeriods()
    {
        Query                   periodQuery;
        QueryRun                periodQueryRun;
        QueryBuildDataSource    periodQbds;
        QueryBuildDataSource    currentCompanyQbds;
        QueryBuildRange         periodQbr;
        FiscalCalendarPeriod    fiscal;
        int                     periodNum;
        str                     fieldValue;
        recId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        periodMap = new Map(Types::Integer, Types::String);

        periodQuery = new Query();
        periodQbds = periodQuery.addDataSource(tableNum(FiscalCalendarPeriod));

        periodQbds.addSelectionField(fieldNum(FiscalCalendarPeriod, StartDate));
        periodQbds.addSelectionField(fieldNum(FiscalCalendarPeriod, EndDate));
        periodQbds.addSelectionField(fieldNum(FiscalCalendarPeriod, Type));

        currentCompanyQbds = periodQbds.addDataSource(tableNum(LedgerFiscalCalendarPeriod));
        currentCompanyQbds.joinMode(JoinMode::ExistsJoin);
        currentCompanyQbds.relations(true);

        periodQbr = periodQbds.addRange(fieldNum(FiscalCalendarPeriod, StartDate));
        periodQbr.value(queryRange(fromDate, dateNull()));
        periodQbr = periodQbds.addRange(fieldNum(FiscalCalendarPeriod, EndDate));
        periodQbr.value(queryRange(dateNull(), toDate));

        currentCompanyQbds.addRange(fieldNum(LedgerFiscalCalendarPeriod, Ledger)).value(queryValue(Ledger::current()));
        periodQueryRun = new QueryRun(periodQuery);
        periodNum = 0;

        ttsbegin;

        while (periodQueryRun.next())
        {
            fiscal = periodQueryRun.get(tableNum(FiscalCalendarPeriod));

            ledgerAuditFilePeriodTmp.PeriodNum = periodNum;
            if (fiscal.Type == FiscalPeriodType::Operating)
            {
                periodMap.insert(LedgerFiscalCalendar::findPeriodPositionByDate(calendarRecId, fiscal.StartDate), int2str(periodNum));
            }
            ledgerAuditFilePeriodTmp.StartDate = fiscal.StartDate;
            ledgerAuditFilePeriodTmp.EndDate = fiscal.EndDate;
            ledgerAuditFilePeriodTmp.insert();

            periodNum++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOpeningBalance</Name>
				<Source><![CDATA[
    private boolean fillOpeningBalance()
    {
        if (fromDate == openingBalanceDate)
        {
            Map obAccountMap;
            obAccountMap = this.fillOBLedger(obAccountMap);
            this.fillOBCustSup(obAccountMap);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDuplicateCustSupId</Name>
				<Source><![CDATA[
    private void fillDuplicateCustSupId()
    {
        CustTable       custTable;
        VendTable       vendTable;

        duplicateCustVendIdMap = new Map(Types::String, Types::Integer);

        while select AccountNum from custTable
        exists join AccountNum from vendTable
            where custTable.AccountNum == vendTable.AccountNum
        {
            duplicateCustVendIdMap.insert(custTable.AccountNum, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustVend</Name>
				<Source><![CDATA[
    private void fillCustVend()
    {
        this.fillDuplicateCustSupId();
        this.fillCustList();
        this.fillVendList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustList</Name>
				<Source><![CDATA[
    private void fillCustList()
    {
        Query custQuery = new Query();

        QueryBuildDataSource custQueryDS = custQuery.addDataSource(tableNum(CustTable));
        custQueryDS.addSelectionField(fieldNum(CustTable, RecId));
        custQueryDS.addSelectionField(fieldNum(CustTable, AccountNum));
        custQueryDS.addSelectionField(fieldNum(CustTable, ContactPersonId));
        custQueryDS.addSelectionField(fieldNum(CustTable, CreditMax));
        custQueryDS.addSelectionField(fieldNum(CustTable, VATNum));
        custQueryDS.addSelectionField(fieldNum(CustTable, Party));

        // Only customers with transactions in the period
        QueryBuildDataSource custTransQueryDS = custQueryDS.addDataSource(tableNum(CustTrans));
        custTransQueryDS.relations(true);
        custTransQueryDS.joinMode(JoinMode::ExistsJoin);
        custTransQueryDS.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(fromDate, toDate));
        custTransQueryDS.addRange(fieldNum(CustTrans, AmountMST)).value(SysQuery::valueNotEmptyString());

        QueryRun custQueryRun = new QueryRun(custQuery);

        ttsbegin;

        while (custQueryRun.next())
        {
            this.fillCustListEntry(custQueryRun.get(tableNum(CustTable)));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustListEntry</Name>
				<Source><![CDATA[
    private void fillCustListEntry(CustTable _custTable)
    {
        if (custTableSet.in(_custTable.RecId))
            return;
        custTableSet.add(_custTable.RecId);

        ledgerAuditFileCustVendTmp.CustVendRecId = _custTable.RecId;
        ledgerAuditFileCustVendTmp.AccountNum = _custTable.AccountNum;
        ledgerAuditFileCustVendTmp.AccountType = CustVendACType::Cust;

        if (duplicateCustVendIdMap.exists(_custTable.AccountNum))
        {
            ledgerAuditFileCustVendTmp.IsCustAndVend = NoYes::Yes;
            ledgerAuditFileCustVendTmp.AccountNumWithPrefix = custPrefix + _custTable.AccountNum;
        }
        else
        {
            ledgerAuditFileCustVendTmp.IsCustAndVend = NoYes::No;
            ledgerAuditFileCustVendTmp.AccountNumWithPrefix = _custTable.AccountNum;
        }

        if (_custTable.ContactPersonId)
        {
            ContactPerson contactPerson;
            select firstonly Party from contactPerson
                where contactPerson.ContactPersonId == _custTable.ContactPersonId;
            ledgerAuditFileCustVendTmp.ContactPersonName = contactPerson.personName();
        }

        ledgerAuditFileCustVendTmp.ISOcode = LogisticsAddressCountryRegion::find(_custTable.postalAddress().CountryRegionId).ISOcode;
        ledgerAuditFileCustVendTmp.VATNum = _custTable.VATNum;
        ledgerAuditFileCustVendTmp.CustCreditMax = _custTable.CreditMax;

        ledgerAuditFileCustVendTmp.Name     = _custTable.name();
        ledgerAuditFileCustVendTmp.Email    = _custTable.email();
        ledgerAuditFileCustVendTmp.Telefax  = _custTable.telefax();
        ledgerAuditFileCustVendTmp.Phone    = _custTable.phone();
        ledgerAuditFileCustVendTmp.URL      = _custTable.url();

        ledgerAuditFileCustVendTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendList</Name>
				<Source><![CDATA[
    private void fillVendList()
    {
        Query vendQuery = new Query();

        QueryBuildDataSource vendQueryDS = vendQuery.addDataSource(tableNum(VendTable));
        vendQueryDS.addSelectionField(fieldNum(VendTable, RecId));
        vendQueryDS.addSelectionField(fieldNum(VendTable, AccountNum));
        vendQueryDS.addSelectionField(fieldNum(VendTable, ContactPersonId));
        vendQueryDS.addSelectionField(fieldNum(VendTable, CreditMax));
        vendQueryDS.addSelectionField(fieldNum(VendTable, VATNum));
        vendQueryDS.addSelectionField(fieldNum(VendTable, Party));

        // Only vendors with transactions in the period
        QueryBuildDataSource vendTransQueryDS = vendQueryDS.addDataSource(tableNum(VendTrans));
        vendTransQueryDS.relations(true);
        vendTransQueryDS.joinMode(JoinMode::ExistsJoin);
        vendTransQueryDS.addRange(fieldNum(VendTrans, TransDate)).value(queryRange(fromDate, toDate));
        vendTransQueryDS.addRange(fieldNum(VendTrans, AmountMST)).value(SysQuery::valueNotEmptyString());

        QueryRun vendQueryRun = new QueryRun(vendQuery);

        ttsbegin;

        VendTable vendTable;

        while (vendQueryRun.next())
        {
            vendTable = vendQueryRun.get(tableNum(VendTable));

            ledgerAuditFileCustVendTmp.CustVendRecId = vendTable.RecId;
            ledgerAuditFileCustVendTmp.AccountNum = vendTable.AccountNum;
            ledgerAuditFileCustVendTmp.AccountType = CustVendACType::Vend;

            if (duplicateCustVendIdMap.exists(vendTable.AccountNum))
            {
                ledgerAuditFileCustVendTmp.IsCustAndVend = NoYes::Yes;
                ledgerAuditFileCustVendTmp.AccountNumWithPrefix = vendPrefix + vendTable.AccountNum;
            }
            else
            {
                ledgerAuditFileCustVendTmp.IsCustAndVend = NoYes::No;
                ledgerAuditFileCustVendTmp.AccountNumWithPrefix = vendTable.AccountNum;
            }

            if (vendTable.ContactPersonId)
            {
                ContactPerson contactPerson;
                select firstonly Party from contactPerson
                    where vendTable.ContactPersonId == contactPerson.ContactPersonId;
                ledgerAuditFileCustVendTmp.ContactPersonName = contactPerson.personName();
            }

            ledgerAuditFileCustVendTmp.ISOcode = LogisticsAddressCountryRegion::find(vendTable.postalAddress().CountryRegionId).ISOcode;
            ledgerAuditFileCustVendTmp.VATNum = vendTable.VATNum;
            ledgerAuditFileCustVendTmp.VendCreditMax = vendTable.CreditMax;
            ledgerAuditFileCustVendTmp.Name = vendTable.name();
            ledgerAuditFileCustVendTmp.Email = vendTable.email();
            ledgerAuditFileCustVendTmp.Telefax = vendTable.telefax();
            ledgerAuditFileCustVendTmp.Phone = vendTable.phone();
            ledgerAuditFileCustVendTmp.URL = vendTable.url();

            ledgerAuditFileCustVendTmp.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVATCodes</Name>
				<Source><![CDATA[
    private void fillVATCodes()
    {
        Query                               vatQuery;
        QueryRun                            vatQueryRun;
        QueryBuildDataSource                vatQbdsTaxTable;
        QueryBuildDataSource                vatQbdsTaxLedgerAccountGroup;
        TaxTable                            tax;
        TaxLedgerAccountGroup               taxLedgerAccountGroup;

        vatQuery = new Query();
        vatQbdsTaxTable = vatQuery.addDataSource(tableNum(TaxTable));
        vatQbdsTaxTable.addSelectionField(fieldNum(TaxTable, TaxCode));
        vatQbdsTaxTable.addSelectionField(fieldNum(TaxTable, TaxName));
        vatQbdsTaxTable.addRange(fieldNum(TaxTable, TaxCode));

        vatQbdsTaxLedgerAccountGroup = vatQbdsTaxTable.addDataSource(tableNum(TaxLedgerAccountGroup));
        vatQbdsTaxLedgerAccountGroup.addSelectionField(fieldNum(TaxLedgerAccountGroup, TaxOutgoingLedgerDimension));
        vatQbdsTaxLedgerAccountGroup.addSelectionField(fieldNum(TaxLedgerAccountGroup, TaxIncomingLedgerDimension));
        vatQbdsTaxLedgerAccountGroup.addRange(fieldNum(TaxLedgerAccountGroup, TaxOutgoingLedgerDimension));
        vatQbdsTaxLedgerAccountGroup.addRange(fieldNum(TaxLedgerAccountGroup, TaxIncomingLedgerDimension));
        vatQbdsTaxLedgerAccountGroup.relations(true);
        vatQueryRun = new QueryRun(vatQuery);

        ttsbegin;

        while (vatQueryRun.next())
        {
            tax = vatQueryRun.get(tableNum(TaxTable));
            taxLedgerAccountGroup = vatQueryRun.get(tableNum(TaxLedgerAccountGroup));

            ledgerAuditFileTaxCodesTmp.TaxCode = tax.TaxCode;
            ledgerAuditFileTaxCodesTmp.TaxName = tax.TaxName;
            ledgerAuditFileTaxCodesTmp.VatAccToPay = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(taxLedgerAccountGroup.TaxOutgoingLedgerDimension);
            ledgerAuditFileTaxCodesTmp.VatAccToClaim = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(taxLedgerAccountGroup.TaxIncomingLedgerDimension);
            ledgerAuditFileTaxCodesTmp.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOBLedger</Name>
				<Source><![CDATA[
    private Map fillOBLedger(Map obAccountMap)
    {
        Query                       ledgerQuery;
        QueryRun                    ledgerQueryRun;
        QueryBuildDataSource        qbds;

        MainAccount                     mainAccount;
        LedgerBalanceMainAccountAmounts ledgerBalance;

        ledgerQuery = new Query();
        qbds = ledgerQuery.addDataSource(tableNum(MainAccount));
        qbds.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));
        ledgerQueryRun = new QueryRun(ledgerQuery);
        obAccountMap = new Map(Types::String, Types::Int64);
        ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
        ledgerBalance.parmAccountingDateRange(fromDate, fromDate);
        ledgerBalance.parmIncludeOpeningPeriod(true);

        ttsbegin;

        while (ledgerQueryRun.next())
        {
            mainAccount = ledgerQueryRun.get(tableNum(MainAccount));
            ledgerBalance.calculateBalance(mainAccount);

            ledgerAuditFileOpeningBalanceLineTmp.MainAccountRecId = mainAccount.RecId;
            ledgerAuditFileOpeningBalanceLineTmp.MainAccountID = mainAccount.MainAccountId;
            ledgerAuditFileOpeningBalanceLineTmp.Amount = abs(ledgerBalance.getAccountingCurrencyBalance());
            ledgerAuditFileOpeningBalanceLineTmp.insert();
            obAccountMap.insert(mainAccount.MainAccountId, mainAccount.RecId);
        }

        ttscommit;

        return obAccountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOBCustSup</Name>
				<Source><![CDATA[
    private void fillOBCustSup(Map obAccountMap)
    {
        Query custSupQuery = new Query();

        QueryBuildDataSource custSupQueryDS = custSupQuery.addDataSource(tableNum(CustTable));
        custSupQueryDS.addSelectionField(fieldNum(CustTable, RecId));
        custSupQueryDS.addSelectionField(fieldNum(CustTable, AccountNum));
        custSupQueryDS.addGroupByField(fieldNum(CustTable, RecId));
        custSupQueryDS.addGroupByField(fieldNum(CustTable, AccountNum));

        QueryBuildDataSource custTransOpeningBalanceDS = custSupQueryDS.addDataSource(tableNum(CustTrans));
        custTransOpeningBalanceDS.relations(true);
        custTransOpeningBalanceDS.fetchMode(QueryFetchMode::One2One);
        custTransOpeningBalanceDS.addSelectionField(fieldNum(CustTrans, AmountMST), SelectionField::Sum);
        custTransOpeningBalanceDS.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(dateNull(), fromDate - 1));

        QueryBuildDataSource custSettlementDS = custSupQueryDS.addDataSource(tableNum(CustSettlement));
        custSettlementDS.joinMode(JoinMode::OuterJoin);
        custTransOpeningBalanceDS.fetchMode(QueryFetchMode::One2One);
        custSettlementDS.addSelectionField(fieldNum(CustSettlement, SettleAmountMST), SelectionField::Sum);
        custSettlementDS.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustSettlement, AccountNum));
        custSettlementDS.addRange(fieldNum(CustSettlement, TransDate)).value(queryRange(dateNull(), fromDate - 1));

        QueryRun custSupQueryRun = new QueryRun(custSupQuery);

        ttsbegin;

        CustTable custTable;
        CustTrans custTrans;
        CustSettlement custSettlement;

        while (custSupQueryRun.next())
        {
            custTable = custSupQueryRun.get(tableNum(CustTable));

            custSettlement = custSupQueryRun.get(tableNum(CustSettlement));
            custTrans = custSupQueryRun.get(tableNum(CustTrans));
            custTrans.AmountMST -= custSettlement.SettleAmountMST;

            if (!custTrans.AmountMST)
                continue;

            this.fillCustListEntry(custTable);

            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.CustVendRecId = custTable.RecId;
            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType = CustVendACType::Cust;
            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.MainAccountRecId = LedgerDimensionFacade::getMainAccountFromLedgerDimension(
                CustLedgerAccounts::summaryLedgerDimension(custTable.AccountNum)).RecId;
            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount = abs(custTrans.AmountMST);

            if (duplicateCustVendIdMap.exists(custTable.AccountNum))
            {
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.IsCustAndVend = NoYes::Yes;
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountNumWithPrefix = custPrefix + custTable.AccountNum;
            }
            else
            {
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.IsCustAndVend = NoYes::No;
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountNumWithPrefix = custTable.AccountNum;
            }

            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.insert();
        }

        custSupQuery = new Query();
        custSupQueryDS = custSupQuery.addDataSource(tableNum(VendTable));
        custSupQueryDS.addSelectionField(fieldNum(VendTable, RecId));
        custSupQueryDS.addSelectionField(fieldNum(VendTable, AccountNum));

        custSupQueryRun = new QueryRun(custSupQuery);

        VendTable vendTable;
        VendTrans vendTrans;

        while (custSupQueryRun.next())
        {
            vendTable = custSupQueryRun.get(tableNum(VendTable));

            select sum(AmountMST) from vendTrans
                where vendTrans.AccountNum == vendTable.AccountNum
                    && vendTrans.TransDate == fromDate
                    && !vendTrans.Closed;

            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.CustVendRecId = vendTable.RecId;
            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountType = CustVendACType::Vend;
            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.MainAccountRecId = LedgerDimensionFacade::getMainAccountFromLedgerDimension(
                VendLedgerAccounts::summaryLedgerDimension(vendTable.AccountNum)).RecId;
            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.Amount = abs(vendTrans.AmountMST);

            if (duplicateCustVendIdMap.exists(vendTable.AccountNum))
            {
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.IsCustAndVend = NoYes::Yes;
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountNumWithPrefix = vendPrefix + vendTable.AccountNum;
            }
            else
            {
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.IsCustAndVend = NoYes::No;
                ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.AccountNumWithPrefix = vendTable.AccountNum;
            }

            ledgerAuditFileOpeningBalanceSubLedgerLinesTmp.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransactions</Name>
				<Source><![CDATA[
    private void fillTransactions()
    {
        GeneralJournalAccountEntry      generalJournalAccountEntry;
        GeneralJournalEntry             generalJournalEntry;

        Query                           transNodeQuery;
        QueryRun                        headTransNodeQr, transNodeQr;
        QueryBuildDataSource            qbdstranslERQbds;

        int         periodPosition;
        Description prDescription;
        RecId       prGeneralJournalEntry;

        Query generalJournalQuery = new Query();

        QueryBuildDataSource gjeQbds = generalJournalQuery.addDataSource(tableNum(GeneralJournalEntry));

        gjeQbds.addSelectionField(fieldNum(GeneralJournalEntry, RecId));
        gjeQbds.addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate));
        gjeQbds.addSelectionField(fieldNum(GeneralJournalEntry, JournalNumber));
        gjeQbds.addSelectionField(fieldNum(GeneralJournalEntry, DocumentNumber));
        gjeQbds.addSelectionField(fieldNum(GeneralJournalEntry, CreatedBy));
        gjeQbds.addSelectionField(fieldNum(GeneralJournalEntry, CreatedTransactionId));

        gjeQbds.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
        gjeQbds.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(CurrentOperationsTax::Current));
        gjeQbds.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fromDate, toDate));
        gjeQbds.addOrderByField(fieldNum(GeneralJournalEntry, JournalNumber));

        QueryBuildDataSource gjaeQbds = gjeQbds.addDataSource(tableNum(GeneralJournalAccountEntry));
        gjaeQbds.relations(true);
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCorrection));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, Quantity));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, CreatedBy));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, Text));
        gjaeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, PostingType));

        gjaeQbds.addOrderByField(fieldNum(GeneralJournalAccountEntry, RecId));

        QueryRun queryRun = new QueryRun(generalJournalQuery);
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(LedgerAuditFileTransactionTmp), true, true, true, false, true, ledgerAuditFileTransactionTmp);
        while (queryRun.next())
        {
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry));

            periodPosition = LedgerFiscalCalendar::findPeriodPositionByDate(CompanyInfoHelper::fiscalCalendarRecId(), generalJournalEntry.AccountingDate);
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));

            ledgerAuditFileTransactionTmp.clear();
            ledgerAuditFileTransactionTmp.JournalNumber                 = generalJournalEntry.JournalNumber;
            ledgerAuditFileTransactionTmp.DocumentNumber                = generalJournalEntry.DocumentNumber;
            ledgerAuditFileTransactionTmp.UserId                        = generalJournalEntry.CreatedBy;
            ledgerAuditFileTransactionTmp.GeneralJournalEntryTransId    = generalJournalEntry.CreatedTransactionId;
            ledgerAuditFileTransactionTmp.CompanyBankAccountNum         = '';
            ledgerAuditFileTransactionTmp.GeneralJournalAccountEntryId  = generalJournalAccountEntry.RecId;
            ledgerAuditFileTransactionTmp.PeriodNum                     = periodMap.exists(periodPosition) ? periodMap.lookup(periodPosition) : '';
            ledgerAuditFileTransactionTmp.GeneralJournalEntry           = generalJournalAccountEntry.GeneralJournalEntry;
            ledgerAuditFileTransactionTmp.IsCorrection                  = generalJournalAccountEntry.IsCorrection;
            ledgerAuditFileTransactionTmp.IsCredit                      = generalJournalAccountEntry.IsCredit;
            ledgerAuditFileTransactionTmp.Quantity                      = generalJournalAccountEntry.Quantity;
            ledgerAuditFileTransactionTmp.AccountingCurrencyAmount      = generalJournalAccountEntry.AccountingCurrencyAmount;
            ledgerAuditFileTransactionTmp.TransactionCurrencyAmount     = generalJournalAccountEntry.TransactionCurrencyAmount;
            ledgerAuditFileTransactionTmp.TransactionCurrencyCode       = generalJournalAccountEntry.TransactionCurrencyCode;
            ledgerAuditFileTransactionTmp.AccountId                     = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
            ledgerAuditFileTransactionTmp.SourceId                      = generalJournalAccountEntry.CreatedBy;
            ledgerAuditFileTransactionTmp.Text                          = generalJournalAccountEntry.Text;
            ledgerAuditFileTransactionTmp.AccountingDate                = generalJournalEntry.AccountingDate;

            prDescription = (prGeneralJournalEntry != generalJournalAccountEntry.GeneralJournalEntry) ?
                    enum2str(generalJournalAccountEntry.PostingType) :
                    prDescription;
            ledgerAuditFileTransactionTmp.Description = prDescription;

            recordInsertList.add(ledgerAuditFileTransactionTmp);
            prGeneralJournalEntry = generalJournalAccountEntry.GeneralJournalEntry;
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransSubLedger</Name>
				<Source><![CDATA[
    private void fillTransSubLedger()
    {
        CustTrans               custTrans;
        VendTrans               vendTrans;
        TaxTrans                taxTrans;
        LedgerEntry             ledgerEntry;

        str                     fieldValue;
        real                    debitAmount;
        real                    creditAmount;
        DimensionValue          dimensionValue;

        Query                   custSupQuery;
        Query                   custSupTaxQuery;
        QueryRun                custSupQueryRun;
        QueryRun                custSupTaxQueryRun;
        QueryBuildDataSource    custSupQueryBDS;
        QueryBuildDataSource    custSupTaxQbds;

        custSupQuery = new Query();
        custSupQueryBDS = custSupQuery.addDataSource(tableNum(CustTrans));

        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, RecId));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, AmountMST));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, DueDate));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, AmountCur));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, Voucher));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, CurrencyCode));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, LastSettleVoucher));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, TransDate));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, Invoice));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, Txt));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, DefaultDimension));
        custSupQueryBDS.addSelectionField(fieldNum(CustTrans, AccountNum));

        custSupQueryBDS.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(fromDate, toDate));
        custSupQueryBDS.addOrderByField(fieldNum(CustTrans, Voucher));

        custSupQueryRun = new QueryRun(custSupQuery);

        ttsbegin;

        while (custSupQueryRun.next())
        {
            custTrans = custSupQueryRun.get(tableNum(CustTrans));

            if (custTrans.AmountMST != 0)
            {
                ledgerAuditFileTransactionSubLedgerTmp.AccountType = CustVendACType::Cust;
                ledgerAuditFileTransactionSubLedgerTmp.CustVendTransRecId = custTrans.RecId;
                ledgerAuditFileTransactionSubLedgerTmp.Amount = custTrans.AmountMST;
                ledgerAuditFileTransactionSubLedgerTmp.DueDate = custTrans.DueDate;
                ledgerAuditFileTransactionSubLedgerTmp.AmountCur = custTrans.AmountCur;
                ledgerAuditFileTransactionSubLedgerTmp.Voucher = custTrans.Voucher;
                ledgerAuditFileTransactionSubLedgerTmp.CurrencyCode = custTrans.CurrencyCode;
                ledgerAuditFileTransactionSubLedgerTmp.LastSettleVoucher = custTrans.LastSettleVoucher;
                ledgerAuditFileTransactionSubLedgerTmp.TransDate = custTrans.TransDate;
                ledgerAuditFileTransactionSubLedgerTmp.Invoice = custTrans.Invoice;
                ledgerAuditFileTransactionSubLedgerTmp.Txt = custTrans.Txt;

                if (custTrans.DefaultDimension)
                {
                    dimensionValue = (select firstonly DisplayValue from dimensionAttributeValueSetItem
                                        where dimensionAttributeValueSetItem.DimensionAttributeValueSet == custTrans.DefaultDimension).DisplayValue;
                    ledgerAuditFileTransactionSubLedgerTmp.CostId = dimensionValue;
                }

                if (duplicateCustVendIdMap.exists(custTrans.AccountNum))
                {
                    ledgerAuditFileTransactionSubLedgerTmp.IsCustAndVend = NoYes::Yes;
                    ledgerAuditFileTransactionSubLedgerTmp.AccountNumWithPrefix = custPrefix + custTrans.AccountNum;
                }
                else
                {
                    ledgerAuditFileTransactionSubLedgerTmp.IsCustAndVend = NoYes::No;
                    ledgerAuditFileTransactionSubLedgerTmp.AccountNumWithPrefix = custTrans.AccountNum;
                }

                ledgerAuditFileTransactionSubLedgerTmp.insert();
            }
        }

        custSupQuery = new Query();
        custSupQueryBDS = custSupQuery.addDataSource(tableNum(VendTrans));

        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, RecId));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, AmountMST));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, DueDate));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, AmountCur));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, Voucher));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, CurrencyCode));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, LastSettleVoucher));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, TransDate));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, Invoice));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, Txt));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, DefaultDimension));
        custSupQueryBDS.addSelectionField(fieldNum(VendTrans, AccountNum));

        custSupQueryBDS.addRange(fieldNum(VendTrans, TransDate)).value(queryRange(fromDate, toDate));
        custSupQueryBDS.addOrderByField(fieldNum(VendTrans, Voucher));

        custSupQueryRun = new QueryRun(custSupQuery);

        while (custSupQueryRun.next())
        {
            vendTrans = custSupQueryRun.get(tableNum(VendTrans));

            if (vendTrans.AmountMST != 0)
            {
                ledgerAuditFileTransactionSubLedgerTmp.AccountType = CustVendACType::Vend;
                ledgerAuditFileTransactionSubLedgerTmp.CustVendTransRecId = vendTrans.RecId;
                ledgerAuditFileTransactionSubLedgerTmp.Amount = vendTrans.AmountMST;
                ledgerAuditFileTransactionSubLedgerTmp.DueDate = vendTrans.DueDate;
                ledgerAuditFileTransactionSubLedgerTmp.AmountCur = vendTrans.AmountCur;
                ledgerAuditFileTransactionSubLedgerTmp.Voucher = vendTrans.Voucher;
                ledgerAuditFileTransactionSubLedgerTmp.CurrencyCode = vendTrans.CurrencyCode;
                ledgerAuditFileTransactionSubLedgerTmp.LastSettleVoucher = vendTrans.LastSettleVoucher;
                ledgerAuditFileTransactionSubLedgerTmp.TransDate = vendTrans.TransDate;
                ledgerAuditFileTransactionSubLedgerTmp.Invoice = vendTrans.Invoice;
                ledgerAuditFileTransactionSubLedgerTmp.Txt = vendTrans.Txt;

                if (vendTrans.DefaultDimension)
                {
                    dimensionValue = (select firstonly DisplayValue from dimensionAttributeValueSetItem
                                        where dimensionAttributeValueSetItem.DimensionAttributeValueSet == vendTrans.DefaultDimension).DisplayValue;
                    ledgerAuditFileTransactionSubLedgerTmp.CostId = dimensionValue;
                }

                if (duplicateCustVendIdMap.exists(vendTrans.AccountNum))
                {
                    ledgerAuditFileTransactionSubLedgerTmp.IsCustAndVend = NoYes::Yes;
                    ledgerAuditFileTransactionSubLedgerTmp.AccountNumWithPrefix = vendPrefix + vendTrans.AccountNum;
                }
                else
                {
                    ledgerAuditFileTransactionSubLedgerTmp.IsCustAndVend = NoYes::No;
                    ledgerAuditFileTransactionSubLedgerTmp.AccountNumWithPrefix = vendTrans.AccountNum;
                }

                ledgerAuditFileTransactionSubLedgerTmp.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>