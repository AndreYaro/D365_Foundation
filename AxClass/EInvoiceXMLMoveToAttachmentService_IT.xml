<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceXMLMoveToAttachmentService_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class part of the SysOperationFramework that is responsible for delegating the
/// E-Invoice XML moving to attachment process.
/// This process only runs in batch and is not accessible from UI
/// </summary>
internal class EInvoiceXMLMoveToAttachmentService_IT extends SysOperationServiceBase
{  
 
    const int RowsToMove = 10000;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>move</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the archieve with E-Invoice XML files.
    /// </summary> 
    public void move()
    {
        Query query = this.buildQuery();

        this.moveXmlToAttachment(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttachment</Name>
				<Source><![CDATA[
    private void addAttachment(str _name, str _xml, RefRecId _recId, DataAreaId _dataAreaId)
    {
        using (System.IO.Stream stream = new System.IO.MemoryStream(System.Text.Encoding::UTF8.GetBytes(_xml)))
        {
            DocumentManagement::attachFile(
                tableNum(EInvoice_IT),
                _recId,
                _dataAreaId,
                DocuType::typeFile(),
                stream,
                System.IO.Path::GetFileName(_name),
                System.Web.MimeMapping::GetMimeMapping(_name),
                System.IO.Path::GetFileNameWithoutExtension(_name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        Query query = new Query();
        query.allowCrossCompany(true);
        QueryBuildDataSource qbdsEInvoice = query.addDataSource(tableNum(EInvoice_IT));
        sysQuery::findOrCreateRange(qbdsEInvoice, fieldNum(EInvoice_IT, RecId)).value(strfmt('((%1 = %3) || (%2 = %3))',
                                                                                     fieldstr(EInvoice_IT, Moved),
                                                                                     fieldstr(EInvoice_IT, MovedSigned),
                                                                                     EInvoiceConstants_IT::NoMovedValue));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveXmlToAttachment</Name>
				<Source><![CDATA[
    private void moveXmlToAttachment(Query _query)
    {        
        EInvoiceXMLMoveToAttachmentInstrumentationLogger logger = EInvoiceXMLMoveToAttachmentInstrumentationLogger::createLogger();
        QueryRun queryRun = new QueryRun(_query);
        int numberOfLines = 0;
        SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger('MoveEinvoiceXMLtoAttachment', 'EInvoice_IT');
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(EInvoiceXMLMoveToAttachmentInstrumentationConstants::BatchProgress, SysQuery::countTotal(queryRun));

        using (var runActivityContext = logger.activityContextWithCustomProperties(EInvoiceXMLMoveToAttachmentInstrumentationConstants::EInvoiceXMLMoveToAttachmentMove))
        using (var progressActivityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            try
            {
                while (queryRun.next())
                {
                    EInvoice_IT eInvoiceXML = queryRun.get(tableNum(EInvoice_IT));
                    eInvoiceXML.selectForUpdate(true);
                    changecompany(eInvoiceXML.DataAreaId)
                    {
                        ++ numberOfLines;
                        progressLogger.trackProgress(numberOfLines);

                        if (numberOfLines > RowsToMove)
                        {
                            runActivityContext.addCustomProperty(
                                EInvoiceXMLMoveToAttachmentInstrumentationConstants::BatchCompletedWithoutError,
                                "");
                            break;
                        }
                        ttsbegin;

                        if (eInvoiceXML.XMLOutgoing)
                        {
                            runActivityContext.addCustomProperty(
                                EInvoiceXMLMoveToAttachmentInstrumentationConstants::ExecutingUnsignedXML,
                                eInvoiceXML.EInvoiceFileName);

                            this.addAttachment(
                            this.getXMLName(EInvoiceConstants_IT::XMLOutgoing),
                            eInvoiceXML.XMLOutgoing,
                            eInvoiceXML.RecId,
                            eInvoiceXML.DataAreaId);
                            eInvoiceXML.Moved = NoYes::Yes;
                            eInvoiceXML.XMLOutgoing = null;
                        }

                        if (eInvoiceXML.XMLOutgoingSigned)
                        {
                            runActivityContext.addCustomProperty(
                                EInvoiceXMLMoveToAttachmentInstrumentationConstants::ExecutingSignedXML,
                                eInvoiceXML.EInvoiceFileName);

                            this.addAttachment(
                            this.getXMLName(EInvoiceConstants_IT::XMLOutgoingSigned),
                            eInvoiceXML.XMLOutgoingSigned,
                            eInvoiceXML.RecId,
                            eInvoiceXML.DataAreaId);
                            eInvoiceXML.MovedSigned = NoYes::Yes;
                            eInvoiceXML.XMLOutgoingSigned = null;
                        }

                        eInvoiceXML.update();
                        ttscommit;
                    }
                    
                }            

            }
            catch
            {
                runActivityContext.addCustomProperty(
                                EInvoiceXMLMoveToAttachmentInstrumentationConstants::BatchCompletedWithError,
                                "");
                logger.logError(strFmt('Unhandled exception. ttsLevel:%1',
                appl.ttsLevel()));
                EInvoiceXMLMoveToAttachmentException::throwException();
            }
            finally
            {
                runActivityContext.addCustomProperty(
                            EInvoiceXMLMoveToAttachmentInstrumentationConstants::LineCountMagnitude,
                            ApplicationCommonInstrumentationMagnitude::log10magnitude(numberOfLines));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLName</Name>
				<Source><![CDATA[
    private str getXMLName(str _type)
    {
        return strFmt('%1%2', _type, EInvoiceConstants_IT::XMLExtension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>