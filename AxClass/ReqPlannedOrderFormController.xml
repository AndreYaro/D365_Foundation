<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlannedOrderFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqPlannedOrderFormController</c> class is a controller for the <c>ReqPlannedOrderForm</c> form.
/// </summary>
public class ReqPlannedOrderFormController extends ReqTransFormInventDim
{
    protected ReqPO reqPO;
    protected FormDataSource reqPo_DS;

    protected boolean reqTransFormPoRefreshEnabled;
    protected boolean isDeletingMultiOrders;
    protected boolean isDeletingProductionOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FormRun _formRun)
    {
        super(_formRun);

        reqTransFormPoRefreshEnabled = ReqTransFormPoRefreshToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new planned order form controller.
    /// </summary>
    /// <param name = "_formRun">A planned order form's formRun.</param>
    /// <returns>An instance of <c>ReqPlannedOrderFormController</c> class.</returns>
    public static ReqPlannedOrderFormController newFormRun(FormRun _formRun)
    {
        return new ReqPlannedOrderFormController(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the form behavior after form initialization.
    /// </summary>
    public void formInitPost()
    {
        super();

        this.elementUpdateDesign(InventDimFormDesignUpdate::Init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the form behavior after navigating away from a planned order in grid.
    /// </summary>
    public void reqPoDSActivePost()
    {
        this.elementUpdateDesign(InventDimFormDesignUpdate::Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the form behavior before creating a planned order.
    /// </summary>
    /// <returns>A <c>ReqPO</c> table buffer if planned order is successfully created, otherwise null.</returns>
    public ReqPO reqPoDSCreatePre()
    {
        return ReqCreatePlannedOrderFormDialogController::createDialog(formRun, reqPlanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the form behavior after creating a planned order.
    /// </summary>
    /// <param name="_newReqPo">A <c>ReqPo</c> table buffer of the newly created planned order.</param>
    public void reqPoDSCreatePost(ReqPO _newReqPo)
    {
        if (_newReqPo.RecId)
        {
            InventDim newInventDim = InventDim::find(_newReqPo.CovInventDimId);
            
            inventDim.data(newInventDim);
            inventDim_DS.setCurrent();
            reqPO.data(_newReqPo);
            reqPo_DS.write();

            // Added this check in order to not calling research multiple times and avoid breaking change.
            // updateBOMPlannedOrderView method is calling research as well.
            if (!reqTransFormPoRefreshEnabled && !this.isPlannedOrderWithDerivedDemand(_newReqPo))
            {
                reqPo_ds.research(true);
                this.doResearch();
            }
            // Refresh the view if current order is a planned order and its reference type is derived.
            this.updateBOMPlannedOrderView(_newReqPo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the form behavior after writing a planned order.
    /// </summary>
    public void reqPoDSWritePost()
    {
        if (reqPO.CovInventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(reqPO.CovInventDimId));
            inventDim_DS.setCurrent();
        }
        this.updatePlannedOrderView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the form behavior before writing a planned order.
    /// </summary>
    public void reqPoDSWritePre()
    {
        reqPO.CovInventDimId = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeleteMarkedPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the form behavior after multiple planned orders are deleted.
    /// </summary>
    public void reqPoDSDeleteMarkedPost()
    {
        // Set isDeletingMultiOrders to its default value.
        isDeletingMultiOrders = false;

        // If a planned production order was among marked records,
        // we have to refresh a view, since its BOM exploded orders were also deleted.
        if (isDeletingProductionOrder)
        {
            this.updatePlannedOrderView();

            // Set isDeletingProductionOrder to its default value.
            isDeletingProductionOrder = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeleteMarkedPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements the form behavior before deleting multiple planned orders.
    /// </summary>
    public void reqPoDSDeleteMarkedPre()
    {
        isDeletingProductionOrder = false;
        isDeletingMultiOrders = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements the form behavior after a single planned order is deleted.
    /// </summary>
    /// <param name="_reqPo">
    ///     A planned order which has been deleted. The deleted order has to be
    ///     passed via this parameter because current record in data source will
    ///     no longer contain the deleted order.
    /// </param>
    public void reqPoDSDeletePost(ReqPo _reqPo)
    {
        // Refresh grid if a planned production order was deleted.
        // Grid must be refreshed only when a single order is deleted.
        if (!isDeletingMultiOrders)
        {
            this.updateBOMPlannedOrderView(_reqPo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeletePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements the form behavior before deleting a single planned order.
    /// </summary>
    /// <returns>The order which will be deleted.</returns>
    public ReqPo reqPoDSDeletePre()
    {
        reqPO reqPoToDelete;

        reqPoToDelete.data(reqPo);

        // isDeletingProductionOrder keeps track, whether a planned production order is being deleted.
        isDeletingProductionOrder = isDeletingProductionOrder
            || reqPoToDelete.RefType == ReqRefType::BOMPlannedOrder;

        return reqPoToDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMPlannedOrderView</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Researches all data sources for a planned production order.
    /// </summary>
    /// <param name="_reqPo">
    ///    If this parameter is specified, it is used to decide whether a planned order is a production order
    ///    or not.
    /// </param>
    /// <remarks>
    ///    This method should be called when a planned production order is changed and this change leads to
    ///    creation or deletion of new records. For example, when the planned production order is created, its
    ///    BOM is exploded and new orders are created. In this case, data sources must be refreshed in order
    ///    to show newly created orders.
    /// </remarks>
    public void updateBOMPlannedOrderView(ReqPo _reqPo)
    {
        if (reqTransFormPoRefreshEnabled || this.isPlannedOrderWithDerivedDemand(_reqPo))
        {
            this.updatePlannedOrderView();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlannedOrderView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data on the form.
    /// </summary>
    public void updatePlannedOrderView()
    {
        if (reqTransFormPoRefreshEnabled)
        {
            this.doRereadRefreshAll();
        }
        else
        {
            this.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRereadRefreshAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rereads and refreshes all form data sources. If there are a lot of planned orders the research could consume some time.
    /// Research is used by default because it fetches newly created planned orders as well.
    /// Customers could instead use refresh to get better form performance.
    /// </summary>
    internal void doRereadRefreshAll()
    {
        for (int i = 1; i <= formRun.dataSourceCount(); i++)
        {
            FormDataSource fds = formRun.dataSource(i);

            fds.cursor().data(this.findSourceRecord(fds.name()));
            fds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    public void doResearch()
    {
        reqPo_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record for the datasource.
    /// This method could be extended in case form's customization has new data sources that should be refreshed.
    /// </summary>
    /// <param name = "_dataSourceName">Form datasource name</param>
    /// <returns>A refreshed record.</returns>
    public Common findSourceRecord(str _dataSourceName)
    {
        Common record;

        switch (_dataSourceName)
        {
            case formDataSourceStr(ReqPlannedOrderForm, InventDim) :
                record = InventDim::find(reqPO.CovInventDimId);
                break;

            case formDataSourceStr(ReqPlannedOrderForm, ReqPlanVersion) :
                record = ReqPlanVersion::find(reqPO.PlanVersion);
                break;

            default:
                record = formRun.dataSource(_dataSourceName).cursor();
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlannedOrderWithDerivedDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the requirement transaction is planned order and its reference type is derived.
    /// </summary>
    /// <param name = "_reqPo">A given requirement transaction.</param>
    /// <returns>true, if given <c>ReqPo</c> table record is planned order and its type is derived; otherwise false.</returns>
    private boolean isPlannedOrderWithDerivedDemand(reqPO _reqPo)
    {
        if (!_reqPo.RecId)
        {
            return false;
        }

        return ReqPo::isPlannedOrder(_reqPo.RefType)
            && ReqTrans::derivedRefType(_reqPo.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ReqPO</c> table data source in the class.
    /// </summary>
    /// <param name="_reqPO">The <c>ReqPO</c> table buffer.</param>
    public void reqPoDSInitPost(ReqPO _reqPO)
    {
        reqPO = _reqPO;
        reqPo_DS = FormDataUtil::getFormDataSource(_reqPO);
        Query query = reqPo_DS.query();

        QueryBuildDataSource qbs = query.dataSourceTable(tablenum(ReqPO));
        qbs.clearDynalinks();

        if (formRun.args() && formRun.args().refField())
        {
            qbs.clearRange(fieldNum(ReqPO, RefType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a planned orders form in details mode for user to continue updating the order.
    /// </summary>
    public void openDetails()
    {
        Args args = new Args();
        args.caller(formRun);
        args.record(ReqPO);
        args.lookupRecord(ReqPO);
        args.formViewOption(FormViewOption::Details);
        args.copyCallerQuery(CopyCallerQuery::No);
            
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(ReqPoDetails), MenuItemType::Display);
        FormRun detailsFormRun = menuFunction.create(args);

        ReqPlannedOrderFormCallDetailsContext detailsContext;
        try
        {
            if (ReqTransPoRereadActiveRowForDetailsModeFlight::instance().isEnabled())
            {
                detailsContext = ReqPlannedOrderFormCallDetailsContext::construct(ReqPO.RecId);
            }

            detailsFormRun.run();
            detailsFormRun.wait(true);
        }
        finally
        {
            if (detailsContext)
            {
                detailsContext.dispose();
            }
        }

        this.doResearch();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>