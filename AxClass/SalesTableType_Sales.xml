<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableType_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::Sales, NoYes::No)]
class SalesTableType_Sales extends SalesTableType
{
    boolean         canPickingListBeUpdatedIsExecuted;
    boolean         canPickingListBeUpdatedResult;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateDropShipment</Name>
				<Source><![CDATA[
    boolean canCreateDropShipment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreatePurchOrder</Name>
				<Source><![CDATA[
    boolean canCreatePurchOrder()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the corresponding <c>PurchaseType</c> value.
    /// </summary>
    /// <returns>Purchase order type value 'Purchase'.</returns>
    public PurchaseType purchaseType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreditCardPaymentJournalPost</Name>
				<Source><![CDATA[
    public boolean canCreditCardPaymentJournalPost()
    {
        boolean canHaveCreditCard = salesTable.PaymMode && salesTable.Payment && salesTable.Payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard;

        if (canHaveCreditCard && !CustVendPaym::checkPaymStatus(ModuleCustVend::Cust, salesTable.PaymMode, CustVendPaymStatus::None))
        {
            return checkFailed(strFmt("@SYS4010227", CustVendPaymStatus::None));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveCreditCard</Name>
				<Source><![CDATA[
    public boolean canHaveCreditCard()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnySalesLineThatCanBePickingListUpdated</Name>
				<Source><![CDATA[
    protected SalesLine findAnySalesLineThatCanBePickingListUpdated()
    {
        SalesLine salesLine;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            salesLine = this.kittingSalesLineSelect();
        }
        else
        {
            select firstonly salesLine
                where salesLine.SalesId == salesTable.SalesId
                    && salesLine.SalesQty > 0
                    && ((salesLine.SalesDeliverNow >= 0)
                        || (-salesLine.SalesDeliverNow < salesLine.SalesQty));
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickingListBeUpdated</Name>
				<Source><![CDATA[
    public boolean canPickingListBeUpdated()
    {
        if (!canPickingListBeUpdatedIsExecuted
            || !this.parmAllowSalesLineCaching())
        {
            SalesLine salesLine = this.findAnySalesLineThatCanBePickingListUpdated();

            boolean ret = (salesLine.RecId != 0);

            if (ret && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                SalesTable salesTableLocal = salesLine.salesTable();
                ret = salesTableLocal.mcrOrderStopped == NoYes::No;
            }

            if (ret)
            {
               ret = super();
            }

            canPickingListBeUpdatedResult       = ret;
            canPickingListBeUpdatedIsExecuted   = true;
        }

        return canPickingListBeUpdatedResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    public void deleted()
    {
        super();

        this.updateReplacementOrderDetailsOnReturnOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        super();

        if (salesTable.mcrIsCallCenter())
        {
            ttsbegin;

            MCRSalesStatsCustTable mcrSalesStatsCustTable = MCRSalesStatsCustTable::find(salesTable.CustAccount, true);

            if (mcrSalesStatsCustTable)
            {
                date salesTableCreatedDate = DateTimeUtil::date(salesTable.CreatedDateTime);
                mcrSalesStatsCustTable.LastOrderDate = salesTableCreatedDate;

                if (!mcrSalesStatsCustTable.FirstOrderDate)
                {
                    mcrSalesStatsCustTable.FirstOrderDate = salesTableCreatedDate;
                }

                mcrSalesStatsCustTable.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreateAllowed</Name>
				<Source><![CDATA[
    boolean interCompanyCreateAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesTableType::construct() instead.', false, 31\05\2017)]
    static SalesTableType  construct(SalesTable salesTable)
    {
        if (salesTable.ProjId)
            return new SalesTableType_ProjectSales(salesTable);

        return new SalesTableType_Sales(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSalesLineSelect_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSalesLineSelect_delegate(SalesId _salesId, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSalesLineSelect</Name>
				<Source><![CDATA[
    protected SalesLine kittingSalesLineSelect()
    {
        SalesLine salesLine;
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingSalesLineSelect_delegate(salesTable.SalesId, resultValue);
        if (resultValue.hasResult())
        {
            salesLine = resultValue.result() as SalesLine;
        }
        else
        {
            select firstonly RecId, SalesId
            from salesLine
                where salesLine.SalesId == salesTable.SalesId
                    && salesLine.SalesQty > 0
                    && ((salesLine.SalesDeliverNow >= 0)
                        || (-1*salesLine.SalesDeliverNow < salesLine.SalesQty));
        }
        return salesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>