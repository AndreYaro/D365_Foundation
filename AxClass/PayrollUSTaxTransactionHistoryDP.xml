<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollUSTaxTransactionHistoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollUSTaxTransactionHistoryDP</c> class is the Report Data Provider class for the <c>PayrollUSTaxTransactionHistory</c> SSRS
///    report.
/// </summary>

[
    SRSReportQueryAttribute(queryStr(PayrollTaxTransactionHistoryUnionQuery)),
    SRSReportParameterAttribute(classstr(PayrollUSTaxTransHistoryContract))
]
class PayrollUSTaxTransactionHistoryDP extends SRSReportDataProviderBase
{
    PayrollUSTaxTransactionHistoryTmp payrollUSTaxTransactionHistoryTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHcmCourseConfirmationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetching the data from temporary table <c>PayrollUSTaxTransactionHistoryTmp</c>.
    /// </summary>
    /// <returns>
    /// Records from temporary table <c>PayrollUSTaxTransactionHistoryTmp</c>.
    /// </returns>

    [
        SRSReportDataSetAttribute('PayrollUSTaxTransactionHistoryTmp')
    ]
    public PayrollUSTaxTransactionHistoryTmp getHcmCourseConfirmationTmp()
    {
        select  payrollUSTaxTransactionHistoryTmp;
        return  payrollUSTaxTransactionHistoryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query           q;
        QueryRun        qr;
        QueryBuildRange qbrDate;

        PayrollUSTaxTransHistoryContract    contract;
        PayrollTaxTransactionHistoryUnion   payrollTaxTransactionHistoryUnion;
        HcmWorker                           hcmWorker;
        PayrollTaxCode                      payrollTaxCode;
        PayrollTaxCodeRecId                 previousTaxCodeRecId;
        Description                         description;
        HcmIdentificationTypeRecId          identificationTypeRecId;
        HcmPersonIdentificationNumber       hcmPersonIdentificationNumber;
        boolean                             printSSN;

        contract = this.parmDataContract() as PayrollUSTaxTransHistoryContract;
        printSSN = contract.parmPrintSocialSecurityNumber();

        q = this.parmQuery();

        if (contract.parmFromDate() || contract.parmToDate())
        {
            qbrDate = q.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate));
            qbrDate.value(SysQuery::range(contract.parmFromDate(), contract.parmToDate()));
        }

        if (printSSN)
        {
            identificationTypeRecId = HcmSharedParameters::find().SSNIdentificationType;
        }

        q.dataSourceTable(tableNum(HcmWorker)).addSortField(fieldNum(HcmWorker, PersonnelNumber), SortOrder::Ascending);

        qr = new QueryRun(q);
        while (qr.next())
        {
            payrollTaxTransactionHistoryUnion = qr.get(tableNum(PayrollTaxTransactionHistoryUnion));
            hcmWorker = HcmWorker::find(PayrollTaxTransactionHistoryUnion.Worker);

            payrollTaxCode = PayrollTaxCode::find(payrollTaxTransactionHistoryUnion.TaxCode);

            payrollUSTaxTransactionHistoryTmp.clear();
            payrollUSTaxTransactionHistoryTmp.PersonnelNumber = hcmWorker.PersonnelNumber;
            payrollUSTaxTransactionHistoryTmp.WorkerName = hcmWorker.name();
            payrollUSTaxTransactionHistoryTmp.PayStatementId = payrollPayStatement::find(payrollTaxTransactionHistoryUnion.PayStatement).DocumentNumber;
            payrollUSTaxTransactionHistoryTmp.GrossWages = payrollTaxTransactionHistoryUnion.GrossWages;
            payrollUSTaxTransactionHistoryTmp.GrossSubjectWages = payrollTaxTransactionHistoryUnion.GrossSubjectWages;
            payrollUSTaxTransactionHistoryTmp.SubjectWages = payrollTaxTransactionHistoryUnion.SubjectWages;
            payrollUSTaxTransactionHistoryTmp.Hours = payrollTaxTransactionHistoryUnion.Hours;
            payrollUSTaxTransactionHistoryTmp.Rate = payrollTaxTransactionHistoryUnion.Rate;
            payrollUSTaxTransactionHistoryTmp.WageBase = payrollTaxTransactionHistoryUnion.WageBase;
            payrollUSTaxTransactionHistoryTmp.ExcessWages = payrollTaxTransactionHistoryUnion.ExcessWages;
            payrollUSTaxTransactionHistoryTmp.CalculatedTaxAmount = payrollTaxTransactionHistoryUnion.CalculatedTaxAmount;
            payrollUSTaxTransactionHistoryTmp.ActualCombinedTax = payrollTaxTransactionHistoryUnion.TaxLineAmount;
            payrollUSTaxTransactionHistoryTmp.TaxCode = payrollTaxCode.Code;

            if (printSSN)
            {
                hcmPersonIdentificationNumber = HcmPersonIdentificationNumber::findByPersonAndType(hcmWorker.Person, identificationTypeRecId);
                payrollUSTaxTransactionHistoryTmp.SocialSecurityNumber = hcmPersonIdentificationNumber.IdentificationNumber;
            }

            if (previousTaxCodeRecId != payrollTaxCode.RecId)
            {
                description = PayrollTaxCodeDetail::findByPayrollTaxCodeLegalEntity(payrollTaxCode.RecId, CompanyInfo::current()).ReportDescription;
                if (description == '')
                {
                    description = payrollTaxCode.Description;
                }

                previousTaxCodeRecId = payrollTaxCode.RecId;
            }
            payrollUSTaxTransactionHistoryTmp.Description = description;

            if (payrolltaxcode.type == payrolltaxcodetype::ER_SUTA && payrollTaxTransactionHistoryUnion.PriorState)
            {
                payrollUSTaxTransactionHistoryTmp.PriorStateWages = enum2str(NoYes::Yes);
            }
            else
            {
                // Clear out the value for non-SUTA or non prior state tax lines
                payrollUSTaxTransactionHistoryTmp.PriorStateWages = '';
            }

            payrollUSTaxTransactionHistoryTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PayrollUSTaxTransactionHistoryDP construct()
    {
        return new PayrollUSTaxTransactionHistoryDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>