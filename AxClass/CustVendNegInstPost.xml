<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNegInstPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CustVendNegInstPost
{
    LedgerVoucher ledgerVoucher;
    LedgerJournalTrans ledgerJournalTrans;
    LedgerJournalType ledgerJournalType;
    boolean isConditionalTaxSpain;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNewCustVendVoucher</Name>
				<Source><![CDATA[
    abstract protected CustVendVoucher getNewCustVendVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNegInstTransBuffer_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a table buffer of an appropriate type of negotiable instrument line.
    /// </summary>
    /// <returns>
    /// A table buffer of an appropriate type of negotiable instrument line.
    /// </returns>
    abstract protected CustVendNegInstTrans initNegInstTransBuffer_ES()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransBuffer</Name>
				<Source><![CDATA[
    abstract protected CustVendTrans initTransBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNegInstTrans</Name>
				<Source><![CDATA[
    abstract protected CustVendNegInstTrans insertNegInstTrans(CustVendNegInstJour   custVendNegInstJour,
                                                               CustVendTrans         nextStepTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes

        isConditionalTaxSpain = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]) && TaxParameters::find().ConditionalTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        if (!prmisDefault(_ledgerJournalTrans))
        {
            ledgerJournalTrans = _ledgerJournalTrans;
            ledgerJournalType = ledgerJournalTrans.ledgerJournalTable().JournalType;
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        #OCCRetryCount

        CustVendTrans settlingTrans = this.initTransBuffer();
        CustVendVoucher custVendVoucher = this.getNewCustVendVoucher(ledgerJournalTrans);

        custVendVoucher.parmExchRate(ledgerJournalTrans.ExchRate);
        custVendVoucher.parmExchRateSecondary(ledgerJournalTrans.ExchRateSecond);
        custVendVoucher.parmTypeOfCreditmaxCheck(TypeOfCreditmaxCheck::None);

        try
        {
            ttsbegin;

            // Settle the customer transaction of the previous step.
            this.postSettlingStep(custVendVoucher, settlingTrans);

            if (settlingTrans.TableId == tableNum(CustTrans))
            {
                settlingTrans = CustTrans::find(settlingTrans.RecId, true);
            }
            else
            {
                settlingTrans = VendTrans::find(settlingTrans.RecId, true);
            }

            // Create the next step
            this.postNextStep(custVendVoucher, settlingTrans);

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    protected void postNextStep(CustVendVoucher _custVendVoucher, CustVendTrans _settlingTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
    protected void postSettlingStep(CustVendVoucher custVendVoucher, CustVendTrans settlingTrans)
    {
        custVendVoucher.parmCustVendNegInstStatus(this.status());

        custVendVoucher.post(ledgerVoucher, settlingTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    abstract protected CustVendNegInstSeqNum seqNum(CustVendNegInstId _custVendNegInstId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNegInstFieldOnTrans</Name>
				<Source><![CDATA[
    protected void setNegInstFieldOnTrans(
        CustVendTrans custVendTrans,
        CustVendNegInstId _id,
        CustVendNegInstStatus _status,
        CustVendNegInstSeqNum _seqNum)
    {
        custVendTrans.NegInstId = _id;
        custVendTrans.NegInstStatus = _status;
        custVendTrans.NegInstSeqNum = _seqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSettlement_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax settlement reversal.
    /// </summary>
    /// <param name="_custVendNegInstTrans">
    /// A table buffer containing the negotiable instrument line being protested.
    /// </param>
    protected void taxSettlement_ES(CustVendNegInstTrans _custVendNegInstTrans)
    {
        CustVendNegInstTrans custVendNegInstTrans = this.initNegInstTransBuffer_ES();
        CustVendTrans custVendTrans = this.initTransBuffer();
        CustVendSettlement custVendSettlement = CustVendTransStatic::newTrans(custVendTrans).custVendSettlement();
        CustVendTable custVendTable = CustVendTransStatic::newTrans(custVendTrans).custVendTable();

        select firstOnly CustVendAC, TransDate, Voucher from custVendNegInstTrans
            where custVendNegInstTrans.NegInstId == _custVendNegInstTrans.NegInstId
               && custVendNegInstTrans.CustVendAC == _custVendNegInstTrans.CustVendAC
               && custVendNegInstTrans.Status == CustVendNegInstStatus::Drawn;

        if (custVendNegInstTrans)
        {
            select firstOnly crossCompany custVendSettlement
                where custVendSettlement.AccountNum == custVendNegInstTrans.CustVendAC
                   && custVendSettlement.TransDate == custVendNegInstTrans.TransDate
                   && custVendSettlement.OffsetTransVoucher == custVendNegInstTrans.Voucher
                   && custVendSettlement.OffsetCompany == custVendNegInstTrans.company()
            join firstOnly custVendTrans
                where custVendTrans.RecId == custVendSettlement.TransRecId
                    && (custVendTrans.NegInstStatus == CustVendNegInstStatus::Invoiced
                        || custVendTrans.NegInstStatus == CustVendNegInstStatus::None);

            changeCompany(custVendTrans.company())
            {
                select firstonly custVendTable
                    where custVendTable.AccountNum == custVendTrans.AccountNum;
            }

            LedgerVoucherGroup ledgerVoucherGroup = LedgerVoucherGroup::construct();

            CustVendReversePosting reversePosting = CustVendReversePosting::construct(custVendTable, ledgerVoucherGroup);
            reversePosting.parmTransDate(ledgerJournalTrans.TransDate);
            reversePosting.parmParentVoucher(ledgerVoucher.lastVoucher());
            LedgerVoucher reversalLedgerVoucher = reversePosting.parmLedgerVoucher_W();
            reversalLedgerVoucher.parmReversal(false);

            real settlementFactor = custVendTrans.AmountCur ? (custVendSettlement.SettleAmountCur - (reversePosting.cashDiscVat() ? custVendSettlement.UtilizedCashDisc : 0)) / custVendTrans.AmountCur : 0;

            reversePosting.taxSettlement(custVendTrans, custVendSettlement, -settlementFactor * 100);

            ledgerVoucherGroup.end();

            if (reversalLedgerVoucher != null)
            {
                reversalLedgerVoucher.createVoucherLinks(ledgerVoucher.lastVoucher(), ledgerVoucher.lastTransDate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendNegInstPost construct(LedgerJournalTrans _ledgerJournalTrans, LedgerVoucher _ledgerVoucher)
    {
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();
        CustVendNegInstPost custVendNegInstPost;

        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::CustBillOfExchangeDraw:
                custVendNegInstPost = new CustBillOfExchangePostDraw();
                break;

            case LedgerJournalType::CustBillOfExchangeRedraw:
                custVendNegInstPost = new CustBillOfExchangePostReDraw();
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
                {
                    custVendNegInstPost = new CustBillOfExchangePostProtestHonored();
                }
                else
                {
                    custVendNegInstPost = new CustBillOfExchangePostProtest();
                }
                break;

            case LedgerJournalType::CustPaymRemittance:
                custVendNegInstPost = new CustBillOfExchangePostRemit();
                break;

            case LedgerJournalType::CustBillOfExchangeSettle:
                custVendNegInstPost = new CustBillOfExchangePostHonor();
                break;

            case LedgerJournalType::VendPromissoryNoteDraw:
                custVendNegInstPost = new VendPromissoryNotePostDraw();
                break;

            case LedgerJournalType::VendPromissoryNoteRedraw:
                if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
                {
                    custVendNegInstPost = new VendPromissoryNotePostReDrawHonored();
                }
                else
                {
                    custVendNegInstPost = new VendPromissoryNotePostReDraw();
                }
                break;

            case LedgerJournalType::VendPaymRemittance:
                custVendNegInstPost = new VendPromissoryNotePostRemit();
                break;

            case LedgerJournalType::VendPromissoryNoteSettle:
                custVendNegInstPost = new VendPromissoryNotePostHonor();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        custVendNegInstPost.parmLedgerVoucher(_ledgerVoucher);
        custVendNegInstPost.parmLedgerJournalTrans(_ledgerJournalTrans);

        return custVendNegInstPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfile</Name>
				<Source><![CDATA[
    static PostingProfile getPostingProfile(
        LedgerJournalType _ledgerJournalType,
        BankRemittanceType _bankRemittanceType = BankRemittanceType::None)
    {
        PostingProfile postingProfile;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::CustBillOfExchangeDraw:
                postingProfile = CustParameters::find().PostingProfileBills;
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                postingProfile = CustParameters::find().PostingProfileBillsProtested;
                break;

            case LedgerJournalType::CustBillOfExchangeRedraw:
                postingProfile = CustParameters::find().PostingProfileBills;
                break;

            case LedgerJournalType::CustPaymRemittance:
                switch (_bankRemittanceType)
                {
                    case BankRemittanceType::Collection:
                        postingProfile = CustParameters::find().PostingProfileBillsRemitCollection;
                        break;

                    case BankRemittanceType::Discount:
                        postingProfile = CustParameters::find().PostingProfileBillsRemitDiscount;
                        break;

                    default:
                        postingProfile = CustParameters::find().PostingProfileBills;
                }
                break;

            case LedgerJournalType::VendPromissoryNoteDraw:
                postingProfile = VendParameters::find().PostingProfileNotes;
                break;

            case LedgerJournalType::VendPromissoryNoteRedraw:
                postingProfile = VendParameters::find().PostingProfileNotes;
                break;

            case LedgerJournalType::VendPaymRemittance:
                if (_bankRemittanceType == BankRemittanceType::Collection)
                {
                    postingProfile = VendParameters::find().PostingProfileInvoiceRemit;
                }
                else if (_bankRemittanceType == BankRemittanceType::Discount || _bankRemittanceType == BankRemittanceType::None)
                {
                    postingProfile = VendParameters::find().PostingProfileRemitNotes;
                }
                break;
            default:
                break;
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfileForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the posting profile based on the journal type.
    /// </summary>
    /// <returns>
    ///     The posting profile.
    /// </returns>
    protected PostingProfile getPostingProfileForVoucher()
    {
        return CustVendNegInstPost::getPostingProfile(ledgerJournalType, ledgerJournalTrans.BankRemittanceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    public SettlementType getSettlementType()
    {
        return SettlementType::None;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>