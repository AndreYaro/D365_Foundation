<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAbstractRecordObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAbstractRecordObject</c> class is an abstract object class,
/// which is the base of
/// - <c>TaxIntegrationDocumentObject</c>,
/// - <c>TaxIntegrationLineObject</c>.
/// </summary>
public abstract class TaxIntegrationAbstractRecordObject
{
    // new
    private RefTableId              localTableId;
    private RefRecId                localRecId;
    private Common                  localRecord;

    protected Map                   fieldMap;

    private TaxIntegrationRemoteId  remoteId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationAbstractRecordObject</c>.
    /// </summary>
    /// <param name = "_localTableId">The local table id.</param>
    /// <param name = "_localRecId">The local rec id.</param>
    protected void new(RefTableId _localTableId, RefRecId _localRecId)
    {
        this.localTableId = _localTableId;
        this.localRecId = _localRecId;
        this.fieldMap = new Map(Types::String, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local table id.
    /// </summary>
    /// <returns>The local table id.</returns>
    public final RefTableId getLocalTableId()
    {
        return this.localTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local rec id.
    /// </summary>
    /// <returns>The local rec id.</returns>
    public final RefRecId getLocalRecId()
    {
        return this.localRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocalRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets local record.
    /// </summary>
    /// <param name = "_value">The local record.</param>
    protected internal final void setLocalRecord(Common _value)
    {
        this.localRecord = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets local record.
    /// </summary>
    /// <returns>The local record.</returns>
    public final Common getLocalRecord()
    {
        return this.localRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local id combination.
    /// </summary>
    /// <returns>The local id combination.</returns>
    public final TaxIntegrationLocalId getLocalId()
    {
        return TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.localTableId, this.localRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remote id.
    /// </summary>
    /// <returns>The remote id.</returns>
    public final TaxIntegrationRemoteId getRemoteId()
    {
        return this.remoteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemoteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the remote id.
    /// </summary>
    /// <param name = "_value">The remote id.</param>
    public final void setRemoteId(TaxIntegrationRemoteId _value)
    {
        this.remoteId = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalIdStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local id combination.
    /// </summary>
    /// <param name = "_tableId">The local table id.</param>
    /// <param name = "_recId">The local rec id.</param>
    /// <returns>The local id combination.</returns>
    public final static TaxIntegrationLocalId getLocalIdStatic(RefTableId _tableId, RefRecId _recId)
    {
        return con2Str([_tableId, _recId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the field to map.
    /// </summary>
    /// <param name = "_fieldName">The field name, key of the map.</param>
    /// <param name = "_value">The value of the field.</param>
    public void setField(str _fieldName, anytype _value)
    {
        fieldMap.insert(_fieldName, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the field has been set in map.
    /// </summary>
    /// <param name = "_fieldName">The field name, key of the map.</param>
    /// <returns>true, if field exists in map; otherwise, false.</returns>
    public boolean isFieldSet(str _fieldName)
    {
        return fieldMap.exists(_fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value from the fieldMap.
    /// </summary>
    /// <param name = "_fieldName">The field name, key of the map.</param>
    /// <returns>The value from the fieldMap.</returns>
    /// <remarks>Call isFieldSet first in case the value is not set in map.</remarks>
    public anytype getField(str _fieldName)
    {
        if (!fieldMap.exists(_fieldName))
        {
            this.logFieldNotFoundError(_fieldName);

            throw error(strFmt("@TaxIntegrationException:TaxIntegrationFieldNotSet", _fieldName, tableId2Name(localTableId), localRecId));

            return null;
        }
        return fieldMap.lookup(_fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFieldNotFoundError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log field not found error to telemetry
    /// </summary>
    /// <param name = "_fieldName">The field name</param>
    private void logFieldNotFoundError(str _fieldName)
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource   taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        str                                                     processMessage;
        str                                                     exceptionPlace;
            
        exceptionPlace = strFmt('[%1::%2]', classStr(TaxIntegrationAbstractRecordObject), methodStr(TaxIntegrationAbstractRecordObject, logFieldNotFoundError));

        processMessage += strFmt("@TaxIntegrationException:TaxIntegrationFieldNotSet", _fieldName, tableId2Name(localTableId), localRecId);
        processMessage += ' FieldName: ' + _fieldName;
        processMessage += ', TableName: ' + tableId2Name(localTableId);
        processMessage += ', RecId: ' + int2Str(localRecId);

        taxEventSourceLog.TaxProcessError(guid2Str(newGuid()), processMessage, ApplicationPlatformTelemetry::formatCallStack(xSession::xppCallStack()), exceptionPlace);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>