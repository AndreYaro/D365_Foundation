<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOrderOperationInputDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailOrderOperationInputDocument</c> class represents the document sent as a parameter to an order operation.
/// </summary>
internal class RetailOrderOperationInputDocument
{
    private str documentStr;
    private XmlDocument custOrderXmlDocument;
    private str targetOrderId;
    private str storeId, terminalId, transactionId;
    private RefRecId channelId;
    private str targetStoreId, targetTerminalId, targetTransactionId;
    private RefRecId targetChannelId;
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Private constructor of <c>RetailOrderOperationInputDocument</c>.
    /// </summary>
    /// <param name = "_documentStr">The input document XML source.</param>
    private void new(str _documentStr)
    {
        this.documentStr = _documentStr;
        this.parseDocumentSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailOrderOperationInputDocument</c> class.
    /// </summary>
    /// <param name = "_documentStr">Operation input document.</param>
    /// <returns>New instance of the class.</returns>
    internal static RetailOrderOperationInputDocument construct(str _documentStr)
    {
        return new RetailOrderOperationInputDocument(_documentStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetOrderId</Name>
				<Source><![CDATA[
    internal str getTargetOrderId()
    {
        return this.targetOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoreId</Name>
				<Source><![CDATA[
    internal str getStoreId()
    {
        return this.storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTerminalId</Name>
				<Source><![CDATA[
    internal str getTerminalId()
    {
        return this.terminalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionId</Name>
				<Source><![CDATA[
    internal str getTransactionId()
    {
        return this.transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelId</Name>
				<Source><![CDATA[
    internal RefRecId getChannelId()
    {
        return this.channelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetStoreId</Name>
				<Source><![CDATA[
    internal str getTargetStoreId()
    {
        return this.targetStoreId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetTerminalId</Name>
				<Source><![CDATA[
    internal str getTargetTerminalId()
    {
        return this.targetTerminalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetTransactionId</Name>
				<Source><![CDATA[
    internal str getTargetTransactionId()
    {
        return this.targetTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetChannelId</Name>
				<Source><![CDATA[
    internal RefRecId getTargetChannelId()
    {
        return this.targetChannelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTargetOrderId</Name>
				<Source><![CDATA[
    internal void setTargetOrderId(str _orderId)
    {
        this.targetOrderId = _orderId;
        this.serializeDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentSource</Name>
				<Source><![CDATA[
    internal str getDocumentSource()
    {
        return this.documentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDocumentSource</Name>
				<Source><![CDATA[
    private void parseDocumentSource()
    {
        XmlElement  xmlElement;
        XmlElement  itemsElement;
        XmlNodeList itemsList;

        custOrderXmlDocument = new XmlDocument();
        custOrderXmlDocument.loadXml(this.documentStr);
        
        this.targetOrderId = this.getStringElementValueOrCreateDefault('Id');
        this.storeId = this.getStringElementValueOrCreateDefault('StoreId');
        this.transactionId = this.getStringElementValueOrCreateDefault('TransactionId');
        this.terminalId = this.getStringElementValueOrCreateDefault('TerminalId');

        xmlElement = custOrderXmlDocument.documentElement().getNamedElement('ChannelRecordId');
        this.channelId = this.getInt64ValueOrDefault(xmlElement);

        itemsElement = custOrderXmlDocument.documentElement().getNamedElement('Items');
        if (!itemsElement)
        {
            return;
        }

        itemsList = itemsElement.childNodes();
        if (itemsList.length() <= 0)
        {
            return;
        }

        //we only support the cancellation of the entire order so we are getting target transaction information
        //from the first sales line as it is the same as in the rest of the lines.
        xmlElement = itemsList.item(0);
        this.targetTransactionId = this.getStringAttributeValueOrDefault(xmlElement, 'CancelledTransactionId');
        this.targetStoreId = this.getStringAttributeValueOrDefault(xmlElement, 'ReturnStore');
        this.targetTerminalId = this.getStringAttributeValueOrDefault(xmlElement, 'ReturnTerminalId');

        // the following implementation works for physical store order cancellation. For online channel cancellation, channel id will need to be passed from the channel
        RetailStoreTable storeTable = RetailStoreTable::find(this.targetStoreId);
        this.targetChannelId = storeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeDocument</Name>
				<Source><![CDATA[
    private void serializeDocument()
    {
        XmlElement xmlElement = custOrderXmlDocument.documentElement().getNamedElement('Id');
        xmlElement.innerText(this.targetOrderId);
        this.documentStr = custOrderXmlDocument.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringElementValueOrCreateDefault</Name>
				<Source><![CDATA[
    private str getStringElementValueOrCreateDefault(str _namedElement, str _defaultValue = '')
    {
        XmlElement xmlElement = custOrderXmlDocument.documentElement().getNamedElement(_namedElement);
        if (!xmlElement)
        {
            xmlElement = custOrderXmlDocument.createElement(_namedElement);
            xmlElement.innerText(_defaultValue);
            custOrderXmlDocument.documentElement().appendChild(xmlElement);
            this.documentStr = custOrderXmlDocument.toString();
        }

        return xmlElement.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInt64ValueOrDefault</Name>
				<Source><![CDATA[
    private int64 getInt64ValueOrDefault(XmlElement _xmlElement, int64 _defaultValue = 0)
    {
        return (_xmlElement != null) ? str2Int64(_xmlElement.text()) : _defaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringAttributeValueOrDefault</Name>
				<Source><![CDATA[
    private str getStringAttributeValueOrDefault(XmlElement _xmlElement, str _attributeName, str _defaultValue = '')
    {
        str attrValue = (_xmlElement != null) ? _xmlElement.getAttribute(_attributeName) : null;
        return (attrValue != null) ? attrValue : _defaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInt64AttributeValueOrDefault</Name>
				<Source><![CDATA[
    private int64 getInt64AttributeValueOrDefault(XmlElement _xmlElement, str _attributeName, int64 _defaultValue = 0)
    {
        str attrValue =  (_xmlElement != null) ? _xmlElement.getAttribute(_attributeName) : null;
        return (attrValue != null) ? str2Int64(attrValue) : _defaultValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>