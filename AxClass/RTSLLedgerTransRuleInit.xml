<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rtslLedgerTransRuleInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rtslLedgerTransRuleInit extends RunBase
{
    RTSLRuleGroup   ruleGroup;
    QueryRun        queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RTSLRuleGroup _ruleGroup)
    {
        Query                   query = new Query();
        QueryBuildDataSource    ds;
        super();

        ruleGroup = _ruleGroup;

        ds = query.addDataSource(tableNum(MainAccount));

        ds.addRange(fieldNum(MainAccount, Type)).value(
            SysQuery::range(DimensionLedgerAccountType::ProfitAndLoss, DimensionLedgerAccountType::Liability));

        findOrCreateRange_W(
            ds,
            fieldNum(MainAccount, LedgerChartOfAccounts),
            queryValue(Ledger::chartOfAccounts(CompanyInfo::findDataArea(_ruleGroup.ToCompanyId).RecId))
        ).status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Set                 foreignAccountSet = new Set(Types::String);
        Set                 localAccountSet   = new Set(Types::String);
        Enumerator          enumerator;

        MainAccount         mainAccount;
        RTSLLedgerTransRule ledgerTransRule;

        ttsbegin;
        while (queryRun.next())
        {
            mainAccount = queryRun.get(tableNum(MainAccount));
            foreignAccountSet.add(mainAccount.MainAccountId);
        }

        while select ToDefaultLedgerDimension
            from ledgerTransRule
            where ledgerTransRule.RuleGroupId == ruleGroup.RuleGroupId
        {
            localAccountSet.add(ledgerTransRule.toMainAccountNum());
        }

        foreignAccountSet = Set::difference(foreignAccountSet, localAccountSet);

        ledgerTransRule.clear();
        enumerator = foreignAccountSet.getEnumerator();
        while (enumerator.moveNext())
        {
            ledgerTransRule.initFromRuleGroup(ruleGroup);
            ledgerTransRule.toMainAccountNum(enumerator.current());
            ledgerTransRule.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS103436";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTSLLedgerTransRuleInit  ledgerRulesInitialize;
        RTSLRuleGroup            ruleGroup;
        ;

        if (! _args)
            throw error("@SYS25407");

        ruleGroup = RTSLRuleGroup::find(_args.parm());
        if (! ruleGroup)
            throw error(strFmt("@SYS29104", RTSLLedgerTransRuleInit::description()));

        ledgerRulesInitialize = new RTSLLedgerTransRuleInit(ruleGroup);

        if (ledgerRulesInitialize.prompt())
        {
            ledgerRulesInitialize.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>