<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retrieves data for FiscalDocument_BR report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(FiscalDocumentContract_BR))
]
public class FiscalDocumentDP_BR extends SrsReportDataProviderPreProcess
{
    #NFPrinting_BR
    RecId                               recId;

    FiscalDocument_BR                   fiscalDocument;
    FiscalDocumentTmp_BR                fiscalDocumentTmp;
    FiscalDocumentItemsTmp_BR           fiscalDocumentItemsTmp;
    FiscalDocumentInfoAdicTmp_BR        fiscalDocumentInfoAdicTmp;
    FiscalDocumentInstallmenstTmp_BR    fiscalDocumentInstallmentsTmp;
    boolean                             fiscalDocTmpCutOffItem, fiscalDocTmpLastItem, fiscalDocTmpBlankItem;
    int                                 lastItemOrServiceRow;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalInformationBox</Name>
				<Source><![CDATA[
    private int additionalInformationBox(int _descriptionLines, FiscalDocumentFormat_BR _fiscalDocumentFormat)
    {
        if (!_fiscalDocumentFormat.CutoffMemoDescription)
        {
            return (_descriptionLines mod #MaxNFMemoLines) > 0 ? real2int(_descriptionLines / #MaxNFMemoLines) + 1 : real2int(_descriptionLines / #MaxNFMemoLines);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalLinesForItemDescription</Name>
				<Source><![CDATA[
    private int additionalLinesForItemDescription(int _itemDescriptionLenght, int _maxDescSize)
    {
        int additionalDescription, additionalLines;

        additionalDescription = (_itemDescriptionLenght - _maxDescSize);
        additionalLines = (additionalDescription mod _maxDescSize) > 0 ? real2int(additionalDescription / _maxDescSize) + 1 : real2int(additionalDescription / _maxDescSize);
        return additionalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdditionalInf</Name>
				<Source><![CDATA[
    private void createAdditionalInf(FiscalDocumentParmData_BR _fiscalDocumentParmData, Fiscaldocument_BR _fiscalDocument, FiscalDocumentFormat_BR _fiscalDocumentFormat)
    {
        str                             deliveryAddress;
        int                             pagesBox, itemPage, iCount;
        Notes                           additionalInformation;
        LogisticsPostalAddress          deliveryPostalAddress;
        List                            lstLegalText, lstPrintableLegalTexts;
        ListEnumerator                  additionalInfEnumerator;
        container                       legalTexts;

        void insertAddressComponent(str _component, str _separator = '')
        {
            str tempAddress;
            if (_component)
            {
                tempAddress = deliveryAddress + _separator + _component;
                deliveryAddress = tempAddress;
            }
        }

        lstPrintableLegalTexts = new List(Types::String);
        lstLegalText = new List(Types::String);

        legalTexts = this.getTextsFormattedForPrinting(_fiscalDocument, _fiscalDocumentFormat);

        for (iCount = 1 ; iCount <= conLen(legalTexts); iCount++)
        {
            lstPrintableLegalTexts.addEnd(conPeek(legalTexts, iCount));
        }

        // Check Delivery Address
        if (_fiscalDocumentFormat.PrintDlvAddressInMemo)
        {
            if (_fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress() != _fiscalDocumentParmData.parmThirdPartyPostalAddress())
            {
                deliveryPostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress());
                insertAddressComponent(deliveryPostalAddress.Street);
                insertAddressComponent(deliveryPostalAddress.StreetNumber, ' ');
                insertAddressComponent(deliveryPostalAddress.BuildingCompliment, ' - ');
                insertAddressComponent(deliveryPostalAddress.DistrictName, ' - ');
                lstPrintableLegalTexts.addEnd(deliveryAddress);
            }
        }

        additionalInfEnumerator = lstPrintableLegalTexts.getEnumerator();

        iCount = 1;
        while (additionalInfEnumerator.moveNext())
        {
            additionalInformation += strLFix(additionalInfEnumerator.current(), (#maxNFMemoDescriptionSize - 1), ' ') + '\n';
        }

        // Create additional boxes if necessary
        itemPage = this.pageForItemAtRow((lastItemOrServiceRow - 1), _fiscalDocumentFormat.MaxItemLines);
        pagesBox = this.additionalInformationBox(lstPrintableLegalTexts.elements(), _fiscalDocumentFormat);

        fiscalDocTmpCutOffItem  = false;
        fiscalDocTmpLastItem    = false;
        fiscalDocTmpBlankItem   = true;

        if (pagesBox > itemPage)
        {
            for (iCount = 1 ; iCount < pagesBox ; iCount++)
            {
                itemPage += 1;
                fiscalDocumentItemsTmp.clear();
                fiscalDocumentItemsTmp.CutOffDescription        = fiscalDocTmpCutOffItem;
                fiscalDocumentItemsTmp.LastCutOffDescription    = fiscalDocTmpLastItem;
                fiscalDocumentItemsTmp.Blank                    = fiscalDocTmpBlankItem;
                fiscalDocumentItemsTmp.Page                     = itemPage;
                this.insertFiscalDocumentItemsTmp();
            }
        }
        fiscalDocumentInfoAdicTmp.clear();
        fiscalDocumentInfoAdicTmp.AdditionalInformation = strFmtLB(additionalInformation);
        this.insertFiscalDocumentInfoAdicTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCarrierFields</Name>
				<Source><![CDATA[
    private void createCarrierFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        SalesCarrier                                salesCarrier;
        LogisticsPostalAddress                      salesCarrierPostalAddress;
        FiscalDocumentShipmentStatParmData_BR       fiscalDocShipmentStatParmData;
        ListEnumerator                              shipmentStat;
        str                                         address;

        void insertAddressComponent(str _component, str _separator = '')
        {
            str tempAddress;

            if (_component)
            {
                tempAddress = address + _separator + _component;
                address = tempAddress;
            }
        }

        select salesCarrier
            where salesCarrier.RecId == _fiscalDocumentParmData.parmSalesCarrier();

        salesCarrierPostalAddress   = LogisticsPostalAddress::findByLocation(salesCarrier.Location);
        shipmentStat                = _fiscalDocumentParmData.parmListOfShipmentStat().getEnumerator();

        if (shipmentStat)
        {
            while (shipmentStat.moveNext())
            {
                fiscalDocShipmentStatParmData = shipmentStat.current();

                fiscalDocumentTmp.VolumeQty     += fiscalDocShipmentStatParmData.parmVolumeQuantity();
                fiscalDocumentTmp.NetWeight     += fiscalDocShipmentStatParmData.parmNetWeight();
                fiscalDocumentTmp.GrossWeight   += fiscalDocShipmentStatParmData.parmGrossWeight();
                fiscalDocumentTmp.VolumeType    = fiscalDocShipmentStatParmData.parmVolumeType();
            }
        }

        insertAddressComponent(salesCarrierPostalAddress.Street);
        insertAddressComponent(salesCarrierPostalAddress.StreetNumber, ' ');
        insertAddressComponent(salesCarrierPostalAddress.BuildingCompliment, ' - ');
        insertAddressComponent(salesCarrierPostalAddress.DistrictName, ' - ');

        fiscalDocumentTmp.CarrierCNPJ                  = salesCarrier.cnpjcpfNum_BR;
        fiscalDocumentTmp.CarrierName                  = salesCarrier.CarrierName;
        fiscalDocumentTmp.CarrierIENum                 = salesCarrier.ieNum_BR;
        fiscalDocumentTmp.CarrierAddress               = subStr(address, 1, #MaxAddressDescriptionSize);
        fiscalDocumentTmp.CarrierCity                  = salesCarrierPostalAddress.City;
        fiscalDocumentTmp.CarrierStateId               = salesCarrierPostalAddress.State;
        fiscalDocumentTmp.VehicleLicensePlateNumber    = _fiscalDocumentParmData.parmVehicleLicensePlateNumber();
        fiscalDocumentTmp.VehicleLicensePlateState     = _fiscalDocumentParmData.parmVehicleLicensePlateState();
        fiscalDocumentTmp.FreightChargeTerms           = this.getFreightTermsIntValue(_fiscalDocumentParmData.parmFreightChargeTerms());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createICMSTaxFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICMS tax fields values
    /// </summary>
    /// <param name="_fiscalDocTaxTransParmData">
    /// A <c>FiscalDocumentTaxTransParmData_BR</c> object
    /// </param>
    private void createICMSTaxFields(FiscalDocumentTaxTransParmData_BR _fiscalDocTaxTransParmData)
    {
        //Just must sum the ICMS tax rate if the tax rate is not of Misc. Charges
        if (!FiscalDocumentTaxTrans_BR::find(_fiscalDocTaxTransParmData.parmTaxTrans()).FiscalDocumentMiscCharge)
        {
            fiscalDocumentItemsTmp.ICMSTaxPct = _fiscalDocTaxTransParmData.parmTaxValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdentifFields</Name>
				<Source><![CDATA[
    private void createIdentifFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentLineParmData_BR           fiscalDocLineParmData;
        ListEnumerator                          lines;
        MapEnumerator                           linesMap;
        Map                                     linesSorted = new Map(Types::Real, Types::Class);

        lines = _fiscalDocumentParmData.parmLines().getEnumerator();

        while (lines.moveNext())
        {
            fiscalDocLineParmData = lines.current();
            linesSorted.insert(fiscalDocLineParmData.parmLineNum(), fiscalDocLineParmData);
        }

        linesMap = linesSorted.getEnumerator();

        while (linesMap.moveNext())
        {
            fiscalDocLineParmData = linesMap.currentValue();
            if (fiscalDocumentTmp.CFOP == "")
            {
                fiscalDocumentTmp.CFOP = fiscalDocLineParmData.parmCFOP();
            }
        }
        fiscalDocumentTmp.OperationDescription      = _fiscalDocumentParmData.parmFiscalDocumentOperationDescription();
        fiscalDocumentTmp.FiscalDocumentSeries      = _fiscalDocumentParmData.parmFiscalDocumentSeries();
        fiscalDocumentTmp.FiscalDocumentNumber      = _fiscalDocumentParmData.parmFiscalDocumentNumber();
        fiscalDocumentTmp.FiscalDocumentDate        = _fiscalDocumentParmData.parmFiscalDocumentDate();
        fiscalDocumentTmp.InventoryDirection        = _fiscalDocumentParmData.parmDirection();
        fiscalDocumentTmp.InventoryDirectionValue   = enum2int(_fiscalDocumentParmData.parmDirection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstallmentsFields</Name>
				<Source><![CDATA[
    private void createInstallmentsFields(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentFormat_BR _format)
    {
        FiscalDocumentCustVendTransParmData_BR      fiscalDocCustVendTransParmData;
        FiscalDocumentInstallmentParmData_BR        fiscalDocInstallmentParmData;
        ListEnumerator                              installments;
        Counter                                     installment;
        fieldId                                     dueDateFieldId, amountFieldId;
        str                                         dueDateField, amountField;

        dueDateField    = 'DueDate';
        amountField     = 'Amount';
        installment     = 1;

        fiscalDocCustVendTransParmData = _fiscalDocumentParmData.parmCustVendTrans();

        if (fiscalDocCustVendTransParmData)
        {
            installments = fiscalDocCustVendTransParmData.parmListOfInstallments().getEnumerator();

            while (installments.moveNext())
            {
                if (installment <= _format.MaxInstallments)
                {
                    fiscalDocInstallmentParmData = installments.current();
                    dueDateFieldId  = fieldName2id(tableNUm(FiscalDocumentInstallmenstTmp_BR), (dueDateField + int2str(installment)));
                    amountFieldId   = fieldName2id(tableNUm(FiscalDocumentInstallmenstTmp_BR), (amountField + int2str(installment)));
                    fiscalDocumentInstallmentsTmp.(amountFieldId)   = fiscalDocInstallmentParmData.parmAmount();
                    fiscalDocumentInstallmentsTmp.(dueDateFieldId)  = fiscalDocInstallmentParmData.parmDueDate();
                    installment++;
                }
            }
            fiscalDocumentInstallmentsTmp.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIPITaxFields</Name>
				<Source><![CDATA[
    private void createIPITaxFields(FiscalDocumentTaxTransParmData_BR _fiscalDocTaxTransParmData)
    {
        fiscalDocumentItemsTmp.TaxationCode    = _fiscalDocTaxTransParmData.parmTaxationCode();
        fiscalDocumentItemsTmp.ipiTaxPct       = _fiscalDocTaxTransParmData.parmTaxValue();
        fiscalDocumentItemsTmp.ipiTaxAmount    = _fiscalDocTaxTransParmData.parmTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIssuerFields</Name>
				<Source><![CDATA[
    private void createIssuerFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        LogisticsPostalAddress fiscalEstabPartyPostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress());

        fiscalDocumentTmp.IssuerCNPJ               = _fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF();
        fiscalDocumentTmp.IssuerName               = _fiscalDocumentParmData.parmFiscalEstablishmentName();
        fiscalDocumentTmp.IssuerStreet             = fiscalEstabPartyPostalAddress.Street;
        fiscalDocumentTmp.IssuerAddressNumber      = fiscalEstabPartyPostalAddress.StreetNumber;
        fiscalDocumentTmp.IssuerAddressComplement  = fiscalEstabPartyPostalAddress.BuildingCompliment;
        fiscalDocumentTmp.IssuerDistrict           = fiscalEstabPartyPostalAddress.DistrictName;
        fiscalDocumentTmp.IssuerCity               = fiscalEstabPartyPostalAddress.City;
        fiscalDocumentTmp.IssuerState              = fiscalEstabPartyPostalAddress.State;
        fiscalDocumentTmp.IssuerZipCode            = fiscalEstabPartyPostalAddress.ZipCode;
        fiscalDocumentTmp.IssuerIEnum              = _fiscalDocumentParmData.parmFiscalEstablishmentIE();
        fiscalDocumentTmp.IssuerCCMNum             = _fiscalDocumentParmData.parmFiscalEstablishmentCCMNum();
        fiscalDocumentTmp.issuerTributarySubstReg  = _fiscalDocumentParmData.parmFiscalEstablishmentTribSubstReg();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductFields</Name>
				<Source><![CDATA[
    private void createProductFields(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentFormat_BR _fiscalDocumentFormat)
    {
        int                                     itemRow,
                                                serviceRow,
                                                additionalLines4Description;
        FiscalDocumentLineParmData_BR           fiscalDocLineParmData;
        FiscalDocumentMiscChargeParmData_BR     fiscalDocMiscChargeParmData;
        FiscalDocumentTaxTransParmData_BR       fiscalDocTaxTransParmData;
        ListEnumerator                          lines, miscCharge, taxes;
        Notes                                   lineAdditionalInformation;

        itemRow     = 1;
        serviceRow  = 1;

        lines = _fiscalDocumentParmData.parmLines().getEnumerator();

        while (lines.moveNext())
        {
            fiscalDocLineParmData = lines.current();
            lineAdditionalInformation = this.lineAdditionalInformation(fiscalDocLineParmData.parmRecId());

            fiscalDocumentItemsTmp.clear();
            fiscalDocumentItemsTmp.FiscalDocumentNumber     = _fiscalDocumentParmData.parmFiscalDocumentNumber();
            fiscalDocumentItemsTmp.ItemId                   = fiscalDocLineParmData.parmItemId();
            fiscalDocumentItemsTmp.Description              = fiscalDocLineParmData.parmDescription() + (lineAdditionalInformation ? "|" +  lineAdditionalInformation : "");
            fiscalDocumentItemsTmp.FiscalClassification     = fiscalDocLineParmData.parmFiscalClassification();
            fiscalDocumentItemsTmp.cfop                     = fiscalDocLineParmData.parmCFOP();
            fiscalDocumentItemsTmp.Unit                     = fiscalDocLineParmData.parmUnit();
            fiscalDocumentItemsTmp.UnitPrice                = fiscalDocLineParmData.parmUnitPrice();
            fiscalDocumentItemsTmp.Quantity                 = fiscalDocLineParmData.parmQuantity();
            fiscalDocumentItemsTmp.GrossLineAmount          = fiscalDocLineParmData.parmLineAmount();
            fiscalDocumentItemsTmp.LineDiscount             = fiscalDocLineParmData.parmLineDiscount();
            fiscalDocumentItemsTmp.ItemType                 = fiscalDocLineParmData.parmItemType();

            // Misc Charges
            miscCharge = fiscalDocLineParmData.parmListOfMiscCharges().getEnumerator();

            while (miscCharge.moveNext())
            {
                fiscalDocMiscChargeParmData = miscCharge.current();

                switch (fiscalDocMiscChargeParmData.parmType())
                {
                    case MarkupClassification_BR::Freight:
                        fiscalDocumentItemsTmp.TotalFreightMarkupAmount += fiscalDocMiscChargeParmData.parmAmount();
                        break;

                    case MarkupClassification_BR::Insurance:
                        fiscalDocumentItemsTmp.TotalInsuranceMarkupAmount += fiscalDocMiscChargeParmData.parmAmount();
                        break;

                    case MarkupClassification_BR::Others:
                        fiscalDocumentItemsTmp.TotalOthersMarkupAmount += fiscalDocMiscChargeParmData.parmAmount();
                        break;
                }
            }

            // Taxes
            taxes = fiscalDocLineParmData.parmListOfTaxes().getEnumerator();

            while (taxes.moveNext())
            {
                fiscalDocTaxTransParmData = taxes.current();

                switch (fiscalDocTaxTransParmData.parmType())
                {
                    case TaxType_BR::ICMS:
                        this.createICMSTaxFields(fiscalDocTaxTransParmData);
                        break;

                    case TaxType_BR::IPI:
                        this.createIPITaxFields(fiscalDocTaxTransParmData);
                        break;
                }
            }

            // Case is a Product
            if (fiscalDocLineParmData.parmItemType() == FiscalDocumentLineItemType_BR::Product)
            {
                // Set page in temptable
                fiscalDocumentItemsTmp.Page = this.pageForItemAtRow(itemRow, _fiscalDocumentFormat.MaxItemLines);

                // additional lines
                additionalLines4Description = this.additionalLinesForItemDescription(strLen(fiscalDocumentItemsTmp.Description), _fiscalDocumentFormat.MaxItemDescriptionSize);

                if (additionalLines4Description)
                {
                    if (_fiscalDocumentFormat.CutOffItemDescription)
                    {
                        fiscalDocTmpCutOffItem  = false;
                        fiscalDocTmpLastItem    = false;
                        fiscalDocTmpBlankItem   = false;

                        fiscalDocumentItemsTmp.CutOffDescription        = fiscalDocTmpCutOffItem;
                        fiscalDocumentItemsTmp.LastCutOffDescription    = fiscalDocTmpLastItem;
                        fiscalDocumentItemsTmp.Blank                    = fiscalDocTmpBlankItem;
                        fiscalDocumentItemsTmp.Description              = subStr(fiscalDocumentItemsTmp.Description, 1, _fiscalDocumentFormat.MaxItemDescriptionSize);

                        this.insertFiscalDocumentItemsTmp();
                        itemrow++;
                    }
                    else
                    {
                        itemRow = this.insertAdditionalProductLines(fiscalDocumentItemsTmp.Description,
                                                                    _fiscalDocumentFormat.MaxItemDescriptionSize,
                                                                    _fiscalDocumentFormat.MaxItemLines,
                                                                    itemRow);
                    }
                }
                else
                {
                    fiscalDocTmpCutOffItem  = false;
                    fiscalDocTmpLastItem    = false;
                    fiscalDocTmpBlankItem   = false;

                    fiscalDocumentItemsTmp.CutOffDescription        = fiscalDocTmpCutOffItem;
                    fiscalDocumentItemsTmp.LastCutOffDescription    = fiscalDocTmpLastItem;
                    fiscalDocumentItemsTmp.Blank                    = fiscalDocTmpBlankItem;

                    this.insertFiscalDocumentItemsTmp();
                    itemrow++;
                }
            }
            // Case is a Service
            else
            {
                // Set page in temptable
                fiscalDocumentItemsTmp.Page = this.pageForItemAtRow(serviceRow, _fiscalDocumentFormat.MaxServiceItemLines);

                // Additional Lines
                additionalLines4Description = this.additionalLinesForItemDescription(strLen(fiscalDocumentItemsTmp.Description), _fiscalDocumentFormat.MaxServiceItemDescription);

                if (additionalLines4Description)
                {
                    if (_fiscalDocumentFormat.CutOffServiceItemDescription)
                    {
                        fiscalDocTmpCutOffItem  = false;
                        fiscalDocTmpLastItem    = false;
                        fiscalDocTmpBlankItem   = false;

                        fiscalDocumentItemsTmp.CutOffDescription        = fiscalDocTmpCutOffItem;
                        fiscalDocumentItemsTmp.LastCutOffDescription    = fiscalDocTmpLastItem;
                        fiscalDocumentItemsTmp.Blank                    = fiscalDocTmpBlankItem;
                        fiscalDocumentItemsTmp.Description              = subStr(fiscalDocumentItemsTmp.Description, 1, _fiscalDocumentFormat.MaxServiceItemDescription);

                        this.insertFiscalDocumentItemsTmp();
                        serviceRow++;
                    }
                    else
                    {
                        serviceRow = this.insertAdditionalProductLines(fiscalDocumentItemsTmp.Description,
                                                                        _fiscalDocumentFormat.MaxServiceItemDescription,
                                                                        _fiscalDocumentFormat.MaxServiceItemLines,
                                                                        serviceRow);
                    }
                }
                else
                {
                    fiscalDocTmpCutOffItem  = false;
                    fiscalDocTmpLastItem    = false;
                    fiscalDocTmpBlankItem   = false;

                    fiscalDocumentItemsTmp.CutOffDescription        = fiscalDocTmpCutOffItem;
                    fiscalDocumentItemsTmp.LastCutOffDescription    = fiscalDocTmpLastItem;
                    fiscalDocumentItemsTmp.Blank                    = fiscalDocTmpBlankItem;

                    this.insertFiscalDocumentItemsTmp();
                    serviceRow++;
                }
            }
        }

        lastItemOrServiceRow = (itemRow > serviceRow ? itemRow : serviceRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecipientFields</Name>
				<Source><![CDATA[
    private void createRecipientFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        EFiscalDocument_BR eFiscalDocument;
        LogisticsPostalAddress thirdPartyPostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmThirdPartyPostalAddress());

        eFiscalDocument = EFiscalDocument_BR::construct(fiscalDocument);

        fiscalDocumentTmp.RecipientCNPJ                 = _fiscalDocumentParmData.parmThirdPartyCNPJCPF();
        fiscalDocumentTmp.RecipientName                 = _fiscalDocumentParmData.parmThirdPartyName();
        fiscalDocumentTmp.RecipientStreet               = thirdPartyPostalAddress.Street;
        fiscalDocumentTmp.RecipientAddressNumber        = thirdPartyPostalAddress.StreetNumber;
        fiscalDocumentTmp.RecipientAddressComplement    = thirdPartyPostalAddress.BuildingCompliment;
        fiscalDocumentTmp.RecipientAddressDistrict      = thirdPartyPostalAddress.DistrictName;
        fiscalDocumentTmp.RecipientCity                 = thirdPartyPostalAddress.City;
        fiscalDocumentTmp.RecipientState                = thirdPartyPostalAddress.State;
        fiscalDocumentTmp.RecipientZipCode              = thirdPartyPostalAddress.ZipCode;
        fiscalDocumentTmp.RecipientIEnum                = _fiscalDocumentParmData.parmThirdPartyIE();
        fiscalDocumentTmp.RecipientPhone                = eFiscalDocument.thirdPartyPhone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalFields</Name>
				<Source><![CDATA[
    private void createTotalFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentLineParmData_BR           fiscalDocumentLineParmData;
        FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;
        ListEnumerator                          lines;
        ListEnumerator                          taxes;

        lines = _fiscalDocumentParmData.parmLines().getEnumerator();

        while (lines.moveNext())
        {
            fiscalDocumentLineParmData = lines.current();

            taxes = fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();

            while (taxes.moveNext())
            {
                fiscalDocumentTaxTransParmData = taxes.current();

                switch (fiscalDocumentTaxTransParmData.parmType())
                {
                    case TaxType_BR::ICMS:
                        fiscalDocumentTmp.icmStaxBaseAmount                 += fiscalDocumentTaxTransParmData.parmTaxBaseAmount();
                        fiscalDocumentTmp.icmsTaxAmount                     += fiscalDocumentTaxTransParmData.parmTaxAmount();
                        break;

                    case TaxType_BR::ICMSST:
                        fiscalDocumentTmp.TributarySubstICMSTaxBaseAmount   += fiscalDocumentTaxTransParmData.parmTaxBaseAmount();
                        fiscalDocumentTmp.TributarySubstICMSTaxAmount       += fiscalDocumentTaxTransParmData.parmTaxAmount();
                        break;

                    case TaxType_BR::IPI:
                        fiscalDocumentTmp.ipiTaxAmount += fiscalDocumentTaxTransParmData.parmTaxAmount();
                        break;

                    case TaxType_BR::ISS:
                        fiscalDocumentTmp.issTaxBaseAmount  += fiscalDocumentTaxTransParmData.parmTaxBaseAmount();
                        fiscalDocumentTmp.issTaxAmount      += fiscalDocumentTaxTransParmData.parmTaxAmount();
                        break;

                    case TaxType_BR::IRRF:
                        fiscalDocumentTmp.IRRFTaxBaseAmount += fiscalDocumentTaxTransParmData.parmTaxBaseAmount();
                        fiscalDocumentTmp.IRRFTaxAmount     += fiscalDocumentTaxTransParmData.parmTaxAmount();
                        break;
                }
            }
        }

        fiscalDocumentTmp.TotalGrossGoodsAmount            = _fiscalDocumentParmData.parmTotalGoodsAmount();
        fiscalDocumentTmp.TotalMarkupFreightAmount         = _fiscalDocumentParmData.parmTotalMarkupFreightAmount();
        fiscalDocumentTmp.TotalMarkupInsuranceAmount       = _fiscalDocumentParmData.parmTotalMarkupInsuranceAmount();
        fiscalDocumentTmp.TotalMarkupOtherAmount           = _fiscalDocumentParmData.parmTotalMarkupOtherAmount();
        fiscalDocumentTmp.TotalDiscountAmount              = _fiscalDocumentParmData.parmTotalDiscountAmount();
        fiscalDocumentTmp.TotalAmount                      = _fiscalDocumentParmData.parmTotalAmount();
        fiscalDocumentTmp.TotalGrossServicesAmount         = _fiscalDocumentParmData.parmTotalServicesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsDetail</Name>
				<Source><![CDATA[
    private void dsDetail(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentFormat_BR     fiscalDocumentFormat;

        select fiscalDocumentFormat
            where fiscalDocumentFormat.RecId == fiscalDocument.FiscalDocumentFormat;

        if (!fiscalDocumentFormat)
        {
            fiscalDocumentFormat.MaxMemoLines           = #MaxNFMemoLines;
            fiscalDocumentFormat.MaxMemoDescriptionSize = #MaxNFMemoDescriptionSize;
            fiscalDocumentFormat.CutoffMemoDescription  = #CutOffMemoDescription;

            fiscalDocumentFormat.MaxItemLines           = #MaxItemLines;
            fiscalDocumentFormat.MaxItemDescriptionSize = #MaxItemDescriptionSize;
            fiscalDocumentFormat.CutOffItemDescription  = #CutOfItemDescription;

            fiscalDocumentFormat.MaxServiceItemLines            = #MaxServiceItemLines;
            fiscalDocumentFormat.MaxServiceItemDescription      = #MaxServiceItemDescSize;
            fiscalDocumentFormat.CutOffServiceItemDescription   = #CutOffServiceDescription;

            fiscalDocumentFormat.MaxInstallments = #MaxInstallments;
        }

        if (fiscalDocumentFormat.MaxItemDescriptionSize > 0 && fiscalDocumentFormat.MaxItemLines > 0)
        {
            this.createProductFields(_fiscalDocumentParmData, fiscalDocumentFormat);
        }

        if (fiscalDocumentFormat.MaxInstallments > 0)
        {
            this.createInstallmentsFields(_fiscalDocumentParmData, fiscalDocumentFormat);
        }

        if (fiscalDocumentFormat.MaxMemoDescriptionSize > 0 && fiscalDocumentFormat.MaxMemoLines > 0)
        {
            this.createAdditionalInf(_fiscalDocumentParmData, fiscalDocument, fiscalDocumentFormat);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsHeader</Name>
				<Source><![CDATA[
    private void dsHeader(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        fiscalDocumentTmp.clear();
        this.createIdentifFields(_fiscalDocumentParmData);
        this.createIssuerFields(_fiscalDocumentParmData);
        this.createRecipientFields(_fiscalDocumentParmData);
        this.createCarrierFields(_fiscalDocumentParmData);
        this.createTotalFields(_fiscalDocumentParmData);
        this.insertFiscalDocumentTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentInfoAdicTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>FiscalDocumentInfoAdicTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(FiscalDocumentInfoAdicTmp_BR))
    ]
    public FiscalDocumentInfoAdicTmp_BR getFiscalDocumentInfoAdicTmp()
    {
        select * from fiscalDocumentInfoAdicTmp;
        return fiscalDocumentInfoAdicTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentInstallmenstTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>FiscalDocumentInstallmenstTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(FiscalDocumentInstallmenstTmp_BR))
    ]
    public FiscalDocumentInstallmenstTmp_BR getFiscalDocumentInstallmenstTmp()
    {
        select * from fiscalDocumentInstallmentsTmp;
        return fiscalDocumentInstallmentsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentItemsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>FiscalDocumentItemsTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(FiscalDocumentItemsTmp_BR))
    ]
    public FiscalDocumentItemsTmp_BR getFiscalDocumentItemsTmp()
    {
        select * from fiscalDocumentItemsTmp;
        return fiscalDocumentItemsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>FiscalDocumentTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(FiscalDocumentTmp_BR))
    ]
    public FiscalDocumentTmp_BR getFiscalDocumentTmp()
    {
        select fiscalDocumentTmp;
        return fiscalDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFreightTermsToInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>FiscalDocumentFreightTerms_BR</c> enum value to int.
    /// </summary>
    /// <param name = "_freightTerms"><c>FiscalDocumentFreightTerms_BR</c> enum value.</param>
    /// <returns>
    /// Conatiner with 2 values: first is int value for given enum value, second is indicator which shows that this enum value can be converted to int.
    /// </returns>
    protected container convertFreightTermsToInt(FiscalDocumentFreightTerms_BR _freightTerms)
    {
        int freightTerms;
        boolean wasFound;

        switch (_freightTerms)
        {
            case FiscalDocumentFreightTerms_BR::Prepaid:
                freightTerms = 1;
                wasFound = true;
                break;

            case FiscalDocumentFreightTerms_BR::Collect:
                freightTerms = 2;
                wasFound = true;
                break;

            case FiscalDocumentFreightTerms_BR::ThirdParty:
            case FiscalDocumentFreightTerms_BR::Nofreight:
                freightTerms = 0;
                wasFound = true;
                break;

            default:
                wasFound = false;
        }

        return [freightTerms, wasFound];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFreightTermsIntValue</Name>
				<Source><![CDATA[
    private int getFreightTermsIntValue(FiscalDocumentFreightTerms_BR _freightTerms)
    {
        container freightTermsCon = this.convertFreightTermsToInt(_freightTerms);
        boolean isEnumValueCorrect = conPeek(freightTermsCon, 2);

        if (!isEnumValueCorrect)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        int freightTerms = conPeek(freightTermsCon, 1);
        return freightTerms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTextsFormattedForPrinting</Name>
				<Source><![CDATA[
    private container getTextsFormattedForPrinting(Fiscaldocument_BR _fiscalDocument, FiscalDocumentFormat_BR _fiscalDocumentFormat)
    {
        container       legalTextsInDocument, legalTextsSplitted, legalTextsFormattedForPrinting;
        Notes           singleLegalText;
        List            listOfLinesWithinAText;
        int             i, numberOfLines, lineCount;
        ListEnumerator  le;

        legalTextsInDocument = this.headerLegalTexts(_fiscalDocument);
        for (i = 1; i <= conLen(legalTextsInDocument); i++)
        {
            singleLegalText = conPeek(legalTextsInDocument, i);

            listOfLinesWithinAText = strSplit(singleLegalText, '\n');
            if (listOfLinesWithinAText.elements() > 0)
            {
                le = listOfLinesWithinAText.getEnumerator();
                while (le.moveNext())
                {
                    legalTextsSplitted += le.current();
                }
            }
            else
            {
                legalTextsSplitted += singleLegalText;
            }
        }

        for (i = 1; i <= conLen(legalTextsSplitted); i++)
        {
            singleLegalText = conPeek(legalTextsSplitted, i);
            if (strLen(singleLegalText) > _fiscalDocumentFormat.MaxMemoDescriptionSize)
            {
                numberOfLines = (strLen(singleLegalText) mod _fiscalDocumentFormat.MaxMemoDescriptionSize) > 0 ? real2int(strLen(singleLegalText) / _fiscalDocumentFormat.MaxMemoDescriptionSize) + 1
                                                                                                               : real2int(strLen(singleLegalText) / _fiscalDocumentFormat.MaxMemoDescriptionSize);
                for (lineCount = 0 ; lineCount < numberOfLines ; lineCount++)
                {
                    legalTextsFormattedForPrinting += subStr(singleLegalText, (lineCount * _fiscalDocumentFormat.MaxMemoDescriptionSize) + 1, _fiscalDocumentFormat.MaxMemoDescriptionSize);
                }
            }
            else
            {
                legalTextsFormattedForPrinting += singleLegalText;
            }
        }

        return legalTextsFormattedForPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerLegalTexts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the legal texts related to the given fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     A <c>FiscalDocument_BR</c> table buffer representing the fiscal document from which the legal texts should be retrieved.
    /// </param>
    /// <returns>
    ///     A container containing all the legal texts.
    /// </returns>
    private container headerLegalTexts(FiscalDocument_BR _fiscalDocument)
    {
        container legalTexts;

        void addListOfTextsToContainer(FiscalDocumentTextListParmData_BR _fiscalDocumentTextList)
        {
            FiscalDocumentTextParmData_BR  fiscalDocumentTextParmData;

            while (_fiscalDocumentTextList.moveNext())
            {
                fiscalDocumentTextParmData = _fiscalDocumentTextList.getCurrent();
                if (!conFind(legalTexts, strLRTrim(fiscalDocumenttextparmData.parmNotes())))
                {
                    legalTexts += fiscalDocumentTextParmData.parmNotes();
                }
            }
        }

        addListOfTextsToContainer(_fiscalDocument.getLegalTexts(DocuRestriction::External));
        addListOfTextsToContainer(_fiscalDocument.getAdditionalInformation());

        return legalTexts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdditionalProductLines</Name>
				<Source><![CDATA[
    private int insertAdditionalProductLines(str _itemDescription, int _maxDescriptionSize, int _maxLines, int _itemRow)
    {
        int     descriptionSize, iCount, additionalLines, pageFirstRow, pageAdditionalRow;

        additionalLines     = this.additionalLinesForItemDescription(strLen(_itemDescription), _maxDescriptionSize);
        pageFirstRow        = this.pageForItemAtRow(_itemrow, _maxLines);
        pageAdditionalRow   = this.pageForItemAtRow(_itemrow + additionallines, _maxLines);

        for (iCount = 0 ; iCount <= additionalLines ; iCount++)
        {
            fiscalDocumentItemsTmp.Description = subStr(_itemDescription, (iCount == 0 ? 1 : descriptionSize + 1), _maxDescriptionSize);

            fiscalDocTmpCutOffItem  = (iCount == 0 ? false : true);
            fiscalDocTmpLastItem    = (iCount == additionalLines ? true : false);
            fiscalDocTmpBlankItem   = false;

            fiscalDocumentItemsTmp.CutOffDescription        = fiscalDocTmpCutOffItem;
            fiscalDocumentItemsTmp.LastCutOffDescription    = fiscalDocTmpLastItem;
            fiscalDocumentItemsTmp.Blank                    = fiscalDocTmpBlankItem;
            fiscalDocumentItemsTmp.Page                     = this.pageForItemAtRow(_itemRow, _maxLines);

            this.insertFiscalDocumentItemsTmp();
            descriptionSize += _maxDescriptionSize;
            _itemRow += 1;
        }
        return _itemRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalDocumentInfoAdicTmp</Name>
				<Source><![CDATA[
    private void insertFiscalDocumentInfoAdicTmp()
    {
        fiscalDocumentInfoAdicTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalDocumentInstallmentsTmp</Name>
				<Source><![CDATA[
    private void insertFiscalDocumentInstallmentsTmp()
    {
        fiscalDocumentInstallmentsTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalDocumentItemsTmp</Name>
				<Source><![CDATA[
    private void insertFiscalDocumentItemsTmp()
    {
        fiscalDocumentItemsTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalDocumentTmp</Name>
				<Source><![CDATA[
    private void insertFiscalDocumentTmp()
    {
        fiscalDocumentTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the additional information texts related to the fiscal document line.
    /// </summary>
    /// <param name="_fiscalDocLineRecId">
    /// RecId of FiscalDocumentLine.
    /// </param>
    /// <returns>
    /// A concatenated string with all additional information texts, with a ' ' separator between them.
    /// </returns>
    private Notes lineAdditionalInformation(RecId _fiscalDocLineRecId)
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;

        fiscalDocumentLine = FiscalDocumentLine_BR::find(_fiscalDocLineRecId);

        return fiscalDocumentLine.getAdditionalInformationAsString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageForItemAtRow</Name>
				<Source><![CDATA[
    private int pageForItemAtRow(int rowNum, int _maxLines)
    {
        int     itemPage, itemsFirstPage;
        real    quotient, remainder;

        itemsFirstPage = rownum - _maxLines;
        remainder = itemsFirstPage mod _maxLines;
        quotient = itemsFirstPage / _maxLines;

        if (rownum <= _maxLines)
        {
            itemPage = 1;
        }
        else
        {
            itemPage = remainder > 0 ? real2int(quotient) + 2 : real2int(quotient) + 1;
        }
        return itemPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the FiscalDocument_BR report
    /// </summary>
    public void processReport()
    {
        FiscalDocumentParmData_BR       fiscalDocumentParmData;
        FiscalDocumentContract_BR       contract;

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        fiscalDocumentTmp              .setConnection(this.parmUserConnection());
        fiscalDocumentItemsTmp         .setConnection(this.parmUserConnection());
        fiscalDocumentInfoAdicTmp      .setConnection(this.parmUserConnection());
        fiscalDocumentInstallmentsTmp  .setConnection(this.parmUserConnection());

        contract                    = this.parmDataContract() as FiscalDocumentContract_BR;
        recId                       = contract.parmRecordId();

        select fiscalDocument
            where fiscalDocument.RecId == recId;

        fiscalDocumentParmData = FiscalDocParmDataCreatorFDoc_BR::construct(fiscalDocument.RecId);

        this.dsHeader(fiscalDocumentParmData);
        this.dsDetail(fiscalDocumentParmData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>