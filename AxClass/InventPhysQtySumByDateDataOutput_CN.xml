<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySumByDateDataOutput_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySumByDateDataOutput_CN</c> class is used to generate daily inventory summary.
/// </summary>

class InventPhysQtySumByDateDataOutput_CN extends InventPhysQtySumDataOutput_CN
{
    //parameter
    NoYes lastDateMandatory;
    InventQty sumReceive;
    InventQty sumIssue;

    InventPhysQtySumTmp_CN inventSumOutputRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEmptyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether current line is empty.
    /// </summary>
    /// <returns>
    /// True if current line is empty.
    /// </returns>

    private boolean isEmptyLine()
    {
        boolean ret;

        if (currentInventSum.receivedQty() == 0 && currentInventSum.issuedQty() == 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSumOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new output line.
    /// </summary>
    /// <returns>
    /// The new output line.
    /// </returns>
    protected InventPhysQtySumTmp_CN newInventSumOutput()
    {
        InventPhysQtySumTmp_CN tmpInventSum = super();
        tmpInventSum.ReceivedQtySum = sumReceive;
        tmpInventSum.IssuedQtySum   = sumIssue;
        tmpInventSum.BeginDate      = currentInventSum.BeginDate;
        tmpInventSum.EndDate        = currentInventSum.EndDate;
        this.setOnHandQty(tmpInventSum);
        return tmpInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGroupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts when the group is changed.
    /// </summary>

    protected void onGroupChanged()
    {
        if (lastDateMandatory)
        {
            //add last date line
            if (inventSumOutputRecord.EndDate != toDate)
            {
                //no transaction qty on this date
                receivedQty = 0;
                issuedQty   = 0;

                inventSumOutputRecord = this.newInventSumOutput();
                inventSumOutputRecord.ReceivedQtySum    = sumReceive;
                inventSumOutputRecord.IssuedQtySum      = sumIssue;
                inventSumOutputRecord.BeginDate         = toDate;
                inventSumOutputRecord.EndDate           = toDate;
                this.setOnHandQty(inventSumOutputRecord);

                inventSumOutputRecord.insert();
            }
        }

        this.refreshGroupData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts when the record is changed.
    /// </summary>

    protected void onLineChanged()
    {
        if (this.isEmptyLine())
        {
            return;
        }

        receivedQty = currentInventSum.receivedQty();
        issuedQty   = currentInventSum.issuedQty();

        sumReceive  += this.getReceivedQty();
        sumIssue    += this.getIssuedQty();

        inventSumOutputRecord = this.newInventSumOutput();
        inventSumOutputRecord.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastDateMandatory</Name>
				<Source><![CDATA[
        public boolean parmLastDateMandatory(boolean _lastDateMandatory = lastDateMandatory)
    {
        lastDateMandatory = _lastDateMandatory;

        return lastDateMandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshs group data for a new group of records.
    /// </summary>

    protected void refreshGroupData()
    {
        super();

        sumReceive = 0;
        sumIssue = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets on-hand quantity of a result record.
    /// </summary>
    /// <param name="_tmpRow">
    /// A result record.
    /// </param>
    /// <remarks>
    /// One assumtion is the accumulated quantity includes current record;
    /// When the variable isOnHandBegin is false, only consider the case when fromDate is null.
    /// </remarks>

    private void setOnHandQty(InventPhysQtySumTmp_CN _tmpRow)
    {
        InventPhysQtySumTmp_CN tmpInventSum = _tmpRow;

        if (isOnHandBegin)
        {
            tmpInventSum.OnHandQtyOfEnd = this.getOnHandQty() + tmpInventSum.ReceivedQtySum + tmpInventSum.IssuedQtySum;
            tmpInventSum.OnHandQty = tmpInventSum.OnHandQtyOfEnd - this.getReceivedQty() - this.getIssuedQty();
        }
        else
        {
            if (fromDate == dateNull())
            {
                tmpInventSum.OnHandQtyOfEnd = tmpInventSum.ReceivedQtySum + tmpInventSum.IssuedQtySum;
                tmpInventSum.OnHandQty = tmpInventSum.OnHandQtyOfEnd - this.getReceivedQty() - this.getIssuedQty();
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
