<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineProjSalesLineImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for Project <c>SalesLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(ProjProposalItem))]
public class TaxModelDocLineProjSalesLineImpl extends TaxModelDocLineSalesLineImpl
{
    ProjProposalItem projProposalItem;
    ProjProposalJour projProposalJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur getAssessableValueTransactionCurrency()
    {
        real                                fator;
        AmountCur                           ret;

        if (salesLine.SalesQty != 0)
        {
            fator = this.getQuantity() / salesLine.SalesQty;
            ret = this.getLineAmount() * fator;
        }
        else
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        Qty ret;

        if (projProposalItem.ItemType == ProjItemType::SalesOrder)
        {
            ret = projProposalItem.DeliverNow;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    public TransDate getTransDate()
    {
        return projProposalJour ? projProposalJour.InvoiceDate : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        projProposalItem = ProjProposalItem::findRecId(_documentLineMap.RecId);

        select firstonly salesLine
        where salesLine.InventTransId  == projProposalItem.InventTransId;

        select firstOnly projProposalJour
        where projProposalJour.ProposalId == projProposalItem.ProposalId;

        super(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>